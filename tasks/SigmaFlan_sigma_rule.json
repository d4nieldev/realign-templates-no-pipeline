[
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: proxy\ndetection:\n    selection:\n        cs-method: 'GET'\n        cs-uri|all:\n            - '/cross.php?op='\n            - '&dt='\n            - '&uid='\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect potential C2 communication related to Devil Bait malware\n\nHere is how  the given sigma rule operates: In order to detect potential C2 communication related to Devil Bait malware, you should: focus on monitoring proxy logs for specific patterns of HTTP GET requests. Look for requests that include the following indicators in their URL: '/cross.php?op=', '&dt=', and '&uid='. These parameters within the requests are characteristic of communication patterns associated with Devil Bait malware, attempting to reach out to its command and control servers. This type of analysis is crucial for identifying potential breaches, as the detection of these specific request patterns, especially when they are found together in proxy logs, is a strong indicator of malicious activity linked to Devil Bait malware. False positives are considered unlikely due to the specificity of these patterns, indicating that such detection should be treated with a high level of concern.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: proxy\ndetection:\n    selection:\n        cs-method: 'GET'\n        cs-uri|all:\n            - '/cross.php?op='\n            - '&dt='\n            - '&uid='\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "potential C2 communication related to Devil Bait malware",
      "answer": "In order to detect potential C2 communication related to Devil Bait malware, you should: focus on monitoring proxy logs for specific patterns of HTTP GET requests. Look for requests that include the following indicators in their URL: '/cross.php?op=', '&dt=', and '&uid='. These parameters within the requests are characteristic of communication patterns associated with Devil Bait malware, attempting to reach out to its command and control servers. This type of analysis is crucial for identifying potential breaches, as the detection of these specific request patterns, especially when they are found together in proxy logs, is a strong indicator of malicious activity linked to Devil Bait malware. False positives are considered unlikely due to the specificity of these patterns, indicating that such detection should be treated with a high level of concern."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains|all:\n            - 'new-object '\n            - '-ComObject '\n            - '.application'\n            - '.RegisterXLL'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect Adversaries may abuse Microsoft Office add-ins to obtain persistence on a compromised system.\nOffice add-ins can be used to add functionality to Office programs\n\n\nHere is how  the given sigma rule operates: In order to detect adversaries who may abuse Microsoft Office add-ins to obtain persistence on a compromised system, where Office add-ins can be used to add functionality to Office programs, you should: Focus on monitoring PowerShell script logs within Windows environments, specifically targeting script block logging. Ensure that Script Block Logging is enabled to capture the execution of PowerShell commands and scripts. Look for the presence of specific PowerShell command patterns that involve creating new objects, especially COM objects, and actions related to Microsoft Office applications, such as registering an XLL add-in. These patterns are indicated by the combination of keywords 'new-object', '-ComObject', '.application', and '.RegisterXLL' in the ScriptBlockText field of the logs. This method of detecting suspicious activity is crucial since it can reveal attempts to leverage Office functionality for persistence by registering malicious add-ins, which is a technique adversaries might use to maintain control over a system. The importance of this detection is underscored by its high level of severity due to the potential for significant impact on the target system.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains|all:\n            - 'new-object '\n            - '-ComObject '\n            - '.application'\n            - '.RegisterXLL'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Adversaries may abuse Microsoft Office add-ins to obtain persistence on a compromised system.\nOffice add-ins can be used to add functionality to Office programs\n",
      "answer": "In order to detect adversaries who may abuse Microsoft Office add-ins to obtain persistence on a compromised system, where Office add-ins can be used to add functionality to Office programs, you should: Focus on monitoring PowerShell script logs within Windows environments, specifically targeting script block logging. Ensure that Script Block Logging is enabled to capture the execution of PowerShell commands and scripts. Look for the presence of specific PowerShell command patterns that involve creating new objects, especially COM objects, and actions related to Microsoft Office applications, such as registering an XLL add-in. These patterns are indicated by the combination of keywords 'new-object', '-ComObject', '.application', and '.RegisterXLL' in the ScriptBlockText field of the logs. This method of detecting suspicious activity is crucial since it can reveal attempts to leverage Office functionality for persistence by registering malicious add-ins, which is a technique adversaries might use to maintain control over a system. The importance of this detection is underscored by its high level of severity due to the potential for significant impact on the target system."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\lsass.exe'\n        Signed: 'false'\n    condition: selection\nfalsepositives:\n    - Valid user connecting using RDP\nlevel: medium\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect Loading unsigned image (DLL, EXE) into LSASS process\n\nHere is how  the given sigma rule operates: In order to load an unsigned image (DLL, EXE) into LSASS process, you should: monitor the image load activities on Windows systems, specifically focusing on instances where an image ends with the name '\\lsass.exe'. It's critical to filter for cases where the loaded image is not digitally signed, indicating it might be unauthorized or malicious. Be aware that legitimate scenarios such as a valid user connecting via Remote Desktop Protocol (RDP) may generate similar alerts, and these should be considered as potential false positives. The associated tactics and techniques for this kind of activity mainly fall under Credential Access through the use of LSASS memory, making this behavior suspicious and worth investigating, albeit with a medium level of alert severity.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\lsass.exe'\n        Signed: 'false'\n    condition: selection\nfalsepositives:\n    - Valid user connecting using RDP\nlevel: medium\n",
      "question": "Loading unsigned image (DLL, EXE) into LSASS process",
      "answer": "In order to load an unsigned image (DLL, EXE) into LSASS process, you should: monitor the image load activities on Windows systems, specifically focusing on instances where an image ends with the name '\\lsass.exe'. It's critical to filter for cases where the loaded image is not digitally signed, indicating it might be unauthorized or malicious. Be aware that legitimate scenarios such as a valid user connecting via Remote Desktop Protocol (RDP) may generate similar alerts, and these should be considered as potential false positives. The associated tactics and techniques for this kind of activity mainly fall under Credential Access through the use of LSASS memory, making this behavior suspicious and worth investigating, albeit with a medium level of alert severity."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    product: windows\n    service: security\n    definition: 'The Advanced Audit Policy setting Object Access > Audit Other Object Access Events has to be configured to allow this detection. We also recommend extracting the Command field from the embedded XML in the event data.'\ndetection:\n    selection:\n        EventID:\n            - 4699 # Task Deleted Event\n            - 4701 # Task Disabled Event\n        TaskName|contains:\n            # Add more important tasks\n            - '\\Windows\\SystemRestore\\SR'\n            - '\\Windows\\Windows Defender\\'\n            - '\\Windows\\BitLocker'\n            - '\\Windows\\WindowsBackup\\'\n            - '\\Windows\\WindowsUpdate\\'\n            - '\\Windows\\UpdateOrchestrator\\Schedule'\n            - '\\Windows\\ExploitGuard'\n    filter_sys_username:\n        EventID: 4699\n        SubjectUserName|endswith: '$'  # False positives during upgrades of Defender, where its tasks get removed and added\n        TaskName|contains: '\\Windows\\Windows Defender\\'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect when adversaries stop services or processes by deleting or disabling their respective scheduled tasks in order to conduct data destructive activities\n\nHere is how  the given sigma rule operates: In order to detect when adversaries stop services or processes by deleting or disabling their respective scheduled tasks in order to conduct data destructive activities, you should focus on monitoring specific Windows Security log events that are indicative of such behavior. This involves tracking events with IDs 4699, which signifies a task deletion, and 4701, indicating a task has been disabled. The monitoring should be specifically attentive to tasks related to critical system functions such as System Restore, Windows Defender, BitLocker, Windows Backup, Windows Update, Update Orchestrator Schedule, and ExploitGuard. These tasks are essential for system restoration, security, encryption, backup, updates, and exploitation prevention. Therefore, any deletion or disabling of these tasks could signal an attempt to weaken the system's defenses, making it more vulnerable to attacks or data loss.\n\nIt's also recommended to consider the context in which these tasks are being deleted or disabled, particularly focusing on the usernames involved in these actions. A special consideration is applied to exclude events related to automated system updates or maintenance, especially for Windows Defender tasks, whereby the system's username ending with a \u2018$\u2019 symbol could be involved in the task's deletion, which might not necessarily indicate malicious activity.\n\nThis detection strategy requires the Advanced Audit Policy setting for Object Access > Audit Other Object Access Events to be configured appropriately. Additionally, extracting and analyzing the Command field from the embedded XML in the event data could provide further insights into the activities being conducted.\n\nIn handling potential false positives, it's acknowledged that not all detected activities may be malicious in nature and could stem from unknown causes; thus, a high level of scrutiny and contextual analysis is required when interpreting these events. The overarching goal is to swiftly identify and respond to any unauthorized attempts to stop or disrupt critical system services and processes through the manipulation of scheduled tasks, which could be a precursor to more severe data destructive activities.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\n    definition: 'The Advanced Audit Policy setting Object Access > Audit Other Object Access Events has to be configured to allow this detection. We also recommend extracting the Command field from the embedded XML in the event data.'\ndetection:\n    selection:\n        EventID:\n            - 4699 # Task Deleted Event\n            - 4701 # Task Disabled Event\n        TaskName|contains:\n            # Add more important tasks\n            - '\\Windows\\SystemRestore\\SR'\n            - '\\Windows\\Windows Defender\\'\n            - '\\Windows\\BitLocker'\n            - '\\Windows\\WindowsBackup\\'\n            - '\\Windows\\WindowsUpdate\\'\n            - '\\Windows\\UpdateOrchestrator\\Schedule'\n            - '\\Windows\\ExploitGuard'\n    filter_sys_username:\n        EventID: 4699\n        SubjectUserName|endswith: '$'  # False positives during upgrades of Defender, where its tasks get removed and added\n        TaskName|contains: '\\Windows\\Windows Defender\\'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "when adversaries stop services or processes by deleting or disabling their respective scheduled tasks in order to conduct data destructive activities",
      "answer": "In order to detect when adversaries stop services or processes by deleting or disabling their respective scheduled tasks in order to conduct data destructive activities, you should focus on monitoring specific Windows Security log events that are indicative of such behavior. This involves tracking events with IDs 4699, which signifies a task deletion, and 4701, indicating a task has been disabled. The monitoring should be specifically attentive to tasks related to critical system functions such as System Restore, Windows Defender, BitLocker, Windows Backup, Windows Update, Update Orchestrator Schedule, and ExploitGuard. These tasks are essential for system restoration, security, encryption, backup, updates, and exploitation prevention. Therefore, any deletion or disabling of these tasks could signal an attempt to weaken the system's defenses, making it more vulnerable to attacks or data loss.\n\nIt's also recommended to consider the context in which these tasks are being deleted or disabled, particularly focusing on the usernames involved in these actions. A special consideration is applied to exclude events related to automated system updates or maintenance, especially for Windows Defender tasks, whereby the system's username ending with a \u2018$\u2019 symbol could be involved in the task's deletion, which might not necessarily indicate malicious activity.\n\nThis detection strategy requires the Advanced Audit Policy setting for Object Access > Audit Other Object Access Events to be configured appropriately. Additionally, extracting and analyzing the Command field from the embedded XML in the event data could provide further insights into the activities being conducted.\n\nIn handling potential false positives, it's acknowledged that not all detected activities may be malicious in nature and could stem from unknown causes; thus, a high level of scrutiny and contextual analysis is required when interpreting these events. The overarching goal is to swiftly identify and respond to any unauthorized attempts to stop or disrupt critical system services and processes through the manipulation of scheduled tasks, which could be a precursor to more severe data destructive activities."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID:\n            - 4625\n            - 4776\n        Status:\n            - '0xC0000072'  # User logon to account disabled by administrator\n            - '0xC000006F'  # User logon outside authorized hours\n            - '0xC0000070'  # User logon from unauthorized workstation\n            - '0xC0000413'  # Logon Failure: The machine you are logging onto is protected by an authentication firewall. The specified account is not allowed to authenticate to the machine\n            - '0xC000018C'  # The logon request failed because the trust relationship between the primary domain and the trusted domain failed\n            - '0xC000015B'  # The user has not been granted the requested logon type (aka logon right) at this machine\n    filter:\n        SubjectUserSid: 'S-1-0-0'\n    condition: selection and not filter\nfalsepositives:\n    - User using a disabled account\nlevel: medium\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect This method uses uncommon error codes on failed logons to determine suspicious activity and tampering with accounts that have been disabled or somehow restricted.\n\nHere is how  the given sigma rule operates: In order to detect suspicious activity and tampering with accounts that have been disabled or somehow restricted, you should monitor Windows security service logs for specific failed logon events and their associated error codes. Focus on the detection of events with ID 4625 and 4776, which indicate a failed logon attempt. The key to identifying potentially malicious behavior lies in paying attention to the following error codes: \n\n- '0xC0000072' indicating a user attempted to logon to an account that has been disabled by an administrator.\n- '0xC000006F' signifying a user tried logging on outside of the authorized hours.\n- '0xC0000070' suggesting a logon attempt from an unauthorized workstation.\n- '0xC0000413' indicating a logon failure due to the machine being protected by an authentication firewall, and the specified account is not allowed to authenticate to the machine.\n- '0xC000018C' showing the logon request failed because the trust relationship between the primary domain and the trusted domain failed.\n- '0xC000015B' demonstrating the user has not been granted the requested logon type at the machine.\n\nAdditionally, it's important to filter out any events where the 'SubjectUserSid' is 'S-1-0-0', as this might reduce the number of false positives, such as legitimate user activities using a disabled account. Keep an eye out for these specific error codes in your security logs because they serve as strong indicators of attempted unauthorized access, potentially revealing malicious intent or insider threats attempting to bypass security measures. This practice is aligned with various MITRE ATT&CK techniques focusing on Credential Access and Initial Access strategies, helping to detect and mitigate attempts at exploiting user accounts and logon procedures.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID:\n            - 4625\n            - 4776\n        Status:\n            - '0xC0000072'  # User logon to account disabled by administrator\n            - '0xC000006F'  # User logon outside authorized hours\n            - '0xC0000070'  # User logon from unauthorized workstation\n            - '0xC0000413'  # Logon Failure: The machine you are logging onto is protected by an authentication firewall. The specified account is not allowed to authenticate to the machine\n            - '0xC000018C'  # The logon request failed because the trust relationship between the primary domain and the trusted domain failed\n            - '0xC000015B'  # The user has not been granted the requested logon type (aka logon right) at this machine\n    filter:\n        SubjectUserSid: 'S-1-0-0'\n    condition: selection and not filter\nfalsepositives:\n    - User using a disabled account\nlevel: medium\n",
      "question": "This method uses uncommon error codes on failed logons to determine suspicious activity and tampering with accounts that have been disabled or somehow restricted.",
      "answer": "In order to detect suspicious activity and tampering with accounts that have been disabled or somehow restricted, you should monitor Windows security service logs for specific failed logon events and their associated error codes. Focus on the detection of events with ID 4625 and 4776, which indicate a failed logon attempt. The key to identifying potentially malicious behavior lies in paying attention to the following error codes: \n\n- '0xC0000072' indicating a user attempted to logon to an account that has been disabled by an administrator.\n- '0xC000006F' signifying a user tried logging on outside of the authorized hours.\n- '0xC0000070' suggesting a logon attempt from an unauthorized workstation.\n- '0xC0000413' indicating a logon failure due to the machine being protected by an authentication firewall, and the specified account is not allowed to authenticate to the machine.\n- '0xC000018C' showing the logon request failed because the trust relationship between the primary domain and the trusted domain failed.\n- '0xC000015B' demonstrating the user has not been granted the requested logon type at the machine.\n\nAdditionally, it's important to filter out any events where the 'SubjectUserSid' is 'S-1-0-0', as this might reduce the number of false positives, such as legitimate user activities using a disabled account. Keep an eye out for these specific error codes in your security logs because they serve as strong indicators of attempted unauthorized access, potentially revealing malicious intent or insider threats attempting to bypass security measures. This practice is aligned with various MITRE ATT&CK techniques focusing on Credential Access and Initial Access strategies, helping to detect and mitigate attempts at exploiting user accounts and logon procedures."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    product: windows\n    category: pipe_created\n    definition: 'Note that you have to configure logging for Named Pipe Events in Sysmon config (Event ID 17 and Event ID 18). The basic configuration is in popular sysmon configuration (https://github.com/SwiftOnSecurity/sysmon-config), but it is worth verifying. You can also use other repo, e.g. https://github.com/Neo23x0/sysmon-config, https://github.com/olafhartong/sysmon-modular. How to test detection? You can check powershell script from this site https://svch0st.medium.com/guide-to-named-pipes-and-hunting-for-cobalt-strike-pipes-dc46b2c5f575'\ndetection:\n    selection:\n        PipeName:\n            - '\\atctl'       # https://www.virustotal.com/#/file/a4ddb2664a6c87a1d3c5da5a5a32a5df9a0b0c8f2e951811bd1ec1d44d42ccf1/detection\n            - '\\userpipe'    # ruag apt case\n            - '\\iehelper'    # ruag apt case\n            - '\\sdlrpc'      # project cobra https://www.gdatasoftware.com/blog/2015/01/23926-analysis-of-project-cobra\n            - '\\comnap'      # https://www.gdatasoftware.com/blog/2015/01/23926-analysis-of-project-cobra\n            # - '\\rpc'  # may cause too many false positives : http://kb.palisade.com/index.php?pg=kb.page&id=483\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: critical\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect named pipe used by Turla group samples\n\nHere is how  the given sigma rule operates: In order to detect a named pipe used by Turla group samples, you should: Monitor the creation of named pipes in the Windows environment, particularly by focusing on Sysmon events related to the creation of pipes (Event ID 17 and 18). This monitoring is essential for logging and detecting potential Turla group cyber-attack activities. Specifically, you should be vigilant for the creation of named pipes with the following names: '\\atctl', '\\userpipe', '\\iehelper', '\\sdlrpc', and '\\comnap'. These specific pipe names have been associated with malware and cyber-attack campaigns carried out by the Turla group, known for sophisticated cyber espionage. Be aware that adding other common named pipes such as '\\rpc' to your detection mechanisms might lead to a higher rate of false positives. The level of alert for such detections is considered critical, indicating the need for immediate investigation when such pipe creation events are detected. This detection focuses on identifying potential malicious activity early by monitoring for specific indicators of compromise tied to known attack patterns by advanced persistent threats like the Turla group.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: pipe_created\n    definition: 'Note that you have to configure logging for Named Pipe Events in Sysmon config (Event ID 17 and Event ID 18). The basic configuration is in popular sysmon configuration (https://github.com/SwiftOnSecurity/sysmon-config), but it is worth verifying. You can also use other repo, e.g. https://github.com/Neo23x0/sysmon-config, https://github.com/olafhartong/sysmon-modular. How to test detection? You can check powershell script from this site https://svch0st.medium.com/guide-to-named-pipes-and-hunting-for-cobalt-strike-pipes-dc46b2c5f575'\ndetection:\n    selection:\n        PipeName:\n            - '\\atctl'       # https://www.virustotal.com/#/file/a4ddb2664a6c87a1d3c5da5a5a32a5df9a0b0c8f2e951811bd1ec1d44d42ccf1/detection\n            - '\\userpipe'    # ruag apt case\n            - '\\iehelper'    # ruag apt case\n            - '\\sdlrpc'      # project cobra https://www.gdatasoftware.com/blog/2015/01/23926-analysis-of-project-cobra\n            - '\\comnap'      # https://www.gdatasoftware.com/blog/2015/01/23926-analysis-of-project-cobra\n            # - '\\rpc'  # may cause too many false positives : http://kb.palisade.com/index.php?pg=kb.page&id=483\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: critical\n",
      "question": "named pipe used by Turla group samples",
      "answer": "In order to detect a named pipe used by Turla group samples, you should: Monitor the creation of named pipes in the Windows environment, particularly by focusing on Sysmon events related to the creation of pipes (Event ID 17 and 18). This monitoring is essential for logging and detecting potential Turla group cyber-attack activities. Specifically, you should be vigilant for the creation of named pipes with the following names: '\\atctl', '\\userpipe', '\\iehelper', '\\sdlrpc', and '\\comnap'. These specific pipe names have been associated with malware and cyber-attack campaigns carried out by the Turla group, known for sophisticated cyber espionage. Be aware that adding other common named pipes such as '\\rpc' to your detection mechanisms might lead to a higher rate of false positives. The level of alert for such detections is considered critical, indicating the need for immediate investigation when such pipe creation events are detected. This detection focuses on identifying potential malicious activity early by monitoring for specific indicators of compromise tied to known attack patterns by advanced persistent threats like the Turla group."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting new process creation using WMIC via the \"process call create\" flag.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect new process creation using WMIC via the \"process call create\" flag, you should: focus on process creation events within Windows environments. Specifically, the detection mechanism centers on identifying instances where the WMIC (Windows Management Instrumentation Command-line) utility, recognizable either through the image file ending with '\\wmic.exe' or having an original file name of 'wmic.exe', is employed to initiate a new process. This activity is typically signified by the command line arguments containing the keywords 'process', 'call', and 'create' concurrently. Such detection criteria aim to flag potentially malicious behavior where WMIC is misused to launch new processes, a tactic often leveraged by attackers to execute code or scripts. It is important to note that while this detection method is of medium sensitivity, it might also encounter scenarios where its findings are not indicative of malicious activity, thus necessitating further investigation to ascertain the context of the detected events.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\wmic.exe'\n        - OriginalFileName: 'wmic.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'process'\n            - 'call'\n            - 'create'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\wmic.exe'\n        - OriginalFileName: 'wmic.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'process'\n            - 'call'\n            - 'create'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "new process creation using WMIC via the \"process call create\" flag",
      "answer": "In order to detect new process creation using WMIC via the \"process call create\" flag, you should: focus on process creation events within Windows environments. Specifically, the detection mechanism centers on identifying instances where the WMIC (Windows Management Instrumentation Command-line) utility, recognizable either through the image file ending with '\\wmic.exe' or having an original file name of 'wmic.exe', is employed to initiate a new process. This activity is typically signified by the command line arguments containing the keywords 'process', 'call', and 'create' concurrently. Such detection criteria aim to flag potentially malicious behavior where WMIC is misused to launch new processes, a tactic often leveraged by attackers to execute code or scripts. It is important to note that while this detection method is of medium sensitivity, it might also encounter scenarios where its findings are not indicative of malicious activity, thus necessitating further investigation to ascertain the context of the detected events."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            # Covers: --remote-debugging-address, --remote-debugging-port, --remote-debugging-socket-name, --remote-debugging-pipe....etc\n            - '--remote-debugging-'\n            - '--user-data-dir'\n            - '--headless'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect chromium based browsers starting in headless and debugging mode and pointing to a user profile. This could be a sign of data stealing or remote control\n\nHere is how  the given sigma rule operates: In order to detect chromium based browsers starting in headless and debugging mode and pointing to a user profile, which could be a sign of data stealing or remote control, you should: Monitor process creation events on Windows systems for the execution of commands that include all the following flags: `--remote-debugging-` (which indicates the initiation of debugging features that could be used for remote control), `--user-data-dir` (pointing towards the usage of a specific user profile, potentially indicating an attempt to access or steal data from this profile), and `--headless` (implying the browser is running in a mode without a graphical user interface, often used for automation but in this context could be for malicious purposes). The detection is considered highly reliable, but be aware that there might be unknown scenarios leading to false positives.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            # Covers: --remote-debugging-address, --remote-debugging-port, --remote-debugging-socket-name, --remote-debugging-pipe....etc\n            - '--remote-debugging-'\n            - '--user-data-dir'\n            - '--headless'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "chromium based browsers starting in headless and debugging mode and pointing to a user profile. This could be a sign of data stealing or remote control",
      "answer": "In order to detect chromium based browsers starting in headless and debugging mode and pointing to a user profile, which could be a sign of data stealing or remote control, you should: Monitor process creation events on Windows systems for the execution of commands that include all the following flags: `--remote-debugging-` (which indicates the initiation of debugging features that could be used for remote control), `--user-data-dir` (pointing towards the usage of a specific user profile, potentially indicating an attempt to access or steal data from this profile), and `--headless` (implying the browser is running in a mode without a graphical user interface, often used for automation but in this context could be for malicious purposes). The detection is considered highly reliable, but be aware that there might be unknown scenarios leading to false positives."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting when the \"index\" value of a scheduled task is removed or deleted from the registry. Which effectively hides it from any tooling such as \"schtasks /query\".\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when the \"index\" value of a scheduled task is removed or deleted from the registry, effectively hiding it from any tooling such as \"schtasks /query\", you should: Look for events where a registry key deletion occurs within the Windows operating system, specifically targeting registry deletions. The focus should be on detecting events tagged with an EventType of \"DeleteKey\" that involve the removal of registry keys. These keys are identified by their path, including '\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Schedule\\TaskCache\\Tree\\' along with the specific mention of 'Index' within the targeted object. This detection aims at identifying malicious attempts to manipulate or hide scheduled tasks by removing their index values from the Windows registry, bypassing typical administrative tooling that could reveal the presence of such tasks. It is important to note that there could be unknown false positives, and the urgency level associated with this type of detection is considered medium. This monitoring strategy is aligned with identifying techniques that pertain to evasion and manipulation of system monitoring mechanisms.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: registry_delete\ndetection:\n    selection:\n        EventType: DeleteKey\n        TargetObject|contains|all:\n            - '\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Schedule\\TaskCache\\Tree\\'\n            - 'Index'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: registry_delete\ndetection:\n    selection:\n        EventType: DeleteKey\n        TargetObject|contains|all:\n            - '\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Schedule\\TaskCache\\Tree\\'\n            - 'Index'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "when the \"index\" value of a scheduled task is removed or deleted from the registry. Which effectively hides it from any tooling such as \"schtasks /query\"",
      "answer": "In order to detect when the \"index\" value of a scheduled task is removed or deleted from the registry, effectively hiding it from any tooling such as \"schtasks /query\", you should: Look for events where a registry key deletion occurs within the Windows operating system, specifically targeting registry deletions. The focus should be on detecting events tagged with an EventType of \"DeleteKey\" that involve the removal of registry keys. These keys are identified by their path, including '\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Schedule\\TaskCache\\Tree\\' along with the specific mention of 'Index' within the targeted object. This detection aims at identifying malicious attempts to manipulate or hide scheduled tasks by removing their index values from the Windows registry, bypassing typical administrative tooling that could reveal the presence of such tasks. It is important to note that there could be unknown false positives, and the urgency level associated with this type of detection is considered medium. This monitoring strategy is aligned with identifying techniques that pertain to evasion and manipulation of system monitoring mechanisms."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    product: windows\n    service: codeintegrity-operational\ndetection:\n    selection:\n        EventID:\n            - 3033 # Code Integrity determined that a process (%4) attempted to load %2 that did not meet the %5 signing level requirements.\n            - 3034 # Code Integrity determined that a process (%4) attempted to load %2 that did not meet the %5 signing level requirements or violated code integrity policy. However, due to code integrity auditing policy, the image was allowed to load.\n    filter_optional_dtrace:\n        # Example: Code Integrity determined that a process (\\Device\\HarddiskVolume5\\Windows\\System32\\svchost.exe) attempted to load \\Device\\HarddiskVolume5\\Program Files\\DTrace\\dtrace.dll that did not meet the Windows signing level requirements.\n        FileNameBuffer|endswith: '\\Program Files\\DTrace\\dtrace.dll'\n        ProcessNameBuffer|endswith: '\\Windows\\System32\\svchost.exe'\n        RequestedPolicy: 12\n        ValidatedPolicy: 1\n    filter_optional_av_generic:\n        # Example: Code Integrity determined that a process (\\Device\\HarddiskVolume5\\ProgramData\\Microsoft\\Windows Defender\\Platform\\4.18.2207.7-0\\MsMpEng.exe) attempted to load \\Device\\HarddiskVolume5\\Windows\\System32\\DriverStore\\FileRepository\\iigd_dch.inf_amd64_36fb67bd6dbd887d\\igd10iumd64.dll that did not meet the Custom 3 / Antimalware signing level requirements.\n        FileNameBuffer|contains: '\\Windows\\System32\\DriverStore\\FileRepository\\'\n        FileNameBuffer|endswith: '\\igd10iumd64.dll'\n        # ProcessNameBuffer is AV products\n        RequestedPolicy: 7\n        ValidatedPolicy: 1\n    filter_optional_electron_based_app:\n        # Example: Code Integrity determined that a process (\\Device\\HarddiskVolume5\\Users\\user\\AppData\\Local\\Keybase\\Gui\\Keybase.exe) attempted to load \\Device\\HarddiskVolume5\\Windows\\System32\\nvspcap64.dll that did not meet the Microsoft signing level requirements.\n        FileNameBuffer|endswith: '\\Windows\\System32\\nvspcap64.dll'\n        ProcessNameBuffer|endswith:\n            - '\\AppData\\Local\\Keybase\\Gui\\Keybase.exe'\n            - '\\Microsoft\\Teams\\stage\\Teams.exe'\n        RequestedPolicy: 8\n        ValidatedPolicy: 1\n    filter_optional_bonjour:\n        FileNameBuffer|endswith: '\\Program Files\\Bonjour\\mdnsNSP.dll'\n        ProcessNameBuffer|endswith:\n            - '\\Windows\\System32\\svchost.exe'\n            - '\\Windows\\System32\\SIHClient.exe'\n        RequestedPolicy:\n            - 8\n            - 12\n        ValidatedPolicy: 1\n    filter_optional_msoffice:\n        FileNameBuffer|contains: '\\Microsoft Office\\root\\vfs\\ProgramFilesCommonX64\\Microsoft Shared\\OFFICE'\n        FileNameBuffer|endswith: '\\MSOXMLMF.DLL'\n        # ProcessNameBuffer is AV products\n        RequestedPolicy: 7\n        ValidatedPolicy: 1\n    filter_optional_slack:\n        # Example: https://user-images.githubusercontent.com/112784902/197407680-96d4b662-8a59-4289-a483-b24d630ac2a9.png\n        # Even though it's the same DLL as the one used in the electron based app filter. We need to do a separate selection due to slack's folder naming convention with the version number :)\n        FileNameBuffer|endswith: '\\Windows\\System32\\nvspcap64.dll'\n        ProcessNameBuffer|contains: '\\AppData\\Local\\slack\\app-'\n        ProcessNameBuffer|endswith: '\\slack.exe'\n        RequestedPolicy: 8\n        ValidatedPolicy: 1\n    filter_optional_firefox:\n        # Example: https://user-images.githubusercontent.com/62423083/197451483-70e89010-ed96-4357-8079-b5a061a239d6.png\n        FileNameBuffer|endswith:\n            - '\\Mozilla Firefox\\mozavcodec.dll'\n            - '\\Mozilla Firefox\\mozavutil.dll'\n        ProcessNameBuffer|endswith: '\\Mozilla Firefox\\firefox.exe'\n        RequestedPolicy: 8\n    filter_optional_avast:\n        FileNameBuffer|endswith:\n            - '\\Program Files\\Avast Software\\Avast\\aswAMSI.dll'\n            - '\\Program Files (x86)\\Avast Software\\Avast\\aswAMSI.dll'\n        RequestedPolicy:\n            - 8\n            - 12\n        ValidatedPolicy: 1\n    filter_main_gac:\n        # Filtering the path containing this string because of multiple possible DLLs in that location\n        FileNameBuffer|contains: '\\Windows\\assembly\\GAC\\'\n        ProcessNameBuffer|endswith: '\\mscorsvw.exe'\n        ProcessNameBuffer|contains: '\\Windows\\Microsoft.NET\\'\n        RequestedPolicy: 8\n        ValidatedPolicy:\n            - 1\n            - 2\n    filter_optional_google_drive:\n        # Example: \\Program Files\\Google\\Drive File Stream\\67.0.2.0\\crashpad_handler.exe\n        FileNameBuffer|contains: '\\Program Files\\Google\\Drive File Stream\\'\n        FileNameBuffer|endswith: '\\crashpad_handler.exe'\n        ProcessNameBuffer|endswith: '\\Windows\\ImmersiveControlPanel\\SystemSettings.exe'\n        RequestedPolicy: 8\n        ValidatedPolicy: 1\n    filter_optional_trend_micro:\n        FileNameBuffer|endswith: '\\Trend Micro\\Client Server Security Agent\\perficrcperfmonmgr.dll'\n        RequestedPolicy: 8\n        ValidatedPolicy: 1\n    condition: selection and not 1 of filter_main_* and not 1 of filter_optional_*\nfalsepositives:\n    - Antivirus and other third party products. Apply additional filters accordingly\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect attempted file load events that did not meet the signing level requirements. It often means the file's signature is revoked or a signature with the Lifetime Signing EKU has expired.\nThis event is best correlated with EID 3089 to determine the error of the validation.\n\n\nHere is how  the given sigma rule operates: In order to detect attempted file load events that did not meet the signing level requirements, indicating that the file's signature is revoked or a signature with the Lifetime Signing EKU has expired, you should monitor code integrity events in the Windows Code Integrity operational log. This entails tracking specific Event IDs that signify an attempt by a process to load a file not meeting the required signing level or violating code integrity policy. The events of interest are Event ID 3033, indicating a failed attempt due to signing level requirements, and Event ID 3034, which shows a failed attempt but the image was allowed to load due to auditing policy.\n\nTo refine detection and reduce false positives, several optional filters exclude known benign occurrences related to specific processes and files. For instance, detections involving the DTrace tool, antivirus software processes like those of Windows Defender or Avast, electron-based applications, Microsoft Office components, and common third-party applications like Slack or Firefox have their own set of conditions based on file names or processes involved. This refining process relies on matching file and process names, requested and validated signing policies to identify suspicious activities correctly. Additionally, the Global Assembly Cache (GAC) is monitored for loads by the .NET optimization service, considering certain policy conditions to filter out standard operations from potential threats.\n\nIt is crucial to apply additional filters to account for legitimate activities by antivirus and third-party products to mitigate false positives. High-level monitoring coupled with detailed exclusion criteria ensures effective identification of malicious attempts to bypass code signing verification processes, crucial for maintaining system integrity and security. This detection mechanism is particularly beneficial when correlated with Event ID 3089 to understand the specific cause of the signature validation failure, enhancing incident response and forensic capabilities.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: codeintegrity-operational\ndetection:\n    selection:\n        EventID:\n            - 3033 # Code Integrity determined that a process (%4) attempted to load %2 that did not meet the %5 signing level requirements.\n            - 3034 # Code Integrity determined that a process (%4) attempted to load %2 that did not meet the %5 signing level requirements or violated code integrity policy. However, due to code integrity auditing policy, the image was allowed to load.\n    filter_optional_dtrace:\n        # Example: Code Integrity determined that a process (\\Device\\HarddiskVolume5\\Windows\\System32\\svchost.exe) attempted to load \\Device\\HarddiskVolume5\\Program Files\\DTrace\\dtrace.dll that did not meet the Windows signing level requirements.\n        FileNameBuffer|endswith: '\\Program Files\\DTrace\\dtrace.dll'\n        ProcessNameBuffer|endswith: '\\Windows\\System32\\svchost.exe'\n        RequestedPolicy: 12\n        ValidatedPolicy: 1\n    filter_optional_av_generic:\n        # Example: Code Integrity determined that a process (\\Device\\HarddiskVolume5\\ProgramData\\Microsoft\\Windows Defender\\Platform\\4.18.2207.7-0\\MsMpEng.exe) attempted to load \\Device\\HarddiskVolume5\\Windows\\System32\\DriverStore\\FileRepository\\iigd_dch.inf_amd64_36fb67bd6dbd887d\\igd10iumd64.dll that did not meet the Custom 3 / Antimalware signing level requirements.\n        FileNameBuffer|contains: '\\Windows\\System32\\DriverStore\\FileRepository\\'\n        FileNameBuffer|endswith: '\\igd10iumd64.dll'\n        # ProcessNameBuffer is AV products\n        RequestedPolicy: 7\n        ValidatedPolicy: 1\n    filter_optional_electron_based_app:\n        # Example: Code Integrity determined that a process (\\Device\\HarddiskVolume5\\Users\\user\\AppData\\Local\\Keybase\\Gui\\Keybase.exe) attempted to load \\Device\\HarddiskVolume5\\Windows\\System32\\nvspcap64.dll that did not meet the Microsoft signing level requirements.\n        FileNameBuffer|endswith: '\\Windows\\System32\\nvspcap64.dll'\n        ProcessNameBuffer|endswith:\n            - '\\AppData\\Local\\Keybase\\Gui\\Keybase.exe'\n            - '\\Microsoft\\Teams\\stage\\Teams.exe'\n        RequestedPolicy: 8\n        ValidatedPolicy: 1\n    filter_optional_bonjour:\n        FileNameBuffer|endswith: '\\Program Files\\Bonjour\\mdnsNSP.dll'\n        ProcessNameBuffer|endswith:\n            - '\\Windows\\System32\\svchost.exe'\n            - '\\Windows\\System32\\SIHClient.exe'\n        RequestedPolicy:\n            - 8\n            - 12\n        ValidatedPolicy: 1\n    filter_optional_msoffice:\n        FileNameBuffer|contains: '\\Microsoft Office\\root\\vfs\\ProgramFilesCommonX64\\Microsoft Shared\\OFFICE'\n        FileNameBuffer|endswith: '\\MSOXMLMF.DLL'\n        # ProcessNameBuffer is AV products\n        RequestedPolicy: 7\n        ValidatedPolicy: 1\n    filter_optional_slack:\n        # Example: https://user-images.githubusercontent.com/112784902/197407680-96d4b662-8a59-4289-a483-b24d630ac2a9.png\n        # Even though it's the same DLL as the one used in the electron based app filter. We need to do a separate selection due to slack's folder naming convention with the version number :)\n        FileNameBuffer|endswith: '\\Windows\\System32\\nvspcap64.dll'\n        ProcessNameBuffer|contains: '\\AppData\\Local\\slack\\app-'\n        ProcessNameBuffer|endswith: '\\slack.exe'\n        RequestedPolicy: 8\n        ValidatedPolicy: 1\n    filter_optional_firefox:\n        # Example: https://user-images.githubusercontent.com/62423083/197451483-70e89010-ed96-4357-8079-b5a061a239d6.png\n        FileNameBuffer|endswith:\n            - '\\Mozilla Firefox\\mozavcodec.dll'\n            - '\\Mozilla Firefox\\mozavutil.dll'\n        ProcessNameBuffer|endswith: '\\Mozilla Firefox\\firefox.exe'\n        RequestedPolicy: 8\n    filter_optional_avast:\n        FileNameBuffer|endswith:\n            - '\\Program Files\\Avast Software\\Avast\\aswAMSI.dll'\n            - '\\Program Files (x86)\\Avast Software\\Avast\\aswAMSI.dll'\n        RequestedPolicy:\n            - 8\n            - 12\n        ValidatedPolicy: 1\n    filter_main_gac:\n        # Filtering the path containing this string because of multiple possible DLLs in that location\n        FileNameBuffer|contains: '\\Windows\\assembly\\GAC\\'\n        ProcessNameBuffer|endswith: '\\mscorsvw.exe'\n        ProcessNameBuffer|contains: '\\Windows\\Microsoft.NET\\'\n        RequestedPolicy: 8\n        ValidatedPolicy:\n            - 1\n            - 2\n    filter_optional_google_drive:\n        # Example: \\Program Files\\Google\\Drive File Stream\\67.0.2.0\\crashpad_handler.exe\n        FileNameBuffer|contains: '\\Program Files\\Google\\Drive File Stream\\'\n        FileNameBuffer|endswith: '\\crashpad_handler.exe'\n        ProcessNameBuffer|endswith: '\\Windows\\ImmersiveControlPanel\\SystemSettings.exe'\n        RequestedPolicy: 8\n        ValidatedPolicy: 1\n    filter_optional_trend_micro:\n        FileNameBuffer|endswith: '\\Trend Micro\\Client Server Security Agent\\perficrcperfmonmgr.dll'\n        RequestedPolicy: 8\n        ValidatedPolicy: 1\n    condition: selection and not 1 of filter_main_* and not 1 of filter_optional_*\nfalsepositives:\n    - Antivirus and other third party products. Apply additional filters accordingly\nlevel: high\n",
      "question": "attempted file load events that did not meet the signing level requirements. It often means the file's signature is revoked or a signature with the Lifetime Signing EKU has expired.\nThis event is best correlated with EID 3089 to determine the error of the validation.\n",
      "answer": "In order to detect attempted file load events that did not meet the signing level requirements, indicating that the file's signature is revoked or a signature with the Lifetime Signing EKU has expired, you should monitor code integrity events in the Windows Code Integrity operational log. This entails tracking specific Event IDs that signify an attempt by a process to load a file not meeting the required signing level or violating code integrity policy. The events of interest are Event ID 3033, indicating a failed attempt due to signing level requirements, and Event ID 3034, which shows a failed attempt but the image was allowed to load due to auditing policy.\n\nTo refine detection and reduce false positives, several optional filters exclude known benign occurrences related to specific processes and files. For instance, detections involving the DTrace tool, antivirus software processes like those of Windows Defender or Avast, electron-based applications, Microsoft Office components, and common third-party applications like Slack or Firefox have their own set of conditions based on file names or processes involved. This refining process relies on matching file and process names, requested and validated signing policies to identify suspicious activities correctly. Additionally, the Global Assembly Cache (GAC) is monitored for loads by the .NET optimization service, considering certain policy conditions to filter out standard operations from potential threats.\n\nIt is crucial to apply additional filters to account for legitimate activities by antivirus and third-party products to mitigate false positives. High-level monitoring coupled with detailed exclusion criteria ensures effective identification of malicious attempts to bypass code signing verification processes, crucial for maintaining system integrity and security. This detection mechanism is particularly beneficial when correlated with Event ID 3089 to understand the specific cause of the signature validation failure, enhancing incident response and forensic capabilities."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting usage of \"query.exe\" a system binary to exfil information such as \"sessions\" and \"processes\" for later use.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect usage of \"query.exe\" a system binary to exfil information such as \"sessions\" and \"processes\" for later use, you should: focus on monitoring the creation of processes within Windows environments. Specifically, look out for instances where the process image name ends with ':\\Windows\\System32\\query.exe'. This particular executable is a system binary, and when its command line includes activities like redirecting session or process information (indicated through 'session >' or 'process >'), it might be utilized to extract sensitive information from the system. The observation of such activities, without known legitimate purposes, should raise alerts for potential exfiltration efforts. This detection approach has a medium level of confidence, acknowledging that there might be unknown legitimate uses of these command line patterns that could lead to false positives.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: ':\\Windows\\System32\\query.exe'\n        CommandLine|contains:\n            - 'session >'\n            - 'process >'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: ':\\Windows\\System32\\query.exe'\n        CommandLine|contains:\n            - 'session >'\n            - 'process >'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "usage of \"query.exe\" a system binary to exfil information such as \"sessions\" and \"processes\" for later use",
      "answer": "In order to detect usage of \"query.exe\" a system binary to exfil information such as \"sessions\" and \"processes\" for later use, you should: focus on monitoring the creation of processes within Windows environments. Specifically, look out for instances where the process image name ends with ':\\Windows\\System32\\query.exe'. This particular executable is a system binary, and when its command line includes activities like redirecting session or process information (indicated through 'session >' or 'process >'), it might be utilized to extract sensitive information from the system. The observation of such activities, without known legitimate purposes, should raise alerts for potential exfiltration efforts. This detection approach has a medium level of confidence, acknowledging that there might be unknown legitimate uses of these command line patterns that could lead to false positives."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting exploitation of Microsoft Exchange ProxyToken vulnerability as described in CVE-2021-33766.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the exploitation of Microsoft Exchange ProxyToken vulnerability as described in CVE-2021-33766, you should monitor web server logs for specific patterns that indicate an attempted exploitation. Look out for HTTP POST requests exhibiting one of two specific characteristic patterns in their URI queries, each of which signals a potentially malicious attempt to exploit this vulnerability.\n\nFirst, pay attention to POST requests where the query contains '/ecp/' alongside '/RulesEditor/InboxRules.svc/NewObject', and the server's response status code is 500. This specific pattern could indicate an attempt to exploit the vulnerability by interacting with the Exchange Control Panel (ECP) in a manner that results in an error response from the server, which is typical of exploitation attempts that do not fully succeed or trigger an unexpected condition on the server.\n\nSecond, look for POST requests that include 'SecurityToken=' and '/ecp/' in the URI query, also resulting in a status code of 500 from the server. This pattern suggests an attempt to use a security token inappropriately within the context of the ECP, another red flag for exploitation attempts.\n\nWhenever such requests are identified, important information such as the client's IP address (c-ip) and DNS name (c-dns), if available, should be logged and reported. This data is crucial for further investigation and potentially blocking or mitigating against the source of these requests.\n\nIt's important to note that while these patterns are critical signs of potential exploitation attempts, they may also be triggered in benign scenarios which are currently unknown. Therefore, any detection mechanisms should be set at a critical level but also allow for the verification of detected patterns to rule out any false positives.\n\nIn summary, by effectively monitoring for these specified patterns within web server logs, one can detect and possibly prevent the exploitation attempts of the Microsoft Exchange ProxyToken vulnerability, aiding in the protection of the server infrastructure against unauthorized access and manipulation.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: webserver\ndetection:\n    selection1:\n        cs-method: 'POST'\n        cs-uri-query|contains|all:\n            - '/ecp/'\n            - '/RulesEditor/InboxRules.svc/NewObject'\n        sc-status: 500\n    selection2:\n        cs-uri-query|contains|all:\n            - 'SecurityToken='\n            - '/ecp/'\n        sc-status: 500\n    condition: selection1 or selection2\nfields:\n    - c-ip\n    - c-dns\nfalsepositives:\n    - Unknown\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: webserver\ndetection:\n    selection1:\n        cs-method: 'POST'\n        cs-uri-query|contains|all:\n            - '/ecp/'\n            - '/RulesEditor/InboxRules.svc/NewObject'\n        sc-status: 500\n    selection2:\n        cs-uri-query|contains|all:\n            - 'SecurityToken='\n            - '/ecp/'\n        sc-status: 500\n    condition: selection1 or selection2\nfields:\n    - c-ip\n    - c-dns\nfalsepositives:\n    - Unknown\nlevel: critical\n",
      "question": "exploitation of Microsoft Exchange ProxyToken vulnerability as described in CVE-2021-33766",
      "answer": "In order to detect the exploitation of Microsoft Exchange ProxyToken vulnerability as described in CVE-2021-33766, you should monitor web server logs for specific patterns that indicate an attempted exploitation. Look out for HTTP POST requests exhibiting one of two specific characteristic patterns in their URI queries, each of which signals a potentially malicious attempt to exploit this vulnerability.\n\nFirst, pay attention to POST requests where the query contains '/ecp/' alongside '/RulesEditor/InboxRules.svc/NewObject', and the server's response status code is 500. This specific pattern could indicate an attempt to exploit the vulnerability by interacting with the Exchange Control Panel (ECP) in a manner that results in an error response from the server, which is typical of exploitation attempts that do not fully succeed or trigger an unexpected condition on the server.\n\nSecond, look for POST requests that include 'SecurityToken=' and '/ecp/' in the URI query, also resulting in a status code of 500 from the server. This pattern suggests an attempt to use a security token inappropriately within the context of the ECP, another red flag for exploitation attempts.\n\nWhenever such requests are identified, important information such as the client's IP address (c-ip) and DNS name (c-dns), if available, should be logged and reported. This data is crucial for further investigation and potentially blocking or mitigating against the source of these requests.\n\nIt's important to note that while these patterns are critical signs of potential exploitation attempts, they may also be triggered in benign scenarios which are currently unknown. Therefore, any detection mechanisms should be set at a critical level but also allow for the verification of detected patterns to rule out any false positives.\n\nIn summary, by effectively monitoring for these specified patterns within web server logs, one can detect and possibly prevent the exploitation attempts of the Microsoft Exchange ProxyToken vulnerability, aiding in the protection of the server infrastructure against unauthorized access and manipulation."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting command line parameters used by Hydra password guessing hack tool.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect command line parameters used by Hydra password guessing hack tool, you should look for process creation events on Windows systems where the command line includes certain patterns indicative of Hydra's usage. Specifically, look out for command line commands containing both '-u ' and '-p ' together. Additionally, watch for commands that include the keywords 'USER' and 'PASS', both surrounded by carets ('^'). These patterns are strongly associated with the attack method employed by the Hydra tool, which aims at guessing passwords through brute force or dictionary attacks. It is essential to be aware of potential false positives, which may arise from legitimate software that happens to use these keywords in its command line in a similar format. Given the high level of threat associated with this behavior, it's crucial to monitor for these indicators to effectively thwart attempts at unauthorized access through password guessing.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - '-u '\n            - '-p '\n        CommandLine|contains:\n            - '^USER^'\n            - '^PASS^'\n    condition: selection\nfalsepositives:\n    - Software that uses the caret encased keywords PASS and USER in its command line\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - '-u '\n            - '-p '\n        CommandLine|contains:\n            - '^USER^'\n            - '^PASS^'\n    condition: selection\nfalsepositives:\n    - Software that uses the caret encased keywords PASS and USER in its command line\nlevel: high\n",
      "question": "command line parameters used by Hydra password guessing hack tool",
      "answer": "In order to detect command line parameters used by Hydra password guessing hack tool, you should look for process creation events on Windows systems where the command line includes certain patterns indicative of Hydra's usage. Specifically, look out for command line commands containing both '-u ' and '-p ' together. Additionally, watch for commands that include the keywords 'USER' and 'PASS', both surrounded by carets ('^'). These patterns are strongly associated with the attack method employed by the Hydra tool, which aims at guessing passwords through brute force or dictionary attacks. It is essential to be aware of potential false positives, which may arise from legitimate software that happens to use these keywords in its command line in a similar format. Given the high level of threat associated with this behavior, it's crucial to monitor for these indicators to effectively thwart attempts at unauthorized access through password guessing."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    product: windows\n    category: ps_classic_start\n    definition: fields have to be extract from event\ndetection:\n    selection:\n        HostApplication|contains|all:\n            - 'powershell'\n            - 'nslookup'\n        HostApplication|contains:\n            - '-q=txt'\n            - '-querytype=txt'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect suspicious powershell download cradle using nslookup. This cradle uses nslookup to extract payloads from DNS records\n\nHere is how  the given sigma rule operates: In order to detect suspicious PowerShell download cradle using nslookup, which utilizes nslookup to extract payloads from DNS records, you should: Monitor Windows PowerShell classic start events for indications of PowerShell being used in conjunction with the 'nslookup' command. Specifically, look for instances where the 'HostApplication' field contains both 'powershell' and 'nslookup', indicating PowerShell is being used to run 'nslookup'. Additionally, watch for arguments '-q=txt' or '-querytype=txt' within the same command, as these are used to query text records from DNS - a technique often exploited to retrieve malicious payloads. It's crucial to scrutinize such activities due to their potential misuse in cyber attacks, although it's important to consider that there could be benign use cases that might generate false positives. The importance of vigilance with this medium-level threat cannot be overstated, given its association with unconventional methods of executing malicious downloads.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_classic_start\n    definition: fields have to be extract from event\ndetection:\n    selection:\n        HostApplication|contains|all:\n            - 'powershell'\n            - 'nslookup'\n        HostApplication|contains:\n            - '-q=txt'\n            - '-querytype=txt'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "suspicious powershell download cradle using nslookup. This cradle uses nslookup to extract payloads from DNS records",
      "answer": "In order to detect suspicious PowerShell download cradle using nslookup, which utilizes nslookup to extract payloads from DNS records, you should: Monitor Windows PowerShell classic start events for indications of PowerShell being used in conjunction with the 'nslookup' command. Specifically, look for instances where the 'HostApplication' field contains both 'powershell' and 'nslookup', indicating PowerShell is being used to run 'nslookup'. Additionally, watch for arguments '-q=txt' or '-querytype=txt' within the same command, as these are used to query text records from DNS - a technique often exploited to retrieve malicious payloads. It's crucial to scrutinize such activities due to their potential misuse in cyber attacks, although it's important to consider that there could be benign use cases that might generate false positives. The importance of vigilance with this medium-level threat cannot be overstated, given its association with unconventional methods of executing malicious downloads."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Malleable OneDrive Profile.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to Detect Malleable OneDrive Profile, you should: Monitor network traffic through your proxy logs focusing on GET requests sent to onedrive.live.com. Specifically, look for URLs that end with the parameter '?manifest=wac'. It's essential to filter out and not consider URLs that start with 'http' and contain '://onedrive.live.com/' within them as these are not indicative of the malicious activity this mechanism aims to detect. This detection strategy is vital for identifying attempts to misuse or mimic OneDrive for potentially malicious purposes, marking it with a high importance. Note that there may be unknown scenarios leading to false positives in this detection approach. The associated tactics and techniques include Exfiltration Over Web Service and Data Obfuscation, indicating an attacker's attempt to stealthily exfiltrate data or conceal their actions using legitimate web services.\n",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: proxy\ndetection:\n    selection:\n        cs-method: 'GET'\n        c-uri|endswith: '\\?manifest=wac'\n        cs-host: 'onedrive.live.com'\n    filter:\n        c-uri|startswith: 'http'\n        c-uri|contains: '://onedrive.live.com/'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: proxy\ndetection:\n    selection:\n        cs-method: 'GET'\n        c-uri|endswith: '\\?manifest=wac'\n        cs-host: 'onedrive.live.com'\n    filter:\n        c-uri|startswith: 'http'\n        c-uri|contains: '://onedrive.live.com/'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Malleable OneDrive Profile",
      "answer": "In order to Detect Malleable OneDrive Profile, you should: Monitor network traffic through your proxy logs focusing on GET requests sent to onedrive.live.com. Specifically, look for URLs that end with the parameter '?manifest=wac'. It's essential to filter out and not consider URLs that start with 'http' and contain '://onedrive.live.com/' within them as these are not indicative of the malicious activity this mechanism aims to detect. This detection strategy is vital for identifying attempts to misuse or mimic OneDrive for potentially malicious purposes, marking it with a high importance. Note that there may be unknown scenarios leading to false positives in this detection approach. The associated tactics and techniques include Exfiltration Over Web Service and Data Obfuscation, indicating an attacker's attempt to stealthily exfiltrate data or conceal their actions using legitimate web services.\n"
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting An adversary might use WMI to check if a certain remote service is running on a remote device.\nWhen the test completes, a service information will be displayed on the screen if it exists.\nA common feedback message is that \"No instance(s) Available\" if the service queried is not running.\nA common error message is \"Node - (provided IP or default) ERROR Description =The RPC server is unavailable\" if the provided remote host is unreachable\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when an adversary might use Windows Management Instrumentation (WMI) to check if a certain remote service is running on a remote device, you should: monitor for the creation of processes that end with '\\WMIC.exe' or have an original filename of 'wmic.exe'. Additionally, it's important to look for command lines that contain the word 'service'. These observations indicate that someone is likely using the WMIC tool to query remote services, which can be a sign of reconnaissance activity as part of a broader campaign to understand the network environment and potentially identify vulnerable services for exploitation. The feedback from such a query might indicate whether a service is running, not present, or if the remote host is unreachable, commonly noted by messages like \"No instance(s) Available\" or \"Node - (provided IP or default) ERROR Description =The RPC server is unavailable.\" This monitoring should be applied to systems running Windows, given the use of WMIC. The level of concern for such activities is considered medium, and while there may be legitimate uses for querying service information remotely, it's essential to review these activities to rule out malicious intent.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\WMIC.exe'\n        - OriginalFileName: 'wmic.exe'\n    selection_cli:\n        CommandLine|contains: 'service'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\WMIC.exe'\n        - OriginalFileName: 'wmic.exe'\n    selection_cli:\n        CommandLine|contains: 'service'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "An adversary might use WMI to check if a certain remote service is running on a remote device.\nWhen the test completes, a service information will be displayed on the screen if it exists.\nA common feedback message is that \"No instance(s) Available\" if the service queried is not running.\nA common error message is \"Node - (provided IP or default) ERROR Description =The RPC server is unavailable\" if the provided remote host is unreachable\n",
      "answer": "In order to detect when an adversary might use Windows Management Instrumentation (WMI) to check if a certain remote service is running on a remote device, you should: monitor for the creation of processes that end with '\\WMIC.exe' or have an original filename of 'wmic.exe'. Additionally, it's important to look for command lines that contain the word 'service'. These observations indicate that someone is likely using the WMIC tool to query remote services, which can be a sign of reconnaissance activity as part of a broader campaign to understand the network environment and potentially identify vulnerable services for exploitation. The feedback from such a query might indicate whether a service is running, not present, or if the remote host is unreachable, commonly noted by messages like \"No instance(s) Available\" or \"Node - (provided IP or default) ERROR Description =The RPC server is unavailable.\" This monitoring should be applied to systems running Windows, given the use of WMIC. The level of concern for such activities is considered medium, and while there may be legitimate uses for querying service information remotely, it's essential to review these activities to rule out malicious intent."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains|all:\n            - 'powershell'\n            - 'WindowStyle'\n            - 'Hidden'\n    filter:\n        ScriptBlockText|contains|all:\n            - ':\\Program Files\\Amazon\\WorkSpacesConfig\\Scripts\\'\n            - '$PSScriptRoot\\Module\\WorkspaceScriptModule\\WorkspaceScriptModule'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: medium\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect Adversaries may use hidden windows to conceal malicious activity from the plain sight of users.\nIn some cases, windows that would typically be displayed when an application carries out an operation can be hidden\n\n\nHere is how  the given sigma rule operates: In order to detect adversaries who may use hidden windows to conceal malicious activity from the plain sight of users, in some cases hiding windows that would typically be displayed when an application carries out an operation, you should: Monitor PowerShell script block logging on Windows systems for script texts that contain references to 'powershell', 'WindowStyle', and 'Hidden'. This is indicative of an effort to execute PowerShell commands or scripts in a hidden window, potentially to carry out covert operations. It is important to exclude script blocks that contain paths related to Amazon WorkSpaces configuration scripts, as these might be legitimate use cases and not related to malicious activity. The focus is on identifying unexpected or unauthorized use of PowerShell with specific characteristics that deviate from normal, benign scripts, especially those attempting to make their execution invisible to users. This approach facilitates the detection of hidden window utilization, which adversaries might leverage to execute attacks without detection.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains|all:\n            - 'powershell'\n            - 'WindowStyle'\n            - 'Hidden'\n    filter:\n        ScriptBlockText|contains|all:\n            - ':\\Program Files\\Amazon\\WorkSpacesConfig\\Scripts\\'\n            - '$PSScriptRoot\\Module\\WorkspaceScriptModule\\WorkspaceScriptModule'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Adversaries may use hidden windows to conceal malicious activity from the plain sight of users.\nIn some cases, windows that would typically be displayed when an application carries out an operation can be hidden\n",
      "answer": "In order to detect adversaries who may use hidden windows to conceal malicious activity from the plain sight of users, in some cases hiding windows that would typically be displayed when an application carries out an operation, you should: Monitor PowerShell script block logging on Windows systems for script texts that contain references to 'powershell', 'WindowStyle', and 'Hidden'. This is indicative of an effort to execute PowerShell commands or scripts in a hidden window, potentially to carry out covert operations. It is important to exclude script blocks that contain paths related to Amazon WorkSpaces configuration scripts, as these might be legitimate use cases and not related to malicious activity. The focus is on identifying unexpected or unauthorized use of PowerShell with specific characteristics that deviate from normal, benign scripts, especially those attempting to make their execution invisible to users. This approach facilitates the detection of hidden window utilization, which adversaries might leverage to execute attacks without detection."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    product: windows\n    service: system\ndetection:\n    selection:\n        Provider_Name: 'Service Control Manager'\n        EventID: 7045\n        ProcessId: 0\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect service installed by a client which has PID 0 or whose parent has PID 0\n\nHere is how  the given sigma rule operates: In order to detect a service installed by a client which has PID 0 or whose parent has PID 0, you should: Focus on monitoring Windows system logs, specifically targeting events generated by the Service Control Manager. Look for event ID 7045, which signifies a service installation event. Specifically, focus on identifying instances where the 'ProcessId' field reports a value of 0. This is significant because a Process ID (PID) of 0 can indicate that the service was initiated by the system or a process with no parent, potentially signaling a malicious installation. It's important to treat cases that trigger this alert with caution, though some might turn out to be benign, the unknown nature of false positives implies that each instance should be investigated to confirm or rule out malicious activity. This analysis is critical as it relates to identifying potentially malicious service installations, a technique often utilized by adversaries to ensure persistence, execute malware, or obtain privileged access within a compromised system.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: system\ndetection:\n    selection:\n        Provider_Name: 'Service Control Manager'\n        EventID: 7045\n        ProcessId: 0\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "service installed by a client which has PID 0 or whose parent has PID 0",
      "answer": "In order to detect a service installed by a client which has PID 0 or whose parent has PID 0, you should: Focus on monitoring Windows system logs, specifically targeting events generated by the Service Control Manager. Look for event ID 7045, which signifies a service installation event. Specifically, focus on identifying instances where the 'ProcessId' field reports a value of 0. This is significant because a Process ID (PID) of 0 can indicate that the service was initiated by the system or a process with no parent, potentially signaling a malicious installation. It's important to treat cases that trigger this alert with caution, though some might turn out to be benign, the unknown nature of false positives implies that each instance should be investigated to confirm or rule out malicious activity. This analysis is critical as it relates to identifying potentially malicious service installations, a technique often utilized by adversaries to ensure persistence, execute malware, or obtain privileged access within a compromised system."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    product: windows\n    category: ps_module\n    definition: 0ad03ef1-f21b-4a79-8ce8-e6900c54b65b\ndetection:\n    selection_4103:\n        ContextInfo|contains|all:\n            - 'Compress-Archive '\n            - ' -Path '\n            - ' -DestinationPath '\n            - '$env:TEMP\\'\n    condition: selection_4103\nfalsepositives:\n    - Unknown\nlevel: medium\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect Use living off the land tools to zip a file and stage it in the Windows temporary folder for later exfiltration\n\nHere is how  the given sigma rule operates: In order to use living off the land tools to zip a file and stage it in the Windows temporary folder for later exfiltration, you should monitor Windows PowerShell module logs for specific command-line patterns that indicate such activity. This involves tracking commands that utilize the 'Compress-Archive' function, a part of PowerShell used to create zip archives. Specifically, you should look for commands that include both the '-Path' and '-DestinationPath' parameters, indicating the source files to compress and the location where the compressed archive should be stored. It's critical to focus on commands that specify the destination path as the Windows temporary folder, denoted by `$env:TEMP\\`. This pattern of behavior is indicative of attackers leveraging built-in tools to compress potentially sensitive information before exfiltration, aligning with tactics and techniques such as Resource Development and Collection. While this detection strategy is important for identifying suspicious zipping activity, it's also advised to be aware of potential unknown false positives, given the legitimate use of 'Compress-Archive' in non-malicious contexts. The monitoring of these activities is categorized as medium level due to the possibility of both legitimate and malicious use cases.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_module\n    definition: 0ad03ef1-f21b-4a79-8ce8-e6900c54b65b\ndetection:\n    selection_4103:\n        ContextInfo|contains|all:\n            - 'Compress-Archive '\n            - ' -Path '\n            - ' -DestinationPath '\n            - '$env:TEMP\\'\n    condition: selection_4103\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Use living off the land tools to zip a file and stage it in the Windows temporary folder for later exfiltration",
      "answer": "In order to use living off the land tools to zip a file and stage it in the Windows temporary folder for later exfiltration, you should monitor Windows PowerShell module logs for specific command-line patterns that indicate such activity. This involves tracking commands that utilize the 'Compress-Archive' function, a part of PowerShell used to create zip archives. Specifically, you should look for commands that include both the '-Path' and '-DestinationPath' parameters, indicating the source files to compress and the location where the compressed archive should be stored. It's critical to focus on commands that specify the destination path as the Windows temporary folder, denoted by `$env:TEMP\\`. This pattern of behavior is indicative of attackers leveraging built-in tools to compress potentially sensitive information before exfiltration, aligning with tactics and techniques such as Resource Development and Collection. While this detection strategy is important for identifying suspicious zipping activity, it's also advised to be aware of potential unknown false positives, given the legitimate use of 'Compress-Archive' in non-malicious contexts. The monitoring of these activities is categorized as medium level due to the possibility of both legitimate and malicious use cases."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting process command line patterns and locations used by REvil group in Kaseya incident (can also match on other malware).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect process command line patterns and locations used by the REvil group in the Kaseya incident (which can also match on other malware), you should monitor for specific executable and command line activity within the Windows environment. This involves watching for the creation or invocation of processes that match certain criteria indicative of malicious activity. Particularly, be on the lookout for processes executed from or command lines containing paths and arguments like 'C:\\Windows\\cert.exe', deletion commands targeting 'c:\\kworking\\agent.crt', references to \"Kaseya VSA Agent Hot-fix\", suspicious usage of 'MsMpEng.exe' in the Temp directory, commands aimed at deleting log files within the 'inetpub\\logs' directory or any '*.log' files on the system drive, and processes linked to 'c:\\kworking1\\', such as 'agent.exe' or 'agent.crt'. Additionally, specific combinations of deletion commands and target paths, like those aiming at 'WebPages\\Errors\\webErrorLog.txt', should raise alerts. \n\nMonitoring should cover both the command lines that initiate these processes and the images (executables) themselves. Any match on these patterns should be treated with high suspicion, as they're critical indicators of potential compromise or attack similar to those conducted by the REvil group in past incidents. This vigilance is necessary across all process creation events on Windows systems, especially within enterprise environments where the impact of such malware can be significant. While there is a possibility of false positives, given the critical nature of these indicators, each alert warrants thorough investigation to rule out or confirm malicious activity.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1:\n        CommandLine|contains:\n            - 'C:\\Windows\\cert.exe'\n            - 'del /q /f c:\\kworking\\agent.crt'\n            - 'Kaseya VSA Agent Hot-fix'\n            - '\\AppData\\Local\\Temp\\MsMpEng.exe'\n            - 'rmdir /s /q %SystemDrive%\\inetpub\\logs'\n            - 'del /s /q /f %SystemDrive%\\\\*.log'\n            - 'c:\\kworking1\\agent.exe'\n            - 'c:\\kworking1\\agent.crt'\n    selection2:\n        Image:\n            - 'C:\\Windows\\MsMpEng.exe'\n            - 'C:\\Windows\\cert.exe'\n            - 'C:\\kworking\\agent.exe'\n            - 'C:\\kworking1\\agent.exe'\n    selection3:\n        CommandLine|contains|all:\n            - 'del /s /q /f'\n            - 'WebPages\\Errors\\webErrorLog.txt'\n    condition: 1 of selection*\nfalsepositives:\n    - Unknown\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1:\n        CommandLine|contains:\n            - 'C:\\Windows\\cert.exe'\n            - 'del /q /f c:\\kworking\\agent.crt'\n            - 'Kaseya VSA Agent Hot-fix'\n            - '\\AppData\\Local\\Temp\\MsMpEng.exe'\n            - 'rmdir /s /q %SystemDrive%\\inetpub\\logs'\n            - 'del /s /q /f %SystemDrive%\\\\*.log'\n            - 'c:\\kworking1\\agent.exe'\n            - 'c:\\kworking1\\agent.crt'\n    selection2:\n        Image:\n            - 'C:\\Windows\\MsMpEng.exe'\n            - 'C:\\Windows\\cert.exe'\n            - 'C:\\kworking\\agent.exe'\n            - 'C:\\kworking1\\agent.exe'\n    selection3:\n        CommandLine|contains|all:\n            - 'del /s /q /f'\n            - 'WebPages\\Errors\\webErrorLog.txt'\n    condition: 1 of selection*\nfalsepositives:\n    - Unknown\nlevel: critical\n",
      "question": "process command line patterns and locations used by REvil group in Kaseya incident (can also match on other malware)",
      "answer": "In order to detect process command line patterns and locations used by the REvil group in the Kaseya incident (which can also match on other malware), you should monitor for specific executable and command line activity within the Windows environment. This involves watching for the creation or invocation of processes that match certain criteria indicative of malicious activity. Particularly, be on the lookout for processes executed from or command lines containing paths and arguments like 'C:\\Windows\\cert.exe', deletion commands targeting 'c:\\kworking\\agent.crt', references to \"Kaseya VSA Agent Hot-fix\", suspicious usage of 'MsMpEng.exe' in the Temp directory, commands aimed at deleting log files within the 'inetpub\\logs' directory or any '*.log' files on the system drive, and processes linked to 'c:\\kworking1\\', such as 'agent.exe' or 'agent.crt'. Additionally, specific combinations of deletion commands and target paths, like those aiming at 'WebPages\\Errors\\webErrorLog.txt', should raise alerts. \n\nMonitoring should cover both the command lines that initiate these processes and the images (executables) themselves. Any match on these patterns should be treated with high suspicion, as they're critical indicators of potential compromise or attack similar to those conducted by the REvil group in past incidents. This vigilance is necessary across all process creation events on Windows systems, especially within enterprise environments where the impact of such malware can be significant. While there is a possibility of false positives, given the critical nature of these indicators, each alert warrants thorough investigation to rule out or confirm malicious activity."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    product: azure\n    service: signinlogs\ndetection:\n    # You need to tune the rule for your enrivonnement before use\n    selection:\n        Status: Sucess\n        # Countries you DO operate out of e,g GB, use list for mulitple\n        Location: '%LegitCountries%'\n        # outside normal working hours\n        Date: '%ClosingTime%'\n        Initiatied.By: '%ApprovedUserUpn%'\n    condition: selection\nfalsepositives:\n     - An admin doing actual work outside of normal business hours\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect account sign ins outside of normal hours or uncommon locations. Administrator accounts should be investigated\n\nHere is how  the given sigma rule operates: In order to detect account sign ins outside of normal hours or uncommon locations, with a focus on investigating administrator accounts, you should implement a monitoring strategy that scrutinizes sign-in logs from Azure services. Specifically, look for successful sign-in attempts (Status: Success) that originate from locations where your operations are typically conducted (as denoted by Location, which should match your legitimate countries of operation). Additionally, pay attention to sign-ins that occur outside your normal working hours (specified by Date, which should reflect your organization's closing times) and are initiated by approved user principal names (Initiated.By, which should correspond to recognized administrator account usernames).\n\nKeep in mind that there could be legitimate instances where an administrator might need to access the system outside of these hours, which are considered potential false positives; for example, an admin conducting urgent work outside of regular business hours. The seriousness of detecting such sign-in activities is classified as high, underscoring the importance of closely examining these events. Through this approach, you can effectively identify potentially malicious sign-ins that could indicate unauthorized access attempts, reinforcing the security of administrator accounts and sensitive systems within your Azure environment.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: azure\n    service: signinlogs\ndetection:\n    # You need to tune the rule for your enrivonnement before use\n    selection:\n        Status: Sucess\n        # Countries you DO operate out of e,g GB, use list for mulitple\n        Location: '%LegitCountries%'\n        # outside normal working hours\n        Date: '%ClosingTime%'\n        Initiatied.By: '%ApprovedUserUpn%'\n    condition: selection\nfalsepositives:\n     - An admin doing actual work outside of normal business hours\nlevel: high\n",
      "question": "account sign ins outside of normal hours or uncommon locations. Administrator accounts should be investigated",
      "answer": "In order to detect account sign ins outside of normal hours or uncommon locations, with a focus on investigating administrator accounts, you should implement a monitoring strategy that scrutinizes sign-in logs from Azure services. Specifically, look for successful sign-in attempts (Status: Success) that originate from locations where your operations are typically conducted (as denoted by Location, which should match your legitimate countries of operation). Additionally, pay attention to sign-ins that occur outside your normal working hours (specified by Date, which should reflect your organization's closing times) and are initiated by approved user principal names (Initiated.By, which should correspond to recognized administrator account usernames).\n\nKeep in mind that there could be legitimate instances where an administrator might need to access the system outside of these hours, which are considered potential false positives; for example, an admin conducting urgent work outside of regular business hours. The seriousness of detecting such sign-in activities is classified as high, underscoring the importance of closely examining these events. Through this approach, you can effectively identify potentially malicious sign-ins that could indicate unauthorized access attempts, reinforcing the security of administrator accounts and sensitive systems within your Azure environment."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting removal of folders from the \"ProtectedFolders\" list of of exploit guard. This could indicate an attacker trying to launch an encryption process or trying to manipulate data inside of the protected folder.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the removal of folders from the \"ProtectedFolders\" list of exploit guard, which could indicate an attacker trying to launch an encryption process or trying to manipulate data inside of the protected folder, you should monitor Windows registry deletions focusing on the specific event where values under the registry path \"SOFTWARE\\Microsoft\\Windows Defender\\Windows Defender Exploit Guard\\Controlled Folder Access\\ProtectedFolders\" are being deleted. This action is tagged in the context of potential intrusion tactics where an attacker may attempt to bypass or disable protective measures around sensitive folders. These tactics align with manipulation of files and directories or an attempt to evade defenses. It is considered a high-level concern because alterations to the Controlled Folder Access settings can directly impact the security posture by allowing unauthorized access or changes to protected folders, potentially leading to data loss or compromise. However, be mindful that there are situations where legitimate administrators might remove applications or modify these settings for valid reasons, and such activities should always be investigated rather than automatically deemed malicious.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_delete\n    product: windows\ndetection:\n    selection:\n        EventType: DeleteValue\n        TargetObject|contains: 'SOFTWARE\\Microsoft\\Windows Defender\\Windows Defender Exploit Guard\\Controlled Folder Access\\ProtectedFolders'\n    condition: selection\nfalsepositives:\n    - Legitimate administrators removing applications (should always be investigated)\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_delete\n    product: windows\ndetection:\n    selection:\n        EventType: DeleteValue\n        TargetObject|contains: 'SOFTWARE\\Microsoft\\Windows Defender\\Windows Defender Exploit Guard\\Controlled Folder Access\\ProtectedFolders'\n    condition: selection\nfalsepositives:\n    - Legitimate administrators removing applications (should always be investigated)\nlevel: high\n",
      "question": "removal of folders from the \"ProtectedFolders\" list of of exploit guard. This could indicate an attacker trying to launch an encryption process or trying to manipulate data inside of the protected folder",
      "answer": "In order to detect the removal of folders from the \"ProtectedFolders\" list of exploit guard, which could indicate an attacker trying to launch an encryption process or trying to manipulate data inside of the protected folder, you should monitor Windows registry deletions focusing on the specific event where values under the registry path \"SOFTWARE\\Microsoft\\Windows Defender\\Windows Defender Exploit Guard\\Controlled Folder Access\\ProtectedFolders\" are being deleted. This action is tagged in the context of potential intrusion tactics where an attacker may attempt to bypass or disable protective measures around sensitive folders. These tactics align with manipulation of files and directories or an attempt to evade defenses. It is considered a high-level concern because alterations to the Controlled Folder Access settings can directly impact the security posture by allowing unauthorized access or changes to protected folders, potentially leading to data loss or compromise. However, be mindful that there are situations where legitimate administrators might remove applications or modify these settings for valid reasons, and such activities should always be investigated rather than automatically deemed malicious."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting creation of a named pipe used by known APT malware.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the creation of a named pipe used by known APT malware, you should focus on monitoring Windows event logs specifically for events related to named pipe creation. Ensure your logging capabilities are configured to track Named Pipe Events, which in Sysmon are represented by Event ID 17 and Event ID 18. This is key to identifying the initial foothold or movement of a variety of sophisticated threats, including but not limited to advanced persistent threats (APT) that leverage this technique for communication or execution on a compromised system.\n\nYou should look for the creation of specific named pipes that are known to be associated with a variety of sophisticated malware families and groups, such as Uroburos, Cobra Trojan, Sofacy group malware, Wild Neutron APT malware, Project Sauron, Cloud Hopper, Equation Group malware, Covenant, SolarWinds SUNBURST malware, Snatch Ransomware, Crackmapexec, PoshC2, CSEXEC, LiquidSnake, Turla HyperStack, Hidden Cobra Hoplight, Pacifier, Emissary Panda Hyperbro, and Qbot. These specific named pipes, which include but are not limited to '\\isapi_http', '\\isapi_dg', '\\sdlrpc', '\\ahexec', '\\winsession', '\\lsassw', and many others detailed in the identification criteria, are strong indicators of malicious activity when they are detected being created within the system.\n\nGiven the critical level of this detection, it is advisable to treat any hits with high priority, although one should also consider the potential for unknown false positives. Verification and investigation would be required to distinguish between benign activity involving named pipes and these specific, high-risk malware signatures. This proactive monitoring and detection strategy is essential for defending against sophisticated threats that utilize named pipes for malicious purposes within an environment.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: pipe_created\n    definition: 'Note that you have to configure logging for Named Pipe Events in Sysmon config (Event ID 17 and Event ID 18). The basic configuration is in popular sysmon configuration (https://github.com/SwiftOnSecurity/sysmon-config), but it is worth verifying. You can also use other repo, e.g. https://github.com/Neo23x0/sysmon-config, https://github.com/olafhartong/sysmon-modular. How to test detection? You can check powershell script from this site https://svch0st.medium.com/guide-to-named-pipes-and-hunting-for-cobalt-strike-pipes-dc46b2c5f575'\ndetection:\n    selection:\n        PipeName:\n            - '\\isapi_http'  # Uroburos Malware\n            - '\\isapi_dg'  # Uroburos Malware\n            - '\\isapi_dg2'  # Uroburos Malware\n            - '\\sdlrpc'  # Cobra Trojan\n            - '\\ahexec'  # Sofacy group malware\n            - '\\winsession'  # Wild Neutron APT malware\n            - '\\lsassw'  # Wild Neutron APT malware\n            - '\\46a676ab7f179e511e30dd2dc41bd388'  # Project Sauron\n            - '\\9f81f59bc58452127884ce513865ed20'  # Project Sauron\n            - '\\e710f28d59aa529d6792ca6ff0ca1b34'  # Project Sauron\n            - '\\rpchlp_3'  # Project Sauron\n            - '\\NamePipe_MoreWindows'  # Cloud Hopper - RedLeaves\n            - '\\pcheap_reuse'  # Pipe used by Equation Group malware\n            - '\\gruntsvc' # Covenant default\n            # - '\\status_*' # CS default  https://github.com/SigmaHQ/sigma/issues/253\n            - '\\583da945-62af-10e8-4902-a8f205c72b2e'  # SolarWinds SUNBURST malware\n            - '\\bizkaz'  # Snatch Ransomware\n            - '\\svcctl' #Crackmapexec smbexec default\n            - '\\Posh*' #PoshC2 default\n            - '\\jaccdpqnvbrrxlaf' #PoshC2 default\n            - '\\csexecsvc' #CSEXEC default\n            - '\\6e7645c4-32c5-4fe3-aabf-e94c2f4370e7'  # LiquidSnake\n            - '\\adschemerpc'  # Turla HyperStack\n            - '\\AnonymousPipe'  # Hidden Cobra Hoplight\n            - '\\bc367'  # Pacifier\n            - '\\bc31a7'  # Pacifier\n            - '\\testPipe'  # Emissary Panda Hyperbro\n            - '\\dce_3d' #Qbot\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: pipe_created\n    definition: 'Note that you have to configure logging for Named Pipe Events in Sysmon config (Event ID 17 and Event ID 18). The basic configuration is in popular sysmon configuration (https://github.com/SwiftOnSecurity/sysmon-config), but it is worth verifying. You can also use other repo, e.g. https://github.com/Neo23x0/sysmon-config, https://github.com/olafhartong/sysmon-modular. How to test detection? You can check powershell script from this site https://svch0st.medium.com/guide-to-named-pipes-and-hunting-for-cobalt-strike-pipes-dc46b2c5f575'\ndetection:\n    selection:\n        PipeName:\n            - '\\isapi_http'  # Uroburos Malware\n            - '\\isapi_dg'  # Uroburos Malware\n            - '\\isapi_dg2'  # Uroburos Malware\n            - '\\sdlrpc'  # Cobra Trojan\n            - '\\ahexec'  # Sofacy group malware\n            - '\\winsession'  # Wild Neutron APT malware\n            - '\\lsassw'  # Wild Neutron APT malware\n            - '\\46a676ab7f179e511e30dd2dc41bd388'  # Project Sauron\n            - '\\9f81f59bc58452127884ce513865ed20'  # Project Sauron\n            - '\\e710f28d59aa529d6792ca6ff0ca1b34'  # Project Sauron\n            - '\\rpchlp_3'  # Project Sauron\n            - '\\NamePipe_MoreWindows'  # Cloud Hopper - RedLeaves\n            - '\\pcheap_reuse'  # Pipe used by Equation Group malware\n            - '\\gruntsvc' # Covenant default\n            # - '\\status_*' # CS default  https://github.com/SigmaHQ/sigma/issues/253\n            - '\\583da945-62af-10e8-4902-a8f205c72b2e'  # SolarWinds SUNBURST malware\n            - '\\bizkaz'  # Snatch Ransomware\n            - '\\svcctl' #Crackmapexec smbexec default\n            - '\\Posh*' #PoshC2 default\n            - '\\jaccdpqnvbrrxlaf' #PoshC2 default\n            - '\\csexecsvc' #CSEXEC default\n            - '\\6e7645c4-32c5-4fe3-aabf-e94c2f4370e7'  # LiquidSnake\n            - '\\adschemerpc'  # Turla HyperStack\n            - '\\AnonymousPipe'  # Hidden Cobra Hoplight\n            - '\\bc367'  # Pacifier\n            - '\\bc31a7'  # Pacifier\n            - '\\testPipe'  # Emissary Panda Hyperbro\n            - '\\dce_3d' #Qbot\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: critical\n",
      "question": "creation of a named pipe used by known APT malware",
      "answer": "In order to detect the creation of a named pipe used by known APT malware, you should focus on monitoring Windows event logs specifically for events related to named pipe creation. Ensure your logging capabilities are configured to track Named Pipe Events, which in Sysmon are represented by Event ID 17 and Event ID 18. This is key to identifying the initial foothold or movement of a variety of sophisticated threats, including but not limited to advanced persistent threats (APT) that leverage this technique for communication or execution on a compromised system.\n\nYou should look for the creation of specific named pipes that are known to be associated with a variety of sophisticated malware families and groups, such as Uroburos, Cobra Trojan, Sofacy group malware, Wild Neutron APT malware, Project Sauron, Cloud Hopper, Equation Group malware, Covenant, SolarWinds SUNBURST malware, Snatch Ransomware, Crackmapexec, PoshC2, CSEXEC, LiquidSnake, Turla HyperStack, Hidden Cobra Hoplight, Pacifier, Emissary Panda Hyperbro, and Qbot. These specific named pipes, which include but are not limited to '\\isapi_http', '\\isapi_dg', '\\sdlrpc', '\\ahexec', '\\winsession', '\\lsassw', and many others detailed in the identification criteria, are strong indicators of malicious activity when they are detected being created within the system.\n\nGiven the critical level of this detection, it is advisable to treat any hits with high priority, although one should also consider the potential for unknown false positives. Verification and investigation would be required to distinguish between benign activity involving named pipes and these specific, high-risk malware signatures. This proactive monitoring and detection strategy is essential for defending against sophisticated threats that utilize named pipes for malicious purposes within an environment."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting attempts to create and/or add an account to the admin group, thus granting admin privileges..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect attempts to create and/or add an account to the admin group, thus granting admin privileges, you should monitor for specific actions indicative of such attempts on macOS systems. Look for the execution of commands that are typically involved in the creation of users or modifying group memberships to elevate privileges. Specifically, watch for the use of '`sysadminctl`' with command line arguments that encompass '` -addUser `' followed by '` -admin `', which signifies an attempt to create a new user and immediately add them to the admin group. Additionally, monitor for the execution of '`dscl`', especially with command lines containing '` -append `', '` /Groups/admin `', and '` GroupMembership `', as this sequence of commands is used to add existing users to the admin group. Be aware of potential legitimate administration activities that might also use these commands, which are considered possible false positives. The focus should be on process creation logs from macOS systems to effectively identify and mitigate unauthorized attempts to gain admin privileges through these methods.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: macos\ndetection:\n    selection_sysadminctl: #creates and adds new user to admin group\n        Image|endswith: '/sysadminctl'\n        CommandLine|contains|all:\n            - ' -addUser '\n            - ' -admin '\n    selection_dscl: #adds to admin group\n        Image|endswith: '/dscl'\n        CommandLine|contains|all:\n            - ' -append '\n            - ' /Groups/admin '\n            - ' GroupMembership '\n    condition: 1 of selection_*\nfalsepositives:\n    - Legitimate administration activities\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: macos\ndetection:\n    selection_sysadminctl: #creates and adds new user to admin group\n        Image|endswith: '/sysadminctl'\n        CommandLine|contains|all:\n            - ' -addUser '\n            - ' -admin '\n    selection_dscl: #adds to admin group\n        Image|endswith: '/dscl'\n        CommandLine|contains|all:\n            - ' -append '\n            - ' /Groups/admin '\n            - ' GroupMembership '\n    condition: 1 of selection_*\nfalsepositives:\n    - Legitimate administration activities\nlevel: medium\n",
      "question": "attempts to create and/or add an account to the admin group, thus granting admin privileges.",
      "answer": "In order to detect attempts to create and/or add an account to the admin group, thus granting admin privileges, you should monitor for specific actions indicative of such attempts on macOS systems. Look for the execution of commands that are typically involved in the creation of users or modifying group memberships to elevate privileges. Specifically, watch for the use of '`sysadminctl`' with command line arguments that encompass '` -addUser `' followed by '` -admin `', which signifies an attempt to create a new user and immediately add them to the admin group. Additionally, monitor for the execution of '`dscl`', especially with command lines containing '` -append `', '` /Groups/admin `', and '` GroupMembership `', as this sequence of commands is used to add existing users to the admin group. Be aware of potential legitimate administration activities that might also use these commands, which are considered possible false positives. The focus should be on process creation logs from macOS systems to effectively identify and mitigate unauthorized attempts to gain admin privileges through these methods."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting extraction of files with usage of steghide binary, the adversaries may use this technique to prevent the detection of hidden information..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect extraction of files with the usage of steghide binary, as adversaries may use this technique to prevent the detection of hidden information, you should: Monitor Linux systems for audit logs that capture execution events (EXECVE) specifically involving the 'steghide' command line tool. Look for instances where this tool is used to execute the 'extract' command, indicating an attempt to extract hidden information. This should particularly raise attention when the '-sf' argument is spotted, followed by a file name that ends with '.jpg' or '.png'. These file types are commonly associated with this form of information hiding. This behavior, while suspicious, is considered to have a low level of certainty regarding maliciousness, due to potential legitimate uses of steganography. Therefore, it's crucial to investigate these events when they occur to determine if they are part of a security incident or a benign activity.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: linux\n    service: auditd\ndetection:\n    selection:\n        type: EXECVE\n        a0: steghide\n        a1: extract\n        a2: '-sf'\n        a3|endswith:\n            - '.jpg'\n            - '.png'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\n    service: auditd\ndetection:\n    selection:\n        type: EXECVE\n        a0: steghide\n        a1: extract\n        a2: '-sf'\n        a3|endswith:\n            - '.jpg'\n            - '.png'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low\n",
      "question": "extraction of files with usage of steghide binary, the adversaries may use this technique to prevent the detection of hidden information.",
      "answer": "In order to detect extraction of files with the usage of steghide binary, as adversaries may use this technique to prevent the detection of hidden information, you should: Monitor Linux systems for audit logs that capture execution events (EXECVE) specifically involving the 'steghide' command line tool. Look for instances where this tool is used to execute the 'extract' command, indicating an attempt to extract hidden information. This should particularly raise attention when the '-sf' argument is spotted, followed by a file name that ends with '.jpg' or '.png'. These file types are commonly associated with this form of information hiding. This behavior, while suspicious, is considered to have a low level of certainty regarding maliciousness, due to potential legitimate uses of steganography. Therefore, it's crucial to investigate these events when they occur to determine if they are part of a security incident or a benign activity."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_exe:\n        - OriginalFileName:\n            - 'cscript.exe'\n            - 'wscript.exe'\n        - Image|endswith:\n            - '\\cscript.exe'\n            - '\\wscript.exe'\n    selection_script:\n        CommandLine|contains: '.vbs'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect Adversaries may abuse Visual Basic (VB) for execution\n\nHere is how  the given sigma rule operates: In order to detect when adversaries may abuse Visual Basic (VB) for execution, you should monitor for process creation events on Windows systems where the executable involved is either `cscript.exe` or `wscript.exe`. These executables are associated with the Windows Script Host, capable of running Visual Basic Script (.vbs files) among other script types. Specifically, look for instances where the original file name is `cscript.exe` or `wscript.exe`, or the image path ends with `\\cscript.exe` or `\\wscript.exe`. Additionally, it's crucial to inspect the command line arguments for any occurrence of '.vbs', indicating the direct execution of Visual Basic Script files. Any process creation event that matches these criteria should be investigated, keeping in mind that there may be legitimate uses of these scripts and executables, although such activities must be verified to rule out malicious activity. This approach helps in identifying potential misuse of scripting capabilities to execute malicious scripts, which is a common tactic employed by attackers.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_exe:\n        - OriginalFileName:\n            - 'cscript.exe'\n            - 'wscript.exe'\n        - Image|endswith:\n            - '\\cscript.exe'\n            - '\\wscript.exe'\n    selection_script:\n        CommandLine|contains: '.vbs'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Adversaries may abuse Visual Basic (VB) for execution",
      "answer": "In order to detect when adversaries may abuse Visual Basic (VB) for execution, you should monitor for process creation events on Windows systems where the executable involved is either `cscript.exe` or `wscript.exe`. These executables are associated with the Windows Script Host, capable of running Visual Basic Script (.vbs files) among other script types. Specifically, look for instances where the original file name is `cscript.exe` or `wscript.exe`, or the image path ends with `\\cscript.exe` or `\\wscript.exe`. Additionally, it's crucial to inspect the command line arguments for any occurrence of '.vbs', indicating the direct execution of Visual Basic Script files. Any process creation event that matches these criteria should be investigated, keeping in mind that there may be legitimate uses of these scripts and executables, although such activities must be verified to rule out malicious activity. This approach helps in identifying potential misuse of scripting capabilities to execute malicious scripts, which is a common tactic employed by attackers."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting rundll32 execution without parameters as observed when running Metasploit windows/smb/psexec exploit module.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect rundll32 execution without parameters as observed when running Metasploit windows/smb/psexec exploit module, you should: Monitor Windows systems for the creation of processes where the command line involves 'rundll32.exe' or 'rundll32' without any accompanying parameters. This monitoring should be done on systems that are capable of logging process creation events. Specifically, focus on capturing details such as the computer name, the username initiating the process, the exact command line used, and both the image path of the created process and the parent process's image path. Be aware that there might be instances where legitimate use of 'rundll32' without parameters is flagged by this detection approach; these are considered false positives. The significance of carefully monitoring for this activity is high due to its association with a known exploit technique.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine:\n            - 'rundll32.exe'\n            - 'rundll32'\n    condition: selection\nfields:\n    - ComputerName\n    - SubjectUserName\n    - CommandLine\n    - Image\n    - ParentImage\nfalsepositives:\n    - False positives may occur if a user called rundll32 from CLI with no options\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine:\n            - 'rundll32.exe'\n            - 'rundll32'\n    condition: selection\nfields:\n    - ComputerName\n    - SubjectUserName\n    - CommandLine\n    - Image\n    - ParentImage\nfalsepositives:\n    - False positives may occur if a user called rundll32 from CLI with no options\nlevel: high\n",
      "question": "rundll32 execution without parameters as observed when running Metasploit windows/smb/psexec exploit module",
      "answer": "In order to detect rundll32 execution without parameters as observed when running Metasploit windows/smb/psexec exploit module, you should: Monitor Windows systems for the creation of processes where the command line involves 'rundll32.exe' or 'rundll32' without any accompanying parameters. This monitoring should be done on systems that are capable of logging process creation events. Specifically, focus on capturing details such as the computer name, the username initiating the process, the exact command line used, and both the image path of the created process and the parent process's image path. Be aware that there might be instances where legitimate use of 'rundll32' without parameters is flagged by this detection approach; these are considered false positives. The significance of carefully monitoring for this activity is high due to its association with a known exploit technique."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        - OriginalFileName:\n            - 'PowerShell.EXE'\n            - 'pwsh.dll'\n    selection_to_1:\n        CommandLine|contains:\n            - 'ToInt'\n            - 'ToDecimal'\n            - 'ToByte'\n            - 'ToUint'\n            - 'ToSingle'\n            - 'ToSByte'\n    selection_to_2:\n        CommandLine|contains:\n            - 'ToChar'\n            - 'ToString'\n            - 'String'\n    selection_gen_1:\n        CommandLine|contains|all:\n            - 'char'\n            - 'join'\n    selection_gen_2:\n        CommandLine|contains|all:\n            - 'split'\n            - 'join'\n    condition: selection_img and (all of selection_to_* or 1 of selection_gen_*)\nfalsepositives:\n    - Unknown\nlevel: low\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect specific combinations of encoding methods in PowerShell via the commandline\n\nHere is how  the given sigma rule operates: In order to detect specific combinations of encoding methods in PowerShell via the commandline, you should: observe processes created in Windows environments, particularly focusing on instances where 'powershell.exe' or 'pwsh.exe' are launched or when the original file names are identified as 'PowerShell.EXE' or 'pwsh.dll'. From there, examine the command line arguments for presence of certain patterns. These patterns include methods related to data type conversions such as 'ToInt', 'ToDecimal', 'ToByte', 'ToUint', 'ToSingle', 'ToSByte', 'ToChar', 'ToString', and 'String'. Additionally, detect sequences where 'char' and 'join' are used together, or 'split' and 'join' are used in conjunction, as these combinations can indicate encoding attempts. Detection based on these conditions should operate with caution due to the low possibility of false positives, where legitimate use of these commands may unintentionally trigger alerts.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        - OriginalFileName:\n            - 'PowerShell.EXE'\n            - 'pwsh.dll'\n    selection_to_1:\n        CommandLine|contains:\n            - 'ToInt'\n            - 'ToDecimal'\n            - 'ToByte'\n            - 'ToUint'\n            - 'ToSingle'\n            - 'ToSByte'\n    selection_to_2:\n        CommandLine|contains:\n            - 'ToChar'\n            - 'ToString'\n            - 'String'\n    selection_gen_1:\n        CommandLine|contains|all:\n            - 'char'\n            - 'join'\n    selection_gen_2:\n        CommandLine|contains|all:\n            - 'split'\n            - 'join'\n    condition: selection_img and (all of selection_to_* or 1 of selection_gen_*)\nfalsepositives:\n    - Unknown\nlevel: low\n",
      "question": "specific combinations of encoding methods in PowerShell via the commandline",
      "answer": "In order to detect specific combinations of encoding methods in PowerShell via the commandline, you should: observe processes created in Windows environments, particularly focusing on instances where 'powershell.exe' or 'pwsh.exe' are launched or when the original file names are identified as 'PowerShell.EXE' or 'pwsh.dll'. From there, examine the command line arguments for presence of certain patterns. These patterns include methods related to data type conversions such as 'ToInt', 'ToDecimal', 'ToByte', 'ToUint', 'ToSingle', 'ToSByte', 'ToChar', 'ToString', and 'String'. Additionally, detect sequences where 'char' and 'join' are used together, or 'split' and 'join' are used in conjunction, as these combinations can indicate encoding attempts. Detection based on these conditions should operate with caution due to the low possibility of false positives, where legitimate use of these commands may unintentionally trigger alerts."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting logon events that have characteristics of events generated during an attack with RottenPotato and the like.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect logon events that have characteristics of events generated during an attack with RottenPotato and the like, you should focus on monitoring security logs in Windows environments. Specifically, pay attention to events with an ID of 4624, which indicates a successful logon event. The logon type should be 3, signifying a network logon. Crucially, these events will have the target username set to 'ANONYMOUS LOGON', and the workstation name field will be empty, represented by a '-'. Additionally, the IP address associated with these events will be '127.0.0.1' or '::1', both of which indicate local host connections. This pattern of characteristics is commonly associated with malicious activities, including but not limited to the exploitation techniques used by tools like RottenPotato. It\u2019s also essential to note that while any occurrence of these specific patterns should be investigated, there might be legitimate but rare scenarios where similar patterns occur, leading to potential false positives. In cybersecurity, identifying and analyzing events with these attributes at a high level of scrutiny is vital for early detection of this kind of attack tactic.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 4624\n        LogonType: 3\n        TargetUserName: 'ANONYMOUS LOGON'\n        WorkstationName: '-'\n        IpAddress: \n            - '127.0.0.1'\n            - '::1'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 4624\n        LogonType: 3\n        TargetUserName: 'ANONYMOUS LOGON'\n        WorkstationName: '-'\n        IpAddress: \n            - '127.0.0.1'\n            - '::1'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "logon events that have characteristics of events generated during an attack with RottenPotato and the like",
      "answer": "In order to detect logon events that have characteristics of events generated during an attack with RottenPotato and the like, you should focus on monitoring security logs in Windows environments. Specifically, pay attention to events with an ID of 4624, which indicates a successful logon event. The logon type should be 3, signifying a network logon. Crucially, these events will have the target username set to 'ANONYMOUS LOGON', and the workstation name field will be empty, represented by a '-'. Additionally, the IP address associated with these events will be '127.0.0.1' or '::1', both of which indicate local host connections. This pattern of characteristics is commonly associated with malicious activities, including but not limited to the exploitation techniques used by tools like RottenPotato. It\u2019s also essential to note that while any occurrence of these specific patterns should be investigated, there might be legitimate but rare scenarios where similar patterns occur, leading to potential false positives. In cybersecurity, identifying and analyzing events with these attributes at a high level of scrutiny is vital for early detection of this kind of attack tactic."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious Plink tunnel port forwarding to a local port.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious Plink tunnel port forwarding to a local port, you should monitor process creation logs on Windows systems. Look for any activities that match the description of using a command-line SSH, Telnet, and Rlogin client with an emphasis on command line execution containing ' -R ', which indicates the attempt to set up remote port forwarding to a local port. It's essential to be mindful of false positives which may occur due to legitimate administrative activities that utilize remote port forwarding to a local port. These detections carry a high level of importance due to their potential use in bypassing network security measures and facilitating unauthorized access. The tactical categorizations related to this behavior include Command and Control, and Tactic Techniques such as \"Remote Services: SSH\" and \"Port Forwarding.\"",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Description: 'Command-line SSH, Telnet, and Rlogin client'\n        CommandLine|contains: ' -R '\n    condition: selection\nfalsepositives:\n    - Administrative activity using a remote port forwarding to a local port\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Description: 'Command-line SSH, Telnet, and Rlogin client'\n        CommandLine|contains: ' -R '\n    condition: selection\nfalsepositives:\n    - Administrative activity using a remote port forwarding to a local port\nlevel: high\n",
      "question": "suspicious Plink tunnel port forwarding to a local port",
      "answer": "In order to detect suspicious Plink tunnel port forwarding to a local port, you should monitor process creation logs on Windows systems. Look for any activities that match the description of using a command-line SSH, Telnet, and Rlogin client with an emphasis on command line execution containing ' -R ', which indicates the attempt to set up remote port forwarding to a local port. It's essential to be mindful of false positives which may occur due to legitimate administrative activities that utilize remote port forwarding to a local port. These detections carry a high level of importance due to their potential use in bypassing network security measures and facilitating unauthorized access. The tactical categorizations related to this behavior include Command and Control, and Tactic Techniques such as \"Remote Services: SSH\" and \"Port Forwarding.\""
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting signs of the WMI script host process \"scrcons.exe\" loading scripting DLLs which could indciates WMI ActiveScriptEventConsumers EventConsumers activity..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect signs of the WMI script host process \"scrcons.exe\" loading scripting DLLs which could indicate WMI ActiveScriptEventConsumers EventConsumers activity, you should monitor Windows image load events for instances where the \"scrcons.exe\" is involved alongside the loading of specific scripting Dynamic Link Libraries (DLLs). These libraries include 'vbscript.dll', 'wbemdisp.dll', 'wshom.ocx', and 'scrrun.dll'. The presence of these activities may signal the malicious use of Windows Management Instrumentation (WMI) for executing scripts, a technique often utilized by attackers for persistence, lateral movement, or information gathering. It is important to note that there may be legitimate uses of these DLLs, and certain devices, such as Dell computers, might trigger these alerts under normal operations, like adjusting screen brightness via the keyboard. The alert level for these findings is classified as medium, indicating a need for investigations to ascertain the nature of these events further.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\scrcons.exe'\n        ImageLoaded|endswith:\n            - '\\vbscript.dll'\n            - '\\wbemdisp.dll'\n            - '\\wshom.ocx'\n            - '\\scrrun.dll'\n    condition: selection\nfalsepositives:\n    - Legitimate event consumers\n    - Dell computers on some versions register an event consumer that is known to cause false positives when brightness is changed by the corresponding keyboard button\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\scrcons.exe'\n        ImageLoaded|endswith:\n            - '\\vbscript.dll'\n            - '\\wbemdisp.dll'\n            - '\\wshom.ocx'\n            - '\\scrrun.dll'\n    condition: selection\nfalsepositives:\n    - Legitimate event consumers\n    - Dell computers on some versions register an event consumer that is known to cause false positives when brightness is changed by the corresponding keyboard button\nlevel: medium\n",
      "question": "signs of the WMI script host process \"scrcons.exe\" loading scripting DLLs which could indciates WMI ActiveScriptEventConsumers EventConsumers activity.",
      "answer": "In order to detect signs of the WMI script host process \"scrcons.exe\" loading scripting DLLs which could indicate WMI ActiveScriptEventConsumers EventConsumers activity, you should monitor Windows image load events for instances where the \"scrcons.exe\" is involved alongside the loading of specific scripting Dynamic Link Libraries (DLLs). These libraries include 'vbscript.dll', 'wbemdisp.dll', 'wshom.ocx', and 'scrrun.dll'. The presence of these activities may signal the malicious use of Windows Management Instrumentation (WMI) for executing scripts, a technique often utilized by attackers for persistence, lateral movement, or information gathering. It is important to note that there may be legitimate uses of these DLLs, and certain devices, such as Dell computers, might trigger these alerts under normal operations, like adjusting screen brightness via the keyboard. The alert level for these findings is classified as medium, indicating a need for investigations to ascertain the nature of these events further."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting when Events are deleted in Azure Kubernetes. An adversary may delete events in Azure Kubernetes in an attempt to evade detection..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when Events are deleted in Azure Kubernetes, an adversary may delete events in Azure Kubernetes in an attempt to evade detection, you should: Monitor Azure activity logs specifically for operations related to the deletion of events within the Azure Kubernetes Service (AKS). Focus on the activity log entries that indicate the operation name `MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/EVENTS.K8S.IO/EVENTS/DELETE`, as this operation signifies that an event has been deleted from the Kubernetes cluster. It is crucial to investigate such deletions to determine whether they are legitimate administrative actions or potential indicators of malicious behavior aiming to evade detection. Consider that event deletions could be normal activities performed by system or network administrators; therefore, verify the context such as the username, hostname, and the resource name involved in the deletions to ensure they align with expected behaviors in your environment. Suspicious activity would include deletions from unfamiliar users or hosts. In instances where known behaviors are identified as causing false positives, such actions can be filtered out to refine the monitoring process. This approach sets a medium-level importance on tracking and analyzing event deletion activities within Azure Kubernetes environments as part of a broader cybersecurity strategy to detect and mitigate attempts by adversaries to hide their tracks.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: azure\n    service: activitylogs\ndetection:\n    selection:\n        operationName: MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/EVENTS.K8S.IO/EVENTS/DELETE\n    condition: selection\nfalsepositives:\n    - Event deletions may be done by a system or network administrator. Verify whether the username, hostname, and/or resource name should be making changes in your environment. Events deletions from unfamiliar users or hosts should be investigated. If known behavior is causing false positives, it can be exempted from the rule.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: azure\n    service: activitylogs\ndetection:\n    selection:\n        operationName: MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/EVENTS.K8S.IO/EVENTS/DELETE\n    condition: selection\nfalsepositives:\n    - Event deletions may be done by a system or network administrator. Verify whether the username, hostname, and/or resource name should be making changes in your environment. Events deletions from unfamiliar users or hosts should be investigated. If known behavior is causing false positives, it can be exempted from the rule.\nlevel: medium\n",
      "question": "when Events are deleted in Azure Kubernetes. An adversary may delete events in Azure Kubernetes in an attempt to evade detection.",
      "answer": "In order to detect when Events are deleted in Azure Kubernetes, an adversary may delete events in Azure Kubernetes in an attempt to evade detection, you should: Monitor Azure activity logs specifically for operations related to the deletion of events within the Azure Kubernetes Service (AKS). Focus on the activity log entries that indicate the operation name `MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/EVENTS.K8S.IO/EVENTS/DELETE`, as this operation signifies that an event has been deleted from the Kubernetes cluster. It is crucial to investigate such deletions to determine whether they are legitimate administrative actions or potential indicators of malicious behavior aiming to evade detection. Consider that event deletions could be normal activities performed by system or network administrators; therefore, verify the context such as the username, hostname, and the resource name involved in the deletions to ensure they align with expected behaviors in your environment. Suspicious activity would include deletions from unfamiliar users or hosts. In instances where known behaviors are identified as causing false positives, such actions can be filtered out to refine the monitoring process. This approach sets a medium-level importance on tracking and analyzing event deletion activities within Azure Kubernetes environments as part of a broader cybersecurity strategy to detect and mitigate attempts by adversaries to hide their tracks."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\protocolhandler.exe'\n        - OriginalFileName: 'ProtocolHandler.exe'\n    selection_cli_1:\n        CommandLine|contains|all:\n            - '\"ms-word'\n            - '.docx\"'\n    selection_cli_2:\n        CommandLine|contains: ' http' #cover http and https\n    condition: selection_img and 1 of selection_cli_*\nfalsepositives:\n    - Unknown\nlevel: medium\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect usage of \"ProtocolHandler\" to download files. Downloaded files will be located in the cache folder (for example - %LOCALAPPDATA%\\Microsoft\\Windows\\INetCache\\IE)\n\nHere is how  the given sigma rule operates: In order to Detects usage of \"ProtocolHandler\" to download files. Downloaded files will be located in the cache folder (for example - %LOCALAPPDATA%\\Microsoft\\Windows\\INetCache\\IE), you should: Monitor for process creation events on Windows systems that involve the execution of 'protocolhandler.exe'. Specifically, look for instances where 'protocolhandler.exe', either in its path name ends with '\\protocolhandler.exe' or the original file name exactly matches 'ProtocolHandler.exe'. Additionally, examine the command line arguments used during the execution for two patterns: one that includes both '\"ms-word' and '.docx\"' (indicating the handling of Word documents), and another that contains 'http' (covering both 'http' and 'https' schemas). This detection focuses on identifying situations where the ProtocolHandler might be used to download files, which could potentially be malicious. A match for the executable name along with either of the command line patterns should raise an alert, albeit with an understanding that there might be unknown false positives. The alert level for this detection is considered medium. This monitoring aims to leverage the detection of techniques tied to the initial access, execution, and command and control phases where adversaries may abuse the ProtocolHandler to retrieve and execute malicious payloads stored in remote locations, signifying potential security threats.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\protocolhandler.exe'\n        - OriginalFileName: 'ProtocolHandler.exe'\n    selection_cli_1:\n        CommandLine|contains|all:\n            - '\"ms-word'\n            - '.docx\"'\n    selection_cli_2:\n        CommandLine|contains: ' http' #cover http and https\n    condition: selection_img and 1 of selection_cli_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "usage of \"ProtocolHandler\" to download files. Downloaded files will be located in the cache folder (for example - %LOCALAPPDATA%\\Microsoft\\Windows\\INetCache\\IE)",
      "answer": "In order to Detects usage of \"ProtocolHandler\" to download files. Downloaded files will be located in the cache folder (for example - %LOCALAPPDATA%\\Microsoft\\Windows\\INetCache\\IE), you should: Monitor for process creation events on Windows systems that involve the execution of 'protocolhandler.exe'. Specifically, look for instances where 'protocolhandler.exe', either in its path name ends with '\\protocolhandler.exe' or the original file name exactly matches 'ProtocolHandler.exe'. Additionally, examine the command line arguments used during the execution for two patterns: one that includes both '\"ms-word' and '.docx\"' (indicating the handling of Word documents), and another that contains 'http' (covering both 'http' and 'https' schemas). This detection focuses on identifying situations where the ProtocolHandler might be used to download files, which could potentially be malicious. A match for the executable name along with either of the command line patterns should raise an alert, albeit with an understanding that there might be unknown false positives. The alert level for this detection is considered medium. This monitoring aims to leverage the detection of techniques tied to the initial access, execution, and command and control phases where adversaries may abuse the ProtocolHandler to retrieve and execute malicious payloads stored in remote locations, signifying potential security threats."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\java.exe'\n        Image|endswith:\n            - '\\cmd.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n    filter:\n        ParentImage|contains: 'build'  # excluding CI build agents\n        CommandLine|contains: 'build'  # excluding CI build agents\n    condition: selection and not filter\nfalsepositives:\n    - Legitimate calls to system binaries\n    - Company specific internal usage\nlevel: medium\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect shell spawned from Java host process, which could be a sign of exploitation (e.g. log4j exploitation)\n\nHere is how  the given sigma rule operates: In order to detect shell spawned from Java host process, which could be a sign of exploitation (e.g. log4j exploitation), you should: focus on monitoring the creation of processes on Windows systems. Specifically, look for instances where a Java process (`java.exe`) is the parent process for the creation of command line (`cmd.exe`), PowerShell (`powershell.exe`), or PowerShell Core (`pwsh.exe`) processes. It's important to exclude any activity where the parent or child process's command line includes the term 'build', as this often indicates a legitimate use associated with Continuous Integration (CI) build agents rather than malicious activity. The detection holds a medium severity level, acknowledging that while not all instances of shell spawning from a Java process are malicious, this pattern warrants further investigation due to the potential link to exploitation efforts, like those seen with the log4j vulnerability. Be aware that legitimate uses of system binaries and company-specific internal usages might generate false positive alerts.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\java.exe'\n        Image|endswith:\n            - '\\cmd.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n    filter:\n        ParentImage|contains: 'build'  # excluding CI build agents\n        CommandLine|contains: 'build'  # excluding CI build agents\n    condition: selection and not filter\nfalsepositives:\n    - Legitimate calls to system binaries\n    - Company specific internal usage\nlevel: medium\n",
      "question": "shell spawned from Java host process, which could be a sign of exploitation (e.g. log4j exploitation)",
      "answer": "In order to detect shell spawned from Java host process, which could be a sign of exploitation (e.g. log4j exploitation), you should: focus on monitoring the creation of processes on Windows systems. Specifically, look for instances where a Java process (`java.exe`) is the parent process for the creation of command line (`cmd.exe`), PowerShell (`powershell.exe`), or PowerShell Core (`pwsh.exe`) processes. It's important to exclude any activity where the parent or child process's command line includes the term 'build', as this often indicates a legitimate use associated with Continuous Integration (CI) build agents rather than malicious activity. The detection holds a medium severity level, acknowledging that while not all instances of shell spawning from a Java process are malicious, this pattern warrants further investigation due to the potential link to exploitation efforts, like those seen with the log4j vulnerability. Be aware that legitimate uses of system binaries and company-specific internal usages might generate false positive alerts."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: registry_event\n    product: windows\ndetection:\n    selection:\n        TargetObject|contains: '\\Security\\Trusted Documents\\TrustRecords'\n    condition: selection\nfalsepositives:\n    - This will alert on legitimate macro usage as well, additional tuning is required\nlevel: medium\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect Alerts on trust record modification within the registry, indicating usage of macros\n\nHere is how  the given sigma rule operates: In order to alert on trust record modification within the registry, indicating usage of macros, you should: Monitor registry events within Windows where changes are made to the '\\Security\\Trusted Documents\\TrustRecords' path. This focuses on detecting modifications that could imply the activation or use of macros, commonly leveraged in malicious activities. However, it's important to note that this method may also detect legitimate macro usage, so further refinement and tuning of this detection strategy might be necessary to reduce false positives. The overall severity level for these occurrences is considered medium, signifying a notable but not extreme risk level associated with these modifications.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_event\n    product: windows\ndetection:\n    selection:\n        TargetObject|contains: '\\Security\\Trusted Documents\\TrustRecords'\n    condition: selection\nfalsepositives:\n    - This will alert on legitimate macro usage as well, additional tuning is required\nlevel: medium\n",
      "question": "Alerts on trust record modification within the registry, indicating usage of macros",
      "answer": "In order to alert on trust record modification within the registry, indicating usage of macros, you should: Monitor registry events within Windows where changes are made to the '\\Security\\Trusted Documents\\TrustRecords' path. This focuses on detecting modifications that could imply the activation or use of macros, commonly leveraged in malicious activities. However, it's important to note that this method may also detect legitimate macro usage, so further refinement and tuning of this detection strategy might be necessary to reduce false positives. The overall severity level for these occurrences is considered medium, signifying a notable but not extreme risk level associated with these modifications."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Adversaries may abuse PowerShell commands and scripts for execution.\nPowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. (Citation: TechNet PowerShell)\nAdversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect adversaries abusing PowerShell commands and scripts for execution, monitor Windows PowerShell script logs, particularly focusing on scripts that contain specific characteristics indicating potentially malicious activity. Look for scripts with Script Block Logging enabled, and examine script contents for the following sequence of commands and objects:\n\n1. Creation of new objects using `New-Object`.\n2. Use of the `-ComObject` flag which indicates interaction with COM objects.\n3. Instantiation of `MsXml2.` objects, often used with `XmlHttp` to send or receive HTTP requests.\n\nSuch scripts are indicative of PowerShell being used to interact with external components or services, potentially for malicious purposes such as data exfiltration, downloading additional payloads, or executing remote commands. These activities tie back to techniques where PowerShell can be leveraged for attack execution and information discovery.\n\nHowever, it\u2019s important to consider that these indicators might also be present in legitimate administrative scripts. The detection level for such activities is set to medium, acknowledging that while these indicators are suggestive of malicious use, they are not definitively indicative of such. Continuous monitoring and context-aware analysis are recommended to distinguish between malicious activities and legitimate administrative use of PowerShell.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains|all:\n            - 'New-Object'\n            - '-ComObject'\n            - 'MsXml2.'\n            - 'XmlHttp'\n    condition: selection\nfalsepositives:\n    - Legitimate administrative script\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains|all:\n            - 'New-Object'\n            - '-ComObject'\n            - 'MsXml2.'\n            - 'XmlHttp'\n    condition: selection\nfalsepositives:\n    - Legitimate administrative script\nlevel: medium\n",
      "question": "Adversaries may abuse PowerShell commands and scripts for execution.\nPowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. (Citation: TechNet PowerShell)\nAdversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code\n",
      "answer": "In order to detect adversaries abusing PowerShell commands and scripts for execution, monitor Windows PowerShell script logs, particularly focusing on scripts that contain specific characteristics indicating potentially malicious activity. Look for scripts with Script Block Logging enabled, and examine script contents for the following sequence of commands and objects:\n\n1. Creation of new objects using `New-Object`.\n2. Use of the `-ComObject` flag which indicates interaction with COM objects.\n3. Instantiation of `MsXml2.` objects, often used with `XmlHttp` to send or receive HTTP requests.\n\nSuch scripts are indicative of PowerShell being used to interact with external components or services, potentially for malicious purposes such as data exfiltration, downloading additional payloads, or executing remote commands. These activities tie back to techniques where PowerShell can be leveraged for attack execution and information discovery.\n\nHowever, it\u2019s important to consider that these indicators might also be present in legitimate administrative scripts. The detection level for such activities is set to medium, acknowledging that while these indicators are suggestive of malicious use, they are not definitively indicative of such. Continuous monitoring and context-aware analysis are recommended to distinguish between malicious activities and legitimate administrative use of PowerShell."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting user disables a critical security feature for an organization..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when a user disables a critical security feature for an organization, you should monitor GitHub audit logs, which requires the audit log streaming feature to be enabled. This monitoring targets activities that compromise security configurations, specifically within GitHub organizations or repositories. The key actions indicative of such activities include disabling OAuth app restrictions, disabling the requirement for two-factor authentication, disabling advanced security for a repository, and selecting a member to disable advanced security policy. \n\nFor effective detection, focus on the following data points extracted from the audit logs: the specific action taken, the actor who performed the action, the organization affected, the country code of the actor's location, the transport protocol used, the targeted repository, the public status of the repository, and the timestamp of the action. It is important to distinguish between legitimate administrative activities and malicious actions. Any activity falling outside approved administrative tasks should be considered a high-level security concern. \n\nThis approach is aligned with the MITRE ATT&CK tactics and techniques for Initial Access and Persistence by monitoring and flagging the disabling of critical security measures in GitHub environments.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: github\n    service: audit\n    definition: 'Requirements: The audit log streaming feature must be enabled to be able to receive such logs. You can enable following the documentation here: https://docs.github.com/en/enterprise-cloud@latest/admin/monitoring-activity-in-your-enterprise/reviewing-audit-logs-for-your-enterprise/streaming-the-audit-log-for-your-enterprise#setting-up-audit-log-streaming'\ndetection:\n    selection:\n        action:\n            - 'org.disable_oauth_app_restrictions'\n            - 'org.disable_two_factor_requirement'\n            - 'repo.advanced_security_disabled'\n            - 'org.advanced_security_policy_selected_member_disabled'\n    condition: selection\nfields:\n    - 'action'\n    - 'actor'\n    - 'org'\n    - 'actor_location.country_code'\n    - 'transport_protocol_name'\n    - 'repository'\n    - 'repo'\n    - 'repository_public'\n    - '@timestamp'\nfalsepositives:\n     - Approved administrator/owner activities.\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: github\n    service: audit\n    definition: 'Requirements: The audit log streaming feature must be enabled to be able to receive such logs. You can enable following the documentation here: https://docs.github.com/en/enterprise-cloud@latest/admin/monitoring-activity-in-your-enterprise/reviewing-audit-logs-for-your-enterprise/streaming-the-audit-log-for-your-enterprise#setting-up-audit-log-streaming'\ndetection:\n    selection:\n        action:\n            - 'org.disable_oauth_app_restrictions'\n            - 'org.disable_two_factor_requirement'\n            - 'repo.advanced_security_disabled'\n            - 'org.advanced_security_policy_selected_member_disabled'\n    condition: selection\nfields:\n    - 'action'\n    - 'actor'\n    - 'org'\n    - 'actor_location.country_code'\n    - 'transport_protocol_name'\n    - 'repository'\n    - 'repo'\n    - 'repository_public'\n    - '@timestamp'\nfalsepositives:\n     - Approved administrator/owner activities.\nlevel: high\n",
      "question": "user disables a critical security feature for an organization.",
      "answer": "In order to detect when a user disables a critical security feature for an organization, you should monitor GitHub audit logs, which requires the audit log streaming feature to be enabled. This monitoring targets activities that compromise security configurations, specifically within GitHub organizations or repositories. The key actions indicative of such activities include disabling OAuth app restrictions, disabling the requirement for two-factor authentication, disabling advanced security for a repository, and selecting a member to disable advanced security policy. \n\nFor effective detection, focus on the following data points extracted from the audit logs: the specific action taken, the actor who performed the action, the organization affected, the country code of the actor's location, the transport protocol used, the targeted repository, the public status of the repository, and the timestamp of the action. It is important to distinguish between legitimate administrative activities and malicious actions. Any activity falling outside approved administrative tasks should be considered a high-level security concern. \n\nThis approach is aligned with the MITRE ATT&CK tactics and techniques for Initial Access and Persistence by monitoring and flagging the disabling of critical security measures in GitHub environments."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Identifies the execution traces of the XCSSET malware. XCSSET is a macOS trojan that primarily spreads via Xcode projects and maliciously modifies applications. Infected users are also vulnerable to having their credentials, accounts, and other vital data stolen..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to identify the execution traces of the XCSSET malware, a macOS trojan that primarily spreads via Xcode projects and maliciously modifies applications, leaving infected users vulnerable to stolen credentials, accounts, and other vital data, you should: \nLook for process creation events on macOS systems that match specific conditions indicative of this malware's activity. Monitor for the usage of the 'curl' command initiated by '/bash' to access suspicious URLs containing '/sys/log.php', '/sys/prepod.php', or '/sys/bin/Pods', as these may be attempts to communicate with a command and control server. Also, watch out for processes initiated by '/bash' using 'osacompile' or 'plutil' to manipulate files or applications, specifically when the command lines include '/Users/' and '/Library/Group Containers/', indicating tampering with user data or applications. Additionally, the creation of zip archives targeting directories within '/Users/' and '/Library/Group Containers/' should be scrutinized if the 'zip' command is involved, as this could suggest data exfiltration attempts. Lastly, any command line containing 'https://' is of interest due to potential malicious network communication. The identified behaviors are tagged under command and control tactics, revealing efforts to manage and control compromised systems remotely.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: macos\ntags:\n    - attack.command_and_control\ndetection:\n    selection_1_curl:\n        ParentImage|endswith: '/bash'\n        Image|endswith: '/curl'\n        CommandLine|contains:\n            - '/sys/log.php'\n            - '/sys/prepod.php'\n            - '/sys/bin/Pods'\n    selection_1_https:\n        CommandLine|contains: 'https://'\n    selection_other_1:\n        ParentImage|endswith: '/bash'\n        Image|endswith: '/osacompile'\n        CommandLine|contains|all:\n            - '/Users/'\n            - '/Library/Group Containers/'\n    selection_other_2:\n        ParentImage|endswith: '/bash'\n        Image|endswith: '/plutil'\n        CommandLine|contains|all:\n            - 'LSUIElement'\n            - '/Users/'\n            - '/Library/Group Containers/'\n    selection_other_3:\n        Image|endswith: '/zip'\n        CommandLine|contains|all:\n            - '-r'\n            - '/Users/'\n            - '/Library/Group Containers/'\n    condition: all of selection_1_* or 1 of selection_other_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: macos\ntags:\n    - attack.command_and_control\ndetection:\n    selection_1_curl:\n        ParentImage|endswith: '/bash'\n        Image|endswith: '/curl'\n        CommandLine|contains:\n            - '/sys/log.php'\n            - '/sys/prepod.php'\n            - '/sys/bin/Pods'\n    selection_1_https:\n        CommandLine|contains: 'https://'\n    selection_other_1:\n        ParentImage|endswith: '/bash'\n        Image|endswith: '/osacompile'\n        CommandLine|contains|all:\n            - '/Users/'\n            - '/Library/Group Containers/'\n    selection_other_2:\n        ParentImage|endswith: '/bash'\n        Image|endswith: '/plutil'\n        CommandLine|contains|all:\n            - 'LSUIElement'\n            - '/Users/'\n            - '/Library/Group Containers/'\n    selection_other_3:\n        Image|endswith: '/zip'\n        CommandLine|contains|all:\n            - '-r'\n            - '/Users/'\n            - '/Library/Group Containers/'\n    condition: all of selection_1_* or 1 of selection_other_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Identifies the execution traces of the XCSSET malware. XCSSET is a macOS trojan that primarily spreads via Xcode projects and maliciously modifies applications. Infected users are also vulnerable to having their credentials, accounts, and other vital data stolen.",
      "answer": "In order to identify the execution traces of the XCSSET malware, a macOS trojan that primarily spreads via Xcode projects and maliciously modifies applications, leaving infected users vulnerable to stolen credentials, accounts, and other vital data, you should: \nLook for process creation events on macOS systems that match specific conditions indicative of this malware's activity. Monitor for the usage of the 'curl' command initiated by '/bash' to access suspicious URLs containing '/sys/log.php', '/sys/prepod.php', or '/sys/bin/Pods', as these may be attempts to communicate with a command and control server. Also, watch out for processes initiated by '/bash' using 'osacompile' or 'plutil' to manipulate files or applications, specifically when the command lines include '/Users/' and '/Library/Group Containers/', indicating tampering with user data or applications. Additionally, the creation of zip archives targeting directories within '/Users/' and '/Library/Group Containers/' should be scrutinized if the 'zip' command is involved, as this could suggest data exfiltration attempts. Lastly, any command line containing 'https://' is of interest due to potential malicious network communication. The identified behaviors are tagged under command and control tactics, revealing efforts to manage and control compromised systems remotely."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of CustomShellHost binary where the child isn't located in 'C:\\Windows\\explorer.exe'.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the execution of CustomShellHost binary where the child isn't located in 'C:\\Windows\\explorer.exe', you should: Monitor the creation of processes on Windows systems, focusing on identifying instances where a process named 'CustomShellHost.exe' initiates another process. However, any initiated process that is exactly 'C:\\Windows\\explorer.exe' should be excluded from suspicions. This approach aims to spot potentially malicious activities while minimizing false positives, though it's important to note that some unrelated activities may still be incorrectly flagged as suspicious. The monitoring is guided by medium-level alerts, indicating a balanced sensitivity towards detecting potentially harmful actions without overwhelming the system with false alarms.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\CustomShellHost.exe'\n    filter:\n        Image: 'C:\\Windows\\explorer.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\CustomShellHost.exe'\n    filter:\n        Image: 'C:\\Windows\\explorer.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "execution of CustomShellHost binary where the child isn't located in 'C:\\Windows\\explorer.exe'",
      "answer": "In order to detect the execution of CustomShellHost binary where the child isn't located in 'C:\\Windows\\explorer.exe', you should: Monitor the creation of processes on Windows systems, focusing on identifying instances where a process named 'CustomShellHost.exe' initiates another process. However, any initiated process that is exactly 'C:\\Windows\\explorer.exe' should be excluded from suspicions. This approach aims to spot potentially malicious activities while minimizing false positives, though it's important to note that some unrelated activities may still be incorrectly flagged as suspicious. The monitoring is guided by medium-level alerts, indicating a balanced sensitivity towards detecting potentially harmful actions without overwhelming the system with false alarms."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    product: windows\n    service: application\n    definition: MSSQL audit policy to monitor for 'xp_cmdshell' must be enabled in order to receive this event in the application log (Follow this tutorial https://dba.stackexchange.com/questions/103183/is-there-any-way-to-monitor-execution-of-xp-cmdshell-in-sql-server-2012)\n    # warning: The 'data' field used in the detection section is the container for the event data as a whole. You may have to adapt the rule for your backend accordingly\ndetection:\n    selection:\n        Provider_Name: 'MSSQLSERVER'\n        EventID: 33205\n        Data|contains|all:\n            # You can modify this to include specific commands\n            - 'object_name:xp_cmdshell'\n            - 'statement:EXEC'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect when the MSSQL \"xp_cmdshell\" stored procedure is used to execute commands\n\nHere is how  the given sigma rule operates: In order to detect when the MSSQL \"xp_cmdshell\" stored procedure is used to execute commands, you should monitor application logs for specific events related to this activity. The focus is on the Windows environment, particularly the MSSQL audit policy, which needs to be configured to record activities associated with the 'xp_cmdshell' stored procedure. This enables the capture of relevant events in the application log.\n\nFor effective monitoring, look for logs generated under the 'MSSQLSERVER' provider name, specifically events with the ID 33205. These logs should contain data indicating both the use of 'xp_cmdshell' and the execution of a command, signified by 'object_name:xp_cmdshell' and 'statement:EXEC' within the data field of the event. It's essential to ensure that the MSSQL audit policy is properly set up to track 'xp_cmdshell' usage as detailed in guides and tutorials focused on this topic.\n\nSince there's a possibility of encountering records that are not indicative of malicious activity, be aware of potential false positives. However, given the high level of concern associated with the unauthorized use of 'xp_cmdshell' to execute commands, any detection of such events should be treated with a high level of scrutiny. \n\nTags associated with this detection focus on the tactics and techniques commonly used by attackers, explicitly invoking command and script interpreters to execute commands via 'xp_cmdshell', which aligns with the detection goal. Monitoring for these specific conditions in the application logs is critical for identifying potentially malicious activities involving the misuse of stored procedures to execute system-level commands.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: application\n    definition: MSSQL audit policy to monitor for 'xp_cmdshell' must be enabled in order to receive this event in the application log (Follow this tutorial https://dba.stackexchange.com/questions/103183/is-there-any-way-to-monitor-execution-of-xp-cmdshell-in-sql-server-2012)\n    # warning: The 'data' field used in the detection section is the container for the event data as a whole. You may have to adapt the rule for your backend accordingly\ndetection:\n    selection:\n        Provider_Name: 'MSSQLSERVER'\n        EventID: 33205\n        Data|contains|all:\n            # You can modify this to include specific commands\n            - 'object_name:xp_cmdshell'\n            - 'statement:EXEC'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "when the MSSQL \"xp_cmdshell\" stored procedure is used to execute commands",
      "answer": "In order to detect when the MSSQL \"xp_cmdshell\" stored procedure is used to execute commands, you should monitor application logs for specific events related to this activity. The focus is on the Windows environment, particularly the MSSQL audit policy, which needs to be configured to record activities associated with the 'xp_cmdshell' stored procedure. This enables the capture of relevant events in the application log.\n\nFor effective monitoring, look for logs generated under the 'MSSQLSERVER' provider name, specifically events with the ID 33205. These logs should contain data indicating both the use of 'xp_cmdshell' and the execution of a command, signified by 'object_name:xp_cmdshell' and 'statement:EXEC' within the data field of the event. It's essential to ensure that the MSSQL audit policy is properly set up to track 'xp_cmdshell' usage as detailed in guides and tutorials focused on this topic.\n\nSince there's a possibility of encountering records that are not indicative of malicious activity, be aware of potential false positives. However, given the high level of concern associated with the unauthorized use of 'xp_cmdshell' to execute commands, any detection of such events should be treated with a high level of scrutiny. \n\nTags associated with this detection focus on the tactics and techniques commonly used by attackers, explicitly invoking command and script interpreters to execute commands via 'xp_cmdshell', which aligns with the detection goal. Monitoring for these specific conditions in the application logs is critical for identifying potentially malicious activities involving the misuse of stored procedures to execute system-level commands."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - '/e:jscript' # This is a guess since the report doesn't mention the method of execution. This assumes that it is achieved via specifying the execution engine\n            - '\\Local\\Temp\\Errors.bat'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect potential EmpireMonkey APT activity\n\nHere is how  the given sigma rule operates: In order to detect potential EmpireMonkey APT activity, you should: Focus on monitoring the creation of processes within Windows environments. Specifically, look for occurrences where the command line execution involves the use of '/e:jscript', which indicates the specification of the execution engine, likely for malicious purposes. Additionally, pay attention to the use of '\\Local\\Temp\\Errors.bat' in the command line, as this points to a script execution that is suspect within the context of this attack pattern. The analysis should be concentrated on these combined elements in the command line execution to identify potential malicious activities. The reliability of this detection strategy is considered high with a minimal chance of false positives, indicating that when these indicators are found, they are likely indicative of an actual threat rather than benign activities.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - '/e:jscript' # This is a guess since the report doesn't mention the method of execution. This assumes that it is achieved via specifying the execution engine\n            - '\\Local\\Temp\\Errors.bat'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "potential EmpireMonkey APT activity",
      "answer": "In order to detect potential EmpireMonkey APT activity, you should: Focus on monitoring the creation of processes within Windows environments. Specifically, look for occurrences where the command line execution involves the use of '/e:jscript', which indicates the specification of the execution engine, likely for malicious purposes. Additionally, pay attention to the use of '\\Local\\Temp\\Errors.bat' in the command line, as this points to a script execution that is suspect within the context of this attack pattern. The analysis should be concentrated on these combined elements in the command line execution to identify potential malicious activities. The reliability of this detection strategy is considered high with a minimal chance of false positives, indicating that when these indicators are found, they are likely indicative of an actual threat rather than benign activities."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: proxy\ndetection:\n    selection:\n        c-useragent|startswith: 'Microsoft BITS/'\n    falsepositives:\n        cs-host|endswith:\n            - '.com'\n            - '.net'\n            - '.org'\n            - '.scdn.co' # spotify streaming\n            - '.sfx.ms' # Microsoft domain, example request: https://oneclient.sfx.ms/PreSignInSettings/Prod/2022-08-15-21-xx-xx/PreSignInSettingsConfig.json\n    condition: selection and not falsepositives\nfields:\n    - ClientIP\n    - c-uri\n    - c-useragent\nfalsepositives:\n    - Rare programs that use Bitsadmin and update from regional TLDs e.g. .uk or .ca\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect Bitsadmin connections to domains with uncommon TLDs\n\nHere is how  the given sigma rule operates: In order to detect Bitsadmin connections to domains with uncommon TLDs, you should monitor proxy logs for connections initiated by the Microsoft Background Intelligent Transfer Service (BITS). Look specifically for user agents that start with 'Microsoft BITS/'. However, it's important to filter out connections to common top-level domains (TLDs) such as '.com', '.net', '.org', as well as specific domains known to be benign, like '.scdn.co' (used by Spotify for streaming) and '.sfx.ms' (a Microsoft domain). The presence of requests not directed towards these filtered domains could indicate suspicious activity, potentially linked to the use of Bitsadmin for malicious purposes, such as data exfiltration or malware download from uncommon or suspicious TLDs.\n\nEnsure that you record the client's IP address, the requested URI, and the user-agent string for further investigation. Be aware that there might be legitimate, though rare, cases of programs using Bitsadmin to update from regional TLDs, so it's essential to consider the context of detections and investigate potential false positives thoroughly. This approach is crucial in identifying the misuse of BITS, which could relate to various cyber attack tactics and techniques, primarily focusing on initial access, command and control, and exfiltration activities.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: proxy\ndetection:\n    selection:\n        c-useragent|startswith: 'Microsoft BITS/'\n    falsepositives:\n        cs-host|endswith:\n            - '.com'\n            - '.net'\n            - '.org'\n            - '.scdn.co' # spotify streaming\n            - '.sfx.ms' # Microsoft domain, example request: https://oneclient.sfx.ms/PreSignInSettings/Prod/2022-08-15-21-xx-xx/PreSignInSettingsConfig.json\n    condition: selection and not falsepositives\nfields:\n    - ClientIP\n    - c-uri\n    - c-useragent\nfalsepositives:\n    - Rare programs that use Bitsadmin and update from regional TLDs e.g. .uk or .ca\nlevel: high\n",
      "question": "Bitsadmin connections to domains with uncommon TLDs",
      "answer": "In order to detect Bitsadmin connections to domains with uncommon TLDs, you should monitor proxy logs for connections initiated by the Microsoft Background Intelligent Transfer Service (BITS). Look specifically for user agents that start with 'Microsoft BITS/'. However, it's important to filter out connections to common top-level domains (TLDs) such as '.com', '.net', '.org', as well as specific domains known to be benign, like '.scdn.co' (used by Spotify for streaming) and '.sfx.ms' (a Microsoft domain). The presence of requests not directed towards these filtered domains could indicate suspicious activity, potentially linked to the use of Bitsadmin for malicious purposes, such as data exfiltration or malware download from uncommon or suspicious TLDs.\n\nEnsure that you record the client's IP address, the requested URI, and the user-agent string for further investigation. Be aware that there might be legitimate, though rare, cases of programs using Bitsadmin to update from regional TLDs, so it's essential to consider the context of detections and investigate potential false positives thoroughly. This approach is crucial in identifying the misuse of BITS, which could relate to various cyber attack tactics and techniques, primarily focusing on initial access, command and control, and exfiltration activities."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting unusually long PowerShell command lines with a length of 1000 characters or more.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect unusually long PowerShell command lines with a length of 1000 characters or more, you should monitor the process creation logs on Windows systems. Specifically, focus on identifying instances where PowerShell is being executed. This can be accomplished by looking for processes that end with '\\powershell.exe' or '\\pwsh.exe', as well as checking for files named 'PowerShell.EXE' or 'pwsh.dll'. Additionally, processes that have a description of 'Windows PowerShell' or are a product of 'PowerShell Core 6' should also be considered relevant.\n\nFurthermore, it's important to scrutinize the command line length for these PowerShell processes. Any command line that exceeds 999 characters should be flagged. This approach helps in identifying actions where PowerShell is used with extensive command-line arguments or scripts, which can be indicative of malicious activity.\n\nKeep in mind, however, that there may be legitimate reasons for long PowerShell command lines, so the detection of such a scenario is considered to have a low level of confidence and might produce unknown false positives. Thus, any detection should be further investigated to ascertain its nature. This method focuses on identifying potential security breaches through the abuse of PowerShell, which is often used by attackers to execute malicious commands or scripts due to its powerful capabilities and deep integration with Windows.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_powershell:\n        - Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        - OriginalFileName:\n            - 'PowerShell.EXE'\n            - 'pwsh.dll'\n        - Description: 'Windows Powershell'\n        - Product: 'PowerShell Core 6'\n    selection_length:\n        CommandLine|re: '.{1000,}'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_powershell:\n        - Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        - OriginalFileName:\n            - 'PowerShell.EXE'\n            - 'pwsh.dll'\n        - Description: 'Windows Powershell'\n        - Product: 'PowerShell Core 6'\n    selection_length:\n        CommandLine|re: '.{1000,}'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: low\n",
      "question": "unusually long PowerShell command lines with a length of 1000 characters or more",
      "answer": "In order to detect unusually long PowerShell command lines with a length of 1000 characters or more, you should monitor the process creation logs on Windows systems. Specifically, focus on identifying instances where PowerShell is being executed. This can be accomplished by looking for processes that end with '\\powershell.exe' or '\\pwsh.exe', as well as checking for files named 'PowerShell.EXE' or 'pwsh.dll'. Additionally, processes that have a description of 'Windows PowerShell' or are a product of 'PowerShell Core 6' should also be considered relevant.\n\nFurthermore, it's important to scrutinize the command line length for these PowerShell processes. Any command line that exceeds 999 characters should be flagged. This approach helps in identifying actions where PowerShell is used with extensive command-line arguments or scripts, which can be indicative of malicious activity.\n\nKeep in mind, however, that there may be legitimate reasons for long PowerShell command lines, so the detection of such a scenario is considered to have a low level of confidence and might produce unknown false positives. Thus, any detection should be further investigated to ascertain its nature. This method focuses on identifying potential security breaches through the abuse of PowerShell, which is often used by attackers to execute malicious commands or scripts due to its powerful capabilities and deep integration with Windows."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    product: windows\n    service: sysmon\ndetection:\n    selection:\n        EventID:\n            - 8\n            - 10\n        SourceImage|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        TargetImage|endswith: '\\lsass.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect Accessing to lsass.exe by Powershell\n\nHere is how  the given sigma rule operates: In order to Detect Accessing to lsass.exe by Powershell, you should monitor Windows systems using Sysmon service for specific event IDs that indicate PowerShell, including both its traditional and core versions (`powershell.exe` and `pwsh.exe`), targeting the Local Security Authority Subsystem Service file (`lsass.exe`). The events to watch for include attempts to access or interact with `lsass.exe` via PowerShell, flagged by the Sysmon event IDs 8 and 10. These events are critical for identifying potential unauthorized or malicious activities aimed at extracting sensitive information from the `lsass.exe` process, a common target for attackers aiming to elevate privileges or harvest credentials on compromised systems. High vigilance is warranted as such activities are usually indicators of an attack, with the caveat that there might be legitimate but rare use cases causing false positives.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: sysmon\ndetection:\n    selection:\n        EventID:\n            - 8\n            - 10\n        SourceImage|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        TargetImage|endswith: '\\lsass.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Accessing to lsass.exe by Powershell",
      "answer": "In order to Detect Accessing to lsass.exe by Powershell, you should monitor Windows systems using Sysmon service for specific event IDs that indicate PowerShell, including both its traditional and core versions (`powershell.exe` and `pwsh.exe`), targeting the Local Security Authority Subsystem Service file (`lsass.exe`). The events to watch for include attempts to access or interact with `lsass.exe` via PowerShell, flagged by the Sysmon event IDs 8 and 10. These events are critical for identifying potential unauthorized or malicious activities aimed at extracting sensitive information from the `lsass.exe` process, a common target for attackers aiming to elevate privileges or harvest credentials on compromised systems. High vigilance is warranted as such activities are usually indicators of an attack, with the caveat that there might be legitimate but rare use cases causing false positives."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting usage of bitsadmin downloading a file with a suspicious extension.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect usage of bitsadmin downloading a file with a suspicious extension, you should: Monitor process creation logs on Windows systems for instances where the image or original filename is identified as `bitsadmin.exe`. Specifically, look for command lines that include operations such as `/transfer`, `/create`, or `/addfile`, which are indicative of using bitsadmin to manipulate files. Further focus your scrutiny on cases where these command lines are associated with files having extensions known to be potentially malicious or commonly used for executing scripts or payloads, such as `.7z`, `.asp`, `.aspx`, `.bat`, `.cmd`, `.dll`, `.exe`, `.jsp`, `.jspx`, `.ps1`, `.rar`, `.txt`, `.vbs`, `.zip`, and others. This detection is crucial because the manipulation or transfer of files with these extensions by bitsadmin can be a tactic used by attackers to deliver malware or deploy scripts for executing malicious activities on a targeted system.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\bitsadmin.exe'\n        - OriginalFileName: 'bitsadmin.exe'\n    selection_flags:\n        CommandLine|contains:\n            - ' /transfer '\n            - ' /create '\n            - ' /addfile '\n    selection_extension:\n        CommandLine|contains:\n            - '.7z'\n            - '.asax'\n            - '.ashx'\n            - '.asmx'\n            - '.asp'\n            - '.aspx'\n            - '.bat'\n            - '.cfm'\n            - '.cgi'\n            - '.chm'\n            - '.cmd'\n            - '.dll'\n            - '.gif'\n            - '.jpeg'\n            - '.jpg'\n            - '.jsp'\n            - '.jspx'\n            - '.log'\n            - '.png'\n            - '.ps1'\n            - '.psm1'\n            - '.rar'\n            - '.scf'\n            - '.sct'\n            - '.txt'\n            - '.vbe'\n            - '.vbs'\n            - '.war'\n            - '.wsf'\n            - '.wsh'\n            - '.xll'\n            - '.zip'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\bitsadmin.exe'\n        - OriginalFileName: 'bitsadmin.exe'\n    selection_flags:\n        CommandLine|contains:\n            - ' /transfer '\n            - ' /create '\n            - ' /addfile '\n    selection_extension:\n        CommandLine|contains:\n            - '.7z'\n            - '.asax'\n            - '.ashx'\n            - '.asmx'\n            - '.asp'\n            - '.aspx'\n            - '.bat'\n            - '.cfm'\n            - '.cgi'\n            - '.chm'\n            - '.cmd'\n            - '.dll'\n            - '.gif'\n            - '.jpeg'\n            - '.jpg'\n            - '.jsp'\n            - '.jspx'\n            - '.log'\n            - '.png'\n            - '.ps1'\n            - '.psm1'\n            - '.rar'\n            - '.scf'\n            - '.sct'\n            - '.txt'\n            - '.vbe'\n            - '.vbs'\n            - '.war'\n            - '.wsf'\n            - '.wsh'\n            - '.xll'\n            - '.zip'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "usage of bitsadmin downloading a file with a suspicious extension",
      "answer": "In order to detect usage of bitsadmin downloading a file with a suspicious extension, you should: Monitor process creation logs on Windows systems for instances where the image or original filename is identified as `bitsadmin.exe`. Specifically, look for command lines that include operations such as `/transfer`, `/create`, or `/addfile`, which are indicative of using bitsadmin to manipulate files. Further focus your scrutiny on cases where these command lines are associated with files having extensions known to be potentially malicious or commonly used for executing scripts or payloads, such as `.7z`, `.asp`, `.aspx`, `.bat`, `.cmd`, `.dll`, `.exe`, `.jsp`, `.jspx`, `.ps1`, `.rar`, `.txt`, `.vbs`, `.zip`, and others. This detection is crucial because the manipulation or transfer of files with these extensions by bitsadmin can be a tactic used by attackers to deliver malware or deploy scripts for executing malicious activities on a targeted system."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting commandline containing reference to files ending with a \".\" This scheme has been seen used by raspberry-robin.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect commandline containing reference to files ending with a \".\", which has been seen used by raspberry-robin, you should monitor the creation of processes on Windows systems. Specifically, focus on the command lines that include references to files that end with a period followed by 1 to 6 characters but do not match at the end of the line due to potential false positives with bind DNS notation. This detection strategy is considered high priority due to the risk associated with the observed behavior.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        # Example 1: https://www.microsoft.com/en-us/security/blog/wp-content/uploads/2022/10/fig-3f-raspberryrobin-runonce.png\n        # Example 2: https://www.microsoft.com/en-us/security/blog/wp-content/uploads/2022/10/fig-5f-odbcconf.png\n        # Example 3: https://www.microsoft.com/en-us/security/blog/wp-content/uploads/2022/10/fig-6f-fauppod-command-line.png\n        CommandLine|re: \\\\[a-zA-Z0-9]{1,32}\\.[a-zA-Z0-9]{1,6}\\.[ \"']{1}  # cannot match on end-of-line because of FPs with bind DNS notation\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        # Example 1: https://www.microsoft.com/en-us/security/blog/wp-content/uploads/2022/10/fig-3f-raspberryrobin-runonce.png\n        # Example 2: https://www.microsoft.com/en-us/security/blog/wp-content/uploads/2022/10/fig-5f-odbcconf.png\n        # Example 3: https://www.microsoft.com/en-us/security/blog/wp-content/uploads/2022/10/fig-6f-fauppod-command-line.png\n        CommandLine|re: \\\\[a-zA-Z0-9]{1,32}\\.[a-zA-Z0-9]{1,6}\\.[ \"']{1}  # cannot match on end-of-line because of FPs with bind DNS notation\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "commandline containing reference to files ending with a \".\" This scheme has been seen used by raspberry-robin",
      "answer": "In order to detect commandline containing reference to files ending with a \".\", which has been seen used by raspberry-robin, you should monitor the creation of processes on Windows systems. Specifically, focus on the command lines that include references to files that end with a period followed by 1 to 6 characters but do not match at the end of the line due to potential false positives with bind DNS notation. This detection strategy is considered high priority due to the risk associated with the observed behavior."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of SecurityXploded Tools.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to Detects the execution of SecurityXploded Tools, you should: Monitor process creation logs within Windows environments for signs of potentially malicious activity specifically related to SecurityXploded tools. Focus on identifying any process that is generated from an executable file with the company name set to \"SecurityXploded\" or where the image (executable file name) or original file name ends with \"PasswordDump.exe\". The detection of such criteria is critical and suggests the execution of tools that could be utilized for malicious purposes, such as extracting passwords from the system. The likelihood of these indicators representing false positives is considered to be low, indicating a high confidence level in the detection method.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Company: SecurityXploded\n        - Image|endswith: 'PasswordDump.exe'\n        - OriginalFileName|endswith: 'PasswordDump.exe'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Company: SecurityXploded\n        - Image|endswith: 'PasswordDump.exe'\n        - OriginalFileName|endswith: 'PasswordDump.exe'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
      "question": "execution of SecurityXploded Tools",
      "answer": "In order to Detects the execution of SecurityXploded Tools, you should: Monitor process creation logs within Windows environments for signs of potentially malicious activity specifically related to SecurityXploded tools. Focus on identifying any process that is generated from an executable file with the company name set to \"SecurityXploded\" or where the image (executable file name) or original file name ends with \"PasswordDump.exe\". The detection of such criteria is critical and suggests the execution of tools that could be utilized for malicious purposes, such as extracting passwords from the system. The likelihood of these indicators representing false positives is considered to be low, indicating a high confidence level in the detection method."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    product: windows\n    category: ps_module\n    definition: 0ad03ef1-f21b-4a79-8ce8-e6900c54b65b\ndetection:\n    selection:\n        - Payload|contains: get-smbshare\n        - ContextInfo|contains: get-smbshare\n    condition: selection\nfalsepositives:\n    - Administrator script\nlevel: low\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect Adversaries may look for folders and drives shared on remote systems as a means of identifying sources of information to gather as a precursor for Collection and\nto identify potential systems of interest for Lateral Movement.\nNetworks often contain shared network drives and folders that enable users to access file directories on various systems across a network.\n\n\nHere is how  the given sigma rule operates: In order to identify adversaries who are attempting to discover folders and drives shared on remote systems as part of their initial information gathering or to pinpoint potential targets for lateral movement within a network, you should monitor for specific activities within Windows PowerShell modules. Look for any instances where the commands containing 'get-smbshare' are executed. This can indicate an attempt to enumerate SMB shares available on the network, which often serve as shared network drives and folders allowing access to file directories across different systems. These activities can be detected in logs that originate from PowerShell modules, which would typically be part of the Windows product log sources.\n\nIt's important to note, however, that occurrences of these commands may not always signify malicious intent. Administrators or legitimate automated scripts may execute these commands for valid operational reasons, such as routine network maintenance or auditing. Therefore, these detections are considered to have a low level of confidence in indicating malicious activity without additional context. However, continuous monitoring and analysis of these detections, especially in correlation with other suspicious activities, could reveal attempts by adversaries to gather information necessary for further collection of sensitive data or to facilitate lateral movement within the targeted network environment.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_module\n    definition: 0ad03ef1-f21b-4a79-8ce8-e6900c54b65b\ndetection:\n    selection:\n        - Payload|contains: get-smbshare\n        - ContextInfo|contains: get-smbshare\n    condition: selection\nfalsepositives:\n    - Administrator script\nlevel: low\n",
      "question": "Adversaries may look for folders and drives shared on remote systems as a means of identifying sources of information to gather as a precursor for Collection and\nto identify potential systems of interest for Lateral Movement.\nNetworks often contain shared network drives and folders that enable users to access file directories on various systems across a network.\n",
      "answer": "In order to identify adversaries who are attempting to discover folders and drives shared on remote systems as part of their initial information gathering or to pinpoint potential targets for lateral movement within a network, you should monitor for specific activities within Windows PowerShell modules. Look for any instances where the commands containing 'get-smbshare' are executed. This can indicate an attempt to enumerate SMB shares available on the network, which often serve as shared network drives and folders allowing access to file directories across different systems. These activities can be detected in logs that originate from PowerShell modules, which would typically be part of the Windows product log sources.\n\nIt's important to note, however, that occurrences of these commands may not always signify malicious intent. Administrators or legitimate automated scripts may execute these commands for valid operational reasons, such as routine network maintenance or auditing. Therefore, these detections are considered to have a low level of confidence in indicating malicious activity without additional context. However, continuous monitoring and analysis of these detections, especially in correlation with other suspicious activities, could reveal attempts by adversaries to gather information necessary for further collection of sensitive data or to facilitate lateral movement within the targeted network environment."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith:\n            - '\\rar.exe'\n            - '\\winrar.exe'\n        - Description: 'Command line RAR'\n    filter:\n        Image|contains:\n            - '\\WinRAR'\n            - 'C:\\Windows\\Temp'\n            - '\\UnRAR.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Legitimate use of WinRAR in a folder of a software that bundles WinRAR\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect suspicious winrar execution in a folder which is not the default installation folder\n\nHere is how  the given sigma rule operates: In order to detect a suspicious winrar execution in a folder which is not the default installation folder, you should monitor the process creation logs on Windows systems for executions of WinRAR or similar archiving utilities that do not originate from standard installation directories. Specifically, look for instances where the execution path ends with '\\rar.exe' or '\\winrar.exe', and where the description field reads 'Command line RAR'. These indicators suggest an attempt to use WinRAR for potentially malicious purposes. However, it's important to exclude any activity where the WinRAR process image path contains '\\WinRAR', 'C:\\Windows\\Temp', or '\\UnRAR.exe', as these paths might indicate legitimate usage scenarios, such as a software bundle that includes WinRAR. Note that such monitoring should be considered highly sensitive to detecting malicious activity due to the low likelihood of legitimate processes fitting these criteria apart from known false positives, such as legitimate use of WinRAR in a software bundle. The focus on process creation events specifically linked to unusual execution paths of WinRAR, and the exclusion criteria set to minimize false positives, aligns this detection effort with tactics and techniques generally associated with Defense Evasion, Execution, and potentially Exfiltration, where adversaries might leverage such tools to compress stolen data or execute code in a manner less likely to be detected.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith:\n            - '\\rar.exe'\n            - '\\winrar.exe'\n        - Description: 'Command line RAR'\n    filter:\n        Image|contains:\n            - '\\WinRAR'\n            - 'C:\\Windows\\Temp'\n            - '\\UnRAR.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Legitimate use of WinRAR in a folder of a software that bundles WinRAR\nlevel: high\n",
      "question": "suspicious winrar execution in a folder which is not the default installation folder",
      "answer": "In order to detect a suspicious winrar execution in a folder which is not the default installation folder, you should monitor the process creation logs on Windows systems for executions of WinRAR or similar archiving utilities that do not originate from standard installation directories. Specifically, look for instances where the execution path ends with '\\rar.exe' or '\\winrar.exe', and where the description field reads 'Command line RAR'. These indicators suggest an attempt to use WinRAR for potentially malicious purposes. However, it's important to exclude any activity where the WinRAR process image path contains '\\WinRAR', 'C:\\Windows\\Temp', or '\\UnRAR.exe', as these paths might indicate legitimate usage scenarios, such as a software bundle that includes WinRAR. Note that such monitoring should be considered highly sensitive to detecting malicious activity due to the low likelihood of legitimate processes fitting these criteria apart from known false positives, such as legitimate use of WinRAR in a software bundle. The focus on process creation events specifically linked to unusual execution paths of WinRAR, and the exclusion criteria set to minimize false positives, aligns this detection effort with tactics and techniques generally associated with Defense Evasion, Execution, and potentially Exfiltration, where adversaries might leverage such tools to compress stolen data or execute code in a manner less likely to be detected."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    product: linux\ndetection:\n    keywords:\n        - 'rm *bash_history'\n        - 'echo \"\" > *bash_history'\n        - 'cat /dev/null > *bash_history'\n        - 'cat /dev/zero > *bash_history'\n        - 'ln -sf /dev/null *bash_history'\n        - 'ln -sf /dev/zero *bash_history'\n        - 'truncate -s0 *bash_history'\n        # - 'unset HISTFILE'  # prone to false positives\n        - 'export HISTFILESIZE=0'\n        - 'history -c'\n        - 'history -w'\n        - 'shred *bash_history'\n        - 'empty_bash_history'\n        - 'chattr +i *bash_history'\n    condition: keywords\nfalsepositives:\n    - Unknown\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect Clear command history in linux which is used for defense evasion.\n\nHere is how  the given sigma rule operates: In order to clear command history in Linux which is used for defense evasion, you should: monitor for specific activities on Linux systems that indicate attempts to clear or otherwise manipulate the bash command history in an effort to evade detection or obscure their actions. Key activities to watch for include the use of commands to remove bash history files (e.g., 'rm *bash_history'), empty the contents of these files (e.g., 'echo \"\" > *bash_history', 'cat /dev/null > *bash_history', 'cat /dev/zero > *bash_history'), create symbolic links of bash history files to /dev/null or /dev/zero (e.g., 'ln -sf /dev/null *bash_history', 'ln -sf /dev/zero *bash_history'), resetting file size to 0 (e.g., 'truncate -s0 *bash_history'), setting the bash history file size to 0 (e.g., 'export HISTFILESIZE=0'), clearing (e.g., 'history -c'), writing current session commands to the bash history file ('history -w'), using shredding to securely delete bash history files ('shred *bash_history'), running a command named 'empty_bash_history', or making bash history files immutable ('chattr +i *bash_history'). These activities are linked to the tactic of defense evasion, as attackers clearing command history are attempting to remove traces of their activities from compromised systems. Monitoring for such activities provides insight into suspicious behaviors indicative of an adversary trying to hide their tracks.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\ndetection:\n    keywords:\n        - 'rm *bash_history'\n        - 'echo \"\" > *bash_history'\n        - 'cat /dev/null > *bash_history'\n        - 'cat /dev/zero > *bash_history'\n        - 'ln -sf /dev/null *bash_history'\n        - 'ln -sf /dev/zero *bash_history'\n        - 'truncate -s0 *bash_history'\n        # - 'unset HISTFILE'  # prone to false positives\n        - 'export HISTFILESIZE=0'\n        - 'history -c'\n        - 'history -w'\n        - 'shred *bash_history'\n        - 'empty_bash_history'\n        - 'chattr +i *bash_history'\n    condition: keywords\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Clear command history in linux which is used for defense evasion.",
      "answer": "In order to clear command history in Linux which is used for defense evasion, you should: monitor for specific activities on Linux systems that indicate attempts to clear or otherwise manipulate the bash command history in an effort to evade detection or obscure their actions. Key activities to watch for include the use of commands to remove bash history files (e.g., 'rm *bash_history'), empty the contents of these files (e.g., 'echo \"\" > *bash_history', 'cat /dev/null > *bash_history', 'cat /dev/zero > *bash_history'), create symbolic links of bash history files to /dev/null or /dev/zero (e.g., 'ln -sf /dev/null *bash_history', 'ln -sf /dev/zero *bash_history'), resetting file size to 0 (e.g., 'truncate -s0 *bash_history'), setting the bash history file size to 0 (e.g., 'export HISTFILESIZE=0'), clearing (e.g., 'history -c'), writing current session commands to the bash history file ('history -w'), using shredding to securely delete bash history files ('shred *bash_history'), running a command named 'empty_bash_history', or making bash history files immutable ('chattr +i *bash_history'). These activities are linked to the tactic of defense evasion, as attackers clearing command history are attempting to remove traces of their activities from compromised systems. Monitoring for such activities provides insight into suspicious behaviors indicative of an adversary trying to hide their tracks."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting exploitation of OMIGOD (CVE-2021-38647) which allows remote execute (RCE) commands as root with just a single unauthenticated HTTP request.\nVerify, successful, exploitation by viewing the HTTP client (request) body to see what was passed to the server (using PCAP).\nWithin the client body is where the code execution would occur. Additionally, check the endpoint logs to see if suspicious commands or activity occurred within the timeframe of this HTTP request.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the exploitation of OMIGOD (CVE-2021-38647) which allows remote execute (RCE) commands as root with just a single unauthenticated HTTP request, you should: Focus on monitoring HTTP traffic, particularly looking at data logged by Zeek, an open-source network analysis framework. Enable the built-in Zeek script that logs all HTTP header names to ensure comprehensive collection of HTTP request details. Analyze logs for HTTP POST requests to the URI /wsman that return a status code of 200 and do not contain an 'AUTHORIZATION' header nor have a small or zero-length HTTP client body. This is crucial because a successful exploitation attempt would likely include a POST request to the /wsman endpoint without standard authentication headers and with a significant request body where the malicious command or code for remote execution is placed.\n\nTo accurately identify potential OMIGOD exploit attempts, collect various pieces of information from the HTTP traffic including origin and destination IP addresses, response ports, the HTTP method used, the URI accessed, the length of the request and response bodies, and the user agent string. Be mindful of false positives which can include unsuccessful exploitation attempts, or scanning activities that mimic the exploitation pattern but do not exhibit indications of successful code execution, such as vulnerability scanners assessing for unpatched versions without engaging in actual exploitation.\n\nThe logs from this detailed HTTP traffic analysis serve as a cornerstone for identifying possible exploit attempts against the vulnerability identified by CVE-2021-38647, focusing on unexpected utilization of the POST method without proper authentication headers or with suspiciously empty or too small request bodies could point towards malicious activity. Investigating these cases should involve verification of the HTTP client (request) body content for signs of passed executable commands and scrutinizing endpoint logs for any corresponding suspicious commands or activities, ensuring a thorough approach to detecting and understanding the scope of the exploitation attempts.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: zeek\n    service: http\n    definition: Enable the builtin Zeek script that logs all HTTP header names by adding \"@load policy/protocols/http/header-names\" to your local.zeek config file. The script can be seen here for reference https://github.com/zeek/zeek/blob/d957f883df242ef159cfd846884e673addeea7a5/scripts/policy/protocols/http/header-names.zeek\ndetection:\n    selection:\n        status_code: 200\n        uri: /wsman\n        method: POST\n    auth_header:\n        client_header_names|contains: 'AUTHORIZATION'\n    too_small_http_client_body:\n        request_body_len: 0\n    #winrm_ports:\n    #    id.resp_p:\n    #        -  5985\n    #        -  5986\n    #        -  1270\n    condition: selection and not auth_header and not too_small_http_client_body\n    #condition: selection and winrm_ports and not auth_header and not too_small_http_client_body # Enable this to only perform search on default WinRM ports, however those ports are sometimes changed and therefore this is disabled by default to give a broader coverage of this rule\nfields:\n    - id.orig_h\n    - id.resp_h\n    - id.resp_p\n    - status_code\n    - method\n    - uri\n    - request_body_len\n    - response_body_len\n    - user_agent\nfalsepositives:\n    - Exploits that were attempted but unsuccessful.\n    - Scanning attempts with the abnormal use of the HTTP POST method with no indication of code execution within the HTTP Client (Request) body. An example would be vulnerability scanners trying to identify unpatched versions while not actually exploiting the vulnerability. See description for investigation tips.\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: zeek\n    service: http\n    definition: Enable the builtin Zeek script that logs all HTTP header names by adding \"@load policy/protocols/http/header-names\" to your local.zeek config file. The script can be seen here for reference https://github.com/zeek/zeek/blob/d957f883df242ef159cfd846884e673addeea7a5/scripts/policy/protocols/http/header-names.zeek\ndetection:\n    selection:\n        status_code: 200\n        uri: /wsman\n        method: POST\n    auth_header:\n        client_header_names|contains: 'AUTHORIZATION'\n    too_small_http_client_body:\n        request_body_len: 0\n    #winrm_ports:\n    #    id.resp_p:\n    #        -  5985\n    #        -  5986\n    #        -  1270\n    condition: selection and not auth_header and not too_small_http_client_body\n    #condition: selection and winrm_ports and not auth_header and not too_small_http_client_body # Enable this to only perform search on default WinRM ports, however those ports are sometimes changed and therefore this is disabled by default to give a broader coverage of this rule\nfields:\n    - id.orig_h\n    - id.resp_h\n    - id.resp_p\n    - status_code\n    - method\n    - uri\n    - request_body_len\n    - response_body_len\n    - user_agent\nfalsepositives:\n    - Exploits that were attempted but unsuccessful.\n    - Scanning attempts with the abnormal use of the HTTP POST method with no indication of code execution within the HTTP Client (Request) body. An example would be vulnerability scanners trying to identify unpatched versions while not actually exploiting the vulnerability. See description for investigation tips.\nlevel: high\n",
      "question": "exploitation of OMIGOD (CVE-2021-38647) which allows remote execute (RCE) commands as root with just a single unauthenticated HTTP request.\nVerify, successful, exploitation by viewing the HTTP client (request) body to see what was passed to the server (using PCAP).\nWithin the client body is where the code execution would occur. Additionally, check the endpoint logs to see if suspicious commands or activity occurred within the timeframe of this HTTP request.\n",
      "answer": "In order to detect the exploitation of OMIGOD (CVE-2021-38647) which allows remote execute (RCE) commands as root with just a single unauthenticated HTTP request, you should: Focus on monitoring HTTP traffic, particularly looking at data logged by Zeek, an open-source network analysis framework. Enable the built-in Zeek script that logs all HTTP header names to ensure comprehensive collection of HTTP request details. Analyze logs for HTTP POST requests to the URI /wsman that return a status code of 200 and do not contain an 'AUTHORIZATION' header nor have a small or zero-length HTTP client body. This is crucial because a successful exploitation attempt would likely include a POST request to the /wsman endpoint without standard authentication headers and with a significant request body where the malicious command or code for remote execution is placed.\n\nTo accurately identify potential OMIGOD exploit attempts, collect various pieces of information from the HTTP traffic including origin and destination IP addresses, response ports, the HTTP method used, the URI accessed, the length of the request and response bodies, and the user agent string. Be mindful of false positives which can include unsuccessful exploitation attempts, or scanning activities that mimic the exploitation pattern but do not exhibit indications of successful code execution, such as vulnerability scanners assessing for unpatched versions without engaging in actual exploitation.\n\nThe logs from this detailed HTTP traffic analysis serve as a cornerstone for identifying possible exploit attempts against the vulnerability identified by CVE-2021-38647, focusing on unexpected utilization of the POST method without proper authentication headers or with suspiciously empty or too small request bodies could point towards malicious activity. Investigating these cases should involve verification of the HTTP client (request) body content for signs of passed executable commands and scrutinizing endpoint logs for any corresponding suspicious commands or activities, ensuring a thorough approach to detecting and understanding the scope of the exploitation attempts."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: Setvalue\n        TargetObject|contains: 'Security\\Trusted Locations\\Location'\n        TargetObject|endswith: '\\Path'\n    condition: selection\nfalsepositives:\n    - During office installations or setup, trusted locations are added, which will trigger this rule.\nlevel: medium\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect changes to the registry keys related to \"Trusted Location\" of Microsoft Office. Attackers might add additional trusted locations to avoid macro security restrictions.\n\nHere is how  the given sigma rule operates: In order to detect changes to the registry keys related to \"Trusted Location\" of Microsoft Office, where attackers might add additional trusted locations to avoid macro security restrictions, you should: Focus on monitoring Windows registry activities, specifically looking for events where registry keys under the \"Security\\Trusted Locations\\Location\" path are modified. These modifications are identified by the EventType \"Setvalue\", which indicates a value within a registry key has been changed. Pay particular attention to registry keys that end with '\\Path', as these are directly related to the locations that Microsoft Office considers trusted. It's crucial to note that legitimate office installations or setups may also modify these keys, adding trusted locations and potentially triggering a detection. Therefore, these changes are categorized with a medium level of concern due to possible false positives during such installations or configurations. Continuously monitoring these registry changes can help in identifying unauthorized attempts to bypass macro security restrictions by tampering with trusted locations.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: Setvalue\n        TargetObject|contains: 'Security\\Trusted Locations\\Location'\n        TargetObject|endswith: '\\Path'\n    condition: selection\nfalsepositives:\n    - During office installations or setup, trusted locations are added, which will trigger this rule.\nlevel: medium\n",
      "question": "changes to the registry keys related to \"Trusted Location\" of Microsoft Office. Attackers might add additional trusted locations to avoid macro security restrictions.",
      "answer": "In order to detect changes to the registry keys related to \"Trusted Location\" of Microsoft Office, where attackers might add additional trusted locations to avoid macro security restrictions, you should: Focus on monitoring Windows registry activities, specifically looking for events where registry keys under the \"Security\\Trusted Locations\\Location\" path are modified. These modifications are identified by the EventType \"Setvalue\", which indicates a value within a registry key has been changed. Pay particular attention to registry keys that end with '\\Path', as these are directly related to the locations that Microsoft Office considers trusted. It's crucial to note that legitimate office installations or setups may also modify these keys, adding trusted locations and potentially triggering a detection. Therefore, these changes are categorized with a medium level of concern due to possible false positives during such installations or configurations. Continuously monitoring these registry changes can help in identifying unauthorized attempts to bypass macro security restrictions by tampering with trusted locations."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting potential DLL injection and execution using \"Tracker.exe\".\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential DLL injection and execution using \"Tracker.exe\", you should monitor for process creation events on Windows operating systems, focusing specifically on instances where the process image name ends with '\\tracker.exe' and the process description is 'Tracker'. Additionally, observe any command line arguments that contain ' /d ' or ' /c ', as these are indicative of commands that could be involved in malicious activity.\n\nHowever, it's crucial to exclude certain benign activities from your detection to avoid false positives. Specifically, processes that have command line arguments containing ' /ERRORREPORT:PROMPT ' should be considered safe as this parameter is often associated with legitimate development tools. Moreover, any process that is a child of 'MSBuild.exe' located in the Visual Studio directories should also be excluded. This can be identified by the parent image ending with '\\Msbuild\\Current\\Bin\\MSBuild.exe' or '\\Msbuild\\Current\\Bin\\amd64\\MSBuild.exe', as these are legitimate uses of Tracker.exe for build and compilation tasks within Microsoft Visual Studio, not malicious DLL injection or execution.\n\nBy focusing on these selection criteria and excluding the specified false positive conditions, you can effectively identify potential malicious activity involving DLL injection and execution attempts using Tracker.exe without overwhelming your security teams with incorrect alerts. This monitoring will target tactics and techniques related to execution and defense evasion.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\tracker.exe'\n        - Description: 'Tracker'\n    selection_cli:\n        CommandLine|contains:\n            - ' /d '\n            - ' /c '\n    filter_msbuild1:\n        CommandLine|contains: ' /ERRORREPORT:PROMPT '\n    filter_msbuild2:\n        # Example:\n        #   GrandparentImage: C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\Msbuild\\Current\\Bin\\MSBuild.exe\n        #   ParentCommandLine: \"C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\MSBuild\\Current\\Bin\\MSBuild.exe\" /nologo /nodemode:1 /nodeReuse:true /low:false\n        #   CommandLine: \"C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\MSBuild\\Current\\Bin\\Tracker.exe\" @\"C:\\Users\\user\\AppData\\Local\\Temp\\tmp05c7789bc5534838bf96d7a0fed1ffff.tmp\" /c \"C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.29.30133\\bin\\HostX86\\x64\\Lib.exe\"\n        ParentImage|endswith:\n            - '\\Msbuild\\Current\\Bin\\MSBuild.exe'\n            - '\\Msbuild\\Current\\Bin\\amd64\\MSBuild.exe'\n    condition: all of selection_* and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\tracker.exe'\n        - Description: 'Tracker'\n    selection_cli:\n        CommandLine|contains:\n            - ' /d '\n            - ' /c '\n    filter_msbuild1:\n        CommandLine|contains: ' /ERRORREPORT:PROMPT '\n    filter_msbuild2:\n        # Example:\n        #   GrandparentImage: C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\Msbuild\\Current\\Bin\\MSBuild.exe\n        #   ParentCommandLine: \"C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\MSBuild\\Current\\Bin\\MSBuild.exe\" /nologo /nodemode:1 /nodeReuse:true /low:false\n        #   CommandLine: \"C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\MSBuild\\Current\\Bin\\Tracker.exe\" @\"C:\\Users\\user\\AppData\\Local\\Temp\\tmp05c7789bc5534838bf96d7a0fed1ffff.tmp\" /c \"C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.29.30133\\bin\\HostX86\\x64\\Lib.exe\"\n        ParentImage|endswith:\n            - '\\Msbuild\\Current\\Bin\\MSBuild.exe'\n            - '\\Msbuild\\Current\\Bin\\amd64\\MSBuild.exe'\n    condition: all of selection_* and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "potential DLL injection and execution using \"Tracker.exe\"",
      "answer": "In order to detect potential DLL injection and execution using \"Tracker.exe\", you should monitor for process creation events on Windows operating systems, focusing specifically on instances where the process image name ends with '\\tracker.exe' and the process description is 'Tracker'. Additionally, observe any command line arguments that contain ' /d ' or ' /c ', as these are indicative of commands that could be involved in malicious activity.\n\nHowever, it's crucial to exclude certain benign activities from your detection to avoid false positives. Specifically, processes that have command line arguments containing ' /ERRORREPORT:PROMPT ' should be considered safe as this parameter is often associated with legitimate development tools. Moreover, any process that is a child of 'MSBuild.exe' located in the Visual Studio directories should also be excluded. This can be identified by the parent image ending with '\\Msbuild\\Current\\Bin\\MSBuild.exe' or '\\Msbuild\\Current\\Bin\\amd64\\MSBuild.exe', as these are legitimate uses of Tracker.exe for build and compilation tasks within Microsoft Visual Studio, not malicious DLL injection or execution.\n\nBy focusing on these selection criteria and excluding the specified false positive conditions, you can effectively identify potential malicious activity involving DLL injection and execution attempts using Tracker.exe without overwhelming your security teams with incorrect alerts. This monitoring will target tactics and techniques related to execution and defense evasion."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - '[System.Net.WebRequest]::create'\n            - 'curl '\n            - 'Invoke-RestMethod'\n            - 'Invoke-WebRequest'\n            - 'iwr '\n            - 'Net.WebClient'\n            - 'Resume-BitsTransfer'\n            - 'Start-BitsTransfer'\n            - 'wget '\n            - 'WinHttp.WinHttpRequest'\n    condition: selection\nfalsepositives:\n    - Use of Get-Command and Get-Help modules to reference Invoke-WebRequest and Start-BitsTransfer.\nlevel: medium\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect use of various web request commands with commandline tools and Windows PowerShell cmdlets (including aliases) via CommandLine\n\nHere is how  the given sigma rule operates: In order to detect the use of various web request commands with commandline tools and Windows PowerShell cmdlets (including aliases) via CommandLine, you should monitor process creation logs within Windows systems. Focus on identifying command lines that contain specific web request related commands or PowerShell cmdlets such as '[System.Net.WebRequest]::create', 'curl ', 'Invoke-RestMethod', 'Invoke-WebRequest', 'iwr ', 'Net.WebClient', 'Resume-BitsTransfer', 'Start-BitsTransfer', 'wget ', and 'WinHttp.WinHttpRequest'. These indicators might signal attempts to communicate with external web resources, potentially for data exfiltration, command and control, or downloading of malicious payloads. Be aware of legitimate uses of these commands, like the use of Get-Command and Get-Help modules to reference Invoke-WebRequest and Start-BitsTransfer, which could lead to potential false positives. This analysis is set to a medium urgency level, indicating a balanced approach to scrutinizing these activities without assuming immediate malicious intent.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - '[System.Net.WebRequest]::create'\n            - 'curl '\n            - 'Invoke-RestMethod'\n            - 'Invoke-WebRequest'\n            - 'iwr '\n            - 'Net.WebClient'\n            - 'Resume-BitsTransfer'\n            - 'Start-BitsTransfer'\n            - 'wget '\n            - 'WinHttp.WinHttpRequest'\n    condition: selection\nfalsepositives:\n    - Use of Get-Command and Get-Help modules to reference Invoke-WebRequest and Start-BitsTransfer.\nlevel: medium\n",
      "question": "use of various web request commands with commandline tools and Windows PowerShell cmdlets (including aliases) via CommandLine",
      "answer": "In order to detect the use of various web request commands with commandline tools and Windows PowerShell cmdlets (including aliases) via CommandLine, you should monitor process creation logs within Windows systems. Focus on identifying command lines that contain specific web request related commands or PowerShell cmdlets such as '[System.Net.WebRequest]::create', 'curl ', 'Invoke-RestMethod', 'Invoke-WebRequest', 'iwr ', 'Net.WebClient', 'Resume-BitsTransfer', 'Start-BitsTransfer', 'wget ', and 'WinHttp.WinHttpRequest'. These indicators might signal attempts to communicate with external web resources, potentially for data exfiltration, command and control, or downloading of malicious payloads. Be aware of legitimate uses of these commands, like the use of Get-Command and Get-Help modules to reference Invoke-WebRequest and Start-BitsTransfer, which could lead to potential false positives. This analysis is set to a medium urgency level, indicating a balanced approach to scrutinizing these activities without assuming immediate malicious intent."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting potential malicious modification of run keys by winekey or team9 backdoor.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential malicious modification of run keys by winekey or team9 backdoor, you should: Monitor registry event logs in Windows systems for any modifications targeting object paths that end with 'Software\\Microsoft\\Windows\\CurrentVersion\\Run\\Backup Mgr'. This focus is critical as attackers commonly manipulate registry run keys to achieve persistence by ensuring their malware or backdoor programs launch automatically at system startup. When such an activity is identified, it is pertinent to examine the associated computer name, the image involved in the modification, the type of event that occurred, and the specific registry object targeted. Nonetheless, it's important to acknowledge that there might be instances deemed as false positives due to unidentified reasons; hence, a high level of caution and verification is recommended in the analysis process to ascertain the legitimacy of the registry modifications observed.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_event\n    product: windows\ndetection:\n    selection:\n        TargetObject|endswith: 'Software\\Microsoft\\Windows\\CurrentVersion\\Run\\Backup Mgr'\n    condition: selection\nfields:\n    - ComputerName\n    - Image\n    - EventType\n    - TargetObject\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_event\n    product: windows\ndetection:\n    selection:\n        TargetObject|endswith: 'Software\\Microsoft\\Windows\\CurrentVersion\\Run\\Backup Mgr'\n    condition: selection\nfields:\n    - ComputerName\n    - Image\n    - EventType\n    - TargetObject\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "potential malicious modification of run keys by winekey or team9 backdoor",
      "answer": "In order to detect potential malicious modification of run keys by winekey or team9 backdoor, you should: Monitor registry event logs in Windows systems for any modifications targeting object paths that end with 'Software\\Microsoft\\Windows\\CurrentVersion\\Run\\Backup Mgr'. This focus is critical as attackers commonly manipulate registry run keys to achieve persistence by ensuring their malware or backdoor programs launch automatically at system startup. When such an activity is identified, it is pertinent to examine the associated computer name, the image involved in the modification, the type of event that occurred, and the specific registry object targeted. Nonetheless, it's important to acknowledge that there might be instances deemed as false positives due to unidentified reasons; hence, a high level of caution and verification is recommended in the analysis process to ascertain the legitimacy of the registry modifications observed."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting detects execution of psexec or paexec with renamed service name, this rule helps to filter out the noise if psexec is used for legit purposes or if attacker uses a different psexec client other than sysinternal one.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution of psexec or paexec with renamed service name, helping to filter out the noise if psexec is used for legitimate purposes or if an attacker uses a different psexec client other than the sysinternal one, you should: Monitor Windows security logs for events with ID 5145, which are related to the advanced audit policy setting \"Object Access > Audit Detailed File Share\", configured for both Success and Failure. Specifically, look for events where the ShareName includes '\\\\*\\IPC$', a common indicator of psexec or paexec usage. Additionally, pay attention to the RelativeTargetName field for entries ending with '-stdin', '-stdout', or '-stderr', as these are often associated with the execution of remote commands or scripts via these tools. However, to reduce false positives and filter out legitimate use cases of psexec by system administrators, exclude any events where the RelativeTargetName starts with 'PSEXESVC'. This approach helps in identifying misuse of administrative tools and potential lateral movement or remote execution efforts by attackers, without overly focusing on legitimate administrative activities.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\n    definition: 'The advanced audit policy setting \"Object Access > Audit Detailed File Share\" must be configured for Success/Failure'\ndetection:\n    selection1:\n        EventID: 5145\n        ShareName: '\\\\\\\\\\*\\\\IPC$' # looking for the string \\\\*\\IPC$\n        RelativeTargetName|endswith:\n            - '-stdin'\n            - '-stdout'\n            - '-stderr'\n    filter:\n        RelativeTargetName|startswith: 'PSEXESVC'\n    condition: selection1 and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\n    definition: 'The advanced audit policy setting \"Object Access > Audit Detailed File Share\" must be configured for Success/Failure'\ndetection:\n    selection1:\n        EventID: 5145\n        ShareName: '\\\\\\\\\\*\\\\IPC$' # looking for the string \\\\*\\IPC$\n        RelativeTargetName|endswith:\n            - '-stdin'\n            - '-stdout'\n            - '-stderr'\n    filter:\n        RelativeTargetName|startswith: 'PSEXESVC'\n    condition: selection1 and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "detects execution of psexec or paexec with renamed service name, this rule helps to filter out the noise if psexec is used for legit purposes or if attacker uses a different psexec client other than sysinternal one",
      "answer": "In order to detect execution of psexec or paexec with renamed service name, helping to filter out the noise if psexec is used for legitimate purposes or if an attacker uses a different psexec client other than the sysinternal one, you should: Monitor Windows security logs for events with ID 5145, which are related to the advanced audit policy setting \"Object Access > Audit Detailed File Share\", configured for both Success and Failure. Specifically, look for events where the ShareName includes '\\\\*\\IPC$', a common indicator of psexec or paexec usage. Additionally, pay attention to the RelativeTargetName field for entries ending with '-stdin', '-stdout', or '-stderr', as these are often associated with the execution of remote commands or scripts via these tools. However, to reduce false positives and filter out legitimate use cases of psexec by system administrators, exclude any events where the RelativeTargetName starts with 'PSEXESVC'. This approach helps in identifying misuse of administrative tools and potential lateral movement or remote execution efforts by attackers, without overly focusing on legitimate administrative activities."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious DACL modifications via the \"Set-Service\" cmdlet using the \"SecurityDescriptorSddl\" flag (Only available with PowerShell 7) that can be used to hide services or make them unstopable.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious DACL modifications via the \"Set-Service\" cmdlet using the \"SecurityDescriptorSddl\" flag (Only available with PowerShell 7) that can be used to hide services or make them unstoppable, you should: monitor the creation of Windows processes for any instances of PowerShell 7 being executed, indicated by the process image name ending with '\\pwsh.exe' or originally named 'pwsh.dll'. Additionally, watch for command line arguments that include '-SecurityDescriptorSddl ' or '-sd ', which are used to specify security descriptors in SDDL format, and particularly focus on usage patterns that involve the 'Set-Service ' command with 'D;;' indicating changes to Discretionary Access Control Lists (DACLs), and also containing one of the following strings: ';;;IU', ';;;SU', ';;;BA', ';;;SY', ';;;WD'. These strings represent different permissions and are critical indicators of attempts to modify service permissions in ways that could make services hidden or unstoppable. Remain vigilant for all these conditions being met simultaneously, as this combination strongly suggests malicious activity related to service and security descriptor manipulation.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\pwsh.exe'\n        - OriginalFileName: 'pwsh.dll'\n    selection_sddl_flag:\n        CommandLine|contains:\n            - '-SecurityDescriptorSddl '\n            - '-sd '\n    selection_set_service:\n        CommandLine|contains|all:\n            - 'Set-Service '\n            - 'D;;'\n        CommandLine|contains:\n            - ';;;IU'\n            - ';;;SU'\n            - ';;;BA'\n            - ';;;SY'\n            - ';;;WD'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\pwsh.exe'\n        - OriginalFileName: 'pwsh.dll'\n    selection_sddl_flag:\n        CommandLine|contains:\n            - '-SecurityDescriptorSddl '\n            - '-sd '\n    selection_set_service:\n        CommandLine|contains|all:\n            - 'Set-Service '\n            - 'D;;'\n        CommandLine|contains:\n            - ';;;IU'\n            - ';;;SU'\n            - ';;;BA'\n            - ';;;SY'\n            - ';;;WD'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "suspicious DACL modifications via the \"Set-Service\" cmdlet using the \"SecurityDescriptorSddl\" flag (Only available with PowerShell 7) that can be used to hide services or make them unstopable",
      "answer": "In order to detect suspicious DACL modifications via the \"Set-Service\" cmdlet using the \"SecurityDescriptorSddl\" flag (Only available with PowerShell 7) that can be used to hide services or make them unstoppable, you should: monitor the creation of Windows processes for any instances of PowerShell 7 being executed, indicated by the process image name ending with '\\pwsh.exe' or originally named 'pwsh.dll'. Additionally, watch for command line arguments that include '-SecurityDescriptorSddl ' or '-sd ', which are used to specify security descriptors in SDDL format, and particularly focus on usage patterns that involve the 'Set-Service ' command with 'D;;' indicating changes to Discretionary Access Control Lists (DACLs), and also containing one of the following strings: ';;;IU', ';;;SU', ';;;BA', ';;;SY', ';;;WD'. These strings represent different permissions and are critical indicators of attempts to modify service permissions in ways that could make services hidden or unstoppable. Remain vigilant for all these conditions being met simultaneously, as this combination strongly suggests malicious activity related to service and security descriptor manipulation."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of \"odbcconf\" with the \"-f\" flag in order to load a response file which might contain a malicious action..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution of \"odbcconf\" with the \"-f\" flag in order to load a response file which might contain a malicious action, you should: Monitor Windows process creation logs for instances where the \"odbcconf.exe\" process is initiated. Specifically, lookout for cases where the image path ends with '\\odbcconf.exe' or where the original file name matches 'odbcconf.exe'. Additionally, pay close attention to the command line arguments, particularly the presence of '-f' or '/f' which indicates an attempt to load a file, and the inclusion of '.rsp' in the command line, pointing towards the use of a response file. This method of execution is associated with tactics that aim at leveraging legitimate system tools for malicious purposes, extending to areas such as persistence, execution, and potentially privilege escalation, given the nature of the odbcconf tool on Windows systems. Note that while this detection strategy is valuable, there might be legitimate uses of response files with \"odbcconf.exe\", so any hits should be carefully investigated to confirm their nature and adjust the monitoring filters accordingly to minimize false positives.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\odbcconf.exe'\n        - OriginalFileName: 'odbcconf.exe'\n    selection_cli:\n        CommandLine|contains:\n            - ' -f '\n            - ' /f '\n    selection_rsp_ext:\n        CommandLine|contains: '.rsp'\n    condition: all of selection_*\nfalsepositives:\n    - The rule is looking for any usage of response file, which might generate false positive when this function is used legitimately. Investigate the contents of the \".rsp\" file to determine if it is malicious and apply additional filters if necessary.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\odbcconf.exe'\n        - OriginalFileName: 'odbcconf.exe'\n    selection_cli:\n        CommandLine|contains:\n            - ' -f '\n            - ' /f '\n    selection_rsp_ext:\n        CommandLine|contains: '.rsp'\n    condition: all of selection_*\nfalsepositives:\n    - The rule is looking for any usage of response file, which might generate false positive when this function is used legitimately. Investigate the contents of the \".rsp\" file to determine if it is malicious and apply additional filters if necessary.\nlevel: medium\n",
      "question": "execution of \"odbcconf\" with the \"-f\" flag in order to load a response file which might contain a malicious action.",
      "answer": "In order to detect execution of \"odbcconf\" with the \"-f\" flag in order to load a response file which might contain a malicious action, you should: Monitor Windows process creation logs for instances where the \"odbcconf.exe\" process is initiated. Specifically, lookout for cases where the image path ends with '\\odbcconf.exe' or where the original file name matches 'odbcconf.exe'. Additionally, pay close attention to the command line arguments, particularly the presence of '-f' or '/f' which indicates an attempt to load a file, and the inclusion of '.rsp' in the command line, pointing towards the use of a response file. This method of execution is associated with tactics that aim at leveraging legitimate system tools for malicious purposes, extending to areas such as persistence, execution, and potentially privilege escalation, given the nature of the odbcconf tool on Windows systems. Note that while this detection strategy is valuable, there might be legitimate uses of response files with \"odbcconf.exe\", so any hits should be carefully investigated to confirm their nature and adjust the monitoring filters accordingly to minimize false positives."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting use of a renamed SysInternals Sdelete, which is something an administrator shouldn't do (the renaming).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the use of a renamed SysInternals Sdelete, which is something an administrator shouldn't do (the renaming), you should: monitor for the creation of processes on Windows systems where the original file name is 'sdelete.exe'. However, it's important to note that detections should exclude any cases where the image path ends with '\\sdelete.exe' or '\\sdelete64.exe' to avoid flagging legitimate usage of these tools. Key information to be logged includes the Computer Name, User, Command Line, and Parent Command Line. Be aware that legitimate system administrator activities might sometimes involve using such tools, which could be considered a false positive in the context of this detection. This process aims to recognize unauthorized modifications or potential misuse of Sdelete, a tool known for securely deleting files, indicating a high level of concern if detected under these conditions.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        OriginalFileName: 'sdelete.exe'\n    filter:\n        Image|endswith:\n            - '\\sdelete.exe'\n            - '\\sdelete64.exe'\n    condition: selection and not filter\nfields:\n    - ComputerName\n    - User\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - System administrator usage\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        OriginalFileName: 'sdelete.exe'\n    filter:\n        Image|endswith:\n            - '\\sdelete.exe'\n            - '\\sdelete64.exe'\n    condition: selection and not filter\nfields:\n    - ComputerName\n    - User\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - System administrator usage\nlevel: high\n",
      "question": "use of a renamed SysInternals Sdelete, which is something an administrator shouldn't do (the renaming)",
      "answer": "In order to detect the use of a renamed SysInternals Sdelete, which is something an administrator shouldn't do (the renaming), you should: monitor for the creation of processes on Windows systems where the original file name is 'sdelete.exe'. However, it's important to note that detections should exclude any cases where the image path ends with '\\sdelete.exe' or '\\sdelete64.exe' to avoid flagging legitimate usage of these tools. Key information to be logged includes the Computer Name, User, Command Line, and Parent Command Line. Be aware that legitimate system administrator activities might sometimes involve using such tools, which could be considered a false positive in the context of this detection. This process aims to recognize unauthorized modifications or potential misuse of Sdelete, a tool known for securely deleting files, indicating a high level of concern if detected under these conditions."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Detect lateral movement using GPO scheduled task, usually used to deploy ransomware at scale.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect lateral movement using GPO scheduled task, usually used to deploy ransomware at scale, you should monitor Windows Security Event Logs. Specifically, look for Event ID 5145, which tracks accesses to shared files. The focus should be on any access attempts to files under the SYSVOL share, a critical shared directory used by Active Directory for storing server-based Group Policy Objects (GPOs). An alarming sign is when there is an attempt to modify, specifically write data to, the 'ScheduledTasks.xml' file within this directory. This file is a part of the Group Policy settings that control scheduled tasks on all computers within the domain.\n\nModifying this file could indicate an attempt to create or change scheduled tasks through GPOs for malicious purposes such as spreading ransomware. The event details to pay attention to include attempts to write data to the file or the specific Windows Access Mask \"%%4417,\" which corresponds to a write operation.\n\nIt's crucial to be aware that false positives may occur, especially if the source IP address of the access attempt is from localhost indicating local changes. However, given the high risk associated with unauthorized modifications to GPO scheduled tasks, both local and remote changes should be closely monitored.\n\nThis strategy aligns with mitigating tactics related to credential access and lateral movement, specifically focusing on monitoring for unusual modifications to GPOs that could facilitate widespread distribution of malware or other malicious activities across networked computers.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\n    definition: 'The advanced audit policy setting \"Object Access > Audit Detailed File Share\" must be configured for Success/Failure'\ndetection:\n    selection:\n        EventID: 5145\n        ShareName: '\\\\\\\\\\*\\\\SYSVOL' # looking for the string \\\\*\\SYSVOL\n        RelativeTargetName|endswith: 'ScheduledTasks.xml'\n        Accesses|contains:\n            - 'WriteData'\n            - '%%4417'\n    condition: selection\nfalsepositives:\n    - If the source IP is not localhost then it's super suspicious, better to monitor both local and remote changes to GPO scheduledtasks\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\n    definition: 'The advanced audit policy setting \"Object Access > Audit Detailed File Share\" must be configured for Success/Failure'\ndetection:\n    selection:\n        EventID: 5145\n        ShareName: '\\\\\\\\\\*\\\\SYSVOL' # looking for the string \\\\*\\SYSVOL\n        RelativeTargetName|endswith: 'ScheduledTasks.xml'\n        Accesses|contains:\n            - 'WriteData'\n            - '%%4417'\n    condition: selection\nfalsepositives:\n    - If the source IP is not localhost then it's super suspicious, better to monitor both local and remote changes to GPO scheduledtasks\nlevel: high\n",
      "question": "Detect lateral movement using GPO scheduled task, usually used to deploy ransomware at scale",
      "answer": "In order to detect lateral movement using GPO scheduled task, usually used to deploy ransomware at scale, you should monitor Windows Security Event Logs. Specifically, look for Event ID 5145, which tracks accesses to shared files. The focus should be on any access attempts to files under the SYSVOL share, a critical shared directory used by Active Directory for storing server-based Group Policy Objects (GPOs). An alarming sign is when there is an attempt to modify, specifically write data to, the 'ScheduledTasks.xml' file within this directory. This file is a part of the Group Policy settings that control scheduled tasks on all computers within the domain.\n\nModifying this file could indicate an attempt to create or change scheduled tasks through GPOs for malicious purposes such as spreading ransomware. The event details to pay attention to include attempts to write data to the file or the specific Windows Access Mask \"%%4417,\" which corresponds to a write operation.\n\nIt's crucial to be aware that false positives may occur, especially if the source IP address of the access attempt is from localhost indicating local changes. However, given the high risk associated with unauthorized modifications to GPO scheduled tasks, both local and remote changes should be closely monitored.\n\nThis strategy aligns with mitigating tactics related to credential access and lateral movement, specifically focusing on monitoring for unusual modifications to GPOs that could facilitate widespread distribution of malware or other malicious activities across networked computers."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.\nThese services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.\nRemote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect adversaries leveraging legitimate desktop support and remote access software for establishing an interactive command and control channel within networks, you should focus on monitoring process creations within Windows environments. Specifically, look out for processes that involve the \"LMIGuardianSvc\" in either their description, product name, or are associated with the company \"LogMeIn, Inc.\" This focuses on identifying potentially malicious usage of LogMeIn, a known remote access tool that might be exploited by an attacker to gain or maintain access within a compromised system.\n\nKeep in mind that while this activity can indicate malicious intent, there can also be legitimate uses of LogMeIn within your environment for authorized remote support or administrative activities. Therefore, any detection requires careful analysis to differentiate between legitimate use and potential misuse by adversaries. Continuously monitor these indicators with a medium level of alertness, ensuring to investigate the context in which these processes are created, such as the time of the day they are run, the user account executing them, and network traffic associated with remote session initiation.\n\nThis analysis is particularly crucial as tools like LogMeIn and other similar legitimate remote access services are often whitelisted in organizational networks. These tools have been noted for their frequent misuse compared to other legitimate software for establishing a foothold or maintaining presence on targeted systems, as highlighted in various threat intelligence reports, including those from Symantec.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Description: LMIGuardianSvc\n        - Product: LMIGuardianSvc\n        - Company: LogMeIn, Inc.\n    condition: selection\nfalsepositives:\n    - Legitimate use\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Description: LMIGuardianSvc\n        - Product: LMIGuardianSvc\n        - Company: LogMeIn, Inc.\n    condition: selection\nfalsepositives:\n    - Legitimate use\nlevel: medium\n",
      "question": "An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.\nThese services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.\nRemote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)\n",
      "answer": "In order to detect adversaries leveraging legitimate desktop support and remote access software for establishing an interactive command and control channel within networks, you should focus on monitoring process creations within Windows environments. Specifically, look out for processes that involve the \"LMIGuardianSvc\" in either their description, product name, or are associated with the company \"LogMeIn, Inc.\" This focuses on identifying potentially malicious usage of LogMeIn, a known remote access tool that might be exploited by an attacker to gain or maintain access within a compromised system.\n\nKeep in mind that while this activity can indicate malicious intent, there can also be legitimate uses of LogMeIn within your environment for authorized remote support or administrative activities. Therefore, any detection requires careful analysis to differentiate between legitimate use and potential misuse by adversaries. Continuously monitor these indicators with a medium level of alertness, ensuring to investigate the context in which these processes are created, such as the time of the day they are run, the user account executing them, and network traffic associated with remote session initiation.\n\nThis analysis is particularly crucial as tools like LogMeIn and other similar legitimate remote access services are often whitelisted in organizational networks. These tools have been noted for their frequent misuse compared to other legitimate software for establishing a foothold or maintaining presence on targeted systems, as highlighted in various threat intelligence reports, including those from Symantec."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\cmdl32.exe'\n        - OriginalFileName: CMDL32.EXE\n    selection_cli:\n        CommandLine|contains|all:\n            - '/vpn '\n            - '/lan '\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: medium\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect lolbas Cmdl32 is use to download a payload to evade antivirus\n\nHere is how  the given sigma rule operates: In order to lolbas Cmdl32 is used to download a payload to evade antivirus, you should: Monitor the creation of processes on Windows operating systems, focusing on cases where the process image name ends with '\\cmdl32.exe' or the original file name is identified exactly as CMDL32.EXE. Additionally, watch for command-line parameters that contain both '/vpn ' and '/lan ', as these are characteristic of the technique being employed to download malicious payloads while attempting to bypass antivirus detection. Recognize that sightings of these indicators may not always be malicious in nature (thus considered as potential false positives) but warrant a medium level of attention due to their association with evasive tactics.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\cmdl32.exe'\n        - OriginalFileName: CMDL32.EXE\n    selection_cli:\n        CommandLine|contains|all:\n            - '/vpn '\n            - '/lan '\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "lolbas Cmdl32 is use to download a payload to evade antivirus",
      "answer": "In order to lolbas Cmdl32 is used to download a payload to evade antivirus, you should: Monitor the creation of processes on Windows operating systems, focusing on cases where the process image name ends with '\\cmdl32.exe' or the original file name is identified exactly as CMDL32.EXE. Additionally, watch for command-line parameters that contain both '/vpn ' and '/lan ', as these are characteristic of the technique being employed to download malicious payloads while attempting to bypass antivirus detection. Recognize that sightings of these indicators may not always be malicious in nature (thus considered as potential false positives) but warrant a medium level of attention due to their association with evasive tactics."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: network_connection\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\msbuild.exe'\n    filter:\n        DestinationPort:\n            - 80\n            - 443\n        Initiated: 'true'\n    condition: selection and filter\nfalsepositives:\n    - Unknown\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect possible remote connections to Silenttrinity c2\n\nHere is how  the given sigma rule operates: In order to detect a possible remote connections to Silenttrinity c2, you should: Focus on analyzing network connection logs specifically from Windows-based systems. Look for events where an application, identified by ending with the path '\\msbuild.exe', initiates a network connection. This particular application is significant as it is commonly leveraged in such remote connection attempts. However, not all network activities flagged via this application are of concern; therefore, refine your detection by excluding network connections that are made to the standard web ports 80 and 443. These exclusions are crucial as communications over these ports could be benign and are commonly used for legitimate web traffic, thus reducing the possibility of false positives. Despite potential unknown false positives, the identification of such network activities should be treated with a high level of scrutiny due to the associated risk of Silenttrinity c2 connections.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: network_connection\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\msbuild.exe'\n    filter:\n        DestinationPort:\n            - 80\n            - 443\n        Initiated: 'true'\n    condition: selection and filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "possible remote connections to Silenttrinity c2",
      "answer": "In order to detect a possible remote connections to Silenttrinity c2, you should: Focus on analyzing network connection logs specifically from Windows-based systems. Look for events where an application, identified by ending with the path '\\msbuild.exe', initiates a network connection. This particular application is significant as it is commonly leveraged in such remote connection attempts. However, not all network activities flagged via this application are of concern; therefore, refine your detection by excluding network connections that are made to the standard web ports 80 and 443. These exclusions are crucial as communications over these ports could be benign and are commonly used for legitimate web traffic, thus reducing the possibility of false positives. Despite potential unknown false positives, the identification of such network activities should be treated with a high level of scrutiny due to the associated risk of Silenttrinity c2 connections."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    product: linux\ndetection:\n    keywords:\n        - 'cat </dev/tcp/'\n        - 'exec 3<>/dev/tcp/'\n        - 'echo >/dev/tcp/'\n        - 'bash -i >& /dev/tcp/'\n        - 'sh -i >& /dev/udp/'\n        - '0<&196;exec 196<>/dev/tcp/'\n        - 'exec 5<>/dev/tcp/'\n        - '(sh)0>/dev/tcp/'\n        - 'bash -c ''bash -i >& /dev/tcp/'\n        - 'echo -e ''#!/bin/bash\\nbash -i >& /dev/tcp/'\n    condition: keywords\nfalsepositives:\n    - Unknown\nlevel: medium\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect suspicious command with /dev/tcp\n\nHere is how  the given sigma rule operates: In order to detect suspicious command with /dev/tcp, you should monitor Linux system logs for the appearance of specific patterns indicating potential malicious activity. Specifically, search for commands that involve redirection or connections via /dev/tcp or /dev/udp. Such commands usually include the use of 'cat', 'exec', 'echo', and 'bash' in conjunction with /dev/tcp or /dev/udp to establish a connection, execute commands, or send data. Look out for patterns like 'cat </dev/tcp/', 'exec 3<>/dev/tcp/', 'echo >/dev/tcp/', 'bash -i >& /dev/tcp/', 'sh -i >& /dev/udp/', '0<&196;exec 196<>/dev/tcp/', 'exec 5<>/dev/tcp/', '(sh)0>/dev/tcp/', 'bash -c ''bash -i >& /dev/tcp/' and 'echo -e ''#!/bin/bash\\nbash -i >& /dev/tcp/'. These patterns might be used by attackers to execute commands remotely, create reverse shells, or exfiltrate data. It's important to closely investigate occurrences of these patterns as their usage might indicate an intrusion or an attempt to leverage your system as part of an attack, although keep in mind that there might be unknown false positives.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\ndetection:\n    keywords:\n        - 'cat </dev/tcp/'\n        - 'exec 3<>/dev/tcp/'\n        - 'echo >/dev/tcp/'\n        - 'bash -i >& /dev/tcp/'\n        - 'sh -i >& /dev/udp/'\n        - '0<&196;exec 196<>/dev/tcp/'\n        - 'exec 5<>/dev/tcp/'\n        - '(sh)0>/dev/tcp/'\n        - 'bash -c ''bash -i >& /dev/tcp/'\n        - 'echo -e ''#!/bin/bash\\nbash -i >& /dev/tcp/'\n    condition: keywords\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "suspicious command with /dev/tcp",
      "answer": "In order to detect suspicious command with /dev/tcp, you should monitor Linux system logs for the appearance of specific patterns indicating potential malicious activity. Specifically, search for commands that involve redirection or connections via /dev/tcp or /dev/udp. Such commands usually include the use of 'cat', 'exec', 'echo', and 'bash' in conjunction with /dev/tcp or /dev/udp to establish a connection, execute commands, or send data. Look out for patterns like 'cat </dev/tcp/', 'exec 3<>/dev/tcp/', 'echo >/dev/tcp/', 'bash -i >& /dev/tcp/', 'sh -i >& /dev/udp/', '0<&196;exec 196<>/dev/tcp/', 'exec 5<>/dev/tcp/', '(sh)0>/dev/tcp/', 'bash -c ''bash -i >& /dev/tcp/' and 'echo -e ''#!/bin/bash\\nbash -i >& /dev/tcp/'. These patterns might be used by attackers to execute commands remotely, create reverse shells, or exfiltrate data. It's important to closely investigate occurrences of these patterns as their usage might indicate an intrusion or an attempt to leverage your system as part of an attack, although keep in mind that there might be unknown false positives."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentCommandLine|contains: 'conhost'\n        CommandLine|contains: '/../../'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect detects the usage of path traversal in conhost.exe indicating possible command/argument confusion/hijacking\n\nHere is how  the given sigma rule operates: In order to detect the usage of path traversal in conhost.exe indicating possible command/argument confusion/hijacking, you should: Monitor the creation of processes on Windows systems, specifically looking for instances where the command line of a parent process includes 'conhost' and the child process's command line contains the pattern '/../../'. This pattern is indicative of an attempt to use path traversal techniques, which might be part of an attack aiming at command or argument confusion/hijacking. Such monitoring is critical as it represents a high threat level, although it's unlikely to encounter false positives in this context.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentCommandLine|contains: 'conhost'\n        CommandLine|contains: '/../../'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "detects the usage of path traversal in conhost.exe indicating possible command/argument confusion/hijacking",
      "answer": "In order to detect the usage of path traversal in conhost.exe indicating possible command/argument confusion/hijacking, you should: Monitor the creation of processes on Windows systems, specifically looking for instances where the command line of a parent process includes 'conhost' and the child process's command line contains the pattern '/../../'. This pattern is indicative of an attempt to use path traversal techniques, which might be part of an attack aiming at command or argument confusion/hijacking. Such monitoring is critical as it represents a high threat level, although it's unlikely to encounter false positives in this context."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting patterns as noticed in exploitation of Serv-U CVE-2021-35211 vulnerability by threat group DEV-0322.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect patterns as noticed in exploitation of Serv-U CVE-2021-35211 vulnerability by threat group DEV-0322, you should: Monitor Windows process creation logs for specific command-line activities that indicate an exploitation attempt. Specifically, look for the execution of the `whoami` command, which is commonly used by attackers to check the privileges of the compromised account. Additionally, pay attention to commands that access paths related to `./Client/Common/` or `.\\Client\\Common\\`, and the specific use of a batch file located at `C:\\Windows\\Temp\\Serv-U.bat`. These patterns of command line activity are critical indicators of an ongoing exploitation attempt of the Serv-U vulnerability by the identified threat group. False positives are considered unlikely for this detection, underscoring the critical nature of these indicators in identifying potential breaches.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_whoami:\n        CommandLine|contains: 'whoami'\n    selection_cmd_1:\n        CommandLine|contains:\n            - './Client/Common/'\n            - '.\\Client\\Common\\'\n    selection_cmd_2:\n        CommandLine|contains: 'C:\\Windows\\Temp\\Serv-U.bat'\n    condition: selection_whoami and 1 of selection_cmd*\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_whoami:\n        CommandLine|contains: 'whoami'\n    selection_cmd_1:\n        CommandLine|contains:\n            - './Client/Common/'\n            - '.\\Client\\Common\\'\n    selection_cmd_2:\n        CommandLine|contains: 'C:\\Windows\\Temp\\Serv-U.bat'\n    condition: selection_whoami and 1 of selection_cmd*\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
      "question": "patterns as noticed in exploitation of Serv-U CVE-2021-35211 vulnerability by threat group DEV-0322",
      "answer": "In order to detect patterns as noticed in exploitation of Serv-U CVE-2021-35211 vulnerability by threat group DEV-0322, you should: Monitor Windows process creation logs for specific command-line activities that indicate an exploitation attempt. Specifically, look for the execution of the `whoami` command, which is commonly used by attackers to check the privileges of the compromised account. Additionally, pay attention to commands that access paths related to `./Client/Common/` or `.\\Client\\Common\\`, and the specific use of a batch file located at `C:\\Windows\\Temp\\Serv-U.bat`. These patterns of command line activity are critical indicators of an ongoing exploitation attempt of the Serv-U vulnerability by the identified threat group. False positives are considered unlikely for this detection, underscoring the critical nature of these indicators in identifying potential breaches."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting when an attacker tries to add a new network provider in order to dump clear text credentials, similar to how the NPPSpy tool does it.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when an attacker tries to add a new network provider in order to dump clear text credentials, similar to how the NPPSpy tool does it, you should monitor registry settings particularly focusing on changes within the Windows environment. Keep an eye on the registry set category, specifically targeting instances where the event type is 'SetValue'. This indicates a modification action on the registry.\n\nFocus on modifications targeting objects within the '\\System\\CurrentControlSet\\Services\\' directory that also include '\\NetworkProvider'. These areas are critical because they involve the configuration of network services, where malicious modifications can serve as a mechanism for credential theft.\n\nHowever, it's important to apply certain filters to avoid false positives and focus on potentially malicious activity. Exclude modifications targeting the WebClient, LanmanWorkstation, and RDPNP services under the '\\NetworkProvider' path because changes to these might not necessarily indicate malicious behavior and are sometimes part of legitimate network configurations. These exclusions are essential to narrow down the detection to alterations more closely associated with attack techniques that involve the addition of rogue network providers.\n\nMoreover, take into consideration the process responsible for making the registry changes. Specifically, if the changes come from 'C:\\Windows\\System32\\poqexec.exe', it might not be considered suspicious under certain circumstances. This process, when involved in legitimate operations, can help mitigate false positives, given its potential use in benign system configurations.\n\nThese monitoring and filtering strategies involve working with tags correlated with MITRE ATT&CK tactics and techniques, although specific technique identifiers should be derived from the nature of logged events and the context of observed changes. \n\nBe aware that there can be instances where legitimate software or configurations could trigger these detections. Hence, maintaining an up-to-date filter list and understanding the operational environment are critical to distinguishing between genuine threats and operational noise. This approach ensures heightened vigilance against methods employed for credential theft through unauthorized network provider modifications.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|contains|all:\n            - '\\System\\CurrentControlSet\\Services\\'\n            - '\\NetworkProvider'\n    filter:\n        TargetObject|contains:\n            - '\\System\\CurrentControlSet\\Services\\WebClient\\NetworkProvider'\n            - '\\System\\CurrentControlSet\\Services\\LanmanWorkstation\\NetworkProvider'\n            - '\\System\\CurrentControlSet\\Services\\RDPNP\\NetworkProvider'\n            #- '\\System\\CurrentControlSet\\Services\\P9NP\\NetworkProvider' # Related to WSL remove the comment if you use WSL in your ENV\n    filter_valid_procs:\n        Image: C:\\Windows\\System32\\poqexec.exe\n    condition: selection and not 1 of filter*\nfalsepositives:\n    - Other legitimate network providers used and not filtred in this rule\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|contains|all:\n            - '\\System\\CurrentControlSet\\Services\\'\n            - '\\NetworkProvider'\n    filter:\n        TargetObject|contains:\n            - '\\System\\CurrentControlSet\\Services\\WebClient\\NetworkProvider'\n            - '\\System\\CurrentControlSet\\Services\\LanmanWorkstation\\NetworkProvider'\n            - '\\System\\CurrentControlSet\\Services\\RDPNP\\NetworkProvider'\n            #- '\\System\\CurrentControlSet\\Services\\P9NP\\NetworkProvider' # Related to WSL remove the comment if you use WSL in your ENV\n    filter_valid_procs:\n        Image: C:\\Windows\\System32\\poqexec.exe\n    condition: selection and not 1 of filter*\nfalsepositives:\n    - Other legitimate network providers used and not filtred in this rule\nlevel: medium\n",
      "question": "when an attacker tries to add a new network provider in order to dump clear text credentials, similar to how the NPPSpy tool does it",
      "answer": "In order to detect when an attacker tries to add a new network provider in order to dump clear text credentials, similar to how the NPPSpy tool does it, you should monitor registry settings particularly focusing on changes within the Windows environment. Keep an eye on the registry set category, specifically targeting instances where the event type is 'SetValue'. This indicates a modification action on the registry.\n\nFocus on modifications targeting objects within the '\\System\\CurrentControlSet\\Services\\' directory that also include '\\NetworkProvider'. These areas are critical because they involve the configuration of network services, where malicious modifications can serve as a mechanism for credential theft.\n\nHowever, it's important to apply certain filters to avoid false positives and focus on potentially malicious activity. Exclude modifications targeting the WebClient, LanmanWorkstation, and RDPNP services under the '\\NetworkProvider' path because changes to these might not necessarily indicate malicious behavior and are sometimes part of legitimate network configurations. These exclusions are essential to narrow down the detection to alterations more closely associated with attack techniques that involve the addition of rogue network providers.\n\nMoreover, take into consideration the process responsible for making the registry changes. Specifically, if the changes come from 'C:\\Windows\\System32\\poqexec.exe', it might not be considered suspicious under certain circumstances. This process, when involved in legitimate operations, can help mitigate false positives, given its potential use in benign system configurations.\n\nThese monitoring and filtering strategies involve working with tags correlated with MITRE ATT&CK tactics and techniques, although specific technique identifiers should be derived from the nature of logged events and the context of observed changes. \n\nBe aware that there can be instances where legitimate software or configurations could trigger these detections. Hence, maintaining an up-to-date filter list and understanding the operational environment are critical to distinguishing between genuine threats and operational noise. This approach ensures heightened vigilance against methods employed for credential theft through unauthorized network provider modifications."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of a renamed MegaSync.exe as seen used by ransomware families like Nefilim, Sodinokibi, Pysa, and Conti..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the execution of a renamed MegaSync.exe as seen used by ransomware families like Nefilim, Sodinokibi, Pysa, and Conti, you should monitor the process creation logs on Windows systems. Specifically, look for processes where the original filename was \"megasync.exe\" but the actual image path does not end with \"\\megasync.exe\". This indicates that the executable, typically associated with the legitimate MegaSync application, has been renamed, a tactic commonly observed in ransomware attacks to evade detection. Be aware of potential false positives, which may arise from software that includes MegaSync functionality under a different name or from administrators who have legitimate reasons to rename the MegaSync executable. This detection strategy is of high importance due to its association with significant ransomware threats.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        OriginalFileName: 'megasync.exe'\n    filter:\n        Image|endswith: '\\megasync.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Software that illegally integrates MegaSync in a renamed form\n    - Administrators that have renamed MegaSync\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        OriginalFileName: 'megasync.exe'\n    filter:\n        Image|endswith: '\\megasync.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Software that illegally integrates MegaSync in a renamed form\n    - Administrators that have renamed MegaSync\nlevel: high\n",
      "question": "execution of a renamed MegaSync.exe as seen used by ransomware families like Nefilim, Sodinokibi, Pysa, and Conti.",
      "answer": "In order to detect the execution of a renamed MegaSync.exe as seen used by ransomware families like Nefilim, Sodinokibi, Pysa, and Conti, you should monitor the process creation logs on Windows systems. Specifically, look for processes where the original filename was \"megasync.exe\" but the actual image path does not end with \"\\megasync.exe\". This indicates that the executable, typically associated with the legitimate MegaSync application, has been renamed, a tactic commonly observed in ransomware attacks to evade detection. Be aware of potential false positives, which may arise from software that includes MegaSync functionality under a different name or from administrators who have legitimate reasons to rename the MegaSync executable. This detection strategy is of high importance due to its association with significant ransomware threats."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\tapinstall.exe'\n    filter_avast:\n        Image:\n            - 'C:\\Program Files\\Avast Software\\SecureLine VPN\\tapinstall.exe'\n            - 'C:\\Program Files (x86)\\Avast Software\\SecureLine VPN\\tapinstall.exe'\n    filter_openvpn:\n        Image|startswith: 'C:\\Program Files\\OpenVPN Connect\\drivers\\tap\\'\n    filter_protonvpn:\n        Image|startswith: 'C:\\Program Files (x86)\\Proton Technologies\\ProtonVPNTap\\installer\\'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Legitimate OpenVPN TAP insntallation\nlevel: medium\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect Well-known TAP software installation. Possible preparation for data exfiltration using tunneling techniques\n\nHere is how  the given sigma rule operates: In order to detect well-known TAP software installation, which could be a possible preparation for data exfiltration using tunneling techniques, you should: Focus on monitoring process creation logs within Windows environments. Specifically, look for processes ending with '\\tapinstall.exe' to catch instances of TAP software installations. However, it's crucial to exclude legitimate TAP software installations from certain known directories to reduce false positives. These exclusions include any process creation events from:\n\n- `C:\\Program Files\\Avast Software\\SecureLine VPN\\tapinstall.exe`\n- `C:\\Program Files (x86)\\Avast Software\\SecureLine VPN\\tapinstall.exe`\n- Paths starting with `C:\\Program Files\\OpenVPN Connect\\drivers\\tap\\`\n- Paths starting with `C:\\Program Files (x86)\\Proton Technologies\\ProtonVPNTap\\installer\\`\n\nBy applying these filters, you can more accurately identify suspicious TAP software installations potentially used for setting up data exfiltration channels, while minimizing interruptions from legitimate VPN software operations.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\tapinstall.exe'\n    filter_avast:\n        Image:\n            - 'C:\\Program Files\\Avast Software\\SecureLine VPN\\tapinstall.exe'\n            - 'C:\\Program Files (x86)\\Avast Software\\SecureLine VPN\\tapinstall.exe'\n    filter_openvpn:\n        Image|startswith: 'C:\\Program Files\\OpenVPN Connect\\drivers\\tap\\'\n    filter_protonvpn:\n        Image|startswith: 'C:\\Program Files (x86)\\Proton Technologies\\ProtonVPNTap\\installer\\'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Legitimate OpenVPN TAP insntallation\nlevel: medium\n",
      "question": "Well-known TAP software installation. Possible preparation for data exfiltration using tunneling techniques",
      "answer": "In order to detect well-known TAP software installation, which could be a possible preparation for data exfiltration using tunneling techniques, you should: Focus on monitoring process creation logs within Windows environments. Specifically, look for processes ending with '\\tapinstall.exe' to catch instances of TAP software installations. However, it's crucial to exclude legitimate TAP software installations from certain known directories to reduce false positives. These exclusions include any process creation events from:\n\n- `C:\\Program Files\\Avast Software\\SecureLine VPN\\tapinstall.exe`\n- `C:\\Program Files (x86)\\Avast Software\\SecureLine VPN\\tapinstall.exe`\n- Paths starting with `C:\\Program Files\\OpenVPN Connect\\drivers\\tap\\`\n- Paths starting with `C:\\Program Files (x86)\\Proton Technologies\\ProtonVPNTap\\installer\\`\n\nBy applying these filters, you can more accurately identify suspicious TAP software installations potentially used for setting up data exfiltration channels, while minimizing interruptions from legitimate VPN software operations."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        TargetFilename|contains: '\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp'\n    filter_update:\n        - Image: 'C:\\Windows\\System32\\wuauclt.exe'\n        - TargetFilename|startswith: 'C:\\$WINDOWS.~BT\\NewOS\\'\n    condition: selection and not filter_update\nfalsepositives:\n    - FP could be caused by legitimate application writing shortcuts for example. This folder should always be inspected to make sure that all the files in there are legitimate\nlevel: medium\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect A General detection for files being created in the Windows startup directory. This could be an indicator of persistence.\n\nHere is how  the given sigma rule operates: In order to detect a general indication of persistence through files being created in the Windows startup directory, you should monitor for file events within Windows environments, specifically looking for any instance where files are being created or modified in the '\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp' directory. This activity can signify an attempt by malicious software or actors to gain persistence on a system by ensuring their code is executed every time the system boots up. However, it's essential to exclude and not alert on events where the file modifications are made by the Windows Update Client ('C:\\Windows\\System32\\wuauclt.exe') or are part of a Windows upgrade process (files starting with 'C:\\$WINDOWS.~BT\\NewOS\\'). Be mindful that legitimate applications might occasionally write shortcuts to the startup folder, which can cause false positives; such occurrences necessitate manual inspection to confirm their legitimacy. This strategy is aimed at maintaining a balanced level of vigilance, acknowledging that while the creation of files in the startup directory is indeed suspicious, there can be benign explanations that merit a careful approach to avoid misinterpretation.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        TargetFilename|contains: '\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp'\n    filter_update:\n        - Image: 'C:\\Windows\\System32\\wuauclt.exe'\n        - TargetFilename|startswith: 'C:\\$WINDOWS.~BT\\NewOS\\'\n    condition: selection and not filter_update\nfalsepositives:\n    - FP could be caused by legitimate application writing shortcuts for example. This folder should always be inspected to make sure that all the files in there are legitimate\nlevel: medium\n",
      "question": "A General detection for files being created in the Windows startup directory. This could be an indicator of persistence.",
      "answer": "In order to detect a general indication of persistence through files being created in the Windows startup directory, you should monitor for file events within Windows environments, specifically looking for any instance where files are being created or modified in the '\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp' directory. This activity can signify an attempt by malicious software or actors to gain persistence on a system by ensuring their code is executed every time the system boots up. However, it's essential to exclude and not alert on events where the file modifications are made by the Windows Update Client ('C:\\Windows\\System32\\wuauclt.exe') or are part of a Windows upgrade process (files starting with 'C:\\$WINDOWS.~BT\\NewOS\\'). Be mindful that legitimate applications might occasionally write shortcuts to the startup folder, which can cause false positives; such occurrences necessitate manual inspection to confirm their legitimacy. This strategy is aimed at maintaining a balanced level of vigilance, acknowledging that while the creation of files in the startup directory is indeed suspicious, there can be benign explanations that merit a careful approach to avoid misinterpretation."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting deletion of files with extensions often used for backup files. Adversaries may delete or remove built-in operating system data and turn off services designed to aid in the recovery of a corrupted system to prevent recovery..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect deletion of files with extensions often used for backup files, as adversaries may delete or remove built-in operating system data and turn off services designed to aid in the recovery of a corrupted system to prevent recovery, you should: Monitor Windows file deletion events for actions initiated by command line interfaces such as cmd.exe, PowerShell (powershell.exe or pwsh.exe), Windows Terminal (wt.exe), and DLL or application loading programs like rundll32.exe and regsvr32.exe. Specifically, pay attention to the deletion of files with extensions that are commonly associated with backups and system recovery, including .VHD, .bac, .bak, .wbcat, .bkf, .set, .win, and .dsk. Any occurrence of these file deletion activities should be investigated to ensure they are not part of a malicious attempt to hinder system recovery efforts. Be aware that there can be legitimate reasons for these actions, thus it\u2019s crucial to differentiate between genuine system or user-initiated processes and potentially harmful activities. This monitoring approach is of medium importance level and aligns with tactics to disrupt system recovery processes by eliminating backup or system recovery files.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: file_delete\ndetection:\n    selection:\n        Image|endswith:\n            - '\\cmd.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\wt.exe'\n            - '\\rundll32.exe'\n            - '\\regsvr32.exe'\n        TargetFilename|endswith:\n            - '.VHD'\n            - '.bac'\n            - '.bak'\n            - '.wbcat'\n            - '.bkf'\n            - '.set'\n            - '.win'\n            - '.dsk'\n    condition: selection\nfalsepositives:\n    - Legitime usage\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: file_delete\ndetection:\n    selection:\n        Image|endswith:\n            - '\\cmd.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\wt.exe'\n            - '\\rundll32.exe'\n            - '\\regsvr32.exe'\n        TargetFilename|endswith:\n            - '.VHD'\n            - '.bac'\n            - '.bak'\n            - '.wbcat'\n            - '.bkf'\n            - '.set'\n            - '.win'\n            - '.dsk'\n    condition: selection\nfalsepositives:\n    - Legitime usage\nlevel: medium\n",
      "question": "deletion of files with extensions often used for backup files. Adversaries may delete or remove built-in operating system data and turn off services designed to aid in the recovery of a corrupted system to prevent recovery.",
      "answer": "In order to detect deletion of files with extensions often used for backup files, as adversaries may delete or remove built-in operating system data and turn off services designed to aid in the recovery of a corrupted system to prevent recovery, you should: Monitor Windows file deletion events for actions initiated by command line interfaces such as cmd.exe, PowerShell (powershell.exe or pwsh.exe), Windows Terminal (wt.exe), and DLL or application loading programs like rundll32.exe and regsvr32.exe. Specifically, pay attention to the deletion of files with extensions that are commonly associated with backups and system recovery, including .VHD, .bac, .bak, .wbcat, .bkf, .set, .win, and .dsk. Any occurrence of these file deletion activities should be investigated to ensure they are not part of a malicious attempt to hinder system recovery efforts. Be aware that there can be legitimate reasons for these actions, thus it\u2019s crucial to differentiate between genuine system or user-initiated processes and potentially harmful activities. This monitoring approach is of medium importance level and aligns with tactics to disrupt system recovery processes by eliminating backup or system recovery files."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting various indicators of Microsoft Connection Manager Profile Installer execution.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect various indicators of Microsoft Connection Manager Profile Installer execution, you should: Monitor for the creation of processes where the parent imaging process ends with '\\cmstp.exe'. This action is characteristic of an attacker exploiting the Connection Manager Profile Installer (CMSTP.exe) to execute unauthorized commands or payloads. Focus on logging information such as the command line inputs, the parent command line that initiated the process, and any specific details around the process creation event. It is crucial to scrutinize these events due to their high potential for abuse in bypassing user account control and executing malicious code. However, be aware of potential false positives, as legitimate uses of CMSTP exist, though they are considered unlikely in modern enterprise environments. This type of monitoring is rooted in identifying tactics and techniques related to Execution and Defense Evasion.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    # CMSTP Spawning Child Process\n    selection:\n        ParentImage|endswith: '\\cmstp.exe'\n    condition: selection\nfields:\n    - CommandLine\n    - ParentCommandLine\n    - Details\nfalsepositives:\n    - Legitimate CMSTP use (unlikely in modern enterprise environments)\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    # CMSTP Spawning Child Process\n    selection:\n        ParentImage|endswith: '\\cmstp.exe'\n    condition: selection\nfields:\n    - CommandLine\n    - ParentCommandLine\n    - Details\nfalsepositives:\n    - Legitimate CMSTP use (unlikely in modern enterprise environments)\nlevel: high\n",
      "question": "various indicators of Microsoft Connection Manager Profile Installer execution",
      "answer": "In order to detect various indicators of Microsoft Connection Manager Profile Installer execution, you should: Monitor for the creation of processes where the parent imaging process ends with '\\cmstp.exe'. This action is characteristic of an attacker exploiting the Connection Manager Profile Installer (CMSTP.exe) to execute unauthorized commands or payloads. Focus on logging information such as the command line inputs, the parent command line that initiated the process, and any specific details around the process creation event. It is crucial to scrutinize these events due to their high potential for abuse in bypassing user account control and executing malicious code. However, be aware of potential false positives, as legitimate uses of CMSTP exist, though they are considered unlikely in modern enterprise environments. This type of monitoring is rooted in identifying tactics and techniques related to Execution and Defense Evasion."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting when an application acquires a certificate private key.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when an application acquires a certificate private key, you should: Monitor the CAPI2 Operational log on Windows systems for event ID 70, which signals an instance where a certificate's private key is acquired. This activity can be indicative of malicious actions, such as attempts to access sensitive information or impersonate other entities by using their certificates. However, it's important to note that legitimate applications may also request certificate exports, which can lead to false positives. Therefore, it may be necessary to apply additional filters to accurately differentiate between malicious and benign behaviors. The detection of this event is considered to have a medium level of importance.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: capi2\n    definition: 'Requirements: The CAPI2 Operational log needs to be enabled'\ndetection:\n    selection:\n        EventID: 70 # Acquire Certificate Private Key\n    condition: selection\nfalsepositives:\n    - Legitimate application requesting certificate exports will trigger this. Apply additional filters as needed\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: capi2\n    definition: 'Requirements: The CAPI2 Operational log needs to be enabled'\ndetection:\n    selection:\n        EventID: 70 # Acquire Certificate Private Key\n    condition: selection\nfalsepositives:\n    - Legitimate application requesting certificate exports will trigger this. Apply additional filters as needed\nlevel: medium\n",
      "question": "when an application acquires a certificate private key",
      "answer": "In order to detect when an application acquires a certificate private key, you should: Monitor the CAPI2 Operational log on Windows systems for event ID 70, which signals an instance where a certificate's private key is acquired. This activity can be indicative of malicious actions, such as attempts to access sensitive information or impersonate other entities by using their certificates. However, it's important to note that legitimate applications may also request certificate exports, which can lead to false positives. Therefore, it may be necessary to apply additional filters to accurately differentiate between malicious and benign behaviors. The detection of this event is considered to have a medium level of importance."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Octopus Scanner Malware..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect Octopus Scanner Malware, you should: Monitor file events on Windows systems, focusing on operations involving specific target filenames. Watch for activities such as the creation, modification, or deletion involving files with the paths ending in '\\AppData\\Local\\Microsoft\\Cache134.dat' or '\\AppData\\Local\\Microsoft\\ExplorerSync.db'. These specific file paths are indicative of Octopus Scanner Malware activity on a system. Since false positives are currently unknown, any detection based on these criteria should be treated with a high level of suspicion and investigated promptly.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        TargetFilename|endswith:\n            - '\\AppData\\Local\\Microsoft\\Cache134.dat'\n            - '\\AppData\\Local\\Microsoft\\ExplorerSync.db'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        TargetFilename|endswith:\n            - '\\AppData\\Local\\Microsoft\\Cache134.dat'\n            - '\\AppData\\Local\\Microsoft\\ExplorerSync.db'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Octopus Scanner Malware.",
      "answer": "In order to detect Octopus Scanner Malware, you should: Monitor file events on Windows systems, focusing on operations involving specific target filenames. Watch for activities such as the creation, modification, or deletion involving files with the paths ending in '\\AppData\\Local\\Microsoft\\Cache134.dat' or '\\AppData\\Local\\Microsoft\\ExplorerSync.db'. These specific file paths are indicative of Octopus Scanner Malware activity on a system. Since false positives are currently unknown, any detection based on these criteria should be treated with a high level of suspicion and investigated promptly."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Description|contains: '7-Zip'\n        - Image|endswith:\n            - '\\7z.exe'\n            - '\\7zr.exe'\n            - '\\7za.exe'\n        - OriginalFileName:\n            - '7z.exe'\n            - '7za.exe'\n    selection_extension:\n        CommandLine|contains:\n            - '.dmp'\n            - '.dump'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect suspicious 7zip execution that involves a file with a \".dmp\"/\".dump\" extension, which could be a step in a process of dump file exfiltration\n\nHere is how  the given sigma rule operates: In order to detect a suspicious 7zip execution that involves a file with a \".dmp\"/\".dump\" extension, which could be a step in a process of dump file exfiltration, you should: Monitor Windows process creation logs for activities associated with 7-Zip, the popular file archiving utility. Specifically, look out for process creations that contain descriptions mentioning \"7-Zip\", or where the executable image ends with '\\7z.exe', '\\7za.exe', or '\\7zr.exe'. Additionally, the OriginalFileName attribute should match '7z.exe' or '7za.exe'. Another crucial detection parameter is the presence of command line arguments that include '.dmp' or '.dump' extensions, which signifies an attempt to archive or manipulate dump files. This could potentially be linked to malicious activities, such as data exfiltration or attempting to stealthily extract sensitive information saved in these dump files. It's important to approach detection with a high level of caution due to the potential for unknown false positives, indicating that while this behavior might be suspicious, it might not always be malicious. However, given the high level specified for these alerts, any matches should be closely investigated to determine their nature.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Description|contains: '7-Zip'\n        - Image|endswith:\n            - '\\7z.exe'\n            - '\\7zr.exe'\n            - '\\7za.exe'\n        - OriginalFileName:\n            - '7z.exe'\n            - '7za.exe'\n    selection_extension:\n        CommandLine|contains:\n            - '.dmp'\n            - '.dump'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "suspicious 7zip execution that involves a file with a \".dmp\"/\".dump\" extension, which could be a step in a process of dump file exfiltration",
      "answer": "In order to detect a suspicious 7zip execution that involves a file with a \".dmp\"/\".dump\" extension, which could be a step in a process of dump file exfiltration, you should: Monitor Windows process creation logs for activities associated with 7-Zip, the popular file archiving utility. Specifically, look out for process creations that contain descriptions mentioning \"7-Zip\", or where the executable image ends with '\\7z.exe', '\\7za.exe', or '\\7zr.exe'. Additionally, the OriginalFileName attribute should match '7z.exe' or '7za.exe'. Another crucial detection parameter is the presence of command line arguments that include '.dmp' or '.dump' extensions, which signifies an attempt to archive or manipulate dump files. This could potentially be linked to malicious activities, such as data exfiltration or attempting to stealthily extract sensitive information saved in these dump files. It's important to approach detection with a high level of caution due to the potential for unknown false positives, indicating that while this behavior might be suspicious, it might not always be malicious. However, given the high level specified for these alerts, any matches should be closely investigated to determine their nature."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting access to a file share with a naming schema seen being used during exploitation of CVE-2023-36884.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect access to a file share with a naming schema seen being used during exploitation of CVE-2023-36884, you should: focus on monitoring Windows security event logs, especially looking for event ID 5140 which indicates an attempt to access a file share. Essential criteria include the configuration of the advanced audit policy setting for Object Access to Audit File Share for both Success and Failure events. Look specifically for file shares named or paths containing the marker '\\MSHTML_C7\\' or those that match an IP address format (expressed as four groups of numbers ranging from 0 to 255, separated by periods). This detection is crucial as it signals potential exploitation attempts of a specific vulnerability identified as CVE-2023-36884. It's important to note that any hits on these criteria should be treated with caution due to the potential high impact of the threat, though there could be unknown false positives. The approach encapsulates vigilance against tactics and techniques that exploit vulnerabilities in network services, aiming to intercept or manipulate information.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\n    definition: 'The advanced audit policy setting \"Object Access > Audit File Share\" must be configured for Success/Failure'\ndetection:\n    selection_eid:\n        EventID: 5140\n    selection_share_name:\n        ShareName|contains: '\\MSHTML_C7\\'\n        ShareName|re: '[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}'\n    selection_share_path:\n        ShareLocalPath|contains: '\\MSHTML_C7\\'\n        ShareLocalPath|re: '[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}'\n    condition: selection_eid and 1 of selection_share_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\n    definition: 'The advanced audit policy setting \"Object Access > Audit File Share\" must be configured for Success/Failure'\ndetection:\n    selection_eid:\n        EventID: 5140\n    selection_share_name:\n        ShareName|contains: '\\MSHTML_C7\\'\n        ShareName|re: '[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}'\n    selection_share_path:\n        ShareLocalPath|contains: '\\MSHTML_C7\\'\n        ShareLocalPath|re: '[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}'\n    condition: selection_eid and 1 of selection_share_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "access to a file share with a naming schema seen being used during exploitation of CVE-2023-36884",
      "answer": "In order to detect access to a file share with a naming schema seen being used during exploitation of CVE-2023-36884, you should: focus on monitoring Windows security event logs, especially looking for event ID 5140 which indicates an attempt to access a file share. Essential criteria include the configuration of the advanced audit policy setting for Object Access to Audit File Share for both Success and Failure events. Look specifically for file shares named or paths containing the marker '\\MSHTML_C7\\' or those that match an IP address format (expressed as four groups of numbers ranging from 0 to 255, separated by periods). This detection is crucial as it signals potential exploitation attempts of a specific vulnerability identified as CVE-2023-36884. It's important to note that any hits on these criteria should be treated with caution due to the potential high impact of the threat, though there could be unknown false positives. The approach encapsulates vigilance against tactics and techniques that exploit vulnerabilities in network services, aiming to intercept or manipulate information."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting changes to registry keys related to \"Trusted Location\" of Microsoft Office where the path is set to something uncommon. Attackers might add additional trusted locations to avoid macro security restrictions..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect changes to registry keys related to \"Trusted Location\" of Microsoft Office where the path is set to something uncommon. Attackers might add additional trusted locations to avoid macro security restrictions, you should: Focus on monitoring registry settings events on Windows systems, specifically targeting events where a value is set (EventType: Setvalue). These monitored events should focus on changes made to registry keys that contain the path for 'Security\\Trusted Locations\\Location' and end with '\\Path'. It is essential to exclude known legitimate paths from detection to reduce false positives. Such paths include various common locations within the 'Microsoft\\Templates' and 'Microsoft\\Word\\Startup' directories, both in the AppData folder and in the Program Files directories. Furthermore, pay attention to filtering out events associated with main Office applications (Word, Excel) and the Office ClickToRun service, indicated by their executable paths in the 'Program Files' directory. This ensures that only uncommon and potentially malicious changes to the Trusted Locations in the registry are flagged. Recognize also that despite these filters, there may still be unknown legitimate or custom paths that could trigger false positives; these need to be identified and excluded from detection practices manually. This strategy is vital for identifying tactics employed by attackers aiming to bypass macro security restrictions by adding unauthorized trusted locations, maintaining a high level of security awareness against such sophisticated threats.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: Setvalue\n        TargetObject|contains: 'Security\\Trusted Locations\\Location'\n        TargetObject|endswith: '\\Path'\n    filter_exclude_known_paths:\n        Details|startswith:\n            - '%APPDATA%\\Microsoft\\Templates'\n            - '%%APPDATA%%\\Microsoft\\Templates'\n            - '%APPDATA%\\Microsoft\\Word\\Startup'\n            - '%%APPDATA%%\\Microsoft\\Word\\Startup'\n            - 'C:\\Program Files (x86)\\Microsoft Office\\root\\Templates\\'\n            - 'C:\\Program Files\\Microsoft Office (x86)\\Templates'\n            - 'C:\\Program Files\\Microsoft Office\\root\\Templates\\'\n            - 'C:\\Program Files\\Microsoft Office\\Templates\\'\n    filter_main_office_click_to_run:\n        Image|startswith: 'C:\\Program Files\\Common Files\\Microsoft Shared\\ClickToRun\\'\n        Image|endswith: '\\OfficeClickToRun.exe'\n    filter_main_office_apps:\n        Image|startswith:\n            - 'C:\\Program Files\\Microsoft Office\\'\n            - 'C:\\Program Files (x86)\\Microsoft Office\\'\n        Image|endswith:\n            - '\\winword.exe'\n            - '\\excel.exe'\n    condition: selection and not 1 of filter_main_* and not 1 of filter_exclude_*\nfalsepositives:\n    - Other unknown legitimate or custom paths need to be filtered to avoid false positives\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: Setvalue\n        TargetObject|contains: 'Security\\Trusted Locations\\Location'\n        TargetObject|endswith: '\\Path'\n    filter_exclude_known_paths:\n        Details|startswith:\n            - '%APPDATA%\\Microsoft\\Templates'\n            - '%%APPDATA%%\\Microsoft\\Templates'\n            - '%APPDATA%\\Microsoft\\Word\\Startup'\n            - '%%APPDATA%%\\Microsoft\\Word\\Startup'\n            - 'C:\\Program Files (x86)\\Microsoft Office\\root\\Templates\\'\n            - 'C:\\Program Files\\Microsoft Office (x86)\\Templates'\n            - 'C:\\Program Files\\Microsoft Office\\root\\Templates\\'\n            - 'C:\\Program Files\\Microsoft Office\\Templates\\'\n    filter_main_office_click_to_run:\n        Image|startswith: 'C:\\Program Files\\Common Files\\Microsoft Shared\\ClickToRun\\'\n        Image|endswith: '\\OfficeClickToRun.exe'\n    filter_main_office_apps:\n        Image|startswith:\n            - 'C:\\Program Files\\Microsoft Office\\'\n            - 'C:\\Program Files (x86)\\Microsoft Office\\'\n        Image|endswith:\n            - '\\winword.exe'\n            - '\\excel.exe'\n    condition: selection and not 1 of filter_main_* and not 1 of filter_exclude_*\nfalsepositives:\n    - Other unknown legitimate or custom paths need to be filtered to avoid false positives\nlevel: high\n",
      "question": "changes to registry keys related to \"Trusted Location\" of Microsoft Office where the path is set to something uncommon. Attackers might add additional trusted locations to avoid macro security restrictions.",
      "answer": "In order to detect changes to registry keys related to \"Trusted Location\" of Microsoft Office where the path is set to something uncommon. Attackers might add additional trusted locations to avoid macro security restrictions, you should: Focus on monitoring registry settings events on Windows systems, specifically targeting events where a value is set (EventType: Setvalue). These monitored events should focus on changes made to registry keys that contain the path for 'Security\\Trusted Locations\\Location' and end with '\\Path'. It is essential to exclude known legitimate paths from detection to reduce false positives. Such paths include various common locations within the 'Microsoft\\Templates' and 'Microsoft\\Word\\Startup' directories, both in the AppData folder and in the Program Files directories. Furthermore, pay attention to filtering out events associated with main Office applications (Word, Excel) and the Office ClickToRun service, indicated by their executable paths in the 'Program Files' directory. This ensures that only uncommon and potentially malicious changes to the Trusted Locations in the registry are flagged. Recognize also that despite these filters, there may still be unknown legitimate or custom paths that could trigger false positives; these need to be identified and excluded from detection practices manually. This strategy is vital for identifying tactics employed by attackers aiming to bypass macro security restrictions by adding unauthorized trusted locations, maintaining a high level of security awareness against such sophisticated threats."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting process execution patterns related to Griffon malware as reported by Kaspersky.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect process execution patterns related to Griffon malware as reported by Kaspersky, you should: Monitor Windows process creation events for the execution patterns that closely match the known characteristics of Griffon malware. This involves looking for processes that are initiated with command lines containing specific markers. The key indicators include paths that reference the local temporary directory ('\\local\\temp\\'), the use of script execution commands ('//b /e:jscript'), and the inclusion of '.txt' files in the command line. Such patterns are critical to identify and are unlikely to generate false positives, signaling a strong need for immediate investigation when detected.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - '\\local\\temp\\'\n            - '//b /e:jscript'\n            - '.txt'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - '\\local\\temp\\'\n            - '//b /e:jscript'\n            - '.txt'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
      "question": "process execution patterns related to Griffon malware as reported by Kaspersky",
      "answer": "In order to detect process execution patterns related to Griffon malware as reported by Kaspersky, you should: Monitor Windows process creation events for the execution patterns that closely match the known characteristics of Griffon malware. This involves looking for processes that are initiated with command lines containing specific markers. The key indicators include paths that reference the local temporary directory ('\\local\\temp\\'), the use of script execution commands ('//b /e:jscript'), and the inclusion of '.txt' files in the command line. Such patterns are critical to identify and are unlikely to generate false positives, signaling a strong need for immediate investigation when detected."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Detect malicious GPO modifications can be used to implement many other malicious behaviors..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect malicious GPO modifications that can be used to implement many other malicious behaviors, you should focus on monitoring certain activities on Windows operating systems, specifically looking for process creation events. Here\u2019s how attackers might try to carry out this type of attack and what you should look for to detect such behavior:\n\n1. **Monitor for Registry Editing Tools**: Look for the execution of the registry editing tool `reg.exe` by observing if any process creation events end with the path `\\reg.exe` or have the original filename `reg.exe`. This tool is commonly used for direct manipulation of the registry, which can be a tactic to alter Group Policy Objects (GPOs).\n\n2. **Watch for Specific Command-Line Use**: Pay close attention to the command-line arguments used with `reg.exe`. Malicious changes might involve command lines that contain paths pointing to `\\SOFTWARE\\Policies\\Microsoft\\Windows\\System`. Such paths are significant because they directly relate to Windows system policies which could be manipulated by attackers to enforce malicious policies.\n\n3. **Identify Suspicious GPO Key Modifications**: Be alert to specific registry keys being targeted for modification through command-line arguments. These include keys related to the group policy refresh rates (`GroupPolicyRefreshTimeDC`, `GroupPolicyRefreshTimeOffsetDC`, `GroupPolicyRefreshTime`, `GroupPolicyRefreshTimeOffset`) and keys related to the configuration of Windows Defender SmartScreen (`EnableSmartScreen`, `ShellSmartScreenLevel`). Manipulation of these could indicate attempts to weaken system defenses or alter how policies are refreshed, potentially giving attackers more control or stealth.\n\nThis detection process focuses on spotting alterations that may be legitimate under certain circumstances but could also signify abuse if done with malicious intent. Because of this, it is important to consider the context in which these modifications occur. Activities such as program installations or system updates by administrators could trigger similar patterns but are legitimate. Therefore, any detection should be carefully analyzed to rule out false positives. This approach falls under medium-level vigilance due to the balance between potential malicious activity detection and the likelihood of legitimate use. \n\nIn monitoring these specific aspects related to process creation events and command-line parameters, the goal is to protect against attackers who attempt to misuse GPO modifications, an approach that aligns with understanding tactics and techniques associated with such threats.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_reg:\n        - Image|endswith: '\\reg.exe'\n        - OriginalFileName: 'reg.exe'\n    selection_path:\n        CommandLine|contains: '\\SOFTWARE\\Policies\\Microsoft\\Windows\\System'\n    selection_key:\n        CommandLine|contains:\n            - GroupPolicyRefreshTimeDC\n            - GroupPolicyRefreshTimeOffsetDC\n            - GroupPolicyRefreshTime\n            - GroupPolicyRefreshTimeOffset\n            - EnableSmartScreen\n            - ShellSmartScreenLevel\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate use\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_reg:\n        - Image|endswith: '\\reg.exe'\n        - OriginalFileName: 'reg.exe'\n    selection_path:\n        CommandLine|contains: '\\SOFTWARE\\Policies\\Microsoft\\Windows\\System'\n    selection_key:\n        CommandLine|contains:\n            - GroupPolicyRefreshTimeDC\n            - GroupPolicyRefreshTimeOffsetDC\n            - GroupPolicyRefreshTime\n            - GroupPolicyRefreshTimeOffset\n            - EnableSmartScreen\n            - ShellSmartScreenLevel\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate use\nlevel: medium\n",
      "question": "Detect malicious GPO modifications can be used to implement many other malicious behaviors.",
      "answer": "In order to detect malicious GPO modifications that can be used to implement many other malicious behaviors, you should focus on monitoring certain activities on Windows operating systems, specifically looking for process creation events. Here\u2019s how attackers might try to carry out this type of attack and what you should look for to detect such behavior:\n\n1. **Monitor for Registry Editing Tools**: Look for the execution of the registry editing tool `reg.exe` by observing if any process creation events end with the path `\\reg.exe` or have the original filename `reg.exe`. This tool is commonly used for direct manipulation of the registry, which can be a tactic to alter Group Policy Objects (GPOs).\n\n2. **Watch for Specific Command-Line Use**: Pay close attention to the command-line arguments used with `reg.exe`. Malicious changes might involve command lines that contain paths pointing to `\\SOFTWARE\\Policies\\Microsoft\\Windows\\System`. Such paths are significant because they directly relate to Windows system policies which could be manipulated by attackers to enforce malicious policies.\n\n3. **Identify Suspicious GPO Key Modifications**: Be alert to specific registry keys being targeted for modification through command-line arguments. These include keys related to the group policy refresh rates (`GroupPolicyRefreshTimeDC`, `GroupPolicyRefreshTimeOffsetDC`, `GroupPolicyRefreshTime`, `GroupPolicyRefreshTimeOffset`) and keys related to the configuration of Windows Defender SmartScreen (`EnableSmartScreen`, `ShellSmartScreenLevel`). Manipulation of these could indicate attempts to weaken system defenses or alter how policies are refreshed, potentially giving attackers more control or stealth.\n\nThis detection process focuses on spotting alterations that may be legitimate under certain circumstances but could also signify abuse if done with malicious intent. Because of this, it is important to consider the context in which these modifications occur. Activities such as program installations or system updates by administrators could trigger similar patterns but are legitimate. Therefore, any detection should be carefully analyzed to rule out false positives. This approach falls under medium-level vigilance due to the balance between potential malicious activity detection and the likelihood of legitimate use. \n\nIn monitoring these specific aspects related to process creation events and command-line parameters, the goal is to protect against attackers who attempt to misuse GPO modifications, an approach that aligns with understanding tactics and techniques associated with such threats."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'rundll32.exe'\n            - '.dll'\n            - 'StartNodeRelay'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: critical\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect F-Secure C3 produces DLLs with a default exported StartNodeRelay function.\n\nHere is how  the given sigma rule operates: In order to detect potential misuse of F-Secure C3 produced DLLs, which contain a default exported StartNodeRelay function, you should: Monitor the creation of processes on Windows systems, specifically looking for instances where the command line includes 'rundll32.exe', followed by any '.dll' file, and particularly the 'StartNodeRelay' function being called. This activity is critical to observe as it could be indicative of an attacker leveraging F-Secure C3 functionalities for malicious purposes.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'rundll32.exe'\n            - '.dll'\n            - 'StartNodeRelay'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: critical\n",
      "question": "F-Secure C3 produces DLLs with a default exported StartNodeRelay function.",
      "answer": "In order to detect potential misuse of F-Secure C3 produced DLLs, which contain a default exported StartNodeRelay function, you should: Monitor the creation of processes on Windows systems, specifically looking for instances where the command line includes 'rundll32.exe', followed by any '.dll' file, and particularly the 'StartNodeRelay' function being called. This activity is critical to observe as it could be indicative of an attacker leveraging F-Secure C3 functionalities for malicious purposes."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting PDQDeploy service installation which indicates that PDQDeploy was installed on the machines.\nPDQDeploy can be abused by attackers to remotely install packages or execute commands on target machines\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a PDQDeploy service installation which indicates that PDQDeploy was installed on the machines, and considering that PDQDeploy can be abused by attackers to remotely install packages or execute commands on target machines, you should focus on monitoring Windows system service logs for specific events that signal the installation of a PDQDeploy service. You should look for logs generated by the Service Control Manager with an Event ID of 7045, which indicates a new service was installed. Specifically, filter for events where the 'Provider_Name' is listed as 'Service Control Manager' and focus on entries showing the installation or update of services named 'PDQDeploy' or 'PDQ Deploy', or any service with an 'ImagePath' containing 'PDQDeployService.exe'. This approach helps identify unauthorized or suspicious deployments of PDQDeploy, which could be leveraged by an attacker for malicious purposes such as remote package installation or command execution. Be aware that there might be false positives in cases where PDQDeploy is legitimately used within the organization, thus requiring a medium level of attention to contextual information surrounding each detection.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: system\ndetection:\n    selection_root:\n        Provider_Name: 'Service Control Manager'\n        EventID: 7045\n    selection_service:\n        - ImagePath|contains: 'PDQDeployService.exe'\n        - ServiceName:\n            - 'PDQDeploy'\n            - 'PDQ Deploy'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate use of the tool\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: system\ndetection:\n    selection_root:\n        Provider_Name: 'Service Control Manager'\n        EventID: 7045\n    selection_service:\n        - ImagePath|contains: 'PDQDeployService.exe'\n        - ServiceName:\n            - 'PDQDeploy'\n            - 'PDQ Deploy'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate use of the tool\nlevel: medium\n",
      "question": "PDQDeploy service installation which indicates that PDQDeploy was installed on the machines.\nPDQDeploy can be abused by attackers to remotely install packages or execute commands on target machines\n",
      "answer": "In order to detect a PDQDeploy service installation which indicates that PDQDeploy was installed on the machines, and considering that PDQDeploy can be abused by attackers to remotely install packages or execute commands on target machines, you should focus on monitoring Windows system service logs for specific events that signal the installation of a PDQDeploy service. You should look for logs generated by the Service Control Manager with an Event ID of 7045, which indicates a new service was installed. Specifically, filter for events where the 'Provider_Name' is listed as 'Service Control Manager' and focus on entries showing the installation or update of services named 'PDQDeploy' or 'PDQ Deploy', or any service with an 'ImagePath' containing 'PDQDeployService.exe'. This approach helps identify unauthorized or suspicious deployments of PDQDeploy, which could be leveraged by an attacker for malicious purposes such as remote package installation or command execution. Be aware that there might be false positives in cases where PDQDeploy is legitimately used within the organization, thus requiring a medium level of attention to contextual information surrounding each detection."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting usage of system utilities to discover files and directories.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect usage of system utilities to discover files and directories, you should monitor macOS process creation logs for activities that signal the use of certain system utilities in ways that could indicate reconnaissance efforts. Specifically, watch for:\n\n1. Use of the '/usr/bin/file' utility with a command line that is uncharacteristically long, which might suggest an attempt to execute the command across numerous files, possibly redirecting the output to a file, for example, '/tmp/output.txt'. This could indicate an attempt to discover and catalog file types and permissions en masse.\n\n2. Execution of the '/bin/ls' command with the '-R' option, which lists all files recursively under a directory. This is a common way to enumerate files and directories within a system.\n\n3. Invocation of the '/usr/bin/find' command, a powerful utility for searching files that meet certain criteria across a directory tree. Its use could signify an attempt to locate specific files or types of data.\n\n4. Execution of the '/usr/bin/mdfind' command, which utilizes the MacOS Spotlight indexing service to quickly find files and directories. Malicious actors could leverage this to speed up the process of locating valuable data.\n\n5. Use of the '/tree' command with any arguments (tracked when the command ends with '/tree'), which generates a recursive directory listing in a tree-like format. This visual representation of the directory structure can help attackers better understand the layout of the filesystem.\n\nIt's important to be aware that while these utilities are commonly used for benign tasks, their monitoring in this context is considered informational due to the potential for legitimate use cases resulting in false positives. Enhanced vigilance and potentially further investigation are recommended when these patterns are detected to discern between benign and malicious intent.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: macos\ndetection:\n    select_file_with_asterisk:\n        Image: '/usr/bin/file'\n        CommandLine|re: '(.){200,}' # execution of the 'file */* *>> /tmp/output.txt' will produce huge commandline\n    select_recursive_ls:\n        Image: '/bin/ls'\n        CommandLine|contains: '-R'\n    select_find_execution:\n        Image: '/usr/bin/find'\n    select_mdfind_execution:\n        Image: '/usr/bin/mdfind'\n    select_tree_execution|endswith:\n        Image: '/tree'\n    condition: 1 of select*\nfalsepositives:\n    - Legitimate activities\nlevel: informational\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: macos\ndetection:\n    select_file_with_asterisk:\n        Image: '/usr/bin/file'\n        CommandLine|re: '(.){200,}' # execution of the 'file */* *>> /tmp/output.txt' will produce huge commandline\n    select_recursive_ls:\n        Image: '/bin/ls'\n        CommandLine|contains: '-R'\n    select_find_execution:\n        Image: '/usr/bin/find'\n    select_mdfind_execution:\n        Image: '/usr/bin/mdfind'\n    select_tree_execution|endswith:\n        Image: '/tree'\n    condition: 1 of select*\nfalsepositives:\n    - Legitimate activities\nlevel: informational\n",
      "question": "usage of system utilities to discover files and directories",
      "answer": "In order to detect usage of system utilities to discover files and directories, you should monitor macOS process creation logs for activities that signal the use of certain system utilities in ways that could indicate reconnaissance efforts. Specifically, watch for:\n\n1. Use of the '/usr/bin/file' utility with a command line that is uncharacteristically long, which might suggest an attempt to execute the command across numerous files, possibly redirecting the output to a file, for example, '/tmp/output.txt'. This could indicate an attempt to discover and catalog file types and permissions en masse.\n\n2. Execution of the '/bin/ls' command with the '-R' option, which lists all files recursively under a directory. This is a common way to enumerate files and directories within a system.\n\n3. Invocation of the '/usr/bin/find' command, a powerful utility for searching files that meet certain criteria across a directory tree. Its use could signify an attempt to locate specific files or types of data.\n\n4. Execution of the '/usr/bin/mdfind' command, which utilizes the MacOS Spotlight indexing service to quickly find files and directories. Malicious actors could leverage this to speed up the process of locating valuable data.\n\n5. Use of the '/tree' command with any arguments (tracked when the command ends with '/tree'), which generates a recursive directory listing in a tree-like format. This visual representation of the directory structure can help attackers better understand the layout of the filesystem.\n\nIt's important to be aware that while these utilities are commonly used for benign tasks, their monitoring in this context is considered informational due to the potential for legitimate use cases resulting in false positives. Enhanced vigilance and potentially further investigation are recommended when these patterns are detected to discern between benign and malicious intent."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Description: 'Radmin Viewer'\n        - Product: 'Radmin Viewer'\n        - OriginalFileName: 'Radmin.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect execution of Radmin which can be abused by an adversary to remotely control Windows machines\n\nHere is how  the given sigma rule operates: In order to detect the execution of Radmin which can be abused by an adversary to remotely control Windows machines, you should: Monitor Windows process creation logs for instances where Radmin, a tool potentially used for malicious remote control, is executed. Watch specifically for any process being initiated that includes a description, product name, or original file name relating to \"Radmin Viewer\" or \"Radmin.exe\". Given the high risk associated with unauthorized remote control capabilities, any detection of such activity should be treated with a high level of suspicion, regardless of the rare possibility of it being a false positive. The ability to pinpoint these indicators is fundamental in identifying and mitigating threats that exploit remote desktop functionalities for malicious purposes. This approach directly targets tactics and techniques that involve unauthorized access and control over targeted systems, thereby providing a crucial defensive measure against such exploitation attempts.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Description: 'Radmin Viewer'\n        - Product: 'Radmin Viewer'\n        - OriginalFileName: 'Radmin.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "execution of Radmin which can be abused by an adversary to remotely control Windows machines",
      "answer": "In order to detect the execution of Radmin which can be abused by an adversary to remotely control Windows machines, you should: Monitor Windows process creation logs for instances where Radmin, a tool potentially used for malicious remote control, is executed. Watch specifically for any process being initiated that includes a description, product name, or original file name relating to \"Radmin Viewer\" or \"Radmin.exe\". Given the high risk associated with unauthorized remote control capabilities, any detection of such activity should be treated with a high level of suspicion, regardless of the rare possibility of it being a false positive. The ability to pinpoint these indicators is fundamental in identifying and mitigating threats that exploit remote desktop functionalities for malicious purposes. This approach directly targets tactics and techniques that involve unauthorized access and control over targeted systems, thereby providing a crucial defensive measure against such exploitation attempts."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting an exploitation attempt in which the UAC consent dialogue is used to invoke an Internet Explorer process running as LOCAL_SYSTEM.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect an exploitation attempt in which the UAC consent dialogue is used to invoke an Internet Explorer process running as LOCAL_SYSTEM, you should: Monitor the creation of processes on Windows systems, specifically focusing on any instance where the Internet Explorer (iexplore.exe) is launched by the UAC consent dialogue process (consent.exe). The indication to look for includes cases where the Internet Explorer process is initiated with command lines that contain 'http' (suggesting web navigation or internet usage). Additionally, it's critical to examine the integrity level or user context of these processes, looking particularly for processes running at the 'System' integrity level or processes initiated by users with names containing 'AUTHORI' or 'AUTORI', which could cover various language settings indicating administrative or authorized users. This detection is of critical importance due to the potential misuse of legitimate system functionalities to achieve unauthorized access or execute malicious actions with elevated privileges.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\consent.exe'\n        Image|endswith: '\\iexplore.exe'\n        CommandLine|contains: ' http'\n    rights1:\n        IntegrityLevel: 'System'  # for Sysmon users\n    rights2:\n        User|contains: # covers many language settings\n            - 'AUTHORI'\n            - 'AUTORI'\n    condition: selection and ( rights1 or rights2 )\nfalsepositives:\n    - Unknown\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\consent.exe'\n        Image|endswith: '\\iexplore.exe'\n        CommandLine|contains: ' http'\n    rights1:\n        IntegrityLevel: 'System'  # for Sysmon users\n    rights2:\n        User|contains: # covers many language settings\n            - 'AUTHORI'\n            - 'AUTORI'\n    condition: selection and ( rights1 or rights2 )\nfalsepositives:\n    - Unknown\nlevel: critical\n",
      "question": "an exploitation attempt in which the UAC consent dialogue is used to invoke an Internet Explorer process running as LOCAL_SYSTEM",
      "answer": "In order to detect an exploitation attempt in which the UAC consent dialogue is used to invoke an Internet Explorer process running as LOCAL_SYSTEM, you should: Monitor the creation of processes on Windows systems, specifically focusing on any instance where the Internet Explorer (iexplore.exe) is launched by the UAC consent dialogue process (consent.exe). The indication to look for includes cases where the Internet Explorer process is initiated with command lines that contain 'http' (suggesting web navigation or internet usage). Additionally, it's critical to examine the integrity level or user context of these processes, looking particularly for processes running at the 'System' integrity level or processes initiated by users with names containing 'AUTHORI' or 'AUTORI', which could cover various language settings indicating administrative or authorized users. This detection is of critical importance due to the potential misuse of legitimate system functionalities to achieve unauthorized access or execute malicious actions with elevated privileges."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\vsjitdebugger.exe'\n    reduction1:\n        Image|endswith: '\\vsimmersiveactivatehelper*.exe'\n    reduction2:\n        Image|endswith: '\\devenv.exe'\n    condition: selection and not (reduction1 or reduction2)\nfalsepositives:\n    - The process spawned by vsjitdebugger.exe is uncommon.\nlevel: medium\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect There is an option for a MS VS Just-In-Time Debugger \"vsjitdebugger.exe\" to launch specified executable and attach a debugger.\nThis option may be used adversaries to execute malicious code by signed verified binary.\nThe debugger is installed alongside with Microsoft Visual Studio package.\n\n\nHere is how  the given sigma rule operates: In order to detect attempts where adversaries may use the Microsoft Visual Studio Just-In-Time Debugger (vsjitdebugger.exe) to execute malicious code via a signed and verified binary, you should: focus on monitoring process creation logs within Windows environments. Look for occurrences where the process `vsjitdebugger.exe` initiates another process. However, it's crucial to exclude instances where `vsjitdebugger.exe` starts `vsimmersiveactivatehelper*.exe` or `devenv.exe`, as these are legitimate processes related to Visual Studio's operation and development environment, respectively. Identifying such behavior is vital as it could indicate that an attacker is exploiting the debugger's legitimate functionality to run malicious code. Keep in mind that false positives could arise if the process spawned by `vsjitdebugger.exe` is uncommon, so a medium level of alert is suggested for such detections.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\vsjitdebugger.exe'\n    reduction1:\n        Image|endswith: '\\vsimmersiveactivatehelper*.exe'\n    reduction2:\n        Image|endswith: '\\devenv.exe'\n    condition: selection and not (reduction1 or reduction2)\nfalsepositives:\n    - The process spawned by vsjitdebugger.exe is uncommon.\nlevel: medium\n",
      "question": "There is an option for a MS VS Just-In-Time Debugger \"vsjitdebugger.exe\" to launch specified executable and attach a debugger.\nThis option may be used adversaries to execute malicious code by signed verified binary.\nThe debugger is installed alongside with Microsoft Visual Studio package.\n",
      "answer": "In order to detect attempts where adversaries may use the Microsoft Visual Studio Just-In-Time Debugger (vsjitdebugger.exe) to execute malicious code via a signed and verified binary, you should: focus on monitoring process creation logs within Windows environments. Look for occurrences where the process `vsjitdebugger.exe` initiates another process. However, it's crucial to exclude instances where `vsjitdebugger.exe` starts `vsimmersiveactivatehelper*.exe` or `devenv.exe`, as these are legitimate processes related to Visual Studio's operation and development environment, respectively. Identifying such behavior is vital as it could indicate that an attacker is exploiting the debugger's legitimate functionality to run malicious code. Keep in mind that false positives could arise if the process spawned by `vsjitdebugger.exe` is uncommon, so a medium level of alert is suggested for such detections."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: file_event\n    product: windows\ndetection:\n    selection:\n        - TargetFilename|contains|all:\n            - '\\AppData\\Roaming\\Oracle\\bin\\java'\n            - '.exe'\n        - TargetFilename|contains|all:\n            - '\\Retrive'\n            - '.vbs'\n    condition: selection\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect javaw.exe in AppData folder as used by Adwind / JRAT\n\nHere is how  the given sigma rule operates: In order to detect javaw.exe in the AppData folder as used by Adwind / JRAT, you should: Monitor Windows file events for activities involving filenames that match specific patterns indicating potential malicious behavior. Specifically, look for files within the AppData\\Roaming\\Oracle\\bin\\java directory that have an '.exe' extension, as well as files that contain '\\Retrive' and '.vbs' in their names. These patterns are indicative of the presence of the Adwind or JRAT malware on the system, which leverage these paths and file types as part of their operation. This detection focuses on identifying suspicious file activities that align with tactics and techniques common to these types of malware, thus providing an alert to potentially compromised systems.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: file_event\n    product: windows\ndetection:\n    selection:\n        - TargetFilename|contains|all:\n            - '\\AppData\\Roaming\\Oracle\\bin\\java'\n            - '.exe'\n        - TargetFilename|contains|all:\n            - '\\Retrive'\n            - '.vbs'\n    condition: selection\nlevel: high\n",
      "question": "javaw.exe in AppData folder as used by Adwind / JRAT",
      "answer": "In order to detect javaw.exe in the AppData folder as used by Adwind / JRAT, you should: Monitor Windows file events for activities involving filenames that match specific patterns indicating potential malicious behavior. Specifically, look for files within the AppData\\Roaming\\Oracle\\bin\\java directory that have an '.exe' extension, as well as files that contain '\\Retrive' and '.vbs' in their names. These patterns are indicative of the presence of the Adwind or JRAT malware on the system, which leverage these paths and file types as part of their operation. This detection focuses on identifying suspicious file activities that align with tactics and techniques common to these types of malware, thus providing an alert to potentially compromised systems."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting changes to the AppInstaller (winget) admin settings. Such as enabling local manifest installations or disabling installer hash checks.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect changes to the AppInstaller (winget) admin settings, such as enabling local manifest installations or disabling installer hash checks, you should monitor Windows registry settings. Specifically, look for events where the type is \"SetValue\" indicating a modification has been made. This event should originate from an executable path ending with '\\winget.exe', ensuring the modification is related to the AppInstaller. Additionally, ensure the target object of this modification begins with '\\REGISTRY\\A\\' and ends with '\\LocalState\\admin_settings', pinpointing the specific part of the registry where admin settings for the AppInstaller are stored. Be aware that these detections might include false positives because the event doesn't specify the type of change made; thus, legitimate modifications to these settings could also trigger alerts. The importance of monitoring these modifications is categorized as low level, indicating they should be tracked but are not typically critical security issues on their own. However, vigilance in detecting these changes is crucial as they relate to the modification of admin settings that could potentially enable actions like local manifest installations or disable installer hash checks, presenting security risks if altered maliciously.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: registry_set\ndetection:\n    selection:\n        EventType: SetValue\n        Image|endswith: '\\winget.exe'\n        TargetObject|startswith: '\\REGISTRY\\A\\'\n        TargetObject|endswith: '\\LocalState\\admin_settings'\n    condition: selection\nfalsepositives:\n    - The event doesn't contain information about the type of change. False positives are expected with legitimate changes\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: registry_set\ndetection:\n    selection:\n        EventType: SetValue\n        Image|endswith: '\\winget.exe'\n        TargetObject|startswith: '\\REGISTRY\\A\\'\n        TargetObject|endswith: '\\LocalState\\admin_settings'\n    condition: selection\nfalsepositives:\n    - The event doesn't contain information about the type of change. False positives are expected with legitimate changes\nlevel: low\n",
      "question": "changes to the AppInstaller (winget) admin settings. Such as enabling local manifest installations or disabling installer hash checks",
      "answer": "In order to detect changes to the AppInstaller (winget) admin settings, such as enabling local manifest installations or disabling installer hash checks, you should monitor Windows registry settings. Specifically, look for events where the type is \"SetValue\" indicating a modification has been made. This event should originate from an executable path ending with '\\winget.exe', ensuring the modification is related to the AppInstaller. Additionally, ensure the target object of this modification begins with '\\REGISTRY\\A\\' and ends with '\\LocalState\\admin_settings', pinpointing the specific part of the registry where admin settings for the AppInstaller are stored. Be aware that these detections might include false positives because the event doesn't specify the type of change made; thus, legitimate modifications to these settings could also trigger alerts. The importance of monitoring these modifications is categorized as low level, indicating they should be tracked but are not typically critical security issues on their own. However, vigilance in detecting these changes is crucial as they relate to the modification of admin settings that could potentially enable actions like local manifest installations or disable installer hash checks, presenting security risks if altered maliciously."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting usage of the 'chattr' utility to remove immutable file attribute..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect usage of the 'chattr' utility to remove immutable file attribute, you should: Monitor Linux system process creation logs for any instances where the 'chattr' command is executed with the '-i' flag in its command line. This flag is specifically used to modify file attributes, including making files immutable or removing such immutability. This behavior can be indicative of an attempt to alter protected system files or to tamper with files that have been secured, potentially as a part of malicious activities. Be aware that there are legitimate use cases for this command, such as when an administrator needs to interact with backup files or perform system maintenance tasks. Hence, not all detections should be treated as malicious without further investigation. The detection level for this activity is considered medium due to the potential for legitimate use.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: linux\n    category: process_creation\ndetection:\n    selection:\n        Image|endswith: '/chattr'\n        CommandLine|contains: ' -i '\n    condition: selection\nfalsepositives:\n    - Administrator interacting with immutable files (e.g. for instance backups).\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\n    category: process_creation\ndetection:\n    selection:\n        Image|endswith: '/chattr'\n        CommandLine|contains: ' -i '\n    condition: selection\nfalsepositives:\n    - Administrator interacting with immutable files (e.g. for instance backups).\nlevel: medium\n",
      "question": "usage of the 'chattr' utility to remove immutable file attribute.",
      "answer": "In order to detect usage of the 'chattr' utility to remove immutable file attribute, you should: Monitor Linux system process creation logs for any instances where the 'chattr' command is executed with the '-i' flag in its command line. This flag is specifically used to modify file attributes, including making files immutable or removing such immutability. This behavior can be indicative of an attempt to alter protected system files or to tamper with files that have been secured, potentially as a part of malicious activities. Be aware that there are legitimate use cases for this command, such as when an administrator needs to interact with backup files or perform system maintenance tasks. Hence, not all detections should be treated as malicious without further investigation. The detection level for this activity is considered medium due to the potential for legitimate use."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Obfuscated use of Clip.exe to execute PowerShell.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to Detect Obfuscated use of Clip.exe to execute PowerShell, you should: Monitor Windows system logs for events that signify the unusual use of the Clip.exe by scrutinizing activities logged by the Service Control Manager. Specifically, look for event ID 7045, which represents a service installation. The critical aspect to watch for in these logs is the execution path that includes 'cmd' (indicating command prompt usage), '&&' (a method to chain commands together), and 'clipboard]::' (suggesting an attempt to interact with the clipboard in a potentially obfuscated manner). Such a combination of elements in the ImagePath indicates an attempt to leverage the clipboard utility (Clip.exe) to execute PowerShell commands, possibly in a concealed way. The level of concern for such findings is high, although there might be instances where similar patterns arise without malicious intent (known as unknown false positives). This detection strategy is aligned with identifying tactics and techniques like Execution, Obfuscation, and Command and Scripting Interpreter within the framework of understanding cyber threats.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: system\ndetection:\n    selection:\n        Provider_Name: 'Service Control Manager'\n        EventID: 7045\n        ImagePath|contains|all:\n            - 'cmd'\n            - '&&'\n            - 'clipboard]::'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: system\ndetection:\n    selection:\n        Provider_Name: 'Service Control Manager'\n        EventID: 7045\n        ImagePath|contains|all:\n            - 'cmd'\n            - '&&'\n            - 'clipboard]::'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Obfuscated use of Clip.exe to execute PowerShell",
      "answer": "In order to Detect Obfuscated use of Clip.exe to execute PowerShell, you should: Monitor Windows system logs for events that signify the unusual use of the Clip.exe by scrutinizing activities logged by the Service Control Manager. Specifically, look for event ID 7045, which represents a service installation. The critical aspect to watch for in these logs is the execution path that includes 'cmd' (indicating command prompt usage), '&&' (a method to chain commands together), and 'clipboard]::' (suggesting an attempt to interact with the clipboard in a potentially obfuscated manner). Such a combination of elements in the ImagePath indicates an attempt to leverage the clipboard utility (Clip.exe) to execute PowerShell commands, possibly in a concealed way. The level of concern for such findings is high, although there might be instances where similar patterns arise without malicious intent (known as unknown false positives). This detection strategy is aligned with identifying tactics and techniques like Execution, Obfuscation, and Command and Scripting Interpreter within the framework of understanding cyber threats."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - diantz.exe\n            - .cab\n        CommandLine|re: ':[^\\\\]'\n    condition: selection\nfalsepositives:\n    - Very Possible\nlevel: medium\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect Compress target file into a cab file stored in the Alternate Data Stream (ADS) of the target file.\n\nHere is how  the given sigma rule operates: In order to compress target file into a cab file stored in the Alternate Data Stream (ADS) of the target file, you should: monitor process creation logs in Windows for instances where the command line execution includes both the use of 'diantz.exe' and the '.cab' file extension together. Furthermore, it's crucial to watch for command lines matching a regular expression pattern that indicates the use of a colon followed by any character except a backslash, which is a typical method for specifying Alternate Data Streams (ADS) in Windows file systems. Be advised that there's a substantial chance of encountering false positives with this detection strategy, and the risk level associated with this activity is considered medium.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - diantz.exe\n            - .cab\n        CommandLine|re: ':[^\\\\]'\n    condition: selection\nfalsepositives:\n    - Very Possible\nlevel: medium\n",
      "question": "Compress target file into a cab file stored in the Alternate Data Stream (ADS) of the target file.",
      "answer": "In order to compress target file into a cab file stored in the Alternate Data Stream (ADS) of the target file, you should: monitor process creation logs in Windows for instances where the command line execution includes both the use of 'diantz.exe' and the '.cab' file extension together. Furthermore, it's crucial to watch for command lines matching a regular expression pattern that indicates the use of a colon followed by any character except a backslash, which is a typical method for specifying Alternate Data Streams (ADS) in Windows file systems. Be advised that there's a substantial chance of encountering false positives with this detection strategy, and the risk level associated with this activity is considered medium."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    service: threat_management\n    product: m365\ndetection:\n    selection:\n        eventSource: SecurityComplianceCenter\n        eventName: 'User restricted from sending email'\n        status: success\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect Security Compliance Center reported a user who exceeded sending limits of the service policies and because of this has been restricted from sending email.\n\nHere is how  the given sigma rule operates: In order to detect when a Security Compliance Center reported a user who exceeded sending limits of the service policies and because of this has been restricted from sending email, you should monitor logs from the threat management service, specifically targeting the Microsoft 365 platform. Focus on identifying events where the SecurityComplianceCenter is the event source. Specifically, look for the event named 'User restricted from sending email' with a status marked as success. This indicates a successful action where a user has been restricted due to exceeding sending limits, aligning with security compliance policies. Be aware that it might be challenging to distinguish between genuine policy violations and benign activities that trigger similar alerts, as there could be unknown factors leading to false positives. The severity of this activity is considered medium, suggesting it requires attention to mitigate potential security or compliance issues.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    service: threat_management\n    product: m365\ndetection:\n    selection:\n        eventSource: SecurityComplianceCenter\n        eventName: 'User restricted from sending email'\n        status: success\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Security Compliance Center reported a user who exceeded sending limits of the service policies and because of this has been restricted from sending email.",
      "answer": "In order to detect when a Security Compliance Center reported a user who exceeded sending limits of the service policies and because of this has been restricted from sending email, you should monitor logs from the threat management service, specifically targeting the Microsoft 365 platform. Focus on identifying events where the SecurityComplianceCenter is the event source. Specifically, look for the event named 'User restricted from sending email' with a status marked as success. This indicates a successful action where a user has been restricted due to exceeding sending limits, aligning with security compliance policies. Be aware that it might be challenging to distinguish between genuine policy violations and benign activities that trigger similar alerts, as there could be unknown factors leading to false positives. The severity of this activity is considered medium, suggesting it requires attention to mitigate potential security or compliance issues."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    product: azure\n    service: activitylogs\ndetection:\n    selection:\n        operationName:\n            - MICROSOFT.NETWORK/VPNGATEWAYS/VPNCONNECTIONS/WRITE\n            - MICROSOFT.NETWORK/VPNGATEWAYS/VPNCONNECTIONS/DELETE\n    condition: selection\nfalsepositives:\n    - VPN Connection being modified or deleted may be performed by a system administrator. Verify whether the user identity, user agent, and/or hostname should be making changes in your environment.\n    - VPN Connection modified or deleted from unfamiliar users should be investigated. If known behavior is causing false positives, it can be exempted from the rule.\nlevel: medium\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect VPN connection is modified or deleted.\n\nHere is how  the given sigma rule operates: In order to identify when a VPN connection is modified or deleted, you should monitor Azure Activity Logs for operations associated with the modification or deletion of VPN connections. Specifically, look out for actions named \"MICROSOFT.NETWORK/VPNGATEWAYS/VPNCONNECTIONS/WRITE\" and \"MICROSOFT.NETWORK/VPNGATEWAYS/VPNCONNECTIONS/DELETE.\" These operations indicate that a VPN Gateway's connection configuration is being changed or the connection is being removed entirely.\n\nIt's crucial to note that there could be legitimate reasons for these activities, such as a system administrator updating the VPN setup or removing outdated connections. Therefore, it's important to verify the identity of the user making these changes, the user agent involved, and whether the hostname associated with these actions is expected to perform such tasks within your environment.\n\nOn the other hand, if modifications or deletions are initiated by unfamiliar users or in an unusual manner, it warrants a deeper investigation. It might be necessary to exclude known and verified behaviors from your monitoring mechanisms to reduce the occurrence of false positives.\n\nThis approach aims to detect potential unauthorized access or malicious intentions to compromise network security by interfering with VPN configurations, maintaining a balance between security vigilance and allowing for legitimate administrative tasks.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: azure\n    service: activitylogs\ndetection:\n    selection:\n        operationName:\n            - MICROSOFT.NETWORK/VPNGATEWAYS/VPNCONNECTIONS/WRITE\n            - MICROSOFT.NETWORK/VPNGATEWAYS/VPNCONNECTIONS/DELETE\n    condition: selection\nfalsepositives:\n    - VPN Connection being modified or deleted may be performed by a system administrator. Verify whether the user identity, user agent, and/or hostname should be making changes in your environment.\n    - VPN Connection modified or deleted from unfamiliar users should be investigated. If known behavior is causing false positives, it can be exempted from the rule.\nlevel: medium\n",
      "question": "VPN connection is modified or deleted.",
      "answer": "In order to identify when a VPN connection is modified or deleted, you should monitor Azure Activity Logs for operations associated with the modification or deletion of VPN connections. Specifically, look out for actions named \"MICROSOFT.NETWORK/VPNGATEWAYS/VPNCONNECTIONS/WRITE\" and \"MICROSOFT.NETWORK/VPNGATEWAYS/VPNCONNECTIONS/DELETE.\" These operations indicate that a VPN Gateway's connection configuration is being changed or the connection is being removed entirely.\n\nIt's crucial to note that there could be legitimate reasons for these activities, such as a system administrator updating the VPN setup or removing outdated connections. Therefore, it's important to verify the identity of the user making these changes, the user agent involved, and whether the hostname associated with these actions is expected to perform such tasks within your environment.\n\nOn the other hand, if modifications or deletions are initiated by unfamiliar users or in an unusual manner, it warrants a deeper investigation. It might be necessary to exclude known and verified behaviors from your monitoring mechanisms to reduce the occurrence of false positives.\n\nThis approach aims to detect potential unauthorized access or malicious intentions to compromise network security by interfering with VPN configurations, maintaining a balance between security vigilance and allowing for legitimate administrative tasks."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting process discovery commands. Adversaries may attempt to get information about running processes on a system.\nInformation obtained could be used to gain an understanding of common software/applications running on systems within the network\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect process discovery commands, where adversaries may attempt to get information about running processes on a system which could then be used to gain an understanding of common software/applications running on systems within the network, you should: Focus on monitoring Linux system logs, particularly those related to process creation. Specifically, look for instances where process creation events end with '/ps' or '/top', as these are common commands used for viewing active processes on a Linux system. It is important to note that while detecting these commands can indicate an attempt at process discovery by an adversary, such detections can also be triggered by legitimate system administration activities. Therefore, these detections should be considered informational and require further investigation to determine their nature.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: linux\n    category: process_creation\ndetection:\n    selection:\n        Image|endswith:\n            - '/ps'\n            - '/top'\n    condition: selection\nfalsepositives:\n    - Legitimate administration activities\nlevel: informational\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\n    category: process_creation\ndetection:\n    selection:\n        Image|endswith:\n            - '/ps'\n            - '/top'\n    condition: selection\nfalsepositives:\n    - Legitimate administration activities\nlevel: informational\n",
      "question": "process discovery commands. Adversaries may attempt to get information about running processes on a system.\nInformation obtained could be used to gain an understanding of common software/applications running on systems within the network\n",
      "answer": "In order to detect process discovery commands, where adversaries may attempt to get information about running processes on a system which could then be used to gain an understanding of common software/applications running on systems within the network, you should: Focus on monitoring Linux system logs, particularly those related to process creation. Specifically, look for instances where process creation events end with '/ps' or '/top', as these are common commands used for viewing active processes on a Linux system. It is important to note that while detecting these commands can indicate an attempt at process discovery by an adversary, such detections can also be triggered by legitimate system administration activities. Therefore, these detections should be considered informational and require further investigation to determine their nature."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting use of getsystem Meterpreter/Cobalt Strike command by detecting a specific service installation.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the use of getsystem Meterpreter/Cobalt Strike command by detecting a specific service installation, you should: Monitor Windows driver load logs for instances where command execution patterns match those often used by attackers to escalate privileges or gain system access. Specifically, look out for the loading of services where the image path includes executions via 'cmd', '%COMSPEC%', or 'cmd.exe' followed by '/c', 'echo', and targeted at 'pipe' directories, indicative of Meterpreter and Cobalt Strike activities. Another technique involves observing 'rundll32' executions that load DLL files with a particular focus on patterns that include '.dll,a' and '/p:', which are characteristic of a method to execute malicious code within a seemingly benign process. The log entries to scrutinize should contain the computer name, the domain name, and the username under which the activity was initiated, along with the precise image path used in the operation. Given the critical nature of this detection and its tie to advanced persistent threat tactics, false positives are considered highly unlikely.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: driver_load\ndetection:\n    selection:\n        # meterpreter getsystem technique 1: cmd.exe /c echo 559891bb017 > \\\\.\\pipe\\5e120a\n        - ImagePath|contains|all:\n            - 'cmd'\n            - '/c'\n            - 'echo'\n            - '\\pipe\\'\n        # cobaltstrike getsystem technique 1: %COMSPEC% /c echo 559891bb017 > \\\\.\\pipe\\5e120a\n        - ImagePath|contains|all:\n            - '%COMSPEC%'\n            - '/c'\n            - 'echo'\n            - '\\pipe\\'\n        # cobaltstrike getsystem technique 1b (expanded %COMSPEC%): %COMSPEC% /c echo 559891bb017 > \\\\.\\pipe\\5e120a\n        - ImagePath|contains|all:\n            - 'cmd.exe'\n            - '/c'\n            - 'echo'\n            - '\\pipe\\'\n        # meterpreter getsystem technique 2: rundll32.exe C:\\Users\\test\\AppData\\Local\\Temp\\tmexsn.dll,a /p:tmexsn\n        - ImagePath|contains|all:\n            - 'rundll32'\n            - '.dll,a'\n            - '/p:'\n    condition: selection\nfields:\n    - ComputerName\n    - SubjectDomainName\n    - SubjectUserName\n    - ImagePath\nfalsepositives:\n    - Highly unlikely\nlevel: critical",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: driver_load\ndetection:\n    selection:\n        # meterpreter getsystem technique 1: cmd.exe /c echo 559891bb017 > \\\\.\\pipe\\5e120a\n        - ImagePath|contains|all:\n            - 'cmd'\n            - '/c'\n            - 'echo'\n            - '\\pipe\\'\n        # cobaltstrike getsystem technique 1: %COMSPEC% /c echo 559891bb017 > \\\\.\\pipe\\5e120a\n        - ImagePath|contains|all:\n            - '%COMSPEC%'\n            - '/c'\n            - 'echo'\n            - '\\pipe\\'\n        # cobaltstrike getsystem technique 1b (expanded %COMSPEC%): %COMSPEC% /c echo 559891bb017 > \\\\.\\pipe\\5e120a\n        - ImagePath|contains|all:\n            - 'cmd.exe'\n            - '/c'\n            - 'echo'\n            - '\\pipe\\'\n        # meterpreter getsystem technique 2: rundll32.exe C:\\Users\\test\\AppData\\Local\\Temp\\tmexsn.dll,a /p:tmexsn\n        - ImagePath|contains|all:\n            - 'rundll32'\n            - '.dll,a'\n            - '/p:'\n    condition: selection\nfields:\n    - ComputerName\n    - SubjectDomainName\n    - SubjectUserName\n    - ImagePath\nfalsepositives:\n    - Highly unlikely\nlevel: critical",
      "question": "use of getsystem Meterpreter/Cobalt Strike command by detecting a specific service installation",
      "answer": "In order to detect the use of getsystem Meterpreter/Cobalt Strike command by detecting a specific service installation, you should: Monitor Windows driver load logs for instances where command execution patterns match those often used by attackers to escalate privileges or gain system access. Specifically, look out for the loading of services where the image path includes executions via 'cmd', '%COMSPEC%', or 'cmd.exe' followed by '/c', 'echo', and targeted at 'pipe' directories, indicative of Meterpreter and Cobalt Strike activities. Another technique involves observing 'rundll32' executions that load DLL files with a particular focus on patterns that include '.dll,a' and '/p:', which are characteristic of a method to execute malicious code within a seemingly benign process. The log entries to scrutinize should contain the computer name, the domain name, and the username under which the activity was initiated, along with the precise image path used in the operation. Given the critical nature of this detection and its tie to advanced persistent threat tactics, false positives are considered highly unlikely."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious failed logins with different user accounts from a single source system.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious failed logins with different user accounts from a single source system, you should: Focus on Linux authentication service logs to identify patterns of authentication failures. Specifically, pay attention to messages tagged as authentication failures, without limiting the search to specific usernames (`pam_user: '*'`) or remote hosts (`pam_rhost: '*'`). Define a 24-hour timeframe for monitoring these authentication attempts. The critical detection factor is if the count of distinct usernames (`pam_user`) that failed to authenticate from the same source system (identified by `pam_rhost`) exceeds three within this 24-hour period. Be aware of potential legitimate scenarios that may generate similar patterns, such as terminal servers, jump servers, and workstations with frequently changing users, which could be considered as false positives. The severity level for this type of activity is considered medium, emphasizing its potential risk without assuming it's a definitive indicator of a security incident. By focusing on these specific factors within the Linux authentication logs, it's possible to identify and investigate instances where a single source system attempts to log in with multiple user accounts and fails, which could signify an attacker attempting to gain unauthorized access.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: linux\n    service: auth\ndetection:\n    selection:\n        pam_message: authentication failure\n        pam_user: '*'\n        pam_rhost: '*'\n    timeframe: 24h\n    condition: selection | count(pam_user) by pam_rhost > 3\nfalsepositives:\n    - Terminal servers\n    - Jump servers\n    - Workstations with frequently changing users\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\n    service: auth\ndetection:\n    selection:\n        pam_message: authentication failure\n        pam_user: '*'\n        pam_rhost: '*'\n    timeframe: 24h\n    condition: selection | count(pam_user) by pam_rhost > 3\nfalsepositives:\n    - Terminal servers\n    - Jump servers\n    - Workstations with frequently changing users\nlevel: medium\n",
      "question": "suspicious failed logins with different user accounts from a single source system",
      "answer": "In order to detect suspicious failed logins with different user accounts from a single source system, you should: Focus on Linux authentication service logs to identify patterns of authentication failures. Specifically, pay attention to messages tagged as authentication failures, without limiting the search to specific usernames (`pam_user: '*'`) or remote hosts (`pam_rhost: '*'`). Define a 24-hour timeframe for monitoring these authentication attempts. The critical detection factor is if the count of distinct usernames (`pam_user`) that failed to authenticate from the same source system (identified by `pam_rhost`) exceeds three within this 24-hour period. Be aware of potential legitimate scenarios that may generate similar patterns, such as terminal servers, jump servers, and workstations with frequently changing users, which could be considered as false positives. The severity level for this type of activity is considered medium, emphasizing its potential risk without assuming it's a definitive indicator of a security incident. By focusing on these specific factors within the Linux authentication logs, it's possible to identify and investigate instances where a single source system attempts to log in with multiple user accounts and fails, which could signify an attacker attempting to gain unauthorized access."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Request to \"amsiInitFailed\" that can be used to disable AMSI Scanning.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect requests to \"amsiInitFailed\" that can be used to disable AMSI scanning, you should monitor for specific command-line activity within your Windows environment's process creation logs. Focus on detecting command lines containing either the 'System.Management.Automation.AmsiUtils' or 'amsiInitFailed' strings as one potential indicator. Another strong sign is command lines containing all the following strings: '[Ref].Assembly.GetType', 'SetValue($null,$true)', and 'NonPublic,Static'. Any one of these patterns matching is considered a high-level alert with an unlikely chance of being a false positive. This detection strategy helps in identifying attempts to bypass the Antimalware Scan Interface (AMSI) which is crucial for the proactive defense against malware and script-based attacks.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_1:\n        CommandLine|contains:\n            - 'System.Management.Automation.AmsiUtils'\n            - 'amsiInitFailed'\n    selection_2:\n        CommandLine|contains|all:\n            - '[Ref].Assembly.GetType'\n            - 'SetValue($null,$true)'\n            - 'NonPublic,Static'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_1:\n        CommandLine|contains:\n            - 'System.Management.Automation.AmsiUtils'\n            - 'amsiInitFailed'\n    selection_2:\n        CommandLine|contains|all:\n            - '[Ref].Assembly.GetType'\n            - 'SetValue($null,$true)'\n            - 'NonPublic,Static'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "Request to \"amsiInitFailed\" that can be used to disable AMSI Scanning",
      "answer": "In order to detect requests to \"amsiInitFailed\" that can be used to disable AMSI scanning, you should monitor for specific command-line activity within your Windows environment's process creation logs. Focus on detecting command lines containing either the 'System.Management.Automation.AmsiUtils' or 'amsiInitFailed' strings as one potential indicator. Another strong sign is command lines containing all the following strings: '[Ref].Assembly.GetType', 'SetValue($null,$true)', and 'NonPublic,Static'. Any one of these patterns matching is considered a high-level alert with an unlikely chance of being a false positive. This detection strategy helps in identifying attempts to bypass the Antimalware Scan Interface (AMSI) which is crucial for the proactive defense against malware and script-based attacks."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    product: windows\ndetection:\n    keywords:\n        - 'dpapi::masterkey'\n        - 'eo.oe.kiwi'\n        - 'event::clear'\n        - 'event::drop'\n        - 'gentilkiwi.com'\n        - 'kerberos::golden'\n        - 'kerberos::ptc'\n        - 'kerberos::ptt'\n        - 'kerberos::tgt'\n        - 'Kiwi Legit Printer'\n        - 'lsadump::'\n        - 'mimidrv.sys'\n        - '\\mimilib.dll'\n        - 'misc::printnightmare'\n        - 'misc::shadowcopies'\n        - 'misc::skeleton'\n        - 'privilege::backup'\n        - 'privilege::debug'\n        - 'privilege::driver'\n        - 'sekurlsa::'\n    filter:\n        EventID: 15  # Sysmon's FileStream Events (could cause false positives when Sigma rules get copied on/to a system)\n    condition: keywords and not filter\nfalsepositives:\n    - Naughty administrators\n    - AV Signature updates\n    - Files with Mimikatz in their filename\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect This method detects mimikatz keywords in different Eventlogs (some of them only appear in older Mimikatz version that are however still used by different threat groups)\n\nHere is how  the given sigma rule operates: In order to detect mimikatz keywords in different Eventlogs (some of them only appear in older Mimikatz version that are however still used by different threat groups), you should: Monitor Windows event logs for specific keywords that are indicative of Mimikatz use. These keywords include 'dpapi::masterkey', 'eo.oe.kiwi', 'event::clear', 'event::drop', 'gentilkiwi.com', 'kerberos::golden', 'kerberos::ptc', 'kerberos::ptt', 'kerberos::tgt', 'Kiwi Legit Printer', 'lsadump::', 'mimidrv.sys', '\\mimilib.dll', 'misc::printnightmare', 'misc::shadowcopies', 'misc::skeleton', 'privilege::backup', 'privilege::debug', 'privilege::driver', and 'sekurlsa::'. It is vital to exclude false positives that could trigger these alerts, such as actions by system administrators, antivirus signature updates, or files innocently named after Mimikatz. These criteria mainly concern monitoring Sysmon's FileStream events, specifically avoiding EventID 15 due to its potential for false positives. The focus on these specific keywords and exclusions is because they are tied with various tactics and techniques used in attacks, like credential dumping, obtaining sensitive information, and privilege escalation.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\ndetection:\n    keywords:\n        - 'dpapi::masterkey'\n        - 'eo.oe.kiwi'\n        - 'event::clear'\n        - 'event::drop'\n        - 'gentilkiwi.com'\n        - 'kerberos::golden'\n        - 'kerberos::ptc'\n        - 'kerberos::ptt'\n        - 'kerberos::tgt'\n        - 'Kiwi Legit Printer'\n        - 'lsadump::'\n        - 'mimidrv.sys'\n        - '\\mimilib.dll'\n        - 'misc::printnightmare'\n        - 'misc::shadowcopies'\n        - 'misc::skeleton'\n        - 'privilege::backup'\n        - 'privilege::debug'\n        - 'privilege::driver'\n        - 'sekurlsa::'\n    filter:\n        EventID: 15  # Sysmon's FileStream Events (could cause false positives when Sigma rules get copied on/to a system)\n    condition: keywords and not filter\nfalsepositives:\n    - Naughty administrators\n    - AV Signature updates\n    - Files with Mimikatz in their filename\nlevel: high\n",
      "question": "This method detects mimikatz keywords in different Eventlogs (some of them only appear in older Mimikatz version that are however still used by different threat groups)",
      "answer": "In order to detect mimikatz keywords in different Eventlogs (some of them only appear in older Mimikatz version that are however still used by different threat groups), you should: Monitor Windows event logs for specific keywords that are indicative of Mimikatz use. These keywords include 'dpapi::masterkey', 'eo.oe.kiwi', 'event::clear', 'event::drop', 'gentilkiwi.com', 'kerberos::golden', 'kerberos::ptc', 'kerberos::ptt', 'kerberos::tgt', 'Kiwi Legit Printer', 'lsadump::', 'mimidrv.sys', '\\mimilib.dll', 'misc::printnightmare', 'misc::shadowcopies', 'misc::skeleton', 'privilege::backup', 'privilege::debug', 'privilege::driver', and 'sekurlsa::'. It is vital to exclude false positives that could trigger these alerts, such as actions by system administrators, antivirus signature updates, or files innocently named after Mimikatz. These criteria mainly concern monitoring Sysmon's FileStream events, specifically avoiding EventID 15 due to its potential for false positives. The focus on these specific keywords and exclusions is because they are tied with various tactics and techniques used in attacks, like credential dumping, obtaining sensitive information, and privilege escalation."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting network connections and DNS queries initiated by Regsvr32.exe.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect network connections and DNS queries initiated by Regsvr32.exe, you should: Monitor network connection logs from Windows-based systems for any instances where the process image name ends with '\\regsvr32.exe'. This involves keeping an eye out for any activity that involves the regsvr32.exe executable making network connections. Specifically, you should focus on logging and analyzing details such as the name of the computer where the activity was detected, the user under which regsvr32.exe was executed, the full path of the regsvr32.exe image, the destination IP address it connected to, and the destination port used for the connection. It's important to consider that there might be instances where this detection could trigger on legitimate activities; thus, all detections should be analyzed carefully to determine if they represent malicious behavior or if they are false positives. This monitoring and detection effort is critical as it relates to identifying potential misuse of regsvr32.exe for surreptitious network communications, a technique often associated with command and control operations and exfiltration in cyber attacks.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: network_connection\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\regsvr32.exe'\n    condition: selection\nfields:\n    - ComputerName\n    - User\n    - Image\n    - DestinationIp\n    - DestinationPort\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: network_connection\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\regsvr32.exe'\n    condition: selection\nfields:\n    - ComputerName\n    - User\n    - Image\n    - DestinationIp\n    - DestinationPort\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "network connections and DNS queries initiated by Regsvr32.exe",
      "answer": "In order to detect network connections and DNS queries initiated by Regsvr32.exe, you should: Monitor network connection logs from Windows-based systems for any instances where the process image name ends with '\\regsvr32.exe'. This involves keeping an eye out for any activity that involves the regsvr32.exe executable making network connections. Specifically, you should focus on logging and analyzing details such as the name of the computer where the activity was detected, the user under which regsvr32.exe was executed, the full path of the regsvr32.exe image, the destination IP address it connected to, and the destination port used for the connection. It's important to consider that there might be instances where this detection could trigger on legitimate activities; thus, all detections should be analyzed carefully to determine if they represent malicious behavior or if they are false positives. This monitoring and detection effort is critical as it relates to identifying potential misuse of regsvr32.exe for surreptitious network communications, a technique often associated with command and control operations and exfiltration in cyber attacks."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting when successful sign-ins increased by 10% or greater..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to Detects when successful sign-ins increased by 10% or greater, you should: Monitor Azure sign-in logs specifically focusing on successful sign-in events. The detection strategy should be configured to identify and alert when there's an increase in the number of successful sign-ins by 10% or more. This monitoring should account for the possibility of false positives, which could arise from scenarios such as an increase in the number of users within the environment. The significance of these alerts is considered to be at a low level, suggesting that while they indicate potential security events, they may also occur during normal operation scenarios without malicious intent.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: azure\n    service: signinlogs\ndetection:\n    selection:\n        Status: Success\n        Count: \"<10%\"\n    condition: selection\nfalsepositives:\n    - Increase of users in the environment\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: azure\n    service: signinlogs\ndetection:\n    selection:\n        Status: Success\n        Count: \"<10%\"\n    condition: selection\nfalsepositives:\n    - Increase of users in the environment\nlevel: low\n",
      "question": "when successful sign-ins increased by 10% or greater.",
      "answer": "In order to Detects when successful sign-ins increased by 10% or greater, you should: Monitor Azure sign-in logs specifically focusing on successful sign-in events. The detection strategy should be configured to identify and alert when there's an increase in the number of successful sign-ins by 10% or more. This monitoring should account for the possibility of false positives, which could arise from scenarios such as an increase in the number of users within the environment. The significance of these alerts is considered to be at a low level, suggesting that while they indicate potential security events, they may also occur during normal operation scenarios without malicious intent."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|endswith: '\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\AllowMultipleTSSessions'\n        Details|endswith: DWORD (0x00000001)\n    condition: selection\nfalsepositives:\n    - Legitimate use of the multi session functionality\nlevel: medium\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect when the 'AllowMultipleTSSessions' value is enabled.\nWhich allows for multiple Remote Desktop connection sessions to be opened at once.\nThis is often used by attacker as a way to connect to an RDP session without disconnecting the other users\n\n\nHere is how  the given sigma rule operates: In order to detect when the 'AllowMultipleTSSessions' value is enabled, which allows for multiple Remote Desktop connection sessions to be opened at once and is often used by attackers as a way to connect to an RDP session without disconnecting the other users, you should: Monitor the Windows Registry settings for changes specifically aimed at enabling the 'AllowMultipleTSSessions' functionality. This involves tracking the event when a value is set (SetValue event type) in the registry at the location '\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\AllowMultipleTSSessions' that changes its value to DWORD (0x00000001), which effectively allows multiple TS sessions. Be aware that there might be legitimate use cases for enabling this feature; hence, not every detection might indicate a malicious activity. This detection is classified with a medium level of importance. The associated MITRE ATT&CK tactics and techniques for understanding this activity focus on Persistence, Privilege Escalation, and Lateral Movement, as this behavior is exploited by attackers to maintain access to and control over a connected system without disrupting other users' sessions.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|endswith: '\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\AllowMultipleTSSessions'\n        Details|endswith: DWORD (0x00000001)\n    condition: selection\nfalsepositives:\n    - Legitimate use of the multi session functionality\nlevel: medium\n",
      "question": "when the 'AllowMultipleTSSessions' value is enabled.\nWhich allows for multiple Remote Desktop connection sessions to be opened at once.\nThis is often used by attacker as a way to connect to an RDP session without disconnecting the other users\n",
      "answer": "In order to detect when the 'AllowMultipleTSSessions' value is enabled, which allows for multiple Remote Desktop connection sessions to be opened at once and is often used by attackers as a way to connect to an RDP session without disconnecting the other users, you should: Monitor the Windows Registry settings for changes specifically aimed at enabling the 'AllowMultipleTSSessions' functionality. This involves tracking the event when a value is set (SetValue event type) in the registry at the location '\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\AllowMultipleTSSessions' that changes its value to DWORD (0x00000001), which effectively allows multiple TS sessions. Be aware that there might be legitimate use cases for enabling this feature; hence, not every detection might indicate a malicious activity. This detection is classified with a medium level of importance. The associated MITRE ATT&CK tactics and techniques for understanding this activity focus on Persistence, Privilege Escalation, and Lateral Movement, as this behavior is exploited by attackers to maintain access to and control over a connected system without disrupting other users' sessions."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        # Win32_Shadowcopy | ForEach-Object\n        CommandLine|contains:\n            - 'VwBpAG4AMwAyAF8AUwBoAGEAZABvAHcAYwBvAHAAeQAgAHwAIABGAG8AcgBFAGEAYwBoAC0ATwBiAGoAZQBjAHQA'\n            - 'cAaQBuADMAMgBfAFMAaABhAGQAbwB3AGMAbwBwAHkAIAB8ACAARgBvAHIARQBhAGMAaAAtAE8AYgBqAGUAYwB0A'\n            - 'XAGkAbgAzADIAXwBTAGgAYQBkAG8AdwBjAG8AcAB5ACAAfAAgAEYAbwByAEUAYQBjAGgALQBPAGIAagBlAGMAdA'\n    condition: selection\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Unlikely\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect base64 encoded listing Win32_Shadowcopy\n\nHere is how  the given sigma rule operates: In order to detect base64 encoded listing Win32_Shadowcopy, you should: focus on monitoring the creation of processes within Windows environments. Specifically, look for command lines that contain base64 encoded strings indicative of operations associated with Win32_Shadowcopy, potentially wrapped within a ForEach-Object PowerShell cmdlet. These strings are highly unique and their presence in the command line is a strong indicator of an attempt to interact with or exploit Windows Shadow Copy capabilities, possibly for malicious purposes like data theft, ransomware preparation, or evasion. Given the encoded nature of the command lines being searched for and the specificity of the operation, this type of activity is considered highly suspicious and false positives are unlikely. Monitoring for these encoded command lines is crucial for early detection of such malicious activities.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        # Win32_Shadowcopy | ForEach-Object\n        CommandLine|contains:\n            - 'VwBpAG4AMwAyAF8AUwBoAGEAZABvAHcAYwBvAHAAeQAgAHwAIABGAG8AcgBFAGEAYwBoAC0ATwBiAGoAZQBjAHQA'\n            - 'cAaQBuADMAMgBfAFMAaABhAGQAbwB3AGMAbwBwAHkAIAB8ACAARgBvAHIARQBhAGMAaAAtAE8AYgBqAGUAYwB0A'\n            - 'XAGkAbgAzADIAXwBTAGgAYQBkAG8AdwBjAG8AcAB5ACAAfAAgAEYAbwByAEUAYQBjAGgALQBPAGIAagBlAGMAdA'\n    condition: selection\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "base64 encoded listing Win32_Shadowcopy",
      "answer": "In order to detect base64 encoded listing Win32_Shadowcopy, you should: focus on monitoring the creation of processes within Windows environments. Specifically, look for command lines that contain base64 encoded strings indicative of operations associated with Win32_Shadowcopy, potentially wrapped within a ForEach-Object PowerShell cmdlet. These strings are highly unique and their presence in the command line is a strong indicator of an attempt to interact with or exploit Windows Shadow Copy capabilities, possibly for malicious purposes like data theft, ransomware preparation, or evasion. Given the encoded nature of the command lines being searched for and the specificity of the operation, this type of activity is considered highly suspicious and false positives are unlikely. Monitoring for these encoded command lines is crucial for early detection of such malicious activities."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting calls to the AtomicTestHarnesses \"Invoke-ATHRemoteFXvGPUDisablementCommand\" which is designed to abuse the \"RemoteFXvGPUDisablement.exe\" binary to run custom PowerShell code via module load-order hijacking..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect calls to the AtomicTestHarnesses \"Invoke-ATHRemoteFXvGPUDisablementCommand\" which is designed to abuse the \"RemoteFXvGPUDisablement.exe\" binary to run custom PowerShell code via module load-order hijacking, you should: Focus on Windows process creation logs to identify when certain PowerShell commands are executed. Specifically, watch for any process creation that includes command lines containing either 'Invoke-ATHRemoteFXvGPUDisablementCommand' or 'Invoke-ATHRemoteFXvGPUDisableme' strings. This situation is considered with a high level of concern due to its implications, implying that an attack technique involving malicious use of PowerShell to manipulate the loading order of modules and potentially execute unauthorized code is being attempted. Identifying such actions is key, although there may be unknown cases where similar command lines are used benignly. Nonetheless, the focus remains on capturing and analyzing instances where these specific commands appear to mitigate potential threats successfully.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        CommandLine|contains:\n            - 'Invoke-ATHRemoteFXvGPUDisablementCommand'\n            - 'Invoke-ATHRemoteFXvGPUDisableme'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        CommandLine|contains:\n            - 'Invoke-ATHRemoteFXvGPUDisablementCommand'\n            - 'Invoke-ATHRemoteFXvGPUDisableme'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "calls to the AtomicTestHarnesses \"Invoke-ATHRemoteFXvGPUDisablementCommand\" which is designed to abuse the \"RemoteFXvGPUDisablement.exe\" binary to run custom PowerShell code via module load-order hijacking.",
      "answer": "In order to detect calls to the AtomicTestHarnesses \"Invoke-ATHRemoteFXvGPUDisablementCommand\" which is designed to abuse the \"RemoteFXvGPUDisablement.exe\" binary to run custom PowerShell code via module load-order hijacking, you should: Focus on Windows process creation logs to identify when certain PowerShell commands are executed. Specifically, watch for any process creation that includes command lines containing either 'Invoke-ATHRemoteFXvGPUDisablementCommand' or 'Invoke-ATHRemoteFXvGPUDisableme' strings. This situation is considered with a high level of concern due to its implications, implying that an attack technique involving malicious use of PowerShell to manipulate the loading order of modules and potentially execute unauthorized code is being attempted. Identifying such actions is key, although there may be unknown cases where similar command lines are used benignly. Nonetheless, the focus remains on capturing and analyzing instances where these specific commands appear to mitigate potential threats successfully."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        ImageLoaded|endswith: '\\chrome_frame_helper.dll'\n    filter_main_path:\n        ImageLoaded|startswith:\n            - 'C:\\Program Files\\Google\\Chrome\\Application\\'\n            - 'C:\\Program Files (x86)\\Google\\Chrome\\Application\\'\n    filter_optional_user_path:\n        ImageLoaded|contains: '\\AppData\\local\\Google\\Chrome\\Application\\'\n    condition: selection and not 1 of filter_main_* and not 1 of filter_optional_*\nfalsepositives:\n    - Unknown\nlevel: medium\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect potential DLL sideloading of \"chrome_frame_helper.dll\"\n\nHere is how  the given sigma rule operates: In order to detect potential DLL sideloading of \"chrome_frame_helper.dll\", you should: Focus on monitoring the loading of images (DLL files) within Windows environments. Specifically, look out for instances where the file \"chrome_frame_helper.dll\" is loaded, but not from the expected paths of Google Chrome's installation directories either in the Program Files or Program Files (x86) folders, nor from a user path within the AppData\\local\\Google\\Chrome\\Application directory. This detection is crucial as it may indicate an attempt to exploit the Chrome application by loading a malicious DLL that masquerades as the legitimate \"chrome_frame_helper.dll\". It's important to keep an eye out for these activities without automatically assuming they are malicious due to the possibility of unknown false positives, rating the level of concern as medium.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        ImageLoaded|endswith: '\\chrome_frame_helper.dll'\n    filter_main_path:\n        ImageLoaded|startswith:\n            - 'C:\\Program Files\\Google\\Chrome\\Application\\'\n            - 'C:\\Program Files (x86)\\Google\\Chrome\\Application\\'\n    filter_optional_user_path:\n        ImageLoaded|contains: '\\AppData\\local\\Google\\Chrome\\Application\\'\n    condition: selection and not 1 of filter_main_* and not 1 of filter_optional_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "potential DLL sideloading of \"chrome_frame_helper.dll\"",
      "answer": "In order to detect potential DLL sideloading of \"chrome_frame_helper.dll\", you should: Focus on monitoring the loading of images (DLL files) within Windows environments. Specifically, look out for instances where the file \"chrome_frame_helper.dll\" is loaded, but not from the expected paths of Google Chrome's installation directories either in the Program Files or Program Files (x86) folders, nor from a user path within the AppData\\local\\Google\\Chrome\\Application directory. This detection is crucial as it may indicate an attempt to exploit the Chrome application by loading a malicious DLL that masquerades as the legitimate \"chrome_frame_helper.dll\". It's important to keep an eye out for these activities without automatically assuming they are malicious due to the possibility of unknown false positives, rating the level of concern as medium."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of \"reg.exe\" for enabling/disabling the RDP service on the host by tampering with the 'CurrentControlSet\\Control\\Terminal Server' values.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the execution of \"reg.exe\" for enabling/disabling the RDP service on the host by tampering with the 'CurrentControlSet\\Control\\Terminal Server' values, you should: Monitor Windows process creation logs for instances where the \"reg.exe\" program is executed. Specifically, look for command lines that contain ' add ', '\\CurrentControlSet\\Control\\Terminal Server', 'REG_DWORD', and ' /f', indicating modifications to the Terminal Server settings in the registry. Additionally, keep an eye out for specific command line arguments that include 'Licensing Core', 'EnableConcurrentSessions', or other values such as 'WinStations\\RDP-Tcp', 'MaxInstanceCount', and similar, which are associated with concurrent RDP session settings. This detection focuses on changes that could enable or disable RDP services or alter its configuration for possibly malicious purposes. The rule uses high-level conditions to identify suspicious activity related to the Remote Desktop Protocol (RDP) settings, and it's tagged under techniques related to Persistence, Privilege Escalation, and Defense Evasion.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_main_img:\n        - Image|endswith: '\\reg.exe'\n        - OriginalFileName: 'reg.exe'\n    selection_main_cli:\n        CommandLine|contains|all:\n            - ' add '\n            - '\\CurrentControlSet\\Control\\Terminal Server'\n            - 'REG_DWORD'\n            - ' /f'\n    selection_values_1:\n        CommandLine|contains|all:\n            - 'Licensing Core'\n            - 'EnableConcurrentSessions'\n    selection_values_2:\n        CommandLine|contains:\n            - 'WinStations\\RDP-Tcp'\n            - 'MaxInstanceCount'\n            - 'fEnableWinStation'\n            - 'TSUserEnabled'\n            - 'TSEnabled'\n            - 'TSAppCompat'\n            - 'IdleWinStationPoolCount'\n            - 'TSAdvertise'\n            - 'AllowTSConnections'\n            - 'fSingleSessionPerUser'\n            - 'fDenyTSConnections'\n    condition: all of selection_main_* and 1 of selection_values_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_main_img:\n        - Image|endswith: '\\reg.exe'\n        - OriginalFileName: 'reg.exe'\n    selection_main_cli:\n        CommandLine|contains|all:\n            - ' add '\n            - '\\CurrentControlSet\\Control\\Terminal Server'\n            - 'REG_DWORD'\n            - ' /f'\n    selection_values_1:\n        CommandLine|contains|all:\n            - 'Licensing Core'\n            - 'EnableConcurrentSessions'\n    selection_values_2:\n        CommandLine|contains:\n            - 'WinStations\\RDP-Tcp'\n            - 'MaxInstanceCount'\n            - 'fEnableWinStation'\n            - 'TSUserEnabled'\n            - 'TSEnabled'\n            - 'TSAppCompat'\n            - 'IdleWinStationPoolCount'\n            - 'TSAdvertise'\n            - 'AllowTSConnections'\n            - 'fSingleSessionPerUser'\n            - 'fDenyTSConnections'\n    condition: all of selection_main_* and 1 of selection_values_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "execution of \"reg.exe\" for enabling/disabling the RDP service on the host by tampering with the 'CurrentControlSet\\Control\\Terminal Server' values",
      "answer": "In order to detect the execution of \"reg.exe\" for enabling/disabling the RDP service on the host by tampering with the 'CurrentControlSet\\Control\\Terminal Server' values, you should: Monitor Windows process creation logs for instances where the \"reg.exe\" program is executed. Specifically, look for command lines that contain ' add ', '\\CurrentControlSet\\Control\\Terminal Server', 'REG_DWORD', and ' /f', indicating modifications to the Terminal Server settings in the registry. Additionally, keep an eye out for specific command line arguments that include 'Licensing Core', 'EnableConcurrentSessions', or other values such as 'WinStations\\RDP-Tcp', 'MaxInstanceCount', and similar, which are associated with concurrent RDP session settings. This detection focuses on changes that could enable or disable RDP services or alter its configuration for possibly malicious purposes. The rule uses high-level conditions to identify suspicious activity related to the Remote Desktop Protocol (RDP) settings, and it's tagged under techniques related to Persistence, Privilege Escalation, and Defense Evasion."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        Image|endswith:\n            # Microsoft Office Programs Dropping Executables / Rest of the apps are covered in: c7a74c80-ba5a-486e-9974-ab9e682bc5e4\n            - \\eqnedt32.exe\n            - \\wordpad.exe\n            - \\wordview.exe\n            # LOLBINs that can be used to download executables\n            - \\certutil.exe\n            - \\certoc.exe\n            - \\CertReq.exe\n            #- \\bitsadmin.exe (depends on the environment; comment in if you're sure that bitsadmin doesn't do that in your env)\n            - \\Desktopimgdownldr.exe\n            - \\esentutl.exe\n            #- \\expand.exe\n            - '\\mshta.exe'\n            # Executables that should never drop an executable to disk (but may after a previous process injection or if it's malware that uses a legitimate name)\n            - '\\AcroRd32.exe'\n            - '\\RdrCEF.exe'\n            - '\\hh.exe'\n            - '\\finger.exe'\n        TargetFilename|endswith:\n            - '.ps1'\n            - '.bat'\n            - '.vbs'\n            - '.scf'\n            - '.wsf'\n            - '.wsh'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect programs on a Windows system that should not write scripts to disk\n\nHere is how  the given sigma rule operates: In order to detect programs on a Windows system that should not write scripts to disk, you should monitor file events within the operating system for specific behaviors. Focus on tracking when particular Windows executables and programs, sometimes associated with normal operations or known as Living off the Land Binaries (LOLBins), attempt to create or modify script files, such as PowerShell (.ps1), batch (.bat), Visual Basic (.vbs), Shell Command File (.scf), Windows Script File (.wsf), or Windows Script Host (.wsh) files. These executables include Microsoft Office programs like eqnedt32.exe, wordpad.exe, and wordview.exe, which under normal circumstances should not be used to drop executables. Additionally, pay attention to LOLBins like certutil.exe, certoc.exe, CertReq.exe, Desktopimgdownldr.exe, esentutl.exe, mshta.exe, which are known to be misused to download or execute malicious code. Also, be wary of legitimate processes like AcroRd32.exe (Adobe Reader), RdrCEF.exe (Adobe Reader's cloud services), hh.exe (HTML Help executable), and finger.exe, as these should not typically be involved in script creation on disk. Such an activity can indicate malicious behavior, including the execution of unauthorized or harmful scripts, potentially part of an attack chain. The aim is to identify these unusual activities to prevent attacks that exploit legitimate functionalities for nefarious purposes, emphasizing the importance of vigilance in monitoring file creation events tied to these specific applications and scripts.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        Image|endswith:\n            # Microsoft Office Programs Dropping Executables / Rest of the apps are covered in: c7a74c80-ba5a-486e-9974-ab9e682bc5e4\n            - \\eqnedt32.exe\n            - \\wordpad.exe\n            - \\wordview.exe\n            # LOLBINs that can be used to download executables\n            - \\certutil.exe\n            - \\certoc.exe\n            - \\CertReq.exe\n            #- \\bitsadmin.exe (depends on the environment; comment in if you're sure that bitsadmin doesn't do that in your env)\n            - \\Desktopimgdownldr.exe\n            - \\esentutl.exe\n            #- \\expand.exe\n            - '\\mshta.exe'\n            # Executables that should never drop an executable to disk (but may after a previous process injection or if it's malware that uses a legitimate name)\n            - '\\AcroRd32.exe'\n            - '\\RdrCEF.exe'\n            - '\\hh.exe'\n            - '\\finger.exe'\n        TargetFilename|endswith:\n            - '.ps1'\n            - '.bat'\n            - '.vbs'\n            - '.scf'\n            - '.wsf'\n            - '.wsh'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "programs on a Windows system that should not write scripts to disk",
      "answer": "In order to detect programs on a Windows system that should not write scripts to disk, you should monitor file events within the operating system for specific behaviors. Focus on tracking when particular Windows executables and programs, sometimes associated with normal operations or known as Living off the Land Binaries (LOLBins), attempt to create or modify script files, such as PowerShell (.ps1), batch (.bat), Visual Basic (.vbs), Shell Command File (.scf), Windows Script File (.wsf), or Windows Script Host (.wsh) files. These executables include Microsoft Office programs like eqnedt32.exe, wordpad.exe, and wordview.exe, which under normal circumstances should not be used to drop executables. Additionally, pay attention to LOLBins like certutil.exe, certoc.exe, CertReq.exe, Desktopimgdownldr.exe, esentutl.exe, mshta.exe, which are known to be misused to download or execute malicious code. Also, be wary of legitimate processes like AcroRd32.exe (Adobe Reader), RdrCEF.exe (Adobe Reader's cloud services), hh.exe (HTML Help executable), and finger.exe, as these should not typically be involved in script creation on disk. Such an activity can indicate malicious behavior, including the execution of unauthorized or harmful scripts, potentially part of an attack chain. The aim is to identify these unusual activities to prevent attacks that exploit legitimate functionalities for nefarious purposes, emphasizing the importance of vigilance in monitoring file creation events tied to these specific applications and scripts."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: proxy\ndetection:\n    selection:\n        c-useragent:\n        # RATs\n            - 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:53.0) Gecko/20100101 Chrome /53.0' # DragonOK\n            - 'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1)' # Used by PlugX - base-lining recommended - https://community.rsa.com/thread/185439\n            - 'Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0)' # Used by PlugX - base-lining recommended - https://community.rsa.com/thread/185439\n            - 'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0; .NET CLR  1.1.4322)' # Used by PlugX - old - https://goo.gl/Yfjtk5\n            - 'HttpBrowser/1.0' # HTTPBrowser RAT\n            - '*<|>*' # Houdini / Iniduoh / njRAT\n            - 'nsis_inetc (mozilla)' # ZeroAccess\n            - 'Wget/1.9+cvs-stable (Red Hat modified)' # Dyre / Upatre\n        # Ghost419 https://goo.gl/rW1yvZ\n            - 'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0; .NET CLR 1.1.4322)'\n        # Malware\n            - '*zeroup*' # W32/Renos.Downloader\n            - 'Mozilla/5.0 (Windows NT 5.1 ; v.*' # Kazy\n            - '* adlib/*' # https://goo.gl/gcAHoh\n            - '* tiny' # Trojan Downloader\n            - '* BGroom *' # Trojan Downloader\n            - '* changhuatong'\n            - '* CholTBAgent'\n            - 'Mozilla/5.0 WinInet'\n            - 'RookIE/1.0'\n            - 'M' # HkMain\n            - 'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0)' # Egamipload - old UA - probable prone to false positives\n            - 'Mozilla/4.0 (compatible;MSIE 7.0;Windows NT 6.0)' # Yakes\n            - 'backdoorbot'\n            - 'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9.2.3) Gecko/20100401 Firefox/3.6.1 (.NET CLR 3.5.30731)' # Sality\n            - 'Opera/8.81 (Windows NT 6.0; U; en)' # Sality\n            - 'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9.2.3) Gecko/20100401 Firefox/3.6.1 (.NET CLR 3.5.30729)' # Sality\n            - 'Opera' # Trojan Keragany\n            - 'Mozilla/4.0 (compatible; MSIE 5.0; Windows 98)' # Fareit\n            - 'Mozilla/4.0 (compatible; MSIE 5.01; Windows NT 5.0)' # Webshell's back connect\n            - 'MSIE' # Toby web shell\n            - '*(Charon; Inferno)' # Loki Bot\n            - 'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/5.0)' # Fareit / Pony\n            - 'Mozilla/4.0 (compatible; MSIE 6.1; Windows NT)' # https://goo.gl/g43qjs\n            - 'Mozilla/4.0(compatible; MSIE 6.0; Windows NT 5.1)' # MacControl malware https://goo.gl/sqY3Ja https://www.symantec.com/connect/blogs/osxmacontrol-back-it-again\n            - 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)' # used by Zebrocy malware https://app.any.run/tasks/7d7fa4a0-6970-4428-828b-29572abf9ceb/\n        # Ursnif\n            - 'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 10.0; Win64; x64)'\n            - 'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Win64; x64)'\n        # Emotet\n            - 'Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.2; WOW64; Trident/7.0; .NET4.0C; .NET4.0E; InfoPath.3)' # https://twitter.com/webbthewombat/status/1225827092132179968\n        # Lockbit (https://twitter.com/kladblokje_88/status/1614673320124743681?s=12&t=joEpeVa5d58aHYNGA_To7Q)\n            - 'Mozilla/5.0 (Windows NT 6.1)'\n            - 'AppleWebkit/587.38 (KHTML, like Gecko)'\n            - 'Chrome/91.0.4472.77'\n            - 'Safari/537.36'\n            - 'Edge/91.0.864.37'\n            - 'Firefox/89.0'\n            - 'Gecko/20100101'\n        # Others\n            - '* pxyscand*'\n            - '* asd'\n            - '* mdms'\n            - 'sample'\n            - 'nocase'\n            - 'Moxilla'\n            - 'Win32 *'\n            - '*Microsoft Internet Explorer*'\n            - 'agent *'\n            - 'AutoIt' # Suspicious - base-lining recommended\n            - 'IczelionDownLoad'\n            - 'Mozilla/4.0 (compatible; MSIE 9.0; Windows NT 10.0; .NET4.0C; .NET4.0E; Tablet PC 2.0)' # https://unit42.paloaltonetworks.com/thor-plugx-variant/\n            - 'record' # https://blog.sekoia.io/raccoon-stealer-v2-part-1-the-return-of-the-dead/\n            - 'mozzzzzzzzzzz' # https://blog.sekoia.io/raccoon-stealer-v2-part-1-the-return-of-the-dead/\n            - 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:76.0) Gecko/20100101 Firefox/76.0' # Quasar RAT UA https://twitter.com/malmoeb/status/1559994820692672519?s=20&t=g3tkNL09dZZWbFN10qDVjg\n            - 'Havana/0.1' # https://www.cybereason.com/blog/threat-alert-havanacrypt-ransomware-masquerading-as-google-update\n            - 'antSword/v2.1' # AntSword Webshell UA\n            - 'rqwrwqrqwrqw'  # Racoon Stealer\n            - 'qwrqrwrqwrqwr'  # Racoon Stealer\n            - 'rc2.0/client'  # Racoon Stealer\n            - 'TakeMyPainBack'  # Racoon Stealer\n            - 'xxx' # Racoon Stealer\n            - '20112211' # Racoon Stealer\n            - '23591' # Racoon Stealer\n            - '901785252112' # Racoon Stealer\n            - '1235125521512' # Racoon Stealer\n            - '125122112551' # Racoon Stealer\n            - 'B1D3N_RIM_MY_ASS' # Racoon Stealer\n            - 'AYAYAYAY1337' # Racoon Stealer\n            - 'iMightJustPayMySelfForAFeature' # Racoon Stealer\n            - 'ForAFeature' # Racoon Stealer\n            - 'Ares_ldr_v_*' # AresLoader\n            # - 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:106.0) Gecko/20100101 Firefox/106' # seen used by AresLoader\n            - 'Microsoft Internet Explorer' # https://github.com/silence-is-best/c2db\n            - 'CLCTR' # https://github.com/silence-is-best/c2db\n            - 'uploader' # https://github.com/silence-is-best/c2db\n            - 'agent' # https://github.com/silence-is-best/c2db\n            - 'License' # https://github.com/silence-is-best/c2db\n            - 'vb wininet' # https://github.com/silence-is-best/c2db\n            - 'Client' # https://github.com/silence-is-best/c2db\n            - 'Lilith-Bot/3.0' # Lilith Stealer - https://twitter.com/suyog41/status/1558051450797690880\n            - 'svc/1.0' # SVC Loader - https://twitter.com/suyog41/status/1558051450797690880\n            - 'WSHRAT' # WSHRAT - https://twitter.com/suyog41/status/1558051450797690880\n            - 'ZeroStresser Botnet/1.5' # Zerobot - https://twitter.com/suyog41/status/1558051450797690880\n            - 'OK' #Nymaim - https://twitter.com/suyog41/status/1558051450797690880\n            - 'Project1sqlite' # DarkCloud - https://twitter.com/suyog41/status/1558051450797690880\n            - 'Project1' # DarkCloud - https://twitter.com/suyog41/status/1558051450797690880\n    condition: selection\nfields:\n    - ClientIP\n    - c-uri\n    - c-useragent\nfalsepositives:\n    - Unknown\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect suspicious user agent strings used by malware in proxy logs\n\nHere is how  the given sigma rule operates: In order to detect suspicious user agent strings used by malware in proxy logs, you should: monitor proxy log sources for specific user agent strings that are commonly associated with various types of remote access tools (RATs), malware, and other potentially harmful software. These user agent strings include, but are not limited to, particular versions and formats masquerading as legitimate browsers, such as Internet Explorer, Mozilla Firefox, Chrome, and Safari, each of which might be an indicator of malicious activity. Certain strings are explicitly linked to known malware families like DragonOK, PlugX, HTTPBrowser RAT, and others including Emotet and Lockbit strains, as well as tools used for web shell interactions and other cyber threat activities. When these user agent strings are identified within the proxy logs, it indicates a high possibility of compromise or malicious attempt to communicate, signaling for further investigation. Detection involves capturing logs that contain these agent strings, alongside the requested URI and client IP address which can be critical for understanding the scope of a potential security breach or ongoing attack. Despite the specificity of the selection criteria, it's essential to remain aware of the small chance of false positives, where benign activities might inadvertently match the detection patterns.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: proxy\ndetection:\n    selection:\n        c-useragent:\n        # RATs\n            - 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:53.0) Gecko/20100101 Chrome /53.0' # DragonOK\n            - 'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1)' # Used by PlugX - base-lining recommended - https://community.rsa.com/thread/185439\n            - 'Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0)' # Used by PlugX - base-lining recommended - https://community.rsa.com/thread/185439\n            - 'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0; .NET CLR  1.1.4322)' # Used by PlugX - old - https://goo.gl/Yfjtk5\n            - 'HttpBrowser/1.0' # HTTPBrowser RAT\n            - '*<|>*' # Houdini / Iniduoh / njRAT\n            - 'nsis_inetc (mozilla)' # ZeroAccess\n            - 'Wget/1.9+cvs-stable (Red Hat modified)' # Dyre / Upatre\n        # Ghost419 https://goo.gl/rW1yvZ\n            - 'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0; .NET CLR 1.1.4322)'\n        # Malware\n            - '*zeroup*' # W32/Renos.Downloader\n            - 'Mozilla/5.0 (Windows NT 5.1 ; v.*' # Kazy\n            - '* adlib/*' # https://goo.gl/gcAHoh\n            - '* tiny' # Trojan Downloader\n            - '* BGroom *' # Trojan Downloader\n            - '* changhuatong'\n            - '* CholTBAgent'\n            - 'Mozilla/5.0 WinInet'\n            - 'RookIE/1.0'\n            - 'M' # HkMain\n            - 'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0)' # Egamipload - old UA - probable prone to false positives\n            - 'Mozilla/4.0 (compatible;MSIE 7.0;Windows NT 6.0)' # Yakes\n            - 'backdoorbot'\n            - 'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9.2.3) Gecko/20100401 Firefox/3.6.1 (.NET CLR 3.5.30731)' # Sality\n            - 'Opera/8.81 (Windows NT 6.0; U; en)' # Sality\n            - 'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9.2.3) Gecko/20100401 Firefox/3.6.1 (.NET CLR 3.5.30729)' # Sality\n            - 'Opera' # Trojan Keragany\n            - 'Mozilla/4.0 (compatible; MSIE 5.0; Windows 98)' # Fareit\n            - 'Mozilla/4.0 (compatible; MSIE 5.01; Windows NT 5.0)' # Webshell's back connect\n            - 'MSIE' # Toby web shell\n            - '*(Charon; Inferno)' # Loki Bot\n            - 'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/5.0)' # Fareit / Pony\n            - 'Mozilla/4.0 (compatible; MSIE 6.1; Windows NT)' # https://goo.gl/g43qjs\n            - 'Mozilla/4.0(compatible; MSIE 6.0; Windows NT 5.1)' # MacControl malware https://goo.gl/sqY3Ja https://www.symantec.com/connect/blogs/osxmacontrol-back-it-again\n            - 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)' # used by Zebrocy malware https://app.any.run/tasks/7d7fa4a0-6970-4428-828b-29572abf9ceb/\n        # Ursnif\n            - 'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 10.0; Win64; x64)'\n            - 'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Win64; x64)'\n        # Emotet\n            - 'Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.2; WOW64; Trident/7.0; .NET4.0C; .NET4.0E; InfoPath.3)' # https://twitter.com/webbthewombat/status/1225827092132179968\n        # Lockbit (https://twitter.com/kladblokje_88/status/1614673320124743681?s=12&t=joEpeVa5d58aHYNGA_To7Q)\n            - 'Mozilla/5.0 (Windows NT 6.1)'\n            - 'AppleWebkit/587.38 (KHTML, like Gecko)'\n            - 'Chrome/91.0.4472.77'\n            - 'Safari/537.36'\n            - 'Edge/91.0.864.37'\n            - 'Firefox/89.0'\n            - 'Gecko/20100101'\n        # Others\n            - '* pxyscand*'\n            - '* asd'\n            - '* mdms'\n            - 'sample'\n            - 'nocase'\n            - 'Moxilla'\n            - 'Win32 *'\n            - '*Microsoft Internet Explorer*'\n            - 'agent *'\n            - 'AutoIt' # Suspicious - base-lining recommended\n            - 'IczelionDownLoad'\n            - 'Mozilla/4.0 (compatible; MSIE 9.0; Windows NT 10.0; .NET4.0C; .NET4.0E; Tablet PC 2.0)' # https://unit42.paloaltonetworks.com/thor-plugx-variant/\n            - 'record' # https://blog.sekoia.io/raccoon-stealer-v2-part-1-the-return-of-the-dead/\n            - 'mozzzzzzzzzzz' # https://blog.sekoia.io/raccoon-stealer-v2-part-1-the-return-of-the-dead/\n            - 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:76.0) Gecko/20100101 Firefox/76.0' # Quasar RAT UA https://twitter.com/malmoeb/status/1559994820692672519?s=20&t=g3tkNL09dZZWbFN10qDVjg\n            - 'Havana/0.1' # https://www.cybereason.com/blog/threat-alert-havanacrypt-ransomware-masquerading-as-google-update\n            - 'antSword/v2.1' # AntSword Webshell UA\n            - 'rqwrwqrqwrqw'  # Racoon Stealer\n            - 'qwrqrwrqwrqwr'  # Racoon Stealer\n            - 'rc2.0/client'  # Racoon Stealer\n            - 'TakeMyPainBack'  # Racoon Stealer\n            - 'xxx' # Racoon Stealer\n            - '20112211' # Racoon Stealer\n            - '23591' # Racoon Stealer\n            - '901785252112' # Racoon Stealer\n            - '1235125521512' # Racoon Stealer\n            - '125122112551' # Racoon Stealer\n            - 'B1D3N_RIM_MY_ASS' # Racoon Stealer\n            - 'AYAYAYAY1337' # Racoon Stealer\n            - 'iMightJustPayMySelfForAFeature' # Racoon Stealer\n            - 'ForAFeature' # Racoon Stealer\n            - 'Ares_ldr_v_*' # AresLoader\n            # - 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:106.0) Gecko/20100101 Firefox/106' # seen used by AresLoader\n            - 'Microsoft Internet Explorer' # https://github.com/silence-is-best/c2db\n            - 'CLCTR' # https://github.com/silence-is-best/c2db\n            - 'uploader' # https://github.com/silence-is-best/c2db\n            - 'agent' # https://github.com/silence-is-best/c2db\n            - 'License' # https://github.com/silence-is-best/c2db\n            - 'vb wininet' # https://github.com/silence-is-best/c2db\n            - 'Client' # https://github.com/silence-is-best/c2db\n            - 'Lilith-Bot/3.0' # Lilith Stealer - https://twitter.com/suyog41/status/1558051450797690880\n            - 'svc/1.0' # SVC Loader - https://twitter.com/suyog41/status/1558051450797690880\n            - 'WSHRAT' # WSHRAT - https://twitter.com/suyog41/status/1558051450797690880\n            - 'ZeroStresser Botnet/1.5' # Zerobot - https://twitter.com/suyog41/status/1558051450797690880\n            - 'OK' #Nymaim - https://twitter.com/suyog41/status/1558051450797690880\n            - 'Project1sqlite' # DarkCloud - https://twitter.com/suyog41/status/1558051450797690880\n            - 'Project1' # DarkCloud - https://twitter.com/suyog41/status/1558051450797690880\n    condition: selection\nfields:\n    - ClientIP\n    - c-uri\n    - c-useragent\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "suspicious user agent strings used by malware in proxy logs",
      "answer": "In order to detect suspicious user agent strings used by malware in proxy logs, you should: monitor proxy log sources for specific user agent strings that are commonly associated with various types of remote access tools (RATs), malware, and other potentially harmful software. These user agent strings include, but are not limited to, particular versions and formats masquerading as legitimate browsers, such as Internet Explorer, Mozilla Firefox, Chrome, and Safari, each of which might be an indicator of malicious activity. Certain strings are explicitly linked to known malware families like DragonOK, PlugX, HTTPBrowser RAT, and others including Emotet and Lockbit strains, as well as tools used for web shell interactions and other cyber threat activities. When these user agent strings are identified within the proxy logs, it indicates a high possibility of compromise or malicious attempt to communicate, signaling for further investigation. Detection involves capturing logs that contain these agent strings, alongside the requested URI and client IP address which can be critical for understanding the scope of a potential security breach or ongoing attack. Despite the specificity of the selection criteria, it's essential to remain aware of the small chance of false positives, where benign activities might inadvertently match the detection patterns."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: process_creation\n    product: linux\ndetection:\n    selection:\n        Image|contains: 'xterm'\n        CommandLine|contains: '-display'\n        CommandLine|endswith: ':1'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect usage of \"xterm\" as a potential reverse shell tunnel\n\nHere is how  the given sigma rule operates: In order to detect usage of \"xterm\" as a potential reverse shell tunnel, you should: Monitor process creation logs on Linux systems for instances where the process image name contains 'xterm', and the command line arguments include '-display' and end with ':1'. This activity could indicate an attempt to establish a reverse shell tunnel using the 'xterm' application, which is a scenario associated with potential malicious activity. It's important to note that the confidence level of this detection is medium, meaning that while it's a significant indicator of the outlined attack, there could be benign instances that match these criteria, although no specific known benign use cases are identified.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: linux\ndetection:\n    selection:\n        Image|contains: 'xterm'\n        CommandLine|contains: '-display'\n        CommandLine|endswith: ':1'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "usage of \"xterm\" as a potential reverse shell tunnel",
      "answer": "In order to detect usage of \"xterm\" as a potential reverse shell tunnel, you should: Monitor process creation logs on Linux systems for instances where the process image name contains 'xterm', and the command line arguments include '-display' and end with ':1'. This activity could indicate an attempt to establish a reverse shell tunnel using the 'xterm' application, which is a scenario associated with potential malicious activity. It's important to note that the confidence level of this detection is medium, meaning that while it's a significant indicator of the outlined attack, there could be benign instances that match these criteria, although no specific known benign use cases are identified."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting A General detection for WebDav user-agent being used to PUT files on a WebDav network share. This could be an indicator of exfiltration..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a scenario where a WebDav user-agent is being used to PUT files on a WebDav network share, which could indicate data exfiltration, you should observe network traffic logs generated by Zeek that are specifically related to HTTP protocols. Look for instances where the User-Agent string contains 'WebDAV' in combination with the HTTP method 'PUT,' indicating an attempt to upload or modify files on a server.\n\nHowever, to reduce false alarms and avoid detecting benign activity within your organizational network, you should exclude any activity that originates from IP addresses within the private address space, namely 192.168.0.0/16, 172.16.0.0/12, and 10.0.0.0/8. This ensures that only potentially malicious external activities are considered.\n\nKeep in mind that while this detection strategy is important for spotting potential data exfiltration attempts using WebDav, there is a possibility of encountering activities that might not be malicious (unknown false positives). Therefore, the confidence level for alerts generated based on these criteria is rated low, suggesting that further investigation is necessary to confirm malicious intent.\n\nThe underlying motive for this detection strategy aligns with identifying tactics and techniques such as 'Exfiltration Over Alternative Protocol' which might be employed by attackers to move data out of the network surreptitiously.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: zeek\n    service: http\ndetection:\n    selection:\n        user_agent|contains: 'WebDAV'\n        method: 'PUT'\n    filter:\n        id.resp_h:\n            - 192.168.0.0/16\n            - 172.16.0.0/12\n            - 10.0.0.0/8\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: zeek\n    service: http\ndetection:\n    selection:\n        user_agent|contains: 'WebDAV'\n        method: 'PUT'\n    filter:\n        id.resp_h:\n            - 192.168.0.0/16\n            - 172.16.0.0/12\n            - 10.0.0.0/8\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: low\n",
      "question": "A General detection for WebDav user-agent being used to PUT files on a WebDav network share. This could be an indicator of exfiltration.",
      "answer": "In order to detect a scenario where a WebDav user-agent is being used to PUT files on a WebDav network share, which could indicate data exfiltration, you should observe network traffic logs generated by Zeek that are specifically related to HTTP protocols. Look for instances where the User-Agent string contains 'WebDAV' in combination with the HTTP method 'PUT,' indicating an attempt to upload or modify files on a server.\n\nHowever, to reduce false alarms and avoid detecting benign activity within your organizational network, you should exclude any activity that originates from IP addresses within the private address space, namely 192.168.0.0/16, 172.16.0.0/12, and 10.0.0.0/8. This ensures that only potentially malicious external activities are considered.\n\nKeep in mind that while this detection strategy is important for spotting potential data exfiltration attempts using WebDav, there is a possibility of encountering activities that might not be malicious (unknown false positives). Therefore, the confidence level for alerts generated based on these criteria is rated low, suggesting that further investigation is necessary to confirm malicious intent.\n\nThe underlying motive for this detection strategy aligns with identifying tactics and techniques such as 'Exfiltration Over Alternative Protocol' which might be employed by attackers to move data out of the network surreptitiously."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting usage of \"MSOHTMED\" to download arbitrary files.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect usage of \"MSOHTMED\" to download arbitrary files, you should: Monitor for the process creation events on Windows systems that indicate the execution of MSOHTMED.exe (also noted by its original file name 'MsoHtmEd.exe'). Pay special attention to instances where the command line includes URLs starting with 'http://', 'https://', or 'ftp://', as this suggests an attempt to download files from the internet. Such activities should be flagged when both the specific process created and the characteristic command line patterns are observed simultaneously. Be aware that there might be occurrences where these signals do not imply malicious activity, but these cases are currently undetermined. The risk level associated with this detection is considered medium. This method aligns with strategies to identify and mitigate malicious file download attempts and unauthorized access to resources over the internet.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\MSOHTMED.exe'\n        - OriginalFileName: 'MsoHtmEd.exe'\n    selection_cli:\n        CommandLine|contains:\n            - 'http://'\n            - 'https://'\n            - 'ftp://'\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\MSOHTMED.exe'\n        - OriginalFileName: 'MsoHtmEd.exe'\n    selection_cli:\n        CommandLine|contains:\n            - 'http://'\n            - 'https://'\n            - 'ftp://'\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "usage of \"MSOHTMED\" to download arbitrary files",
      "answer": "In order to detect usage of \"MSOHTMED\" to download arbitrary files, you should: Monitor for the process creation events on Windows systems that indicate the execution of MSOHTMED.exe (also noted by its original file name 'MsoHtmEd.exe'). Pay special attention to instances where the command line includes URLs starting with 'http://', 'https://', or 'ftp://', as this suggests an attempt to download files from the internet. Such activities should be flagged when both the specific process created and the characteristic command line patterns are observed simultaneously. Be aware that there might be occurrences where these signals do not imply malicious activity, but these cases are currently undetermined. The risk level associated with this detection is considered medium. This method aligns with strategies to identify and mitigate malicious file download attempts and unauthorized access to resources over the internet."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of renamed paexec via imphash and executable product string.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution of renamed paexec via imphash and executable product string, you should monitor Windows process creation events for specific indicators that signal an execution attempt of the PAExec tool under a different name. The detection criteria focus on identifying executions based on the product name containing 'PAExec', or by matching the unique imphash values associated with this utility.\n\nFour specific imphash values are critical for this detection:\n- 11D40A7B7876288F919AB819CC2D9802\n- 6444f8a34e99b8f7d9647de66aabe516\n- dfd6aa3f7b2b1035b76b718f1ddc689f\n- 1a6cca4d5460b1710a12dea39e4a592c\n\nAdditionally, any process creation events where hashes match any of the listed IMPhash values, indicating the execution of a file with the same characteristics as PAExec, should be considered potentially malicious.\n\nTo reduce false positives and ensure accuracy, any process creation event where the image name contains 'paexec' should be excluded from alerts, under the assumption that legitimate instances of PAExec use the original name, and thus, are not indicative of the specific attack tactic being monitored for.\n\nThis approach is designed to flag potentially malicious activity associated with the execution of utilities similar to PAExec that may be used in various stages of an attack, including lateral movement and system control, without relying solely on file names, which can easily be altered by attackers. It's essential to consider that due to the potential for unknown false positives, thorough investigation and correlation with other suspicious activities within the environment are recommended upon detection.\n\nMonitoring for these criteria aligns with recognizing tactics and techniques such as Execution and Command and Control, which are consistent with the behavior of attackers attempting to use administrative tools for malicious purposes within an environment.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Product|contains: 'PAExec'\n        - Imphash:\n            - 11D40A7B7876288F919AB819CC2D9802\n            - 6444f8a34e99b8f7d9647de66aabe516\n            - dfd6aa3f7b2b1035b76b718f1ddc689f\n            - 1a6cca4d5460b1710a12dea39e4a592c\n        - Hashes|contains:\n            - IMPHASH=11D40A7B7876288F919AB819CC2D9802\n            - IMPHASH=6444f8a34e99b8f7d9647de66aabe516\n            - IMPHASH=dfd6aa3f7b2b1035b76b718f1ddc689f\n            - IMPHASH=1a6cca4d5460b1710a12dea39e4a592c\n    filter:\n        Image|contains: 'paexec'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Product|contains: 'PAExec'\n        - Imphash:\n            - 11D40A7B7876288F919AB819CC2D9802\n            - 6444f8a34e99b8f7d9647de66aabe516\n            - dfd6aa3f7b2b1035b76b718f1ddc689f\n            - 1a6cca4d5460b1710a12dea39e4a592c\n        - Hashes|contains:\n            - IMPHASH=11D40A7B7876288F919AB819CC2D9802\n            - IMPHASH=6444f8a34e99b8f7d9647de66aabe516\n            - IMPHASH=dfd6aa3f7b2b1035b76b718f1ddc689f\n            - IMPHASH=1a6cca4d5460b1710a12dea39e4a592c\n    filter:\n        Image|contains: 'paexec'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "execution of renamed paexec via imphash and executable product string",
      "answer": "In order to detect execution of renamed paexec via imphash and executable product string, you should monitor Windows process creation events for specific indicators that signal an execution attempt of the PAExec tool under a different name. The detection criteria focus on identifying executions based on the product name containing 'PAExec', or by matching the unique imphash values associated with this utility.\n\nFour specific imphash values are critical for this detection:\n- 11D40A7B7876288F919AB819CC2D9802\n- 6444f8a34e99b8f7d9647de66aabe516\n- dfd6aa3f7b2b1035b76b718f1ddc689f\n- 1a6cca4d5460b1710a12dea39e4a592c\n\nAdditionally, any process creation events where hashes match any of the listed IMPhash values, indicating the execution of a file with the same characteristics as PAExec, should be considered potentially malicious.\n\nTo reduce false positives and ensure accuracy, any process creation event where the image name contains 'paexec' should be excluded from alerts, under the assumption that legitimate instances of PAExec use the original name, and thus, are not indicative of the specific attack tactic being monitored for.\n\nThis approach is designed to flag potentially malicious activity associated with the execution of utilities similar to PAExec that may be used in various stages of an attack, including lateral movement and system control, without relying solely on file names, which can easily be altered by attackers. It's essential to consider that due to the potential for unknown false positives, thorough investigation and correlation with other suspicious activities within the environment are recommended upon detection.\n\nMonitoring for these criteria aligns with recognizing tactics and techniques such as Execution and Command and Control, which are consistent with the behavior of attackers attempting to use administrative tools for malicious purposes within an environment."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of the binary \"wpbbin\" which is used as part of the UEFI based persistence method described in the reference section.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution of the binary \"wpbbin\" which is used as part of the UEFI based persistence method described in the reference section, you should: Monitor the process creation logs in Windows systems for any instances where the process 'C:\\Windows\\System32\\wpbbin.exe' is initiated. This specific file execution is associated with sophisticated persistence mechanisms that leverage the Unified Extensible Firmware Interface (UEFI), making it a critical point of detection for potential security breaches. Given the nature of this detection, it's tagged with tactics and techniques commonly observed in system persistence efforts and may include manipulation of UEFI firmware. Be aware that there are scenarios where this file may be legitimately used, particularly by certain hardware manufacturers like Lenovo. Therefore, while this detection is set to a high level of alert, it's important to investigate the context of its execution to rule out false positives associated with valid usage.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        Image: 'C:\\Windows\\System32\\wpbbin.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate usage of the file by hardware manufacturer such as lenovo (Thanks @0gtweet for the tip)\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        Image: 'C:\\Windows\\System32\\wpbbin.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate usage of the file by hardware manufacturer such as lenovo (Thanks @0gtweet for the tip)\nlevel: high\n",
      "question": "execution of the binary \"wpbbin\" which is used as part of the UEFI based persistence method described in the reference section",
      "answer": "In order to detect execution of the binary \"wpbbin\" which is used as part of the UEFI based persistence method described in the reference section, you should: Monitor the process creation logs in Windows systems for any instances where the process 'C:\\Windows\\System32\\wpbbin.exe' is initiated. This specific file execution is associated with sophisticated persistence mechanisms that leverage the Unified Extensible Firmware Interface (UEFI), making it a critical point of detection for potential security breaches. Given the nature of this detection, it's tagged with tactics and techniques commonly observed in system persistence efforts and may include manipulation of UEFI firmware. Be aware that there are scenarios where this file may be legitimately used, particularly by certain hardware manufacturers like Lenovo. Therefore, while this detection is set to a high level of alert, it's important to investigate the context of its execution to rule out false positives associated with valid usage."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    product: windows\n    service: windefend\ndetection:\n    selection:\n        EventID: 1116 # The antimalware platform detected malware or other potentially unwanted software.\n        SourceName: 'AMSI'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect triggering of AMSI by Windows Defender.\n\nHere is how  the given sigma rule operates: In order to detect triggering of AMSI by Windows Defender, you should: Monitor Windows Defender logs specifically for event ID 1116, which indicates that the antimalware platform detected malware or other potentially unwanted software. Focus particularly on alerts generated by the Antimalware Scan Interface (AMSI). This method is highly reliable with unlikely chances of false positives. The associated tactics and techniques involved in this monitoring are related to Initial Access and Execution, as the detection of AMSI triggering by Windows Defender could indicate attempts to execute malicious scripts or malware on the system.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: windefend\ndetection:\n    selection:\n        EventID: 1116 # The antimalware platform detected malware or other potentially unwanted software.\n        SourceName: 'AMSI'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "triggering of AMSI by Windows Defender.",
      "answer": "In order to detect triggering of AMSI by Windows Defender, you should: Monitor Windows Defender logs specifically for event ID 1116, which indicates that the antimalware platform detected malware or other potentially unwanted software. Focus particularly on alerts generated by the Antimalware Scan Interface (AMSI). This method is highly reliable with unlikely chances of false positives. The associated tactics and techniques involved in this monitoring are related to Initial Access and Execution, as the detection of AMSI triggering by Windows Defender could indicate attempts to execute malicious scripts or malware on the system."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: file_event\n    product: windows\ndetection:\n    selection:\n        TargetFilename|startswith: 'C:\\Windows\\WinSxS\\'\n        TargetFilename|endswith: '.exe'\n    filter_main_system_location:\n        Image|startswith:\n            - 'C:\\Windows\\Systems32\\'\n            - 'C:\\Windows\\SysWOW64\\'\n            - 'C:\\Windows\\WinSxS\\'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unknown\nlevel: medium\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect creation of binaries in the WinSxS folder by non-system processes\n\nHere is how  the given sigma rule operates: In order to detect the creation of binaries in the WinSxS folder by non-system processes, you should: Monitor file events on Windows systems specifically for the creation of executable files (.exe) within the C:\\Windows\\WinSxS\\ directory. It is important to exclude executable files that are being created by main system processes, usually located in C:\\Windows\\System32\\, C:\\Windows\\SysWOW64\\, or C:\\Windows\\WinSxS\\ directories themselves. This means only alerting on executable file creations in the WinSxS folder that are not originating from these trusted system locations. Notably, while this rule aims to identify malicious activity, it's acknowledged that there could be unknown legitimate cases, marking the detection confidence at a medium level.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: file_event\n    product: windows\ndetection:\n    selection:\n        TargetFilename|startswith: 'C:\\Windows\\WinSxS\\'\n        TargetFilename|endswith: '.exe'\n    filter_main_system_location:\n        Image|startswith:\n            - 'C:\\Windows\\Systems32\\'\n            - 'C:\\Windows\\SysWOW64\\'\n            - 'C:\\Windows\\WinSxS\\'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "creation of binaries in the WinSxS folder by non-system processes",
      "answer": "In order to detect the creation of binaries in the WinSxS folder by non-system processes, you should: Monitor file events on Windows systems specifically for the creation of executable files (.exe) within the C:\\Windows\\WinSxS\\ directory. It is important to exclude executable files that are being created by main system processes, usually located in C:\\Windows\\System32\\, C:\\Windows\\SysWOW64\\, or C:\\Windows\\WinSxS\\ directories themselves. This means only alerting on executable file creations in the WinSxS folder that are not originating from these trusted system locations. Notably, while this rule aims to identify malicious activity, it's acknowledged that there could be unknown legitimate cases, marking the detection confidence at a medium level."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: webserver\ndetection:\n    selection:\n        cs-uri-query|contains: '/owa/calendar/a'\n        cs-method: 'POST'\n    filter:\n        sc-status: 503\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: critical\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect successful exploitation of Exchange vulnerability as reported in CVE-2021-28480\n\nHere is how  the given sigma rule operates: In order to detect successful exploitation of Exchange vulnerability as reported in CVE-2021-28480, you should: Monitor web server logs for POST requests that contain '/owa/calendar/a' in the URI query. It is crucial to filter out any logs where the server response status code is 503, as these do not indicate a successful exploitation attempt. This monitoring process targets the identification of potential attack attempts exploiting the specific Exchange vulnerability. By focusing on these specific log characteristics, it becomes possible to detect and respond to potential exploitation attempts, thus mitigating the associated risks. This is deemed critical due to the potential impact of the vulnerability being exploited.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: webserver\ndetection:\n    selection:\n        cs-uri-query|contains: '/owa/calendar/a'\n        cs-method: 'POST'\n    filter:\n        sc-status: 503\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: critical\n",
      "question": "successful exploitation of Exchange vulnerability as reported in CVE-2021-28480",
      "answer": "In order to detect successful exploitation of Exchange vulnerability as reported in CVE-2021-28480, you should: Monitor web server logs for POST requests that contain '/owa/calendar/a' in the URI query. It is crucial to filter out any logs where the server response status code is 503, as these do not indicate a successful exploitation attempt. This monitoring process targets the identification of potential attack attempts exploiting the specific Exchange vulnerability. By focusing on these specific log characteristics, it becomes possible to detect and respond to potential exploitation attempts, thus mitigating the associated risks. This is deemed critical due to the potential impact of the vulnerability being exploited."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of php using the \"-r\" flag. This is could be used as a way to launch a reverse shell or execute live php code..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution of php using the \"-r\" flag, which could be used as a way to launch a reverse shell or execute live php code, you should: focus on monitoring process creation logs within Windows systems. Look specifically for any processes that end with '\\php.exe' or have an original filename of 'php.exe'. Additionally, scrutinize the command line arguments to identify instances where the '-r' flag is used, as this indicates the potential execution of PHP code directly from the command line, a technique commonly utilized in malicious activities. Keep in mind that while this detection mechanism is crucial for uncovering potential threats, there may be unknown benign activities that could trigger false positives. The severity level associated with this detection is considered medium.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\php.exe'\n        - OriginalFileName: 'php.exe'\n    selection_cli:\n        CommandLine|contains: ' -r'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\php.exe'\n        - OriginalFileName: 'php.exe'\n    selection_cli:\n        CommandLine|contains: ' -r'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "execution of php using the \"-r\" flag. This is could be used as a way to launch a reverse shell or execute live php code.",
      "answer": "In order to detect execution of php using the \"-r\" flag, which could be used as a way to launch a reverse shell or execute live php code, you should: focus on monitoring process creation logs within Windows systems. Look specifically for any processes that end with '\\php.exe' or have an original filename of 'php.exe'. Additionally, scrutinize the command line arguments to identify instances where the '-r' flag is used, as this indicates the potential execution of PHP code directly from the command line, a technique commonly utilized in malicious activities. Keep in mind that while this detection mechanism is crucial for uncovering potential threats, there may be unknown benign activities that could trigger false positives. The severity level associated with this detection is considered medium."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting a suspicious crash of the Microsoft Malware Protection Engine.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a suspicious crash of the Microsoft Malware Protection Engine, you should monitor application logs on Windows systems for events generated by the Windows Error Reporting service. Specifically, look for events with a Provider Name of 'Windows Error Reporting' and an EventID of 1001. Crucially, within the data field of these events, ensure that both 'MsMpEng.exe' and 'mpengine.dll' are mentioned. These artifacts are key components of the Microsoft Malware Protection Engine, and their presence in a crash report may indicate a potentially malicious interference or a severe error within the system's protective measures.\n\nHowever, it's significant to acknowledge that not all crashes involving these components are of a malicious origin. For instance, a crash could occur simply because the \"C:\\\" partition on the system is full, which would be a non-malicious, yet critical system issue to resolve. Given the high severity level of this monitoring strategy, it aims to highlight events that could compromise the integrity and reliability of Microsoft's Malware Protection mechanisms, thereby aiding in the swift identification and mitigation of potential threats to the system's security posture.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: application\n    # warning: The 'data' field used in the detection section is the container for the event data as a whole. You may have to adapt the rule for your backend accordingly\ndetection:\n    selection:\n        Provider_Name: 'Windows Error Reporting'\n        EventID: 1001\n        Data|contains|all:\n            - 'MsMpEng.exe'\n            - 'mpengine.dll'\n    condition: selection\nfalsepositives:\n    - MsMpEng might crash if the \"C:\\\" partition is full\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: application\n    # warning: The 'data' field used in the detection section is the container for the event data as a whole. You may have to adapt the rule for your backend accordingly\ndetection:\n    selection:\n        Provider_Name: 'Windows Error Reporting'\n        EventID: 1001\n        Data|contains|all:\n            - 'MsMpEng.exe'\n            - 'mpengine.dll'\n    condition: selection\nfalsepositives:\n    - MsMpEng might crash if the \"C:\\\" partition is full\nlevel: high\n",
      "question": "a suspicious crash of the Microsoft Malware Protection Engine",
      "answer": "In order to detect a suspicious crash of the Microsoft Malware Protection Engine, you should monitor application logs on Windows systems for events generated by the Windows Error Reporting service. Specifically, look for events with a Provider Name of 'Windows Error Reporting' and an EventID of 1001. Crucially, within the data field of these events, ensure that both 'MsMpEng.exe' and 'mpengine.dll' are mentioned. These artifacts are key components of the Microsoft Malware Protection Engine, and their presence in a crash report may indicate a potentially malicious interference or a severe error within the system's protective measures.\n\nHowever, it's significant to acknowledge that not all crashes involving these components are of a malicious origin. For instance, a crash could occur simply because the \"C:\\\" partition on the system is full, which would be a non-malicious, yet critical system issue to resolve. Given the high severity level of this monitoring strategy, it aims to highlight events that could compromise the integrity and reliability of Microsoft's Malware Protection mechanisms, thereby aiding in the swift identification and mitigation of potential threats to the system's security posture."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting javaw.exe in AppData folder as used by Adwind / JRAT.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect javaw.exe in AppData folder as used by Adwind / JRAT, you should monitor for registry set actions in Windows where the event type involves setting a value. Specifically, keep an eye on modifications targeting the 'HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run' registry path, a common location for configuring startup programs. Any instance where the target object begins with this path and the details of the modification point to an executable within the '%AppData%\\Roaming\\Oracle\\bin\\' directory should raise an alert. This behavior might indicate an attempt to ensure that malware, such as Adwind or JRAT which often masquerades as a legitimate Java process, persists across reboots by adding itself to the system\u2019s startup items. This kind of activity is considered suspicious and should be flagged for further investigation with a high level of concern due to its potential impact and the tactics, techniques, and procedures associated with persistent access and evasion.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|startswith: 'HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run'\n        Details|startswith: '%AppData%\\Roaming\\Oracle\\bin\\'\n    condition: selection\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|startswith: 'HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run'\n        Details|startswith: '%AppData%\\Roaming\\Oracle\\bin\\'\n    condition: selection\nlevel: high\n",
      "question": "javaw.exe in AppData folder as used by Adwind / JRAT",
      "answer": "In order to detect javaw.exe in AppData folder as used by Adwind / JRAT, you should monitor for registry set actions in Windows where the event type involves setting a value. Specifically, keep an eye on modifications targeting the 'HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run' registry path, a common location for configuring startup programs. Any instance where the target object begins with this path and the details of the modification point to an executable within the '%AppData%\\Roaming\\Oracle\\bin\\' directory should raise an alert. This behavior might indicate an attempt to ensure that malware, such as Adwind or JRAT which often masquerades as a legitimate Java process, persists across reboots by adding itself to the system\u2019s startup items. This kind of activity is considered suspicious and should be flagged for further investigation with a high level of concern due to its potential impact and the tactics, techniques, and procedures associated with persistent access and evasion."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    product: azure\n    service: signinlogs\ndetection:\n    selection_50074:\n        ResultType: 50074\n        ResultDescription|contains: 'Strong Auth required'\n    selection_500121:\n        ResultType: 500121\n        ResultDescription|contains: 'Authentication failed during strong authentication request'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect Identifies user login with multifactor authentication failures, which might be an indication an attacker has the password for the account but can't pass the MFA challenge.\n\nHere is how  the given sigma rule operates: In order to identify user login with multifactor authentication failures, which might be an indication an attacker has the password for the account but can't pass the MFA challenge, you should: monitor Azure signin logs for events that suggest failed attempts at passing multifactor authentication (MFA) challenges. Specifically, pay attention to logs that report with a ResultType of 50074, indicating a requirement for strong authentication, or ResultType of 500121, signaling that an authentication attempt has failed during a strong authentication request. These findings are pertinent as they might highlight instances where an unauthorized user has obtained the password to an account but is unable to bypass the additional security layer provided by MFA. It's important to investigate such events to prevent potential breaches. Keep in mind that some detected events may not necessarily indicate malicious activity (as some false positives are unknown), so thorough examination is advised. This monitoring process is guided by medium-level urgency, underscoring the significant risk that unsuccessful MFA attempts can pose.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: azure\n    service: signinlogs\ndetection:\n    selection_50074:\n        ResultType: 50074\n        ResultDescription|contains: 'Strong Auth required'\n    selection_500121:\n        ResultType: 500121\n        ResultDescription|contains: 'Authentication failed during strong authentication request'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Identifies user login with multifactor authentication failures, which might be an indication an attacker has the password for the account but can't pass the MFA challenge.",
      "answer": "In order to identify user login with multifactor authentication failures, which might be an indication an attacker has the password for the account but can't pass the MFA challenge, you should: monitor Azure signin logs for events that suggest failed attempts at passing multifactor authentication (MFA) challenges. Specifically, pay attention to logs that report with a ResultType of 50074, indicating a requirement for strong authentication, or ResultType of 500121, signaling that an authentication attempt has failed during a strong authentication request. These findings are pertinent as they might highlight instances where an unauthorized user has obtained the password to an account but is unable to bypass the additional security layer provided by MFA. It's important to investigate such events to prevent potential breaches. Keep in mind that some detected events may not necessarily indicate malicious activity (as some false positives are unknown), so thorough examination is advised. This monitoring process is guided by medium-level urgency, underscoring the significant risk that unsuccessful MFA attempts can pose."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: image_load\n    product: windows\ndetection:\n    selection_path:\n        Image|contains: '\\AppData\\Local\\Apps\\2.0\\'\n    selection_sig_status:\n        - Signed: 'false'\n        - SignatureStatus: 'Expired'\n    condition: all of selection_*\nfalsepositives:\n    - Unlikely\nlevel: medium\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect unsigned module load by ClickOnce application.\n\nHere is how  the given sigma rule operates: In order to detect unsigned module load by ClickOnce application, you should observe the process of image loading within Windows operating environments. Focus on instances where images are loaded from a path that includes '\\AppData\\Local\\Apps\\2.0\\'. Among these instances, attention should be further narrowed down to those where the loaded modules are either not digitally signed or have an expired signature. This is identified through checking the 'Signed' attribute for a value of 'false' and the 'SignatureStatus' for a value indicating that the signature has 'Expired'. Monitoring for these specific conditions across the specified paths allows for the detection of potentially malicious activity associated with the loading of unsigned or expired modules by ClickOnce applications. Given the targeted nature of this surveillance, instances triggering these conditions are considered to bear a medium threat level with unlikely chances of false positives. This strategy aligns with mitigation and detection techniques relevant to the MITRE ATT&CK framework, specifically addressing tactics and techniques related to the execution of unauthorized or compromised software components.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: image_load\n    product: windows\ndetection:\n    selection_path:\n        Image|contains: '\\AppData\\Local\\Apps\\2.0\\'\n    selection_sig_status:\n        - Signed: 'false'\n        - SignatureStatus: 'Expired'\n    condition: all of selection_*\nfalsepositives:\n    - Unlikely\nlevel: medium\n",
      "question": "unsigned module load by ClickOnce application.",
      "answer": "In order to detect unsigned module load by ClickOnce application, you should observe the process of image loading within Windows operating environments. Focus on instances where images are loaded from a path that includes '\\AppData\\Local\\Apps\\2.0\\'. Among these instances, attention should be further narrowed down to those where the loaded modules are either not digitally signed or have an expired signature. This is identified through checking the 'Signed' attribute for a value of 'false' and the 'SignatureStatus' for a value indicating that the signature has 'Expired'. Monitoring for these specific conditions across the specified paths allows for the detection of potentially malicious activity associated with the loading of unsigned or expired modules by ClickOnce applications. Given the targeted nature of this surveillance, instances triggering these conditions are considered to bear a medium threat level with unlikely chances of false positives. This strategy aligns with mitigation and detection techniques relevant to the MITRE ATT&CK framework, specifically addressing tactics and techniques related to the execution of unauthorized or compromised software components."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of netcat with the \"-e\" flag followed by common shells. This could be a sign of a potential reverse shell setup..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution of netcat with the \"-e\" flag followed by common shells, which could be a sign of a potential reverse shell setup, you should: Monitor the creation of processes on Linux systems for the execution of the `nc` or `ncat` commands, particularly looking for instances where their command lines contain the `-c` or `-e` flags. These flags are notable for their use in setting up reverse shells, where `-e` specifies a program to execute after connection, essentially granting shell access to the remote party. Additionally, watch for command lines that include the invocation of common shell programs like `ash`, `bash`, `sh`, and others, including their paths (such as `/bin/bash`). This comprehensive approach helps identify suspicious activity where netcat is potentially used to establish a reverse shell, providing unauthorized access to the system shell. This activity is associated with tactics like Execution and Persistence, indicating a high level of threat when such patterns are detected.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: linux\ndetection:\n    selection_nc:\n        Image|endswith:\n           - '/nc'\n           - '/ncat'\n    selection_flags:\n        CommandLine|contains:\n            - ' -c '\n            - ' -e '\n    selection_shell:\n        CommandLine|contains:\n            - ' ash'\n            - ' bash'\n            - ' bsh'\n            - ' csh'\n            - ' ksh'\n            - ' pdksh'\n            - ' sh'\n            - ' tcsh'\n            - '/bin/ash'\n            - '/bin/bash'\n            - '/bin/bsh'\n            - '/bin/csh'\n            - '/bin/ksh'\n            - '/bin/pdksh'\n            - '/bin/sh'\n            - '/bin/tcsh'\n            - '/bin/zsh'\n            - '$IFSash'\n            - '$IFSbash'\n            - '$IFSbsh'\n            - '$IFScsh'\n            - '$IFSksh'\n            - '$IFSpdksh'\n            - '$IFSsh'\n            - '$IFStcsh'\n            - '$IFSzsh'\n    condition: all of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: linux\ndetection:\n    selection_nc:\n        Image|endswith:\n           - '/nc'\n           - '/ncat'\n    selection_flags:\n        CommandLine|contains:\n            - ' -c '\n            - ' -e '\n    selection_shell:\n        CommandLine|contains:\n            - ' ash'\n            - ' bash'\n            - ' bsh'\n            - ' csh'\n            - ' ksh'\n            - ' pdksh'\n            - ' sh'\n            - ' tcsh'\n            - '/bin/ash'\n            - '/bin/bash'\n            - '/bin/bsh'\n            - '/bin/csh'\n            - '/bin/ksh'\n            - '/bin/pdksh'\n            - '/bin/sh'\n            - '/bin/tcsh'\n            - '/bin/zsh'\n            - '$IFSash'\n            - '$IFSbash'\n            - '$IFSbsh'\n            - '$IFScsh'\n            - '$IFSksh'\n            - '$IFSpdksh'\n            - '$IFSsh'\n            - '$IFStcsh'\n            - '$IFSzsh'\n    condition: all of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "execution of netcat with the \"-e\" flag followed by common shells. This could be a sign of a potential reverse shell setup.",
      "answer": "In order to detect execution of netcat with the \"-e\" flag followed by common shells, which could be a sign of a potential reverse shell setup, you should: Monitor the creation of processes on Linux systems for the execution of the `nc` or `ncat` commands, particularly looking for instances where their command lines contain the `-c` or `-e` flags. These flags are notable for their use in setting up reverse shells, where `-e` specifies a program to execute after connection, essentially granting shell access to the remote party. Additionally, watch for command lines that include the invocation of common shell programs like `ash`, `bash`, `sh`, and others, including their paths (such as `/bin/bash`). This comprehensive approach helps identify suspicious activity where netcat is potentially used to establish a reverse shell, providing unauthorized access to the system shell. This activity is associated with tactics like Execution and Persistence, indicating a high level of threat when such patterns are detected."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of the LocalPotato POC based on basic PE metadata information and default CLI examples.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the execution of the LocalPotato Proof of Concept (POC) based on basic Portable Executable (PE) metadata information and default Command Line Interface (CLI) examples, you should monitor for the creation of processes on Windows systems where the executable involved ends with '\\LocalPotato.exe'. Additionally, detect if the command line used for executing the process contains specific parameters, including both '.exe -i C:\\' and '-o Windows\\' in any order. The detection should also encompass checking for known malicious hashes, specifically IMPHASH values of 'E1742EE971D6549E8D4D81115F88F1FC' and 'DD82066EFBA94D7556EF582F247C8BB5', which could be present either directly within the process hash properties or as an Import Hash (Imphash) metadata attribute. Given the specificity of these indicators and the context in which this detection operates, it is considered unlikely to generate false positives and is treated with a high level of severity.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        Image|endswith: '\\LocalPotato.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - '.exe -i C:\\'\n            - '-o Windows\\'\n    selection_hash_plain:\n        Hashes|contains:\n            - 'IMPHASH=E1742EE971D6549E8D4D81115F88F1FC'\n            - 'IMPHASH=DD82066EFBA94D7556EF582F247C8BB5'\n    selection_hash_ext:\n        Imphash:\n            - 'E1742EE971D6549E8D4D81115F88F1FC'\n            - 'DD82066EFBA94D7556EF582F247C8BB5'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        Image|endswith: '\\LocalPotato.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - '.exe -i C:\\'\n            - '-o Windows\\'\n    selection_hash_plain:\n        Hashes|contains:\n            - 'IMPHASH=E1742EE971D6549E8D4D81115F88F1FC'\n            - 'IMPHASH=DD82066EFBA94D7556EF582F247C8BB5'\n    selection_hash_ext:\n        Imphash:\n            - 'E1742EE971D6549E8D4D81115F88F1FC'\n            - 'DD82066EFBA94D7556EF582F247C8BB5'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "execution of the LocalPotato POC based on basic PE metadata information and default CLI examples",
      "answer": "In order to detect the execution of the LocalPotato Proof of Concept (POC) based on basic Portable Executable (PE) metadata information and default Command Line Interface (CLI) examples, you should monitor for the creation of processes on Windows systems where the executable involved ends with '\\LocalPotato.exe'. Additionally, detect if the command line used for executing the process contains specific parameters, including both '.exe -i C:\\' and '-o Windows\\' in any order. The detection should also encompass checking for known malicious hashes, specifically IMPHASH values of 'E1742EE971D6549E8D4D81115F88F1FC' and 'DD82066EFBA94D7556EF582F247C8BB5', which could be present either directly within the process hash properties or as an Import Hash (Imphash) metadata attribute. Given the specificity of these indicators and the context in which this detection operates, it is considered unlikely to generate false positives and is treated with a high level of severity."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith:\n            - '\\rutserv.exe'\n            - '\\rfusclient.exe'\n        - Product: 'Remote Utilities'\n    filter:\n        Image|startswith:\n            - 'C:\\Program Files\\Remote Utilities'\n            - 'C:\\Program Files (x86)\\Remote Utilities'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: medium\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect execution of Remote Utilities RAT (RURAT) from an unusual location (outside of 'C:\\Program Files')\n\nHere is how  the given sigma rule operates: In order to detect execution of Remote Utilities RAT (RURAT) from an unusual location (outside of 'C:\\Program Files'), you should focus on monitoring process creation events on Windows systems. Look for processes that are initiated from executable files named 'rutserv.exe' or 'rfusclient.exe', which are associated with the Remote Utilities software. Additionally, check if the 'Product' attribute in the event logs matches 'Remote Utilities'. It's crucial to differentiate between legitimate and suspicious activities by excluding events where these processes start from the standard installation paths, namely 'C:\\Program Files\\Remote Utilities' and 'C:\\Program Files (x86)\\Remote Utilities'. By applying this monitoring strategy, any process creation event that matches these criteria but does not originate from the expected directories should be considered as a potential indicator of a Remote Utilities RAT being executed from an unusual location, which might suggest a malicious usage. This detection is categorized with a medium level of confidence due to the possibility of unknown false positives, indicating that while the criteria are specific, there may be legitimate scenarios that could inadvertently meet these conditions. This approach is designed to combat tactics and techniques like execution of malware and use of remote access tools by unauthorized entities.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith:\n            - '\\rutserv.exe'\n            - '\\rfusclient.exe'\n        - Product: 'Remote Utilities'\n    filter:\n        Image|startswith:\n            - 'C:\\Program Files\\Remote Utilities'\n            - 'C:\\Program Files (x86)\\Remote Utilities'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "execution of Remote Utilities RAT (RURAT) from an unusual location (outside of 'C:\\Program Files')",
      "answer": "In order to detect execution of Remote Utilities RAT (RURAT) from an unusual location (outside of 'C:\\Program Files'), you should focus on monitoring process creation events on Windows systems. Look for processes that are initiated from executable files named 'rutserv.exe' or 'rfusclient.exe', which are associated with the Remote Utilities software. Additionally, check if the 'Product' attribute in the event logs matches 'Remote Utilities'. It's crucial to differentiate between legitimate and suspicious activities by excluding events where these processes start from the standard installation paths, namely 'C:\\Program Files\\Remote Utilities' and 'C:\\Program Files (x86)\\Remote Utilities'. By applying this monitoring strategy, any process creation event that matches these criteria but does not originate from the expected directories should be considered as a potential indicator of a Remote Utilities RAT being executed from an unusual location, which might suggest a malicious usage. This detection is categorized with a medium level of confidence due to the possibility of unknown false positives, indicating that while the criteria are specific, there may be legitimate scenarios that could inadvertently meet these conditions. This approach is designed to combat tactics and techniques like execution of malware and use of remote access tools by unauthorized entities."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|contains: 'Software\\Microsoft\\Windows\\CurrentVersion'\n        Details|contains:\n            - 'vbscript:'\n            - 'jscript:'\n            - 'mshtml,'\n            - 'RunHTMLApplication'\n            - 'Execute('\n            - 'CreateObject'\n            - 'window.close'\n    filter:\n        TargetObject|contains: 'Software\\Microsoft\\Windows\\CurrentVersion\\Run'\n    filter_dotnet:\n        Image|endswith: '\\msiexec.exe'\n        TargetObject|contains: '\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Installer\\UserData\\'\n        Details|contains:\n            - '\\Microsoft.NET\\Primary Interop Assemblies\\Microsoft.mshtml.dll'\n            - '<\\Microsoft.mshtml,fileVersion='\n            - '_mshtml_dll_'\n            - '<\\Microsoft.mshtml,culture='\n    condition: selection and not 1 of filter*\nfalsepositives:\n    - Unknown\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect VBScript content stored into registry keys as seen being used by UNC2452 group\n\nHere is how  the given sigma rule operates: In order to detect VBScript content stored into registry keys as seen being used by UNC2452 group, you should monitor the Windows registry for specific SetValue events within keys related to the 'Software\\Microsoft\\Windows\\CurrentVersion' path. Emphasis should be placed on identifying entries that contain VBScript-related content such as the use of 'vbscript:', 'jscript:', 'mshtml,', 'RunHTMLApplication', 'Execute(', 'CreateObject', or 'window.close'. However, it's crucial to exclude monitoring keys directly under 'Software\\Microsoft\\Windows\\CurrentVersion\\Run' to reduce false positives, as legitimate operations frequently occur in this path.\n\nAdditionally, a more refined filtering should be applied to exclude any instances where the modifications are associated with the '.NET installer' processes, specifically signaled by the image path ending in '\\msiexec.exe' and targeting registry keys under '\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Installer\\UserData\\'. These exclusions should also consider details containing references to '.NET Primary Interop Assemblies' or specific file versions and cultural settings of 'Microsoft.mshtml.dll', as these are generally indicative of regular .NET installation activities rather than malicious interventions.\n\nThe approach should be vigilant for the sophistication of attack techniques akin to those deployed by the UNC2452 group, focusing on registry key modifications that serve as a means to execute VBScript for malicious purposes. Despite potential unknown false positives, the priority remains high in detecting these registry-based scripts, given their utilization in advanced persistent threat activities. Through this concentrated monitoring of registry set events, coupled with strategic exclusions, one can effectively identify and mitigate unauthorized VBScript execution within Windows environments, a tactic aligned with behaviors observed in the UNC2452 group's operations.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|contains: 'Software\\Microsoft\\Windows\\CurrentVersion'\n        Details|contains:\n            - 'vbscript:'\n            - 'jscript:'\n            - 'mshtml,'\n            - 'RunHTMLApplication'\n            - 'Execute('\n            - 'CreateObject'\n            - 'window.close'\n    filter:\n        TargetObject|contains: 'Software\\Microsoft\\Windows\\CurrentVersion\\Run'\n    filter_dotnet:\n        Image|endswith: '\\msiexec.exe'\n        TargetObject|contains: '\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Installer\\UserData\\'\n        Details|contains:\n            - '\\Microsoft.NET\\Primary Interop Assemblies\\Microsoft.mshtml.dll'\n            - '<\\Microsoft.mshtml,fileVersion='\n            - '_mshtml_dll_'\n            - '<\\Microsoft.mshtml,culture='\n    condition: selection and not 1 of filter*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "VBScript content stored into registry keys as seen being used by UNC2452 group",
      "answer": "In order to detect VBScript content stored into registry keys as seen being used by UNC2452 group, you should monitor the Windows registry for specific SetValue events within keys related to the 'Software\\Microsoft\\Windows\\CurrentVersion' path. Emphasis should be placed on identifying entries that contain VBScript-related content such as the use of 'vbscript:', 'jscript:', 'mshtml,', 'RunHTMLApplication', 'Execute(', 'CreateObject', or 'window.close'. However, it's crucial to exclude monitoring keys directly under 'Software\\Microsoft\\Windows\\CurrentVersion\\Run' to reduce false positives, as legitimate operations frequently occur in this path.\n\nAdditionally, a more refined filtering should be applied to exclude any instances where the modifications are associated with the '.NET installer' processes, specifically signaled by the image path ending in '\\msiexec.exe' and targeting registry keys under '\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Installer\\UserData\\'. These exclusions should also consider details containing references to '.NET Primary Interop Assemblies' or specific file versions and cultural settings of 'Microsoft.mshtml.dll', as these are generally indicative of regular .NET installation activities rather than malicious interventions.\n\nThe approach should be vigilant for the sophistication of attack techniques akin to those deployed by the UNC2452 group, focusing on registry key modifications that serve as a means to execute VBScript for malicious purposes. Despite potential unknown false positives, the priority remains high in detecting these registry-based scripts, given their utilization in advanced persistent threat activities. Through this concentrated monitoring of registry set events, coupled with strategic exclusions, one can effectively identify and mitigate unauthorized VBScript execution within Windows environments, a tactic aligned with behaviors observed in the UNC2452 group's operations."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting transfer lock was removed from a Route 53 domain. It is recommended to refrain from performing this action unless intending to transfer the domain to a different registrar..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when a transfer lock was removed from a Route 53 domain, which is not advised unless there is an intention to transfer the domain to a different registrar, you should monitor AWS CloudTrail logs for any activity related to the disabling of a domain transfer lock. Specifically, look for events where the source is identified as route53.amazonaws.com with the event name DisableDomainTransferLock. It is crucial to consider that sometimes a domain transfer lock may be disabled legitimately by a system or network administrator. Therefore, verify if the user identity, user agent, and/or hostname that initiated the action is recognized and should have the authority to make such changes within your environment. Any activity conducted by unfamiliar users or systems should be scrutinized. If certain activities are known and expected, causing false alarms, they can be excluded to avoid unnecessary alerts. This approach is established with a low level of alarm due to the potential for legitimate administrative actions.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: aws\n    service: cloudtrail\ndetection:\n    selection:\n        eventSource: route53.amazonaws.com\n        eventName: DisableDomainTransferLock\n    condition: selection\nfalsepositives:\n    - A domain transfer lock may be disabled by a system or network administrator. Verify whether the user identity, user agent, and/or hostname should be making changes in your environment. Activity from unfamiliar users or hosts should be investigated. If known behavior is causing false positives, it can be exempted from the rule.\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: aws\n    service: cloudtrail\ndetection:\n    selection:\n        eventSource: route53.amazonaws.com\n        eventName: DisableDomainTransferLock\n    condition: selection\nfalsepositives:\n    - A domain transfer lock may be disabled by a system or network administrator. Verify whether the user identity, user agent, and/or hostname should be making changes in your environment. Activity from unfamiliar users or hosts should be investigated. If known behavior is causing false positives, it can be exempted from the rule.\nlevel: low\n",
      "question": "transfer lock was removed from a Route 53 domain. It is recommended to refrain from performing this action unless intending to transfer the domain to a different registrar.",
      "answer": "In order to detect when a transfer lock was removed from a Route 53 domain, which is not advised unless there is an intention to transfer the domain to a different registrar, you should monitor AWS CloudTrail logs for any activity related to the disabling of a domain transfer lock. Specifically, look for events where the source is identified as route53.amazonaws.com with the event name DisableDomainTransferLock. It is crucial to consider that sometimes a domain transfer lock may be disabled legitimately by a system or network administrator. Therefore, verify if the user identity, user agent, and/or hostname that initiated the action is recognized and should have the authority to make such changes within your environment. Any activity conducted by unfamiliar users or systems should be scrutinized. If certain activities are known and expected, causing false alarms, they can be excluded to avoid unnecessary alerts. This approach is established with a low level of alarm due to the potential for legitimate administrative actions."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    known_image_extension:\n        Image|endswith:\n            - '.exe'\n            - '.tmp' # sadly many installers use this extension\n            - '.scr'\n    filter_main_image: # Windows utilities without extension\n        Image:\n            - 'System'\n            - 'Registry'\n            - 'MemCompression'\n            - 'vmmem'\n    filter_main_msi_installers:\n        Image|startswith: 'C:\\Windows\\Installer\\MSI'\n    filter_main_driver_store:\n        Image|startswith: 'C:\\Windows\\System32\\DriverStore\\FileRepository\\'\n    filter_main_msi_rollbackfiles:\n        Image|startswith: 'C:\\Config.Msi\\'\n        Image|endswith:\n            - '.rbf'\n            - '.rbs'\n    filter_main_windows_helper:\n        ParentImage|startswith: C:\\Windows\\Temp\\\n        Image|startswith: 'C:\\Windows\\Temp\\Helper\\'\n    filter_main_com:\n        Image|startswith:\n            - 'C:\\Windows\\System32\\'\n            - 'C:\\Windows\\SysWOW64\\'\n        Image|endswith: '.com'\n    filter_main_deleted:\n        Image|startswith: 'C:\\$Extend\\$Deleted\\'\n    filter_optional_empty:\n        Image:\n            - '-'\n            - ''\n    filter_optional_null:\n        Image: null\n    filter_optional_avira:\n        ParentImage|startswith: 'C:\\ProgramData\\Avira\\'\n    filter_optional_nvidia:\n        Image|contains: 'NVIDIA\\NvBackend\\'\n        Image|endswith: '.dat'\n    filter_optional_winscp:\n        Image|endswith: '\\WinSCP.com'\n    filter_optional_vscode:\n        Image|contains|all:\n            - 'C:\\Users\\'\n            - '\\AppData\\'\n            - '.tmp'\n            - 'CodeSetup'\n    filter_optional_libreoffice:\n        Image|endswith: '\\program\\soffice.bin'\n    filter_optional_emc_networker:\n        Image:\n            - 'C:\\Program Files\\EMC NetWorker\\Management\\GST\\apache\\cgi-bin\\update_jnlp.cgi'\n            - 'C:\\Program Files (x86)\\EMC NetWorker\\Management\\GST\\apache\\cgi-bin\\update_jnlp.cgi'\n    filter_optional_winpakpro:\n        Image|startswith:\n            - 'C:\\Program Files (x86)\\WINPAKPRO\\'\n            - 'C:\\Program Files\\WINPAKPRO\\'\n        Image|endswith: '.ngn'\n    filter_optional_myq_server:\n        Image:\n            - 'C:\\Program Files (x86)\\MyQ\\Server\\pcltool.dll'\n            - 'C:\\Program Files\\MyQ\\Server\\pcltool.dll'\n    filter_optional_visualstudio:\n        Image|startswith:\n            - 'C:\\Program Files\\Microsoft Visual Studio\\'\n            - 'C:\\Program Files (x86)\\Microsoft Visual Studio'\n        Image|endswith: '.com'\n    filter_optional_wsl:\n        Image|contains|all:\n            - '\\AppData\\Local\\Packages\\'\n            - '\\LocalState\\rootfs\\'\n    filter_optional_lzma_exe:\n        Image|endswith: '\\LZMA_EXE'\n    filter_optional_dell_dock:\n        ParentImage|startswith: 'C:\\Windows\\Temp\\'\n        ParentImage|endswith: '\\TBT_Dock_Firmware\\GetDockVer32W.exe'\n    filter_optional_firefox_crashreporter:\n        Image|startswith: 'C:\\Program Files\\Mozilla Firefox\\tobedeleted\\'\n    filter_optional_office_c2r:\n        ParentImage: 'C:\\Windows\\UUS\\amd64\\MoUsoCoreWorker.exe'\n        Image|startswith: 'C:\\$Extend\\$Deleted\\'\n        CommandLine|contains|all:\n            - 'C:\\Program Files\\Common Files\\Microsoft Shared\\ClickToRun\\OfficeC2RClient.exe'\n            - '/update UPDATEORCHESTRATOR displaylevel=False'\n    filter_optional_docker:\n        ParentImage: 'C:\\Windows\\System32\\services.exe'\n        Image|endswith: 'com.docker.service'\n    condition: not known_image_extension and not 1 of filter_main_* and not 1 of filter_optional_*\nfalsepositives:\n    - Unknown\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect Checks whether the image specified in a process creation event doesn't refer to an .exe file (caused by process ghosting or other unorthodox methods to start a process)\n\nHere is how  the given sigma rule operates: In order to check whether the image specified in a process creation event doesn't refer to an .exe file (caused by process ghosting or other unorthodox methods to start a process), you should: Focus on monitoring process creation activities on Windows systems, specifically looking for processes that do not have '.exe', '.tmp', or '.scr' as their file extension as many legitimate processes, including installers, use these extensions. However, certain built-in Windows utilities and system processes that run without any extension, like 'System', 'Registry', 'MemCompression', and 'vmmem' should be ignored in this detection process. Likewise, processes starting from 'C:\\Windows\\Installer\\MSI', 'C:\\Windows\\System32\\DriverStore\\FileRepository\\', 'C:\\Config.Msi\\' with specific extensions, and any process initiating from 'C:\\Windows\\Temp\\' with a parent image from the same directory should not be flagged. Processes with images starting from directories typically associated with system operations or legitimate software like 'C:\\Windows\\System32\\', 'C:\\Windows\\SysWOW64\\' (especially with '.com' extensions), 'C:\\Program Files\\', and several others including specific paths for Avira, NVIDIA, WinSCP, Visual Studio, Docker, and more, are filtered out to avoid false positives. The aim is to identify suspicious processes that might indicate malware or unauthorized activities attempting to bypass traditional detection mechanisms by not using typical '.exe' processes, thereby highlighting potentially malicious behavior attributed to process ghosting and similar tactics. This approach ensures a high sensitivity towards detecting non-standard process executions while minimizing false alarms by excluding known good process paths and behaviors.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    known_image_extension:\n        Image|endswith:\n            - '.exe'\n            - '.tmp' # sadly many installers use this extension\n            - '.scr'\n    filter_main_image: # Windows utilities without extension\n        Image:\n            - 'System'\n            - 'Registry'\n            - 'MemCompression'\n            - 'vmmem'\n    filter_main_msi_installers:\n        Image|startswith: 'C:\\Windows\\Installer\\MSI'\n    filter_main_driver_store:\n        Image|startswith: 'C:\\Windows\\System32\\DriverStore\\FileRepository\\'\n    filter_main_msi_rollbackfiles:\n        Image|startswith: 'C:\\Config.Msi\\'\n        Image|endswith:\n            - '.rbf'\n            - '.rbs'\n    filter_main_windows_helper:\n        ParentImage|startswith: C:\\Windows\\Temp\\\n        Image|startswith: 'C:\\Windows\\Temp\\Helper\\'\n    filter_main_com:\n        Image|startswith:\n            - 'C:\\Windows\\System32\\'\n            - 'C:\\Windows\\SysWOW64\\'\n        Image|endswith: '.com'\n    filter_main_deleted:\n        Image|startswith: 'C:\\$Extend\\$Deleted\\'\n    filter_optional_empty:\n        Image:\n            - '-'\n            - ''\n    filter_optional_null:\n        Image: null\n    filter_optional_avira:\n        ParentImage|startswith: 'C:\\ProgramData\\Avira\\'\n    filter_optional_nvidia:\n        Image|contains: 'NVIDIA\\NvBackend\\'\n        Image|endswith: '.dat'\n    filter_optional_winscp:\n        Image|endswith: '\\WinSCP.com'\n    filter_optional_vscode:\n        Image|contains|all:\n            - 'C:\\Users\\'\n            - '\\AppData\\'\n            - '.tmp'\n            - 'CodeSetup'\n    filter_optional_libreoffice:\n        Image|endswith: '\\program\\soffice.bin'\n    filter_optional_emc_networker:\n        Image:\n            - 'C:\\Program Files\\EMC NetWorker\\Management\\GST\\apache\\cgi-bin\\update_jnlp.cgi'\n            - 'C:\\Program Files (x86)\\EMC NetWorker\\Management\\GST\\apache\\cgi-bin\\update_jnlp.cgi'\n    filter_optional_winpakpro:\n        Image|startswith:\n            - 'C:\\Program Files (x86)\\WINPAKPRO\\'\n            - 'C:\\Program Files\\WINPAKPRO\\'\n        Image|endswith: '.ngn'\n    filter_optional_myq_server:\n        Image:\n            - 'C:\\Program Files (x86)\\MyQ\\Server\\pcltool.dll'\n            - 'C:\\Program Files\\MyQ\\Server\\pcltool.dll'\n    filter_optional_visualstudio:\n        Image|startswith:\n            - 'C:\\Program Files\\Microsoft Visual Studio\\'\n            - 'C:\\Program Files (x86)\\Microsoft Visual Studio'\n        Image|endswith: '.com'\n    filter_optional_wsl:\n        Image|contains|all:\n            - '\\AppData\\Local\\Packages\\'\n            - '\\LocalState\\rootfs\\'\n    filter_optional_lzma_exe:\n        Image|endswith: '\\LZMA_EXE'\n    filter_optional_dell_dock:\n        ParentImage|startswith: 'C:\\Windows\\Temp\\'\n        ParentImage|endswith: '\\TBT_Dock_Firmware\\GetDockVer32W.exe'\n    filter_optional_firefox_crashreporter:\n        Image|startswith: 'C:\\Program Files\\Mozilla Firefox\\tobedeleted\\'\n    filter_optional_office_c2r:\n        ParentImage: 'C:\\Windows\\UUS\\amd64\\MoUsoCoreWorker.exe'\n        Image|startswith: 'C:\\$Extend\\$Deleted\\'\n        CommandLine|contains|all:\n            - 'C:\\Program Files\\Common Files\\Microsoft Shared\\ClickToRun\\OfficeC2RClient.exe'\n            - '/update UPDATEORCHESTRATOR displaylevel=False'\n    filter_optional_docker:\n        ParentImage: 'C:\\Windows\\System32\\services.exe'\n        Image|endswith: 'com.docker.service'\n    condition: not known_image_extension and not 1 of filter_main_* and not 1 of filter_optional_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Checks whether the image specified in a process creation event doesn't refer to an .exe file (caused by process ghosting or other unorthodox methods to start a process)",
      "answer": "In order to check whether the image specified in a process creation event doesn't refer to an .exe file (caused by process ghosting or other unorthodox methods to start a process), you should: Focus on monitoring process creation activities on Windows systems, specifically looking for processes that do not have '.exe', '.tmp', or '.scr' as their file extension as many legitimate processes, including installers, use these extensions. However, certain built-in Windows utilities and system processes that run without any extension, like 'System', 'Registry', 'MemCompression', and 'vmmem' should be ignored in this detection process. Likewise, processes starting from 'C:\\Windows\\Installer\\MSI', 'C:\\Windows\\System32\\DriverStore\\FileRepository\\', 'C:\\Config.Msi\\' with specific extensions, and any process initiating from 'C:\\Windows\\Temp\\' with a parent image from the same directory should not be flagged. Processes with images starting from directories typically associated with system operations or legitimate software like 'C:\\Windows\\System32\\', 'C:\\Windows\\SysWOW64\\' (especially with '.com' extensions), 'C:\\Program Files\\', and several others including specific paths for Avira, NVIDIA, WinSCP, Visual Studio, Docker, and more, are filtered out to avoid false positives. The aim is to identify suspicious processes that might indicate malware or unauthorized activities attempting to bypass traditional detection mechanisms by not using typical '.exe' processes, thereby highlighting potentially malicious behavior attributed to process ghosting and similar tactics. This approach ensures a high sensitivity towards detecting non-standard process executions while minimizing false alarms by excluding known good process paths and behaviors."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting owner is was removed from a application or service principal in Azure..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to identify when an owner was removed from an application or service principal in Azure, you should: Monitor Azure activity logs specifically for messages indicating either \"Remove owner from service principal\" or \"Remove owner from application\". This involves keeping an eye on activities within the Azure environment to detect unauthorized modifications which can be indicative of malicious attempts to alter permissions or reduce the security posture of applications and services. It's important to note that while such removal actions can be part of regular administrative duties, they might also signify malicious activities. Hence, it's advisable to verify such actions, especially if they come from unfamiliar users, user agents, or originate from unexpected hostnames. If you determine that changes made are known behaviors and causing false alarms, you can adjust this monitoring rule to avoid unnecessary alerts. This detection carries a medium level of importance due to its potential implications on security and access controls.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: azure\n    service: activitylogs\ndetection:\n    selection:\n        properties.message:\n            - Remove owner from service principal\n            - Remove owner from application\n    condition: selection\nfalsepositives:\n    - Owner being removed may be performed by a system administrator.\n    - Verify whether the user identity, user agent, and/or hostname should be making changes in your environment.\n    - Owner removed from unfamiliar users should be investigated. If known behavior is causing false positives, it can be exempted from the rule.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: azure\n    service: activitylogs\ndetection:\n    selection:\n        properties.message:\n            - Remove owner from service principal\n            - Remove owner from application\n    condition: selection\nfalsepositives:\n    - Owner being removed may be performed by a system administrator.\n    - Verify whether the user identity, user agent, and/or hostname should be making changes in your environment.\n    - Owner removed from unfamiliar users should be investigated. If known behavior is causing false positives, it can be exempted from the rule.\nlevel: medium\n",
      "question": "owner is was removed from a application or service principal in Azure.",
      "answer": "In order to identify when an owner was removed from an application or service principal in Azure, you should: Monitor Azure activity logs specifically for messages indicating either \"Remove owner from service principal\" or \"Remove owner from application\". This involves keeping an eye on activities within the Azure environment to detect unauthorized modifications which can be indicative of malicious attempts to alter permissions or reduce the security posture of applications and services. It's important to note that while such removal actions can be part of regular administrative duties, they might also signify malicious activities. Hence, it's advisable to verify such actions, especially if they come from unfamiliar users, user agents, or originate from unexpected hostnames. If you determine that changes made are known behaviors and causing false alarms, you can adjust this monitoring rule to avoid unnecessary alerts. This detection carries a medium level of importance due to its potential implications on security and access controls."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    product: linux\n    service: auditd\ndetection:\n    selection:\n        type: 'PATH'\n        name:\n            - '/root/.bashrc'\n            - '/root/.bash_profile'\n            - '/root/.profile'\n            - '/home/*/.bashrc'\n            - '/home/*/.bash_profile'\n            - '/home/*/.profile'\n            - '/etc/profile'\n            - '/etc/shells'\n            - '/etc/bashrc'\n            - '/etc/csh.cshrc'\n            - '/etc/csh.login'\n    condition: selection\nfalsepositives:\n    - Admin or User activity\nlevel: medium\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect change of user environment. Adversaries can insert code into these files to gain persistence each time a user logs in or opens a new shell.\n\nHere is how  the given sigma rule operates: In order to detect change of user environment. Adversaries can insert code into these files to gain persistence each time a user logs in or opens a new shell, you should: Monitor for modifications to critical user environment configuration files within a Linux environment, specifically through the auditd (Audit Daemon) service. This involves tracking changes to files that are critical to a user's environment and can include '/root/.bashrc', '/root/.bash_profile', '/root/.profile', user-specific '.bashrc', '.bash_profile', and '.profile' files within the '/home/*' directories, as well as system-wide configuration files like '/etc/profile', '/etc/shells', '/etc/bashrc', '/etc/csh.cshrc', and '/etc/csh.login'. It's crucial to note that alterations to these files might not always signify malicious activity, as they could result from legitimate admin or user actions. However, because adversaries often target these files to establish persistence mechanisms by executing code every time a user logs in or initiates a new shell session, monitoring changes to them is vital. Such monitoring is important for catching tactics involving persistence and privilege escalation, although one must be cautious of false positives which might arise from regular system or user modifications.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\n    service: auditd\ndetection:\n    selection:\n        type: 'PATH'\n        name:\n            - '/root/.bashrc'\n            - '/root/.bash_profile'\n            - '/root/.profile'\n            - '/home/*/.bashrc'\n            - '/home/*/.bash_profile'\n            - '/home/*/.profile'\n            - '/etc/profile'\n            - '/etc/shells'\n            - '/etc/bashrc'\n            - '/etc/csh.cshrc'\n            - '/etc/csh.login'\n    condition: selection\nfalsepositives:\n    - Admin or User activity\nlevel: medium\n",
      "question": "change of user environment. Adversaries can insert code into these files to gain persistence each time a user logs in or opens a new shell.",
      "answer": "In order to detect change of user environment. Adversaries can insert code into these files to gain persistence each time a user logs in or opens a new shell, you should: Monitor for modifications to critical user environment configuration files within a Linux environment, specifically through the auditd (Audit Daemon) service. This involves tracking changes to files that are critical to a user's environment and can include '/root/.bashrc', '/root/.bash_profile', '/root/.profile', user-specific '.bashrc', '.bash_profile', and '.profile' files within the '/home/*' directories, as well as system-wide configuration files like '/etc/profile', '/etc/shells', '/etc/bashrc', '/etc/csh.cshrc', and '/etc/csh.login'. It's crucial to note that alterations to these files might not always signify malicious activity, as they could result from legitimate admin or user actions. However, because adversaries often target these files to establish persistence mechanisms by executing code every time a user logs in or initiates a new shell session, monitoring changes to them is vital. Such monitoring is important for catching tactics involving persistence and privilege escalation, although one must be cautious of false positives which might arise from regular system or user modifications."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious connections from Microsoft Sync Center to non-private IPs..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious connections from Microsoft Sync Center to non-private IPs, you should monitor network connections initiated by Windows systems, specifically tracking the activity of the Microsoft Sync Center application, identifiable by the executable 'mobsync.exe'. Attention should be given to connections where the destination IP address does not fall within the range of private network IP addresses, which includes the blocks: 10.x.x.x, 192.168.x.x, 172.16.x.x to 172.31.x.x. Connections should only raise concerns if they are to public IP addresses (hence, excluding the aforementioned private IP ranges) and are IPv4, as the configuration explicitly disregards IPv6 connections. By focusing on these criteria, suspicious activities can be identified, aiding in the early detection of potential threats. It is noted, however, that there may be instances where legitimate connections might erroneously be considered suspicious; such occurrences are acknowledged as possible false positives.\n\nThis examination is rooted in a cybersecurity perspective aimed at mitigating potential data exfiltration or unauthorized access threats, encapsulating tactics and techniques associated with Initial Access and Command and Control phases of a cybersecurity attack framework.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: network_connection\ndetection:\n    selection_mobsync:\n        Image|endswith: '\\mobsync.exe'\n    filter:\n        DestinationIp|startswith:\n            - '10.'\n            - '192.168.'\n            - '172.16.'\n            - '172.17.'\n            - '172.18.'\n            - '172.19.'\n            - '172.20.'\n            - '172.21.'\n            - '172.22.'\n            - '172.23.'\n            - '172.24.'\n            - '172.25.'\n            - '172.26.'\n            - '172.27.'\n            - '172.28.'\n            - '172.29.'\n            - '172.30.'\n            - '172.31.'\n        DestinationIsIpv6: 'false'\n    condition: selection_mobsync and not filter\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: network_connection\ndetection:\n    selection_mobsync:\n        Image|endswith: '\\mobsync.exe'\n    filter:\n        DestinationIp|startswith:\n            - '10.'\n            - '192.168.'\n            - '172.16.'\n            - '172.17.'\n            - '172.18.'\n            - '172.19.'\n            - '172.20.'\n            - '172.21.'\n            - '172.22.'\n            - '172.23.'\n            - '172.24.'\n            - '172.25.'\n            - '172.26.'\n            - '172.27.'\n            - '172.28.'\n            - '172.29.'\n            - '172.30.'\n            - '172.31.'\n        DestinationIsIpv6: 'false'\n    condition: selection_mobsync and not filter\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "suspicious connections from Microsoft Sync Center to non-private IPs.",
      "answer": "In order to detect suspicious connections from Microsoft Sync Center to non-private IPs, you should monitor network connections initiated by Windows systems, specifically tracking the activity of the Microsoft Sync Center application, identifiable by the executable 'mobsync.exe'. Attention should be given to connections where the destination IP address does not fall within the range of private network IP addresses, which includes the blocks: 10.x.x.x, 192.168.x.x, 172.16.x.x to 172.31.x.x. Connections should only raise concerns if they are to public IP addresses (hence, excluding the aforementioned private IP ranges) and are IPv4, as the configuration explicitly disregards IPv6 connections. By focusing on these criteria, suspicious activities can be identified, aiding in the early detection of potential threats. It is noted, however, that there may be instances where legitimate connections might erroneously be considered suspicious; such occurrences are acknowledged as possible false positives.\n\nThis examination is rooted in a cybersecurity perspective aimed at mitigating potential data exfiltration or unauthorized access threats, encapsulating tactics and techniques associated with Initial Access and Command and Control phases of a cybersecurity attack framework."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting remote thread creation from CACTUSTORCH as described in references..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect remote thread creation from CACTUSTORCH as described in references, you should monitor for specific behaviors occurring on Windows systems, specifically focusing on the event of creating remote threads, a common tactic in malicious activities. This monitoring should look for the initiation of these threads by particular Windows system processes or commonly misused office applications. Specifically, attention should be paid to threads being created from the following source executables: 'cscript.exe', 'wscript.exe', 'mshta.exe' located within the System32 directory, or 'winword.exe' and 'excel.exe' without specifying their directory. Additionally, it's critical to check if these threads are targeting those applications within the '\\SysWOW64\\' directory, indicating a potential attempt to execute code within a 32-bit subsystem on a 64-bit machine, a common evasion technique. The StartModule value being null (unspecified) is also a key characteristic of this detection, indicating that the thread was started without loading an additional module, which can be a sign of code injection. Due to the nature of these indicators, the potential for false positives is acknowledged as 'Unknown,' suggesting that while the detection strategy is focused, unexpected legitimate software behaviors might occasionally match these criteria. The severity of detections based on these criteria is considered high, emphasizing the need for immediate investigation upon alerts. This approach aligns with the MITRE ATT&CK tactics and techniques by focusing on detection of execution and defense evasion behaviors typically associated with software like CACTUSTORCH.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: create_remote_thread\ndetection:\n    selection:\n        SourceImage|endswith:\n            - '\\System32\\cscript.exe'\n            - '\\System32\\wscript.exe'\n            - '\\System32\\mshta.exe'\n            - '\\winword.exe'\n            - '\\excel.exe'\n        TargetImage|contains: '\\SysWOW64\\'\n        StartModule: null\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: create_remote_thread\ndetection:\n    selection:\n        SourceImage|endswith:\n            - '\\System32\\cscript.exe'\n            - '\\System32\\wscript.exe'\n            - '\\System32\\mshta.exe'\n            - '\\winword.exe'\n            - '\\excel.exe'\n        TargetImage|contains: '\\SysWOW64\\'\n        StartModule: null\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "remote thread creation from CACTUSTORCH as described in references.",
      "answer": "In order to detect remote thread creation from CACTUSTORCH as described in references, you should monitor for specific behaviors occurring on Windows systems, specifically focusing on the event of creating remote threads, a common tactic in malicious activities. This monitoring should look for the initiation of these threads by particular Windows system processes or commonly misused office applications. Specifically, attention should be paid to threads being created from the following source executables: 'cscript.exe', 'wscript.exe', 'mshta.exe' located within the System32 directory, or 'winword.exe' and 'excel.exe' without specifying their directory. Additionally, it's critical to check if these threads are targeting those applications within the '\\SysWOW64\\' directory, indicating a potential attempt to execute code within a 32-bit subsystem on a 64-bit machine, a common evasion technique. The StartModule value being null (unspecified) is also a key characteristic of this detection, indicating that the thread was started without loading an additional module, which can be a sign of code injection. Due to the nature of these indicators, the potential for false positives is acknowledged as 'Unknown,' suggesting that while the detection strategy is focused, unexpected legitimate software behaviors might occasionally match these criteria. The severity of detections based on these criteria is considered high, emphasizing the need for immediate investigation upon alerts. This approach aligns with the MITRE ATT&CK tactics and techniques by focusing on detection of execution and defense evasion behaviors typically associated with software like CACTUSTORCH."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\reg.exe'\n        - OriginalFileName: 'reg.exe'\n    selection_cli_flag:\n        CommandLine|contains:\n            - 'save'\n            - 'export'\n            - '\u02e2ave'\n            - 'e\u02e3port'\n    selection_cli_hklm:\n        CommandLine|contains:\n            - 'hklm'\n            - 'hk\u02eam'\n            - 'hkey_local_machine'\n            - 'hkey_\u02eaocal_machine'\n            - 'hkey_loca\u02ea_machine'\n            - 'hkey_\u02eaoca\u02ea_machine'\n    selection_cli_hive:\n        CommandLine|contains:\n            - '\\system'\n            - '\\sam'\n            - '\\security'\n            - '\\\u02e2ystem'\n            - '\\sy\u02e2tem'\n            - '\\\u02e2y\u02e2tem'\n            - '\\\u02e2am'\n            - '\\\u02e2ecurity'\n    condition: all of selection_*\nfalsepositives:\n    - Dumping hives for legitimate purpouse i.e. backup or forensic investigation\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect usage of \"reg.exe\" in order to dump sensitive registry hives, which includes SAM, SYSTEM and SECURITY\n\nHere is how  the given sigma rule operates: In order to detect the usage of \"reg.exe\" in order to dump sensitive registry hives, which includes SAM, SYSTEM, and SECURITY, you should look for processes being created on Windows systems where the process image ends with '\\reg.exe' or the original file name is identified as 'reg.exe'. This focuses on detecting commands that involve saving or exporting information, specifically when these commands contain flags like 'save', 'export', or variations thereof that may attempt to evade detection by slightly altering the characters. Furthermore, attention is paid to commands targeting critical registry hive keys such as HKLM (HKEY_LOCAL_MACHINE) or any obfuscated variations of this term. The detection extends to specifics about which registry hives are being targeted for dumping, including SYSTEM, SAM, and SECURITY, along with any attempts to obfuscate these terms within the command line. It's also important to consider that there could be legitimate reasons for such activities, including backups or forensic investigations, which might be considered as false positives in such detection efforts. The detection level for these activities is set to high due to their potential impact on system security.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\reg.exe'\n        - OriginalFileName: 'reg.exe'\n    selection_cli_flag:\n        CommandLine|contains:\n            - 'save'\n            - 'export'\n            - '\u02e2ave'\n            - 'e\u02e3port'\n    selection_cli_hklm:\n        CommandLine|contains:\n            - 'hklm'\n            - 'hk\u02eam'\n            - 'hkey_local_machine'\n            - 'hkey_\u02eaocal_machine'\n            - 'hkey_loca\u02ea_machine'\n            - 'hkey_\u02eaoca\u02ea_machine'\n    selection_cli_hive:\n        CommandLine|contains:\n            - '\\system'\n            - '\\sam'\n            - '\\security'\n            - '\\\u02e2ystem'\n            - '\\sy\u02e2tem'\n            - '\\\u02e2y\u02e2tem'\n            - '\\\u02e2am'\n            - '\\\u02e2ecurity'\n    condition: all of selection_*\nfalsepositives:\n    - Dumping hives for legitimate purpouse i.e. backup or forensic investigation\nlevel: high\n",
      "question": "usage of \"reg.exe\" in order to dump sensitive registry hives, which includes SAM, SYSTEM and SECURITY",
      "answer": "In order to detect the usage of \"reg.exe\" in order to dump sensitive registry hives, which includes SAM, SYSTEM, and SECURITY, you should look for processes being created on Windows systems where the process image ends with '\\reg.exe' or the original file name is identified as 'reg.exe'. This focuses on detecting commands that involve saving or exporting information, specifically when these commands contain flags like 'save', 'export', or variations thereof that may attempt to evade detection by slightly altering the characters. Furthermore, attention is paid to commands targeting critical registry hive keys such as HKLM (HKEY_LOCAL_MACHINE) or any obfuscated variations of this term. The detection extends to specifics about which registry hives are being targeted for dumping, including SYSTEM, SAM, and SECURITY, along with any attempts to obfuscate these terms within the command line. It's also important to consider that there could be legitimate reasons for such activities, including backups or forensic investigations, which might be considered as false positives in such detection efforts. The detection level for these activities is set to high due to their potential impact on system security."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Adversaries may attempt to find domain-level groups and permission settings.\nThe knowledge of domain-level permission groups can help adversaries determine which groups exist and which users belong to a particular group.\nAdversaries may use this information to determine which users have elevated permissions, such as domain administrators.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect adversaries attempting to find domain-level groups and permission settings, you should focus on monitoring PowerShell script activity within Windows environments. Specifically, you should ensure that Script Block Logging is enabled to capture detailed information about script execution. Look for scripts containing specific commands that are frequently used in reconnaissance activities to gather information about domain groups and user permissions. Detecting the use of the `get-ADPrincipalGroupMembership` command is crucial as adversaries may use it to determine the membership of specific domain-level groups. Additionally, identifying scripts that combine the `get-aduser` command with parameters like '-f ' (filter), '-pr ' (properties), and the string 'DoesNotRequirePreAuth' is important. This combination is often used to query for users who have properties that could be exploited, such as not requiring pre-authentication, which can indicate users with potentially elevated permissions or vulnerabilities in their configuration. Monitoring for these patterns and commands in PowerShell script blocks can help identify reconnaissance activities aimed at uncovering domain group memberships and permissions settings. It's essential to keep in mind that these detections can sometimes yield false positives, so they are considered to have a low level of confidence by default.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    test_2:\n        ScriptBlockText|contains: get-ADPrincipalGroupMembership\n    test_7:\n        ScriptBlockText|contains|all:\n            - get-aduser\n            - '-f '\n            - '-pr '\n            - DoesNotRequirePreAuth\n    condition: 1 of test_*\nfalsepositives:\n    - Unknown\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    test_2:\n        ScriptBlockText|contains: get-ADPrincipalGroupMembership\n    test_7:\n        ScriptBlockText|contains|all:\n            - get-aduser\n            - '-f '\n            - '-pr '\n            - DoesNotRequirePreAuth\n    condition: 1 of test_*\nfalsepositives:\n    - Unknown\nlevel: low\n",
      "question": "Adversaries may attempt to find domain-level groups and permission settings.\nThe knowledge of domain-level permission groups can help adversaries determine which groups exist and which users belong to a particular group.\nAdversaries may use this information to determine which users have elevated permissions, such as domain administrators.\n",
      "answer": "In order to detect adversaries attempting to find domain-level groups and permission settings, you should focus on monitoring PowerShell script activity within Windows environments. Specifically, you should ensure that Script Block Logging is enabled to capture detailed information about script execution. Look for scripts containing specific commands that are frequently used in reconnaissance activities to gather information about domain groups and user permissions. Detecting the use of the `get-ADPrincipalGroupMembership` command is crucial as adversaries may use it to determine the membership of specific domain-level groups. Additionally, identifying scripts that combine the `get-aduser` command with parameters like '-f ' (filter), '-pr ' (properties), and the string 'DoesNotRequirePreAuth' is important. This combination is often used to query for users who have properties that could be exploited, such as not requiring pre-authentication, which can indicate users with potentially elevated permissions or vulnerabilities in their configuration. Monitoring for these patterns and commands in PowerShell script blocks can help identify reconnaissance activities aimed at uncovering domain group memberships and permissions settings. It's essential to keep in mind that these detections can sometimes yield false positives, so they are considered to have a low level of confidence by default."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Powershell Remove-Item  with -Path to delete a file or a folder with \"-Recurse\".\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential malicious activity involving PowerShell's Remove-Item cmdlet used with the -Path parameter to delete a file or folder recursively, you should monitor Windows PowerShell script executions. Specifically, look for script blocks that include both the \"Remove-Item\" command and the \"-Path\" argument. However, to reduce irrelevant alerts, exclude any script block that interacts with the Windows Registry paths \"HKCU:\\\" and \"HKLM:\\\". This approach aims to identify scripts that might be used for harmful purposes such as deleting critical files or folders but will disregard those accessing the registry, thereby reducing false positive alerts like legitimate administrative scripts. The focus is on identifying events that could indicate misuse of PowerShell for deletion operations, which might be indicative of malicious activities such as covering tracks or disrupting services. The detection predominantly relies on having Script Block Logging enabled, a feature in Windows that records executed PowerShell script content, enabling thorough analysis of script actions. It's worth noting that this detection strategy is considered to have a low level of false positives, although legitimate uses of PowerShell scripts that perform similar actions might occasionally be flagged.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains|all:\n            - Remove-Item\n            - '-Path '\n    filter_reg:\n        ScriptBlockText|contains:\n            - 'HKCU:\\'\n            - 'HKLM:\\'\n    condition: selection and not filter_reg\nfalsepositives:\n    - Legitimate PowerShell scripts\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains|all:\n            - Remove-Item\n            - '-Path '\n    filter_reg:\n        ScriptBlockText|contains:\n            - 'HKCU:\\'\n            - 'HKLM:\\'\n    condition: selection and not filter_reg\nfalsepositives:\n    - Legitimate PowerShell scripts\nlevel: low\n",
      "question": "Powershell Remove-Item  with -Path to delete a file or a folder with \"-Recurse\"",
      "answer": "In order to detect potential malicious activity involving PowerShell's Remove-Item cmdlet used with the -Path parameter to delete a file or folder recursively, you should monitor Windows PowerShell script executions. Specifically, look for script blocks that include both the \"Remove-Item\" command and the \"-Path\" argument. However, to reduce irrelevant alerts, exclude any script block that interacts with the Windows Registry paths \"HKCU:\\\" and \"HKLM:\\\". This approach aims to identify scripts that might be used for harmful purposes such as deleting critical files or folders but will disregard those accessing the registry, thereby reducing false positive alerts like legitimate administrative scripts. The focus is on identifying events that could indicate misuse of PowerShell for deletion operations, which might be indicative of malicious activities such as covering tracks or disrupting services. The detection predominantly relies on having Script Block Logging enabled, a feature in Windows that records executed PowerShell script content, enabling thorough analysis of script actions. It's worth noting that this detection strategy is considered to have a low level of false positives, although legitimate uses of PowerShell scripts that perform similar actions might occasionally be flagged."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting possible successful exploitation for vulnerability described in CVE-2021-26857 by looking for | abnormal subprocesses spawning by Exchange Server's Unified Messaging service.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect possible successful exploitation for vulnerability described in CVE-2021-26857 by looking for abnormal subprocesses spawning by Exchange Server's Unified Messaging service, you should: Focus on monitoring the process creation events within a Windows environment, particularly those initiated by the Unified Messaging service's worker process, identified as 'UMWorkerProcess.exe'. It's crucial to investigate any subprocess that gets spawned by this parent process to identify potentially malicious activity. However, it's important to exclude processes that are expected and benign, specifically if they end with 'wermgr.exe' or 'WerFault.exe', as these are typically involved in error reporting and are not indicative of the exploitation attempt in question. The detection strategy employs a high level of accuracy to minimize false positives, yet any occurrence outside of the filtered parameters should warrant further investigation due to the serious implications of exploiting CVE-2021-26857.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\UMWorkerProcess.exe'\n    filter:\n        Image|endswith:\n            - 'wermgr.exe'\n            - 'WerFault.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\UMWorkerProcess.exe'\n    filter:\n        Image|endswith:\n            - 'wermgr.exe'\n            - 'WerFault.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "possible successful exploitation for vulnerability described in CVE-2021-26857 by looking for | abnormal subprocesses spawning by Exchange Server's Unified Messaging service",
      "answer": "In order to detect possible successful exploitation for vulnerability described in CVE-2021-26857 by looking for abnormal subprocesses spawning by Exchange Server's Unified Messaging service, you should: Focus on monitoring the process creation events within a Windows environment, particularly those initiated by the Unified Messaging service's worker process, identified as 'UMWorkerProcess.exe'. It's crucial to investigate any subprocess that gets spawned by this parent process to identify potentially malicious activity. However, it's important to exclude processes that are expected and benign, specifically if they end with 'wermgr.exe' or 'WerFault.exe', as these are typically involved in error reporting and are not indicative of the exploitation attempt in question. The detection strategy employs a high level of accuracy to minimize false positives, yet any occurrence outside of the filtered parameters should warrant further investigation due to the serious implications of exploiting CVE-2021-26857."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting exploitation of VMware Workspace ONE Access Authentication Bypass vulnerability as described in CVE-2022-31656\nVMware Workspace ONE Access, Identity Manager and vRealize Automation contain an authentication bypass vulnerability affecting local domain users.\nA malicious actor with network access to the UI may be able to obtain administrative access without the need to authenticate.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the exploitation of VMware Workspace ONE Access Authentication Bypass vulnerability as described in CVE-2022-31656, where VMware Workspace ONE Access, Identity Manager, and vRealize Automation contain an authentication bypass vulnerability affecting local domain users, allowing a malicious actor with network access to the UI to potentially obtain administrative access without the need to authenticate, you should: monitor webserver logs for queries containing the string '/SAAS/t/_/;/' in the URI query. This specific query string pattern is indicative of attempts to exploit the vulnerability. It's important to note that vulnerability scanners might also trigger this detection, so they are considered as possible sources of false positives. This detection has been flagged with a high level of importance due to the severity of the vulnerability and the potential for a malicious actor to gain unauthorized administrative access.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: webserver\ndetection:\n    selection:\n        cs-uri-query|contains: '/SAAS/t/_/;/'\n    condition: selection\nfalsepositives:\n    - Vulnerability scanners\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: webserver\ndetection:\n    selection:\n        cs-uri-query|contains: '/SAAS/t/_/;/'\n    condition: selection\nfalsepositives:\n    - Vulnerability scanners\nlevel: high\n",
      "question": "exploitation of VMware Workspace ONE Access Authentication Bypass vulnerability as described in CVE-2022-31656\nVMware Workspace ONE Access, Identity Manager and vRealize Automation contain an authentication bypass vulnerability affecting local domain users.\nA malicious actor with network access to the UI may be able to obtain administrative access without the need to authenticate.\n",
      "answer": "In order to detect the exploitation of VMware Workspace ONE Access Authentication Bypass vulnerability as described in CVE-2022-31656, where VMware Workspace ONE Access, Identity Manager, and vRealize Automation contain an authentication bypass vulnerability affecting local domain users, allowing a malicious actor with network access to the UI to potentially obtain administrative access without the need to authenticate, you should: monitor webserver logs for queries containing the string '/SAAS/t/_/;/' in the URI query. This specific query string pattern is indicative of attempts to exploit the vulnerability. It's important to note that vulnerability scanners might also trigger this detection, so they are considered as possible sources of false positives. This detection has been flagged with a high level of importance due to the severity of the vulnerability and the potential for a malicious actor to gain unauthorized administrative access."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        TargetFilename|contains: '\\start menu\\programs\\startup\\'\n        TargetFilename|endswith: '.lnk'\n    condition: selection\nfalsepositives:\n    - Depending on your environment accepted applications may leverage this at times. It is recommended to search for anomalies inidicative of malware.\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect PowerShell writing startup shortcuts.\nThis procedure was highlighted in Red Canary Intel Insights Oct. 2021, \"We frequently observe adversaries using PowerShell to write malicious .lnk files into the startup directory to establish persistence.\nAccordingly, this detection opportunity is likely to identify persistence mechanisms in multiple threats.\nIn the context of Yellow Cockatoo, this persistence mechanism eventually launches the command-line script that leads to the installation of a malicious DLL\"\n\n\nHere is how  the given sigma rule operates: In order to detect PowerShell writing startup shortcuts, which is a procedure that has been frequently observed by adversaries to write malicious .lnk files into the startup directory to establish persistence, you should monitor file events on Windows systems. Specifically, look for events where the PowerShell executable (`powershell.exe` or `pwsh.exe`) is involved in creating or modifying files. Focus on files that are placed in the \"\\start menu\\programs\\startup\\\" directory and have the \".lnk\" extension, as this behavior signifies an attempt to achieve persistence by running malicious scripts or programs on system startup. This detection is critical as highlighted in Red Canary Intel Insights Oct. 2021, noting that adversaries leverage this method across multiple threats to eventually launch command-line scripts that lead to the installation of a malicious DLL, characteristic of the Yellow Cockatoo activity. It's important, however, to note that there might be legitimate instances of such activity depending on the environment, so anomalies should be carefully analyzed to differentiate between benign use and potential malware.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        TargetFilename|contains: '\\start menu\\programs\\startup\\'\n        TargetFilename|endswith: '.lnk'\n    condition: selection\nfalsepositives:\n    - Depending on your environment accepted applications may leverage this at times. It is recommended to search for anomalies inidicative of malware.\nlevel: high\n",
      "question": "PowerShell writing startup shortcuts.\nThis procedure was highlighted in Red Canary Intel Insights Oct. 2021, \"We frequently observe adversaries using PowerShell to write malicious .lnk files into the startup directory to establish persistence.\nAccordingly, this detection opportunity is likely to identify persistence mechanisms in multiple threats.\nIn the context of Yellow Cockatoo, this persistence mechanism eventually launches the command-line script that leads to the installation of a malicious DLL\"\n",
      "answer": "In order to detect PowerShell writing startup shortcuts, which is a procedure that has been frequently observed by adversaries to write malicious .lnk files into the startup directory to establish persistence, you should monitor file events on Windows systems. Specifically, look for events where the PowerShell executable (`powershell.exe` or `pwsh.exe`) is involved in creating or modifying files. Focus on files that are placed in the \"\\start menu\\programs\\startup\\\" directory and have the \".lnk\" extension, as this behavior signifies an attempt to achieve persistence by running malicious scripts or programs on system startup. This detection is critical as highlighted in Red Canary Intel Insights Oct. 2021, noting that adversaries leverage this method across multiple threats to eventually launch command-line scripts that lead to the installation of a malicious DLL, characteristic of the Yellow Cockatoo activity. It's important, however, to note that there might be legitimate instances of such activity depending on the environment, so anomalies should be carefully analyzed to differentiate between benign use and potential malware."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains: 'PSAsyncShell'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect use of PSAsyncShell an Asynchronous TCP Reverse Shell written in powershell\n\nHere is how  the given sigma rule operates: In order to detect the use of PSAsyncShell, an Asynchronous TCP Reverse Shell written in PowerShell, you should: focus on monitoring PowerShell script activity within Windows environments, specifically targeting instances where Script Block Logging is enabled. This involves looking for any appearance of the string 'PSAsyncShell' within the ScriptBlockText fields of logged PowerShell scripts. Such detection could indicate an adversary's attempt to establish a reverse shell, facilitating remote control over the targeted system in a manner that's designed to evade detection. Due to the nature of this technique, false positives are considered unlikely, and the detection of this activity should be treated with a high level of suspicion, reflecting its potential severity and impact.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains: 'PSAsyncShell'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "use of PSAsyncShell an Asynchronous TCP Reverse Shell written in powershell",
      "answer": "In order to detect the use of PSAsyncShell, an Asynchronous TCP Reverse Shell written in PowerShell, you should: focus on monitoring PowerShell script activity within Windows environments, specifically targeting instances where Script Block Logging is enabled. This involves looking for any appearance of the string 'PSAsyncShell' within the ScriptBlockText fields of logged PowerShell scripts. Such detection could indicate an adversary's attempt to establish a reverse shell, facilitating remote control over the targeted system in a manner that's designed to evade detection. Due to the nature of this technique, false positives are considered unlikely, and the detection of this activity should be treated with a high level of suspicion, reflecting its potential severity and impact."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting potential credential dumping via Windows Error Reporting LSASS Shtinkering technique which uses the Windows Error Reporting to dump lsass.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential credential dumping via Windows Error Reporting LSASS Shtinkering technique which uses the Windows Error Reporting to dump lsass, you should: Monitor process creation events within Windows environments, specifically targeting the Werfault.exe process. Look for instances where the 'Image' path ends with '\\Werfault.exe' or where 'OriginalFileName' is exactly 'WerFault.exe'. Additionally, scrutinize the command line usage for specific patterns indicating malicious use: the presence of ' -u -p ' alongside ' -ip ' and ' -s ' is crucial. These patterns suggest an attempt to utilize Werfault.exe with specific parameters that could be indicative of the LSASS Shtinkering technique, whereby the goal is to manipulate WerFault to dump the contents of the LSASS process. Moreover, pay special attention to process creations that involve users with names containing 'AUTHORI' or 'AUTORI', indicating that the process might be running under a context associated with elevated privileges or administrative accounts in various language settings. It's also essential to exclude events where the parent process is 'C:\\Windows\\System32\\lsass.exe' to reduce false positives, as legitimate Windows Error Reporting activities might mimic the malicious behavior but are differentiated by their parent process. This approach combines monitoring for specific image names, command line parameters, and user context to accurately identify attempts at dumping credentials through the manipulation of Windows Error Reporting. Be mindful of false positives, particularly those instances where Windows Error Reporting legitimately generates similar command line parameters; in such cases, verifying the process ID (PID) associated with the '-p' parameter can provide additional context to determine the legitimacy of the activity. The focus on these specific parameters and contexts helps in identifying activities associated with credential dumping tactics and techniques, fundamentally enhancing the detection of malicious attempts to exploit WerFault.exe for extracting sensitive information from lsass.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\Werfault.exe'\n        - OriginalFileName: 'WerFault.exe'\n    selection_cli:\n        ParentUser|contains: # covers many language settings\n            - 'AUTHORI'\n            - 'AUTORI'\n        User|contains:\n            - 'AUTHORI'\n            - 'AUTORI'\n        CommandLine|contains|all:\n            # Doc: WerFault.exe -u -p <target process> -ip <source process> -s <file mapping handle>\n            # Example: C:\\Windows\\system32\\Werfault.exe -u -p 744 -ip 1112 -s 244\n            # If the source process is not equal to the target process and the target process is LSASS then this is an indication of this technique\n            # Example: If the \"-p\" points the PID of \"lsass.exe\" and \"-ip\" points to a different process than \"lsass.exe\" then this is a sign of malicious activity\n            - ' -u -p '\n            - ' -ip '\n            - ' -s '\n    filter_lsass:\n        ParentImage: 'C:\\Windows\\System32\\lsass.exe'\n    condition: all of selection_* and not 1 of filter_*\nfalsepositives:\n    - Windows Error Reporting might produce similar behavior. In that case, check the PID associated with the \"-p\" parameter in the CommandLine.\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\Werfault.exe'\n        - OriginalFileName: 'WerFault.exe'\n    selection_cli:\n        ParentUser|contains: # covers many language settings\n            - 'AUTHORI'\n            - 'AUTORI'\n        User|contains:\n            - 'AUTHORI'\n            - 'AUTORI'\n        CommandLine|contains|all:\n            # Doc: WerFault.exe -u -p <target process> -ip <source process> -s <file mapping handle>\n            # Example: C:\\Windows\\system32\\Werfault.exe -u -p 744 -ip 1112 -s 244\n            # If the source process is not equal to the target process and the target process is LSASS then this is an indication of this technique\n            # Example: If the \"-p\" points the PID of \"lsass.exe\" and \"-ip\" points to a different process than \"lsass.exe\" then this is a sign of malicious activity\n            - ' -u -p '\n            - ' -ip '\n            - ' -s '\n    filter_lsass:\n        ParentImage: 'C:\\Windows\\System32\\lsass.exe'\n    condition: all of selection_* and not 1 of filter_*\nfalsepositives:\n    - Windows Error Reporting might produce similar behavior. In that case, check the PID associated with the \"-p\" parameter in the CommandLine.\nlevel: high\n",
      "question": "potential credential dumping via Windows Error Reporting LSASS Shtinkering technique which uses the Windows Error Reporting to dump lsass",
      "answer": "In order to detect potential credential dumping via Windows Error Reporting LSASS Shtinkering technique which uses the Windows Error Reporting to dump lsass, you should: Monitor process creation events within Windows environments, specifically targeting the Werfault.exe process. Look for instances where the 'Image' path ends with '\\Werfault.exe' or where 'OriginalFileName' is exactly 'WerFault.exe'. Additionally, scrutinize the command line usage for specific patterns indicating malicious use: the presence of ' -u -p ' alongside ' -ip ' and ' -s ' is crucial. These patterns suggest an attempt to utilize Werfault.exe with specific parameters that could be indicative of the LSASS Shtinkering technique, whereby the goal is to manipulate WerFault to dump the contents of the LSASS process. Moreover, pay special attention to process creations that involve users with names containing 'AUTHORI' or 'AUTORI', indicating that the process might be running under a context associated with elevated privileges or administrative accounts in various language settings. It's also essential to exclude events where the parent process is 'C:\\Windows\\System32\\lsass.exe' to reduce false positives, as legitimate Windows Error Reporting activities might mimic the malicious behavior but are differentiated by their parent process. This approach combines monitoring for specific image names, command line parameters, and user context to accurately identify attempts at dumping credentials through the manipulation of Windows Error Reporting. Be mindful of false positives, particularly those instances where Windows Error Reporting legitimately generates similar command line parameters; in such cases, verifying the process ID (PID) associated with the '-p' parameter can provide additional context to determine the legitimacy of the activity. The focus on these specific parameters and contexts helps in identifying activities associated with credential dumping tactics and techniques, fundamentally enhancing the detection of malicious attempts to exploit WerFault.exe for extracting sensitive information from lsass."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        ImageLoaded|endswith: '\\RjvPlatform.dll'\n        Image: '\\SystemResetPlatform.exe'\n    filter_main_legit_path:\n        Image|startswith: 'C:\\Windows\\System32\\SystemResetPlatform\\'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unlikely\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect potential DLL sideloading of \"RjvPlatform.dll\" by \"SystemResetPlatform.exe\" located in a non-default location.\n\nHere is how  the given sigma rule operates: In order to detect potential DLL sideloading of \"RjvPlatform.dll\" by \"SystemResetPlatform.exe\" located in a non-default location, you should: Look for instances where \"SystemResetPlatform.exe\" loads a DLL named \"RjvPlatform.dll\" in the Windows environment, specifically within the image loading category. It is vital to ensure that the \"SystemResetPlatform.exe\" process is not operating from its legitimate path, which is typically \"C:\\Windows\\System32\\SystemResetPlatform\\\". The detection focuses on identifying unusual or suspicious behavior that deviates from the norm, such as the loading of \"RjvPlatform.dll\" from paths other than the designated legitimate one. This is indicative of an attempt to exploit the legitimate \"SystemResetPlatform.exe\" process for malicious purposes, commonly seen in techniques involving DLL sideloading. The effectiveness of this detection is deemed high, with false positives being unlikely, signifying a strong indicator of malicious activity when such criteria are met.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        ImageLoaded|endswith: '\\RjvPlatform.dll'\n        Image: '\\SystemResetPlatform.exe'\n    filter_main_legit_path:\n        Image|startswith: 'C:\\Windows\\System32\\SystemResetPlatform\\'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "potential DLL sideloading of \"RjvPlatform.dll\" by \"SystemResetPlatform.exe\" located in a non-default location.",
      "answer": "In order to detect potential DLL sideloading of \"RjvPlatform.dll\" by \"SystemResetPlatform.exe\" located in a non-default location, you should: Look for instances where \"SystemResetPlatform.exe\" loads a DLL named \"RjvPlatform.dll\" in the Windows environment, specifically within the image loading category. It is vital to ensure that the \"SystemResetPlatform.exe\" process is not operating from its legitimate path, which is typically \"C:\\Windows\\System32\\SystemResetPlatform\\\". The detection focuses on identifying unusual or suspicious behavior that deviates from the norm, such as the loading of \"RjvPlatform.dll\" from paths other than the designated legitimate one. This is indicative of an attempt to exploit the legitimate \"SystemResetPlatform.exe\" process for malicious purposes, commonly seen in techniques involving DLL sideloading. The effectiveness of this detection is deemed high, with false positives being unlikely, signifying a strong indicator of malicious activity when such criteria are met."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\netsh.exe'\n        - OriginalFileName: 'netsh.exe'\n    selection_cli_1:\n        CommandLine|contains|all:\n            - 'interface'\n            - 'portproxy'\n            - 'add'\n            - 'v4tov4'\n    selection_cli_2:\n        CommandLine|contains|all:\n            # Example: netsh I p a v l=8001 listena=127.0.0.1 connectp=80 c=192.168.1.1\n            - 'i ' # interface               \n            - 'p ' # portproxy\n            - 'a ' # add\n            - 'v ' # v4tov4\n    selection_cli_3:\n        CommandLine|contains|all:\n            - 'connectp'\n            - 'listena'\n            - 'c='\n    condition: selection_img and 1 of selection_cli_*\nfalsepositives:\n    - Legitimate administration activity\n    - WSL2 network bridge PowerShell script used for WSL/Kubernetes/Docker (e.g. https://github.com/microsoft/WSL/issues/4150#issuecomment-504209723)\nlevel: medium\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect execution of netsh commands that configure a new port forwarding (PortProxy) rule\n\nHere is how  the given sigma rule operates: In order to detect the execution of netsh commands that configure a new port forwarding (PortProxy) rule, you should monitor for the creation of processes on Windows systems that involve netsh.exe, either by checking for processes where the image ends with '\\netsh.exe' or where the original filename matches 'netsh.exe'. Additionally, scrutinize any command line invocations containing significant flags and parameters that are associated with setting up port forwarding, specifically through netsh. These include combinations that signify configuring an interface for port proxying such as 'interface', 'portproxy', 'add', 'v4tov4', or a compact variation like 'i ', 'p ', 'a ', 'v ' which may indicate a shorthand command for the same action. Moreover, pay attention to commands that include parameters like 'connectp', 'listena', and 'c=' which are crucial in defining the specifics of the port forwarding rule like the connect port, listen address, and connect address respectively. Be mindful however that there are legitimate scenarios where such activities might occur, such as legitimate administration tasks or specific configurations for WSL2 network bridges via PowerShell scripts, which should be considered when evaluating potential security alerts. The level of alert for this type of detection is considered medium, reflecting the balance between the need to detect possible malicious activity and recognizing legitimate use cases.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\netsh.exe'\n        - OriginalFileName: 'netsh.exe'\n    selection_cli_1:\n        CommandLine|contains|all:\n            - 'interface'\n            - 'portproxy'\n            - 'add'\n            - 'v4tov4'\n    selection_cli_2:\n        CommandLine|contains|all:\n            # Example: netsh I p a v l=8001 listena=127.0.0.1 connectp=80 c=192.168.1.1\n            - 'i ' # interface               \n            - 'p ' # portproxy\n            - 'a ' # add\n            - 'v ' # v4tov4\n    selection_cli_3:\n        CommandLine|contains|all:\n            - 'connectp'\n            - 'listena'\n            - 'c='\n    condition: selection_img and 1 of selection_cli_*\nfalsepositives:\n    - Legitimate administration activity\n    - WSL2 network bridge PowerShell script used for WSL/Kubernetes/Docker (e.g. https://github.com/microsoft/WSL/issues/4150#issuecomment-504209723)\nlevel: medium\n",
      "question": "execution of netsh commands that configure a new port forwarding (PortProxy) rule",
      "answer": "In order to detect the execution of netsh commands that configure a new port forwarding (PortProxy) rule, you should monitor for the creation of processes on Windows systems that involve netsh.exe, either by checking for processes where the image ends with '\\netsh.exe' or where the original filename matches 'netsh.exe'. Additionally, scrutinize any command line invocations containing significant flags and parameters that are associated with setting up port forwarding, specifically through netsh. These include combinations that signify configuring an interface for port proxying such as 'interface', 'portproxy', 'add', 'v4tov4', or a compact variation like 'i ', 'p ', 'a ', 'v ' which may indicate a shorthand command for the same action. Moreover, pay attention to commands that include parameters like 'connectp', 'listena', and 'c=' which are crucial in defining the specifics of the port forwarding rule like the connect port, listen address, and connect address respectively. Be mindful however that there are legitimate scenarios where such activities might occur, such as legitimate administration tasks or specific configurations for WSL2 network bridges via PowerShell scripts, which should be considered when evaluating potential security alerts. The level of alert for this type of detection is considered medium, reflecting the balance between the need to detect possible malicious activity and recognizing legitimate use cases."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious command line execution that invokes PowerShell with reference to an AppData folder.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a suspicious command line execution that invokes PowerShell with reference to an AppData folder, you should monitor the creation of processes on Windows systems for specific patterns in their command lines. Look for the execution of PowerShell, indicated by the presence of 'powershell.exe', '\\powershell', '\\pwsh', or 'pwsh.exe' in the command line. Additionally, detect command lines that include both a '/c ' segment and reference to the '\\AppData\\' folder, with further specification to either 'Local\\' or 'Roaming\\' directories within AppData. Be aware that genuine administrative scripts may also trigger this detection, hence they are considered potential false positives. The investigative focus here is on identifying malicious activity involving PowerShell, especially when it is possibly being used to execute scripts or commands from directories commonly abused by attackers, like AppData. This detection strategy aligns with known tactics and techniques used by adversaries to execute code on a compromised system, reflecting its importance in defense strategies.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1:\n        CommandLine|contains:\n            - 'powershell.exe'\n            - '\\powershell'\n            - '\\pwsh'\n            - 'pwsh.exe'\n    selection2:\n        CommandLine|contains|all:\n            - '/c '\n            - '\\AppData\\'\n        CommandLine|contains:\n            - 'Local\\'\n            - 'Roaming\\'\n    condition: all of selection*\nfalsepositives:\n    - Administrative scripts\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1:\n        CommandLine|contains:\n            - 'powershell.exe'\n            - '\\powershell'\n            - '\\pwsh'\n            - 'pwsh.exe'\n    selection2:\n        CommandLine|contains|all:\n            - '/c '\n            - '\\AppData\\'\n        CommandLine|contains:\n            - 'Local\\'\n            - 'Roaming\\'\n    condition: all of selection*\nfalsepositives:\n    - Administrative scripts\nlevel: medium\n",
      "question": "suspicious command line execution that invokes PowerShell with reference to an AppData folder",
      "answer": "In order to detect a suspicious command line execution that invokes PowerShell with reference to an AppData folder, you should monitor the creation of processes on Windows systems for specific patterns in their command lines. Look for the execution of PowerShell, indicated by the presence of 'powershell.exe', '\\powershell', '\\pwsh', or 'pwsh.exe' in the command line. Additionally, detect command lines that include both a '/c ' segment and reference to the '\\AppData\\' folder, with further specification to either 'Local\\' or 'Roaming\\' directories within AppData. Be aware that genuine administrative scripts may also trigger this detection, hence they are considered potential false positives. The investigative focus here is on identifying malicious activity involving PowerShell, especially when it is possibly being used to execute scripts or commands from directories commonly abused by attackers, like AppData. This detection strategy aligns with known tactics and techniques used by adversaries to execute code on a compromised system, reflecting its importance in defense strategies."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting remote RPC calls useb by SharpHound to map remote connections and local group membership..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect remote RPC calls used by SharpHound to map remote connections and local group membership, you should: Focus on analyzing logs from RPC Firewall, specifically those categorized under the application. Ensure that the RPC Firewall is installed and properly configured to audit and block RPC calls based on the configuration \"audit:true action:block uuid:6bffd098-a112-3610-9833-46c3f87e345a opnum:2\". The detection strategy revolves around monitoring for event logs tagged with \"RPCFW\", with an EventID of 3, which indicates an intercepted remote procedure call. Specifically, you are looking for any RPC calls that match the Interface UUID \"6bffd098-a112-3610-9833-46c3f87e345a\" and an operation number \"OpNum\" of 2. These parameters are indicative of the specific type of RPC call utilized by SharpHound in its reconnaissance activities. While analyzing these logs, it's important to be aware that false positives are unknown, indicating that each detection should be investigated thoroughly due to the high criticality of this activity. This approach is crucial in identifying and mitigating the tactics and techniques associated with the mapping of remote connections and the enumeration of local group memberships, typically involved in reconnaissance phases of cyber attacks.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: rpc_firewall\n    category: application\n    definition: 'Requirements: install and apply the RPC Firewall to all processes with \"audit:true action:block uuid:6bffd098-a112-3610-9833-46c3f87e345a opnum:2'\ndetection:\n    selection:\n        EventLog: RPCFW\n        EventID: 3\n        InterfaceUuid: 6bffd098-a112-3610-9833-46c3f87e345a\n        OpNum: 2\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: rpc_firewall\n    category: application\n    definition: 'Requirements: install and apply the RPC Firewall to all processes with \"audit:true action:block uuid:6bffd098-a112-3610-9833-46c3f87e345a opnum:2'\ndetection:\n    selection:\n        EventLog: RPCFW\n        EventID: 3\n        InterfaceUuid: 6bffd098-a112-3610-9833-46c3f87e345a\n        OpNum: 2\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "remote RPC calls useb by SharpHound to map remote connections and local group membership.",
      "answer": "In order to detect remote RPC calls used by SharpHound to map remote connections and local group membership, you should: Focus on analyzing logs from RPC Firewall, specifically those categorized under the application. Ensure that the RPC Firewall is installed and properly configured to audit and block RPC calls based on the configuration \"audit:true action:block uuid:6bffd098-a112-3610-9833-46c3f87e345a opnum:2\". The detection strategy revolves around monitoring for event logs tagged with \"RPCFW\", with an EventID of 3, which indicates an intercepted remote procedure call. Specifically, you are looking for any RPC calls that match the Interface UUID \"6bffd098-a112-3610-9833-46c3f87e345a\" and an operation number \"OpNum\" of 2. These parameters are indicative of the specific type of RPC call utilized by SharpHound in its reconnaissance activities. While analyzing these logs, it's important to be aware that false positives are unknown, indicating that each detection should be investigated thoroughly due to the high criticality of this activity. This approach is crucial in identifying and mitigating the tactics and techniques associated with the mapping of remote connections and the enumeration of local group memberships, typically involved in reconnaissance phases of cyber attacks."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting installation of suspicious packages using system installation utilities.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the installation of suspicious packages using system installation utilities, you should monitor for the creation of processes indicative of package management tools commonly found on Linux systems\u2014specifically apt, apt-get, yum, rpm, and dpkg. These tools can be leveraged for innocuous purposes but may also be used maliciously to install software that facilitates an attacker's objectives. Look for command line executions that include 'install' actions associated with these package managers. Additionally, pay special attention to the attempted installation of particularly suspicious packages, which often serve as red flags for potentially malicious activity. Such packages include network scanning tools like nmap, nc (netcat), as well as network traffic analyzers like wireshark and tshark, VPN software such as openconnect, or anonymity tools like proxychains. Monitoring for these activities, especially when they occur in conjunction, raises alerts about potentially unauthorized or malicious installations. It's essential, however, to remember that these detections might sometimes coincide with legitimate administration activities, requiring further investigation to discern the context of these actions accurately. The level of concern attached to such events is considered medium, acknowledging that while they are indicative of suspicious behavior, they are not intrinsically malicious and warrant further investigation to confirm the intentions behind them.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: linux\n    category: process_creation\ndetection:\n    selection_tool_apt:\n        Image|endswith:\n            - '/apt'\n            - '/apt-get'\n        CommandLine|contains: 'install'\n    selection_tool_yum:\n        Image|endswith: '/yum'\n        CommandLine|contains:\n            - 'localinstall'\n            - 'install'\n    selection_tool_rpm:\n        Image|endswith: '/rpm'\n        CommandLine|contains: '-i'\n    selection_tool_dpkg:\n        Image|endswith: '/dpkg'\n        CommandLine|contains:\n            - '--install'\n            - '-i'\n    selection_keyword:\n        CommandLine|contains:\n            # Add more suspicious packages\n            - 'nmap'\n            - ' nc'\n            - 'netcat'\n            - 'wireshark'\n            - 'tshark'\n            - 'openconnect'\n            - 'proxychains'\n    condition: 1 of selection_tool_* and selection_keyword\nfalsepositives:\n    - Legitimate administration activities\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\n    category: process_creation\ndetection:\n    selection_tool_apt:\n        Image|endswith:\n            - '/apt'\n            - '/apt-get'\n        CommandLine|contains: 'install'\n    selection_tool_yum:\n        Image|endswith: '/yum'\n        CommandLine|contains:\n            - 'localinstall'\n            - 'install'\n    selection_tool_rpm:\n        Image|endswith: '/rpm'\n        CommandLine|contains: '-i'\n    selection_tool_dpkg:\n        Image|endswith: '/dpkg'\n        CommandLine|contains:\n            - '--install'\n            - '-i'\n    selection_keyword:\n        CommandLine|contains:\n            # Add more suspicious packages\n            - 'nmap'\n            - ' nc'\n            - 'netcat'\n            - 'wireshark'\n            - 'tshark'\n            - 'openconnect'\n            - 'proxychains'\n    condition: 1 of selection_tool_* and selection_keyword\nfalsepositives:\n    - Legitimate administration activities\nlevel: medium\n",
      "question": "installation of suspicious packages using system installation utilities",
      "answer": "In order to detect the installation of suspicious packages using system installation utilities, you should monitor for the creation of processes indicative of package management tools commonly found on Linux systems\u2014specifically apt, apt-get, yum, rpm, and dpkg. These tools can be leveraged for innocuous purposes but may also be used maliciously to install software that facilitates an attacker's objectives. Look for command line executions that include 'install' actions associated with these package managers. Additionally, pay special attention to the attempted installation of particularly suspicious packages, which often serve as red flags for potentially malicious activity. Such packages include network scanning tools like nmap, nc (netcat), as well as network traffic analyzers like wireshark and tshark, VPN software such as openconnect, or anonymity tools like proxychains. Monitoring for these activities, especially when they occur in conjunction, raises alerts about potentially unauthorized or malicious installations. It's essential, however, to remember that these detections might sometimes coincide with legitimate administration activities, requiring further investigation to discern the context of these actions accurately. The level of concern attached to such events is considered medium, acknowledging that while they are indicative of suspicious behavior, they are not intrinsically malicious and warrant further investigation to confirm the intentions behind them."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Windows program executable started from a suspicious folder.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a Windows program executable started from a suspicious folder, you should monitor the creation of processes on Windows systems, specifically looking for the execution of common Windows executables from unexpected or non-standard locations. Pay attention to programs such as `svchost.exe`, `rundll32.exe`, `services.exe`, `powershell.exe` and many others, which are legitimate Windows processes but could be indicative of malicious activity if they are started from directories not typically associated with their genuine paths such as `C:\\Windows\\System32\\`, `C:\\Windows\\SysWOW64\\`, or the WinSxS directory.\n\nThe urgency in identifying these executions stems from the practices of attackers, including known threat groups like the Lazarus Group, who might leverage such executables for malicious purposes. For instance, launching `powershell.exe` from an unusual location could be indicative of a script-based attack or unauthorized administrative actions.\n\nTo accurately distinguish between legitimate and potentially malicious executions, it's crucial to exclude commonly trusted paths where these executables are expected to run from, such as the System32 and SysWOW64 folders. Additionally, specific allowances should be made for legitimate but atypical scenarios, like PowerShell launching from its directory in `C:\\Program Files` or WSL processes started properly under `C:\\Program Files\\WindowsApps`.\n\nIt's essential to document information like the computer name, user account, and the path of the executed image to aid in investigation. Bear in mind that certain rare or unconventional software might generate false positives by running these executables from unusual locations. Thus, maintaining a high alert level while accurately filtering legitimate from suspicious activity is necessary in this detection strategy.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith:\n            - '\\svchost.exe'\n            - '\\rundll32.exe'\n            - '\\services.exe'\n            - '\\powershell.exe'\n            - '\\powershell_ise.exe'\n            - '\\pwsh.exe'\n            - '\\regsvr32.exe'\n            - '\\spoolsv.exe'\n            - '\\lsass.exe'\n            - '\\smss.exe'\n            - '\\csrss.exe'\n            - '\\conhost.exe'\n            - '\\wininit.exe'\n            - '\\lsm.exe'\n            - '\\winlogon.exe'\n            - '\\explorer.exe'\n            - '\\taskhost.exe'\n            - '\\Taskmgr.exe'\n            - '\\sihost.exe'\n            - '\\RuntimeBroker.exe'\n            - '\\smartscreen.exe'\n            - '\\dllhost.exe'\n            - '\\audiodg.exe'\n            - '\\wlanext.exe'\n            - '\\dashost.exe'\n            - '\\schtasks.exe'\n            - '\\cscript.exe'\n            - '\\wscript.exe'\n            - '\\wsl.exe'\n            - '\\bitsadmin.exe'\n            - '\\atbroker.exe'\n            - '\\bcdedit.exe'\n            - '\\certutil.exe'\n            - '\\certreq.exe'\n            - '\\cmstp.exe'\n            - '\\consent.exe'\n            - '\\defrag.exe'\n            - '\\dism.exe'\n            - '\\dllhst3g.exe'\n            - '\\eventvwr.exe'\n            - '\\msiexec.exe'\n            - '\\runonce.exe'\n            - '\\winver.exe'\n            - '\\logonui.exe'\n            - '\\userinit.exe'\n            - '\\dwm.exe'\n            - '\\LsaIso.exe'\n            - '\\ntoskrnl.exe'\n            # The below processes were seen used by Lazarus Group - https://asec.ahnlab.com/en/39828/\n            - '\\wsmprovhost.exe'\n            - '\\dfrgui.exe'\n    filter_generic:\n        - Image|startswith:\n            - 'C:\\Windows\\System32\\'\n            - 'C:\\Windows\\SysWOW64\\'\n            - 'C:\\Windows\\WinSxS\\'\n            # - 'C:\\avast! sandbox'\n        - Image|contains: '\\SystemRoot\\System32\\'\n        - Image:\n            - 'C:\\Windows\\explorer.exe'\n            - 'C:\\Program Files\\PowerShell\\7\\pwsh.exe'\n    filter_wsl_windowsapps:\n        Image|startswith: 'C:\\Program Files\\WindowsApps\\MicrosoftCorporationII.WindowsSubsystemForLinux'\n        Image|endswith: '\\wsl.exe'\n    condition: selection and not 1 of filter_*\nfields:\n    - ComputerName\n    - User\n    - Image\nfalsepositives:\n    - Exotic software\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith:\n            - '\\svchost.exe'\n            - '\\rundll32.exe'\n            - '\\services.exe'\n            - '\\powershell.exe'\n            - '\\powershell_ise.exe'\n            - '\\pwsh.exe'\n            - '\\regsvr32.exe'\n            - '\\spoolsv.exe'\n            - '\\lsass.exe'\n            - '\\smss.exe'\n            - '\\csrss.exe'\n            - '\\conhost.exe'\n            - '\\wininit.exe'\n            - '\\lsm.exe'\n            - '\\winlogon.exe'\n            - '\\explorer.exe'\n            - '\\taskhost.exe'\n            - '\\Taskmgr.exe'\n            - '\\sihost.exe'\n            - '\\RuntimeBroker.exe'\n            - '\\smartscreen.exe'\n            - '\\dllhost.exe'\n            - '\\audiodg.exe'\n            - '\\wlanext.exe'\n            - '\\dashost.exe'\n            - '\\schtasks.exe'\n            - '\\cscript.exe'\n            - '\\wscript.exe'\n            - '\\wsl.exe'\n            - '\\bitsadmin.exe'\n            - '\\atbroker.exe'\n            - '\\bcdedit.exe'\n            - '\\certutil.exe'\n            - '\\certreq.exe'\n            - '\\cmstp.exe'\n            - '\\consent.exe'\n            - '\\defrag.exe'\n            - '\\dism.exe'\n            - '\\dllhst3g.exe'\n            - '\\eventvwr.exe'\n            - '\\msiexec.exe'\n            - '\\runonce.exe'\n            - '\\winver.exe'\n            - '\\logonui.exe'\n            - '\\userinit.exe'\n            - '\\dwm.exe'\n            - '\\LsaIso.exe'\n            - '\\ntoskrnl.exe'\n            # The below processes were seen used by Lazarus Group - https://asec.ahnlab.com/en/39828/\n            - '\\wsmprovhost.exe'\n            - '\\dfrgui.exe'\n    filter_generic:\n        - Image|startswith:\n            - 'C:\\Windows\\System32\\'\n            - 'C:\\Windows\\SysWOW64\\'\n            - 'C:\\Windows\\WinSxS\\'\n            # - 'C:\\avast! sandbox'\n        - Image|contains: '\\SystemRoot\\System32\\'\n        - Image:\n            - 'C:\\Windows\\explorer.exe'\n            - 'C:\\Program Files\\PowerShell\\7\\pwsh.exe'\n    filter_wsl_windowsapps:\n        Image|startswith: 'C:\\Program Files\\WindowsApps\\MicrosoftCorporationII.WindowsSubsystemForLinux'\n        Image|endswith: '\\wsl.exe'\n    condition: selection and not 1 of filter_*\nfields:\n    - ComputerName\n    - User\n    - Image\nfalsepositives:\n    - Exotic software\nlevel: high\n",
      "question": "Windows program executable started from a suspicious folder",
      "answer": "In order to detect a Windows program executable started from a suspicious folder, you should monitor the creation of processes on Windows systems, specifically looking for the execution of common Windows executables from unexpected or non-standard locations. Pay attention to programs such as `svchost.exe`, `rundll32.exe`, `services.exe`, `powershell.exe` and many others, which are legitimate Windows processes but could be indicative of malicious activity if they are started from directories not typically associated with their genuine paths such as `C:\\Windows\\System32\\`, `C:\\Windows\\SysWOW64\\`, or the WinSxS directory.\n\nThe urgency in identifying these executions stems from the practices of attackers, including known threat groups like the Lazarus Group, who might leverage such executables for malicious purposes. For instance, launching `powershell.exe` from an unusual location could be indicative of a script-based attack or unauthorized administrative actions.\n\nTo accurately distinguish between legitimate and potentially malicious executions, it's crucial to exclude commonly trusted paths where these executables are expected to run from, such as the System32 and SysWOW64 folders. Additionally, specific allowances should be made for legitimate but atypical scenarios, like PowerShell launching from its directory in `C:\\Program Files` or WSL processes started properly under `C:\\Program Files\\WindowsApps`.\n\nIt's essential to document information like the computer name, user account, and the path of the executed image to aid in investigation. Bear in mind that certain rare or unconventional software might generate false positives by running these executables from unusual locations. Thus, maintaining a high alert level while accurately filtering legitimate from suspicious activity is necessary in this detection strategy."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: proxy\ndetection:\n    selection:\n        cs-method: 'POST'\n        sc-status: 200\n        c-uri|contains|all:\n            - '/owa/'\n            - '/powershell'\n        c-uri|contains:\n            - '@'\n            - '%40'\n    filter:\n        c-useragent:\n            - 'ClientInfo'\n            - 'Microsoft WinRM Client'\n            - 'Exchange BackEnd Probes'\n    condition: selection and not filter\nfalsepositives:\n    - Web vulnerability scanners\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect exploitation attempt of the OWASSRF variant targeting exchange servers It uses the OWA endpoint to access the powershell backend endpoint\n\nHere is how  the given sigma rule operates: In order to detect exploitation attempts of the OWASSRF variant targeting exchange servers which uses the OWA endpoint to access the PowerShell backend endpoint, you should monitor the proxy logs for specific patterns of web requests. Specifically, look for POST requests with a 200 status code, indicating a successful interaction, where the requested URI contains both '/owa/' and '/powershell'. Additionally, these requests might also contain '@' or its URL encoded equivalent '%40'. However, it's important to exclude any requests that have user-agent strings associated with 'ClientInfo', 'Microsoft WinRM Client', or 'Exchange BackEnd Probes', as these are generally legitimate inquiries and not indicative of the OWASSRF attack. These exclusions help reduce false positives, which might arise from activities such as web vulnerability scans. Given the critical nature of this attack method, any detection of such patterns should be treated with a high level of concern and investigated promptly.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: proxy\ndetection:\n    selection:\n        cs-method: 'POST'\n        sc-status: 200\n        c-uri|contains|all:\n            - '/owa/'\n            - '/powershell'\n        c-uri|contains:\n            - '@'\n            - '%40'\n    filter:\n        c-useragent:\n            - 'ClientInfo'\n            - 'Microsoft WinRM Client'\n            - 'Exchange BackEnd Probes'\n    condition: selection and not filter\nfalsepositives:\n    - Web vulnerability scanners\nlevel: high\n",
      "question": "exploitation attempt of the OWASSRF variant targeting exchange servers It uses the OWA endpoint to access the powershell backend endpoint",
      "answer": "In order to detect exploitation attempts of the OWASSRF variant targeting exchange servers which uses the OWA endpoint to access the PowerShell backend endpoint, you should monitor the proxy logs for specific patterns of web requests. Specifically, look for POST requests with a 200 status code, indicating a successful interaction, where the requested URI contains both '/owa/' and '/powershell'. Additionally, these requests might also contain '@' or its URL encoded equivalent '%40'. However, it's important to exclude any requests that have user-agent strings associated with 'ClientInfo', 'Microsoft WinRM Client', or 'Exchange BackEnd Probes', as these are generally legitimate inquiries and not indicative of the OWASSRF attack. These exclusions help reduce false positives, which might arise from activities such as web vulnerability scans. Given the critical nature of this attack method, any detection of such patterns should be treated with a high level of concern and investigated promptly."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Description:\n            - Java Update Scheduler\n            - Java(TM) Update Scheduler\n    filter:\n        Image|endswith: '\\jusched.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect execution of a renamed \"jusched.exe\" as seen used by the cobalt group\n\nHere is how  the given sigma rule operates: In order to detect the execution of a renamed \"jusched.exe\" as seen used by the cobalt group, you should: Focus on monitoring process creation events within Windows environments. Specifically, watch for processes that describe themselves as either \"Java Update Scheduler\" or \"Java(TM) Update Scheduler\". However, it's crucial to exclude any processes that are legitimately named \"jusched.exe\" at the end of their image path, as this is the known legitimate Java Update Scheduler executable. This approach aims to capture scenarios where attackers may attempt to masquerade their malicious process under the guise of the Java Update Scheduler by renaming \"jusched.exe\" to something else to evade detection. Bear in mind, the certainty level of catching such malicious activity with this method is considered high, yet there's an acknowledgment of potential unknown false positives, indicating that detections might not always perfectly align with malicious activities.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Description:\n            - Java Update Scheduler\n            - Java(TM) Update Scheduler\n    filter:\n        Image|endswith: '\\jusched.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "execution of a renamed \"jusched.exe\" as seen used by the cobalt group",
      "answer": "In order to detect the execution of a renamed \"jusched.exe\" as seen used by the cobalt group, you should: Focus on monitoring process creation events within Windows environments. Specifically, watch for processes that describe themselves as either \"Java Update Scheduler\" or \"Java(TM) Update Scheduler\". However, it's crucial to exclude any processes that are legitimately named \"jusched.exe\" at the end of their image path, as this is the known legitimate Java Update Scheduler executable. This approach aims to capture scenarios where attackers may attempt to masquerade their malicious process under the guise of the Java Update Scheduler by renaming \"jusched.exe\" to something else to evade detection. Bear in mind, the certainty level of catching such malicious activity with this method is considered high, yet there's an acknowledgment of potential unknown false positives, indicating that detections might not always perfectly align with malicious activities."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\mshta.exe'\n        CommandLine|contains:\n            - 'vbscript'\n            - '.jpg'\n            - '.png'\n            - '.lnk'\n            # - '.chm'  # could be prone to false positives\n            - '.xls'\n            - '.doc'\n            - '.zip'\n            - '.dll'\n            # - '.exe'\n    condition: selection\nfalsepositives:\n    - False positives depend on scripts and administrative tools used in the monitored environment\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect Detection for mshta.exe suspicious execution patterns sometimes involving file polyglotism\n\nHere is how  the given sigma rule operates: In order to detect mshta.exe suspicious execution patterns sometimes involving file polyglotism, you should: Monitor Windows process creation logs for the launch of the Microsoft HTML Application Host (mshta.exe) with a focus on command lines that include references to file types typically associated with legitimate documents or media, such as 'vbscript', '.jpg', '.png', '.lnk', '.xls', '.doc', '.zip', and '.dll'. The presence of these file types in the command line arguments of mshta.exe might indicate an attempt to disguise malicious scripts or payloads within these seemingly innocuous files, exploiting mshta.exe to execute potentially harmful code without raising immediate suspicion. It is crucial to be aware that the reliable identification of such activities may vary depending on the specific scripts and administrative tools employed within the environment being monitored. This monitoring strategy is deemed to have a high importance level due to the sophisticated nature of the threat and the potential for severe impact if not detected timely.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\mshta.exe'\n        CommandLine|contains:\n            - 'vbscript'\n            - '.jpg'\n            - '.png'\n            - '.lnk'\n            # - '.chm'  # could be prone to false positives\n            - '.xls'\n            - '.doc'\n            - '.zip'\n            - '.dll'\n            # - '.exe'\n    condition: selection\nfalsepositives:\n    - False positives depend on scripts and administrative tools used in the monitored environment\nlevel: high\n",
      "question": "Detection for mshta.exe suspicious execution patterns sometimes involving file polyglotism",
      "answer": "In order to detect mshta.exe suspicious execution patterns sometimes involving file polyglotism, you should: Monitor Windows process creation logs for the launch of the Microsoft HTML Application Host (mshta.exe) with a focus on command lines that include references to file types typically associated with legitimate documents or media, such as 'vbscript', '.jpg', '.png', '.lnk', '.xls', '.doc', '.zip', and '.dll'. The presence of these file types in the command line arguments of mshta.exe might indicate an attempt to disguise malicious scripts or payloads within these seemingly innocuous files, exploiting mshta.exe to execute potentially harmful code without raising immediate suspicion. It is crucial to be aware that the reliable identification of such activities may vary depending on the specific scripts and administrative tools employed within the environment being monitored. This monitoring strategy is deemed to have a high importance level due to the sophisticated nature of the threat and the potential for severe impact if not detected timely."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\register-cimprovider.exe'\n        CommandLine|contains|all:\n            - '-path'\n            - 'dll'\n    condition: selection\nfields:\n    - CommandLine\nfalsepositives:\n    - Unknown\nlevel: medium\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect using register-cimprovider.exe to execute arbitrary dll file.\n\nHere is how  the given sigma rule operates: In order to detect using register-cimprovider.exe to execute arbitrary dll file, you should: Focus on monitoring process creation events within Windows environments. Specifically, look for the execution of 'register-cimprovider.exe' where the command line arguments include both '-path' and 'dll', indicating an attempt to execute an arbitrary DLL file. These detections are essential for identifying potentially malicious activities related to the execution of unauthorized code. It's important to log the command line parameters involved in such executions to aid in investigation. However, be aware that there might be legitimate uses that could trigger false positives, although they are unknown; therefore, a medium level of attention should be paid to such events.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\register-cimprovider.exe'\n        CommandLine|contains|all:\n            - '-path'\n            - 'dll'\n    condition: selection\nfields:\n    - CommandLine\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "using register-cimprovider.exe to execute arbitrary dll file.",
      "answer": "In order to detect using register-cimprovider.exe to execute arbitrary dll file, you should: Focus on monitoring process creation events within Windows environments. Specifically, look for the execution of 'register-cimprovider.exe' where the command line arguments include both '-path' and 'dll', indicating an attempt to execute an arbitrary DLL file. These detections are essential for identifying potentially malicious activities related to the execution of unauthorized code. It's important to log the command line parameters involved in such executions to aid in investigation. However, be aware that there might be legitimate uses that could trigger false positives, although they are unknown; therefore, a medium level of attention should be paid to such events."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_get:\n        CommandLine|contains:\n            - 'Get-WmiObject'\n            - 'gwmi'\n            - 'Get-CimInstance'\n            - 'gcim'\n    selection_shadowcopy:\n        CommandLine|contains: 'Win32_Shadowcopy'\n    selection_delete:\n        CommandLine|contains:\n            - '.Delete()'\n            - 'Remove-WmiObject'\n            - 'rwmi'\n            - 'Remove-CimInstance'\n            - 'rcim'\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect deletion of Windows Volume Shadow Copies with PowerShell code and Get-WMIObject. This technique is used by numerous ransomware families such as Sodinokibi/REvil\n\nHere is how  the given sigma rule operates: In order to detect deletion of Windows Volume Shadow Copies with PowerShell code and Get-WMIObject, a technique used by numerous ransomware families such as Sodinokibi/REvil, you should: Monitor Windows process creation logs for the execution of specific PowerShell commands that indicate the manipulation and deletion of Volume Shadow Copies. Pay attention to command lines that contain 'Get-WmiObject', 'gwmi', 'Get-CimInstance', 'gcim', which are used to interact with Windows Management Instrumentation (WMI) objects, and specifically look for command lines that invoke 'Win32_Shadowcopy' indicating shadow copy interaction. Moreover, closely monitor for command lines including '.Delete()', 'Remove-WmiObject', 'rwmi', 'Remove-CimInstance', and 'rcim', as these are indicative of attempts to delete these shadow copies. The use of such commands should be treated with high suspicion as they can often relate to ransomware or other malicious activities aimed at preventing system recovery. False positives might occur, but due to the nature of the activity \u2013 a high level of scrutiny is recommended when such patterns are detected.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_get:\n        CommandLine|contains:\n            - 'Get-WmiObject'\n            - 'gwmi'\n            - 'Get-CimInstance'\n            - 'gcim'\n    selection_shadowcopy:\n        CommandLine|contains: 'Win32_Shadowcopy'\n    selection_delete:\n        CommandLine|contains:\n            - '.Delete()'\n            - 'Remove-WmiObject'\n            - 'rwmi'\n            - 'Remove-CimInstance'\n            - 'rcim'\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "deletion of Windows Volume Shadow Copies with PowerShell code and Get-WMIObject. This technique is used by numerous ransomware families such as Sodinokibi/REvil",
      "answer": "In order to detect deletion of Windows Volume Shadow Copies with PowerShell code and Get-WMIObject, a technique used by numerous ransomware families such as Sodinokibi/REvil, you should: Monitor Windows process creation logs for the execution of specific PowerShell commands that indicate the manipulation and deletion of Volume Shadow Copies. Pay attention to command lines that contain 'Get-WmiObject', 'gwmi', 'Get-CimInstance', 'gcim', which are used to interact with Windows Management Instrumentation (WMI) objects, and specifically look for command lines that invoke 'Win32_Shadowcopy' indicating shadow copy interaction. Moreover, closely monitor for command lines including '.Delete()', 'Remove-WmiObject', 'rwmi', 'Remove-CimInstance', and 'rcim', as these are indicative of attempts to delete these shadow copies. The use of such commands should be treated with high suspicion as they can often relate to ransomware or other malicious activities aimed at preventing system recovery. False positives might occur, but due to the nature of the activity \u2013 a high level of scrutiny is recommended when such patterns are detected."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Obfuscated use of Environment Variables to execute PowerShell.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect obfuscated use of environment variables to execute PowerShell, you should focus on monitoring process creation events on Windows systems. Look for the activation of the command line interface (`cmd.exe`) with specific patterns that indicate an attempt to hide the true nature of the commands being executed. Specifically, watch for commands that include sequences such as \"cmd\", \"/c\" or \"/r\", followed closely by a \"set\" command. The presence of the \"-f\" argument within these commands is another critical indicator. \n\nThese command lines often involve complex expressions that dynamically construct and execute PowerShell commands, making use of environment variables in a way that is not straightforward. The intention is to bypass detection mechanisms by disguising the command's functionality. This technique might include the downloading and execution of malicious scripts through PowerShell, initiated in an obscured manner via the command line interface.\n\nIt's important to consider any matches to these patterns with a high level of suspicion, although there's a possibility of encountering scenarios where similar commands are used for legitimate purposes (though such cases may be rare). As these activities are directly related to techniques used for execution and defense evasion, they are associated with MITRE ATT&CK tactics such as Execution and Defense Evasion. \n\nMonitoring for these patterns requires a vigilant approach to analyzing process creation logs and a readiness to investigate occurrences that match these criteria, given the high potential for these actions to be part of a malicious operation.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        # CommandLine|re: '.*cmd.{0,5}(?:\\/c|\\/r)(?:\\s|)\\\"set\\s[a-zA-Z]{3,6}.*(?:\\{\\d\\}){1,}\\\\\\\"\\s+?\\-f(?:.*\\)){1,}.*\\\"'\n        # Example 1: C:\\winDoWs\\SySTeM32\\cmd.Exe /C\"SET NOtI=Invoke-Expression (New-Object Net.WebClient).DownloadString&& PowERshElL -NOl SET-iteM ( 'VAR' + 'i'+ 'A' + 'blE:Ao6' + 'I0') ( [TYpe](\\\"{2}{3}{0}{1}\\\"-F 'iRoN','mENT','e','nv') ) ; ${exECUtIONCOnTEXT}.\\\"IN`VO`KecOmMaND\\\".\\\"inVo`KES`crIPt\\\"( ( ( GEt-VAriAble ( 'a' + 'o6I0') -vaLU )::(\\\"{1}{4}{2}{3}{0}\\\" -f'e','gETenvIR','NtvaRIa','BL','ONme' ).Invoke(( \\\"{0}{1}\\\"-f'n','oti' ),( \\\"{0}{1}\\\" -f'pRoC','esS') )) )\"\n        # Example 2: cMD.exe /C \"seT SlDb=Invoke-Expression (New-Object Net.WebClient).DownloadString&& pOWErShell .(( ^&(\\\"{1}{0}{2}{3}\\\" -f 'eT-vaR','G','iab','lE' ) (\\\"{0}{1}\\\" -f '*m','DR*' ) ).\\\"na`ME\\\"[3,11,2]-JOIN'' ) ( ( ^&(\\\"{0}{1}\\\" -f'g','CI' ) (\\\"{0}{1}\\\" -f 'ENV',':SlDb' ) ).\\\"VA`luE\\\" ) \"\n        CommandLine|contains|all:\n            - 'cmd'\n            - '\"set'\n            - '-f'\n        CommandLine|contains:\n            - '/c'\n            - '/r'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        # CommandLine|re: '.*cmd.{0,5}(?:\\/c|\\/r)(?:\\s|)\\\"set\\s[a-zA-Z]{3,6}.*(?:\\{\\d\\}){1,}\\\\\\\"\\s+?\\-f(?:.*\\)){1,}.*\\\"'\n        # Example 1: C:\\winDoWs\\SySTeM32\\cmd.Exe /C\"SET NOtI=Invoke-Expression (New-Object Net.WebClient).DownloadString&& PowERshElL -NOl SET-iteM ( 'VAR' + 'i'+ 'A' + 'blE:Ao6' + 'I0') ( [TYpe](\\\"{2}{3}{0}{1}\\\"-F 'iRoN','mENT','e','nv') ) ; ${exECUtIONCOnTEXT}.\\\"IN`VO`KecOmMaND\\\".\\\"inVo`KES`crIPt\\\"( ( ( GEt-VAriAble ( 'a' + 'o6I0') -vaLU )::(\\\"{1}{4}{2}{3}{0}\\\" -f'e','gETenvIR','NtvaRIa','BL','ONme' ).Invoke(( \\\"{0}{1}\\\"-f'n','oti' ),( \\\"{0}{1}\\\" -f'pRoC','esS') )) )\"\n        # Example 2: cMD.exe /C \"seT SlDb=Invoke-Expression (New-Object Net.WebClient).DownloadString&& pOWErShell .(( ^&(\\\"{1}{0}{2}{3}\\\" -f 'eT-vaR','G','iab','lE' ) (\\\"{0}{1}\\\" -f '*m','DR*' ) ).\\\"na`ME\\\"[3,11,2]-JOIN'' ) ( ( ^&(\\\"{0}{1}\\\" -f'g','CI' ) (\\\"{0}{1}\\\" -f 'ENV',':SlDb' ) ).\\\"VA`luE\\\" ) \"\n        CommandLine|contains|all:\n            - 'cmd'\n            - '\"set'\n            - '-f'\n        CommandLine|contains:\n            - '/c'\n            - '/r'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Obfuscated use of Environment Variables to execute PowerShell",
      "answer": "In order to detect obfuscated use of environment variables to execute PowerShell, you should focus on monitoring process creation events on Windows systems. Look for the activation of the command line interface (`cmd.exe`) with specific patterns that indicate an attempt to hide the true nature of the commands being executed. Specifically, watch for commands that include sequences such as \"cmd\", \"/c\" or \"/r\", followed closely by a \"set\" command. The presence of the \"-f\" argument within these commands is another critical indicator. \n\nThese command lines often involve complex expressions that dynamically construct and execute PowerShell commands, making use of environment variables in a way that is not straightforward. The intention is to bypass detection mechanisms by disguising the command's functionality. This technique might include the downloading and execution of malicious scripts through PowerShell, initiated in an obscured manner via the command line interface.\n\nIt's important to consider any matches to these patterns with a high level of suspicion, although there's a possibility of encountering scenarios where similar commands are used for legitimate purposes (though such cases may be rare). As these activities are directly related to techniques used for execution and defense evasion, they are associated with MITRE ATT&CK tactics such as Execution and Defense Evasion. \n\nMonitoring for these patterns requires a vigilant approach to analyzing process creation logs and a readiness to investigate occurrences that match these criteria, given the high potential for these actions to be part of a malicious operation."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting network enumeration performed on AWS..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect network enumeration performed on AWS, you should monitor AWS CloudTrail logs for specific activities that indicate attempts to gather information about the network environment. Specifically, look for multiple (more than five within a 10-minute window) API calls to ec2.amazonaws.com, especially those calling methods such as 'DescribeCarrierGateways', 'DescribeVpcEndpointConnectionNotifications', 'DescribeTransitGatewayMulticastDomains', 'DescribeClientVpnRoutes', 'DescribeDhcpOptions', and 'GetTransitGatewayRouteTableAssociations'. These activities can suggest that an attacker is trying to map out the network, identifying key components and connections that could be leveraged for further attacks or exploitation. However, keep in mind that there could be unknown legitimate reasons for such activities, hence they are initially considered to have a low level of threat. Nonetheless, continuous monitoring of these patterns is essential for maintaining the security posture and detecting potential reconnaissance efforts as part of broader adversarial tactics.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: aws\n    service: cloudtrail\ndetection:\n    selection:\n        eventSource: 'ec2.amazonaws.com'\n        eventName:\n            - 'DescribeCarrierGateways'\n            - 'DescribeVpcEndpointConnectionNotifications'\n            - 'DescribeTransitGatewayMulticastDomains'\n            - 'DescribeClientVpnRoutes'\n            - 'DescribeDhcpOptions'\n            - 'GetTransitGatewayRouteTableAssociations'\n    timeframe: 10m\n    condition: selection | count() > 5\nfalsepositives:\n    - Unknown\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: aws\n    service: cloudtrail\ndetection:\n    selection:\n        eventSource: 'ec2.amazonaws.com'\n        eventName:\n            - 'DescribeCarrierGateways'\n            - 'DescribeVpcEndpointConnectionNotifications'\n            - 'DescribeTransitGatewayMulticastDomains'\n            - 'DescribeClientVpnRoutes'\n            - 'DescribeDhcpOptions'\n            - 'GetTransitGatewayRouteTableAssociations'\n    timeframe: 10m\n    condition: selection | count() > 5\nfalsepositives:\n    - Unknown\nlevel: low\n",
      "question": "network enumeration performed on AWS.",
      "answer": "In order to detect network enumeration performed on AWS, you should monitor AWS CloudTrail logs for specific activities that indicate attempts to gather information about the network environment. Specifically, look for multiple (more than five within a 10-minute window) API calls to ec2.amazonaws.com, especially those calling methods such as 'DescribeCarrierGateways', 'DescribeVpcEndpointConnectionNotifications', 'DescribeTransitGatewayMulticastDomains', 'DescribeClientVpnRoutes', 'DescribeDhcpOptions', and 'GetTransitGatewayRouteTableAssociations'. These activities can suggest that an attacker is trying to map out the network, identifying key components and connections that could be leveraged for further attacks or exploitation. However, keep in mind that there could be unknown legitimate reasons for such activities, hence they are initially considered to have a low level of threat. Nonetheless, continuous monitoring of these patterns is essential for maintaining the security posture and detecting potential reconnaissance efforts as part of broader adversarial tactics."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting changes to environment variables related to ETW logging. This could indicate potential adversaries stopping ETW providers recording loaded .NET assemblies..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect changes to environment variables related to ETW logging, which could indicate potential adversaries stopping ETW providers from recording loaded .NET assemblies, you should: monitor the creation of processes on Windows systems, specifically looking for the presence of 'COMPlus_ETWEnabled' or 'COMPlus_ETWFlags' in the command line arguments. These particular strings are associated with environment variables that control ETW (Event Tracing for Windows) logging settings for .NET applications. A change or manipulation of these could suggest an attempt to evade detection by disabling logging of .NET assembly loads. Such activities are considered highly suspicious and are unlikely to produce false positives, highlighting the significance of detecting these specific command line arguments.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - 'COMPlus_ETWEnabled'\n            - 'COMPlus_ETWFlags'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - 'COMPlus_ETWEnabled'\n            - 'COMPlus_ETWFlags'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "changes to environment variables related to ETW logging. This could indicate potential adversaries stopping ETW providers recording loaded .NET assemblies.",
      "answer": "In order to detect changes to environment variables related to ETW logging, which could indicate potential adversaries stopping ETW providers from recording loaded .NET assemblies, you should: monitor the creation of processes on Windows systems, specifically looking for the presence of 'COMPlus_ETWEnabled' or 'COMPlus_ETWFlags' in the command line arguments. These particular strings are associated with environment variables that control ETW (Event Tracing for Windows) logging settings for .NET applications. A change or manipulation of these could suggest an attempt to evade detection by disabling logging of .NET assembly loads. Such activities are considered highly suspicious and are unlikely to produce false positives, highlighting the significance of detecting these specific command line arguments."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Adversaries may look for folders and drives shared on remote systems as a means of identifying sources of information to gather as\na precursor for Collection and to identify potential systems of interest for Lateral Movement.\nNetworks often contain shared network drives and folders that enable users to access file directories on various systems across a network.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to identify adversaries looking for folders and drives shared on remote systems as a means of finding information sources for collection and spotting potential targets for lateral movement, you should monitor Windows PowerShell script logs, specifically focusing on instances where the command `get-smbshare` is used. This command is usually employed to retrieve shared folders and drives on the network, which could indicate someone is scanning for shared resources. Enabling Script Block Logging on Windows systems is essential for capturing the relevant details needed for this detection. It's important to note that while this method of detection has a low level of false positives, unanticipated or unknown benign activities could trigger an alert. This approach aligns with understanding tactics related to Discovery and Lateral Movement by looking for techniques that involve collection from remote systems and movement within the network.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains: get-smbshare\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains: get-smbshare\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low\n",
      "question": "Adversaries may look for folders and drives shared on remote systems as a means of identifying sources of information to gather as\na precursor for Collection and to identify potential systems of interest for Lateral Movement.\nNetworks often contain shared network drives and folders that enable users to access file directories on various systems across a network.\n",
      "answer": "In order to identify adversaries looking for folders and drives shared on remote systems as a means of finding information sources for collection and spotting potential targets for lateral movement, you should monitor Windows PowerShell script logs, specifically focusing on instances where the command `get-smbshare` is used. This command is usually employed to retrieve shared folders and drives on the network, which could indicate someone is scanning for shared resources. Enabling Script Block Logging on Windows systems is essential for capturing the relevant details needed for this detection. It's important to note that while this method of detection has a low level of false positives, unanticipated or unknown benign activities could trigger an alert. This approach aligns with understanding tactics related to Discovery and Lateral Movement by looking for techniques that involve collection from remote systems and movement within the network."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: bade5735-5ab0-4aa7-a642-a11be0e40872\ndetection:\n    selection_cmdlet:\n        ScriptBlockText|contains:\n            - 'Invoke-WebRequest'\n            - 'iwr '\n    selection_flag:\n        ScriptBlockText|contains:\n            - '-Method Put'\n            - '-Method Post'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: low\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect PowerShell scripts leveraging the \"Invoke-WebRequest\" cmdlet to send data via either \"PUT\" or \"POST\" method.\n\nHere is how  the given sigma rule operates: In order to detect PowerShell scripts leveraging the \"Invoke-WebRequest\" cmdlet to send data via either \"PUT\" or \"POST\" method, you should monitor Windows PowerShell script activities for indications of \"Invoke-WebRequest\" or its alias \"iwr \" being used. Specifically, focus on identifying scripts where the ScriptBlockText contains either of these keywords in conjunction with the flags \"-Method Put\" or \"-Method Post\", indicating an attempt to send data. The analysis of PowerShell script logs under the category of 'ps_script' is crucial here. Be aware that, while this strategy is tailored to catch suspicious activities indicating potentially malicious data exfiltration or command and control communication, there can be false positives due to the legitimate use of these methods in administrative scripts. Therefore, while the detection confidence is considered low, it's an essential part of a broader set of monitoring tools to ensure no unauthorized data sending or receiving occurs through PowerShell scripts within a Windows environment.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: bade5735-5ab0-4aa7-a642-a11be0e40872\ndetection:\n    selection_cmdlet:\n        ScriptBlockText|contains:\n            - 'Invoke-WebRequest'\n            - 'iwr '\n    selection_flag:\n        ScriptBlockText|contains:\n            - '-Method Put'\n            - '-Method Post'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: low\n",
      "question": "PowerShell scripts leveraging the \"Invoke-WebRequest\" cmdlet to send data via either \"PUT\" or \"POST\" method.",
      "answer": "In order to detect PowerShell scripts leveraging the \"Invoke-WebRequest\" cmdlet to send data via either \"PUT\" or \"POST\" method, you should monitor Windows PowerShell script activities for indications of \"Invoke-WebRequest\" or its alias \"iwr \" being used. Specifically, focus on identifying scripts where the ScriptBlockText contains either of these keywords in conjunction with the flags \"-Method Put\" or \"-Method Post\", indicating an attempt to send data. The analysis of PowerShell script logs under the category of 'ps_script' is crucial here. Be aware that, while this strategy is tailored to catch suspicious activities indicating potentially malicious data exfiltration or command and control communication, there can be false positives due to the legitimate use of these methods in administrative scripts. Therefore, while the detection confidence is considered low, it's an essential part of a broader set of monitoring tools to ensure no unauthorized data sending or receiving occurs through PowerShell scripts within a Windows environment."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    product: windows\n    category: driver_load\ndetection:\n    selection:\n        ImageLoaded|endswith:\n            - '\\mtcbsv64.sys'\n            - '\\bs_def64.sys'\n            - '\\gameink.sys'\n            - '\\81.sys'\n            - '\\bs_rcio.sys'\n            - '\\sense5ext.sys'\n            - '\\asrdrv10.sys'\n            - '\\gvcidrv64.sys'\n            - '\\wantd_5.sys'\n            - '\\driver7-x86-withoutdbg.sys'\n            - '\\atillk64.sys'\n            - '\\lurker.sys'\n            - '\\segwindrvx64.sys'\n            - '\\nt3.sys'\n            - '\\enetechio64.sys'\n            - '\\asio64.sys'\n            - '\\inpoutx64.sys'\n            - '\\windows8-10-32.sys'\n            - '\\directio.sys'\n            - '\\rtkio.sys'\n            - '\\corsairllaccess64.sys'\n            - '\\nt6.sys'\n            - '\\winflash64.sys'\n            - '\\paniox64.sys'\n            - '\\blackbonedrv10.sys'\n            - '\\msio32.sys'\n            - '\\fiddrv.sys'\n            - '\\asio.sys'\n            - '\\dbutildrv2.sys'\n            - '\\my.sys'\n            - '\\wantd_3.sys'\n            - '\\winio32a.sys'\n            - '\\wyproxy64.sys'\n            - '\\ni.sys'\n            - '\\bs_i2cio.sys'\n            - '\\kprocesshacker.sys'\n            - '\\protects.sys'\n            - '\\phymem64.sys'\n            - '\\proxy32.sys'\n            - '\\b.sys'\n            - '\\netproxydriver.sys'\n            - '\\bs_hwmio64_w10.sys'\n            - '\\physmem.sys'\n            - '\\asrsmartconnectdrv.sys'\n            - '\\b3.sys'\n            - '\\monitor_win10_x64.sys'\n            - '\\poortry2.sys'\n            - '\\amdryzenmasterdriver.sys'\n            - '\\t.sys'\n            - '\\sandra.sys'\n            - '\\bsmix64.sys'\n            - '\\bs_i2c64.sys'\n            - '\\wantd_6.sys'\n            - '\\bs_rcio64.sys'\n            - '\\zam64.sys'\n            - '\\viragt64.sys'\n            - '\\winio32b.sys'\n            - '\\poortry1.sys'\n            - '\\msio64.sys'\n            - '\\winio32.sys'\n            - '\\ncpl.sys'\n            - '\\nchgbios2x64.sys'\n            - '\\bwrsh.sys'\n            - '\\panio.sys'\n            - '\\lha.sys'\n            - '\\ntbios.sys'\n            - '\\blacklotus_driver.sys'\n            - '\\fidpcidrv.sys'\n            - '\\b4.sys'\n            - '\\mhyprot3.sys'\n            - '\\ucorew64.sys'\n            - '\\hwos2ec7x64.sys'\n            - '\\bsmemx64.sys'\n            - '\\windows7-32.sys'\n            - '\\asrdrv106.sys'\n            - '\\elbycdio.sys'\n            - '\\iomem64.sys'\n            - '\\asupio.sys'\n            - '\\otipcibus.sys'\n            - '\\windows-xp-64.sys'\n            - '\\aswarpot.sys'\n            - '\\amdpowerprofiler.sys'\n            - '\\d.sys'\n            - '\\2.sys'\n            - '\\tgsafe.sys'\n            - '\\ntiolib_x64.sys'\n            - '\\asrrapidstartdrv.sys'\n            - '\\1.sys'\n            - '\\hwos2ec10x64.sys'\n            - '\\daxin_blank5.sys'\n            - '\\viraglt64.sys'\n            - '\\iomap64.sys'\n            - '\\lv561av.sys'\n            - '\\nscm.sys'\n            - '\\c.sys'\n            - '\\asribdrv.sys'\n            - '\\b1.sys'\n            - '\\eneio64.sys'\n            - '\\capcom.sys'\n            - '\\80.sys'\n            - '\\asio32.sys'\n            - '\\iobitunlocker.sys'\n            - '\\zamguard64.sys'\n            - '\\nstrwsk.sys'\n            - '\\wiseunlo.sys'\n            - '\\t7.sys'\n            - '\\bs_hwmio64.sys'\n            - '\\hostnt.sys'\n            - '\\glckio2.sys'\n            - '\\hpportiox64.sys'\n            - '\\citmdrv_amd64.sys'\n            - '\\kevp64.sys'\n            - '\\bsmixp64.sys'\n            - '\\nbiolib_x64.sys'\n            - '\\d3.sys'\n            - '\\full.sys'\n            - '\\nvflash.sys'\n            - '\\rtcore64.sys'\n            - '\\speedfan.sys'\n            - '\\fidpcidrv64.sys'\n            - '\\hwrwdrv.sys'\n            - '\\msrhook.sys'\n            - '\\proxy64.sys'\n            - '\\7.sys'\n            - '\\winring0.sys'\n            - '\\hw_sys'\n            - '\\winio64b.sys'\n            - '\\semav6msr64.sys'\n            - '\\bandai.sys'\n            - '\\piddrv.sys'\n            - '\\t8.sys'\n            - '\\asrdrv103.sys'\n            - '\\adv64drv.sys'\n            - '\\asrsetupdrv103.sys'\n            - '\\bwrs.sys'\n            - '\\d4.sys'\n            - '\\dbk64.sys'\n            - '\\fiddrv64.sys'\n            - '\\goad.sys'\n            - '\\gametersafe.sys'\n            - '\\mhyprot2.sys'\n            - '\\lenovodiagnosticsdriver.sys'\n            - '\\netflt.sys'\n            - '\\bw.sys'\n            - '\\ntbios_2.sys'\n            - '\\dbutil.sys'\n            - '\\dh_kernel.sys'\n            - '\\rtkiow8x64.sys'\n            - '\\daxin_blank.sys'\n            - '\\superbmc.sys'\n            - '\\nodedriver.sys'\n            - '\\cpuz141.sys'\n            - '\\gftkyj64.sys'\n            - '\\d2.sys'\n            - '\\4.sys'\n            - '\\dh_kernel_10.sys'\n            - '\\naldrv.sys'\n            - '\\winiodrv.sys'\n            - '\\asmmap64.sys'\n            - '\\smep_namco.sys'\n            - '\\mhyprot.sys'\n            - '\\iqvw64e.sys'\n            - '\\nstr.sys'\n            - '\\ntiolib.sys'\n            - '\\pciecubed.sys'\n            - '\\vmdrv.sys'\n            - '\\daxin_blank2.sys'\n            - '\\atszio.sys'\n            - '\\agent64.sys'\n            - '\\cpupress.sys'\n            - '\\driver7-x86.sys'\n            - '\\krpocesshacker.sys'\n            - '\\asrdrv102.sys'\n            - '\\aswvmm.sys'\n            - '\\tmcomm.sys'\n            - '\\bs_def.sys'\n            - '\\bsmi.sys'\n            - '\\alsysio64.sys'\n            - '\\cpuz.sys'\n            - '\\daxin_blank1.sys'\n            - '\\amifldrv64.sys'\n            - '\\rwdrv.sys'\n            - '\\testbone.sys'\n            - '\\winio64c.sys'\n            - '\\winring0x64.sys'\n            - '\\nt4.sys'\n            - '\\procexp.sys'\n            - '\\winio64.sys'\n            - '\\se64a.sys'\n            - '\\air_system10.sys'\n            - '\\wantd.sys'\n            - '\\wcpu.sys'\n            - '\\nicm.sys'\n            - '\\daxin_blank6.sys'\n            - '\\kbdcap64.sys'\n            - '\\lctka.sys'\n            - '\\nvflsh64.sys'\n            - '\\phlashnt.sys'\n            - '\\viragt.sys'\n            - '\\atszio64.sys'\n            - '\\dbutil_2_3.sys'\n            - '\\phymemx64.sys'\n            - '\\wantd_4.sys'\n            - '\\ndislan.sys'\n            - '\\panmonfltx64.sys'\n            - '\\t3.sys'\n            - '\\panmonflt.sys'\n            - '\\daxin_blank3.sys'\n            - '\\gdrv.sys'\n            - '\\smep_capcom.sys'\n            - '\\wyproxy32.sys'\n            - '\\black.sys'\n            - '\\vboxdrv.sys'\n            - '\\cpuz_x64.sys'\n            - '\\poortry.sys'\n            - '\\mydrivers.sys'\n            - '\\winio64a.sys'\n            - '\\openlibsys.sys'\n            - '\\bs_flash64.sys'\n            - '\\vproeventmonitor.sys'\n            - '\\piddrv64.sys'\n            - '\\wantd_2.sys'\n            - '\\sysinfo.sys'\n            - '\\asrdrv104.sys'\n            - '\\netfilterdrv.sys'\n            - '\\libnicm.sys'\n            - '\\driver7-x64.sys'\n            - '\\semav6msr.sys'\n            - '\\pchunter.sys'\n            - '\\asupio64.sys'\n            - '\\rtkio64.sys'\n            - '\\rzpnk.sys'\n            - '\\magdrvamd64.sys'\n            - '\\elrawdsk.sys'\n            - '\\amp.sys'\n            - '\\asrautochkupddrv.sys'\n            - '\\lgdcatcher.sys'\n            - '\\fairplaykd.sys'\n            - '\\daxin_blank4.sys'\n            - '\\rtkiow10x64.sys'\n            - '\\citmdrv_ia64.sys'\n            - '\\nt5.sys'\n            - '\\asromgdrv.sys'\n            - '\\nt2.sys'\n            - '\\asrdrv101.sys'\n    condition: selection\nfalsepositives:\n    - False positives may occur if one of the vulnerable driver names mentioned above didn't change its name between versions. So always make sure that the driver being loaded is the legitimate one and the non vulnerable version.\n    - If you experience a lot of FP you could comment the driver name or its exact known legitimate location (when possible)\nlevel: medium\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect load of known vulnerable drivers via their names only.\n\nHere is how  the given sigma rule operates: In order to detect the load of known vulnerable drivers via their names only, you should monitor driver load activities on Windows operating systems for any instances where specific file names, associated with vulnerable drivers, are being loaded. These file names include a broad list, such as \u2018mtcbsv64.sys\u2019, \u2018bs_def64.sys\u2019, \u2018gameink.sys\u2019, and many others, which might indicate a potentially malicious activity if these files are being used exploitatively due to their known vulnerabilities. It is crucial to be aware that some false positives may occur, especially if a legitimate driver shares a name with one listed without having updated its name across versions. Ensuring the drivers being loaded are the legitimate and non-vulnerable versions is essential to accurately distinguish between genuine and malicious activities. The detection is tagged under tactics that often involve the exploitation of these vulnerabilities to execute code or perform actions with malicious intent.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: driver_load\ndetection:\n    selection:\n        ImageLoaded|endswith:\n            - '\\mtcbsv64.sys'\n            - '\\bs_def64.sys'\n            - '\\gameink.sys'\n            - '\\81.sys'\n            - '\\bs_rcio.sys'\n            - '\\sense5ext.sys'\n            - '\\asrdrv10.sys'\n            - '\\gvcidrv64.sys'\n            - '\\wantd_5.sys'\n            - '\\driver7-x86-withoutdbg.sys'\n            - '\\atillk64.sys'\n            - '\\lurker.sys'\n            - '\\segwindrvx64.sys'\n            - '\\nt3.sys'\n            - '\\enetechio64.sys'\n            - '\\asio64.sys'\n            - '\\inpoutx64.sys'\n            - '\\windows8-10-32.sys'\n            - '\\directio.sys'\n            - '\\rtkio.sys'\n            - '\\corsairllaccess64.sys'\n            - '\\nt6.sys'\n            - '\\winflash64.sys'\n            - '\\paniox64.sys'\n            - '\\blackbonedrv10.sys'\n            - '\\msio32.sys'\n            - '\\fiddrv.sys'\n            - '\\asio.sys'\n            - '\\dbutildrv2.sys'\n            - '\\my.sys'\n            - '\\wantd_3.sys'\n            - '\\winio32a.sys'\n            - '\\wyproxy64.sys'\n            - '\\ni.sys'\n            - '\\bs_i2cio.sys'\n            - '\\kprocesshacker.sys'\n            - '\\protects.sys'\n            - '\\phymem64.sys'\n            - '\\proxy32.sys'\n            - '\\b.sys'\n            - '\\netproxydriver.sys'\n            - '\\bs_hwmio64_w10.sys'\n            - '\\physmem.sys'\n            - '\\asrsmartconnectdrv.sys'\n            - '\\b3.sys'\n            - '\\monitor_win10_x64.sys'\n            - '\\poortry2.sys'\n            - '\\amdryzenmasterdriver.sys'\n            - '\\t.sys'\n            - '\\sandra.sys'\n            - '\\bsmix64.sys'\n            - '\\bs_i2c64.sys'\n            - '\\wantd_6.sys'\n            - '\\bs_rcio64.sys'\n            - '\\zam64.sys'\n            - '\\viragt64.sys'\n            - '\\winio32b.sys'\n            - '\\poortry1.sys'\n            - '\\msio64.sys'\n            - '\\winio32.sys'\n            - '\\ncpl.sys'\n            - '\\nchgbios2x64.sys'\n            - '\\bwrsh.sys'\n            - '\\panio.sys'\n            - '\\lha.sys'\n            - '\\ntbios.sys'\n            - '\\blacklotus_driver.sys'\n            - '\\fidpcidrv.sys'\n            - '\\b4.sys'\n            - '\\mhyprot3.sys'\n            - '\\ucorew64.sys'\n            - '\\hwos2ec7x64.sys'\n            - '\\bsmemx64.sys'\n            - '\\windows7-32.sys'\n            - '\\asrdrv106.sys'\n            - '\\elbycdio.sys'\n            - '\\iomem64.sys'\n            - '\\asupio.sys'\n            - '\\otipcibus.sys'\n            - '\\windows-xp-64.sys'\n            - '\\aswarpot.sys'\n            - '\\amdpowerprofiler.sys'\n            - '\\d.sys'\n            - '\\2.sys'\n            - '\\tgsafe.sys'\n            - '\\ntiolib_x64.sys'\n            - '\\asrrapidstartdrv.sys'\n            - '\\1.sys'\n            - '\\hwos2ec10x64.sys'\n            - '\\daxin_blank5.sys'\n            - '\\viraglt64.sys'\n            - '\\iomap64.sys'\n            - '\\lv561av.sys'\n            - '\\nscm.sys'\n            - '\\c.sys'\n            - '\\asribdrv.sys'\n            - '\\b1.sys'\n            - '\\eneio64.sys'\n            - '\\capcom.sys'\n            - '\\80.sys'\n            - '\\asio32.sys'\n            - '\\iobitunlocker.sys'\n            - '\\zamguard64.sys'\n            - '\\nstrwsk.sys'\n            - '\\wiseunlo.sys'\n            - '\\t7.sys'\n            - '\\bs_hwmio64.sys'\n            - '\\hostnt.sys'\n            - '\\glckio2.sys'\n            - '\\hpportiox64.sys'\n            - '\\citmdrv_amd64.sys'\n            - '\\kevp64.sys'\n            - '\\bsmixp64.sys'\n            - '\\nbiolib_x64.sys'\n            - '\\d3.sys'\n            - '\\full.sys'\n            - '\\nvflash.sys'\n            - '\\rtcore64.sys'\n            - '\\speedfan.sys'\n            - '\\fidpcidrv64.sys'\n            - '\\hwrwdrv.sys'\n            - '\\msrhook.sys'\n            - '\\proxy64.sys'\n            - '\\7.sys'\n            - '\\winring0.sys'\n            - '\\hw_sys'\n            - '\\winio64b.sys'\n            - '\\semav6msr64.sys'\n            - '\\bandai.sys'\n            - '\\piddrv.sys'\n            - '\\t8.sys'\n            - '\\asrdrv103.sys'\n            - '\\adv64drv.sys'\n            - '\\asrsetupdrv103.sys'\n            - '\\bwrs.sys'\n            - '\\d4.sys'\n            - '\\dbk64.sys'\n            - '\\fiddrv64.sys'\n            - '\\goad.sys'\n            - '\\gametersafe.sys'\n            - '\\mhyprot2.sys'\n            - '\\lenovodiagnosticsdriver.sys'\n            - '\\netflt.sys'\n            - '\\bw.sys'\n            - '\\ntbios_2.sys'\n            - '\\dbutil.sys'\n            - '\\dh_kernel.sys'\n            - '\\rtkiow8x64.sys'\n            - '\\daxin_blank.sys'\n            - '\\superbmc.sys'\n            - '\\nodedriver.sys'\n            - '\\cpuz141.sys'\n            - '\\gftkyj64.sys'\n            - '\\d2.sys'\n            - '\\4.sys'\n            - '\\dh_kernel_10.sys'\n            - '\\naldrv.sys'\n            - '\\winiodrv.sys'\n            - '\\asmmap64.sys'\n            - '\\smep_namco.sys'\n            - '\\mhyprot.sys'\n            - '\\iqvw64e.sys'\n            - '\\nstr.sys'\n            - '\\ntiolib.sys'\n            - '\\pciecubed.sys'\n            - '\\vmdrv.sys'\n            - '\\daxin_blank2.sys'\n            - '\\atszio.sys'\n            - '\\agent64.sys'\n            - '\\cpupress.sys'\n            - '\\driver7-x86.sys'\n            - '\\krpocesshacker.sys'\n            - '\\asrdrv102.sys'\n            - '\\aswvmm.sys'\n            - '\\tmcomm.sys'\n            - '\\bs_def.sys'\n            - '\\bsmi.sys'\n            - '\\alsysio64.sys'\n            - '\\cpuz.sys'\n            - '\\daxin_blank1.sys'\n            - '\\amifldrv64.sys'\n            - '\\rwdrv.sys'\n            - '\\testbone.sys'\n            - '\\winio64c.sys'\n            - '\\winring0x64.sys'\n            - '\\nt4.sys'\n            - '\\procexp.sys'\n            - '\\winio64.sys'\n            - '\\se64a.sys'\n            - '\\air_system10.sys'\n            - '\\wantd.sys'\n            - '\\wcpu.sys'\n            - '\\nicm.sys'\n            - '\\daxin_blank6.sys'\n            - '\\kbdcap64.sys'\n            - '\\lctka.sys'\n            - '\\nvflsh64.sys'\n            - '\\phlashnt.sys'\n            - '\\viragt.sys'\n            - '\\atszio64.sys'\n            - '\\dbutil_2_3.sys'\n            - '\\phymemx64.sys'\n            - '\\wantd_4.sys'\n            - '\\ndislan.sys'\n            - '\\panmonfltx64.sys'\n            - '\\t3.sys'\n            - '\\panmonflt.sys'\n            - '\\daxin_blank3.sys'\n            - '\\gdrv.sys'\n            - '\\smep_capcom.sys'\n            - '\\wyproxy32.sys'\n            - '\\black.sys'\n            - '\\vboxdrv.sys'\n            - '\\cpuz_x64.sys'\n            - '\\poortry.sys'\n            - '\\mydrivers.sys'\n            - '\\winio64a.sys'\n            - '\\openlibsys.sys'\n            - '\\bs_flash64.sys'\n            - '\\vproeventmonitor.sys'\n            - '\\piddrv64.sys'\n            - '\\wantd_2.sys'\n            - '\\sysinfo.sys'\n            - '\\asrdrv104.sys'\n            - '\\netfilterdrv.sys'\n            - '\\libnicm.sys'\n            - '\\driver7-x64.sys'\n            - '\\semav6msr.sys'\n            - '\\pchunter.sys'\n            - '\\asupio64.sys'\n            - '\\rtkio64.sys'\n            - '\\rzpnk.sys'\n            - '\\magdrvamd64.sys'\n            - '\\elrawdsk.sys'\n            - '\\amp.sys'\n            - '\\asrautochkupddrv.sys'\n            - '\\lgdcatcher.sys'\n            - '\\fairplaykd.sys'\n            - '\\daxin_blank4.sys'\n            - '\\rtkiow10x64.sys'\n            - '\\citmdrv_ia64.sys'\n            - '\\nt5.sys'\n            - '\\asromgdrv.sys'\n            - '\\nt2.sys'\n            - '\\asrdrv101.sys'\n    condition: selection\nfalsepositives:\n    - False positives may occur if one of the vulnerable driver names mentioned above didn't change its name between versions. So always make sure that the driver being loaded is the legitimate one and the non vulnerable version.\n    - If you experience a lot of FP you could comment the driver name or its exact known legitimate location (when possible)\nlevel: medium\n",
      "question": "load of known vulnerable drivers via their names only.",
      "answer": "In order to detect the load of known vulnerable drivers via their names only, you should monitor driver load activities on Windows operating systems for any instances where specific file names, associated with vulnerable drivers, are being loaded. These file names include a broad list, such as \u2018mtcbsv64.sys\u2019, \u2018bs_def64.sys\u2019, \u2018gameink.sys\u2019, and many others, which might indicate a potentially malicious activity if these files are being used exploitatively due to their known vulnerabilities. It is crucial to be aware that some false positives may occur, especially if a legitimate driver shares a name with one listed without having updated its name across versions. Ensuring the drivers being loaded are the legitimate and non-vulnerable versions is essential to accurately distinguish between genuine and malicious activities. The detection is tagged under tactics that often involve the exploitation of these vulnerabilities to execute code or perform actions with malicious intent."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting (failed) outbound connection attempts to internet facing SMB servers. This could be a sign of potential exploitation attempts of CVE-2023-23397..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect (failed) outbound connection attempts to internet facing SMB servers, which could be a sign of potential exploitation attempts of CVE-2023-23397, you should: Monitor Windows SMB client connectivity logs for specific events that indicate a network connection failure, disconnection, or re-establishment with a server. Pay attention to events with IDs 30803 (indicating a failed network connection), 30804 (indicating a network disconnection), and 30806 (indicating re-establishment of a session to the server). It is crucial to filter out connections to main local IP addresses to reduce noise and increase the focus on outbound connections to internet-facing servers. This involves excluding IP addresses that start with '10.', indicating they are part of a private network within the 10.0.0.0/8 range, '192.168.', for the 192.168.0.0/16 private network range, and '172.16.' through '172.31.', covering the private network ranges from 172.16.0.0/12 to 172.31.0.0/12. Connections to loopback addresses ('127.') and link-local addresses ('169.254.') should also be ignored. Be aware that there may be false positives, especially from trusted external servers, and consider applying additional filters to refine detections. This detection process focuses on network connection issues to SMB servers which could be indicative of an attempted exploitation, specifically addressing concerns related to CVE-2023-23397.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: smbclient-connectivity\ndetection:\n    selection:\n        # Author Note: You could adapt this rule to use the \"ServerName\" field and uncomment the commented EventIDs. But you need to provide your own filter for \"trusted server names\"\n        EventID:\n            #- 30800 # The server name cannot be resolved. (Doesn't contain the \"ServerAddress\" field)\n            - 30803 # Failed to establish a network connection.\n            - 30804 # A network connection was disconnected.\n            - 30806 # The client re-established its session to the server.\n            #- 31001 # Error (Doesn't contain the \"ServerAddress\" field)\n    filter_main_local_ips:\n        ServerAddress|startswith:\n            - '10.' #10.0.0.0/8\n            - '192.168.' #192.168.0.0/16\n            - '172.16.' #172.16.0.0/12\n            - '172.17.'\n            - '172.18.'\n            - '172.19.'\n            - '172.20.'\n            - '172.21.'\n            - '172.22.'\n            - '172.23.'\n            - '172.24.'\n            - '172.25.'\n            - '172.26.'\n            - '172.27.'\n            - '172.28.'\n            - '172.29.'\n            - '172.30.'\n            - '172.31.'\n            - '127.' #127.0.0.0/8\n            - '169.254.' #169.254.0.0/16\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Some false positives may occur from external trusted servers. Apply additional filters accordingly\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: smbclient-connectivity\ndetection:\n    selection:\n        # Author Note: You could adapt this rule to use the \"ServerName\" field and uncomment the commented EventIDs. But you need to provide your own filter for \"trusted server names\"\n        EventID:\n            #- 30800 # The server name cannot be resolved. (Doesn't contain the \"ServerAddress\" field)\n            - 30803 # Failed to establish a network connection.\n            - 30804 # A network connection was disconnected.\n            - 30806 # The client re-established its session to the server.\n            #- 31001 # Error (Doesn't contain the \"ServerAddress\" field)\n    filter_main_local_ips:\n        ServerAddress|startswith:\n            - '10.' #10.0.0.0/8\n            - '192.168.' #192.168.0.0/16\n            - '172.16.' #172.16.0.0/12\n            - '172.17.'\n            - '172.18.'\n            - '172.19.'\n            - '172.20.'\n            - '172.21.'\n            - '172.22.'\n            - '172.23.'\n            - '172.24.'\n            - '172.25.'\n            - '172.26.'\n            - '172.27.'\n            - '172.28.'\n            - '172.29.'\n            - '172.30.'\n            - '172.31.'\n            - '127.' #127.0.0.0/8\n            - '169.254.' #169.254.0.0/16\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Some false positives may occur from external trusted servers. Apply additional filters accordingly\nlevel: medium\n",
      "question": "(failed) outbound connection attempts to internet facing SMB servers. This could be a sign of potential exploitation attempts of CVE-2023-23397.",
      "answer": "In order to detect (failed) outbound connection attempts to internet facing SMB servers, which could be a sign of potential exploitation attempts of CVE-2023-23397, you should: Monitor Windows SMB client connectivity logs for specific events that indicate a network connection failure, disconnection, or re-establishment with a server. Pay attention to events with IDs 30803 (indicating a failed network connection), 30804 (indicating a network disconnection), and 30806 (indicating re-establishment of a session to the server). It is crucial to filter out connections to main local IP addresses to reduce noise and increase the focus on outbound connections to internet-facing servers. This involves excluding IP addresses that start with '10.', indicating they are part of a private network within the 10.0.0.0/8 range, '192.168.', for the 192.168.0.0/16 private network range, and '172.16.' through '172.31.', covering the private network ranges from 172.16.0.0/12 to 172.31.0.0/12. Connections to loopback addresses ('127.') and link-local addresses ('169.254.') should also be ignored. Be aware that there may be false positives, especially from trusted external servers, and consider applying additional filters to refine detections. This detection process focuses on network connection issues to SMB servers which could be indicative of an attempted exploitation, specifically addressing concerns related to CVE-2023-23397."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting The Fax service attempts to load ualapi.dll, which is non-existent. An attacker can then (side)load their own malicious DLL using this service..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect an attack where the Fax service tries to load a non-existent DLL named ualapi.dll, allowing an attacker to side-load their own malicious DLL using this service, you should monitor Windows image load events.\n\nSpecifically, focus on instances where the process `\\fxssvc.exe`, which is associated with the Windows Fax service, attempts to load a DLL. If the DLL being loaded ends with 'ualapi.dll', it signals a potential malicious activity because 'ualapi.dll' does not exist by default in Windows systems. This anomaly might indicate an attacker's attempt to exploit the Fax service for DLL side-loading.\n\nHowever, to reduce false positives, any loading of DLL files that start with the path 'C:\\Windows\\WinSxS\\' should be excluded from alerts. This path is a legitimate system directory used for storing side-by-side assemblies in Windows and could contain various versions of DLLs needed by the system or legitimate applications.\n\nThis analysis falls under the high importance level due to the potential for malicious actors to exploit the Fax service to achieve persistence, evade defenses, or execute their code with the privileges of the fax service. Monitoring for such behavior is critical in identifying sophisticated adversaries attempting to utilize this technique.\n\nLook for these signs in the logs of Windows image loading events, focusing on filtering out legitimate uses while catching malicious attempts at exploiting the Fax service through DLL side-loading.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\fxssvc.exe'\n        ImageLoaded|endswith: 'ualapi.dll'\n    filter:\n        ImageLoaded|startswith: 'C:\\Windows\\WinSxS\\'\n    condition: selection and not filter\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\fxssvc.exe'\n        ImageLoaded|endswith: 'ualapi.dll'\n    filter:\n        ImageLoaded|startswith: 'C:\\Windows\\WinSxS\\'\n    condition: selection and not filter\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "The Fax service attempts to load ualapi.dll, which is non-existent. An attacker can then (side)load their own malicious DLL using this service.",
      "answer": "In order to detect an attack where the Fax service tries to load a non-existent DLL named ualapi.dll, allowing an attacker to side-load their own malicious DLL using this service, you should monitor Windows image load events.\n\nSpecifically, focus on instances where the process `\\fxssvc.exe`, which is associated with the Windows Fax service, attempts to load a DLL. If the DLL being loaded ends with 'ualapi.dll', it signals a potential malicious activity because 'ualapi.dll' does not exist by default in Windows systems. This anomaly might indicate an attacker's attempt to exploit the Fax service for DLL side-loading.\n\nHowever, to reduce false positives, any loading of DLL files that start with the path 'C:\\Windows\\WinSxS\\' should be excluded from alerts. This path is a legitimate system directory used for storing side-by-side assemblies in Windows and could contain various versions of DLLs needed by the system or legitimate applications.\n\nThis analysis falls under the high importance level due to the potential for malicious actors to exploit the Fax service to achieve persistence, evade defenses, or execute their code with the privileges of the fax service. Monitoring for such behavior is critical in identifying sophisticated adversaries attempting to utilize this technique.\n\nLook for these signs in the logs of Windows image loading events, focusing on filtering out legitimate uses while catching malicious attempts at exploiting the Fax service through DLL side-loading."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Identifies when ClusterRoles/Roles are being modified or deleted..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to identify when ClusterRoles/Roles are being modified or deleted, you should monitor Azure Activity Logs for specific operations on Kubernetes clusters. Look for activities related to the write, delete, bind, or escalate actions on both Roles and ClusterRoles within a Microsoft Kubernetes Connected Cluster environment. These operations are indicated by operation names such as MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/RBAC.AUTHORIZATION.K8S.IO/ROLES/WRITE, DELETE, BIND/ACTION, ESCALATE/ACTION and similarly for CLUSTERROLES.\n\nThese actions are significant as they could potentially indicate unauthorized attempts to modify the permissions and capabilities of users within a Kubernetes cluster, which could lead to unauthorized access or escalation of privileges within the cluster environment. It is crucial to verify whether such modifications are being performed by authenticated system administrators and if the identity, user agent, and hostname involved in these operations are expected to make such changes in your Kubernetes cluster environment.\n\nIt is also essential to be aware that modifications from unfamiliar users or unexpected sources should be carefully investigated to rule out any malicious intent or activities. If certain activities are regularly raising flags but are identified as known and safe behavior by system administrators, such actions could be considered for exemption to reduce false positive alerts.\n\nMonitor these activities with a medium level of attention, as while they may be legitimate administrative actions, they could also represent significant security risks if not properly audited and controlled. Identify and analyze any such modifications or deletions of ClusterRoles and Roles to ensure the secure management of access control within your Kubernetes clusters hosted on Azure.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: azure\n    service: activitylogs\ndetection:\n    selection:\n        operationName:\n            - MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/RBAC.AUTHORIZATION.K8S.IO/ROLES/WRITE\n            - MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/RBAC.AUTHORIZATION.K8S.IO/ROLES/DELETE\n            - MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/RBAC.AUTHORIZATION.K8S.IO/ROLES/BIND/ACTION\n            - MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/RBAC.AUTHORIZATION.K8S.IO/ROLES/ESCALATE/ACTION\n            - MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/RBAC.AUTHORIZATION.K8S.IO/CLUSTERROLES/WRITE\n            - MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/RBAC.AUTHORIZATION.K8S.IO/CLUSTERROLES/DELETE\n            - MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/RBAC.AUTHORIZATION.K8S.IO/CLUSTERROLES/BIND/ACTION\n            - MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/RBAC.AUTHORIZATION.K8S.IO/CLUSTERROLES/ESCALATE/ACTION\n    condition: selection\nfalsepositives:\n    - ClusterRoles/Roles being modified and deleted may be performed by a system administrator. Verify whether the user identity, user agent, and/or hostname should be making changes in your environment.\n    - ClusterRoles/Roles modification from unfamiliar users should be investigated. If known behavior is causing false positives, it can be exempted from the rule.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: azure\n    service: activitylogs\ndetection:\n    selection:\n        operationName:\n            - MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/RBAC.AUTHORIZATION.K8S.IO/ROLES/WRITE\n            - MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/RBAC.AUTHORIZATION.K8S.IO/ROLES/DELETE\n            - MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/RBAC.AUTHORIZATION.K8S.IO/ROLES/BIND/ACTION\n            - MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/RBAC.AUTHORIZATION.K8S.IO/ROLES/ESCALATE/ACTION\n            - MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/RBAC.AUTHORIZATION.K8S.IO/CLUSTERROLES/WRITE\n            - MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/RBAC.AUTHORIZATION.K8S.IO/CLUSTERROLES/DELETE\n            - MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/RBAC.AUTHORIZATION.K8S.IO/CLUSTERROLES/BIND/ACTION\n            - MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/RBAC.AUTHORIZATION.K8S.IO/CLUSTERROLES/ESCALATE/ACTION\n    condition: selection\nfalsepositives:\n    - ClusterRoles/Roles being modified and deleted may be performed by a system administrator. Verify whether the user identity, user agent, and/or hostname should be making changes in your environment.\n    - ClusterRoles/Roles modification from unfamiliar users should be investigated. If known behavior is causing false positives, it can be exempted from the rule.\nlevel: medium\n",
      "question": "Identifies when ClusterRoles/Roles are being modified or deleted.",
      "answer": "In order to identify when ClusterRoles/Roles are being modified or deleted, you should monitor Azure Activity Logs for specific operations on Kubernetes clusters. Look for activities related to the write, delete, bind, or escalate actions on both Roles and ClusterRoles within a Microsoft Kubernetes Connected Cluster environment. These operations are indicated by operation names such as MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/RBAC.AUTHORIZATION.K8S.IO/ROLES/WRITE, DELETE, BIND/ACTION, ESCALATE/ACTION and similarly for CLUSTERROLES.\n\nThese actions are significant as they could potentially indicate unauthorized attempts to modify the permissions and capabilities of users within a Kubernetes cluster, which could lead to unauthorized access or escalation of privileges within the cluster environment. It is crucial to verify whether such modifications are being performed by authenticated system administrators and if the identity, user agent, and hostname involved in these operations are expected to make such changes in your Kubernetes cluster environment.\n\nIt is also essential to be aware that modifications from unfamiliar users or unexpected sources should be carefully investigated to rule out any malicious intent or activities. If certain activities are regularly raising flags but are identified as known and safe behavior by system administrators, such actions could be considered for exemption to reduce false positive alerts.\n\nMonitor these activities with a medium level of attention, as while they may be legitimate administrative actions, they could also represent significant security risks if not properly audited and controlled. Identify and analyze any such modifications or deletions of ClusterRoles and Roles to ensure the secure management of access control within your Kubernetes clusters hosted on Azure."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting enumeration of local system groups.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect enumeration of local system groups, you should monitor process creations in macOS for certain command-line invocations that indicate querying or listing of system group information. Specifically, look for processes that end with '/dscacheutil', '/cat', or '/dscl' in their image path. For '/dscacheutil', ensure that the command-line includes both '-q' and 'group' indicating a query for group information. For '/cat', the command-line should contain '/etc/group', which is a direct attempt to read the system's group file. Finally, for '/dscl', the command-line should have both '-list' and '/groups', showing an intention to list group directories. It's important to consider that these activities might sometimes be part of legitimate administration work, thus they are marked as informational in terms of severity. Keep an eye on these patterns as they could signal attempts to understand the local users and privilege groups structure, a common step in system reconnaissance by an attacker.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: macos\ndetection:\n    selection_1:\n        Image|endswith: '/dscacheutil'\n        CommandLine|contains|all:\n            - '-q'\n            - 'group'\n    selection_2:\n        Image|endswith: '/cat'\n        CommandLine|contains: '/etc/group'\n    selection_3:\n        Image|endswith: '/dscl'\n        CommandLine|contains|all:\n            - '-list'\n            - '/groups'\n    condition: 1 of selection*\nfalsepositives:\n    - Legitimate administration activities\nlevel: informational\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: macos\ndetection:\n    selection_1:\n        Image|endswith: '/dscacheutil'\n        CommandLine|contains|all:\n            - '-q'\n            - 'group'\n    selection_2:\n        Image|endswith: '/cat'\n        CommandLine|contains: '/etc/group'\n    selection_3:\n        Image|endswith: '/dscl'\n        CommandLine|contains|all:\n            - '-list'\n            - '/groups'\n    condition: 1 of selection*\nfalsepositives:\n    - Legitimate administration activities\nlevel: informational\n",
      "question": "enumeration of local system groups",
      "answer": "In order to detect enumeration of local system groups, you should monitor process creations in macOS for certain command-line invocations that indicate querying or listing of system group information. Specifically, look for processes that end with '/dscacheutil', '/cat', or '/dscl' in their image path. For '/dscacheutil', ensure that the command-line includes both '-q' and 'group' indicating a query for group information. For '/cat', the command-line should contain '/etc/group', which is a direct attempt to read the system's group file. Finally, for '/dscl', the command-line should have both '-list' and '/groups', showing an intention to list group directories. It's important to consider that these activities might sometimes be part of legitimate administration work, thus they are marked as informational in terms of severity. Keep an eye on these patterns as they could signal attempts to understand the local users and privilege groups structure, a common step in system reconnaissance by an attacker."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'ActiveScriptEventConsumer'\n            - ' CREATE '\n    condition: selection\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Legitimate software creating script event consumers\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect WMIC executions in which an event consumer gets created. This could be used to establish persistence\n\nHere is how  the given sigma rule operates: In order to detect WMIC executions in which an event consumer gets created, which could be used to establish persistence, you should: focus on the creation of processes on Windows systems. Specifically, monitor the command line for occurrences that include both the terms 'ActiveScriptEventConsumer' and 'CREATE'. These particular terms suggest an attempt to create a script event consumer, a method that can be exploited for persistence by attackers using Windows Management Instrumentation (WMI). When such activity is detected, it is important to capture both the command line used to initiate the process and the parent command line for further analysis. However, bear in mind that there may be legitimate instances of software creating script event consumers, which should be considered when evaluating possible false positives. The severity of this rule is considered high due to its potential use in persistent threats.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'ActiveScriptEventConsumer'\n            - ' CREATE '\n    condition: selection\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Legitimate software creating script event consumers\nlevel: high\n",
      "question": "WMIC executions in which an event consumer gets created. This could be used to establish persistence",
      "answer": "In order to detect WMIC executions in which an event consumer gets created, which could be used to establish persistence, you should: focus on the creation of processes on Windows systems. Specifically, monitor the command line for occurrences that include both the terms 'ActiveScriptEventConsumer' and 'CREATE'. These particular terms suggest an attempt to create a script event consumer, a method that can be exploited for persistence by attackers using Windows Management Instrumentation (WMI). When such activity is detected, it is important to capture both the command line used to initiate the process and the parent command line for further analysis. However, bear in mind that there may be legitimate instances of software creating script event consumers, which should be considered when evaluating possible false positives. The severity of this rule is considered high due to its potential use in persistent threats."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    product: windows\n    service: security\n    definition: The 'System Security Extension' audit subcategory need to be enabled to log the EID 4697\ndetection:\n    selection:\n        EventID: 4697\n        ServiceFileName|contains|all:\n            - '&&'\n            - 'rundll32'\n            - 'shell32.dll'\n            - 'shellexec_rundll'\n        ServiceFileName|contains:\n            - value\n            - invoke\n            - comspec\n            - iex\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect Obfuscated Powershell via use Rundll32 in Scripts\n\nHere is how  the given sigma rule operates: In order to detect obfuscated PowerShell via use of Rundll32 in scripts, you should monitor Windows security audit logs, specifically looking for Event ID 4697, which signals the creation of a new service. It's important to ensure that the 'System Security Extension' audit subcategory is enabled to effectively log this event. When analyzing these events, focus on the 'ServiceFileName' field for instances that contain the following characteristics in combination: the presence of '&&', 'rundll32', 'shell32.dll', and 'shellexec_rundll'. Additionally, look for the 'ServiceFileName' field containing any of these indicators: 'value', 'invoke', 'comspec', or 'iex'. These patterns suggest an attempt to execute obfuscated scripts using Rundll32, a technique that might be employed by attackers to bypass security measures and execute malicious code.\n\nGiven the high level of threat this represents, indicated by the high severity level, it is crucial to be vigilant for these specific patterns in the log data. However, be aware that there could be unknown cases leading to false positives, where benign activities might inadvertently match these criteria. Monitoring for these signs allows defenders to spot potential misuse of PowerShell scripts executed through Rundll32, enabling a swift response to prevent or mitigate malicious activities. This detection strategy aligns with understanding and responding to advanced persistent threats that leverage obfuscation and scripting to conduct their operations stealthily.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\n    definition: The 'System Security Extension' audit subcategory need to be enabled to log the EID 4697\ndetection:\n    selection:\n        EventID: 4697\n        ServiceFileName|contains|all:\n            - '&&'\n            - 'rundll32'\n            - 'shell32.dll'\n            - 'shellexec_rundll'\n        ServiceFileName|contains:\n            - value\n            - invoke\n            - comspec\n            - iex\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Obfuscated Powershell via use Rundll32 in Scripts",
      "answer": "In order to detect obfuscated PowerShell via use of Rundll32 in scripts, you should monitor Windows security audit logs, specifically looking for Event ID 4697, which signals the creation of a new service. It's important to ensure that the 'System Security Extension' audit subcategory is enabled to effectively log this event. When analyzing these events, focus on the 'ServiceFileName' field for instances that contain the following characteristics in combination: the presence of '&&', 'rundll32', 'shell32.dll', and 'shellexec_rundll'. Additionally, look for the 'ServiceFileName' field containing any of these indicators: 'value', 'invoke', 'comspec', or 'iex'. These patterns suggest an attempt to execute obfuscated scripts using Rundll32, a technique that might be employed by attackers to bypass security measures and execute malicious code.\n\nGiven the high level of threat this represents, indicated by the high severity level, it is crucial to be vigilant for these specific patterns in the log data. However, be aware that there could be unknown cases leading to false positives, where benign activities might inadvertently match these criteria. Monitoring for these signs allows defenders to spot potential misuse of PowerShell scripts executed through Rundll32, enabling a swift response to prevent or mitigate malicious activities. This detection strategy aligns with understanding and responding to advanced persistent threats that leverage obfuscation and scripting to conduct their operations stealthily."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    product: aws\n    service: cloudtrail\ndetection:\n    selection_source:\n        eventSource: rds.amazonaws.com\n        responseElements.pendingModifiedValues.masterUserPassword|contains: '*'\n        eventName: ModifyDBInstance\n    condition: selection_source\nfalsepositives:\n    - Benign changes to a db instance\nlevel: medium\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect change of database master password. It may be a part of data exfiltration.\n\nHere is how  the given sigma rule operates: In order to detect the change of database master password, which may be a part of data exfiltration, you should: monitor logs from AWS CloudTrail for specific activities that indicate a potential security concern. Focus on logs where the event source is \"rds.amazonaws.com,\" particularly looking for any instances where the master user password is pending modification, as indicated by the presence of asterisks (*) in the \"responseElements.pendingModifiedValues.masterUserPassword\" field. Specifically, the event name \"ModifyDBInstance\" should be scrutinized. While it is important to be vigilant of such changes, it's also necessary to be aware that not all changes to a database instance's master password are malicious. Some may be legitimate updates as part of regular database management, hence considered as benign changes to a db instance. This process falls under the MITRE ATT&CK framework tactics and techniques related to Credential Access.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: aws\n    service: cloudtrail\ndetection:\n    selection_source:\n        eventSource: rds.amazonaws.com\n        responseElements.pendingModifiedValues.masterUserPassword|contains: '*'\n        eventName: ModifyDBInstance\n    condition: selection_source\nfalsepositives:\n    - Benign changes to a db instance\nlevel: medium\n",
      "question": "change of database master password. It may be a part of data exfiltration.",
      "answer": "In order to detect the change of database master password, which may be a part of data exfiltration, you should: monitor logs from AWS CloudTrail for specific activities that indicate a potential security concern. Focus on logs where the event source is \"rds.amazonaws.com,\" particularly looking for any instances where the master user password is pending modification, as indicated by the presence of asterisks (*) in the \"responseElements.pendingModifiedValues.masterUserPassword\" field. Specifically, the event name \"ModifyDBInstance\" should be scrutinized. While it is important to be vigilant of such changes, it's also necessary to be aware that not all changes to a database instance's master password are malicious. Some may be legitimate updates as part of regular database management, hence considered as benign changes to a db instance. This process falls under the MITRE ATT&CK framework tactics and techniques related to Credential Access."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious reconnaissance command line activity on Windows systems using Net.EXE.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious reconnaissance command line activity on Windows systems using Net.EXE, you should: monitor process creation logs for executions of \"net.exe\" or \"net1.exe\". Specifically, look for command line invocations that include the use of 'group', 'localgroup', or 'accounts' keywords which indicate an attempt to query or modify user group memberships or account properties. Attention should be paid to commands attempting to interact with high privilege groups such as 'domain admins', 'administrator', 'enterprise admins', 'Exchange Trusted Subsystem', 'Remote Desktop Users' and their equivalents in other languages. This detection is refined by excluding commands aimed at adding users or groups (' /add') to reduce false positives typically generated by legitimate administrative activities or inventory tool runs. Activity that triggers this detection warrants further investigation to ascertain if the commands are being executed by users or entities (like service accounts or LOCAL_SYSTEM) that should not normally engage in these types of operations on the network, indicating potential reconnaissance or preparatory steps for further attacks. Detected events should include detailed information, specifically the command line and parent command line, to facilitate a comprehensive analysis.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith:\n            - '\\net.exe'\n            - '\\net1.exe'\n        - OriginalFileName:\n            - 'net.exe'\n            - 'net1.exe'\n    # Covers group and localgroup flags\n    selection_group_root:\n        CommandLine|contains:\n            - ' group '\n            - ' localgroup '\n    selection_group_flags:\n        CommandLine|contains:\n            # Add more groups for other languages\n            - 'domain admins'\n            - ' administrator' # Typo without an 'S' so we catch both\n            - ' administrateur' # Typo without an 'S' so we catch both\n            - 'enterprise admins'\n            - 'Exchange Trusted Subsystem'\n            - 'Remote Desktop Users'\n            - 'Utilisateurs du Bureau \u00e0 distance' # French for \"Remote Desktop Users\"\n            - 'Usuarios de escritorio remoto' # Spanish for \"Remote Desktop Users\"\n            - ' /do' # short for domain\n    filter_group_add:\n        # This filter is added to avoid the potential case where the point is not recon but addition\n        CommandLine|contains: ' /add'\n    # Covers 'accounts' flag\n    selection_accounts_root:\n        CommandLine|contains: ' accounts '\n    selection_accounts_flags:\n        CommandLine|contains: ' /do' # short for domain\n    condition: selection_img and ((all of selection_group_* and not filter_group_add) or all of selection_accounts_*)\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Inventory tool runs\n    - Administrative activity\nlevel: medium\nanalysis:\n    recommendation: Check if the user that executed the commands is suspicious (e.g. service accounts, LOCAL_SYSTEM)\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith:\n            - '\\net.exe'\n            - '\\net1.exe'\n        - OriginalFileName:\n            - 'net.exe'\n            - 'net1.exe'\n    # Covers group and localgroup flags\n    selection_group_root:\n        CommandLine|contains:\n            - ' group '\n            - ' localgroup '\n    selection_group_flags:\n        CommandLine|contains:\n            # Add more groups for other languages\n            - 'domain admins'\n            - ' administrator' # Typo without an 'S' so we catch both\n            - ' administrateur' # Typo without an 'S' so we catch both\n            - 'enterprise admins'\n            - 'Exchange Trusted Subsystem'\n            - 'Remote Desktop Users'\n            - 'Utilisateurs du Bureau \u00e0 distance' # French for \"Remote Desktop Users\"\n            - 'Usuarios de escritorio remoto' # Spanish for \"Remote Desktop Users\"\n            - ' /do' # short for domain\n    filter_group_add:\n        # This filter is added to avoid the potential case where the point is not recon but addition\n        CommandLine|contains: ' /add'\n    # Covers 'accounts' flag\n    selection_accounts_root:\n        CommandLine|contains: ' accounts '\n    selection_accounts_flags:\n        CommandLine|contains: ' /do' # short for domain\n    condition: selection_img and ((all of selection_group_* and not filter_group_add) or all of selection_accounts_*)\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Inventory tool runs\n    - Administrative activity\nlevel: medium\nanalysis:\n    recommendation: Check if the user that executed the commands is suspicious (e.g. service accounts, LOCAL_SYSTEM)\n",
      "question": "suspicious reconnaissance command line activity on Windows systems using Net.EXE",
      "answer": "In order to detect suspicious reconnaissance command line activity on Windows systems using Net.EXE, you should: monitor process creation logs for executions of \"net.exe\" or \"net1.exe\". Specifically, look for command line invocations that include the use of 'group', 'localgroup', or 'accounts' keywords which indicate an attempt to query or modify user group memberships or account properties. Attention should be paid to commands attempting to interact with high privilege groups such as 'domain admins', 'administrator', 'enterprise admins', 'Exchange Trusted Subsystem', 'Remote Desktop Users' and their equivalents in other languages. This detection is refined by excluding commands aimed at adding users or groups (' /add') to reduce false positives typically generated by legitimate administrative activities or inventory tool runs. Activity that triggers this detection warrants further investigation to ascertain if the commands are being executed by users or entities (like service accounts or LOCAL_SYSTEM) that should not normally engage in these types of operations on the network, indicating potential reconnaissance or preparatory steps for further attacks. Detected events should include detailed information, specifically the command line and parent command line, to facilitate a comprehensive analysis."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Unfixed method for UAC bypass from Windows 10. WSReset.exe file associated with the Windows Store. It will run a binary file contained in a low-privilege registry..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect an unfixed method for UAC bypass from Windows 10 that involves the WSReset.exe file associated with the Windows Store, which will run a binary file contained in a low-privilege registry, you should: Monitor Windows registry events, specifically looking for any changes or modifications made to the registry key that ends with '\\AppX82a6gwre4fdg3bt635tn5ctqjf8msdd2\\Shell\\open\\command'. This particular registry key alteration is indicative of an attempt to exploit this specific UAC bypass vulnerability. It's crucial to pay attention to the following pieces of information during detection: the name of the computer where the modification occurred, the image path of the executable or process making the change, the type of event that triggered the record, and specifically the target registry object that was affected. Given the high level of risk associated with this kind of modification, any instances found should be promptly investigated to mitigate potential security threats. The tags relevant to this attack include Privilege Escalation, Bypass User Account Control (UAC), and techniques related to executing binary files through registry modifications.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_event\n    product: windows\ndetection:\n    selection:\n        TargetObject|endswith: '\\AppX82a6gwre4fdg3bt635tn5ctqjf8msdd2\\Shell\\open\\command'\n    condition: selection\nfields:\n    - ComputerName\n    - Image\n    - EventType\n    - TargetObject\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_event\n    product: windows\ndetection:\n    selection:\n        TargetObject|endswith: '\\AppX82a6gwre4fdg3bt635tn5ctqjf8msdd2\\Shell\\open\\command'\n    condition: selection\nfields:\n    - ComputerName\n    - Image\n    - EventType\n    - TargetObject\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Unfixed method for UAC bypass from Windows 10. WSReset.exe file associated with the Windows Store. It will run a binary file contained in a low-privilege registry.",
      "answer": "In order to detect an unfixed method for UAC bypass from Windows 10 that involves the WSReset.exe file associated with the Windows Store, which will run a binary file contained in a low-privilege registry, you should: Monitor Windows registry events, specifically looking for any changes or modifications made to the registry key that ends with '\\AppX82a6gwre4fdg3bt635tn5ctqjf8msdd2\\Shell\\open\\command'. This particular registry key alteration is indicative of an attempt to exploit this specific UAC bypass vulnerability. It's crucial to pay attention to the following pieces of information during detection: the name of the computer where the modification occurred, the image path of the executable or process making the change, the type of event that triggered the record, and specifically the target registry object that was affected. Given the high level of risk associated with this kind of modification, any instances found should be promptly investigated to mitigate potential security threats. The tags relevant to this attack include Privilege Escalation, Bypass User Account Control (UAC), and techniques related to executing binary files through registry modifications."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    product: windows\n    service: security\ndetection:\n    samrpipe:\n        EventID: 5145\n        RelativeTargetName: samr\n    passwordchanged:\n        EventID: 4738\n    passwordchanged_filter:\n        PasswordLastSet:\n    timeframe: 15s\n    condition: ( passwordchanged and not passwordchanged_filter ) | near samrpipe\nlevel: medium\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect possible remote NTLM hash change through SAMR API SamiChangePasswordUser() or SamSetInformationUser().\n\"Audit User Account Management\" in \"Advanced Audit Policy Configuration\" has to be enabled in your local security policy / GPO to see this events.\n\n\nHere is how  the given sigma rule operates: In order to detect a possible remote NTLM hash change through SAMR API SamiChangePasswordUser() or SamSetInformationUser(), you should monitor the security logs on Windows systems for specific events and conditions. Focus on events with an EventID of 5145 that include the RelativeTargetName of 'samr', indicating usage of the Security Account Manager Remote (SAMR) protocol, which is a potential indicator of an attempt to change a user account's NTLM hash remotely. Additionally, look for events with an EventID of 4738, which signals a user account's attributes, such as the password, have been changed.\n\nTo accurately identify this activity, you should pay attention to the timeframe in which these events occur. Events matching the SAMR protocol usage (EventID 5145) or a password change (EventID 4738 without a subsequent change in the PasswordLastSet attribute) that occur within a 15-second window could signify malicious activity. This specific timeframe helps to reduce false positives by correlating the password change event with the SAMR protocol usage, making the detection more precise.\n\nIt is also critical to have the \"Audit User Account Management\" setting enabled in the \"Advanced Audit Policy Configuration\" through your local security policy or Group Policy Object (GPO) configuration. This setting ensures that events related to user account management, such as password changes, are logged and can be monitored.\n\nBy observing these conditions and focusing on the specified log source (Windows security service logs), you can effectively detect attempts to remotely change an NTLM hash, which is typically an action taken by attackers to gain unauthorized access or escalate privileges within a network. This detection falls under the categories of Credential Access and Account Manipulation, specifically targeting techniques involving the manipulation or theft of credentials.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\ndetection:\n    samrpipe:\n        EventID: 5145\n        RelativeTargetName: samr\n    passwordchanged:\n        EventID: 4738\n    passwordchanged_filter:\n        PasswordLastSet:\n    timeframe: 15s\n    condition: ( passwordchanged and not passwordchanged_filter ) | near samrpipe\nlevel: medium\n",
      "question": "possible remote NTLM hash change through SAMR API SamiChangePasswordUser() or SamSetInformationUser().\n\"Audit User Account Management\" in \"Advanced Audit Policy Configuration\" has to be enabled in your local security policy / GPO to see this events.\n",
      "answer": "In order to detect a possible remote NTLM hash change through SAMR API SamiChangePasswordUser() or SamSetInformationUser(), you should monitor the security logs on Windows systems for specific events and conditions. Focus on events with an EventID of 5145 that include the RelativeTargetName of 'samr', indicating usage of the Security Account Manager Remote (SAMR) protocol, which is a potential indicator of an attempt to change a user account's NTLM hash remotely. Additionally, look for events with an EventID of 4738, which signals a user account's attributes, such as the password, have been changed.\n\nTo accurately identify this activity, you should pay attention to the timeframe in which these events occur. Events matching the SAMR protocol usage (EventID 5145) or a password change (EventID 4738 without a subsequent change in the PasswordLastSet attribute) that occur within a 15-second window could signify malicious activity. This specific timeframe helps to reduce false positives by correlating the password change event with the SAMR protocol usage, making the detection more precise.\n\nIt is also critical to have the \"Audit User Account Management\" setting enabled in the \"Advanced Audit Policy Configuration\" through your local security policy or Group Policy Object (GPO) configuration. This setting ensures that events related to user account management, such as password changes, are logged and can be monitored.\n\nBy observing these conditions and focusing on the specified log source (Windows security service logs), you can effectively detect attempts to remotely change an NTLM hash, which is typically an action taken by attackers to gain unauthorized access or escalate privileges within a network. This detection falls under the categories of Credential Access and Account Manipulation, specifically targeting techniques involving the manipulation or theft of credentials."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\rundll32.exe'\n        - OriginalFileName: 'RUNDLL32.EXE'\n    selection_cli:\n        CommandLine|contains: 'InstallScreenSaver'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate installation of a new screensaver\nlevel: medium\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect An attacker may execute an application as a SCR File using rundll32.exe desk.cpl,InstallScreenSaver\n\nHere is how  the given sigma rule operates: In order to detect an attacker executing an application as a SCR File using rundll32.exe desk.cpl,InstallScreenSaver, you should monitor for the creation of processes on Windows systems, specifically looking for instances where the process name ends with '\\rundll32.exe' or the original file name is 'RUNDLL32.EXE'. Additionally, scrutinize the command line arguments for the presence of 'InstallScreenSaver', as this indicates the execution of a command to install a screensaver, potentially disguising malicious activity. It's important to note that while this behavior can be indicative of suspicious activities associated with using rundll32.exe for execution of unexpected or malicious applications, there can be legitimate cases where a new screensaver is being installed. This scenario is classified with a medium level of alert due to the potential for false positives.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\rundll32.exe'\n        - OriginalFileName: 'RUNDLL32.EXE'\n    selection_cli:\n        CommandLine|contains: 'InstallScreenSaver'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate installation of a new screensaver\nlevel: medium\n",
      "question": "An attacker may execute an application as a SCR File using rundll32.exe desk.cpl,InstallScreenSaver",
      "answer": "In order to detect an attacker executing an application as a SCR File using rundll32.exe desk.cpl,InstallScreenSaver, you should monitor for the creation of processes on Windows systems, specifically looking for instances where the process name ends with '\\rundll32.exe' or the original file name is 'RUNDLL32.EXE'. Additionally, scrutinize the command line arguments for the presence of 'InstallScreenSaver', as this indicates the execution of a command to install a screensaver, potentially disguising malicious activity. It's important to note that while this behavior can be indicative of suspicious activities associated with using rundll32.exe for execution of unexpected or malicious applications, there can be legitimate cases where a new screensaver is being installed. This scenario is classified with a medium level of alert due to the potential for false positives."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious curl process start the adds a file to a web request.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a suspicious curl process start that adds a file to a web request, you should: Monitor Linux-based systems for the initiation of curl processes that are employing command-line flags indicative of web requests containing file data. Specifically, look for curl commands concluding with '/curl' and command line options that signify file upload or data inclusion in the web request. These options include '--form' (or '--form-string'), '--upload-file', '--data', '--data-' (to catch variants like '--data-ascii', '--data-binary', '--data-raw', '--data-urlencode'), and also short-hand flags matched using a regular expression to find '-F', '-T', '-d' with a space following. However, curl commands targeting 'localhost' or '127.0.0.1' should be considered optional filters and their appearances could exempt an event from being flagged to reduce the incidence of false positives, which might often originate from scripts developed internally by administrators or developers. The analysis is of medium importance level and contributes towards identifying potential data exfiltration or malware communication efforts.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: linux\ndetection:\n    selection_img:\n        Image|endswith: '/curl'\n    selection_cli:\n        - CommandLine|contains:\n            - ' --form' # Also covers the \"--form-string\"\n            - ' --upload-file '\n            - ' --data '\n            - ' --data-' # For flags like: \"--data-ascii\", \"--data-binary\", \"--data-raw\", \"--data-urlencode\"\n        - CommandLine|re: '\\s-[FTd]\\s' # We use regex to ensure a case sensitive argument detection\n    filter_optional_localhost:\n        CommandLine|contains:\n            - '://localhost'\n            - '://127.0.0.1'\n    condition: all of selection_* and not 1 of filter_optional_*\nfalsepositives:\n    - Scripts created by developers and admins\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: linux\ndetection:\n    selection_img:\n        Image|endswith: '/curl'\n    selection_cli:\n        - CommandLine|contains:\n            - ' --form' # Also covers the \"--form-string\"\n            - ' --upload-file '\n            - ' --data '\n            - ' --data-' # For flags like: \"--data-ascii\", \"--data-binary\", \"--data-raw\", \"--data-urlencode\"\n        - CommandLine|re: '\\s-[FTd]\\s' # We use regex to ensure a case sensitive argument detection\n    filter_optional_localhost:\n        CommandLine|contains:\n            - '://localhost'\n            - '://127.0.0.1'\n    condition: all of selection_* and not 1 of filter_optional_*\nfalsepositives:\n    - Scripts created by developers and admins\nlevel: medium\n",
      "question": "suspicious curl process start the adds a file to a web request",
      "answer": "In order to detect a suspicious curl process start that adds a file to a web request, you should: Monitor Linux-based systems for the initiation of curl processes that are employing command-line flags indicative of web requests containing file data. Specifically, look for curl commands concluding with '/curl' and command line options that signify file upload or data inclusion in the web request. These options include '--form' (or '--form-string'), '--upload-file', '--data', '--data-' (to catch variants like '--data-ascii', '--data-binary', '--data-raw', '--data-urlencode'), and also short-hand flags matched using a regular expression to find '-F', '-T', '-d' with a space following. However, curl commands targeting 'localhost' or '127.0.0.1' should be considered optional filters and their appearances could exempt an event from being flagged to reduce the incidence of false positives, which might often originate from scripts developed internally by administrators or developers. The analysis is of medium importance level and contributes towards identifying potential data exfiltration or malware communication efforts."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting activity when a security-enabled global group is deleted.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect activity when a security-enabled global group is deleted, you should monitor the security logs from Windows systems for events with Event ID 4730 or 634. These specific Event IDs indicate that a security-enabled global group was deleted. By tracking these Event IDs within the Windows security service logs, it's possible to identify when such significant changes occur within group management activities. It's important to note, however, that the confidence in these detections might be considered low due to the potential for unknown false positives. This activity can be linked with tactics and techniques focused on undermining security control and manipulating user group configurations, which could be indicative of unauthorized access or malicious influence on security protocols.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID:\n            - 4730 # A security-enabled global group was deleted\n            - 634 # Security Enabled Global Group Deleted\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID:\n            - 4730 # A security-enabled global group was deleted\n            - 634 # Security Enabled Global Group Deleted\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low\n",
      "question": "activity when a security-enabled global group is deleted",
      "answer": "In order to detect activity when a security-enabled global group is deleted, you should monitor the security logs from Windows systems for events with Event ID 4730 or 634. These specific Event IDs indicate that a security-enabled global group was deleted. By tracking these Event IDs within the Windows security service logs, it's possible to identify when such significant changes occur within group management activities. It's important to note, however, that the confidence in these detections might be considered low due to the potential for unknown false positives. This activity can be linked with tactics and techniques focused on undermining security control and manipulating user group configurations, which could be indicative of unauthorized access or malicious influence on security protocols."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious \"epmap\" connection to a remote computer via remote procedure call (RPC).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious \"epmap\" connection to a remote computer via remote procedure call (RPC), you should focus on monitoring network connections, specifically within Windows environments. Look for TCP protocol connections that are initiated by the source and target destination port 135, which is commonly used by \"epmap\" or RPC services. It is essential to filter out legitimate system connections initiated by Windows or Amazon SSM (Simple Systems Manager) agent updater. These legitimate connections commonly start with the directories \"C:\\Windows\\\" and \"C:\\ProgramData\\Amazon\\SSM\\Update\\amazon-ssm-agent-updater\". Connections that do not originate from these paths and meet the other specified criteria should be considered suspicious. The associated tactics and techniques include Execution and Lateral Movement, where attackers might leverage RPC to execute commands remotely or move within the network. Paying attention to these details with a high level of scrutiny is crucial due to the high impact level of potential findings, although the exact nature of false positives remains uncertain.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: network_connection\n    product: windows\ndetection:\n    selection:\n        Protocol: tcp\n        Initiated: 'true'\n        DestinationPort: 135\n        #DestinationPortName: epmap\n    filter:\n        Image|startswith:\n            - C:\\Windows\\\n            - C:\\ProgramData\\Amazon\\SSM\\Update\\amazon-ssm-agent-updater\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: network_connection\n    product: windows\ndetection:\n    selection:\n        Protocol: tcp\n        Initiated: 'true'\n        DestinationPort: 135\n        #DestinationPortName: epmap\n    filter:\n        Image|startswith:\n            - C:\\Windows\\\n            - C:\\ProgramData\\Amazon\\SSM\\Update\\amazon-ssm-agent-updater\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "suspicious \"epmap\" connection to a remote computer via remote procedure call (RPC)",
      "answer": "In order to detect suspicious \"epmap\" connection to a remote computer via remote procedure call (RPC), you should focus on monitoring network connections, specifically within Windows environments. Look for TCP protocol connections that are initiated by the source and target destination port 135, which is commonly used by \"epmap\" or RPC services. It is essential to filter out legitimate system connections initiated by Windows or Amazon SSM (Simple Systems Manager) agent updater. These legitimate connections commonly start with the directories \"C:\\Windows\\\" and \"C:\\ProgramData\\Amazon\\SSM\\Update\\amazon-ssm-agent-updater\". Connections that do not originate from these paths and meet the other specified criteria should be considered suspicious. The associated tactics and techniques include Execution and Lateral Movement, where attackers might leverage RPC to execute commands remotely or move within the network. Paying attention to these details with a high level of scrutiny is crucial due to the high impact level of potential findings, although the exact nature of false positives remains uncertain."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\rundll32.exe'\n        - OriginalFileName: 'RUNDLL32.EXE'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'shell32.dll'\n            - 'Control_RunDLL'\n        CommandLine|contains:\n            - '%AppData%'\n            - '%LocalAppData%'\n            - '%Temp%'\n            - '%tmp%'\n            - '\\AppData\\'\n            - '\\Temp\\'\n            - '\\Users\\Public\\'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect shell32.dll executing a DLL in a suspicious directory\n\nHere is how  the given sigma rule operates: In order to detect shell32.dll executing a DLL in a suspicious directory, you should monitor process creation events on Windows systems. Specifically, keep an eye out for instances where the process image name ends with '\\rundll32.exe' or where the original file name is explicitly 'RUNDLL32.EXE'. Additionally, scrutinize the command line for the following patterns: the command must include both 'shell32.dll' and 'Control_RunDLL' to match, and it may contain references to common ephemeral or user profile directories such as '%AppData%', '%LocalAppData%', '%Temp%', '%tmp%', '\\AppData\\', '\\Temp\\', or '\\Users\\Public\\'. For detection to be considered valid, both the image name or file name criteria and the command line conditions must be met. This approach aims to highlight activities potentially related to malware execution or persistence mechanisms that abuse shell32.dll to load malicious DLLs from directories that attackers often exploit for stealth.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\rundll32.exe'\n        - OriginalFileName: 'RUNDLL32.EXE'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'shell32.dll'\n            - 'Control_RunDLL'\n        CommandLine|contains:\n            - '%AppData%'\n            - '%LocalAppData%'\n            - '%Temp%'\n            - '%tmp%'\n            - '\\AppData\\'\n            - '\\Temp\\'\n            - '\\Users\\Public\\'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "shell32.dll executing a DLL in a suspicious directory",
      "answer": "In order to detect shell32.dll executing a DLL in a suspicious directory, you should monitor process creation events on Windows systems. Specifically, keep an eye out for instances where the process image name ends with '\\rundll32.exe' or where the original file name is explicitly 'RUNDLL32.EXE'. Additionally, scrutinize the command line for the following patterns: the command must include both 'shell32.dll' and 'Control_RunDLL' to match, and it may contain references to common ephemeral or user profile directories such as '%AppData%', '%LocalAppData%', '%Temp%', '%tmp%', '\\AppData\\', '\\Temp\\', or '\\Users\\Public\\'. For detection to be considered valid, both the image name or file name criteria and the command line conditions must be met. This approach aims to highlight activities potentially related to malware execution or persistence mechanisms that abuse shell32.dll to load malicious DLLs from directories that attackers often exploit for stealth."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Obfuscated use of Environment Variables to execute PowerShell.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect obfuscated use of environment variables to execute PowerShell, you should focus on monitoring Windows security event logs for events with EventID 4697, which indicates the creation of a new service. Specifically, look for events that involve command-line patterns indicating the use of 'cmd.exe' with switches '/c' or '/r' followed by the command 'set' and the flag '-f', which are typical of obfuscation techniques used to execute malicious code through PowerShell. These patterns often signify attempts to hide the real intentions of the code being executed, making use of environment variables in a manner that is not straightforward, thereby bypassing conventional detection methods.\n\nDetection revolves around identifying service creation events where the service file name contains the mentioned elements, indicative of a complex and obfuscated PowerShell command being constructed and executed. Such commands might involve downloading and executing scripts from the internet, modifying system configurations, or executing other obfuscated PowerShell scripts designed to carry out malicious activities on the system without being easily detected.\n\nIt is essential to enable the 'System Security Extension' audit subcategory to log these types of events, as without this logging capability, such obfuscated attempts might go unnoticed. Monitoring for these specific event characteristics allows for the detection of sophisticated attempts to misuse environment variables for executing PowerShell scripts in a concealed way. \n\nBe aware that there may be unknowns that could trigger false positives, hence the level of alert is set to high to indicate the potential severity of detecting such patterns. These detections are important for defending against tactics and techniques like Defense Evasion, Execution through API, and Command and Control, as they represent methods by which attackers seek to execute commands and scripts in a manner that avoids detection and maintains persistence on a system.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\n    definition: The 'System Security Extension' audit subcategory need to be enabled to log the EID 4697\ndetection:\n    selection:\n        EventID: 4697\n        # ServiceFileName|re: '.*cmd.{0,5}(?:\\/c|\\/r)(?:\\s|)\\\"set\\s[a-zA-Z]{3,6}.*(?:\\{\\d\\}){1,}\\\\\\\"\\s+?\\-f(?:.*\\)){1,}.*\\\"'\n        # Example 1: C:\\winDoWs\\SySTeM32\\cmd.Exe /C\"SET NOtI=Invoke-Expression (New-Object Net.WebClient).DownloadString&& PowERshElL -NOl SET-iteM ( 'VAR' + 'i'+ 'A' + 'blE:Ao6' + 'I0') ( [TYpe](\\\"{2}{3}{0}{1}\\\"-F 'iRoN','mENT','e','nv') ) ; ${exECUtIONCOnTEXT}.\\\"IN`VO`KecOmMaND\\\".\\\"inVo`KES`crIPt\\\"( ( ( GEt-VAriAble ( 'a' + 'o6I0') -vaLU )::(\\\"{1}{4}{2}{3}{0}\\\" -f'e','gETenvIR','NtvaRIa','BL','ONme' ).Invoke(( \\\"{0}{1}\\\"-f'n','oti' ),( \\\"{0}{1}\\\" -f'pRoC','esS') )) )\"\n        # Example 2: cMD.exe /C \"seT SlDb=Invoke-Expression (New-Object Net.WebClient).DownloadString&& pOWErShell .(( ^&(\\\"{1}{0}{2}{3}\\\" -f 'eT-vaR','G','iab','lE' ) (\\\"{0}{1}\\\" -f '*m','DR*' ) ).\\\"na`ME\\\"[3,11,2]-JOIN'' ) ( ( ^&(\\\"{0}{1}\\\" -f'g','CI' ) (\\\"{0}{1}\\\" -f 'ENV',':SlDb' ) ).\\\"VA`luE\\\" ) \"\n        ServiceFileName|contains|all:\n            - 'cmd'\n            - '\"set'\n            - '-f'\n        ServiceFileName|contains:\n            - '/c'\n            - '/r'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\n    definition: The 'System Security Extension' audit subcategory need to be enabled to log the EID 4697\ndetection:\n    selection:\n        EventID: 4697\n        # ServiceFileName|re: '.*cmd.{0,5}(?:\\/c|\\/r)(?:\\s|)\\\"set\\s[a-zA-Z]{3,6}.*(?:\\{\\d\\}){1,}\\\\\\\"\\s+?\\-f(?:.*\\)){1,}.*\\\"'\n        # Example 1: C:\\winDoWs\\SySTeM32\\cmd.Exe /C\"SET NOtI=Invoke-Expression (New-Object Net.WebClient).DownloadString&& PowERshElL -NOl SET-iteM ( 'VAR' + 'i'+ 'A' + 'blE:Ao6' + 'I0') ( [TYpe](\\\"{2}{3}{0}{1}\\\"-F 'iRoN','mENT','e','nv') ) ; ${exECUtIONCOnTEXT}.\\\"IN`VO`KecOmMaND\\\".\\\"inVo`KES`crIPt\\\"( ( ( GEt-VAriAble ( 'a' + 'o6I0') -vaLU )::(\\\"{1}{4}{2}{3}{0}\\\" -f'e','gETenvIR','NtvaRIa','BL','ONme' ).Invoke(( \\\"{0}{1}\\\"-f'n','oti' ),( \\\"{0}{1}\\\" -f'pRoC','esS') )) )\"\n        # Example 2: cMD.exe /C \"seT SlDb=Invoke-Expression (New-Object Net.WebClient).DownloadString&& pOWErShell .(( ^&(\\\"{1}{0}{2}{3}\\\" -f 'eT-vaR','G','iab','lE' ) (\\\"{0}{1}\\\" -f '*m','DR*' ) ).\\\"na`ME\\\"[3,11,2]-JOIN'' ) ( ( ^&(\\\"{0}{1}\\\" -f'g','CI' ) (\\\"{0}{1}\\\" -f 'ENV',':SlDb' ) ).\\\"VA`luE\\\" ) \"\n        ServiceFileName|contains|all:\n            - 'cmd'\n            - '\"set'\n            - '-f'\n        ServiceFileName|contains:\n            - '/c'\n            - '/r'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Obfuscated use of Environment Variables to execute PowerShell",
      "answer": "In order to detect obfuscated use of environment variables to execute PowerShell, you should focus on monitoring Windows security event logs for events with EventID 4697, which indicates the creation of a new service. Specifically, look for events that involve command-line patterns indicating the use of 'cmd.exe' with switches '/c' or '/r' followed by the command 'set' and the flag '-f', which are typical of obfuscation techniques used to execute malicious code through PowerShell. These patterns often signify attempts to hide the real intentions of the code being executed, making use of environment variables in a manner that is not straightforward, thereby bypassing conventional detection methods.\n\nDetection revolves around identifying service creation events where the service file name contains the mentioned elements, indicative of a complex and obfuscated PowerShell command being constructed and executed. Such commands might involve downloading and executing scripts from the internet, modifying system configurations, or executing other obfuscated PowerShell scripts designed to carry out malicious activities on the system without being easily detected.\n\nIt is essential to enable the 'System Security Extension' audit subcategory to log these types of events, as without this logging capability, such obfuscated attempts might go unnoticed. Monitoring for these specific event characteristics allows for the detection of sophisticated attempts to misuse environment variables for executing PowerShell scripts in a concealed way. \n\nBe aware that there may be unknowns that could trigger false positives, hence the level of alert is set to high to indicate the potential severity of detecting such patterns. These detections are important for defending against tactics and techniques like Defense Evasion, Execution through API, and Command and Control, as they represent methods by which attackers seek to execute commands and scripts in a manner that avoids detection and maintains persistence on a system."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting usage of bitsadmin downloading a file to a suspicious target folder.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect usage of bitsadmin downloading a file to a suspicious target folder, you should: Monitor process creation events on Windows systems for any activity related to the use of the bitsadmin.exe utility. Specifically, look for processes where the image ends with '\\bitsadmin.exe' or where the OriginalFileName is exactly 'bitsadmin.exe'. Furthermore, pay close attention to the command line arguments accompanying these processes. Be on the lookout for command lines that include '/transfer', '/create', or '/addfile' parameters, as these are indicative of bitsadmin being used to manipulate or transfer files. Equally important is to examine the command lines for paths pointing to suspicious folders. Such folders include, but are not limited to, '\\Perflogs', '\\ProgramData\\', '\\Temp\\', '\\Users\\Public\\', '\\Windows\\', '\\AppData\\Local\\Temp\\', '\\AppData\\Roaming\\', '\\Desktop\\', '%ProgramData%', and '%public%'. If all these conditions are met, it likely indicates the misuse of bitsadmin for downloading files to suspicious locations, and such activity should be investigated promptly due to its high-risk nature.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\bitsadmin.exe'\n        - OriginalFileName: 'bitsadmin.exe'\n    selection_flags:\n        CommandLine|contains:\n            - ' /transfer '\n            - ' /create '\n            - ' /addfile '\n    selection_folder:\n        CommandLine|contains:\n            - ':\\Perflogs'\n            - ':\\ProgramData\\'\n            - ':\\Temp\\'\n            - ':\\Users\\Public\\'\n            - ':\\Windows\\'\n            - '\\AppData\\Local\\Temp\\'\n            - '\\AppData\\Roaming\\'\n            - '\\Desktop\\'\n            - '%ProgramData%'\n            - '%public%'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\bitsadmin.exe'\n        - OriginalFileName: 'bitsadmin.exe'\n    selection_flags:\n        CommandLine|contains:\n            - ' /transfer '\n            - ' /create '\n            - ' /addfile '\n    selection_folder:\n        CommandLine|contains:\n            - ':\\Perflogs'\n            - ':\\ProgramData\\'\n            - ':\\Temp\\'\n            - ':\\Users\\Public\\'\n            - ':\\Windows\\'\n            - '\\AppData\\Local\\Temp\\'\n            - '\\AppData\\Roaming\\'\n            - '\\Desktop\\'\n            - '%ProgramData%'\n            - '%public%'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "usage of bitsadmin downloading a file to a suspicious target folder",
      "answer": "In order to detect usage of bitsadmin downloading a file to a suspicious target folder, you should: Monitor process creation events on Windows systems for any activity related to the use of the bitsadmin.exe utility. Specifically, look for processes where the image ends with '\\bitsadmin.exe' or where the OriginalFileName is exactly 'bitsadmin.exe'. Furthermore, pay close attention to the command line arguments accompanying these processes. Be on the lookout for command lines that include '/transfer', '/create', or '/addfile' parameters, as these are indicative of bitsadmin being used to manipulate or transfer files. Equally important is to examine the command lines for paths pointing to suspicious folders. Such folders include, but are not limited to, '\\Perflogs', '\\ProgramData\\', '\\Temp\\', '\\Users\\Public\\', '\\Windows\\', '\\AppData\\Local\\Temp\\', '\\AppData\\Roaming\\', '\\Desktop\\', '%ProgramData%', and '%public%'. If all these conditions are met, it likely indicates the misuse of bitsadmin for downloading files to suspicious locations, and such activity should be investigated promptly due to its high-risk nature."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    product: windows\n    category: registry_event\ndetection:\n    selection:\n        TargetObject|contains: '\\SAM\\SAM\\Domains\\Account\\Users\\Names\\'\n        TargetObject|endswith: '$'\n        Image|endswith: '\\lsass.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect Sysmon registry detection of a local hidden user account.\n\nHere is how  the given sigma rule operates: In order to detect the creation or manipulation of a local hidden user account via Sysmon registry events, you should monitor Windows registry event logs for actions targeting registry keys related to user accounts, specifically those that occur within the path `\\SAM\\SAM\\Domains\\Account\\Users\\Names\\`. Focus on entries where the target object either contains this path or ends with a `$` symbol, indicating hidden or system accounts. Additionally, give special attention to events generated by the image `lsass.exe` as this binary is often associated with local security authority processes and could be indicative of malicious activity aimed at manipulating user accounts. Despite the potential for unknown false positives, this activity is deemed to have a high level of concern due to its implications for system security.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: registry_event\ndetection:\n    selection:\n        TargetObject|contains: '\\SAM\\SAM\\Domains\\Account\\Users\\Names\\'\n        TargetObject|endswith: '$'\n        Image|endswith: '\\lsass.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Sysmon registry detection of a local hidden user account.",
      "answer": "In order to detect the creation or manipulation of a local hidden user account via Sysmon registry events, you should monitor Windows registry event logs for actions targeting registry keys related to user accounts, specifically those that occur within the path `\\SAM\\SAM\\Domains\\Account\\Users\\Names\\`. Focus on entries where the target object either contains this path or ends with a `$` symbol, indicating hidden or system accounts. Additionally, give special attention to events generated by the image `lsass.exe` as this binary is often associated with local security authority processes and could be indicative of malicious activity aimed at manipulating user accounts. Despite the potential for unknown false positives, this activity is deemed to have a high level of concern due to its implications for system security."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        Image|endswith: '\\nslookup.exe'\n        CommandLine|endswith: '\\nslookup.exe'\n    condition: selection | count(Image) by ParentImage > 100\nfields:\n    - Image\n    - CommandLine\n    - ParentImage\nfalsepositives:\n    - Other powershell scripts that call nslookup.exe\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect The PowerShell implementation of DNSCat2 calls nslookup to craft queries. Counting nslookup processes spawned by PowerShell will show hundreds or thousands of instances if PS DNSCat2 is active locally.\n\nHere is how  the given sigma rule operates: In order to detect the PowerShell implementation of DNSCat2 that calls nslookup to craft queries, monitoring and analyzing process creation logs in Windows systems is crucial. Focus on identifying instances where PowerShell or pwsh has spawned the nslookup.exe process. Specifically, look for scenarios where the parent process is either powershell.exe or pwsh.exe, indicating that a PowerShell script is executing these commands. Furthermore, the command line should end with nslookup.exe, confirming that this utility is being used. An important indicator of PS DNSCat2 activity is the volume of nslookup processes initiated by PowerShell; seeing more than 100 such instances is a strong signal of this specific behavior.\n\nDuring analysis, ensure to collect and review fields such as the image executed (Image), the command line input (CommandLine), and the parent image initiating the process (ParentImage). This will aid in understanding the context of each instance and distinguish it from benign activity. Note that it's possible to encounter false positives, primarily if other legitimate PowerShell scripts are designed to call nslookup.exe extensively.\n\nThe techniques involved in this detection are tied to recognizing the use of system utilities potentially abused in a post-compromise stage and scripting activities, aligning with tactics such as execution and command and control. Always consider the frequency of these events and their unique characteristics to differentiate between suspicious activities and normal, administrative tasks.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        Image|endswith: '\\nslookup.exe'\n        CommandLine|endswith: '\\nslookup.exe'\n    condition: selection | count(Image) by ParentImage > 100\nfields:\n    - Image\n    - CommandLine\n    - ParentImage\nfalsepositives:\n    - Other powershell scripts that call nslookup.exe\nlevel: high\n",
      "question": "The PowerShell implementation of DNSCat2 calls nslookup to craft queries. Counting nslookup processes spawned by PowerShell will show hundreds or thousands of instances if PS DNSCat2 is active locally.",
      "answer": "In order to detect the PowerShell implementation of DNSCat2 that calls nslookup to craft queries, monitoring and analyzing process creation logs in Windows systems is crucial. Focus on identifying instances where PowerShell or pwsh has spawned the nslookup.exe process. Specifically, look for scenarios where the parent process is either powershell.exe or pwsh.exe, indicating that a PowerShell script is executing these commands. Furthermore, the command line should end with nslookup.exe, confirming that this utility is being used. An important indicator of PS DNSCat2 activity is the volume of nslookup processes initiated by PowerShell; seeing more than 100 such instances is a strong signal of this specific behavior.\n\nDuring analysis, ensure to collect and review fields such as the image executed (Image), the command line input (CommandLine), and the parent image initiating the process (ParentImage). This will aid in understanding the context of each instance and distinguish it from benign activity. Note that it's possible to encounter false positives, primarily if other legitimate PowerShell scripts are designed to call nslookup.exe extensively.\n\nThe techniques involved in this detection are tied to recognizing the use of system utilities potentially abused in a post-compromise stage and scripting activities, aligning with tactics such as execution and command and control. Always consider the frequency of these events and their unique characteristics to differentiate between suspicious activities and normal, administrative tasks."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting files written by the different tools that exploit HiveNightmare.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect files written by the different tools that exploit HiveNightmare, you should monitor Windows file event logs for any creation or modification of files with specific names that indicate they were created by known HiveNightmare exploitation tools. These filenames include patterns related to different programming languages versions of the exploitation tools such as those containing '\\hive_sam_' indicative of the Go version, '\\SAM-2021-', '\\SAM-2022-', and '\\SAM-2023-' for C++ versions, '\\SAM-haxx' for early C++ versions, '\\Sam.save' for the PowerShell version, and specifically 'C:\\windows\\temp\\sam' for the C# version of HiveNightmare. Pay attention to the command lines used in the creation or modification processes, as well as the parent command lines, as they may provide additional context for investigation. Be mindful that there might be false positives, such as legitimate files that accidentally contain these string patterns. Given the nature of the files being monitored, this activity is associated with a high level of concern due to its implication in security breaches.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        - TargetFilename|contains:\n            - '\\hive_sam_'  # Go version\n            - '\\SAM-2021-'  # C++ version\n            - '\\SAM-2022-'  # C++ version\n            - '\\SAM-2023-'  # C++ version\n            - '\\SAM-haxx'   # Early C++ versions\n            - '\\Sam.save'   # PowerShell version\n        - TargetFilename: 'C:\\windows\\temp\\sam'  # C# version of HiveNightmare\n    condition: selection\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Files that accidentally contain these strings\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        - TargetFilename|contains:\n            - '\\hive_sam_'  # Go version\n            - '\\SAM-2021-'  # C++ version\n            - '\\SAM-2022-'  # C++ version\n            - '\\SAM-2023-'  # C++ version\n            - '\\SAM-haxx'   # Early C++ versions\n            - '\\Sam.save'   # PowerShell version\n        - TargetFilename: 'C:\\windows\\temp\\sam'  # C# version of HiveNightmare\n    condition: selection\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Files that accidentally contain these strings\nlevel: high\n",
      "question": "files written by the different tools that exploit HiveNightmare",
      "answer": "In order to detect files written by the different tools that exploit HiveNightmare, you should monitor Windows file event logs for any creation or modification of files with specific names that indicate they were created by known HiveNightmare exploitation tools. These filenames include patterns related to different programming languages versions of the exploitation tools such as those containing '\\hive_sam_' indicative of the Go version, '\\SAM-2021-', '\\SAM-2022-', and '\\SAM-2023-' for C++ versions, '\\SAM-haxx' for early C++ versions, '\\Sam.save' for the PowerShell version, and specifically 'C:\\windows\\temp\\sam' for the C# version of HiveNightmare. Pay attention to the command lines used in the creation or modification processes, as well as the parent command lines, as they may provide additional context for investigation. Be mindful that there might be false positives, such as legitimate files that accidentally contain these string patterns. Given the nature of the files being monitored, this activity is associated with a high level of concern due to its implication in security breaches."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting script file execution (.js, .jse, .vba, .vbe, .vbs, .wsf) by Wscript/Cscript.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect script file execution (.js, .jse, .vba, .vbe, .vbs, .wsf) by Wscript/Cscript, you should monitor for process creation events on Windows systems, specifically focusing on the execution of `wscript.exe` or `cscript.exe`. Detecting the use of these scripting hosts involves looking for their original file names (`wscript.exe` and `cscript.exe`) or paths that end with these executables. Additionally, pay attention to the command line arguments for these processes, as script file executions are indicated by the presence of file extensions such as `.js`, `.jse`, `.vba`, `.vbe`, `.vbs`, and `.wsf`. It's important to note that the effectiveness of this detection might require fine-tuning to reduce potential false positives. One recommended approach is to incorporate the user profile path in the command line analysis if the rule generates too many alerts. This approach will significantly improve the detection's accuracy and utility in identifying actual malicious activity involving script file execution with Wscript or Cscript.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - OriginalFileName:\n            - 'wscript.exe'\n            - 'cscript.exe'\n        - Image|endswith:\n            - '\\wscript.exe'\n            - '\\cscript.exe'\n    selection_cli:\n        CommandLine|contains:\n            - '.js'\n            - '.jse'\n            - '.vba'\n            - '.vbe'\n            - '.vbs'\n            - '.wsf'\n    condition: all of selection_*\nfalsepositives:\n    - Some additional tunning is required. It is recommended to add the user profile path in CommandLine if it is getting too noisy.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - OriginalFileName:\n            - 'wscript.exe'\n            - 'cscript.exe'\n        - Image|endswith:\n            - '\\wscript.exe'\n            - '\\cscript.exe'\n    selection_cli:\n        CommandLine|contains:\n            - '.js'\n            - '.jse'\n            - '.vba'\n            - '.vbe'\n            - '.vbs'\n            - '.wsf'\n    condition: all of selection_*\nfalsepositives:\n    - Some additional tunning is required. It is recommended to add the user profile path in CommandLine if it is getting too noisy.\nlevel: medium\n",
      "question": "script file execution (.js, .jse, .vba, .vbe, .vbs, .wsf) by Wscript/Cscript",
      "answer": "In order to detect script file execution (.js, .jse, .vba, .vbe, .vbs, .wsf) by Wscript/Cscript, you should monitor for process creation events on Windows systems, specifically focusing on the execution of `wscript.exe` or `cscript.exe`. Detecting the use of these scripting hosts involves looking for their original file names (`wscript.exe` and `cscript.exe`) or paths that end with these executables. Additionally, pay attention to the command line arguments for these processes, as script file executions are indicated by the presence of file extensions such as `.js`, `.jse`, `.vba`, `.vbe`, `.vbs`, and `.wsf`. It's important to note that the effectiveness of this detection might require fine-tuning to reduce potential false positives. One recommended approach is to incorporate the user profile path in the command line analysis if the rule generates too many alerts. This approach will significantly improve the detection's accuracy and utility in identifying actual malicious activity involving script file execution with Wscript or Cscript."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of the IEExec utility to download payloads.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution of the IEExec utility to download payloads, you should: Monitor the creation of processes on Windows systems for instances where the IEExec utility is used. Specifically, look for processes that end with the image name '\\IEExec.exe' or have 'IEExec.exe' as the OriginalFileName. Additionally, pay attention to any command line arguments that include 'https://' or 'http://', indicating a possible remote payload retrieval attempt. This combination of process creation involving IEExec.exe and remote payload retrieval attempts through HTTP or HTTPS protocols should be flagged for further investigation. Keep in mind that while this method is highly indicative of malicious activity, there may be cases where it detects legitimate use of network resources, though such instances are currently considered unknown.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    lolbas:\n        - Image|endswith: '\\IEExec.exe'\n        - OriginalFileName: 'IEExec.exe'\n    remote:\n        CommandLine|contains:\n            - 'https://'\n            - 'http://'\n    condition: lolbas and remote\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    lolbas:\n        - Image|endswith: '\\IEExec.exe'\n        - OriginalFileName: 'IEExec.exe'\n    remote:\n        CommandLine|contains:\n            - 'https://'\n            - 'http://'\n    condition: lolbas and remote\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "execution of the IEExec utility to download payloads",
      "answer": "In order to detect execution of the IEExec utility to download payloads, you should: Monitor the creation of processes on Windows systems for instances where the IEExec utility is used. Specifically, look for processes that end with the image name '\\IEExec.exe' or have 'IEExec.exe' as the OriginalFileName. Additionally, pay attention to any command line arguments that include 'https://' or 'http://', indicating a possible remote payload retrieval attempt. This combination of process creation involving IEExec.exe and remote payload retrieval attempts through HTTP or HTTPS protocols should be flagged for further investigation. Keep in mind that while this method is highly indicative of malicious activity, there may be cases where it detects legitimate use of network resources, though such instances are currently considered unknown."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting pattern of UAC Bypass using DismHost DLL hijacking (UACMe 63).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the pattern of UAC Bypass using DismHost DLL hijacking (UACMe 63), you should monitor the creation of processes on Windows systems, specifically focusing on instances where DismHost.exe is launched from a path within a user's AppData\\Local\\Temp directory with the parent process image path also being within the C:\\Users\\ directory. Take special note if these processes are launched with 'High' or 'System' integrity levels, as this could indicate an attempt at privilege escalation through UAC bypass utilizing DLL hijacking techniques associated with UACMe method #63. This scenario requires heightened attention due to its suspicious nature and the potential for false positives is acknowledged but unspecified, reflecting the unique aspects of this sophisticated attack technique.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|contains|all:\n            - 'C:\\Users\\'\n            - '\\AppData\\Local\\Temp\\'\n            - '\\DismHost.exe'\n        IntegrityLevel:\n            - 'High'\n            - 'System'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|contains|all:\n            - 'C:\\Users\\'\n            - '\\AppData\\Local\\Temp\\'\n            - '\\DismHost.exe'\n        IntegrityLevel:\n            - 'High'\n            - 'System'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "pattern of UAC Bypass using DismHost DLL hijacking (UACMe 63)",
      "answer": "In order to detect the pattern of UAC Bypass using DismHost DLL hijacking (UACMe 63), you should monitor the creation of processes on Windows systems, specifically focusing on instances where DismHost.exe is launched from a path within a user's AppData\\Local\\Temp directory with the parent process image path also being within the C:\\Users\\ directory. Take special note if these processes are launched with 'High' or 'System' integrity levels, as this could indicate an attempt at privilege escalation through UAC bypass utilizing DLL hijacking techniques associated with UACMe method #63. This scenario requires heightened attention due to its suspicious nature and the potential for false positives is acknowledged but unspecified, reflecting the unique aspects of this sophisticated attack technique."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - CommandLine|contains|all:\n            - 'javascript:'\n            - '.RegisterXLL'\n        - CommandLine|contains|all:\n            - 'url.dll'\n            - 'OpenURL'\n        - CommandLine|contains|all:\n            - 'url.dll'\n            - 'OpenURLA'\n        - CommandLine|contains|all:\n            - 'url.dll'\n            - 'FileProtocolHandler'\n        - CommandLine|contains|all:\n            - 'zipfldr.dll'\n            - 'RouteTheCall'\n        - CommandLine|contains|all:\n            - 'shell32.dll'\n            - 'Control_RunDLL'\n        - CommandLine|contains|all:\n            - 'shell32.dll'\n            - 'ShellExec_RunDLL'\n        - CommandLine|contains|all:\n            - 'mshtml.dll'\n            - 'PrintHTML'\n        - CommandLine|contains|all:\n            - 'advpack.dll'\n            - 'LaunchINFSection'\n        - CommandLine|contains|all:\n            - 'advpack.dll'\n            - 'RegisterOCX'\n        - CommandLine|contains|all:\n            - 'ieadvpack.dll'\n            - 'LaunchINFSection'\n        - CommandLine|contains|all:\n            - 'ieadvpack.dll'\n            - 'RegisterOCX'\n        - CommandLine|contains|all:\n            - 'ieframe.dll'\n            - 'OpenURL'\n        - CommandLine|contains|all:\n            - 'shdocvw.dll'\n            - 'OpenURL'\n        - CommandLine|contains|all:\n            - 'syssetup.dll'\n            - 'SetupInfObjectInstallAction'\n        - CommandLine|contains|all:\n            - 'setupapi.dll'\n            - 'InstallHinfSection'\n        - CommandLine|contains|all:\n            - 'pcwutl.dll'\n            - 'LaunchApplication'\n        - CommandLine|contains|all:\n            - 'dfshim.dll'\n            - 'ShOpenVerbApplication'\n        - CommandLine|contains|all:\n            - 'dfshim.dll'\n            - 'ShOpenVerbShortcut'\n        - CommandLine|contains|all:\n            - 'scrobj.dll'\n            - 'GenerateTypeLib'\n            - 'http'\n        - CommandLine|contains|all:\n            - 'shimgvw.dll'\n            - 'ImageView_Fullscreen'\n            - 'http'\n        - CommandLine|contains|all:\n            - 'comsvcs.dll'\n            - 'MiniDump'\n    filter_main_screensaver:\n        CommandLine|contains: 'shell32.dll,Control_RunDLL desk.cpl,screensaver,@screensaver'\n    filter_main_parent_cpl:  # Settings\n        ParentImage: 'C:\\Windows\\System32\\control.exe'\n        ParentCommandLine|contains: '.cpl'\n        CommandLine|contains|all:\n            - 'Shell32.dll'\n            - 'Control_RunDLL'\n            - '.cpl'\n    filter_main_startmenu:\n        ParentImage: 'C:\\Windows\\System32\\control.exe'\n        CommandLine|startswith: '\"C:\\Windows\\system32\\rundll32.exe\" Shell32.dll,Control_RunDLL \"C:\\Windows\\System32\\'\n        CommandLine|endswith: '.cpl\",'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - False positives depend on scripts and administrative tools used in the monitored environment\nlevel: medium\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect suspicious execution of rundll32, with specific calls to some DLLs with known LOLBIN functionalities\n\nHere is how  the given sigma rule operates: In order to detect suspicious execution of rundll32, with specific calls to some DLLs with known LOLBIN functionalities, you should monitor the creation of processes on Windows systems for command lines that include specific patterns indicative of leveraging living-off-the-land binaries (LOLBINs). The focus is on command lines containing sequences that either directly call into DLLs with known functionalities for executing code or scripts in a way that might be utilized by attackers to execute malware or scripts without directly invoking an executable file known to security software. Specifically, watch for command lines that include: \n\n- Use of 'javascript:' in conjunction with '.RegisterXLL' suggesting an attempt to register an XLL through JavaScript, potentially for executing arbitrary code.\n- Patterns that involve 'url.dll' with either 'OpenURL', 'OpenURLA', or 'FileProtocolHandler', which might be attempts to open URLs or files in a way that bypasses usual safeguards.\n- Invocation of 'zipfldr.dll' with 'RouteTheCall' which could be an attempt to manipulate ZIP files in a manner not typical for normal user operations.\n- Utilization of 'shell32.dll' with 'Control_RunDLL' or 'ShellExec_RunDLL', indicating an attempt to execute control panel items or shell commands in a potentially malicious context.\n- Calls to 'mshtml.dll' with 'PrintHTML', 'advpack.dll' with 'LaunchINFSection' or 'RegisterOCX', 'ieadvpack.dll' with 'LaunchINFSection' or 'RegisterOCX', 'ieframe.dll' with 'OpenURL', 'shdocvw.dll' with 'OpenURL', all of which can be indicators of attempting to execute or register scripts, ActiveX controls or HTML files in ways that could be leveraged for attack purposes.\n- 'setupapi.dll' with 'InstallHinfSection', 'syssetup.dll' with 'SetupInfObjectInstallAction', among others, are signs of attempting Windows setup actions or installations that may be misused for malicious installations.\n- Also look for execution attempts involving 'dfshim.dll' or 'scrobj.dll' related to application shortcuts, scripting, or HTTP communications that could indicate attempts at remote code execution or downloading and executing malicious scripts.\n\nExclude command lines that are related to legitimate settings adjustments or screensaver configurations, specifically those involving 'shell32.dll,Control_RunDLL desk.cpl,screensaver,@screensaver', or ones starting or ending with paths to control panel settings ('.cpl' files) initiated from 'control.exe'.\n\nThis detection strategy hinges on recognizing patterns in command-line executions that deviate from normal user or system activity, potentially indicating misuse of system tools for malicious purposes. Be aware that false positives can occur, especially in environments where scripts and administrative tools are used in complex ways that mimic these command patterns. The risk level associated with these detections is considered medium, underscoring the need for context and additional investigation when alerts are triggered.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - CommandLine|contains|all:\n            - 'javascript:'\n            - '.RegisterXLL'\n        - CommandLine|contains|all:\n            - 'url.dll'\n            - 'OpenURL'\n        - CommandLine|contains|all:\n            - 'url.dll'\n            - 'OpenURLA'\n        - CommandLine|contains|all:\n            - 'url.dll'\n            - 'FileProtocolHandler'\n        - CommandLine|contains|all:\n            - 'zipfldr.dll'\n            - 'RouteTheCall'\n        - CommandLine|contains|all:\n            - 'shell32.dll'\n            - 'Control_RunDLL'\n        - CommandLine|contains|all:\n            - 'shell32.dll'\n            - 'ShellExec_RunDLL'\n        - CommandLine|contains|all:\n            - 'mshtml.dll'\n            - 'PrintHTML'\n        - CommandLine|contains|all:\n            - 'advpack.dll'\n            - 'LaunchINFSection'\n        - CommandLine|contains|all:\n            - 'advpack.dll'\n            - 'RegisterOCX'\n        - CommandLine|contains|all:\n            - 'ieadvpack.dll'\n            - 'LaunchINFSection'\n        - CommandLine|contains|all:\n            - 'ieadvpack.dll'\n            - 'RegisterOCX'\n        - CommandLine|contains|all:\n            - 'ieframe.dll'\n            - 'OpenURL'\n        - CommandLine|contains|all:\n            - 'shdocvw.dll'\n            - 'OpenURL'\n        - CommandLine|contains|all:\n            - 'syssetup.dll'\n            - 'SetupInfObjectInstallAction'\n        - CommandLine|contains|all:\n            - 'setupapi.dll'\n            - 'InstallHinfSection'\n        - CommandLine|contains|all:\n            - 'pcwutl.dll'\n            - 'LaunchApplication'\n        - CommandLine|contains|all:\n            - 'dfshim.dll'\n            - 'ShOpenVerbApplication'\n        - CommandLine|contains|all:\n            - 'dfshim.dll'\n            - 'ShOpenVerbShortcut'\n        - CommandLine|contains|all:\n            - 'scrobj.dll'\n            - 'GenerateTypeLib'\n            - 'http'\n        - CommandLine|contains|all:\n            - 'shimgvw.dll'\n            - 'ImageView_Fullscreen'\n            - 'http'\n        - CommandLine|contains|all:\n            - 'comsvcs.dll'\n            - 'MiniDump'\n    filter_main_screensaver:\n        CommandLine|contains: 'shell32.dll,Control_RunDLL desk.cpl,screensaver,@screensaver'\n    filter_main_parent_cpl:  # Settings\n        ParentImage: 'C:\\Windows\\System32\\control.exe'\n        ParentCommandLine|contains: '.cpl'\n        CommandLine|contains|all:\n            - 'Shell32.dll'\n            - 'Control_RunDLL'\n            - '.cpl'\n    filter_main_startmenu:\n        ParentImage: 'C:\\Windows\\System32\\control.exe'\n        CommandLine|startswith: '\"C:\\Windows\\system32\\rundll32.exe\" Shell32.dll,Control_RunDLL \"C:\\Windows\\System32\\'\n        CommandLine|endswith: '.cpl\",'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - False positives depend on scripts and administrative tools used in the monitored environment\nlevel: medium\n",
      "question": "suspicious execution of rundll32, with specific calls to some DLLs with known LOLBIN functionalities",
      "answer": "In order to detect suspicious execution of rundll32, with specific calls to some DLLs with known LOLBIN functionalities, you should monitor the creation of processes on Windows systems for command lines that include specific patterns indicative of leveraging living-off-the-land binaries (LOLBINs). The focus is on command lines containing sequences that either directly call into DLLs with known functionalities for executing code or scripts in a way that might be utilized by attackers to execute malware or scripts without directly invoking an executable file known to security software. Specifically, watch for command lines that include: \n\n- Use of 'javascript:' in conjunction with '.RegisterXLL' suggesting an attempt to register an XLL through JavaScript, potentially for executing arbitrary code.\n- Patterns that involve 'url.dll' with either 'OpenURL', 'OpenURLA', or 'FileProtocolHandler', which might be attempts to open URLs or files in a way that bypasses usual safeguards.\n- Invocation of 'zipfldr.dll' with 'RouteTheCall' which could be an attempt to manipulate ZIP files in a manner not typical for normal user operations.\n- Utilization of 'shell32.dll' with 'Control_RunDLL' or 'ShellExec_RunDLL', indicating an attempt to execute control panel items or shell commands in a potentially malicious context.\n- Calls to 'mshtml.dll' with 'PrintHTML', 'advpack.dll' with 'LaunchINFSection' or 'RegisterOCX', 'ieadvpack.dll' with 'LaunchINFSection' or 'RegisterOCX', 'ieframe.dll' with 'OpenURL', 'shdocvw.dll' with 'OpenURL', all of which can be indicators of attempting to execute or register scripts, ActiveX controls or HTML files in ways that could be leveraged for attack purposes.\n- 'setupapi.dll' with 'InstallHinfSection', 'syssetup.dll' with 'SetupInfObjectInstallAction', among others, are signs of attempting Windows setup actions or installations that may be misused for malicious installations.\n- Also look for execution attempts involving 'dfshim.dll' or 'scrobj.dll' related to application shortcuts, scripting, or HTTP communications that could indicate attempts at remote code execution or downloading and executing malicious scripts.\n\nExclude command lines that are related to legitimate settings adjustments or screensaver configurations, specifically those involving 'shell32.dll,Control_RunDLL desk.cpl,screensaver,@screensaver', or ones starting or ending with paths to control panel settings ('.cpl' files) initiated from 'control.exe'.\n\nThis detection strategy hinges on recognizing patterns in command-line executions that deviate from normal user or system activity, potentially indicating misuse of system tools for malicious purposes. Be aware that false positives can occur, especially in environments where scripts and administrative tools are used in complex ways that mimic these command patterns. The risk level associated with these detections is considered medium, underscoring the need for context and additional investigation when alerts are triggered."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'esentutl'\n            - ' /p'\n    condition: selection\nfields:\n    - User\n    - CommandLine\n    - ParentCommandLine\n    - CurrentDirectory\nfalsepositives:\n    - To be determined\nlevel: medium\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect Conti recommendation to its affiliates to use esentutl to access NTDS dumped file. Trickbot also uses this utilities to get MSEdge info via its module pwgrab.\n\nHere is how  the given sigma rule operates: In order to detect the Conti recommendation to its affiliates to use esentutl to access NTDS dumped files, and the utilization of this utility by Trickbot to obtain MSEdge information via its module pwgrab, you should: Monitor the creation of processes on Windows systems for the execution of the command line tool 'esentutl' with the parameter '/p'. This detection is crucial as the use of 'esentutl', specifically with the parameter '/p', can be indicative of unauthorized attempts to repair or manipulate the NTDS.dit database file, which stores Active Directory data, including user accounts. Logging the user, the exact command line used, and the parent command line process can provide valuable context for investigating potentially malicious activity. Given that this behavior is associated with known threat actor techniques, any detection of such activity should be treated with a medium level of suspicion, although it is important to consider potential legitimate use cases that may lead to false positives.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'esentutl'\n            - ' /p'\n    condition: selection\nfields:\n    - User\n    - CommandLine\n    - ParentCommandLine\n    - CurrentDirectory\nfalsepositives:\n    - To be determined\nlevel: medium\n",
      "question": "Conti recommendation to its affiliates to use esentutl to access NTDS dumped file. Trickbot also uses this utilities to get MSEdge info via its module pwgrab.",
      "answer": "In order to detect the Conti recommendation to its affiliates to use esentutl to access NTDS dumped files, and the utilization of this utility by Trickbot to obtain MSEdge information via its module pwgrab, you should: Monitor the creation of processes on Windows systems for the execution of the command line tool 'esentutl' with the parameter '/p'. This detection is crucial as the use of 'esentutl', specifically with the parameter '/p', can be indicative of unauthorized attempts to repair or manipulate the NTDS.dit database file, which stores Active Directory data, including user accounts. Logging the user, the exact command line used, and the parent command line process can provide valuable context for investigating potentially malicious activity. Given that this behavior is associated with known threat actor techniques, any detection of such activity should be treated with a medium level of suspicion, although it is important to consider potential legitimate use cases that may lead to false positives."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: driver_load\n    product: windows\ndetection:\n    selection:\n        ImageLoaded|contains: '\\Temp\\'\n    condition: selection\nfalsepositives:\n    - There is a relevant set of false positives depending on applications in the environment\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect driver load from a temporary directory\n\nHere is how  the given sigma rule operates: In order to detect a driver load from a temporary directory, you should monitor driver load events on Windows systems and look specifically for drivers being loaded from paths that include the \\Temp\\ directory. This kind of activity is often indicative of malicious behavior, as legitimate drivers are generally not loaded from temporary directories. It's important to note that this detection strategy might result in a set of false positives depending on the applications present in the environment and their behaviors. Nonetheless, the significance of catching malicious driver loads justifies a high-level alert for such detections.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: driver_load\n    product: windows\ndetection:\n    selection:\n        ImageLoaded|contains: '\\Temp\\'\n    condition: selection\nfalsepositives:\n    - There is a relevant set of false positives depending on applications in the environment\nlevel: high\n",
      "question": "driver load from a temporary directory",
      "answer": "In order to detect a driver load from a temporary directory, you should monitor driver load events on Windows systems and look specifically for drivers being loaded from paths that include the \\Temp\\ directory. This kind of activity is often indicative of malicious behavior, as legitimate drivers are generally not loaded from temporary directories. It's important to note that this detection strategy might result in a set of false positives depending on the applications present in the environment and their behaviors. Nonetheless, the significance of catching malicious driver loads justifies a high-level alert for such detections."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        # Note: winrm.vbs can only be run by a process named cscript (see \"IsCScriptEnv\" function)\n        - Image|endswith: '\\cscript.exe'\n        - OriginalFileName: 'cscript.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'winrm'\n            - 'invoke Create wmicimv2/Win32_'\n            - '-r:http'\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: medium\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect an attempt to execute code or create service on remote host via winrm.vbs.\n\nHere is how  the given sigma rule operates: In order to detect an attempt to execute code or create service on a remote host via winrm.vbs, you should focus on monitoring process creation events within Windows environments. Specifically, be on the lookout for instances where the 'cscript.exe' process is initiated, as indicated by either the image path ending with '\\cscript.exe' or the original file name being 'cscript.exe'. Furthermore, pay close attention to the command line arguments used with these process executions. The presence of 'winrm', 'invoke Create wmicimv2/Win32_', and '-r:http' within the same command line suggests an attempt to leverage Windows Remote Management (WinRM) for potentially malicious remote code execution or service creation. The necessity to match all specified command line conditions underlines the sophistication of this detection method, aiming at reducing the likelihood of false positives, although some unknown cases may still occur. This analysis technique is of medium severity and aligns with the understanding of MITRE ATT&CK\u2019s tactics and techniques, specifically focusing on execution and command and control aspects of cyber threats.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        # Note: winrm.vbs can only be run by a process named cscript (see \"IsCScriptEnv\" function)\n        - Image|endswith: '\\cscript.exe'\n        - OriginalFileName: 'cscript.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'winrm'\n            - 'invoke Create wmicimv2/Win32_'\n            - '-r:http'\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "an attempt to execute code or create service on remote host via winrm.vbs.",
      "answer": "In order to detect an attempt to execute code or create service on a remote host via winrm.vbs, you should focus on monitoring process creation events within Windows environments. Specifically, be on the lookout for instances where the 'cscript.exe' process is initiated, as indicated by either the image path ending with '\\cscript.exe' or the original file name being 'cscript.exe'. Furthermore, pay close attention to the command line arguments used with these process executions. The presence of 'winrm', 'invoke Create wmicimv2/Win32_', and '-r:http' within the same command line suggests an attempt to leverage Windows Remote Management (WinRM) for potentially malicious remote code execution or service creation. The necessity to match all specified command line conditions underlines the sophistication of this detection method, aiming at reducing the likelihood of false positives, although some unknown cases may still occur. This analysis technique is of medium severity and aligns with the understanding of MITRE ATT&CK\u2019s tactics and techniques, specifically focusing on execution and command and control aspects of cyber threats."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Obfuscated Powershell via use MSHTA in Scripts.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect obfuscated PowerShell via use MSHTA in scripts, you should monitor Windows security logs for specific events that could indicate suspicious behavior associated with script obfuscation through MSHTA. Specifically, you should enable the 'System Security Extension' audit subcategory to log Event ID 4697. This event is crucial as it relates to the creation of a service, which could be abused by attackers to execute obfuscated scripts.\n\nYou need to pay careful attention to services creation events where the service file name contains specific strings that are commonly used in obfuscation techniques involving MSHTA. These strings include 'mshta', 'vbscript:createobject', '.run', and 'window.close'. The presence of these strings in the service file name could indicate an attempt to hide malicious PowerShell script execution using MSHTA, a technique often employed to bypass security measures and execute arbitrary code.\n\nIt's important to consider that there might be unknown false positives, meaning that not every detected event may represent a genuine attack. However, given the high severity level associated with this detection strategy, any such events should be investigated promptly.\n\nBy focusing on security logs from Windows systems and looking for these specific patterns of behavior, this detection strategy aligns with recognizing techniques associated with obfuscation (a method used by attackers to make their malicious code harder to detect) and the use of PowerShell in unauthorized or malicious ways, reflecting tactics and techniques often seen in cybersecurity breaches.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\n    definition: The 'System Security Extension' audit subcategory need to be enabled to log the EID 4697\ndetection:\n    selection:\n        EventID: 4697\n        ServiceFileName|contains|all:\n            - 'mshta'\n            - 'vbscript:createobject'\n            - '.run'\n            - 'window.close'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\n    definition: The 'System Security Extension' audit subcategory need to be enabled to log the EID 4697\ndetection:\n    selection:\n        EventID: 4697\n        ServiceFileName|contains|all:\n            - 'mshta'\n            - 'vbscript:createobject'\n            - '.run'\n            - 'window.close'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Obfuscated Powershell via use MSHTA in Scripts",
      "answer": "In order to detect obfuscated PowerShell via use MSHTA in scripts, you should monitor Windows security logs for specific events that could indicate suspicious behavior associated with script obfuscation through MSHTA. Specifically, you should enable the 'System Security Extension' audit subcategory to log Event ID 4697. This event is crucial as it relates to the creation of a service, which could be abused by attackers to execute obfuscated scripts.\n\nYou need to pay careful attention to services creation events where the service file name contains specific strings that are commonly used in obfuscation techniques involving MSHTA. These strings include 'mshta', 'vbscript:createobject', '.run', and 'window.close'. The presence of these strings in the service file name could indicate an attempt to hide malicious PowerShell script execution using MSHTA, a technique often employed to bypass security measures and execute arbitrary code.\n\nIt's important to consider that there might be unknown false positives, meaning that not every detected event may represent a genuine attack. However, given the high severity level associated with this detection strategy, any such events should be investigated promptly.\n\nBy focusing on security logs from Windows systems and looking for these specific patterns of behavior, this detection strategy aligns with recognizing techniques associated with obfuscation (a method used by attackers to make their malicious code harder to detect) and the use of PowerShell in unauthorized or malicious ways, reflecting tactics and techniques often seen in cybersecurity breaches."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    product: windows\n    service: powershell-classic\n    definition: fields have to be extract from event\ndetection:\n    selection:\n        Data|contains: 'ModuleContents=function Get-VMRemoteFXPhysicalVideoAdapter {'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect PowerShell module creation where the module Contents are set to \"function Get-VMRemoteFXPhysicalVideoAdapter\". This could be a sign of potential abuse of  the \"RemoteFXvGPUDisablement.exe\" binary which is known to be vulnerable to module load-order hijacking.\n\nHere is how  the given sigma rule operates: In order to detect PowerShell module creation where the module Contents are set to \"function Get-VMRemoteFXPhysicalVideoAdapter\". This could be a sign of potential abuse of the \"RemoteFXvGPUDisablement.exe\" binary which is known to be vulnerable to module load-order hijacking, you should: Monitor Windows PowerShell Classic service logs for activities involving the creation of PowerShell modules with specific contents. Specifically, search for instances where data contains the function definition 'ModuleContents=function Get-VMRemoteFXPhysicalVideoAdapter {'. This specific function could indicate an attempt to exploit vulnerabilities in the \"RemoteFXvGPUDisablement.exe\" binary, often by manipulating the module load order which can lead to unauthorized actions or access. It is important to consider that there might be false positives since the nature or intent of PowerShell module creation can be unknown or benign. The criticality of monitoring this activity is high due to the potential security implications associated with the exploitation of known vulnerabilities.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: powershell-classic\n    definition: fields have to be extract from event\ndetection:\n    selection:\n        Data|contains: 'ModuleContents=function Get-VMRemoteFXPhysicalVideoAdapter {'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "PowerShell module creation where the module Contents are set to \"function Get-VMRemoteFXPhysicalVideoAdapter\". This could be a sign of potential abuse of  the \"RemoteFXvGPUDisablement.exe\" binary which is known to be vulnerable to module load-order hijacking.",
      "answer": "In order to detect PowerShell module creation where the module Contents are set to \"function Get-VMRemoteFXPhysicalVideoAdapter\". This could be a sign of potential abuse of the \"RemoteFXvGPUDisablement.exe\" binary which is known to be vulnerable to module load-order hijacking, you should: Monitor Windows PowerShell Classic service logs for activities involving the creation of PowerShell modules with specific contents. Specifically, search for instances where data contains the function definition 'ModuleContents=function Get-VMRemoteFXPhysicalVideoAdapter {'. This specific function could indicate an attempt to exploit vulnerabilities in the \"RemoteFXvGPUDisablement.exe\" binary, often by manipulating the module load order which can lead to unauthorized actions or access. It is important to consider that there might be false positives since the nature or intent of PowerShell module creation can be unknown or benign. The criticality of monitoring this activity is high due to the potential security implications associated with the exploitation of known vulnerabilities."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: Script Block Logging must be enable\ndetection:\n    selection:\n        ScriptBlockText|contains: '[Reflection.Assembly]::load'\n    condition: selection\nfalsepositives:\n    - Legitimate use of the library\nlevel: medium\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect usage of \"Reflection.Assembly\" load functions to dynamically load assemblies in memory\n\nHere is how  the given sigma rule operates: In order to detect usage of \"Reflection.Assembly\" load functions to dynamically load assemblies in memory, you should: Monitor Windows PowerShell script block logging for any activities that involve the use of '[Reflection.Assembly]::load' within the script text. This specific operation is noteworthy because attackers might leverage the 'Reflection.Assembly' load function to dynamically inject malicious assemblies into memory for execution, bypassing conventional detection mechanisms. The monitoring should be conducted on systems where PowerShell script block logging is enabled to capture and log PowerShell execution details effectively. Be aware that while this method can flag potential security threats indicating the dynamic loading of assemblies, it may also detect benign activities where 'Reflection.Assembly' is legitimately used for loading libraries. Hence, it is categorized with a medium level of confidence, and any detection should be further investigated to differentiate between malicious actions and legitimate usage.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: Script Block Logging must be enable\ndetection:\n    selection:\n        ScriptBlockText|contains: '[Reflection.Assembly]::load'\n    condition: selection\nfalsepositives:\n    - Legitimate use of the library\nlevel: medium\n",
      "question": "usage of \"Reflection.Assembly\" load functions to dynamically load assemblies in memory",
      "answer": "In order to detect usage of \"Reflection.Assembly\" load functions to dynamically load assemblies in memory, you should: Monitor Windows PowerShell script block logging for any activities that involve the use of '[Reflection.Assembly]::load' within the script text. This specific operation is noteworthy because attackers might leverage the 'Reflection.Assembly' load function to dynamically inject malicious assemblies into memory for execution, bypassing conventional detection mechanisms. The monitoring should be conducted on systems where PowerShell script block logging is enabled to capture and log PowerShell execution details effectively. Be aware that while this method can flag potential security threats indicating the dynamic loading of assemblies, it may also detect benign activities where 'Reflection.Assembly' is legitimately used for loading libraries. Hence, it is categorized with a medium level of confidence, and any detection should be further investigated to differentiate between malicious actions and legitimate usage."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting successful logon with logon type 9 (NewCredentials) which matches the Overpass the Hash behavior of e.g Mimikatz's sekurlsa::pth module..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect successful logon with logon type 9 (NewCredentials) which matches the Overpass the Hash behavior of e.g Mimikatz's sekurlsa::pth module, you should: Focus on analyzing Windows Security service logs for specific event patterns. Look for log entries with Event ID 4624, which signifies a successful logon event. Narrow down these entries further by identifying those with a Logon Type of 9. This particular logon type is indicative of a scenario where new credentials are used by a user to run a process under a different token, a technique often employed in attacks to evade detection and escalate privileges. \n\nAdditionally, scrutinize the Logon Process Name for \"seclogo\" and the Authentication Package Name set to \"Negotiate\". These details are crucial as they align with methodologies utilized by attackers to mimic legitimate authentication processes after obtaining user credentials, often through methods like Overpass the Hash. Such behaviors are indicative of sophisticated credential theft and impersonation tactics that are commonly associated with tools like Mimikatz, specifically within its sekurlsa::pth module designed for this purpose.\n\nBe mindful of potential false positives that could arise from legitimate use of the Runas command-line tool with the /netonly parameter, which can generate similar log entries under normal administrative operations. The severity of findings matching these criteria is considered high due to the potential for unauthorized access and lateral movement within targeted systems. This analysis aligns with MITRE ATT&CK tactics and techniques related to Credential Access and Lateral Movement, emphasizing the critical nature of detection and rapid response to these indicators.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 4624\n        LogonType: 9\n        LogonProcessName: seclogo\n        AuthenticationPackageName: Negotiate\n    condition: selection\nfalsepositives:\n    - Runas command-line tool using /netonly parameter\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 4624\n        LogonType: 9\n        LogonProcessName: seclogo\n        AuthenticationPackageName: Negotiate\n    condition: selection\nfalsepositives:\n    - Runas command-line tool using /netonly parameter\nlevel: high\n",
      "question": "successful logon with logon type 9 (NewCredentials) which matches the Overpass the Hash behavior of e.g Mimikatz's sekurlsa::pth module.",
      "answer": "In order to detect successful logon with logon type 9 (NewCredentials) which matches the Overpass the Hash behavior of e.g Mimikatz's sekurlsa::pth module, you should: Focus on analyzing Windows Security service logs for specific event patterns. Look for log entries with Event ID 4624, which signifies a successful logon event. Narrow down these entries further by identifying those with a Logon Type of 9. This particular logon type is indicative of a scenario where new credentials are used by a user to run a process under a different token, a technique often employed in attacks to evade detection and escalate privileges. \n\nAdditionally, scrutinize the Logon Process Name for \"seclogo\" and the Authentication Package Name set to \"Negotiate\". These details are crucial as they align with methodologies utilized by attackers to mimic legitimate authentication processes after obtaining user credentials, often through methods like Overpass the Hash. Such behaviors are indicative of sophisticated credential theft and impersonation tactics that are commonly associated with tools like Mimikatz, specifically within its sekurlsa::pth module designed for this purpose.\n\nBe mindful of potential false positives that could arise from legitimate use of the Runas command-line tool with the /netonly parameter, which can generate similar log entries under normal administrative operations. The severity of findings matching these criteria is considered high due to the potential for unauthorized access and lateral movement within targeted systems. This analysis aligns with MITRE ATT&CK tactics and techniques related to Credential Access and Lateral Movement, emphasizing the critical nature of detection and rapid response to these indicators."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting an Antivirus alert in a highly relevant file path or with a relevant file name.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect an Antivirus alert in a highly relevant file path or with a relevant file name, you should focus on monitoring antivirus logs for alerts that flag file activities within specific areas of the file system and with certain types of files that are commonly associated with malicious activity. Pay attention to files located in or containing paths such as C:\\Windows\\, C:\\Temp\\, C:\\PerfLogs\\, C:\\Users\\Public\\, and C:\\Users\\Default\\, as well as paths that include directories typically used by web applications like \\Client\\, \\tsclient\\, \\inetpub\\, /www/, and those used by web servers such as apache, tomcat, nginx, and weblogic.\n\nAdditionally, be vigilant about files with extensions that are commonly used for scripts and executables involved in cyber attacks, including but not limited to .asax, .ashx, .asmx, .asp, .aspx, .bat, .cfm, .cgi, .chm, .cmd, .dat, .ear, image files (.gif, .jpeg, .jpg, .png, .svg), Java server files (.jsp, .jspx), script files (.php, .pl, .ps1, .psm1, .py, .pyc, .rb), and web-related files (.html, .htm, .lnk, .scf, .sct, .sh, .txt, .vbe, .vbs, .war, .wsf, .wsh, .xml). \n\nThese paths and file types have been identified as significant because they are often leveraged by attackers for malicious purposes, including but not limited to deploying malware, executing remote scripts, and infiltrating web servers. The rule prioritizes a high level of alert for such detections considering the unlikelihood of false positives. Monitoring for these criteria provides a focused approach to identifying and responding to potential threats efficiently.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: antivirus\ndetection:\n    selection_path:\n        Filename|contains:\n            # could be startswith, if there is a better backend handling\n            - 'C:\\Windows\\'\n            - 'C:\\Temp\\'\n            - 'C:\\PerfLogs\\'\n            - 'C:\\Users\\Public\\'\n            - 'C:\\Users\\Default\\'\n            # true 'contains' matches:\n            - '\\Client\\'\n            - '\\tsclient\\'\n            - '\\inetpub\\'\n            - '/www/'\n            - 'apache'\n            - 'tomcat'\n            - 'nginx'\n            - 'weblogic'\n    selection_ext:\n        Filename|endswith:\n            - '.asax'\n            - '.ashx'\n            - '.asmx'\n            - '.asp'\n            - '.aspx'\n            - '.bat'\n            - '.cfm'\n            - '.cgi'\n            - '.chm'\n            - '.cmd'\n            - '.dat'\n            - '.ear'\n            - '.gif'\n            - '.hta'\n            - '.jpeg'\n            - '.jpg'\n            - '.jsp'\n            - '.jspx'\n            - '.lnk'\n            - '.php'\n            - '.pl'\n            - '.png'\n            - '.ps1'\n            - '.psm1'\n            - '.py'\n            - '.pyc'\n            - '.rb'\n            - '.scf'\n            - '.sct'\n            - '.sh'\n            - '.svg'\n            - '.txt'\n            - '.vbe'\n            - '.vbs'\n            - '.war'\n            - '.wsf'\n            - '.wsh'\n            - '.xml'\n    condition: 1 of selection_*\nfields:\n    - Signature\n    - User\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: antivirus\ndetection:\n    selection_path:\n        Filename|contains:\n            # could be startswith, if there is a better backend handling\n            - 'C:\\Windows\\'\n            - 'C:\\Temp\\'\n            - 'C:\\PerfLogs\\'\n            - 'C:\\Users\\Public\\'\n            - 'C:\\Users\\Default\\'\n            # true 'contains' matches:\n            - '\\Client\\'\n            - '\\tsclient\\'\n            - '\\inetpub\\'\n            - '/www/'\n            - 'apache'\n            - 'tomcat'\n            - 'nginx'\n            - 'weblogic'\n    selection_ext:\n        Filename|endswith:\n            - '.asax'\n            - '.ashx'\n            - '.asmx'\n            - '.asp'\n            - '.aspx'\n            - '.bat'\n            - '.cfm'\n            - '.cgi'\n            - '.chm'\n            - '.cmd'\n            - '.dat'\n            - '.ear'\n            - '.gif'\n            - '.hta'\n            - '.jpeg'\n            - '.jpg'\n            - '.jsp'\n            - '.jspx'\n            - '.lnk'\n            - '.php'\n            - '.pl'\n            - '.png'\n            - '.ps1'\n            - '.psm1'\n            - '.py'\n            - '.pyc'\n            - '.rb'\n            - '.scf'\n            - '.sct'\n            - '.sh'\n            - '.svg'\n            - '.txt'\n            - '.vbe'\n            - '.vbs'\n            - '.war'\n            - '.wsf'\n            - '.wsh'\n            - '.xml'\n    condition: 1 of selection_*\nfields:\n    - Signature\n    - User\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "an Antivirus alert in a highly relevant file path or with a relevant file name",
      "answer": "In order to detect an Antivirus alert in a highly relevant file path or with a relevant file name, you should focus on monitoring antivirus logs for alerts that flag file activities within specific areas of the file system and with certain types of files that are commonly associated with malicious activity. Pay attention to files located in or containing paths such as C:\\Windows\\, C:\\Temp\\, C:\\PerfLogs\\, C:\\Users\\Public\\, and C:\\Users\\Default\\, as well as paths that include directories typically used by web applications like \\Client\\, \\tsclient\\, \\inetpub\\, /www/, and those used by web servers such as apache, tomcat, nginx, and weblogic.\n\nAdditionally, be vigilant about files with extensions that are commonly used for scripts and executables involved in cyber attacks, including but not limited to .asax, .ashx, .asmx, .asp, .aspx, .bat, .cfm, .cgi, .chm, .cmd, .dat, .ear, image files (.gif, .jpeg, .jpg, .png, .svg), Java server files (.jsp, .jspx), script files (.php, .pl, .ps1, .psm1, .py, .pyc, .rb), and web-related files (.html, .htm, .lnk, .scf, .sct, .sh, .txt, .vbe, .vbs, .war, .wsf, .wsh, .xml). \n\nThese paths and file types have been identified as significant because they are often leveraged by attackers for malicious purposes, including but not limited to deploying malware, executing remote scripts, and infiltrating web servers. The rule prioritizes a high level of alert for such detections considering the unlikelihood of false positives. Monitoring for these criteria provides a focused approach to identifying and responding to potential threats efficiently."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Adversaries may attempt to enumerate software for a variety of reasons, such as figuring out what security measures are present or if the compromised system has a version of software that is vulnerable..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect adversaries attempting to enumerate software for identifying security measures or vulnerable software versions, you should monitor process creation logs on Windows systems for executions of the registry command-line tool (reg.exe). Specifically, look for commands that include \"query\", reference the software registry path with \"\\software\\\", use the \"/v\" option, and seek information about \"svcversion\". This behavior might indicate an attempt to gather information about installed software and their versions, which is a common tactic used by attackers to plan their next steps after gaining initial access to a system.\n\nBe aware that such command-line activities can sometimes occur as part of legitimate administrative tasks. Therefore, it's important to evaluate the context in which these commands are being executed to distinguish between benign and malicious activities. The associated threat level with this detection strategy is considered medium, indicating a balanced approach to catching potentially harmful activities without overwhelming the monitoring team with false positives. Monitoring for this activity aligns with identifying tactics and techniques where adversaries gather valuable system information, which can be categorized under Reconnaissance tactics in security frameworks like MITRE ATT&CK.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\reg.exe'    # Example: reg query \"HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Internet Explorer\" /v svcVersion\n        CommandLine|contains|all:\n            - 'query'\n            - '\\software\\'\n            - '/v'\n            - 'svcversion'\n    condition: selection\nfalsepositives:\n    - Legitimate administration activities\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\reg.exe'    # Example: reg query \"HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Internet Explorer\" /v svcVersion\n        CommandLine|contains|all:\n            - 'query'\n            - '\\software\\'\n            - '/v'\n            - 'svcversion'\n    condition: selection\nfalsepositives:\n    - Legitimate administration activities\nlevel: medium\n",
      "question": "Adversaries may attempt to enumerate software for a variety of reasons, such as figuring out what security measures are present or if the compromised system has a version of software that is vulnerable.",
      "answer": "In order to detect adversaries attempting to enumerate software for identifying security measures or vulnerable software versions, you should monitor process creation logs on Windows systems for executions of the registry command-line tool (reg.exe). Specifically, look for commands that include \"query\", reference the software registry path with \"\\software\\\", use the \"/v\" option, and seek information about \"svcversion\". This behavior might indicate an attempt to gather information about installed software and their versions, which is a common tactic used by attackers to plan their next steps after gaining initial access to a system.\n\nBe aware that such command-line activities can sometimes occur as part of legitimate administrative tasks. Therefore, it's important to evaluate the context in which these commands are being executed to distinguish between benign and malicious activities. The associated threat level with this detection strategy is considered medium, indicating a balanced approach to catching potentially harmful activities without overwhelming the monitoring team with false positives. Monitoring for this activity aligns with identifying tactics and techniques where adversaries gather valuable system information, which can be categorized under Reconnaissance tactics in security frameworks like MITRE ATT&CK."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID:\n            - 4663\n            - 4656\n        AccessMask:\n            - '0x40'\n            - '0x1400'\n            # - '0x1000'  # minimum access requirements to query basic info from service\n            - '0x100000'\n            - '0x1410'    # car.2019-04-004\n            - '0x1010'    # car.2019-04-004\n            - '0x1438'    # car.2019-04-004\n            - '0x143a'    # car.2019-04-004\n            - '0x1418'    # car.2019-04-004\n            - '0x1f0fff'\n            - '0x1f1fff'\n            - '0x1f2fff'\n            - '0x1f3fff'\n            - 40\n            - 1400\n            - 1000\n            - 100000\n            - 1410    # car.2019-04-004\n            - 1010    # car.2019-04-004\n            - 1438    # car.2019-04-004\n            - '143a'    # car.2019-04-004\n            - 1418    # car.2019-04-004\n            - '1f0fff'\n            - '1f1fff'\n            - '1f2fff'\n            - '1f3fff'\n        ObjectType: 'Process'\n        ObjectName|endswith: '\\lsass.exe'\n    filter1:\n        SubjectUserName|endswith: '$'\n    filter2:\n        ProcessName|startswith: 'C:\\Program Files'  # too many false positives with legitimate AV and EDR solutions\n    filter3:\n        ProcessName: 'C:\\Windows\\System32\\wbem\\WmiPrvSE.exe'\n        AccessMask: '0x1410'\n    filter_games:\n        ProcessName|contains: '\\SteamLibrary\\steamapps\\'\n    condition: selection and not 1 of filter*\nfields:\n    - ComputerName\n    - ObjectName\n    - SubjectUserName\n    - ProcessName\nfalsepositives:\n    - Unknown\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect potential mimikatz-like tools accessing LSASS from non system account\n\nHere is how  the given sigma rule operates: In order to detect potential mimikatz-like tools accessing LSASS from non system account, you should monitor Windows security logs for specific event IDs and access mask values related to such suspicious activity. The focus should be on the Windows Security Service logs, specifically looking for event IDs 4663 and 4656. These events are indicative of an object, in this case, a process, being accessed.\n\nThe detection criteria include watching for access attempts to the LSASS.exe process with certain AccessMask values that represent permissions such as querying basic info from the service or more intrusive operations. These AccessMask values include hexadecimal and decimal representations like '0x40', '0x1400', '0x100000', '0x1410', up to '0x1f3fff', among others. The aim is to catch a broad range of potential access types, from minimal query information to full control permissions.\n\nAdditionally, to reduce false positives and improve the accuracy of detection, several filters are applied:\n1. Exclude any records where the SubjectUserName ends with '$', which typically indicates a machine or service account rather than a user account.\n2. Exclude records where the ProcessName starts with 'C:\\Program Files', as legitimate antivirus (AV) and Endpoint Detection and Response (EDR) solutions operating from this directory can lead to many false positives.\n3. Specifically, if the process name is 'C:\\Windows\\System32\\wbem\\WmiPrvSE.exe' and the AccessMask is '0x1410', it should be excluded to further reduce false alerts.\n4. Exclude any activity where the ProcessName contains a path indicative of gaming software like '\\SteamLibrary\\steamapps\\', which is unlikely to be related to malicious activity in this context.\n\nThe essential fields to be observed are ComputerName, ObjectName, SubjectUserName, and ProcessName to provide detailed context around the detected activity. It is important to note that there might be unknown false positives due to the nature of the detection strategy focusing on mimikatz-like behavior, tagged with tactics related to Credential Access.\n\nThis monitoring effort aims at a high level of alertness due to the sensitive nature of LSASS access by non-system accounts, which might signify attempts to extract or manipulate authentication credentials, similar to the behavior of tools like Mimikatz.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID:\n            - 4663\n            - 4656\n        AccessMask:\n            - '0x40'\n            - '0x1400'\n            # - '0x1000'  # minimum access requirements to query basic info from service\n            - '0x100000'\n            - '0x1410'    # car.2019-04-004\n            - '0x1010'    # car.2019-04-004\n            - '0x1438'    # car.2019-04-004\n            - '0x143a'    # car.2019-04-004\n            - '0x1418'    # car.2019-04-004\n            - '0x1f0fff'\n            - '0x1f1fff'\n            - '0x1f2fff'\n            - '0x1f3fff'\n            - 40\n            - 1400\n            - 1000\n            - 100000\n            - 1410    # car.2019-04-004\n            - 1010    # car.2019-04-004\n            - 1438    # car.2019-04-004\n            - '143a'    # car.2019-04-004\n            - 1418    # car.2019-04-004\n            - '1f0fff'\n            - '1f1fff'\n            - '1f2fff'\n            - '1f3fff'\n        ObjectType: 'Process'\n        ObjectName|endswith: '\\lsass.exe'\n    filter1:\n        SubjectUserName|endswith: '$'\n    filter2:\n        ProcessName|startswith: 'C:\\Program Files'  # too many false positives with legitimate AV and EDR solutions\n    filter3:\n        ProcessName: 'C:\\Windows\\System32\\wbem\\WmiPrvSE.exe'\n        AccessMask: '0x1410'\n    filter_games:\n        ProcessName|contains: '\\SteamLibrary\\steamapps\\'\n    condition: selection and not 1 of filter*\nfields:\n    - ComputerName\n    - ObjectName\n    - SubjectUserName\n    - ProcessName\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "potential mimikatz-like tools accessing LSASS from non system account",
      "answer": "In order to detect potential mimikatz-like tools accessing LSASS from non system account, you should monitor Windows security logs for specific event IDs and access mask values related to such suspicious activity. The focus should be on the Windows Security Service logs, specifically looking for event IDs 4663 and 4656. These events are indicative of an object, in this case, a process, being accessed.\n\nThe detection criteria include watching for access attempts to the LSASS.exe process with certain AccessMask values that represent permissions such as querying basic info from the service or more intrusive operations. These AccessMask values include hexadecimal and decimal representations like '0x40', '0x1400', '0x100000', '0x1410', up to '0x1f3fff', among others. The aim is to catch a broad range of potential access types, from minimal query information to full control permissions.\n\nAdditionally, to reduce false positives and improve the accuracy of detection, several filters are applied:\n1. Exclude any records where the SubjectUserName ends with '$', which typically indicates a machine or service account rather than a user account.\n2. Exclude records where the ProcessName starts with 'C:\\Program Files', as legitimate antivirus (AV) and Endpoint Detection and Response (EDR) solutions operating from this directory can lead to many false positives.\n3. Specifically, if the process name is 'C:\\Windows\\System32\\wbem\\WmiPrvSE.exe' and the AccessMask is '0x1410', it should be excluded to further reduce false alerts.\n4. Exclude any activity where the ProcessName contains a path indicative of gaming software like '\\SteamLibrary\\steamapps\\', which is unlikely to be related to malicious activity in this context.\n\nThe essential fields to be observed are ComputerName, ObjectName, SubjectUserName, and ProcessName to provide detailed context around the detected activity. It is important to note that there might be unknown false positives due to the nature of the detection strategy focusing on mimikatz-like behavior, tagged with tactics related to Credential Access.\n\nThis monitoring effort aims at a high level of alertness due to the sensitive nature of LSASS access by non-system accounts, which might signify attempts to extract or manipulate authentication credentials, similar to the behavior of tools like Mimikatz."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting calls to cmdlets that are used to export certificates from the local certificate store. Threat actors were seen abusing this to steal private keys from compromised machines..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect calls to cmdlets that are used to export certificates from the local certificate store, where threat actors were seen abusing this to steal private keys from compromised machines, you should: monitor for the creation of processes on Windows systems that involve the use of command line utilities or cmdlets specifically 'Export-PfxCertificate' or 'Export-Certificate'. These commands are indicators that someone may be attempting to export certificates from the machine's local certificate store, which could be an attempt by an unauthorized entity to exfiltrate sensitive data such as private keys. It's important to note that while this activity can be malicious, there are legitimate scenarios where administrators might export certificates. Hence, it's advisable to apply additional filters or context to distinguish between benign and potentially malicious behavior. The relevance of this detection lies within its association with known tactics and techniques employed by threat actors, including Credential Access through the exportation of authentication materials.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        CommandLine|contains:\n            - 'Export-PfxCertificate '\n            - 'Export-Certificate '\n    condition: selection\nfalsepositives:\n    - Legitimate certificate exports by administrators. Additional filters might be required.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        CommandLine|contains:\n            - 'Export-PfxCertificate '\n            - 'Export-Certificate '\n    condition: selection\nfalsepositives:\n    - Legitimate certificate exports by administrators. Additional filters might be required.\nlevel: medium\n",
      "question": "calls to cmdlets that are used to export certificates from the local certificate store. Threat actors were seen abusing this to steal private keys from compromised machines.",
      "answer": "In order to detect calls to cmdlets that are used to export certificates from the local certificate store, where threat actors were seen abusing this to steal private keys from compromised machines, you should: monitor for the creation of processes on Windows systems that involve the use of command line utilities or cmdlets specifically 'Export-PfxCertificate' or 'Export-Certificate'. These commands are indicators that someone may be attempting to export certificates from the machine's local certificate store, which could be an attempt by an unauthorized entity to exfiltrate sensitive data such as private keys. It's important to note that while this activity can be malicious, there are legitimate scenarios where administrators might export certificates. Hence, it's advisable to apply additional filters or context to distinguish between benign and potentially malicious behavior. The relevance of this detection lies within its association with known tactics and techniques employed by threat actors, including Credential Access through the exportation of authentication materials."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: file_event\n    product: windows\ndetection:\n    selection:\n        TargetFilename|contains|all:\n            - '\\AppData\\Local\\Temp\\SAM-'\n            - '.dmp'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: critical\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect dump file written by QuarksPwDump password dumper\n\nHere is how  the given sigma rule operates: In order to detect a dump file written by QuarksPwDump password dumper, you should: Focus on monitoring file events within Windows environments. Specifically, look for occurrences where files with names containing both '\\AppData\\Local\\Temp\\SAM-' and ending with '.dmp' are created or modified. These characteristics suggest an attempt to create a dump file using QuarksPwDump, which is a common method for extracting passwords from a system. Given the critical nature of this activity, it's essential to scrutinize any matching events, while also being aware that there could be unknown cases leading to false positives.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: file_event\n    product: windows\ndetection:\n    selection:\n        TargetFilename|contains|all:\n            - '\\AppData\\Local\\Temp\\SAM-'\n            - '.dmp'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: critical\n",
      "question": "dump file written by QuarksPwDump password dumper",
      "answer": "In order to detect a dump file written by QuarksPwDump password dumper, you should: Focus on monitoring file events within Windows environments. Specifically, look for occurrences where files with names containing both '\\AppData\\Local\\Temp\\SAM-' and ending with '.dmp' are created or modified. These characteristics suggest an attempt to create a dump file using QuarksPwDump, which is a common method for extracting passwords from a system. Given the critical nature of this activity, it's essential to scrutinize any matching events, while also being aware that there could be unknown cases leading to false positives."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    main_selection:\n        EventType: SetValue\n        TargetObject|contains:\n            - '\\SOFTWARE\\Wow6432Node\\Microsoft\\Windows CE Services\\AutoStart'\n            - '\\Software\\Wow6432Node\\Microsoft\\Command Processor\\Autorun'\n            - '\\SOFTWARE\\Wow6432Node\\Microsoft\\Active Setup\\Installed Components'\n            - '\\SOFTWARE\\Microsoft\\Windows CE Services\\AutoStartOnDisconnect'\n            - '\\SOFTWARE\\Microsoft\\Windows CE Services\\AutoStartOnConnect'\n            - '\\SYSTEM\\Setup\\CmdLine'\n            - '\\Software\\Microsoft\\Ctf\\LangBarAddin'\n            - '\\Software\\Microsoft\\Command Processor\\Autorun'\n            - '\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components'\n            - '\\SOFTWARE\\Classes\\Protocols\\Handler'\n            - '\\SOFTWARE\\Classes\\Protocols\\Filter'\n            - '\\SOFTWARE\\Classes\\Htmlfile\\Shell\\Open\\Command\\(Default)'\n            - '\\Environment\\UserInitMprLogonScript'\n            - '\\SOFTWARE\\Policies\\Microsoft\\Windows\\Control Panel\\Desktop\\Scrnsave.exe'\n            - '\\Software\\Microsoft\\Internet Explorer\\UrlSearchHooks'\n            - '\\SOFTWARE\\Microsoft\\Internet Explorer\\Desktop\\Components'\n            - '\\Software\\Classes\\Clsid\\{AB8902B4-09CA-4bb6-B78D-A8F59079A8D5}\\Inprocserver32'\n            - '\\Control Panel\\Desktop\\Scrnsave.exe'\n    filter_empty:\n        Details: '(Empty)'\n    filter_msoffice:\n        - TargetObject|contains:\n            - '\\Office\\ClickToRun\\REGISTRY\\MACHINE\\Software\\Classes\\PROTOCOLS\\Handler\\'\n            - '\\ClickToRunStore\\HKMU\\SOFTWARE\\Classes\\PROTOCOLS\\Handler\\'\n        - Details:\n            - '{314111c7-a502-11d2-bbca-00c04f8ec294}'\n            - '{3459B272-CC19-4448-86C9-DDC3B4B2FAD3}'\n            - '{42089D2D-912D-4018-9087-2B87803E93FB}'\n            - '{5504BE45-A83B-4808-900A-3A5C36E7F77A}'\n            - '{807583E5-5146-11D5-A672-00B0D022E945}'\n    filter_chrome:\n        TargetObject|contains: '\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\{8A69D345-D564-463c-AFF1-A69D9E530F96}'\n    filter_edge:\n        TargetObject|contains: '\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\{9459C573-B17A-45AE-9F64-1857B5D58CEE}'\n    filter_IE:\n        TargetObject|contains: '\\Software\\Microsoft\\Active Setup\\Installed Components\\{89820200-ECBD-11cf-8B85-00AA005B4383}'\n    filter_image:\n        Image:\n            - 'C:\\Windows\\System32\\poqexec.exe'\n            - 'C:\\Program Files (x86)\\Microsoft Office\\root\\integration\\integrator.exe'\n    filter_office:\n        Image|startswith:\n            - 'C:\\Program Files\\Common Files\\Microsoft Shared\\ClickToRun\\'\n            - 'C:\\Program Files\\Common Files\\Microsoft Shared\\ClickToRun\\Updates\\'\n        Image|endswith: '\\OfficeClickToRun.exe'\n    condition: main_selection and not 1 of filter_*\nfields:\n    - SecurityID\n    - ObjectName\n    - OldValueType\n    - NewValueType\nfalsepositives:\n    - Legitimate software automatically (mostly, during installation) sets up autorun keys for legitimate reason\n    - Legitimate administrator sets up autorun keys for legitimate reason\nlevel: medium\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect modification of autostart extensibility point (ASEP) in registry.\n\nHere is how  the given sigma rule operates: In order to detect modification of autostart extensibility point (ASEP) in registry, you should focus on monitoring Windows registry settings for specific events and changes that signify potential unauthorized modifications aimed at enabling autostart mechanisms for malware or other unwanted programs. The analysis should be concentrated on registry set events, particularly the `SetValue` event type, which indicates an attempt to modify registry values.\n\nKey registry paths to monitor include various locations under the `SOFTWARE\\Wow6432Node\\Microsoft` and `SOFTWARE\\Microsoft` paths that are commonly targeted for persistence mechanisms, such as `AutoStart`, `Command Processor\\Autorun`, `Active Setup\\Installed Components`, and several others including `SYSTEM\\Setup\\CmdLine`, `Software\\Microsoft\\Ctf\\LangBarAddin`, and `Environment\\UserInitMprLogonScript`. \n\nFurthermore, entries relating to browser components (`Software\\Microsoft\\Internet Explorer\\UrlSearchHooks`, `SOFTWARE\\Microsoft\\Internet Explorer\\Desktop\\Components`, etc.), desktop components (`Control Panel\\Desktop\\Scrnsave.exe`), and protocol handlers (`SOFTWARE\\Classes\\Protocols\\Handler`, `Software\\Classes\\Protocols\\Filter`) are crucial to monitor due to their potential to be leveraged for persistence and execution through user interaction or system events.\n\nSpecial attention should be given to exclude modifications related to certain Microsoft Office, Chrome, Edge, and Internet Explorer components, as denoted by specific registry paths and details related to these applications, from triggering alerts to reduce false positives. This is achieved by filtering out changes occurring in specified registry locations related to Microsoft Office ClickToRun, Chrome, Edge, and Internet Explorer setup components, alongside some known benign executables (`poqexec.exe`, `integrator.exe` and `OfficeClickToRun.exe`).\n\nCrucially, ensuring that legitimate software installations and administrator-configured autorun keys are carefully distinguished from malicious modifications is imperative to maintain operational integrity and minimize instances of false alarms. \n\nThe successful detection strategy encompasses monitoring for modifications in the specified registry paths while excluding changes that are identified as legitimate through the listed exclusions. The key fields to be logged for further investigation are the SecurityID, ObjectName, OldValueType, and NewValueType, which provide essential information about the operation performed. This approach offers a balanced and focused method to detect and alert on potentially malicious ASEP modifications in the Windows registry with a medium level of confidence, aiming to protect against persistence and execution mechanisms commonly used by malware and unwanted software.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    main_selection:\n        EventType: SetValue\n        TargetObject|contains:\n            - '\\SOFTWARE\\Wow6432Node\\Microsoft\\Windows CE Services\\AutoStart'\n            - '\\Software\\Wow6432Node\\Microsoft\\Command Processor\\Autorun'\n            - '\\SOFTWARE\\Wow6432Node\\Microsoft\\Active Setup\\Installed Components'\n            - '\\SOFTWARE\\Microsoft\\Windows CE Services\\AutoStartOnDisconnect'\n            - '\\SOFTWARE\\Microsoft\\Windows CE Services\\AutoStartOnConnect'\n            - '\\SYSTEM\\Setup\\CmdLine'\n            - '\\Software\\Microsoft\\Ctf\\LangBarAddin'\n            - '\\Software\\Microsoft\\Command Processor\\Autorun'\n            - '\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components'\n            - '\\SOFTWARE\\Classes\\Protocols\\Handler'\n            - '\\SOFTWARE\\Classes\\Protocols\\Filter'\n            - '\\SOFTWARE\\Classes\\Htmlfile\\Shell\\Open\\Command\\(Default)'\n            - '\\Environment\\UserInitMprLogonScript'\n            - '\\SOFTWARE\\Policies\\Microsoft\\Windows\\Control Panel\\Desktop\\Scrnsave.exe'\n            - '\\Software\\Microsoft\\Internet Explorer\\UrlSearchHooks'\n            - '\\SOFTWARE\\Microsoft\\Internet Explorer\\Desktop\\Components'\n            - '\\Software\\Classes\\Clsid\\{AB8902B4-09CA-4bb6-B78D-A8F59079A8D5}\\Inprocserver32'\n            - '\\Control Panel\\Desktop\\Scrnsave.exe'\n    filter_empty:\n        Details: '(Empty)'\n    filter_msoffice:\n        - TargetObject|contains:\n            - '\\Office\\ClickToRun\\REGISTRY\\MACHINE\\Software\\Classes\\PROTOCOLS\\Handler\\'\n            - '\\ClickToRunStore\\HKMU\\SOFTWARE\\Classes\\PROTOCOLS\\Handler\\'\n        - Details:\n            - '{314111c7-a502-11d2-bbca-00c04f8ec294}'\n            - '{3459B272-CC19-4448-86C9-DDC3B4B2FAD3}'\n            - '{42089D2D-912D-4018-9087-2B87803E93FB}'\n            - '{5504BE45-A83B-4808-900A-3A5C36E7F77A}'\n            - '{807583E5-5146-11D5-A672-00B0D022E945}'\n    filter_chrome:\n        TargetObject|contains: '\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\{8A69D345-D564-463c-AFF1-A69D9E530F96}'\n    filter_edge:\n        TargetObject|contains: '\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\{9459C573-B17A-45AE-9F64-1857B5D58CEE}'\n    filter_IE:\n        TargetObject|contains: '\\Software\\Microsoft\\Active Setup\\Installed Components\\{89820200-ECBD-11cf-8B85-00AA005B4383}'\n    filter_image:\n        Image:\n            - 'C:\\Windows\\System32\\poqexec.exe'\n            - 'C:\\Program Files (x86)\\Microsoft Office\\root\\integration\\integrator.exe'\n    filter_office:\n        Image|startswith:\n            - 'C:\\Program Files\\Common Files\\Microsoft Shared\\ClickToRun\\'\n            - 'C:\\Program Files\\Common Files\\Microsoft Shared\\ClickToRun\\Updates\\'\n        Image|endswith: '\\OfficeClickToRun.exe'\n    condition: main_selection and not 1 of filter_*\nfields:\n    - SecurityID\n    - ObjectName\n    - OldValueType\n    - NewValueType\nfalsepositives:\n    - Legitimate software automatically (mostly, during installation) sets up autorun keys for legitimate reason\n    - Legitimate administrator sets up autorun keys for legitimate reason\nlevel: medium\n",
      "question": "modification of autostart extensibility point (ASEP) in registry.",
      "answer": "In order to detect modification of autostart extensibility point (ASEP) in registry, you should focus on monitoring Windows registry settings for specific events and changes that signify potential unauthorized modifications aimed at enabling autostart mechanisms for malware or other unwanted programs. The analysis should be concentrated on registry set events, particularly the `SetValue` event type, which indicates an attempt to modify registry values.\n\nKey registry paths to monitor include various locations under the `SOFTWARE\\Wow6432Node\\Microsoft` and `SOFTWARE\\Microsoft` paths that are commonly targeted for persistence mechanisms, such as `AutoStart`, `Command Processor\\Autorun`, `Active Setup\\Installed Components`, and several others including `SYSTEM\\Setup\\CmdLine`, `Software\\Microsoft\\Ctf\\LangBarAddin`, and `Environment\\UserInitMprLogonScript`. \n\nFurthermore, entries relating to browser components (`Software\\Microsoft\\Internet Explorer\\UrlSearchHooks`, `SOFTWARE\\Microsoft\\Internet Explorer\\Desktop\\Components`, etc.), desktop components (`Control Panel\\Desktop\\Scrnsave.exe`), and protocol handlers (`SOFTWARE\\Classes\\Protocols\\Handler`, `Software\\Classes\\Protocols\\Filter`) are crucial to monitor due to their potential to be leveraged for persistence and execution through user interaction or system events.\n\nSpecial attention should be given to exclude modifications related to certain Microsoft Office, Chrome, Edge, and Internet Explorer components, as denoted by specific registry paths and details related to these applications, from triggering alerts to reduce false positives. This is achieved by filtering out changes occurring in specified registry locations related to Microsoft Office ClickToRun, Chrome, Edge, and Internet Explorer setup components, alongside some known benign executables (`poqexec.exe`, `integrator.exe` and `OfficeClickToRun.exe`).\n\nCrucially, ensuring that legitimate software installations and administrator-configured autorun keys are carefully distinguished from malicious modifications is imperative to maintain operational integrity and minimize instances of false alarms. \n\nThe successful detection strategy encompasses monitoring for modifications in the specified registry paths while excluding changes that are identified as legitimate through the listed exclusions. The key fields to be logged for further investigation are the SecurityID, ObjectName, OldValueType, and NewValueType, which provide essential information about the operation performed. This approach offers a balanced and focused method to detect and alert on potentially malicious ASEP modifications in the Windows registry with a medium level of confidence, aiming to protect against persistence and execution mechanisms commonly used by malware and unwanted software."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\winget.exe'\n        - OriginalFileName: 'winget.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'source '\n            - 'add '\n            - 'http://'\n    condition: all of selection_*\nfalsepositives:\n    - False positives might occur if the users are unaware of such control checks\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect usage of winget to add a new insecure (http) download source.\nWinget will not allow the addition of insecure sources, hence this could indicate potential suspicious activity (or typos)\n\n\nHere is how  the given sigma rule operates: In order to detect usage of winget to add a new insecure (http) download source, you should focus on monitoring process creation logs within Windows systems. Specifically, look for occurrences where the process image name ends with '\\winget.exe' or where the original file name exactly matches 'winget.exe'. Additionally, pay close attention to the command line inputs, particularly looking for sequences that include 'source ', 'add ', and 'http://', all together. This combination of factors suggests an attempt to add a new download source to winget using an insecure HTTP connection, which could reflect suspicious activities or potential misconfigurations. It's important to be aware that there might be false positives, such as in scenarios where users are not fully aware of the implications of their actions regarding security controls. This check is deemed of high importance due to the potential security risks involved.\n\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\winget.exe'\n        - OriginalFileName: 'winget.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'source '\n            - 'add '\n            - 'http://'\n    condition: all of selection_*\nfalsepositives:\n    - False positives might occur if the users are unaware of such control checks\nlevel: high\n",
      "question": "usage of winget to add a new insecure (http) download source.\nWinget will not allow the addition of insecure sources, hence this could indicate potential suspicious activity (or typos)\n",
      "answer": "In order to detect usage of winget to add a new insecure (http) download source, you should focus on monitoring process creation logs within Windows systems. Specifically, look for occurrences where the process image name ends with '\\winget.exe' or where the original file name exactly matches 'winget.exe'. Additionally, pay close attention to the command line inputs, particularly looking for sequences that include 'source ', 'add ', and 'http://', all together. This combination of factors suggests an attempt to add a new download source to winget using an insecure HTTP connection, which could reflect suspicious activities or potential misconfigurations. It's important to be aware that there might be false positives, such as in scenarios where users are not fully aware of the implications of their actions regarding security controls. This check is deemed of high importance due to the potential security risks involved.\n\n"
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution from an Alternate Data Stream (ADS). Adversaries may use NTFS file attributes to hide their malicious data in order to evade detection.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution from an Alternate Data Stream (ADS), where adversaries may use NTFS file attributes to hide their malicious data in order to evade detection, you should monitor process creation logs on Windows systems for specific command-line patterns. Look for instances where the command line contains 'txt:', which indicates potential access or interaction with an alternate data stream. Additionally, be alert for command lines that combine certain tools and parameters, such as:\n\n- Use of 'type ' along with redirection '> ', which may suggest an attempt to display or redirect the contents of a file, possibly involving an ADS.\n- Execution involving 'makecab ' followed by '.cab', which could indicate compression of files into a Cabinet file, potentially to disguise malicious activity.\n- Commands starting with 'reg ' followed by ' export ', suggesting attempts to export registry keys, possibly for analysis or manipulation outside of standard registry tools.\n- Utilization of 'regedit ' with ' /E ', indicating export operations via Registry Editor, again potentially for malicious manipulation.\n- Execution of 'esentutl ' accompanied by '/y', '/d', and '/o' flags, which points to attempts to copy, defragment, or repair Extensible Storage Engine databases, potentially indicating more sophisticated adversary behavior involving data manipulation or extraction.\n\nIn essence, by monitoring for these specific command-line activities within process creation events, one can uncover potential misuse of alternate data streams by adversaries aiming to execute or hide malicious data, supporting efforts to evade detection. This monitoring approach crucially targets a range of tools and operations that could be exploited for such purposes.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_stream:\n        CommandLine|contains: 'txt:'\n    selection_tools_type:\n        CommandLine|contains|all:\n            - 'type '\n            - ' > '\n    selection_tools_makecab:\n        CommandLine|contains|all:\n            - 'makecab '\n            - '.cab'\n    selection_tools_reg:\n        CommandLine|contains|all:\n            - 'reg '\n            - ' export '\n    selection_tools_regedit:\n        CommandLine|contains|all:\n            - 'regedit '\n            - ' /E '\n    selection_tools_esentutl:\n        CommandLine|contains|all:\n            - 'esentutl '\n            - ' /y '\n            - ' /d '\n            - ' /o '\n    condition: selection_stream and (1 of selection_tools_*)\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_stream:\n        CommandLine|contains: 'txt:'\n    selection_tools_type:\n        CommandLine|contains|all:\n            - 'type '\n            - ' > '\n    selection_tools_makecab:\n        CommandLine|contains|all:\n            - 'makecab '\n            - '.cab'\n    selection_tools_reg:\n        CommandLine|contains|all:\n            - 'reg '\n            - ' export '\n    selection_tools_regedit:\n        CommandLine|contains|all:\n            - 'regedit '\n            - ' /E '\n    selection_tools_esentutl:\n        CommandLine|contains|all:\n            - 'esentutl '\n            - ' /y '\n            - ' /d '\n            - ' /o '\n    condition: selection_stream and (1 of selection_tools_*)\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "execution from an Alternate Data Stream (ADS). Adversaries may use NTFS file attributes to hide their malicious data in order to evade detection",
      "answer": "In order to detect execution from an Alternate Data Stream (ADS), where adversaries may use NTFS file attributes to hide their malicious data in order to evade detection, you should monitor process creation logs on Windows systems for specific command-line patterns. Look for instances where the command line contains 'txt:', which indicates potential access or interaction with an alternate data stream. Additionally, be alert for command lines that combine certain tools and parameters, such as:\n\n- Use of 'type ' along with redirection '> ', which may suggest an attempt to display or redirect the contents of a file, possibly involving an ADS.\n- Execution involving 'makecab ' followed by '.cab', which could indicate compression of files into a Cabinet file, potentially to disguise malicious activity.\n- Commands starting with 'reg ' followed by ' export ', suggesting attempts to export registry keys, possibly for analysis or manipulation outside of standard registry tools.\n- Utilization of 'regedit ' with ' /E ', indicating export operations via Registry Editor, again potentially for malicious manipulation.\n- Execution of 'esentutl ' accompanied by '/y', '/d', and '/o' flags, which points to attempts to copy, defragment, or repair Extensible Storage Engine databases, potentially indicating more sophisticated adversary behavior involving data manipulation or extraction.\n\nIn essence, by monitoring for these specific command-line activities within process creation events, one can uncover potential misuse of alternate data streams by adversaries aiming to execute or hide malicious data, supporting efforts to evade detection. This monitoring approach crucially targets a range of tools and operations that could be exploited for such purposes."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains:\n            - \"if(0){{{0}}}' -f $(0 -as [char]) +\"\n            - \"#<NULL>\"\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect usage of special strings/null bits in order to potentially bypass AMSI functionalities\n\nHere is how  the given sigma rule operates: In order to detect usage of special strings/null bits in order to potentially bypass AMSI functionalities, you should: look for PowerShell script actions on Windows systems where Script Block Logging is enabled. Specifically, focus on identifying PowerShell commands that contain peculiar patterns such as \"if(0){{{0}}}' -f $(0 -as [char]) +\" or the representation of null bits through \"#<NULL>\". These patterns are unusual and may suggest an attempt to circumvent Anti-Malware Software Interface (AMSI) checks, which are designed to scan scripts and other code in memory for malware. Be aware that while these indicators can point to potential bypass attempts, not all uses may be malicious in nature, leading to possible unknown false positives. The significance of detecting these patterns is considered to be of medium level, indicating a noteworthy but not definitive sign of attempted evasion or malicious activity.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains:\n            - \"if(0){{{0}}}' -f $(0 -as [char]) +\"\n            - \"#<NULL>\"\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "usage of special strings/null bits in order to potentially bypass AMSI functionalities",
      "answer": "In order to detect usage of special strings/null bits in order to potentially bypass AMSI functionalities, you should: look for PowerShell script actions on Windows systems where Script Block Logging is enabled. Specifically, focus on identifying PowerShell commands that contain peculiar patterns such as \"if(0){{{0}}}' -f $(0 -as [char]) +\" or the representation of null bits through \"#<NULL>\". These patterns are unusual and may suggest an attempt to circumvent Anti-Malware Software Interface (AMSI) checks, which are designed to scan scripts and other code in memory for malware. Be aware that while these indicators can point to potential bypass attempts, not all uses may be malicious in nature, leading to possible unknown false positives. The significance of detecting these patterns is considered to be of medium level, indicating a noteworthy but not definitive sign of attempted evasion or malicious activity."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting access to SUPERNOVA webshell as described in Guidepoint report.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect access to SUPERNOVA webshell as described in Guidepoint report, you should focus on monitoring webserver logs for specific patterns in URI queries that indicate an attempt to access or interact with the SUPERNOVA webshell. Look for URI queries containing both 'logoimagehandler.ashx' and 'clazz' together, as this combination is peculiar and indicative of suspicious activities related to the SUPERNOVA webshell. Additionally, keep an eye out for any URI query specifically containing 'logoimagehandler.ashx' that results in a server response status of 500, as this may also signal an attempt to exploit or engage with the webshell.\n\nIt is crucial to carefully monitor and investigate these signs within your webserver logs, keeping an eye on the client making the request and the response returned. Doing so will aid in the early detection of potential security threats associated with the SUPERNOVA webshell, thereby allowing for swift response and mitigation efforts.\n\nBe aware that while these detections are set at a critical level due to their potential impact, there might be instances where legitimate activities could inadvertently mirror these patterns, though such cases are unknown. As part of mitigation and response strategies, any detection should be thoroughly investigated to rule out false positives and determine the appropriate course of action. These detections are linked to tactics and techniques such as Command and Control, and Web Shell, underlining their severe implications for compromised systems.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: webserver\ndetection:\n    selection1:\n        cs-uri-query|contains|all:\n            - 'logoimagehandler.ashx'\n            - 'clazz'\n    selection2:\n        cs-uri-query|contains: 'logoimagehandler.ashx'\n        sc-status: 500\n    condition: selection1 or selection2\nfields:\n    - client_ip\n    - response\nfalsepositives:\n    - Unknown\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: webserver\ndetection:\n    selection1:\n        cs-uri-query|contains|all:\n            - 'logoimagehandler.ashx'\n            - 'clazz'\n    selection2:\n        cs-uri-query|contains: 'logoimagehandler.ashx'\n        sc-status: 500\n    condition: selection1 or selection2\nfields:\n    - client_ip\n    - response\nfalsepositives:\n    - Unknown\nlevel: critical\n",
      "question": "access to SUPERNOVA webshell as described in Guidepoint report",
      "answer": "In order to detect access to SUPERNOVA webshell as described in Guidepoint report, you should focus on monitoring webserver logs for specific patterns in URI queries that indicate an attempt to access or interact with the SUPERNOVA webshell. Look for URI queries containing both 'logoimagehandler.ashx' and 'clazz' together, as this combination is peculiar and indicative of suspicious activities related to the SUPERNOVA webshell. Additionally, keep an eye out for any URI query specifically containing 'logoimagehandler.ashx' that results in a server response status of 500, as this may also signal an attempt to exploit or engage with the webshell.\n\nIt is crucial to carefully monitor and investigate these signs within your webserver logs, keeping an eye on the client making the request and the response returned. Doing so will aid in the early detection of potential security threats associated with the SUPERNOVA webshell, thereby allowing for swift response and mitigation efforts.\n\nBe aware that while these detections are set at a critical level due to their potential impact, there might be instances where legitimate activities could inadvertently mirror these patterns, though such cases are unknown. As part of mitigation and response strategies, any detection should be thoroughly investigated to rule out false positives and determine the appropriate course of action. These detections are linked to tactics and techniques such as Command and Control, and Web Shell, underlining their severe implications for compromised systems."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\certutil.exe'\n        - OriginalFileName: 'CertUtil.exe'\n    selection_cli:\n        CommandLine|contains:\n            - '-exportPFX '\n            - '/exportPFX '\n    condition: all of selection_*\nfalsepositives:\n    - There legitimate reasons to export certificates. Investigate the activity to determine if it's benign\nlevel: medium\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect execution of the certutil with the \"exportPFX\" flag which allows the utility to export certificates.\n\nHere is how  the given sigma rule operates: In order to detect the execution of the certutil with the \"exportPFX\" flag which allows the utility to export certificates, you should: Monitor Windows process creation logs for instances where the process image name ends with '\\certutil.exe' or has an original file name of 'CertUtil.exe'. Additionally, inspect the command line for the presence of '-exportPFX ' or '/exportPFX ' flags. This combination of process name and command line flags indicates an attempt to export certificates using certutil, which could be legitimate but also a technique used in cyber attacks. It is important to investigate these instances to determine their nature.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\certutil.exe'\n        - OriginalFileName: 'CertUtil.exe'\n    selection_cli:\n        CommandLine|contains:\n            - '-exportPFX '\n            - '/exportPFX '\n    condition: all of selection_*\nfalsepositives:\n    - There legitimate reasons to export certificates. Investigate the activity to determine if it's benign\nlevel: medium\n",
      "question": "execution of the certutil with the \"exportPFX\" flag which allows the utility to export certificates.",
      "answer": "In order to detect the execution of the certutil with the \"exportPFX\" flag which allows the utility to export certificates, you should: Monitor Windows process creation logs for instances where the process image name ends with '\\certutil.exe' or has an original file name of 'CertUtil.exe'. Additionally, inspect the command line for the presence of '-exportPFX ' or '/exportPFX ' flags. This combination of process name and command line flags indicates an attempt to export certificates using certutil, which could be legitimate but also a technique used in cyber attacks. It is important to investigate these instances to determine their nature."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_download:\n        CommandLine|contains:\n            - '.DownloadString('\n            - '.DownloadFile('\n            - 'Invoke-WebRequest '\n            - 'iwr '\n    selection_iex:\n        CommandLine|contains:\n            - ';iex $'\n            - '| IEX'\n            - '|IEX '\n            - 'I`E`X'\n            - 'I`EX'\n            - 'IE`X'\n            - 'iex '\n            - 'IEX ('\n            - 'IEX('\n            - 'Invoke-Expression'\n    condition: all of selection_*\nfalsepositives:\n    - Some PowerShell installers were seen using similar combinations. Apply filters accordingly\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect PowerShell download and execution cradles.\n\nHere is how  the given sigma rule operates: In order to detect PowerShell download and execution cradles, you should: monitor Windows process creation logs for command lines that indicate the use of PowerShell commands associated with downloading or executing scripts or files from the internet. Specifically, look for command lines containing phrases like `.DownloadString(`, `.DownloadFile(`, `Invoke-WebRequest `, or the abbreviation `iwr ` that suggest downloading activity. Furthermore, watch out for expressions such as `;iex $`, `| IEX`, `|IEX `, `I`E`X`, `I`EX`, `IE`X`, `iex `, `IEX (`, `IEX(`, and `Invoke-Expression` which indicate an attempt to execute PowerShell expressions, often used by attackers to run malicious scripts directly in memory without writing to disk. It's important to note that some legitimate PowerShell installers might use similar command patterns, so you need to apply appropriate filters to reduce false positives. This monitoring is critical because it captures the technique often utilized by attackers to bypass traditional defenses by leveraging PowerShell for malicious downloads and execution.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_download:\n        CommandLine|contains:\n            - '.DownloadString('\n            - '.DownloadFile('\n            - 'Invoke-WebRequest '\n            - 'iwr '\n    selection_iex:\n        CommandLine|contains:\n            - ';iex $'\n            - '| IEX'\n            - '|IEX '\n            - 'I`E`X'\n            - 'I`EX'\n            - 'IE`X'\n            - 'iex '\n            - 'IEX ('\n            - 'IEX('\n            - 'Invoke-Expression'\n    condition: all of selection_*\nfalsepositives:\n    - Some PowerShell installers were seen using similar combinations. Apply filters accordingly\nlevel: high\n",
      "question": "PowerShell download and execution cradles.",
      "answer": "In order to detect PowerShell download and execution cradles, you should: monitor Windows process creation logs for command lines that indicate the use of PowerShell commands associated with downloading or executing scripts or files from the internet. Specifically, look for command lines containing phrases like `.DownloadString(`, `.DownloadFile(`, `Invoke-WebRequest `, or the abbreviation `iwr ` that suggest downloading activity. Furthermore, watch out for expressions such as `;iex $`, `| IEX`, `|IEX `, `I`E`X`, `I`EX`, `IE`X`, `iex `, `IEX (`, `IEX(`, and `Invoke-Expression` which indicate an attempt to execute PowerShell expressions, often used by attackers to run malicious scripts directly in memory without writing to disk. It's important to note that some legitimate PowerShell installers might use similar command patterns, so you need to apply appropriate filters to reduce false positives. This monitoring is critical because it captures the technique often utilized by attackers to bypass traditional defenses by leveraging PowerShell for malicious downloads and execution."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting events of driver load errors in print service logs that could be a sign of successful exploitation attempts of print spooler vulnerability CVE-2021-1675.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect events of driver load errors in print service logs that could be a sign of successful exploitation attempts of print spooler vulnerability CVE-2021-1675, you should: Identify and monitor specific event patterns within Windows print service logs. Focus on event ID 808, which signals issues with loading print spooler components. Look for errors with specific error codes, '0x45A' and '0x7e', indicating potential malicious activity. Watch out for messages stating \"The print spooler failed to load a plug-in module,\" which can be indicative of an attempted exploit. Additionally, scrutinize any occurrences of default file names common in proof of concept codes related to this attack, such as 'MyExploit.dll', 'evil.dll', and various others listed like '\\addCube.dll', '\\rev.dll', etc. \n\nBe vigilant for these signals but also consider the possibility of false positives. Situations where the error message includes phrases like 'registration timed out' should not be immediately considered an attack, as this can be a normal occurrence unrelated to malicious activity. Exclude these instances to improve the accuracy of your detection efforts.\n\nFurthermore, always record the name of the plugin DLL implicated in such events, as this information can be crucial for further investigation and response activities. Be aware that issues with printer drivers can also cause similar log entries, which are not necessarily indicative of an attack, thus representing potential false positives. The detection strategy should maintain a high alert level due to the serious implications of successful exploitation of CVE-2021-1675 through the print spooler service.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: printservice-admin\ndetection:\n    selection:\n        EventID: 808\n        ErrorCode:\n            - '0x45A'\n            - '0x7e'\n    keywords:\n        - 'The print spooler failed to load a plug-in module'\n        # default file names used in PoC codes\n        - 'MyExploit.dll'\n        - 'evil.dll'\n        - '\\addCube.dll'\n        - '\\rev.dll'\n        - '\\rev2.dll'\n        - '\\main64.dll'\n        - '\\mimilib.dll'\n        - '\\mimispool.dll'\n    falsepositive:\n        - ' registration timed out' # ex: The print spooler failed to load a plug-in module PrintConfig registration timed out\n    condition: (selection or keywords) and not falsepositive\nfields:\n    - PluginDllName\nfalsepositives:\n    - Problems with printer drivers\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: printservice-admin\ndetection:\n    selection:\n        EventID: 808\n        ErrorCode:\n            - '0x45A'\n            - '0x7e'\n    keywords:\n        - 'The print spooler failed to load a plug-in module'\n        # default file names used in PoC codes\n        - 'MyExploit.dll'\n        - 'evil.dll'\n        - '\\addCube.dll'\n        - '\\rev.dll'\n        - '\\rev2.dll'\n        - '\\main64.dll'\n        - '\\mimilib.dll'\n        - '\\mimispool.dll'\n    falsepositive:\n        - ' registration timed out' # ex: The print spooler failed to load a plug-in module PrintConfig registration timed out\n    condition: (selection or keywords) and not falsepositive\nfields:\n    - PluginDllName\nfalsepositives:\n    - Problems with printer drivers\nlevel: high\n",
      "question": "events of driver load errors in print service logs that could be a sign of successful exploitation attempts of print spooler vulnerability CVE-2021-1675",
      "answer": "In order to detect events of driver load errors in print service logs that could be a sign of successful exploitation attempts of print spooler vulnerability CVE-2021-1675, you should: Identify and monitor specific event patterns within Windows print service logs. Focus on event ID 808, which signals issues with loading print spooler components. Look for errors with specific error codes, '0x45A' and '0x7e', indicating potential malicious activity. Watch out for messages stating \"The print spooler failed to load a plug-in module,\" which can be indicative of an attempted exploit. Additionally, scrutinize any occurrences of default file names common in proof of concept codes related to this attack, such as 'MyExploit.dll', 'evil.dll', and various others listed like '\\addCube.dll', '\\rev.dll', etc. \n\nBe vigilant for these signals but also consider the possibility of false positives. Situations where the error message includes phrases like 'registration timed out' should not be immediately considered an attack, as this can be a normal occurrence unrelated to malicious activity. Exclude these instances to improve the accuracy of your detection efforts.\n\nFurthermore, always record the name of the plugin DLL implicated in such events, as this information can be crucial for further investigation and response activities. Be aware that issues with printer drivers can also cause similar log entries, which are not necessarily indicative of an attack, thus representing potential false positives. The detection strategy should maintain a high alert level due to the serious implications of successful exploitation of CVE-2021-1675 through the print spooler service."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    product: zeek\n    service: x509\ndetection:\n    selection:\n        certificate.serial: 8BB00EE\n    condition: selection\nfields:\n    - san.dns\n    - certificate.subject\n    - certificate.issuer\nfalsepositives:\n    - Unknown\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect presence of default Cobalt Strike certificate in the HTTPS traffic\n\nHere is how  the given sigma rule operates: In order to detect the presence of default Cobalt Strike certificate in the HTTPS traffic, you should: Monitor HTTPS traffic for specific certificate characteristics using Zeek, focusing on the X509 service logs. Pay attention to certificates with the serial number \"8BB00EE\". This indicator can help identify potentially malicious activity related to Cobalt Strike, a common tool used in cyber attacks for establishing encrypted command and control channels. You will need to examine fields such as the DNS names included in the Subject Alternative Name (SAN) field, the certificate's subject, and issuer details to provide more context around the detected certificate. Be aware that there may be instances where this detection could trigger on non-malicious activity, although such false positives are currently unknown. This activity is characterized by a high level of confidence due to its specificity. By focusing on these details and logs from Zeek's X509 service, defenders can more effectively identify and respond to potential Cobalt Strike command and control communication within their networks.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: zeek\n    service: x509\ndetection:\n    selection:\n        certificate.serial: 8BB00EE\n    condition: selection\nfields:\n    - san.dns\n    - certificate.subject\n    - certificate.issuer\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "presence of default Cobalt Strike certificate in the HTTPS traffic",
      "answer": "In order to detect the presence of default Cobalt Strike certificate in the HTTPS traffic, you should: Monitor HTTPS traffic for specific certificate characteristics using Zeek, focusing on the X509 service logs. Pay attention to certificates with the serial number \"8BB00EE\". This indicator can help identify potentially malicious activity related to Cobalt Strike, a common tool used in cyber attacks for establishing encrypted command and control channels. You will need to examine fields such as the DNS names included in the Subject Alternative Name (SAN) field, the certificate's subject, and issuer details to provide more context around the detected certificate. Be aware that there may be instances where this detection could trigger on non-malicious activity, although such false positives are currently unknown. This activity is characterized by a high level of confidence due to its specificity. By focusing on these details and logs from Zeek's X509 service, defenders can more effectively identify and respond to potential Cobalt Strike command and control communication within their networks."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    product: windows\n    service: security\n    definition: 'The advanced audit policy setting \"Object Access > Audit Detailed File Share\" must be configured for Success/Failure'\ndetection:\n    selection1:\n        EventID: 5145\n        ShareName: '\\\\\\\\\\*\\\\IPC$' # looking for the string \\\\*\\IPC$\n        RelativeTargetName|contains:\n            - 'RemCom_stdin'\n            - 'RemCom_stdout'\n            - 'RemCom_stderr'\n    condition: selection1\nfalsepositives:\n    - Unknown\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect execution of Impacket's psexec.py.\n\nHere is how  the given sigma rule operates: In order to detect execution of Impacket's psexec.py, you should monitor Windows security logs for events that match specific criteria indicating that this attack tool is being used. Focus on the \"Object Access > Audit Detailed File Share\" setting within the Windows Advanced Audit Policy Configuration, ensuring it is configured to log both success and failure events. Specifically, look for Event ID 5145, which denotes an attempt to access a file share.\n\nWhen scrutinizing these events, pay particular attention to access attempts involving the IPC$ share, identifiable by the ShareName pattern `\\\\*\\IPC$`. This particular share is a target for attackers because it allows communication between processes over the network, which can be exploited for remote command execution.\n\nMoreover, you should watch for occurrences where the accessed file shares include any of the following relative target names: 'RemCom_stdin', 'RemCom_stdout', or 'RemCom_stderr'. These are indicative of the remote command execution tool RemCom using standard input, output, and error redirection over network shares, a method leveraged by Impacket's psexec.py to execute commands on the target system.\n\nIt is also important to consider that some events might not be related to malicious activity; therefore, any detection should be thoroughly investigated to rule out false positives. Due to the high impact and stealthiness of such attacks, they are classified at a high severity level.\n\nIn essence, monitoring for these specific conditions in your security logs, centered around the IPC$ share and the named files, serves as a crucial method for identifying and responding to potential instances of the psexec.py tool being used to carry out attacks on Windows systems. This approach aligns with understanding and mitigating tactics and techniques used by adversaries for remote command execution.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\n    definition: 'The advanced audit policy setting \"Object Access > Audit Detailed File Share\" must be configured for Success/Failure'\ndetection:\n    selection1:\n        EventID: 5145\n        ShareName: '\\\\\\\\\\*\\\\IPC$' # looking for the string \\\\*\\IPC$\n        RelativeTargetName|contains:\n            - 'RemCom_stdin'\n            - 'RemCom_stdout'\n            - 'RemCom_stderr'\n    condition: selection1\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "execution of Impacket's psexec.py.",
      "answer": "In order to detect execution of Impacket's psexec.py, you should monitor Windows security logs for events that match specific criteria indicating that this attack tool is being used. Focus on the \"Object Access > Audit Detailed File Share\" setting within the Windows Advanced Audit Policy Configuration, ensuring it is configured to log both success and failure events. Specifically, look for Event ID 5145, which denotes an attempt to access a file share.\n\nWhen scrutinizing these events, pay particular attention to access attempts involving the IPC$ share, identifiable by the ShareName pattern `\\\\*\\IPC$`. This particular share is a target for attackers because it allows communication between processes over the network, which can be exploited for remote command execution.\n\nMoreover, you should watch for occurrences where the accessed file shares include any of the following relative target names: 'RemCom_stdin', 'RemCom_stdout', or 'RemCom_stderr'. These are indicative of the remote command execution tool RemCom using standard input, output, and error redirection over network shares, a method leveraged by Impacket's psexec.py to execute commands on the target system.\n\nIt is also important to consider that some events might not be related to malicious activity; therefore, any detection should be thoroughly investigated to rule out false positives. Due to the high impact and stealthiness of such attacks, they are classified at a high severity level.\n\nIn essence, monitoring for these specific conditions in your security logs, centered around the IPC$ share and the named files, serves as a crucial method for identifying and responding to potential instances of the psexec.py tool being used to carry out attacks on Windows systems. This approach aligns with understanding and mitigating tactics and techniques used by adversaries for remote command execution."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: registry_event\n    product: windows\ndetection:\n    selection_registry:\n        TargetObject: 'HKLM\\SYSTEM\\CurrentControlSet\\Services\\PortProxy\\v4tov4\\tcp'\n    condition: selection_registry\nfalsepositives:\n    - WSL2 network bridge PowerShell script used for WSL/Kubernetes/Docker (e.g. https://github.com/microsoft/WSL/issues/4150#issuecomment-504209723)\n    - Synergy Software KVM (https://symless.com/synergy)\nlevel: medium\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect modification of PortProxy registry key which is used for port forwarding. For command execution see rule win_netsh_port_fwd.yml.\n\nHere is how  the given sigma rule operates: In order to detect the modification of the PortProxy registry key which is used for port forwarding, you should: Monitor Windows Registry events, specifically targeting changes to the registry key at `HKLM\\SYSTEM\\CurrentControlSet\\Services\\PortProxy\\v4tov4\\tcp`. This vigilance is essential as unauthorized modifications can indicate attempts to manipulate port forwarding settings, possibly for command execution. However, be aware that there are legitimate uses that could trigger false alerts, such as the WSL2 network bridge PowerShell script often used with WSL, Kubernetes, or Docker, and the Synergy Software KVM for sharing a keyboard and mouse between computers. These exceptions are noteworthy to reduce unnecessary alarms. The severity level for this kind of detection is considered medium, indicating it's important but not always indicative of a high-threat activity.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_event\n    product: windows\ndetection:\n    selection_registry:\n        TargetObject: 'HKLM\\SYSTEM\\CurrentControlSet\\Services\\PortProxy\\v4tov4\\tcp'\n    condition: selection_registry\nfalsepositives:\n    - WSL2 network bridge PowerShell script used for WSL/Kubernetes/Docker (e.g. https://github.com/microsoft/WSL/issues/4150#issuecomment-504209723)\n    - Synergy Software KVM (https://symless.com/synergy)\nlevel: medium\n",
      "question": "modification of PortProxy registry key which is used for port forwarding. For command execution see rule win_netsh_port_fwd.yml.",
      "answer": "In order to detect the modification of the PortProxy registry key which is used for port forwarding, you should: Monitor Windows Registry events, specifically targeting changes to the registry key at `HKLM\\SYSTEM\\CurrentControlSet\\Services\\PortProxy\\v4tov4\\tcp`. This vigilance is essential as unauthorized modifications can indicate attempts to manipulate port forwarding settings, possibly for command execution. However, be aware that there are legitimate uses that could trigger false alerts, such as the WSL2 network bridge PowerShell script often used with WSL, Kubernetes, or Docker, and the Synergy Software KVM for sharing a keyboard and mouse between computers. These exceptions are noteworthy to reduce unnecessary alarms. The severity level for this kind of detection is considered medium, indicating it's important but not always indicative of a high-threat activity."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_1:\n        - Image|endswith: '\\reg.exe'\n        - OriginalFileName: 'reg.exe'\n    selection_2:\n        CommandLine|contains:\n            - ' save '\n            - ' export '\n    selection_3:\n        CommandLine|contains:\n            - 'hklm\\sam'\n            - 'hklm\\security'\n            - 'HKEY_LOCAL_MACHINE\\SAM'\n            - 'HKEY_LOCAL_MACHINE\\SECURITY'\n    condition: all of selection_*\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect Credential Acquisition via Registry Hive Dumping\n\nHere is how  the given sigma rule operates: In order to detect Credential Acquisition via Registry Hive Dumping, you should look for the creation of processes on Windows systems that are specifically associated with the registry editor application (`reg.exe`). These processes should be identified by their image name ending with `\\reg.exe` and having an original filename of `reg.exe`. Furthermore, the command lines of these processes should include operations indicative of attempts to save or export data, identified by the presence of `save` or `export` in the command line. Additionally, these command lines should contain references to specific registry hives that are crucial for holding sensitive information, including `hklm\\sam`, `hklm\\security`, `HKEY_LOCAL_MACHINE\\SAM`, and `HKEY_LOCAL_MACHINE\\SECURITY`. The detection of processes meeting all these criteria\u2014usage of `reg.exe`, intent to export or save, and targeting specific sensitive registry hives\u2014indicates an active attempt at credential acquisition through registry hive dumping.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_1:\n        - Image|endswith: '\\reg.exe'\n        - OriginalFileName: 'reg.exe'\n    selection_2:\n        CommandLine|contains:\n            - ' save '\n            - ' export '\n    selection_3:\n        CommandLine|contains:\n            - 'hklm\\sam'\n            - 'hklm\\security'\n            - 'HKEY_LOCAL_MACHINE\\SAM'\n            - 'HKEY_LOCAL_MACHINE\\SECURITY'\n    condition: all of selection_*\nlevel: high\n",
      "question": "Credential Acquisition via Registry Hive Dumping",
      "answer": "In order to detect Credential Acquisition via Registry Hive Dumping, you should look for the creation of processes on Windows systems that are specifically associated with the registry editor application (`reg.exe`). These processes should be identified by their image name ending with `\\reg.exe` and having an original filename of `reg.exe`. Furthermore, the command lines of these processes should include operations indicative of attempts to save or export data, identified by the presence of `save` or `export` in the command line. Additionally, these command lines should contain references to specific registry hives that are crucial for holding sensitive information, including `hklm\\sam`, `hklm\\security`, `HKEY_LOCAL_MACHINE\\SAM`, and `HKEY_LOCAL_MACHINE\\SECURITY`. The detection of processes meeting all these criteria\u2014usage of `reg.exe`, intent to export or save, and targeting specific sensitive registry hives\u2014indicates an active attempt at credential acquisition through registry hive dumping."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: 'AtBroker.exe'\n        CommandLine|contains: 'start'\n    filter:\n        CommandLine|contains:\n            - animations\n            - audiodescription\n            - caretbrowsing\n            - caretwidth\n            - colorfiltering\n            - cursorscheme\n            - filterkeys\n            - focusborderheight\n            - focusborderwidth\n            - highcontrast\n            - keyboardcues\n            - keyboardpref\n            - magnifierpane\n            - messageduration\n            - minimumhitradius\n            - mousekeys\n            - Narrator\n            - osk\n            - overlappedcontent\n            - showsounds\n            - soundsentry\n            - stickykeys\n            - togglekeys\n            - windowarranging\n            - windowtracking\n            - windowtrackingtimeout\n            - windowtrackingzorder\n    condition: selection and not filter\nfalsepositives:\n    - Legitimate, non-default assistive technology applications execution\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect Atbroker executing non-deafualt Assistive Technology applications\n\nHere is how  the given sigma rule operates: In order to detect Atbroker executing non-default Assistive Technology applications, you should focus on monitoring process creation events in Windows systems. Specifically, watch for instances where the process image name ends with 'AtBroker.exe' and its command line includes the text 'start'. However, it is crucial to filter out any command line options that are associated with legitimate, default assistive technology applications, such as various accessibility settings (e.g., animations, high contrast, Narrator, etc.). By applying this approach, you aim to identify potentially malicious activities involving AtBroker.exe while minimizing false positives related to legitimate use of assistive technologies. This method is instrumental in protecting against attacks leveraging Atbroker for executing unauthorized applications under the guise of assistive technologies.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: 'AtBroker.exe'\n        CommandLine|contains: 'start'\n    filter:\n        CommandLine|contains:\n            - animations\n            - audiodescription\n            - caretbrowsing\n            - caretwidth\n            - colorfiltering\n            - cursorscheme\n            - filterkeys\n            - focusborderheight\n            - focusborderwidth\n            - highcontrast\n            - keyboardcues\n            - keyboardpref\n            - magnifierpane\n            - messageduration\n            - minimumhitradius\n            - mousekeys\n            - Narrator\n            - osk\n            - overlappedcontent\n            - showsounds\n            - soundsentry\n            - stickykeys\n            - togglekeys\n            - windowarranging\n            - windowtracking\n            - windowtrackingtimeout\n            - windowtrackingzorder\n    condition: selection and not filter\nfalsepositives:\n    - Legitimate, non-default assistive technology applications execution\nlevel: high\n",
      "question": "Atbroker executing non-deafualt Assistive Technology applications",
      "answer": "In order to detect Atbroker executing non-default Assistive Technology applications, you should focus on monitoring process creation events in Windows systems. Specifically, watch for instances where the process image name ends with 'AtBroker.exe' and its command line includes the text 'start'. However, it is crucial to filter out any command line options that are associated with legitimate, default assistive technology applications, such as various accessibility settings (e.g., animations, high contrast, Narrator, etc.). By applying this approach, you aim to identify potentially malicious activities involving AtBroker.exe while minimizing false positives related to legitimate use of assistive technologies. This method is instrumental in protecting against attacks leveraging Atbroker for executing unauthorized applications under the guise of assistive technologies."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: webserver\ndetection:\n    selection:\n        cs-uri-query: '*/config/keystore/*.js*'\n    condition: selection\nfields:\n    - c-ip\n    - c-dns\nfalsepositives:\n    - Unknown\nlevel: critical\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect access to a webshell dropped into a keystore folder on the WebLogic server\n\nHere is how  the given sigma rule operates: In order to detect access to a webshell dropped into a keystore folder on the WebLogic server, you should monitor web server logs for any requests targeting JavaScript files (.js) located within the \"/config/keystore/\" directory path. Pay particular attention to the 'cs-uri-query' field in the logs, which should match the pattern '*/config/keystore/*.js*'. It's crucial to capture and scrutinize both the client IP ('c-ip') and client DNS name ('c-dns') to trace the source of the request. Despite potential unknowns that may initially not seem malicious, the critical nature of this activity demands undivided attention due to its association with techniques commonly employed during cyber attacks. This approach is essential in identifying potentially malicious activities targeting sensitive parts of a WebLogic server infrastructure.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: webserver\ndetection:\n    selection:\n        cs-uri-query: '*/config/keystore/*.js*'\n    condition: selection\nfields:\n    - c-ip\n    - c-dns\nfalsepositives:\n    - Unknown\nlevel: critical\n",
      "question": "access to a webshell dropped into a keystore folder on the WebLogic server",
      "answer": "In order to detect access to a webshell dropped into a keystore folder on the WebLogic server, you should monitor web server logs for any requests targeting JavaScript files (.js) located within the \"/config/keystore/\" directory path. Pay particular attention to the 'cs-uri-query' field in the logs, which should match the pattern '*/config/keystore/*.js*'. It's crucial to capture and scrutinize both the client IP ('c-ip') and client DNS name ('c-dns') to trace the source of the request. Despite potential unknowns that may initially not seem malicious, the critical nature of this activity demands undivided attention due to its association with techniques commonly employed during cyber attacks. This approach is essential in identifying potentially malicious activities targeting sensitive parts of a WebLogic server infrastructure."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Adversaries may interrupt availability of system and network resources by inhibiting access to accounts utilized by legitimate users.\nAccounts may be deleted, locked, or manipulated (ex: changed credentials) to remove access to accounts.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to prevent adversaries from interrupting the availability of system and network resources by inhibiting access to accounts utilized by legitimate users through actions such as deleting, locking, or manipulating accounts (e.g., changing credentials), you should focus on monitoring PowerShell script logs on Windows systems. Specifically, ensure that Script Block Logging is enabled to capture detailed logging information. Look for scripts that contain the commands `Remove-ADGroupMember` along with both parameters `-Identity ` and `-Members `. This combination indicates an attempt to remove members from Active Directory groups, which could be part of an attack to deny access to certain accounts or resources. Be aware that there may be instances where these commands are used legitimately, though such scenarios are considered unknown false positives. The severity level of this activity is medium, implying that while it may not directly indicate a breach, it is suspicious enough to warrant investigation. Understanding these signs and being proactive in detection can help in mitigating threats aimed at disrupting legitimate user access to network resources and accounts.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains|all:\n            - 'Remove-ADGroupMember'\n            - '-Identity '\n            - '-Members '\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains|all:\n            - 'Remove-ADGroupMember'\n            - '-Identity '\n            - '-Members '\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Adversaries may interrupt availability of system and network resources by inhibiting access to accounts utilized by legitimate users.\nAccounts may be deleted, locked, or manipulated (ex: changed credentials) to remove access to accounts.\n",
      "answer": "In order to prevent adversaries from interrupting the availability of system and network resources by inhibiting access to accounts utilized by legitimate users through actions such as deleting, locking, or manipulating accounts (e.g., changing credentials), you should focus on monitoring PowerShell script logs on Windows systems. Specifically, ensure that Script Block Logging is enabled to capture detailed logging information. Look for scripts that contain the commands `Remove-ADGroupMember` along with both parameters `-Identity ` and `-Members `. This combination indicates an attempt to remove members from Active Directory groups, which could be part of an attack to deny access to certain accounts or resources. Be aware that there may be instances where these commands are used legitimately, though such scenarios are considered unknown false positives. The severity level of this activity is medium, implying that while it may not directly indicate a breach, it is suspicious enough to warrant investigation. Understanding these signs and being proactive in detection can help in mitigating threats aimed at disrupting legitimate user access to network resources and accounts."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Detect use of scrobj.dll as this DLL looks for the ScriptletURL key to get the location of the script to execute.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect use of scrobj.dll as this DLL looks for the ScriptletURL key to get the location of the script to execute, you should: Monitor Windows registry modifications where the event type indicates a value being set (SetValue) within the Windows registry. Specifically, pay attention to changes in the registry targeting objects ending with 'InprocServer32\\(Default)'. If the modification details explicitly involve 'C:\\WINDOWS\\system32\\scrobj.dll', this is an indicator of a potential security threat. It is crucial to be aware that there might be legitimate uses of this DLL file, so not every detection will represent a malicious activity. The detection focuses on registry settings related to Windows, highlighting the manipulation of critical areas where malicious actors might attempt to execute scripts through the misuse of the scrobj.dll. The activities to monitor are categorized under techniques and tactics that involve modification of system registry to establish persistence or execute malicious scripts, signifying the need for medium-level alertness.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|endswith: 'InprocServer32\\(Default)'\n        Details: 'C:\\WINDOWS\\system32\\scrobj.dll'\n    condition: selection\nfalsepositives:\n    - Legitimate use of the dll.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|endswith: 'InprocServer32\\(Default)'\n        Details: 'C:\\WINDOWS\\system32\\scrobj.dll'\n    condition: selection\nfalsepositives:\n    - Legitimate use of the dll.\nlevel: medium\n",
      "question": "Detect use of scrobj.dll as this DLL looks for the ScriptletURL key to get the location of the script to execute",
      "answer": "In order to detect use of scrobj.dll as this DLL looks for the ScriptletURL key to get the location of the script to execute, you should: Monitor Windows registry modifications where the event type indicates a value being set (SetValue) within the Windows registry. Specifically, pay attention to changes in the registry targeting objects ending with 'InprocServer32\\(Default)'. If the modification details explicitly involve 'C:\\WINDOWS\\system32\\scrobj.dll', this is an indicator of a potential security threat. It is crucial to be aware that there might be legitimate uses of this DLL file, so not every detection will represent a malicious activity. The detection focuses on registry settings related to Windows, highlighting the manipulation of critical areas where malicious actors might attempt to execute scripts through the misuse of the scrobj.dll. The activities to monitor are categorized under techniques and tactics that involve modification of system registry to establish persistence or execute malicious scripts, signifying the need for medium-level alertness."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting remote file copy attempt to a hidden network share. This may indicate lateral movement or data staging activity..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a remote file copy attempt to a hidden network share, which may indicate lateral movement or data staging activity, you should: Monitor for process creation events within Windows operating systems that involve command-line tools such as cmd.exe and powershell.exe. Specifically, look for instances where these tools execute commands containing the strings 'echo' and '>' along with a reference to a named pipe ('\\\\\\\\.\\\\pipe\\\\'), which is a method often used in scripting to redirect output to a network location in a covert fashion. Such activity could suggest an attempt at moving files to a hidden network share, potentially for malicious purposes like data theft or spreading within a network. It's important to be aware that there are legitimate cases where similar patterns may occur, so careful analysis is necessary to distinguish between benign and malicious behavior. The level of concern for such detections is considered high, indicating that immediate investigation is recommended upon alert.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_name:\n        - Image|endswith:\n            - '\\cmd.exe'\n            - '\\powershell.exe'\n        - OriginalFileName:\n            - 'Cmd.Exe'\n            - 'PowerShell.EXE'\n    selection_args:\n        CommandLine|contains|all:\n            - 'echo'\n            - '>'\n            - '\\\\\\\\.\\\\pipe\\\\'\n    condition: all of selection*\nfalsepositives:\n    - Other programs that cause these patterns (please report)\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_name:\n        - Image|endswith:\n            - '\\cmd.exe'\n            - '\\powershell.exe'\n        - OriginalFileName:\n            - 'Cmd.Exe'\n            - 'PowerShell.EXE'\n    selection_args:\n        CommandLine|contains|all:\n            - 'echo'\n            - '>'\n            - '\\\\\\\\.\\\\pipe\\\\'\n    condition: all of selection*\nfalsepositives:\n    - Other programs that cause these patterns (please report)\nlevel: high\n",
      "question": "remote file copy attempt to a hidden network share. This may indicate lateral movement or data staging activity.",
      "answer": "In order to detect a remote file copy attempt to a hidden network share, which may indicate lateral movement or data staging activity, you should: Monitor for process creation events within Windows operating systems that involve command-line tools such as cmd.exe and powershell.exe. Specifically, look for instances where these tools execute commands containing the strings 'echo' and '>' along with a reference to a named pipe ('\\\\\\\\.\\\\pipe\\\\'), which is a method often used in scripting to redirect output to a network location in a covert fashion. Such activity could suggest an attempt at moving files to a hidden network share, potentially for malicious purposes like data theft or spreading within a network. It's important to be aware that there are legitimate cases where similar patterns may occur, so careful analysis is necessary to distinguish between benign and malicious behavior. The level of concern for such detections is considered high, indicating that immediate investigation is recommended upon alert."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Detect usage of the \"runexehelper.exe\" binary as a proxy to launch other programs.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect usage of the \"runexehelper.exe\" binary as a proxy to launch other programs, you should focus on monitoring the creation of processes within Windows operating systems. Specifically, look for instances where the parent image ends with '\\runexehelper.exe', which indicates that this binary is being used to initiate other processes. As false positives are categorized as unknown, it is essential to remain vigilant and further investigate any matches found. This method directly relates to identifying malicious processes and execution techniques, helping to uncover potentially stealthy behaviors used by attackers to evade detection.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\runexehelper.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\runexehelper.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Detect usage of the \"runexehelper.exe\" binary as a proxy to launch other programs",
      "answer": "In order to detect usage of the \"runexehelper.exe\" binary as a proxy to launch other programs, you should focus on monitoring the creation of processes within Windows operating systems. Specifically, look for instances where the parent image ends with '\\runexehelper.exe', which indicates that this binary is being used to initiate other processes. As false positives are categorized as unknown, it is essential to remain vigilant and further investigate any matches found. This method directly relates to identifying malicious processes and execution techniques, helping to uncover potentially stealthy behaviors used by attackers to evade detection."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_parent:\n        ParentImage|endswith: '\\sqlps.exe'\n    selection_image:\n        - Image|endswith: '\\sqlps.exe'\n        - OriginalFileName: 'sqlps.exe'\n    filter_image:\n        ParentImage|endswith: '\\sqlagent.exe'\n    condition: selection_parent or (selection_image and not filter_image)\nfalsepositives:\n    - Direct PS command execution through SQLPS.exe is uncommon, childprocess sqlps.exe spawned by sqlagent.exe is a legitimate action.\nlevel: medium\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect execution of a PowerShell code through the sqlps.exe utility, which is included in the standard set of utilities supplied with the MSSQL Server.\nScript blocks are not logged in this case, so this utility helps to bypass protection mechanisms based on the analysis of these logs.\n\n\nHere is how  the given sigma rule operates: In order to detect execution of a PowerShell code through the sqlps.exe utility, which is included in the standard set of utilities supplied with the MSSQL Server and helps to bypass protection mechanisms based on the analysis of script blocks logs, you should: Monitor the process creation logs on Windows systems for instances where the 'sqlps.exe' utility is initiated. Specifically, you should look for scenarios where 'sqlps.exe' acts as a parent process or is launched directly, indicating potential use for executing PowerShell code in a manner that may evade script block logging. It is important to also apply a filter to exclude cases where 'sqlps.exe' is a child process of 'sqlagent.exe', as this is a recognized legitimate action. Be aware that direct PowerShell command execution via 'sqlps.exe' is unusual, so such events merit scrutiny, albeit with an understanding that false positives can occur under certain legitimate use cases. This approach helps in identifying tactics that may be employed to avoid detection through log bypass mechanisms.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_parent:\n        ParentImage|endswith: '\\sqlps.exe'\n    selection_image:\n        - Image|endswith: '\\sqlps.exe'\n        - OriginalFileName: 'sqlps.exe'\n    filter_image:\n        ParentImage|endswith: '\\sqlagent.exe'\n    condition: selection_parent or (selection_image and not filter_image)\nfalsepositives:\n    - Direct PS command execution through SQLPS.exe is uncommon, childprocess sqlps.exe spawned by sqlagent.exe is a legitimate action.\nlevel: medium\n",
      "question": "execution of a PowerShell code through the sqlps.exe utility, which is included in the standard set of utilities supplied with the MSSQL Server.\nScript blocks are not logged in this case, so this utility helps to bypass protection mechanisms based on the analysis of these logs.\n",
      "answer": "In order to detect execution of a PowerShell code through the sqlps.exe utility, which is included in the standard set of utilities supplied with the MSSQL Server and helps to bypass protection mechanisms based on the analysis of script blocks logs, you should: Monitor the process creation logs on Windows systems for instances where the 'sqlps.exe' utility is initiated. Specifically, you should look for scenarios where 'sqlps.exe' acts as a parent process or is launched directly, indicating potential use for executing PowerShell code in a manner that may evade script block logging. It is important to also apply a filter to exclude cases where 'sqlps.exe' is a child process of 'sqlagent.exe', as this is a recognized legitimate action. Be aware that direct PowerShell command execution via 'sqlps.exe' is unusual, so such events merit scrutiny, albeit with an understanding that false positives can occur under certain legitimate use cases. This approach helps in identifying tactics that may be employed to avoid detection through log bypass mechanisms."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting pattern of UAC Bypass using a WoW64 logger DLL hijack (UACMe 30).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the pattern of UAC Bypass using a WoW64 logger DLL hijack (UACMe 30), you should: focus on monitoring process access within Windows environments. Specifically, keep an eye out for instances where a process accesses another with an image path containing ':\\Windows\\SysWOW64\\'. This directory is indicative of the Windows-on-Windows 64-bit subsystem, which can be abused in this type of attack. The access permission level '0x1fffff' suggests that the process is requesting a wide range of access rights, which could be indicative of malicious activity aiming to bypass User Account Control (UAC). Additionally, the call trace beginning with a sequence of 'UNKNOWN(0000000000000000)|' entries is a strong indicator of an attempt to exploit the UAC via DLL hijacking specifically targeting the WoW64 subsystem. It's important to monitor for these specific patterns of behavior and access requests as they are indicative of the tactics, techniques, and procedures used in this form of UAC bypass attack. However, be aware that the detection criteria might lead to unknown false positives, indicating that not every match necessarily confirms malicious activity, but due to the high level of the risk associated, any hits should be investigated thoroughly.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_access\n    product: windows\ndetection:\n    selection:\n        SourceImage|contains: ':\\Windows\\SysWOW64\\'\n        GrantedAccess: '0x1fffff'\n        CallTrace|startswith: 'UNKNOWN(0000000000000000)|UNKNOWN(0000000000000000)|'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_access\n    product: windows\ndetection:\n    selection:\n        SourceImage|contains: ':\\Windows\\SysWOW64\\'\n        GrantedAccess: '0x1fffff'\n        CallTrace|startswith: 'UNKNOWN(0000000000000000)|UNKNOWN(0000000000000000)|'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "pattern of UAC Bypass using a WoW64 logger DLL hijack (UACMe 30)",
      "answer": "In order to detect the pattern of UAC Bypass using a WoW64 logger DLL hijack (UACMe 30), you should: focus on monitoring process access within Windows environments. Specifically, keep an eye out for instances where a process accesses another with an image path containing ':\\Windows\\SysWOW64\\'. This directory is indicative of the Windows-on-Windows 64-bit subsystem, which can be abused in this type of attack. The access permission level '0x1fffff' suggests that the process is requesting a wide range of access rights, which could be indicative of malicious activity aiming to bypass User Account Control (UAC). Additionally, the call trace beginning with a sequence of 'UNKNOWN(0000000000000000)|' entries is a strong indicator of an attempt to exploit the UAC via DLL hijacking specifically targeting the WoW64 subsystem. It's important to monitor for these specific patterns of behavior and access requests as they are indicative of the tactics, techniques, and procedures used in this form of UAC bypass attack. However, be aware that the detection criteria might lead to unknown false positives, indicating that not every match necessarily confirms malicious activity, but due to the high level of the risk associated, any hits should be investigated thoroughly."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting usage of the 'SeLoadDriverPrivilege' privilege. This privilege is required to load or unload a device driver.\nWith this privilege, the user can dynamically load and unload device drivers or other code in to kernel mode.\nThis user right does not apply to Plug and Play device drivers.\nIf you exclude privileged users/admins and processes, which are allowed to do so, you are maybe left with bad programs trying to load malicious kernel drivers.\nThis will detect Ghost-In-The-Logs (https://github.com/bats3c/Ghost-In-The-Logs) and the usage of Sysinternals and various other tools. So you have to work with a whitelist to find the bad stuff.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to \"Detects the usage of the 'SeLoadDriverPrivilege' privilege. This privilege is required to load or unload a device driver. With this privilege, the user can dynamically load and unload device drivers or other code into kernel mode. This user right does not apply to Plug and Play device drivers. If you exclude privileged users/admins and processes, which are allowed to do so, you are maybe left with bad programs trying to load malicious kernel drivers. This will detect Ghost-In-The-Logs (https://github.com/bats3c/Ghost-In-The-Logs) and the usage of Sysinternals and various other tools. So you have to work with a whitelist to find the bad stuff.\", you should:\n\nMonitor security logs from Windows systems for specific events indicating that the 'SeLoadDriverPrivilege' is being utilized. Specifically, look out for EventID 4673, which signifies an attempt to use this privilege. This privilege is crucial for operations like dynamically loading or unloading device drivers into kernel mode, an action which does not pertain to Plug and Play device drivers and should be scrutinized especially if not performed by privileged users or admins. \n\nIt is essential to filter these detection logs carefully. Exclude events associated with known and trusted processes, such as common Windows executables like Dism.exe, rundll32.exe, fltMC.exe, and several others including process executable paths related to the System32 directory, HelpPane, and the Windows explorer among the list. Moreover, any process names ending with tools commonly used for system monitoring or web browsers like Chrome, and applications like Microsoft Teams should be considered with caution as these might lead to false positives due to legitimate usage. Additionally, any process that starts with the path 'C:\\Program Files\\WindowsApps\\Microsoft' also warrants exclusion from the suspicious activity to minimize the detection of benign activities as malicious.\n\nHowever, despite these exclusions, it's pivotal to establish a comprehensive understanding of what is classified as normal within your environment. This could involve creating a baseline of legitimate tools that load drivers, including but not limited to, system internals, hardware monitoring tools like CPU-Z, antivirus software, and others. Special attention should be made to exclude users who have legitimate reasons to load drivers\u2014this aids in refining the detection process to ensure only potentially malicious activities are flagged.\n\nBy adopting such an approach, entities can effectively monitor and detect unauthorized or suspicious uses of the 'SeLoadDriverPrivilege', flagging attempts to load malicious kernel drivers while reducing false positives by considering legitimate software and authorized user activities. Establishing and maintaining a whitelist is crucial to differentiate between harmful and benign use of this privilege, thus enhancing the security posture against threats attempting to exploit kernel mode operations for malicious purposes.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\ndetection:\n    selection_1:\n        EventID: 4673\n        PrivilegeList: 'SeLoadDriverPrivilege'\n        Service: '-'\n    filter_exact:\n        ProcessName:\n            - 'C:\\Windows\\System32\\Dism.exe'\n            - 'C:\\Windows\\System32\\rundll32.exe'\n            - 'C:\\Windows\\System32\\fltMC.exe'\n            - 'C:\\Windows\\HelpPane.exe'\n            - 'C:\\Windows\\System32\\mmc.exe'\n            - 'C:\\Windows\\System32\\svchost.exe'\n            - 'C:\\Windows\\System32\\wimserv.exe'\n            - 'C:\\Windows\\System32\\RuntimeBroker.exe'\n            - 'C:\\Windows\\System32\\SystemSettingsBroker.exe'\n            - 'C:\\Windows\\explorer.exe'\n    filter_endswith:\n        ProcessName|endswith:\n            - '\\procexp64.exe'\n            - '\\procexp.exe'\n            - '\\procmon64.exe'\n            - '\\procmon.exe'\n            - '\\Google\\Chrome\\Application\\chrome.exe'\n            - '\\AppData\\Local\\Microsoft\\Teams\\current\\Teams.exe'\n    filter_startswith:\n        ProcessName|startswith: 'C:\\Program Files\\WindowsApps\\Microsoft'\n    condition: selection_1 and not 1 of filter_*\nfalsepositives:\n    - Other legimate tools loading drivers. Including but not limited to, Sysinternals, CPU-Z, AVs etc. A baseline needs to be created according to the used products and allowed tools. A good thing to do is to try and exclude users who are allowed to load drivers.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\ndetection:\n    selection_1:\n        EventID: 4673\n        PrivilegeList: 'SeLoadDriverPrivilege'\n        Service: '-'\n    filter_exact:\n        ProcessName:\n            - 'C:\\Windows\\System32\\Dism.exe'\n            - 'C:\\Windows\\System32\\rundll32.exe'\n            - 'C:\\Windows\\System32\\fltMC.exe'\n            - 'C:\\Windows\\HelpPane.exe'\n            - 'C:\\Windows\\System32\\mmc.exe'\n            - 'C:\\Windows\\System32\\svchost.exe'\n            - 'C:\\Windows\\System32\\wimserv.exe'\n            - 'C:\\Windows\\System32\\RuntimeBroker.exe'\n            - 'C:\\Windows\\System32\\SystemSettingsBroker.exe'\n            - 'C:\\Windows\\explorer.exe'\n    filter_endswith:\n        ProcessName|endswith:\n            - '\\procexp64.exe'\n            - '\\procexp.exe'\n            - '\\procmon64.exe'\n            - '\\procmon.exe'\n            - '\\Google\\Chrome\\Application\\chrome.exe'\n            - '\\AppData\\Local\\Microsoft\\Teams\\current\\Teams.exe'\n    filter_startswith:\n        ProcessName|startswith: 'C:\\Program Files\\WindowsApps\\Microsoft'\n    condition: selection_1 and not 1 of filter_*\nfalsepositives:\n    - Other legimate tools loading drivers. Including but not limited to, Sysinternals, CPU-Z, AVs etc. A baseline needs to be created according to the used products and allowed tools. A good thing to do is to try and exclude users who are allowed to load drivers.\nlevel: medium\n",
      "question": "usage of the 'SeLoadDriverPrivilege' privilege. This privilege is required to load or unload a device driver.\nWith this privilege, the user can dynamically load and unload device drivers or other code in to kernel mode.\nThis user right does not apply to Plug and Play device drivers.\nIf you exclude privileged users/admins and processes, which are allowed to do so, you are maybe left with bad programs trying to load malicious kernel drivers.\nThis will detect Ghost-In-The-Logs (https://github.com/bats3c/Ghost-In-The-Logs) and the usage of Sysinternals and various other tools. So you have to work with a whitelist to find the bad stuff.\n",
      "answer": "In order to \"Detects the usage of the 'SeLoadDriverPrivilege' privilege. This privilege is required to load or unload a device driver. With this privilege, the user can dynamically load and unload device drivers or other code into kernel mode. This user right does not apply to Plug and Play device drivers. If you exclude privileged users/admins and processes, which are allowed to do so, you are maybe left with bad programs trying to load malicious kernel drivers. This will detect Ghost-In-The-Logs (https://github.com/bats3c/Ghost-In-The-Logs) and the usage of Sysinternals and various other tools. So you have to work with a whitelist to find the bad stuff.\", you should:\n\nMonitor security logs from Windows systems for specific events indicating that the 'SeLoadDriverPrivilege' is being utilized. Specifically, look out for EventID 4673, which signifies an attempt to use this privilege. This privilege is crucial for operations like dynamically loading or unloading device drivers into kernel mode, an action which does not pertain to Plug and Play device drivers and should be scrutinized especially if not performed by privileged users or admins. \n\nIt is essential to filter these detection logs carefully. Exclude events associated with known and trusted processes, such as common Windows executables like Dism.exe, rundll32.exe, fltMC.exe, and several others including process executable paths related to the System32 directory, HelpPane, and the Windows explorer among the list. Moreover, any process names ending with tools commonly used for system monitoring or web browsers like Chrome, and applications like Microsoft Teams should be considered with caution as these might lead to false positives due to legitimate usage. Additionally, any process that starts with the path 'C:\\Program Files\\WindowsApps\\Microsoft' also warrants exclusion from the suspicious activity to minimize the detection of benign activities as malicious.\n\nHowever, despite these exclusions, it's pivotal to establish a comprehensive understanding of what is classified as normal within your environment. This could involve creating a baseline of legitimate tools that load drivers, including but not limited to, system internals, hardware monitoring tools like CPU-Z, antivirus software, and others. Special attention should be made to exclude users who have legitimate reasons to load drivers\u2014this aids in refining the detection process to ensure only potentially malicious activities are flagged.\n\nBy adopting such an approach, entities can effectively monitor and detect unauthorized or suspicious uses of the 'SeLoadDriverPrivilege', flagging attempts to load malicious kernel drivers while reducing false positives by considering legitimate software and authorized user activities. Establishing and maintaining a whitelist is crucial to differentiate between harmful and benign use of this privilege, thus enhancing the security posture against threats attempting to exploit kernel mode operations for malicious purposes."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Excel called wmic to finally proxy execute regsvr32 with the payload.\nAn attacker wanted to break suspicious parent-child chain (Office app spawns LOLBin).\nBut we have command-line in the event which allow us to \"restore\" this suspicious parent-child chain and detect it.\nMonitor process creation with \"wmic process call create\" and LOLBins in command-line with parent Office application processes.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to monitor process creation with \"wmic process call create\" and LOLBins in command-line with parent Office application processes, you should: Focus on Windows process creation logs to identify potentially malicious behavior. Specifically, look for the execution of commonly abused legitimate Windows utilities, known as Living Off the Land Binaries and Scripts (LOLBins). Examples of such binaries include 'regsvr32', 'rundll32', 'msiexec', 'mshta', and 'verclsid'. Additionally, the use of 'wbem\\WMIC.exe' or command lines that contain 'wmic ' should raise suspicion. Another critical detection vector is the spawning of these processes by parent processes associated with Microsoft Office applications, such as Word, Excel, or PowerPoint, which is a technique attackers may use to disguise malicious activities. Detection should cover command lines that specifically contain the keywords 'process', 'create', and 'call' together, which are indicative of an attempt to execute commands or payloads in a manner designed to evade simple parent-child process relationship checks. It is crucial to investigate these signs due to their high potential for being related to malicious activities, even though there could be legitimate uses that could lead to false positives.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    #useful_information: add more LOLBins to the rules logic of your choice.\n    selection1:\n        CommandLine|contains:\n            - 'regsvr32'\n            - 'rundll32'\n            - 'msiexec'\n            - 'mshta'\n            - 'verclsid'\n    selection2:\n        - Image|endswith: '\\wbem\\WMIC.exe'\n        - CommandLine|contains: 'wmic '\n    selection3:\n        ParentImage|endswith:\n            - '\\winword.exe'\n            - '\\excel.exe'\n            - '\\powerpnt.exe'\n    selection4:\n        CommandLine|contains|all:\n            - 'process'\n            - 'create'\n            - 'call'\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    #useful_information: add more LOLBins to the rules logic of your choice.\n    selection1:\n        CommandLine|contains:\n            - 'regsvr32'\n            - 'rundll32'\n            - 'msiexec'\n            - 'mshta'\n            - 'verclsid'\n    selection2:\n        - Image|endswith: '\\wbem\\WMIC.exe'\n        - CommandLine|contains: 'wmic '\n    selection3:\n        ParentImage|endswith:\n            - '\\winword.exe'\n            - '\\excel.exe'\n            - '\\powerpnt.exe'\n    selection4:\n        CommandLine|contains|all:\n            - 'process'\n            - 'create'\n            - 'call'\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Excel called wmic to finally proxy execute regsvr32 with the payload.\nAn attacker wanted to break suspicious parent-child chain (Office app spawns LOLBin).\nBut we have command-line in the event which allow us to \"restore\" this suspicious parent-child chain and detect it.\nMonitor process creation with \"wmic process call create\" and LOLBins in command-line with parent Office application processes.\n",
      "answer": "In order to monitor process creation with \"wmic process call create\" and LOLBins in command-line with parent Office application processes, you should: Focus on Windows process creation logs to identify potentially malicious behavior. Specifically, look for the execution of commonly abused legitimate Windows utilities, known as Living Off the Land Binaries and Scripts (LOLBins). Examples of such binaries include 'regsvr32', 'rundll32', 'msiexec', 'mshta', and 'verclsid'. Additionally, the use of 'wbem\\WMIC.exe' or command lines that contain 'wmic ' should raise suspicion. Another critical detection vector is the spawning of these processes by parent processes associated with Microsoft Office applications, such as Word, Excel, or PowerPoint, which is a technique attackers may use to disguise malicious activities. Detection should cover command lines that specifically contain the keywords 'process', 'create', and 'call' together, which are indicative of an attempt to execute commands or payloads in a manner designed to evade simple parent-child process relationship checks. It is crucial to investigate these signs due to their high potential for being related to malicious activities, even though there could be legitimate uses that could lead to false positives."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image: C:\\WINDOWS\\system32\\wbem\\scrcons.exe\n        ParentImage: C:\\Windows\\System32\\svchost.exe\n    condition: selection\nfalsepositives:\n    - Legitimate event consumers\n    - Dell computers on some versions register an event consumer that is known to cause false positives when brightness is changed by the corresponding keyboard button\nlevel: medium\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect WMI script event consumers\n\nHere is how  the given sigma rule operates: In order to detect WMI script event consumers, you should: monitor the creation of processes in Windows systems, specifically targeting instances where the \"scrcons.exe\" executable, located in the C:\\WINDOWS\\system32\\wbem\\ directory, is initiated by the \"svchost.exe\" process from the C:\\Windows\\System32\\ directory. This scenario is indicative of WMI (Windows Management Instrumentation) script event consumers being used, potentially for malicious purposes. It's important to note, however, that there might be legitimate uses of this behavior, such as events generated by legitimate software or system functionalities (e.g., Dell computer systems adjusting brightness using a specific keyboard button might trigger such events and lead to false positives). The risk level associated with this detection is considered medium.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image: C:\\WINDOWS\\system32\\wbem\\scrcons.exe\n        ParentImage: C:\\Windows\\System32\\svchost.exe\n    condition: selection\nfalsepositives:\n    - Legitimate event consumers\n    - Dell computers on some versions register an event consumer that is known to cause false positives when brightness is changed by the corresponding keyboard button\nlevel: medium\n",
      "question": "WMI script event consumers",
      "answer": "In order to detect WMI script event consumers, you should: monitor the creation of processes in Windows systems, specifically targeting instances where the \"scrcons.exe\" executable, located in the C:\\WINDOWS\\system32\\wbem\\ directory, is initiated by the \"svchost.exe\" process from the C:\\Windows\\System32\\ directory. This scenario is indicative of WMI (Windows Management Instrumentation) script event consumers being used, potentially for malicious purposes. It's important to note, however, that there might be legitimate uses of this behavior, such as events generated by legitimate software or system functionalities (e.g., Dell computer systems adjusting brightness using a specific keyboard button might trigger such events and lead to false positives). The risk level associated with this detection is considered medium."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting modification of an EC2 snapshot's permissions to enable access from another account.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the modification of an EC2 snapshot's permissions to enable access from another account, you should: Monitor AWS CloudTrail logs for events where the source is EC2 (`ec2.amazonaws.com`) and the event name is `ModifySnapshotAttribute`. This activity might indicate that an EC2 snapshot's permissions are being changed to allow access from an external account, which can be a sign of unauthorized access or data exfiltration. Be aware that there can be legitimate reasons for altering a snapshot's permissions, such as granting access to a snapshot for collaboration purposes or transferring resources between accounts. Therefore, it's important to examine these events in the context of known and expected administrative activities to differentiate between benign and malicious intent. The severity level for this activity is considered medium, emphasizing the need for a balanced approach to monitoring and response.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: aws\n    service: cloudtrail\ndetection:\n    selection_source:\n        eventSource: ec2.amazonaws.com\n        eventName: ModifySnapshotAttribute\n    condition: selection_source\nfalsepositives:\n    - Valid change to a snapshot's permissions\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: aws\n    service: cloudtrail\ndetection:\n    selection_source:\n        eventSource: ec2.amazonaws.com\n        eventName: ModifySnapshotAttribute\n    condition: selection_source\nfalsepositives:\n    - Valid change to a snapshot's permissions\nlevel: medium\n",
      "question": "modification of an EC2 snapshot's permissions to enable access from another account",
      "answer": "In order to detect the modification of an EC2 snapshot's permissions to enable access from another account, you should: Monitor AWS CloudTrail logs for events where the source is EC2 (`ec2.amazonaws.com`) and the event name is `ModifySnapshotAttribute`. This activity might indicate that an EC2 snapshot's permissions are being changed to allow access from an external account, which can be a sign of unauthorized access or data exfiltration. Be aware that there can be legitimate reasons for altering a snapshot's permissions, such as granting access to a snapshot for collaboration purposes or transferring resources between accounts. Therefore, it's important to examine these events in the context of known and expected administrative activities to differentiate between benign and malicious intent. The severity level for this activity is considered medium, emphasizing the need for a balanced approach to monitoring and response."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    product: azure\n    service: activitylogs\ndetection:\n    selection:\n        operationName|startswith: \n            - 'MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/BATCH'\n            - 'MICROSOFT.CONTAINERSERVICE/MANAGEDCLUSTERS/BATCH'\n        operationName|endswith:\n            - '/CRONJOBS/WRITE'\n            - '/JOBS/WRITE'\n    condition: selection\nfalsepositives:\n    - Azure Kubernetes CronJob/Job may be done by a system administrator.\n    - If known behavior is causing false positives, it can be exempted from the rule.\nlevel: medium\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect Azure Kubernetes CronJob runs in Azure Cloud. Kubernetes Job is a controller that creates one or more pods and ensures that a specified number of them successfully terminate.\nKubernetes Job can be used to run containers that perform finite tasks for batch jobs. Kubernetes CronJob is used to schedule Jobs.\nAn Adversary may use Kubernetes CronJob for scheduling execution of malicious code that would run as a container in the cluster.\n\n\nHere is how  the given sigma rule operates: In order to identify when a Azure Kubernetes CronJob runs in Azure Cloud. Kubernetes Job is a controller that creates one or more pods and ensures that a specified number of them successfully terminate. Kubernetes Job can be used to run containers that perform finite tasks for batch jobs. Kubernetes CronJob is used to schedule Jobs. An Adversary may use Kubernetes CronJob for scheduling execution of malicious code that would run as a container in the cluster, you should: Monitor Azure activity logs for specific operation names that indicate interaction with Kubernetes connected clusters and managed clusters, particularly those operation names that start with 'MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/BATCH' or 'MICROSOFT.CONTAINERSERVICE/MANAGEDCLUSTERS/BATCH' and end with '/CRONJOBS/WRITE' or '/JOBS/WRITE'. These logs are indicative of activities related to the creation or modification of Kubernetes Jobs and CronJobs, which can be used for legitimate batch processing tasks but might also be utilized by adversaries for malicious purposes. It is essential to consider that some detected activities may be legitimate administrative actions. Hence, known benign behaviors may need to be filtered out to reduce false positives. This approach leverages Azure's logging capabilities to identify potential misuse of Kubernetes CronJobs and Jobs, ensuring that only those activities that deviate from expected patterns are flagged for further investigation. The associated tactics and techniques for this kind of monitoring include Execution and Persistence, as managing and scheduling tasks like CronJobs and Jobs can be abused by attackers to execute malicious code or maintain their presence within a cluster.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: azure\n    service: activitylogs\ndetection:\n    selection:\n        operationName|startswith: \n            - 'MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/BATCH'\n            - 'MICROSOFT.CONTAINERSERVICE/MANAGEDCLUSTERS/BATCH'\n        operationName|endswith:\n            - '/CRONJOBS/WRITE'\n            - '/JOBS/WRITE'\n    condition: selection\nfalsepositives:\n    - Azure Kubernetes CronJob/Job may be done by a system administrator.\n    - If known behavior is causing false positives, it can be exempted from the rule.\nlevel: medium\n",
      "question": "Azure Kubernetes CronJob runs in Azure Cloud. Kubernetes Job is a controller that creates one or more pods and ensures that a specified number of them successfully terminate.\nKubernetes Job can be used to run containers that perform finite tasks for batch jobs. Kubernetes CronJob is used to schedule Jobs.\nAn Adversary may use Kubernetes CronJob for scheduling execution of malicious code that would run as a container in the cluster.\n",
      "answer": "In order to identify when a Azure Kubernetes CronJob runs in Azure Cloud. Kubernetes Job is a controller that creates one or more pods and ensures that a specified number of them successfully terminate. Kubernetes Job can be used to run containers that perform finite tasks for batch jobs. Kubernetes CronJob is used to schedule Jobs. An Adversary may use Kubernetes CronJob for scheduling execution of malicious code that would run as a container in the cluster, you should: Monitor Azure activity logs for specific operation names that indicate interaction with Kubernetes connected clusters and managed clusters, particularly those operation names that start with 'MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/BATCH' or 'MICROSOFT.CONTAINERSERVICE/MANAGEDCLUSTERS/BATCH' and end with '/CRONJOBS/WRITE' or '/JOBS/WRITE'. These logs are indicative of activities related to the creation or modification of Kubernetes Jobs and CronJobs, which can be used for legitimate batch processing tasks but might also be utilized by adversaries for malicious purposes. It is essential to consider that some detected activities may be legitimate administrative actions. Hence, known benign behaviors may need to be filtered out to reduce false positives. This approach leverages Azure's logging capabilities to identify potential misuse of Kubernetes CronJobs and Jobs, ensuring that only those activities that deviate from expected patterns are flagged for further investigation. The associated tactics and techniques for this kind of monitoring include Execution and Persistence, as managing and scheduling tasks like CronJobs and Jobs can be abused by attackers to execute malicious code or maintain their presence within a cluster."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting actions taken by Windows Defender malware detection engines.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect all actions taken by Windows Defender malware detection engines, you should monitor Windows Defender (WinDefend) logs for specific Event IDs that indicate malware or potentially unwanted software has been found or actioned upon. Specifically, keep an eye on Event IDs 1006, which signals that the antimalware engine found malware or potentially unwanted software; 1116, where the antimalware platform detected malware or potentially unwanted software; 1015, indicating the antimalware platform detected suspicious behavior; and 1117, where the antimalware platform performed an action to protect your system against malware or potentially unwanted software. Due to the nature of these detections and actions, false positives are unlikely, marking the critical importance of flagging these events when they appear in logs.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: windefend\ndetection:\n    selection:\n        EventID:\n            - 1006 # The antimalware engine found malware or other potentially unwanted software.\n            - 1116 # The antimalware platform detected malware or other potentially unwanted software.\n            - 1015 # The antimalware platform detected suspicious behavior.\n            - 1117 # he antimalware platform performed an action to protect your system from malware or other potentially unwanted software.\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: windefend\ndetection:\n    selection:\n        EventID:\n            - 1006 # The antimalware engine found malware or other potentially unwanted software.\n            - 1116 # The antimalware platform detected malware or other potentially unwanted software.\n            - 1015 # The antimalware platform detected suspicious behavior.\n            - 1117 # he antimalware platform performed an action to protect your system from malware or other potentially unwanted software.\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "actions taken by Windows Defender malware detection engines",
      "answer": "In order to detect all actions taken by Windows Defender malware detection engines, you should monitor Windows Defender (WinDefend) logs for specific Event IDs that indicate malware or potentially unwanted software has been found or actioned upon. Specifically, keep an eye on Event IDs 1006, which signals that the antimalware engine found malware or potentially unwanted software; 1116, where the antimalware platform detected malware or potentially unwanted software; 1015, indicating the antimalware platform detected suspicious behavior; and 1117, where the antimalware platform performed an action to protect your system against malware or potentially unwanted software. Due to the nature of these detections and actions, false positives are unlikely, marking the critical importance of flagging these events when they appear in logs."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: webserver\ndetection:\n    selection1:\n        cs-uri-query|contains|all:\n            - '?dwn='\n            - '&fn='\n            - '.html?'\n    selection2:\n        cs-uri-query|contains|all:\n            - '&dwn='\n            - '?fn='\n            - '.html?'\n    condition: 1 of selection*\nfields:\n    - client_ip\n    - response\nfalsepositives:\n    - Unknown\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect access to DEWMODE webshell as described in FIREEYE report\n\nHere is how  the given sigma rule operates: In order to detect access to DEWMODE webshell as described in FIREEYE report, you should: Monitor your webserver logs for queries that match specific patterns indicating an attempt to interact with the DEWMODE webshell. These patterns are identified by searching for specific parameters in the query string of the URL. Two primary patterns are defined for detection:\n\n1. The query must contain all of the following elements: '?dwn=', '&fn=', and '.html?'.\n2. Alternatively, the query must include '&dwn=', '?fn=', and '.html?'.\n\nIf any of these patterns are detected in the query string of a URL request, it suggests that the DEWMODE webshell is being accessed or attempted to be accessed. It is essential to capture and analyze the client IP address and the server's response for further investigation because of the high severity level associated with this detection. Be aware that while this rule is crucial for identifying potential webshell access, there may be unknown false positives, hence additional verification might be required.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: webserver\ndetection:\n    selection1:\n        cs-uri-query|contains|all:\n            - '?dwn='\n            - '&fn='\n            - '.html?'\n    selection2:\n        cs-uri-query|contains|all:\n            - '&dwn='\n            - '?fn='\n            - '.html?'\n    condition: 1 of selection*\nfields:\n    - client_ip\n    - response\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "access to DEWMODE webshell as described in FIREEYE report",
      "answer": "In order to detect access to DEWMODE webshell as described in FIREEYE report, you should: Monitor your webserver logs for queries that match specific patterns indicating an attempt to interact with the DEWMODE webshell. These patterns are identified by searching for specific parameters in the query string of the URL. Two primary patterns are defined for detection:\n\n1. The query must contain all of the following elements: '?dwn=', '&fn=', and '.html?'.\n2. Alternatively, the query must include '&dwn=', '?fn=', and '.html?'.\n\nIf any of these patterns are detected in the query string of a URL request, it suggests that the DEWMODE webshell is being accessed or attempted to be accessed. It is essential to capture and analyze the client IP address and the server's response for further investigation because of the high severity level associated with this detection. Be aware that while this rule is crucial for identifying potential webshell access, there may be unknown false positives, hence additional verification might be required."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        ParentImage|endswith: 'ScreenConnect.ClientService.exe'\n        Image|endswith:\n            - '\\cmd.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n    condition: selection\nfalsepositives:\n    - Case in which administrators are allowed to use ScreenConnect's Backstage mode\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect suspicious sub processes started by the ScreenConnect client service, which indicates the use of the so-called Backstage mode\n\nHere is how  the given sigma rule operates: In order to detect suspicious sub-processes started by the ScreenConnect client service, which indicates the use of the so-called Backstage mode, you should: focus on monitoring process creation events within Windows operating systems. Specifically, keep an eye on any instances where `ScreenConnect.ClientService.exe` acts as a parent process for the spawning of command-line interpreters such as `cmd.exe`, `powershell.exe`, or `pwsh.exe`. This unusual behavior might suggest that the ScreenConnect's Backstage mode is being exploited, possibly in a malicious manner. Be aware, however, that there can be legitimate cases where administrators are utilizing Backstage mode for rightful purposes. Given the high risk associated with this activity when it is not legitimate, it is important to scrutinize such events closely.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        ParentImage|endswith: 'ScreenConnect.ClientService.exe'\n        Image|endswith:\n            - '\\cmd.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n    condition: selection\nfalsepositives:\n    - Case in which administrators are allowed to use ScreenConnect's Backstage mode\nlevel: high\n",
      "question": "suspicious sub processes started by the ScreenConnect client service, which indicates the use of the so-called Backstage mode",
      "answer": "In order to detect suspicious sub-processes started by the ScreenConnect client service, which indicates the use of the so-called Backstage mode, you should: focus on monitoring process creation events within Windows operating systems. Specifically, keep an eye on any instances where `ScreenConnect.ClientService.exe` acts as a parent process for the spawning of command-line interpreters such as `cmd.exe`, `powershell.exe`, or `pwsh.exe`. This unusual behavior might suggest that the ScreenConnect's Backstage mode is being exploited, possibly in a malicious manner. Be aware, however, that there can be legitimate cases where administrators are utilizing Backstage mode for rightful purposes. Given the high risk associated with this activity when it is not legitimate, it is important to scrutinize such events closely."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of AdvancedRun utility.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the execution of AdvancedRun utility, you should: Focus on monitoring Windows process creation events. Look for occurrences where the original file name is 'AdvancedRun.exe'. Then, within the command line arguments, ensure the presence of both '/EXEFilename' and '/Run'. Additionally, verify if '/WindowState 0', '/RunAs', and '/CommandLine' are all part of the command line parameters simultaneously. Monitoring for these specific parameters and the utility's execution can help in identifying potential misuse or malicious activities involving the AdvancedRun tool. This method is crucial for detecting unusual or unauthorized usage of the utility, which could be indicative of an attempt to execute commands or applications in a manner that hides or modifies the usual behavior, increasing the security posture by identifying such actions.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        - OriginalFileName: 'AdvancedRun.exe'\n        - CommandLine|contains|all:\n            - ' /EXEFilename '\n            - ' /Run'\n        - CommandLine|contains|all:\n            - ' /WindowState 0'\n            - ' /RunAs '\n            - ' /CommandLine '\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        - OriginalFileName: 'AdvancedRun.exe'\n        - CommandLine|contains|all:\n            - ' /EXEFilename '\n            - ' /Run'\n        - CommandLine|contains|all:\n            - ' /WindowState 0'\n            - ' /RunAs '\n            - ' /CommandLine '\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "execution of AdvancedRun utility",
      "answer": "In order to detect the execution of AdvancedRun utility, you should: Focus on monitoring Windows process creation events. Look for occurrences where the original file name is 'AdvancedRun.exe'. Then, within the command line arguments, ensure the presence of both '/EXEFilename' and '/Run'. Additionally, verify if '/WindowState 0', '/RunAs', and '/CommandLine' are all part of the command line parameters simultaneously. Monitoring for these specific parameters and the utility's execution can help in identifying potential misuse or malicious activities involving the AdvancedRun tool. This method is crucial for detecting unusual or unauthorized usage of the utility, which could be indicative of an attempt to execute commands or applications in a manner that hides or modifies the usual behavior, increasing the security posture by identifying such actions."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    legitimate_process_path:\n        Image|contains:\n            - ':\\Program Files(x86)\\'\n            - ':\\Program Files\\'\n    legitimate_executable:\n        sha1: 'e570585edc69f9074cb5e8a790708336bd45ca0f'\n    condition: legitimate_executable and not legitimate_process_path\nfalsepositives:\n    - Unknown\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect artefacts associated with activity group GALLIUM - Microsoft Threat Intelligence Center indicators released in December 2019.\n\nHere is how  the given sigma rule operates: In order to detect artefacts associated with activity group GALLIUM - Microsoft Threat Intelligence Center indicators released in December 2019, you should: Monitor Windows process creation logs for occurrences where the executable's SHA1 hash matches 'e570585edc69f9074cb5e8a790708336bd45ca0f'. However, ensure that this detection is only considered relevant if the process is not initiated from the legitimate paths ':\\Program Files(x86)\\' or ':\\Program Files\\'. This approach aims to identify malicious activities where attackers might disguise their malware by using a known legitimate executable's SHA1 but execute it from an unusual location. Such occurrences could be critical in identifying the presence of GALLIUM activity in your environment. Note that since no false positives are known at the moment, the alert level remains high, urging for immediate investigation upon detection.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    legitimate_process_path:\n        Image|contains:\n            - ':\\Program Files(x86)\\'\n            - ':\\Program Files\\'\n    legitimate_executable:\n        sha1: 'e570585edc69f9074cb5e8a790708336bd45ca0f'\n    condition: legitimate_executable and not legitimate_process_path\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "artefacts associated with activity group GALLIUM - Microsoft Threat Intelligence Center indicators released in December 2019.",
      "answer": "In order to detect artefacts associated with activity group GALLIUM - Microsoft Threat Intelligence Center indicators released in December 2019, you should: Monitor Windows process creation logs for occurrences where the executable's SHA1 hash matches 'e570585edc69f9074cb5e8a790708336bd45ca0f'. However, ensure that this detection is only considered relevant if the process is not initiated from the legitimate paths ':\\Program Files(x86)\\' or ':\\Program Files\\'. This approach aims to identify malicious activities where attackers might disguise their malware by using a known legitimate executable's SHA1 but execute it from an unusual location. Such occurrences could be critical in identifying the presence of GALLIUM activity in your environment. Note that since no false positives are known at the moment, the alert level remains high, urging for immediate investigation upon detection."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Addition of domains is seldom and should be verified for legitimacy..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to identify and verify the legitimacy of any additions to domain structures, which is an event that occurs seldom, you should focus on monitoring Windows security logs. Specifically, look out for events with the EventID 4706. This EventID is indicative of a new domain being added, which is a critical action that needs verification to ensure it's not part of a malicious activity. It's important to be aware that there could be legitimate reasons for extending the domain structure, and these instances are considered to be false positives in the context of this monitoring strategy. The severity of this kind of activity is deemed medium, indicating that while not all domain additions are malicious, they are significant enough to warrant careful scrutiny.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 4706\n    condition: selection\nfalsepositives:\n    - Legitimate extension of domain structure\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 4706\n    condition: selection\nfalsepositives:\n    - Legitimate extension of domain structure\nlevel: medium\n",
      "question": "Addition of domains is seldom and should be verified for legitimacy.",
      "answer": "In order to identify and verify the legitimacy of any additions to domain structures, which is an event that occurs seldom, you should focus on monitoring Windows security logs. Specifically, look out for events with the EventID 4706. This EventID is indicative of a new domain being added, which is a critical action that needs verification to ensure it's not part of a malicious activity. It's important to be aware that there could be legitimate reasons for extending the domain structure, and these instances are considered to be false positives in the context of this monitoring strategy. The severity of this kind of activity is deemed medium, indicating that while not all domain additions are malicious, they are significant enough to warrant careful scrutiny."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting creation of an executable with a system process name in folders other than the system ones (System32, SysWOW64...etc)..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the creation of an executable with a system process name in folders other than the system ones (System32, SysWOW64, etc.), you should monitor file events on Windows systems. Specifically, look for occurrences where the targeted file name ends with names commonly associated with critical Windows processes, such as 'AtBroker.exe', 'audiodg.exe', 'cmd.exe', 'powershell.exe', and many others, suggesting that an executable is impersonating a system process.\n\nPay special attention to the creation of these executables in locations that do not start with standard system paths like 'C:\\Windows\\System32\\', 'C:\\Windows\\SysWOW64\\', 'C:\\Windows\\WinSxS\\', 'C:\\Windows\\SoftwareDistribution\\', and '\\SystemRoot\\System32\\'. Moreover, certain conditions like files starting with 'C:\\$WINDOWS.~BT\\' and specific image paths such as 'C:\\$WINDOWS.~BT\\Sources\\SetupHost.exe' or 'C:\\Windows\\system32\\wbengine.exe' associated with 'RuntimeBroker.exe' should raise flags. Additional scrutiny is advised for files created under 'C:\\Windows\\SoftwareDistribution\\Download\\' by 'svchost.exe', and any activity involving 'C:\\Program Files\\WindowsApps\\' as well as operations performed by 'wuauclt.exe', 'explorer.exe', and 'msiexec.exe' in unexpected directories.\n\nExclude from your alerts any instance where these files are part of legitimate actions, such as system processes copied for testing outside their default directories or third-party software naming their applications similarly to system processes. Due to the close match between these executable names and vital system components, activities flagged by this monitoring approach are typically treated with a high level of suspicion.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: file_event\n    product: windows\ndetection:\n    selection:\n        TargetFilename|endswith:\n            - '\\AtBroker.exe'\n            - '\\audiodg.exe'\n            - '\\backgroundTaskHost.exe'\n            - '\\bcdedit.exe'\n            - '\\bitsadmin.exe'\n            - '\\cmdl32.exe'\n            - '\\cmstp.exe'\n            - '\\conhost.exe'\n            - '\\csrss.exe'\n            - '\\dasHost.exe'\n            - '\\dfrgui.exe'\n            - '\\dllhost.exe'\n            - '\\dwm.exe'\n            - '\\eventcreate.exe'\n            - '\\eventvwr.exe'\n            - '\\explorer.exe'\n            - '\\extrac32.exe'\n            - '\\fontdrvhost.exe'\n            - '\\ipconfig.exe'\n            - '\\iscsicli.exe'\n            - '\\iscsicpl.exe'\n            - '\\logman.exe'\n            - '\\LogonUI.exe'\n            - '\\LsaIso.exe'\n            - '\\lsass.exe'\n            - '\\lsm.exe'\n            - '\\msiexec.exe'\n            - '\\msinfo32.exe'\n            - '\\mstsc.exe'\n            - '\\nbtstat.exe'\n            - '\\odbcconf.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\regini.exe'\n            - '\\regsvr32.exe'\n            - '\\rundll32.exe'\n            - '\\RuntimeBroker.exe'\n            - '\\schtasks.exe'\n            - '\\SearchFilterHost.exe'\n            - '\\SearchIndexer.exe'\n            - '\\SearchProtocolHost.exe'\n            - '\\SecurityHealthService.exe'\n            - '\\SecurityHealthSystray.exe'\n            - '\\services.exe'\n            - '\\ShellAppRuntime.exe'\n            - '\\sihost.exe'\n            - '\\smartscreen.exe'\n            - '\\smss.exe'\n            - '\\spoolsv.exe'\n            - '\\svchost.exe'\n            - '\\SystemSettingsBroker.exe'\n            - '\\taskhost.exe'\n            - '\\taskhostw.exe'\n            - '\\Taskmgr.exe'\n            - '\\TiWorker.exe'\n            - '\\vssadmin.exe'\n            - '\\w32tm.exe'\n            - '\\WerFault.exe'\n            - '\\WerFaultSecure.exe'\n            - '\\wermgr.exe'\n            - '\\wevtutil.exe'\n            - '\\wininit.exe'\n            - '\\winlogon.exe'\n            - '\\winrshost.exe'\n            - '\\WinRTNetMUAHostServer.exe'\n            - '\\wlanext.exe'\n            - '\\wlrmdr.exe'\n            - '\\WmiPrvSE.exe'\n            - '\\wslhost.exe'\n            - '\\WSReset.exe'\n            - '\\WUDFHost.exe'\n            - '\\WWAHost.exe'\n    filter1:\n        TargetFilename|startswith:\n            - 'C:\\Windows\\System32\\'\n            - 'C:\\Windows\\SysWOW64\\'\n            - 'C:\\Windows\\WinSxS\\'\n            - 'C:\\Windows\\SoftwareDistribution\\'\n            - '\\SystemRoot\\System32\\'\n        Image|endswith:\n            - '\\Windows\\System32\\dism.exe'\n            - '\\TiWorker.exe'\n    filter2:\n        TargetFilename|startswith: 'C:\\$WINDOWS.~BT\\'\n        Image: 'C:\\$WINDOWS.~BT\\Sources\\SetupHost.exe'\n    filter3:\n        TargetFilename|endswith: '\\RuntimeBroker.exe'\n        Image: 'C:\\Windows\\system32\\wbengine.exe'\n    filter4:\n        Image|endswith: ':\\Windows\\system32\\svchost.exe'\n        TargetFilename|startswith: 'C:\\Windows\\SoftwareDistribution\\Download\\'\n        TargetFilename|endswith:\n            - '\\spoolsv.exe'\n            - '\\bcdedit.exe'\n    filter5:\n        Image|endswith: ':\\Windows\\system32\\svchost.exe'\n        TargetFilename|startswith: 'C:Program Files\\WindowsApps\\'\n    filter6:\n        Image: C:\\Windows\\System32\\wuauclt.exe\n    filter7:\n        TargetFilename: 'C:\\Windows\\explorer.exe'\n    filter8:\n        # This filter handles system processes who are updated/installed using misexec.\n        Image: C:\\WINDOWS\\system32\\msiexec.exe\n        # Add more processes if you find them or simply filter msiexec on its own. If the list grows big\n        TargetFilename: C:\\Program Files\\PowerShell\\7\\pwsh.exe\n    filter_healtray:\n        TargetFilename|startswith: 'C:\\Windows\\System32\\SecurityHealth\\'\n        TargetFilename|endswith: '\\SecurityHealthSystray.exe'\n        Image|endswith: '\\SecurityHealthSetup.exe'\n    condition: selection and not 1 of filter*\nfields:\n    - Image\nfalsepositives:\n    - System processes copied outside their default folders for testing purposes\n    - Third party software naming their software with the same names as the processes mentioned here\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: file_event\n    product: windows\ndetection:\n    selection:\n        TargetFilename|endswith:\n            - '\\AtBroker.exe'\n            - '\\audiodg.exe'\n            - '\\backgroundTaskHost.exe'\n            - '\\bcdedit.exe'\n            - '\\bitsadmin.exe'\n            - '\\cmdl32.exe'\n            - '\\cmstp.exe'\n            - '\\conhost.exe'\n            - '\\csrss.exe'\n            - '\\dasHost.exe'\n            - '\\dfrgui.exe'\n            - '\\dllhost.exe'\n            - '\\dwm.exe'\n            - '\\eventcreate.exe'\n            - '\\eventvwr.exe'\n            - '\\explorer.exe'\n            - '\\extrac32.exe'\n            - '\\fontdrvhost.exe'\n            - '\\ipconfig.exe'\n            - '\\iscsicli.exe'\n            - '\\iscsicpl.exe'\n            - '\\logman.exe'\n            - '\\LogonUI.exe'\n            - '\\LsaIso.exe'\n            - '\\lsass.exe'\n            - '\\lsm.exe'\n            - '\\msiexec.exe'\n            - '\\msinfo32.exe'\n            - '\\mstsc.exe'\n            - '\\nbtstat.exe'\n            - '\\odbcconf.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\regini.exe'\n            - '\\regsvr32.exe'\n            - '\\rundll32.exe'\n            - '\\RuntimeBroker.exe'\n            - '\\schtasks.exe'\n            - '\\SearchFilterHost.exe'\n            - '\\SearchIndexer.exe'\n            - '\\SearchProtocolHost.exe'\n            - '\\SecurityHealthService.exe'\n            - '\\SecurityHealthSystray.exe'\n            - '\\services.exe'\n            - '\\ShellAppRuntime.exe'\n            - '\\sihost.exe'\n            - '\\smartscreen.exe'\n            - '\\smss.exe'\n            - '\\spoolsv.exe'\n            - '\\svchost.exe'\n            - '\\SystemSettingsBroker.exe'\n            - '\\taskhost.exe'\n            - '\\taskhostw.exe'\n            - '\\Taskmgr.exe'\n            - '\\TiWorker.exe'\n            - '\\vssadmin.exe'\n            - '\\w32tm.exe'\n            - '\\WerFault.exe'\n            - '\\WerFaultSecure.exe'\n            - '\\wermgr.exe'\n            - '\\wevtutil.exe'\n            - '\\wininit.exe'\n            - '\\winlogon.exe'\n            - '\\winrshost.exe'\n            - '\\WinRTNetMUAHostServer.exe'\n            - '\\wlanext.exe'\n            - '\\wlrmdr.exe'\n            - '\\WmiPrvSE.exe'\n            - '\\wslhost.exe'\n            - '\\WSReset.exe'\n            - '\\WUDFHost.exe'\n            - '\\WWAHost.exe'\n    filter1:\n        TargetFilename|startswith:\n            - 'C:\\Windows\\System32\\'\n            - 'C:\\Windows\\SysWOW64\\'\n            - 'C:\\Windows\\WinSxS\\'\n            - 'C:\\Windows\\SoftwareDistribution\\'\n            - '\\SystemRoot\\System32\\'\n        Image|endswith:\n            - '\\Windows\\System32\\dism.exe'\n            - '\\TiWorker.exe'\n    filter2:\n        TargetFilename|startswith: 'C:\\$WINDOWS.~BT\\'\n        Image: 'C:\\$WINDOWS.~BT\\Sources\\SetupHost.exe'\n    filter3:\n        TargetFilename|endswith: '\\RuntimeBroker.exe'\n        Image: 'C:\\Windows\\system32\\wbengine.exe'\n    filter4:\n        Image|endswith: ':\\Windows\\system32\\svchost.exe'\n        TargetFilename|startswith: 'C:\\Windows\\SoftwareDistribution\\Download\\'\n        TargetFilename|endswith:\n            - '\\spoolsv.exe'\n            - '\\bcdedit.exe'\n    filter5:\n        Image|endswith: ':\\Windows\\system32\\svchost.exe'\n        TargetFilename|startswith: 'C:Program Files\\WindowsApps\\'\n    filter6:\n        Image: C:\\Windows\\System32\\wuauclt.exe\n    filter7:\n        TargetFilename: 'C:\\Windows\\explorer.exe'\n    filter8:\n        # This filter handles system processes who are updated/installed using misexec.\n        Image: C:\\WINDOWS\\system32\\msiexec.exe\n        # Add more processes if you find them or simply filter msiexec on its own. If the list grows big\n        TargetFilename: C:\\Program Files\\PowerShell\\7\\pwsh.exe\n    filter_healtray:\n        TargetFilename|startswith: 'C:\\Windows\\System32\\SecurityHealth\\'\n        TargetFilename|endswith: '\\SecurityHealthSystray.exe'\n        Image|endswith: '\\SecurityHealthSetup.exe'\n    condition: selection and not 1 of filter*\nfields:\n    - Image\nfalsepositives:\n    - System processes copied outside their default folders for testing purposes\n    - Third party software naming their software with the same names as the processes mentioned here\nlevel: high\n",
      "question": "creation of an executable with a system process name in folders other than the system ones (System32, SysWOW64...etc).",
      "answer": "In order to detect the creation of an executable with a system process name in folders other than the system ones (System32, SysWOW64, etc.), you should monitor file events on Windows systems. Specifically, look for occurrences where the targeted file name ends with names commonly associated with critical Windows processes, such as 'AtBroker.exe', 'audiodg.exe', 'cmd.exe', 'powershell.exe', and many others, suggesting that an executable is impersonating a system process.\n\nPay special attention to the creation of these executables in locations that do not start with standard system paths like 'C:\\Windows\\System32\\', 'C:\\Windows\\SysWOW64\\', 'C:\\Windows\\WinSxS\\', 'C:\\Windows\\SoftwareDistribution\\', and '\\SystemRoot\\System32\\'. Moreover, certain conditions like files starting with 'C:\\$WINDOWS.~BT\\' and specific image paths such as 'C:\\$WINDOWS.~BT\\Sources\\SetupHost.exe' or 'C:\\Windows\\system32\\wbengine.exe' associated with 'RuntimeBroker.exe' should raise flags. Additional scrutiny is advised for files created under 'C:\\Windows\\SoftwareDistribution\\Download\\' by 'svchost.exe', and any activity involving 'C:\\Program Files\\WindowsApps\\' as well as operations performed by 'wuauclt.exe', 'explorer.exe', and 'msiexec.exe' in unexpected directories.\n\nExclude from your alerts any instance where these files are part of legitimate actions, such as system processes copied for testing outside their default directories or third-party software naming their applications similarly to system processes. Due to the close match between these executable names and vital system components, activities flagged by this monitoring approach are typically treated with a high level of suspicion."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    product: windows\n    service: smbclient-security\ndetection:\n    selection:\n        EventID: 31010\n        ShareName|endswith: '$'\n    timeframe: 1m\n    condition: selection | count() > 10\nfields:\n    - ShareName\nfalsepositives:\n    - Legitimate administrative activity\n    - Faulty scripts\nlevel: medium\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect repeated failed (outgoing) attempts to mount a hidden share\n\nHere is how  the given sigma rule operates: In order to detect repeated failed (outgoing) attempts to mount a hidden share, you should monitor security events from the Windows SMB client service. Focus on events with the EventID 31010, which signal such attempts. Specifically, look for attempts to access shares that are named with a trailing dollar sign ('$'), indicating they are hidden shares. If you observe more than 10 of these attempts within a 1-minute timeframe, it's indicative of a suspicious activity that may represent an adversary trying to gain access to sensitive areas of the network. Capture and review the ShareName involved in these attempts to understand the target of these access attempts better.\n\nHowever, keep in mind that not all activities caught by this monitoring might be malicious. Legitimate administrative activities often necessitate accessing hidden shares, and sometimes scripts designed to automate tasks might mistakenly attempt to access these shares repeatedly, leading to false positives. The severity level for alerts generated based on this monitoring is considered medium, reflecting the balance between the potential for malicious activity and the likelihood of legitimate explanations for the detected behavior. \n\nThis detection strategy aligns with mitigating tactics and techniques that include, but are not limited to, Initial Access and Execution, as attackers might be attempting to use compromised credentials to access hidden network shares during their campaign.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: smbclient-security\ndetection:\n    selection:\n        EventID: 31010\n        ShareName|endswith: '$'\n    timeframe: 1m\n    condition: selection | count() > 10\nfields:\n    - ShareName\nfalsepositives:\n    - Legitimate administrative activity\n    - Faulty scripts\nlevel: medium\n",
      "question": "repeated failed (outgoing) attempts to mount a hidden share",
      "answer": "In order to detect repeated failed (outgoing) attempts to mount a hidden share, you should monitor security events from the Windows SMB client service. Focus on events with the EventID 31010, which signal such attempts. Specifically, look for attempts to access shares that are named with a trailing dollar sign ('$'), indicating they are hidden shares. If you observe more than 10 of these attempts within a 1-minute timeframe, it's indicative of a suspicious activity that may represent an adversary trying to gain access to sensitive areas of the network. Capture and review the ShareName involved in these attempts to understand the target of these access attempts better.\n\nHowever, keep in mind that not all activities caught by this monitoring might be malicious. Legitimate administrative activities often necessitate accessing hidden shares, and sometimes scripts designed to automate tasks might mistakenly attempt to access these shares repeatedly, leading to false positives. The severity level for alerts generated based on this monitoring is considered medium, reflecting the balance between the potential for malicious activity and the likelihood of legitimate explanations for the detected behavior. \n\nThis detection strategy aligns with mitigating tactics and techniques that include, but are not limited to, Initial Access and Execution, as attackers might be attempting to use compromised credentials to access hidden network shares during their campaign."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting deletion of Windows Volume Shadow Copies with PowerShell code and Get-WMIObject. This technique is used by numerous ransomware families such as Sodinokibi/REvil.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect deletion of Windows Volume Shadow Copies with PowerShell code and Get-WMIObject, a technique used by numerous ransomware families such as Sodinokibi/REvil, you should: monitor PowerShell scripts on Windows systems for specific command and method invocations. Pay special attention to scripts that contain the commands 'Get-WmiObject', 'gwmi', 'Get-CimInstance', 'gcim' which are used to interact with Windows Management Instrumentation (WMI) objects, and 'Win32_Shadowcopy' indicating interaction with Windows Volume Shadow Copies. Also, be alert for the presence of '.Delete()', 'Remove-WmiObject', 'rwmi', 'Remove-CimInstance', or 'rcim' within the scripts, as these are indicative of attempts to delete objects, including Shadow Copies. Implementing monitoring based on these script contents can help in early detection of ransomware activity that attempts this specific kind of attack.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: ps_script\n    product: windows\ndetection:\n    selection_get:\n        ScriptBlockText|contains:\n            - 'Get-WmiObject'\n            - 'gwmi'\n            - 'Get-CimInstance'\n            - 'gcim'\n    selection_shadowcopy:\n        ScriptBlockText|contains: 'Win32_Shadowcopy'\n    selection_delete:\n        ScriptBlockText|contains:\n            - '.Delete()'\n            - 'Remove-WmiObject'\n            - 'rwmi'\n            - 'Remove-CimInstance'\n            - 'rcim'\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: ps_script\n    product: windows\ndetection:\n    selection_get:\n        ScriptBlockText|contains:\n            - 'Get-WmiObject'\n            - 'gwmi'\n            - 'Get-CimInstance'\n            - 'gcim'\n    selection_shadowcopy:\n        ScriptBlockText|contains: 'Win32_Shadowcopy'\n    selection_delete:\n        ScriptBlockText|contains:\n            - '.Delete()'\n            - 'Remove-WmiObject'\n            - 'rwmi'\n            - 'Remove-CimInstance'\n            - 'rcim'\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "deletion of Windows Volume Shadow Copies with PowerShell code and Get-WMIObject. This technique is used by numerous ransomware families such as Sodinokibi/REvil",
      "answer": "In order to detect deletion of Windows Volume Shadow Copies with PowerShell code and Get-WMIObject, a technique used by numerous ransomware families such as Sodinokibi/REvil, you should: monitor PowerShell scripts on Windows systems for specific command and method invocations. Pay special attention to scripts that contain the commands 'Get-WmiObject', 'gwmi', 'Get-CimInstance', 'gcim' which are used to interact with Windows Management Instrumentation (WMI) objects, and 'Win32_Shadowcopy' indicating interaction with Windows Volume Shadow Copies. Also, be alert for the presence of '.Delete()', 'Remove-WmiObject', 'rwmi', 'Remove-CimInstance', or 'rcim' within the scripts, as these are indicative of attempts to delete objects, including Shadow Copies. Implementing monitoring based on these script contents can help in early detection of ransomware activity that attempts this specific kind of attack."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious sysprep process start with AppData folder as target (as used by Trojan Syndicasec in Thrip report by Symantec).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious sysprep process start with AppData folder as target (as used by Trojan Syndicasec in Thrip report by Symantec), you should monitor the creation of processes on Windows systems, paying particular attention to the execution of the sysprep.exe application. Specifically, look for instances where sysprep.exe is launched and its command line arguments include references to the '\\AppData\\' directory. This behavior can be indicative of suspicious activity, such as attempts to leverage the sysprep process for malicious purposes, matching tactics and techniques associated with malicious software like the Trojan Syndicasec. It's important to note that while monitoring for this activity, one might encounter legitimate administrative uses of sysprep.exe that also interact with the AppData folder, hence, some alerts might not represent actual threats. The level of concern for such detections is considered medium, reflecting a balance between the potential for genuine threat and the possibility of legitimate usage.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\sysprep.exe'\n        CommandLine|contains: '\\AppData\\'\n    condition: selection\nfalsepositives:\n    - False positives depend on scripts and administrative tools used in the monitored environment\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\sysprep.exe'\n        CommandLine|contains: '\\AppData\\'\n    condition: selection\nfalsepositives:\n    - False positives depend on scripts and administrative tools used in the monitored environment\nlevel: medium\n",
      "question": "suspicious sysprep process start with AppData folder as target (as used by Trojan Syndicasec in Thrip report by Symantec)",
      "answer": "In order to detect suspicious sysprep process start with AppData folder as target (as used by Trojan Syndicasec in Thrip report by Symantec), you should monitor the creation of processes on Windows systems, paying particular attention to the execution of the sysprep.exe application. Specifically, look for instances where sysprep.exe is launched and its command line arguments include references to the '\\AppData\\' directory. This behavior can be indicative of suspicious activity, such as attempts to leverage the sysprep process for malicious purposes, matching tactics and techniques associated with malicious software like the Trojan Syndicasec. It's important to note that while monitoring for this activity, one might encounter legitimate administrative uses of sysprep.exe that also interact with the AppData folder, hence, some alerts might not represent actual threats. The level of concern for such detections is considered medium, reflecting a balance between the potential for genuine threat and the possibility of legitimate usage."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting remote RPC calls to get event log information via EVEN or EVEN6.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect remote RPC calls to get event log information via EVEN or EVEN6, you should monitor your system's RPC firewall application logs for specific events. Here is how you can effectively carry out this detection process:\n\nYour environment must be set up with an RPC Firewall, a security application designed to regulate and monitor Remote Procedure Call (RPC) traffic. This setup should be configured to audit and block certain RPC activities, targeting processes identified by unique UUIDs: 82273fdc-e32a-18c3-3f78-827929dc23ea and f6beaff7-1e19-4fbb-9f8f-b89e2018337c. This specific configuration serves as a preliminary step to focus on potentially malicious RPC communication attempts.\n\nWhen monitoring the application logs generated by the RPC Firewall, look out for log entries categorized under the \"RPCFW\" event log. The entries of particular interest have an EventID of 3, which indicates an event tied to remote RPC calls attempting to access event log information. This is a critical marker for identifying suspicious activities.\n\nThe detection further narrows down to log entries involving the previously mentioned UUIDs associated with the RPC interfaces. These UUIDs are significant as they tie back to specific operations or processes that could be targeted by attackers seeking to retrieve event log data through remote RPC calls.\n\nBe aware that in some cases, these detections might flag legitimate remote administrative tasks involving Windows Events as potential threats. These are considered false positives and should be carefully validated to ensure that legitimate administrative activities are not disrupted.\n\nGiven this detection strategy's high importance level, it is crucial to actively monitor for these indicators and investigate any triggers to ensure that your system is protected against unauthorized attempts to access event log information via remote RPC calls. This approach is aligned with mitigating tactics and techniques related to unauthorized access and data extraction from systems.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: rpc_firewall\n    category: application\n    definition: 'Requirements: install and apply the RPC Firewall to all processes with \"audit:true action:block uuid:82273fdc-e32a-18c3-3f78-827929dc23ea and uuid:f6beaff7-1e19-4fbb-9f8f-b89e2018337c\"'\ndetection:\n    selection:\n        EventLog: RPCFW\n        EventID: 3\n        InterfaceUuid:\n            - 82273fdc-e32a-18c3-3f78-827929dc23ea\n            - f6beaff7-1e19-4fbb-9f8f-b89e2018337c\n    condition: selection\nfalsepositives:\n    - Remote administrative tasks on Windows Events\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: rpc_firewall\n    category: application\n    definition: 'Requirements: install and apply the RPC Firewall to all processes with \"audit:true action:block uuid:82273fdc-e32a-18c3-3f78-827929dc23ea and uuid:f6beaff7-1e19-4fbb-9f8f-b89e2018337c\"'\ndetection:\n    selection:\n        EventLog: RPCFW\n        EventID: 3\n        InterfaceUuid:\n            - 82273fdc-e32a-18c3-3f78-827929dc23ea\n            - f6beaff7-1e19-4fbb-9f8f-b89e2018337c\n    condition: selection\nfalsepositives:\n    - Remote administrative tasks on Windows Events\nlevel: high\n",
      "question": "remote RPC calls to get event log information via EVEN or EVEN6",
      "answer": "In order to detect remote RPC calls to get event log information via EVEN or EVEN6, you should monitor your system's RPC firewall application logs for specific events. Here is how you can effectively carry out this detection process:\n\nYour environment must be set up with an RPC Firewall, a security application designed to regulate and monitor Remote Procedure Call (RPC) traffic. This setup should be configured to audit and block certain RPC activities, targeting processes identified by unique UUIDs: 82273fdc-e32a-18c3-3f78-827929dc23ea and f6beaff7-1e19-4fbb-9f8f-b89e2018337c. This specific configuration serves as a preliminary step to focus on potentially malicious RPC communication attempts.\n\nWhen monitoring the application logs generated by the RPC Firewall, look out for log entries categorized under the \"RPCFW\" event log. The entries of particular interest have an EventID of 3, which indicates an event tied to remote RPC calls attempting to access event log information. This is a critical marker for identifying suspicious activities.\n\nThe detection further narrows down to log entries involving the previously mentioned UUIDs associated with the RPC interfaces. These UUIDs are significant as they tie back to specific operations or processes that could be targeted by attackers seeking to retrieve event log data through remote RPC calls.\n\nBe aware that in some cases, these detections might flag legitimate remote administrative tasks involving Windows Events as potential threats. These are considered false positives and should be carefully validated to ensure that legitimate administrative activities are not disrupted.\n\nGiven this detection strategy's high importance level, it is crucial to actively monitor for these indicators and investigate any triggers to ensure that your system is protected against unauthorized attempts to access event log information via remote RPC calls. This approach is aligned with mitigating tactics and techniques related to unauthorized access and data extraction from systems."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_main:\n        - CommandLine|contains|all:\n            # net.exe\n            - 'localgroup '\n            - ' /add'\n        - CommandLine|contains|all:\n            # powershell.exe\n            - 'Add-LocalGroupMember '\n            - ' -Group '\n    selection_group:\n        CommandLine|contains:\n            - ' administrators '\n            - ' administrateur' # Typo without an 'S' so we catch both\n    condition: all of selection_*\nfalsepositives:\n    - Administrative activity\nlevel: medium\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect suspicious command line that adds an account to the local administrators/administrateurs group\n\nHere is how  the given sigma rule operates: In order to detect suspicious command line activity that adds an account to the local administrators/administrateurs group, you should monitor command line operations on Windows systems for specific patterns indicating such actions. Look for the execution of commands involving \"net.exe\" or \"powershell.exe\" where the command line contains phrases indicative of modifying local user groups. Specifically, identify instances where \"net.exe\" commands include \"localgroup\" and \"/add\" together, or when \"powershell.exe\" commands contain \"Add-LocalGroupMember\" and \"-Group\". Additionally, any mention of \"administrators\" or \"administrateur\" (accommodating a common typo) within the command line should raise your attention. Keep in mind that legitimate administrative activities might sometimes involve these command patterns, so consider them as potential false positives. This monitoring should be considered of medium importance in the scope of detecting unauthorized attempts to elevate privileges within a system.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_main:\n        - CommandLine|contains|all:\n            # net.exe\n            - 'localgroup '\n            - ' /add'\n        - CommandLine|contains|all:\n            # powershell.exe\n            - 'Add-LocalGroupMember '\n            - ' -Group '\n    selection_group:\n        CommandLine|contains:\n            - ' administrators '\n            - ' administrateur' # Typo without an 'S' so we catch both\n    condition: all of selection_*\nfalsepositives:\n    - Administrative activity\nlevel: medium\n",
      "question": "suspicious command line that adds an account to the local administrators/administrateurs group",
      "answer": "In order to detect suspicious command line activity that adds an account to the local administrators/administrateurs group, you should monitor command line operations on Windows systems for specific patterns indicating such actions. Look for the execution of commands involving \"net.exe\" or \"powershell.exe\" where the command line contains phrases indicative of modifying local user groups. Specifically, identify instances where \"net.exe\" commands include \"localgroup\" and \"/add\" together, or when \"powershell.exe\" commands contain \"Add-LocalGroupMember\" and \"-Group\". Additionally, any mention of \"administrators\" or \"administrateur\" (accommodating a common typo) within the command line should raise your attention. Keep in mind that legitimate administrative activities might sometimes involve these command patterns, so consider them as potential false positives. This monitoring should be considered of medium importance in the scope of detecting unauthorized attempts to elevate privileges within a system."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting application credential is modified..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to identify when an application credential is modified, you should monitor activity logs in the Azure environment for any events related to the update of application credentials specifically under the certificates and secrets management category. Be watchful for log entries with messages such as \"Update application - Certificates and secrets management\". This monitoring is crucial because changes in application credentials can sometimes indicate unauthorized attempts to gain access or alter application behavior.\n\nIt's important to note that there are cases where the modification of application credentials is part of routine maintenance or administrative work conducted by system administrators. Therefore, when you receive an alert, verify the identity of the user, the user agent, and/or the hostname involved in the change to ensure that it aligns with expected behavior within your environment.\n\nAdditionally, pay special attention to credential modifications from unfamiliar users, as these could potentially signify malicious activities. If upon investigation, you find that certain repetitive behavior is causing false positives and is indeed legitimate, consider creating exceptions for those activities to refine the effectiveness of the monitoring process.\n\nThis procedure is tagged under specific tactics and techniques that include Credential Access, specifically the management of certificates and secrets which could be targeted by attackers attempting to breach or escalate privileges within a network.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: azure\n    service: activitylogs\ndetection:\n    selection:\n        properties.message: 'Update application - Certificates and secrets management'\n    condition: selection\nfalsepositives:\n    - Application credential added may be performed by a system administrator.\n    - Verify whether the user identity, user agent, and/or hostname should be making changes in your environment.\n    - Application credential added from unfamiliar users should be investigated. If known behavior is causing false positives, it can be exempted from the rule.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: azure\n    service: activitylogs\ndetection:\n    selection:\n        properties.message: 'Update application - Certificates and secrets management'\n    condition: selection\nfalsepositives:\n    - Application credential added may be performed by a system administrator.\n    - Verify whether the user identity, user agent, and/or hostname should be making changes in your environment.\n    - Application credential added from unfamiliar users should be investigated. If known behavior is causing false positives, it can be exempted from the rule.\nlevel: medium\n",
      "question": "application credential is modified.",
      "answer": "In order to identify when an application credential is modified, you should monitor activity logs in the Azure environment for any events related to the update of application credentials specifically under the certificates and secrets management category. Be watchful for log entries with messages such as \"Update application - Certificates and secrets management\". This monitoring is crucial because changes in application credentials can sometimes indicate unauthorized attempts to gain access or alter application behavior.\n\nIt's important to note that there are cases where the modification of application credentials is part of routine maintenance or administrative work conducted by system administrators. Therefore, when you receive an alert, verify the identity of the user, the user agent, and/or the hostname involved in the change to ensure that it aligns with expected behavior within your environment.\n\nAdditionally, pay special attention to credential modifications from unfamiliar users, as these could potentially signify malicious activities. If upon investigation, you find that certain repetitive behavior is causing false positives and is indeed legitimate, consider creating exceptions for those activities to refine the effectiveness of the monitoring process.\n\nThis procedure is tagged under specific tactics and techniques that include Credential Access, specifically the management of certificates and secrets which could be targeted by attackers attempting to breach or escalate privileges within a network."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    product: windows\n    category: file_event\ndetection:\n    selection1:\n        TargetFilename|endswith:\n            - '\\TeamViewer\\RemotePrinting\\tvprint.db'\n            - '\\TeamViewer\\TVNetwork.log'\n    selection2:\n        TargetFilename|contains|all:\n            - '\\TeamViewer'\n            - '_Logfile.log'\n    condition: 1 of selection*\nfalsepositives:\n    - Legitimate uses of TeamViewer in an organisation\nlevel: medium\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect creation of log files during a TeamViewer remote session\n\nHere is how  the given sigma rule operates: In order to detect the creation of log files during a TeamViewer remote session, you should: focus on monitoring Windows file event logs for the creation of specific TeamViewer log files. This involves tracking instances where files ending with '\\TeamViewer\\RemotePrinting\\tvprint.db' or '\\TeamViewer\\TVNetwork.log' are created. Additionally, it's important to look for file creations containing the path '\\TeamViewer' combined with the file name component '_Logfile.log'. This approach aims to identify potentially unauthorized or malicious use of TeamViewer by spotting the creation of these distinctive log files, which could indicate a remote session. However, it's also crucial to consider the context of these detections as legitimate use of TeamViewer within an organization can lead to similar log file creations, which would be considered false positives in this security monitoring scenario. The sensitivity level for this detection is set to medium, acknowledging the balance between detecting potential threats and minimizing the impact of false-positive alerts on organizational operations.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: file_event\ndetection:\n    selection1:\n        TargetFilename|endswith:\n            - '\\TeamViewer\\RemotePrinting\\tvprint.db'\n            - '\\TeamViewer\\TVNetwork.log'\n    selection2:\n        TargetFilename|contains|all:\n            - '\\TeamViewer'\n            - '_Logfile.log'\n    condition: 1 of selection*\nfalsepositives:\n    - Legitimate uses of TeamViewer in an organisation\nlevel: medium\n",
      "question": "creation of log files during a TeamViewer remote session",
      "answer": "In order to detect the creation of log files during a TeamViewer remote session, you should: focus on monitoring Windows file event logs for the creation of specific TeamViewer log files. This involves tracking instances where files ending with '\\TeamViewer\\RemotePrinting\\tvprint.db' or '\\TeamViewer\\TVNetwork.log' are created. Additionally, it's important to look for file creations containing the path '\\TeamViewer' combined with the file name component '_Logfile.log'. This approach aims to identify potentially unauthorized or malicious use of TeamViewer by spotting the creation of these distinctive log files, which could indicate a remote session. However, it's also crucial to consider the context of these detections as legitimate use of TeamViewer within an organization can lead to similar log file creations, which would be considered false positives in this security monitoring scenario. The sensitivity level for this detection is set to medium, acknowledging the balance between detecting potential threats and minimizing the impact of false-positive alerts on organizational operations."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Product: UltraViewer\n        - Company: DucFabulous Co,ltd\n        - OriginalFileName: UltraViewer_Desktop.exe\n    condition: selection\nfalsepositives:\n    - Legitimate use\nlevel: medium\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.\nThese services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.\nRemote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)\n\n\nHere is how  the given sigma rule operates: In order to detect an adversary's use of legitimate desktop support and remote access software for establishing an interactive command and control channel to target systems within networks, you should: Monitor for the creation of processes that involve specific characteristics of known remote access software. This includes watching for processes related to the product \"UltraViewer,\" particularly those that are associated with the company \"DucFabulous Co,ltd,\" and specifically for executables named \"UltraViewer_Desktop.exe\". Keeping an eye on these indicators within Windows environments, where such software products are executed, is crucial. It is important, however, to consider that not all instances of this behavior are malicious\u2014as legitimate use of UltraViewer for support purposes may trigger similar activity. Nonetheless, given the medium level of threat associated with this behavior, vigilance is advised. This approach aids in identifying potentially unauthorized remote access attempts that exploit the functionalities of legitimate software, aligning with tactics and techniques adversaries leverage for command and control activities within a network.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Product: UltraViewer\n        - Company: DucFabulous Co,ltd\n        - OriginalFileName: UltraViewer_Desktop.exe\n    condition: selection\nfalsepositives:\n    - Legitimate use\nlevel: medium\n",
      "question": "An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.\nThese services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.\nRemote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)\n",
      "answer": "In order to detect an adversary's use of legitimate desktop support and remote access software for establishing an interactive command and control channel to target systems within networks, you should: Monitor for the creation of processes that involve specific characteristics of known remote access software. This includes watching for processes related to the product \"UltraViewer,\" particularly those that are associated with the company \"DucFabulous Co,ltd,\" and specifically for executables named \"UltraViewer_Desktop.exe\". Keeping an eye on these indicators within Windows environments, where such software products are executed, is crucial. It is important, however, to consider that not all instances of this behavior are malicious\u2014as legitimate use of UltraViewer for support purposes may trigger similar activity. Nonetheless, given the medium level of threat associated with this behavior, vigilance is advised. This approach aids in identifying potentially unauthorized remote access attempts that exploit the functionalities of legitimate software, aligning with tactics and techniques adversaries leverage for command and control activities within a network."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|endswith: '\\CLSID\\{fdb00e52-a214-4aa1-8fba-4357bb0072ec}\\InProcServer32\\(Default)'\n    filter:\n        Details: '%windir%\\system32\\amsi.dll'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect changes to the AMSI come server registry key in order disable AMSI scanning functionalities. When AMSI attempts to starts its COM component, it will query its registered CLSID and return a non-existent COM server. This causes a load failure and prevents any scanning methods from being accessed, ultimately rendering AMSI useless\n\nHere is how  the given sigma rule operates: In order to detect changes to the AMSI COM server registry key in order to disable AMSI scanning functionalities. When AMSI attempts to start its COM component, it will query its registered CLSID and return a non-existent COM server. This causes a load failure and prevents any scanning methods from being accessed, ultimately rendering AMSI useless, you should: Monitor Windows registry set operations, focusing on events where the registry value is being set (EventType: SetValue) to track changes. Concentrate on registry modifications targeting the specific path ending with '\\CLSID\\{fdb00e52-a214-4aa1-8fba-4357bb0072ec}\\InProcServer32\\(Default)', which is crucial for AMSI's COM server initialization. Exclude any instances where these modifications are setting the registry's target object to the legitimate AMSI DLL path ('%windir%\\system32\\amsi.dll'), as these changes do not represent the attack scenario of interest. This detection strategy requires vigilance in monitoring for registry alterations that deviate from the genuine AMSI DLL path, ensuring the early identification of attempts to disable AMSI scanning functionalities. Recognizing such unauthorized modifications is vital, as they can lead to a scenario where Windows fails to load the correct AMSI COM component during scanning operations, severely compromising system security.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|endswith: '\\CLSID\\{fdb00e52-a214-4aa1-8fba-4357bb0072ec}\\InProcServer32\\(Default)'\n    filter:\n        Details: '%windir%\\system32\\amsi.dll'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "changes to the AMSI come server registry key in order disable AMSI scanning functionalities. When AMSI attempts to starts its COM component, it will query its registered CLSID and return a non-existent COM server. This causes a load failure and prevents any scanning methods from being accessed, ultimately rendering AMSI useless",
      "answer": "In order to detect changes to the AMSI COM server registry key in order to disable AMSI scanning functionalities. When AMSI attempts to start its COM component, it will query its registered CLSID and return a non-existent COM server. This causes a load failure and prevents any scanning methods from being accessed, ultimately rendering AMSI useless, you should: Monitor Windows registry set operations, focusing on events where the registry value is being set (EventType: SetValue) to track changes. Concentrate on registry modifications targeting the specific path ending with '\\CLSID\\{fdb00e52-a214-4aa1-8fba-4357bb0072ec}\\InProcServer32\\(Default)', which is crucial for AMSI's COM server initialization. Exclude any instances where these modifications are setting the registry's target object to the legitimate AMSI DLL path ('%windir%\\system32\\amsi.dll'), as these changes do not represent the attack scenario of interest. This detection strategy requires vigilance in monitoring for registry alterations that deviate from the genuine AMSI DLL path, ensuring the early identification of attempts to disable AMSI scanning functionalities. Recognizing such unauthorized modifications is vital, as they can lead to a scenario where Windows fails to load the correct AMSI COM component during scanning operations, severely compromising system security."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious local connections via a named pipe to the AD FS configuration database (Windows Internal Database).\nUsed to access information such as the AD FS configuration settings which contains sensitive information used to sign SAML tokens.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious local connections via a named pipe to the AD FS configuration database (Windows Internal Database), which is used to access information such as the AD FS configuration settings containing sensitive information used to sign SAML tokens, you should: Focus on monitoring the creation of specific named pipe connections within Windows environments, especially the ones targeting the \"\\MICROSOFT##WID\\tsql\\query\" named pipe. This is indicative of attempts to connect to the Windows Internal Database, potentially to access or manipulate the AD FS configuration settings. To achieve effective monitoring, ensure that logging for Named Pipe Events, specifically Event ID 17 (Pipe Created) and Event ID 18 (Pipe Connected), is enabled and properly configured in Sysmon. It's crucial to also apply filters to exclude legitimate processes that may normally interact with named pipes in a benign context. These processes include \"Microsoft.IdentityServer.ServiceHost.exe\", \"Microsoft.Identity.Health.Adfs.PshSurrogate.exe\", \"AzureADConnect.exe\", \"Microsoft.Tri.Sensor.exe\", \"wsmprovhost.exe\", \"mmc.exe\", \"sqlservr.exe\", and \"tssdis.exe\" among common system processes like \"C:\\Windows\\system32\\svchost.exe\". By setting these conditions, you can focus on identifying potential malicious activity while minimizing the incidence of false positives, which might arise from the legitimate use of named pipes by the filtered processes.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: pipe_created\n    definition: 'Note that you have to configure logging for Named Pipe Events in Sysmon config (Event ID 17 and Event ID 18). The basic configuration is in popular sysmon configuration (https://github.com/SwiftOnSecurity/sysmon-config), but it is worth verifying. You can also use other repo, e.g. https://github.com/Neo23x0/sysmon-config, https://github.com/olafhartong/sysmon-modular. How to test detection? You can check powershell script from this site https://svch0st.medium.com/guide-to-named-pipes-and-hunting-for-cobalt-strike-pipes-dc46b2c5f575'\ndetection:\n    selection:\n        PipeName: '\\MICROSOFT##WID\\tsql\\query'\n    filter:\n        Image|endswith:\n            - '\\Microsoft.IdentityServer.ServiceHost.exe'\n            - '\\Microsoft.Identity.Health.Adfs.PshSurrogate.exe'\n            - '\\AzureADConnect.exe'\n            - '\\Microsoft.Tri.Sensor.exe'\n            - '\\wsmprovhost.exe'\n            - '\\mmc.exe'\n            - '\\sqlservr.exe'\n            - '\\tssdis.exe'\n            - 'C:\\Windows\\system32\\svchost.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Processes in the filter condition\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: pipe_created\n    definition: 'Note that you have to configure logging for Named Pipe Events in Sysmon config (Event ID 17 and Event ID 18). The basic configuration is in popular sysmon configuration (https://github.com/SwiftOnSecurity/sysmon-config), but it is worth verifying. You can also use other repo, e.g. https://github.com/Neo23x0/sysmon-config, https://github.com/olafhartong/sysmon-modular. How to test detection? You can check powershell script from this site https://svch0st.medium.com/guide-to-named-pipes-and-hunting-for-cobalt-strike-pipes-dc46b2c5f575'\ndetection:\n    selection:\n        PipeName: '\\MICROSOFT##WID\\tsql\\query'\n    filter:\n        Image|endswith:\n            - '\\Microsoft.IdentityServer.ServiceHost.exe'\n            - '\\Microsoft.Identity.Health.Adfs.PshSurrogate.exe'\n            - '\\AzureADConnect.exe'\n            - '\\Microsoft.Tri.Sensor.exe'\n            - '\\wsmprovhost.exe'\n            - '\\mmc.exe'\n            - '\\sqlservr.exe'\n            - '\\tssdis.exe'\n            - 'C:\\Windows\\system32\\svchost.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Processes in the filter condition\nlevel: high\n",
      "question": "suspicious local connections via a named pipe to the AD FS configuration database (Windows Internal Database).\nUsed to access information such as the AD FS configuration settings which contains sensitive information used to sign SAML tokens.\n",
      "answer": "In order to detect suspicious local connections via a named pipe to the AD FS configuration database (Windows Internal Database), which is used to access information such as the AD FS configuration settings containing sensitive information used to sign SAML tokens, you should: Focus on monitoring the creation of specific named pipe connections within Windows environments, especially the ones targeting the \"\\MICROSOFT##WID\\tsql\\query\" named pipe. This is indicative of attempts to connect to the Windows Internal Database, potentially to access or manipulate the AD FS configuration settings. To achieve effective monitoring, ensure that logging for Named Pipe Events, specifically Event ID 17 (Pipe Created) and Event ID 18 (Pipe Connected), is enabled and properly configured in Sysmon. It's crucial to also apply filters to exclude legitimate processes that may normally interact with named pipes in a benign context. These processes include \"Microsoft.IdentityServer.ServiceHost.exe\", \"Microsoft.Identity.Health.Adfs.PshSurrogate.exe\", \"AzureADConnect.exe\", \"Microsoft.Tri.Sensor.exe\", \"wsmprovhost.exe\", \"mmc.exe\", \"sqlservr.exe\", and \"tssdis.exe\" among common system processes like \"C:\\Windows\\system32\\svchost.exe\". By setting these conditions, you can focus on identifying potential malicious activity while minimizing the incidence of false positives, which might arise from the legitimate use of named pipes by the filtered processes."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting exploitation attempt using public exploit code for CVE-2018-15473.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect exploitation attempt using public exploit code for CVE-2018-15473, you should monitor SSHD logs on Linux systems for the specific error message \"error: buffer_get_ret: trying to get more bytes 1907 than in buffer 308 [preauth]\". This message can indicate an attempted exploitation of the vulnerability mentioned. The detection relies on spotting this exact keyword within the logs. It is important to pay attention to logs sourced from the SSHD service on Linux-operated machines, as this scenario specifically targets them. While there might be unknown scenarios leading to false positives, the significance of detecting this exploit attempt is rated at a medium level. The associated tactics and techniques from the MITRE ATT&CK framework include Credential Access and Brute Force, although these tags are not explicitly named in the detection criteria, they are relevant to understanding the context of the attack.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: linux\n    service: sshd\ndetection:\n    keywords:\n        - 'error: buffer_get_ret: trying to get more bytes 1907 than in buffer 308 [preauth]'\n    condition: keywords\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\n    service: sshd\ndetection:\n    keywords:\n        - 'error: buffer_get_ret: trying to get more bytes 1907 than in buffer 308 [preauth]'\n    condition: keywords\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "exploitation attempt using public exploit code for CVE-2018-15473",
      "answer": "In order to detect exploitation attempt using public exploit code for CVE-2018-15473, you should monitor SSHD logs on Linux systems for the specific error message \"error: buffer_get_ret: trying to get more bytes 1907 than in buffer 308 [preauth]\". This message can indicate an attempted exploitation of the vulnerability mentioned. The detection relies on spotting this exact keyword within the logs. It is important to pay attention to logs sourced from the SSHD service on Linux-operated machines, as this scenario specifically targets them. While there might be unknown scenarios leading to false positives, the significance of detecting this exploit attempt is rated at a medium level. The associated tactics and techniques from the MITRE ATT&CK framework include Credential Access and Brute Force, although these tags are not explicitly named in the detection criteria, they are relevant to understanding the context of the attack."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting VB DLL's loaded by an office application. Which could indicate the presence of VBA Macros..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect VB DLLs loaded by an office application which could indicate the presence of VBA Macros, you should monitor for specific events related to the loading of image files in Windows environments. This involves watching for instances where Microsoft Office applications such as Excel, Publisher, OneNote, Outlook, PowerPoint, and Word are loading particular DLL files associated with Visual Basic for Applications (VBA), including VBE7.DLL, VBEUI.DLL, and VBE7INTL.DLL. Detection of such activities is critical as it might suggest that VBA Macros, potentially malicious, are being executed, an avenue often exploited by attackers for various malicious purposes. It is important, however, to consider the context in which these DLLs are loaded, as legitimate macro usage can also trigger these detection mechanisms. Therefore, adjustments may be necessary to minimize false positives, ensuring that legitimate business processes are not impeded while maintaining a high level of vigilance against potential threats.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        Image|endswith:\n            - '\\excel.exe'\n            - '\\mspub.exe'\n            - '\\onenote.exe'\n            - '\\onenoteim.exe' # Just in case\n            - '\\outlook.exe'\n            - '\\powerpnt.exe'\n            - '\\winword.exe'\n        ImageLoaded|endswith:\n            - '\\VBE7.DLL'\n            - '\\VBEUI.DLL'\n            - '\\VBE7INTL.DLL'\n    condition: selection\nfalsepositives:\n    - Legitimate macro usage. Add the appropriate filter according to your environment\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        Image|endswith:\n            - '\\excel.exe'\n            - '\\mspub.exe'\n            - '\\onenote.exe'\n            - '\\onenoteim.exe' # Just in case\n            - '\\outlook.exe'\n            - '\\powerpnt.exe'\n            - '\\winword.exe'\n        ImageLoaded|endswith:\n            - '\\VBE7.DLL'\n            - '\\VBEUI.DLL'\n            - '\\VBE7INTL.DLL'\n    condition: selection\nfalsepositives:\n    - Legitimate macro usage. Add the appropriate filter according to your environment\nlevel: high\n",
      "question": "VB DLL's loaded by an office application. Which could indicate the presence of VBA Macros.",
      "answer": "In order to detect VB DLLs loaded by an office application which could indicate the presence of VBA Macros, you should monitor for specific events related to the loading of image files in Windows environments. This involves watching for instances where Microsoft Office applications such as Excel, Publisher, OneNote, Outlook, PowerPoint, and Word are loading particular DLL files associated with Visual Basic for Applications (VBA), including VBE7.DLL, VBEUI.DLL, and VBE7INTL.DLL. Detection of such activities is critical as it might suggest that VBA Macros, potentially malicious, are being executed, an avenue often exploited by attackers for various malicious purposes. It is important, however, to consider the context in which these DLLs are loaded, as legitimate macro usage can also trigger these detection mechanisms. Therefore, adjustments may be necessary to minimize false positives, ensuring that legitimate business processes are not impeded while maintaining a high level of vigilance against potential threats."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting exploitation attempt against Citrix Netscaler, Application Delivery Controller (ADS) and Citrix Gateway exploiting vulnerabilities reported as CVE-2020-8193 and CVE-2020-8195.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect exploitation attempts against Citrix Netscaler, Application Delivery Controller (ADS), and Citrix Gateway exploiting vulnerabilities reported as CVE-2020-8193 and CVE-2020-8195, you should monitor web server logs for specific patterns in the URI query. Look for queries containing '/rapi/filedownload?filter=path:%2F'. Additionally, watch for queries that include all the following parameters: '/pcidss/report', 'type=all_signatures', and 'sig_name=_default_signature_'. These queries are potential indicators of an attack exploiting the mentioned CVE vulnerabilities. Ensure to capture the client IP, the virtual host, the full URL, and the response code for any request that matches these patterns. It is important to note that while this detection strategy is critical for identifying possible exploitation attempts, there might be unknown false positives.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: webserver\ndetection:\n    selection1:\n        cs-uri-query|contains: '/rapi/filedownload?filter=path:%2F'\n    selection2:\n        cs-uri-query|contains|all:\n            - '/pcidss/report'\n            - 'type=all_signatures'\n            - 'sig_name=_default_signature_'\n    condition: 1 of selection*\nfields:\n    - client_ip\n    - vhost\n    - url\n    - response\nfalsepositives:\n    - Unknown\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: webserver\ndetection:\n    selection1:\n        cs-uri-query|contains: '/rapi/filedownload?filter=path:%2F'\n    selection2:\n        cs-uri-query|contains|all:\n            - '/pcidss/report'\n            - 'type=all_signatures'\n            - 'sig_name=_default_signature_'\n    condition: 1 of selection*\nfields:\n    - client_ip\n    - vhost\n    - url\n    - response\nfalsepositives:\n    - Unknown\nlevel: critical\n",
      "question": "exploitation attempt against Citrix Netscaler, Application Delivery Controller (ADS) and Citrix Gateway exploiting vulnerabilities reported as CVE-2020-8193 and CVE-2020-8195",
      "answer": "In order to detect exploitation attempts against Citrix Netscaler, Application Delivery Controller (ADS), and Citrix Gateway exploiting vulnerabilities reported as CVE-2020-8193 and CVE-2020-8195, you should monitor web server logs for specific patterns in the URI query. Look for queries containing '/rapi/filedownload?filter=path:%2F'. Additionally, watch for queries that include all the following parameters: '/pcidss/report', 'type=all_signatures', and 'sig_name=_default_signature_'. These queries are potential indicators of an attack exploiting the mentioned CVE vulnerabilities. Ensure to capture the client IP, the virtual host, the full URL, and the response code for any request that matches these patterns. It is important to note that while this detection strategy is critical for identifying possible exploitation attempts, there might be unknown false positives."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting registry changes to Office trust records where the path is located in a potentially suspicious location.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect registry changes to Office trust records where the path is located in a potentially suspicious location, you should monitor Windows registry set actions specifically looking for events where the type of event is Setvalue related to Office Trust Records in the registry. Specifically, focus should be on the '\\Security\\Trusted Documents\\TrustRecords' path. It's crucial to scrutinize changes happening not just within this direct path, but also to be vigilant about modifications occurring in less expected locations where users might not typically execute macro-enabled documents. These locations include various paths such as '/AppData/Local/Microsoft/Windows/INetCache/', '/AppData/Local/Temp/', '/PerfLogs/', 'C:/Users/Public/', and both 'file:///D:/' and 'file:///E:/'. Such changes are uncommon and tend to be indicative of suspicious activities, likely with a high level of confidence hence classified with a high severity.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection_value:\n        EventType: Setvalue\n        TargetObject|contains: '\\Security\\Trusted Documents\\TrustRecords'\n    selection_paths:\n        TargetObject|contains:\n            # Note: add more locations where you don't expect a user to executed macro enabled docs\n            - '/AppData/Local/Microsoft/Windows/INetCache/'\n            - '/AppData/Local/Temp/'\n            - '/PerfLogs/'\n            - 'C:/Users/Public/'\n            - 'file:///D:/'\n            - 'file:///E:/'\n    condition: all of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection_value:\n        EventType: Setvalue\n        TargetObject|contains: '\\Security\\Trusted Documents\\TrustRecords'\n    selection_paths:\n        TargetObject|contains:\n            # Note: add more locations where you don't expect a user to executed macro enabled docs\n            - '/AppData/Local/Microsoft/Windows/INetCache/'\n            - '/AppData/Local/Temp/'\n            - '/PerfLogs/'\n            - 'C:/Users/Public/'\n            - 'file:///D:/'\n            - 'file:///E:/'\n    condition: all of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "registry changes to Office trust records where the path is located in a potentially suspicious location",
      "answer": "In order to detect registry changes to Office trust records where the path is located in a potentially suspicious location, you should monitor Windows registry set actions specifically looking for events where the type of event is Setvalue related to Office Trust Records in the registry. Specifically, focus should be on the '\\Security\\Trusted Documents\\TrustRecords' path. It's crucial to scrutinize changes happening not just within this direct path, but also to be vigilant about modifications occurring in less expected locations where users might not typically execute macro-enabled documents. These locations include various paths such as '/AppData/Local/Microsoft/Windows/INetCache/', '/AppData/Local/Temp/', '/PerfLogs/', 'C:/Users/Public/', and both 'file:///D:/' and 'file:///E:/'. Such changes are uncommon and tend to be indicative of suspicious activities, likely with a high level of confidence hence classified with a high severity."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: proxy\ndetection:\n    selection:\n        c-uri|contains:\n            - 'Get~~~AllBrowser'\n            - 'Get~~~HardwareInfo'\n            - 'Take~~RecordCall'\n            - 'Reset~~~AllCommand'\n    condition: selection\nfields:\n    - c-ip\n    - c-uri\nfalsepositives:\n    - Unlikely\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect specific malware patterns used by FurBall malware linked to Iranian Domestic Kitten APT group\n\nHere is how  the given sigma rule operates: In order to detect specific malware patterns used by FurBall malware linked to Iranian Domestic Kitten APT group, you should monitor proxy logs for web requests that contain certain suspicious patterns in the URI. Specifically, look for URIs that include the strings 'Get~~~AllBrowser', 'Get~~~HardwareInfo', 'Take~~RecordCall', or 'Reset~~~AllCommand'. These patterns are indicative of the malware's activities, such as attempting to gather information from all browsers, fetch hardware information, record calls, or reset all commands. These indicators should be taken seriously, with the IP address and the full request URI being critical pieces of information to gather. This approach is based on a high confidence level that such patterns are unlikely to generate false positives, indicating a significant risk when detected.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: proxy\ndetection:\n    selection:\n        c-uri|contains:\n            - 'Get~~~AllBrowser'\n            - 'Get~~~HardwareInfo'\n            - 'Take~~RecordCall'\n            - 'Reset~~~AllCommand'\n    condition: selection\nfields:\n    - c-ip\n    - c-uri\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "specific malware patterns used by FurBall malware linked to Iranian Domestic Kitten APT group",
      "answer": "In order to detect specific malware patterns used by FurBall malware linked to Iranian Domestic Kitten APT group, you should monitor proxy logs for web requests that contain certain suspicious patterns in the URI. Specifically, look for URIs that include the strings 'Get~~~AllBrowser', 'Get~~~HardwareInfo', 'Take~~RecordCall', or 'Reset~~~AllCommand'. These patterns are indicative of the malware's activities, such as attempting to gather information from all browsers, fetch hardware information, record calls, or reset all commands. These indicators should be taken seriously, with the IP address and the full request URI being critical pieces of information to gather. This approach is based on a high confidence level that such patterns are unlikely to generate false positives, indicating a significant risk when detected."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: network_connection\n    product: windows\ndetection:\n    selection:\n        DestinationPort:\n            - 5985\n            - 5986\n        Initiated: 'true' # only matches of the initiating system can be evaluated\n    filter_generic:\n        - User|contains: # covers many language settings for Network Service. Please expand\n            - 'NETWORK SERVICE'\n            - 'NETZWERKDIENST'\n            - 'SERVIZIO DI RETE'\n            - 'SERVICIO DE RED'\n        - User|contains|all:\n            - 'SERVICE R'\n            - 'SEAU'\n        - SourceIp|startswith: '0:0:'\n        - Image:\n            - 'C:\\Program Files\\Avast Software\\Avast\\AvastSvc.exe'\n            - 'C:\\Program Files (x86)\\Avast Software\\Avast\\AvastSvc.exe'\n    filter_localhost:\n        SourceIp:\n            - '::1'\n            - '127.0.0.1'\n        DestinationIp:\n            - '::1'\n            - '127.0.0.1'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Legitimate usage of remote PowerShell, e.g. remote administration and monitoring.\n    - Network Service user name of a not-covered localization\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect remote PowerShell connections by monitoring network outbound connections to ports 5985 or 5986 from a non-network service account.\n\nHere is how  the given sigma rule operates: In order to detect remote PowerShell connections by monitoring network outbound connections to ports 5985 or 5986 from a non-network service account, you should analyze network connections from Windows systems focusing on attempts to initiate connections on ports 5985 and 5986. These ports are commonly associated with remote management and PowerShell remoting, which can be utilized for administrative purposes but may also be exploited by attackers for malicious activities.\n\nWhen examining these connections, it's imperative to distinguish between legitimate and potentially malicious use. Connections initiated by the system (where the 'Initiated' attribute is true) should be scrutinized, with a special emphasis on the user context to filter out generic network service account activities. This involves excluding connections made by users with names indicative of a network service account across different language settings, such as 'NETWORK SERVICE', 'NETZWERKDIENST', 'SERVIZIO DI RETE', and 'SERVICIO DE RED', among others. Additionally, connections initiated from certain source IP addresses indicating local network activity (e.g., '0:0:' prefix, '::1', '127.0.0.1') or from processes associated with specific antivirus software paths (notably Avast) should also be disregarded to reduce false positives.\n\nRecognizing legitimate usage of PowerShell for remote administration and monitoring as a common scenario that can generate false positives is crucial. Furthermore, the detection algorithm should account for network service usernames in languages not covered by the filter to avoid overlooking potentially suspicious activity.\n\nThis comprehensive monitoring strategy is essential for maintaining a high level of security against unauthorized or malicious use of PowerShell remoting capabilities, which attackers could leverage for reconnaissance, lateral movement, or executing remote commands. The tags relevant to this analysis reflect its alignment with recognized tactics and techniques, including Execution through PowerShell, Credential Access, and Lateral Movement, offering a structured approach to identifying and mitigating this attack vector.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: network_connection\n    product: windows\ndetection:\n    selection:\n        DestinationPort:\n            - 5985\n            - 5986\n        Initiated: 'true' # only matches of the initiating system can be evaluated\n    filter_generic:\n        - User|contains: # covers many language settings for Network Service. Please expand\n            - 'NETWORK SERVICE'\n            - 'NETZWERKDIENST'\n            - 'SERVIZIO DI RETE'\n            - 'SERVICIO DE RED'\n        - User|contains|all:\n            - 'SERVICE R'\n            - 'SEAU'\n        - SourceIp|startswith: '0:0:'\n        - Image:\n            - 'C:\\Program Files\\Avast Software\\Avast\\AvastSvc.exe'\n            - 'C:\\Program Files (x86)\\Avast Software\\Avast\\AvastSvc.exe'\n    filter_localhost:\n        SourceIp:\n            - '::1'\n            - '127.0.0.1'\n        DestinationIp:\n            - '::1'\n            - '127.0.0.1'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Legitimate usage of remote PowerShell, e.g. remote administration and monitoring.\n    - Network Service user name of a not-covered localization\nlevel: high\n",
      "question": "remote PowerShell connections by monitoring network outbound connections to ports 5985 or 5986 from a non-network service account.",
      "answer": "In order to detect remote PowerShell connections by monitoring network outbound connections to ports 5985 or 5986 from a non-network service account, you should analyze network connections from Windows systems focusing on attempts to initiate connections on ports 5985 and 5986. These ports are commonly associated with remote management and PowerShell remoting, which can be utilized for administrative purposes but may also be exploited by attackers for malicious activities.\n\nWhen examining these connections, it's imperative to distinguish between legitimate and potentially malicious use. Connections initiated by the system (where the 'Initiated' attribute is true) should be scrutinized, with a special emphasis on the user context to filter out generic network service account activities. This involves excluding connections made by users with names indicative of a network service account across different language settings, such as 'NETWORK SERVICE', 'NETZWERKDIENST', 'SERVIZIO DI RETE', and 'SERVICIO DE RED', among others. Additionally, connections initiated from certain source IP addresses indicating local network activity (e.g., '0:0:' prefix, '::1', '127.0.0.1') or from processes associated with specific antivirus software paths (notably Avast) should also be disregarded to reduce false positives.\n\nRecognizing legitimate usage of PowerShell for remote administration and monitoring as a common scenario that can generate false positives is crucial. Furthermore, the detection algorithm should account for network service usernames in languages not covered by the filter to avoid overlooking potentially suspicious activity.\n\nThis comprehensive monitoring strategy is essential for maintaining a high level of security against unauthorized or malicious use of PowerShell remoting capabilities, which attackers could leverage for reconnaissance, lateral movement, or executing remote commands. The tags relevant to this analysis reflect its alignment with recognized tactics and techniques, including Execution through PowerShell, Credential Access, and Lateral Movement, offering a structured approach to identifying and mitigating this attack vector."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        Image|endswith: '\\npc.exe'\n    selection_cli_1:\n        CommandLine|contains|all:\n            - ' -server='\n            - ' -vkey='\n            - ' -password='\n    selection_cli_2:\n        CommandLine|contains: ' -config=npc'\n    selection_hashes:\n        # v0.26.10\n        - Hashes|contains:\n            - \"MD5=AE8ACF66BFE3A44148964048B826D005\"\n            - \"SHA1=CEA49E9B9B67F3A13AD0BE1C2655293EA3C18181\"\n            - \"SHA256=5A456283392FFCEEEACA3D3426C306EB470304637520D72FED1CC1FEBBBD6856\"\n        - md5: 'ae8acf66bfe3a44148964048b826d005'\n        - sha1: 'cea49e9b9b67f3a13ad0be1c2655293ea3c18181'\n        - sha256: '5a456283392ffceeeaca3d3426c306eb470304637520d72fed1cc1febbbd6856'\n    condition: 1 of selection_*\nfalsepositives:\n    - Legitimate use\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect use of NPS, a port forwarding and intranet penetration proxy server\n\nHere is how  the given sigma rule operates: In order to detect the use of NPS, a port forwarding and intranet penetration proxy server, you should: Monitor process creation events within Windows environments for specific indicators that signify the usage of NPS. Look for processes that end with the filename '\\npc.exe'. Additionally, scrutinize the command line arguments of these processes for the presence of '-server=', '-vkey=', and '-password=' all within the same command, or the presence of '-config=npc'. To enhance the accuracy of detection, also check the process hashes against known indicators of compromise associated with NPS, including specific MD5, SHA1, and SHA256 hashes. Any match in these checks could indicate malicious activity involving NPS and warrants further investigation. Be aware there could be legitimate uses of these indicators, so it's recommended to verify the context of detection to rule out false positives.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        Image|endswith: '\\npc.exe'\n    selection_cli_1:\n        CommandLine|contains|all:\n            - ' -server='\n            - ' -vkey='\n            - ' -password='\n    selection_cli_2:\n        CommandLine|contains: ' -config=npc'\n    selection_hashes:\n        # v0.26.10\n        - Hashes|contains:\n            - \"MD5=AE8ACF66BFE3A44148964048B826D005\"\n            - \"SHA1=CEA49E9B9B67F3A13AD0BE1C2655293EA3C18181\"\n            - \"SHA256=5A456283392FFCEEEACA3D3426C306EB470304637520D72FED1CC1FEBBBD6856\"\n        - md5: 'ae8acf66bfe3a44148964048b826d005'\n        - sha1: 'cea49e9b9b67f3a13ad0be1c2655293ea3c18181'\n        - sha256: '5a456283392ffceeeaca3d3426c306eb470304637520d72fed1cc1febbbd6856'\n    condition: 1 of selection_*\nfalsepositives:\n    - Legitimate use\nlevel: high\n",
      "question": "use of NPS, a port forwarding and intranet penetration proxy server",
      "answer": "In order to detect the use of NPS, a port forwarding and intranet penetration proxy server, you should: Monitor process creation events within Windows environments for specific indicators that signify the usage of NPS. Look for processes that end with the filename '\\npc.exe'. Additionally, scrutinize the command line arguments of these processes for the presence of '-server=', '-vkey=', and '-password=' all within the same command, or the presence of '-config=npc'. To enhance the accuracy of detection, also check the process hashes against known indicators of compromise associated with NPS, including specific MD5, SHA1, and SHA256 hashes. Any match in these checks could indicate malicious activity involving NPS and warrants further investigation. Be aware there could be legitimate uses of these indicators, so it's recommended to verify the context of detection to rule out false positives."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting tools extracting LSA secret DPAPI domain backup key from Domain Controllers.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect tools extracting LSA secret DPAPI domain backup key from Domain Controllers, you should: Monitor Windows Security logs for events with ID 4662 that involve interactions with objects known as 'SecretObject'. Specifically, pay attention to activities where these objects are accessed with a mask indicating 'write' actions (denoted by AccessMask '0x2'), and the objects in question contain the name 'BCKUPKEY' in their identifiers. Such events are indicative of attempts to access or manipulate critical domain backup keys related to the DPAPI (Data Protection Application Programming Interface), which could be indicative of malicious activities aimed at undermining the security of the LSA (Local Security Authority) secrets. The detection of this activity is considered to be of high importance due to the potential for significant security breaches.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 4662\n        ObjectType: 'SecretObject'\n        AccessMask: '0x2'\n        ObjectName|contains: 'BCKUPKEY'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 4662\n        ObjectType: 'SecretObject'\n        AccessMask: '0x2'\n        ObjectName|contains: 'BCKUPKEY'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "tools extracting LSA secret DPAPI domain backup key from Domain Controllers",
      "answer": "In order to detect tools extracting LSA secret DPAPI domain backup key from Domain Controllers, you should: Monitor Windows Security logs for events with ID 4662 that involve interactions with objects known as 'SecretObject'. Specifically, pay attention to activities where these objects are accessed with a mask indicating 'write' actions (denoted by AccessMask '0x2'), and the objects in question contain the name 'BCKUPKEY' in their identifiers. Such events are indicative of attempts to access or manipulate critical domain backup keys related to the DPAPI (Data Protection Application Programming Interface), which could be indicative of malicious activities aimed at undermining the security of the LSA (Local Security Authority) secrets. The detection of this activity is considered to be of high importance due to the potential for significant security breaches."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Microsoft Cloud App Security reported a risky sign-in attempt due to a login associated with an impossible travel..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when a Microsoft Cloud App Security reported a risky sign-in attempt due to a login associated with an impossible travel, you should monitor logs generated by the threat management system for Microsoft 365 services. Specifically, focus on logs coming from the Security Compliance Center. The key event to look out for is labeled as \"Impossible travel activity\" and must have a status indicating success. This detection aims to identify when a user's credentials have been used to attempt sign-ins from geographical locations that are physically impossible to travel between within the time frame of the sign-in attempts. It is important to note that while this is a medium-level security alert, there may be unknown scenarios that could trigger false positives.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    service: threat_management\n    product: m365\ndetection:\n    selection:\n        eventSource: SecurityComplianceCenter\n        eventName: 'Impossible travel activity'\n        status: success\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    service: threat_management\n    product: m365\ndetection:\n    selection:\n        eventSource: SecurityComplianceCenter\n        eventName: 'Impossible travel activity'\n        status: success\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Microsoft Cloud App Security reported a risky sign-in attempt due to a login associated with an impossible travel.",
      "answer": "In order to detect when a Microsoft Cloud App Security reported a risky sign-in attempt due to a login associated with an impossible travel, you should monitor logs generated by the threat management system for Microsoft 365 services. Specifically, focus on logs coming from the Security Compliance Center. The key event to look out for is labeled as \"Impossible travel activity\" and must have a status indicating success. This detection aims to identify when a user's credentials have been used to attempt sign-ins from geographical locations that are physically impossible to travel between within the time frame of the sign-in attempts. It is important to note that while this is a medium-level security alert, there may be unknown scenarios that could trigger false positives."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting changes to the NGenAssemblyUsageLog registry key.\n.NET Usage Log output location can be controlled by setting the NGenAssemblyUsageLog CLR configuration knob in the Registry or by configuring an environment variable (as described in the next section).\nBy simplify specifying an arbitrary value (e.g. fake output location or junk data) for the expected value, a Usage Log file for the .NET execution context will not be created.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect changes to the NGenAssemblyUsageLog registry key, you should: Monitor Windows registry modification events specifically targeting the setting of values. Focus on events where the type of activity is identified as \"SetValue\" in the logs, which indicates modification or creation of registry values. The registry key of interest is any that ends with 'SOFTWARE\\Microsoft\\.NETFramework\\NGenAssemblyUsageLog'. This specific registry key is crucial as it controls the .NET Usage Log output location. Unauthorized modification can lead to the redirection or suppression of these logs by setting it to an arbitrary or malicious location, effectively preventing the creation of a Usage Log file for the .NET execution context. It is important to have limited false positives identified, but due to the high sensitivity of this operation, any alteration attempt should be considered with high caution. This monitoring is associated with tactics and techniques such as Persistence, Privilege Escalation, and Defense Evasion, under the broader context of ensuring integrity of system and application logging mechanisms.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: registry_set\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|endswith: 'SOFTWARE\\Microsoft\\.NETFramework\\NGenAssemblyUsageLog'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: registry_set\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|endswith: 'SOFTWARE\\Microsoft\\.NETFramework\\NGenAssemblyUsageLog'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "changes to the NGenAssemblyUsageLog registry key.\n.NET Usage Log output location can be controlled by setting the NGenAssemblyUsageLog CLR configuration knob in the Registry or by configuring an environment variable (as described in the next section).\nBy simplify specifying an arbitrary value (e.g. fake output location or junk data) for the expected value, a Usage Log file for the .NET execution context will not be created.\n",
      "answer": "In order to detect changes to the NGenAssemblyUsageLog registry key, you should: Monitor Windows registry modification events specifically targeting the setting of values. Focus on events where the type of activity is identified as \"SetValue\" in the logs, which indicates modification or creation of registry values. The registry key of interest is any that ends with 'SOFTWARE\\Microsoft\\.NETFramework\\NGenAssemblyUsageLog'. This specific registry key is crucial as it controls the .NET Usage Log output location. Unauthorized modification can lead to the redirection or suppression of these logs by setting it to an arbitrary or malicious location, effectively preventing the creation of a Usage Log file for the .NET execution context. It is important to have limited false positives identified, but due to the high sensitivity of this operation, any alteration attempt should be considered with high caution. This monitoring is associated with tactics and techniques such as Persistence, Privilege Escalation, and Defense Evasion, under the broader context of ensuring integrity of system and application logging mechanisms."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        TargetFilename|endswith:\n            - '\\Inveigh-Log.txt'\n            - '\\Inveigh-Cleartext.txt'\n            - '\\Inveigh-NTLMv1Users.txt'\n            - '\\Inveigh-NTLMv2Users.txt'\n            - '\\Inveigh-NTLMv1.txt'\n            - '\\Inveigh-NTLMv2.txt'\n            - '\\Inveigh-FormInput.txt'\n            - '\\Inveigh.dll'\n            - '\\Inveigh.exe'\n            - '\\Inveigh.ps1'\n            - '\\Inveigh-Relay.ps1'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: critical\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect presence and execution of Inveigh via dropped artefacts\n\nHere is how  the given sigma rule operates: In order to detect the presence and execution of Inveigh via dropped artefacts, you should: monitor Windows file event logs for the creation, modification, or access of specific files associated with Inveigh. These files include logs and executable files typically created or used by Inveigh, such as 'Inveigh-Log.txt', 'Inveigh-Cleartext.txt', 'Inveigh-NTLMv1Users.txt', 'Inveigh-NTLMv2Users.txt', 'Inveigh-NTLMv1.txt', 'Inveigh-NTLMv2.txt', 'Inveigh-FormInput.txt', along with 'Inveigh.dll', 'Inveigh.exe', 'Inveigh.ps1', and 'Inveigh-Relay.ps1'. Detection of these files is crucial as their presence is indicative of the operation of Inveigh on the system, which is known for conducting man-in-the-middle (MitM) attacks and capturing network credentials. Observing the appearance of these files can serve as a critical indicator of compromise, showcasing unauthorized activities within the network. Given the specificity of these artefacts to Inveigh, false positives are considered unlikely, reflecting the high level of confidence in this detection methodology.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        TargetFilename|endswith:\n            - '\\Inveigh-Log.txt'\n            - '\\Inveigh-Cleartext.txt'\n            - '\\Inveigh-NTLMv1Users.txt'\n            - '\\Inveigh-NTLMv2Users.txt'\n            - '\\Inveigh-NTLMv1.txt'\n            - '\\Inveigh-NTLMv2.txt'\n            - '\\Inveigh-FormInput.txt'\n            - '\\Inveigh.dll'\n            - '\\Inveigh.exe'\n            - '\\Inveigh.ps1'\n            - '\\Inveigh-Relay.ps1'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
      "question": "presence and execution of Inveigh via dropped artefacts",
      "answer": "In order to detect the presence and execution of Inveigh via dropped artefacts, you should: monitor Windows file event logs for the creation, modification, or access of specific files associated with Inveigh. These files include logs and executable files typically created or used by Inveigh, such as 'Inveigh-Log.txt', 'Inveigh-Cleartext.txt', 'Inveigh-NTLMv1Users.txt', 'Inveigh-NTLMv2Users.txt', 'Inveigh-NTLMv1.txt', 'Inveigh-NTLMv2.txt', 'Inveigh-FormInput.txt', along with 'Inveigh.dll', 'Inveigh.exe', 'Inveigh.ps1', and 'Inveigh-Relay.ps1'. Detection of these files is crucial as their presence is indicative of the operation of Inveigh on the system, which is known for conducting man-in-the-middle (MitM) attacks and capturing network credentials. Observing the appearance of these files can serve as a critical indicator of compromise, showcasing unauthorized activities within the network. Given the specificity of these artefacts to Inveigh, false positives are considered unlikely, reflecting the high level of confidence in this detection methodology."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of the AgentExecutor.exe binary. Which can be abused as a LOLBIN to execute powershell scripts with the ExecutionPolicy \"Bypass\" or any binary named \"powershell.exe\" located in the path provided by 6th positional argument.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution of the AgentExecutor.exe binary, which can be abused as a LOLBIN to execute PowerShell scripts with the ExecutionPolicy \"Bypass\" or any binary named \"powershell.exe\" located in the path provided by the 6th positional argument, you should: Monitor for process creation events on Windows systems, specifically looking for instances where a process named 'AgentExecutor.exe' is initiated. This can be identified by either the image name ending with '\\AgentExecutor.exe' or an original file name of 'AgentExecutor.exe'. Pay close attention to the command line arguments passed to this executable, particularly looking for the presence of '-powershell' or '-remediationScript'. These flags indicate that AgentExecutor.exe is being used to execute PowerShell scripts, a common technique for bypassing security measures or executing malicious code. However, it's important to exclude instances where the command line contains references to 'C:\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\' or 'C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\', as these are typically legitimate use scenarios. The detection of such activity should be treated with a high level of suspicion due to its potential misuse for nefarious purposes, aligning with tactics and techniques such as Execution, Command and Control, and Defense Evasion.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\AgentExecutor.exe'\n        - OriginalFileName: 'AgentExecutor.exe'\n    selection_cli:\n        # Example:\n        #   AgentExecutor.exe -powershell [scriptPath] [outputFilePath] [errorFilePath] [timeoutFilePath] [timeoutSeconds] [powershellPath] [enforceSignatureCheck] [runAs32BitOn64]\n        # Note:\n        #   - If [timeoutSeconds] is NULL then it defaults to 60000\n        #   - If [enforceSignatureCheck] is:\n        #       - \"NULL\" or \"1\" then a PowerShell instance is spawned with the args: \"-NoProfile -executionPolicy allsigned -file \"\n        #       - Else a PowerShell instance is spawned with the args: \"-NoProfile -executionPolicy bypass -file \"\n        #   - [powershellPath] is always concatendated to \"powershell.exe\"\n        CommandLine|contains:\n            - ' -powershell' # Also covers the \"-powershellDetection\" flag\n            - ' -remediationScript'\n    filter:\n        CommandLine|contains:\n            - 'C:\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\'\n            - 'C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\'\n    condition: all of selection_* and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\AgentExecutor.exe'\n        - OriginalFileName: 'AgentExecutor.exe'\n    selection_cli:\n        # Example:\n        #   AgentExecutor.exe -powershell [scriptPath] [outputFilePath] [errorFilePath] [timeoutFilePath] [timeoutSeconds] [powershellPath] [enforceSignatureCheck] [runAs32BitOn64]\n        # Note:\n        #   - If [timeoutSeconds] is NULL then it defaults to 60000\n        #   - If [enforceSignatureCheck] is:\n        #       - \"NULL\" or \"1\" then a PowerShell instance is spawned with the args: \"-NoProfile -executionPolicy allsigned -file \"\n        #       - Else a PowerShell instance is spawned with the args: \"-NoProfile -executionPolicy bypass -file \"\n        #   - [powershellPath] is always concatendated to \"powershell.exe\"\n        CommandLine|contains:\n            - ' -powershell' # Also covers the \"-powershellDetection\" flag\n            - ' -remediationScript'\n    filter:\n        CommandLine|contains:\n            - 'C:\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\'\n            - 'C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\'\n    condition: all of selection_* and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "execution of the AgentExecutor.exe binary. Which can be abused as a LOLBIN to execute powershell scripts with the ExecutionPolicy \"Bypass\" or any binary named \"powershell.exe\" located in the path provided by 6th positional argument",
      "answer": "In order to detect execution of the AgentExecutor.exe binary, which can be abused as a LOLBIN to execute PowerShell scripts with the ExecutionPolicy \"Bypass\" or any binary named \"powershell.exe\" located in the path provided by the 6th positional argument, you should: Monitor for process creation events on Windows systems, specifically looking for instances where a process named 'AgentExecutor.exe' is initiated. This can be identified by either the image name ending with '\\AgentExecutor.exe' or an original file name of 'AgentExecutor.exe'. Pay close attention to the command line arguments passed to this executable, particularly looking for the presence of '-powershell' or '-remediationScript'. These flags indicate that AgentExecutor.exe is being used to execute PowerShell scripts, a common technique for bypassing security measures or executing malicious code. However, it's important to exclude instances where the command line contains references to 'C:\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\' or 'C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\', as these are typically legitimate use scenarios. The detection of such activity should be treated with a high level of suspicion due to its potential misuse for nefarious purposes, aligning with tactics and techniques such as Execution, Command and Control, and Defense Evasion."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious manipulations of default accounts such as 'administrator' and 'guest'. For example 'enable' or 'disable' accounts or change the password...etc.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious manipulations of default accounts such as 'administrator' and 'guest', for example 'enable' or 'disable' accounts or change the password etc., you should: Monitor Windows process creation logs for instances where net.exe or net1.exe is executed, as these are common tools used for managing user accounts and groups on Windows systems. Specifically, look out for command lines that contain the word 'user', indicating that user account management activity is taking place. Pay particular attention to command lines that contain specific account names, including those for 'Administrator' and 'Guest' in various languages, as well as 'DefaultAccount'. This is crucial for detecting attempts to manipulate these sensitive default accounts. Moreover, you should exclude any detection where the command line explicitly involves the 'guest' account being deactivated ('/active no'), to reduce false positives. However, be aware that some legitimate administration scripts may also perform these actions, which could result in false positives. Therefore, it is advisable to adjust the sensitivity of this detection in your environment as necessary. This monitoring is anchored in understanding that attackers might attempt to manipulate default or high-privilege accounts as part of their tactics for gaining or expanding access within a target system.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith:\n            - '\\net.exe'\n            - '\\net1.exe'\n        - OriginalFileName:\n            - 'net.exe'\n            - 'net1.exe'\n    selection_user_option:\n        CommandLine|contains: ' user '\n    selection_username:\n        CommandLine|contains:\n            # Note: We need to write the full account name for cases starting with 'admin' to avoid lookups only with the user flag\n            - ' J\u00e4rjestelm\u00e4nvalvoja ' # Finish\n            - ' Rendszergazda ' # Hungarian\n            - ' \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 ' # Russian\n            - ' Administrateur ' # French\n            - ' Administrador ' # Portuguese (Brazil + Portugal) + Spanish\n            - ' Administrat\u00f6r ' # Swedish\n            - ' Administrator ' # English\n            - ' guest '\n            - ' DefaultAccount '\n            # The cases below are for when an attacker requests the net command via 'cmd /c....'\n            # First in double quotes\n            - ' \"J\u00e4rjestelm\u00e4nvalvoja\" ' # Finish\n            - ' \"Rendszergazda\" ' # Hungarian\n            - ' \"\u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\" ' # Russian\n            - ' \"Administrateur\" ' # French\n            - ' \"Administrador\" ' # Portuguese (Brazil + Portugal) + Spanish\n            - ' \"Administrat\u00f6r\" ' # Swedish\n            - ' \"Administrator\" ' # English\n            - ' \"guest\" '\n            - ' \"DefaultAccount\" '\n            # Second in single quotes\n            - \" 'J\u00e4rjestelm\u00e4nvalvoja' \" # Finish\n            - \" 'Rendszergazda' \" # Hungarian\n            - \" '\u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440' \" # Russian\n            - \" 'Administrateur' \" # French\n            - \" 'Administrador' \" # Portuguese (Brazil + Portugal) + Spanish\n            - \" 'Administrat\u00f6r' \" # Swedish\n            - \" 'Administrator' \" # English\n            - \" 'guest' \"\n            - \" 'DefaultAccount' \"\n    filter:\n        CommandLine|contains|all:\n            - 'guest'\n            - '/active no'\n    condition: all of selection_* and not filter\nfalsepositives:\n    - Some false positives could occur with the admin or guest account. It depends on the scripts being used by the admins in your env. If you experience a lot of FP you could reduce the level to medium\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith:\n            - '\\net.exe'\n            - '\\net1.exe'\n        - OriginalFileName:\n            - 'net.exe'\n            - 'net1.exe'\n    selection_user_option:\n        CommandLine|contains: ' user '\n    selection_username:\n        CommandLine|contains:\n            # Note: We need to write the full account name for cases starting with 'admin' to avoid lookups only with the user flag\n            - ' J\u00e4rjestelm\u00e4nvalvoja ' # Finish\n            - ' Rendszergazda ' # Hungarian\n            - ' \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 ' # Russian\n            - ' Administrateur ' # French\n            - ' Administrador ' # Portuguese (Brazil + Portugal) + Spanish\n            - ' Administrat\u00f6r ' # Swedish\n            - ' Administrator ' # English\n            - ' guest '\n            - ' DefaultAccount '\n            # The cases below are for when an attacker requests the net command via 'cmd /c....'\n            # First in double quotes\n            - ' \"J\u00e4rjestelm\u00e4nvalvoja\" ' # Finish\n            - ' \"Rendszergazda\" ' # Hungarian\n            - ' \"\u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\" ' # Russian\n            - ' \"Administrateur\" ' # French\n            - ' \"Administrador\" ' # Portuguese (Brazil + Portugal) + Spanish\n            - ' \"Administrat\u00f6r\" ' # Swedish\n            - ' \"Administrator\" ' # English\n            - ' \"guest\" '\n            - ' \"DefaultAccount\" '\n            # Second in single quotes\n            - \" 'J\u00e4rjestelm\u00e4nvalvoja' \" # Finish\n            - \" 'Rendszergazda' \" # Hungarian\n            - \" '\u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440' \" # Russian\n            - \" 'Administrateur' \" # French\n            - \" 'Administrador' \" # Portuguese (Brazil + Portugal) + Spanish\n            - \" 'Administrat\u00f6r' \" # Swedish\n            - \" 'Administrator' \" # English\n            - \" 'guest' \"\n            - \" 'DefaultAccount' \"\n    filter:\n        CommandLine|contains|all:\n            - 'guest'\n            - '/active no'\n    condition: all of selection_* and not filter\nfalsepositives:\n    - Some false positives could occur with the admin or guest account. It depends on the scripts being used by the admins in your env. If you experience a lot of FP you could reduce the level to medium\nlevel: high\n",
      "question": "suspicious manipulations of default accounts such as 'administrator' and 'guest'. For example 'enable' or 'disable' accounts or change the password...etc",
      "answer": "In order to detect suspicious manipulations of default accounts such as 'administrator' and 'guest', for example 'enable' or 'disable' accounts or change the password etc., you should: Monitor Windows process creation logs for instances where net.exe or net1.exe is executed, as these are common tools used for managing user accounts and groups on Windows systems. Specifically, look out for command lines that contain the word 'user', indicating that user account management activity is taking place. Pay particular attention to command lines that contain specific account names, including those for 'Administrator' and 'Guest' in various languages, as well as 'DefaultAccount'. This is crucial for detecting attempts to manipulate these sensitive default accounts. Moreover, you should exclude any detection where the command line explicitly involves the 'guest' account being deactivated ('/active no'), to reduce false positives. However, be aware that some legitimate administration scripts may also perform these actions, which could result in false positives. Therefore, it is advisable to adjust the sensitivity of this detection in your environment as necessary. This monitoring is anchored in understanding that attackers might attempt to manipulate default or high-privilege accounts as part of their tactics for gaining or expanding access within a target system."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection_xml:\n        ScriptBlockText|contains|all:\n            - 'New-Object'\n            - 'System.Xml.XmlDocument'\n            - '.Load'\n    selection_exec:\n        ScriptBlockText|contains:\n            - 'IEX '\n            - 'Invoke-Expression '\n            - 'Invoke-Command '\n            - 'ICM -'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate administrative script\nlevel: medium\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect Adversaries may abuse PowerShell commands and scripts for execution.\nPowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. (Citation: TechNet PowerShell)\nAdversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code\n\n\nHere is how  the given sigma rule operates: In order to prevent adversaries from abusing PowerShell commands and scripts for execution, you should monitor PowerShell script activities specifically for patterns that might indicate malicious behavior. This involves looking for the use of certain PowerShell cmdlets and syntaxes. To do this effectively, ensure that Script Block Logging is enabled on Windows systems, as this will allow for the detailed logging of PowerShell script executions.\n\nPay close attention to scripts that attempt to create new objects using the `New-Object` command, especially those involving `System.Xml.XmlDocument` and subsequently call the `.Load` method. This pattern can be indicative of scripts trying to load and parse XML content, which might be used in various attack scenarios, such as downloading and executing malicious code.\n\nAdditionally, watch for the utilization of `Invoke-Expression`, `Invoke-Command`, or abbreviated versions like `IEX` and `ICM -`. These commands can execute strings as PowerShell code, which is a common technique used by attackers to run malicious code on a system without writing it to disk, thus evading traditional antivirus detections.\n\nBe aware that while monitoring for these specific command patterns can significantly aid in detecting potential PowerShell abuse, it can also lead to false positives. For instance, legitimate administrative activities might make use of these commands and scripts for valid purposes. Therefore, context and additional investigation are key to distinguishing between malicious activities and legitimate ones. The detection effort is considered to have a medium level of urgency, meaning while it's important to address, it should be balanced against other security priorities.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection_xml:\n        ScriptBlockText|contains|all:\n            - 'New-Object'\n            - 'System.Xml.XmlDocument'\n            - '.Load'\n    selection_exec:\n        ScriptBlockText|contains:\n            - 'IEX '\n            - 'Invoke-Expression '\n            - 'Invoke-Command '\n            - 'ICM -'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate administrative script\nlevel: medium\n",
      "question": "Adversaries may abuse PowerShell commands and scripts for execution.\nPowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. (Citation: TechNet PowerShell)\nAdversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code\n",
      "answer": "In order to prevent adversaries from abusing PowerShell commands and scripts for execution, you should monitor PowerShell script activities specifically for patterns that might indicate malicious behavior. This involves looking for the use of certain PowerShell cmdlets and syntaxes. To do this effectively, ensure that Script Block Logging is enabled on Windows systems, as this will allow for the detailed logging of PowerShell script executions.\n\nPay close attention to scripts that attempt to create new objects using the `New-Object` command, especially those involving `System.Xml.XmlDocument` and subsequently call the `.Load` method. This pattern can be indicative of scripts trying to load and parse XML content, which might be used in various attack scenarios, such as downloading and executing malicious code.\n\nAdditionally, watch for the utilization of `Invoke-Expression`, `Invoke-Command`, or abbreviated versions like `IEX` and `ICM -`. These commands can execute strings as PowerShell code, which is a common technique used by attackers to run malicious code on a system without writing it to disk, thus evading traditional antivirus detections.\n\nBe aware that while monitoring for these specific command patterns can significantly aid in detecting potential PowerShell abuse, it can also lead to false positives. For instance, legitimate administrative activities might make use of these commands and scripts for valid purposes. Therefore, context and additional investigation are key to distinguishing between malicious activities and legitimate ones. The detection effort is considered to have a medium level of urgency, meaning while it's important to address, it should be balanced against other security priorities."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    product: windows\n    category: driver_load\ndetection:\n    selection:\n        ImagePath|contains: '(Clipboard|i'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect Obfuscated Powershell via use Clip.exe in Scripts\n\nHere is how  the given sigma rule operates: In order to detect obfuscated PowerShell via use Clip.exe in Scripts, you should monitor the loading of drivers within Windows environments, specifically looking for instances where the ImagePath property contains references to either 'Clipboard' or 'i'. This approach is pivotal in identifying scripts that attempt to leverage Clip.exe, which might be used in obfuscating malicious PowerShell scripts. The detection focuses on the 'driver_load' category, which is essential for catching the early stages of this obfuscation technique. Due to the potentially stealthy nature of such scripts, any matches should be treated with a high level of concern, although it is acknowledged that there might be scenarios where the detection could flag unknown false positives.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: driver_load\ndetection:\n    selection:\n        ImagePath|contains: '(Clipboard|i'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high",
      "question": "Obfuscated Powershell via use Clip.exe in Scripts",
      "answer": "In order to detect obfuscated PowerShell via use Clip.exe in Scripts, you should monitor the loading of drivers within Windows environments, specifically looking for instances where the ImagePath property contains references to either 'Clipboard' or 'i'. This approach is pivotal in identifying scripts that attempt to leverage Clip.exe, which might be used in obfuscating malicious PowerShell scripts. The detection focuses on the 'driver_load' category, which is essential for catching the early stages of this obfuscation technique. Due to the potentially stealthy nature of such scripts, any matches should be treated with a high level of concern, although it is acknowledged that there might be scenarios where the detection could flag unknown false positives."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting when an Google Workspace user is granted admin privileges..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when a Google Workspace user is granted admin privileges, you should monitor Google Workspace admin logs for events that indicate the granting of delegated admin privileges or admin privileges directly. This involves checking the logs from the Google Workspace Admin service, specifically focusing on events named GRANT_DELEGATED_ADMIN_PRIVILEGES and GRANT_ADMIN_PRIVILEGE. These events are crucial as they signify that a user's privileges have been elevated to an administrative level, potentially indicating an unauthorized attempt to gain elevated access within the organization's Google Workspace environment. It is important to note that there can be legitimate changes in admin role privileges by system administrators; hence these should be considered while evaluating potential security incidents. This detection strategy is rated with a medium level of urgency due to the significant impact that unauthorized admin access can have, yet it acknowledges the possibility of legitimate administrative actions.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: google_workspace\n    service: google_workspace.admin\ndetection:\n    selection:\n        eventService: admin.googleapis.com\n        eventName:\n            - GRANT_DELEGATED_ADMIN_PRIVILEGES\n            - GRANT_ADMIN_PRIVILEGE\n    condition: selection\nfalsepositives:\n    - Google Workspace admin role privileges, may be modified by system administrators.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: google_workspace\n    service: google_workspace.admin\ndetection:\n    selection:\n        eventService: admin.googleapis.com\n        eventName:\n            - GRANT_DELEGATED_ADMIN_PRIVILEGES\n            - GRANT_ADMIN_PRIVILEGE\n    condition: selection\nfalsepositives:\n    - Google Workspace admin role privileges, may be modified by system administrators.\nlevel: medium\n",
      "question": "when an Google Workspace user is granted admin privileges.",
      "answer": "In order to detect when a Google Workspace user is granted admin privileges, you should monitor Google Workspace admin logs for events that indicate the granting of delegated admin privileges or admin privileges directly. This involves checking the logs from the Google Workspace Admin service, specifically focusing on events named GRANT_DELEGATED_ADMIN_PRIVILEGES and GRANT_ADMIN_PRIVILEGE. These events are crucial as they signify that a user's privileges have been elevated to an administrative level, potentially indicating an unauthorized attempt to gain elevated access within the organization's Google Workspace environment. It is important to note that there can be legitimate changes in admin role privileges by system administrators; hence these should be considered while evaluating potential security incidents. This detection strategy is rated with a medium level of urgency due to the significant impact that unauthorized admin access can have, yet it acknowledges the possibility of legitimate administrative actions."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Rule to detect an adversary setting OabVirtualDirectory External URL property to a script in Exchange Management log.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect an adversary setting OabVirtualDirectory External URL property to a script in Exchange Management log, you should focus on monitoring the log data coming from Windows servers that are running the MS Exchange Management service. Look specifically for instances where the actions or commands involve 'Set-OabVirtualDirectory', 'ExternalUrl', 'Page_Load', or 'script'. These keywords are vital because they can indicate that an adversary is attempting to inject or modify the External URL property of an OabVirtualDirectory with a script, which could be malicious. This activity is crucial to monitor as it has been tagged with tactics and techniques that suggest manipulation of web properties to control server behaviors or to distribute malicious codes. The severity of these actions is considered high, and while there might be cases where these keywords appear in non-malicious contexts, those instances are unknown or rare. Thus, any detection of these keywords in relation to the MS Exchange Management service should be taken seriously and investigated promptly.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: msexchange-management\ndetection:\n    keywords:\n        '|all':\n            - 'Set-OabVirtualDirectory'\n            - 'ExternalUrl'\n            - 'Page_Load'\n            - 'script'\n    condition: keywords\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: msexchange-management\ndetection:\n    keywords:\n        '|all':\n            - 'Set-OabVirtualDirectory'\n            - 'ExternalUrl'\n            - 'Page_Load'\n            - 'script'\n    condition: keywords\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Rule to detect an adversary setting OabVirtualDirectory External URL property to a script in Exchange Management log",
      "answer": "In order to detect an adversary setting OabVirtualDirectory External URL property to a script in Exchange Management log, you should focus on monitoring the log data coming from Windows servers that are running the MS Exchange Management service. Look specifically for instances where the actions or commands involve 'Set-OabVirtualDirectory', 'ExternalUrl', 'Page_Load', or 'script'. These keywords are vital because they can indicate that an adversary is attempting to inject or modify the External URL property of an OabVirtualDirectory with a script, which could be malicious. This activity is crucial to monitor as it has been tagged with tactics and techniques that suggest manipulation of web properties to control server behaviors or to distribute malicious codes. The severity of these actions is considered high, and while there might be cases where these keywords appear in non-malicious contexts, those instances are unknown or rare. Thus, any detection of these keywords in relation to the MS Exchange Management service should be taken seriously and investigated promptly."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting SyncAppvPublishingServer process execution which usually utilized by adversaries to bypass PowerShell execution restrictions..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect SyncAppvPublishingServer process execution which is usually utilized by adversaries to bypass PowerShell execution restrictions, you should: Monitor Windows PowerShell modules for any occurrences of the process 'SyncAppvPublishingServer.exe'. This monitoring is imperative as the execution of this specific process can indicate an attempt to circumvent built-in security constraints within PowerShell, a common tactic employed by attackers to execute malicious scripts or commands undetected. It's essential to note that while this behavior can be a significant security concern, instances of 'App-V clients' running this process may not necessarily indicate a malicious activity but rather a legitimate use, and should be considered as potential false positives. The security level for this activity is classified as medium, underscoring a need for vigilance without immediate alarm.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_module\n    definition: 0ad03ef1-f21b-4a79-8ce8-e6900c54b65b\ndetection:\n    selection:\n        ContextInfo|contains: 'SyncAppvPublishingServer.exe'\n    condition: selection\nfalsepositives:\n    - App-V clients\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_module\n    definition: 0ad03ef1-f21b-4a79-8ce8-e6900c54b65b\ndetection:\n    selection:\n        ContextInfo|contains: 'SyncAppvPublishingServer.exe'\n    condition: selection\nfalsepositives:\n    - App-V clients\nlevel: medium\n",
      "question": "SyncAppvPublishingServer process execution which usually utilized by adversaries to bypass PowerShell execution restrictions.",
      "answer": "In order to detect SyncAppvPublishingServer process execution which is usually utilized by adversaries to bypass PowerShell execution restrictions, you should: Monitor Windows PowerShell modules for any occurrences of the process 'SyncAppvPublishingServer.exe'. This monitoring is imperative as the execution of this specific process can indicate an attempt to circumvent built-in security constraints within PowerShell, a common tactic employed by attackers to execute malicious scripts or commands undetected. It's essential to note that while this behavior can be a significant security concern, instances of 'App-V clients' running this process may not necessarily indicate a malicious activity but rather a legitimate use, and should be considered as potential false positives. The security level for this activity is classified as medium, underscoring a need for vigilance without immediate alarm."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: webserver\ndetection:\n    selection:\n        cs-method: 'POST'\n        cs-uri-query|contains: '/SAAS/jersey/manager/api/migrate/tenant' # Investigate the contents of the post body and look for any suspicious hosts that might be controlled by the attacker\n    condition: selection\nfalsepositives:\n    - Vulnerability scanners\n    - Legitimate access to the URI\nlevel: medium\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect possible exploitation of VMware Workspace ONE Access Admin Remote Code Execution vulnerability as described in CVE-2022-31659\n\nHere is how  the given sigma rule operates: In order to detect possible exploitation of VMware Workspace ONE Access Admin Remote Code Execution vulnerability as described in CVE-2022-31659, you should monitor your web server logs for POST requests that target the URI '/SAAS/jersey/manager/api/migrate/tenant'. This specific path is crucial as it may be used in attempts to exploit the mentioned vulnerability. Ensuring to scrutinize the contents of the post body for any indications of suspicious hosts, which could be under the control of an attacker, is a fundamental part of the detection process. However, it's important to bear in mind that some legitimate vulnerability scanners or authorized access could trigger similar patterns, hence they are considered as potential sources of false positives. This investigative measure has been categorized with a medium level of urgency.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: webserver\ndetection:\n    selection:\n        cs-method: 'POST'\n        cs-uri-query|contains: '/SAAS/jersey/manager/api/migrate/tenant' # Investigate the contents of the post body and look for any suspicious hosts that might be controlled by the attacker\n    condition: selection\nfalsepositives:\n    - Vulnerability scanners\n    - Legitimate access to the URI\nlevel: medium\n",
      "question": "possible exploitation of VMware Workspace ONE Access Admin Remote Code Execution vulnerability as described in CVE-2022-31659",
      "answer": "In order to detect possible exploitation of VMware Workspace ONE Access Admin Remote Code Execution vulnerability as described in CVE-2022-31659, you should monitor your web server logs for POST requests that target the URI '/SAAS/jersey/manager/api/migrate/tenant'. This specific path is crucial as it may be used in attempts to exploit the mentioned vulnerability. Ensuring to scrutinize the contents of the post body for any indications of suspicious hosts, which could be under the control of an attacker, is a fundamental part of the detection process. However, it's important to bear in mind that some legitimate vulnerability scanners or authorized access could trigger similar patterns, hence they are considered as potential sources of false positives. This investigative measure has been categorized with a medium level of urgency."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting possible suspicious driver is being installed via pnputil.exe lolbin.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when a possible suspicious driver is being installed via pnputil.exe lolbin, you should: monitor Windows process creation events for instances where the command line includes specific indicators such as '-i', '/install', '-a', '/add-driver', or ends with a '.inf' file extension. Additionally, the process image name should conclude with '\\pnputil.exe'. Keep an eye out for the computer name, user identity, command line, and parent command line in the logs to aid in the investigation. Be aware that legitimate administrative activities may use pnputil.exe for proper driver installations; hence, verify the context of its usage to reduce false positives. Specifically, scrutinize activities initiated by unfamiliar users or processes to ensure they are expected within your environment.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - '-i'\n            - '/install'\n            - '-a'\n            - '/add-driver'\n            - '.inf'\n        Image|endswith: '\\pnputil.exe'\n    condition: selection\nfields:\n    - ComputerName\n    - User\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Pnputil.exe being used may be performed by a system administrator.\n    - Verify whether the user identity, user agent, and/or hostname should be making changes in your environment.\n    - Pnputil.exe being executed from unfamiliar users should be investigated. If known behavior is causing false positives, it can be exempted from the rule.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - '-i'\n            - '/install'\n            - '-a'\n            - '/add-driver'\n            - '.inf'\n        Image|endswith: '\\pnputil.exe'\n    condition: selection\nfields:\n    - ComputerName\n    - User\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Pnputil.exe being used may be performed by a system administrator.\n    - Verify whether the user identity, user agent, and/or hostname should be making changes in your environment.\n    - Pnputil.exe being executed from unfamiliar users should be investigated. If known behavior is causing false positives, it can be exempted from the rule.\nlevel: medium\n",
      "question": "possible suspicious driver is being installed via pnputil.exe lolbin",
      "answer": "In order to detect when a possible suspicious driver is being installed via pnputil.exe lolbin, you should: monitor Windows process creation events for instances where the command line includes specific indicators such as '-i', '/install', '-a', '/add-driver', or ends with a '.inf' file extension. Additionally, the process image name should conclude with '\\pnputil.exe'. Keep an eye out for the computer name, user identity, command line, and parent command line in the logs to aid in the investigation. Be aware that legitimate administrative activities may use pnputil.exe for proper driver installations; hence, verify the context of its usage to reduce false positives. Specifically, scrutinize activities initiated by unfamiliar users or processes to ensure they are expected within your environment."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting keywords from well-known PowerShell exploitation frameworks.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect keywords from well-known PowerShell exploitation frameworks, you should: Monitor PowerShell script activity on Windows systems by enabling Script Block Logging. This approach requires looking for specific keywords in the script text that are commonly associated with exploitation frameworks and tools, such as 'AdjustTokenPrivileges', 'IMAGE_NT_OPTIONAL_HDR64_MAGIC', 'Metasploit', 'Microsoft.Win32.UnsafeNativeMethods', 'Mimikatz', 'MiniDumpWriteDump', 'PAGE_EXECUTE_READ', 'ReadProcessMemory.Invoke', 'SE_PRIVILEGE_ENABLED', 'SECURITY_DELEGATION', 'TOKEN_ADJUST_PRIVILEGES', 'TOKEN_ALL_ACCESS', 'TOKEN_ASSIGN_PRIMARY', 'TOKEN_DUPLICATE', 'TOKEN_ELEVATION', 'TOKEN_IMPERSONATE', 'TOKEN_INFORMATION_CLASS', 'TOKEN_PRIVILEGES', 'TOKEN_QUERY'. These indications could suggest an attempt to exploit PowerShell for malicious activities such as privilege escalation, memory dumping, or security tokens manipulation. Given the wide range of script uses, it might be necessary to adjust the sensitivity of the detection to match the specifics of the environment to minimize false positives. This approach is aligned with medium-level security monitoring practices.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains:\n            - 'AdjustTokenPrivileges'\n            - 'IMAGE_NT_OPTIONAL_HDR64_MAGIC'\n            #- 'LSA_UNICODE_STRING'\n            - 'Metasploit'\n            - 'Microsoft.Win32.UnsafeNativeMethods'\n            - 'Mimikatz'\n            - 'MiniDumpWriteDump'\n            - 'PAGE_EXECUTE_READ'\n            - 'ReadProcessMemory.Invoke'\n            - 'SE_PRIVILEGE_ENABLED'\n            - 'SECURITY_DELEGATION'\n            - 'TOKEN_ADJUST_PRIVILEGES'\n            - 'TOKEN_ALL_ACCESS'\n            - 'TOKEN_ASSIGN_PRIMARY'\n            - 'TOKEN_DUPLICATE'\n            - 'TOKEN_ELEVATION'\n            - 'TOKEN_IMPERSONATE'\n            - 'TOKEN_INFORMATION_CLASS'\n            - 'TOKEN_PRIVILEGES'\n            - 'TOKEN_QUERY'\n    condition: selection\nfalsepositives:\n    - Depending on the scripts, this rule might require some initial tunning to fit the environment\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains:\n            - 'AdjustTokenPrivileges'\n            - 'IMAGE_NT_OPTIONAL_HDR64_MAGIC'\n            #- 'LSA_UNICODE_STRING'\n            - 'Metasploit'\n            - 'Microsoft.Win32.UnsafeNativeMethods'\n            - 'Mimikatz'\n            - 'MiniDumpWriteDump'\n            - 'PAGE_EXECUTE_READ'\n            - 'ReadProcessMemory.Invoke'\n            - 'SE_PRIVILEGE_ENABLED'\n            - 'SECURITY_DELEGATION'\n            - 'TOKEN_ADJUST_PRIVILEGES'\n            - 'TOKEN_ALL_ACCESS'\n            - 'TOKEN_ASSIGN_PRIMARY'\n            - 'TOKEN_DUPLICATE'\n            - 'TOKEN_ELEVATION'\n            - 'TOKEN_IMPERSONATE'\n            - 'TOKEN_INFORMATION_CLASS'\n            - 'TOKEN_PRIVILEGES'\n            - 'TOKEN_QUERY'\n    condition: selection\nfalsepositives:\n    - Depending on the scripts, this rule might require some initial tunning to fit the environment\nlevel: medium\n",
      "question": "keywords from well-known PowerShell exploitation frameworks",
      "answer": "In order to detect keywords from well-known PowerShell exploitation frameworks, you should: Monitor PowerShell script activity on Windows systems by enabling Script Block Logging. This approach requires looking for specific keywords in the script text that are commonly associated with exploitation frameworks and tools, such as 'AdjustTokenPrivileges', 'IMAGE_NT_OPTIONAL_HDR64_MAGIC', 'Metasploit', 'Microsoft.Win32.UnsafeNativeMethods', 'Mimikatz', 'MiniDumpWriteDump', 'PAGE_EXECUTE_READ', 'ReadProcessMemory.Invoke', 'SE_PRIVILEGE_ENABLED', 'SECURITY_DELEGATION', 'TOKEN_ADJUST_PRIVILEGES', 'TOKEN_ALL_ACCESS', 'TOKEN_ASSIGN_PRIMARY', 'TOKEN_DUPLICATE', 'TOKEN_ELEVATION', 'TOKEN_IMPERSONATE', 'TOKEN_INFORMATION_CLASS', 'TOKEN_PRIVILEGES', 'TOKEN_QUERY'. These indications could suggest an attempt to exploit PowerShell for malicious activities such as privilege escalation, memory dumping, or security tokens manipulation. Given the wide range of script uses, it might be necessary to adjust the sensitivity of the detection to match the specifics of the environment to minimize false positives. This approach is aligned with medium-level security monitoring practices."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting This rule will monitor executable and script file creation by office applications. Please add more file extensions or magic bytes to the logic of your choice..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to monitor executable and script file creation by office applications, you should: Focus on tracking file events within Windows operating systems, particularly those involving office applications like Word, Excel, PowerPoint, and Outlook. Look for instances where these applications are responsible for creating files that end with specific extensions such as \".exe\", \".dll\", \".ocx\", \".com\", \".ps1\", \".vbs\", \".sys\", \".bat\", \".scr\", or \".proj\", which are typically associated with executable files and scripts. Additionally, pay close attention to files that start with the magic bytes \"4D5A\", indicating they are executable. Monitoring such events involves looking for matches where an office application has either created files with the aforementioned extensions or files starting with the specified magic bytes. Given the potential for unknown false positives, the severity level of these detections is considered high. This approach is aligned with various tactics and techniques, particularly those concerning the execution of malicious files, persistence mechanisms, and potential evasion methods.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: file_event\ndetection:\n    #useful_information: Please add more file extensions and magic bytes to the logic of your choice.\n    selection1:\n        Image|endswith:\n            - '\\winword.exe'\n            - '\\excel.exe'\n            - '\\powerpnt.exe'\n            - '\\outlook.exe'\n    selection2:\n        FileName|endswith:\n            - \".exe\"\n            - \".dll\"\n            - \".ocx\"\n            - \".com\"\n            - \".ps1\"\n            - \".vbs\"\n            - \".sys\"\n            - \".bat\"\n            - \".scr\"\n            - \".proj\"\n    selection3:\n        FileMagicBytes|startswith:\n            - \"4D5A\"\n    condition: selection1 and (selection2 or selection3)\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: file_event\ndetection:\n    #useful_information: Please add more file extensions and magic bytes to the logic of your choice.\n    selection1:\n        Image|endswith:\n            - '\\winword.exe'\n            - '\\excel.exe'\n            - '\\powerpnt.exe'\n            - '\\outlook.exe'\n    selection2:\n        FileName|endswith:\n            - \".exe\"\n            - \".dll\"\n            - \".ocx\"\n            - \".com\"\n            - \".ps1\"\n            - \".vbs\"\n            - \".sys\"\n            - \".bat\"\n            - \".scr\"\n            - \".proj\"\n    selection3:\n        FileMagicBytes|startswith:\n            - \"4D5A\"\n    condition: selection1 and (selection2 or selection3)\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "This rule will monitor executable and script file creation by office applications. Please add more file extensions or magic bytes to the logic of your choice.",
      "answer": "In order to monitor executable and script file creation by office applications, you should: Focus on tracking file events within Windows operating systems, particularly those involving office applications like Word, Excel, PowerPoint, and Outlook. Look for instances where these applications are responsible for creating files that end with specific extensions such as \".exe\", \".dll\", \".ocx\", \".com\", \".ps1\", \".vbs\", \".sys\", \".bat\", \".scr\", or \".proj\", which are typically associated with executable files and scripts. Additionally, pay close attention to files that start with the magic bytes \"4D5A\", indicating they are executable. Monitoring such events involves looking for matches where an office application has either created files with the aforementioned extensions or files starting with the specified magic bytes. Given the potential for unknown false positives, the severity level of these detections is considered high. This approach is aligned with various tactics and techniques, particularly those concerning the execution of malicious files, persistence mechanisms, and potential evasion methods."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: Setvalue\n        TargetObject: 'HKCU\\Software\\Classes\\Folder\\shell\\open\\command\\DelegateExecute'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect changes to 'HKCU\\Software\\Classes\\Folder\\shell\\open\\command\\DelegateExecute'\n\nHere is how  the given sigma rule operates: In order to detect changes to 'HKCU\\Software\\Classes\\Folder\\shell\\open\\command\\DelegateExecute', you should:\n\nMonitor for registry settings changes on Windows systems, particularly focusing on modification events (Setvalue) targeting the registry key `HKCU\\Software\\Classes\\Folder\\shell\\open\\command\\DelegateExecute`. This observation should come from logs pertaining to registry settings adjustments. Performing this specific monitoring is crucial since unauthorized or malicious modifications to this registry key could impact how folders are handled or opened in the Windows environment, which could be an indication of a security threat or an attempt to establish persistence mechanisms by adversaries. Be aware that while detecting such changes is vital for maintaining system security, not all alterations to this registry key may represent malicious activity, thus some alerts might not be tied to security incidents. Nonetheless, due to the sensitivity of the registry key in question, any changes are considered potentially significant and warranting a high level of scrutiny.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: Setvalue\n        TargetObject: 'HKCU\\Software\\Classes\\Folder\\shell\\open\\command\\DelegateExecute'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "changes to 'HKCU\\Software\\Classes\\Folder\\shell\\open\\command\\DelegateExecute'",
      "answer": "In order to detect changes to 'HKCU\\Software\\Classes\\Folder\\shell\\open\\command\\DelegateExecute', you should:\n\nMonitor for registry settings changes on Windows systems, particularly focusing on modification events (Setvalue) targeting the registry key `HKCU\\Software\\Classes\\Folder\\shell\\open\\command\\DelegateExecute`. This observation should come from logs pertaining to registry settings adjustments. Performing this specific monitoring is crucial since unauthorized or malicious modifications to this registry key could impact how folders are handled or opened in the Windows environment, which could be an indication of a security threat or an attempt to establish persistence mechanisms by adversaries. Be aware that while detecting such changes is vital for maintaining system security, not all alterations to this registry key may represent malicious activity, thus some alerts might not be tied to security incidents. Nonetheless, due to the sensitivity of the registry key in question, any changes are considered potentially significant and warranting a high level of scrutiny."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    product: windows\n    service: ldap_debug\n    definition: 'Requirements: Microsoft-Windows-LDAP-Client/Debug ETW logging'\ndetection:\n    generic_search:\n        EventID: 30\n        SearchFilter|contains:\n            - '(groupType:1.2.840.113556.1.4.803:=2147483648)'\n            - '(groupType:1.2.840.113556.1.4.803:=2147483656)'\n            - '(groupType:1.2.840.113556.1.4.803:=2147483652)'\n            - '(groupType:1.2.840.113556.1.4.803:=2147483650)'\n            - '(sAMAccountType=805306369)'\n            - '(sAMAccountType=805306368)'\n            - '(sAMAccountType=536870913)'\n            - '(sAMAccountType=536870912)'\n            - '(sAMAccountType=268435457)'\n            - '(sAMAccountType=268435456)'\n            - '(objectCategory=groupPolicyContainer)'\n            - '(objectCategory=organizationalUnit)'\n            - '(objectCategory=Computer)'\n            - '(objectCategory=nTDSDSA)'\n            - '(objectCategory=server)'\n            - '(objectCategory=domain)'\n            - '(objectCategory=person)'\n            - '(objectCategory=group)'\n            - '(objectCategory=user)'\n            - '(objectClass=trustedDomain)'\n            - '(objectClass=computer)'\n            - '(objectClass=server)'\n            - '(objectClass=group)'\n            - '(objectClass=user)'\n            - '(primaryGroupID=521)'\n            - '(primaryGroupID=516)'\n            - '(primaryGroupID=515)'\n            - '(primaryGroupID=512)'\n            - 'Domain Admins'\n            - 'objectGUID=\\*'\n            - '(schemaIDGUID=\\*)'\n    suspicious_flag:\n        EventID: 30\n        SearchFilter|contains:\n            - '(userAccountControl:1.2.840.113556.1.4.803:=4194304)'\n            - '(userAccountControl:1.2.840.113556.1.4.803:=2097152)'\n            - '!(userAccountControl:1.2.840.113556.1.4.803:=1048574)'\n            - '(userAccountControl:1.2.840.113556.1.4.803:=524288)'\n            - '(userAccountControl:1.2.840.113556.1.4.803:=65536)'\n            - '(userAccountControl:1.2.840.113556.1.4.803:=8192)'\n            - '(userAccountControl:1.2.840.113556.1.4.803:=544)'\n            - '!(UserAccountControl:1.2.840.113556.1.4.803:=2)'\n            - 'msDS-AllowedToActOnBehalfOfOtherIdentity'\n            - 'msDS-AllowedToDelegateTo'\n            - 'msDS-GroupManagedServiceAccount'\n            - '(accountExpires=9223372036854775807)'\n            - '(accountExpires=0)'\n            - '(adminCount=1)'\n            - 'ms-MCS-AdmPwd'\n    narrow_down_filter:\n        EventID: 30\n        SearchFilter|contains:\n            - '(domainSid=*)'\n            - '(objectSid=*)'\n    condition: (generic_search and not narrow_down_filter) or suspicious_flag\nlevel: medium\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect potential Active Directory enumeration via LDAP\n\nHere is how  the given sigma rule operates: In order to detect potential Active Directory enumeration via LDAP, you should monitor for specific patterns and searches in LDAP debug logs under the Windows LDAP Client Debug ETW logging category. The detection strategy encompasses several key aspects:\n\n1. **Log Source**: Focus on the LDAP debug logging for the event ID 30. This is crucial for identifying the execution of Active Directory enumeration operations.\n\n2. **Detection Criteria**: Look for searches that match specific criteria indicating potential enumeration activities. These include searches for various Active Directory objects and attributes, such as groups, users, computers, organizational units, domain policies, and more. Specifically, queries containing filters for group types, SAM account types, object categories, object classes, and primary group IDs are indicative of enumeration attempts. Such searches might attempt to list sensitive groups like Domain Admins or query based on unique identifiers like objectGUID or schemaIDGUID.\n\n3. **Suspicious Flags**: Additional focus should be placed on searches that include suspicious flags within the UserAccountControl attribute, checks for admin rights (adminCount=1), special flags indicating permissions to act on behalf of other identities, or passwords within managed service accounts. Searches that inquire about account expiration or delegation permissions are also suspect.\n\n4. **Narrowing Down Specificity**: Not all searches are suspicious, and the context is key. Searches that uniquely identify objects by domain SID or object SID without corresponding suspicious criteria are less likely to be part of active enumeration and could be legitimate queries.\n\n5. **Condition for Alerting**: Alerts should be generated when there are searches that meet the generic, suspicious criteria without being narrowly focused on specific identifiers, or if any searches contain suspicious flags regardless of specificity.\n\nBy monitoring and analyzing LDAP debug logs for these indicators, organizations can identify and investigate potential unauthorized Active Directory enumeration activities. These are tagged under tactics and techniques such as Discovery and Credential Access, highlighting the use of these enumeration techniques by attackers to gather information or escalate privileges within a network.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: ldap_debug\n    definition: 'Requirements: Microsoft-Windows-LDAP-Client/Debug ETW logging'\ndetection:\n    generic_search:\n        EventID: 30\n        SearchFilter|contains:\n            - '(groupType:1.2.840.113556.1.4.803:=2147483648)'\n            - '(groupType:1.2.840.113556.1.4.803:=2147483656)'\n            - '(groupType:1.2.840.113556.1.4.803:=2147483652)'\n            - '(groupType:1.2.840.113556.1.4.803:=2147483650)'\n            - '(sAMAccountType=805306369)'\n            - '(sAMAccountType=805306368)'\n            - '(sAMAccountType=536870913)'\n            - '(sAMAccountType=536870912)'\n            - '(sAMAccountType=268435457)'\n            - '(sAMAccountType=268435456)'\n            - '(objectCategory=groupPolicyContainer)'\n            - '(objectCategory=organizationalUnit)'\n            - '(objectCategory=Computer)'\n            - '(objectCategory=nTDSDSA)'\n            - '(objectCategory=server)'\n            - '(objectCategory=domain)'\n            - '(objectCategory=person)'\n            - '(objectCategory=group)'\n            - '(objectCategory=user)'\n            - '(objectClass=trustedDomain)'\n            - '(objectClass=computer)'\n            - '(objectClass=server)'\n            - '(objectClass=group)'\n            - '(objectClass=user)'\n            - '(primaryGroupID=521)'\n            - '(primaryGroupID=516)'\n            - '(primaryGroupID=515)'\n            - '(primaryGroupID=512)'\n            - 'Domain Admins'\n            - 'objectGUID=\\*'\n            - '(schemaIDGUID=\\*)'\n    suspicious_flag:\n        EventID: 30\n        SearchFilter|contains:\n            - '(userAccountControl:1.2.840.113556.1.4.803:=4194304)'\n            - '(userAccountControl:1.2.840.113556.1.4.803:=2097152)'\n            - '!(userAccountControl:1.2.840.113556.1.4.803:=1048574)'\n            - '(userAccountControl:1.2.840.113556.1.4.803:=524288)'\n            - '(userAccountControl:1.2.840.113556.1.4.803:=65536)'\n            - '(userAccountControl:1.2.840.113556.1.4.803:=8192)'\n            - '(userAccountControl:1.2.840.113556.1.4.803:=544)'\n            - '!(UserAccountControl:1.2.840.113556.1.4.803:=2)'\n            - 'msDS-AllowedToActOnBehalfOfOtherIdentity'\n            - 'msDS-AllowedToDelegateTo'\n            - 'msDS-GroupManagedServiceAccount'\n            - '(accountExpires=9223372036854775807)'\n            - '(accountExpires=0)'\n            - '(adminCount=1)'\n            - 'ms-MCS-AdmPwd'\n    narrow_down_filter:\n        EventID: 30\n        SearchFilter|contains:\n            - '(domainSid=*)'\n            - '(objectSid=*)'\n    condition: (generic_search and not narrow_down_filter) or suspicious_flag\nlevel: medium\n",
      "question": "potential Active Directory enumeration via LDAP",
      "answer": "In order to detect potential Active Directory enumeration via LDAP, you should monitor for specific patterns and searches in LDAP debug logs under the Windows LDAP Client Debug ETW logging category. The detection strategy encompasses several key aspects:\n\n1. **Log Source**: Focus on the LDAP debug logging for the event ID 30. This is crucial for identifying the execution of Active Directory enumeration operations.\n\n2. **Detection Criteria**: Look for searches that match specific criteria indicating potential enumeration activities. These include searches for various Active Directory objects and attributes, such as groups, users, computers, organizational units, domain policies, and more. Specifically, queries containing filters for group types, SAM account types, object categories, object classes, and primary group IDs are indicative of enumeration attempts. Such searches might attempt to list sensitive groups like Domain Admins or query based on unique identifiers like objectGUID or schemaIDGUID.\n\n3. **Suspicious Flags**: Additional focus should be placed on searches that include suspicious flags within the UserAccountControl attribute, checks for admin rights (adminCount=1), special flags indicating permissions to act on behalf of other identities, or passwords within managed service accounts. Searches that inquire about account expiration or delegation permissions are also suspect.\n\n4. **Narrowing Down Specificity**: Not all searches are suspicious, and the context is key. Searches that uniquely identify objects by domain SID or object SID without corresponding suspicious criteria are less likely to be part of active enumeration and could be legitimate queries.\n\n5. **Condition for Alerting**: Alerts should be generated when there are searches that meet the generic, suspicious criteria without being narrowly focused on specific identifiers, or if any searches contain suspicious flags regardless of specificity.\n\nBy monitoring and analyzing LDAP debug logs for these indicators, organizations can identify and investigate potential unauthorized Active Directory enumeration activities. These are tagged under tactics and techniques such as Discovery and Credential Access, highlighting the use of these enumeration techniques by attackers to gather information or escalate privileges within a network."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_1:\n        CommandLine|contains|all:\n            - 'mshta' # Covered by cc7abbd0-762b-41e3-8a26-57ad50d2eea3\n            - '.zip'\n    selection_2:\n        ParentImage: 'C:\\Windows\\System32\\wbem\\wmiprvse.exe' # Covered by 8a582fe2-0882-4b89-a82a-da6b2dc32937\n        Image: 'C:\\Windows\\System32\\mshta.exe'\n    selection_3:\n        ParentImage|contains: ':\\Users\\Public\\'\n        Image: 'C:\\Windows\\System32\\rundll32.exe'\n    condition: 1 of selection_*\nfalsepositives:\n    - Should not be any false positives\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect different process creation events as described in Malwarebytes's threat report on Lazarus group activity\n\nHere is how  the given sigma rule operates: In order to detect different process creation events as described in Malwarebytes's threat report on Lazarus group activity, you should: Look for the creation of processes in Windows environments, specifically focusing on three primary patterns that indicate potentially malicious activity. The first pattern involves the use of the 'mshta' command line utility in conjunction with '.zip' files, which can be indicative of an attempt to execute scripts or HTML applications, typical in various attack scenarios. The second pattern to be vigilant of includes processes spawned by 'C:\\Windows\\System32\\wbem\\wmiprvse.exe' that then launch 'C:\\Windows\\System32\\mshta.exe', hinting at a suspicious parent-child process relationship often used for executing malicious HTA files. Lastly, observe for instances where 'C:\\Windows\\System32\\rundll32.exe' is launched by any process residing within the 'C:\\Users\\Public\\' directory path, as this is a common tactic employed for stealthy code execution. Given the high level of potential threat associated with these patterns, they are deemed highly reliable indicators of compromise with no expected false positives. The methods of detection align with tactics and techniques related to Execution, Persistence, Privilege Escalation, and Defense Evasion.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_1:\n        CommandLine|contains|all:\n            - 'mshta' # Covered by cc7abbd0-762b-41e3-8a26-57ad50d2eea3\n            - '.zip'\n    selection_2:\n        ParentImage: 'C:\\Windows\\System32\\wbem\\wmiprvse.exe' # Covered by 8a582fe2-0882-4b89-a82a-da6b2dc32937\n        Image: 'C:\\Windows\\System32\\mshta.exe'\n    selection_3:\n        ParentImage|contains: ':\\Users\\Public\\'\n        Image: 'C:\\Windows\\System32\\rundll32.exe'\n    condition: 1 of selection_*\nfalsepositives:\n    - Should not be any false positives\nlevel: high\n",
      "question": "different process creation events as described in Malwarebytes's threat report on Lazarus group activity",
      "answer": "In order to detect different process creation events as described in Malwarebytes's threat report on Lazarus group activity, you should: Look for the creation of processes in Windows environments, specifically focusing on three primary patterns that indicate potentially malicious activity. The first pattern involves the use of the 'mshta' command line utility in conjunction with '.zip' files, which can be indicative of an attempt to execute scripts or HTML applications, typical in various attack scenarios. The second pattern to be vigilant of includes processes spawned by 'C:\\Windows\\System32\\wbem\\wmiprvse.exe' that then launch 'C:\\Windows\\System32\\mshta.exe', hinting at a suspicious parent-child process relationship often used for executing malicious HTA files. Lastly, observe for instances where 'C:\\Windows\\System32\\rundll32.exe' is launched by any process residing within the 'C:\\Users\\Public\\' directory path, as this is a common tactic employed for stealthy code execution. Given the high level of potential threat associated with these patterns, they are deemed highly reliable indicators of compromise with no expected false positives. The methods of detection align with tactics and techniques related to Execution, Persistence, Privilege Escalation, and Defense Evasion."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    product: windows\n    service: appxpackaging-om\ndetection:\n    selection:\n        EventID: 157\n        # Add more known suspicious/malicious certificates used in different attacks\n        subjectName: 'CN=Foresee Consulting Inc., O=Foresee Consulting Inc., L=North York, S=Ontario, C=CA, SERIALNUMBER=1004913-1, OID.1.3.6.1.4.1.311.60.2.1.3=CA, OID.2.5.4.15=Private Organization'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect execution of AppX packages with known suspicious or malicious signature\n\nHere is how  the given sigma rule operates: In order to detect execution of AppX packages with known suspicious or malicious signature, you should monitor Windows application packaging logs for specific events related to the installation or execution of AppX packages. Focus your attention on events with the ID 157 within the AppX packaging service logs. This particular event ID indicates the activation of an AppX package, which could potentially be harmful if it originates from untrusted sources. Specifically, lookout for packages signed by the certificate with a subject name of \"CN=Foresee Consulting Inc., O=Foresee Consulting Inc., L=North York, S=Ontario, C=CA, SERIALNUMBER=1004913-1, OID.1.3.6.1.4.1.311.60.2.1.3=CA, OID.2.5.4.15=Private Organization\". This certificate has been identified as suspicious or malicious based on its usage in various attacks. It is crucial to be aware that there might be instances where this detection could trigger false positives, although the circumstances under which these might occur are unknown. The severity level for this detection has been set to medium, indicating a balanced caution between overlooking potential threats and overreacting to benign activities. This detection is aligned with techniques identified by MITRE ATT&CK relating to the abuse of application deployment systems for the purpose of executing untrusted code.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: appxpackaging-om\ndetection:\n    selection:\n        EventID: 157\n        # Add more known suspicious/malicious certificates used in different attacks\n        subjectName: 'CN=Foresee Consulting Inc., O=Foresee Consulting Inc., L=North York, S=Ontario, C=CA, SERIALNUMBER=1004913-1, OID.1.3.6.1.4.1.311.60.2.1.3=CA, OID.2.5.4.15=Private Organization'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "execution of AppX packages with known suspicious or malicious signature",
      "answer": "In order to detect execution of AppX packages with known suspicious or malicious signature, you should monitor Windows application packaging logs for specific events related to the installation or execution of AppX packages. Focus your attention on events with the ID 157 within the AppX packaging service logs. This particular event ID indicates the activation of an AppX package, which could potentially be harmful if it originates from untrusted sources. Specifically, lookout for packages signed by the certificate with a subject name of \"CN=Foresee Consulting Inc., O=Foresee Consulting Inc., L=North York, S=Ontario, C=CA, SERIALNUMBER=1004913-1, OID.1.3.6.1.4.1.311.60.2.1.3=CA, OID.2.5.4.15=Private Organization\". This certificate has been identified as suspicious or malicious based on its usage in various attacks. It is crucial to be aware that there might be instances where this detection could trigger false positives, although the circumstances under which these might occur are unknown. The severity level for this detection has been set to medium, indicating a balanced caution between overlooking potential threats and overreacting to benign activities. This detection is aligned with techniques identified by MITRE ATT&CK relating to the abuse of application deployment systems for the purpose of executing untrusted code."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting possible search for office tokens via CLI by looking for the string \"eyJ0eX\". This string is used as an anchor to look for the start of the JWT token used by office and similar apps..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect possible search for office tokens via CLI by looking for the string \"eyJ0eX\". This string is used as an anchor to look for the start of the JWT token used by office and similar apps, you should: Monitor the creation of processes on Windows systems for command lines that contain specific strings, which could indicate an attempt to search for or manipulate JWT tokens associated with Office applications or similar software. The targeted strings to watch for in the command line inputs include 'eyJ0eXAiOi', ' eyJ0eX', ' \"eyJ0eX\"', and \" 'eyJ0eX'\". These strings are part of the structure of JWT tokens and their presence in command lines could signify malicious attempts to interact with these tokens. The detection of such actions is of medium level importance and should be further analyzed, although it's acknowledged that some legitimate actions might be mistakenly identified (false positives are unknown).",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - 'eyJ0eXAiOi' # {\"typ\":\n            - ' eyJ0eX'\n            - ' \"eyJ0eX\"'\n            - \" 'eyJ0eX'\"\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - 'eyJ0eXAiOi' # {\"typ\":\n            - ' eyJ0eX'\n            - ' \"eyJ0eX\"'\n            - \" 'eyJ0eX'\"\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "possible search for office tokens via CLI by looking for the string \"eyJ0eX\". This string is used as an anchor to look for the start of the JWT token used by office and similar apps.",
      "answer": "In order to detect possible search for office tokens via CLI by looking for the string \"eyJ0eX\". This string is used as an anchor to look for the start of the JWT token used by office and similar apps, you should: Monitor the creation of processes on Windows systems for command lines that contain specific strings, which could indicate an attempt to search for or manipulate JWT tokens associated with Office applications or similar software. The targeted strings to watch for in the command line inputs include 'eyJ0eXAiOi', ' eyJ0eX', ' \"eyJ0eX\"', and \" 'eyJ0eX'\". These strings are part of the structure of JWT tokens and their presence in command lines could signify malicious attempts to interact with these tokens. The detection of such actions is of medium level importance and should be further analyzed, although it's acknowledged that some legitimate actions might be mistakenly identified (false positives are unknown)."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting PIM elevation is approved or denied. Outside of normal operations should be investigated..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when a PIM (Privileged Identity Management) elevation is approved or denied, which is outside of normal operations and should be investigated, you should: Focus on monitoring Azure audit logs. Specifically, look for any audit log entries that contain messages indicating that a request has been either approved or denied. This detection is crucial because unauthorized or abnormal approvals or denials of privilege elevations can indicate potential security breaches or misuse of privileges, which are significant concerns for maintaining the integrity and security of an organization's information systems. It's essential to note that legitimate administrative activities, where an actual admin is using the PIM, might lead to false positives. Therefore, these occurrences should be carefully examined to differentiate between normal administrative actions and potential security incidents. The severity level for this kind of activity is considered high due to the potential impact of unauthorized access or privilege escalation.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: azure\n    service: auditlogs\ndetection:\n    selection:\n        properties.message: Request Approved/Denied\n    condition: selection\nfalsepositives:\n    - Actual admin using PIM.\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: azure\n    service: auditlogs\ndetection:\n    selection:\n        properties.message: Request Approved/Denied\n    condition: selection\nfalsepositives:\n    - Actual admin using PIM.\nlevel: high\n",
      "question": "PIM elevation is approved or denied. Outside of normal operations should be investigated.",
      "answer": "In order to detect when a PIM (Privileged Identity Management) elevation is approved or denied, which is outside of normal operations and should be investigated, you should: Focus on monitoring Azure audit logs. Specifically, look for any audit log entries that contain messages indicating that a request has been either approved or denied. This detection is crucial because unauthorized or abnormal approvals or denials of privilege elevations can indicate potential security breaches or misuse of privileges, which are significant concerns for maintaining the integrity and security of an organization's information systems. It's essential to note that legitimate administrative activities, where an actual admin is using the PIM, might lead to false positives. Therefore, these occurrences should be carefully examined to differentiate between normal administrative actions and potential security incidents. The severity level for this kind of activity is considered high due to the potential impact of unauthorized access or privilege escalation."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting attempts to create a DLL file to a known desktop application dependencies folder such as Slack, Teams or OneDrive and by an unusual process. This may indicate an attempt to load a malicious module via DLL search order hijacking..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect attempts to create a DLL file to a known desktop application dependencies folder such as Slack, Teams, or OneDrive by an unusual process, which may indicate an attempt to load a malicious module via DLL search order hijacking, you should: Monitor Windows file events for the creation of DLL files in specific user folders, particularly within the AppData directory that are associated with popular applications like Microsoft OneDrive, Microsoft Teams, Slack, and Visual Studio Code. Key processes to watch include Word, Excel, PowerPoint, Access, Publisher, Filter Loader, Command Prompt, Certutil, HTML Application Host, CScript, WScript, Curl, PowerShell, and PowerShell Core that are trying to create '.dll' files in these directories. Be cautious of any such activities not initiated by 'cmd.exe' when examining file paths that include user directories, the AppData folder, and particularly paths involving Microsoft OneDrive - to reduce false positives, especially if the file paths also contain specific API sets like 'api-ms-win-core-'. This monitoring is essential to spot tactics and techniques associated with initial access attempts and defense evasion, particularly those linked with spearphishing for malicious attachment delivery (T1566, T1566.001) and the hijacking of DLL search order to evade defenses (T1574, T1574.001).",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: file_event\ntags:\n    - attack.t1566\n    - attack.t1566.001\n    - attack.initial_access\n    - attack.t1574\n    - attack.t1574.001\n    - attack.defense_evasion\ndetection:\n    selection:\n        Image|endswith:\n        # add more processes when you find them\n            - '\\winword.exe'\n            - '\\excel.exe'\n            - '\\powerpnt.exe'\n            - '\\MSACCESS.EXE'\n            - '\\MSPUB.EXE'\n            - '\\fltldr.exe'\n            - '\\cmd.exe'\n            - '\\certutil.exe'\n            - '\\mshta.exe'\n            - '\\cscript.exe'\n            - '\\wscript.exe'\n            - '\\curl.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        TargetFilename|endswith: '.dll'\n        TargetFilename|contains|all:\n            - '\\Users\\'\n            - '\\AppData\\'\n        TargetFilename|contains:\n        # add more suspicious paths when you find them\n            - '\\Microsoft\\OneDrive\\'\n            - '\\Microsoft OneDrive\\'\n            - '\\Microsoft\\Teams\\'\n            - '\\Local\\slack\\app-'\n            - '\\Local\\Programs\\Microsoft VS Code\\'\n    filter:\n        Image|endswith: '\\cmd.exe'\n        TargetFilename|contains|all:\n            - '\\Users\\'\n            - '\\AppData\\'\n            - '\\Microsoft\\OneDrive\\'\n            - '\\api-ms-win-core-'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: medium",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: file_event\ntags:\n    - attack.t1566\n    - attack.t1566.001\n    - attack.initial_access\n    - attack.t1574\n    - attack.t1574.001\n    - attack.defense_evasion\ndetection:\n    selection:\n        Image|endswith:\n        # add more processes when you find them\n            - '\\winword.exe'\n            - '\\excel.exe'\n            - '\\powerpnt.exe'\n            - '\\MSACCESS.EXE'\n            - '\\MSPUB.EXE'\n            - '\\fltldr.exe'\n            - '\\cmd.exe'\n            - '\\certutil.exe'\n            - '\\mshta.exe'\n            - '\\cscript.exe'\n            - '\\wscript.exe'\n            - '\\curl.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        TargetFilename|endswith: '.dll'\n        TargetFilename|contains|all:\n            - '\\Users\\'\n            - '\\AppData\\'\n        TargetFilename|contains:\n        # add more suspicious paths when you find them\n            - '\\Microsoft\\OneDrive\\'\n            - '\\Microsoft OneDrive\\'\n            - '\\Microsoft\\Teams\\'\n            - '\\Local\\slack\\app-'\n            - '\\Local\\Programs\\Microsoft VS Code\\'\n    filter:\n        Image|endswith: '\\cmd.exe'\n        TargetFilename|contains|all:\n            - '\\Users\\'\n            - '\\AppData\\'\n            - '\\Microsoft\\OneDrive\\'\n            - '\\api-ms-win-core-'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: medium",
      "question": "attempts to create a DLL file to a known desktop application dependencies folder such as Slack, Teams or OneDrive and by an unusual process. This may indicate an attempt to load a malicious module via DLL search order hijacking.",
      "answer": "In order to detect attempts to create a DLL file to a known desktop application dependencies folder such as Slack, Teams, or OneDrive by an unusual process, which may indicate an attempt to load a malicious module via DLL search order hijacking, you should: Monitor Windows file events for the creation of DLL files in specific user folders, particularly within the AppData directory that are associated with popular applications like Microsoft OneDrive, Microsoft Teams, Slack, and Visual Studio Code. Key processes to watch include Word, Excel, PowerPoint, Access, Publisher, Filter Loader, Command Prompt, Certutil, HTML Application Host, CScript, WScript, Curl, PowerShell, and PowerShell Core that are trying to create '.dll' files in these directories. Be cautious of any such activities not initiated by 'cmd.exe' when examining file paths that include user directories, the AppData folder, and particularly paths involving Microsoft OneDrive - to reduce false positives, especially if the file paths also contain specific API sets like 'api-ms-win-core-'. This monitoring is essential to spot tactics and techniques associated with initial access attempts and defense evasion, particularly those linked with spearphishing for malicious attachment delivery (T1566, T1566.001) and the hijacking of DLL search order to evade defenses (T1574, T1574.001)."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    product: linux\n    category: process_creation\ndetection:\n    selection:\n        Image|endswith: '/wget'\n        CommandLine|re: 'https://[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}'\n        CommandLine|contains: '--no-check-certificate'\n        CommandLine|endswith: '.tar'\n    filter_main_local_ips:\n        # Note: Uncomment this filter if you want to exclude local IPs\n        CommandLine|contains:\n            - 'https://10.' #10.0.0.0/8\n            - 'https://192.168.' #192.168.0.0/16\n            - 'https://172.16.' #172.16.0.0/12\n            - 'https://172.17.'\n            - 'https://172.18.'\n            - 'https://172.19.'\n            - 'https://172.20.'\n            - 'https://172.21.'\n            - 'https://172.22.'\n            - 'https://172.23.'\n            - 'https://172.24.'\n            - 'https://172.25.'\n            - 'https://172.26.'\n            - 'https://172.27.'\n            - 'https://172.28.'\n            - 'https://172.29.'\n            - 'https://172.30.'\n            - 'https://172.31.'\n            - 'https://127.' #127.0.0.0/8\n            - 'https://169.254.' #169.254.0.0/16\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unknown\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect execution of \"wget\" to download a \"tar\" from an IP address that doesn't have a trusted certificate. As seen used by UNC4841 during their Barracuda ESG zero day exploitation.\n\nHere is how  the given sigma rule operates: In order to detect execution of \"wget\" to download a \"tar\" from an IP address that doesn't have a trusted certificate, as seen used by UNC4841 during their Barracuda ESG zero-day exploitation, you should: \n\nMonitor Linux systems for the creation of processes involving the \"wget\" utility. Specifically, look for instances where \"wget\" is used to download files with a \".tar\" extension from IP addresses, indicated by a pattern that matches an IP format (e.g., 'https://192.168.0.1'). This attempt should raise suspicions especially when the command line includes the '--no-check-certificate' option, which is a workaround for SSL certificate verification. This scenario might indicate a security concern or a potential malicious activity similar to the tactics used by certain threat groups.\n\nAdditionally, to refine the detection and reduce noise from legitimate operations within an internal network, any downloads from common local IP ranges (such as 10.x.x.x, 172.16.x.x to 172.31.x.x, 192.168.x.x, 127.x.x.x, and 169.254.x.x) should be excluded from alerts unless otherwise desired. This approach focuses the detection on external and possibly malicious sources, aligning with observed attack patterns. \n\nThis monitoring strategy is crucial for identifying possibly malicious downloads via \"wget\" that could bypass SSL/TLS certificate validation, a method associated with specific cyber threat activities.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\n    category: process_creation\ndetection:\n    selection:\n        Image|endswith: '/wget'\n        CommandLine|re: 'https://[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}'\n        CommandLine|contains: '--no-check-certificate'\n        CommandLine|endswith: '.tar'\n    filter_main_local_ips:\n        # Note: Uncomment this filter if you want to exclude local IPs\n        CommandLine|contains:\n            - 'https://10.' #10.0.0.0/8\n            - 'https://192.168.' #192.168.0.0/16\n            - 'https://172.16.' #172.16.0.0/12\n            - 'https://172.17.'\n            - 'https://172.18.'\n            - 'https://172.19.'\n            - 'https://172.20.'\n            - 'https://172.21.'\n            - 'https://172.22.'\n            - 'https://172.23.'\n            - 'https://172.24.'\n            - 'https://172.25.'\n            - 'https://172.26.'\n            - 'https://172.27.'\n            - 'https://172.28.'\n            - 'https://172.29.'\n            - 'https://172.30.'\n            - 'https://172.31.'\n            - 'https://127.' #127.0.0.0/8\n            - 'https://169.254.' #169.254.0.0/16\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "execution of \"wget\" to download a \"tar\" from an IP address that doesn't have a trusted certificate. As seen used by UNC4841 during their Barracuda ESG zero day exploitation.",
      "answer": "In order to detect execution of \"wget\" to download a \"tar\" from an IP address that doesn't have a trusted certificate, as seen used by UNC4841 during their Barracuda ESG zero-day exploitation, you should: \n\nMonitor Linux systems for the creation of processes involving the \"wget\" utility. Specifically, look for instances where \"wget\" is used to download files with a \".tar\" extension from IP addresses, indicated by a pattern that matches an IP format (e.g., 'https://192.168.0.1'). This attempt should raise suspicions especially when the command line includes the '--no-check-certificate' option, which is a workaround for SSL certificate verification. This scenario might indicate a security concern or a potential malicious activity similar to the tactics used by certain threat groups.\n\nAdditionally, to refine the detection and reduce noise from legitimate operations within an internal network, any downloads from common local IP ranges (such as 10.x.x.x, 172.16.x.x to 172.31.x.x, 192.168.x.x, 127.x.x.x, and 169.254.x.x) should be excluded from alerts unless otherwise desired. This approach focuses the detection on external and possibly malicious sources, aligning with observed attack patterns. \n\nThis monitoring strategy is crucial for identifying possibly malicious downloads via \"wget\" that could bypass SSL/TLS certificate validation, a method associated with specific cyber threat activities."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    product: gcp\n    service: gcp.audit\ndetection:\n    selection:\n        gcp.audit.method_name: projects.content.reidentify\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect Identifies when sensitive information is re-identified in google Cloud.\n\nHere is how  the given sigma rule operates: In order to identify when sensitive information is re-identified in Google Cloud, you should: Monitor for and analyze audit logs from Google Cloud Platform (GCP) services. Specifically, focus on logs generated by GCP audit services for events where the method name is 'projects.content.reidentify'. This indicates an operation aimed at re-identifying previously de-identified sensitive information. It is crucial to pay attention to these events as they might signify attempts to circumvent privacy protections or expose sensitive data unintentionally. While it is acknowledged that there may be legitimate reasons for re-identifying data in certain contexts, any instance flagged under this criterion should be scrutinized due to its medium level of potential security concern.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: gcp\n    service: gcp.audit\ndetection:\n    selection:\n        gcp.audit.method_name: projects.content.reidentify\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Identifies when sensitive information is re-identified in google Cloud.",
      "answer": "In order to identify when sensitive information is re-identified in Google Cloud, you should: Monitor for and analyze audit logs from Google Cloud Platform (GCP) services. Specifically, focus on logs generated by GCP audit services for events where the method name is 'projects.content.reidentify'. This indicates an operation aimed at re-identifying previously de-identified sensitive information. It is crucial to pay attention to these events as they might signify attempts to circumvent privacy protections or expose sensitive data unintentionally. While it is acknowledged that there may be legitimate reasons for re-identifying data in certain contexts, any instance flagged under this criterion should be scrutinized due to its medium level of potential security concern."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: process_creation\n    product: linux\ndetection:\n    selection:\n        Image|endswith: '/getcap'\n        CommandLine|contains:\n            - ' /r '\n            - ' -r '\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect usage of \"getcap\" binary. This is often used during recon activity to determine potential binaries that can be abused as GTFOBins or other.\n\nHere is how  the given sigma rule operates: In order to detect usage of \"getcap\" binary, which is often used during recon activity to determine potential binaries that can be abused as GTFOBins or others, you should: monitor process creation events on Linux systems for the execution of the \"getcap\" binary, particularly focusing on command lines that include either \" /r \" or \" -r \". This involves checking the end of the image path for '/getcap' to accurately identify the use of this specific binary. Understanding that there might be unknown cases that could be falsely identified as suspicious, this detection strategy is set with a low level of confidence. Nonetheless, it remains a crucial step in identifying reconnaissance activities where attackers might be searching for exploitable binaries to leverage in their attacks.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: linux\ndetection:\n    selection:\n        Image|endswith: '/getcap'\n        CommandLine|contains:\n            - ' /r '\n            - ' -r '\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low\n",
      "question": "usage of \"getcap\" binary. This is often used during recon activity to determine potential binaries that can be abused as GTFOBins or other.",
      "answer": "In order to detect usage of \"getcap\" binary, which is often used during recon activity to determine potential binaries that can be abused as GTFOBins or others, you should: monitor process creation events on Linux systems for the execution of the \"getcap\" binary, particularly focusing on command lines that include either \" /r \" or \" -r \". This involves checking the end of the image path for '/getcap' to accurately identify the use of this specific binary. Understanding that there might be unknown cases that could be falsely identified as suspicious, this detection strategy is set with a low level of confidence. Nonetheless, it remains a crucial step in identifying reconnaissance activities where attackers might be searching for exploitable binaries to leverage in their attacks."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting user creates action secret for the organization, environment, codespaces or repository..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when a user creates action secret for the organization, environment, codespaces or repository, you should monitor GitHub's audit logs, focusing on specific actions indicative of such activities. This monitoring requires the audit log streaming feature to be active; instructions for enabling this feature are found in GitHub's documentation. Key actions to watch include the creation of actions secrets at the organizational level, within specific environments, for codespaces, or directly in repositories. \n\nWhen these activities are detected, it\u2019s important to record several pieces of information to enable thorough analysis. Details such as the action taken, the actor who performed the action, the organization involved, and the country code of the actor's location should be captured. \n\nBe aware that monitoring for these activities might result in a significant number of alerts, especially in environments where the creation of new secrets is a common and necessary operation. Therefore, verify the legitimacy of the actor involved in creating secrets to reduce the potential for false positives. Generally, this scenario is classified at a low threat level, suggesting that while important to track, it might not always indicate a malicious or unauthorized activity by itself.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: github\n    service: audit\n    definition: 'Requirements: The audit log streaming feature must be enabled to be able to receive such logs. You can enable following the documentation here: https://docs.github.com/en/enterprise-cloud@latest/admin/monitoring-activity-in-your-enterprise/reviewing-audit-logs-for-your-enterprise/streaming-the-audit-log-for-your-enterprise#setting-up-audit-log-streaming'\ndetection:\n    selection:\n        action:\n            - 'org.create_actions_secret'\n            - 'environment.create_actions_secret'\n            - 'codespaces.create_an_org_secret'\n            - 'repo.create_actions_secret'\n    condition: selection\nfields:\n    - 'action'\n    - 'actor'\n    - 'org'\n    - 'actor_location.country_code'\nfalsepositives:\n     - This detection cloud be noisy depending on the environment. It is recommended to keep a check on the new secrets when created and validate the \"actor\".\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: github\n    service: audit\n    definition: 'Requirements: The audit log streaming feature must be enabled to be able to receive such logs. You can enable following the documentation here: https://docs.github.com/en/enterprise-cloud@latest/admin/monitoring-activity-in-your-enterprise/reviewing-audit-logs-for-your-enterprise/streaming-the-audit-log-for-your-enterprise#setting-up-audit-log-streaming'\ndetection:\n    selection:\n        action:\n            - 'org.create_actions_secret'\n            - 'environment.create_actions_secret'\n            - 'codespaces.create_an_org_secret'\n            - 'repo.create_actions_secret'\n    condition: selection\nfields:\n    - 'action'\n    - 'actor'\n    - 'org'\n    - 'actor_location.country_code'\nfalsepositives:\n     - This detection cloud be noisy depending on the environment. It is recommended to keep a check on the new secrets when created and validate the \"actor\".\nlevel: low\n",
      "question": "user creates action secret for the organization, environment, codespaces or repository.",
      "answer": "In order to detect when a user creates action secret for the organization, environment, codespaces or repository, you should monitor GitHub's audit logs, focusing on specific actions indicative of such activities. This monitoring requires the audit log streaming feature to be active; instructions for enabling this feature are found in GitHub's documentation. Key actions to watch include the creation of actions secrets at the organizational level, within specific environments, for codespaces, or directly in repositories. \n\nWhen these activities are detected, it\u2019s important to record several pieces of information to enable thorough analysis. Details such as the action taken, the actor who performed the action, the organization involved, and the country code of the actor's location should be captured. \n\nBe aware that monitoring for these activities might result in a significant number of alerts, especially in environments where the creation of new secrets is a common and necessary operation. Therefore, verify the legitimacy of the actor involved in creating secrets to reduce the potential for false positives. Generally, this scenario is classified at a low threat level, suggesting that while important to track, it might not always indicate a malicious or unauthorized activity by itself."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\GUP.exe'\n        - OriginalFileName: 'gup.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - ' -unzipTo '\n            - 'http'\n    filter:\n        ParentImage|endswith: '\\notepad++.exe'\n    condition: all of selection* and not filter\nfalsepositives:\n    - Other parent processes other than notepad++ using GUP that are not currently identified\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect execution of the Notepad++ updater (gup) from a process other than Notepad++ to download files.\n\nHere is how  the given sigma rule operates: In order to detect execution of the Notepad++ updater (gup) from a process other than Notepad++ to download files, you should: monitor the creation of processes on Windows systems for occurrences of the GUP.exe (the Notepad++ updater) being executed. Specifically, look for cases where the executable image name ends with '\\GUP.exe' or the original file name is identified as 'gup.exe'. Additionally, pay attention to the command line arguments used during the process creation, especially if it includes both ' -unzipTo ' and an 'http' indicating an attempt to download files from the internet. However, you should exclude any instances where the GUP.exe is launched by Notepad++ itself, as indicated by having Notepad++ (notepad++.exe) as the parent process. Be aware that there could be false positives if there are legitimate uses of the GUP outside of notepad++ that aren't currently identified. This approach is crucial for identifying instances where the Notepad++ updater might be abused to download malicious files onto a system, which is a high-severity security concern.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\GUP.exe'\n        - OriginalFileName: 'gup.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - ' -unzipTo '\n            - 'http'\n    filter:\n        ParentImage|endswith: '\\notepad++.exe'\n    condition: all of selection* and not filter\nfalsepositives:\n    - Other parent processes other than notepad++ using GUP that are not currently identified\nlevel: high\n",
      "question": "execution of the Notepad++ updater (gup) from a process other than Notepad++ to download files.",
      "answer": "In order to detect execution of the Notepad++ updater (gup) from a process other than Notepad++ to download files, you should: monitor the creation of processes on Windows systems for occurrences of the GUP.exe (the Notepad++ updater) being executed. Specifically, look for cases where the executable image name ends with '\\GUP.exe' or the original file name is identified as 'gup.exe'. Additionally, pay attention to the command line arguments used during the process creation, especially if it includes both ' -unzipTo ' and an 'http' indicating an attempt to download files from the internet. However, you should exclude any instances where the GUP.exe is launched by Notepad++ itself, as indicated by having Notepad++ (notepad++.exe) as the parent process. Be aware that there could be false positives if there are legitimate uses of the GUP outside of notepad++ that aren't currently identified. This approach is crucial for identifying instances where the Notepad++ updater might be abused to download malicious files onto a system, which is a high-severity security concern."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection1:\n        ScriptBlockText|contains|all:\n            - 'Move-Item'\n            - 'Cert:\\LocalMachine\\Root'\n    selection2:\n        ScriptBlockText|contains|all:\n            - 'Import-Certificate'\n            - 'Cert:\\LocalMachine\\Root'\n    condition: 1 of selection*\nfalsepositives:\n    - Help Desk or IT may need to manually add a corporate Root CA on occasion. Need to test if GPO push doesn't trigger FP\nlevel: medium\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect Adversaries may install a root certificate on a compromised system to avoid warnings when connecting to adversary controlled web servers.\n\nHere is how  the given sigma rule operates: In order to detect adversaries attempting to install a root certificate on a compromised system to avoid warnings when connecting to adversary-controlled web servers, you should monitor Windows PowerShell script logs for actions that deal with certificates, especially in the local machine's root store. Look for scripts that contain activities such as moving items or importing certificates into the 'Cert:\\LocalMachine\\Root' directory. There are two specific behaviors to watch for:\n\n1. Scripts that include both the command to move an item ('Move-Item') and reference the local machine's root certificate store ('Cert:\\LocalMachine\\Root').\n\n2. Scripts that include commands to import a certificate ('Import-Certificate') into the local machine's root store.\n\nIf either of these activities is observed, it could indicate an attempt by an adversary to install a root certificate, which can help them to intercept or manipulate secured communications without triggering security warnings.\n\nBe alert to the possibility of false positives, such as legitimate IT operations that involve adding a corporate Root Certificate Authority (CA) manually. It might be necessary to differentiate between malicious acts and genuine administrative tasks, particularly if Group Policy Objects (GPOs) are used to deploy certificates across the organization, which should not trigger alerts.\n\nThis approach to monitoring and detection is essential for identifying and intervening in potentially malicious activities related to the management of certificates on Windows systems, aligning with the tactics and techniques used by adversaries to undermine secure communications.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection1:\n        ScriptBlockText|contains|all:\n            - 'Move-Item'\n            - 'Cert:\\LocalMachine\\Root'\n    selection2:\n        ScriptBlockText|contains|all:\n            - 'Import-Certificate'\n            - 'Cert:\\LocalMachine\\Root'\n    condition: 1 of selection*\nfalsepositives:\n    - Help Desk or IT may need to manually add a corporate Root CA on occasion. Need to test if GPO push doesn't trigger FP\nlevel: medium\n",
      "question": "Adversaries may install a root certificate on a compromised system to avoid warnings when connecting to adversary controlled web servers.",
      "answer": "In order to detect adversaries attempting to install a root certificate on a compromised system to avoid warnings when connecting to adversary-controlled web servers, you should monitor Windows PowerShell script logs for actions that deal with certificates, especially in the local machine's root store. Look for scripts that contain activities such as moving items or importing certificates into the 'Cert:\\LocalMachine\\Root' directory. There are two specific behaviors to watch for:\n\n1. Scripts that include both the command to move an item ('Move-Item') and reference the local machine's root certificate store ('Cert:\\LocalMachine\\Root').\n\n2. Scripts that include commands to import a certificate ('Import-Certificate') into the local machine's root store.\n\nIf either of these activities is observed, it could indicate an attempt by an adversary to install a root certificate, which can help them to intercept or manipulate secured communications without triggering security warnings.\n\nBe alert to the possibility of false positives, such as legitimate IT operations that involve adding a corporate Root Certificate Authority (CA) manually. It might be necessary to differentiate between malicious acts and genuine administrative tasks, particularly if Group Policy Objects (GPOs) are used to deploy certificates across the organization, which should not trigger alerts.\n\nThis approach to monitoring and detection is essential for identifying and intervening in potentially malicious activities related to the management of certificates on Windows systems, aligning with the tactics and techniques used by adversaries to undermine secure communications."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting AWS API key creation for a user by another user.\nBackdoored users can be used to obtain persistence in the AWS environment.\nAlso with this alert, you can detect a flow of AWS keys in your org.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect AWS API key creation for a user by another user, which could indicate an attempt to backdoor users and obtain persistence in the AWS environment or an unauthorized flow of AWS keys within your organization, you should:\n\nMonitor AWS CloudTrail logs for events where an IAM Access Key (CreateAccessKey event) is created. Specifically, focus on logs where the event is initiated from the IAM service (`iam.amazonaws.com`) and the event name is `CreateAccessKey`. It's crucial to identify situations where the Access Key is being created by a user for a different user, which could be indicative of malicious activity. This can be done by comparing the ARN (Amazon Resource Name) of the user who initiated the request (`userIdentity.arn`) with the userName in the accessKey response element (`responseElements.accessKey.userName`). If these do not match, it could signal an unauthorized key creation activity.\n\nHowever, be aware of potential false positives that could arise, such as legitimate scenarios where users might be adding keys to their accounts in a manner not covered by typical naming conventions, or legitimate AWS API key exchange workflows within your organization. These events are identified by their log source, particularly those coming from the AWS CloudTrail service, and have a medium level of concern due to the potential for misuse in a compromised AWS environment. The key fields to look out for in your analysis include the `userIdentity.arn`, `responseElements.accessKey.userName`, plus any `errorCode` or `errorMessage` that could provide additional context on the nature of the event.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: aws\n    service: cloudtrail\ndetection:\n    selection_source:\n        eventSource: iam.amazonaws.com\n        eventName: CreateAccessKey\n    filter:\n        userIdentity.arn|contains: responseElements.accessKey.userName\n    condition: selection_source and not filter\nfields:\n    - userIdentity.arn\n    - responseElements.accessKey.userName\n    - errorCode\n    - errorMessage\nfalsepositives:\n    - Adding user keys to their own accounts (the filter cannot cover all possible variants of user naming)\n    - AWS API keys legitimate exchange workflows\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: aws\n    service: cloudtrail\ndetection:\n    selection_source:\n        eventSource: iam.amazonaws.com\n        eventName: CreateAccessKey\n    filter:\n        userIdentity.arn|contains: responseElements.accessKey.userName\n    condition: selection_source and not filter\nfields:\n    - userIdentity.arn\n    - responseElements.accessKey.userName\n    - errorCode\n    - errorMessage\nfalsepositives:\n    - Adding user keys to their own accounts (the filter cannot cover all possible variants of user naming)\n    - AWS API keys legitimate exchange workflows\nlevel: medium\n",
      "question": "AWS API key creation for a user by another user.\nBackdoored users can be used to obtain persistence in the AWS environment.\nAlso with this alert, you can detect a flow of AWS keys in your org.\n",
      "answer": "In order to detect AWS API key creation for a user by another user, which could indicate an attempt to backdoor users and obtain persistence in the AWS environment or an unauthorized flow of AWS keys within your organization, you should:\n\nMonitor AWS CloudTrail logs for events where an IAM Access Key (CreateAccessKey event) is created. Specifically, focus on logs where the event is initiated from the IAM service (`iam.amazonaws.com`) and the event name is `CreateAccessKey`. It's crucial to identify situations where the Access Key is being created by a user for a different user, which could be indicative of malicious activity. This can be done by comparing the ARN (Amazon Resource Name) of the user who initiated the request (`userIdentity.arn`) with the userName in the accessKey response element (`responseElements.accessKey.userName`). If these do not match, it could signal an unauthorized key creation activity.\n\nHowever, be aware of potential false positives that could arise, such as legitimate scenarios where users might be adding keys to their accounts in a manner not covered by typical naming conventions, or legitimate AWS API key exchange workflows within your organization. These events are identified by their log source, particularly those coming from the AWS CloudTrail service, and have a medium level of concern due to the potential for misuse in a compromised AWS environment. The key fields to look out for in your analysis include the `userIdentity.arn`, `responseElements.accessKey.userName`, plus any `errorCode` or `errorMessage` that could provide additional context on the nature of the event."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains: 'choice /t %d /d y /n >nul'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect specific broken command that was used by Goofy-Guineapig as described by the NCSC report.\n\nHere is how  the given sigma rule operates: In order to detect a specific broken command that was used by Goofy-Guineapig as described by the NCSC report, you should: focus on monitoring process creation logs on Windows systems. Specifically, be alert for instances where the command line contains the particular sequence 'choice /t %d /d y /n >nul'. The occurrence of this command is a strong indicator of the described malicious activity, with false positives being unlikely. The significance of detecting this command is considered high due to its association with specific attack tactics and techniques outlined by the NCSC in their report on Goofy-Guineapig's operations.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains: 'choice /t %d /d y /n >nul'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "specific broken command that was used by Goofy-Guineapig as described by the NCSC report.",
      "answer": "In order to detect a specific broken command that was used by Goofy-Guineapig as described by the NCSC report, you should: focus on monitoring process creation logs on Windows systems. Specifically, be alert for instances where the command line contains the particular sequence 'choice /t %d /d y /n >nul'. The occurrence of this command is a strong indicator of the described malicious activity, with false positives being unlikely. The significance of detecting this command is considered high due to its association with specific attack tactics and techniques outlined by the NCSC in their report on Goofy-Guineapig's operations."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting access to a protected_storage service over the network. Potential abuse of DPAPI to extract domain backup keys from Domain Controllers.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect access to a protected_storage service over the network, potentially indicating abuse of DPAPI to extract domain backup keys from Domain Controllers, you should: monitor Windows Security logs for event ID 5145, which signifies a network share object was accessed. Specifically, focus on instances where the ShareName includes 'IPC' and the RelativeTargetName matches 'protected_storage'. This activity signifies that an actor might be attempting to interact with the protected storage service over the network, potentially to misuse the Data Protection API (DPAPI) and extract valuable domain backup keys from a Domain Controller. This is considered a high-level threat, although it's important to be aware that not all occurrences might represent malicious activity \u2013 hence, some alerts might turn out to be false positives. Nevertheless, such attempts align with techniques related to credential access and could point towards an advanced actor's footprint in your network environment.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 5145\n        ShareName|contains: 'IPC'\n        RelativeTargetName: 'protected_storage'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 5145\n        ShareName|contains: 'IPC'\n        RelativeTargetName: 'protected_storage'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "access to a protected_storage service over the network. Potential abuse of DPAPI to extract domain backup keys from Domain Controllers",
      "answer": "In order to detect access to a protected_storage service over the network, potentially indicating abuse of DPAPI to extract domain backup keys from Domain Controllers, you should: monitor Windows Security logs for event ID 5145, which signifies a network share object was accessed. Specifically, focus on instances where the ShareName includes 'IPC' and the RelativeTargetName matches 'protected_storage'. This activity signifies that an actor might be attempting to interact with the protected storage service over the network, potentially to misuse the Data Protection API (DPAPI) and extract valuable domain backup keys from a Domain Controller. This is considered a high-level threat, although it's important to be aware that not all occurrences might represent malicious activity \u2013 hence, some alerts might turn out to be false positives. Nevertheless, such attempts align with techniques related to credential access and could point towards an advanced actor's footprint in your network environment."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'Execute'\n            - 'CreateObject'\n            - 'RegRead'\n            - 'window.close'\n            - '\\Microsoft\\Windows\\CurrentVersion'\n    filter:\n        CommandLine|contains: '\\Software\\Microsoft\\Windows\\CurrentVersion\\Run'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect suspicious inline VBScript keywords as used by UNC2452\n\nHere is how  the given sigma rule operates: In order to detect suspicious inline VBScript keywords as used by UNC2452, you should focus on monitoring process creation events within Windows. Specifically, look for command lines that contain all the following keywords: 'Execute', 'CreateObject', 'RegRead', 'window.close', and paths that include '\\Microsoft\\Windows\\CurrentVersion'. However, to minimize false positives, any command line containing the path '\\Software\\Microsoft\\Windows\\CurrentVersion\\Run' should be excluded from alerts. This approach aims to identify potential malicious activities associated with the use of VBScript for executing unauthorized actions, such as reading registry values or creating objects, which are indicators of tactics and techniques related to initial access, execution, and persistence.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'Execute'\n            - 'CreateObject'\n            - 'RegRead'\n            - 'window.close'\n            - '\\Microsoft\\Windows\\CurrentVersion'\n    filter:\n        CommandLine|contains: '\\Software\\Microsoft\\Windows\\CurrentVersion\\Run'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "suspicious inline VBScript keywords as used by UNC2452",
      "answer": "In order to detect suspicious inline VBScript keywords as used by UNC2452, you should focus on monitoring process creation events within Windows. Specifically, look for command lines that contain all the following keywords: 'Execute', 'CreateObject', 'RegRead', 'window.close', and paths that include '\\Microsoft\\Windows\\CurrentVersion'. However, to minimize false positives, any command line containing the path '\\Software\\Microsoft\\Windows\\CurrentVersion\\Run' should be excluded from alerts. This approach aims to identify potential malicious activities associated with the use of VBScript for executing unauthorized actions, such as reading registry values or creating objects, which are indicators of tactics and techniques related to initial access, execution, and persistence."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\certutil.exe'\n        - OriginalFileName: 'CertUtil.exe'\n    selection_cli:\n        CommandLine|contains:\n            - '-encode'\n            - '/encode'\n    selection_extension:\n        CommandLine|contains:\n            - '.acl'\n            - '.bat'\n            - '.doc'\n            - '.gif'\n            - '.jpeg'\n            - '.jpg'\n            - '.mp3'\n            - '.pdf'\n            - '.png'\n            - '.ppt'\n            - '.tmp'\n            - '.xls'\n            - '.xml'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect execution of certutil with the \"encode\" flag to encode a file to base64 where the extensions of the file is suspicious\n\nHere is how  the given sigma rule operates: In order to detect the execution of certutil with the \"encode\" flag to encode a file to base64 where the extensions of the file is suspicious, you should monitor for the creation of processes on Windows systems specifically looking for the invocation of 'certutil.exe'. Be vigilant for command-line instances where the '-encode' or '/encode' options are utilized, especially when these commands are applied to files with extensions that are unusual or potentially indicative of a security threat such as '.acl', '.bat', '.doc', '.gif', '.jpeg', '.jpg', '.mp3', '.pdf', '.png', '.ppt', '.tmp', '.xls', or '.xml'. It is crucial to consider all these conditions together when determining suspicious activity to maintain accuracy and minimize false positives, despite such instances being unknown. This action is associated with a high level of threat due to the common misuse of certutil for malicious purposes, particularly in encoding files to evade detection mechanisms.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\certutil.exe'\n        - OriginalFileName: 'CertUtil.exe'\n    selection_cli:\n        CommandLine|contains:\n            - '-encode'\n            - '/encode'\n    selection_extension:\n        CommandLine|contains:\n            - '.acl'\n            - '.bat'\n            - '.doc'\n            - '.gif'\n            - '.jpeg'\n            - '.jpg'\n            - '.mp3'\n            - '.pdf'\n            - '.png'\n            - '.ppt'\n            - '.tmp'\n            - '.xls'\n            - '.xml'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "execution of certutil with the \"encode\" flag to encode a file to base64 where the extensions of the file is suspicious",
      "answer": "In order to detect the execution of certutil with the \"encode\" flag to encode a file to base64 where the extensions of the file is suspicious, you should monitor for the creation of processes on Windows systems specifically looking for the invocation of 'certutil.exe'. Be vigilant for command-line instances where the '-encode' or '/encode' options are utilized, especially when these commands are applied to files with extensions that are unusual or potentially indicative of a security threat such as '.acl', '.bat', '.doc', '.gif', '.jpeg', '.jpg', '.mp3', '.pdf', '.png', '.ppt', '.tmp', '.xls', or '.xml'. It is crucial to consider all these conditions together when determining suspicious activity to maintain accuracy and minimize false positives, despite such instances being unknown. This action is associated with a high level of threat due to the common misuse of certutil for malicious purposes, particularly in encoding files to evade detection mechanisms."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting loading of Microsoft Defender's DLLs by its processes (MpCmdRun and NisSrv) from the non-default directory which may be an attempt to sideload arbitrary DLL.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect loading of Microsoft Defender's DLLs by its processes (MpCmdRun and NisSrv) from the non-default directory which may be an attempt to sideload arbitrary DLL, you should: Monitor Windows image load events for instances where the Microsoft Defender processes, specifically 'MpCmdRun.exe' or 'NisSrv.exe', attempt to load the 'mpclient.dll' dynamic link library. The focus should be on identifying when these DLLs are loaded from locations outside the standard directories typically used by Windows Defender, such as 'C:\\Program Files\\Windows Defender\\', 'C:\\Program Files (x86)\\Windows Defender\\', or 'C:\\ProgramData\\Microsoft\\Windows Defender\\Platform\\'. The appearance of such activity indicates a high probability of an attempt at DLL sideloading - a technique often used by adversaries to execute malicious code by exploiting the legitimate processes of trusted applications. It's crucial to note that false positives for this detection method are very unlikely, underscoring the importance of this monitoring in identifying potential security breaches.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: image_load\ndetection:\n    selection:\n        Image|endswith:\n            - '\\MpCmdRun.exe'\n            - '\\NisSrv.exe'\n        ImageLoaded|endswith: '\\mpclient.dll'\n    filter:\n        ImageLoaded|startswith:\n            - 'C:\\Program Files\\Windows Defender\\'\n            - 'C:\\Program Files (x86)\\Windows Defender\\'\n            - 'C:\\ProgramData\\Microsoft\\Windows Defender\\Platform\\'\n    condition: selection and not filter\nfalsepositives:\n    - Very unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: image_load\ndetection:\n    selection:\n        Image|endswith:\n            - '\\MpCmdRun.exe'\n            - '\\NisSrv.exe'\n        ImageLoaded|endswith: '\\mpclient.dll'\n    filter:\n        ImageLoaded|startswith:\n            - 'C:\\Program Files\\Windows Defender\\'\n            - 'C:\\Program Files (x86)\\Windows Defender\\'\n            - 'C:\\ProgramData\\Microsoft\\Windows Defender\\Platform\\'\n    condition: selection and not filter\nfalsepositives:\n    - Very unlikely\nlevel: high\n",
      "question": "loading of Microsoft Defender's DLLs by its processes (MpCmdRun and NisSrv) from the non-default directory which may be an attempt to sideload arbitrary DLL",
      "answer": "In order to detect loading of Microsoft Defender's DLLs by its processes (MpCmdRun and NisSrv) from the non-default directory which may be an attempt to sideload arbitrary DLL, you should: Monitor Windows image load events for instances where the Microsoft Defender processes, specifically 'MpCmdRun.exe' or 'NisSrv.exe', attempt to load the 'mpclient.dll' dynamic link library. The focus should be on identifying when these DLLs are loaded from locations outside the standard directories typically used by Windows Defender, such as 'C:\\Program Files\\Windows Defender\\', 'C:\\Program Files (x86)\\Windows Defender\\', or 'C:\\ProgramData\\Microsoft\\Windows Defender\\Platform\\'. The appearance of such activity indicates a high probability of an attempt at DLL sideloading - a technique often used by adversaries to execute malicious code by exploiting the legitimate processes of trusted applications. It's crucial to note that false positives for this detection method are very unlikely, underscoring the importance of this monitoring in identifying potential security breaches."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of the builtin \"rmdir\" command in order to delete directories.\nAdversaries may delete files left behind by the actions of their intrusion activity.\nMalware, tools, or other non-native files dropped or created on a system by an adversary may leave traces to indicate to what was done within a network and how.\nRemoval of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution of the builtin \"rmdir\" command in order to delete directories and thus, identify adversaries' attempts to remove traces of their intrusion activities, including malware, tools, or other non-native files to minimize their footprint, you should: Focus on monitoring the creation of processes within Windows environments. Specifically, keep an eye out for the activation of 'cmd.exe' or instances where its original file name 'Cmd.Exe' is involved. Additionally, watch closely for command lines containing the 'rmdir' command, especially those that also include the flags '/s' and '/q'. These flags, when used together, indicate a forceful and silent removal of directories and all of their contents, which could suggest an attempt to erase evidence of an intrusion or malicious activity. This detection strategy, while set at a low alert level due to the potential of false positives\u2014since the actions could sometimes be part of legitimate system or network maintenance\u2014remains a critical piece in identifying and responding to potential attempts by attackers to clean up after themselves and hide their tracks.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\cmd.exe'\n        - OriginalFileName: 'Cmd.Exe'\n    selection_rmdir:\n        CommandLine|contains: 'rmdir'\n    selection_flags:\n        CommandLine|contains:\n            - '/s'\n            - '/q'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\cmd.exe'\n        - OriginalFileName: 'Cmd.Exe'\n    selection_rmdir:\n        CommandLine|contains: 'rmdir'\n    selection_flags:\n        CommandLine|contains:\n            - '/s'\n            - '/q'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: low\n",
      "question": "execution of the builtin \"rmdir\" command in order to delete directories.\nAdversaries may delete files left behind by the actions of their intrusion activity.\nMalware, tools, or other non-native files dropped or created on a system by an adversary may leave traces to indicate to what was done within a network and how.\nRemoval of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\n",
      "answer": "In order to detect execution of the builtin \"rmdir\" command in order to delete directories and thus, identify adversaries' attempts to remove traces of their intrusion activities, including malware, tools, or other non-native files to minimize their footprint, you should: Focus on monitoring the creation of processes within Windows environments. Specifically, keep an eye out for the activation of 'cmd.exe' or instances where its original file name 'Cmd.Exe' is involved. Additionally, watch closely for command lines containing the 'rmdir' command, especially those that also include the flags '/s' and '/q'. These flags, when used together, indicate a forceful and silent removal of directories and all of their contents, which could suggest an attempt to erase evidence of an intrusion or malicious activity. This detection strategy, while set at a low alert level due to the potential of false positives\u2014since the actions could sometimes be part of legitimate system or network maintenance\u2014remains a critical piece in identifying and responding to potential attempts by attackers to clean up after themselves and hide their tracks."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    product: windows\n    service: powershell\n    definition: Script block logging must be enabled for 4104, Module Logging must be enabled for 4103\ndetection:\n    selection_convert_b64:\n        '|all':\n            - '-nop'\n            - ' -w '\n            - 'hidden'\n            - ' -c '\n            - '[Convert]::FromBase64String'\n    selection_iex:\n        '|all':\n            - ' -w '\n            - 'hidden'\n            - '-noni'\n            - '-nop'\n            - ' -c '\n            - 'iex'\n            - 'New-Object'\n    selection_enc:\n        '|all':\n            - ' -w '\n            - 'hidden'\n            - '-ep'\n            - 'bypass'\n            - '-Enc'\n    selection_reg:\n        '|all':\n            - 'powershell'\n            - 'reg'\n            - 'add'\n            - 'HKCU\\software\\microsoft\\windows\\currentversion\\run'\n    selection_webclient:\n         '|all':\n            - 'bypass'\n            - '-noprofile'\n            - '-windowstyle'\n            - 'hidden'\n            - 'new-object'\n            - 'system.net.webclient'\n            - '.download'\n    selection_iex_webclient:\n        '|all':\n            - 'iex'\n            - 'New-Object'\n            - 'Net.WebClient'\n            - '.Download'\n    filter_chocolatey:\n        - \"(New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1\"\n        - \"(New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1')\"\n        - 'Write-ChocolateyWarning'\n    condition: 1 of selection_* and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect suspicious PowerShell invocation command parameters\n\nHere is how  the given sigma rule operates: In order to detect suspicious PowerShell invocation command parameters, you should: Monitor Windows PowerShell logs, particularly focusing on key parameters and coded scripts that are commonly used by attackers to evade detection and execute malicious actions. The monitoring should include:\n\n- Checking for the usage of `-nop`, `-w`, `hidden`, `-c`, and the pattern `[Convert]::FromBase64String`, which are indicative of attempts to execute commands or scripts in a way that avoids logging and makes the content difficult to interpret by converting it from base64 encoded strings.\n\n- Observing the combined presence of `-w`, `hidden`, `-noni`, `-nop`, `-c`, `iex`, and `New-Object`, as this pattern suggests an attempt to execute in-memory scripts. This method allows attackers to run malicious content directly in memory without writing to the disk.\n\n- Identifying the usage of `-w`, `hidden`, `-ep`, `bypass`, and `-Enc` together, pointing towards an attempt to bypass execution policies and execute encoded commands, making the detection of the malicious intent harder.\n\n- Monitoring for PowerShell commands interacting with the Windows Registry, specifically commands that add entries to `HKCU\\software\\microsoft\\windows\\currentversion\\run`. This is a common technique for achieving persistence by having malware start automatically at system boot.\n\n- Spotting invocations that involve the bypass of execution policies and the use of `new-object` combined with `system.net.webclient` and a `.download` method, aiming to download potentially malicious content from the internet while staying under the radar.\n\n- Watching for instances where `iex`, `New-Object`, `Net.WebClient`, and `.Download` are used together, as this is another method that might be utilized to fetch and execute malicious scripts from remote servers through PowerShell.\n\n- Filtering out false positives by excluding legitimate uses of PowerShell for downloading and installing software via Chocolatey, which is a package manager for Windows. This involves ignoring command lines that download and execute Chocolatey installation scripts.\n\nLogs should be examined for any of these patterns, taking into consideration that any single occurrence could be indicative of suspicious activity. It's essential to treat detections with high priority due to the potential severity of PowerShell being used as an attack vector. Tags associated with these activities include Tactics and Techniques like Execution, Persistence, Defense Evasion, and Command and Control, which are part of the broader categories of malicious behavior as classified by MITRE ATT&CK.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: powershell\n    definition: Script block logging must be enabled for 4104, Module Logging must be enabled for 4103\ndetection:\n    selection_convert_b64:\n        '|all':\n            - '-nop'\n            - ' -w '\n            - 'hidden'\n            - ' -c '\n            - '[Convert]::FromBase64String'\n    selection_iex:\n        '|all':\n            - ' -w '\n            - 'hidden'\n            - '-noni'\n            - '-nop'\n            - ' -c '\n            - 'iex'\n            - 'New-Object'\n    selection_enc:\n        '|all':\n            - ' -w '\n            - 'hidden'\n            - '-ep'\n            - 'bypass'\n            - '-Enc'\n    selection_reg:\n        '|all':\n            - 'powershell'\n            - 'reg'\n            - 'add'\n            - 'HKCU\\software\\microsoft\\windows\\currentversion\\run'\n    selection_webclient:\n         '|all':\n            - 'bypass'\n            - '-noprofile'\n            - '-windowstyle'\n            - 'hidden'\n            - 'new-object'\n            - 'system.net.webclient'\n            - '.download'\n    selection_iex_webclient:\n        '|all':\n            - 'iex'\n            - 'New-Object'\n            - 'Net.WebClient'\n            - '.Download'\n    filter_chocolatey:\n        - \"(New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1\"\n        - \"(New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1')\"\n        - 'Write-ChocolateyWarning'\n    condition: 1 of selection_* and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "suspicious PowerShell invocation command parameters",
      "answer": "In order to detect suspicious PowerShell invocation command parameters, you should: Monitor Windows PowerShell logs, particularly focusing on key parameters and coded scripts that are commonly used by attackers to evade detection and execute malicious actions. The monitoring should include:\n\n- Checking for the usage of `-nop`, `-w`, `hidden`, `-c`, and the pattern `[Convert]::FromBase64String`, which are indicative of attempts to execute commands or scripts in a way that avoids logging and makes the content difficult to interpret by converting it from base64 encoded strings.\n\n- Observing the combined presence of `-w`, `hidden`, `-noni`, `-nop`, `-c`, `iex`, and `New-Object`, as this pattern suggests an attempt to execute in-memory scripts. This method allows attackers to run malicious content directly in memory without writing to the disk.\n\n- Identifying the usage of `-w`, `hidden`, `-ep`, `bypass`, and `-Enc` together, pointing towards an attempt to bypass execution policies and execute encoded commands, making the detection of the malicious intent harder.\n\n- Monitoring for PowerShell commands interacting with the Windows Registry, specifically commands that add entries to `HKCU\\software\\microsoft\\windows\\currentversion\\run`. This is a common technique for achieving persistence by having malware start automatically at system boot.\n\n- Spotting invocations that involve the bypass of execution policies and the use of `new-object` combined with `system.net.webclient` and a `.download` method, aiming to download potentially malicious content from the internet while staying under the radar.\n\n- Watching for instances where `iex`, `New-Object`, `Net.WebClient`, and `.Download` are used together, as this is another method that might be utilized to fetch and execute malicious scripts from remote servers through PowerShell.\n\n- Filtering out false positives by excluding legitimate uses of PowerShell for downloading and installing software via Chocolatey, which is a package manager for Windows. This involves ignoring command lines that download and execute Chocolatey installation scripts.\n\nLogs should be examined for any of these patterns, taking into consideration that any single occurrence could be indicative of suspicious activity. It's essential to treat detections with high priority due to the potential severity of PowerShell being used as an attack vector. Tags associated with these activities include Tactics and Techniques like Execution, Persistence, Defense Evasion, and Command and Control, which are part of the broader categories of malicious behavior as classified by MITRE ATT&CK."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Ensure that all account usernames and authentication credentials are transmitted across networks using encrypted channels.\nEnsure that an encryption is used for all sensitive information in transit. Ensure that an encrypted channels is used for all administrative account access.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to ensure that all account usernames and authentication credentials are transmitted across networks using encrypted channels, ensure that encryption is used for all sensitive information in transit, and ensure that encrypted channels are used for all administrative account access, you should monitor network traffic through firewall logs for communication over common ports associated with unencrypted services. Specifically, look for traffic destined to ports 8080, 21, 80, 23, 50000, 1521, 27017, 3306, 1433, 11211, 15672, 5900, 5901, 5902, 5903, 5904. These ports often correspond to services that might not use encryption by default, such as web servers (HTTP), FTP, Telnet, various databases, and other application-specific protocols. \n\nEffective detection should include verifying that actions related to this traffic are set to either forward, accept, or are marked with a numerical value like '2', which can denote an allowable action in certain firewall configurations. Furthermore, consider if the firewall marks the connection as not blocked (either not explicitly setting an action or by marking the connection as allowed). \n\nIt is crucial to be aware that some legitimate traffic to these ports may not represent a breach of sensitive information transmission policies, resulting in potential false positives. Thus, while monitoring for these conditions signifies potential policy violations, each alert should be scrutinized to confirm the nature of the transmitted data and the encryption status of the channel. Similarly, it is essential to ensure administrative account access and sensitive information travel exclusively through encrypted channels to prevent unauthorized access and data interception, reinforcing the organization's cybersecurity posture against espionage and data theft.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: firewall\ndetection:\n    selection:\n        dst_port:\n            - 8080\n            - 21\n            - 80\n            - 23\n            - 50000\n            - 1521\n            - 27017\n            - 3306\n            - 1433\n            - 11211\n            - 15672\n            - 5900\n            - 5901\n            - 5902\n            - 5903\n            - 5904\n    selection_allow1:\n        action:\n            - forward\n            - accept\n            - 2\n    selection_allow2:\n        blocked: \"false\" # not all fws set action value, but are set to mark as blocked or allowed or not\n    condition: selection and 1 of selection_allow*\nfalsepositives:\n    - Unknown\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: firewall\ndetection:\n    selection:\n        dst_port:\n            - 8080\n            - 21\n            - 80\n            - 23\n            - 50000\n            - 1521\n            - 27017\n            - 3306\n            - 1433\n            - 11211\n            - 15672\n            - 5900\n            - 5901\n            - 5902\n            - 5903\n            - 5904\n    selection_allow1:\n        action:\n            - forward\n            - accept\n            - 2\n    selection_allow2:\n        blocked: \"false\" # not all fws set action value, but are set to mark as blocked or allowed or not\n    condition: selection and 1 of selection_allow*\nfalsepositives:\n    - Unknown\nlevel: low\n",
      "question": "Ensure that all account usernames and authentication credentials are transmitted across networks using encrypted channels.\nEnsure that an encryption is used for all sensitive information in transit. Ensure that an encrypted channels is used for all administrative account access.\n",
      "answer": "In order to ensure that all account usernames and authentication credentials are transmitted across networks using encrypted channels, ensure that encryption is used for all sensitive information in transit, and ensure that encrypted channels are used for all administrative account access, you should monitor network traffic through firewall logs for communication over common ports associated with unencrypted services. Specifically, look for traffic destined to ports 8080, 21, 80, 23, 50000, 1521, 27017, 3306, 1433, 11211, 15672, 5900, 5901, 5902, 5903, 5904. These ports often correspond to services that might not use encryption by default, such as web servers (HTTP), FTP, Telnet, various databases, and other application-specific protocols. \n\nEffective detection should include verifying that actions related to this traffic are set to either forward, accept, or are marked with a numerical value like '2', which can denote an allowable action in certain firewall configurations. Furthermore, consider if the firewall marks the connection as not blocked (either not explicitly setting an action or by marking the connection as allowed). \n\nIt is crucial to be aware that some legitimate traffic to these ports may not represent a breach of sensitive information transmission policies, resulting in potential false positives. Thus, while monitoring for these conditions signifies potential policy violations, each alert should be scrutinized to confirm the nature of the transmitted data and the encryption status of the channel. Similarly, it is essential to ensure administrative account access and sensitive information travel exclusively through encrypted channels to prevent unauthorized access and data interception, reinforcing the organization's cybersecurity posture against espionage and data theft."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    product: windows\n    service: codeintegrity-operational\ndetection:\n    selection:\n        EventID:\n            - 3082 # Code Integrity determined kernel module %2 that did not meet the WHQL requirements is loaded into the system. However, due to code integrity auditing policy, the image was allowed to load\n            - 3083 # Code Integrity determined kernel module %2 that did not meet the WHQL requirements is loaded into the system. Check with the publisher to see if a WHQL compliant kernel module is available\n    filter_optional_vmware:\n        FileNameBuffer:\n            - 'system32\\drivers\\vsock.sys'\n            - 'System32\\drivers\\vmci.sys'\n    condition: selection and not 1 of filter_optional_*\nfalsepositives:\n    - Unlikely\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect loaded kernel modules that did not meet the WHQL signing requirements.\n\nHere is how  the given sigma rule operates: In order to detect loaded kernel modules that did not meet the WHQL signing requirements, you should monitor the Windows Code Integrity operational logs. Specifically, focus on events with IDs 3082 and 3083, which indicate that a kernel module that doesn't meet the Windows Hardware Quality Labs (WHQL) requirements has been loaded into the system. For Event ID 3082, it's noted that although the kernel module did not meet WHQL requirements, due to the code integrity auditing policy, the image was allowed to load. Event ID 3083, on the other hand, advises checking with the publisher to see if a WHQL compliant kernel module is available because the loaded one did not meet the necessary requirements. \n\nHowever, it's important to apply a filter to exclude certain files associated with VMware tools - specifically `system32\\drivers\\vsock.sys` and `System32\\drivers\\vmci.sys` - as these are known to generate false positives in this context. The detection is highly reliable with few expected false positives, making it an effective measure for identifying potentially malicious or unauthorized kernel modules that could compromise the integrity of the operating system. \n\nThis detection strategy aligns with MITRE ATT&CK tactics related to persistence, privilege escalation, and defense evasion by capturing attempts to load unsigned or unverified kernel modules, which adversaries might exploit to execute malicious payloads or bypass security controls.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: codeintegrity-operational\ndetection:\n    selection:\n        EventID:\n            - 3082 # Code Integrity determined kernel module %2 that did not meet the WHQL requirements is loaded into the system. However, due to code integrity auditing policy, the image was allowed to load\n            - 3083 # Code Integrity determined kernel module %2 that did not meet the WHQL requirements is loaded into the system. Check with the publisher to see if a WHQL compliant kernel module is available\n    filter_optional_vmware:\n        FileNameBuffer:\n            - 'system32\\drivers\\vsock.sys'\n            - 'System32\\drivers\\vmci.sys'\n    condition: selection and not 1 of filter_optional_*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "loaded kernel modules that did not meet the WHQL signing requirements.",
      "answer": "In order to detect loaded kernel modules that did not meet the WHQL signing requirements, you should monitor the Windows Code Integrity operational logs. Specifically, focus on events with IDs 3082 and 3083, which indicate that a kernel module that doesn't meet the Windows Hardware Quality Labs (WHQL) requirements has been loaded into the system. For Event ID 3082, it's noted that although the kernel module did not meet WHQL requirements, due to the code integrity auditing policy, the image was allowed to load. Event ID 3083, on the other hand, advises checking with the publisher to see if a WHQL compliant kernel module is available because the loaded one did not meet the necessary requirements. \n\nHowever, it's important to apply a filter to exclude certain files associated with VMware tools - specifically `system32\\drivers\\vsock.sys` and `System32\\drivers\\vmci.sys` - as these are known to generate false positives in this context. The detection is highly reliable with few expected false positives, making it an effective measure for identifying potentially malicious or unauthorized kernel modules that could compromise the integrity of the operating system. \n\nThis detection strategy aligns with MITRE ATT&CK tactics related to persistence, privilege escalation, and defense evasion by capturing attempts to load unsigned or unverified kernel modules, which adversaries might exploit to execute malicious payloads or bypass security controls."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: proxy\ndetection:\n    selection:\n        c-useragent|startswith: 'Microsoft BITS/'\n        cs-host|endswith:\n            - '1'\n            - '2'\n            - '3'\n            - '4'\n            - '5'\n            - '6'\n            - '7'\n            - '8'\n            - '9'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect Bitsadmin connections to IP addresses instead of FQDN names\n\nHere is how  the given sigma rule operates: In order to detect Bitsadmin connections to IP addresses instead of FQDN names, you should: Monitor proxy logs for specific conditions indicating potential malicious activity. Look for user agent strings that start with 'Microsoft BITS/' which denotes the use of the Background Intelligent Transfer Service, a component of Microsoft Windows operating systems that provides asynchronous transfer of files in the background. Additionally, pay close attention to the host names ('cs-host') connected to. If these host names end in a single numeric character ('1' through '9'), it might indicate an attempt to connect to an IP address directly rather than a fully qualified domain name, which is uncommon for legitimate traffic and may signify malicious behavior. Given the unusual nature of these patterns, any detection should be treated with a high level of concern, although it's acknowledged that there may be scenarios where such traffic is benign and results in false positives. The focus on proxy log sources is critical for identifying such connections, which can be associated with various adversarial tactics and techniques, although specific MITRE ATT&CK tags were not provided in this scenario.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: proxy\ndetection:\n    selection:\n        c-useragent|startswith: 'Microsoft BITS/'\n        cs-host|endswith:\n            - '1'\n            - '2'\n            - '3'\n            - '4'\n            - '5'\n            - '6'\n            - '7'\n            - '8'\n            - '9'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Bitsadmin connections to IP addresses instead of FQDN names",
      "answer": "In order to detect Bitsadmin connections to IP addresses instead of FQDN names, you should: Monitor proxy logs for specific conditions indicating potential malicious activity. Look for user agent strings that start with 'Microsoft BITS/' which denotes the use of the Background Intelligent Transfer Service, a component of Microsoft Windows operating systems that provides asynchronous transfer of files in the background. Additionally, pay close attention to the host names ('cs-host') connected to. If these host names end in a single numeric character ('1' through '9'), it might indicate an attempt to connect to an IP address directly rather than a fully qualified domain name, which is uncommon for legitimate traffic and may signify malicious behavior. Given the unusual nature of these patterns, any detection should be treated with a high level of concern, although it's acknowledged that there may be scenarios where such traffic is benign and results in false positives. The focus on proxy log sources is critical for identifying such connections, which can be associated with various adversarial tactics and techniques, although specific MITRE ATT&CK tags were not provided in this scenario."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    product: windows\n    category: driver_load\ndetection:\n    selection_sysmon:\n        Hashes|contains:\n            - 'MD5=a179c4093d05a3e1ee73f6ff07f994aa'\n            - 'SHA1=5d6b9e80e12bfc595d4d26f6afb099b3cb471dd4'\n            - 'SHA256=4b5229b3250c8c08b98cb710d6c056144271de099a57ae09f5d2097fc41bd4f1'\n    selection_other:\n        - md5: 'a179c4093d05a3e1ee73f6ff07f994aa'\n        - sha1: '5d6b9e80e12bfc595d4d26f6afb099b3cb471dd4'\n        - sha256: '4b5229b3250c8c08b98cb710d6c056144271de099a57ae09f5d2097fc41bd4f1'\n    driver_img:\n        ImageLoaded|endswith: '\\aswArPot.sys'\n    driver_status:\n        - Signed: 'false'\n        - SignatureStatus: Expired\n    condition: 1 of selection* or all of driver_*\nfalsepositives:\n    - Unknown\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect load of a signed and vulnerable AVAST Anti Rootkit driver often used by threat actors or malware for stopping and disabling AV and EDR products\n\nHere is how  the given sigma rule operates: In order to detect the load of a signed and vulnerable AVAST Anti Rootkit driver often used by threat actors or malware for stopping and disabling AV and EDR products, you should monitor Windows driver load activities, focusing on specific indicators of compromise and behaviors. Monitor for any driver loads that match known malicious hash values, which include MD5 hash 'a179c4093d05a3e1ee73f6ff07f994aa', SHA1 hash '5d6b9e80e12bfc595d4d26f6afb099b3cb471dd4', and SHA256 hash '4b5229b3250c8c08b98cb710d6c056144271de099a57ae09f5d2097fc41bd4f1'. These hash values serve as distinct signatures for identifying the suspicious driver load attempt.\n\nAdditionally, pay close attention to drivers that are being loaded and match the file name '\\aswArPot.sys', which is specifically associated with the AVAST Anti Rootkit software. Further scrutiny is required for driver loads where the driver signature verification fails ('Signed: false') or the signature status is marked as expired ('SignatureStatus: Expired'). These conditions can indicate a compromise, as malicious actors might exploit vulnerable or outdated drivers, especially those related to anti-rootkit, to disable security mechanisms.\n\nThis detection strategy covers various log sources within Windows, particularly focusing on driver load events, which are crucial for identifying such malicious activities. The absence of known legitimate uses for this driver being loaded under suspicious circumstances (such as with a bad signature) minimizes the chance of false positives, although unknown scenarios may still arise.\n\nThe associated tactics and techniques include Persistence, Privilege Escalation, and Defense Evasion by exploiting driver vulnerabilities to disable or stop AV and EDR solutions, obstructing detection and response efforts. Monitoring for these specific conditions and behaviors is crucial for timely detection and response to thwart attackers' efforts in leveraging such techniques.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: driver_load\ndetection:\n    selection_sysmon:\n        Hashes|contains:\n            - 'MD5=a179c4093d05a3e1ee73f6ff07f994aa'\n            - 'SHA1=5d6b9e80e12bfc595d4d26f6afb099b3cb471dd4'\n            - 'SHA256=4b5229b3250c8c08b98cb710d6c056144271de099a57ae09f5d2097fc41bd4f1'\n    selection_other:\n        - md5: 'a179c4093d05a3e1ee73f6ff07f994aa'\n        - sha1: '5d6b9e80e12bfc595d4d26f6afb099b3cb471dd4'\n        - sha256: '4b5229b3250c8c08b98cb710d6c056144271de099a57ae09f5d2097fc41bd4f1'\n    driver_img:\n        ImageLoaded|endswith: '\\aswArPot.sys'\n    driver_status:\n        - Signed: 'false'\n        - SignatureStatus: Expired\n    condition: 1 of selection* or all of driver_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "load of a signed and vulnerable AVAST Anti Rootkit driver often used by threat actors or malware for stopping and disabling AV and EDR products",
      "answer": "In order to detect the load of a signed and vulnerable AVAST Anti Rootkit driver often used by threat actors or malware for stopping and disabling AV and EDR products, you should monitor Windows driver load activities, focusing on specific indicators of compromise and behaviors. Monitor for any driver loads that match known malicious hash values, which include MD5 hash 'a179c4093d05a3e1ee73f6ff07f994aa', SHA1 hash '5d6b9e80e12bfc595d4d26f6afb099b3cb471dd4', and SHA256 hash '4b5229b3250c8c08b98cb710d6c056144271de099a57ae09f5d2097fc41bd4f1'. These hash values serve as distinct signatures for identifying the suspicious driver load attempt.\n\nAdditionally, pay close attention to drivers that are being loaded and match the file name '\\aswArPot.sys', which is specifically associated with the AVAST Anti Rootkit software. Further scrutiny is required for driver loads where the driver signature verification fails ('Signed: false') or the signature status is marked as expired ('SignatureStatus: Expired'). These conditions can indicate a compromise, as malicious actors might exploit vulnerable or outdated drivers, especially those related to anti-rootkit, to disable security mechanisms.\n\nThis detection strategy covers various log sources within Windows, particularly focusing on driver load events, which are crucial for identifying such malicious activities. The absence of known legitimate uses for this driver being loaded under suspicious circumstances (such as with a bad signature) minimizes the chance of false positives, although unknown scenarios may still arise.\n\nThe associated tactics and techniques include Persistence, Privilege Escalation, and Defense Evasion by exploiting driver vulnerabilities to disable or stop AV and EDR solutions, obstructing detection and response efforts. Monitoring for these specific conditions and behaviors is crucial for timely detection and response to thwart attackers' efforts in leveraging such techniques."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    product: aws\n    service: cloudtrail\ndetection:\n    selection:\n        eventSource: 'iam.amazonaws.com'\n        eventName:\n            - 'GetLoginProfile'\n            - 'CreateLoginProfile'\n        userAgent|contains: 'S3 Browser'\n    condition: selection\nfalsepositives:\n    - Valid usage of S3 Browser for IAM LoginProfile listing and/or creation\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect S3 Browser utility performing reconnaissance looking for existing IAM Users without a LoginProfile defined then (when found) creating a LoginProfile.\n\nHere is how  the given sigma rule operates: In order to detect S3 Browser utility performing reconnaissance looking for existing IAM Users without a LoginProfile defined then (when found) creating a LoginProfile, you should monitor AWS CloudTrail logs specifically for interaction with the IAM service. Focus on activities where the event source is 'iam.amazonaws.com', and the event names include 'GetLoginProfile' and 'CreateLoginProfile'. These activities indicate that a user is querying for IAM LoginProfiles and potentially creating them, which can be a part of reconnaissance or an attack setup phase. Additionally, pay special attention to actions initiated with a user agent that contains the string 'S3 Browser', as this signifies the use of the S3 Browser utility, which is not commonly used for such administrative tasks. Recognizing these patterns can be indicative of an attacker attempting to identify IAM Users without LoginProfiles for exploitation purposes or creating LoginProfiles for lateral movement or persistence. While monitoring, be mindful of potential valid usages of S3 Browser for IAM LoginProfile listing and/or creation, which are considered false positives. The associated MITRE ATT&CK tactics and techniques for this activity include Reconnaissance and Resource Development.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: aws\n    service: cloudtrail\ndetection:\n    selection:\n        eventSource: 'iam.amazonaws.com'\n        eventName:\n            - 'GetLoginProfile'\n            - 'CreateLoginProfile'\n        userAgent|contains: 'S3 Browser'\n    condition: selection\nfalsepositives:\n    - Valid usage of S3 Browser for IAM LoginProfile listing and/or creation\nlevel: high\n",
      "question": "S3 Browser utility performing reconnaissance looking for existing IAM Users without a LoginProfile defined then (when found) creating a LoginProfile.",
      "answer": "In order to detect S3 Browser utility performing reconnaissance looking for existing IAM Users without a LoginProfile defined then (when found) creating a LoginProfile, you should monitor AWS CloudTrail logs specifically for interaction with the IAM service. Focus on activities where the event source is 'iam.amazonaws.com', and the event names include 'GetLoginProfile' and 'CreateLoginProfile'. These activities indicate that a user is querying for IAM LoginProfiles and potentially creating them, which can be a part of reconnaissance or an attack setup phase. Additionally, pay special attention to actions initiated with a user agent that contains the string 'S3 Browser', as this signifies the use of the S3 Browser utility, which is not commonly used for such administrative tasks. Recognizing these patterns can be indicative of an attacker attempting to identify IAM Users without LoginProfiles for exploitation purposes or creating LoginProfiles for lateral movement or persistence. While monitoring, be mindful of potential valid usages of S3 Browser for IAM LoginProfile listing and/or creation, which are considered false positives. The associated MITRE ATT&CK tactics and techniques for this activity include Reconnaissance and Resource Development."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Detect AD credential dumping using impacket secretdump HKTL. Based on the SIGMA rules/windows/builtin/win_impacket_secretdump.yml.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect AD credential dumping using impacket secretdump HKTL, you should focus on monitoring SMB file activities from Zeek logs. Specifically, look out for file activities where the file path contains a backslash '\\' and 'ADMIN$' indicating access to an administrative share typically used in this attack context. Additionally, be vigilant for files within the 'SYSTEM32\\' directory that have a '.tmp' extension, as these are often signs of illicit activity related to dumping credentials. It's important to note that while these indicators can be significant, there might be rare cases where they do not signify malicious behavior; however, such instances are currently unknown, lending a high level of confidence to these detection criteria. This approach aligns with understanding tactics and techniques such as Credential Access through Credential Dumping, leveraging the tools like the 'impacket secretdump' utility often used by attackers to extract sensitive information from a compromised system.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: zeek\n    service: smb_files\ndetection:\n    selection:\n        path|contains|all:\n            - '\\'\n            - 'ADMIN$'\n        name|contains: 'SYSTEM32\\'\n        name|endswith: '.tmp'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: zeek\n    service: smb_files\ndetection:\n    selection:\n        path|contains|all:\n            - '\\'\n            - 'ADMIN$'\n        name|contains: 'SYSTEM32\\'\n        name|endswith: '.tmp'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Detect AD credential dumping using impacket secretdump HKTL. Based on the SIGMA rules/windows/builtin/win_impacket_secretdump.yml",
      "answer": "In order to detect AD credential dumping using impacket secretdump HKTL, you should focus on monitoring SMB file activities from Zeek logs. Specifically, look out for file activities where the file path contains a backslash '\\' and 'ADMIN$' indicating access to an administrative share typically used in this attack context. Additionally, be vigilant for files within the 'SYSTEM32\\' directory that have a '.tmp' extension, as these are often signs of illicit activity related to dumping credentials. It's important to note that while these indicators can be significant, there might be rare cases where they do not signify malicious behavior; however, such instances are currently unknown, lending a high level of confidence to these detection criteria. This approach aligns with understanding tactics and techniques such as Credential Access through Credential Dumping, leveraging the tools like the 'impacket secretdump' utility often used by attackers to extract sensitive information from a compromised system."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains|all:\n            - 'Get-AdGroup '\n            - '-Filter'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect usage of the \"Get-AdGroup\" cmdlet to enumerate Groups within Active Directory\n\nHere is how  the given sigma rule operates: In order to detect usage of the \"Get-AdGroup\" cmdlet to enumerate Groups within Active Directory, you should: focus on monitoring PowerShell script activities within Windows environments, specifically paying attention to Script Block Logging. This requires Script Block Logging to be enabled on the system for accurate detection. The primary indicator for this activity is the presence of PowerShell script blocks containing both the 'Get-AdGroup' cmdlet and the '-Filter' parameter in their text. This combination suggests an attempt to enumerate Active Directory Groups, which might be a part of reconnaissance activities by an attacker. It's important to note, however, that this detection has a low level of confidence, and as such, there may be unknown false positives. Identifying such behavior is crucial in preventing unauthorized access to group membership information that could be leveraged for escalating attacks or moving laterally within a network.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains|all:\n            - 'Get-AdGroup '\n            - '-Filter'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low\n",
      "question": "usage of the \"Get-AdGroup\" cmdlet to enumerate Groups within Active Directory",
      "answer": "In order to detect usage of the \"Get-AdGroup\" cmdlet to enumerate Groups within Active Directory, you should: focus on monitoring PowerShell script activities within Windows environments, specifically paying attention to Script Block Logging. This requires Script Block Logging to be enabled on the system for accurate detection. The primary indicator for this activity is the presence of PowerShell script blocks containing both the 'Get-AdGroup' cmdlet and the '-Filter' parameter in their text. This combination suggests an attempt to enumerate Active Directory Groups, which might be a part of reconnaissance activities by an attacker. It's important to note, however, that this detection has a low level of confidence, and as such, there may be unknown false positives. Identifying such behavior is crucial in preventing unauthorized access to group membership information that could be leveraged for escalating attacks or moving laterally within a network."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious Spring framework exceptions that could indicate exploitation attempts.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious Spring framework exceptions that could indicate exploitation attempts, you should: Monitor application logs from products using the Spring framework for occurrences of specific exceptions. These exceptions include AccessDeniedException, CsrfException, InvalidCsrfTokenException, MissingCsrfTokenException, CookieTheftException, InvalidCookieException, and RequestRejectedException. When any of these exceptions are recorded in the logs, it might suggest an attempt to exploit the system, although one must consider potential false positives that could arise from application bugs. The severity of this monitoring strategy is considered medium, highlighting the importance of staying vigilant against possible exploitation activities targeting the Spring framework.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: application\n    product: spring\ndetection:\n    keywords:\n        - AccessDeniedException\n        - CsrfException\n        - InvalidCsrfTokenException\n        - MissingCsrfTokenException\n        - CookieTheftException\n        - InvalidCookieException\n        - RequestRejectedException\n    condition: keywords\nfalsepositives:\n    - Application bugs\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: application\n    product: spring\ndetection:\n    keywords:\n        - AccessDeniedException\n        - CsrfException\n        - InvalidCsrfTokenException\n        - MissingCsrfTokenException\n        - CookieTheftException\n        - InvalidCookieException\n        - RequestRejectedException\n    condition: keywords\nfalsepositives:\n    - Application bugs\nlevel: medium\n",
      "question": "suspicious Spring framework exceptions that could indicate exploitation attempts",
      "answer": "In order to detect suspicious Spring framework exceptions that could indicate exploitation attempts, you should: Monitor application logs from products using the Spring framework for occurrences of specific exceptions. These exceptions include AccessDeniedException, CsrfException, InvalidCsrfTokenException, MissingCsrfTokenException, CookieTheftException, InvalidCookieException, and RequestRejectedException. When any of these exceptions are recorded in the logs, it might suggest an attempt to exploit the system, although one must consider potential false positives that could arise from application bugs. The severity of this monitoring strategy is considered medium, highlighting the importance of staying vigilant against possible exploitation activities targeting the Spring framework."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection_start:\n        ScriptBlockText|contains: Start-Process\n    selection_batch:\n        ScriptBlockText|contains:\n            - '.cmd'\n            - '.bat'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate administration script\nlevel: medium\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect Adversaries may abuse the Windows command shell for execution.\nThe Windows command shell ([cmd](https://attack.mitre.org/software/S0106)) is the primary command prompt on Windows systems.\nThe Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands.\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops.\nCommon uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple system\n\n\nHere is how  the given sigma rule operates: In order to detect adversaries abusing the Windows command shell for execution, you should monitor PowerShell Script Block Logs for specific patterns indicating malicious activity. Ensure that Script Block Logging is enabled on Windows systems to capture detailed information about all PowerShell scripts executed, including those launched from the command line. Focus on identifying any instances where the PowerShell script contains commands starting processes (Start-Process) directly followed by or associated with execution of batch files (files ending in .cmd or .bat). These patterns are indicative of attempts to control the system or execute tasks in a manner commonly seen in attacks leveraging the command shell. Note that while detecting these behaviors is crucial for identifying potential malicious activity, it\u2019s also important to consider legitimate administrative scripts that may employ similar commands for system management purposes. The detection is tagged with tactics and techniques such as Execution and Command and Scripting Interpreter, reflecting its focus on capturing misuse of the Windows command shell and batch files for adversarial purposes.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection_start:\n        ScriptBlockText|contains: Start-Process\n    selection_batch:\n        ScriptBlockText|contains:\n            - '.cmd'\n            - '.bat'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate administration script\nlevel: medium\n",
      "question": "Adversaries may abuse the Windows command shell for execution.\nThe Windows command shell ([cmd](https://attack.mitre.org/software/S0106)) is the primary command prompt on Windows systems.\nThe Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands.\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops.\nCommon uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple system\n",
      "answer": "In order to detect adversaries abusing the Windows command shell for execution, you should monitor PowerShell Script Block Logs for specific patterns indicating malicious activity. Ensure that Script Block Logging is enabled on Windows systems to capture detailed information about all PowerShell scripts executed, including those launched from the command line. Focus on identifying any instances where the PowerShell script contains commands starting processes (Start-Process) directly followed by or associated with execution of batch files (files ending in .cmd or .bat). These patterns are indicative of attempts to control the system or execute tasks in a manner commonly seen in attacks leveraging the command shell. Note that while detecting these behaviors is crucial for identifying potential malicious activity, it\u2019s also important to consider legitimate administrative scripts that may employ similar commands for system management purposes. The detection is tagged with tactics and techniques such as Execution and Command and Scripting Interpreter, reflecting its focus on capturing misuse of the Windows command shell and batch files for adversarial purposes."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of \"wget\" to download a \".zip\" or \".rar\" files from \"temp.sh\". As seen used by UNC4841 during their Barracuda ESG zero day exploitation..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution of \"wget\" to download a \".zip\" or \".rar\" files from \"temp.sh\", as seen used by UNC4841 during their Barracuda ESG zero day exploitation, you should: Monitor Linux systems for process creation events specifically focusing on instances where the \"wget\" utility is executed. Look for command lines that contain the specific URL \"https://temp.sh/\", which is a known indicator of this attack type. Additionally, ensure that the command line ends with either \".rar\" or \".zip\", suggesting the download of a compressed file, which is a common tactic used in the delivery of malicious payloads. This behavior is significant and should be regarded with a high level of suspicion, given its association with a known threat actor's method of operation.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: linux\n    category: process_creation\ndetection:\n    selection:\n        Image|endswith: '/wget'\n        CommandLine|contains: 'https://temp.sh/'\n        CommandLine|endswith:\n            - '.rar'\n            - '.zip'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\n    category: process_creation\ndetection:\n    selection:\n        Image|endswith: '/wget'\n        CommandLine|contains: 'https://temp.sh/'\n        CommandLine|endswith:\n            - '.rar'\n            - '.zip'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "execution of \"wget\" to download a \".zip\" or \".rar\" files from \"temp.sh\". As seen used by UNC4841 during their Barracuda ESG zero day exploitation.",
      "answer": "In order to detect execution of \"wget\" to download a \".zip\" or \".rar\" files from \"temp.sh\", as seen used by UNC4841 during their Barracuda ESG zero day exploitation, you should: Monitor Linux systems for process creation events specifically focusing on instances where the \"wget\" utility is executed. Look for command lines that contain the specific URL \"https://temp.sh/\", which is a known indicator of this attack type. Additionally, ensure that the command line ends with either \".rar\" or \".zip\", suggesting the download of a compressed file, which is a common tactic used in the delivery of malicious payloads. This behavior is significant and should be regarded with a high level of suspicion, given its association with a known threat actor's method of operation."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting command line parameters or strings often used by crypto miners.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect command line parameters or strings often used by crypto miners, you should focus on monitoring process creation events within Linux systems. Look for command line arguments indicating the operation of crypto mining software, specifically those associated with the popular Monero crypto miner, Xmrig. Key indicators include modifications of CPU priority, explicit donation levels set to zero (to avoid giving a percentage of mined cryptocurrency to the software's developers), pool connection settings (often starting with '-o pool.'), usage of the NiceHash service, specification of the mining algorithm (like '--algo=rx/0'), and connections to mining pools through both TCP and UDP protocols indicated by 'stratum+tcp://' and 'stratum+udp://' respectively. Additionally, watch for subprocesses started by Xmrig which might attempt to load the 'msr' module with write permissions turned on, likely to optimize mining operations by modifying system registries.\n\nAlso important is detection of base64 encoded versions of key parameters such as '--donate-level=' and mining pool URIs (Uniform Resource Identifiers) starting with 'stratum+tcp://' and 'stratum+udp://', indicating advanced attempts to disguise mining activity. The presence of these command line arguments is a strong indicator of crypto mining activity on the system.\n\nHowever, it is important to consider the potential for false positives, as legitimate uses of crypto miners on the system could produce similar indicators. For instance, authorized crypto mining for research or revenue generation within organizational policies will generate the same command line parameters. The severity of finding such events has been marked high due to the substantial impact unauthorized crypto mining can have on system resources and operational costs.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: linux\n    category: process_creation\ndetection:\n    selection:\n        CommandLine|contains:\n            - ' --cpu-priority='\n            - '--donate-level=0'\n            - ' -o pool.'\n            - ' --nicehash'\n            - ' --algo=rx/0 '\n            - 'stratum+tcp://'\n            - 'stratum+udp://'\n            # Sub process started by xmrig - the most popular Monero crypto miner - unknown if this causes any false positives\n            - 'sh -c /sbin/modprobe msr allow_writes=on'\n            # base64 encoded: --donate-level=\n            - 'LS1kb25hdGUtbGV2ZWw9'\n            - '0tZG9uYXRlLWxldmVsP'\n            - 'tLWRvbmF0ZS1sZXZlbD'\n            # base64 encoded: stratum+tcp:// and stratum+udp://\n            - 'c3RyYXR1bSt0Y3A6Ly'\n            - 'N0cmF0dW0rdGNwOi8v'\n            - 'zdHJhdHVtK3RjcDovL'\n            - 'c3RyYXR1bSt1ZHA6Ly'\n            - 'N0cmF0dW0rdWRwOi8v'\n            - 'zdHJhdHVtK3VkcDovL'\n    condition: selection\nfalsepositives:\n    - Legitimate use of crypto miners\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\n    category: process_creation\ndetection:\n    selection:\n        CommandLine|contains:\n            - ' --cpu-priority='\n            - '--donate-level=0'\n            - ' -o pool.'\n            - ' --nicehash'\n            - ' --algo=rx/0 '\n            - 'stratum+tcp://'\n            - 'stratum+udp://'\n            # Sub process started by xmrig - the most popular Monero crypto miner - unknown if this causes any false positives\n            - 'sh -c /sbin/modprobe msr allow_writes=on'\n            # base64 encoded: --donate-level=\n            - 'LS1kb25hdGUtbGV2ZWw9'\n            - '0tZG9uYXRlLWxldmVsP'\n            - 'tLWRvbmF0ZS1sZXZlbD'\n            # base64 encoded: stratum+tcp:// and stratum+udp://\n            - 'c3RyYXR1bSt0Y3A6Ly'\n            - 'N0cmF0dW0rdGNwOi8v'\n            - 'zdHJhdHVtK3RjcDovL'\n            - 'c3RyYXR1bSt1ZHA6Ly'\n            - 'N0cmF0dW0rdWRwOi8v'\n            - 'zdHJhdHVtK3VkcDovL'\n    condition: selection\nfalsepositives:\n    - Legitimate use of crypto miners\nlevel: high\n",
      "question": "command line parameters or strings often used by crypto miners",
      "answer": "In order to detect command line parameters or strings often used by crypto miners, you should focus on monitoring process creation events within Linux systems. Look for command line arguments indicating the operation of crypto mining software, specifically those associated with the popular Monero crypto miner, Xmrig. Key indicators include modifications of CPU priority, explicit donation levels set to zero (to avoid giving a percentage of mined cryptocurrency to the software's developers), pool connection settings (often starting with '-o pool.'), usage of the NiceHash service, specification of the mining algorithm (like '--algo=rx/0'), and connections to mining pools through both TCP and UDP protocols indicated by 'stratum+tcp://' and 'stratum+udp://' respectively. Additionally, watch for subprocesses started by Xmrig which might attempt to load the 'msr' module with write permissions turned on, likely to optimize mining operations by modifying system registries.\n\nAlso important is detection of base64 encoded versions of key parameters such as '--donate-level=' and mining pool URIs (Uniform Resource Identifiers) starting with 'stratum+tcp://' and 'stratum+udp://', indicating advanced attempts to disguise mining activity. The presence of these command line arguments is a strong indicator of crypto mining activity on the system.\n\nHowever, it is important to consider the potential for false positives, as legitimate uses of crypto miners on the system could produce similar indicators. For instance, authorized crypto mining for research or revenue generation within organizational policies will generate the same command line parameters. The severity of finding such events has been marked high due to the substantial impact unauthorized crypto mining can have on system resources and operational costs."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_origin:\n        - Image|endswith: '\\w3wp.exe'\n        - ParentImage|endswith: '\\w3wp.exe'\n    selection_cmdline:\n        CommandLine|contains:\n            - '&ipconfig&echo'\n            - '&quser&echo'\n            - '&whoami&echo'\n            - '&c:&echo'\n            - '&cd&echo'\n            - '&dir&echo'\n            - '&echo [E]'\n            - '&echo [S]'\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect patterns found in process executions cause by China Chopper like tiny (ASPX) webshells\n\nHere is how  the given sigma rule operates: In order to detect patterns found in process executions caused by China Chopper like tiny (ASPX) webshells, you should: monitor Windows process creation events for any executions of the 'w3wp.exe' process, or any child processes spawned by 'w3wp.exe'. Specifically, look for command lines that contain sequences of commands separated by '&' and followed by 'echo'. These sequences include commands like 'ipconfig', 'quser', 'whoami', 'c:', 'cd', 'dir', and explicit echo commands with '[E]' or '[S]'. The presence of these command sequences in the command line arguments of 'w3wp.exe' or its child processes is a strong indicator of an attack, as they are common in exploitation techniques associated with webshell activity, particularly those related to China Chopper. This activity is indicative of tactics such as execution, persistence, privilege escalation, and defense evasion, where attackers execute arbitrary system commands for reconnaissance, maintaining access, or moving laterally within a network.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_origin:\n        - Image|endswith: '\\w3wp.exe'\n        - ParentImage|endswith: '\\w3wp.exe'\n    selection_cmdline:\n        CommandLine|contains:\n            - '&ipconfig&echo'\n            - '&quser&echo'\n            - '&whoami&echo'\n            - '&c:&echo'\n            - '&cd&echo'\n            - '&dir&echo'\n            - '&echo [E]'\n            - '&echo [S]'\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "patterns found in process executions cause by China Chopper like tiny (ASPX) webshells",
      "answer": "In order to detect patterns found in process executions caused by China Chopper like tiny (ASPX) webshells, you should: monitor Windows process creation events for any executions of the 'w3wp.exe' process, or any child processes spawned by 'w3wp.exe'. Specifically, look for command lines that contain sequences of commands separated by '&' and followed by 'echo'. These sequences include commands like 'ipconfig', 'quser', 'whoami', 'c:', 'cd', 'dir', and explicit echo commands with '[E]' or '[S]'. The presence of these command sequences in the command line arguments of 'w3wp.exe' or its child processes is a strong indicator of an attack, as they are common in exploitation techniques associated with webshell activity, particularly those related to China Chopper. This activity is indicative of tactics such as execution, persistence, privilege escalation, and defense evasion, where attackers execute arbitrary system commands for reconnaissance, maintaining access, or moving laterally within a network."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: file_event\n    product: windows\ndetection:\n    selection_generic:\n        TargetFilename|contains:\n            - '\\MOVEit Transfer\\wwwroot\\'\n            - '\\MOVEitTransfer\\wwwroot\\'\n        TargetFilename|endswith:\n            - '.7z'\n            - '.bat'\n            - '.dll'\n            - '.exe'\n            - '.ps1'\n            - '.rar'\n            - '.vbe'\n            - '.vbs'\n            - '.zip'\n    selection_known_ioc:\n        TargetFilename|endswith:\n            - '\\MOVEit Transfer\\wwwroot\\_human2.aspx.lnk'\n            - '\\MOVEit Transfer\\wwwroot\\_human2.aspx'\n            - '\\MOVEit Transfer\\wwwroot\\human2.aspx.lnk'\n            - '\\MOVEit Transfer\\wwwroot\\human2.aspx'\n            - '\\MOVEitTransfer\\wwwroot\\_human2.aspx.lnk'\n            - '\\MOVEitTransfer\\wwwroot\\_human2.aspx'\n            - '\\MOVEitTransfer\\wwwroot\\human2.aspx.lnk'\n            - '\\MOVEitTransfer\\wwwroot\\human2.aspx'\n    # Uncomment selection if you wanna threat hunt for additional artifacts\n    #selection_cmdline:\n    #    TargetFilename|contains: ':\\Windows\\TEMP\\'\n    #    TargetFilename|endswith: '.cmdline'\n    selection_compiled_asp:\n        CreationUtcTime|startswith:\n            - '2023-03- '\n            - '2023-04- '\n            - '2023-05- '\n            - '2023-06- '\n        TargetFilename|contains|all:\n            - '\\Windows\\Microsoft.net\\Framework64\\v'\n            - '\\Temporary ASP.NET Files\\'\n            - 'App_Web_'\n        TargetFilename|endswith: '.dll'\n    condition: 1 of selection_*\nfalsepositives:\n    - To avoid FP, this rule should only be applied on MOVEit servers.\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect file indicators of potential exploitation of MOVEit CVE-2023-34362.\n\nHere is how  the given sigma rule operates: In order to detect file indicators of potential exploitation of MOVEit CVE-2023-34362, you should focus on monitoring Windows file events, specifically looking for activities that might indicate an attack. This involves scrutinizing various file creations, modifications, and actions that are unusual or indicative of exploitation patterns associated with this specific vulnerability.\n\nFirstly, you should watch for any file activities involving the directories related to MOVEit Transfer, particularly any actions within the `\\MOVEit Transfer\\wwwroot\\` or `\\MOVEitTransfer\\wwwroot\\` paths. This focus ensures that the surveillance is appropriately narrowed down to the MOVEit environments, hence reducing noise from irrelevant data.\n\nPay particular attention to files that end with extensions commonly associated with potentially malicious activities or scripts. These extensions include `.7z`, `.bat`, `.dll`, `.exe`, `.ps1`, `.rar`, `.vbe`, `.vbs`, and `.zip`. The appearance of such files under the MOVEit Transfer directories could signify unauthorized attempts to upload or modify executable or compressed files, which could be leveraged in an exploitation attempt.\n\nAdditionally, keep an eye out for known indicators of compromise (IoCs) specifically named files such as occurrences of `_human2.aspx`, `_human2.aspx.lnk`, `human2.aspx`, and `human2.aspx.lnk` under the MOVEit Transfer directories. These file names, especially when appearing in conjunction with `.lnk` or directly as `.aspx` files, are strong indicators of attempted or successful exploitation.\n\nFurther, be vigilant for newly compiled ASP.NET files within the `\\Windows\\Microsoft.net\\Framework64\\v` directory that falls under the `\\Temporary ASP.NET Files\\` path and contain the string `App_Web_` in their names. These should have a creation date within the months following the disclosure of CVE-2023-34362, specifically from March to June 2023, and end with `.dll`. This pattern could indicate the deployment of malicious ASP.NET applications intended to exploit or maintain persistence within the affected MOVEit environment.\n\nIt is also essential to apply this monitoring specifically to MOVEit servers to minimize false positives. This targeted approach ensures that the detection efforts are highly relevant and focused on the environments at risk from this vulnerability.\n\nBy actively monitoring for these signs and applying these detection strategies, organizations can significantly enhance their ability to identify potential exploitation attempts of MOVEit CVE-2023-34362. This proactive stance is critical for mitigating the vulnerability's impact and securing affected systems.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: file_event\n    product: windows\ndetection:\n    selection_generic:\n        TargetFilename|contains:\n            - '\\MOVEit Transfer\\wwwroot\\'\n            - '\\MOVEitTransfer\\wwwroot\\'\n        TargetFilename|endswith:\n            - '.7z'\n            - '.bat'\n            - '.dll'\n            - '.exe'\n            - '.ps1'\n            - '.rar'\n            - '.vbe'\n            - '.vbs'\n            - '.zip'\n    selection_known_ioc:\n        TargetFilename|endswith:\n            - '\\MOVEit Transfer\\wwwroot\\_human2.aspx.lnk'\n            - '\\MOVEit Transfer\\wwwroot\\_human2.aspx'\n            - '\\MOVEit Transfer\\wwwroot\\human2.aspx.lnk'\n            - '\\MOVEit Transfer\\wwwroot\\human2.aspx'\n            - '\\MOVEitTransfer\\wwwroot\\_human2.aspx.lnk'\n            - '\\MOVEitTransfer\\wwwroot\\_human2.aspx'\n            - '\\MOVEitTransfer\\wwwroot\\human2.aspx.lnk'\n            - '\\MOVEitTransfer\\wwwroot\\human2.aspx'\n    # Uncomment selection if you wanna threat hunt for additional artifacts\n    #selection_cmdline:\n    #    TargetFilename|contains: ':\\Windows\\TEMP\\'\n    #    TargetFilename|endswith: '.cmdline'\n    selection_compiled_asp:\n        CreationUtcTime|startswith:\n            - '2023-03- '\n            - '2023-04- '\n            - '2023-05- '\n            - '2023-06- '\n        TargetFilename|contains|all:\n            - '\\Windows\\Microsoft.net\\Framework64\\v'\n            - '\\Temporary ASP.NET Files\\'\n            - 'App_Web_'\n        TargetFilename|endswith: '.dll'\n    condition: 1 of selection_*\nfalsepositives:\n    - To avoid FP, this rule should only be applied on MOVEit servers.\nlevel: high\n",
      "question": "file indicators of potential exploitation of MOVEit CVE-2023-34362.",
      "answer": "In order to detect file indicators of potential exploitation of MOVEit CVE-2023-34362, you should focus on monitoring Windows file events, specifically looking for activities that might indicate an attack. This involves scrutinizing various file creations, modifications, and actions that are unusual or indicative of exploitation patterns associated with this specific vulnerability.\n\nFirstly, you should watch for any file activities involving the directories related to MOVEit Transfer, particularly any actions within the `\\MOVEit Transfer\\wwwroot\\` or `\\MOVEitTransfer\\wwwroot\\` paths. This focus ensures that the surveillance is appropriately narrowed down to the MOVEit environments, hence reducing noise from irrelevant data.\n\nPay particular attention to files that end with extensions commonly associated with potentially malicious activities or scripts. These extensions include `.7z`, `.bat`, `.dll`, `.exe`, `.ps1`, `.rar`, `.vbe`, `.vbs`, and `.zip`. The appearance of such files under the MOVEit Transfer directories could signify unauthorized attempts to upload or modify executable or compressed files, which could be leveraged in an exploitation attempt.\n\nAdditionally, keep an eye out for known indicators of compromise (IoCs) specifically named files such as occurrences of `_human2.aspx`, `_human2.aspx.lnk`, `human2.aspx`, and `human2.aspx.lnk` under the MOVEit Transfer directories. These file names, especially when appearing in conjunction with `.lnk` or directly as `.aspx` files, are strong indicators of attempted or successful exploitation.\n\nFurther, be vigilant for newly compiled ASP.NET files within the `\\Windows\\Microsoft.net\\Framework64\\v` directory that falls under the `\\Temporary ASP.NET Files\\` path and contain the string `App_Web_` in their names. These should have a creation date within the months following the disclosure of CVE-2023-34362, specifically from March to June 2023, and end with `.dll`. This pattern could indicate the deployment of malicious ASP.NET applications intended to exploit or maintain persistence within the affected MOVEit environment.\n\nIt is also essential to apply this monitoring specifically to MOVEit servers to minimize false positives. This targeted approach ensures that the detection efforts are highly relevant and focused on the environments at risk from this vulnerability.\n\nBy actively monitoring for these signs and applying these detection strategies, organizations can significantly enhance their ability to identify potential exploitation attempts of MOVEit CVE-2023-34362. This proactive stance is critical for mitigating the vulnerability's impact and securing affected systems."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Adversaries may search for private key certificate files on compromised systems for insecurely stored credential.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect adversaries searching for private key certificate files on compromised systems due to insecurely stored credentials, you should observe the creation of processes on Windows systems, focusing particularly on those initiating from command-line interfaces such as Command Prompt (cmd.exe) and PowerShell (powershell.exe or pwsh.exe), along with the usage of the findstr.exe utility. Detecting command lines that contain indicators of a search operation, such as 'dir ' in Command Prompt or 'Get-ChildItem ' in PowerShell, along with the presence of extensions related to key files (e.g., .key, .pgp, .gpg, .ppk, .p12, .pem, .pfx, .cer, .p7b, .asc), can signal potential unauthorized activities linked to the exploitation tactics of Credential Access. The rule targets the command-line arguments and executed binaries indicative of attempts to locate and potentially exfiltrate sensitive cryptographic materials which are crucial for secure communications and data protection. Monitoring for these events at a medium alert level could point toward an adversary's attempt to exploit insecurely stored credentials, thus aiding in the timely identification and mitigation of such threats.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_cmd_img:\n        - Image|endswith: '\\cmd.exe'\n        - OriginalFileName: 'Cmd.Exe'\n    selection_cmd_cli:\n        CommandLine|contains: 'dir '\n    selection_pwsh_img:\n        - Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        - OriginalFileName:\n            - 'PowerShell.EXE'\n            - 'pwsh.dll'\n    selection_pwsh_cli:\n        CommandLine|contains: 'Get-ChildItem '\n    selection_findstr:\n        - Image|endswith: '\\findstr.exe'\n        - OriginalFileName: 'FINDSTR.EXE'\n    selection_ext:\n        CommandLine|contains:\n            - '.key'\n            - '.pgp'\n            - '.gpg'\n            - '.ppk'\n            - '.p12'\n            - '.pem'\n            - '.pfx'\n            - '.cer'\n            - '.p7b'\n            - '.asc'\n    condition: selection_ext and (all of selection_cmd_* or all of selection_pwsh_* or selection_findstr)\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_cmd_img:\n        - Image|endswith: '\\cmd.exe'\n        - OriginalFileName: 'Cmd.Exe'\n    selection_cmd_cli:\n        CommandLine|contains: 'dir '\n    selection_pwsh_img:\n        - Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        - OriginalFileName:\n            - 'PowerShell.EXE'\n            - 'pwsh.dll'\n    selection_pwsh_cli:\n        CommandLine|contains: 'Get-ChildItem '\n    selection_findstr:\n        - Image|endswith: '\\findstr.exe'\n        - OriginalFileName: 'FINDSTR.EXE'\n    selection_ext:\n        CommandLine|contains:\n            - '.key'\n            - '.pgp'\n            - '.gpg'\n            - '.ppk'\n            - '.p12'\n            - '.pem'\n            - '.pfx'\n            - '.cer'\n            - '.p7b'\n            - '.asc'\n    condition: selection_ext and (all of selection_cmd_* or all of selection_pwsh_* or selection_findstr)\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Adversaries may search for private key certificate files on compromised systems for insecurely stored credential",
      "answer": "In order to detect adversaries searching for private key certificate files on compromised systems due to insecurely stored credentials, you should observe the creation of processes on Windows systems, focusing particularly on those initiating from command-line interfaces such as Command Prompt (cmd.exe) and PowerShell (powershell.exe or pwsh.exe), along with the usage of the findstr.exe utility. Detecting command lines that contain indicators of a search operation, such as 'dir ' in Command Prompt or 'Get-ChildItem ' in PowerShell, along with the presence of extensions related to key files (e.g., .key, .pgp, .gpg, .ppk, .p12, .pem, .pfx, .cer, .p7b, .asc), can signal potential unauthorized activities linked to the exploitation tactics of Credential Access. The rule targets the command-line arguments and executed binaries indicative of attempts to locate and potentially exfiltrate sensitive cryptographic materials which are crucial for secure communications and data protection. Monitoring for these events at a medium alert level could point toward an adversary's attempt to exploit insecurely stored credentials, thus aiding in the timely identification and mitigation of such threats."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        TargetFilename|endswith: '.sdb'\n        TargetFilename|contains: '\\Windows\\apppatch\\Custom\\'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by application shims.\nThe Microsoft Windows Application Compatibility Infrastructure/Framework (Application Shim) was created to allow for backward compatibility of software as the operating system codebase changes over time.\n\n\nHere is how  the given sigma rule operates: In order to prevent adversaries from establishing persistence and/or elevating privileges by executing malicious content triggered by application shims through the Microsoft Windows Application Compatibility Infrastructure/Framework, which was created to ensure backward compatibility of software as the operating system codebase evolves, you should focus on monitoring file events within the Windows environment. Specifically, pay attention to the creation or modification of files with the extension '.sdb' located in the '\\Windows\\apppatch\\Custom\\' directory. These files are associated with the Application Compatibility Database and could be manipulated or created by attackers to execute arbitrary malicious payloads under the guise of application compatibility shims. It's important to note that there could be unknown false positives, indicating the need for careful analysis of detections. This monitoring strategy is crucial for identifying potential techniques used by adversaries to stealthily maintain their presence on a system or gain higher levels of access by exploiting the Application Shim mechanism. The threat level associated with this behavior has been assessed as medium.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        TargetFilename|endswith: '.sdb'\n        TargetFilename|contains: '\\Windows\\apppatch\\Custom\\'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by application shims.\nThe Microsoft Windows Application Compatibility Infrastructure/Framework (Application Shim) was created to allow for backward compatibility of software as the operating system codebase changes over time.\n",
      "answer": "In order to prevent adversaries from establishing persistence and/or elevating privileges by executing malicious content triggered by application shims through the Microsoft Windows Application Compatibility Infrastructure/Framework, which was created to ensure backward compatibility of software as the operating system codebase evolves, you should focus on monitoring file events within the Windows environment. Specifically, pay attention to the creation or modification of files with the extension '.sdb' located in the '\\Windows\\apppatch\\Custom\\' directory. These files are associated with the Application Compatibility Database and could be manipulated or created by attackers to execute arbitrary malicious payloads under the guise of application compatibility shims. It's important to note that there could be unknown false positives, indicating the need for careful analysis of detections. This monitoring strategy is crucial for identifying potential techniques used by adversaries to stealthily maintain their presence on a system or gain higher levels of access by exploiting the Application Shim mechanism. The threat level associated with this behavior has been assessed as medium."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\rundll32.exe'\n        - OriginalFileName: 'RUNDLL32.EXE'\n    selection_cli:\n        CommandLine|endswith:\n            - ',RunDLL'\n            - ',Control_RunDLL'\n            # - ',#1'  too generic - function load by ordinal is not Emotet specific\n    filter_legitimate_dll:\n        CommandLine|endswith:\n            - '.dll,Control_RunDLL'\n            - '.dll\",Control_RunDLL'\n            - '.dll'',Control_RunDLL'\n    filter_ide:\n        ParentImage|endswith: '\\tracker.exe' #When Visual Studio compile NodeJS program, it might use MSBuild to create tracker.exe and then, the tracker.exe fork rundll32.exe\n    condition: all of selection_* and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: critical\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect Detecting Emotet DLL loading by looking for rundll32.exe processes with command lines ending in ,RunDLL or ,Control_RunDLL\n\nHere is how  the given sigma rule operates: In order to detect Emotet DLL loading by looking for rundll32.exe processes with command lines ending in ,RunDLL or ,Control_RunDLL, you should: Focus on monitoring process creation events within Windows environments. Specifically, look for instances where the 'Image' path ends with '\\rundll32.exe' or where the 'OriginalFileName' is explicitly 'RUNDLL32.EXE'. Additionally, pay close attention to the command line arguments of these processes, particularly those ending with ',RunDLL' or ',Control_RunDLL'. It is crucial to exclude any legitimate occurrences where the command line ends with '.dll,Control_RunDLL', '.dll\",Control_RunDLL', or '.dll'',Control_RunDLL' to minimize false positives. Moreover, understand that some development environments like Visual Studio might legitimately create processes with these command lines during software build tasks, especially when 'ParentImage' ends with '\\tracker.exe'. This context helps in distinguishing malicious uses of rundll32.exe specifically associated with the Emotet malware from legitimate software development practices. The detection of such patterns is critical, given the severity of the potential threat.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\rundll32.exe'\n        - OriginalFileName: 'RUNDLL32.EXE'\n    selection_cli:\n        CommandLine|endswith:\n            - ',RunDLL'\n            - ',Control_RunDLL'\n            # - ',#1'  too generic - function load by ordinal is not Emotet specific\n    filter_legitimate_dll:\n        CommandLine|endswith:\n            - '.dll,Control_RunDLL'\n            - '.dll\",Control_RunDLL'\n            - '.dll'',Control_RunDLL'\n    filter_ide:\n        ParentImage|endswith: '\\tracker.exe' #When Visual Studio compile NodeJS program, it might use MSBuild to create tracker.exe and then, the tracker.exe fork rundll32.exe\n    condition: all of selection_* and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: critical\n",
      "question": "Detecting Emotet DLL loading by looking for rundll32.exe processes with command lines ending in ,RunDLL or ,Control_RunDLL",
      "answer": "In order to detect Emotet DLL loading by looking for rundll32.exe processes with command lines ending in ,RunDLL or ,Control_RunDLL, you should: Focus on monitoring process creation events within Windows environments. Specifically, look for instances where the 'Image' path ends with '\\rundll32.exe' or where the 'OriginalFileName' is explicitly 'RUNDLL32.EXE'. Additionally, pay close attention to the command line arguments of these processes, particularly those ending with ',RunDLL' or ',Control_RunDLL'. It is crucial to exclude any legitimate occurrences where the command line ends with '.dll,Control_RunDLL', '.dll\",Control_RunDLL', or '.dll'',Control_RunDLL' to minimize false positives. Moreover, understand that some development environments like Visual Studio might legitimately create processes with these command lines during software build tasks, especially when 'ParentImage' ends with '\\tracker.exe'. This context helps in distinguishing malicious uses of rundll32.exe specifically associated with the Emotet malware from legitimate software development practices. The detection of such patterns is critical, given the severity of the potential threat."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\reg.exe'\n        CommandLine|contains|all:\n            - 'SOFTWARE\\Microsoft\\Cryptography'\n            - '/v '\n            - 'MachineGuid'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect Use of reg to get MachineGuid information\n\nHere is how  the given sigma rule operates: In order to use reg to get MachineGuid information, you should: Monitor process creation logs in Windows environments for occurrences where the 'reg.exe' executable is used, specifically looking for command lines that include the target of 'SOFTWARE\\Microsoft\\Cryptography', contain the parameter '/v ', and seek the 'MachineGuid'. This is indicative of attempts to query cryptographic machine-specific information which can be a part of reconnaissance activities. The detection focus is thus on identifying this particular behavior through the observed command line parameters and the use of 'reg.exe'. Notably, instances that meet these criteria should be investigated, though it's important to be aware that there may be legitimate cases that could trigger this detection, as currently, the potential for false positives is identified as unknown and the level of concern is considered low.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\reg.exe'\n        CommandLine|contains|all:\n            - 'SOFTWARE\\Microsoft\\Cryptography'\n            - '/v '\n            - 'MachineGuid'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low\n",
      "question": "Use of reg to get MachineGuid information",
      "answer": "In order to use reg to get MachineGuid information, you should: Monitor process creation logs in Windows environments for occurrences where the 'reg.exe' executable is used, specifically looking for command lines that include the target of 'SOFTWARE\\Microsoft\\Cryptography', contain the parameter '/v ', and seek the 'MachineGuid'. This is indicative of attempts to query cryptographic machine-specific information which can be a part of reconnaissance activities. The detection focus is thus on identifying this particular behavior through the observed command line parameters and the use of 'reg.exe'. Notably, instances that meet these criteria should be investigated, though it's important to be aware that there may be legitimate cases that could trigger this detection, as currently, the potential for false positives is identified as unknown and the level of concern is considered low."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    product: azure\n    service: auditlogs\ndetection:\n    selection:\n        Category: 'Policy'\n        ActivityDisplayName: 'Set device registration policies'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect Monitor and alert for changes to the device registration policy.\n\nHere is how  the given sigma rule operates: In order to monitor and alert for changes to the device registration policy, you should focus on auditing logs from Microsoft Azure, specifically within their audit log service. This entails keeping an eye out for any activity categorized under 'Policy', particularly when the activity's display name is 'Set device registration policies'. This kind of monitoring is crucial because such changes can indicate attempts to alter how devices are registered and managed within an organization, potentially opening up avenues for unauthorized access or manipulation of device security settings. It is set to a high alert level due to the significant impact these changes can have on organizational security. However, it's worth noting that there might be some instances where the activity is benign, but such cases are unknown, signaling that most occurrences of this pattern should be treated with caution. This monitoring activity ties into broader security frameworks by addressing tactics such as Initial Access and Persistence, indicating that unauthorized changes to device registration policies could be used to gain or maintain access to a network or system.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: azure\n    service: auditlogs\ndetection:\n    selection:\n        Category: 'Policy'\n        ActivityDisplayName: 'Set device registration policies'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Monitor and alert for changes to the device registration policy.",
      "answer": "In order to monitor and alert for changes to the device registration policy, you should focus on auditing logs from Microsoft Azure, specifically within their audit log service. This entails keeping an eye out for any activity categorized under 'Policy', particularly when the activity's display name is 'Set device registration policies'. This kind of monitoring is crucial because such changes can indicate attempts to alter how devices are registered and managed within an organization, potentially opening up avenues for unauthorized access or manipulation of device security settings. It is set to a high alert level due to the significant impact these changes can have on organizational security. However, it's worth noting that there might be some instances where the activity is benign, but such cases are unknown, signaling that most occurrences of this pattern should be treated with caution. This monitoring activity ties into broader security frameworks by addressing tactics such as Initial Access and Persistence, indicating that unauthorized changes to device registration policies could be used to gain or maintain access to a network or system."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Obfuscated use of stdin to execute PowerShell.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect obfuscated use of stdin to execute PowerShell, you should monitor security logs on Windows systems. Specifically, focus on events with ID 4697, which records service installations. This scrutiny becomes effective only when the 'System Security Extension' audit subcategory is enabled, as it allows the logging of these events. Look for services being installed where the service file name incorporates 'cmd' or 'powershell' along with either the presence of 'noexit' or the explicit command invocation patterns ' /c ' and ' /r '. This combination is indicative of an attempt to obfuscate the execution of PowerShell via standard input mechanisms, a tactic often employed to avoid detection by simple command line monitoring tools.\n\nPay attention to services that contain both 'cmd' and 'powershell' in their installation path or command line because this is a common method employed by adversaries to execute PowerShell scripts in a way that might not be immediately apparent to casual observation or basic detection mechanisms. Additionally, the use of 'noexit', ' /c ', or ' /r ' further suggests an attempt to control the PowerShell interpreter's behavior, typically to ensure that scripts execute in a particular context or to hide their execution.\n\nDue to the sophisticated nature of these detection methods, any hits on these criteria should be treated with a high level of suspicion. However, maintain awareness of potential unknown false positives, which could arise from legitimate administrative activities or unique software installation practices within your environment. Tags associated with this detection tactic include techniques and tactics around the execution of scripts, obfuscation, and potentially undesired or unauthorized service installation.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\n    definition: The 'System Security Extension' audit subcategory need to be enabled to log the EID 4697\ndetection:\n    selection:\n        EventID: 4697\n        ServiceFileName|contains|all:\n            - 'cmd'\n            - 'powershell'\n    selection2:\n        ServiceFileName|contains:\n            - '${input}'\n            - 'noexit'\n    selection3:\n        ServiceFileName|contains:\n            - ' /c '\n            - ' /r '\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\n    definition: The 'System Security Extension' audit subcategory need to be enabled to log the EID 4697\ndetection:\n    selection:\n        EventID: 4697\n        ServiceFileName|contains|all:\n            - 'cmd'\n            - 'powershell'\n    selection2:\n        ServiceFileName|contains:\n            - '${input}'\n            - 'noexit'\n    selection3:\n        ServiceFileName|contains:\n            - ' /c '\n            - ' /r '\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Obfuscated use of stdin to execute PowerShell",
      "answer": "In order to detect obfuscated use of stdin to execute PowerShell, you should monitor security logs on Windows systems. Specifically, focus on events with ID 4697, which records service installations. This scrutiny becomes effective only when the 'System Security Extension' audit subcategory is enabled, as it allows the logging of these events. Look for services being installed where the service file name incorporates 'cmd' or 'powershell' along with either the presence of 'noexit' or the explicit command invocation patterns ' /c ' and ' /r '. This combination is indicative of an attempt to obfuscate the execution of PowerShell via standard input mechanisms, a tactic often employed to avoid detection by simple command line monitoring tools.\n\nPay attention to services that contain both 'cmd' and 'powershell' in their installation path or command line because this is a common method employed by adversaries to execute PowerShell scripts in a way that might not be immediately apparent to casual observation or basic detection mechanisms. Additionally, the use of 'noexit', ' /c ', or ' /r ' further suggests an attempt to control the PowerShell interpreter's behavior, typically to ensure that scripts execute in a particular context or to hide their execution.\n\nDue to the sophisticated nature of these detection methods, any hits on these criteria should be treated with a high level of suspicion. However, maintain awareness of potential unknown false positives, which could arise from legitimate administrative activities or unique software installation practices within your environment. Tags associated with this detection tactic include techniques and tactics around the execution of scripts, obfuscation, and potentially undesired or unauthorized service installation."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        # See CLSID_SeparateMultipleProcessExplorerHost in the registry for reference\n        - CommandLine|contains: '/factory,{75dff2b7-6936-4c06-a8bb-676a7b00b24b}' # This will catch, the new explorer spawning which indicates a process/tree break. But you won't be able to catch the executing process. For that you need historical data\n        # There exists almost infinite possibilities to spawn from explorer. The \"/root\" flag is just an example\n        # It's better to have the ability to look at the process tree and look for explorer processes with \"weird\" flags to be able to catch this technique.\n        - CommandLine|contains|all:\n            - 'explorer.exe'\n            - ' /root,'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect command line process that uses explorer.exe to launch arbitrary commands or binaries,\nwhich is similar to cmd.exe /c, only it breaks the process tree and makes its parent a new instance of explorer spawning from \"svchost\"\n\n\nHere is how  the given sigma rule operates: In order to detect a command line process that uses explorer.exe to launch arbitrary commands or binaries, which is similar to cmd.exe /c, only it breaks the process tree and makes its parent a new instance of explorer spawning from \"svchost\", you should: Focus on monitoring the creation of processes within the Windows operating system, looking specifically for commands that initiate a new instance of the explorer.exe process in a manner that is not typical for regular system or user behaviors. This includes spotting command lines that contain the unique identifier '/factory,{75dff2b7-6936-4c06-a8bb-676a7b00b24b}', which signals a new and separate instance of explorer.exe being spawned - a method that might indicate an attempt to break the typical parent-child process structure for malicious reasons. Additionally, keep an eye out for instances of explorer.exe being invoked with unusual flags such as ' /root,', which may be used by attackers to execute arbitrary commands under the guise of legitimate explorer processes. Be warned, though, that identifying the exact process responsible for such actions might require historical data analysis, as these tactics can effectively obscure the malicious process's origin. The effectiveness of spotting these techniques will be improved by analyzing process trees and identifying explorer processes that are running with unusual flags. However, be mindful of unknown false positives, and classify the severity level of these findings as medium.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        # See CLSID_SeparateMultipleProcessExplorerHost in the registry for reference\n        - CommandLine|contains: '/factory,{75dff2b7-6936-4c06-a8bb-676a7b00b24b}' # This will catch, the new explorer spawning which indicates a process/tree break. But you won't be able to catch the executing process. For that you need historical data\n        # There exists almost infinite possibilities to spawn from explorer. The \"/root\" flag is just an example\n        # It's better to have the ability to look at the process tree and look for explorer processes with \"weird\" flags to be able to catch this technique.\n        - CommandLine|contains|all:\n            - 'explorer.exe'\n            - ' /root,'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "command line process that uses explorer.exe to launch arbitrary commands or binaries,\nwhich is similar to cmd.exe /c, only it breaks the process tree and makes its parent a new instance of explorer spawning from \"svchost\"\n",
      "answer": "In order to detect a command line process that uses explorer.exe to launch arbitrary commands or binaries, which is similar to cmd.exe /c, only it breaks the process tree and makes its parent a new instance of explorer spawning from \"svchost\", you should: Focus on monitoring the creation of processes within the Windows operating system, looking specifically for commands that initiate a new instance of the explorer.exe process in a manner that is not typical for regular system or user behaviors. This includes spotting command lines that contain the unique identifier '/factory,{75dff2b7-6936-4c06-a8bb-676a7b00b24b}', which signals a new and separate instance of explorer.exe being spawned - a method that might indicate an attempt to break the typical parent-child process structure for malicious reasons. Additionally, keep an eye out for instances of explorer.exe being invoked with unusual flags such as ' /root,', which may be used by attackers to execute arbitrary commands under the guise of legitimate explorer processes. Be warned, though, that identifying the exact process responsible for such actions might require historical data analysis, as these tactics can effectively obscure the malicious process's origin. The effectiveness of spotting these techniques will be improved by analyzing process trees and identifying explorer processes that are running with unusual flags. However, be mindful of unknown false positives, and classify the severity level of these findings as medium."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        - OriginalFileName:\n            - 'PowerShell.EXE'\n            - 'pwsh.dll'\n    selection_hidden:\n        CommandLine|contains: ' hidden '\n    selection_encoded:\n        CommandLine|contains:\n            - 'AGkAdABzAGEAZABtAGkAbgAgAC8AdAByAGEAbgBzAGYAZQByA'\n            - 'aXRzYWRtaW4gL3RyYW5zZmVy'\n            - 'IAaQB0AHMAYQBkAG0AaQBuACAALwB0AHIAYQBuAHMAZgBlAHIA'\n            - 'JpdHNhZG1pbiAvdHJhbnNmZX'\n            - 'YgBpAHQAcwBhAGQAbQBpAG4AIAAvAHQAcgBhAG4AcwBmAGUAcg'\n            - 'Yml0c2FkbWluIC90cmFuc2Zlc'\n            - 'AGMAaAB1AG4AawBfAHMAaQB6AGUA'\n            - 'JABjAGgAdQBuAGsAXwBzAGkAegBlA'\n            - 'JGNodW5rX3Npem'\n            - 'QAYwBoAHUAbgBrAF8AcwBpAHoAZQ'\n            - 'RjaHVua19zaXpl'\n            - 'Y2h1bmtfc2l6Z'\n            - 'AE8ALgBDAG8AbQBwAHIAZQBzAHMAaQBvAG4A'\n            - 'kATwAuAEMAbwBtAHAAcgBlAHMAcwBpAG8Abg'\n            - 'lPLkNvbXByZXNzaW9u'\n            - 'SQBPAC4AQwBvAG0AcAByAGUAcwBzAGkAbwBuA'\n            - 'SU8uQ29tcHJlc3Npb2'\n            - 'Ty5Db21wcmVzc2lvb'\n            - 'AE8ALgBNAGUAbQBvAHIAeQBTAHQAcgBlAGEAbQ'\n            - 'kATwAuAE0AZQBtAG8AcgB5AFMAdAByAGUAYQBtA'\n            - 'lPLk1lbW9yeVN0cmVhb'\n            - 'SQBPAC4ATQBlAG0AbwByAHkAUwB0AHIAZQBhAG0A'\n            - 'SU8uTWVtb3J5U3RyZWFt'\n            - 'Ty5NZW1vcnlTdHJlYW'\n            - '4ARwBlAHQAQwBoAHUAbgBrA'\n            - '5HZXRDaHVua'\n            - 'AEcAZQB0AEMAaAB1AG4Aaw'\n            - 'LgBHAGUAdABDAGgAdQBuAGsA'\n            - 'LkdldENodW5r'\n            - 'R2V0Q2h1bm'\n            - 'AEgAUgBFAEEARABfAEkATgBGAE8ANgA0A'\n            - 'QASABSAEUAQQBEAF8ASQBOAEYATwA2ADQA'\n            - 'RIUkVBRF9JTkZPNj'\n            - 'SFJFQURfSU5GTzY0'\n            - 'VABIAFIARQBBAEQAXwBJAE4ARgBPADYANA'\n            - 'VEhSRUFEX0lORk82N'\n            - 'AHIAZQBhAHQAZQBSAGUAbQBvAHQAZQBUAGgAcgBlAGEAZA'\n            - 'cmVhdGVSZW1vdGVUaHJlYW'\n            - 'MAcgBlAGEAdABlAFIAZQBtAG8AdABlAFQAaAByAGUAYQBkA'\n            - 'NyZWF0ZVJlbW90ZVRocmVhZ'\n            - 'Q3JlYXRlUmVtb3RlVGhyZWFk'\n            - 'QwByAGUAYQB0AGUAUgBlAG0AbwB0AGUAVABoAHIAZQBhAGQA'\n            - '0AZQBtAG0AbwB2AGUA'\n            - '1lbW1vdm'\n            - 'AGUAbQBtAG8AdgBlA'\n            - 'bQBlAG0AbQBvAHYAZQ'\n            - 'bWVtbW92Z'\n            - 'ZW1tb3Zl'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect base64 encoded strings used in hidden malicious PowerShell command lines\n\nHere is how  the given sigma rule operates: In order to detect base64 encoded strings used in hidden malicious PowerShell command lines, you should: Monitor process creation events on Windows systems for instances of PowerShell (`powershell.exe` or `pwsh.exe`) or any process whose original filename indicates it's PowerShell (`PowerShell.EXE` or `pwsh.dll`). Look specifically for command lines containing the phrase ' hidden ' which could indicate that the process is trying to conceal its actions. Additionally, check for base64 encoded strings within the command line parameters. These encoded strings often represent malicious commands designed to perform unauthorized actions on the system, such as creating remote threads, chunk size modifications, or memory stream alterations. The detection is critical and uses various tactics and techniques such as \"Execution\", \"Defense Evasion\", and \"Command and Control\". The level of alert for this detection is classified as high.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        - OriginalFileName:\n            - 'PowerShell.EXE'\n            - 'pwsh.dll'\n    selection_hidden:\n        CommandLine|contains: ' hidden '\n    selection_encoded:\n        CommandLine|contains:\n            - 'AGkAdABzAGEAZABtAGkAbgAgAC8AdAByAGEAbgBzAGYAZQByA'\n            - 'aXRzYWRtaW4gL3RyYW5zZmVy'\n            - 'IAaQB0AHMAYQBkAG0AaQBuACAALwB0AHIAYQBuAHMAZgBlAHIA'\n            - 'JpdHNhZG1pbiAvdHJhbnNmZX'\n            - 'YgBpAHQAcwBhAGQAbQBpAG4AIAAvAHQAcgBhAG4AcwBmAGUAcg'\n            - 'Yml0c2FkbWluIC90cmFuc2Zlc'\n            - 'AGMAaAB1AG4AawBfAHMAaQB6AGUA'\n            - 'JABjAGgAdQBuAGsAXwBzAGkAegBlA'\n            - 'JGNodW5rX3Npem'\n            - 'QAYwBoAHUAbgBrAF8AcwBpAHoAZQ'\n            - 'RjaHVua19zaXpl'\n            - 'Y2h1bmtfc2l6Z'\n            - 'AE8ALgBDAG8AbQBwAHIAZQBzAHMAaQBvAG4A'\n            - 'kATwAuAEMAbwBtAHAAcgBlAHMAcwBpAG8Abg'\n            - 'lPLkNvbXByZXNzaW9u'\n            - 'SQBPAC4AQwBvAG0AcAByAGUAcwBzAGkAbwBuA'\n            - 'SU8uQ29tcHJlc3Npb2'\n            - 'Ty5Db21wcmVzc2lvb'\n            - 'AE8ALgBNAGUAbQBvAHIAeQBTAHQAcgBlAGEAbQ'\n            - 'kATwAuAE0AZQBtAG8AcgB5AFMAdAByAGUAYQBtA'\n            - 'lPLk1lbW9yeVN0cmVhb'\n            - 'SQBPAC4ATQBlAG0AbwByAHkAUwB0AHIAZQBhAG0A'\n            - 'SU8uTWVtb3J5U3RyZWFt'\n            - 'Ty5NZW1vcnlTdHJlYW'\n            - '4ARwBlAHQAQwBoAHUAbgBrA'\n            - '5HZXRDaHVua'\n            - 'AEcAZQB0AEMAaAB1AG4Aaw'\n            - 'LgBHAGUAdABDAGgAdQBuAGsA'\n            - 'LkdldENodW5r'\n            - 'R2V0Q2h1bm'\n            - 'AEgAUgBFAEEARABfAEkATgBGAE8ANgA0A'\n            - 'QASABSAEUAQQBEAF8ASQBOAEYATwA2ADQA'\n            - 'RIUkVBRF9JTkZPNj'\n            - 'SFJFQURfSU5GTzY0'\n            - 'VABIAFIARQBBAEQAXwBJAE4ARgBPADYANA'\n            - 'VEhSRUFEX0lORk82N'\n            - 'AHIAZQBhAHQAZQBSAGUAbQBvAHQAZQBUAGgAcgBlAGEAZA'\n            - 'cmVhdGVSZW1vdGVUaHJlYW'\n            - 'MAcgBlAGEAdABlAFIAZQBtAG8AdABlAFQAaAByAGUAYQBkA'\n            - 'NyZWF0ZVJlbW90ZVRocmVhZ'\n            - 'Q3JlYXRlUmVtb3RlVGhyZWFk'\n            - 'QwByAGUAYQB0AGUAUgBlAG0AbwB0AGUAVABoAHIAZQBhAGQA'\n            - '0AZQBtAG0AbwB2AGUA'\n            - '1lbW1vdm'\n            - 'AGUAbQBtAG8AdgBlA'\n            - 'bQBlAG0AbQBvAHYAZQ'\n            - 'bWVtbW92Z'\n            - 'ZW1tb3Zl'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "base64 encoded strings used in hidden malicious PowerShell command lines",
      "answer": "In order to detect base64 encoded strings used in hidden malicious PowerShell command lines, you should: Monitor process creation events on Windows systems for instances of PowerShell (`powershell.exe` or `pwsh.exe`) or any process whose original filename indicates it's PowerShell (`PowerShell.EXE` or `pwsh.dll`). Look specifically for command lines containing the phrase ' hidden ' which could indicate that the process is trying to conceal its actions. Additionally, check for base64 encoded strings within the command line parameters. These encoded strings often represent malicious commands designed to perform unauthorized actions on the system, such as creating remote threads, chunk size modifications, or memory stream alterations. The detection is critical and uses various tactics and techniques such as \"Execution\", \"Defense Evasion\", and \"Command and Control\". The level of alert for this detection is classified as high."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\rundll32.exe'\n        - OriginalFileName: 'RUNDLL32.EXE'\n    selection_parent:\n        ParentImage|endswith: '\\explorer.exe'\n    filter:\n        - CommandLine|contains: ' C:\\Windows\\System32\\' # The space at the start is required\n        - CommandLine|endswith: ' -localserver 22d8c27b-47a1-48d1-ad08-7da7abd79617' # Windows 10 volume control\n    condition: all of selection_* and not filter\nfields:\n    - Image\n    - ParentImage\nfalsepositives:\n    - Unknown\nlevel: medium\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect suspicious start of rundll32.exe with a parent process of Explorer.exe. Variant of Raspberry Robin, as first reported by Red Canary.\n\nHere is how  the given sigma rule operates: In order to detect suspicious start of rundll32.exe with a parent process of Explorer.exe, indicative of the variant of Raspberry Robin, as first reported by Red Canary, you should observe for process creation events in Windows environments. Specifically, monitor for instances where rundll32.exe is started and has explorer.exe as its parent process. Be cautious of selections based on the image name ending with '\\rundll32.exe' or having the original file name 'RUNDLL32.EXE', while also ensuring that the parent image ends with '\\explorer.exe'. However, to avoid false positives and enhance accuracy, exclude any command line instances that contain ' C:\\Windows\\System32\\' or end with ' -localserver 22d8c27b-47a1-48d1-ad08-7da7abd79617', as these might indicate legitimate usage of rundll32.exe, such as Windows 10 volume control. This method is essential for identifying potentially malicious activity related to the execution of rundll32.exe under common parent processes which might otherwise seem benign. This detection logic specifically aids in identifying and mitigating strategies employed in the Raspberry Robin malware activity without immediately flagging regular system behaviors as threats.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\rundll32.exe'\n        - OriginalFileName: 'RUNDLL32.EXE'\n    selection_parent:\n        ParentImage|endswith: '\\explorer.exe'\n    filter:\n        - CommandLine|contains: ' C:\\Windows\\System32\\' # The space at the start is required\n        - CommandLine|endswith: ' -localserver 22d8c27b-47a1-48d1-ad08-7da7abd79617' # Windows 10 volume control\n    condition: all of selection_* and not filter\nfields:\n    - Image\n    - ParentImage\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "suspicious start of rundll32.exe with a parent process of Explorer.exe. Variant of Raspberry Robin, as first reported by Red Canary.",
      "answer": "In order to detect suspicious start of rundll32.exe with a parent process of Explorer.exe, indicative of the variant of Raspberry Robin, as first reported by Red Canary, you should observe for process creation events in Windows environments. Specifically, monitor for instances where rundll32.exe is started and has explorer.exe as its parent process. Be cautious of selections based on the image name ending with '\\rundll32.exe' or having the original file name 'RUNDLL32.EXE', while also ensuring that the parent image ends with '\\explorer.exe'. However, to avoid false positives and enhance accuracy, exclude any command line instances that contain ' C:\\Windows\\System32\\' or end with ' -localserver 22d8c27b-47a1-48d1-ad08-7da7abd79617', as these might indicate legitimate usage of rundll32.exe, such as Windows 10 volume control. This method is essential for identifying potentially malicious activity related to the execution of rundll32.exe under common parent processes which might otherwise seem benign. This detection logic specifically aids in identifying and mitigating strategies employed in the Raspberry Robin malware activity without immediately flagging regular system behaviors as threats."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Office application called wmic to proxye execution through a LOLBIN process. This is often used to break suspicious parent-child chain (Office app spawns LOLBin)..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when an Office application is used to proxy execution through a LOLBIN process, which is a tactic often leveraged to disrupt the usual parent-child process relationship and thus evade detection (this behavior is frequently observed in attacks aiming to execute malicious scripts or commands without arising suspicion), you should:\n\nMonitor for the creation of processes on Windows systems, specifically focusing on cases where well-known Office applications such as Word (WINWORD.EXE), Excel (EXCEL.EXE), PowerPoint (POWERPNT.EXE), Publisher (MSPUB.EXE), Visio (VISIO.EXE), Access (MSACCESS.EXE), Equation Editor (EQNEDT32.EXE), OneNote (ONENOTE.EXE), WordPad (wordpad.exe), and WordView (wordview.exe) are the parent processes initiating the creation of a new process.\n\nBe particularly vigilant for these Office applications spawning the Windows Management Instrumentation Command-line (WMIC.exe) as a child process. This is a significant red flag as WMIC.exe could be used to execute further commands or scripts.\n\nFurther scrutiny is required if the command line of the WMIC process includes specific keywords such as 'process', 'create', and 'call' coupled with any of the following suspicious command line tools or \"Living off the Land\" binaries and scripts (LOLBins): regsvr32, rundll32, msiexec, mshta, verclsid, wscript, or cscript. These are often exploited by attackers to execute malicious payloads while attempting to camouflage their activities as benign system operations.\n\nThe detection criteria must satisfy all conditions mentioned above to minimize false positives and ensure high fidelity alerts. It is paramount to approach these detections with a high level of scrutiny due to the potential severity and stealthiness of the attacks employing these techniques.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_parent:\n        ParentImage|endswith:\n            - '\\WINWORD.EXE'\n            - '\\EXCEL.EXE'\n            - '\\POWERPNT.exe'\n            - '\\MSPUB.exe'\n            - '\\VISIO.exe'\n            - '\\MSACCESS.EXE'\n            - '\\EQNEDT32.EXE'\n            - '\\ONENOTE.EXE'\n            - '\\wordpad.exe'\n            - '\\wordview.exe'\n    selection_wmic_img:\n        - Image|endswith: '\\wbem\\WMIC.exe'\n        - OriginalFileName: 'wmic.exe'\n    selection_wmic_cli:\n        CommandLine|contains|all:\n            - 'process'\n            - 'create'\n            - 'call'\n        CommandLine|contains:\n            # Add more suspicious LOLBINs as you see fit\n            - 'regsvr32'\n            - 'rundll32'\n            - 'msiexec'\n            - 'mshta'\n            - 'verclsid'\n            - 'wscript'\n            - 'cscript'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_parent:\n        ParentImage|endswith:\n            - '\\WINWORD.EXE'\n            - '\\EXCEL.EXE'\n            - '\\POWERPNT.exe'\n            - '\\MSPUB.exe'\n            - '\\VISIO.exe'\n            - '\\MSACCESS.EXE'\n            - '\\EQNEDT32.EXE'\n            - '\\ONENOTE.EXE'\n            - '\\wordpad.exe'\n            - '\\wordview.exe'\n    selection_wmic_img:\n        - Image|endswith: '\\wbem\\WMIC.exe'\n        - OriginalFileName: 'wmic.exe'\n    selection_wmic_cli:\n        CommandLine|contains|all:\n            - 'process'\n            - 'create'\n            - 'call'\n        CommandLine|contains:\n            # Add more suspicious LOLBINs as you see fit\n            - 'regsvr32'\n            - 'rundll32'\n            - 'msiexec'\n            - 'mshta'\n            - 'verclsid'\n            - 'wscript'\n            - 'cscript'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Office application called wmic to proxye execution through a LOLBIN process. This is often used to break suspicious parent-child chain (Office app spawns LOLBin).",
      "answer": "In order to detect when an Office application is used to proxy execution through a LOLBIN process, which is a tactic often leveraged to disrupt the usual parent-child process relationship and thus evade detection (this behavior is frequently observed in attacks aiming to execute malicious scripts or commands without arising suspicion), you should:\n\nMonitor for the creation of processes on Windows systems, specifically focusing on cases where well-known Office applications such as Word (WINWORD.EXE), Excel (EXCEL.EXE), PowerPoint (POWERPNT.EXE), Publisher (MSPUB.EXE), Visio (VISIO.EXE), Access (MSACCESS.EXE), Equation Editor (EQNEDT32.EXE), OneNote (ONENOTE.EXE), WordPad (wordpad.exe), and WordView (wordview.exe) are the parent processes initiating the creation of a new process.\n\nBe particularly vigilant for these Office applications spawning the Windows Management Instrumentation Command-line (WMIC.exe) as a child process. This is a significant red flag as WMIC.exe could be used to execute further commands or scripts.\n\nFurther scrutiny is required if the command line of the WMIC process includes specific keywords such as 'process', 'create', and 'call' coupled with any of the following suspicious command line tools or \"Living off the Land\" binaries and scripts (LOLBins): regsvr32, rundll32, msiexec, mshta, verclsid, wscript, or cscript. These are often exploited by attackers to execute malicious payloads while attempting to camouflage their activities as benign system operations.\n\nThe detection criteria must satisfy all conditions mentioned above to minimize false positives and ensure high fidelity alerts. It is paramount to approach these detections with a high level of scrutiny due to the potential severity and stealthiness of the attacks employing these techniques."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: process_creation\n    product: macos\ndetection:\n    selection:\n        Image|endswith: '/PlistBuddy'\n        CommandLine|contains|all:\n            - 'RunAtLoad'\n            - 'true'\n        CommandLine|contains:\n            - 'LaunchAgents'\n            - 'LaunchDaemons'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect potential persistence activity using LaunchAgents or LaunchDaemons via the PlistBuddy utility\n\nHere is how  the given sigma rule operates: In order to detect potential persistence activity using LaunchAgents or LaunchDaemons via the PlistBuddy utility, you should: Monitor process creation logs on macOS for instances where the PlistBuddy utility is being used. Specifically, look for cases where the process's image path ends with '/PlistBuddy'. Additionally, check if the command line includes 'RunAtLoad' and 'true', indicating an attempt to set a process to run at login. Also, look for mentions of 'LaunchAgents' or 'LaunchDaemons' within the command line, as these are common methods for establishing persistence. Be aware that while this activity can be indicative of malicious behavior, there might be legitimate uses, thus unknown false positives could occur. The importance of this activity is considered high due to its potential association with persistence mechanisms.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: macos\ndetection:\n    selection:\n        Image|endswith: '/PlistBuddy'\n        CommandLine|contains|all:\n            - 'RunAtLoad'\n            - 'true'\n        CommandLine|contains:\n            - 'LaunchAgents'\n            - 'LaunchDaemons'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "potential persistence activity using LaunchAgents or LaunchDaemons via the PlistBuddy utility",
      "answer": "In order to detect potential persistence activity using LaunchAgents or LaunchDaemons via the PlistBuddy utility, you should: Monitor process creation logs on macOS for instances where the PlistBuddy utility is being used. Specifically, look for cases where the process's image path ends with '/PlistBuddy'. Additionally, check if the command line includes 'RunAtLoad' and 'true', indicating an attempt to set a process to run at login. Also, look for mentions of 'LaunchAgents' or 'LaunchDaemons' within the command line, as these are common methods for establishing persistence. Be aware that while this activity can be indicative of malicious behavior, there might be legitimate uses, thus unknown false positives could occur. The importance of this activity is considered high due to its potential association with persistence mechanisms."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: Setvalue\n        TargetObject|contains:\n            - '\\Policies\\Microsoft\\Windows NT\\SystemRestore'\n            - '\\Microsoft\\Windows NT\\CurrentVersion\\SystemRestore'\n        TargetObject|endswith:\n            - DisableConfig\n            - DisableSR\n        Details: 'DWORD (0x00000001)'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect modification of the registry to disable a system restore on the computer\n\nHere is how  the given sigma rule operates: In order to detect the modification of the registry to disable a system restore on the computer, you should be aware of the specific conditions that trigger an alert for potential security incidents. Monitoring activity within the Windows registry is crucial, especially pertaining to the system restore settings. This involves looking at registry set events, specifically those where the EventType is marked as \"Setvalue\". \n\nThe focus should be on entries targeting system restore configurations, which typically involve modifications to two key paths: '\\Policies\\Microsoft\\Windows NT\\SystemRestore' and '\\Microsoft\\Windows NT\\CurrentVersion\\SystemRestore'. It is also important to pay attention to changes that end with 'DisableConfig' or 'DisableSR'. These entries are aimed at disabling system restore functionalities, which is often a tactic used by attackers to ensure their activities remain unrepairable, by preventing the system from reverting to a prior, uncompromised state. \n\nThe modification is identified through a specific change detail, where the registry entry change involves setting a DWORD value of '0x00000001', which effectively disables the system restore feature. Monitoring for these conditions is paramount in identifying and responding to activities aimed at weakening the system's defenses by hindering recovery capabilities. \n\nGiven the high level of impact and association with malicious activities, there is a high emphasis on detecting these modifications. However, it is also important to recognize that there may be legitimate reasons for these registry changes, but such cases are not commonly expected, signaling the importance of investigation upon detection.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: Setvalue\n        TargetObject|contains:\n            - '\\Policies\\Microsoft\\Windows NT\\SystemRestore'\n            - '\\Microsoft\\Windows NT\\CurrentVersion\\SystemRestore'\n        TargetObject|endswith:\n            - DisableConfig\n            - DisableSR\n        Details: 'DWORD (0x00000001)'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "modification of the registry to disable a system restore on the computer",
      "answer": "In order to detect the modification of the registry to disable a system restore on the computer, you should be aware of the specific conditions that trigger an alert for potential security incidents. Monitoring activity within the Windows registry is crucial, especially pertaining to the system restore settings. This involves looking at registry set events, specifically those where the EventType is marked as \"Setvalue\". \n\nThe focus should be on entries targeting system restore configurations, which typically involve modifications to two key paths: '\\Policies\\Microsoft\\Windows NT\\SystemRestore' and '\\Microsoft\\Windows NT\\CurrentVersion\\SystemRestore'. It is also important to pay attention to changes that end with 'DisableConfig' or 'DisableSR'. These entries are aimed at disabling system restore functionalities, which is often a tactic used by attackers to ensure their activities remain unrepairable, by preventing the system from reverting to a prior, uncompromised state. \n\nThe modification is identified through a specific change detail, where the registry entry change involves setting a DWORD value of '0x00000001', which effectively disables the system restore feature. Monitoring for these conditions is paramount in identifying and responding to activities aimed at weakening the system's defenses by hindering recovery capabilities. \n\nGiven the high level of impact and association with malicious activities, there is a high emphasis on detecting these modifications. However, it is also important to recognize that there may be legitimate reasons for these registry changes, but such cases are not commonly expected, signaling the importance of investigation upon detection."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    product: windows\n    category: ps_classic_start\n    definition: fields have to be extract from event\ndetection:\n    selection_webclient:\n        HostApplication|contains: 'Net.WebClient'\n    selection_download:\n        HostApplication|contains:\n            - '.DownloadFile('\n            - '.DownloadString('\n    condition: all of selection_*\nfalsepositives:\n    - PowerShell scripts that download content from the Internet\nlevel: medium\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect suspicious PowerShell download command\n\nHere is how  the given sigma rule operates: In order to detect suspicious PowerShell download command, you should: Monitor windows classic PowerShell start event logs for activity involving the use of `Net.WebClient` within the `HostApplication` field. Specifically, look for instances where PowerShell scripts employ commands like `.DownloadFile(` or `.DownloadString(` to download content from the internet. It is important to consider that legitimate PowerShell scripts may also download content from the internet, which could lead to potential false positives. The detection level for this activity is assessed as medium.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_classic_start\n    definition: fields have to be extract from event\ndetection:\n    selection_webclient:\n        HostApplication|contains: 'Net.WebClient'\n    selection_download:\n        HostApplication|contains:\n            - '.DownloadFile('\n            - '.DownloadString('\n    condition: all of selection_*\nfalsepositives:\n    - PowerShell scripts that download content from the Internet\nlevel: medium\n",
      "question": "suspicious PowerShell download command",
      "answer": "In order to detect suspicious PowerShell download command, you should: Monitor windows classic PowerShell start event logs for activity involving the use of `Net.WebClient` within the `HostApplication` field. Specifically, look for instances where PowerShell scripts employ commands like `.DownloadFile(` or `.DownloadString(` to download content from the internet. It is important to consider that legitimate PowerShell scripts may also download content from the internet, which could lead to potential false positives. The detection level for this activity is assessed as medium."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: network_connection\n    product: windows\ndetection:\n    selection:\n        DestinationPort:\n            - 25\n            - 587\n            - 465\n            - 2525\n        Initiated: 'true'\n    filter_clients:\n        Image|endswith:\n            - \\thunderbird.exe\n            - \\outlook.exe\n    filter_mailserver:\n        Image|startswith: 'C:\\Program Files\\Microsoft\\Exchange Server\\'\n    filter_outlook:\n        Image|startswith: 'C:\\Program Files\\WindowsApps\\microsoft.windowscommunicationsapps_'\n        Image|endswith: '\\HxTsr.exe'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Other SMTP tools\nlevel: medium\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect Adversaries may steal data by exfiltrating it over an un-encrypted network protocol other than that of the existing command and control channel.\nThe data may also be sent to an alternate network location from the main command and control server.\n\n\nHere is how  the given sigma rule operates: In order to detect adversaries who may steal data by exfiltrating it over an un-encrypted network protocol other than that of the existing command and control channel, and possibly sending the data to an alternate network location from the main command and control server, you should monitor network connections on Windows products for specific activity patterns. This includes looking for outbound network connections that utilize SMTP ports, specifically ports 25, 587, 465, and 2525, which indicate the possible use of email protocols to send data unencrypted. These connections should be flagged if they are initiated from the source, indicating a possible attempt to exfiltrate data.\n\nHowever, it's crucial to exclude legitimate email client processes from triggering alerts inadvertently. Hence, any network connection initiated by known email clients like Thunderbird (thunderbird.exe) or Outlook (outlook.exe), as well as connections from Windows's default mail client (identified by the process 'HxTsr.exe' within the 'microsoft.windowscommunicationsapps' directory), should be excluded from alerts. Additionally, network connections originating from processes related to the Microsoft Exchange Server (prefixed with 'C:\\Program Files\\Microsoft\\Exchange Server\\') signify legitimate email server activity and should also not trigger alarms.\n\nAs SMTP can be used by other legitimate tools and applications for sending emails, it\u2019s recognized that not all detections will signify malicious activity (thus noted as potential false positives). The severity level for this detection pattern is considered medium, indicating that while it could represent a security threat, it may also represent benign activity and thus mandates further investigation to confirm malicious intent.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: network_connection\n    product: windows\ndetection:\n    selection:\n        DestinationPort:\n            - 25\n            - 587\n            - 465\n            - 2525\n        Initiated: 'true'\n    filter_clients:\n        Image|endswith:\n            - \\thunderbird.exe\n            - \\outlook.exe\n    filter_mailserver:\n        Image|startswith: 'C:\\Program Files\\Microsoft\\Exchange Server\\'\n    filter_outlook:\n        Image|startswith: 'C:\\Program Files\\WindowsApps\\microsoft.windowscommunicationsapps_'\n        Image|endswith: '\\HxTsr.exe'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Other SMTP tools\nlevel: medium\n",
      "question": "Adversaries may steal data by exfiltrating it over an un-encrypted network protocol other than that of the existing command and control channel.\nThe data may also be sent to an alternate network location from the main command and control server.\n",
      "answer": "In order to detect adversaries who may steal data by exfiltrating it over an un-encrypted network protocol other than that of the existing command and control channel, and possibly sending the data to an alternate network location from the main command and control server, you should monitor network connections on Windows products for specific activity patterns. This includes looking for outbound network connections that utilize SMTP ports, specifically ports 25, 587, 465, and 2525, which indicate the possible use of email protocols to send data unencrypted. These connections should be flagged if they are initiated from the source, indicating a possible attempt to exfiltrate data.\n\nHowever, it's crucial to exclude legitimate email client processes from triggering alerts inadvertently. Hence, any network connection initiated by known email clients like Thunderbird (thunderbird.exe) or Outlook (outlook.exe), as well as connections from Windows's default mail client (identified by the process 'HxTsr.exe' within the 'microsoft.windowscommunicationsapps' directory), should be excluded from alerts. Additionally, network connections originating from processes related to the Microsoft Exchange Server (prefixed with 'C:\\Program Files\\Microsoft\\Exchange Server\\') signify legitimate email server activity and should also not trigger alarms.\n\nAs SMTP can be used by other legitimate tools and applications for sending emails, it\u2019s recognized that not all detections will signify malicious activity (thus noted as potential false positives). The severity level for this detection pattern is considered medium, indicating that while it could represent a security threat, it may also represent benign activity and thus mandates further investigation to confirm malicious intent."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Look for non-system accounts SMB accessing a file with write (0x2) access mask via administrative share (i.e C$)..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to look for non-system accounts SMB accessing a file with write (0x2) access mask via administrative share (i.e C$), you should: Monitor Windows security logs for event ID 5145, which indicates an attempt to access a file system object. Specifically, pay attention to access attempts where the shared object name ends with 'C$', indicating an administrative share access, and where the AccessMask is set to '0x2', signifying write access. It is crucial to exclude events generated by system accounts, which can be identified by usernames ending with '$', as these are generally considered legitimate activities. While this monitoring approach aims to detect potential unauthorized access attempts via administrative shares by non-system accounts with write permissions, be aware that not all detections may represent malicious activity, and some may be unknown false positives. The associated attack techniques for this behavior include techniques related to credential access, lateral movement, and persistence, though specific MITRE ATT&CK tactics and techniques were not directly mentioned in the provided information.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 5145\n        ShareName|endswith: 'C$'\n        AccessMask: '0x2'\n    filter:\n        SubjectUserName|endswith: '$'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 5145\n        ShareName|endswith: 'C$'\n        AccessMask: '0x2'\n    filter:\n        SubjectUserName|endswith: '$'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Look for non-system accounts SMB accessing a file with write (0x2) access mask via administrative share (i.e C$).",
      "answer": "In order to look for non-system accounts SMB accessing a file with write (0x2) access mask via administrative share (i.e C$), you should: Monitor Windows security logs for event ID 5145, which indicates an attempt to access a file system object. Specifically, pay attention to access attempts where the shared object name ends with 'C$', indicating an administrative share access, and where the AccessMask is set to '0x2', signifying write access. It is crucial to exclude events generated by system accounts, which can be identified by usernames ending with '$', as these are generally considered legitimate activities. While this monitoring approach aims to detect potential unauthorized access attempts via administrative shares by non-system accounts with write permissions, be aware that not all detections may represent malicious activity, and some may be unknown false positives. The associated attack techniques for this behavior include techniques related to credential access, lateral movement, and persistence, though specific MITRE ATT&CK tactics and techniques were not directly mentioned in the provided information."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: process_creation\n    product: linux\ndetection:\n    selection_1:\n        Image|endswith: '/groups'\n    selection_2:\n        Image|endswith:\n            - '/cat'\n            - '/head'\n            - '/tail'\n            - '/more'\n        CommandLine|contains: '/etc/group'\n    condition: 1 of selection*\nfalsepositives:\n    - Legitimate administration activities\nlevel: low\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect enumeration of local system groups. Adversaries may attempt to find local system groups and permission settings\n\nHere is how  the given sigma rule operates: In order to detect enumeration of local system groups, which adversaries may attempt to uncover local system groups and their permission settings, you should focus on process creation logs from Linux systems. Look for processes that have been launched and whose executable paths end with '/groups' as indicated in the logs. Additionally, pay attention to processes where the executable paths end with '/cat', '/head', '/tail', or '/more' combined with command lines that contain '/etc/group'. This condition suggests attempts to view the local system's group file, usually indicating an enumeration of local system groups. Bear in mind that there could be false positives, such as legitimate administration activities which might involve similar commands for routine system checks or configurations. This detection strategy has been classified at a low level, acknowledging that while this behavior can indicate adversarial activity, it might also reflect ordinary system administration tasks.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: linux\ndetection:\n    selection_1:\n        Image|endswith: '/groups'\n    selection_2:\n        Image|endswith:\n            - '/cat'\n            - '/head'\n            - '/tail'\n            - '/more'\n        CommandLine|contains: '/etc/group'\n    condition: 1 of selection*\nfalsepositives:\n    - Legitimate administration activities\nlevel: low\n",
      "question": "enumeration of local system groups. Adversaries may attempt to find local system groups and permission settings",
      "answer": "In order to detect enumeration of local system groups, which adversaries may attempt to uncover local system groups and their permission settings, you should focus on process creation logs from Linux systems. Look for processes that have been launched and whose executable paths end with '/groups' as indicated in the logs. Additionally, pay attention to processes where the executable paths end with '/cat', '/head', '/tail', or '/more' combined with command lines that contain '/etc/group'. This condition suggests attempts to view the local system's group file, usually indicating an enumeration of local system groups. Bear in mind that there could be false positives, such as legitimate administration activities which might involve similar commands for routine system checks or configurations. This detection strategy has been classified at a low level, acknowledging that while this behavior can indicate adversarial activity, it might also reflect ordinary system administration tasks."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    lolbas:\n        - CommandLine|contains: ConfigSecurityPolicy.exe\n        - Image|endswith: '\\ConfigSecurityPolicy.exe'\n        - OriginalFileName: 'ConfigSecurityPolicy.exe'\n    remote:\n        CommandLine|contains:\n            - 'https://'\n            - 'http://'\n            - 'ftp://'\n    condition: lolbas and remote\nfalsepositives:\n    - Unknown\nlevel: medium\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect Upload file, credentials or data exfiltration with Binary part of Windows Defender\n\nHere is how  the given sigma rule operates: In order to upload file, credentials or data exfiltration with Binary part of Windows Defender, you should: identify processes created on Windows systems that exhibit suspicious behavior associated with the misuse of the ConfigSecurityPolicy.exe binary, which is a part of Windows Defender. Specifically, look for instances where the command line execution or image path of a process involves ConfigSecurityPolicy.exe. Additionally, pay attention to processes that execute commands containing internet URLs, indicated by the presence of 'https://', 'http://', or 'ftp://' in the command line. This combination of using ConfigSecurityPolicy.exe alongside commands that reach out to the internet is indicative of an attempt to use trusted Windows utilities to facilitate malicious activities such as uploading files, exfiltrating credentials, or other data exfiltration efforts. Be aware that some legitimate activities may trigger this detection, although such occurrences are currently unknown. The severity level of this type of suspicious activity is considered medium.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    lolbas:\n        - CommandLine|contains: ConfigSecurityPolicy.exe\n        - Image|endswith: '\\ConfigSecurityPolicy.exe'\n        - OriginalFileName: 'ConfigSecurityPolicy.exe'\n    remote:\n        CommandLine|contains:\n            - 'https://'\n            - 'http://'\n            - 'ftp://'\n    condition: lolbas and remote\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Upload file, credentials or data exfiltration with Binary part of Windows Defender",
      "answer": "In order to upload file, credentials or data exfiltration with Binary part of Windows Defender, you should: identify processes created on Windows systems that exhibit suspicious behavior associated with the misuse of the ConfigSecurityPolicy.exe binary, which is a part of Windows Defender. Specifically, look for instances where the command line execution or image path of a process involves ConfigSecurityPolicy.exe. Additionally, pay attention to processes that execute commands containing internet URLs, indicated by the presence of 'https://', 'http://', or 'ftp://' in the command line. This combination of using ConfigSecurityPolicy.exe alongside commands that reach out to the internet is indicative of an attempt to use trusted Windows utilities to facilitate malicious activities such as uploading files, exfiltrating credentials, or other data exfiltration efforts. Be aware that some legitimate activities may trigger this detection, although such occurrences are currently unknown. The severity level of this type of suspicious activity is considered medium."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting when GfxDownloadWrapper.exe downloads file from non standard URL.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when GfxDownloadWrapper.exe downloads file from non-standard URL, you should: establish a monitoring process on Windows systems for the creation of processes. Specifically, watch for occurrences where GfxDownloadWrapper.exe is executed. However, differentiate legitimate use by filtering out executions that involve command lines containing 'gameplayapi.intel.com' or have either GfxDownloadWrapper.exe or igfxEM.exe as their parent process. By doing so, you capture only those instances that deviate from known, benign behavior, thereby focusing on potential malware download attempts from URLs not typical for this application. Pay particular attention to the command lines used during the process execution, as they may provide additional context or evidence of suspicious activity. Understand that the level of concern for these detections is considered medium, indicating they warrant attention but may not always represent a critical threat.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    image_path:\n        Image|endswith: '\\GfxDownloadWrapper.exe'\n    filter:\n        CommandLine|contains: 'gameplayapi.intel.com'\n        ParentImage|endswith:\n            - '\\GfxDownloadWrapper.exe'\n            - '\\igfxEM.exe'\n    condition: image_path and not filter\nfields:\n    - CommandLine\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    image_path:\n        Image|endswith: '\\GfxDownloadWrapper.exe'\n    filter:\n        CommandLine|contains: 'gameplayapi.intel.com'\n        ParentImage|endswith:\n            - '\\GfxDownloadWrapper.exe'\n            - '\\igfxEM.exe'\n    condition: image_path and not filter\nfields:\n    - CommandLine\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "when GfxDownloadWrapper.exe downloads file from non standard URL",
      "answer": "In order to detect when GfxDownloadWrapper.exe downloads file from non-standard URL, you should: establish a monitoring process on Windows systems for the creation of processes. Specifically, watch for occurrences where GfxDownloadWrapper.exe is executed. However, differentiate legitimate use by filtering out executions that involve command lines containing 'gameplayapi.intel.com' or have either GfxDownloadWrapper.exe or igfxEM.exe as their parent process. By doing so, you capture only those instances that deviate from known, benign behavior, thereby focusing on potential malware download attempts from URLs not typical for this application. Pay particular attention to the command lines used during the process execution, as they may provide additional context or evidence of suspicious activity. Understand that the level of concern for these detections is considered medium, indicating they warrant attention but may not always represent a critical threat."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    product: windows\n    category: ps_module\n    definition: 0ad03ef1-f21b-4a79-8ce8-e6900c54b65b\ndetection:\n    selection:\n        ContextInfo|contains|all:\n            - ' = ServerRemoteHost ' #  HostName: 'ServerRemoteHost'  french : Nom d\u2019h\u00f4te =\n            - 'wsmprovhost.exe'      #  HostApplication|contains: 'wsmprovhost.exe' french  Application h\u00f4te =\n    filter_pwsh_archive:\n        ContextInfo|contains: '\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\Microsoft.PowerShell.Archive\\Microsoft.PowerShell.Archive.psm1'\n    condition: selection and not 1 of filter_*\n\nfalsepositives:\n    - Legitimate use remote PowerShell sessions\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect remote PowerShell sessions\n\nHere is how  the given sigma rule operates: In order to detect remote PowerShell sessions, you should identify Windows PowerShell module activity that indicates the presence of such sessions. Specifically, look for logs where the `ContextInfo` field of the event contains both indications of a hostname set as 'ServerRemoteHost' and the presence of `wsmprovhost.exe`. It's crucial to exclude instances where the PowerShell archive module `Microsoft.PowerShell.Archive.psm1` located in the system directory `Windows\\system32\\WindowsPowerShell\\v1.0\\Modules` appears in the `ContextInfo`, as this might denote benign usage of PowerShell functionalities or management rather than an actual remote session. Log sources for this analysis are specifically from the Windows PowerShell modules category, reflecting interactions with PowerShell sessions and activities. The detection aims to mitigate risks by filtering out legitimate remote PowerShell sessions, which can be identified as common false positives. However, due to the severity level being high, any matched patterns should be scrutinized for potential security implications as they could reveal a tactic employed during cyber attacks. This method aligns with understanding and mitigating against tactics such as remote execution and discovery, which malicious actors might leverage to gain control or gather information from the target system clandestinely.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_module\n    definition: 0ad03ef1-f21b-4a79-8ce8-e6900c54b65b\ndetection:\n    selection:\n        ContextInfo|contains|all:\n            - ' = ServerRemoteHost ' #  HostName: 'ServerRemoteHost'  french : Nom d\u2019h\u00f4te =\n            - 'wsmprovhost.exe'      #  HostApplication|contains: 'wsmprovhost.exe' french  Application h\u00f4te =\n    filter_pwsh_archive:\n        ContextInfo|contains: '\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\Microsoft.PowerShell.Archive\\Microsoft.PowerShell.Archive.psm1'\n    condition: selection and not 1 of filter_*\n\nfalsepositives:\n    - Legitimate use remote PowerShell sessions\nlevel: high\n",
      "question": "remote PowerShell sessions",
      "answer": "In order to detect remote PowerShell sessions, you should identify Windows PowerShell module activity that indicates the presence of such sessions. Specifically, look for logs where the `ContextInfo` field of the event contains both indications of a hostname set as 'ServerRemoteHost' and the presence of `wsmprovhost.exe`. It's crucial to exclude instances where the PowerShell archive module `Microsoft.PowerShell.Archive.psm1` located in the system directory `Windows\\system32\\WindowsPowerShell\\v1.0\\Modules` appears in the `ContextInfo`, as this might denote benign usage of PowerShell functionalities or management rather than an actual remote session. Log sources for this analysis are specifically from the Windows PowerShell modules category, reflecting interactions with PowerShell sessions and activities. The detection aims to mitigate risks by filtering out legitimate remote PowerShell sessions, which can be identified as common false positives. However, due to the severity level being high, any matched patterns should be scrutinized for potential security implications as they could reveal a tactic employed during cyber attacks. This method aligns with understanding and mitigating against tactics such as remote execution and discovery, which malicious actors might leverage to gain control or gather information from the target system clandestinely."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: application\n    product: django\ndetection:\n    keywords:\n        - SuspiciousOperation\n        # Subclasses of SuspiciousOperation\n        - DisallowedHost\n        - DisallowedModelAdminLookup\n        - DisallowedModelAdminToField\n        - DisallowedRedirect\n        - InvalidSessionKey\n        - RequestDataTooBig\n        - SuspiciousFileOperation\n        - SuspiciousMultipartForm\n        - SuspiciousSession\n        - TooManyFieldsSent\n        # Further security-related exceptions\n        - PermissionDenied\n    condition: keywords\nfalsepositives:\n    - Application bugs\nlevel: medium\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect suspicious Django web application framework exceptions that could indicate exploitation attempts\n\nHere is how  the given sigma rule operates: In order to detect suspicious Django web application framework exceptions that could indicate exploitation attempts, you should monitor the application logs for specific keywords that represent various types of suspicious activities. These activities are typically flagged by Django when certain operations that could potentially harm the security of the web application are performed. Specifically, look out for logs containing exceptions such as SuspiciousOperation and its subclasses including DisallowedHost, which indicates an unauthorized domain access attempt; DisallowedModelAdminLookup, signaling potentially harmful queries to the database through the admin interface; DisallowedModelAdminToField, denoting unauthorized attempts to modify database fields; DisallowedRedirect, flagging attempts to redirect users to untrusted sites; InvalidSessionKey, pointing to the use of an invalid session identifier; RequestDataTooBig, indicating an unusually large request payload that could be an attempt to cause a denial of service; SuspiciousFileOperation, marking attempts to access or modify files in an unauthorized manner; SuspiciousMultipartForm, which could signify an attempt to upload malicious files; SuspiciousSession, identifying unusual session patterns that could indicate session hijacking; TooManyFieldsSent, signaling an attack attempt that involves sending excessive amounts of data fields; and finally, PermissionDenied, which could highlight unauthorized access attempts. It's crucial to take note of false positives that might arise from application bugs. The severity of these signals is considered medium, indicating that while they might not always represent a security threat, they warrant investigation to ensure the integrity and security of the web application.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: application\n    product: django\ndetection:\n    keywords:\n        - SuspiciousOperation\n        # Subclasses of SuspiciousOperation\n        - DisallowedHost\n        - DisallowedModelAdminLookup\n        - DisallowedModelAdminToField\n        - DisallowedRedirect\n        - InvalidSessionKey\n        - RequestDataTooBig\n        - SuspiciousFileOperation\n        - SuspiciousMultipartForm\n        - SuspiciousSession\n        - TooManyFieldsSent\n        # Further security-related exceptions\n        - PermissionDenied\n    condition: keywords\nfalsepositives:\n    - Application bugs\nlevel: medium\n",
      "question": "suspicious Django web application framework exceptions that could indicate exploitation attempts",
      "answer": "In order to detect suspicious Django web application framework exceptions that could indicate exploitation attempts, you should monitor the application logs for specific keywords that represent various types of suspicious activities. These activities are typically flagged by Django when certain operations that could potentially harm the security of the web application are performed. Specifically, look out for logs containing exceptions such as SuspiciousOperation and its subclasses including DisallowedHost, which indicates an unauthorized domain access attempt; DisallowedModelAdminLookup, signaling potentially harmful queries to the database through the admin interface; DisallowedModelAdminToField, denoting unauthorized attempts to modify database fields; DisallowedRedirect, flagging attempts to redirect users to untrusted sites; InvalidSessionKey, pointing to the use of an invalid session identifier; RequestDataTooBig, indicating an unusually large request payload that could be an attempt to cause a denial of service; SuspiciousFileOperation, marking attempts to access or modify files in an unauthorized manner; SuspiciousMultipartForm, which could signify an attempt to upload malicious files; SuspiciousSession, identifying unusual session patterns that could indicate session hijacking; TooManyFieldsSent, signaling an attack attempt that involves sending excessive amounts of data fields; and finally, PermissionDenied, which could highlight unauthorized access attempts. It's crucial to take note of false positives that might arise from application bugs. The severity of these signals is considered medium, indicating that while they might not always represent a security threat, they warrant investigation to ensure the integrity and security of the web application."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of the \"del\" builtin command to remove files using greedy/wildcard expression. This is often used by malware to delete content of folders that perhaps contains the initial malware infection or to delete evidence..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution of the \"del\" builtin command to remove files using greedy/wildcard expression, which is often used by malware to delete content of folders that perhaps contains the initial malware infection or to delete evidence, you should: Monitor process creation logs on Windows systems for activity related to the command prompt executable (cmd.exe) either by the image name ending with '\\cmd.exe' or the original file name being 'Cmd.Exe'. Specifically, look for command lines that include 'del ' or 'erase ', coupled with wildcards targeting '.dll' or '.exe' files, such as in the patterns '\\\\*.dll' or '\\\\*.exe'. This detection is crucial as it helps in identifying attempts to remove critical files, potentially as part of an attack to hide malicious activity or the traces of an infection. The rule treats unknown cases as potential false positives and assigns a medium severity level to such detection efforts.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    # Example:\n    #   del C:\\ProgramData\\*.dll & exit\n    selection_img:\n        - Image|endswith: '\\cmd.exe'\n        - OriginalFileName: 'Cmd.Exe'\n    selection_del:\n        CommandLine|contains:\n            - 'del '\n            - 'erase '\n    selection_extensions:\n        CommandLine|contains:\n            - '\\\\\\*.dll'\n            - '\\\\\\*.exe'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    # Example:\n    #   del C:\\ProgramData\\*.dll & exit\n    selection_img:\n        - Image|endswith: '\\cmd.exe'\n        - OriginalFileName: 'Cmd.Exe'\n    selection_del:\n        CommandLine|contains:\n            - 'del '\n            - 'erase '\n    selection_extensions:\n        CommandLine|contains:\n            - '\\\\\\*.dll'\n            - '\\\\\\*.exe'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "execution of the \"del\" builtin command to remove files using greedy/wildcard expression. This is often used by malware to delete content of folders that perhaps contains the initial malware infection or to delete evidence.",
      "answer": "In order to detect execution of the \"del\" builtin command to remove files using greedy/wildcard expression, which is often used by malware to delete content of folders that perhaps contains the initial malware infection or to delete evidence, you should: Monitor process creation logs on Windows systems for activity related to the command prompt executable (cmd.exe) either by the image name ending with '\\cmd.exe' or the original file name being 'Cmd.Exe'. Specifically, look for command lines that include 'del ' or 'erase ', coupled with wildcards targeting '.dll' or '.exe' files, such as in the patterns '\\\\*.dll' or '\\\\*.exe'. This detection is crucial as it helps in identifying attempts to remove critical files, potentially as part of an attack to hide malicious activity or the traces of an infection. The rule treats unknown cases as potential false positives and assigns a medium severity level to such detection efforts."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Kubernetes account access a sensitive objects such as configmaps or secrets..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to identify when a Kubernetes account accesses sensitive objects such as configmaps or secrets, you should monitor Azure Activity Logs for specific operations. Focus on detecting any WRITE or DELETE actions on CONFIGMAPS and SECRETS within the Microsoft.Kubernetes connected clusters service. These actions are critical to watch because they can indicate unauthorized access or potential malicious activity within a Kubernetes environment.\n\nBe aware of potential false positives, which might arise from legitimate administrative activities. It is essential to investigate the context of each detected action, paying close attention to the user identity, user agent, and the hostname from which the action was initiated. Any access or modifications to sensitive objects by unfamiliar users should be considered suspicious and warrant further investigation. However, if it is determined that known behaviors are triggering detections, these can be safely exempted to refine the monitoring process.\n\nThe activities to be closely monitored include creating or modifying configuration maps and secrets, which are both crucial for the secure operation of Kubernetes clusters. These actions fall into key cybersecurity strategies focusing on the Defense Evasion and Credential Access categories, underlining the necessity of stringent scrutiny in these operations to maintain the integrity and security of Kubernetes environments.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: azure\n    service: activitylogs\ndetection:\n    selection:\n        operationName:\n            - MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/CONFIGMAPS/WRITE\n            - MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/CONFIGMAPS/DELETE\n            - MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/SECRETS/WRITE\n            - MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/SECRETS/DELETE\n    condition: selection\nfalsepositives:\n    - Sensitive objects may be accessed by a system administrator. Verify whether the user identity, user agent, and/or hostname should be making changes in your environment. Sensitive objects accessed from unfamiliar users should be investigated. If known behavior is causing false positives, it can be exempted from the rule.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: azure\n    service: activitylogs\ndetection:\n    selection:\n        operationName:\n            - MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/CONFIGMAPS/WRITE\n            - MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/CONFIGMAPS/DELETE\n            - MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/SECRETS/WRITE\n            - MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/SECRETS/DELETE\n    condition: selection\nfalsepositives:\n    - Sensitive objects may be accessed by a system administrator. Verify whether the user identity, user agent, and/or hostname should be making changes in your environment. Sensitive objects accessed from unfamiliar users should be investigated. If known behavior is causing false positives, it can be exempted from the rule.\nlevel: medium\n",
      "question": "Kubernetes account access a sensitive objects such as configmaps or secrets.",
      "answer": "In order to identify when a Kubernetes account accesses sensitive objects such as configmaps or secrets, you should monitor Azure Activity Logs for specific operations. Focus on detecting any WRITE or DELETE actions on CONFIGMAPS and SECRETS within the Microsoft.Kubernetes connected clusters service. These actions are critical to watch because they can indicate unauthorized access or potential malicious activity within a Kubernetes environment.\n\nBe aware of potential false positives, which might arise from legitimate administrative activities. It is essential to investigate the context of each detected action, paying close attention to the user identity, user agent, and the hostname from which the action was initiated. Any access or modifications to sensitive objects by unfamiliar users should be considered suspicious and warrant further investigation. However, if it is determined that known behaviors are triggering detections, these can be safely exempted to refine the monitoring process.\n\nThe activities to be closely monitored include creating or modifying configuration maps and secrets, which are both crucial for the secure operation of Kubernetes clusters. These actions fall into key cybersecurity strategies focusing on the Defense Evasion and Credential Access categories, underlining the necessity of stringent scrutiny in these operations to maintain the integrity and security of Kubernetes environments."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\wsreset.exe'\n        IntegrityLevel:\n            - 'High'\n            - 'System'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect pattern of UAC Bypass via WSReset usable by default sysmon-config\n\nHere is how  the given sigma rule operates: In order to detect the pattern of UAC Bypass via WSReset usable by default sysmon-config, you should monitor process creation events within Windows operating systems. Specifically, look for processes that end with the '\\wsreset.exe' in their image paths. This executable is particularly interesting as it is commonly involved in User Account Control (UAC) bypass techniques. The processes to pay close attention to are those running at High or System integrity levels, which indicates they have elevated privileges. It is essential to react swiftly to alerts regarding such activity given the high threat level, although it's important to note that the nature of false positives in this context is currently unknown. This approach aligns with understanding techniques related to privilege escalation and evasion tactics.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\wsreset.exe'\n        IntegrityLevel:\n            - 'High'\n            - 'System'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "pattern of UAC Bypass via WSReset usable by default sysmon-config",
      "answer": "In order to detect the pattern of UAC Bypass via WSReset usable by default sysmon-config, you should monitor process creation events within Windows operating systems. Specifically, look for processes that end with the '\\wsreset.exe' in their image paths. This executable is particularly interesting as it is commonly involved in User Account Control (UAC) bypass techniques. The processes to pay close attention to are those running at High or System integrity levels, which indicates they have elevated privileges. It is essential to react swiftly to alerts regarding such activity given the high threat level, although it's important to note that the nature of false positives in this context is currently unknown. This approach aligns with understanding techniques related to privilege escalation and evasion tactics."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        Image|endswith:\n            - ':\\ProgramData\\adobe\\Adobe.exe'\n            - ':\\ProgramData\\oracle\\local.exe'\n            - '\\revshell.exe'\n            - '\\infopagesbackup\\ncat.exe'\n            - ':\\ProgramData\\comms\\comms.exe'\n    selection_msf:\n        CommandLine|contains|all:\n            - '-ExecutionPolicy Bypass -File'\n            - '\\msf.ps1'\n    selection_ncat:\n        CommandLine|contains|all:\n            - 'infopagesbackup'\n            - '\\ncat'\n            - '-e cmd.exe'\n    selection_powershell:\n        CommandLine|contains:\n            - 'system.Data.SqlClient.SqlDataAdapter($cmd); [void]$da.fill'\n            - '-nop -w hidden -c $k=new-object'\n            - '[Net.CredentialCache]::DefaultCredentials;IEX '\n            - ' -nop -w hidden -c $m=new-object net.webclient;$m'\n            - '-noninteractive -executionpolicy bypass whoami'\n            - '-noninteractive -executionpolicy bypass netstat -a'\n    selection_other:\n        CommandLine|contains: 'L3NlcnZlcj1'  # base64 encoded '/server='\n    condition: 1 of selection_*\nfalsepositives:\n    - Unlikely\nlevel: critical\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect tools and process executions used by Greenbug in their May 2020 campaign as reported by Symantec\n\nHere is how  the given sigma rule operates: In order to detect tools and process executions used by Greenbug in their May 2020 campaign as reported by Symantec, you should focus on monitoring the creation of processes on Windows systems. Specifically, look for processes that are launched from specific paths or with certain command lines indicative of malicious activities. These indicators include:\n\n1. Processes that are initiated from paths ending with:\n   - `:\\ProgramData\\adobe\\Adobe.exe`\n   - `:\\ProgramData\\oracle\\local.exe`\n   - `\\revshell.exe`\n   - `\\infopagesbackup\\ncat.exe`\n   - `:\\ProgramData\\comms\\comms.exe`\n\nThese paths suggest unauthorized installations or misuse of legitimate folders for malicious executables.\n\n2. Command lines that contain specific patterns, signifying the execution of potentially harmful scripts or tools, such as:\n   - Commands including '-ExecutionPolicy Bypass -File' together with '\\msf.ps1', indicating the use of PowerShell to bypass execution policy restrictions to run a malicious script named `msf.ps1`.\n   - The combination of 'infopagesbackup', '\\ncat', and '-e cmd.exe' in the command line, signifying the use of Ncat to execute command shell, which could be used for remote access or command and control.\n   - Various PowerShell command lines designed to execute code stealthily or to collect and exfiltrate sensitive information. These include using SQL data adapters, WebClient objects, default credentials, and running commands like `whoami` and `netstat -a` without interactive prompts.\n   - Command lines containing the Base64 encoded string 'L3NlcnZlcj1', which decodes to '/server=', part of a command likely used for remote communication.\n\nDetection of any of these activities should be treated as critical, with a low likelihood of false positives. Monitoring for such specific behaviors and execution patterns is crucial for identifying and mitigating activities associated with the Greenbug campaign or similar threats.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        Image|endswith:\n            - ':\\ProgramData\\adobe\\Adobe.exe'\n            - ':\\ProgramData\\oracle\\local.exe'\n            - '\\revshell.exe'\n            - '\\infopagesbackup\\ncat.exe'\n            - ':\\ProgramData\\comms\\comms.exe'\n    selection_msf:\n        CommandLine|contains|all:\n            - '-ExecutionPolicy Bypass -File'\n            - '\\msf.ps1'\n    selection_ncat:\n        CommandLine|contains|all:\n            - 'infopagesbackup'\n            - '\\ncat'\n            - '-e cmd.exe'\n    selection_powershell:\n        CommandLine|contains:\n            - 'system.Data.SqlClient.SqlDataAdapter($cmd); [void]$da.fill'\n            - '-nop -w hidden -c $k=new-object'\n            - '[Net.CredentialCache]::DefaultCredentials;IEX '\n            - ' -nop -w hidden -c $m=new-object net.webclient;$m'\n            - '-noninteractive -executionpolicy bypass whoami'\n            - '-noninteractive -executionpolicy bypass netstat -a'\n    selection_other:\n        CommandLine|contains: 'L3NlcnZlcj1'  # base64 encoded '/server='\n    condition: 1 of selection_*\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
      "question": "tools and process executions used by Greenbug in their May 2020 campaign as reported by Symantec",
      "answer": "In order to detect tools and process executions used by Greenbug in their May 2020 campaign as reported by Symantec, you should focus on monitoring the creation of processes on Windows systems. Specifically, look for processes that are launched from specific paths or with certain command lines indicative of malicious activities. These indicators include:\n\n1. Processes that are initiated from paths ending with:\n   - `:\\ProgramData\\adobe\\Adobe.exe`\n   - `:\\ProgramData\\oracle\\local.exe`\n   - `\\revshell.exe`\n   - `\\infopagesbackup\\ncat.exe`\n   - `:\\ProgramData\\comms\\comms.exe`\n\nThese paths suggest unauthorized installations or misuse of legitimate folders for malicious executables.\n\n2. Command lines that contain specific patterns, signifying the execution of potentially harmful scripts or tools, such as:\n   - Commands including '-ExecutionPolicy Bypass -File' together with '\\msf.ps1', indicating the use of PowerShell to bypass execution policy restrictions to run a malicious script named `msf.ps1`.\n   - The combination of 'infopagesbackup', '\\ncat', and '-e cmd.exe' in the command line, signifying the use of Ncat to execute command shell, which could be used for remote access or command and control.\n   - Various PowerShell command lines designed to execute code stealthily or to collect and exfiltrate sensitive information. These include using SQL data adapters, WebClient objects, default credentials, and running commands like `whoami` and `netstat -a` without interactive prompts.\n   - Command lines containing the Base64 encoded string 'L3NlcnZlcj1', which decodes to '/server=', part of a command likely used for remote communication.\n\nDetection of any of these activities should be treated as critical, with a low likelihood of false positives. Monitoring for such specific behaviors and execution patterns is crucial for identifying and mitigating activities associated with the Greenbug campaign or similar threats."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Detection of child processes spawned with SYSTEM privileges by parents with LOCAL SERVICE or NETWORK SERVICE accounts.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect child processes spawned with SYSTEM privileges by parents with LOCAL SERVICE or NETWORK SERVICE accounts, you should monitor process creation events within Windows environments, specifically looking for instances where these processes are initiated with SYSTEM level privileges. This monitoring should leverage Sysmon, with a version of 13.30 or higher, to capture the necessary details.\n\nFirst, focus on identifying processes that are started by users whose account names contain \"AUTHORI\" or \"AUTORI\" or specifically end with \"\\NETWORK SERVICE\" or \"\\LOCAL SERVICE\". These account names are often indicative of privileged services within Windows. Additionally, you should watch for child processes that are run under user accounts with names containing \"AUTHORI\" or \"AUTORI\", or ending with system-centric identifiers such as \"\\SYSTEM\", \"\\Syst\u00e8me\", or the Cyrillic \"\\\u0421\u0418\u0421\u0422\u0415\u041c\u0410\". It's crucial to verify that these child processes indeed operate at an Integrity Level denoted as 'System', signaling elevated privileges.\n\nHowever, it's also important to apply certain exclusions to avoid false positives, particularly for common benign processes that might fit these criteria. For example, processes with an image name ending in '\\rundll32.exe' and command-line arguments containing 'DavSetCookie' should be excluded from alerts as they can often be legitimate uses of the rundll32 executable, even though they may otherwise match the criteria for detection.\n\nBy setting up this tailored monitoring technique, focused on parent and child account privileges, process initiation sources, and specific system account usage, organizations can detect and investigate the suspicious spawning of child processes by services with particularly high privileges, which could indicate unauthorized actions or breaches within the security of the Windows operating system. This method addresses the risk of elevated privilege exploitation without being overwhelmed by false positives from benign system activities.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\n    definition: 'Requirements: ParentUser field needs sysmon >= 13.30'\ndetection:\n    selection:\n        ParentUser|contains:\n            - 'AUTHORI'\n            - 'AUTORI'\n        ParentUser|endswith:\n            - '\\NETWORK SERVICE'\n            - '\\LOCAL SERVICE'\n        User|contains: # covers many language settings\n            - 'AUTHORI'\n            - 'AUTORI'\n        User|endswith: # System\n            - '\\SYSTEM'\n            - '\\Syst\u00e8me'\n            - '\\\u0421\u0418\u0421\u0422\u0415\u041c\u0410'\n        IntegrityLevel: 'System'\n    filter_rundll32:\n        Image|endswith: '\\rundll32.exe'\n        CommandLine|contains: 'DavSetCookie'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\n    definition: 'Requirements: ParentUser field needs sysmon >= 13.30'\ndetection:\n    selection:\n        ParentUser|contains:\n            - 'AUTHORI'\n            - 'AUTORI'\n        ParentUser|endswith:\n            - '\\NETWORK SERVICE'\n            - '\\LOCAL SERVICE'\n        User|contains: # covers many language settings\n            - 'AUTHORI'\n            - 'AUTORI'\n        User|endswith: # System\n            - '\\SYSTEM'\n            - '\\Syst\u00e8me'\n            - '\\\u0421\u0418\u0421\u0422\u0415\u041c\u0410'\n        IntegrityLevel: 'System'\n    filter_rundll32:\n        Image|endswith: '\\rundll32.exe'\n        CommandLine|contains: 'DavSetCookie'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Detection of child processes spawned with SYSTEM privileges by parents with LOCAL SERVICE or NETWORK SERVICE accounts",
      "answer": "In order to detect child processes spawned with SYSTEM privileges by parents with LOCAL SERVICE or NETWORK SERVICE accounts, you should monitor process creation events within Windows environments, specifically looking for instances where these processes are initiated with SYSTEM level privileges. This monitoring should leverage Sysmon, with a version of 13.30 or higher, to capture the necessary details.\n\nFirst, focus on identifying processes that are started by users whose account names contain \"AUTHORI\" or \"AUTORI\" or specifically end with \"\\NETWORK SERVICE\" or \"\\LOCAL SERVICE\". These account names are often indicative of privileged services within Windows. Additionally, you should watch for child processes that are run under user accounts with names containing \"AUTHORI\" or \"AUTORI\", or ending with system-centric identifiers such as \"\\SYSTEM\", \"\\Syst\u00e8me\", or the Cyrillic \"\\\u0421\u0418\u0421\u0422\u0415\u041c\u0410\". It's crucial to verify that these child processes indeed operate at an Integrity Level denoted as 'System', signaling elevated privileges.\n\nHowever, it's also important to apply certain exclusions to avoid false positives, particularly for common benign processes that might fit these criteria. For example, processes with an image name ending in '\\rundll32.exe' and command-line arguments containing 'DavSetCookie' should be excluded from alerts as they can often be legitimate uses of the rundll32 executable, even though they may otherwise match the criteria for detection.\n\nBy setting up this tailored monitoring technique, focused on parent and child account privileges, process initiation sources, and specific system account usage, organizations can detect and investigate the suspicious spawning of child processes by services with particularly high privileges, which could indicate unauthorized actions or breaches within the security of the Windows operating system. This method addresses the risk of elevated privilege exploitation without being overwhelmed by false positives from benign system activities."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        # Note: Please ensure alphabetical order when adding new entries\n        CommandLine|contains:\n            - 'Add-Exfiltration'\n            - 'Add-Persistence'\n            - 'Add-RegBackdoor'\n            - 'Add-RemoteRegBackdoor'\n            - 'Add-ScrnSaveBackdoor'\n            - 'Check-VM'\n            - 'ConvertTo-Rc4ByteStream'\n            - 'Decrypt-Hash'\n            - 'Disable-ADIDNSNode'\n            - 'Disable-MachineAccount'\n            - 'Do-Exfiltration'\n            - 'Enable-ADIDNSNode'\n            - 'Enable-MachineAccount'\n            - 'Enabled-DuplicateToken'\n            - 'Exploit-Jboss'\n            - 'Export-ADR'\n            - 'Export-ADRCSV'\n            - 'Export-ADRExcel'\n            - 'Export-ADRHTML'\n            - 'Export-ADRJSON'\n            - 'Export-ADRXML'\n            - 'Find-Fruit'\n            - 'Find-GPOLocation'\n            - 'Find-TrustedDocuments'\n            - 'Get-ADIDNS' # Covers: Get-ADIDNSNodeAttribute, Get-ADIDNSNodeOwner, Get-ADIDNSNodeTombstoned, Get-ADIDNSPermission, Get-ADIDNSZone\n            - 'Get-ApplicationHost'\n            - 'Get-ChromeDump'\n            - 'Get-ClipboardContents'\n            - 'Get-FoxDump'\n            - 'Get-GPPPassword'\n            - 'Get-IndexedItem'\n            - 'Get-KerberosAESKey'\n            - 'Get-Keystrokes'\n            - 'Get-LSASecret'\n            - 'Get-MachineAccountAttribute'\n            - 'Get-MachineAccountCreator'\n            - 'Get-PassHashes'\n            - 'Get-RegAlwaysInstallElevated'\n            - 'Get-RegAutoLogon'\n            - 'Get-RemoteBootKey'\n            - 'Get-RemoteCachedCredential'\n            - 'Get-RemoteLocalAccountHash'\n            - 'Get-RemoteLSAKey'\n            - 'Get-RemoteMachineAccountHash'\n            - 'Get-RemoteNLKMKey'\n            - 'Get-RickAstley'\n            - 'Get-Screenshot'\n            - 'Get-SecurityPackages'\n            - 'Get-ServiceFilePermission'\n            - 'Get-ServicePermission'\n            - 'Get-ServiceUnquoted'\n            - 'Get-SiteListPassword'\n            - 'Get-System'\n            - 'Get-TimedScreenshot'\n            - 'Get-UnattendedInstallFile'\n            - 'Get-Unconstrained'\n            - 'Get-USBKeystrokes'\n            - 'Get-VaultCredential'\n            - 'Get-VulnAutoRun'\n            - 'Get-VulnSchTask'\n            - 'Grant-ADIDNSPermission'\n            - 'Gupt-Backdoor'\n            - 'HTTP-Login'\n            - 'Install-ServiceBinary'\n            - 'Install-SSP'\n            - 'Invoke-ACLScanner'\n            - 'Invoke-ADRecon'\n            - 'Invoke-ADSBackdoor'\n            - 'Invoke-AgentSmith'\n            - 'Invoke-AllChecks'\n            - 'Invoke-ARPScan'\n            - 'Invoke-AzureHound'\n            - 'Invoke-BackdoorLNK'\n            - 'Invoke-BadPotato'\n            - 'Invoke-BetterSafetyKatz'\n            - 'Invoke-BypassUAC'\n            - 'Invoke-Carbuncle'\n            - 'Invoke-Certify'\n            - 'Invoke-ConPtyShell'\n            - 'Invoke-CredentialInjection'\n            - 'Invoke-DAFT'\n            - 'Invoke-DCSync'\n            - 'Invoke-DinvokeKatz'\n            - 'Invoke-DllInjection'\n            - 'Invoke-DNSUpdate'\n            - 'Invoke-DomainPasswordSpray'\n            - 'Invoke-DowngradeAccount'\n            - 'Invoke-EgressCheck'\n            - 'Invoke-Eyewitness'\n            - 'Invoke-FakeLogonScreen'\n            - 'Invoke-Farmer'\n            - 'Invoke-Get-RBCD-Threaded'\n            - 'Invoke-Gopher'\n            - 'Invoke-Grouper' # Also Covers Invoke-GrouperX\n            - 'Invoke-HandleKatz'\n            - 'Invoke-ImpersonatedProcess'\n            - 'Invoke-ImpersonateSystem'\n            - 'Invoke-InteractiveSystemPowerShell'\n            - 'Invoke-Internalmonologue'\n            - 'Invoke-Inveigh'\n            - 'Invoke-InveighRelay'\n            - 'Invoke-KrbRelay'\n            - 'Invoke-LdapSignCheck'\n            - 'Invoke-Lockless'\n            - 'Invoke-MalSCCM'\n            - 'Invoke-Mimikatz'\n            - 'Invoke-Mimikittenz'\n            - 'Invoke-MITM6'\n            - 'Invoke-NanoDump'\n            - 'Invoke-NetRipper'\n            - 'Invoke-Nightmare'\n            - 'Invoke-NinjaCopy'\n            - 'Invoke-OfficeScrape'\n            - 'Invoke-OxidResolver'\n            - 'Invoke-P0wnedshell'\n            - 'Invoke-Paranoia'\n            - 'Invoke-PortScan'\n            - 'Invoke-PoshRatHttp' # Also Covers Invoke-PoshRatHttps\n            - 'Invoke-PostExfil'\n            - 'Invoke-PowerDump'\n            - 'Invoke-PowerShellTCP'\n            - 'Invoke-PowerShellWMI'\n            - 'Invoke-PPLDump'\n            - 'Invoke-PsExec'\n            - 'Invoke-PSInject'\n            - 'Invoke-PsUaCme'\n            - 'Invoke-ReflectivePEInjection'\n            - 'Invoke-ReverseDNSLookup'\n            - 'Invoke-Rubeus'\n            - 'Invoke-RunAs'\n            - 'Invoke-SafetyKatz'\n            - 'Invoke-SauronEye'\n            - 'Invoke-SCShell'\n            - 'Invoke-Seatbelt'\n            - 'Invoke-ServiceAbuse'\n            - 'Invoke-ShadowSpray'\n            - 'Invoke-Sharp' # Covers all \"Invoke-Sharp\" variants\n            - 'Invoke-Shellcode'\n            - 'Invoke-SMBScanner'\n            - 'Invoke-Snaffler'\n            - 'Invoke-Spoolsample'\n            - 'Invoke-SpraySinglePassword'\n            - 'Invoke-SSHCommand'\n            - 'Invoke-StandIn'\n            - 'Invoke-StickyNotesExtract'\n            - 'Invoke-SystemCommand'\n            - 'Invoke-Tasksbackdoor'\n            - 'Invoke-Tater'\n            - 'Invoke-Thunderfox'\n            - 'Invoke-ThunderStruck'\n            - 'Invoke-TokenManipulation'\n            - 'Invoke-Tokenvator'\n            - 'Invoke-TotalExec'\n            - 'Invoke-UrbanBishop'\n            - 'Invoke-UserHunter'\n            - 'Invoke-VoiceTroll'\n            - 'Invoke-Whisker'\n            - 'Invoke-WinEnum'\n            - 'Invoke-winPEAS'\n            - 'Invoke-WireTap'\n            - 'Invoke-WmiCommand'\n            - 'Invoke-WMIExec'\n            - 'Invoke-WScriptBypassUAC'\n            - 'Invoke-Zerologon'\n            - 'MailRaider'\n            - 'New-ADIDNSNode'\n            - 'New-DNSRecordArray'\n            - 'New-HoneyHash'\n            - 'New-InMemoryModule'\n            - 'New-MachineAccount'\n            - 'New-SOASerialNumberArray'\n            - 'Out-Minidump'\n            - 'Port-Scan'\n            - 'PowerBreach'\n            - 'powercat '\n            - 'PowerUp'\n            - 'PowerView'\n            - 'Remove-ADIDNSNode'\n            - 'Remove-MachineAccount'\n            - 'Remove-Update'\n            - 'Rename-ADIDNSNode'\n            - 'Revoke-ADIDNSPermission'\n            - 'Set-ADIDNSNode' # Covers: Set-ADIDNSNodeAttribute, Set-ADIDNSNodeOwner\n            - 'Set-MacAttribute'\n            - 'Set-MachineAccountAttribute'\n            - 'Set-Wallpaper'\n            - 'Show-TargetScreen'\n            - 'Start-CaptureServer'\n            - 'Start-WebcamRecorder'\n            - 'VolumeShadowCopyTools'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect Commandlet names from well-known PowerShell exploitation frameworks\n\nHere is how  the given sigma rule operates: In order to detect Commandlet names from well-known PowerShell exploitation frameworks, you should monitor process creation logs on Windows systems for the execution of PowerShell commands that contain specific keywords. These keywords are indicative of activities related to various cyber attack techniques such as adding persistence mechanisms, exfiltration of data, exploiting vulnerabilities, conducting reconnaissance, disabling security features, and many others. The presence of any of these commands, which range from 'Add-Exfiltration' to 'VolumeShadowCopyTools', could signal an ongoing attack or compromise. Such actions are commonly found in attack frameworks used by malicious actors to automate exploitation, lateral movement, data theft, and other nefarious activities. Monitoring for these command executions is crucial as they are tied to a wide array of MITRE ATT&CK tactics and techniques including, but not limited to, persistence, privilege escalation, defense evasion, credential access, discovery, lateral movement, collection, exfiltration, command and control, and execution. Identifying the usage of these commands can help in early detection of attacks, allowing for a timely response to mitigate the threat. It is important to investigate these alerts, keeping in mind that there might be false positives, although the level of alert is considered high due to the potential impact of the actions associated with these commands.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        # Note: Please ensure alphabetical order when adding new entries\n        CommandLine|contains:\n            - 'Add-Exfiltration'\n            - 'Add-Persistence'\n            - 'Add-RegBackdoor'\n            - 'Add-RemoteRegBackdoor'\n            - 'Add-ScrnSaveBackdoor'\n            - 'Check-VM'\n            - 'ConvertTo-Rc4ByteStream'\n            - 'Decrypt-Hash'\n            - 'Disable-ADIDNSNode'\n            - 'Disable-MachineAccount'\n            - 'Do-Exfiltration'\n            - 'Enable-ADIDNSNode'\n            - 'Enable-MachineAccount'\n            - 'Enabled-DuplicateToken'\n            - 'Exploit-Jboss'\n            - 'Export-ADR'\n            - 'Export-ADRCSV'\n            - 'Export-ADRExcel'\n            - 'Export-ADRHTML'\n            - 'Export-ADRJSON'\n            - 'Export-ADRXML'\n            - 'Find-Fruit'\n            - 'Find-GPOLocation'\n            - 'Find-TrustedDocuments'\n            - 'Get-ADIDNS' # Covers: Get-ADIDNSNodeAttribute, Get-ADIDNSNodeOwner, Get-ADIDNSNodeTombstoned, Get-ADIDNSPermission, Get-ADIDNSZone\n            - 'Get-ApplicationHost'\n            - 'Get-ChromeDump'\n            - 'Get-ClipboardContents'\n            - 'Get-FoxDump'\n            - 'Get-GPPPassword'\n            - 'Get-IndexedItem'\n            - 'Get-KerberosAESKey'\n            - 'Get-Keystrokes'\n            - 'Get-LSASecret'\n            - 'Get-MachineAccountAttribute'\n            - 'Get-MachineAccountCreator'\n            - 'Get-PassHashes'\n            - 'Get-RegAlwaysInstallElevated'\n            - 'Get-RegAutoLogon'\n            - 'Get-RemoteBootKey'\n            - 'Get-RemoteCachedCredential'\n            - 'Get-RemoteLocalAccountHash'\n            - 'Get-RemoteLSAKey'\n            - 'Get-RemoteMachineAccountHash'\n            - 'Get-RemoteNLKMKey'\n            - 'Get-RickAstley'\n            - 'Get-Screenshot'\n            - 'Get-SecurityPackages'\n            - 'Get-ServiceFilePermission'\n            - 'Get-ServicePermission'\n            - 'Get-ServiceUnquoted'\n            - 'Get-SiteListPassword'\n            - 'Get-System'\n            - 'Get-TimedScreenshot'\n            - 'Get-UnattendedInstallFile'\n            - 'Get-Unconstrained'\n            - 'Get-USBKeystrokes'\n            - 'Get-VaultCredential'\n            - 'Get-VulnAutoRun'\n            - 'Get-VulnSchTask'\n            - 'Grant-ADIDNSPermission'\n            - 'Gupt-Backdoor'\n            - 'HTTP-Login'\n            - 'Install-ServiceBinary'\n            - 'Install-SSP'\n            - 'Invoke-ACLScanner'\n            - 'Invoke-ADRecon'\n            - 'Invoke-ADSBackdoor'\n            - 'Invoke-AgentSmith'\n            - 'Invoke-AllChecks'\n            - 'Invoke-ARPScan'\n            - 'Invoke-AzureHound'\n            - 'Invoke-BackdoorLNK'\n            - 'Invoke-BadPotato'\n            - 'Invoke-BetterSafetyKatz'\n            - 'Invoke-BypassUAC'\n            - 'Invoke-Carbuncle'\n            - 'Invoke-Certify'\n            - 'Invoke-ConPtyShell'\n            - 'Invoke-CredentialInjection'\n            - 'Invoke-DAFT'\n            - 'Invoke-DCSync'\n            - 'Invoke-DinvokeKatz'\n            - 'Invoke-DllInjection'\n            - 'Invoke-DNSUpdate'\n            - 'Invoke-DomainPasswordSpray'\n            - 'Invoke-DowngradeAccount'\n            - 'Invoke-EgressCheck'\n            - 'Invoke-Eyewitness'\n            - 'Invoke-FakeLogonScreen'\n            - 'Invoke-Farmer'\n            - 'Invoke-Get-RBCD-Threaded'\n            - 'Invoke-Gopher'\n            - 'Invoke-Grouper' # Also Covers Invoke-GrouperX\n            - 'Invoke-HandleKatz'\n            - 'Invoke-ImpersonatedProcess'\n            - 'Invoke-ImpersonateSystem'\n            - 'Invoke-InteractiveSystemPowerShell'\n            - 'Invoke-Internalmonologue'\n            - 'Invoke-Inveigh'\n            - 'Invoke-InveighRelay'\n            - 'Invoke-KrbRelay'\n            - 'Invoke-LdapSignCheck'\n            - 'Invoke-Lockless'\n            - 'Invoke-MalSCCM'\n            - 'Invoke-Mimikatz'\n            - 'Invoke-Mimikittenz'\n            - 'Invoke-MITM6'\n            - 'Invoke-NanoDump'\n            - 'Invoke-NetRipper'\n            - 'Invoke-Nightmare'\n            - 'Invoke-NinjaCopy'\n            - 'Invoke-OfficeScrape'\n            - 'Invoke-OxidResolver'\n            - 'Invoke-P0wnedshell'\n            - 'Invoke-Paranoia'\n            - 'Invoke-PortScan'\n            - 'Invoke-PoshRatHttp' # Also Covers Invoke-PoshRatHttps\n            - 'Invoke-PostExfil'\n            - 'Invoke-PowerDump'\n            - 'Invoke-PowerShellTCP'\n            - 'Invoke-PowerShellWMI'\n            - 'Invoke-PPLDump'\n            - 'Invoke-PsExec'\n            - 'Invoke-PSInject'\n            - 'Invoke-PsUaCme'\n            - 'Invoke-ReflectivePEInjection'\n            - 'Invoke-ReverseDNSLookup'\n            - 'Invoke-Rubeus'\n            - 'Invoke-RunAs'\n            - 'Invoke-SafetyKatz'\n            - 'Invoke-SauronEye'\n            - 'Invoke-SCShell'\n            - 'Invoke-Seatbelt'\n            - 'Invoke-ServiceAbuse'\n            - 'Invoke-ShadowSpray'\n            - 'Invoke-Sharp' # Covers all \"Invoke-Sharp\" variants\n            - 'Invoke-Shellcode'\n            - 'Invoke-SMBScanner'\n            - 'Invoke-Snaffler'\n            - 'Invoke-Spoolsample'\n            - 'Invoke-SpraySinglePassword'\n            - 'Invoke-SSHCommand'\n            - 'Invoke-StandIn'\n            - 'Invoke-StickyNotesExtract'\n            - 'Invoke-SystemCommand'\n            - 'Invoke-Tasksbackdoor'\n            - 'Invoke-Tater'\n            - 'Invoke-Thunderfox'\n            - 'Invoke-ThunderStruck'\n            - 'Invoke-TokenManipulation'\n            - 'Invoke-Tokenvator'\n            - 'Invoke-TotalExec'\n            - 'Invoke-UrbanBishop'\n            - 'Invoke-UserHunter'\n            - 'Invoke-VoiceTroll'\n            - 'Invoke-Whisker'\n            - 'Invoke-WinEnum'\n            - 'Invoke-winPEAS'\n            - 'Invoke-WireTap'\n            - 'Invoke-WmiCommand'\n            - 'Invoke-WMIExec'\n            - 'Invoke-WScriptBypassUAC'\n            - 'Invoke-Zerologon'\n            - 'MailRaider'\n            - 'New-ADIDNSNode'\n            - 'New-DNSRecordArray'\n            - 'New-HoneyHash'\n            - 'New-InMemoryModule'\n            - 'New-MachineAccount'\n            - 'New-SOASerialNumberArray'\n            - 'Out-Minidump'\n            - 'Port-Scan'\n            - 'PowerBreach'\n            - 'powercat '\n            - 'PowerUp'\n            - 'PowerView'\n            - 'Remove-ADIDNSNode'\n            - 'Remove-MachineAccount'\n            - 'Remove-Update'\n            - 'Rename-ADIDNSNode'\n            - 'Revoke-ADIDNSPermission'\n            - 'Set-ADIDNSNode' # Covers: Set-ADIDNSNodeAttribute, Set-ADIDNSNodeOwner\n            - 'Set-MacAttribute'\n            - 'Set-MachineAccountAttribute'\n            - 'Set-Wallpaper'\n            - 'Show-TargetScreen'\n            - 'Start-CaptureServer'\n            - 'Start-WebcamRecorder'\n            - 'VolumeShadowCopyTools'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Commandlet names from well-known PowerShell exploitation frameworks",
      "answer": "In order to detect Commandlet names from well-known PowerShell exploitation frameworks, you should monitor process creation logs on Windows systems for the execution of PowerShell commands that contain specific keywords. These keywords are indicative of activities related to various cyber attack techniques such as adding persistence mechanisms, exfiltration of data, exploiting vulnerabilities, conducting reconnaissance, disabling security features, and many others. The presence of any of these commands, which range from 'Add-Exfiltration' to 'VolumeShadowCopyTools', could signal an ongoing attack or compromise. Such actions are commonly found in attack frameworks used by malicious actors to automate exploitation, lateral movement, data theft, and other nefarious activities. Monitoring for these command executions is crucial as they are tied to a wide array of MITRE ATT&CK tactics and techniques including, but not limited to, persistence, privilege escalation, defense evasion, credential access, discovery, lateral movement, collection, exfiltration, command and control, and execution. Identifying the usage of these commands can help in early detection of attacks, allowing for a timely response to mitigate the threat. It is important to investigate these alerts, keeping in mind that there might be false positives, although the level of alert is considered high due to the potential impact of the actions associated with these commands."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: database\n    definition: 'Requirements: Must be able to log the SQL queries'\ndetection:\n    keywords:\n        - 'drop'\n        - 'truncate'\n        - 'dump'\n        - 'select \\*'\n    condition: keywords\nfalsepositives:\n    - Inventory and monitoring activity\n    - Vulnerability scanners\n    - Legitimate applications\nlevel: medium\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect suspicious SQL query keywrods that are often used during recon, exfiltration or destructive activities. Such as dropping tables and selecting wildcard fields\n\nHere is how  the given sigma rule operates: In order to detect suspicious SQL query keywords that are often used during recon, exfiltration or destructive activities, such as dropping tables and selecting wildcard fields, you should: Monitor your database logs for specific SQL query keywords that may indicate malicious activities. These keywords include 'drop', used to remove database elements like tables, which can be a sign of destructive intent; 'truncate', which deletes all records from a table without logging the individual row deletions, indicating a potential cover-up of activities; 'dump', often used in the context of extracting large amounts of data from a database, which could suggest data exfiltration; and 'select *', which selects all columns from a table and might indicate a reconnaissance activity to understand database layout or to exfiltrate data. \n\nIt is crucial to consider log source settings to ensure they are capable of logging the actual SQL queries to detect these activities effectively. This detection strategy is linked to techniques commonly seen in cyber threats, specifically relating to reconnaissance, exfiltration, and impactful actions against a target's database assets.\n\nHowever, it's important to be aware of potential false positives that could arise from these detections: inventory and monitoring activities that are part of normal operations, vulnerability scanners that legitimately use these queries for testing purposes, and legitimate applications that may use such queries as part of their normal function. The alert level for these activities is considered medium, reflecting a balanced approach to the potential risk and the likelihood of legitimate use cases for these SQL keywords.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: database\n    definition: 'Requirements: Must be able to log the SQL queries'\ndetection:\n    keywords:\n        - 'drop'\n        - 'truncate'\n        - 'dump'\n        - 'select \\*'\n    condition: keywords\nfalsepositives:\n    - Inventory and monitoring activity\n    - Vulnerability scanners\n    - Legitimate applications\nlevel: medium\n",
      "question": "suspicious SQL query keywrods that are often used during recon, exfiltration or destructive activities. Such as dropping tables and selecting wildcard fields",
      "answer": "In order to detect suspicious SQL query keywords that are often used during recon, exfiltration or destructive activities, such as dropping tables and selecting wildcard fields, you should: Monitor your database logs for specific SQL query keywords that may indicate malicious activities. These keywords include 'drop', used to remove database elements like tables, which can be a sign of destructive intent; 'truncate', which deletes all records from a table without logging the individual row deletions, indicating a potential cover-up of activities; 'dump', often used in the context of extracting large amounts of data from a database, which could suggest data exfiltration; and 'select *', which selects all columns from a table and might indicate a reconnaissance activity to understand database layout or to exfiltrate data. \n\nIt is crucial to consider log source settings to ensure they are capable of logging the actual SQL queries to detect these activities effectively. This detection strategy is linked to techniques commonly seen in cyber threats, specifically relating to reconnaissance, exfiltration, and impactful actions against a target's database assets.\n\nHowever, it's important to be aware of potential false positives that could arise from these detections: inventory and monitoring activities that are part of normal operations, vulnerability scanners that legitimately use these queries for testing purposes, and legitimate applications that may use such queries as part of their normal function. The alert level for these activities is considered medium, reflecting a balanced approach to the potential risk and the likelihood of legitimate use cases for these SQL keywords."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting creation or modification of the Windows Terminal Profile settings file \"settings.json\" by an uncommon process..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the creation or modification of the Windows Terminal Profile settings file \"settings.json\" by an uncommon process, you should monitor file event logs on Windows systems. Specifically, watch for events where programs typically not used for legitimate modifications to the Windows Terminal settings file, such as 'cmd.exe', 'cscript.exe', 'mshta.exe', 'powershell.exe', 'pwsh.exe', and 'wscript.exe', are the initiating processes. These programs ending their process names with the specified executables should raise a flag if they are found to be modifying the file located at '\\AppData\\Local\\Packages\\Microsoft.WindowsTerminal_8wekyb3d8bbwe\\LocalState\\settings.json'. Be mindful that there may be legitimate administrative scripts that alter the Terminal settings, which could be considered as false positives. This monitoring is crucial for identifying potentially malicious activity related to the modification of terminal settings, which could be indicative of an attacker trying to tamper with terminal behaviours or persist within a system. The detection hinges on the observation of uncommon or suspicious processes interacting with critical configuration files, which aligns with the tactics of Persistence, Privilege Escalation, and Defense Evasion by altering terminal settings or profiles.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        Image|endswith:\n            # Note: Add other potential common applications\n            - '\\cmd.exe'\n            - '\\cscript.exe'\n            - '\\mshta.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\wscript.exe'\n        TargetFilename|endswith: '\\AppData\\Local\\Packages\\Microsoft.WindowsTerminal_8wekyb3d8bbwe\\LocalState\\settings.json'\n    condition: selection\nfalsepositives:\n    - Some false positives may occur with admin scripts that set WT settings.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        Image|endswith:\n            # Note: Add other potential common applications\n            - '\\cmd.exe'\n            - '\\cscript.exe'\n            - '\\mshta.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\wscript.exe'\n        TargetFilename|endswith: '\\AppData\\Local\\Packages\\Microsoft.WindowsTerminal_8wekyb3d8bbwe\\LocalState\\settings.json'\n    condition: selection\nfalsepositives:\n    - Some false positives may occur with admin scripts that set WT settings.\nlevel: medium\n",
      "question": "creation or modification of the Windows Terminal Profile settings file \"settings.json\" by an uncommon process.",
      "answer": "In order to detect the creation or modification of the Windows Terminal Profile settings file \"settings.json\" by an uncommon process, you should monitor file event logs on Windows systems. Specifically, watch for events where programs typically not used for legitimate modifications to the Windows Terminal settings file, such as 'cmd.exe', 'cscript.exe', 'mshta.exe', 'powershell.exe', 'pwsh.exe', and 'wscript.exe', are the initiating processes. These programs ending their process names with the specified executables should raise a flag if they are found to be modifying the file located at '\\AppData\\Local\\Packages\\Microsoft.WindowsTerminal_8wekyb3d8bbwe\\LocalState\\settings.json'. Be mindful that there may be legitimate administrative scripts that alter the Terminal settings, which could be considered as false positives. This monitoring is crucial for identifying potentially malicious activity related to the modification of terminal settings, which could be indicative of an attacker trying to tamper with terminal behaviours or persist within a system. The detection hinges on the observation of uncommon or suspicious processes interacting with critical configuration files, which aligns with the tactics of Persistence, Privilege Escalation, and Defense Evasion by altering terminal settings or profiles."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains|all:\n            - 'New-MailboxExportRequest'\n            - ' -Mailbox '\n            - ' -FilePath \\\\\\\\'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: critical\nfields:\n    - CommandLine\n    - ParentCommandLine\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect usage of the powerShell New-MailboxExportRequest Cmdlet to exports a mailbox to a remote or local share, as used in ProxyShell exploitations\n\nHere is how  the given sigma rule operates: In order to detect usage of the PowerShell New-MailboxExportRequest Cmdlet to exports a mailbox to a remote or local share, as used in ProxyShell exploitations, you should: Monitor PowerShell script logs specifically for the script block text that includes the combination of 'New-MailboxExportRequest', ' -Mailbox ', and ' -FilePath \\\\\\\\', which signifies an attempt to export a mailbox. Such monitoring requires that Script Block Logging is enabled on the Windows systems being protected. This detection strategy is critical because it helps identify potentially unauthorized attempts to export mailbox data, a tactic commonly associated with ProxyShell exploitation efforts. The focus should be on capturing and analyzing the CommandLine and ParentCommandLine fields for further investigation of suspicious activities.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains|all:\n            - 'New-MailboxExportRequest'\n            - ' -Mailbox '\n            - ' -FilePath \\\\\\\\'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: critical\nfields:\n    - CommandLine\n    - ParentCommandLine\n",
      "question": "usage of the powerShell New-MailboxExportRequest Cmdlet to exports a mailbox to a remote or local share, as used in ProxyShell exploitations",
      "answer": "In order to detect usage of the PowerShell New-MailboxExportRequest Cmdlet to exports a mailbox to a remote or local share, as used in ProxyShell exploitations, you should: Monitor PowerShell script logs specifically for the script block text that includes the combination of 'New-MailboxExportRequest', ' -Mailbox ', and ' -FilePath \\\\\\\\', which signifies an attempt to export a mailbox. Such monitoring requires that Script Block Logging is enabled on the Windows systems being protected. This detection strategy is critical because it helps identify potentially unauthorized attempts to export mailbox data, a tactic commonly associated with ProxyShell exploitation efforts. The focus should be on capturing and analyzing the CommandLine and ParentCommandLine fields for further investigation of suspicious activities."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection_cmd:\n        ScriptBlockText|contains|all:\n            - 'Enable-WindowsOptionalFeature'\n            - '-Online'\n            - '-FeatureName'\n    selection_feature:\n        # Add any insecure/unusual windows features to your env\n        ScriptBlockText|contains:\n            - 'TelnetServer'\n            - 'Internet-Explorer-Optional-amd64'\n            - 'TFTP'\n            - 'SMB1Protocol'\n            - 'Client-ProjFS'\n            - 'Microsoft-Windows-Subsystem-Linux'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate usage of the features listed in the rule.\nlevel: medium\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect usage of the built-in PowerShell cmdlet \"Enable-WindowsOptionalFeature\" used as a Deployment Image Servicing and Management tool.\nSimilar to DISM.exe, this cmdlet is used to enumerate, install, uninstall, configure, and update features and packages in Windows images\n\n\nHere is how  the given sigma rule operates: In order to detect usage of the built-in PowerShell cmdlet \"Enable-WindowsOptionalFeature\" used as a Deployment Image Servicing and Management tool, similar to DISM.exe, this cmdlet is used to enumerate, install, uninstall, configure, and update features and packages in Windows images, you should: monitor Windows PowerShell script logs specifically looking for the use of the \"Enable-WindowsOptionalFeature\" cmdlet along with parameters '-Online' and '-FeatureName'. This aims to catch when someone is attempting to enable Windows features or packages potentially for malicious purposes. Specifically, pay attention to the enabling of features such as 'TelnetServer', 'Internet-Explorer-Optional-amd64', 'TFTP', 'SMB1Protocol', 'Client-ProjFS', and 'Microsoft-Windows-Subsystem-Linux', as these could be indicative of an adversary's attempt to install insecure or unusual Windows features. The monitoring process involves ensuring that Script Block Logging is enabled in Windows to capture the PowerShell command execution. Be aware that there could be legitimate use cases for enabling these features, so consider this to minimize potential false positives. The detection strategy is leveled at a medium severity, indicating a balanced approach to identifying potentially harmful activity without causing undue alarm for normal system administration tasks.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection_cmd:\n        ScriptBlockText|contains|all:\n            - 'Enable-WindowsOptionalFeature'\n            - '-Online'\n            - '-FeatureName'\n    selection_feature:\n        # Add any insecure/unusual windows features to your env\n        ScriptBlockText|contains:\n            - 'TelnetServer'\n            - 'Internet-Explorer-Optional-amd64'\n            - 'TFTP'\n            - 'SMB1Protocol'\n            - 'Client-ProjFS'\n            - 'Microsoft-Windows-Subsystem-Linux'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate usage of the features listed in the rule.\nlevel: medium\n",
      "question": "usage of the built-in PowerShell cmdlet \"Enable-WindowsOptionalFeature\" used as a Deployment Image Servicing and Management tool.\nSimilar to DISM.exe, this cmdlet is used to enumerate, install, uninstall, configure, and update features and packages in Windows images\n",
      "answer": "In order to detect usage of the built-in PowerShell cmdlet \"Enable-WindowsOptionalFeature\" used as a Deployment Image Servicing and Management tool, similar to DISM.exe, this cmdlet is used to enumerate, install, uninstall, configure, and update features and packages in Windows images, you should: monitor Windows PowerShell script logs specifically looking for the use of the \"Enable-WindowsOptionalFeature\" cmdlet along with parameters '-Online' and '-FeatureName'. This aims to catch when someone is attempting to enable Windows features or packages potentially for malicious purposes. Specifically, pay attention to the enabling of features such as 'TelnetServer', 'Internet-Explorer-Optional-amd64', 'TFTP', 'SMB1Protocol', 'Client-ProjFS', and 'Microsoft-Windows-Subsystem-Linux', as these could be indicative of an adversary's attempt to install insecure or unusual Windows features. The monitoring process involves ensuring that Script Block Logging is enabled in Windows to capture the PowerShell command execution. Be aware that there could be legitimate use cases for enabling these features, so consider this to minimize potential false positives. The detection strategy is leveled at a medium severity, indicating a balanced approach to identifying potentially harmful activity without causing undue alarm for normal system administration tasks."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'rundll32.exe'\n            - 'shell32.dll'\n            - 'shellexec_rundll'\n            - 'powershell'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect Obfuscated Powershell via RUNDLL LAUNCHER\n\nHere is how  the given sigma rule operates: In order to Detect Obfuscated Powershell via RUNDLL LAUNCHER, you should:\nMonitor Windows process creation logs for instances where the command line contains specific sequences indicative of an obfuscation tactic. It involves looking for the invocation of 'rundll32.exe' along with 'shell32.dll', 'shellexec_rundll', and 'powershell'. When these elements are detected together in the command line arguments, it serves as an indicator of an attempt to obfuscate PowerShell scripts via a rundll32 launcher. This detection mechanism hinges on PowerShell being launched in a way that is less straightforward to interpret, possibly to evade detection tools or for stealthier execution of potentially malicious scripts. It's vital to note that some legitimate applications may use similar command lines, leading to potential false positives, hence the importance of contextual evaluation of each incident flagged under this criterion. This detection falls under a medium alert level due to its association with techniques employed for stealthy executions and obfuscation, commonly linked with tactics such as execution and defense evasion.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'rundll32.exe'\n            - 'shell32.dll'\n            - 'shellexec_rundll'\n            - 'powershell'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Obfuscated Powershell via RUNDLL LAUNCHER",
      "answer": "In order to Detect Obfuscated Powershell via RUNDLL LAUNCHER, you should:\nMonitor Windows process creation logs for instances where the command line contains specific sequences indicative of an obfuscation tactic. It involves looking for the invocation of 'rundll32.exe' along with 'shell32.dll', 'shellexec_rundll', and 'powershell'. When these elements are detected together in the command line arguments, it serves as an indicator of an attempt to obfuscate PowerShell scripts via a rundll32 launcher. This detection mechanism hinges on PowerShell being launched in a way that is less straightforward to interpret, possibly to evade detection tools or for stealthier execution of potentially malicious scripts. It's vital to note that some legitimate applications may use similar command lines, leading to potential false positives, hence the importance of contextual evaluation of each incident flagged under this criterion. This detection falls under a medium alert level due to its association with techniques employed for stealthy executions and obfuscation, commonly linked with tactics such as execution and defense evasion."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    product: windows\n    category: dns_query\ndetection:\n    selection1:\n        QueryName|startswith:\n            - 'aaa.stage.'\n            - 'post.1'\n    selection2:\n        QueryName|contains: '.stage.123456.'\n    condition: 1 of selection*\nfalsepositives:\n    - Unknown\nfields:\n    - Image\n    - CommandLine\nlevel: critical\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect program that invoked suspicious DNS queries known from Cobalt Strike beacons\n\nHere is how  the given sigma rule operates: In order to detect a program that invoked suspicious DNS queries known from Cobalt Strike beacons, you should focus on monitoring DNS query logs from Windows systems. Specifically, you're looking for DNS queries that either start with 'aaa.stage.' or 'post.1', or contain '.stage.123456.' within the query name. Detection is based on identifying any one of these query patterns in the logs, signaling potential Cobalt Strike beacon activity. It's crucial to be attentive to these patterns as they are significant indicators of compromise, possibly related to tactics and techniques such as Command and Control. The critical fields that should be analyzed in this context are the Image and CommandLine fields, which can provide additional context about the source of the DNS queries. However, be aware of potential unknown false positives that might arise in detection. This monitoring approach is labeled as critical due to its significance in identifying malicious activity related to Cobalt Strike, a common tool used in cyber attacks for establishing command and control channels.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: dns_query\ndetection:\n    selection1:\n        QueryName|startswith:\n            - 'aaa.stage.'\n            - 'post.1'\n    selection2:\n        QueryName|contains: '.stage.123456.'\n    condition: 1 of selection*\nfalsepositives:\n    - Unknown\nfields:\n    - Image\n    - CommandLine\nlevel: critical\n",
      "question": "program that invoked suspicious DNS queries known from Cobalt Strike beacons",
      "answer": "In order to detect a program that invoked suspicious DNS queries known from Cobalt Strike beacons, you should focus on monitoring DNS query logs from Windows systems. Specifically, you're looking for DNS queries that either start with 'aaa.stage.' or 'post.1', or contain '.stage.123456.' within the query name. Detection is based on identifying any one of these query patterns in the logs, signaling potential Cobalt Strike beacon activity. It's crucial to be attentive to these patterns as they are significant indicators of compromise, possibly related to tactics and techniques such as Command and Control. The critical fields that should be analyzed in this context are the Image and CommandLine fields, which can provide additional context about the source of the DNS queries. However, be aware of potential unknown false positives that might arise in detection. This monitoring approach is labeled as critical due to its significance in identifying malicious activity related to Cobalt Strike, a common tool used in cyber attacks for establishing command and control channels."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|endswith: '\\Outlook\\LoadMacroProviderOnBoot'\n        Details|contains: '0x00000001'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect modification of Outlook setting \"LoadMacroProviderOnBoot\" which if enabled allows the automatic loading of any configured VBA project/module\n\nHere is how  the given sigma rule operates: In order to detect the modification of Outlook setting \"LoadMacroProviderOnBoot\" which if enabled allows the automatic loading of any configured VBA project/module, you should: Monitor Windows registry settings specifically within the category of registry modifications. Look out for the event where the ValueType is set (SetValue event type). The primary focus should be on changes made to the registry key that ends with '\\Outlook\\LoadMacroProviderOnBoot'. Additionally, be vigilant for settings where the Details attribute contains the hexadecimal value '0x00000001', indicating that the \"LoadMacroProviderOnBoot\" feature has been enabled. This specific configuration change is considered suspicious as it allows the automatic execution of VBA macros at Outlook startup, which can be a vector for malware or other malicious campaigns. It is classified with a high level of importance due to the potential for abuse in facilitating attacks. Whilst being watchful, it's significant to note that false positives are currently marked as unknown, indicating that while not expected, they could occur and should be factored into alert analyses. This monitoring is paramount in identifying and mitigating potential threats linked with tactics and techniques such as persistence, privilege escalation, and potentially others, depending on the context of the attack.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|endswith: '\\Outlook\\LoadMacroProviderOnBoot'\n        Details|contains: '0x00000001'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "modification of Outlook setting \"LoadMacroProviderOnBoot\" which if enabled allows the automatic loading of any configured VBA project/module",
      "answer": "In order to detect the modification of Outlook setting \"LoadMacroProviderOnBoot\" which if enabled allows the automatic loading of any configured VBA project/module, you should: Monitor Windows registry settings specifically within the category of registry modifications. Look out for the event where the ValueType is set (SetValue event type). The primary focus should be on changes made to the registry key that ends with '\\Outlook\\LoadMacroProviderOnBoot'. Additionally, be vigilant for settings where the Details attribute contains the hexadecimal value '0x00000001', indicating that the \"LoadMacroProviderOnBoot\" feature has been enabled. This specific configuration change is considered suspicious as it allows the automatic execution of VBA macros at Outlook startup, which can be a vector for malware or other malicious campaigns. It is classified with a high level of importance due to the potential for abuse in facilitating attacks. Whilst being watchful, it's significant to note that false positives are currently marked as unknown, indicating that while not expected, they could occur and should be factored into alert analyses. This monitoring is paramount in identifying and mitigating potential threats linked with tactics and techniques such as persistence, privilege escalation, and potentially others, depending on the context of the attack."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting when the macOS Script Editor utility spawns an unusual child process..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when the macOS Script Editor utility spawns an unusual child process, you should: monitor for instances where the Script Editor application initiates the execution of certain child processes that are not typically associated with its standard operation. Specifically, focus on detecting the creation of processes that end with common scripting and utility binaries such as '/curl', '/bash', '/sh', '/zsh', '/dash', '/fish', '/osascript', '/mktemp', '/chmod', '/php', '/nohup', '/openssl', '/plutil', '/PlistBuddy', '/xattr', '/sqlite', '/funzip', '/popen' or contain 'python' or 'perl'. These processes can indicate execution, persistence, defense evasion, and initial access methods often utilized by attackers to perform malicious activities on a macOS system. This approach is aimed at identifying techniques associated with the execution of scripts and commands, securing initial access through spearphishing links or attachments, and evading defenses, which are categorized under tactics like execution, persistence, defense evasion, and initial access in the MITRE ATT&CK framework.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: macos\ntags:\n    - attack.t1566\n    - attack.t1566.002\n    - attack.initial_access\n    - attack.t1059\n    - attack.t1059.002\n    - attack.t1204\n    - attack.t1204.001\n    - attack.execution\n    - attack.persistence\n    - attack.t1553\n    - attack.defense_evasion\ndetection:\n    selection_parent:\n        ParentImage|endswith: '/Script Editor'\n    selection_img:\n        - Image|endswith:\n            - '/curl'\n            - '/bash'\n            - '/sh'\n            - '/zsh'\n            - '/dash'\n            - '/fish'\n            - '/osascript'\n            - '/mktemp'\n            - '/chmod'\n            - '/php'\n            - '/nohup'\n            - '/openssl'\n            - '/plutil'\n            - '/PlistBuddy'\n            - '/xattr'\n            - '/sqlite'\n            - '/funzip'\n            - '/popen'\n        - Image|contains:\n            - 'python'\n            - 'perl'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: macos\ntags:\n    - attack.t1566\n    - attack.t1566.002\n    - attack.initial_access\n    - attack.t1059\n    - attack.t1059.002\n    - attack.t1204\n    - attack.t1204.001\n    - attack.execution\n    - attack.persistence\n    - attack.t1553\n    - attack.defense_evasion\ndetection:\n    selection_parent:\n        ParentImage|endswith: '/Script Editor'\n    selection_img:\n        - Image|endswith:\n            - '/curl'\n            - '/bash'\n            - '/sh'\n            - '/zsh'\n            - '/dash'\n            - '/fish'\n            - '/osascript'\n            - '/mktemp'\n            - '/chmod'\n            - '/php'\n            - '/nohup'\n            - '/openssl'\n            - '/plutil'\n            - '/PlistBuddy'\n            - '/xattr'\n            - '/sqlite'\n            - '/funzip'\n            - '/popen'\n        - Image|contains:\n            - 'python'\n            - 'perl'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium",
      "question": "when the macOS Script Editor utility spawns an unusual child process.",
      "answer": "In order to detect when the macOS Script Editor utility spawns an unusual child process, you should: monitor for instances where the Script Editor application initiates the execution of certain child processes that are not typically associated with its standard operation. Specifically, focus on detecting the creation of processes that end with common scripting and utility binaries such as '/curl', '/bash', '/sh', '/zsh', '/dash', '/fish', '/osascript', '/mktemp', '/chmod', '/php', '/nohup', '/openssl', '/plutil', '/PlistBuddy', '/xattr', '/sqlite', '/funzip', '/popen' or contain 'python' or 'perl'. These processes can indicate execution, persistence, defense evasion, and initial access methods often utilized by attackers to perform malicious activities on a macOS system. This approach is aimed at identifying techniques associated with the execution of scripts and commands, securing initial access through spearphishing links or attachments, and evading defenses, which are categorized under tactics like execution, persistence, defense evasion, and initial access in the MITRE ATT&CK framework."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    service: threat_management\n    product: m365\ndetection:\n    selection:\n        eventSource: SecurityComplianceCenter\n        Payload|contains|all:\n            - 'New-ComplianceSearchAction'\n            - 'Export'\n            - 'pst'\n    condition: selection\nfalsepositives:\n    - Exporting a PST can be done for legitimate purposes by legitimate sources, but due to the sensitive nature of PST content, it must be monitored.\nlevel: medium\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect Alert when a user has performed an export to a search using 'New-ComplianceSearchAction' with the '-Export' flag. This detection will detect PST export even if the 'eDiscovery search or exported' alert is disabled in the O365.This rule will apply to ExchangePowerShell usage and from the cloud.\n\nHere is how  the given sigma rule operates: In order to alert when a user has performed an export to a search using 'New-ComplianceSearchAction' with the '-Export' flag, especially noting that this detection will capture PST exports even if the 'eDiscovery search or exported' alert is turned off in O365, and it applies to both ExchangePowerShell usage and actions performed from the cloud, you should: Monitor for activities within the Microsoft 365 threat management service logs, specifically focusing on events originating from the SecurityComplianceCenter. Look for actions that involve the creation of a new compliance search action ('New-ComplianceSearchAction') specified with an '-Export' flag, which results in exporting content into a PST file format. This activity might signify potentially unauthorized data exports and needs surveillance despite the possibility of such actions being conducted for legitimate reasons. As exporting PST files involves accessing potentially sensitive information, such actions, while they could be legitimate, necessitate careful monitoring due to their sensitive nature.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    service: threat_management\n    product: m365\ndetection:\n    selection:\n        eventSource: SecurityComplianceCenter\n        Payload|contains|all:\n            - 'New-ComplianceSearchAction'\n            - 'Export'\n            - 'pst'\n    condition: selection\nfalsepositives:\n    - Exporting a PST can be done for legitimate purposes by legitimate sources, but due to the sensitive nature of PST content, it must be monitored.\nlevel: medium\n",
      "question": "Alert when a user has performed an export to a search using 'New-ComplianceSearchAction' with the '-Export' flag. This detection will detect PST export even if the 'eDiscovery search or exported' alert is disabled in the O365.This rule will apply to ExchangePowerShell usage and from the cloud.",
      "answer": "In order to alert when a user has performed an export to a search using 'New-ComplianceSearchAction' with the '-Export' flag, especially noting that this detection will capture PST exports even if the 'eDiscovery search or exported' alert is turned off in O365, and it applies to both ExchangePowerShell usage and actions performed from the cloud, you should: Monitor for activities within the Microsoft 365 threat management service logs, specifically focusing on events originating from the SecurityComplianceCenter. Look for actions that involve the creation of a new compliance search action ('New-ComplianceSearchAction') specified with an '-Export' flag, which results in exporting content into a PST file format. This activity might signify potentially unauthorized data exports and needs surveillance despite the possibility of such actions being conducted for legitimate reasons. As exporting PST files involves accessing potentially sensitive information, such actions, while they could be legitimate, necessitate careful monitoring due to their sensitive nature."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Identifies user account which has been locked because the user tried to sign in too many times with an incorrect user ID or password..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to identify a user account which has been locked because the user tried to sign in too many times with an incorrect user ID or password, you should monitor Azure signin logs for specific sign-in attempt outcomes. Pay attention to logs that show a ResultType of 50053. This specific ResultType indicates that a user account has been locked due to multiple failed sign-in attempts. Such behavior could be indicative of an attempted attack where an adversary is trying to guess or brute-force a user\u2019s password. Monitoring for this activity is crucial for detecting and responding to potential security incidents related to account lockout policies. It\u2019s important to note that there may be instances where these detections could trigger on benign activities; however, the security event's level is considered medium, suggesting a balanced approach to investigating these alerts.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: azure\n    service: signinlogs\ndetection:\n    selection:\n        ResultType: 50053\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: azure\n    service: signinlogs\ndetection:\n    selection:\n        ResultType: 50053\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Identifies user account which has been locked because the user tried to sign in too many times with an incorrect user ID or password.",
      "answer": "In order to identify a user account which has been locked because the user tried to sign in too many times with an incorrect user ID or password, you should monitor Azure signin logs for specific sign-in attempt outcomes. Pay attention to logs that show a ResultType of 50053. This specific ResultType indicates that a user account has been locked due to multiple failed sign-in attempts. Such behavior could be indicative of an attempted attack where an adversary is trying to guess or brute-force a user\u2019s password. Monitoring for this activity is crucial for detecting and responding to potential security incidents related to account lockout policies. It\u2019s important to note that there may be instances where these detections could trigger on benign activities; however, the security event's level is considered medium, suggesting a balanced approach to investigating these alerts."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting updates to Sysmon's configuration. Attackers might update or replace the Sysmon configuration with a bare bone one to avoid monitoring without shutting down the service completely.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect updates to Sysmon's configuration, which attackers might use to sneakily avoid monitoring by updating or replacing Sysmon's configuration with a minimal one without entirely shutting down the service, you should monitor Windows process creation logs for specific activities. Look out for processes named \"Sysmon64.exe\" or \"Sysmon.exe\" that are being initiated, especially those described as a \"System activity monitor\". Pay close attention to command lines that contain '-c' or '/c', as these are commonly used to change Sysmon's configuration. Be aware that legitimate administrators may also use these commands to update Sysmon's configuration, so not all detections will indicate a malicious activity. However, given the context of an unusual or unscheduled Sysmon configuration change, it's worth investigating such events with a medium level of concern, keeping in mind potential false positives.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_pe:\n        - Image|endswith:\n            - \\Sysmon64.exe\n            - \\Sysmon.exe\n        - Description: 'System activity monitor'\n    selection_cli:\n        CommandLine|contains:\n            - '-c'\n            - '/c'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate administrators might use this command to update Sysmon configuration.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_pe:\n        - Image|endswith:\n            - \\Sysmon64.exe\n            - \\Sysmon.exe\n        - Description: 'System activity monitor'\n    selection_cli:\n        CommandLine|contains:\n            - '-c'\n            - '/c'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate administrators might use this command to update Sysmon configuration.\nlevel: medium\n",
      "question": "updates to Sysmon's configuration. Attackers might update or replace the Sysmon configuration with a bare bone one to avoid monitoring without shutting down the service completely",
      "answer": "In order to detect updates to Sysmon's configuration, which attackers might use to sneakily avoid monitoring by updating or replacing Sysmon's configuration with a minimal one without entirely shutting down the service, you should monitor Windows process creation logs for specific activities. Look out for processes named \"Sysmon64.exe\" or \"Sysmon.exe\" that are being initiated, especially those described as a \"System activity monitor\". Pay close attention to command lines that contain '-c' or '/c', as these are commonly used to change Sysmon's configuration. Be aware that legitimate administrators may also use these commands to update Sysmon's configuration, so not all detections will indicate a malicious activity. However, given the context of an unusual or unscheduled Sysmon configuration change, it's worth investigating such events with a medium level of concern, keeping in mind potential false positives."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Offensive tradecraft is switching away from using APIs like \"CreateRemoteThread\", however, this is still largely observed in the wild.\nThis rule aims to detect suspicious processes (those we would not expect to behave in this way like winword.exe or outlook.exe) creating remote threads on other processes.\nIt is a generalistic rule, but it should have a low FP ratio due to the selected range of processes.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious processes creating remote threads on other processes, which is an observed tactic despite the shift away from using APIs like \"CreateRemoteThread\", you should: Monitor for events where a process initiates the creation of a remote thread into specific target processes, namely 'spoolsv.exe' or 'notepad.exe', which are generally not expected to behave in such a manner. This detection focuses on Windows environments, specifically watching the creation of remote threads, which can be indicative of malicious activity like code injection or execution of unauthorized commands in benign processes. It is crucial to exclude events where the source of the remote thread creation is from 'csrss.exe', or any process labeled as an 'unknown process', as well as to ignore threads starting with the function 'EtwpNotificationThread' to reduce false positive rates. Relevant information to be collected and analyzed includes the computer name, user account, source process image, and target process image involved in these events. This approach is designed to identify potential malicious activities with a medium level of confidence, capturing attempts to misuse system processes for executing unauthorized code or commands, typically associated with tactics and techniques like Persistence, Privilege Escalation, and Defense Evasion.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: create_remote_thread\ndetection:\n    selection:\n        TargetImage|endswith:\n            - '\\spoolsv.exe'\n            - '\\notepad.exe'\n    filter:\n        - SourceImage|endswith: '\\csrss.exe'\n        - SourceImage|contains: 'unknown process'\n        - StartFunction: 'EtwpNotificationThread'\n    condition: selection and not filter\nfields:\n    - ComputerName\n    - User\n    - SourceImage\n    - TargetImage\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: create_remote_thread\ndetection:\n    selection:\n        TargetImage|endswith:\n            - '\\spoolsv.exe'\n            - '\\notepad.exe'\n    filter:\n        - SourceImage|endswith: '\\csrss.exe'\n        - SourceImage|contains: 'unknown process'\n        - StartFunction: 'EtwpNotificationThread'\n    condition: selection and not filter\nfields:\n    - ComputerName\n    - User\n    - SourceImage\n    - TargetImage\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Offensive tradecraft is switching away from using APIs like \"CreateRemoteThread\", however, this is still largely observed in the wild.\nThis rule aims to detect suspicious processes (those we would not expect to behave in this way like winword.exe or outlook.exe) creating remote threads on other processes.\nIt is a generalistic rule, but it should have a low FP ratio due to the selected range of processes.\n",
      "answer": "In order to detect suspicious processes creating remote threads on other processes, which is an observed tactic despite the shift away from using APIs like \"CreateRemoteThread\", you should: Monitor for events where a process initiates the creation of a remote thread into specific target processes, namely 'spoolsv.exe' or 'notepad.exe', which are generally not expected to behave in such a manner. This detection focuses on Windows environments, specifically watching the creation of remote threads, which can be indicative of malicious activity like code injection or execution of unauthorized commands in benign processes. It is crucial to exclude events where the source of the remote thread creation is from 'csrss.exe', or any process labeled as an 'unknown process', as well as to ignore threads starting with the function 'EtwpNotificationThread' to reduce false positive rates. Relevant information to be collected and analyzed includes the computer name, user account, source process image, and target process image involved in these events. This approach is designed to identify potential malicious activities with a medium level of confidence, capturing attempts to misuse system processes for executing unauthorized code or commands, typically associated with tactics and techniques like Persistence, Privilege Escalation, and Defense Evasion."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Commandlet names from ShellIntel exploitation scripts..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect Commandlet names from ShellIntel exploitation scripts, you should: focus on monitoring Windows PowerShell scripts, ensuring that Script Block Logging is enabled to capture the necessary data. Specifically, lookout for the presence of any of the following commandlet names within the script blocks: 'Invoke-SMBAutoBrute', 'Invoke-GPOLinks', and 'Invoke-Potato'. These particular commandlets indicate a high likelihood of malicious activity related to exploitation techniques. It's important to understand that these detections are highly indicative of compromise or attack attempts, although false positives are considered unknown. This highlights the necessity for immediate investigation upon detection to mitigate potential threats effectively.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains:\n            - 'Invoke-SMBAutoBrute'\n            - 'Invoke-GPOLinks'\n            #- 'Out-Minidump' # Covered in 89819aa4-bbd6-46bc-88ec-c7f7fe30efa6\n            - 'Invoke-Potato'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains:\n            - 'Invoke-SMBAutoBrute'\n            - 'Invoke-GPOLinks'\n            #- 'Out-Minidump' # Covered in 89819aa4-bbd6-46bc-88ec-c7f7fe30efa6\n            - 'Invoke-Potato'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Commandlet names from ShellIntel exploitation scripts.",
      "answer": "In order to detect Commandlet names from ShellIntel exploitation scripts, you should: focus on monitoring Windows PowerShell scripts, ensuring that Script Block Logging is enabled to capture the necessary data. Specifically, lookout for the presence of any of the following commandlet names within the script blocks: 'Invoke-SMBAutoBrute', 'Invoke-GPOLinks', and 'Invoke-Potato'. These particular commandlets indicate a high likelihood of malicious activity related to exploitation techniques. It's important to understand that these detections are highly indicative of compromise or attack attempts, although false positives are considered unknown. This highlights the necessity for immediate investigation upon detection to mitigate potential threats effectively."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting regedit started with TrustedInstaller privileges or by ProcessHacker.exe.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a regedit started with TrustedInstaller privileges or by ProcessHacker.exe, you should: Monitor Windows process creation logs for instances where the registry editor (regedit.exe) is started. Specifically, look for situations where regedit.exe is launched either with privileges associated with the TrustedInstaller account or as a child process of ProcessHacker.exe. This activity is uncommon in regular operations and is therefore flagged with a high level of concern. It's essential to keep an eye on such actions as they could indicate attempts to manipulate or compromise system settings or security policies, which are critical components of maintaining system integrity and security.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\regedit.exe'\n        ParentImage|endswith:\n            - '\\TrustedInstaller.exe'\n            - '\\ProcessHacker.exe'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\regedit.exe'\n        ParentImage|endswith:\n            - '\\TrustedInstaller.exe'\n            - '\\ProcessHacker.exe'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "regedit started with TrustedInstaller privileges or by ProcessHacker.exe",
      "answer": "In order to detect a regedit started with TrustedInstaller privileges or by ProcessHacker.exe, you should: Monitor Windows process creation logs for instances where the registry editor (regedit.exe) is started. Specifically, look for situations where regedit.exe is launched either with privileges associated with the TrustedInstaller account or as a child process of ProcessHacker.exe. This activity is uncommon in regular operations and is therefore flagged with a high level of concern. It's essential to keep an eye on such actions as they could indicate attempts to manipulate or compromise system settings or security policies, which are critical components of maintaining system integrity and security."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith:\n            - '\\csi.exe'\n            - '\\rcsi.exe'\n        - OriginalFileName:\n            - 'csi.exe'\n            - 'rcsi.exe'\n    selection_cli:\n        Company: 'Microsoft Corporation'\n    condition: all of selection*\nfields:\n    - ComputerName\n    - User\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Legitimate usage by software developers\nlevel: medium\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect Csi.exe is a signed binary from Microsoft that comes with Visual Studio and provides C# interactive capabilities. It can be used to run C# code from a file passed as a parameter in command line. Early version of this utility provided with Microsoft \u201cRoslyn\u201d Community Technology Preview was named 'rcsi.exe'\n\nHere is how  the given sigma rule operates: In order to detect potential abuse of the 'csi.exe' and 'rcsi.exe' binaries which are legitimate Microsoft-signed executables from Visual Studio and are intended for running C# code interactively, often through the command line, you should:\n\nMonitor for the creation of processes that are named 'csi.exe' or 'rcsi.exe'. This can be identified when the executable image ends with these specific names or when the original file name matches 'csi.exe' or 'rcsi.exe'. Additionally, any command-line invocation of these executables coming from an entity identified as 'Microsoft Corporation' should be closely scrutinized. It's essential to capture key details such as the computer name, user account, full command line used to launch the process, and the parent command line if available. This allows for a comprehensive understanding of the context surrounding potential misuse. However, it\u2019s important to note that these utilities might be legitimately used by software developers; thus, some alerts might represent false positives. The monitoring approach should consider the balance between detecting malicious activity and minimizing interruptions to legitimate software development practices. These checks mainly focus on the tactics and techniques related to the execution phase of an attack, specifically monitoring the execution of Windows processes that could potentially be abused by attackers.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith:\n            - '\\csi.exe'\n            - '\\rcsi.exe'\n        - OriginalFileName:\n            - 'csi.exe'\n            - 'rcsi.exe'\n    selection_cli:\n        Company: 'Microsoft Corporation'\n    condition: all of selection*\nfields:\n    - ComputerName\n    - User\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Legitimate usage by software developers\nlevel: medium\n",
      "question": "Csi.exe is a signed binary from Microsoft that comes with Visual Studio and provides C# interactive capabilities. It can be used to run C# code from a file passed as a parameter in command line. Early version of this utility provided with Microsoft \u201cRoslyn\u201d Community Technology Preview was named 'rcsi.exe'",
      "answer": "In order to detect potential abuse of the 'csi.exe' and 'rcsi.exe' binaries which are legitimate Microsoft-signed executables from Visual Studio and are intended for running C# code interactively, often through the command line, you should:\n\nMonitor for the creation of processes that are named 'csi.exe' or 'rcsi.exe'. This can be identified when the executable image ends with these specific names or when the original file name matches 'csi.exe' or 'rcsi.exe'. Additionally, any command-line invocation of these executables coming from an entity identified as 'Microsoft Corporation' should be closely scrutinized. It's essential to capture key details such as the computer name, user account, full command line used to launch the process, and the parent command line if available. This allows for a comprehensive understanding of the context surrounding potential misuse. However, it\u2019s important to note that these utilities might be legitimately used by software developers; thus, some alerts might represent false positives. The monitoring approach should consider the balance between detecting malicious activity and minimizing interruptions to legitimate software development practices. These checks mainly focus on the tactics and techniques related to the execution phase of an attack, specifically monitoring the execution of Windows processes that could potentially be abused by attackers."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting This the exploitation of a NTFS vulnerability as reported without many details via Twitter.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the exploitation of a NTFS vulnerability as reported without many details via Twitter, you should: monitor Windows system logs, specifically looking for entries associated with the NTFS file system provider. Focus on events with an EventID of 55, which indicate an issue within the file system, originating from the 'File System Driver'. Be especially alert for descriptions that mention the filesystem contains a corrupted file record, specifically when the description also points out that the name of the file is \"\\\". Such events are unusual and, due to their specificity, false positives are unlikely. As this behavior may signify an attempt to exploit a known vulnerability in the NTFS file system, it's critical to investigate these alerts promptly. The severity of this detection is considered high due to the potential impact of exploiting NTFS vulnerabilities, highlighting the importance of swift response measures to mitigate possible security incidents.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: system\ndetection:\n    selection:\n        Provider_Name: Ntfs\n        EventID: 55\n        Origin: 'File System Driver'\n        Description|contains|all:\n            - 'contains a corrupted file record'\n            - 'The name of the file is \"\\\"'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: system\ndetection:\n    selection:\n        Provider_Name: Ntfs\n        EventID: 55\n        Origin: 'File System Driver'\n        Description|contains|all:\n            - 'contains a corrupted file record'\n            - 'The name of the file is \"\\\"'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "This the exploitation of a NTFS vulnerability as reported without many details via Twitter",
      "answer": "In order to detect the exploitation of a NTFS vulnerability as reported without many details via Twitter, you should: monitor Windows system logs, specifically looking for entries associated with the NTFS file system provider. Focus on events with an EventID of 55, which indicate an issue within the file system, originating from the 'File System Driver'. Be especially alert for descriptions that mention the filesystem contains a corrupted file record, specifically when the description also points out that the name of the file is \"\\\". Such events are unusual and, due to their specificity, false positives are unlikely. As this behavior may signify an attempt to exploit a known vulnerability in the NTFS file system, it's critical to investigate these alerts promptly. The severity of this detection is considered high due to the potential impact of exploiting NTFS vulnerabilities, highlighting the importance of swift response measures to mitigate possible security incidents."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of a renamed PsExec often used by attackers or malware.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the execution of a renamed PsExec often used by attackers or malware, you should monitor for process creation events on Windows systems. Look for descriptions indicating the remote execution of processes, particularly those associated with the Sysinternals PsExec product. However, it's crucial to exclude events where the image path ends with '\\PsExec.exe' or '\\PsExec64.exe' as these indicate legitimate PsExec usage. The focus should be on instances where PsExec may have been renamed, as this can be a sign of malicious activity. Be aware that there might be false positives, such as software that integrates PsExec in a renamed form without malicious intent, or administrators who have renamed PsExec for reasons unknown. This detection is rated at a high level of importance due to the potential for abuse by attackers leveraging renamed instances of PsExec to conduct their operations covertly.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        Description: 'Execute processes remotely'\n        Product: 'Sysinternals PsExec'\n    filter:\n        Image|endswith:\n            - '\\PsExec.exe'\n            - '\\PsExec64.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Software that illegaly integrates PsExec in a renamed form\n    - Administrators that have renamed PsExec and no one knows why\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        Description: 'Execute processes remotely'\n        Product: 'Sysinternals PsExec'\n    filter:\n        Image|endswith:\n            - '\\PsExec.exe'\n            - '\\PsExec64.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Software that illegaly integrates PsExec in a renamed form\n    - Administrators that have renamed PsExec and no one knows why\nlevel: high\n",
      "question": "execution of a renamed PsExec often used by attackers or malware",
      "answer": "In order to detect the execution of a renamed PsExec often used by attackers or malware, you should monitor for process creation events on Windows systems. Look for descriptions indicating the remote execution of processes, particularly those associated with the Sysinternals PsExec product. However, it's crucial to exclude events where the image path ends with '\\PsExec.exe' or '\\PsExec64.exe' as these indicate legitimate PsExec usage. The focus should be on instances where PsExec may have been renamed, as this can be a sign of malicious activity. Be aware that there might be false positives, such as software that integrates PsExec in a renamed form without malicious intent, or administrators who have renamed PsExec for reasons unknown. This detection is rated at a high level of importance due to the potential for abuse by attackers leveraging renamed instances of PsExec to conduct their operations covertly."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Obfuscated Powershell via use Rundll32 in Scripts.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect obfuscated PowerShell via use of Rundll32 in scripts, you should monitor PowerShell script activities within a Windows environment, specifically looking for script execution that involves certain characteristics indicative of suspicious behavior. This requires that Script Block Logging is enabled on the system to accurately capture and analyze PowerShell script blocks.\n\nSpecifically, look for script block texts that contain all of the following elements: '&&', 'rundll32', 'shell32.dll', and 'shellexec_rundll'. Additionally, keep an eye out for script block texts that include any of these elements: 'value', 'invoke', 'comspec', or 'iex'. The presence of these strings within a script block is indicative of an attempt to execute commands or scripts in a manner that is commonly associated with obfuscation techniques, often aiming to bypass security measures by leveraging the 'rundll32' command alongside PowerShell.\n\nThese detection criteria are deemed to be of high importance due to the potential for these actions to be part of malicious activities, such as executing malware or facilitating unauthorized access to systems. However, it is important to be aware of potential unknown false positives, as there may be legitimate use cases that exhibit similar characteristics to these detection patterns.\n\nThe activity aligns with tactics and techniques that typically involve the Execution phase within the MITRE ATT&CK framework, especially where PowerShell is utilized for command and script execution in combination with the use of 'rundll32' to execute binary code. Monitoring for these specific script block texts serves as a crucial step in identifying and mitigating potential threats that leverage obfuscated PowerShell scripts for malicious purposes.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection_4104:\n        ScriptBlockText|contains|all:\n            - '&&'\n            - 'rundll32'\n            - 'shell32.dll'\n            - 'shellexec_rundll'\n        ScriptBlockText|contains:\n            - 'value'\n            - 'invoke'\n            - 'comspec'\n            - 'iex'\n    condition: selection_4104\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection_4104:\n        ScriptBlockText|contains|all:\n            - '&&'\n            - 'rundll32'\n            - 'shell32.dll'\n            - 'shellexec_rundll'\n        ScriptBlockText|contains:\n            - 'value'\n            - 'invoke'\n            - 'comspec'\n            - 'iex'\n    condition: selection_4104\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Obfuscated Powershell via use Rundll32 in Scripts",
      "answer": "In order to detect obfuscated PowerShell via use of Rundll32 in scripts, you should monitor PowerShell script activities within a Windows environment, specifically looking for script execution that involves certain characteristics indicative of suspicious behavior. This requires that Script Block Logging is enabled on the system to accurately capture and analyze PowerShell script blocks.\n\nSpecifically, look for script block texts that contain all of the following elements: '&&', 'rundll32', 'shell32.dll', and 'shellexec_rundll'. Additionally, keep an eye out for script block texts that include any of these elements: 'value', 'invoke', 'comspec', or 'iex'. The presence of these strings within a script block is indicative of an attempt to execute commands or scripts in a manner that is commonly associated with obfuscation techniques, often aiming to bypass security measures by leveraging the 'rundll32' command alongside PowerShell.\n\nThese detection criteria are deemed to be of high importance due to the potential for these actions to be part of malicious activities, such as executing malware or facilitating unauthorized access to systems. However, it is important to be aware of potential unknown false positives, as there may be legitimate use cases that exhibit similar characteristics to these detection patterns.\n\nThe activity aligns with tactics and techniques that typically involve the Execution phase within the MITRE ATT&CK framework, especially where PowerShell is utilized for command and script execution in combination with the use of 'rundll32' to execute binary code. Monitoring for these specific script block texts serves as a crucial step in identifying and mitigating potential threats that leverage obfuscated PowerShell scripts for malicious purposes."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|contains: '.zip\\'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect Payloads may be compressed, archived, or encrypted in order to avoid detection\n\nHere is how  the given sigma rule operates: In order to detect payloads that may be compressed, archived, or encrypted to avoid detection, you should focus on monitoring process creation events within Windows environments. Specifically, look for processes that are initiated from within .zip files, as indicated by their image paths containing '.zip\\'. This approach helps in identifying potentially malicious activity where adversaries compress, archive, or encrypt payloads to evade security measures. It's essential to remain vigilant for such processes, although it's also important to note that there might be instances where such activity is legitimate and does not signify a security threat. The detection sensitivity is considered medium, indicating a balanced approach between minimizing false positives and ensuring effective detection of suspicious activities.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|contains: '.zip\\'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Payloads may be compressed, archived, or encrypted in order to avoid detection",
      "answer": "In order to detect payloads that may be compressed, archived, or encrypted to avoid detection, you should focus on monitoring process creation events within Windows environments. Specifically, look for processes that are initiated from within .zip files, as indicated by their image paths containing '.zip\\'. This approach helps in identifying potentially malicious activity where adversaries compress, archive, or encrypt payloads to evade security measures. It's essential to remain vigilant for such processes, although it's also important to note that there might be instances where such activity is legitimate and does not signify a security threat. The detection sensitivity is considered medium, indicating a balanced approach between minimizing false positives and ensuring effective detection of suspicious activities."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    product: windows\n    service: diagnosis-scripted\ndetection:\n    selection:\n        EventID: 101\n        PackagePath|contains: '\\\\\\\\' # Example would be: \\\\webdav-test.herokuapp.com@ssl\\DavWWWRoot\\package\n    condition: selection\nfalsepositives:\n    - Legitimate package hosted on a known and authorized remote location\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect loading of diagcab packages from a remote path, as seen in DogWalk vulnerability\n\nHere is how  the given sigma rule operates: In order to detect loading of diagcab packages from a remote path, as seen in DogWalk vulnerability, you should focus on monitoring diagnosis-scripted services on Windows systems. Specifically, you should look for event ID 101, which may indicate an attempt to load a diagcab package. A critical sign of a potential attack involves the PackagePath field containing double backslashes, suggesting a remote path is being used, such as in cases where the path looks similar to '\\\\webdav-test.herokuapp.com@ssl\\DavWWWRoot\\package'. This pattern is a strong indicator of a potential exploitation attempt, given that diagcab packages should not typically be loaded from remote locations in a secure environment.\n\nHowever, it is important to note that not all instances flagged by these criteria are malicious. Legitimate scenarios may include packages hosted on known and authorized remote locations. Therefore, while the detection level is high, indicating a serious concern, careful analysis and verification of the context in which these diagcab packages are being loaded from remote paths are essential to reduce the risk of false positives.\n\nThis analysis connects to various tactics and techniques, emphasizing the importance of vigilance in monitoring and controlling diagnostic scripts and remote package loading activities as part of a comprehensive cybersecurity strategy.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: diagnosis-scripted\ndetection:\n    selection:\n        EventID: 101\n        PackagePath|contains: '\\\\\\\\' # Example would be: \\\\webdav-test.herokuapp.com@ssl\\DavWWWRoot\\package\n    condition: selection\nfalsepositives:\n    - Legitimate package hosted on a known and authorized remote location\nlevel: high\n",
      "question": "loading of diagcab packages from a remote path, as seen in DogWalk vulnerability",
      "answer": "In order to detect loading of diagcab packages from a remote path, as seen in DogWalk vulnerability, you should focus on monitoring diagnosis-scripted services on Windows systems. Specifically, you should look for event ID 101, which may indicate an attempt to load a diagcab package. A critical sign of a potential attack involves the PackagePath field containing double backslashes, suggesting a remote path is being used, such as in cases where the path looks similar to '\\\\webdav-test.herokuapp.com@ssl\\DavWWWRoot\\package'. This pattern is a strong indicator of a potential exploitation attempt, given that diagcab packages should not typically be loaded from remote locations in a secure environment.\n\nHowever, it is important to note that not all instances flagged by these criteria are malicious. Legitimate scenarios may include packages hosted on known and authorized remote locations. Therefore, while the detection level is high, indicating a serious concern, careful analysis and verification of the context in which these diagcab packages are being loaded from remote paths are essential to reduce the risk of false positives.\n\nThis analysis connects to various tactics and techniques, emphasizing the importance of vigilance in monitoring and controlling diagnostic scripts and remote package loading activities as part of a comprehensive cybersecurity strategy."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of certutil with certain flags that allow the utility to download files from file-sharing websites..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the execution of certutil with certain flags that allow the utility to download files from file-sharing websites, you should: Monitor for the creation of processes associated with the Windows operating system. Specifically, keep an eye out for processes that are either named 'certutil.exe' or have the original filename 'CertUtil.exe'. Furthermore, examine the command line arguments of these processes for indicators that certutil is being used with flags pertaining to 'urlcache' or 'verifyctl', which are commonly employed to download or verify files. Moreover, it's critical to scrutinize the command line for URLs that point to a variety of file-sharing websites known for their use in distributing malicious content. These websites include, but are not limited to, ghostbin, hastebin, paste.ee, anonfiles, Discord\u2019s CDN, ddns.net, GitHub gists, mediafire, mega.nz, pastebin, and several others. The presence of any of these elements in the process creation logs for Windows machines signals a high probability of an attempt to misuse certutil for downloading potentially harmful files, warranting further investigation.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\certutil.exe'\n        - OriginalFileName: 'CertUtil.exe'\n    selection_flags:\n        CommandLine|contains:\n            - 'urlcache '\n            - 'verifyctl '\n    selection_http:\n        CommandLine|contains:\n            - '.ghostbin.co/'\n            - '.hastebin.com'\n            - '.paste.ee'\n            - 'anonfiles.com'\n            - 'cdn.discordapp.com/attachments/'\n            - 'ddns.net'\n            - 'gist.githubusercontent.com'\n            - 'mediafire.com'\n            - 'mega.nz'\n            - 'paste.ee'\n            - 'pastebin.com'\n            - 'pastebin.pl'\n            - 'pastetext.net'\n            - 'privatlab.com'\n            - 'privatlab.net'\n            - 'raw.githubusercontent.com'\n            - 'send.exploit.in'\n            - 'sendspace.com'\n            - 'storage.googleapis.com'\n            - 'transfer.sh'\n            - 'ufile.io'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\certutil.exe'\n        - OriginalFileName: 'CertUtil.exe'\n    selection_flags:\n        CommandLine|contains:\n            - 'urlcache '\n            - 'verifyctl '\n    selection_http:\n        CommandLine|contains:\n            - '.ghostbin.co/'\n            - '.hastebin.com'\n            - '.paste.ee'\n            - 'anonfiles.com'\n            - 'cdn.discordapp.com/attachments/'\n            - 'ddns.net'\n            - 'gist.githubusercontent.com'\n            - 'mediafire.com'\n            - 'mega.nz'\n            - 'paste.ee'\n            - 'pastebin.com'\n            - 'pastebin.pl'\n            - 'pastetext.net'\n            - 'privatlab.com'\n            - 'privatlab.net'\n            - 'raw.githubusercontent.com'\n            - 'send.exploit.in'\n            - 'sendspace.com'\n            - 'storage.googleapis.com'\n            - 'transfer.sh'\n            - 'ufile.io'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "execution of certutil with certain flags that allow the utility to download files from file-sharing websites.",
      "answer": "In order to detect the execution of certutil with certain flags that allow the utility to download files from file-sharing websites, you should: Monitor for the creation of processes associated with the Windows operating system. Specifically, keep an eye out for processes that are either named 'certutil.exe' or have the original filename 'CertUtil.exe'. Furthermore, examine the command line arguments of these processes for indicators that certutil is being used with flags pertaining to 'urlcache' or 'verifyctl', which are commonly employed to download or verify files. Moreover, it's critical to scrutinize the command line for URLs that point to a variety of file-sharing websites known for their use in distributing malicious content. These websites include, but are not limited to, ghostbin, hastebin, paste.ee, anonfiles, Discord\u2019s CDN, ddns.net, GitHub gists, mediafire, mega.nz, pastebin, and several others. The presence of any of these elements in the process creation logs for Windows machines signals a high probability of an attempt to misuse certutil for downloading potentially harmful files, warranting further investigation."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    product: windows\n    category: image_load\ndetection:\n    selection:\n        Description: 'System.Management.Automation'\n        ImageLoaded|contains: 'System.Management.Automation'\n    filter_generic:\n        - Image|endswith:\n            - '\\powershell.exe'\n            - '\\mscorsvw.exe'\n        - Image|startswith:\n            - 'C:\\Program Files (x86)\\Microsoft Visual Studio\\'\n            - 'C:\\Program Files\\Microsoft Visual Studio\\'\n            - 'C:\\Windows\\System32\\'\n            - 'C:\\Program Files\\Citrix\\ConfigSync\\'\n        - Image: 'C:\\Program Files\\PowerShell\\7\\pwsh.exe'\n    filter_aurora:\n        # This filter is to avoid a race condition FP with this specific ETW provider in aurora\n        Image: null\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: low\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect alternate PowerShell hosts potentially bypassing detections looking for powershell.exe\n\nHere is how  the given sigma rule operates: In order to detect alternate PowerShell hosts potentially bypassing detections looking for powershell.exe, you should focus on monitoring Windows systems for specific instances where images are loaded that contain the \"System.Management.Automation\" description or where the image loaded includes \"System.Management.Automation\". This approach aims to identify potential use of alternate PowerShell environments or hosts that might not be directly associated with the default PowerShell executable, `powershell.exe`, thereby bypassing traditional security detections that solely target the known PowerShell binary pathnames.\n\nTo refine the detection and reduce false positives, certain exclusions are applied: images ending with '\\powershell.exe' or '\\mscorsvw.exe', starting with 'C:\\Program Files (x86)\\Microsoft Visual Studio\\', 'C:\\Program Files\\Microsoft Visual Studio\\', 'C:\\Windows\\System32\\', or 'C:\\Program Files\\Citrix\\ConfigSync\\', and the specific path 'C:\\Program Files\\PowerShell\\7\\pwsh.exe' are excluded. These exclusions help in filtering out legitimate uses of PowerShell and related processes that are not part of the attack scenario, ensuring that the focus remains on unconventional or less monitored means of executing PowerShell commands.\n\nThis detection strategy is essential in identifying and mitigating scenarios where attackers might exploit the versatility of PowerShell within Windows environments for malicious purposes, such as executing scripts, managing system configurations, or even exfiltrating data, without triggering traditional PowerShell execution alerts. This approach underscores the necessity of employing comprehensive monitoring strategies that go beyond traditional signatures and involves the scrutiny of loaded images that might be indicative of alternative PowerShell usage.\n\nMitigation and detection efforts should be complementarily enhanced by understanding that such tactics might be leveraged in broader attack campaigns, involving techniques such as Defense Evasion, which this specific detection attempts to uncover by spotting less evident means of leveraging PowerShell capabilities within compromised systems.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: image_load\ndetection:\n    selection:\n        Description: 'System.Management.Automation'\n        ImageLoaded|contains: 'System.Management.Automation'\n    filter_generic:\n        - Image|endswith:\n            - '\\powershell.exe'\n            - '\\mscorsvw.exe'\n        - Image|startswith:\n            - 'C:\\Program Files (x86)\\Microsoft Visual Studio\\'\n            - 'C:\\Program Files\\Microsoft Visual Studio\\'\n            - 'C:\\Windows\\System32\\'\n            - 'C:\\Program Files\\Citrix\\ConfigSync\\'\n        - Image: 'C:\\Program Files\\PowerShell\\7\\pwsh.exe'\n    filter_aurora:\n        # This filter is to avoid a race condition FP with this specific ETW provider in aurora\n        Image: null\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: low\n",
      "question": "alternate PowerShell hosts potentially bypassing detections looking for powershell.exe",
      "answer": "In order to detect alternate PowerShell hosts potentially bypassing detections looking for powershell.exe, you should focus on monitoring Windows systems for specific instances where images are loaded that contain the \"System.Management.Automation\" description or where the image loaded includes \"System.Management.Automation\". This approach aims to identify potential use of alternate PowerShell environments or hosts that might not be directly associated with the default PowerShell executable, `powershell.exe`, thereby bypassing traditional security detections that solely target the known PowerShell binary pathnames.\n\nTo refine the detection and reduce false positives, certain exclusions are applied: images ending with '\\powershell.exe' or '\\mscorsvw.exe', starting with 'C:\\Program Files (x86)\\Microsoft Visual Studio\\', 'C:\\Program Files\\Microsoft Visual Studio\\', 'C:\\Windows\\System32\\', or 'C:\\Program Files\\Citrix\\ConfigSync\\', and the specific path 'C:\\Program Files\\PowerShell\\7\\pwsh.exe' are excluded. These exclusions help in filtering out legitimate uses of PowerShell and related processes that are not part of the attack scenario, ensuring that the focus remains on unconventional or less monitored means of executing PowerShell commands.\n\nThis detection strategy is essential in identifying and mitigating scenarios where attackers might exploit the versatility of PowerShell within Windows environments for malicious purposes, such as executing scripts, managing system configurations, or even exfiltrating data, without triggering traditional PowerShell execution alerts. This approach underscores the necessity of employing comprehensive monitoring strategies that go beyond traditional signatures and involves the scrutiny of loaded images that might be indicative of alternative PowerShell usage.\n\nMitigation and detection efforts should be complementarily enhanced by understanding that such tactics might be leveraged in broader attack campaigns, involving techniques such as Defense Evasion, which this specific detection attempts to uncover by spotting less evident means of leveraging PowerShell capabilities within compromised systems."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting configuration change is made to an applications AppID URI..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when a configuration change is made to an application's AppID URI, you should: Monitor Azure audit logs for specific events indicating that an \"Update Application\" or \"Update Service principal\" action has occurred. These activities are significant because they might reflect changes to the unique identifier (AppID URI) associated with Azure applications. Such modifications could signify unauthorized or malicious adjustments, aiming to exploit or alter the application's behavior. It's crucial, however, to consider legitimate updates by administrators as potential false positives. These are typically planned events where changes to the AppID URI are necessary for valid reasons. The detection of these actions is classified at a high level of importance due to the sensitive nature of the modification's potential impact on application security and functionality.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: azure\n    service: auditlogs\ndetection:\n    selection:\n        properties.message:\n            - Update Application\n            - Update Service principal\n    condition: selection\nfalsepositives:\n    - When and administrator is making legitimate AppID URI configuration changes to an application. This should be a planned event.\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: azure\n    service: auditlogs\ndetection:\n    selection:\n        properties.message:\n            - Update Application\n            - Update Service principal\n    condition: selection\nfalsepositives:\n    - When and administrator is making legitimate AppID URI configuration changes to an application. This should be a planned event.\nlevel: high\n",
      "question": "configuration change is made to an applications AppID URI.",
      "answer": "In order to detect when a configuration change is made to an application's AppID URI, you should: Monitor Azure audit logs for specific events indicating that an \"Update Application\" or \"Update Service principal\" action has occurred. These activities are significant because they might reflect changes to the unique identifier (AppID URI) associated with Azure applications. Such modifications could signify unauthorized or malicious adjustments, aiming to exploit or alter the application's behavior. It's crucial, however, to consider legitimate updates by administrators as potential false positives. These are typically planned events where changes to the AppID URI are necessary for valid reasons. The detection of these actions is classified at a high level of importance due to the sensitive nature of the modification's potential impact on application security and functionality."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting usage of the \"Add-AppxPackage\" or it's alias \"Add-AppPackage\" to install unsigned AppX packages.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the usage of the \"Add-AppxPackage\" or its alias \"Add-AppPackage\" to install unsigned AppX packages, you should focus on monitoring process creation events within Windows environments. Specifically, look for instances where PowerShell (powershell.exe or pwsh.exe) or its related files (PowerShell.EXE, pwsh.dll) are initiated as these are common execution points for PowerShell commands. Within these events, pay special attention to the command line arguments. If the command line contains 'Add-AppPackage ' or 'Add-AppxPackage ', it indicates an attempt to install an AppX package. Furthermore, the presence of ' -AllowUnsigned' in the command line flags a particularly risky activity, as it signifies that the installation of an unsigned package is being allowed, bypassing security measures intended to prevent the installation of potentially malicious software. It\u2019s important to note that there can be legitimate reasons for this activity, such as the installation of unsigned packages for testing purposes, which should be considered when evaluating alerts. Monitoring for these specific command lines and flags helps in identifying potential security risks associated with the installation of unsigned AppX packages. This approach aligns with understanding and mitigating security threats more effectively by focusing on the tactics and techniques used in attacks, which in this case involves Execution and Defense Evasion.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        - OriginalFileName:\n            - 'PowerShell.EXE'\n            - 'pwsh.dll'\n    selection_cmdlet:\n        CommandLine|contains:\n            - 'Add-AppPackage '\n            - 'Add-AppxPackage '\n    selection_flag:\n        CommandLine|contains: ' -AllowUnsigned'\n    condition: all of selection_*\nfalsepositives:\n    - Installation of unsigned packages for testing purposes\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        - OriginalFileName:\n            - 'PowerShell.EXE'\n            - 'pwsh.dll'\n    selection_cmdlet:\n        CommandLine|contains:\n            - 'Add-AppPackage '\n            - 'Add-AppxPackage '\n    selection_flag:\n        CommandLine|contains: ' -AllowUnsigned'\n    condition: all of selection_*\nfalsepositives:\n    - Installation of unsigned packages for testing purposes\nlevel: medium\n",
      "question": "usage of the \"Add-AppxPackage\" or it's alias \"Add-AppPackage\" to install unsigned AppX packages",
      "answer": "In order to detect the usage of the \"Add-AppxPackage\" or its alias \"Add-AppPackage\" to install unsigned AppX packages, you should focus on monitoring process creation events within Windows environments. Specifically, look for instances where PowerShell (powershell.exe or pwsh.exe) or its related files (PowerShell.EXE, pwsh.dll) are initiated as these are common execution points for PowerShell commands. Within these events, pay special attention to the command line arguments. If the command line contains 'Add-AppPackage ' or 'Add-AppxPackage ', it indicates an attempt to install an AppX package. Furthermore, the presence of ' -AllowUnsigned' in the command line flags a particularly risky activity, as it signifies that the installation of an unsigned package is being allowed, bypassing security measures intended to prevent the installation of potentially malicious software. It\u2019s important to note that there can be legitimate reasons for this activity, such as the installation of unsigned packages for testing purposes, which should be considered when evaluating alerts. Monitoring for these specific command lines and flags helps in identifying potential security risks associated with the installation of unsigned AppX packages. This approach aligns with understanding and mitigating security threats more effectively by focusing on the tactics and techniques used in attacks, which in this case involves Execution and Defense Evasion."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting corrupted packets sent to the MSMQ service. Could potentially be a sign of CVE-2023-21554 exploitation.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect corrupted packets sent to the MSMQ service, which could potentially be a sign of CVE-2023-21554 exploitation, you should: Monitor Windows application logs for events produced by the MSMQ (Microsoft Message Queuing) service. Specifically, look for logs with a provider name of 'MSMQ' that have an Event ID of 2027 and a log level of '2'. This configuration is indicative of an incident that involves corrupted packets being received by the MSMQ service, which may be an attempt to exploit the vulnerability known as CVE-2023-21554. It's essential to pay close attention to these signals as they are considered high severity, although be aware that there might be unknown scenarios that could generate false positives. Nonetheless, this monitoring strategy is crucial for identifying potential exploitation attempts against the MSMQ service.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: application\ndetection:\n    selection:\n        Provider_Name: 'MSMQ'\n        EventID: 2027\n        Level: 2\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: application\ndetection:\n    selection:\n        Provider_Name: 'MSMQ'\n        EventID: 2027\n        Level: 2\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "corrupted packets sent to the MSMQ service. Could potentially be a sign of CVE-2023-21554 exploitation",
      "answer": "In order to detect corrupted packets sent to the MSMQ service, which could potentially be a sign of CVE-2023-21554 exploitation, you should: Monitor Windows application logs for events produced by the MSMQ (Microsoft Message Queuing) service. Specifically, look for logs with a provider name of 'MSMQ' that have an Event ID of 2027 and a log level of '2'. This configuration is indicative of an incident that involves corrupted packets being received by the MSMQ service, which may be an attempt to exploit the vulnerability known as CVE-2023-21554. It's essential to pay close attention to these signals as they are considered high severity, although be aware that there might be unknown scenarios that could generate false positives. Nonetheless, this monitoring strategy is crucial for identifying potential exploitation attempts against the MSMQ service."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious service installation scripts.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious service installation scripts, you should monitor Windows system logs specifically for events generated by the Service Control Manager, with a keen eye on EventID 7045. This EventID is crucial as it indicates a service installation process. Within these event records, pay close attention to the 'ImagePath' attribute for any occurrences of command prompt or PowerShell initiation commands such as ' /c ', ' /r ', or ' /k '. These specific command-line flags can be indicative of an attempt to execute commands or scripts in a manner that might not be typical for regular service installations.\n\nFurthermore, it\u2019s important to observe the 'ImagePath' for signs that scripts or potentially malicious executables are being called. The presence of references to 'powershell', 'pwsh' (indicating PowerShell Core), 'wscript', 'cscript' (Windows Script Host executables), 'mshta' (Microsoft HTML Application Host), 'rundll32', or 'regsvr32' could signal the misuse of legitimate Windows tools to install services that perform malicious activities. \n\nGiven the high level of risk associated with these activities, which directly implicate tactics and techniques such as Execution, Persistence, Privilege Escalation, and Defense Evasion, any detection of these indicators should be treated with elevated concern. However, be mindful that there could be false positives, as the use of these tools and commands in benign contexts is not uncommon.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: system\ndetection:\n    selection:\n        Provider_Name: 'Service Control Manager'\n        EventID: 7045\n    suspicious1:\n        ImagePath|contains:\n            - ' /c '\n            - ' /r '\n            - ' /k '\n    suspicious2:\n        ImagePath|contains:\n            - 'powershell'\n            - 'pwsh'\n            - 'wscript'\n            - 'cscript'\n            - 'mshta'\n            - 'rundll32'\n            - 'regsvr32'\n    condition: selection and all of suspicious*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: system\ndetection:\n    selection:\n        Provider_Name: 'Service Control Manager'\n        EventID: 7045\n    suspicious1:\n        ImagePath|contains:\n            - ' /c '\n            - ' /r '\n            - ' /k '\n    suspicious2:\n        ImagePath|contains:\n            - 'powershell'\n            - 'pwsh'\n            - 'wscript'\n            - 'cscript'\n            - 'mshta'\n            - 'rundll32'\n            - 'regsvr32'\n    condition: selection and all of suspicious*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "suspicious service installation scripts",
      "answer": "In order to detect suspicious service installation scripts, you should monitor Windows system logs specifically for events generated by the Service Control Manager, with a keen eye on EventID 7045. This EventID is crucial as it indicates a service installation process. Within these event records, pay close attention to the 'ImagePath' attribute for any occurrences of command prompt or PowerShell initiation commands such as ' /c ', ' /r ', or ' /k '. These specific command-line flags can be indicative of an attempt to execute commands or scripts in a manner that might not be typical for regular service installations.\n\nFurthermore, it\u2019s important to observe the 'ImagePath' for signs that scripts or potentially malicious executables are being called. The presence of references to 'powershell', 'pwsh' (indicating PowerShell Core), 'wscript', 'cscript' (Windows Script Host executables), 'mshta' (Microsoft HTML Application Host), 'rundll32', or 'regsvr32' could signal the misuse of legitimate Windows tools to install services that perform malicious activities. \n\nGiven the high level of risk associated with these activities, which directly implicate tactics and techniques such as Execution, Persistence, Privilege Escalation, and Defense Evasion, any detection of these indicators should be treated with elevated concern. However, be mindful that there could be false positives, as the use of these tools and commands in benign contexts is not uncommon."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1a:\n        CommandLine|contains|all:\n            - 'rundll32'\n            - 'apphelp.dll'\n    selection1b:\n        CommandLine|contains:\n            - 'ShimFlushCache'\n            - '#250'\n    selection2a:\n        CommandLine|contains|all:\n            - 'rundll32'\n            - 'kernel32.dll'\n    selection2b:\n        CommandLine|contains:\n            - 'BaseFlushAppcompatCache'\n            - '#46'\n    condition: ( selection1a and selection1b ) or ( selection2a and selection2b )\nfields:\n    - Image\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Unknown\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect actions that clear the local ShimCache and remove forensic evidence\n\nHere is how  the given sigma rule operates: In order to detect actions that clear the local ShimCache and remove forensic evidence, you should monitor Windows process creations for specific command-line activity indicating such actions. Specifically, look for processes initiated with the `rundll32` command loading either `apphelp.dll` or `kernel32.dll` in conjunction with command-line parameters that involve ShimCache manipulation. The clear indicators for these actions are the presence of `ShimFlushCache` and `BaseFlushAppcompatCache` within the command line, often accompanied by numerical identifiers like `#250` and `#46`, respectively. These particular sequences suggest efforts to clear ShimCache, a Windows component that if cleared, can hamper forensic investigations by erasing valuable evidence. The importance of this detection is underscored by its high level of reliability, albeit with recognition of potential unknown false positives. Monitoring should focus on capturing the image path, the full command-line invocation, and the parent process's command line to gain comprehensive insight into potential evidence tampering efforts.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1a:\n        CommandLine|contains|all:\n            - 'rundll32'\n            - 'apphelp.dll'\n    selection1b:\n        CommandLine|contains:\n            - 'ShimFlushCache'\n            - '#250'\n    selection2a:\n        CommandLine|contains|all:\n            - 'rundll32'\n            - 'kernel32.dll'\n    selection2b:\n        CommandLine|contains:\n            - 'BaseFlushAppcompatCache'\n            - '#46'\n    condition: ( selection1a and selection1b ) or ( selection2a and selection2b )\nfields:\n    - Image\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "actions that clear the local ShimCache and remove forensic evidence",
      "answer": "In order to detect actions that clear the local ShimCache and remove forensic evidence, you should monitor Windows process creations for specific command-line activity indicating such actions. Specifically, look for processes initiated with the `rundll32` command loading either `apphelp.dll` or `kernel32.dll` in conjunction with command-line parameters that involve ShimCache manipulation. The clear indicators for these actions are the presence of `ShimFlushCache` and `BaseFlushAppcompatCache` within the command line, often accompanied by numerical identifiers like `#250` and `#46`, respectively. These particular sequences suggest efforts to clear ShimCache, a Windows component that if cleared, can hamper forensic investigations by erasing valuable evidence. The importance of this detection is underscored by its high level of reliability, albeit with recognition of potential unknown false positives. Monitoring should focus on capturing the image path, the full command-line invocation, and the parent process's command line to gain comprehensive insight into potential evidence tampering efforts."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting creation of \"UserInitMprLogonScript\" registry value which can be used as a persistence method by malicious actors.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect creation of \"UserInitMprLogonScript\" registry value which can be used as a persistence method by malicious actors, you should monitor the Windows registry for additions that could indicate suspicious activity. Specifically, focus on events where a new registry key is created (EventType: CreateKey) and the target of this creation involves the 'UserInitMprLogonScript'. This particular registry value is significant because it can be used by attackers to gain persistence on a compromised system by executing scripts at each logon. \n\nWhen such activity is detected, it's classified under a medium threat level indicating a potential security risk. However, it is also noted that not all cases where 'UserInitMprLogonScript' is added are malicious. Therefore, it\u2019s recommended to investigate the contents of the newly added 'UserInitMprLogonScript' value to determine whether the script is legitimate or potentially harmful. Judicious analysis of the context and content associated with the creation of this registry key can help differentiate between benign system or software actions and malicious attempts to establish persistence.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_add\n    product: windows\ndetection:\n    selection:\n        EventType: CreateKey\n        TargetObject|contains: 'UserInitMprLogonScript'\n    condition: selection\nfalsepositives:\n    - Investigate the contents of the \"UserInitMprLogonScript\" value to determine of the added script is legitimate\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_add\n    product: windows\ndetection:\n    selection:\n        EventType: CreateKey\n        TargetObject|contains: 'UserInitMprLogonScript'\n    condition: selection\nfalsepositives:\n    - Investigate the contents of the \"UserInitMprLogonScript\" value to determine of the added script is legitimate\nlevel: medium\n",
      "question": "creation of \"UserInitMprLogonScript\" registry value which can be used as a persistence method by malicious actors",
      "answer": "In order to detect creation of \"UserInitMprLogonScript\" registry value which can be used as a persistence method by malicious actors, you should monitor the Windows registry for additions that could indicate suspicious activity. Specifically, focus on events where a new registry key is created (EventType: CreateKey) and the target of this creation involves the 'UserInitMprLogonScript'. This particular registry value is significant because it can be used by attackers to gain persistence on a compromised system by executing scripts at each logon. \n\nWhen such activity is detected, it's classified under a medium threat level indicating a potential security risk. However, it is also noted that not all cases where 'UserInitMprLogonScript' is added are malicious. Therefore, it\u2019s recommended to investigate the contents of the newly added 'UserInitMprLogonScript' value to determine whether the script is legitimate or potentially harmful. Judicious analysis of the context and content associated with the creation of this registry key can help differentiate between benign system or software actions and malicious attempts to establish persistence."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting usage of \"reg.exe\" in order to query reconnaissance information from the registry. Adversaries may interact with the Windows registry to gather information about credentials, the system, configuration, and installed software..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the usage of \"reg.exe\" in order to query reconnaissance information from the registry. Adversaries may interact with the Windows registry to gather information about credentials, the system, configuration, and installed software, you should: Focus on monitoring process creation events within Windows environments. Specifically, look out for instances where the process named \"reg.exe\" is initiated, indicated by its image name ending with '\\reg.exe' or the process having the original file name 'reg.exe'. Additionally, examine the command line arguments tied to these processes for the presence of the 'query' operation. This operation is a strong indicator that an adversary is attempting to gather intelligence. Pay special attention to queries targeting specific registry keys known to store sensitive information. These include keys related to current Windows version details, login procedures, software startup configurations, policy settings, and service configurations. The targeted registry paths are 'currentVersion\\windows', 'winlogon\\', 'currentVersion\\shellServiceObjectDelayLoad', 'currentVersion\\run' (along with variations like \"RunOnce\", \"RunOnceEx\", and \"runServicesOnce\"), 'currentVersion\\policies\\explorer\\run', and 'currentcontrolset\\services'. The appearance of command line actions targeting these registry areas, in conjunction with the use of 'reg.exe', serves as a potential indicator of malicious reconnaissance activity aiming to extract valuable system, configuration, or credential information.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\reg.exe'\n        - OriginalFileName: 'reg.exe'\n    selection_flag:\n        CommandLine|contains: 'query'\n    selection_key:\n        CommandLine|contains:\n            - 'currentVersion\\windows'\n            - 'winlogon\\'\n            - 'currentVersion\\shellServiceObjectDelayLoad'\n            - 'currentVersion\\run' # Also covers the strings \"RunOnce\", \"RunOnceEx\" and \"runServicesOnce\"\n            - 'currentVersion\\policies\\explorer\\run'\n            - 'currentcontrolset\\services'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\reg.exe'\n        - OriginalFileName: 'reg.exe'\n    selection_flag:\n        CommandLine|contains: 'query'\n    selection_key:\n        CommandLine|contains:\n            - 'currentVersion\\windows'\n            - 'winlogon\\'\n            - 'currentVersion\\shellServiceObjectDelayLoad'\n            - 'currentVersion\\run' # Also covers the strings \"RunOnce\", \"RunOnceEx\" and \"runServicesOnce\"\n            - 'currentVersion\\policies\\explorer\\run'\n            - 'currentcontrolset\\services'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "usage of \"reg.exe\" in order to query reconnaissance information from the registry. Adversaries may interact with the Windows registry to gather information about credentials, the system, configuration, and installed software.",
      "answer": "In order to detect the usage of \"reg.exe\" in order to query reconnaissance information from the registry. Adversaries may interact with the Windows registry to gather information about credentials, the system, configuration, and installed software, you should: Focus on monitoring process creation events within Windows environments. Specifically, look out for instances where the process named \"reg.exe\" is initiated, indicated by its image name ending with '\\reg.exe' or the process having the original file name 'reg.exe'. Additionally, examine the command line arguments tied to these processes for the presence of the 'query' operation. This operation is a strong indicator that an adversary is attempting to gather intelligence. Pay special attention to queries targeting specific registry keys known to store sensitive information. These include keys related to current Windows version details, login procedures, software startup configurations, policy settings, and service configurations. The targeted registry paths are 'currentVersion\\windows', 'winlogon\\', 'currentVersion\\shellServiceObjectDelayLoad', 'currentVersion\\run' (along with variations like \"RunOnce\", \"RunOnceEx\", and \"runServicesOnce\"), 'currentVersion\\policies\\explorer\\run', and 'currentcontrolset\\services'. The appearance of command line actions targeting these registry areas, in conjunction with the use of 'reg.exe', serves as a potential indicator of malicious reconnaissance activity aiming to extract valuable system, configuration, or credential information."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: proxy\ndetection:\n    b64encoding:\n        c-uri|contains:\n            - '_2f'\n            - '_2b'\n    urlpatterns:\n        c-uri|contains|all:\n            - '.avi'\n            - '/images/'\n    condition: b64encoding and urlpatterns\nfields:\n    - c-ip\n    - c-uri\n    - sc-bytes\n    - c-ua\nfalsepositives:\n    - Unknown\nlevel: critical\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect Ursnif C2 traffic.\n\nHere is how  the given sigma rule operates: In order to detect Ursnif C2 traffic, you should monitor traffic through your proxy logs for specific patterns indicating malicious activity. Specifically, look for URLs or Uniform Resource Identifiers (URIs) in the traffic that contain patterns indicative of base64 encoding, such as '_2f' and '_2b' sequences. Additionally, pay close attention to URLs containing '.avi' file extensions within a '/images/' directory path, as these are part of the detection criteria. Both conditions involving base64 encoded segments and suspicious URL patterns need to be met for an alert to be triggered.\n\nIn your analysis, focus on fields including the client IP address (c-ip), the full requested URI (c-uri), server response size in bytes (sc-bytes), and the client's User-Agent string (c-ua) to gather more context about the suspicious traffic. It's important to note that while these detections are crucial, the possibility of encountering unknown false positive instances exists due to the broad nature of the detection rules. This detection is considered critical due to its association with the Ursnif C2 traffic, a known malicious operation.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: proxy\ndetection:\n    b64encoding:\n        c-uri|contains:\n            - '_2f'\n            - '_2b'\n    urlpatterns:\n        c-uri|contains|all:\n            - '.avi'\n            - '/images/'\n    condition: b64encoding and urlpatterns\nfields:\n    - c-ip\n    - c-uri\n    - sc-bytes\n    - c-ua\nfalsepositives:\n    - Unknown\nlevel: critical\n",
      "question": "Ursnif C2 traffic.",
      "answer": "In order to detect Ursnif C2 traffic, you should monitor traffic through your proxy logs for specific patterns indicating malicious activity. Specifically, look for URLs or Uniform Resource Identifiers (URIs) in the traffic that contain patterns indicative of base64 encoding, such as '_2f' and '_2b' sequences. Additionally, pay close attention to URLs containing '.avi' file extensions within a '/images/' directory path, as these are part of the detection criteria. Both conditions involving base64 encoded segments and suspicious URL patterns need to be met for an alert to be triggered.\n\nIn your analysis, focus on fields including the client IP address (c-ip), the full requested URI (c-uri), server response size in bytes (sc-bytes), and the client's User-Agent string (c-ua) to gather more context about the suspicious traffic. It's important to note that while these detections are crucial, the possibility of encountering unknown false positive instances exists due to the broad nature of the detection rules. This detection is considered critical due to its association with the Ursnif C2 traffic, a known malicious operation."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting DLL sideloading of DLLs usually located in system locations (System32, SysWOW64, etc.).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect DLL sideloading of DLLs usually located in system locations (System32, SysWOW64, etc.), you should monitor Windows image load events for the loading of specific DLL files that typically reside in trusted system directories but are being loaded from unexpected locations. This process involves tracking the loading of a comprehensive list of DLLs, including but not limited to 'shfolder.dll', 'activeds.dll', 'adsldpc.dll', and many others, which are commonly associated with system functions and processes. It is important to apply filters to exclude legitimate loading events from common system directories such as 'C:\\Windows\\System32\\', 'C:\\Windows\\SysWOW64\\', and others, to minimize false positives. Additionally, pay attention to filters excluding legitimate uses of some DLLs by specific applications, like Office ClickToRun or Dell SupportAssist, as well as certain operations within Azure environments or software from vendors like CheckPoint. This approach aims to spotlight instances where these DLL files might be loaded from irregular locations, a technique often employed by adversaries to execute malicious code by leveraging the trust associated with these system DLLs. Monitoring for such activity with a high level of scrutiny allows for the identification of potential sideloading attempts, which could indicate a breach or an ongoing attack without raising an excessive number of false alarms.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        ImageLoaded|endswith:\n            - '\\shfolder.dll'\n            - '\\activeds.dll'\n            - '\\adsldpc.dll'\n            - '\\aepic.dll'\n            - '\\apphelp.dll'\n            - '\\applicationframe.dll'\n            - '\\appxalluserstore.dll'\n            - '\\appxdeploymentclient.dll'\n            - '\\archiveint.dll'\n            - '\\atl.dll'\n            - '\\audioses.dll'\n            - '\\auditpolcore.dll'\n            - '\\authfwcfg.dll'\n            - '\\authz.dll'\n            - '\\avrt.dll'\n            - '\\bcd.dll'\n            - '\\bcp47langs.dll'\n            - '\\bcp47mrm.dll'\n            - '\\bcrypt.dll'\n            - '\\cabinet.dll'\n            - '\\cabview.dll'\n            - '\\certenroll.dll'\n            - '\\cldapi.dll'\n            - '\\clipc.dll'\n            - '\\clusapi.dll'\n            - '\\cmpbk32.dll'\n            - '\\coloradapterclient.dll'\n            - '\\colorui.dll'\n            - '\\comdlg32.dll'\n            - '\\connect.dll'\n            - '\\coremessaging.dll'\n            - '\\credui.dll'\n            - '\\cryptbase.dll'\n            - '\\cryptdll.dll'\n            - '\\cryptui.dll'\n            - '\\cryptxml.dll'\n            - '\\cscapi.dll'\n            - '\\cscobj.dll'\n            - '\\cscui.dll'\n            - '\\d2d1.dll'\n            - '\\d3d10.dll'\n            - '\\d3d10_1.dll'\n            - '\\d3d10_1core.dll'\n            - '\\d3d10core.dll'\n            - '\\d3d10warp.dll'\n            - '\\d3d11.dll'\n            - '\\d3d12.dll'\n            - '\\d3d9.dll'\n            - '\\dataexchange.dll'\n            - '\\davclnt.dll'\n            - '\\dcomp.dll'\n            - '\\defragproxy.dll'\n            - '\\desktopshellext.dll'\n            - '\\deviceassociation.dll'\n            - '\\devicecredential.dll'\n            - '\\devicepairing.dll'\n            - '\\devobj.dll'\n            - '\\devrtl.dll'\n            - '\\dhcpcmonitor.dll'\n            - '\\dhcpcsvc.dll'\n            - '\\dhcpcsvc6.dll'\n            - '\\directmanipulation.dll'\n            - '\\dismapi.dll'\n            - '\\dismcore.dll'\n            - '\\dmcfgutils.dll'\n            - '\\dmcmnutils.dll'\n            - '\\dmenrollengine.dll'\n            - '\\dmenterprisediagnostics.dll'\n            - '\\dmiso8601utils.dll'\n            - '\\dmoleaututils.dll'\n            - '\\dmprocessxmlfiltered.dll'\n            - '\\dmpushproxy.dll'\n            - '\\dmxmlhelputils.dll'\n            - '\\dnsapi.dll'\n            - '\\dot3api.dll'\n            - '\\dot3cfg.dll'\n            - '\\drprov.dll'\n            - '\\dsclient.dll'\n            - '\\dsparse.dll'\n            - '\\dsreg.dll'\n            - '\\dsrole.dll'\n            - '\\dui70.dll'\n            - '\\duser.dll'\n            - '\\dusmapi.dll'\n            - '\\dwmapi.dll'\n            - '\\dwrite.dll'\n            - '\\dxgi.dll'\n            - '\\dxva2.dll'\n            - '\\eappcfg.dll'\n            - '\\eappprxy.dll'\n            - '\\edputil.dll'\n            - '\\efsadu.dll'\n            - '\\efsutil.dll'\n            - '\\esent.dll'\n            - '\\execmodelproxy.dll'\n            - '\\explorerframe.dll'\n            - '\\fastprox.dll'\n            - '\\faultrep.dll'\n            - '\\fddevquery.dll'\n            - '\\feclient.dll'\n            - '\\fhcfg.dll'\n            - '\\firewallapi.dll'\n            - '\\flightsettings.dll'\n            - '\\fltlib.dll'\n            - '\\fveapi.dll'\n            - '\\fwbase.dll'\n            - '\\fwcfg.dll'\n            - '\\fwpolicyiomgr.dll'\n            - '\\fwpuclnt.dll'\n            - '\\getuname.dll'\n            - '\\hid.dll'\n            - '\\hnetmon.dll'\n            - '\\httpapi.dll'\n            - '\\idstore.dll'\n            - '\\ieadvpack.dll'\n            - '\\iedkcs32.dll'\n            - '\\iertutil.dll'\n            - '\\ifmon.dll'\n            - '\\iphlpapi.dll'\n            - '\\iri.dll'\n            - '\\iscsidsc.dll'\n            - '\\iscsium.dll'\n            - '\\isv.exe_rsaenh.dll'\n            - '\\joinutil.dll'\n            - '\\ksuser.dll'\n            - '\\ktmw32.dll'\n            - '\\licensemanagerapi.dll'\n            - '\\licensingdiagspp.dll'\n            - '\\linkinfo.dll'\n            - '\\loadperf.dll'\n            - '\\logoncli.dll'\n            - '\\logoncontroller.dll'\n            - '\\lpksetupproxyserv.dll'\n            - '\\magnification.dll'\n            - '\\mapistub.dll'\n            - '\\mfcore.dll'\n            - '\\mfplat.dll'\n            - '\\mi.dll'\n            - '\\midimap.dll'\n            - '\\miutils.dll'\n            - '\\mlang.dll'\n            - '\\mmdevapi.dll'\n            - '\\mobilenetworking.dll'\n            - '\\mpr.dll'\n            - '\\mprapi.dll'\n            - '\\mrmcorer.dll'\n            - '\\msacm32.dll'\n            - '\\mscms.dll'\n            - '\\mscoree.dll'\n            - '\\msctf.dll'\n            - '\\msctfmonitor.dll'\n            - '\\msdrm.dll'\n            - '\\msftedit.dll'\n            - '\\msi.dll'\n            - '\\msutb.dll'\n            - '\\mswb7.dll'\n            - '\\mswsock.dll'\n            - '\\msxml3.dll'\n            - '\\mtxclu.dll'\n            - '\\napinsp.dll'\n            - '\\ncrypt.dll'\n            - '\\ndfapi.dll'\n            - '\\netid.dll'\n            - '\\netiohlp.dll'\n            - '\\netplwiz.dll'\n            - '\\netprofm.dll'\n            - '\\netsetupapi.dll'\n            - '\\netshell.dll'\n            - '\\netutils.dll'\n            - '\\networkexplorer.dll'\n            - '\\newdev.dll'\n            - '\\ninput.dll'\n            - '\\nlaapi.dll'\n            - '\\nlansp_c.dll'\n            - '\\npmproxy.dll'\n            - '\\nshhttp.dll'\n            - '\\nshipsec.dll'\n            - '\\nshwfp.dll'\n            - '\\ntdsapi.dll'\n            - '\\ntlanman.dll'\n            - '\\ntlmshared.dll'\n            - '\\ntmarta.dll'\n            - '\\ntshrui.dll'\n            - '\\oleacc.dll'\n            - '\\omadmapi.dll'\n            - '\\onex.dll'\n            - '\\osbaseln.dll'\n            - '\\osuninst.dll'\n            - '\\p2p.dll'\n            - '\\p2pnetsh.dll'\n            - '\\p9np.dll'\n            - '\\pcaui.dll'\n            - '\\pdh.dll'\n            - '\\peerdistsh.dll'\n            - '\\pla.dll'\n            - '\\pnrpnsp.dll'\n            - '\\policymanager.dll'\n            - '\\polstore.dll'\n            - '\\printui.dll'\n            - '\\propsys.dll'\n            - '\\prvdmofcomp.dll'\n            - '\\puiapi.dll'\n            - '\\radcui.dll'\n            - '\\rasapi32.dll'\n            - '\\rasgcw.dll'\n            - '\\rasman.dll'\n            - '\\rasmontr.dll'\n            - '\\reagent.dll'\n            - '\\regapi.dll'\n            - '\\resutils.dll'\n            - '\\rmclient.dll'\n            - '\\rpcnsh.dll'\n            - '\\rsaenh.dll'\n            - '\\rtutils.dll'\n            - '\\rtworkq.dll'\n            - '\\samcli.dll'\n            - '\\samlib.dll'\n            - '\\sapi_onecore.dll'\n            - '\\sas.dll'\n            - '\\scansetting.dll'\n            - '\\scecli.dll'\n            - '\\schedcli.dll'\n            - '\\secur32.dll'\n            - '\\shell32.dll'\n            - '\\slc.dll'\n            - '\\snmpapi.dll'\n            - '\\spp.dll'\n            - '\\sppc.dll'\n            - '\\srclient.dll'\n            - '\\srpapi.dll'\n            - '\\srvcli.dll'\n            - '\\ssp.exe_rsaenh.dll'\n            - '\\ssp_isv.exe_rsaenh.dll'\n            - '\\sspicli.dll'\n            - '\\ssshim.dll'\n            - '\\staterepository.core.dll'\n            - '\\structuredquery.dll'\n            - '\\sxshared.dll'\n            - '\\tapi32.dll'\n            - '\\tbs.dll'\n            - '\\tdh.dll'\n            - '\\tquery.dll'\n            - '\\tsworkspace.dll'\n            - '\\ttdrecord.dll'\n            - '\\twext.dll'\n            - '\\twinapi.dll'\n            - '\\twinui.appcore.dll'\n            - '\\uianimation.dll'\n            - '\\uiautomationcore.dll'\n            - '\\uireng.dll'\n            - '\\uiribbon.dll'\n            - '\\updatepolicy.dll'\n            - '\\userenv.dll'\n            - '\\utildll.dll'\n            - '\\uxinit.dll'\n            - '\\uxtheme.dll'\n            - '\\vaultcli.dll'\n            - '\\virtdisk.dll'\n            - '\\vssapi.dll'\n            - '\\vsstrace.dll'\n            - '\\wbemprox.dll'\n            - '\\wbemsvc.dll'\n            - '\\wcmapi.dll'\n            - '\\wcnnetsh.dll'\n            - '\\wdi.dll'\n            - '\\wdscore.dll'\n            - '\\webservices.dll'\n            - '\\wecapi.dll'\n            - '\\wer.dll'\n            - '\\wevtapi.dll'\n            - '\\whhelper.dll'\n            - '\\wimgapi.dll'\n            - '\\winbrand.dll'\n            - '\\windows.storage.dll'\n            - '\\windows.storage.search.dll'\n            - '\\windowscodecs.dll'\n            - '\\windowscodecsext.dll'\n            - '\\windowsudk.shellcommon.dll'\n            - '\\winhttp.dll'\n            - '\\wininet.dll'\n            - '\\winipsec.dll'\n            - '\\winmde.dll'\n            - '\\winmm.dll'\n            - '\\winnsi.dll'\n            - '\\winrnr.dll'\n            - '\\winsqlite3.dll'\n            - '\\winsta.dll'\n            - '\\wkscli.dll'\n            - '\\wlanapi.dll'\n            - '\\wlancfg.dll'\n            - '\\wldp.dll'\n            - '\\wlidprov.dll'\n            - '\\wmiclnt.dll'\n            - '\\wmidcom.dll'\n            - '\\wmiutils.dll'\n            - '\\wmsgapi.dll'\n            - '\\wofutil.dll'\n            - '\\wpdshext.dll'\n            - '\\wshbth.dll'\n            - '\\wshelper.dll'\n            - '\\wtsapi32.dll'\n            - '\\wwapi.dll'\n            - '\\xmllite.dll'\n            - '\\xolehlp.dll'\n            - '\\xwizards.dll'\n            - '\\xwtpw32.dll'\n            - '\\aclui.dll'\n            - '\\bderepair.dll'\n            - '\\bootmenuux.dll'\n            - '\\dcntel.dll'\n            - '\\dwmcore.dll'\n            - '\\dynamoapi.dll'\n            - '\\fhsvcctl.dll'\n            - '\\fxsst.dll'\n            - '\\inproclogger.dll'\n            - '\\iumbase.dll'\n            - '\\kdstub.dll'\n            - '\\maintenanceui.dll'\n            - '\\mdmdiagnostics.dll'\n            - '\\mintdh.dll'\n            - '\\msdtctm.dll'\n            - '\\nettrace.dll'\n            - '\\osksupport.dll'\n            - '\\reseteng.dll'\n            - '\\resetengine.dll'\n            - '\\spectrumsyncclient.dll'\n            - '\\srcore.dll'\n            - '\\systemsettingsthresholdadminflowui.dll'\n            - '\\timesync.dll'\n            - '\\upshared.dll'\n            - '\\wmpdui.dll'\n            - '\\wwancfg.dll'\n            - '\\dpx.dll'\n            - '\\fxsapi.dll'\n            - '\\fxstiff.dll'\n            - '\\xpsservices.dll'\n            - '\\appvpolicy.dll'\n            - '\\batmeter.dll'\n            - '\\bootux.dll'\n            - '\\cmutil.dll'\n            - '\\configmanager2.dll'\n            - '\\coredplus.dll'\n            - '\\coreuicomponents.dll'\n            - '\\cryptsp.dll'\n            - '\\dmcommandlineutils.dll'\n            - '\\drvstore.dll'\n            - '\\dsprop.dll'\n            - '\\dxcore.dll'\n            - '\\edgeiso.dll'\n            - '\\framedynos.dll'\n            - '\\fveskybackup.dll'\n            - '\\fvewiz.dll'\n            - '\\gpapi.dll'\n            - '\\icmp.dll'\n            - '\\ifsutil.dll'\n            - '\\iumsdk.dll'\n            - '\\lockhostingframework.dll'\n            - '\\lrwizdll.dll'\n            - '\\mbaexmlparser.dll'\n            - '\\mfc42u.dll'\n            - '\\msiso.dll'\n            - '\\msvcp110_win.dll'\n            - '\\netapi32.dll'\n            - '\\netjoin.dll'\n            - '\\netprovfw.dll'\n            - '\\opcservices.dll'\n            - '\\pkeyhelper.dll'\n            - '\\playsndsrv.dll'\n            - '\\powrprof.dll'\n            - '\\prntvpt.dll'\n            - '\\profapi.dll'\n            - '\\proximitycommon.dll'\n            - '\\proximityservicepal.dll'\n            - '\\rasdlg.dll'\n            - '\\security.dll'\n            - '\\sppcext.dll'\n            - '\\srmtrace.dll'\n            - '\\tpmcoreprovisioning.dll'\n            - '\\umpdc.dll'\n            - '\\unattend.dll'\n            - '\\urlmon.dll'\n            - '\\vdsutil.dll'\n            - '\\version.dll'\n            - '\\winbio.dll'\n            - '\\windows.ui.immersive.dll'\n            - '\\winscard.dll'\n            - '\\winsync.dll'\n            - '\\wscapi.dll'\n            - '\\wsmsvc.dll'\n            # From https://github.com/XForceIR/SideLoadHunter/blob/main/SideLoads/README.md\n            - '\\FxsCompose.dll'\n            - '\\WfsR.dll'\n            - '\\rpchttp.dll'\n            - '\\storageusage.dll'\n            - '\\amsi.dll'\n            - '\\PrintIsolationProxy.dll'\n            - '\\msdtcVSp1res.dll'\n            - '\\rdpendp.dll'\n            - '\\dxilconv.dll'\n            - '\\utcutil.dll'\n            - '\\appraiser.dll'\n            - '\\dsound.dll'\n            - '\\DispBroker.dll'\n            - '\\FXSRESM.DLL'\n            - '\\cryptnet.dll'\n            - '\\COMRES.DLL'\n            # The DLLs below exists in \"C:\\Windows\\System32\\DriverStore\\FileRepository\\\" folder. But there is also a copy located in \"C:\\ProgramData\\Package Cache\\XXXXXXX\\Graphics\\\". If you see them being loaded from there. Please comment them out, don't add a filter for ProgramData :)\n            - '\\igdumdim64.dll'\n            - '\\igd10iumd64.dll'\n            - '\\igd12umd64.dll'\n            - '\\igdusc64.dll'\n            # Other\n            - '\\WLBSCTRL.dll'\n            - '\\TSMSISrv.dll'\n            - '\\TSVIPSrv.dll'\n            - '\\wow64log.dll'\n            - '\\WptsExtensions.dll'\n            - '\\wbemcomn.dll'\n    filter_main_generic:\n        # Note: this filter is generic on purpose to avoid insane amount of FP from legitimate third party applications. A better approach would be to baseline everything and add specific filters to avoid blind spots\n        ImageLoaded|startswith:\n            - 'C:\\Windows\\System32\\'\n            - 'C:\\Windows\\SysWOW64\\'\n            - 'C:\\Windows\\WinSxS\\'\n            - 'C:\\Windows\\SoftwareDistribution\\'\n            - 'C:\\Windows\\SystemTemp\\'\n            - 'C:\\$WINDOWS.~BT\\'\n    filter_optional_office_appvpolicy:\n        Image: 'C:\\Program Files\\Common Files\\microsoft shared\\ClickToRun\\OfficeClickToRun.exe'\n        ImageLoaded: 'C:\\Program Files\\Common Files\\microsoft shared\\ClickToRun\\AppVPolicy.dll'\n    filter_optional_azure:\n        ImageLoaded|startswith: 'C:\\Packages\\Plugins\\Microsoft.GuestConfiguration.ConfigurationforWindows\\'\n    filter_optional_dell:\n        Image|startswith:\n            - 'C:\\Program Files\\WindowsApps\\DellInc.DellSupportAssistforPCs'\n            - 'C:\\Windows\\System32\\backgroundTaskHost.exe'\n        ImageLoaded|startswith: 'C:\\Program Files\\WindowsApps\\DellInc.DellSupportAssistforPCs'\n    filter_optional_dell_wldp:\n        Image|startswith: 'C:\\Program Files\\WindowsApps\\DellInc.DellSupportAssistforPCs'\n        Image|endswith: '\\wldp.dll'\n    filter_optional_checkpoint:\n        Image|startswith:\n            - 'C:\\Program Files\\CheckPoint\\'\n            - 'C:\\Program Files (x86)\\CheckPoint\\'\n        Image|endswith: '\\SmartConsole.exe'\n        ImageLoaded|startswith:\n            - 'C:\\Program Files\\CheckPoint\\'\n            - 'C:\\Program Files (x86)\\CheckPoint\\'\n        ImageLoaded|endswith: '\\PolicyManager.dll'\n    condition: selection and not 1 of filter_main_* and not 1 of filter_optional_*\nfalsepositives:\n    - Legitimate applications loading their own versions of the DLLs mentioned in this rule\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        ImageLoaded|endswith:\n            - '\\shfolder.dll'\n            - '\\activeds.dll'\n            - '\\adsldpc.dll'\n            - '\\aepic.dll'\n            - '\\apphelp.dll'\n            - '\\applicationframe.dll'\n            - '\\appxalluserstore.dll'\n            - '\\appxdeploymentclient.dll'\n            - '\\archiveint.dll'\n            - '\\atl.dll'\n            - '\\audioses.dll'\n            - '\\auditpolcore.dll'\n            - '\\authfwcfg.dll'\n            - '\\authz.dll'\n            - '\\avrt.dll'\n            - '\\bcd.dll'\n            - '\\bcp47langs.dll'\n            - '\\bcp47mrm.dll'\n            - '\\bcrypt.dll'\n            - '\\cabinet.dll'\n            - '\\cabview.dll'\n            - '\\certenroll.dll'\n            - '\\cldapi.dll'\n            - '\\clipc.dll'\n            - '\\clusapi.dll'\n            - '\\cmpbk32.dll'\n            - '\\coloradapterclient.dll'\n            - '\\colorui.dll'\n            - '\\comdlg32.dll'\n            - '\\connect.dll'\n            - '\\coremessaging.dll'\n            - '\\credui.dll'\n            - '\\cryptbase.dll'\n            - '\\cryptdll.dll'\n            - '\\cryptui.dll'\n            - '\\cryptxml.dll'\n            - '\\cscapi.dll'\n            - '\\cscobj.dll'\n            - '\\cscui.dll'\n            - '\\d2d1.dll'\n            - '\\d3d10.dll'\n            - '\\d3d10_1.dll'\n            - '\\d3d10_1core.dll'\n            - '\\d3d10core.dll'\n            - '\\d3d10warp.dll'\n            - '\\d3d11.dll'\n            - '\\d3d12.dll'\n            - '\\d3d9.dll'\n            - '\\dataexchange.dll'\n            - '\\davclnt.dll'\n            - '\\dcomp.dll'\n            - '\\defragproxy.dll'\n            - '\\desktopshellext.dll'\n            - '\\deviceassociation.dll'\n            - '\\devicecredential.dll'\n            - '\\devicepairing.dll'\n            - '\\devobj.dll'\n            - '\\devrtl.dll'\n            - '\\dhcpcmonitor.dll'\n            - '\\dhcpcsvc.dll'\n            - '\\dhcpcsvc6.dll'\n            - '\\directmanipulation.dll'\n            - '\\dismapi.dll'\n            - '\\dismcore.dll'\n            - '\\dmcfgutils.dll'\n            - '\\dmcmnutils.dll'\n            - '\\dmenrollengine.dll'\n            - '\\dmenterprisediagnostics.dll'\n            - '\\dmiso8601utils.dll'\n            - '\\dmoleaututils.dll'\n            - '\\dmprocessxmlfiltered.dll'\n            - '\\dmpushproxy.dll'\n            - '\\dmxmlhelputils.dll'\n            - '\\dnsapi.dll'\n            - '\\dot3api.dll'\n            - '\\dot3cfg.dll'\n            - '\\drprov.dll'\n            - '\\dsclient.dll'\n            - '\\dsparse.dll'\n            - '\\dsreg.dll'\n            - '\\dsrole.dll'\n            - '\\dui70.dll'\n            - '\\duser.dll'\n            - '\\dusmapi.dll'\n            - '\\dwmapi.dll'\n            - '\\dwrite.dll'\n            - '\\dxgi.dll'\n            - '\\dxva2.dll'\n            - '\\eappcfg.dll'\n            - '\\eappprxy.dll'\n            - '\\edputil.dll'\n            - '\\efsadu.dll'\n            - '\\efsutil.dll'\n            - '\\esent.dll'\n            - '\\execmodelproxy.dll'\n            - '\\explorerframe.dll'\n            - '\\fastprox.dll'\n            - '\\faultrep.dll'\n            - '\\fddevquery.dll'\n            - '\\feclient.dll'\n            - '\\fhcfg.dll'\n            - '\\firewallapi.dll'\n            - '\\flightsettings.dll'\n            - '\\fltlib.dll'\n            - '\\fveapi.dll'\n            - '\\fwbase.dll'\n            - '\\fwcfg.dll'\n            - '\\fwpolicyiomgr.dll'\n            - '\\fwpuclnt.dll'\n            - '\\getuname.dll'\n            - '\\hid.dll'\n            - '\\hnetmon.dll'\n            - '\\httpapi.dll'\n            - '\\idstore.dll'\n            - '\\ieadvpack.dll'\n            - '\\iedkcs32.dll'\n            - '\\iertutil.dll'\n            - '\\ifmon.dll'\n            - '\\iphlpapi.dll'\n            - '\\iri.dll'\n            - '\\iscsidsc.dll'\n            - '\\iscsium.dll'\n            - '\\isv.exe_rsaenh.dll'\n            - '\\joinutil.dll'\n            - '\\ksuser.dll'\n            - '\\ktmw32.dll'\n            - '\\licensemanagerapi.dll'\n            - '\\licensingdiagspp.dll'\n            - '\\linkinfo.dll'\n            - '\\loadperf.dll'\n            - '\\logoncli.dll'\n            - '\\logoncontroller.dll'\n            - '\\lpksetupproxyserv.dll'\n            - '\\magnification.dll'\n            - '\\mapistub.dll'\n            - '\\mfcore.dll'\n            - '\\mfplat.dll'\n            - '\\mi.dll'\n            - '\\midimap.dll'\n            - '\\miutils.dll'\n            - '\\mlang.dll'\n            - '\\mmdevapi.dll'\n            - '\\mobilenetworking.dll'\n            - '\\mpr.dll'\n            - '\\mprapi.dll'\n            - '\\mrmcorer.dll'\n            - '\\msacm32.dll'\n            - '\\mscms.dll'\n            - '\\mscoree.dll'\n            - '\\msctf.dll'\n            - '\\msctfmonitor.dll'\n            - '\\msdrm.dll'\n            - '\\msftedit.dll'\n            - '\\msi.dll'\n            - '\\msutb.dll'\n            - '\\mswb7.dll'\n            - '\\mswsock.dll'\n            - '\\msxml3.dll'\n            - '\\mtxclu.dll'\n            - '\\napinsp.dll'\n            - '\\ncrypt.dll'\n            - '\\ndfapi.dll'\n            - '\\netid.dll'\n            - '\\netiohlp.dll'\n            - '\\netplwiz.dll'\n            - '\\netprofm.dll'\n            - '\\netsetupapi.dll'\n            - '\\netshell.dll'\n            - '\\netutils.dll'\n            - '\\networkexplorer.dll'\n            - '\\newdev.dll'\n            - '\\ninput.dll'\n            - '\\nlaapi.dll'\n            - '\\nlansp_c.dll'\n            - '\\npmproxy.dll'\n            - '\\nshhttp.dll'\n            - '\\nshipsec.dll'\n            - '\\nshwfp.dll'\n            - '\\ntdsapi.dll'\n            - '\\ntlanman.dll'\n            - '\\ntlmshared.dll'\n            - '\\ntmarta.dll'\n            - '\\ntshrui.dll'\n            - '\\oleacc.dll'\n            - '\\omadmapi.dll'\n            - '\\onex.dll'\n            - '\\osbaseln.dll'\n            - '\\osuninst.dll'\n            - '\\p2p.dll'\n            - '\\p2pnetsh.dll'\n            - '\\p9np.dll'\n            - '\\pcaui.dll'\n            - '\\pdh.dll'\n            - '\\peerdistsh.dll'\n            - '\\pla.dll'\n            - '\\pnrpnsp.dll'\n            - '\\policymanager.dll'\n            - '\\polstore.dll'\n            - '\\printui.dll'\n            - '\\propsys.dll'\n            - '\\prvdmofcomp.dll'\n            - '\\puiapi.dll'\n            - '\\radcui.dll'\n            - '\\rasapi32.dll'\n            - '\\rasgcw.dll'\n            - '\\rasman.dll'\n            - '\\rasmontr.dll'\n            - '\\reagent.dll'\n            - '\\regapi.dll'\n            - '\\resutils.dll'\n            - '\\rmclient.dll'\n            - '\\rpcnsh.dll'\n            - '\\rsaenh.dll'\n            - '\\rtutils.dll'\n            - '\\rtworkq.dll'\n            - '\\samcli.dll'\n            - '\\samlib.dll'\n            - '\\sapi_onecore.dll'\n            - '\\sas.dll'\n            - '\\scansetting.dll'\n            - '\\scecli.dll'\n            - '\\schedcli.dll'\n            - '\\secur32.dll'\n            - '\\shell32.dll'\n            - '\\slc.dll'\n            - '\\snmpapi.dll'\n            - '\\spp.dll'\n            - '\\sppc.dll'\n            - '\\srclient.dll'\n            - '\\srpapi.dll'\n            - '\\srvcli.dll'\n            - '\\ssp.exe_rsaenh.dll'\n            - '\\ssp_isv.exe_rsaenh.dll'\n            - '\\sspicli.dll'\n            - '\\ssshim.dll'\n            - '\\staterepository.core.dll'\n            - '\\structuredquery.dll'\n            - '\\sxshared.dll'\n            - '\\tapi32.dll'\n            - '\\tbs.dll'\n            - '\\tdh.dll'\n            - '\\tquery.dll'\n            - '\\tsworkspace.dll'\n            - '\\ttdrecord.dll'\n            - '\\twext.dll'\n            - '\\twinapi.dll'\n            - '\\twinui.appcore.dll'\n            - '\\uianimation.dll'\n            - '\\uiautomationcore.dll'\n            - '\\uireng.dll'\n            - '\\uiribbon.dll'\n            - '\\updatepolicy.dll'\n            - '\\userenv.dll'\n            - '\\utildll.dll'\n            - '\\uxinit.dll'\n            - '\\uxtheme.dll'\n            - '\\vaultcli.dll'\n            - '\\virtdisk.dll'\n            - '\\vssapi.dll'\n            - '\\vsstrace.dll'\n            - '\\wbemprox.dll'\n            - '\\wbemsvc.dll'\n            - '\\wcmapi.dll'\n            - '\\wcnnetsh.dll'\n            - '\\wdi.dll'\n            - '\\wdscore.dll'\n            - '\\webservices.dll'\n            - '\\wecapi.dll'\n            - '\\wer.dll'\n            - '\\wevtapi.dll'\n            - '\\whhelper.dll'\n            - '\\wimgapi.dll'\n            - '\\winbrand.dll'\n            - '\\windows.storage.dll'\n            - '\\windows.storage.search.dll'\n            - '\\windowscodecs.dll'\n            - '\\windowscodecsext.dll'\n            - '\\windowsudk.shellcommon.dll'\n            - '\\winhttp.dll'\n            - '\\wininet.dll'\n            - '\\winipsec.dll'\n            - '\\winmde.dll'\n            - '\\winmm.dll'\n            - '\\winnsi.dll'\n            - '\\winrnr.dll'\n            - '\\winsqlite3.dll'\n            - '\\winsta.dll'\n            - '\\wkscli.dll'\n            - '\\wlanapi.dll'\n            - '\\wlancfg.dll'\n            - '\\wldp.dll'\n            - '\\wlidprov.dll'\n            - '\\wmiclnt.dll'\n            - '\\wmidcom.dll'\n            - '\\wmiutils.dll'\n            - '\\wmsgapi.dll'\n            - '\\wofutil.dll'\n            - '\\wpdshext.dll'\n            - '\\wshbth.dll'\n            - '\\wshelper.dll'\n            - '\\wtsapi32.dll'\n            - '\\wwapi.dll'\n            - '\\xmllite.dll'\n            - '\\xolehlp.dll'\n            - '\\xwizards.dll'\n            - '\\xwtpw32.dll'\n            - '\\aclui.dll'\n            - '\\bderepair.dll'\n            - '\\bootmenuux.dll'\n            - '\\dcntel.dll'\n            - '\\dwmcore.dll'\n            - '\\dynamoapi.dll'\n            - '\\fhsvcctl.dll'\n            - '\\fxsst.dll'\n            - '\\inproclogger.dll'\n            - '\\iumbase.dll'\n            - '\\kdstub.dll'\n            - '\\maintenanceui.dll'\n            - '\\mdmdiagnostics.dll'\n            - '\\mintdh.dll'\n            - '\\msdtctm.dll'\n            - '\\nettrace.dll'\n            - '\\osksupport.dll'\n            - '\\reseteng.dll'\n            - '\\resetengine.dll'\n            - '\\spectrumsyncclient.dll'\n            - '\\srcore.dll'\n            - '\\systemsettingsthresholdadminflowui.dll'\n            - '\\timesync.dll'\n            - '\\upshared.dll'\n            - '\\wmpdui.dll'\n            - '\\wwancfg.dll'\n            - '\\dpx.dll'\n            - '\\fxsapi.dll'\n            - '\\fxstiff.dll'\n            - '\\xpsservices.dll'\n            - '\\appvpolicy.dll'\n            - '\\batmeter.dll'\n            - '\\bootux.dll'\n            - '\\cmutil.dll'\n            - '\\configmanager2.dll'\n            - '\\coredplus.dll'\n            - '\\coreuicomponents.dll'\n            - '\\cryptsp.dll'\n            - '\\dmcommandlineutils.dll'\n            - '\\drvstore.dll'\n            - '\\dsprop.dll'\n            - '\\dxcore.dll'\n            - '\\edgeiso.dll'\n            - '\\framedynos.dll'\n            - '\\fveskybackup.dll'\n            - '\\fvewiz.dll'\n            - '\\gpapi.dll'\n            - '\\icmp.dll'\n            - '\\ifsutil.dll'\n            - '\\iumsdk.dll'\n            - '\\lockhostingframework.dll'\n            - '\\lrwizdll.dll'\n            - '\\mbaexmlparser.dll'\n            - '\\mfc42u.dll'\n            - '\\msiso.dll'\n            - '\\msvcp110_win.dll'\n            - '\\netapi32.dll'\n            - '\\netjoin.dll'\n            - '\\netprovfw.dll'\n            - '\\opcservices.dll'\n            - '\\pkeyhelper.dll'\n            - '\\playsndsrv.dll'\n            - '\\powrprof.dll'\n            - '\\prntvpt.dll'\n            - '\\profapi.dll'\n            - '\\proximitycommon.dll'\n            - '\\proximityservicepal.dll'\n            - '\\rasdlg.dll'\n            - '\\security.dll'\n            - '\\sppcext.dll'\n            - '\\srmtrace.dll'\n            - '\\tpmcoreprovisioning.dll'\n            - '\\umpdc.dll'\n            - '\\unattend.dll'\n            - '\\urlmon.dll'\n            - '\\vdsutil.dll'\n            - '\\version.dll'\n            - '\\winbio.dll'\n            - '\\windows.ui.immersive.dll'\n            - '\\winscard.dll'\n            - '\\winsync.dll'\n            - '\\wscapi.dll'\n            - '\\wsmsvc.dll'\n            # From https://github.com/XForceIR/SideLoadHunter/blob/main/SideLoads/README.md\n            - '\\FxsCompose.dll'\n            - '\\WfsR.dll'\n            - '\\rpchttp.dll'\n            - '\\storageusage.dll'\n            - '\\amsi.dll'\n            - '\\PrintIsolationProxy.dll'\n            - '\\msdtcVSp1res.dll'\n            - '\\rdpendp.dll'\n            - '\\dxilconv.dll'\n            - '\\utcutil.dll'\n            - '\\appraiser.dll'\n            - '\\dsound.dll'\n            - '\\DispBroker.dll'\n            - '\\FXSRESM.DLL'\n            - '\\cryptnet.dll'\n            - '\\COMRES.DLL'\n            # The DLLs below exists in \"C:\\Windows\\System32\\DriverStore\\FileRepository\\\" folder. But there is also a copy located in \"C:\\ProgramData\\Package Cache\\XXXXXXX\\Graphics\\\". If you see them being loaded from there. Please comment them out, don't add a filter for ProgramData :)\n            - '\\igdumdim64.dll'\n            - '\\igd10iumd64.dll'\n            - '\\igd12umd64.dll'\n            - '\\igdusc64.dll'\n            # Other\n            - '\\WLBSCTRL.dll'\n            - '\\TSMSISrv.dll'\n            - '\\TSVIPSrv.dll'\n            - '\\wow64log.dll'\n            - '\\WptsExtensions.dll'\n            - '\\wbemcomn.dll'\n    filter_main_generic:\n        # Note: this filter is generic on purpose to avoid insane amount of FP from legitimate third party applications. A better approach would be to baseline everything and add specific filters to avoid blind spots\n        ImageLoaded|startswith:\n            - 'C:\\Windows\\System32\\'\n            - 'C:\\Windows\\SysWOW64\\'\n            - 'C:\\Windows\\WinSxS\\'\n            - 'C:\\Windows\\SoftwareDistribution\\'\n            - 'C:\\Windows\\SystemTemp\\'\n            - 'C:\\$WINDOWS.~BT\\'\n    filter_optional_office_appvpolicy:\n        Image: 'C:\\Program Files\\Common Files\\microsoft shared\\ClickToRun\\OfficeClickToRun.exe'\n        ImageLoaded: 'C:\\Program Files\\Common Files\\microsoft shared\\ClickToRun\\AppVPolicy.dll'\n    filter_optional_azure:\n        ImageLoaded|startswith: 'C:\\Packages\\Plugins\\Microsoft.GuestConfiguration.ConfigurationforWindows\\'\n    filter_optional_dell:\n        Image|startswith:\n            - 'C:\\Program Files\\WindowsApps\\DellInc.DellSupportAssistforPCs'\n            - 'C:\\Windows\\System32\\backgroundTaskHost.exe'\n        ImageLoaded|startswith: 'C:\\Program Files\\WindowsApps\\DellInc.DellSupportAssistforPCs'\n    filter_optional_dell_wldp:\n        Image|startswith: 'C:\\Program Files\\WindowsApps\\DellInc.DellSupportAssistforPCs'\n        Image|endswith: '\\wldp.dll'\n    filter_optional_checkpoint:\n        Image|startswith:\n            - 'C:\\Program Files\\CheckPoint\\'\n            - 'C:\\Program Files (x86)\\CheckPoint\\'\n        Image|endswith: '\\SmartConsole.exe'\n        ImageLoaded|startswith:\n            - 'C:\\Program Files\\CheckPoint\\'\n            - 'C:\\Program Files (x86)\\CheckPoint\\'\n        ImageLoaded|endswith: '\\PolicyManager.dll'\n    condition: selection and not 1 of filter_main_* and not 1 of filter_optional_*\nfalsepositives:\n    - Legitimate applications loading their own versions of the DLLs mentioned in this rule\nlevel: high\n",
      "question": "DLL sideloading of DLLs usually located in system locations (System32, SysWOW64, etc.)",
      "answer": "In order to detect DLL sideloading of DLLs usually located in system locations (System32, SysWOW64, etc.), you should monitor Windows image load events for the loading of specific DLL files that typically reside in trusted system directories but are being loaded from unexpected locations. This process involves tracking the loading of a comprehensive list of DLLs, including but not limited to 'shfolder.dll', 'activeds.dll', 'adsldpc.dll', and many others, which are commonly associated with system functions and processes. It is important to apply filters to exclude legitimate loading events from common system directories such as 'C:\\Windows\\System32\\', 'C:\\Windows\\SysWOW64\\', and others, to minimize false positives. Additionally, pay attention to filters excluding legitimate uses of some DLLs by specific applications, like Office ClickToRun or Dell SupportAssist, as well as certain operations within Azure environments or software from vendors like CheckPoint. This approach aims to spotlight instances where these DLL files might be loaded from irregular locations, a technique often employed by adversaries to execute malicious code by leveraging the trust associated with these system DLLs. Monitoring for such activity with a high level of scrutiny allows for the identification of potential sideloading attempts, which could indicate a breach or an ongoing attack without raising an excessive number of false alarms."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    product: rpc_firewall\n    category: application\n    definition: 'Requirements: install and apply the RPC Firewall to all processes with \"audit:true action:block uuid:338cd001-2244-31f1-aaaa-900038001003\"'\ndetection:\n    selection:\n        EventLog: RPCFW\n        EventID: 3\n        InterfaceUuid: 338cd001-2244-31f1-aaaa-900038001003\n        OpNum:\n            - 6\n            - 7\n            - 8\n            - 13\n            - 18\n            - 19\n            - 21\n            - 22\n            - 23\n            - 35\n    condition: selection\nfalsepositives:\n    - Remote administration of registry values\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect remote RPC calls to modify the registry and possible execute code\n\nHere is how  the given sigma rule operates: In order to detect remote RPC calls to modify the registry and possibly execute code, you should monitor application logs generated by the RPC Firewall. Ensure that the RPC Firewall is installed and configured to block and audit all processes matching the UUID \"338cd001-2244-31f1-aaaa-900038001003\". Specifically, look for logs with the source \"RPCFW\" and an EventID of 3, indicating a monitored event occurred. Focus on the operations identified by the OpNum values 6, 7, 8, 13, 18, 19, 21, 22, 23, and 35. These operation numbers are critical as they are associated with attempts to remotely call procedures that could modify registry values or execute code on the target machine. Be aware that legitimate remote administration activities may also trigger these alerts, which are identified as potential false positives, specifically remote administration of registry values. The urgency level for these detections is considered high due to the potential impact and the associated attack tactics which include execution and persistence through registry manipulation.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: rpc_firewall\n    category: application\n    definition: 'Requirements: install and apply the RPC Firewall to all processes with \"audit:true action:block uuid:338cd001-2244-31f1-aaaa-900038001003\"'\ndetection:\n    selection:\n        EventLog: RPCFW\n        EventID: 3\n        InterfaceUuid: 338cd001-2244-31f1-aaaa-900038001003\n        OpNum:\n            - 6\n            - 7\n            - 8\n            - 13\n            - 18\n            - 19\n            - 21\n            - 22\n            - 23\n            - 35\n    condition: selection\nfalsepositives:\n    - Remote administration of registry values\nlevel: high\n",
      "question": "remote RPC calls to modify the registry and possible execute code",
      "answer": "In order to detect remote RPC calls to modify the registry and possibly execute code, you should monitor application logs generated by the RPC Firewall. Ensure that the RPC Firewall is installed and configured to block and audit all processes matching the UUID \"338cd001-2244-31f1-aaaa-900038001003\". Specifically, look for logs with the source \"RPCFW\" and an EventID of 3, indicating a monitored event occurred. Focus on the operations identified by the OpNum values 6, 7, 8, 13, 18, 19, 21, 22, 23, and 35. These operation numbers are critical as they are associated with attempts to remotely call procedures that could modify registry values or execute code on the target machine. Be aware that legitimate remote administration activities may also trigger these alerts, which are identified as potential false positives, specifically remote administration of registry values. The urgency level for these detections is considered high due to the potential impact and the associated attack tactics which include execution and persistence through registry manipulation."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting potential beaconing activity to domains used in 0day attacks on iOS devices and revealed by Kaspersky and the FSB.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential beaconing activity to domains used in 0day attacks on iOS devices and revealed by Kaspersky and the FSB, you should: Monitor proxy logs for traffic to a specific set of domains known to be associated with these malicious activities. The domains to watch include 'addatamarket.net', 'ans7tv.net', 'anstv.net', 'backuprabbit.com', 'businessvideonews.com', 'cloudsponcer.com', 'datamarketplace.net', 'growthtransport.com', 'mobilegamerstats.com', 'snoweeanalytics.com', 'tagclick-cdn.com', 'topographyupdates.com', 'unlimitedteacup.com', 'virtuallaughing.com', and 'web-trackers.com'. It's critical to investigate any hits on these domains as they may indicate a high probability of a compromised iOS device communicating with attacker-controlled servers, potentially for command and control or data exfiltration purposes. Be aware, the known false positives for this detection method are currently unknown, indicating any match should be taken with significant concern and promptly investigated to ensure the security of the impacted device and wider network.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: proxy\ndetection:\n    selection:\n        cs-host|contains:\n            - 'addatamarket.net'\n            - 'ans7tv.net'\n            - 'anstv.net'\n            - 'backuprabbit.com'\n            - 'businessvideonews.com'\n            - 'cloudsponcer.com'\n            - 'datamarketplace.net'\n            - 'growthtransport.com'\n            - 'mobilegamerstats.com'\n            - 'snoweeanalytics.com'\n            - 'tagclick-cdn.com'\n            - 'topographyupdates.com'\n            - 'unlimitedteacup.com'\n            - 'virtuallaughing.com'\n            - 'web-trackers.com'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: proxy\ndetection:\n    selection:\n        cs-host|contains:\n            - 'addatamarket.net'\n            - 'ans7tv.net'\n            - 'anstv.net'\n            - 'backuprabbit.com'\n            - 'businessvideonews.com'\n            - 'cloudsponcer.com'\n            - 'datamarketplace.net'\n            - 'growthtransport.com'\n            - 'mobilegamerstats.com'\n            - 'snoweeanalytics.com'\n            - 'tagclick-cdn.com'\n            - 'topographyupdates.com'\n            - 'unlimitedteacup.com'\n            - 'virtuallaughing.com'\n            - 'web-trackers.com'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "potential beaconing activity to domains used in 0day attacks on iOS devices and revealed by Kaspersky and the FSB",
      "answer": "In order to detect potential beaconing activity to domains used in 0day attacks on iOS devices and revealed by Kaspersky and the FSB, you should: Monitor proxy logs for traffic to a specific set of domains known to be associated with these malicious activities. The domains to watch include 'addatamarket.net', 'ans7tv.net', 'anstv.net', 'backuprabbit.com', 'businessvideonews.com', 'cloudsponcer.com', 'datamarketplace.net', 'growthtransport.com', 'mobilegamerstats.com', 'snoweeanalytics.com', 'tagclick-cdn.com', 'topographyupdates.com', 'unlimitedteacup.com', 'virtuallaughing.com', and 'web-trackers.com'. It's critical to investigate any hits on these domains as they may indicate a high probability of a compromised iOS device communicating with attacker-controlled servers, potentially for command and control or data exfiltration purposes. Be aware, the known false positives for this detection method are currently unknown, indicating any match should be taken with significant concern and promptly investigated to ensure the security of the impacted device and wider network."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting potential powershell Base64 encoded Shellcode.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential powershell Base64 encoded Shellcode, you should focus on monitoring the creation of processes within Windows. Specifically, look for instances where the command line execution includes certain Base64 encoded strings, such as 'OiCAAAAYInlM' or 'OiJAAAAYInlM'. These strings are indicative of an attempt to run encoded shellcode via PowerShell, a technique often exploited by attackers to execute arbitrary code without triggering traditional signature-based detections. It's important to note that while this detection provides a valuable security insight, the possibility of false positives exists and is categorized as unknown. The severity level of this detection is considered medium.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - 'OiCAAAAYInlM'\n            - 'OiJAAAAYInlM'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - 'OiCAAAAYInlM'\n            - 'OiJAAAAYInlM'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "potential powershell Base64 encoded Shellcode",
      "answer": "In order to detect potential powershell Base64 encoded Shellcode, you should focus on monitoring the creation of processes within Windows. Specifically, look for instances where the command line execution includes certain Base64 encoded strings, such as 'OiCAAAAYInlM' or 'OiJAAAAYInlM'. These strings are indicative of an attempt to run encoded shellcode via PowerShell, a technique often exploited by attackers to execute arbitrary code without triggering traditional signature-based detections. It's important to note that while this detection provides a valuable security insight, the possibility of false positives exists and is categorized as unknown. The severity level of this detection is considered medium."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: process_access\n    product: windows\ndetection:\n    selection:\n        TargetImage|endswith: '\\lsass.exe'\n        GrantedAccess|endswith:\n            - '10'\n            - '30'\n            - '50'\n            - '70'\n            - '90'\n            - 'B0'\n            - 'D0'\n            - 'F0'\n            - '18'\n            - '38'\n            - '58'\n            - '78'\n            - '98'\n            - 'B8'\n            - 'D8'\n            - 'F8'\n            - '1A'\n            - '3A'\n            - '5A'\n            - '7A'\n            - '9A'\n            - 'BA'\n            - 'DA'\n            - 'FA'\n            - '0x14C2'  # https://github.com/b4rtik/ATPMiniDump/blob/76304f93b390af3bb66e4f451ca16562a479bdc9/ATPMiniDump/ATPMiniDump.c\n            - 'FF'\n        SourceImage|contains:\n            - '\\Temp\\'\n            - '\\Users\\Public\\'\n            - '\\PerfLogs\\'\n            - '\\AppData\\'\n            - '\\Temporary'\n    filter_optional_generic_appdata:\n        SourceImage|startswith: 'C:\\Users\\'\n        SourceImage|contains: '\\AppData\\Local\\'\n        SourceImage|endswith:\n            - '\\Microsoft VS Code\\Code.exe'\n            - '\\software_reporter_tool.exe'\n            - '\\DropboxUpdate.exe'\n            - '\\MBAMInstallerService.exe'\n            - '\\WebexMTA.exe'\n            - '\\WebEx\\WebexHost.exe'\n            - '\\JetBrains\\Toolbox\\bin\\jetbrains-toolbox.exe'\n        GrantedAccess: '0x410'\n    filter_optional_dropbox_1:\n        SourceImage|startswith: 'C:\\Windows\\Temp\\'\n        SourceImage|endswith: '.tmp\\DropboxUpdate.exe'\n        GrantedAccess:\n            - '0x410'\n            - '0x1410'\n    filter_optional_dropbox_2:\n        SourceImage|startswith: 'C:\\Users\\'\n        SourceImage|contains: '\\AppData\\Local\\Temp\\'\n        SourceImage|endswith: '.tmp\\DropboxUpdate.exe'\n        GrantedAccess: '0x1410'\n    filter_optional_dropbox_3:\n        SourceImage|startswith:\n            - 'C:\\Program Files (x86)\\Dropbox\\'\n            - 'C:\\Program Files\\Dropbox\\'\n        SourceImage|endswith: '\\DropboxUpdate.exe'\n        GrantedAccess: '0x1410'\n    filter_optional_nextron:\n        SourceImage|startswith:\n            - 'C:\\Windows\\Temp\\asgard2-agent\\'\n            - 'C:\\Windows\\Temp\\asgard2-agent-sc\\'\n        SourceImage|endswith:\n            - '\\thor64.exe'\n            - '\\thor.exe'\n            - '\\aurora-agent-64.exe'\n            - '\\aurora-agent.exe'\n        GrantedAccess:\n            - '0x1fffff'\n            - '0x1010'\n            - '0x101010'\n    filter_optional_ms_products:\n        SourceImage|startswith: 'C:\\Users\\'\n        SourceImage|contains|all:\n            - '\\AppData\\Local\\Temp\\'\n            - '\\vs_bootstrapper_'\n        GrantedAccess: '0x1410'\n    filter_optional_chrome_update:\n        SourceImage|startswith: 'C:\\Program Files (x86)\\Google\\Temp\\'\n        SourceImage|endswith: '.tmp\\GoogleUpdate.exe'\n        GrantedAccess:\n            - '0x410'\n            - '0x1410'\n    filter_optional_keybase:\n        SourceImage|startswith: 'C:\\Users\\'\n        SourceImage|endswith: \\AppData\\Local\\Keybase\\keybase.exe\n        GrantedAccess: '0x1fffff'\n    filter_optional_avira:\n        SourceImage|contains: '\\AppData\\Local\\Temp\\is-'\n        SourceImage|endswith: '.tmp\\avira_system_speedup.tmp'\n        GrantedAccess: '0x1410'\n    filter_optional_viberpc_updater:\n        SourceImage|startswith: 'C:\\Users\\'\n        SourceImage|contains: '\\AppData\\Roaming\\ViberPC\\'\n        SourceImage|endswith: '\\updater.exe'\n        TargetImage|endswith: '\\winlogon.exe'\n        GrantedAccess: '0x1fffff'\n    filter_optional_adobe_arm_helper:\n        SourceImage|startswith:  # Example path: 'C:\\Program Files (x86)\\Common Files\\Adobe\\ARM\\1.0\\Temp\\2092867405\\AdobeARMHelper.exe'\n            - 'C:\\Program Files\\Common Files\\Adobe\\ARM\\'\n            - 'C:\\Program Files (x86)\\Common Files\\Adobe\\ARM\\'\n        SourceImage|endswith: '\\AdobeARMHelper.exe'\n        GrantedAccess: '0x1410'\n    condition: selection and not 1 of filter_optional_*\nfields:\n    - User\n    - SourceImage\n    - GrantedAccess\nfalsepositives:\n    - Updaters and installers are typical false positives. Apply custom filters depending on your environment\nlevel: medium\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect process access to LSASS memory with suspicious access flags and from a potentially suspicious folder\n\nHere is how  the given sigma rule operates: In order to detect process access to LSASS memory with suspicious access flags and from a potentially suspicious folder, you should: Focus on monitoring process access within Windows operating systems, specifically observing any process that attempts to access the memory of the Local Security Authority Subsystem Service (LSASS) executable. This observation should be narrowed down to access attempts where the target image ends with '\\lsass.exe' and the granted access flags end with a set of specific hexadecimal values which could indicate suspicious activities such as unauthorized memory read or write operations.\n\nFurther refine the detection by scrutinizing the source of the access attempt, particularly if it originates from directories often used by legitimate programs but can be abused by attackers, like temporary folders or public user folders. These include paths containing '\\Temp\\', '\\Users\\Public\\', '\\PerfLogs\\', '\\AppData\\', and '\\Temporary'. The detection becomes more credible if these access attempts do not originate from software updaters or installers known to occasionally perform similar actions for legitimate reasons, such as updates from Visual Studio Code, Dropbox, the Microsoft Bootstrapper for Visual Studio, the Google Chrome updater, Keybase, or antivirus software updates like Avira, as these are typically marked as false positives.\n\nTo successfully implement this detection strategy, concentrate on logs that fall under the process access category for Windows products. Tag this activity with relevant MITRE ATT&CK tactics and techniques associated with credential access attempts, especially those attempting to access critical system processes memory like LSASS for credential dumping purposes. Pay attention to access attempts that do not align with expected behavior from known and trusted applications by using exclusions for certain paths and access patterns that are associated with known benign software behavior, thereby reducing false positives. Monitor fields such as User, SourceImage, and GrantedAccess in your log data to effectively identify and respond to potential threats.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_access\n    product: windows\ndetection:\n    selection:\n        TargetImage|endswith: '\\lsass.exe'\n        GrantedAccess|endswith:\n            - '10'\n            - '30'\n            - '50'\n            - '70'\n            - '90'\n            - 'B0'\n            - 'D0'\n            - 'F0'\n            - '18'\n            - '38'\n            - '58'\n            - '78'\n            - '98'\n            - 'B8'\n            - 'D8'\n            - 'F8'\n            - '1A'\n            - '3A'\n            - '5A'\n            - '7A'\n            - '9A'\n            - 'BA'\n            - 'DA'\n            - 'FA'\n            - '0x14C2'  # https://github.com/b4rtik/ATPMiniDump/blob/76304f93b390af3bb66e4f451ca16562a479bdc9/ATPMiniDump/ATPMiniDump.c\n            - 'FF'\n        SourceImage|contains:\n            - '\\Temp\\'\n            - '\\Users\\Public\\'\n            - '\\PerfLogs\\'\n            - '\\AppData\\'\n            - '\\Temporary'\n    filter_optional_generic_appdata:\n        SourceImage|startswith: 'C:\\Users\\'\n        SourceImage|contains: '\\AppData\\Local\\'\n        SourceImage|endswith:\n            - '\\Microsoft VS Code\\Code.exe'\n            - '\\software_reporter_tool.exe'\n            - '\\DropboxUpdate.exe'\n            - '\\MBAMInstallerService.exe'\n            - '\\WebexMTA.exe'\n            - '\\WebEx\\WebexHost.exe'\n            - '\\JetBrains\\Toolbox\\bin\\jetbrains-toolbox.exe'\n        GrantedAccess: '0x410'\n    filter_optional_dropbox_1:\n        SourceImage|startswith: 'C:\\Windows\\Temp\\'\n        SourceImage|endswith: '.tmp\\DropboxUpdate.exe'\n        GrantedAccess:\n            - '0x410'\n            - '0x1410'\n    filter_optional_dropbox_2:\n        SourceImage|startswith: 'C:\\Users\\'\n        SourceImage|contains: '\\AppData\\Local\\Temp\\'\n        SourceImage|endswith: '.tmp\\DropboxUpdate.exe'\n        GrantedAccess: '0x1410'\n    filter_optional_dropbox_3:\n        SourceImage|startswith:\n            - 'C:\\Program Files (x86)\\Dropbox\\'\n            - 'C:\\Program Files\\Dropbox\\'\n        SourceImage|endswith: '\\DropboxUpdate.exe'\n        GrantedAccess: '0x1410'\n    filter_optional_nextron:\n        SourceImage|startswith:\n            - 'C:\\Windows\\Temp\\asgard2-agent\\'\n            - 'C:\\Windows\\Temp\\asgard2-agent-sc\\'\n        SourceImage|endswith:\n            - '\\thor64.exe'\n            - '\\thor.exe'\n            - '\\aurora-agent-64.exe'\n            - '\\aurora-agent.exe'\n        GrantedAccess:\n            - '0x1fffff'\n            - '0x1010'\n            - '0x101010'\n    filter_optional_ms_products:\n        SourceImage|startswith: 'C:\\Users\\'\n        SourceImage|contains|all:\n            - '\\AppData\\Local\\Temp\\'\n            - '\\vs_bootstrapper_'\n        GrantedAccess: '0x1410'\n    filter_optional_chrome_update:\n        SourceImage|startswith: 'C:\\Program Files (x86)\\Google\\Temp\\'\n        SourceImage|endswith: '.tmp\\GoogleUpdate.exe'\n        GrantedAccess:\n            - '0x410'\n            - '0x1410'\n    filter_optional_keybase:\n        SourceImage|startswith: 'C:\\Users\\'\n        SourceImage|endswith: \\AppData\\Local\\Keybase\\keybase.exe\n        GrantedAccess: '0x1fffff'\n    filter_optional_avira:\n        SourceImage|contains: '\\AppData\\Local\\Temp\\is-'\n        SourceImage|endswith: '.tmp\\avira_system_speedup.tmp'\n        GrantedAccess: '0x1410'\n    filter_optional_viberpc_updater:\n        SourceImage|startswith: 'C:\\Users\\'\n        SourceImage|contains: '\\AppData\\Roaming\\ViberPC\\'\n        SourceImage|endswith: '\\updater.exe'\n        TargetImage|endswith: '\\winlogon.exe'\n        GrantedAccess: '0x1fffff'\n    filter_optional_adobe_arm_helper:\n        SourceImage|startswith:  # Example path: 'C:\\Program Files (x86)\\Common Files\\Adobe\\ARM\\1.0\\Temp\\2092867405\\AdobeARMHelper.exe'\n            - 'C:\\Program Files\\Common Files\\Adobe\\ARM\\'\n            - 'C:\\Program Files (x86)\\Common Files\\Adobe\\ARM\\'\n        SourceImage|endswith: '\\AdobeARMHelper.exe'\n        GrantedAccess: '0x1410'\n    condition: selection and not 1 of filter_optional_*\nfields:\n    - User\n    - SourceImage\n    - GrantedAccess\nfalsepositives:\n    - Updaters and installers are typical false positives. Apply custom filters depending on your environment\nlevel: medium\n",
      "question": "process access to LSASS memory with suspicious access flags and from a potentially suspicious folder",
      "answer": "In order to detect process access to LSASS memory with suspicious access flags and from a potentially suspicious folder, you should: Focus on monitoring process access within Windows operating systems, specifically observing any process that attempts to access the memory of the Local Security Authority Subsystem Service (LSASS) executable. This observation should be narrowed down to access attempts where the target image ends with '\\lsass.exe' and the granted access flags end with a set of specific hexadecimal values which could indicate suspicious activities such as unauthorized memory read or write operations.\n\nFurther refine the detection by scrutinizing the source of the access attempt, particularly if it originates from directories often used by legitimate programs but can be abused by attackers, like temporary folders or public user folders. These include paths containing '\\Temp\\', '\\Users\\Public\\', '\\PerfLogs\\', '\\AppData\\', and '\\Temporary'. The detection becomes more credible if these access attempts do not originate from software updaters or installers known to occasionally perform similar actions for legitimate reasons, such as updates from Visual Studio Code, Dropbox, the Microsoft Bootstrapper for Visual Studio, the Google Chrome updater, Keybase, or antivirus software updates like Avira, as these are typically marked as false positives.\n\nTo successfully implement this detection strategy, concentrate on logs that fall under the process access category for Windows products. Tag this activity with relevant MITRE ATT&CK tactics and techniques associated with credential access attempts, especially those attempting to access critical system processes memory like LSASS for credential dumping purposes. Pay attention to access attempts that do not align with expected behavior from known and trusted applications by using exclusions for certain paths and access patterns that are associated with known benign software behavior, thereby reducing false positives. Monitor fields such as User, SourceImage, and GrantedAccess in your log data to effectively identify and respond to potential threats."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting creation of a named pipe matching a pattern used by CobaltStrike Malleable C2 profiles.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the creation of a named pipe matching a pattern used by CobaltStrike Malleable C2 profiles, you should monitor Windows named pipe creation events. Specifically, focus on events that exhibit the creation of named pipes with names that closely match known patterns utilized by Cobalt Strike for its Command and Control (C2) communication, as indicated by regular expressions. These patterns include a variation of specific strings and hexadecimal characters, indicating potential malicious activities. The detection encompasses a wide range of named pipe patterns such as `\\\\mojo\\.5688\\.8052\\.[0-9a-f]{2}`, amongst others, which are indicative of Cobalt Strike activities. Due to the critical nature of such detections, it\u2019s imperative to have logging for Named Pipe Events enabled via Sysmon configuration to effectively capture Event ID 17 and Event ID 18, ensuring comprehensive monitoring and alerting for potential Cobalt Strike C2 communication attempts within the environment.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: pipe_created\n    definition: 'Note that you have to configure logging for Named Pipe Events in Sysmon config (Event ID 17 and Event ID 18). The basic configuration is in popular sysmon configuration (https://github.com/SwiftOnSecurity/sysmon-config), but it is worth verifying. You can also use other repo, e.g. https://github.com/Neo23x0/sysmon-config, https://github.com/olafhartong/sysmon-modular You can also use other repo, e.g. https://github.com/Neo23x0/sysmon-config, https://github.com/olafhartong/sysmon-modular. How to test detection? You can always use Cobalt Strike, but also you can check powershell script from this site https://svch0st.medium.com/guide-to-named-pipes-and-hunting-for-cobalt-strike-pipes-dc46b2c5f575'\ndetection:\n    selection:\n        - PipeName|re: '\\\\mojo\\.5688\\.8052\\.(?:183894939787088877|35780273329370473)[0-9a-f]{2}'\n        - PipeName|re: '\\\\wkssvc_?[0-9a-f]{2}'\n        - PipeName|re: '\\\\ntsvcs[0-9a-f]{2}'\n        - PipeName|re: '\\\\DserNamePipe[0-9a-f]{2}'\n        - PipeName|re: '\\\\SearchTextHarvester[0-9a-f]{2}'\n        - PipeName|re: '\\\\mypipe-(?:f|h)[0-9a-f]{2}'\n        - PipeName|re: '\\\\windows\\.update\\.manager[0-9a-f]{2,3}'\n        - PipeName|re: '\\\\ntsvcs_[0-9a-f]{2}'\n        - PipeName|re: '\\\\scerpc_?[0-9a-f]{2}'\n        - PipeName|re: '\\\\PGMessagePipe[0-9a-f]{2}'\n        - PipeName|re: '\\\\MsFteWds[0-9a-f]{2}'\n        - PipeName|re: '\\\\f4c3[0-9a-f]{2}'\n        - PipeName|re: '\\\\fullduplex_[0-9a-f]{2}'\n        - PipeName|re: '\\\\msrpc_[0-9a-f]{4}'\n        - PipeName|re: '\\\\win\\\\msrpc_[0-9a-f]{2}'\n        - PipeName|re: '\\\\f53f[0-9a-f]{2}'\n        - PipeName|re: '\\\\rpc_[0-9a-f]{2}'\n        - PipeName|re: '\\\\spoolss_[0-9a-f]{2}'\n        - PipeName|re: '\\\\Winsock2\\\\CatalogChangeListener-[0-9a-f]{3}-0,'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: pipe_created\n    definition: 'Note that you have to configure logging for Named Pipe Events in Sysmon config (Event ID 17 and Event ID 18). The basic configuration is in popular sysmon configuration (https://github.com/SwiftOnSecurity/sysmon-config), but it is worth verifying. You can also use other repo, e.g. https://github.com/Neo23x0/sysmon-config, https://github.com/olafhartong/sysmon-modular You can also use other repo, e.g. https://github.com/Neo23x0/sysmon-config, https://github.com/olafhartong/sysmon-modular. How to test detection? You can always use Cobalt Strike, but also you can check powershell script from this site https://svch0st.medium.com/guide-to-named-pipes-and-hunting-for-cobalt-strike-pipes-dc46b2c5f575'\ndetection:\n    selection:\n        - PipeName|re: '\\\\mojo\\.5688\\.8052\\.(?:183894939787088877|35780273329370473)[0-9a-f]{2}'\n        - PipeName|re: '\\\\wkssvc_?[0-9a-f]{2}'\n        - PipeName|re: '\\\\ntsvcs[0-9a-f]{2}'\n        - PipeName|re: '\\\\DserNamePipe[0-9a-f]{2}'\n        - PipeName|re: '\\\\SearchTextHarvester[0-9a-f]{2}'\n        - PipeName|re: '\\\\mypipe-(?:f|h)[0-9a-f]{2}'\n        - PipeName|re: '\\\\windows\\.update\\.manager[0-9a-f]{2,3}'\n        - PipeName|re: '\\\\ntsvcs_[0-9a-f]{2}'\n        - PipeName|re: '\\\\scerpc_?[0-9a-f]{2}'\n        - PipeName|re: '\\\\PGMessagePipe[0-9a-f]{2}'\n        - PipeName|re: '\\\\MsFteWds[0-9a-f]{2}'\n        - PipeName|re: '\\\\f4c3[0-9a-f]{2}'\n        - PipeName|re: '\\\\fullduplex_[0-9a-f]{2}'\n        - PipeName|re: '\\\\msrpc_[0-9a-f]{4}'\n        - PipeName|re: '\\\\win\\\\msrpc_[0-9a-f]{2}'\n        - PipeName|re: '\\\\f53f[0-9a-f]{2}'\n        - PipeName|re: '\\\\rpc_[0-9a-f]{2}'\n        - PipeName|re: '\\\\spoolss_[0-9a-f]{2}'\n        - PipeName|re: '\\\\Winsock2\\\\CatalogChangeListener-[0-9a-f]{3}-0,'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: critical\n",
      "question": "creation of a named pipe matching a pattern used by CobaltStrike Malleable C2 profiles",
      "answer": "In order to detect the creation of a named pipe matching a pattern used by CobaltStrike Malleable C2 profiles, you should monitor Windows named pipe creation events. Specifically, focus on events that exhibit the creation of named pipes with names that closely match known patterns utilized by Cobalt Strike for its Command and Control (C2) communication, as indicated by regular expressions. These patterns include a variation of specific strings and hexadecimal characters, indicating potential malicious activities. The detection encompasses a wide range of named pipe patterns such as `\\\\mojo\\.5688\\.8052\\.[0-9a-f]{2}`, amongst others, which are indicative of Cobalt Strike activities. Due to the critical nature of such detections, it\u2019s imperative to have logging for Named Pipe Events enabled via Sysmon configuration to effectively capture Event ID 17 and Event ID 18, ensuring comprehensive monitoring and alerting for potential Cobalt Strike C2 communication attempts within the environment."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_tshark:\n        Image|endswith: '\\tshark.exe'\n        CommandLine|contains: '-i'\n    selection_windump:\n        Image|endswith: '\\windump.exe'\n    condition: 1 of selection_*\nfalsepositives:\n    - Legitimate administration activity to troubleshoot network issues\nlevel: medium\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect potential network sniffing via use of network tools such as \"tshark\", \"windump\".\nNetwork sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection.\nAn adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data.\n\n\nHere is how  the given sigma rule operates: In order to detect potential network sniffing via use of network tools such as \"tshark\", \"windump\", you should: Focus on capturing process creation events in Windows environments. Look for instances where executables ending in '\\tshark.exe' or '\\windump.exe' are launched, particularly those that include the '-i' command line argument, which suggests interfacing with network devices. This activity is often indicative of an adversary's attempt to monitor or capture network traffic, as tools like \"tshark\" and \"windump\" are capable of placing a network interface into promiscuous mode or using span ports for capturing traffic. It's important to consider that such detections might also be triggered by legitimate network troubleshooting efforts by administrators, hence the level of alert is set to medium. Identifying the use of these tools is crucial for thwarting or understanding espionage and credential theft tactics, as the unauthorized acquisition and analysis of network traffic can provide adversaries with sensitive information.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_tshark:\n        Image|endswith: '\\tshark.exe'\n        CommandLine|contains: '-i'\n    selection_windump:\n        Image|endswith: '\\windump.exe'\n    condition: 1 of selection_*\nfalsepositives:\n    - Legitimate administration activity to troubleshoot network issues\nlevel: medium\n",
      "question": "potential network sniffing via use of network tools such as \"tshark\", \"windump\".\nNetwork sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection.\nAn adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data.\n",
      "answer": "In order to detect potential network sniffing via use of network tools such as \"tshark\", \"windump\", you should: Focus on capturing process creation events in Windows environments. Look for instances where executables ending in '\\tshark.exe' or '\\windump.exe' are launched, particularly those that include the '-i' command line argument, which suggests interfacing with network devices. This activity is often indicative of an adversary's attempt to monitor or capture network traffic, as tools like \"tshark\" and \"windump\" are capable of placing a network interface into promiscuous mode or using span ports for capturing traffic. It's important to consider that such detections might also be triggered by legitimate network troubleshooting efforts by administrators, hence the level of alert is set to medium. Identifying the use of these tools is crucial for thwarting or understanding espionage and credential theft tactics, as the unauthorized acquisition and analysis of network traffic can provide adversaries with sensitive information."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting A General detection for specific decompress commands in PowerShell logs. This could be an adversary decompressing files..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a potential adversary decompressing files using specific commands in PowerShell logs, you should: Focus on monitoring the PowerShell module logs within Windows environments. Specifically, look for occurrences where the 'Expand-Archive' command is utilized, as it indicates the extraction or decompression of file archives. This action is noteworthy and categorized as informational because it could suggest an adversary is deploying or accessing compressed files possibly for malicious purposes. It is crucial to track such activities, although determining them as malicious with certainty may require additional context due to the possibility of legitimate administrative use.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_module\n    definition: 0ad03ef1-f21b-4a79-8ce8-e6900c54b65b\ndetection:\n    selection_4103:\n        Payload|contains: 'Expand-Archive'\n    condition: selection_4103\nfalsepositives:\n    - Unknown\nlevel: informational\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_module\n    definition: 0ad03ef1-f21b-4a79-8ce8-e6900c54b65b\ndetection:\n    selection_4103:\n        Payload|contains: 'Expand-Archive'\n    condition: selection_4103\nfalsepositives:\n    - Unknown\nlevel: informational\n",
      "question": "A General detection for specific decompress commands in PowerShell logs. This could be an adversary decompressing files.",
      "answer": "In order to detect a potential adversary decompressing files using specific commands in PowerShell logs, you should: Focus on monitoring the PowerShell module logs within Windows environments. Specifically, look for occurrences where the 'Expand-Archive' command is utilized, as it indicates the extraction or decompression of file archives. This action is noteworthy and categorized as informational because it could suggest an adversary is deploying or accessing compressed files possibly for malicious purposes. It is crucial to track such activities, although determining them as malicious with certainty may require additional context due to the possibility of legitimate administrative use."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting SharpLdapWhoami, a whoami alternative that queries the LDAP service on a domain controller.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect SharpLdapWhoami, a whoami alternative that queries the LDAP service on a domain controller, you should: Monitor process creation events on Windows systems for any instances of the SharpLdapWhoami.exe application. This detection focuses on instances where the executable file's name ends with '\\SharpLdapWhoami.exe'. Additionally, even if the file has been renamed post-compilation, you should look for characteristics in the executable such as the 'OriginalFileName' containing the string 'SharpLdapWhoami' or the product name being 'SharpLdapWhoami'. Furthermore, the command line flags ending with '/method:ntlm', '/method:kerb', '/method:nego', '/m:nego', '/m:ntlm', and '/m:kerb' are key identifiers. The condition for an alert is triggered if any one of these detection criteria are met. It is important to note that there may be false positives from programs that use the same command line flags. The severity of this detection is high due to the potential misuse of the LDAP query functionality to gather sensitive information about the domain environment.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_name:\n        Image|endswith: '\\SharpLdapWhoami.exe'\n    selection_pe: # in case the file has been renamed after compilation\n        - OriginalFileName|contains: 'SharpLdapWhoami'\n        - Product: 'SharpLdapWhoami'\n    selection_flags1:\n        CommandLine|endswith:\n            - ' /method:ntlm'\n            - ' /method:kerb'\n            - ' /method:nego'\n            - ' /m:nego'\n            - ' /m:ntlm'\n            - ' /m:kerb'\n    condition: 1 of selection*\nfalsepositives:\n    - Programs that use the same command line flags\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_name:\n        Image|endswith: '\\SharpLdapWhoami.exe'\n    selection_pe: # in case the file has been renamed after compilation\n        - OriginalFileName|contains: 'SharpLdapWhoami'\n        - Product: 'SharpLdapWhoami'\n    selection_flags1:\n        CommandLine|endswith:\n            - ' /method:ntlm'\n            - ' /method:kerb'\n            - ' /method:nego'\n            - ' /m:nego'\n            - ' /m:ntlm'\n            - ' /m:kerb'\n    condition: 1 of selection*\nfalsepositives:\n    - Programs that use the same command line flags\nlevel: high\n",
      "question": "SharpLdapWhoami, a whoami alternative that queries the LDAP service on a domain controller",
      "answer": "In order to detect SharpLdapWhoami, a whoami alternative that queries the LDAP service on a domain controller, you should: Monitor process creation events on Windows systems for any instances of the SharpLdapWhoami.exe application. This detection focuses on instances where the executable file's name ends with '\\SharpLdapWhoami.exe'. Additionally, even if the file has been renamed post-compilation, you should look for characteristics in the executable such as the 'OriginalFileName' containing the string 'SharpLdapWhoami' or the product name being 'SharpLdapWhoami'. Furthermore, the command line flags ending with '/method:ntlm', '/method:kerb', '/method:nego', '/m:nego', '/m:ntlm', and '/m:kerb' are key identifiers. The condition for an alert is triggered if any one of these detection criteria are met. It is important to note that there may be false positives from programs that use the same command line flags. The severity of this detection is high due to the potential misuse of the LDAP query functionality to gather sensitive information about the domain environment."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    product: windows\n    category: image_load\ndetection:\n    selection:\n        Image|endswith: '\\msdtc.exe'\n        ImageLoaded: 'C:\\Windows\\oci.dll'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect use of Pingback backdoor that creates ICMP tunnel for C2 as described in the trustwave report\n\nHere is how  the given sigma rule operates: In order to detect the use of Pingback backdoor that creates ICMP tunnel for C2 as described in the trustwave report, you should focus on monitoring image loading activities within the Windows operating system. Specifically, look out for instances where the Microsoft Distributed Transaction Coordinator (MSDTC) executable file, identified as 'msdtc.exe', is involved in the activity. Simultaneously, the loading of the 'oci.dll' file from the specific path 'C:\\Windows\\' should raise an alert. The combination of these two activities happening concurrently indicates a high chance of the Pingback backdoor being utilized to establish an ICMP tunnel for command and control (C2) communication. Given the nature of this attack, false positive alerts are unlikely, highlighting the importance of taking immediate action upon detection. The associated tactics and techniques for this activity include \"Execution\" through \"User Execution\" and \"Command and Control\" via different means.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: image_load\ndetection:\n    selection:\n        Image|endswith: '\\msdtc.exe'\n        ImageLoaded: 'C:\\Windows\\oci.dll'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "use of Pingback backdoor that creates ICMP tunnel for C2 as described in the trustwave report",
      "answer": "In order to detect the use of Pingback backdoor that creates ICMP tunnel for C2 as described in the trustwave report, you should focus on monitoring image loading activities within the Windows operating system. Specifically, look out for instances where the Microsoft Distributed Transaction Coordinator (MSDTC) executable file, identified as 'msdtc.exe', is involved in the activity. Simultaneously, the loading of the 'oci.dll' file from the specific path 'C:\\Windows\\' should raise an alert. The combination of these two activities happening concurrently indicates a high chance of the Pingback backdoor being utilized to establish an ICMP tunnel for command and control (C2) communication. Given the nature of this attack, false positive alerts are unlikely, highlighting the importance of taking immediate action upon detection. The associated tactics and techniques for this activity include \"Execution\" through \"User Execution\" and \"Command and Control\" via different means."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\sqlservr.exe'\n        Image|endswith:\n            # You can add other uncommon or suspicious processes\n            - '\\bash.exe'\n            - '\\bitsadmin.exe'\n            - '\\cmd.exe'\n            - '\\netstat.exe'\n            - '\\nltest.exe'\n            - '\\ping.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\regsvr32.exe'\n            - '\\rundll32.exe'\n            - '\\sh.exe'\n            - '\\systeminfo.exe'\n            - '\\tasklist.exe'\n            - '\\wsl.exe'\n    filter_optional_datev:\n        ParentImage|startswith: 'C:\\Program Files\\Microsoft SQL Server\\'\n        ParentImage|endswith: 'DATEV_DBENGINE\\MSSQL\\Binn\\sqlservr.exe'\n        Image: 'C:\\Windows\\System32\\cmd.exe'\n        CommandLine|startswith: '\"C:\\Windows\\system32\\cmd.exe\" '\n    condition: selection and not 1 of filter_optional_*\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect suspicious child processes of the SQLServer process. This could indicate potential RCE or SQL Injection.\n\nHere is how  the given sigma rule operates: In order to detect suspicious child processes of the SQLServer process, which could indicate potential Remote Code Execution (RCE) or SQL Injection, you should monitor for the creation of specific processes that are not commonly initiated by `sqlservr.exe`, the main executable for Microsoft SQL Server. This monitoring should take place on Windows systems, focusing on the event logs related to process creation.\n\nSpecifically, look for instances where `sqlservr.exe` is the parent process for any of the following child processes:\n\n- bash.exe\n- bitsadmin.exe\n- cmd.exe\n- netstat.exe\n- nltest.exe\n- ping.exe\n- powershell.exe\n- pwsh.exe\n- regsvr32.exe\n- rundll32.exe\n- sh.exe\n- systeminfo.exe\n- tasklist.exe\n- wsl.exe\n\nThese child processes are generally unexpected and could be indicative of an attacker attempting to leverage the SQL Server process for executing malicious activities, such as running command and control operations, moving laterally within the network, or exfiltrating data.\n\nIt is crucial, however, to apply a filtering mechanism to decrease the likelihood of false positives. For example, commands initiating from specific trusted paths related to the `sqlservr.exe` process, especially those concerning legitimate administrative tasks, might be excluded from immediate suspicion.\n\nBy implementing such focused monitoring and filtering, efforts can be concentrated on detecting and investigating potentially malicious activities indicative of Remote Code Execution or SQL Injection attacks, thereby enhancing the cyber defense posture against such threats.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\sqlservr.exe'\n        Image|endswith:\n            # You can add other uncommon or suspicious processes\n            - '\\bash.exe'\n            - '\\bitsadmin.exe'\n            - '\\cmd.exe'\n            - '\\netstat.exe'\n            - '\\nltest.exe'\n            - '\\ping.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\regsvr32.exe'\n            - '\\rundll32.exe'\n            - '\\sh.exe'\n            - '\\systeminfo.exe'\n            - '\\tasklist.exe'\n            - '\\wsl.exe'\n    filter_optional_datev:\n        ParentImage|startswith: 'C:\\Program Files\\Microsoft SQL Server\\'\n        ParentImage|endswith: 'DATEV_DBENGINE\\MSSQL\\Binn\\sqlservr.exe'\n        Image: 'C:\\Windows\\System32\\cmd.exe'\n        CommandLine|startswith: '\"C:\\Windows\\system32\\cmd.exe\" '\n    condition: selection and not 1 of filter_optional_*\nlevel: high\n",
      "question": "suspicious child processes of the SQLServer process. This could indicate potential RCE or SQL Injection.",
      "answer": "In order to detect suspicious child processes of the SQLServer process, which could indicate potential Remote Code Execution (RCE) or SQL Injection, you should monitor for the creation of specific processes that are not commonly initiated by `sqlservr.exe`, the main executable for Microsoft SQL Server. This monitoring should take place on Windows systems, focusing on the event logs related to process creation.\n\nSpecifically, look for instances where `sqlservr.exe` is the parent process for any of the following child processes:\n\n- bash.exe\n- bitsadmin.exe\n- cmd.exe\n- netstat.exe\n- nltest.exe\n- ping.exe\n- powershell.exe\n- pwsh.exe\n- regsvr32.exe\n- rundll32.exe\n- sh.exe\n- systeminfo.exe\n- tasklist.exe\n- wsl.exe\n\nThese child processes are generally unexpected and could be indicative of an attacker attempting to leverage the SQL Server process for executing malicious activities, such as running command and control operations, moving laterally within the network, or exfiltrating data.\n\nIt is crucial, however, to apply a filtering mechanism to decrease the likelihood of false positives. For example, commands initiating from specific trusted paths related to the `sqlservr.exe` process, especially those concerning legitimate administrative tasks, might be excluded from immediate suspicion.\n\nBy implementing such focused monitoring and filtering, efforts can be concentrated on detecting and investigating potentially malicious activities indicative of Remote Code Execution or SQL Injection attacks, thereby enhancing the cyber defense posture against such threats."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting pattern of UAC Bypass using Windows Media Player osksupport.dll (UACMe 32).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the pattern of UAC Bypass using Windows Media Player osksupport.dll (UACMe 32), you should monitor for specific file activities on Windows systems that are characteristic of this attack technique. Specifically, look out for files being created or modified in the users' directories that have a path ending with '\\AppData\\Local\\Temp\\OskSupport.dll'. This particular file is indicative of an attack, as attackers deploy this malicious DLL to leverage the trusted relationship of Windows Media Player components with the operating system to bypass User Account Control (UAC).\n\nAdditionally, pay attention to instances where 'C:\\Windows\\system32\\DllHost.exe' is used to load 'C:\\Program Files\\Windows Media Player\\osk.exe'. This behavior is suspicious because it represents an uncommon usage pattern of Windows Media Player, suggesting that an attacker is trying to exploit the osk.exe application, typically a part of the on-screen keyboard feature, with malicious DLLs to escalate privileges without triggering UAC prompts.\n\nThis detection strategy is critical for identifying security breaches involving the exploitation of built-in Windows functionalities to bypass security mechanisms. The high level of importance associated with this detection rule stems from the sophisticated nature of the attack, which could allow unauthorized administrative access to the system. Importantly, while monitoring these activities, it's crucial to be aware that there might be unknown scenarios that could lead to false positives, although such instances are not precisely defined.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: file_event\n    product: windows\ndetection:\n    selection1:\n        TargetFilename|startswith: 'C:\\Users\\'\n        TargetFilename|endswith: '\\AppData\\Local\\Temp\\OskSupport.dll'\n    selection2:\n        Image: 'C:\\Windows\\system32\\DllHost.exe'\n        TargetFilename: 'C:\\Program Files\\Windows Media Player\\osk.exe'\n    condition: 1 of selection*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: file_event\n    product: windows\ndetection:\n    selection1:\n        TargetFilename|startswith: 'C:\\Users\\'\n        TargetFilename|endswith: '\\AppData\\Local\\Temp\\OskSupport.dll'\n    selection2:\n        Image: 'C:\\Windows\\system32\\DllHost.exe'\n        TargetFilename: 'C:\\Program Files\\Windows Media Player\\osk.exe'\n    condition: 1 of selection*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "pattern of UAC Bypass using Windows Media Player osksupport.dll (UACMe 32)",
      "answer": "In order to detect the pattern of UAC Bypass using Windows Media Player osksupport.dll (UACMe 32), you should monitor for specific file activities on Windows systems that are characteristic of this attack technique. Specifically, look out for files being created or modified in the users' directories that have a path ending with '\\AppData\\Local\\Temp\\OskSupport.dll'. This particular file is indicative of an attack, as attackers deploy this malicious DLL to leverage the trusted relationship of Windows Media Player components with the operating system to bypass User Account Control (UAC).\n\nAdditionally, pay attention to instances where 'C:\\Windows\\system32\\DllHost.exe' is used to load 'C:\\Program Files\\Windows Media Player\\osk.exe'. This behavior is suspicious because it represents an uncommon usage pattern of Windows Media Player, suggesting that an attacker is trying to exploit the osk.exe application, typically a part of the on-screen keyboard feature, with malicious DLLs to escalate privileges without triggering UAC prompts.\n\nThis detection strategy is critical for identifying security breaches involving the exploitation of built-in Windows functionalities to bypass security mechanisms. The high level of importance associated with this detection rule stems from the sophisticated nature of the attack, which could allow unauthorized administrative access to the system. Importantly, while monitoring these activities, it's crucial to be aware that there might be unknown scenarios that could lead to false positives, although such instances are not precisely defined."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of whoami.exe with suspicious parent processes..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the execution of whoami.exe with suspicious parent processes, you should: monitor Windows process creation logs for instances where 'whoami.exe' is executed (either directly or implied through its original filename matching 'whoami.exe'). It's crucial to exclude typical, expected parent processes such as 'cmd.exe', 'powershell.exe', 'pwsh.exe', and 'powershell_ise.exe', which are generally considered legitimate contexts for 'whoami.exe' to run from. Additionally, executions originating from 'C:\\Program Files\\Microsoft Monitoring Agent\\Agent\\MonitoringHost.exe', or cases where 'whoami.exe' is executed without any parent process information (indicated by null or empty 'ParentImage' values) should also be disregarded to reduce false positives. False positives might include regular administrative activities, the use of scripts and administrative tools present in the environment, or monitoring tasks. This detection strategy has a high importance due to its potential to unveil suspicious activities, such as attempts by malicious entities to scout and gather information about user privileges or system details, typically in the early or middle stages of an attack.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\whoami.exe'\n        - OriginalFileName: 'whoami.exe'\n    filter_generic:\n        # This list can be any legitimate shell or application that you expect whoami to run from\n        ParentImage|endswith:\n            - '\\cmd.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\powershell_ise.exe'\n    filter_ms_monitoring_agent:\n        ParentImage: 'C:\\Program Files\\Microsoft Monitoring Agent\\Agent\\MonitoringHost.exe'\n    filter_parent_null:\n        ParentImage: null\n    filter_parent_empty:\n        ParentImage: ''\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Admin activity\n    - Scripts and administrative tools used in the monitored environment\n    - Monitoring activity\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\whoami.exe'\n        - OriginalFileName: 'whoami.exe'\n    filter_generic:\n        # This list can be any legitimate shell or application that you expect whoami to run from\n        ParentImage|endswith:\n            - '\\cmd.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\powershell_ise.exe'\n    filter_ms_monitoring_agent:\n        ParentImage: 'C:\\Program Files\\Microsoft Monitoring Agent\\Agent\\MonitoringHost.exe'\n    filter_parent_null:\n        ParentImage: null\n    filter_parent_empty:\n        ParentImage: ''\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Admin activity\n    - Scripts and administrative tools used in the monitored environment\n    - Monitoring activity\nlevel: high\n",
      "question": "execution of whoami.exe with suspicious parent processes.",
      "answer": "In order to detect the execution of whoami.exe with suspicious parent processes, you should: monitor Windows process creation logs for instances where 'whoami.exe' is executed (either directly or implied through its original filename matching 'whoami.exe'). It's crucial to exclude typical, expected parent processes such as 'cmd.exe', 'powershell.exe', 'pwsh.exe', and 'powershell_ise.exe', which are generally considered legitimate contexts for 'whoami.exe' to run from. Additionally, executions originating from 'C:\\Program Files\\Microsoft Monitoring Agent\\Agent\\MonitoringHost.exe', or cases where 'whoami.exe' is executed without any parent process information (indicated by null or empty 'ParentImage' values) should also be disregarded to reduce false positives. False positives might include regular administrative activities, the use of scripts and administrative tools present in the environment, or monitoring tasks. This detection strategy has a high importance due to its potential to unveil suspicious activities, such as attempts by malicious entities to scout and gather information about user privileges or system details, typically in the early or middle stages of an attack."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting mshta loaded by wmiprvse as parent as used by TA505 malicious documents.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect mshta loaded by wmiprvse as parent as used by TA505 malicious documents, you should: Monitor the creation of processes on Windows systems, specifically looking for instances where 'mshta.exe' is launched and the parent process is 'wmiprvse.exe'. This specific behavior is indicative of an attack, where mshta.exe, typically used for running Microsoft HTML Application (HTA) files, is maliciously invoked by a WMI (Windows Management Instrumentation) process. Such a pattern is a strong indicator of the TA505 threat group's tactics, aiming to execute harmful scripts or payloads via documents designed to exploit this vector. Keep in mind that there might be instances where this behavior occurs that are not malicious, though they are currently unknown and the level of threat is considered critical.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_parent:\n        ParentImage|endswith: '\\wmiprvse.exe'\n    selection_mshta:\n        - Image|endswith: '\\mshta.exe'\n        - OriginalFileName: 'mshta.exe'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_parent:\n        ParentImage|endswith: '\\wmiprvse.exe'\n    selection_mshta:\n        - Image|endswith: '\\mshta.exe'\n        - OriginalFileName: 'mshta.exe'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: critical\n",
      "question": "mshta loaded by wmiprvse as parent as used by TA505 malicious documents",
      "answer": "In order to detect mshta loaded by wmiprvse as parent as used by TA505 malicious documents, you should: Monitor the creation of processes on Windows systems, specifically looking for instances where 'mshta.exe' is launched and the parent process is 'wmiprvse.exe'. This specific behavior is indicative of an attack, where mshta.exe, typically used for running Microsoft HTML Application (HTA) files, is maliciously invoked by a WMI (Windows Management Instrumentation) process. Such a pattern is a strong indicator of the TA505 threat group's tactics, aiming to execute harmful scripts or payloads via documents designed to exploit this vector. Keep in mind that there might be instances where this behavior occurs that are not malicious, though they are currently unknown and the level of threat is considered critical."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting possible persistence mechanism using RUN key for Windows Explorer and pointing to a suspicious folder.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a possible persistence mechanism using RUN key for Windows Explorer and pointing to a suspicious folder, you should focus on monitoring registry settings in Windows environments, specifically registry set activities. Look for events where a SetValue action is taken on registry keys ending with '\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run'. This key is a common target for persistence because it allows programs to run automatically each time a user logs in.\n\nAdditionally, you must pay attention to where the registry action points to. Be wary if the Set Value action's target (details about the file or program being set to run) begins with standard temporary or public user directories. These include 'C:\\Windows\\Temp\\', 'C:\\ProgramData\\', 'C:\\$Recycle.bin\\', 'C:\\Temp\\', 'C:\\Users\\Public\\', and 'C:\\Users\\Default\\'. Also, if the details contain paths that include '\\AppData\\', this could be an indication of an attempt to hide malicious programs in places that are frequently overlooked or considered benign.\n\nTo effectively conduct this detection, make sure to log both the image and parent image involved in these registry modifications. Monitoring these areas can help unveil unauthorized or malicious modifications aimed at achieving persistence on the system by taking advantage of the Windows Explorer RUN key mechanism.\n\nIt is important to remember that not all modifications in these areas are malicious; thus, there might be unknown false positives. However, considering the high level associated with modifying RUN keys coupled with the specified directories, such detections should be treated with a high level of scrutiny.\n\nIn terms of cyber threat categorization, these activities are associated with tactics and techniques like Persistence, and more precisely, the modification of Windows registry keys to auto-start programs, reflecting on the tactics of maintaining a foothold and executing unauthorized actions without direct user interaction upon system startup.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|endswith: '\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run'\n    selection2:\n        - Details|startswith:\n            - 'C:\\Windows\\Temp\\'\n            - 'C:\\ProgramData\\'\n            - 'C:\\$Recycle.bin\\'\n            - 'C:\\Temp\\'\n            - 'C:\\Users\\Public\\'\n            - 'C:\\Users\\Default\\'\n        - Details|contains: '\\AppData\\'\n    condition: selection and selection2\nfields:\n    - Image\n    - ParentImage\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|endswith: '\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run'\n    selection2:\n        - Details|startswith:\n            - 'C:\\Windows\\Temp\\'\n            - 'C:\\ProgramData\\'\n            - 'C:\\$Recycle.bin\\'\n            - 'C:\\Temp\\'\n            - 'C:\\Users\\Public\\'\n            - 'C:\\Users\\Default\\'\n        - Details|contains: '\\AppData\\'\n    condition: selection and selection2\nfields:\n    - Image\n    - ParentImage\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "possible persistence mechanism using RUN key for Windows Explorer and pointing to a suspicious folder",
      "answer": "In order to detect a possible persistence mechanism using RUN key for Windows Explorer and pointing to a suspicious folder, you should focus on monitoring registry settings in Windows environments, specifically registry set activities. Look for events where a SetValue action is taken on registry keys ending with '\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run'. This key is a common target for persistence because it allows programs to run automatically each time a user logs in.\n\nAdditionally, you must pay attention to where the registry action points to. Be wary if the Set Value action's target (details about the file or program being set to run) begins with standard temporary or public user directories. These include 'C:\\Windows\\Temp\\', 'C:\\ProgramData\\', 'C:\\$Recycle.bin\\', 'C:\\Temp\\', 'C:\\Users\\Public\\', and 'C:\\Users\\Default\\'. Also, if the details contain paths that include '\\AppData\\', this could be an indication of an attempt to hide malicious programs in places that are frequently overlooked or considered benign.\n\nTo effectively conduct this detection, make sure to log both the image and parent image involved in these registry modifications. Monitoring these areas can help unveil unauthorized or malicious modifications aimed at achieving persistence on the system by taking advantage of the Windows Explorer RUN key mechanism.\n\nIt is important to remember that not all modifications in these areas are malicious; thus, there might be unknown false positives. However, considering the high level associated with modifying RUN keys coupled with the specified directories, such detections should be treated with a high level of scrutiny.\n\nIn terms of cyber threat categorization, these activities are associated with tactics and techniques like Persistence, and more precisely, the modification of Windows registry keys to auto-start programs, reflecting on the tactics of maintaining a foothold and executing unauthorized actions without direct user interaction upon system startup."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    service: threat_management\n    product: m365\ndetection:\n    selection:\n        eventSource: SecurityComplianceCenter\n        eventName: 'Data exfiltration to unsanctioned apps'\n        status: success\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect Microsoft Cloud App Security reported when a user or IP address uses an app that is not sanctioned to perform an activity that resembles an attempt to exfiltrate information from your organization.\n\nHere is how  the given sigma rule operates: In order to detect when a Microsoft Cloud App Security reported when a user or IP address uses an app that is not sanctioned to perform an activity that resembles an attempt to exfiltrate information from your organization, you should: Focus on analyzing logs generated by the threat management service within Microsoft 365 products. Specifically, pay attention to entries coming from the SecurityComplianceCenter. Look for events named 'Data exfiltration to unsanctioned apps' that have been marked as successful. This detection mechanism aims to identify actions that may involve transferring sensitive data outside the organization through applications that are not approved or recognized, indicating a potential security threat. Be aware of false positives, as the nature of these incidents might sometimes be misidentified. The severity level of this activity is considered medium, highlighting the need for timely investigation to prevent unauthorized access or loss of data.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    service: threat_management\n    product: m365\ndetection:\n    selection:\n        eventSource: SecurityComplianceCenter\n        eventName: 'Data exfiltration to unsanctioned apps'\n        status: success\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Microsoft Cloud App Security reported when a user or IP address uses an app that is not sanctioned to perform an activity that resembles an attempt to exfiltrate information from your organization.",
      "answer": "In order to detect when a Microsoft Cloud App Security reported when a user or IP address uses an app that is not sanctioned to perform an activity that resembles an attempt to exfiltrate information from your organization, you should: Focus on analyzing logs generated by the threat management service within Microsoft 365 products. Specifically, pay attention to entries coming from the SecurityComplianceCenter. Look for events named 'Data exfiltration to unsanctioned apps' that have been marked as successful. This detection mechanism aims to identify actions that may involve transferring sensitive data outside the organization through applications that are not approved or recognized, indicating a potential security threat. Be aware of false positives, as the nature of these incidents might sometimes be misidentified. The severity level of this activity is considered medium, highlighting the need for timely investigation to prevent unauthorized access or loss of data."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting request has been made to transfer a Route 53 domain to another AWS account..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when a request has been made to transfer a Route 53 domain to another AWS account, you should: Monitor CloudTrail logs for events where the Route 53 service (`route53.amazonaws.com`) is invoked to perform a `TransferDomainToAnotherAwsAccount` action. It's noteworthy that the detection of such events should prompt an investigation to confirm if they originate from authorized system or network administrators. Unfamiliar user identities, user agents, or hostnames engaging in this activity are red flags and warrant further scrutiny. Given that some legitimate actions might trigger this detection, it's important to validate whether such domain transfers align with known operations within your AWS environment. Those verified as part of normal activities can be excluded to reduce false positives. This monitoring strategy is positioned at a lower criticality level but is crucial for identifying potential unauthorized domain transfer attempts within AWS environments.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: aws\n    service: cloudtrail\ndetection:\n    selection:\n        eventSource: route53.amazonaws.com\n        eventName: TransferDomainToAnotherAwsAccount\n    condition: selection\nfalsepositives:\n    - A domain may be transferred to another AWS account by a system or network administrator. Verify whether the user identity, user agent, and/or hostname should be making changes in your environment. Domain transfers from unfamiliar users or hosts should be investigated. If known behavior is causing false positives, it can be exempted from the rule.\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: aws\n    service: cloudtrail\ndetection:\n    selection:\n        eventSource: route53.amazonaws.com\n        eventName: TransferDomainToAnotherAwsAccount\n    condition: selection\nfalsepositives:\n    - A domain may be transferred to another AWS account by a system or network administrator. Verify whether the user identity, user agent, and/or hostname should be making changes in your environment. Domain transfers from unfamiliar users or hosts should be investigated. If known behavior is causing false positives, it can be exempted from the rule.\nlevel: low\n",
      "question": "request has been made to transfer a Route 53 domain to another AWS account.",
      "answer": "In order to detect when a request has been made to transfer a Route 53 domain to another AWS account, you should: Monitor CloudTrail logs for events where the Route 53 service (`route53.amazonaws.com`) is invoked to perform a `TransferDomainToAnotherAwsAccount` action. It's noteworthy that the detection of such events should prompt an investigation to confirm if they originate from authorized system or network administrators. Unfamiliar user identities, user agents, or hostnames engaging in this activity are red flags and warrant further scrutiny. Given that some legitimate actions might trigger this detection, it's important to validate whether such domain transfers align with known operations within your AWS environment. Those verified as part of normal activities can be excluded to reduce false positives. This monitoring strategy is positioned at a lower criticality level but is crucial for identifying potential unauthorized domain transfer attempts within AWS environments."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting variations of obfuscated powershell IEX invocation code generated by Invoke-Obfuscation framework from the following code block \\u2014.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect all variations of obfuscated PowerShell IEX invocation code generated by Invoke-Obfuscation framework from the following code block \u2014 [/INST], you should monitor Windows PowerShell script activity specifically focusing on Script Block Logging, which needs to be enabled. Look for the execution of PowerShell scripts that contain certain regex patterns in their text, which are indicators of obfuscation techniques typically used to evade detection. These patterns include unusual references to system variables like `$PSHome`, `$ShellId`, `$env:Public`, and `$env:ComSpec`, along with specific obfuscation markers such as string concatenation of array elements, accessing object properties in a non-standard way, and invoking methods in a manner that's commonly used by obfuscated scripts to conceal their actions. Such scripts are indicative of an attacker leveraging the Invoke-Obfuscation framework to mask malicious PowerShell commands. Due to the complexity and variability of these obfuscation techniques, there might be some unknown false positives, but the threat level is considered high, emphasizing the importance of scrutinizing these specific script block texts for potential threats.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection_iex:\n        - ScriptBlockText|re: '\\$PSHome\\[\\s*\\d{1,3}\\s*\\]\\s*\\+\\s*\\$PSHome\\['\n        - ScriptBlockText|re: '\\$ShellId\\[\\s*\\d{1,3}\\s*\\]\\s*\\+\\s*\\$ShellId\\['\n        - ScriptBlockText|re: '\\$env:Public\\[\\s*\\d{1,3}\\s*\\]\\s*\\+\\s*\\$env:Public\\['\n        - ScriptBlockText|re: '\\$env:ComSpec\\[(\\s*\\d{1,3}\\s*,){2}'\n        - ScriptBlockText|re: '\\*mdr\\*\\W\\s*\\)\\.Name'\n        - ScriptBlockText|re: '\\$VerbosePreference\\.ToString\\('\n    condition: selection_iex\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection_iex:\n        - ScriptBlockText|re: '\\$PSHome\\[\\s*\\d{1,3}\\s*\\]\\s*\\+\\s*\\$PSHome\\['\n        - ScriptBlockText|re: '\\$ShellId\\[\\s*\\d{1,3}\\s*\\]\\s*\\+\\s*\\$ShellId\\['\n        - ScriptBlockText|re: '\\$env:Public\\[\\s*\\d{1,3}\\s*\\]\\s*\\+\\s*\\$env:Public\\['\n        - ScriptBlockText|re: '\\$env:ComSpec\\[(\\s*\\d{1,3}\\s*,){2}'\n        - ScriptBlockText|re: '\\*mdr\\*\\W\\s*\\)\\.Name'\n        - ScriptBlockText|re: '\\$VerbosePreference\\.ToString\\('\n    condition: selection_iex\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "variations of obfuscated powershell IEX invocation code generated by Invoke-Obfuscation framework from the following code block \\u2014",
      "answer": "In order to detect all variations of obfuscated PowerShell IEX invocation code generated by Invoke-Obfuscation framework from the following code block \u2014 [/INST], you should monitor Windows PowerShell script activity specifically focusing on Script Block Logging, which needs to be enabled. Look for the execution of PowerShell scripts that contain certain regex patterns in their text, which are indicators of obfuscation techniques typically used to evade detection. These patterns include unusual references to system variables like `$PSHome`, `$ShellId`, `$env:Public`, and `$env:ComSpec`, along with specific obfuscation markers such as string concatenation of array elements, accessing object properties in a non-standard way, and invoking methods in a manner that's commonly used by obfuscated scripts to conceal their actions. Such scripts are indicative of an attacker leveraging the Invoke-Obfuscation framework to mask malicious PowerShell commands. Due to the complexity and variability of these obfuscation techniques, there might be some unknown false positives, but the threat level is considered high, emphasizing the importance of scrutinizing these specific script block texts for potential threats."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting use of CreateMiniDump hack tool used to dump the LSASS process memory for credential extraction on the attacker's machine.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the use of CreateMiniDump hack tool used to dump the LSASS process memory for credential extraction on the attacker's machine, you should: focus on monitoring the creation of processes within a Windows environment. This involves looking for instances where the process name ends with '\\CreateMiniDump.exe', indicating the possible execution of the CreateMiniDump hack tool. Additionally, attention should be paid to specific indicators of compromise (IOCs) such as the image hash (imphash) '4a07f944a83e8a7c2525efa35dd30e2f' or if any hash associated with a process contains this imphash value. These specific imphash values are tied to the known malicious tool and significantly increase the confidence in detecting unauthorized extraction of credentials from the LSASS process memory. It is categorized with a high level of severity, but one should be aware that there may be unknown false positives.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\CreateMiniDump.exe'\n        - Imphash: '4a07f944a83e8a7c2525efa35dd30e2f'\n        - Hashes|contains: 'IMPHASH=4a07f944a83e8a7c2525efa35dd30e2f'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\CreateMiniDump.exe'\n        - Imphash: '4a07f944a83e8a7c2525efa35dd30e2f'\n        - Hashes|contains: 'IMPHASH=4a07f944a83e8a7c2525efa35dd30e2f'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "use of CreateMiniDump hack tool used to dump the LSASS process memory for credential extraction on the attacker's machine",
      "answer": "In order to detect the use of CreateMiniDump hack tool used to dump the LSASS process memory for credential extraction on the attacker's machine, you should: focus on monitoring the creation of processes within a Windows environment. This involves looking for instances where the process name ends with '\\CreateMiniDump.exe', indicating the possible execution of the CreateMiniDump hack tool. Additionally, attention should be paid to specific indicators of compromise (IOCs) such as the image hash (imphash) '4a07f944a83e8a7c2525efa35dd30e2f' or if any hash associated with a process contains this imphash value. These specific imphash values are tied to the known malicious tool and significantly increase the confidence in detecting unauthorized extraction of credentials from the LSASS process memory. It is categorized with a high level of severity, but one should be aware that there may be unknown false positives."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting registry keys related to Ursnif malware..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect registry keys related to Ursnif malware, you should monitor for the creation of new registry keys within Windows, specifically targeting instances where the registry category indicates an addition to the registry. Look for events where a new registry key creation (EventType: CreateKey) is detected, especially those that involve path strings containing '\\Software\\AppDataLow\\Software\\Microsoft\\'. However, to improve precision and reduce false alarms, it is crucial to exclude any events that involve the creation of keys under the paths that include '\\SOFTWARE\\AppDataLow\\Software\\Microsoft\\Internet Explorer\\', '\\SOFTWARE\\AppDataLow\\Software\\Microsoft\\RepService\\', '\\SOFTWARE\\AppDataLow\\Software\\Microsoft\\IME\\', or '\\SOFTWARE\\AppDataLow\\Software\\Microsoft\\Edge\\'. This focused approach helps in isolating registry key creations that are more likely to be associated with malicious activities, particularly those that could be linked to the Ursnif malware, a prevalent threat. While there may still be unknown false positives, given the high level of specificity in the detection criteria, any match should be treated with a high degree of suspicion and investigated accordingly.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: registry_add\ndetection:\n    selection:\n        EventType: CreateKey\n        TargetObject|contains: '\\Software\\AppDataLow\\Software\\Microsoft\\'\n    filter:\n        TargetObject|contains:\n            - '\\SOFTWARE\\AppDataLow\\Software\\Microsoft\\Internet Explorer\\'\n            - '\\SOFTWARE\\AppDataLow\\Software\\Microsoft\\RepService\\'\n            - '\\SOFTWARE\\AppDataLow\\Software\\Microsoft\\IME\\'\n            - '\\SOFTWARE\\AppDataLow\\Software\\Microsoft\\Edge\\'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: registry_add\ndetection:\n    selection:\n        EventType: CreateKey\n        TargetObject|contains: '\\Software\\AppDataLow\\Software\\Microsoft\\'\n    filter:\n        TargetObject|contains:\n            - '\\SOFTWARE\\AppDataLow\\Software\\Microsoft\\Internet Explorer\\'\n            - '\\SOFTWARE\\AppDataLow\\Software\\Microsoft\\RepService\\'\n            - '\\SOFTWARE\\AppDataLow\\Software\\Microsoft\\IME\\'\n            - '\\SOFTWARE\\AppDataLow\\Software\\Microsoft\\Edge\\'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "registry keys related to Ursnif malware.",
      "answer": "In order to detect registry keys related to Ursnif malware, you should monitor for the creation of new registry keys within Windows, specifically targeting instances where the registry category indicates an addition to the registry. Look for events where a new registry key creation (EventType: CreateKey) is detected, especially those that involve path strings containing '\\Software\\AppDataLow\\Software\\Microsoft\\'. However, to improve precision and reduce false alarms, it is crucial to exclude any events that involve the creation of keys under the paths that include '\\SOFTWARE\\AppDataLow\\Software\\Microsoft\\Internet Explorer\\', '\\SOFTWARE\\AppDataLow\\Software\\Microsoft\\RepService\\', '\\SOFTWARE\\AppDataLow\\Software\\Microsoft\\IME\\', or '\\SOFTWARE\\AppDataLow\\Software\\Microsoft\\Edge\\'. This focused approach helps in isolating registry key creations that are more likely to be associated with malicious activities, particularly those that could be linked to the Ursnif malware, a prevalent threat. While there may still be unknown false positives, given the high level of specificity in the detection criteria, any match should be treated with a high degree of suspicion and investigated accordingly."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\netsh.exe'\n        - OriginalFileName: 'netsh.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - ' i'\n            - ' p'\n            - '=3389'\n            - ' c'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate administration activity\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect execution of netsh to configure a port forwarding of port 3389 (RDP) rule\n\nHere is how  the given sigma rule operates: In order to detect the execution of netsh to configure a port forwarding of port 3389 (RDP) rule, you should monitor for the creation of processes on Windows systems, specifically looking for instances where the process image file ends with '\\netsh.exe' or the original file name is identified as 'netsh.exe'. Additionally, check the command line arguments to ensure they contain specific patterns: ' i', ' p', '=3389', and ' c', all of which must be present to match the criteria. This particular behavior could indicate an attempt to manipulate network settings to allow Remote Desktop Protocol (RDP) connections through port 3389, which could be malicious in nature. However, be aware that there could be legitimate administrative activities that also use these commands, so false positives may occur. The significance of this detection is considered high due to the potential security implications of unauthorized port forwarding setups.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\netsh.exe'\n        - OriginalFileName: 'netsh.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - ' i'\n            - ' p'\n            - '=3389'\n            - ' c'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate administration activity\nlevel: high\n",
      "question": "execution of netsh to configure a port forwarding of port 3389 (RDP) rule",
      "answer": "In order to detect the execution of netsh to configure a port forwarding of port 3389 (RDP) rule, you should monitor for the creation of processes on Windows systems, specifically looking for instances where the process image file ends with '\\netsh.exe' or the original file name is identified as 'netsh.exe'. Additionally, check the command line arguments to ensure they contain specific patterns: ' i', ' p', '=3389', and ' c', all of which must be present to match the criteria. This particular behavior could indicate an attempt to manipulate network settings to allow Remote Desktop Protocol (RDP) connections through port 3389, which could be malicious in nature. However, be aware that there could be legitimate administrative activities that also use these commands, so false positives may occur. The significance of this detection is considered high due to the potential security implications of unauthorized port forwarding setups."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Use of the commandline to shutdown or reboot windows.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to use the commandline to shutdown or reboot windows, you should monitor the creation of process events on Windows systems that end with the initiation of 'shutdown.exe'. Specifically look for commands that include the arguments '/r ' which indicates a reboot or '/s ' which signifies a shutdown operation. This approach assists in detecting activities that could be related to unauthorized or malicious attempts to shutdown or reboot a system, which can be a part of disruptive actions against the system's availability. The detection falls under the category of process creation with a medium level of alert due to potential false positives, as there might be legitimate reasons for using these commands in administrative contexts.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\shutdown.exe'\n        CommandLine|contains:\n            - '/r '\n            - '/s '\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\shutdown.exe'\n        CommandLine|contains:\n            - '/r '\n            - '/s '\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Use of the commandline to shutdown or reboot windows",
      "answer": "In order to use the commandline to shutdown or reboot windows, you should monitor the creation of process events on Windows systems that end with the initiation of 'shutdown.exe'. Specifically look for commands that include the arguments '/r ' which indicates a reboot or '/s ' which signifies a shutdown operation. This approach assists in detecting activities that could be related to unauthorized or malicious attempts to shutdown or reboot a system, which can be a part of disruptive actions against the system's availability. The detection falls under the category of process creation with a medium level of alert due to potential false positives, as there might be legitimate reasons for using these commands in administrative contexts."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting file ending in jse, vbe, js, vba, vbs written by cscript.exe or wscript.exe.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a file ending in jse, vbe, js, vba, vbs written by cscript.exe or wscript.exe, you should: focus on monitoring file events within a Windows environment. Specifically, keep an eye out for instances where either the cscript.exe or wscript.exe processes are writing files. The files of interest are those with extensions .jse, .vbe, .js, .vba, or .vbs, indicating they are script files which could potentially be malicious. These file activities should primarily be looked for in user directories such as \"C:\\Users\\\" or common data storage directories like \"C:\\ProgramData\". You should track and log the process image path and the target filenames of these operations due to their potential high-security risk, despite the lack of known false positives.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: file_event\n    product: windows\ndetection:\n    selection:\n        Image|endswith:\n            - '\\wscript.exe'\n            - '\\cscript.exe'\n        TargetFilename|startswith:\n            - 'C:\\Users\\'\n            - 'C:\\ProgramData'\n        TargetFilename|endswith:\n            - '.jse'\n            - '.vbe'\n            - '.js'\n            - '.vba'\n            - '.vbs'\n    condition: selection\nfields:\n    - Image\n    - TargetFilename\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: file_event\n    product: windows\ndetection:\n    selection:\n        Image|endswith:\n            - '\\wscript.exe'\n            - '\\cscript.exe'\n        TargetFilename|startswith:\n            - 'C:\\Users\\'\n            - 'C:\\ProgramData'\n        TargetFilename|endswith:\n            - '.jse'\n            - '.vbe'\n            - '.js'\n            - '.vba'\n            - '.vbs'\n    condition: selection\nfields:\n    - Image\n    - TargetFilename\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "file ending in jse, vbe, js, vba, vbs written by cscript.exe or wscript.exe",
      "answer": "In order to detect a file ending in jse, vbe, js, vba, vbs written by cscript.exe or wscript.exe, you should: focus on monitoring file events within a Windows environment. Specifically, keep an eye out for instances where either the cscript.exe or wscript.exe processes are writing files. The files of interest are those with extensions .jse, .vbe, .js, .vba, or .vbs, indicating they are script files which could potentially be malicious. These file activities should primarily be looked for in user directories such as \"C:\\Users\\\" or common data storage directories like \"C:\\ProgramData\". You should track and log the process image path and the target filenames of these operations due to their potential high-security risk, despite the lack of known false positives."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|startswith: 'HKLM\\System\\CurrentControlSet\\Services\\LanmanServer\\Parameters\\'\n        TargetObject|endswith:\n            - 'AutoShareWks'\n            - 'AutoShareServer'\n        Details: 'DWORD (0x00000000)'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect Administrative shares are hidden network shares created by Microsoft Windows NT operating systems that grant system administrators remote access to every disk volume on a network-connected system\n\nHere is how  the given sigma rule operates: In order to detect and respond to potential manipulations of administrative shares, which are hidden network shares established by Microsoft Windows NT operating systems to enable system administrators remote access to every disk volume on a network-connected system, you should focus on monitoring registry settings changes within Windows environments. Specifically, keep an eye on events where the registry value is being set within the `HKLM\\System\\CurrentControlSet\\Services\\LanmanServer\\Parameters\\` path. The parameters of interest are `AutoShareWks` and `AutoShareServer`, corresponding to the creation of administrative shares for workstations and servers, respectively. An indication of a potentially malicious activity is when these parameters are set to a DWORD value of `0x00000000`, which could imply an attempt to disable these shares, possibly to hinder administrative access or evade detection. It is crucial to monitor for `SetValue` events against these registry paths as part of your detection strategy. Keep in mind that there may be instances where these modifications could trigger a false positive, meaning changes could be legitimate and not indicative of malicious activity. Therefore, the level of concern for such detections is rated as medium, indicating that while it is important to monitor for these changes, each detection should be investigated to confirm whether it is indeed malicious. The tactics associated with this activity include Persistence, Privilege Escalation, and Defense Evasion, as attackers might manipulate these settings to maintain access to a system, elevate their privileges, or evade detection and remediation efforts.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|startswith: 'HKLM\\System\\CurrentControlSet\\Services\\LanmanServer\\Parameters\\'\n        TargetObject|endswith:\n            - 'AutoShareWks'\n            - 'AutoShareServer'\n        Details: 'DWORD (0x00000000)'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Administrative shares are hidden network shares created by Microsoft Windows NT operating systems that grant system administrators remote access to every disk volume on a network-connected system",
      "answer": "In order to detect and respond to potential manipulations of administrative shares, which are hidden network shares established by Microsoft Windows NT operating systems to enable system administrators remote access to every disk volume on a network-connected system, you should focus on monitoring registry settings changes within Windows environments. Specifically, keep an eye on events where the registry value is being set within the `HKLM\\System\\CurrentControlSet\\Services\\LanmanServer\\Parameters\\` path. The parameters of interest are `AutoShareWks` and `AutoShareServer`, corresponding to the creation of administrative shares for workstations and servers, respectively. An indication of a potentially malicious activity is when these parameters are set to a DWORD value of `0x00000000`, which could imply an attempt to disable these shares, possibly to hinder administrative access or evade detection. It is crucial to monitor for `SetValue` events against these registry paths as part of your detection strategy. Keep in mind that there may be instances where these modifications could trigger a false positive, meaning changes could be legitimate and not indicative of malicious activity. Therefore, the level of concern for such detections is rated as medium, indicating that while it is important to monitor for these changes, each detection should be investigated to confirm whether it is indeed malicious. The tactics associated with this activity include Persistence, Privilege Escalation, and Defense Evasion, as attackers might manipulate these settings to maintain access to a system, elevate their privileges, or evade detection and remediation efforts."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Microsoft Cloud App Security reported when users were active from an IP address that has been identified as an anonymous proxy IP address..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when a Microsoft Cloud App Security reported when users were active from an IP address that has been identified as an anonymous proxy IP address, you should focus on monitoring logs from the threat management service, specifically those related to the Microsoft 365 product. Look for entries generated by the Security Compliance Center where the event is identified as \"Activity from anonymous IP addresses\" and the status of this activity is marked as success. It's essential to be aware that some legitimate scenarios, such as a user utilizing a VPN or proxy, may generate similar log entries and should be considered as potential false positives. The detection strategy is of a medium threat level, indicating that while this activity might not always signify a high-risk security event, it is significant enough to warrant attention and further investigation. This approach helps in identifying possible misuse or unauthorized access attempts, aligning with the need to respond to potential security incidents promptly.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    service: threat_management\n    product: m365\ndetection:\n    selection:\n        eventSource: SecurityComplianceCenter\n        eventName: 'Activity from anonymous IP addresses'\n        status: success\n    condition: selection\nfalsepositives:\n    - User using a VPN or Proxy\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    service: threat_management\n    product: m365\ndetection:\n    selection:\n        eventSource: SecurityComplianceCenter\n        eventName: 'Activity from anonymous IP addresses'\n        status: success\n    condition: selection\nfalsepositives:\n    - User using a VPN or Proxy\nlevel: medium\n",
      "question": "Microsoft Cloud App Security reported when users were active from an IP address that has been identified as an anonymous proxy IP address.",
      "answer": "In order to detect when a Microsoft Cloud App Security reported when users were active from an IP address that has been identified as an anonymous proxy IP address, you should focus on monitoring logs from the threat management service, specifically those related to the Microsoft 365 product. Look for entries generated by the Security Compliance Center where the event is identified as \"Activity from anonymous IP addresses\" and the status of this activity is marked as success. It's essential to be aware that some legitimate scenarios, such as a user utilizing a VPN or proxy, may generate similar log entries and should be considered as potential false positives. The detection strategy is of a medium threat level, indicating that while this activity might not always signify a high-risk security event, it is significant enough to warrant attention and further investigation. This approach helps in identifying possible misuse or unauthorized access attempts, aligning with the need to respond to potential security incidents promptly."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        ImageLoaded|endswith: '\\amsi.dll'\n        Image|endswith:\n            - '\\ExtExport.exe'\n            - '\\odbcconf.exe'\n            - '\\regsvr32.exe'\n            - '\\rundll32.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect loading of \"Amsi.dll\" by a living of the land process. This could be an indication of a \"PowerShell without PowerShell\" attack\n\nHere is how  the given sigma rule operates: In order to detect loading of \"Amsi.dll\" by a living off the land process, which could be an indication of a \"PowerShell without PowerShell\" attack, you should monitor for the loading of the AMSI (Anti-Malware Scan Interface) DLL ('amsi.dll') by specific Windows processes that are typically used by adversaries to execute commands without directly invoking PowerShell. These processes include 'ExtExport.exe', 'odbcconf.exe', 'regsvr32.exe', and 'rundll32.exe'. Such activity should be closely monitored within the Windows environment, particularly in the context of image load events. Doing so is crucial because adversaries often leverage living off the land binaries (LOLBins) like these to bypass detection mechanisms and execute malicious commands. It's important to note, however, that due to the legitimate use of these processes and DLLs in various scenarios, some benign activities might be misidentified as malicious, though these occurrences are currently undefined ('Unknown' false positives). The detection of such an event is considered high severity, indicating the critical nature of this behavior in the context of an attack.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        ImageLoaded|endswith: '\\amsi.dll'\n        Image|endswith:\n            - '\\ExtExport.exe'\n            - '\\odbcconf.exe'\n            - '\\regsvr32.exe'\n            - '\\rundll32.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "loading of \"Amsi.dll\" by a living of the land process. This could be an indication of a \"PowerShell without PowerShell\" attack",
      "answer": "In order to detect loading of \"Amsi.dll\" by a living off the land process, which could be an indication of a \"PowerShell without PowerShell\" attack, you should monitor for the loading of the AMSI (Anti-Malware Scan Interface) DLL ('amsi.dll') by specific Windows processes that are typically used by adversaries to execute commands without directly invoking PowerShell. These processes include 'ExtExport.exe', 'odbcconf.exe', 'regsvr32.exe', and 'rundll32.exe'. Such activity should be closely monitored within the Windows environment, particularly in the context of image load events. Doing so is crucial because adversaries often leverage living off the land binaries (LOLBins) like these to bypass detection mechanisms and execute malicious commands. It's important to note, however, that due to the legitimate use of these processes and DLLs in various scenarios, some benign activities might be misidentified as malicious, though these occurrences are currently undefined ('Unknown' false positives). The detection of such an event is considered high severity, indicating the critical nature of this behavior in the context of an attack."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Checks whether the image specified in a process creation event is not a full, absolute path (caused by process ghosting or other unorthodox methods to start a process).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to check whether the image specified in a process creation event is not a full, absolute path (caused by process ghosting or other unorthodox methods to start a process), you should: Monitor the process creation logs on Windows systems for occurrences where the path of the executed image does not contain a backslash ('\\'), implying it's not a full path. Additionally, disregard any events where the 'Image' field is null, empty, or contains a hyphen, which are indicative of normal or non-suspicious activities. Specific system processes such as System, Registry, MemCompression, and vmmem, along with their command lines, should also be excluded from the detection criteria due to their routine nature and low likelihood of being exploited in this context. This approach is aimed at identifying potentially malicious activities where attackers may employ techniques like process ghosting to execute their payloads without using a standard filesystem path, thereby evading certain types of detection mechanisms. The criteria for a match require that none of the filtered conditions apply, thus highlighting cases with high suspicion and reducing the chances of false positives, although some unknown false positives may still occur. This monitoring is set at a high level of importance due to the severity of the attack tactic it seeks to uncover.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    image_absolute_path:\n        Image|contains: '\\'\n    filter_null:\n        Image: null\n    filter_empty:\n        Image:\n            - '-'\n            - ''\n    filter_4688:\n        - Image:\n            - 'System'\n            - 'Registry'\n            - 'MemCompression'\n            - 'vmmem'\n        - CommandLine:\n            - 'Registry'\n            - 'MemCompression'\n            - 'vmmem'\n    condition: not image_absolute_path and not 1 of filter*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    image_absolute_path:\n        Image|contains: '\\'\n    filter_null:\n        Image: null\n    filter_empty:\n        Image:\n            - '-'\n            - ''\n    filter_4688:\n        - Image:\n            - 'System'\n            - 'Registry'\n            - 'MemCompression'\n            - 'vmmem'\n        - CommandLine:\n            - 'Registry'\n            - 'MemCompression'\n            - 'vmmem'\n    condition: not image_absolute_path and not 1 of filter*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Checks whether the image specified in a process creation event is not a full, absolute path (caused by process ghosting or other unorthodox methods to start a process)",
      "answer": "In order to check whether the image specified in a process creation event is not a full, absolute path (caused by process ghosting or other unorthodox methods to start a process), you should: Monitor the process creation logs on Windows systems for occurrences where the path of the executed image does not contain a backslash ('\\'), implying it's not a full path. Additionally, disregard any events where the 'Image' field is null, empty, or contains a hyphen, which are indicative of normal or non-suspicious activities. Specific system processes such as System, Registry, MemCompression, and vmmem, along with their command lines, should also be excluded from the detection criteria due to their routine nature and low likelihood of being exploited in this context. This approach is aimed at identifying potentially malicious activities where attackers may employ techniques like process ghosting to execute their payloads without using a standard filesystem path, thereby evading certain types of detection mechanisms. The criteria for a match require that none of the filtered conditions apply, thus highlighting cases with high suspicion and reducing the chances of false positives, although some unknown false positives may still occur. This monitoring is set at a high level of importance due to the severity of the attack tactic it seeks to uncover."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: dns\ndetection:\n    dns_question_name:\n        query: \"*\"\n    default_list_of_well_known_domains:\n        query_etld_plus_one: \n            - \"akadns.net\"\n            - \"akamaiedge.net\"\n            - \"amazonaws.com\"\n            - \"apple.com\"\n            - \"apple-dns.net\"\n            - \"cloudfront.net\"\n            - \"icloud.com\"\n            - \"in-addr.arpa\"\n            - \"google.com\"\n            - \"yahoo.com\"\n            - \"dropbox.com\"\n            - \"windowsupdate.com\"\n            - \"microsoftonline.com\"\n            - \"s-microsoft.com\"\n            - \"office365.com\"\n            - \"linkedin.com\"\n    timeframe: 15m\n    condition: count(subdomain) per query_etld_plus_one per computer_name > 200 and not default_list_of_well_known_domains\n    #    for each host in timeframe\n    #                for each dns_question_etld_plus_one\n    #                    if number of dns_question_name > 200\n    #                        dns_question_etld_plus_one is not in default_list_of_well_known_domains\nfalsepositives:\n    - Legitimate domain name requested, which should be added to whitelist\nlevel: high\nstatus: unsupported\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect High rate of unique Fully Qualified Domain Names (FQDN) requests per root domain (eTLD+1) in short period of time\n\nHere is how  the given sigma rule operates: In order to detect a high rate of unique Fully Qualified Domain Names (FQDN) requests per root domain (eTLD+1) in a short period of time, you should monitor DNS traffic for an unusual number of queries to different subdomains of well-known domains within a 15-minute timeframe. Specifically, focus on DNS logs and look for more than 200 unique subdomain queries for each root domain (eTLD+1) that do not match a predefined list of commonly queried domains. This list includes popular and legitimate services such as \"akadns.net\", \"akamaiedge.net\", \"amazonaws.com\", \"apple.com\", \"apple-dns.net\", \"cloudfront.net\", \"icloud.com\", \"in-addr.arpa\", \"google.com\", \"yahoo.com\", \"dropbox.com\", \"windowsupdate.com\", \"microsoftonline.com\", \"s-microsoft.com\", \"office365.com\", and \"linkedin.com\". If the number of unique queries exceeds this threshold and the queried root domain is not part of the aforementioned list, it may indicate a potential security threat. Be mindful that legitimate domain name requests which are not part of the predefined list could cause false positives and should be whitelisted accordingly. This detection strategy is associated with tactics and techniques related to discovery and command and control, as the high volume of unique DNS queries could be indicative of an actor performing reconnaissance or using DNS for command and control communications.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: dns\ndetection:\n    dns_question_name:\n        query: \"*\"\n    default_list_of_well_known_domains:\n        query_etld_plus_one: \n            - \"akadns.net\"\n            - \"akamaiedge.net\"\n            - \"amazonaws.com\"\n            - \"apple.com\"\n            - \"apple-dns.net\"\n            - \"cloudfront.net\"\n            - \"icloud.com\"\n            - \"in-addr.arpa\"\n            - \"google.com\"\n            - \"yahoo.com\"\n            - \"dropbox.com\"\n            - \"windowsupdate.com\"\n            - \"microsoftonline.com\"\n            - \"s-microsoft.com\"\n            - \"office365.com\"\n            - \"linkedin.com\"\n    timeframe: 15m\n    condition: count(subdomain) per query_etld_plus_one per computer_name > 200 and not default_list_of_well_known_domains\n    #    for each host in timeframe\n    #                for each dns_question_etld_plus_one\n    #                    if number of dns_question_name > 200\n    #                        dns_question_etld_plus_one is not in default_list_of_well_known_domains\nfalsepositives:\n    - Legitimate domain name requested, which should be added to whitelist\nlevel: high\nstatus: unsupported\n",
      "question": "High rate of unique Fully Qualified Domain Names (FQDN) requests per root domain (eTLD+1) in short period of time",
      "answer": "In order to detect a high rate of unique Fully Qualified Domain Names (FQDN) requests per root domain (eTLD+1) in a short period of time, you should monitor DNS traffic for an unusual number of queries to different subdomains of well-known domains within a 15-minute timeframe. Specifically, focus on DNS logs and look for more than 200 unique subdomain queries for each root domain (eTLD+1) that do not match a predefined list of commonly queried domains. This list includes popular and legitimate services such as \"akadns.net\", \"akamaiedge.net\", \"amazonaws.com\", \"apple.com\", \"apple-dns.net\", \"cloudfront.net\", \"icloud.com\", \"in-addr.arpa\", \"google.com\", \"yahoo.com\", \"dropbox.com\", \"windowsupdate.com\", \"microsoftonline.com\", \"s-microsoft.com\", \"office365.com\", and \"linkedin.com\". If the number of unique queries exceeds this threshold and the queried root domain is not part of the aforementioned list, it may indicate a potential security threat. Be mindful that legitimate domain name requests which are not part of the predefined list could cause false positives and should be whitelisted accordingly. This detection strategy is associated with tactics and techniques related to discovery and command and control, as the high volume of unique DNS queries could be indicative of an actor performing reconnaissance or using DNS for command and control communications."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious process pattern which could be a sign of an exploited Serv-U service.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a suspicious process pattern which could be a sign of an exploited Serv-U service, you should monitor the creation of processes in Windows environments. Focus on identifying instances where the Serv-U.exe service spawns processes that are typically used for command execution, scripting, or management tasks often associated with malicious activity. These processes include cmd.exe, powershell.exe, pwsh.exe, wscript.exe, cscript.exe, sh.exe, bash.exe, schtasks.exe, regsvr32.exe, wmic.exe, mshta.exe, rundll32.exe, msiexec.exe, forfiles.exe, and scriptrunner.exe. It is important to note that while this behavior can be indicative of an attack, there could be legitimate uses of Serv-U for remote command execution, so consider the context of the activity when interpreting these signals. The detection of such patterns is critical in identifying potentially compromised Serv-U services, which could be leveraging these processes for malevolent purposes such as executing scripts, commands, or other forms of attack implementation.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\Serv-U.exe'\n        Image|endswith:\n            - '\\cmd.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\wscript.exe'\n            - '\\cscript.exe'\n            - '\\sh.exe'\n            - '\\bash.exe'\n            - '\\schtasks.exe'\n            - '\\regsvr32.exe'\n            - '\\wmic.exe'  # https://app.any.run/tasks/c903e9c8-0350-440c-8688-3881b556b8e0/\n            - '\\mshta.exe'\n            - '\\rundll32.exe'\n            - '\\msiexec.exe'\n            - '\\forfiles.exe'\n            - '\\scriptrunner.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate uses in which users or programs use the SSH service of Serv-U for remote command execution\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\Serv-U.exe'\n        Image|endswith:\n            - '\\cmd.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\wscript.exe'\n            - '\\cscript.exe'\n            - '\\sh.exe'\n            - '\\bash.exe'\n            - '\\schtasks.exe'\n            - '\\regsvr32.exe'\n            - '\\wmic.exe'  # https://app.any.run/tasks/c903e9c8-0350-440c-8688-3881b556b8e0/\n            - '\\mshta.exe'\n            - '\\rundll32.exe'\n            - '\\msiexec.exe'\n            - '\\forfiles.exe'\n            - '\\scriptrunner.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate uses in which users or programs use the SSH service of Serv-U for remote command execution\nlevel: high\n",
      "question": "suspicious process pattern which could be a sign of an exploited Serv-U service",
      "answer": "In order to detect a suspicious process pattern which could be a sign of an exploited Serv-U service, you should monitor the creation of processes in Windows environments. Focus on identifying instances where the Serv-U.exe service spawns processes that are typically used for command execution, scripting, or management tasks often associated with malicious activity. These processes include cmd.exe, powershell.exe, pwsh.exe, wscript.exe, cscript.exe, sh.exe, bash.exe, schtasks.exe, regsvr32.exe, wmic.exe, mshta.exe, rundll32.exe, msiexec.exe, forfiles.exe, and scriptrunner.exe. It is important to note that while this behavior can be indicative of an attack, there could be legitimate uses of Serv-U for remote command execution, so consider the context of the activity when interpreting these signals. The detection of such patterns is critical in identifying potentially compromised Serv-U services, which could be leveraging these processes for malevolent purposes such as executing scripts, commands, or other forms of attack implementation."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting new credential is added to an existing application. Any additional credentials added outside of expected processes could be a malicious actor using those credentials..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when a new credential is added to an existing application, which could indicate a malicious actor using those credentials if added outside of expected processes, you should monitor Azure audit logs for any updates related to application certificates, secrets management, or updates to service principals/applications. Specifically, look for messages indicating \"Update Application-Certificates and secrets management\" or \"Update Service principal/Update Application\". It's important to consider that updates to credentials during normal working hours or as part of standard workflows may not be malicious and could be flagged as false positives. This approach is critical for maintaining the security of applications within Azure environments and is assigned a high priority level.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: azure\n    service: auditlogs\ndetection:\n    selection:\n        properties.message:\n            - Update Application-Certificates and secrets management\n            - Update Service principal/Update Application\n    condition: selection\nfalsepositives:\n    - When credentials are added/removed as part of the normal working hours/workflows\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: azure\n    service: auditlogs\ndetection:\n    selection:\n        properties.message:\n            - Update Application-Certificates and secrets management\n            - Update Service principal/Update Application\n    condition: selection\nfalsepositives:\n    - When credentials are added/removed as part of the normal working hours/workflows\nlevel: high\n",
      "question": "new credential is added to an existing application. Any additional credentials added outside of expected processes could be a malicious actor using those credentials.",
      "answer": "In order to detect when a new credential is added to an existing application, which could indicate a malicious actor using those credentials if added outside of expected processes, you should monitor Azure audit logs for any updates related to application certificates, secrets management, or updates to service principals/applications. Specifically, look for messages indicating \"Update Application-Certificates and secrets management\" or \"Update Service principal/Update Application\". It's important to consider that updates to credentials during normal working hours or as part of standard workflows may not be malicious and could be flagged as false positives. This approach is critical for maintaining the security of applications within Azure environments and is assigned a high priority level."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting API Token is revoked..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when an API Token is revoked, you should: Monitor Okta service logs for events of the type \"system.api_token.revoke\". This indicates that an API token, which is used to authenticate to the system programmatically, is being revoked. Notably, the revocation of API tokens can signify an administrative response to a potential compromise or an operational change. However, the reasons for revocation might vary and not all revocations are indicative of a security incident. The detection of such events is crucial for auditing and understanding the security posture regarding API access and usage within the environment. It's important to note that while this activity is flagged at a medium level of importance, not every instance of API token revocation is malicious or unauthorized. There might be legitimate reasons for these actions, and unknown false positives could occur, where actions are interpreted as suspicious without malicious intent. Therefore, context and further investigation into each specific event are vital for accurate assessment.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: okta\n    service: okta\ndetection:\n    selection:\n        eventtype: system.api_token.revoke\n    condition: selection\nfalsepositives:\n    - Unknown\n\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: okta\n    service: okta\ndetection:\n    selection:\n        eventtype: system.api_token.revoke\n    condition: selection\nfalsepositives:\n    - Unknown\n\nlevel: medium\n",
      "question": "API Token is revoked.",
      "answer": "In order to detect when an API Token is revoked, you should: Monitor Okta service logs for events of the type \"system.api_token.revoke\". This indicates that an API token, which is used to authenticate to the system programmatically, is being revoked. Notably, the revocation of API tokens can signify an administrative response to a potential compromise or an operational change. However, the reasons for revocation might vary and not all revocations are indicative of a security incident. The detection of such events is crucial for auditing and understanding the security posture regarding API access and usage within the environment. It's important to note that while this activity is flagged at a medium level of importance, not every instance of API token revocation is malicious or unauthorized. There might be legitimate reasons for these actions, and unknown false positives could occur, where actions are interpreted as suspicious without malicious intent. Therefore, context and further investigation into each specific event are vital for accurate assessment."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of Sysinternals ADExplorer with the \"-snapshot\" flag in order to save a local copy of the active directory database to a suspicious directory..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the execution of Sysinternals ADExplorer with the \"-snapshot\" flag in order to save a local copy of the active directory database to a suspicious directory, you should observe the following: Focus on the creation of new processes on Windows systems. Specifically, look out for instances where the process image name ends with '\\ADExplorer.exe', or the original file name is noted as 'AdExp'. This targets the ADExplorer utility, a tool capable of interacting with Windows Active Directory data. Additionally, monitor if the command line executed with these processes contains the 'snapshot' flag, an indication that the tool is being used to capture a local copy of the active directory database. Further scrutiny is advised for commands indicating that the snapshot might be saved to traditionally suspicious directories, such as '\\Downloads\\', '\\Users\\Public\\', '\\AppData\\', and '\\Windows\\Temp\\'. Any process creation event matching all these criteria should be considered highly suspect, albeit with the understanding that not all instances may be malicious, as there could be unknown legitimate causes for such behavior.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\ADExplorer.exe'\n        - OriginalFileName: 'AdExp'\n    selection_flag:\n        CommandLine|contains: 'snapshot'\n    selection_paths:\n        CommandLine|contains:\n            # TODO: Add more suspicious paths\n            - '\\Downloads\\'\n            - '\\Users\\Public\\'\n            - '\\AppData\\'\n            - '\\Windows\\Temp\\'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\ADExplorer.exe'\n        - OriginalFileName: 'AdExp'\n    selection_flag:\n        CommandLine|contains: 'snapshot'\n    selection_paths:\n        CommandLine|contains:\n            # TODO: Add more suspicious paths\n            - '\\Downloads\\'\n            - '\\Users\\Public\\'\n            - '\\AppData\\'\n            - '\\Windows\\Temp\\'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "execution of Sysinternals ADExplorer with the \"-snapshot\" flag in order to save a local copy of the active directory database to a suspicious directory.",
      "answer": "In order to detect the execution of Sysinternals ADExplorer with the \"-snapshot\" flag in order to save a local copy of the active directory database to a suspicious directory, you should observe the following: Focus on the creation of new processes on Windows systems. Specifically, look out for instances where the process image name ends with '\\ADExplorer.exe', or the original file name is noted as 'AdExp'. This targets the ADExplorer utility, a tool capable of interacting with Windows Active Directory data. Additionally, monitor if the command line executed with these processes contains the 'snapshot' flag, an indication that the tool is being used to capture a local copy of the active directory database. Further scrutiny is advised for commands indicating that the snapshot might be saved to traditionally suspicious directories, such as '\\Downloads\\', '\\Users\\Public\\', '\\AppData\\', and '\\Windows\\Temp\\'. Any process creation event matching all these criteria should be considered highly suspect, albeit with the understanding that not all instances may be malicious, as there could be unknown legitimate causes for such behavior."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting exploitation of a security bypass and elevation of privilege vulnerability with Authentication Negotiation by using weak RC4-HMAC negotiation.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the exploitation of a security bypass and elevation of privilege vulnerability with Authentication Negotiation by using weak RC4-HMAC negotiation, you should: Monitor Windows System logs for specific error events that could indicate an attempt at exploiting this vulnerability. Focus on logs where the EventID is 42, which signals a relevant event, and where the Provider_Name is marked as 'Kerberos-Key-Distribution-Center'. This provider name suggests the event is directly related to Kerberos authentication mechanisms, which are typically targeted in such attacks. Additionally, only consider log entries with a Level of 2, indicating they are error messages. Such errors could be indicative of abnormal or malicious negotiation attempts using the weaker RC4-HMAC protocol, attempting to bypass security or elevate privileges illegitimately. It is important to note that there might be instances where such detections are false positives; however, given the high severity level of this monitoring strategy, each alert should be thoroughly investigated to confirm if it's an actual exploit attempt or a benign incident.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: system\ndetection:\n    selection:\n        EventID: 42\n        Provider_Name: 'Kerberos-Key-Distribution-Center'\n        Level: 2  # Error\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: system\ndetection:\n    selection:\n        EventID: 42\n        Provider_Name: 'Kerberos-Key-Distribution-Center'\n        Level: 2  # Error\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n\n",
      "question": "exploitation of a security bypass and elevation of privilege vulnerability with Authentication Negotiation by using weak RC4-HMAC negotiation",
      "answer": "In order to detect the exploitation of a security bypass and elevation of privilege vulnerability with Authentication Negotiation by using weak RC4-HMAC negotiation, you should: Monitor Windows System logs for specific error events that could indicate an attempt at exploiting this vulnerability. Focus on logs where the EventID is 42, which signals a relevant event, and where the Provider_Name is marked as 'Kerberos-Key-Distribution-Center'. This provider name suggests the event is directly related to Kerberos authentication mechanisms, which are typically targeted in such attacks. Additionally, only consider log entries with a Level of 2, indicating they are error messages. Such errors could be indicative of abnormal or malicious negotiation attempts using the weaker RC4-HMAC protocol, attempting to bypass security or elevate privileges illegitimately. It is important to note that there might be instances where such detections are false positives; however, given the high severity level of this monitoring strategy, each alert should be thoroughly investigated to confirm if it's an actual exploit attempt or a benign incident."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Identifies when an user or application modified the federation settings on the domain..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to identify when a user or application modified the federation settings on the domain, you should: monitor Azure audit logs for any activity involving the modification of federation settings on a domain. Specifically, look out for activities with the display name \"Set federation settings on domain.\" This activity can indicate that someone has changed how authentication is handled within your Azure environment, which could potentially compromise security or facilitate unauthorized access to your resources. \n\nIt's important to note that there are legitimate reasons for modifying federation settings, such as administrative updates or maintenance tasks. Hence, not all instances of this activity are malicious. To distinguish between benign and potential security threats, consider the context of the modification, such as the user identity, user agent, and hostname involved in making the changes. Modifications from unfamiliar users or sources should be treated with suspicion and investigated further.\n\nAdjustments to federation settings authorized by known system administrators or through recognized patterns of behavior can be considered as false positives and thus can be exempted from monitoring to avoid unnecessary alerts. This approach allows for a more focused and efficient monitoring strategy, reducing the workload on security teams by filtering out expected changes from the overall alert stream.\n\nBy keeping an eye out for changes to federation settings in the identified manner and context, organizations can protect against unauthorized or malicious alterations that could undermine their security posture.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: azure\n    service: auditlogs\ndetection:\n    selection:\n        ActivityDisplayName: Set federation settings on domain\n    condition: selection\nfalsepositives:\n    - Federation Settings being modified or deleted may be performed by a system administrator.\n    - Verify whether the user identity, user agent, and/or hostname should be making changes in your environment.\n    - Federation Settings modified from unfamiliar users should be investigated. If known behavior is causing false positives, it can be exempted from the rule.\n\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: azure\n    service: auditlogs\ndetection:\n    selection:\n        ActivityDisplayName: Set federation settings on domain\n    condition: selection\nfalsepositives:\n    - Federation Settings being modified or deleted may be performed by a system administrator.\n    - Verify whether the user identity, user agent, and/or hostname should be making changes in your environment.\n    - Federation Settings modified from unfamiliar users should be investigated. If known behavior is causing false positives, it can be exempted from the rule.\n\nlevel: medium\n",
      "question": "Identifies when an user or application modified the federation settings on the domain.",
      "answer": "In order to identify when a user or application modified the federation settings on the domain, you should: monitor Azure audit logs for any activity involving the modification of federation settings on a domain. Specifically, look out for activities with the display name \"Set federation settings on domain.\" This activity can indicate that someone has changed how authentication is handled within your Azure environment, which could potentially compromise security or facilitate unauthorized access to your resources. \n\nIt's important to note that there are legitimate reasons for modifying federation settings, such as administrative updates or maintenance tasks. Hence, not all instances of this activity are malicious. To distinguish between benign and potential security threats, consider the context of the modification, such as the user identity, user agent, and hostname involved in making the changes. Modifications from unfamiliar users or sources should be treated with suspicion and investigated further.\n\nAdjustments to federation settings authorized by known system administrators or through recognized patterns of behavior can be considered as false positives and thus can be exempted from monitoring to avoid unnecessary alerts. This approach allows for a more focused and efficient monitoring strategy, reducing the workload on security teams by filtering out expected changes from the overall alert stream.\n\nBy keeping an eye out for changes to federation settings in the identified manner and context, organizations can protect against unauthorized or malicious alterations that could undermine their security posture."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    product: windows\n    category: image_load\ndetection:\n    selection:\n        Image|startswith: 'C:\\Windows\\'\n        ImageLoaded|startswith:\n            # TODO: Add more suspicious paths as you see fit in your env\n            - 'C:\\Users\\Public\\'\n            - 'C:\\PerfLogs\\'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect system process (i.e. located in system32, syswow64, etc.) loads a DLL from a suspicious location such as C:\\Users\\Public\n\nHere is how  the given sigma rule operates: In order to detect when a system process (i.e. located in system32, syswow64, etc.) loads a DLL from a suspicious location such as C:\\Users\\Public, you should monitor Windows system processes for instances where a process initially started from the C:\\Windows\\ directory attempts to load a Dynamic Link Library (DLL) from potentially suspicious locations. These suspicious locations include directories that are not typical for system process interactions, such as C:\\Users\\Public\\ and C:\\PerfLogs\\. It is crucial to focus on these loading actions as they may indicate compromised system integrity or unauthorized modifications. This observation relies on examining the references to DLL files within logs related to image loading activities. Given the high importance of catching such anomalies due to their possible implications on system security, any detections where system processes load DLLs from these unusual paths should be treated with a high level of scrutiny. However, it is also recognized that there might be instances where the detection could flag legitimate activities as suspicious. Regardless, due to the potential severity of the threat, such detections are considered of high importance.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: image_load\ndetection:\n    selection:\n        Image|startswith: 'C:\\Windows\\'\n        ImageLoaded|startswith:\n            # TODO: Add more suspicious paths as you see fit in your env\n            - 'C:\\Users\\Public\\'\n            - 'C:\\PerfLogs\\'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "system process (i.e. located in system32, syswow64, etc.) loads a DLL from a suspicious location such as C:\\Users\\Public",
      "answer": "In order to detect when a system process (i.e. located in system32, syswow64, etc.) loads a DLL from a suspicious location such as C:\\Users\\Public, you should monitor Windows system processes for instances where a process initially started from the C:\\Windows\\ directory attempts to load a Dynamic Link Library (DLL) from potentially suspicious locations. These suspicious locations include directories that are not typical for system process interactions, such as C:\\Users\\Public\\ and C:\\PerfLogs\\. It is crucial to focus on these loading actions as they may indicate compromised system integrity or unauthorized modifications. This observation relies on examining the references to DLL files within logs related to image loading activities. Given the high importance of catching such anomalies due to their possible implications on system security, any detections where system processes load DLLs from these unusual paths should be treated with a high level of scrutiny. However, it is also recognized that there might be instances where the detection could flag legitimate activities as suspicious. Regardless, due to the potential severity of the threat, such detections are considered of high importance."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    product: azure\n    service: activitylogs\ndetection:\n    selection:\n        operationName:\n            - MICROSOFT.KEYVAULT/VAULTS/SECRETS/WRITE\n            - MICROSOFT.KEYVAULT/VAULTS/SECRETS/DELETE\n            - MICROSOFT.KEYVAULT/VAULTS/SECRETS/BACKUP/ACTION\n            - MICROSOFT.KEYVAULT/VAULTS/SECRETS/PURGE/ACTION\n            - MICROSOFT.KEYVAULT/VAULTS/SECRETS/UPDATE/ACTION\n            - MICROSOFT.KEYVAULT/VAULTS/SECRETS/RECOVER/ACTION\n            - MICROSOFT.KEYVAULT/VAULTS/SECRETS/RESTORE/ACTION\n            - MICROSOFT.KEYVAULT/VAULTS/SECRETS/SETSECRET/ACTION\n    condition: selection\nfalsepositives:\n    - Secrets being modified or deleted may be performed by a system administrator.\n    - Verify whether the user identity, user agent, and/or hostname should be making changes in your environment.\n    - Secrets modified or deleted from unfamiliar users should be investigated. If known behavior is causing false positives, it can be exempted from the rule.\nlevel: medium\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect Identifies when secrets are modified or deleted in Azure.\n\nHere is how  the given sigma rule operates: In order to identify when secrets are modified or deleted in Azure, you should monitor Azure activity logs for specific operations on Key Vault secrets. The operations that need to be watched include writing new secrets, deleting existing secrets, backing up, purging, updating, recovering, restoring, and setting secrets within the Azure Key Vault. Each of these operations, such as MICROSOFT.KEYVAULT/VAULTS/SECRETS/WRITE, DELETE, BACKUP/ACTION, PURGE/ACTION, UPDATE/ACTION, RECOVER/ACTION, RESTORE/ACTION, and SETSECRET/ACTION, are crucial indicators of potential unauthorized access or manipulation of sensitive secrets stored in Azure Key Vault.\n\nDetecting these activities involves paying close attention to the operation names within the activity logs. It is also important to note that there may be legitimate reasons for these operations, such as actions performed by system administrators. To reduce the number of false positives, it is advised to verify the user identity, user agent, and hostname associated with these operations to ensure they are authorized to make changes in your environment. Secret modifications or deletions by unfamiliar users warrant further investigation. Known behaviors that lead to false alerts should be documented and possibly exempted to refine detection accuracy.\n\nThis approach is aligned with recognizing potential security incidents related to Credential Access and Defense Evasion, where attackers might attempt to access, delete, or manipulate secrets in the Azure Key Vault to further their access or hide their tracks. Monitoring these operations provides a level of oversight necessary to identify and respond to unauthorized or malicious activities targeting secured secrets.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: azure\n    service: activitylogs\ndetection:\n    selection:\n        operationName:\n            - MICROSOFT.KEYVAULT/VAULTS/SECRETS/WRITE\n            - MICROSOFT.KEYVAULT/VAULTS/SECRETS/DELETE\n            - MICROSOFT.KEYVAULT/VAULTS/SECRETS/BACKUP/ACTION\n            - MICROSOFT.KEYVAULT/VAULTS/SECRETS/PURGE/ACTION\n            - MICROSOFT.KEYVAULT/VAULTS/SECRETS/UPDATE/ACTION\n            - MICROSOFT.KEYVAULT/VAULTS/SECRETS/RECOVER/ACTION\n            - MICROSOFT.KEYVAULT/VAULTS/SECRETS/RESTORE/ACTION\n            - MICROSOFT.KEYVAULT/VAULTS/SECRETS/SETSECRET/ACTION\n    condition: selection\nfalsepositives:\n    - Secrets being modified or deleted may be performed by a system administrator.\n    - Verify whether the user identity, user agent, and/or hostname should be making changes in your environment.\n    - Secrets modified or deleted from unfamiliar users should be investigated. If known behavior is causing false positives, it can be exempted from the rule.\nlevel: medium\n",
      "question": "Identifies when secrets are modified or deleted in Azure.",
      "answer": "In order to identify when secrets are modified or deleted in Azure, you should monitor Azure activity logs for specific operations on Key Vault secrets. The operations that need to be watched include writing new secrets, deleting existing secrets, backing up, purging, updating, recovering, restoring, and setting secrets within the Azure Key Vault. Each of these operations, such as MICROSOFT.KEYVAULT/VAULTS/SECRETS/WRITE, DELETE, BACKUP/ACTION, PURGE/ACTION, UPDATE/ACTION, RECOVER/ACTION, RESTORE/ACTION, and SETSECRET/ACTION, are crucial indicators of potential unauthorized access or manipulation of sensitive secrets stored in Azure Key Vault.\n\nDetecting these activities involves paying close attention to the operation names within the activity logs. It is also important to note that there may be legitimate reasons for these operations, such as actions performed by system administrators. To reduce the number of false positives, it is advised to verify the user identity, user agent, and hostname associated with these operations to ensure they are authorized to make changes in your environment. Secret modifications or deletions by unfamiliar users warrant further investigation. Known behaviors that lead to false alerts should be documented and possibly exempted to refine detection accuracy.\n\nThis approach is aligned with recognizing potential security incidents related to Credential Access and Defense Evasion, where attackers might attempt to access, delete, or manipulate secrets in the Azure Key Vault to further their access or hide their tracks. Monitoring these operations provides a level of oversight necessary to identify and respond to unauthorized or malicious activities targeting secured secrets."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of RClone utility for exfiltration as used by various ransomwares strains like REvil, Conti, FiveHands, etc.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution of RClone utility for exfiltration as used by various ransomware strains like REvil, Conti, FiveHands, etc, you should: \n\nFocus on log sources from the Windows operating system, specifically on the creation of new processes. To identify malicious use of the RClone command-line utility, which is often leveraged by these ransomware families for data exfiltration, examine the command-line parameters for characteristics indicative of malicious activity.\n\nOne specific pattern to watch for involves commands containing '--config ', '--no-check-certificate ', and ' copy ' all together. This combination suggests an attempt to use RClone with a specific configuration that bypasses standard security checks, a common tactic in data theft operations.\n\nAdditionally, pay attention to any process creation event where the image name ends with '\\rclone.exe' and is described as 'Rsync for cloud storage'. This directly indicates the use of RClone, which is a legitimate tool that can be repurposed for malicious intent.\n\nDelving deeper into command-line usage, consider a variety of parameters that, when used together, can signal malicious intent. These include combinations of 'pass', 'user', 'copy', 'sync', 'config', 'lsd', 'remote', 'ls', 'mega', 'pcloud', 'ftp', 'ignore-existing', 'auto-confirm', 'transfers', 'multi-thread-streams', and 'no-check-certificate '. These are various operations that, in the context of ransomware activity, can be related to unauthorized data access, synchronization, and transmission to remote locations.\n\nBe aware that all of the mentioned conditions and parameters should be carefully monitored while acknowledging that there might be legitimate uses of RClone. False positives are a consideration, and each detection must be contextualized to the broader behavior on the system.\n\nCapture and analyze the command line and parent command line details for any process that triggers these detection criteria, as these fields can provide substantial insight into the nature of the activity. Given the high level of threat associated with these ransomware families, maintaining vigilance in detecting such patterns is crucial for preventing data exfiltration attempts.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_specific_options:\n        CommandLine|contains|all:\n            - '--config '\n            - '--no-check-certificate '\n            - ' copy '\n    selection_rclone_img:\n        - Image|endswith: '\\rclone.exe'\n        - Description: 'Rsync for cloud storage'\n    selection_rclone_cli:\n        CommandLine|contains:\n            - 'pass'\n            - 'user'\n            - 'copy'\n            - 'sync'\n            - 'config'\n            - 'lsd'\n            - 'remote'\n            - 'ls'\n            - 'mega'\n            - 'pcloud'\n            - 'ftp'\n            - 'ignore-existing'\n            - 'auto-confirm'\n            - 'transfers'\n            - 'multi-thread-streams'\n            - 'no-check-certificate '\n    condition: selection_specific_options or all of selection_rclone_*\nfields:\n    - CommandLine\n    - ParentCommandLine\n    - Details\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_specific_options:\n        CommandLine|contains|all:\n            - '--config '\n            - '--no-check-certificate '\n            - ' copy '\n    selection_rclone_img:\n        - Image|endswith: '\\rclone.exe'\n        - Description: 'Rsync for cloud storage'\n    selection_rclone_cli:\n        CommandLine|contains:\n            - 'pass'\n            - 'user'\n            - 'copy'\n            - 'sync'\n            - 'config'\n            - 'lsd'\n            - 'remote'\n            - 'ls'\n            - 'mega'\n            - 'pcloud'\n            - 'ftp'\n            - 'ignore-existing'\n            - 'auto-confirm'\n            - 'transfers'\n            - 'multi-thread-streams'\n            - 'no-check-certificate '\n    condition: selection_specific_options or all of selection_rclone_*\nfields:\n    - CommandLine\n    - ParentCommandLine\n    - Details\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "execution of RClone utility for exfiltration as used by various ransomwares strains like REvil, Conti, FiveHands, etc",
      "answer": "In order to detect execution of RClone utility for exfiltration as used by various ransomware strains like REvil, Conti, FiveHands, etc, you should: \n\nFocus on log sources from the Windows operating system, specifically on the creation of new processes. To identify malicious use of the RClone command-line utility, which is often leveraged by these ransomware families for data exfiltration, examine the command-line parameters for characteristics indicative of malicious activity.\n\nOne specific pattern to watch for involves commands containing '--config ', '--no-check-certificate ', and ' copy ' all together. This combination suggests an attempt to use RClone with a specific configuration that bypasses standard security checks, a common tactic in data theft operations.\n\nAdditionally, pay attention to any process creation event where the image name ends with '\\rclone.exe' and is described as 'Rsync for cloud storage'. This directly indicates the use of RClone, which is a legitimate tool that can be repurposed for malicious intent.\n\nDelving deeper into command-line usage, consider a variety of parameters that, when used together, can signal malicious intent. These include combinations of 'pass', 'user', 'copy', 'sync', 'config', 'lsd', 'remote', 'ls', 'mega', 'pcloud', 'ftp', 'ignore-existing', 'auto-confirm', 'transfers', 'multi-thread-streams', and 'no-check-certificate '. These are various operations that, in the context of ransomware activity, can be related to unauthorized data access, synchronization, and transmission to remote locations.\n\nBe aware that all of the mentioned conditions and parameters should be carefully monitored while acknowledging that there might be legitimate uses of RClone. False positives are a consideration, and each detection must be contextualized to the broader behavior on the system.\n\nCapture and analyze the command line and parent command line details for any process that triggers these detection criteria, as these fields can provide substantial insight into the nature of the activity. Given the high level of threat associated with these ransomware families, maintaining vigilance in detecting such patterns is crucial for preventing data exfiltration attempts."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        Image|endswith: '\\w3wp.exe'\n        CommandLine|contains: 'MSExchange'\n        TargetFilename|contains:\n            - 'FrontEnd\\HttpProxy\\'           # from GTSC and MSTI reports\n            - '\\inetpub\\wwwroot\\aspnet_client\\' # from GTSC report\n    selection_types:\n        TargetFilename|endswith:\n            - '.aspx'\n            - '.asp'\n            - '.ashx'\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect suspicious file type dropped by an Exchange component in IIS into a suspicious folder\n\nHere is how  the given sigma rule operates: In order to detect suspicious file type dropped by an Exchange component in IIS into a suspicious folder, you should: monitor Windows file event logs for occurrences where a file with an extension of either .aspx, .asp, or .ashx is created or modified in directories commonly associated with IIS web applications, particularly within the paths 'FrontEnd\\HttpProxy\\' and '\\inetpub\\wwwroot\\aspnet_client\\'. The primary executable to watch in relation to this activity is 'w3wp.exe', a process associated with IIS web application pools, especially when its command line invocation includes references to 'MSExchange'. This specific activity is flagged with a high level of concern due to its potential association with malicious operations targeting Microsoft Exchange components working within the IIS infrastructure.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        Image|endswith: '\\w3wp.exe'\n        CommandLine|contains: 'MSExchange'\n        TargetFilename|contains:\n            - 'FrontEnd\\HttpProxy\\'           # from GTSC and MSTI reports\n            - '\\inetpub\\wwwroot\\aspnet_client\\' # from GTSC report\n    selection_types:\n        TargetFilename|endswith:\n            - '.aspx'\n            - '.asp'\n            - '.ashx'\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "suspicious file type dropped by an Exchange component in IIS into a suspicious folder",
      "answer": "In order to detect suspicious file type dropped by an Exchange component in IIS into a suspicious folder, you should: monitor Windows file event logs for occurrences where a file with an extension of either .aspx, .asp, or .ashx is created or modified in directories commonly associated with IIS web applications, particularly within the paths 'FrontEnd\\HttpProxy\\' and '\\inetpub\\wwwroot\\aspnet_client\\'. The primary executable to watch in relation to this activity is 'w3wp.exe', a process associated with IIS web application pools, especially when its command line invocation includes references to 'MSExchange'. This specific activity is flagged with a high level of concern due to its potential association with malicious operations targeting Microsoft Exchange components working within the IIS infrastructure."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\gup.exe'\n        ImageLoaded|endswith: '\\libcurl.dll'\n    filter_main_notepad_plusplus:\n        Image|endswith: '\\Notepad++\\updater\\GUP.exe'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unknown\nlevel: medium\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect potential DLL sideloading of \"libcurl.dll\" by the \"gup.exe\" process from an uncommon location\n\nHere is how  the given sigma rule operates: In order to detect potential DLL sideloading of \"libcurl.dll\" by the \"gup.exe\" process from an uncommon location, you should monitor Windows image load events for instances where the \"gup.exe\" process loads the \"libcurl.dll\". It is important to note that the legitimate process \"Notepad++\\updater\\GUP.exe\" loading \"libcurl.dll\" should not be considered suspicious and thus is excluded from this detection criterion. This detection focuses on identifying abnormal or potentially malicious activity involving the sideloading technique where \"gup.exe\" is found outside of its usual update process environment, specifically targeting DLL files with the name \"libcurl.dll\". Consequently, this activity is observed under suspicion of being an attack technique but does come with a caution regarding unknown false positives, indicating that not all detections might represent actual threats. The severity level of this rule is marked as medium.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\gup.exe'\n        ImageLoaded|endswith: '\\libcurl.dll'\n    filter_main_notepad_plusplus:\n        Image|endswith: '\\Notepad++\\updater\\GUP.exe'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "potential DLL sideloading of \"libcurl.dll\" by the \"gup.exe\" process from an uncommon location",
      "answer": "In order to detect potential DLL sideloading of \"libcurl.dll\" by the \"gup.exe\" process from an uncommon location, you should monitor Windows image load events for instances where the \"gup.exe\" process loads the \"libcurl.dll\". It is important to note that the legitimate process \"Notepad++\\updater\\GUP.exe\" loading \"libcurl.dll\" should not be considered suspicious and thus is excluded from this detection criterion. This detection focuses on identifying abnormal or potentially malicious activity involving the sideloading technique where \"gup.exe\" is found outside of its usual update process environment, specifically targeting DLL files with the name \"libcurl.dll\". Consequently, this activity is observed under suspicion of being an attack technique but does come with a caution regarding unknown false positives, indicating that not all detections might represent actual threats. The severity level of this rule is marked as medium."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains:\n            - 'Remove-SmbShare'\n            - 'Remove-FileShare'\n    condition: selection\nfalsepositives:\n    - Administrators or Power users may remove their shares via cmd line\nlevel: medium\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect when when a mounted share is removed. Adversaries may remove share connections that are no longer useful in order to clean up traces of their operation\n\nHere is how  the given sigma rule operates: In order to detect when a mounted share is removed, as adversaries may remove share connections that are no longer useful in order to clean up traces of their operation, you should look into script block logging from Windows environments. This requires that Script Block Logging is enabled to catch the execution of scripts that might be trying to delete mounted shares. Specifically, focus on detecting scripts that contain the commands 'Remove-SmbShare' or 'Remove-FileShare', as these indicate an attempt to remove a share. Be aware that there could be legitimate reasons for these commands being run, such as by administrators or power users managing their shares through the command line, so consider this potential for false positives. The detection of these commands represents a medium-level threat, linking back to tactics and techniques that involve maintaining stealth and operational cleanup by adversaries.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains:\n            - 'Remove-SmbShare'\n            - 'Remove-FileShare'\n    condition: selection\nfalsepositives:\n    - Administrators or Power users may remove their shares via cmd line\nlevel: medium\n",
      "question": "when when a mounted share is removed. Adversaries may remove share connections that are no longer useful in order to clean up traces of their operation",
      "answer": "In order to detect when a mounted share is removed, as adversaries may remove share connections that are no longer useful in order to clean up traces of their operation, you should look into script block logging from Windows environments. This requires that Script Block Logging is enabled to catch the execution of scripts that might be trying to delete mounted shares. Specifically, focus on detecting scripts that contain the commands 'Remove-SmbShare' or 'Remove-FileShare', as these indicate an attempt to remove a share. Be aware that there could be legitimate reasons for these commands being run, such as by administrators or power users managing their shares through the command line, so consider this potential for false positives. The detection of these commands represents a medium-level threat, linking back to tactics and techniques that involve maintaining stealth and operational cleanup by adversaries."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Get the processes that are running on the local computer..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to get the processes that are running on the local computer, you should: Monitor script block execution logs on Windows systems, specifically looking for instances where the text `Get-Process` appears within a PowerShell script. This technique requires that Script Block Logging be enabled to track and analyze PowerShell execution. It's important to be aware that there might be legitimate reasons for scripts to query running processes, which could lead to false positives. The risk associated with this specific activity is considered low.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains: Get-Process\n    condition: selection\nfalsepositives:\n    - Legitimate PowerShell scripts\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains: Get-Process\n    condition: selection\nfalsepositives:\n    - Legitimate PowerShell scripts\nlevel: low\n",
      "question": "Get the processes that are running on the local computer.",
      "answer": "In order to get the processes that are running on the local computer, you should: Monitor script block execution logs on Windows systems, specifically looking for instances where the text `Get-Process` appears within a PowerShell script. This technique requires that Script Block Logging be enabled to track and analyze PowerShell execution. It's important to be aware that there might be legitimate reasons for scripts to query running processes, which could lead to false positives. The risk associated with this specific activity is considered low."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_parent:\n        ParentImage|endswith: '\\code.exe'\n    selection_children_images:\n        Image|endswith:\n            - '\\calc.exe'\n            - '\\regsvr32.exe'\n            - '\\rundll32.exe'\n            - '\\cscript.exe'\n            - '\\wscript.exe'\n    selection_children_cli:\n        Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\cmd.exe'\n        CommandLine|contains:\n            - 'Invoke-Expressions'\n            - 'IEX'\n            - 'Invoke-Command'\n            - 'ICM'\n            - 'DownloadString'\n            - 'rundll32'\n            - 'regsvr32'\n            - 'wscript'\n            - 'cscript'\n    selection_children_paths:\n        Image|contains:\n            # Add more suspicious locations\n            - 'C:\\Users\\Public\\'\n            - 'C:\\Windows\\Temp\\'\n            - 'C:\\Temp\\'\n    condition: selection_parent and 1 of selection_children_*\nfalsepositives:\n    - In development environment where VsCode is used heavily. False positives may occur when developers use task to compile or execute different types of code. Remove or add processes accordingly\nlevel: medium\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect uncommon or suspicious child processes spawning from a VsCode \"code.exe\" process. This could indicate an attempt of persistence via VsCode tasks or terminal profiles.\n\nHere is how  the given sigma rule operates: In order to detect uncommon or suspicious child processes spawning from a VsCode \"code.exe\" process, which could indicate an attempt of persistence via VsCode tasks or terminal profiles, you should: Monitor the creation of processes on Windows systems, specifically focusing on any instance where \"code.exe\" initiates the creation of child processes. Be particularly vigilant for child processes such as \"calc.exe\", \"regsvr32.exe\", \"rundll32.exe\", \"cscript.exe\", and \"wscript.exe\", which are commonly associated with legitimate system functions but can be repurposed for malicious activity. Additionally, pay attention to command-line interfaces like \"powershell.exe\", \"pwsh.exe\", and \"cmd.exe\" when they execute commands that include \"Invoke-Expressions\", \"IEX\", \"Invoke-Command\", \"ICM\", \"DownloadString\", \"rundll32\", \"regsvr32\", \"wscript\", and \"cscript\", as these could be indicators of scripts being run for download or execution of malicious payloads. Furthermore, scrutinize the paths from which these child processes are initiated, with specific focus on directories commonly exploited for temporary file storage and execution by adversaries, such as \"C:\\Users\\Public\\\", \"C:\\Windows\\Temp\\\", and \"C:\\Temp\\\". It's crucial to handle potential false positives carefully, particularly in development environments where Visual Studio Code is used extensively and tasks may legitimately compile or execute various types of code that could falsely trigger these detections. The sensitivity of this monitoring should be set to a medium level, balancing the need to detect potential intrusions against the risk of generating excessive false positives.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_parent:\n        ParentImage|endswith: '\\code.exe'\n    selection_children_images:\n        Image|endswith:\n            - '\\calc.exe'\n            - '\\regsvr32.exe'\n            - '\\rundll32.exe'\n            - '\\cscript.exe'\n            - '\\wscript.exe'\n    selection_children_cli:\n        Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\cmd.exe'\n        CommandLine|contains:\n            - 'Invoke-Expressions'\n            - 'IEX'\n            - 'Invoke-Command'\n            - 'ICM'\n            - 'DownloadString'\n            - 'rundll32'\n            - 'regsvr32'\n            - 'wscript'\n            - 'cscript'\n    selection_children_paths:\n        Image|contains:\n            # Add more suspicious locations\n            - 'C:\\Users\\Public\\'\n            - 'C:\\Windows\\Temp\\'\n            - 'C:\\Temp\\'\n    condition: selection_parent and 1 of selection_children_*\nfalsepositives:\n    - In development environment where VsCode is used heavily. False positives may occur when developers use task to compile or execute different types of code. Remove or add processes accordingly\nlevel: medium\n",
      "question": "uncommon or suspicious child processes spawning from a VsCode \"code.exe\" process. This could indicate an attempt of persistence via VsCode tasks or terminal profiles.",
      "answer": "In order to detect uncommon or suspicious child processes spawning from a VsCode \"code.exe\" process, which could indicate an attempt of persistence via VsCode tasks or terminal profiles, you should: Monitor the creation of processes on Windows systems, specifically focusing on any instance where \"code.exe\" initiates the creation of child processes. Be particularly vigilant for child processes such as \"calc.exe\", \"regsvr32.exe\", \"rundll32.exe\", \"cscript.exe\", and \"wscript.exe\", which are commonly associated with legitimate system functions but can be repurposed for malicious activity. Additionally, pay attention to command-line interfaces like \"powershell.exe\", \"pwsh.exe\", and \"cmd.exe\" when they execute commands that include \"Invoke-Expressions\", \"IEX\", \"Invoke-Command\", \"ICM\", \"DownloadString\", \"rundll32\", \"regsvr32\", \"wscript\", and \"cscript\", as these could be indicators of scripts being run for download or execution of malicious payloads. Furthermore, scrutinize the paths from which these child processes are initiated, with specific focus on directories commonly exploited for temporary file storage and execution by adversaries, such as \"C:\\Users\\Public\\\", \"C:\\Windows\\Temp\\\", and \"C:\\Temp\\\". It's crucial to handle potential false positives carefully, particularly in development environments where Visual Studio Code is used extensively and tasks may legitimately compile or execute various types of code that could falsely trigger these detections. The sensitivity of this monitoring should be set to a medium level, balancing the need to detect potential intrusions against the risk of generating excessive false positives."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    product: windows\n    category: ps_classic_start\n    definition: fields have to be extract from event\ndetection:\n    selection:\n        EngineVersion|startswith: '2.'\n    filter:\n        HostVersion|startswith: '2.'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: medium\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect PowerShell downgrade attack by comparing the host versions with the actually used engine version 2.0\n\nHere is how  the given sigma rule operates: In order to detect PowerShell downgrade attack by comparing the host versions with the actually used engine version 2.0, you should: Monitor PowerShell classic start events on Windows systems, focusing specifically on event fields to extract crucial information. Look for instances where the PowerShell Engine Version starts with '2.', indicating the use of version 2.0, potentially to exploit vulnerabilities or bypass security features present in newer versions. However, to reduce false positives and improve accuracy, exclude any events where the Host Version also starts with '2.', as this suggests the host naturally runs this older version, and the activity may not be malicious. Tracking such events is pivotal in identifying attempts to utilize a known downgrade attack technique, where attackers force the use of an older and possibly more vulnerable PowerShell version on a host that supports newer, more secure versions. This monitoring strategy is considered of medium importance in defending against this attack method and is tagged with tactics and techniques such as Defense Evasion.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_classic_start\n    definition: fields have to be extract from event\ndetection:\n    selection:\n        EngineVersion|startswith: '2.'\n    filter:\n        HostVersion|startswith: '2.'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "PowerShell downgrade attack by comparing the host versions with the actually used engine version 2.0",
      "answer": "In order to detect PowerShell downgrade attack by comparing the host versions with the actually used engine version 2.0, you should: Monitor PowerShell classic start events on Windows systems, focusing specifically on event fields to extract crucial information. Look for instances where the PowerShell Engine Version starts with '2.', indicating the use of version 2.0, potentially to exploit vulnerabilities or bypass security features present in newer versions. However, to reduce false positives and improve accuracy, exclude any events where the Host Version also starts with '2.', as this suggests the host naturally runs this older version, and the activity may not be malicious. Tracking such events is pivotal in identifying attempts to utilize a known downgrade attack technique, where attackers force the use of an older and possibly more vulnerable PowerShell version on a host that supports newer, more secure versions. This monitoring strategy is considered of medium importance in defending against this attack method and is tagged with tactics and techniques such as Defense Evasion."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1:\n        ParentImage|endswith: '\\WinRAR.exe'\n        Image|endswith: '\\wscript.exe'\n    selection2:\n        CommandLine|contains: ' /c ping.exe -n 6 127.0.0.1 & type '\n    selection3:\n        CommandLine|contains|all:\n            - 'regsvr32.exe'\n            - 'C:\\ProgramData'\n            - '.tmp'\n    condition: 1 of selection*\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Unlikely\nlevel: critical\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect potential QBot activity by looking for process executions used previously by QBot\n\nHere is how  the given sigma rule operates: In order to detect potential QBot activity by looking for process executions used previously by QBot, you should: Monitor Windows process creation logs for specific execution patterns that are indicative of QBot malware operations. Look out for instances where the WinRAR application initiates 'wscript.exe', a scenario that could be leveraged for malicious script executions. Additionally, watch for command line executions that include launching 'ping.exe' in a pattern that seems to be delaying execution with a follow-up action of reading a file - a technique that can be used to bypass time-based detection mechanisms. Furthermore, be vigilant for occurrences where 'regsvr32.exe' is executed alongside command lines that reference the 'C:\\ProgramData' directory and involve a '.tmp' file, as this pattern is characteristic of QBot's method of establishing persistence or executing malicious payloads. Given these specific criteria across different selection conditions, diligence in logging and reviewing such processes under the outlined circumstances is vital, recognizing these patterns as critical indicators of potential QBot infiltration. There would be few legitimate reasons for these specific combinations of process execution and command lines, so false positives are considered unlikely.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1:\n        ParentImage|endswith: '\\WinRAR.exe'\n        Image|endswith: '\\wscript.exe'\n    selection2:\n        CommandLine|contains: ' /c ping.exe -n 6 127.0.0.1 & type '\n    selection3:\n        CommandLine|contains|all:\n            - 'regsvr32.exe'\n            - 'C:\\ProgramData'\n            - '.tmp'\n    condition: 1 of selection*\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
      "question": "potential QBot activity by looking for process executions used previously by QBot",
      "answer": "In order to detect potential QBot activity by looking for process executions used previously by QBot, you should: Monitor Windows process creation logs for specific execution patterns that are indicative of QBot malware operations. Look out for instances where the WinRAR application initiates 'wscript.exe', a scenario that could be leveraged for malicious script executions. Additionally, watch for command line executions that include launching 'ping.exe' in a pattern that seems to be delaying execution with a follow-up action of reading a file - a technique that can be used to bypass time-based detection mechanisms. Furthermore, be vigilant for occurrences where 'regsvr32.exe' is executed alongside command lines that reference the 'C:\\ProgramData' directory and involve a '.tmp' file, as this pattern is characteristic of QBot's method of establishing persistence or executing malicious payloads. Given these specific criteria across different selection conditions, diligence in logging and reviewing such processes under the outlined circumstances is vital, recognizing these patterns as critical indicators of potential QBot infiltration. There would be few legitimate reasons for these specific combinations of process execution and command lines, so false positives are considered unlikely."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting an svchost process spawning an instance of an office application. This happens when the initial word application creates an instance of one of the Office COM objects such as 'Word.Application', 'Excel.Application', etc.\nThis can be used by malicious actors to create malicious Office documents with macros on the fly. (See vba2clr project in the references)\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect an svchost process spawning an instance of an office application, which happens when the initial word application creates an instance of one of the Office COM objects such as 'Word.Application', 'Excel.Application', etc., a method used by malicious actors to create malicious Office documents with macros on the fly, you should: Monitor the creation of processes on Windows systems, focusing on spotting instances where the 'svchost.exe' process, a legitimate Windows service host, is the parent process for launching office applications such as Word (winword.exe), Excel (excel.exe), PowerPoint (powerpnt.exe), Access (msaccess.exe), Publisher (mspub.exe), Equation Editor (eqnedt32.exe), or Visio (visio.exe). This activity is suspicious because 'svchost.exe' typically does not directly start Office applications, suggesting an abnormal use possibly tied to automation scripts. Be aware, however, that there can be benign instances where scripts or legitimate automated tasks do exactly this for office automation purposes, which are considered as potential false positives. The severity level for these observations is classified as medium, indicating a noteworthy but not definitive indication of malicious activity.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        ParentImage|endswith: '\\svchost.exe'\n        Image|endswith:\n            - '\\winword.exe'\n            - '\\excel.exe'\n            - '\\powerpnt.exe'\n            - '\\msaccess.exe'\n            - '\\mspub.exe'\n            - '\\eqnedt32.exe'\n            - '\\visio.exe'\n    condition: all of selection*\nfalsepositives:\n    - Legitimate usage of office automation via scripting\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        ParentImage|endswith: '\\svchost.exe'\n        Image|endswith:\n            - '\\winword.exe'\n            - '\\excel.exe'\n            - '\\powerpnt.exe'\n            - '\\msaccess.exe'\n            - '\\mspub.exe'\n            - '\\eqnedt32.exe'\n            - '\\visio.exe'\n    condition: all of selection*\nfalsepositives:\n    - Legitimate usage of office automation via scripting\nlevel: medium\n",
      "question": "an svchost process spawning an instance of an office application. This happens when the initial word application creates an instance of one of the Office COM objects such as 'Word.Application', 'Excel.Application', etc.\nThis can be used by malicious actors to create malicious Office documents with macros on the fly. (See vba2clr project in the references)\n",
      "answer": "In order to detect an svchost process spawning an instance of an office application, which happens when the initial word application creates an instance of one of the Office COM objects such as 'Word.Application', 'Excel.Application', etc., a method used by malicious actors to create malicious Office documents with macros on the fly, you should: Monitor the creation of processes on Windows systems, focusing on spotting instances where the 'svchost.exe' process, a legitimate Windows service host, is the parent process for launching office applications such as Word (winword.exe), Excel (excel.exe), PowerPoint (powerpnt.exe), Access (msaccess.exe), Publisher (mspub.exe), Equation Editor (eqnedt32.exe), or Visio (visio.exe). This activity is suspicious because 'svchost.exe' typically does not directly start Office applications, suggesting an abnormal use possibly tied to automation scripts. Be aware, however, that there can be benign instances where scripts or legitimate automated tasks do exactly this for office automation purposes, which are considered as potential false positives. The severity level for these observations is classified as medium, indicating a noteworthy but not definitive indication of malicious activity."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting potential beaconing activity to domains related to 3CX 3CXDesktopApp compromise.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential beaconing activity to domains related to 3CX 3CXDesktopApp compromise, you should monitor network connections from Windows products for any instances where the application involved ends with '\\3CXDesktopApp.exe' and the destination hostname includes one of several specified suspicious domains. These domains, such as 'akamaicontainer.com', 'azuredeploystore.com', and 'officeaddons.com' among others, are indicators that the 3CXDesktopApp may have been compromised and is possibly communicating with a command and control server. Due to the high confidence in these indicators, false positives are considered unlikely. This method focuses on identifying malicious network activity that signals a compromised application, potentially signaling a larger security breach.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: network_connection\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\3CXDesktopApp.exe'\n        DestinationHostname|contains:\n            - 'akamaicontainer.com'\n            - 'akamaitechcloudservices.com'\n            - 'azuredeploystore.com'\n            - 'azureonlinecloud.com'\n            - 'azureonlinestorage.com'\n            - 'dunamistrd.com'\n            - 'glcloudservice.com'\n            - 'journalide.org'\n            - 'msedgepackageinfo.com'\n            - 'msstorageazure.com'\n            - 'msstorageboxes.com'\n            - 'officeaddons.com'\n            - 'officestoragebox.com'\n            - 'pbxcloudeservices.com'\n            - 'pbxphonenetwork.com'\n            - 'pbxsources.com'\n            - 'qwepoi123098.com'\n            - 'sbmsa.wiki'\n            - 'sourceslabs.com'\n            - 'visualstudiofactory.com'\n            - 'zacharryblogs.com'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: network_connection\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\3CXDesktopApp.exe'\n        DestinationHostname|contains:\n            - 'akamaicontainer.com'\n            - 'akamaitechcloudservices.com'\n            - 'azuredeploystore.com'\n            - 'azureonlinecloud.com'\n            - 'azureonlinestorage.com'\n            - 'dunamistrd.com'\n            - 'glcloudservice.com'\n            - 'journalide.org'\n            - 'msedgepackageinfo.com'\n            - 'msstorageazure.com'\n            - 'msstorageboxes.com'\n            - 'officeaddons.com'\n            - 'officestoragebox.com'\n            - 'pbxcloudeservices.com'\n            - 'pbxphonenetwork.com'\n            - 'pbxsources.com'\n            - 'qwepoi123098.com'\n            - 'sbmsa.wiki'\n            - 'sourceslabs.com'\n            - 'visualstudiofactory.com'\n            - 'zacharryblogs.com'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "potential beaconing activity to domains related to 3CX 3CXDesktopApp compromise",
      "answer": "In order to detect potential beaconing activity to domains related to 3CX 3CXDesktopApp compromise, you should monitor network connections from Windows products for any instances where the application involved ends with '\\3CXDesktopApp.exe' and the destination hostname includes one of several specified suspicious domains. These domains, such as 'akamaicontainer.com', 'azuredeploystore.com', and 'officeaddons.com' among others, are indicators that the 3CXDesktopApp may have been compromised and is possibly communicating with a command and control server. Due to the high confidence in these indicators, false positives are considered unlikely. This method focuses on identifying malicious network activity that signals a compromised application, potentially signaling a larger security breach."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting new admin is created..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when a new admin is created, you should monitor Azure audit logs for activities that involve adding a user and assigning them to a role, specifically focusing on actions where the status of these operations is marked as 'Success'. This process involves identifying records within the audit logs where the message includes both \"Add user\" and \"Add member to role,\" indicating that not only was a user account created, but it was also assigned administrative privileges or added to a significant role. It's important to consider that there will be instances where the creation of a new admin account is a legitimate action and not malicious, which should be taken into account to avoid unnecessary alerts. This detection strategy is crucial for identifying potential unauthorized or suspicious activities related to privilege escalation or abuse within an organization's Azure environment.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: azure\n    service: auditlogs\ndetection:\n    selection:\n        properties.message|contains|all:\n            - Add user\n            - Add member to role\n        Status: Success\n    condition: selection\nfalsepositives:\n    - A legitimate new admin account being created\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: azure\n    service: auditlogs\ndetection:\n    selection:\n        properties.message|contains|all:\n            - Add user\n            - Add member to role\n        Status: Success\n    condition: selection\nfalsepositives:\n    - A legitimate new admin account being created\nlevel: medium\n",
      "question": "new admin is created.",
      "answer": "In order to detect when a new admin is created, you should monitor Azure audit logs for activities that involve adding a user and assigning them to a role, specifically focusing on actions where the status of these operations is marked as 'Success'. This process involves identifying records within the audit logs where the message includes both \"Add user\" and \"Add member to role,\" indicating that not only was a user account created, but it was also assigned administrative privileges or added to a significant role. It's important to consider that there will be instances where the creation of a new admin account is a legitimate action and not malicious, which should be taken into account to avoid unnecessary alerts. This detection strategy is crucial for identifying potential unauthorized or suspicious activities related to privilege escalation or abuse within an organization's Azure environment."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: file_event\n    product: windows\n    definition: 'Requirements: The \".evtx\" exntesion should be monitored via a Sysmon configuration. Example: <TargetFilename condition=\"end with\">.evtx<TargetFilename>'\ndetection:\n    selection:\n        TargetFilename|endswith: '.evtx'\n    filter_path:\n        TargetFilename|startswith: 'C:\\Windows\\System32\\winevt\\Logs\\'\n    filter_baseimage:\n        TargetFilename|startswith: 'C:\\ProgramData\\Microsoft\\Windows\\Containers\\BaseImages\\'\n        TargetFilename|endswith: '\\Windows\\System32\\winevt\\Logs\\'\n    filter_img:\n        Image:\n            - 'C:\\Windows\\explorer.exe'\n            - 'C:\\Windows\\system32\\dllhost.exe'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Admin activity\n    - Backup activity\nlevel: medium\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect creation of new files with the \".evtx\" extension in non-common locations. Which could indicate tampering with default evtx locations in order to evade security controls\n\nHere is how  the given sigma rule operates: In order to detect the creation of new files with the \".evtx\" extension in non-common locations, which could indicate tampering with default evtx locations in order to evade security controls, you should monitor file events on Windows systems for occurrences of files with the \".evtx\" extension being created outside of their standard locations. Specifically, your monitoring should be configured to trigger alerts when such a file is identified, but exclude events related to the legitimate Windows Event Log directories, typically found under 'C:\\Windows\\System32\\winevt\\Logs\\', as well as paths associated with Windows Containers located at 'C:\\ProgramData\\Microsoft\\Windows\\Containers\\BaseImages\\' that end with '\\Windows\\System32\\winevt\\Logs\\'. Furthermore, actions performed by certain known processes like 'C:\\Windows\\explorer.exe' and 'C:\\Windows\\system32\\dllhost.exe' should be included in the exclusions to reduce false positives. Such exclusions help in distinguishing between legitimate administrative activities, such as event log backups or maintenance, and potentially malicious actions aimed at evading detection by manipulating event log files. This approach ensures a balanced monitoring strategy that focuses on identifying genuine security threats while minimizing interruptions caused by routine system operations.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: file_event\n    product: windows\n    definition: 'Requirements: The \".evtx\" exntesion should be monitored via a Sysmon configuration. Example: <TargetFilename condition=\"end with\">.evtx<TargetFilename>'\ndetection:\n    selection:\n        TargetFilename|endswith: '.evtx'\n    filter_path:\n        TargetFilename|startswith: 'C:\\Windows\\System32\\winevt\\Logs\\'\n    filter_baseimage:\n        TargetFilename|startswith: 'C:\\ProgramData\\Microsoft\\Windows\\Containers\\BaseImages\\'\n        TargetFilename|endswith: '\\Windows\\System32\\winevt\\Logs\\'\n    filter_img:\n        Image:\n            - 'C:\\Windows\\explorer.exe'\n            - 'C:\\Windows\\system32\\dllhost.exe'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Admin activity\n    - Backup activity\nlevel: medium\n",
      "question": "creation of new files with the \".evtx\" extension in non-common locations. Which could indicate tampering with default evtx locations in order to evade security controls",
      "answer": "In order to detect the creation of new files with the \".evtx\" extension in non-common locations, which could indicate tampering with default evtx locations in order to evade security controls, you should monitor file events on Windows systems for occurrences of files with the \".evtx\" extension being created outside of their standard locations. Specifically, your monitoring should be configured to trigger alerts when such a file is identified, but exclude events related to the legitimate Windows Event Log directories, typically found under 'C:\\Windows\\System32\\winevt\\Logs\\', as well as paths associated with Windows Containers located at 'C:\\ProgramData\\Microsoft\\Windows\\Containers\\BaseImages\\' that end with '\\Windows\\System32\\winevt\\Logs\\'. Furthermore, actions performed by certain known processes like 'C:\\Windows\\explorer.exe' and 'C:\\Windows\\system32\\dllhost.exe' should be included in the exclusions to reduce false positives. Such exclusions help in distinguishing between legitimate administrative activities, such as event log backups or maintenance, and potentially malicious actions aimed at evading detection by manipulating event log files. This approach ensures a balanced monitoring strategy that focuses on identifying genuine security threats while minimizing interruptions caused by routine system operations."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: registry_event\n    product: windows\ndetection:\n    selection:\n        TargetObject|contains: 'System\\CurrentControlSet\\Services\\VSS'\n        Image|endswith: 'esentutl.exe' # limit esentutl as in references, too many FP to filter\n    filter:\n        TargetObject|contains: 'System\\CurrentControlSet\\Services\\VSS\\Start'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect volume shadow copy service initialization and processing via esentutl. Registry keys such as HKLM\\\\System\\\\CurrentControlSet\\\\Services\\\\VSS\\\\Diag\\\\VolSnap\\\\Volume are captured.\n\nHere is how  the given sigma rule operates: In order to detect the initiation and execution of the attack on the mitigation process using the Sigma rule focus on locating the detection of the application of the detection strategy to detecting the initiation and processing of the sigma rules. The attack is the modification of the log file data, and the execution of detection involves examining memory and CPU the representation of the detection issue. This detection of security should be the examination of the combination of the detection on the detection on the initiation and the processing of software and hardware on the detection action, you should analyze the log entries for registry events on Windows systems. Look for any occurrences where the registry key path includes 'System\\CurrentCertSet\\Services\\VSC\\Scheduled\\TaskName' activities involving the file 'VSS'.\n\nConcentrate specifically on instances where the TargetObject attribute contains the path 'System\\CurrentSet\\Services\\VSS' and the operation involves the execution of 'exe'. However, you need to filter out any events where the TargetObject refers to 'System\\CurrentSet\\Services\\VSS\\Start' to reduce the detection of false positives. This approach is necessary for identifying attempts to make unauthorized modifications to the registry paths associated with the Volume Shadow Copy Service (VSS). These tactics are usually associated with adversarial actions such as persistence, privilege escalation, and defense evasion, aiming to maintain access or avoid detection. \n\nHowever, always be mindful of the potential for false positives in these detections.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_event\n    product: windows\ndetection:\n    selection:\n        TargetObject|contains: 'System\\CurrentControlSet\\Services\\VSS'\n        Image|endswith: 'esentutl.exe' # limit esentutl as in references, too many FP to filter\n    filter:\n        TargetObject|contains: 'System\\CurrentControlSet\\Services\\VSS\\Start'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "volume shadow copy service initialization and processing via esentutl. Registry keys such as HKLM\\\\System\\\\CurrentControlSet\\\\Services\\\\VSS\\\\Diag\\\\VolSnap\\\\Volume are captured.",
      "answer": "In order to detect the initiation and execution of the attack on the mitigation process using the Sigma rule focus on locating the detection of the application of the detection strategy to detecting the initiation and processing of the sigma rules. The attack is the modification of the log file data, and the execution of detection involves examining memory and CPU the representation of the detection issue. This detection of security should be the examination of the combination of the detection on the detection on the initiation and the processing of software and hardware on the detection action, you should analyze the log entries for registry events on Windows systems. Look for any occurrences where the registry key path includes 'System\\CurrentCertSet\\Services\\VSC\\Scheduled\\TaskName' activities involving the file 'VSS'.\n\nConcentrate specifically on instances where the TargetObject attribute contains the path 'System\\CurrentSet\\Services\\VSS' and the operation involves the execution of 'exe'. However, you need to filter out any events where the TargetObject refers to 'System\\CurrentSet\\Services\\VSS\\Start' to reduce the detection of false positives. This approach is necessary for identifying attempts to make unauthorized modifications to the registry paths associated with the Volume Shadow Copy Service (VSS). These tactics are usually associated with adversarial actions such as persistence, privilege escalation, and defense evasion, aiming to maintain access or avoid detection. \n\nHowever, always be mindful of the potential for false positives in these detections."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting DNS queries to \"ufile.io\". Which is often abused by malware for upload and exfiltration.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect DNS queries to \"ufile.io\", which is often abused by malware for upload and exfiltration, you should focus on monitoring DNS query logs from Windows-based systems. Specifically, you are looking for any DNS queries that contain the string 'ufile.io'. These queries are of high importance as they may indicate an attempt to communicate with a known file hosting service that could be used for malicious purposes, such as uploading stolen data or downloading additional malware components. It's essential to be aware that while detecting such queries can be a strong indicator of malicious activity, there can also be legitimate reasons for accessing \"ufile.io\". As such, while the detection of these queries is prioritized as high, it's also important to validate the context of these detections to minimize the risk of false positives associated with legitimate DNS queries and usage of Ufile.io.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: dns_query\ndetection:\n    selection:\n        QueryName|contains: 'ufile.io'\n    condition: selection\nfalsepositives:\n    - Legitimate DNS queries and usage of Ufile\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: dns_query\ndetection:\n    selection:\n        QueryName|contains: 'ufile.io'\n    condition: selection\nfalsepositives:\n    - Legitimate DNS queries and usage of Ufile\nlevel: high\n",
      "question": "DNS queries to \"ufile.io\". Which is often abused by malware for upload and exfiltration",
      "answer": "In order to detect DNS queries to \"ufile.io\", which is often abused by malware for upload and exfiltration, you should focus on monitoring DNS query logs from Windows-based systems. Specifically, you are looking for any DNS queries that contain the string 'ufile.io'. These queries are of high importance as they may indicate an attempt to communicate with a known file hosting service that could be used for malicious purposes, such as uploading stolen data or downloading additional malware components. It's essential to be aware that while detecting such queries can be a strong indicator of malicious activity, there can also be legitimate reasons for accessing \"ufile.io\". As such, while the detection of these queries is prioritized as high, it's also important to validate the context of these detections to minimize the risk of false positives associated with legitimate DNS queries and usage of Ufile.io."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting successful authentication from potential clients using legacy authentication via user agent strings. This could be a sign of MFA bypass using a password spray attack..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect successful authentication from potential clients using legacy authentication via user agent strings, which could be a sign of MFA bypass using a password spray attack, you should: Monitor sign-in logs from Azure for successful authentication events. Pay particular attention to the user agent strings within these logs. Specifically, look out for user agent strings that contain any of the identifiers 'BAV2ROPC', 'CBAinPROD', or 'CBAinTAR'. These strings are indicative of the use of legacy authentication methods, which might be employed by attackers attempting to bypass multi-factor authentication through password spray attacks. Be aware that there may be legitimate uses of these indicators, such as known legacy accounts, and these should be considered as potential false positives. The importance of scrutinizing these events is high due to the potential security implications.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: azure\n    service: signinlogs\ndetection:\n    selection:\n        Status: 'Success'\n        userAgent|contains: \n            - 'BAV2ROPC'\n            - 'CBAinPROD'\n            - 'CBAinTAR'\n    condition: selection\nfalsepositives:\n    - Known Legacy Accounts\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: azure\n    service: signinlogs\ndetection:\n    selection:\n        Status: 'Success'\n        userAgent|contains: \n            - 'BAV2ROPC'\n            - 'CBAinPROD'\n            - 'CBAinTAR'\n    condition: selection\nfalsepositives:\n    - Known Legacy Accounts\nlevel: high\n",
      "question": "successful authentication from potential clients using legacy authentication via user agent strings. This could be a sign of MFA bypass using a password spray attack.",
      "answer": "In order to detect successful authentication from potential clients using legacy authentication via user agent strings, which could be a sign of MFA bypass using a password spray attack, you should: Monitor sign-in logs from Azure for successful authentication events. Pay particular attention to the user agent strings within these logs. Specifically, look out for user agent strings that contain any of the identifiers 'BAV2ROPC', 'CBAinPROD', or 'CBAinTAR'. These strings are indicative of the use of legacy authentication methods, which might be employed by attackers attempting to bypass multi-factor authentication through password spray attacks. Be aware that there may be legitimate uses of these indicators, such as known legacy accounts, and these should be considered as potential false positives. The importance of scrutinizing these events is high due to the potential security implications."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    product: windows\n    service: security-mitigations\ndetection:\n    selection:\n        EventID:\n            - 11\n            - 12 # MDE: ExploitGuardNonMicrosoftSignedBlocked\n        ProcessPath|endswith:\n            - '\\MpCmdRun.exe'\n            - '\\NisSrv.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect Code Integrity (CI) engine blocking Microsoft Defender's processes (MpCmdRun and NisSrv) from loading unsigned DLLs which may be an attempt to sideload arbitrary DLL\n\nHere is how  the given sigma rule operates: In order to detect Code Integrity (CI) engine blocking Microsoft Defender's processes (MpCmdRun and NisSrv) from loading unsigned DLLs which may be an attempt to sideload arbitrary DLL, you should: monitor Windows security mitigations for event IDs 11 and 12, which indicate that ExploitGuardNonMicrosoftSignedBlocked has been triggered. Focus especially on processes ending with '\\MpCmdRun.exe' and '\\NisSrv.exe'. These events suggest attempts to block these Microsoft Defender processes from loading unsigned, potentially malicious DLLs, signaling an attack attempt through DLL sideloading. This activity is considered high severity due to its implications for system security.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security-mitigations\ndetection:\n    selection:\n        EventID:\n            - 11\n            - 12 # MDE: ExploitGuardNonMicrosoftSignedBlocked\n        ProcessPath|endswith:\n            - '\\MpCmdRun.exe'\n            - '\\NisSrv.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Code Integrity (CI) engine blocking Microsoft Defender's processes (MpCmdRun and NisSrv) from loading unsigned DLLs which may be an attempt to sideload arbitrary DLL",
      "answer": "In order to detect Code Integrity (CI) engine blocking Microsoft Defender's processes (MpCmdRun and NisSrv) from loading unsigned DLLs which may be an attempt to sideload arbitrary DLL, you should: monitor Windows security mitigations for event IDs 11 and 12, which indicate that ExploitGuardNonMicrosoftSignedBlocked has been triggered. Focus especially on processes ending with '\\MpCmdRun.exe' and '\\NisSrv.exe'. These events suggest attempts to block these Microsoft Defender processes from loading unsigned, potentially malicious DLLs, signaling an attack attempt through DLL sideloading. This activity is considered high severity due to its implications for system security."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Identifies when an ElastiCache security group has been modified or deleted..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to identify when an ElastiCache security group has been modified or deleted, you should monitor CloudTrail logs for AWS services for specific activities. Look for events sourced from elasticache.amazonaws.com that indicate modifications to Elasticache security groups. These events include 'DeleteCacheSecurityGroup', which signifies the deletion of a security group; 'AuthorizeCacheSecurityGroupIngress' and 'RevokeCacheSecurityGroupIngress', which pertain to the authorization or revocation of ingress rules; and 'AuthorizeCacheSecurityGroupEgress' and 'RevokeCacheSecurityGroupEgress', relevant to the authorization or revocation of egress rules. It is important to note that not all modifications may be unauthorized or malicious. Sometimes, system or network administrators may perform legitimate modifications. Therefore, it is advisable to verify the identity of the user making the changes, as well as the user agent and/or hostname, to ensure they are recognized entities within your environment. Modifications from unfamiliar users or hosts should be subjected to further investigation. Known behaviors that repeatedly trigger false positives can be exempted from monitoring to refine the detection process. This practice maintains a focus on identifying potentially malicious activities surrounding ElastiCache security groups while minimizing noise from legitimate administrative actions.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: aws\n    service: cloudtrail\ndetection:\n    selection:\n        eventSource: elasticache.amazonaws.com\n        eventName:\n            - 'DeleteCacheSecurityGroup'\n            - 'AuthorizeCacheSecurityGroupIngress'\n            - 'RevokeCacheSecurityGroupIngress'\n            - 'AuthorizeCacheSecurityGroupEgress'\n            - 'RevokeCacheSecurityGroupEgress'\n    condition: selection\nfalsepositives:\n    - A ElastiCache security group deletion may be done by a system or network administrator. Verify whether the user identity, user agent, and/or hostname should be making changes in your environment. Security Group deletions from unfamiliar users or hosts should be investigated. If known behavior is causing false positives, it can be exempted from the rule.\n\n\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: aws\n    service: cloudtrail\ndetection:\n    selection:\n        eventSource: elasticache.amazonaws.com\n        eventName:\n            - 'DeleteCacheSecurityGroup'\n            - 'AuthorizeCacheSecurityGroupIngress'\n            - 'RevokeCacheSecurityGroupIngress'\n            - 'AuthorizeCacheSecurityGroupEgress'\n            - 'RevokeCacheSecurityGroupEgress'\n    condition: selection\nfalsepositives:\n    - A ElastiCache security group deletion may be done by a system or network administrator. Verify whether the user identity, user agent, and/or hostname should be making changes in your environment. Security Group deletions from unfamiliar users or hosts should be investigated. If known behavior is causing false positives, it can be exempted from the rule.\n\n\nlevel: low\n",
      "question": "Identifies when an ElastiCache security group has been modified or deleted.",
      "answer": "In order to identify when an ElastiCache security group has been modified or deleted, you should monitor CloudTrail logs for AWS services for specific activities. Look for events sourced from elasticache.amazonaws.com that indicate modifications to Elasticache security groups. These events include 'DeleteCacheSecurityGroup', which signifies the deletion of a security group; 'AuthorizeCacheSecurityGroupIngress' and 'RevokeCacheSecurityGroupIngress', which pertain to the authorization or revocation of ingress rules; and 'AuthorizeCacheSecurityGroupEgress' and 'RevokeCacheSecurityGroupEgress', relevant to the authorization or revocation of egress rules. It is important to note that not all modifications may be unauthorized or malicious. Sometimes, system or network administrators may perform legitimate modifications. Therefore, it is advisable to verify the identity of the user making the changes, as well as the user agent and/or hostname, to ensure they are recognized entities within your environment. Modifications from unfamiliar users or hosts should be subjected to further investigation. Known behaviors that repeatedly trigger false positives can be exempted from monitoring to refine the detection process. This practice maintains a focus on identifying potentially malicious activities surrounding ElastiCache security groups while minimizing noise from legitimate administrative actions."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious outbound network activity via kerberos default port indicating possible lateral movement or first stage PrivEsc via delegation..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious outbound network activity via kerberos default port indicating possible lateral movement or first stage PrivEsc via delegation, you should focus on monitoring network connections on Windows systems. Specifically, look for network activities where the destination port is 88, which is the default port for Kerberos, with the connection being initiated from the source. However, it is crucial to exclude any activity initiated by common web browsers or processes such as 'C:\\Windows\\System32\\lsass.exe' for Local Security Authority Subsystem Service, 'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe' for Google Chrome, and 'C:\\Program Files\\Mozilla Firefox\\firefox.exe' for Mozilla Firefox, as these could lead to false positives.\n\nThis approach aims at identifying potentially malicious activities associated with lateral movement tactics or privilege escalation attempts through delegation, by focusing on unusual use of the Kerberos protocol. Lateral movement techniques often involve authenticating to other systems within a network, and Kerberos is a common target due to its role in network authentication. Privilege escalation via delegation involves exploiting Kerberos for unauthorized access elevation. The exclusion of known browser executables reduces the likelihood of flagging benign activity as suspicious. Common false positives in such detection may arise from legitimate use of web browsers, hence their exclusion from the monitoring criteria. The detection criteria follow a high level of suspicion due to the specifics of the port and initiation status, aligned with tactics and techniques observed in network-based attacks aiming at lateral movement or privilege escalation.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: network_connection\n    product: windows\ndetection:\n    selection:\n        DestinationPort: 88\n        Initiated: 'true'\n    filter_exact:\n        Image:\n            - 'C:\\Windows\\System32\\lsass.exe'\n            - 'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe'\n            - 'C:\\Program Files\\Mozilla Firefox\\firefox.exe'\n    #filter_browsers:\n        #Image|endswith:\n        #    - '\\opera.exe'\n        #    - '\\tomcat\\bin\\tomcat8.exe'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Web Browsers\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: network_connection\n    product: windows\ndetection:\n    selection:\n        DestinationPort: 88\n        Initiated: 'true'\n    filter_exact:\n        Image:\n            - 'C:\\Windows\\System32\\lsass.exe'\n            - 'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe'\n            - 'C:\\Program Files\\Mozilla Firefox\\firefox.exe'\n    #filter_browsers:\n        #Image|endswith:\n        #    - '\\opera.exe'\n        #    - '\\tomcat\\bin\\tomcat8.exe'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Web Browsers\nlevel: high\n",
      "question": "suspicious outbound network activity via kerberos default port indicating possible lateral movement or first stage PrivEsc via delegation.",
      "answer": "In order to detect suspicious outbound network activity via kerberos default port indicating possible lateral movement or first stage PrivEsc via delegation, you should focus on monitoring network connections on Windows systems. Specifically, look for network activities where the destination port is 88, which is the default port for Kerberos, with the connection being initiated from the source. However, it is crucial to exclude any activity initiated by common web browsers or processes such as 'C:\\Windows\\System32\\lsass.exe' for Local Security Authority Subsystem Service, 'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe' for Google Chrome, and 'C:\\Program Files\\Mozilla Firefox\\firefox.exe' for Mozilla Firefox, as these could lead to false positives.\n\nThis approach aims at identifying potentially malicious activities associated with lateral movement tactics or privilege escalation attempts through delegation, by focusing on unusual use of the Kerberos protocol. Lateral movement techniques often involve authenticating to other systems within a network, and Kerberos is a common target due to its role in network authentication. Privilege escalation via delegation involves exploiting Kerberos for unauthorized access elevation. The exclusion of known browser executables reduces the likelihood of flagging benign activity as suspicious. Common false positives in such detection may arise from legitimate use of web browsers, hence their exclusion from the monitoring criteria. The detection criteria follow a high level of suspicion due to the specifics of the port and initiation status, aligned with tactics and techniques observed in network-based attacks aiming at lateral movement or privilege escalation."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Detection well-known mimikatz command line arguments.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect well-known mimikatz command line arguments, you should: monitor Windows process creation logs for instances where specific command line arguments are used. These arguments may be indicative of the use of \"DumpCreds\", \"mimikatz\", or specific functions and modules related to credential dumping and other malicious activities. Specifically, look for command lines containing phrases like 'DumpCreds', 'mimikatz', '::aadcookie', '::detours', '::memssp', '::mflt', '::ncroutemon', '::ngcsign', '::printnightmare', '::skeleton', '::preshutdown', '::mstsc', '::multirdp', 'rpc::', 'token::', 'crypto::', 'dpapi::', 'sekurlsa::', 'kerberos::', 'lsadump::', 'privilege::', 'process::', 'vault::'. Detecting these arguments is key since they are associated with various tactics and techniques for credential theft, privilege escalation, and lateral movement within a network. The occurrence of such command line usage is a high-level indicator of a possible security threat or breach, requiring immediate attention, although false positives are considered unlikely in this context.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_tools_name:\n        CommandLine|contains:\n            - 'DumpCreds'\n            - 'mimikatz'\n    selection_function_names: # To cover functions from modules that are not in module_names\n        CommandLine|contains:\n            - '::aadcookie' #misc module\n            - '::detours' #misc module\n            - '::memssp' #misc module\n            - '::mflt' #misc module\n            - '::ncroutemon' #misc module\n            - '::ngcsign' #misc module\n            - '::printnightmare' #misc module\n            - '::skeleton' #misc module\n            - '::preshutdown'  #service module\n            - '::mstsc'  #ts module\n            - '::multirdp'  #ts module\n    selection_module_names:\n        CommandLine|contains:\n            - 'rpc::'\n            - 'token::'\n            - 'crypto::'\n            - 'dpapi::'\n            - 'sekurlsa::'\n            - 'kerberos::'\n            - 'lsadump::'\n            - 'privilege::'\n            - 'process::'\n            - 'vault::'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_tools_name:\n        CommandLine|contains:\n            - 'DumpCreds'\n            - 'mimikatz'\n    selection_function_names: # To cover functions from modules that are not in module_names\n        CommandLine|contains:\n            - '::aadcookie' #misc module\n            - '::detours' #misc module\n            - '::memssp' #misc module\n            - '::mflt' #misc module\n            - '::ncroutemon' #misc module\n            - '::ngcsign' #misc module\n            - '::printnightmare' #misc module\n            - '::skeleton' #misc module\n            - '::preshutdown'  #service module\n            - '::mstsc'  #ts module\n            - '::multirdp'  #ts module\n    selection_module_names:\n        CommandLine|contains:\n            - 'rpc::'\n            - 'token::'\n            - 'crypto::'\n            - 'dpapi::'\n            - 'sekurlsa::'\n            - 'kerberos::'\n            - 'lsadump::'\n            - 'privilege::'\n            - 'process::'\n            - 'vault::'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "Detection well-known mimikatz command line arguments",
      "answer": "In order to detect well-known mimikatz command line arguments, you should: monitor Windows process creation logs for instances where specific command line arguments are used. These arguments may be indicative of the use of \"DumpCreds\", \"mimikatz\", or specific functions and modules related to credential dumping and other malicious activities. Specifically, look for command lines containing phrases like 'DumpCreds', 'mimikatz', '::aadcookie', '::detours', '::memssp', '::mflt', '::ncroutemon', '::ngcsign', '::printnightmare', '::skeleton', '::preshutdown', '::mstsc', '::multirdp', 'rpc::', 'token::', 'crypto::', 'dpapi::', 'sekurlsa::', 'kerberos::', 'lsadump::', 'privilege::', 'process::', 'vault::'. Detecting these arguments is key since they are associated with various tactics and techniques for credential theft, privilege escalation, and lateral movement within a network. The occurrence of such command line usage is a high-level indicator of a possible security threat or breach, requiring immediate attention, although false positives are considered unlikely in this context."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting use of various CLI utilities exfiltrating data via web requests.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the use of various CLI utilities exfiltrating data via web requests, you should monitor for the creation of processes on Windows systems that are indicative of this activity. Specifically, lookout for instances where PowerShell (`powershell.exe` or `pwsh.exe`), Command Prompt (`cmd.exe`), or Curl (`curl.exe`) are initiated. \n\nThe detection criteria involves scrutinizing the command line arguments for the presence of HTTP request commands such as `Invoke-WebRequest`, `iwr`, `wget`, `curl`, and specifically for flags indicative of web requests like `-ur` (a portion of `-uri`), `-me` (a portion of `-method`), `-b`, and explicitly `POST` methods which are often used in data exfiltration. In the case of `curl.exe`, additional emphasis is placed on arguments like `--ur` (a fragment of `--uri`) and data flags (`-d`, `--data`) which signify data being sent in the request.\n\nMoreover, the presence of payloads in the command line suggesting the execution of commands that are commonly used in reconnaissance or to gather system information and data (`ToBase64String`, `whoami`, `nltest`, `ifconfig`, `hostname`, `net view`, `qprocess`, `netstat`, `systeminfo`, `tasklist`, `sc query`) or indications of data being redirected to external locations (`type` coupled with `>` and a path starting with `C:\\`) heightens the suspicion of data exfiltration.\n\nGiven the specificity of these detection criteria and the context in which these utilities are being used, false positives are considered unlikely. This high-level of alert is set due to the potent combination of command execution and data transmission methods which are closely associated with malicious activities aimed at extracting sensitive information from a target system and sending it to an external recipient over the web.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_iwr:\n        Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\cmd.exe'\n        CommandLine|contains:\n            - 'Invoke-WebRequest'\n            - 'iwr '\n            - 'wget '\n            - 'curl '\n        CommandLine|contains|all:\n            - ' -ur' # Shortest possible version of the -uri flag\n            - ' -me' # Shortest possible version of the -method flag\n            - ' -b'\n            - ' POST '\n    selection_curl:\n        Image|endswith: '\\curl.exe'\n        CommandLine|contains: '--ur' # Shortest possible version of the --uri flag\n    selection_curl_data:\n        CommandLine|contains:\n            - ' -d ' # Shortest possible version of the --data flag\n            - ' --data '\n    payloads:\n        - CommandLine|contains:\n            - 'ToBase64String'\n            - 'whoami'\n            - 'nltest'\n            - 'ifconfig'\n            - 'hostname'\n            - 'net view'\n            - 'qprocess'\n            - 'netstat'\n            - 'systeminfo'\n            - 'tasklist'\n            - 'sc query'\n        - CommandLine|contains|all:\n            - 'type '\n            - ' > '\n            - ' C:\\'\n    condition: (selection_iwr or all of selection_curl*) and payloads\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_iwr:\n        Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\cmd.exe'\n        CommandLine|contains:\n            - 'Invoke-WebRequest'\n            - 'iwr '\n            - 'wget '\n            - 'curl '\n        CommandLine|contains|all:\n            - ' -ur' # Shortest possible version of the -uri flag\n            - ' -me' # Shortest possible version of the -method flag\n            - ' -b'\n            - ' POST '\n    selection_curl:\n        Image|endswith: '\\curl.exe'\n        CommandLine|contains: '--ur' # Shortest possible version of the --uri flag\n    selection_curl_data:\n        CommandLine|contains:\n            - ' -d ' # Shortest possible version of the --data flag\n            - ' --data '\n    payloads:\n        - CommandLine|contains:\n            - 'ToBase64String'\n            - 'whoami'\n            - 'nltest'\n            - 'ifconfig'\n            - 'hostname'\n            - 'net view'\n            - 'qprocess'\n            - 'netstat'\n            - 'systeminfo'\n            - 'tasklist'\n            - 'sc query'\n        - CommandLine|contains|all:\n            - 'type '\n            - ' > '\n            - ' C:\\'\n    condition: (selection_iwr or all of selection_curl*) and payloads\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "use of various CLI utilities exfiltrating data via web requests",
      "answer": "In order to detect the use of various CLI utilities exfiltrating data via web requests, you should monitor for the creation of processes on Windows systems that are indicative of this activity. Specifically, lookout for instances where PowerShell (`powershell.exe` or `pwsh.exe`), Command Prompt (`cmd.exe`), or Curl (`curl.exe`) are initiated. \n\nThe detection criteria involves scrutinizing the command line arguments for the presence of HTTP request commands such as `Invoke-WebRequest`, `iwr`, `wget`, `curl`, and specifically for flags indicative of web requests like `-ur` (a portion of `-uri`), `-me` (a portion of `-method`), `-b`, and explicitly `POST` methods which are often used in data exfiltration. In the case of `curl.exe`, additional emphasis is placed on arguments like `--ur` (a fragment of `--uri`) and data flags (`-d`, `--data`) which signify data being sent in the request.\n\nMoreover, the presence of payloads in the command line suggesting the execution of commands that are commonly used in reconnaissance or to gather system information and data (`ToBase64String`, `whoami`, `nltest`, `ifconfig`, `hostname`, `net view`, `qprocess`, `netstat`, `systeminfo`, `tasklist`, `sc query`) or indications of data being redirected to external locations (`type` coupled with `>` and a path starting with `C:\\`) heightens the suspicion of data exfiltration.\n\nGiven the specificity of these detection criteria and the context in which these utilities are being used, false positives are considered unlikely. This high-level of alert is set due to the potent combination of command execution and data transmission methods which are closely associated with malicious activities aimed at extracting sensitive information from a target system and sending it to an external recipient over the web."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains:\n            - '[System.Net.WebRequest]::create'\n            - 'curl '\n            - 'Invoke-RestMethod'\n            - 'Invoke-WebRequest'\n            - 'iwr '\n            - 'Net.WebClient'\n            - 'Resume-BitsTransfer'\n            - 'Start-BitsTransfer'\n            - 'wget '\n            - 'WinHttp.WinHttpRequest'\n    filter:\n        Path|startswith: 'C:\\Packages\\Plugins\\Microsoft.GuestConfiguration.ConfigurationforWindows\\'\n    condition: selection and not filter\nfalsepositives:\n    - Use of Get-Command and Get-Help modules to reference Invoke-WebRequest and Start-BitsTransfer.\nlevel: medium\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect use of various web request commands with commandline tools and Windows PowerShell cmdlets (including aliases) via PowerShell scriptblock logs\n\nHere is how  the given sigma rule operates: In order to detect the use of various web request commands with commandline tools and Windows PowerShell cmdlets (including aliases) via PowerShell scriptblock logs, you should monitor for activities in the PowerShell scripting environment, specifically through the script block logging feature on Windows systems. Look for the execution of commands or uses of classes that initiate web requests. These include using `[System.Net.WebRequest]::create`, invoking commands like `curl `, `Invoke-RestMethod`, `Invoke-WebRequest`, `iwr `, employing the `Net.WebClient` class, or using BITS (Background Intelligent Transfer Service) with `Resume-BitsTransfer` and `Start-BitsTransfer` commands. Additionally, look out for usage of `wget ` and `WinHttp.WinHttpRequest`. It's important to exclude monitoring paths that start with `C:\\Packages\\Plugins\\Microsoft.GuestConfiguration.ConfigurationforWindows\\` to reduce false positives. Be aware that legitimate uses of related commands for querying help or command information, such as using `Get-Command` and `Get-Help` modules referring to `Invoke-WebRequest` and `Start-BitsTransfer`, can lead to false positives. The importance of monitoring these activities is rated at a medium level of concern.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains:\n            - '[System.Net.WebRequest]::create'\n            - 'curl '\n            - 'Invoke-RestMethod'\n            - 'Invoke-WebRequest'\n            - 'iwr '\n            - 'Net.WebClient'\n            - 'Resume-BitsTransfer'\n            - 'Start-BitsTransfer'\n            - 'wget '\n            - 'WinHttp.WinHttpRequest'\n    filter:\n        Path|startswith: 'C:\\Packages\\Plugins\\Microsoft.GuestConfiguration.ConfigurationforWindows\\'\n    condition: selection and not filter\nfalsepositives:\n    - Use of Get-Command and Get-Help modules to reference Invoke-WebRequest and Start-BitsTransfer.\nlevel: medium\n",
      "question": "use of various web request commands with commandline tools and Windows PowerShell cmdlets (including aliases) via PowerShell scriptblock logs",
      "answer": "In order to detect the use of various web request commands with commandline tools and Windows PowerShell cmdlets (including aliases) via PowerShell scriptblock logs, you should monitor for activities in the PowerShell scripting environment, specifically through the script block logging feature on Windows systems. Look for the execution of commands or uses of classes that initiate web requests. These include using `[System.Net.WebRequest]::create`, invoking commands like `curl `, `Invoke-RestMethod`, `Invoke-WebRequest`, `iwr `, employing the `Net.WebClient` class, or using BITS (Background Intelligent Transfer Service) with `Resume-BitsTransfer` and `Start-BitsTransfer` commands. Additionally, look out for usage of `wget ` and `WinHttp.WinHttpRequest`. It's important to exclude monitoring paths that start with `C:\\Packages\\Plugins\\Microsoft.GuestConfiguration.ConfigurationforWindows\\` to reduce false positives. Be aware that legitimate uses of related commands for querying help or command information, such as using `Get-Command` and `Get-Help` modules referring to `Invoke-WebRequest` and `Start-BitsTransfer`, can lead to false positives. The importance of monitoring these activities is rated at a medium level of concern."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting pattern of UAC Bypass using a msconfig GUI hack (UACMe 55).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the pattern of UAC Bypass using a msconfig GUI hack (UACMe 55), you should: Monitor for file events in Windows, specifically focusing on actions related to files named 'pkgmgr.exe' within any user's 'AppData\\Local\\Temp' directory. This detection is critical due to the technique utilizing this specific path and filename as part of an attempt to bypass User Account Control (UAC), a security measure in Windows. Elements to watch include the initiation or alteration of 'pkgmgr.exe' located precisely at 'C:\\Users\\[Any User]\\AppData\\Local\\Temp\\'. While assessing this activity, it is important to be thorough yet cautious, as there could be instances where similar patterns emerge without malicious intent, though such cases are currently unknown. The elevated severity level of this rule underscores the potential risk associated with this behavior, which aligns with tactics and techniques of evading security mechanisms.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: file_event\n    product: windows\ndetection:\n    selection:\n        TargetFilename|startswith: 'C:\\Users\\'\n        TargetFilename|endswith: '\\AppData\\Local\\Temp\\pkgmgr.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: file_event\n    product: windows\ndetection:\n    selection:\n        TargetFilename|startswith: 'C:\\Users\\'\n        TargetFilename|endswith: '\\AppData\\Local\\Temp\\pkgmgr.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "pattern of UAC Bypass using a msconfig GUI hack (UACMe 55)",
      "answer": "In order to detect the pattern of UAC Bypass using a msconfig GUI hack (UACMe 55), you should: Monitor for file events in Windows, specifically focusing on actions related to files named 'pkgmgr.exe' within any user's 'AppData\\Local\\Temp' directory. This detection is critical due to the technique utilizing this specific path and filename as part of an attempt to bypass User Account Control (UAC), a security measure in Windows. Elements to watch include the initiation or alteration of 'pkgmgr.exe' located precisely at 'C:\\Users\\[Any User]\\AppData\\Local\\Temp\\'. While assessing this activity, it is important to be thorough yet cautious, as there could be instances where similar patterns emerge without malicious intent, though such cases are currently unknown. The elevated severity level of this rule underscores the potential risk associated with this behavior, which aligns with tactics and techniques of evading security mechanisms."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - '\\pubprn.vbs'\n            - 'script:'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect use of the 'Pubprn.vbs' Microsoft signed script to execute commands.\n\nHere is how  the given sigma rule operates: In order to detect the use of the 'Pubprn.vbs' Microsoft signed script to execute commands, you should monitor the creation of processes on Windows operating systems. Specifically, look for instances where the command line contains both '\\pubprn.vbs' and 'script:'. This pattern suggests that the Pubprn.vbs script is being utilized to run commands, which could be indicative of malicious activity. The detection urgency for this behavior is categorized as medium, though it\u2019s important to consider that false positives may occur, the specifics of which are not currently known or predictable.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - '\\pubprn.vbs'\n            - 'script:'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "use of the 'Pubprn.vbs' Microsoft signed script to execute commands.",
      "answer": "In order to detect the use of the 'Pubprn.vbs' Microsoft signed script to execute commands, you should monitor the creation of processes on Windows operating systems. Specifically, look for instances where the command line contains both '\\pubprn.vbs' and 'script:'. This pattern suggests that the Pubprn.vbs script is being utilized to run commands, which could be indicative of malicious activity. The detection urgency for this behavior is categorized as medium, though it\u2019s important to consider that false positives may occur, the specifics of which are not currently known or predictable."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting specific process parameters as used by Mustang Panda droppers.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect specific process parameters as used by Mustang Panda droppers, you should focus on monitoring Windows process creation events for specific command-line activity and the execution of certain images. Keep an eye on command lines that contain sequences like 'Temp\\wtask.exe /create', use partial environment variable obfuscations such as '%windir:~-3,1%%PUBLIC:~-9,1%', include the string '/tn \"Security Script ', or conclude with '%windir:~-1,1%'. It's also important to watch for commands that simultaneously contain '/E:vbscript', a path indicating a user's folder 'C:\\Users\\', a '.txt' file extension, and the '/F' flag. Additionally, processes where the image path ends with 'Temp\\winwsh.exe' should be considered suspicious. These commands and paths are indicative of tactics and techniques related to initial access, execution and potentially persistence, by utilizing scripts or executables placed in temp directories or mimicking legitimate filenames to evade detection. Monitoring these particular process creation log entries, while capturing both the command line and parent command line data, can be crucial. Given the low likelihood of false positives at such a high specificity level, alerts generated from these conditions should be treated with a high priority.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_cli:\n        - CommandLine|contains:\n            - 'Temp\\wtask.exe /create'\n            - '%windir:~-3,1%%PUBLIC:~-9,1%'\n            - '/tn \"Security Script '\n            - '%windir:~-1,1%'\n        - CommandLine|contains|all:\n            - '/E:vbscript'\n            - 'C:\\Users\\'\n            - '.txt'\n            - '/F'\n    selection_img:\n        Image|endswith: 'Temp\\winwsh.exe'\n    condition: 1 of selection_*\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_cli:\n        - CommandLine|contains:\n            - 'Temp\\wtask.exe /create'\n            - '%windir:~-3,1%%PUBLIC:~-9,1%'\n            - '/tn \"Security Script '\n            - '%windir:~-1,1%'\n        - CommandLine|contains|all:\n            - '/E:vbscript'\n            - 'C:\\Users\\'\n            - '.txt'\n            - '/F'\n    selection_img:\n        Image|endswith: 'Temp\\winwsh.exe'\n    condition: 1 of selection_*\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "specific process parameters as used by Mustang Panda droppers",
      "answer": "In order to detect specific process parameters as used by Mustang Panda droppers, you should focus on monitoring Windows process creation events for specific command-line activity and the execution of certain images. Keep an eye on command lines that contain sequences like 'Temp\\wtask.exe /create', use partial environment variable obfuscations such as '%windir:~-3,1%%PUBLIC:~-9,1%', include the string '/tn \"Security Script ', or conclude with '%windir:~-1,1%'. It's also important to watch for commands that simultaneously contain '/E:vbscript', a path indicating a user's folder 'C:\\Users\\', a '.txt' file extension, and the '/F' flag. Additionally, processes where the image path ends with 'Temp\\winwsh.exe' should be considered suspicious. These commands and paths are indicative of tactics and techniques related to initial access, execution and potentially persistence, by utilizing scripts or executables placed in temp directories or mimicking legitimate filenames to evade detection. Monitoring these particular process creation log entries, while capturing both the command line and parent command line data, can be crucial. Given the low likelihood of false positives at such a high specificity level, alerts generated from these conditions should be treated with a high priority."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting use of Moriya rootkit as described in the securelist's Operation TunnelSnake report.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the use of Moriya rootkit as described in the securelist's Operation TunnelSnake report, you should: Monitor Windows System logs for events generated by the Service Control Manager with a specific focus on EventID 7045. This event indicates a service installation, which is critical in this context as the Moriya rootkit utilizes a service named ZzNetSvc during its deployment. By isolating logs that report the creation of this particular service, it becomes possible to identify potential traces of the Moriya rootkit on a system. Given the severity of this threat, any detection of such activity should be deemed critical. Be aware that detections might have some unknown false positives, but due to the critical level of this threat, each alert should be investigated thoroughly. This approach primarily falls under the tactics and techniques related to Persistence, Privilege Escalation, and Defense Evasion.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: system\ndetection:\n    selection:\n        Provider_Name: 'Service Control Manager'\n        EventID: 7045\n        ServiceName: ZzNetSvc\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: system\ndetection:\n    selection:\n        Provider_Name: 'Service Control Manager'\n        EventID: 7045\n        ServiceName: ZzNetSvc\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: critical\n",
      "question": "use of Moriya rootkit as described in the securelist's Operation TunnelSnake report",
      "answer": "In order to detect the use of Moriya rootkit as described in the securelist's Operation TunnelSnake report, you should: Monitor Windows System logs for events generated by the Service Control Manager with a specific focus on EventID 7045. This event indicates a service installation, which is critical in this context as the Moriya rootkit utilizes a service named ZzNetSvc during its deployment. By isolating logs that report the creation of this particular service, it becomes possible to identify potential traces of the Moriya rootkit on a system. Given the severity of this threat, any detection of such activity should be deemed critical. Be aware that detections might have some unknown false positives, but due to the critical level of this threat, each alert should be investigated thoroughly. This approach primarily falls under the tactics and techniques related to Persistence, Privilege Escalation, and Defense Evasion."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Once established within a system or network, an adversary may use automated techniques for collecting internal data..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to once established within a system or network, an adversary may use automated techniques for collecting internal data, you should: monitor the creation of processes on Windows systems that are indicative of data collection activities. Specifically, keep an eye out for the execution of certain system utilities that could be abused for data gathering purposes. These include \"tree.com,\" \"WMIC.exe,\" \"doskey.exe,\" and \"sc.exe,\" which are often leveraged by attackers post-compromise. Pay close attention not only to the name of the executable image but also to its original filename attribute, as it might indicate attempts to masquerade malicious activities under seemingly legitimate process names.\n\nAdditionally, be vigilant for processes spawned with command lines designed to redirect output to temporary folders, commonly indicated by \"> %TEMP%\\\" or \"> %TMP%\\.\" This behavior suggests an attempt to silently collect and store data without immediately drawing attention.\n\nWhile monitoring these activities, it is crucial to remain aware that there could be legitimate uses of these utilities that might lead to false positives. Thus, any detection should be further investigated to distinguish between benign and malicious activities based on context and additional evidence.\n\nThese monitoring strategies are aligned with known attack methodologies that involve executing command and control utilities and redirecting their output for stealthy data collection. Such activities fall under a range of Tactics, Techniques, and Procedures (TTPs), including Execution, Persistence, Privilege Escalation, and Defense Evasion, as they exploit built-in system tools to fulfill adversarial objectives without installing additional malware.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_image:\n        - Image|endswith:\n            - '\\tree.com'\n            - '\\WMIC.exe'\n            - '\\doskey.exe'\n            - '\\sc.exe'\n        - OriginalFileName:\n            - 'wmic.exe'\n            - 'DOSKEY.EXE'\n            - 'sc.exe'\n    selection_redirect:\n        ParentCommandLine|contains:\n            - ' > %TEMP%\\'\n            - ' > %TMP%\\'\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_image:\n        - Image|endswith:\n            - '\\tree.com'\n            - '\\WMIC.exe'\n            - '\\doskey.exe'\n            - '\\sc.exe'\n        - OriginalFileName:\n            - 'wmic.exe'\n            - 'DOSKEY.EXE'\n            - 'sc.exe'\n    selection_redirect:\n        ParentCommandLine|contains:\n            - ' > %TEMP%\\'\n            - ' > %TMP%\\'\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Once established within a system or network, an adversary may use automated techniques for collecting internal data.",
      "answer": "In order to once established within a system or network, an adversary may use automated techniques for collecting internal data, you should: monitor the creation of processes on Windows systems that are indicative of data collection activities. Specifically, keep an eye out for the execution of certain system utilities that could be abused for data gathering purposes. These include \"tree.com,\" \"WMIC.exe,\" \"doskey.exe,\" and \"sc.exe,\" which are often leveraged by attackers post-compromise. Pay close attention not only to the name of the executable image but also to its original filename attribute, as it might indicate attempts to masquerade malicious activities under seemingly legitimate process names.\n\nAdditionally, be vigilant for processes spawned with command lines designed to redirect output to temporary folders, commonly indicated by \"> %TEMP%\\\" or \"> %TMP%\\.\" This behavior suggests an attempt to silently collect and store data without immediately drawing attention.\n\nWhile monitoring these activities, it is crucial to remain aware that there could be legitimate uses of these utilities that might lead to false positives. Thus, any detection should be further investigated to distinguish between benign and malicious activities based on context and additional evidence.\n\nThese monitoring strategies are aligned with known attack methodologies that involve executing command and control utilities and redirecting their output for stealthy data collection. Such activities fall under a range of Tactics, Techniques, and Procedures (TTPs), including Execution, Persistence, Privilege Escalation, and Defense Evasion, as they exploit built-in system tools to fulfill adversarial objectives without installing additional malware."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of \"attrib\" with the \"+s\" flag to mark files as system files.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the execution of \"attrib\" with the \"+s\" flag to mark files as system files, you should: focus on monitoring for process creation events within Windows environments. Specifically, look for processes that are either named or end with '\\attrib.exe' or have an OriginalFileName value of 'ATTRIB.EXE'. Additionally, it is crucial to identify any command line arguments that include ' +s ', which indicates the action of marking files as system files. Combining these detection techniques allows for the identification of potentially malicious activity involving the alteration of file attributes to hide or systematize files. It is important to consider that there may be legitimate uses of these commands and flags, thus the level of threat is considered low without additional context.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\attrib.exe'\n        - OriginalFileName: 'ATTRIB.EXE'\n    selection_cli:\n        CommandLine|contains: ' +s '\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\attrib.exe'\n        - OriginalFileName: 'ATTRIB.EXE'\n    selection_cli:\n        CommandLine|contains: ' +s '\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: low\n",
      "question": "execution of \"attrib\" with the \"+s\" flag to mark files as system files",
      "answer": "In order to detect the execution of \"attrib\" with the \"+s\" flag to mark files as system files, you should: focus on monitoring for process creation events within Windows environments. Specifically, look for processes that are either named or end with '\\attrib.exe' or have an OriginalFileName value of 'ATTRIB.EXE'. Additionally, it is crucial to identify any command line arguments that include ' +s ', which indicates the action of marking files as system files. Combining these detection techniques allows for the identification of potentially malicious activity involving the alteration of file attributes to hide or systematize files. It is important to consider that there may be legitimate uses of these commands and flags, thus the level of threat is considered low without additional context."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Rule to detect the use of the SCX RunAsProvider Invoke_ExecuteShellCommand to execute any UNIX/Linux command using the /bin/sh shell.\nSCXcore, started as the Microsoft Operations Manager UNIX/Linux Agent, is now used in a host of products including\nMicrosoft Operations Manager, Microsoft Azure, and Microsoft Operations Management Suite.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the use of the SCX RunAsProvider Invoke_ExecuteShellCommand to execute any UNIX/Linux command using the /bin/sh shell, which is often part of SCXcore used in Microsoft Operations Manager, Microsoft Azure, and Microsoft Operations Management Suite, you should monitor Linux system logs for process creation events. Specifically, look for instances where the process is initiated by the 'root' user with a Logon ID of '0' and the current directory is set to '/var/opt/microsoft/scx/tmp'. Additionally, the command line should contain '/bin/sh', indicating that the shell is being used to execute a command. It's important to be aware of legitimate uses of the SCX RunAsProvider Invoke_ExecuteShellCommand, as these can lead to false positives. This activity is considered to be of high importance due to its potential security implications, suggesting an attacker may be attempting to execute commands with high privileges in the context of the SCX environment.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: linux\n    category: process_creation\ndetection:\n    selection:\n        User: root\n        LogonId: 0\n        CurrentDirectory: '/var/opt/microsoft/scx/tmp'\n        CommandLine|contains: '/bin/sh'\n    condition: selection\nfalsepositives:\n    - Legitimate use of SCX RunAsProvider Invoke_ExecuteShellCommand.\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\n    category: process_creation\ndetection:\n    selection:\n        User: root\n        LogonId: 0\n        CurrentDirectory: '/var/opt/microsoft/scx/tmp'\n        CommandLine|contains: '/bin/sh'\n    condition: selection\nfalsepositives:\n    - Legitimate use of SCX RunAsProvider Invoke_ExecuteShellCommand.\nlevel: high\n",
      "question": "Rule to detect the use of the SCX RunAsProvider Invoke_ExecuteShellCommand to execute any UNIX/Linux command using the /bin/sh shell.\nSCXcore, started as the Microsoft Operations Manager UNIX/Linux Agent, is now used in a host of products including\nMicrosoft Operations Manager, Microsoft Azure, and Microsoft Operations Management Suite.\n",
      "answer": "In order to detect the use of the SCX RunAsProvider Invoke_ExecuteShellCommand to execute any UNIX/Linux command using the /bin/sh shell, which is often part of SCXcore used in Microsoft Operations Manager, Microsoft Azure, and Microsoft Operations Management Suite, you should monitor Linux system logs for process creation events. Specifically, look for instances where the process is initiated by the 'root' user with a Logon ID of '0' and the current directory is set to '/var/opt/microsoft/scx/tmp'. Additionally, the command line should contain '/bin/sh', indicating that the shell is being used to execute a command. It's important to be aware of legitimate uses of the SCX RunAsProvider Invoke_ExecuteShellCommand, as these can lead to false positives. This activity is considered to be of high importance due to its potential security implications, suggesting an attacker may be attempting to execute commands with high privileges in the context of the SCX environment."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains:\n            - 'X509Enrollment.CBinaryConverter'\n            - '884e2002-217d-11da-b2a4-000e7bbb2b09'\n    condition: selection\nfalsepositives:\n    - Legitimate administrative script\nlevel: medium\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect Detect use of X509Enrollment\n\nHere is how  the given sigma rule operates: In order to detect use of X509Enrollment, you should focus on monitoring PowerShell script activities within Windows environments, specifically looking for interactions that involve script block logging. It's essential that script block logging is enabled to catch these activities. The detection mechanism zeroes in on scripts containing either the string 'X509Enrollment.CBinaryConverter' or the GUID '884e2002-217d-11da-b2a4-000e7bbb2b09'. These identifiers suggest an attempt to manipulate certificates or use the X509Enrollment process in a way that could be malicious. However, it's important to consider that some activities flagged by this approach might indeed be legitimate administrative actions involving certificate handling, thus categorizing them as potential false positives. Such detections are deemed to have a medium level of severity and should be investigated to distinguish between genuine administrative tasks and malicious exploits related to the tactics and techniques of Credential Access and Defense Evasion.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains:\n            - 'X509Enrollment.CBinaryConverter'\n            - '884e2002-217d-11da-b2a4-000e7bbb2b09'\n    condition: selection\nfalsepositives:\n    - Legitimate administrative script\nlevel: medium\n",
      "question": "Detect use of X509Enrollment",
      "answer": "In order to detect use of X509Enrollment, you should focus on monitoring PowerShell script activities within Windows environments, specifically looking for interactions that involve script block logging. It's essential that script block logging is enabled to catch these activities. The detection mechanism zeroes in on scripts containing either the string 'X509Enrollment.CBinaryConverter' or the GUID '884e2002-217d-11da-b2a4-000e7bbb2b09'. These identifiers suggest an attempt to manipulate certificates or use the X509Enrollment process in a way that could be malicious. However, it's important to consider that some activities flagged by this approach might indeed be legitimate administrative actions involving certificate handling, thus categorizing them as potential false positives. Such detections are deemed to have a medium level of severity and should be investigated to distinguish between genuine administrative tasks and malicious exploits related to the tactics and techniques of Credential Access and Defense Evasion."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Attempts to access unattend.xml, where credentials are commonly stored, within the Panther directory where installation logs are stored.\nIf these files exist, their contents will be displayed. They are used to store credentials/answers during the unattended windows install process\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to attempt to access unattend.xml, where credentials are commonly stored, within the Panther directory where installation logs are stored. If these files exist, their contents will be displayed. They are used to store credentials/answers during the unattended windows install process, you should: Monitor Windows file events for any attempt to access or interact with files ending in '\\unattend.xml'. This specific file is known to hold sensitive information, such as credentials, which are utilized during the Windows installation process in an unattended manner. The monitoring should focus on any activity around this file within the installation logs directory, typically associated with legitimate or illegitimate attempts to gather credentials. Alerts of medium urgency should be generated upon detection to signify potential unauthorized access attempts or misuse, despite the fact that false positives may be initially unknown.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        TargetFilename|endswith: '\\unattend.xml'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        TargetFilename|endswith: '\\unattend.xml'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Attempts to access unattend.xml, where credentials are commonly stored, within the Panther directory where installation logs are stored.\nIf these files exist, their contents will be displayed. They are used to store credentials/answers during the unattended windows install process\n",
      "answer": "In order to attempt to access unattend.xml, where credentials are commonly stored, within the Panther directory where installation logs are stored. If these files exist, their contents will be displayed. They are used to store credentials/answers during the unattended windows install process, you should: Monitor Windows file events for any attempt to access or interact with files ending in '\\unattend.xml'. This specific file is known to hold sensitive information, such as credentials, which are utilized during the Windows installation process in an unattended manner. The monitoring should focus on any activity around this file within the installation logs directory, typically associated with legitimate or illegitimate attempts to gather credentials. Alerts of medium urgency should be generated upon detection to signify potential unauthorized access attempts or misuse, despite the fact that false positives may be initially unknown."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        ImageLoaded|endswith: '\\goopdate.dll'\n    filter_main_generic:\n        ImageLoaded|startswith:\n            # Many third party chromium based apps use this DLLs. It's better to create a baseline and add specific filters\n            - 'C:\\Program Files (x86)\\'\n            - 'C:\\Program Files\\'\n    filter_optional_dropbox_installer_temp:\n        Image|contains|all:\n            - '\\AppData\\Local\\Temp\\GUM'\n            - '.tmp\\Dropbox'\n        ImageLoaded|contains|all:\n            - '\\AppData\\Local\\Temp\\GUM'\n            - '.tmp\\\\goopdate.dll'\n    condition: selection and not 1 of filter_main_* and not 1 of filter_optional_*\nfalsepositives:\n    - False positives are expected from Google Chrome installations running from user locations (AppData) and other custom locations. Apply additional filters accordingly.\n    - Other third party chromium browsers located in AppData\nlevel: medium\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect potential DLL sideloading of \"goopdate.dll\", a DLL used by googleupdate.exe\n\nHere is how  the given sigma rule operates: In order to detect potential DLL sideloading of \"goopdate.dll\", a DLL used by googleupdate.exe, you should monitor for the loading of the \"goopdate.dll\" file in the Windows environment, specifically tracking when this DLL is loaded from images. Be vigilant for occurrences where \"goopdate.dll\" ends with the mentioned DLL name, indicating a possible attempt to exploit the update process or mimic legitimate functions for malicious purposes. \n\nHowever, it's crucial to differentiate legitimate cases from malicious activity. Many legitimate third-party Chromium-based applications also use \"goopdate.dll\", especially those located in common program directories like \"C:\\Program Files (x86)\\\" and \"C:\\Program Files\\\". These instances should typically be excluded to minimize false positives. \n\nAdditionally, specific care should be taken to filter out potential false positive conditions involving temporary files related to Dropbox installations, which might temporarily contain \"goopdate.dll\" during their update or installation process, especially within the \"AppData\\Local\\Temp\\GUM\" directory with a \".tmp\\Dropbox\" path segment. \n\nMonitoring systems should be configured to exclude these legitimate cases while remaining alert for indicators of \"goopdate.dll\" being loaded in a manner consistent with DLL sideloading attempts. This involves not only tracking the appearance of \"goopdate.dll\" but also ensuring that it is not occurring from the filtered set of known good paths and conditions mentioned. \n\nBe aware that false positives are expected, particularly with installations of Google Chrome or other Chromium-based browsers that might be running from user locations like AppData or custom locations. It's advised to fine-tune the monitoring processes with additional filters as needed to accurately differentiate between legitimate use and potentially malicious activities striving to exploit the functionality of \"goopdate.dll\" for compromising the system.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        ImageLoaded|endswith: '\\goopdate.dll'\n    filter_main_generic:\n        ImageLoaded|startswith:\n            # Many third party chromium based apps use this DLLs. It's better to create a baseline and add specific filters\n            - 'C:\\Program Files (x86)\\'\n            - 'C:\\Program Files\\'\n    filter_optional_dropbox_installer_temp:\n        Image|contains|all:\n            - '\\AppData\\Local\\Temp\\GUM'\n            - '.tmp\\Dropbox'\n        ImageLoaded|contains|all:\n            - '\\AppData\\Local\\Temp\\GUM'\n            - '.tmp\\\\goopdate.dll'\n    condition: selection and not 1 of filter_main_* and not 1 of filter_optional_*\nfalsepositives:\n    - False positives are expected from Google Chrome installations running from user locations (AppData) and other custom locations. Apply additional filters accordingly.\n    - Other third party chromium browsers located in AppData\nlevel: medium\n",
      "question": "potential DLL sideloading of \"goopdate.dll\", a DLL used by googleupdate.exe",
      "answer": "In order to detect potential DLL sideloading of \"goopdate.dll\", a DLL used by googleupdate.exe, you should monitor for the loading of the \"goopdate.dll\" file in the Windows environment, specifically tracking when this DLL is loaded from images. Be vigilant for occurrences where \"goopdate.dll\" ends with the mentioned DLL name, indicating a possible attempt to exploit the update process or mimic legitimate functions for malicious purposes. \n\nHowever, it's crucial to differentiate legitimate cases from malicious activity. Many legitimate third-party Chromium-based applications also use \"goopdate.dll\", especially those located in common program directories like \"C:\\Program Files (x86)\\\" and \"C:\\Program Files\\\". These instances should typically be excluded to minimize false positives. \n\nAdditionally, specific care should be taken to filter out potential false positive conditions involving temporary files related to Dropbox installations, which might temporarily contain \"goopdate.dll\" during their update or installation process, especially within the \"AppData\\Local\\Temp\\GUM\" directory with a \".tmp\\Dropbox\" path segment. \n\nMonitoring systems should be configured to exclude these legitimate cases while remaining alert for indicators of \"goopdate.dll\" being loaded in a manner consistent with DLL sideloading attempts. This involves not only tracking the appearance of \"goopdate.dll\" but also ensuring that it is not occurring from the filtered set of known good paths and conditions mentioned. \n\nBe aware that false positives are expected, particularly with installations of Google Chrome or other Chromium-based browsers that might be running from user locations like AppData or custom locations. It's advised to fine-tune the monitoring processes with additional filters as needed to accurately differentiate between legitimate use and potentially malicious activities striving to exploit the functionality of \"goopdate.dll\" for compromising the system."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting use of the Microsoft Windows Resource Leak Diagnostic tool \"rdrleakdiag.exe\" to dump process memory.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the use of the Microsoft Windows Resource Leak Diagnostic tool \"rdrleakdiag.exe\" to dump process memory, you should: Monitor the creation of processes on Windows systems, specifically looking for instances where the process image ends with '\\rdrleakdiag.exe' or where the OriginalFileName is explicitly 'RdrLeakDiag.exe'. Additionally, scrutinize command-line parameters to identify attempts to dump memory. Key command-line options to watch for include 'fullmemdmp', '/memdmp', and '-memdmp' which indicate an operation to dump memory. Also, be alert for options such as ' -o ', ' /o ', which specify the output location for the dump file, and ' -p ', ' /p ', which indicate a target process for the memory dump. These indicators, particularly when occurring together, suggest an effort to misuse \"rdrleakdiag.exe\" for acquiring process memory data, which could be indicative of malicious activities such as information gathering or the facilitation of further attacks. Be aware that while monitoring for these signs, there may be instances where the use of these command-line arguments and the \"rdrleakdiag.exe\" process occur in non-malicious contexts; such instances are considered unknown false positives. The detection of any of the outlined command-line conditions in conjunction with the execution of \"rdrleakdiag.exe\" should be treated with a high level of suspicion and investigated promptly.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\rdrleakdiag.exe'\n        - OriginalFileName: RdrLeakDiag.exe\n    selection_cli_dump:\n        CommandLine|contains:\n            - 'fullmemdmp'\n            - '/memdmp'\n            - '-memdmp'\n    selection_cli_output:\n        CommandLine|contains:\n            - ' -o '\n            - ' /o '\n    selection_cli_process:\n        CommandLine|contains:\n            - ' -p '\n            - ' /p '\n    condition: all of selection_cli_* or (selection_img and selection_cli_dump)\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\rdrleakdiag.exe'\n        - OriginalFileName: RdrLeakDiag.exe\n    selection_cli_dump:\n        CommandLine|contains:\n            - 'fullmemdmp'\n            - '/memdmp'\n            - '-memdmp'\n    selection_cli_output:\n        CommandLine|contains:\n            - ' -o '\n            - ' /o '\n    selection_cli_process:\n        CommandLine|contains:\n            - ' -p '\n            - ' /p '\n    condition: all of selection_cli_* or (selection_img and selection_cli_dump)\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "use of the Microsoft Windows Resource Leak Diagnostic tool \"rdrleakdiag.exe\" to dump process memory",
      "answer": "In order to detect the use of the Microsoft Windows Resource Leak Diagnostic tool \"rdrleakdiag.exe\" to dump process memory, you should: Monitor the creation of processes on Windows systems, specifically looking for instances where the process image ends with '\\rdrleakdiag.exe' or where the OriginalFileName is explicitly 'RdrLeakDiag.exe'. Additionally, scrutinize command-line parameters to identify attempts to dump memory. Key command-line options to watch for include 'fullmemdmp', '/memdmp', and '-memdmp' which indicate an operation to dump memory. Also, be alert for options such as ' -o ', ' /o ', which specify the output location for the dump file, and ' -p ', ' /p ', which indicate a target process for the memory dump. These indicators, particularly when occurring together, suggest an effort to misuse \"rdrleakdiag.exe\" for acquiring process memory data, which could be indicative of malicious activities such as information gathering or the facilitation of further attacks. Be aware that while monitoring for these signs, there may be instances where the use of these command-line arguments and the \"rdrleakdiag.exe\" process occur in non-malicious contexts; such instances are considered unknown false positives. The detection of any of the outlined command-line conditions in conjunction with the execution of \"rdrleakdiag.exe\" should be treated with a high level of suspicion and investigated promptly."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Obfuscated use of Clip.exe to execute PowerShell.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect obfuscated use of Clip.exe to execute PowerShell, you should: focus on monitoring Windows Security logs, specifically searching for Event ID 4697 which involves service installation activities. It\u2019s essential that the 'System Security Extension' audit subcategory is enabled to properly log these events. The key indicator of a potential attack is the creation or modification of services that include the 'cmd', '&&', and 'clipboard]::' strings in the Service File Name, suggesting an attempt to execute PowerShell commands in a concealed manner using Clip.exe. It is important to treat every detection as highly suspicious, although there might be cases where the activity is not malicious (though such false positives are unknown). This activity is associated with tactics and techniques that include Execution and Defense Evasion, specifically focusing on the use of PowerShell and obfuscated commands to evade detection mechanisms.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\n    definition: The 'System Security Extension' audit subcategory need to be enabled to log the EID 4697\ndetection:\n    selection:\n        EventID: 4697\n        ServiceFileName|contains|all:\n            - 'cmd'\n            - '&&'\n            - 'clipboard]::'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\n    definition: The 'System Security Extension' audit subcategory need to be enabled to log the EID 4697\ndetection:\n    selection:\n        EventID: 4697\n        ServiceFileName|contains|all:\n            - 'cmd'\n            - '&&'\n            - 'clipboard]::'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Obfuscated use of Clip.exe to execute PowerShell",
      "answer": "In order to detect obfuscated use of Clip.exe to execute PowerShell, you should: focus on monitoring Windows Security logs, specifically searching for Event ID 4697 which involves service installation activities. It\u2019s essential that the 'System Security Extension' audit subcategory is enabled to properly log these events. The key indicator of a potential attack is the creation or modification of services that include the 'cmd', '&&', and 'clipboard]::' strings in the Service File Name, suggesting an attempt to execute PowerShell commands in a concealed manner using Clip.exe. It is important to treat every detection as highly suspicious, although there might be cases where the activity is not malicious (though such false positives are unknown). This activity is associated with tactics and techniques that include Execution and Defense Evasion, specifically focusing on the use of PowerShell and obfuscated commands to evade detection mechanisms."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Detect when users are authenticating without MFA being required..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when users are authenticating without MFA being required, you should: Monitor Azure sign-in logs for authentication attempts that are successful and marked with the requirement for single-factor authentication only. This means paying close attention to log entries from the Azure platform, specifically within the sign-in logs service. Look for records that indicate an authentication attempt's status was 'Success', and that the authentication did not require multi-factor authentication (MFA), instead pointing towards a reliance on single-factor authentication. It's crucial to note that such occurrences might sometimes be approved actions if they were pre-approved by a system administrator. Given the relatively less secure nature of single-factor authentication compared to multi-factor methods, these logs are tagged at a low level of concern, yet they can indicate potential security lapses or areas where security policies regarding authentication may need to be strengthened.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: azure\n    service: signinlogs\ndetection:\n    selection:\n        Status: 'Success'\n        AuthenticationRequirement: 'singleFactorAuthentication'\n    condition: selection\nfalsepositives:\n    - If this was approved by System Administrator.\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: azure\n    service: signinlogs\ndetection:\n    selection:\n        Status: 'Success'\n        AuthenticationRequirement: 'singleFactorAuthentication'\n    condition: selection\nfalsepositives:\n    - If this was approved by System Administrator.\nlevel: low\n",
      "question": "Detect when users are authenticating without MFA being required.",
      "answer": "In order to detect when users are authenticating without MFA being required, you should: Monitor Azure sign-in logs for authentication attempts that are successful and marked with the requirement for single-factor authentication only. This means paying close attention to log entries from the Azure platform, specifically within the sign-in logs service. Look for records that indicate an authentication attempt's status was 'Success', and that the authentication did not require multi-factor authentication (MFA), instead pointing towards a reliance on single-factor authentication. It's crucial to note that such occurrences might sometimes be approved actions if they were pre-approved by a system administrator. Given the relatively less secure nature of single-factor authentication compared to multi-factor methods, these logs are tagged at a low level of concern, yet they can indicate potential security lapses or areas where security policies regarding authentication may need to be strengthened."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Device code flow is an OAuth 2.0 protocol flow specifically for input constrained devices and is not used in all environments.\nIf this type of flow is seen in the environment and not being used in an input constrained device scenario, further investigation is warranted.\nThis can be a misconfigured application or potentially something malicious.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to identify when Device code flow, an OAuth 2.0 protocol flow specifically tailored for input constrained devices, is being used in environments where it should not be (indicating it might be a misconfigured application or potentially something malicious), you should: Focus on Azure sign-in logs for detections. Look for log entries where the message includes the term \"Device Code\". Since this method is uncommon outside of input constrained device scenarios, any detection of this flow in a non-targeted environment should trigger further investigation. Be aware that there are legitimate cases where applications that are input constrained will require using the device code flow for valid authentications; these should not be automatically considered as false positives. The importance of monitoring for this activity is rated at a medium level.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: azure\n    service: signinlogs\ndetection:\n    selection:\n        properties.message: Device Code\n    condition: selection\nfalsepositives:\n    - Applications that are input constrained will need to use device code flow and are valid authentications.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: azure\n    service: signinlogs\ndetection:\n    selection:\n        properties.message: Device Code\n    condition: selection\nfalsepositives:\n    - Applications that are input constrained will need to use device code flow and are valid authentications.\nlevel: medium\n",
      "question": "Device code flow is an OAuth 2.0 protocol flow specifically for input constrained devices and is not used in all environments.\nIf this type of flow is seen in the environment and not being used in an input constrained device scenario, further investigation is warranted.\nThis can be a misconfigured application or potentially something malicious.\n",
      "answer": "In order to identify when Device code flow, an OAuth 2.0 protocol flow specifically tailored for input constrained devices, is being used in environments where it should not be (indicating it might be a misconfigured application or potentially something malicious), you should: Focus on Azure sign-in logs for detections. Look for log entries where the message includes the term \"Device Code\". Since this method is uncommon outside of input constrained device scenarios, any detection of this flow in a non-targeted environment should trigger further investigation. Be aware that there are legitimate cases where applications that are input constrained will require using the device code flow for valid authentications; these should not be automatically considered as false positives. The importance of monitoring for this activity is rated at a medium level."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    product: okta\n    service: okta\ndetection:\n    selection:\n        eventtype:\n            - policy.rule.update\n            - policy.rule.delete\n    condition: selection\nfalsepositives:\n    - Unknown\n\nlevel: medium\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect when an Policy Rule is Modified or Deleted.\n\nHere is how  the given sigma rule operates: In order to detect when a Policy Rule is Modified or Deleted, you should monitor log data from Okta services. Specifically, look for events where the event type indicates either a policy rule update or a policy rule deletion. These modifications to policy rules can signal unauthorized changes aiming to weaken security policies or bypass security controls. Keeping an eye on these events is vital as they might not necessarily be malicious on their own, but without legitimate reasons, they could indicate a security risk or a breach attempt. The level of concern for such events is considered medium, meaning while they may not always represent malicious activities, they are significant enough to warrant investigation. False positives can occur, meaning there might be instances where policy rules are legitimately modified or deleted, and distinguishing between malicious and non-malicious changes requires further investigation. This monitoring process is crucial for maintaining the integrity of security policies within an organization's Okta environment.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: okta\n    service: okta\ndetection:\n    selection:\n        eventtype:\n            - policy.rule.update\n            - policy.rule.delete\n    condition: selection\nfalsepositives:\n    - Unknown\n\nlevel: medium\n",
      "question": "when an Policy Rule is Modified or Deleted.",
      "answer": "In order to detect when a Policy Rule is Modified or Deleted, you should monitor log data from Okta services. Specifically, look for events where the event type indicates either a policy rule update or a policy rule deletion. These modifications to policy rules can signal unauthorized changes aiming to weaken security policies or bypass security controls. Keeping an eye on these events is vital as they might not necessarily be malicious on their own, but without legitimate reasons, they could indicate a security risk or a breach attempt. The level of concern for such events is considered medium, meaning while they may not always represent malicious activities, they are significant enough to warrant investigation. False positives can occur, meaning there might be instances where policy rules are legitimately modified or deleted, and distinguishing between malicious and non-malicious changes requires further investigation. This monitoring process is crucial for maintaining the integrity of security policies within an organization's Okta environment."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting when an attacker adds a new \"Debugger\" value to the \"Hangs\" key in order to achieve persistence which will get invoked when an application crashes.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when an attacker adds a new \"Debugger\" value to the \"Hangs\" key in order to achieve persistence which will get invoked when an application crashes, you should focus on monitoring registry settings in Windows environments. Specifically, watch for the event where a SetValue event type occurs on the registry path containing '\\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\\Hangs\\Debugger'. This specific activity is indicative of an attempt to insert a debugger entry in the Windows Error Reporting system, which could be exploited to gain persistent access to the system by getting invoked whenever an application crashes. It's worth noting that while this registry value is not typically set by default, it might be altered by administrators in rare cases. Given the nature of this behavior, any detection should be considered highly significant and warrant close investigation due to the potential for abuse in achieving persistence on a target system.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|contains: '\\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\\Hangs\\Debugger'\n    condition: selection\nfalsepositives:\n    - This value is not set by default but could be rarly used by administrators\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|contains: '\\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\\Hangs\\Debugger'\n    condition: selection\nfalsepositives:\n    - This value is not set by default but could be rarly used by administrators\nlevel: high\n",
      "question": "when an attacker adds a new \"Debugger\" value to the \"Hangs\" key in order to achieve persistence which will get invoked when an application crashes",
      "answer": "In order to detect when an attacker adds a new \"Debugger\" value to the \"Hangs\" key in order to achieve persistence which will get invoked when an application crashes, you should focus on monitoring registry settings in Windows environments. Specifically, watch for the event where a SetValue event type occurs on the registry path containing '\\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\\Hangs\\Debugger'. This specific activity is indicative of an attempt to insert a debugger entry in the Windows Error Reporting system, which could be exploited to gain persistent access to the system by getting invoked whenever an application crashes. It's worth noting that while this registry value is not typically set by default, it might be altered by administrators in rare cases. Given the nature of this behavior, any detection should be considered highly significant and warrant close investigation due to the potential for abuse in achieving persistence on a target system."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting firewall is created, modified, or deleted..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to identify when a firewall is created, modified, or deleted, you should focus on monitoring Azure activity logs for specific operations indicative of such actions. Specifically, you should look out for events where the operation name is either MICROSOFT.NETWORK/AZUREFIREWALLS/WRITE or MICROSOFT.NETWORK/AZUREFIREWALLS/DELETE. These events signify that a firewall within Azure has been written to (which could mean creation or modification) or deleted. It's important to consider that these operations may not always represent malicious behavior; they could be legitimate administrative actions. Verification steps should involve checking the user identity, user agent, and hostname to confirm whether these modifications should be happening within your environment. Any modifications or deletions made by unfamiliar users or in a manner that seems unusual should be thoroughly investigated. If you discover that certain legitimate activities are consistently flagged by these criteria, you can consider exempting them to reduce false positives. The sensitivity level for these kinds of alerts is considered medium, suggesting a balanced approach to monitoring and investigation.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: azure\n    service: activitylogs\ndetection:\n    selection:\n        operationName:\n            - MICROSOFT.NETWORK/AZUREFIREWALLS/WRITE\n            - MICROSOFT.NETWORK/AZUREFIREWALLS/DELETE\n    condition: selection\nfalsepositives:\n    - Firewall being modified or deleted may be performed by a system administrator. Verify whether the user identity, user agent, and/or hostname should be making changes in your environment.\n    - Firewall modified or deleted from unfamiliar users should be investigated. If known behavior is causing false positives, it can be exempted from the rule.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: azure\n    service: activitylogs\ndetection:\n    selection:\n        operationName:\n            - MICROSOFT.NETWORK/AZUREFIREWALLS/WRITE\n            - MICROSOFT.NETWORK/AZUREFIREWALLS/DELETE\n    condition: selection\nfalsepositives:\n    - Firewall being modified or deleted may be performed by a system administrator. Verify whether the user identity, user agent, and/or hostname should be making changes in your environment.\n    - Firewall modified or deleted from unfamiliar users should be investigated. If known behavior is causing false positives, it can be exempted from the rule.\nlevel: medium\n",
      "question": "firewall is created, modified, or deleted.",
      "answer": "In order to identify when a firewall is created, modified, or deleted, you should focus on monitoring Azure activity logs for specific operations indicative of such actions. Specifically, you should look out for events where the operation name is either MICROSOFT.NETWORK/AZUREFIREWALLS/WRITE or MICROSOFT.NETWORK/AZUREFIREWALLS/DELETE. These events signify that a firewall within Azure has been written to (which could mean creation or modification) or deleted. It's important to consider that these operations may not always represent malicious behavior; they could be legitimate administrative actions. Verification steps should involve checking the user identity, user agent, and hostname to confirm whether these modifications should be happening within your environment. Any modifications or deletions made by unfamiliar users or in a manner that seems unusual should be thoroughly investigated. If you discover that certain legitimate activities are consistently flagged by these criteria, you can consider exempting them to reduce false positives. The sensitivity level for these kinds of alerts is considered medium, suggesting a balanced approach to monitoring and investigation."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting CVE-2019-19781 exploitation attempt against Citrix Netscaler, Application Delivery Controller and Citrix Gateway Attack.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect CVE-2019-19781 exploitation attempt against Citrix Netscaler, Application Delivery Controller, and Citrix Gateway Attack, you should monitor your webserver logs, particularly focusing on requests to the Citrix Netscaler appliance. Watch for specific patterns in the URI queries that attackers might use to exploit vulnerabilities. These patterns include attempts to access the '../vpns/' directory, which might indicate an attempt at directory traversal. Additionally, be alert for queries that end with '/vpns/cfg/smb.conf', as this could suggest an attempt to gain access to sensitive configuration files.\n\nFurthermore, you should pay close attention to the access of scripts within the '/vpns/portal/scripts/' directory, especially those with a '.pl' extension. Almost all scripts in this path, except 'logout.pl', are considered exploitable and should be closely monitored for unauthorized access attempts.\n\nLogs should capture key fields including the client's IP address, the virtual host (vhost), the requested URL, and the server's response to the request. Monitoring these fields can help in identifying and investigating suspicious activities effectively.\n\nBe aware that there might be unknown patterns of false positives; however, given the critical severity level indicated for this type of attack, utmost attention and prompt investigation of detected patterns are recommended to prevent or mitigate potential exploitation.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: webserver\n    definition: 'Make sure that your Netscaler appliance logs all kinds of attacks (test with http://your-citrix-gw.net/robots.txt). The directory traversal with ../ might not be needed on certain cloud instances or for authenticated users, so we also check for direct paths. All scripts in portal/scripts are exploitable except logout.pl.'\ndetection:\n    selection_cs:\n        - cs-uri-query|contains: '/../vpns/'\n        - cs-uri-query|endswith: '/vpns/cfg/smb.conf'\n    selection_csall:\n        cs-uri-query|contains|all:\n            - '/vpns/portal/scripts/'\n            - '.pl'\n    condition: 1 of selection_*\nfields:\n    - client_ip\n    - vhost\n    - url\n    - response\nfalsepositives:\n    - Unknown\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: webserver\n    definition: 'Make sure that your Netscaler appliance logs all kinds of attacks (test with http://your-citrix-gw.net/robots.txt). The directory traversal with ../ might not be needed on certain cloud instances or for authenticated users, so we also check for direct paths. All scripts in portal/scripts are exploitable except logout.pl.'\ndetection:\n    selection_cs:\n        - cs-uri-query|contains: '/../vpns/'\n        - cs-uri-query|endswith: '/vpns/cfg/smb.conf'\n    selection_csall:\n        cs-uri-query|contains|all:\n            - '/vpns/portal/scripts/'\n            - '.pl'\n    condition: 1 of selection_*\nfields:\n    - client_ip\n    - vhost\n    - url\n    - response\nfalsepositives:\n    - Unknown\nlevel: critical\n",
      "question": "CVE-2019-19781 exploitation attempt against Citrix Netscaler, Application Delivery Controller and Citrix Gateway Attack",
      "answer": "In order to detect CVE-2019-19781 exploitation attempt against Citrix Netscaler, Application Delivery Controller, and Citrix Gateway Attack, you should monitor your webserver logs, particularly focusing on requests to the Citrix Netscaler appliance. Watch for specific patterns in the URI queries that attackers might use to exploit vulnerabilities. These patterns include attempts to access the '../vpns/' directory, which might indicate an attempt at directory traversal. Additionally, be alert for queries that end with '/vpns/cfg/smb.conf', as this could suggest an attempt to gain access to sensitive configuration files.\n\nFurthermore, you should pay close attention to the access of scripts within the '/vpns/portal/scripts/' directory, especially those with a '.pl' extension. Almost all scripts in this path, except 'logout.pl', are considered exploitable and should be closely monitored for unauthorized access attempts.\n\nLogs should capture key fields including the client's IP address, the virtual host (vhost), the requested URL, and the server's response to the request. Monitoring these fields can help in identifying and investigating suspicious activities effectively.\n\nBe aware that there might be unknown patterns of false positives; however, given the critical severity level indicated for this type of attack, utmost attention and prompt investigation of detected patterns are recommended to prevent or mitigate potential exploitation."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Obfuscated Powershell via use MSHTA in Scripts.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to Detect Obfuscated Powershell via use MSHTA in Scripts, you should: Monitor Windows system logs for events generated by the Service Control Manager, focusing specifically on event ID 7045. This event signals the creation of a new service, which can be a common tactic used by attackers to execute obfuscated PowerShell commands. Pay particular attention to the 'ImagePath' field within these events. An occurrence is considered suspicious if the 'ImagePath' contains both 'mshta' and 'vbscript:createobject' segments. These elements are indicative of an attempt to leverage the Microsoft HTML Application Host (mshta) to execute VBScript code that, in turn, can create and manipulate objects; this is a method commonly employed to bypass traditional detection mechanisms by obfuscating PowerShell scripts. Although the detection of this activity is set at a high level due to its potential severity, be aware that there might be legitimate use cases that result in false positives. It is important to investigate these occurrences to differentiate between malicious actions and legitimate administrative tasks. The tactics and techniques associated with this behavior include Execution and Command and Scripting Interpreter, underlining its relevance to cybersecurity practices aimed at identifying sophisticated attack methodologies.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: system\ndetection:\n    selection:\n        Provider_Name: 'Service Control Manager'\n        EventID: 7045\n        ImagePath|contains|all:\n            - 'mshta'\n            - 'vbscript:createobject'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: system\ndetection:\n    selection:\n        Provider_Name: 'Service Control Manager'\n        EventID: 7045\n        ImagePath|contains|all:\n            - 'mshta'\n            - 'vbscript:createobject'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Obfuscated Powershell via use MSHTA in Scripts",
      "answer": "In order to Detect Obfuscated Powershell via use MSHTA in Scripts, you should: Monitor Windows system logs for events generated by the Service Control Manager, focusing specifically on event ID 7045. This event signals the creation of a new service, which can be a common tactic used by attackers to execute obfuscated PowerShell commands. Pay particular attention to the 'ImagePath' field within these events. An occurrence is considered suspicious if the 'ImagePath' contains both 'mshta' and 'vbscript:createobject' segments. These elements are indicative of an attempt to leverage the Microsoft HTML Application Host (mshta) to execute VBScript code that, in turn, can create and manipulate objects; this is a method commonly employed to bypass traditional detection mechanisms by obfuscating PowerShell scripts. Although the detection of this activity is set at a high level due to its potential severity, be aware that there might be legitimate use cases that result in false positives. It is important to investigate these occurrences to differentiate between malicious actions and legitimate administrative tasks. The tactics and techniques associated with this behavior include Execution and Command and Scripting Interpreter, underlining its relevance to cybersecurity practices aimed at identifying sophisticated attack methodologies."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of the \"net use\" command to mount a WebDAV server and then immediately execute some content in it. As seen being used in malicious LNK files.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the execution of the \"net use\" command to mount a WebDAV server and then immediately execute some content in it, as seen being used in malicious LNK files, you should: Look for processes being created within Windows systems that display certain characteristics in their command line execution patterns. Specifically, watch for the command line utility 'cmd.exe' or processes with the original file name 'Cmd.EXE' being started. Moreover, focus on command lines that include a sequence indicating the use of 'net use http' to establish a connection to a WebDAV server followed by '& start /b ' indicating the background starting of a process, and also include '\\DavWWWRoot\\' which is part of the default path used by WebDAV servers. Additionally, pay attention to command lines attempting to execute/executing external files such as '.exe', '.dll', '.bat', '.vbs', or '.ps1' files. All these specific patterns combined suggest a high likelihood of a malicious activity related to mounting and executing from WebDAV servers, which necessitates immediate investigation. This observation strategy is crucial for the early detection of such unauthorized activities and falls under the broader scope of preemptive defense against tactics and techniques involving execution and command and control methods.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|contains: '\\cmd.exe'\n        - OriginalFileName: 'Cmd.EXE'\n    selection_base:\n        CommandLine|contains|all:\n            - ' net use http'\n            - '& start /b '\n            - '\\DavWWWRoot\\'\n    selection_ext:\n        CommandLine|contains:\n            - '.exe '\n            - '.dll '\n            - '.bat '\n            - '.vbs '\n            - '.ps1 '\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|contains: '\\cmd.exe'\n        - OriginalFileName: 'Cmd.EXE'\n    selection_base:\n        CommandLine|contains|all:\n            - ' net use http'\n            - '& start /b '\n            - '\\DavWWWRoot\\'\n    selection_ext:\n        CommandLine|contains:\n            - '.exe '\n            - '.dll '\n            - '.bat '\n            - '.vbs '\n            - '.ps1 '\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "execution of the \"net use\" command to mount a WebDAV server and then immediately execute some content in it. As seen being used in malicious LNK files",
      "answer": "In order to detect the execution of the \"net use\" command to mount a WebDAV server and then immediately execute some content in it, as seen being used in malicious LNK files, you should: Look for processes being created within Windows systems that display certain characteristics in their command line execution patterns. Specifically, watch for the command line utility 'cmd.exe' or processes with the original file name 'Cmd.EXE' being started. Moreover, focus on command lines that include a sequence indicating the use of 'net use http' to establish a connection to a WebDAV server followed by '& start /b ' indicating the background starting of a process, and also include '\\DavWWWRoot\\' which is part of the default path used by WebDAV servers. Additionally, pay attention to command lines attempting to execute/executing external files such as '.exe', '.dll', '.bat', '.vbs', or '.ps1' files. All these specific patterns combined suggest a high likelihood of a malicious activity related to mounting and executing from WebDAV servers, which necessitates immediate investigation. This observation strategy is crucial for the early detection of such unauthorized activities and falls under the broader scope of preemptive defense against tactics and techniques involving execution and command and control methods."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting unknown program using commandline flags usually used by tools such as PsExec and PAExec to start programs with SYSTEM Privileges.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect unknown program using commandline flags usually used by tools such as PsExec and PAExec to start programs with SYSTEM privileges, you should monitor the creation of Windows processes for specific command-line arguments that indicate an elevation attempt to the LOCAL_SYSTEM account. These arguments include variations of '-s' and '/s' flags in combination with 'cmd', 'powershell', 'pwsh', or any similar command line interpreter software, often paired with '-i' or '/i' to start an interactive session. It's crucial to note that these flags can be used interchangeably (e.g., '-' can be replaced with '/') and the order of the arguments might not always be the same. Furthermore, variations specific to PowerShell version 7 (pwsh) and version 5 (powershell) are also considered. To avoid false alerts, the rule excludes known instances where command-line arguments include 'paexec', 'PsExec', or 'accepteula', as they are common tools that use similar flags but may not indicate malicious activity. These command-line arguments are typically associated with legitimate administrative tools, and exclusions are made for instances that may resemble typical tool usage or instances where software companies include such tools with their products under different names. This detection process is set to a high level of alert due to the potential impact of an attacker gaining SYSTEM privileges.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_flags_1:\n        # Escalation to LOCAL_SYSTEM\n        CommandLine|contains:\n            # Note that you don't need to add the \".exe\" part when using psexec/paexec\n            # The \"-\" can also be replaced with \"/\"\n            # The order of args isn't important\n            # \"cmd\" can be replaced by \"powershell\", \"pwsh\" or any other console like software\n            - ' -s cmd'\n            - ' /s cmd'\n            - ' -s -i cmd'\n            - ' /s /i cmd'\n            - ' /s -i cmd'\n            - ' -s /i cmd'\n            - ' -i -s cmd'\n            - ' /i /s cmd'\n            - ' -i /s cmd'\n            - ' /i -s cmd'\n            # Pwsh (For PowerShell 7)\n            - ' -s pwsh'\n            - ' /s pwsh'\n            - ' -s -i pwsh'\n            - ' /s /i pwsh'\n            - ' /s -i pwsh'\n            - ' -s /i pwsh'\n            - ' -i -s pwsh'\n            - ' /i /s pwsh'\n            - ' -i /s pwsh'\n            - ' /i -s pwsh'\n            # PowerShell (For PowerShell 5)\n            - ' -s powershell'\n            - ' /s powershell'\n            - ' -s -i powershell'\n            - ' /s /i powershell'\n            - ' /s -i powershell'\n            - ' -s /i powershell'\n            - ' -i -s powershell'\n            - ' /i /s powershell'\n            - ' -i /s powershell'\n            - ' /i -s powershell'\n    filter:\n        # This filter exclude strings covered by 8834e2f7-6b4b-4f09-8906-d2276470ee23\n        CommandLine|contains:\n            - 'paexec'\n            - 'PsExec'\n            - 'accepteula'\n    condition: 1 of selection_flags_* and not filter\nfalsepositives:\n    - Weird admins that rename their tools\n    - Software companies that bundle PsExec/PAExec with their software and rename it, so that it is less embarrassing\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_flags_1:\n        # Escalation to LOCAL_SYSTEM\n        CommandLine|contains:\n            # Note that you don't need to add the \".exe\" part when using psexec/paexec\n            # The \"-\" can also be replaced with \"/\"\n            # The order of args isn't important\n            # \"cmd\" can be replaced by \"powershell\", \"pwsh\" or any other console like software\n            - ' -s cmd'\n            - ' /s cmd'\n            - ' -s -i cmd'\n            - ' /s /i cmd'\n            - ' /s -i cmd'\n            - ' -s /i cmd'\n            - ' -i -s cmd'\n            - ' /i /s cmd'\n            - ' -i /s cmd'\n            - ' /i -s cmd'\n            # Pwsh (For PowerShell 7)\n            - ' -s pwsh'\n            - ' /s pwsh'\n            - ' -s -i pwsh'\n            - ' /s /i pwsh'\n            - ' /s -i pwsh'\n            - ' -s /i pwsh'\n            - ' -i -s pwsh'\n            - ' /i /s pwsh'\n            - ' -i /s pwsh'\n            - ' /i -s pwsh'\n            # PowerShell (For PowerShell 5)\n            - ' -s powershell'\n            - ' /s powershell'\n            - ' -s -i powershell'\n            - ' /s /i powershell'\n            - ' /s -i powershell'\n            - ' -s /i powershell'\n            - ' -i -s powershell'\n            - ' /i /s powershell'\n            - ' -i /s powershell'\n            - ' /i -s powershell'\n    filter:\n        # This filter exclude strings covered by 8834e2f7-6b4b-4f09-8906-d2276470ee23\n        CommandLine|contains:\n            - 'paexec'\n            - 'PsExec'\n            - 'accepteula'\n    condition: 1 of selection_flags_* and not filter\nfalsepositives:\n    - Weird admins that rename their tools\n    - Software companies that bundle PsExec/PAExec with their software and rename it, so that it is less embarrassing\nlevel: high\n",
      "question": "unknown program using commandline flags usually used by tools such as PsExec and PAExec to start programs with SYSTEM Privileges",
      "answer": "In order to detect unknown program using commandline flags usually used by tools such as PsExec and PAExec to start programs with SYSTEM privileges, you should monitor the creation of Windows processes for specific command-line arguments that indicate an elevation attempt to the LOCAL_SYSTEM account. These arguments include variations of '-s' and '/s' flags in combination with 'cmd', 'powershell', 'pwsh', or any similar command line interpreter software, often paired with '-i' or '/i' to start an interactive session. It's crucial to note that these flags can be used interchangeably (e.g., '-' can be replaced with '/') and the order of the arguments might not always be the same. Furthermore, variations specific to PowerShell version 7 (pwsh) and version 5 (powershell) are also considered. To avoid false alerts, the rule excludes known instances where command-line arguments include 'paexec', 'PsExec', or 'accepteula', as they are common tools that use similar flags but may not indicate malicious activity. These command-line arguments are typically associated with legitimate administrative tools, and exclusions are made for instances that may resemble typical tool usage or instances where software companies include such tools with their products under different names. This detection process is set to a high level of alert due to the potential impact of an attacker gaining SYSTEM privileges."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting renamed dctask64.exe used for process injection, command execution, process creation with a signed binary by ZOHO Corporation.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a renamed dctask64.exe used for process injection, command execution, process creation with a signed binary by ZOHO Corporation, you should: monitor Windows process creation logs for any occurrences where a process is started with a hash value of '6834B1B94E49701D77CCB3C0895E1AFD'. It is essential to specifically exclude any processes where the image name ends with '\\dctask64.exe' to avoid false positives with the legitimate ZOHO application. The primary fields of interest in this analysis are the command line used to start the process, the command line of the parent process, and the image of the parent process. Although the potential for false positives is currently unknown, the severity level for this activity is considered high, suggesting that detection of this activity should be prioritized due to the risk of exploitation for malicious purposes such as process injection or unauthorized command execution.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Hashes|contains: '6834B1B94E49701D77CCB3C0895E1AFD'\n    filter:\n        Image|endswith: '\\dctask64.exe'\n    condition: selection and not filter\nfields:\n    - CommandLine\n    - ParentCommandLine\n    - ParentImage\nfalsepositives:\n    - Unknown yet\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Hashes|contains: '6834B1B94E49701D77CCB3C0895E1AFD'\n    filter:\n        Image|endswith: '\\dctask64.exe'\n    condition: selection and not filter\nfields:\n    - CommandLine\n    - ParentCommandLine\n    - ParentImage\nfalsepositives:\n    - Unknown yet\nlevel: high\n",
      "question": "renamed dctask64.exe used for process injection, command execution, process creation with a signed binary by ZOHO Corporation",
      "answer": "In order to detect a renamed dctask64.exe used for process injection, command execution, process creation with a signed binary by ZOHO Corporation, you should: monitor Windows process creation logs for any occurrences where a process is started with a hash value of '6834B1B94E49701D77CCB3C0895E1AFD'. It is essential to specifically exclude any processes where the image name ends with '\\dctask64.exe' to avoid false positives with the legitimate ZOHO application. The primary fields of interest in this analysis are the command line used to start the process, the command line of the parent process, and the image of the parent process. Although the potential for false positives is currently unknown, the severity level for this activity is considered high, suggesting that detection of this activity should be prioritized due to the risk of exploitation for malicious purposes such as process injection or unauthorized command execution."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting volume shadow copy mount via Windows event log.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect volume shadow copy mount via Windows event log, you should monitor the Windows system log specifically for events generated by the Microsoft-Windows-Ntfs provider. Look for the event with ID 98, which indicates an activity related to the NTFS file system, such as when a volume shadow copy is mounted. This event becomes particularly significant if the DeviceName field in the event contains the string \"HarddiskVolumeShadowCopy,\" as this suggests a volume shadow copy operation was likely initiated.\n\nIt is important to note that there can be legitimate reasons for mounting volume shadow copies, such as during routine backups. Therefore, occurrences of this event may not always signify malicious activity. However, because attackers might exploit shadow copies to access or modify backups as part of their tactics, monitoring for this event can serve as an early warning. Mitigation techniques involve verifying the context in which these shadow copy mounts occur to determine if they are part of standard backup operations or if they deviate from normal patterns, suggesting a potential security threat.\n\nThe tags that are essential in understanding the context of this detection include Persistence, Privilege Escalation, and Defense Evasion, which correspond to tactics attackers might employ involving shadow copies to maintain access, elevate privileges, or evade defenses, respectively.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: system\ndetection:\n    selection:\n        Provider_Name: Microsoft-Windows-Ntfs\n        EventID: 98\n        DeviceName|contains: HarddiskVolumeShadowCopy\n    condition: selection\nfalsepositives:\n    - Legitimate use of volume shadow copy mounts (backups maybe).\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: system\ndetection:\n    selection:\n        Provider_Name: Microsoft-Windows-Ntfs\n        EventID: 98\n        DeviceName|contains: HarddiskVolumeShadowCopy\n    condition: selection\nfalsepositives:\n    - Legitimate use of volume shadow copy mounts (backups maybe).\nlevel: low\n",
      "question": "volume shadow copy mount via Windows event log",
      "answer": "In order to detect volume shadow copy mount via Windows event log, you should monitor the Windows system log specifically for events generated by the Microsoft-Windows-Ntfs provider. Look for the event with ID 98, which indicates an activity related to the NTFS file system, such as when a volume shadow copy is mounted. This event becomes particularly significant if the DeviceName field in the event contains the string \"HarddiskVolumeShadowCopy,\" as this suggests a volume shadow copy operation was likely initiated.\n\nIt is important to note that there can be legitimate reasons for mounting volume shadow copies, such as during routine backups. Therefore, occurrences of this event may not always signify malicious activity. However, because attackers might exploit shadow copies to access or modify backups as part of their tactics, monitoring for this event can serve as an early warning. Mitigation techniques involve verifying the context in which these shadow copy mounts occur to determine if they are part of standard backup operations or if they deviate from normal patterns, suggesting a potential security threat.\n\nThe tags that are essential in understanding the context of this detection include Persistence, Privilege Escalation, and Defense Evasion, which correspond to tactics attackers might employ involving shadow copies to maintain access, elevate privileges, or evade defenses, respectively."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: process_creation\n    product: linux\ndetection:\n    selection:\n        Image|endswith:\n            - '/apt'\n            - '/apt-get'\n        CommandLine|contains: 'APT::Update::Pre-Invoke::='\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect usage of \"apt\" and \"apt-get\" as a GTFOBin to execute and proxy command and binary execution\n\nHere is how  the given sigma rule operates: In order to detect usage of \"apt\" and \"apt-get\" as a GTFOBin to execute and proxy command and binary execution, you should: focus on monitoring process creation events on Linux systems. Specifically, be on the lookout for processes that are initiated by the 'apt' or 'apt-get' commands. These processes might be attempting to misuse the 'apt' package management utility for malicious purposes if the command line includes the specific pattern 'APT::Update::Pre-Invoke::='. This kind of behavior is indicative of an attacker leveraging the legitimate functionality of the 'apt' or 'apt-get' for executing arbitrary commands or proxying binary execution, which is a recognized technique for evading detection and maintaining persistence on a Linux machine. Make sure to consider any instances that match these criteria as medium-level threats, although be aware that there might be legitimate cases that could lead to false positives.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: linux\ndetection:\n    selection:\n        Image|endswith:\n            - '/apt'\n            - '/apt-get'\n        CommandLine|contains: 'APT::Update::Pre-Invoke::='\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "usage of \"apt\" and \"apt-get\" as a GTFOBin to execute and proxy command and binary execution",
      "answer": "In order to detect usage of \"apt\" and \"apt-get\" as a GTFOBin to execute and proxy command and binary execution, you should: focus on monitoring process creation events on Linux systems. Specifically, be on the lookout for processes that are initiated by the 'apt' or 'apt-get' commands. These processes might be attempting to misuse the 'apt' package management utility for malicious purposes if the command line includes the specific pattern 'APT::Update::Pre-Invoke::='. This kind of behavior is indicative of an attacker leveraging the legitimate functionality of the 'apt' or 'apt-get' for executing arbitrary commands or proxying binary execution, which is a recognized technique for evading detection and maintaining persistence on a Linux machine. Make sure to consider any instances that match these criteria as medium-level threats, although be aware that there might be legitimate cases that could lead to false positives."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - OriginalFileName: 'psloglist.exe'\n        - Image|endswith:\n            - '\\psloglist.exe'\n            - '\\psloglist64.exe'\n    selection_cli_eventlog:\n        CommandLine|contains:\n            - ' security'\n            - ' application'\n            - ' system'\n    selection_cli_flags:\n        CommandLine|contains:\n            - ' -d'\n            - ' /d'\n            - ' -x'\n            - ' /x'\n            - ' -s'\n            - ' /s'\n            - ' -c' # Clear event log after displaying\n            - ' /c'\n            - ' -g' # Export an event log as an evt file.\n            - ' /g'\n    condition: all of selection_*\nfalsepositives:\n    - Another tool that uses the command line switches of PsLogList\n    - Legitimate use of PsLogList by an administrator\nlevel: medium\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect usage of the PsLogList utility to dump event log in order to extract admin accounts and perform account discovery or delete events logs\n\nHere is how  the given sigma rule operates: In order to detect usage of the PsLogList utility to dump event log in order to extract admin accounts and perform account discovery or delete events logs, you should: Monitor for the creation of processes related to the PsLogList utility on Windows operating systems. Specifically, look for processes where the original file name or the image path ends with 'psloglist.exe' or 'psloglist64.exe'. Additionally, check for command line arguments that indicate the utility is being used to access 'security', 'application', or 'system' event logs. Pay special attention to command line switches such as '-d', '/d' (for specifying the number of recent events to display), '-x', '/x' (for XML output), '-s', '/s' (for displaying event log records in reverse chronological order), '-c', '/c' (for clearing the event log after displaying), and '-g', '/g' (for exporting an event log as an EVT file). These indicators can suggest malicious use of PsLogList for the purpose of extracting information on admin accounts or tampering with log files to obscure activities. It is important to investigate such events while also considering potential false positives, including other tools that utilize similar command line switches or legitimate administrative use of PsLogList.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - OriginalFileName: 'psloglist.exe'\n        - Image|endswith:\n            - '\\psloglist.exe'\n            - '\\psloglist64.exe'\n    selection_cli_eventlog:\n        CommandLine|contains:\n            - ' security'\n            - ' application'\n            - ' system'\n    selection_cli_flags:\n        CommandLine|contains:\n            - ' -d'\n            - ' /d'\n            - ' -x'\n            - ' /x'\n            - ' -s'\n            - ' /s'\n            - ' -c' # Clear event log after displaying\n            - ' /c'\n            - ' -g' # Export an event log as an evt file.\n            - ' /g'\n    condition: all of selection_*\nfalsepositives:\n    - Another tool that uses the command line switches of PsLogList\n    - Legitimate use of PsLogList by an administrator\nlevel: medium\n",
      "question": "usage of the PsLogList utility to dump event log in order to extract admin accounts and perform account discovery or delete events logs",
      "answer": "In order to detect usage of the PsLogList utility to dump event log in order to extract admin accounts and perform account discovery or delete events logs, you should: Monitor for the creation of processes related to the PsLogList utility on Windows operating systems. Specifically, look for processes where the original file name or the image path ends with 'psloglist.exe' or 'psloglist64.exe'. Additionally, check for command line arguments that indicate the utility is being used to access 'security', 'application', or 'system' event logs. Pay special attention to command line switches such as '-d', '/d' (for specifying the number of recent events to display), '-x', '/x' (for XML output), '-s', '/s' (for displaying event log records in reverse chronological order), '-c', '/c' (for clearing the event log after displaying), and '-g', '/g' (for exporting an event log as an EVT file). These indicators can suggest malicious use of PsLogList for the purpose of extracting information on admin accounts or tampering with log files to obscure activities. It is important to investigate such events while also considering potential false positives, including other tools that utilize similar command line switches or legitimate administrative use of PsLogList."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting commandline operations on shell history files.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect commandline operations on shell history files, you should: focus on monitoring process creation events on macOS systems for commands that interact with shell history files. Specifically, look for instances where the command line involves activities on files such as '.bash_history', '.zsh_history', '.zhistory', '.history', '.sh_history', and 'fish_history'. It's important to be aware that not all instances detected might indicate malicious activities; some may be legitimate administrative tasks or software operations aimed at cleaning history files. The sensitivity of this monitoring has been set to a medium level due to the potential for legitimate activities to trigger false positives.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: macos\n    category: process_creation\ndetection:\n    selection:\n        CommandLine|contains:\n            - '.bash_history'\n            - '.zsh_history'\n            - '.zhistory'\n            - '.history'\n            - '.sh_history'\n            - 'fish_history'\n    condition: selection\nfalsepositives:\n    - Legitimate administrative activity\n    - Legitimate software, cleaning hist file\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: macos\n    category: process_creation\ndetection:\n    selection:\n        CommandLine|contains:\n            - '.bash_history'\n            - '.zsh_history'\n            - '.zhistory'\n            - '.history'\n            - '.sh_history'\n            - 'fish_history'\n    condition: selection\nfalsepositives:\n    - Legitimate administrative activity\n    - Legitimate software, cleaning hist file\nlevel: medium\n",
      "question": "commandline operations on shell history files",
      "answer": "In order to detect commandline operations on shell history files, you should: focus on monitoring process creation events on macOS systems for commands that interact with shell history files. Specifically, look for instances where the command line involves activities on files such as '.bash_history', '.zsh_history', '.zhistory', '.history', '.sh_history', and 'fish_history'. It's important to be aware that not all instances detected might indicate malicious activities; some may be legitimate administrative tasks or software operations aimed at cleaning history files. The sensitivity of this monitoring has been set to a medium level due to the potential for legitimate activities to trigger false positives."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Local accounts, System Owner/User discovery using operating systems utilities.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect activities associated with local accounts, system owner/user discovery using operating systems utilities, you should monitor for the execution of specific Windows utilities and command patterns indicative of enumeration or information gathering efforts. This includes the launching of utilities like 'whoami.exe', 'quser.exe', 'qwinsta.exe', 'wmic.exe' specifically with command lines aimed at retrieving user account information, 'cmdkey.exe' with commands for listing stored user credentials, and 'cmd.exe' with commands that attempt to list directories under the \\Users\\ path but exclude commands aimed at removing directories to avoid false positives. Additionally, execution of 'net.exe' or 'net1.exe' with commands including 'user' but excluding switches that indicate legitimate account management purposes such as '/add', '/domain', '/delete' etc., should also be watched. This approach focuses on identifying actions that suggest an attempt to discover local user accounts or system owners, which are essential steps in many attack scenarios where attackers aim to escalate privileges or move laterally within a network. It is important to keep in mind that there may be legitimate reasons for these utilities to be run by administrators or users, which can lead to potential false positives, thus the alert level is considered low until further investigation confirms malicious intent.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_other_img:\n        Image|endswith:\n            - '\\whoami.exe'\n            - '\\quser.exe'\n            - '\\qwinsta.exe'\n    selection_other_wmi:\n        Image|endswith: '\\wmic.exe'\n        CommandLine|contains|all:\n            - 'useraccount'\n            - 'get'\n    selection_other_cmdkey:\n        Image|endswith: '\\cmdkey.exe'\n        CommandLine|contains: ' /l'\n    selection_cmd:\n        Image|endswith: '\\cmd.exe'\n        CommandLine|contains|all:\n            - ' /c'\n            - 'dir '\n            - '\\Users\\'\n    filter_cmd:\n        CommandLine|contains: ' rmdir ' # don't match on 'dir'   \"C:\\Windows\\System32\\cmd.exe\" /q /c rmdir /s /q \"C:\\Users\\XX\\AppData\\Local\\Microsoft\\OneDrive\\19.232.1124.0005\"\n    selection_net:\n        Image|endswith:\n            - '\\net.exe'\n            - '\\net1.exe'\n        CommandLine|contains: 'user'\n    filter_net:\n        CommandLine|contains:\n            - '/domain'       # local account discovery only\n            - '/add'          # discovery only\n            - '/delete'       # discovery only\n            - '/active'       # discovery only\n            - '/expires'      # discovery only\n            - '/passwordreq'  # discovery only\n            - '/scriptpath'   # discovery only\n            - '/times'        # discovery only\n            - '/workstations' # discovery only\n    condition: (selection_cmd and not filter_cmd) or (selection_net and not filter_net) or 1 of selection_other_*\nfalsepositives:\n    - Legitimate administrator or user enumerates local users for legitimate reason\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_other_img:\n        Image|endswith:\n            - '\\whoami.exe'\n            - '\\quser.exe'\n            - '\\qwinsta.exe'\n    selection_other_wmi:\n        Image|endswith: '\\wmic.exe'\n        CommandLine|contains|all:\n            - 'useraccount'\n            - 'get'\n    selection_other_cmdkey:\n        Image|endswith: '\\cmdkey.exe'\n        CommandLine|contains: ' /l'\n    selection_cmd:\n        Image|endswith: '\\cmd.exe'\n        CommandLine|contains|all:\n            - ' /c'\n            - 'dir '\n            - '\\Users\\'\n    filter_cmd:\n        CommandLine|contains: ' rmdir ' # don't match on 'dir'   \"C:\\Windows\\System32\\cmd.exe\" /q /c rmdir /s /q \"C:\\Users\\XX\\AppData\\Local\\Microsoft\\OneDrive\\19.232.1124.0005\"\n    selection_net:\n        Image|endswith:\n            - '\\net.exe'\n            - '\\net1.exe'\n        CommandLine|contains: 'user'\n    filter_net:\n        CommandLine|contains:\n            - '/domain'       # local account discovery only\n            - '/add'          # discovery only\n            - '/delete'       # discovery only\n            - '/active'       # discovery only\n            - '/expires'      # discovery only\n            - '/passwordreq'  # discovery only\n            - '/scriptpath'   # discovery only\n            - '/times'        # discovery only\n            - '/workstations' # discovery only\n    condition: (selection_cmd and not filter_cmd) or (selection_net and not filter_net) or 1 of selection_other_*\nfalsepositives:\n    - Legitimate administrator or user enumerates local users for legitimate reason\nlevel: low\n",
      "question": "Local accounts, System Owner/User discovery using operating systems utilities",
      "answer": "In order to detect activities associated with local accounts, system owner/user discovery using operating systems utilities, you should monitor for the execution of specific Windows utilities and command patterns indicative of enumeration or information gathering efforts. This includes the launching of utilities like 'whoami.exe', 'quser.exe', 'qwinsta.exe', 'wmic.exe' specifically with command lines aimed at retrieving user account information, 'cmdkey.exe' with commands for listing stored user credentials, and 'cmd.exe' with commands that attempt to list directories under the \\Users\\ path but exclude commands aimed at removing directories to avoid false positives. Additionally, execution of 'net.exe' or 'net1.exe' with commands including 'user' but excluding switches that indicate legitimate account management purposes such as '/add', '/domain', '/delete' etc., should also be watched. This approach focuses on identifying actions that suggest an attempt to discover local user accounts or system owners, which are essential steps in many attack scenarios where attackers aim to escalate privileges or move laterally within a network. It is important to keep in mind that there may be legitimate reasons for these utilities to be run by administrators or users, which can lead to potential false positives, thus the alert level is considered low until further investigation confirms malicious intent."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting creation of a new office macro files on the systems.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the creation of new office macro files on the systems, you should:\nMonitor file events on Windows systems, specifically looking for the creation of files with extensions that indicate they are macro-enabled office documents. These extensions include '.docm' (macro-enabled Word documents), '.dotm' (macro-enabled Word templates), '.xlsm' (macro-enabled Excel workbooks), '.xltm' (macro-enabled Excel templates), '.potm' (macro-enabled PowerPoint templates), and '.pptm' (macro-enabled PowerPoint presentations). It's important to note that such detections could be common in environments where using macro-enabled documents is a regular practice, thus this activity is considered to have a low-level threat indication.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: file_event\n    product: windows\ndetection:\n    selection:\n        TargetFilename|endswith:\n            - '.docm'\n            - '.dotm'\n            - '.xlsm'\n            - '.xltm'\n            - '.potm'\n            - '.pptm'\n    condition: selection\nfalsepositives:\n    - Very common in environments that rely heavily on macro documents\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: file_event\n    product: windows\ndetection:\n    selection:\n        TargetFilename|endswith:\n            - '.docm'\n            - '.dotm'\n            - '.xlsm'\n            - '.xltm'\n            - '.potm'\n            - '.pptm'\n    condition: selection\nfalsepositives:\n    - Very common in environments that rely heavily on macro documents\nlevel: low\n",
      "question": "creation of a new office macro files on the systems",
      "answer": "In order to detect the creation of new office macro files on the systems, you should:\nMonitor file events on Windows systems, specifically looking for the creation of files with extensions that indicate they are macro-enabled office documents. These extensions include '.docm' (macro-enabled Word documents), '.dotm' (macro-enabled Word templates), '.xlsm' (macro-enabled Excel workbooks), '.xltm' (macro-enabled Excel templates), '.potm' (macro-enabled PowerPoint templates), and '.pptm' (macro-enabled PowerPoint presentations). It's important to note that such detections could be common in environments where using macro-enabled documents is a regular practice, thus this activity is considered to have a low-level threat indication."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    product: windows\n    service: appxdeployment-server\ndetection:\n    selection:\n        EventID: 854\n        Path|contains:\n            - 'transfer.sh'\n            - 'raw.githubusercontent.com'\n            - 'gist.githubusercontent.com'\n            - 'pastebin.com'\n            - 'cdn.discordapp.com/attachments/'\n            - 'mediafire.com'\n            - 'mega.nz'\n            - 'ddns.net'\n            - '.paste.ee'\n            - '.hastebin.com'\n            - '.ghostbin.co/'\n            - 'ufile.io'\n            - 'storage.googleapis.com'\n            - 'anonfiles.com'\n            - 'send.exploit.in'\n            - 'privatlab.net'\n            - 'privatlab.com'\n            - 'sendspace.com'\n            - 'pastetext.net'\n            - 'pastebin.pl'\n            - 'paste.ee'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect an appx package added the pipeline of the \"to be processed\" packages which is downloaded from a suspicious domain\n\nHere is how  the given sigma rule operates: In order to detect an appx package added to the pipeline of the \"to be processed\" packages which is downloaded from a suspicious domain, you should monitor Windows AppX Deployment Server logs for Event ID 854. This event indicates the addition of an appx package. Pay special attention to the path from which the package is downloaded. If the path contains URLs known for hosting suspicious activities, such as 'transfer.sh', 'raw.githubusercontent.com', 'gist.githubusercontent.com', 'pastebin.com', 'cdn.discordapp.com/attachments/', 'mediafire.com', 'mega.nz', 'ddns.net', '.paste.ee', '.hastebin.com', '.ghostbin.co/', 'ufile.io', 'storage.googleapis.com', 'anonfiles.com', 'send.exploit.in', 'privatlab.net', 'privatlab.com', 'sendspace.com', 'pastetext.net', 'pastebin.pl', or 'paste.ee', it might indicate a security risk. This monitoring strategy is crucial for identifying potentially harmful appx packages being processed, thereby mitigating the risk associated with executing malicious software obtained from these suspicious domains.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: appxdeployment-server\ndetection:\n    selection:\n        EventID: 854\n        Path|contains:\n            - 'transfer.sh'\n            - 'raw.githubusercontent.com'\n            - 'gist.githubusercontent.com'\n            - 'pastebin.com'\n            - 'cdn.discordapp.com/attachments/'\n            - 'mediafire.com'\n            - 'mega.nz'\n            - 'ddns.net'\n            - '.paste.ee'\n            - '.hastebin.com'\n            - '.ghostbin.co/'\n            - 'ufile.io'\n            - 'storage.googleapis.com'\n            - 'anonfiles.com'\n            - 'send.exploit.in'\n            - 'privatlab.net'\n            - 'privatlab.com'\n            - 'sendspace.com'\n            - 'pastetext.net'\n            - 'pastebin.pl'\n            - 'paste.ee'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "an appx package added the pipeline of the \"to be processed\" packages which is downloaded from a suspicious domain",
      "answer": "In order to detect an appx package added to the pipeline of the \"to be processed\" packages which is downloaded from a suspicious domain, you should monitor Windows AppX Deployment Server logs for Event ID 854. This event indicates the addition of an appx package. Pay special attention to the path from which the package is downloaded. If the path contains URLs known for hosting suspicious activities, such as 'transfer.sh', 'raw.githubusercontent.com', 'gist.githubusercontent.com', 'pastebin.com', 'cdn.discordapp.com/attachments/', 'mediafire.com', 'mega.nz', 'ddns.net', '.paste.ee', '.hastebin.com', '.ghostbin.co/', 'ufile.io', 'storage.googleapis.com', 'anonfiles.com', 'send.exploit.in', 'privatlab.net', 'privatlab.com', 'sendspace.com', 'pastetext.net', 'pastebin.pl', or 'paste.ee', it might indicate a security risk. This monitoring strategy is crucial for identifying potentially harmful appx packages being processed, thereby mitigating the risk associated with executing malicious software obtained from these suspicious domains."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting attempts to exploit a Rejetto HTTP File Server (HFS) via CVE-2014-6287.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect attempts to exploit a Rejetto HTTP File Server (HFS) via CVE-2014-6287, you should: Monitor webserver logs for specific patterns in the query section of URLs that are indicative of exploitation attempts. Initially, look for queries containing '?search=%00{.' which points toward an attempt to inject malicious code or commands. Additionally, pay attention to URLs that include certain key terms in their query part, such as 'save|', an indication of an attempt to save a file in an unauthorized manner, or various command execution tools and paths like 'powershell', 'cmd.exe', 'cmd /c', 'cmd /r', 'cmd /k', 'cscript', 'wscript', 'python', and even specific paths like 'C:\\Users\\Public\\'. Another critical pattern to watch for is the presence of '%comspec%' within the query, indicating the exploitation of command processor invocation. The detection method hinges on identifying all these patterns simultaneously to ensure a comprehensive approach to identifying potential exploitation attempts. Be mindful that there might be unknown instances resulting in false positives. The severity of such detection is considered high, highlighting the critical nature of preventing or swiftly responding to these exploitation attempts, as they relate to executing unauthorized commands or scripts on the server, thereby compromising its security.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: webserver\ndetection:\n    selection_search:\n        cs-uri-query|contains: '?search=%00{.'\n    selection_payload:\n        cs-uri-query|contains:\n            - 'save|' # Indication of saving a file which shouldn't be tested by vuln scanners\n            - 'powershell'\n            - 'cmd.exe'\n            - 'cmd /c'\n            - 'cmd /r'\n            - 'cmd /k'\n            - 'cscript'\n            - 'wscript'\n            - 'python'\n            - 'C:\\Users\\Public\\'\n            - '%comspec%'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: webserver\ndetection:\n    selection_search:\n        cs-uri-query|contains: '?search=%00{.'\n    selection_payload:\n        cs-uri-query|contains:\n            - 'save|' # Indication of saving a file which shouldn't be tested by vuln scanners\n            - 'powershell'\n            - 'cmd.exe'\n            - 'cmd /c'\n            - 'cmd /r'\n            - 'cmd /k'\n            - 'cscript'\n            - 'wscript'\n            - 'python'\n            - 'C:\\Users\\Public\\'\n            - '%comspec%'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "attempts to exploit a Rejetto HTTP File Server (HFS) via CVE-2014-6287",
      "answer": "In order to detect attempts to exploit a Rejetto HTTP File Server (HFS) via CVE-2014-6287, you should: Monitor webserver logs for specific patterns in the query section of URLs that are indicative of exploitation attempts. Initially, look for queries containing '?search=%00{.' which points toward an attempt to inject malicious code or commands. Additionally, pay attention to URLs that include certain key terms in their query part, such as 'save|', an indication of an attempt to save a file in an unauthorized manner, or various command execution tools and paths like 'powershell', 'cmd.exe', 'cmd /c', 'cmd /r', 'cmd /k', 'cscript', 'wscript', 'python', and even specific paths like 'C:\\Users\\Public\\'. Another critical pattern to watch for is the presence of '%comspec%' within the query, indicating the exploitation of command processor invocation. The detection method hinges on identifying all these patterns simultaneously to ensure a comprehensive approach to identifying potential exploitation attempts. Be mindful that there might be unknown instances resulting in false positives. The severity of such detection is considered high, highlighting the critical nature of preventing or swiftly responding to these exploitation attempts, as they relate to executing unauthorized commands or scripts on the server, thereby compromising its security."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        TargetFilename|contains: '\\Local\\Microsoft\\Windows\\SchCache\\'\n        TargetFilename|endswith: '.sch'\n    filter_eq:\n        Image:\n            - 'C:\\windows\\system32\\svchost.exe'\n            - 'C:\\windows\\system32\\dllhost.exe'\n            - 'C:\\windows\\system32\\mmc.exe'\n            - 'C:\\windows\\system32\\WindowsPowerShell\\v1.0\\powershell.exe'\n            - 'C:\\Windows\\CCM\\CcmExec.exe'\n            - 'C:\\Program Files\\Cylance\\Desktop\\CylanceSvc.exe'\n            - 'C:\\Windows\\System32\\wbem\\WmiPrvSE.exe'\n    filter_begins:\n        Image|startswith:\n            - 'C:\\Windows\\ccmsetup\\autoupgrade\\ccmsetup' # C:\\Windows\\ccmsetup\\autoupgrade\\ccmsetup.TMC00002.40.exe\n            - 'C:\\Program Files\\SentinelOne\\Sentinel Agent' # C:\\Program Files\\SentinelOne\\Sentinel Agent 21.7.7.40005\\SentinelAgent.exe\n    filter_ends:\n        Image|endswith: '\\LANDesk\\LDCLient\\ldapwhoami.exe'\n    filter_domain_controller:\n        Image:\n            - 'C:\\Windows\\system32\\efsui.exe'\n            - 'C:\\Windows\\system32\\dsac.exe'\n    filter_citrix:\n        # Example:\n        #   TargetFilename=C:\\Windows\\ServiceProfiles\\NetworkService\\AppData\\Local\\Microsoft\\Windows\\SchCache\\REDACTED.com.sch\n        Image|endswith: ':\\Program Files\\Citrix\\Receiver StoreFront\\Services\\DefaultDomainServices\\Citrix.DeliveryServices.DomainServices.ServiceHost.exe'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Other legimate tools, which do ADSI (LDAP) operations, e.g. any remoting activity by MMC, Powershell, Windows etc.\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect usage of ADSI (LDAP) operations by tools. This may also detect tools like LDAPFragger.\n\nHere is how  the given sigma rule operates: In order to detect the usage of ADSI (LDAP) operations by tools, which may also detect tools like LDAPFragger, you should focus on monitoring Windows file events, specifically targeting modifications or accesses on files within the '\\Local\\Microsoft\\Windows\\SchCache\\' directory or files ending with '.sch'. However, it's crucial to exclude events originated from known system processes such as 'svchost.exe', 'dllhost.exe', 'mmc.exe', 'powershell.exe', several security and management services like 'CylanceSvc.exe', 'WmiPrvSE.exe', 'CcmExec.exe', as well as processes part of auto-upgrade tasks or initiated by specific security agents like 'ccmsetup' from SCCM and SentinelOne agent executables. Also, exclude files executed from domain controller-specific paths like 'efsui.exe' and 'dsac.exe', and Citrix services which are legitimate in their context. The rule emphasizes the importance of fine-tuning to avoid false positives from legitimate administrative or system activities which might involve ADSI or LDAP queries. The level of alert is set to high due to the sensitivity of LDAP operations, which could indicate an attempt to query or manipulate directory services in a potentially unauthorized manner.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        TargetFilename|contains: '\\Local\\Microsoft\\Windows\\SchCache\\'\n        TargetFilename|endswith: '.sch'\n    filter_eq:\n        Image:\n            - 'C:\\windows\\system32\\svchost.exe'\n            - 'C:\\windows\\system32\\dllhost.exe'\n            - 'C:\\windows\\system32\\mmc.exe'\n            - 'C:\\windows\\system32\\WindowsPowerShell\\v1.0\\powershell.exe'\n            - 'C:\\Windows\\CCM\\CcmExec.exe'\n            - 'C:\\Program Files\\Cylance\\Desktop\\CylanceSvc.exe'\n            - 'C:\\Windows\\System32\\wbem\\WmiPrvSE.exe'\n    filter_begins:\n        Image|startswith:\n            - 'C:\\Windows\\ccmsetup\\autoupgrade\\ccmsetup' # C:\\Windows\\ccmsetup\\autoupgrade\\ccmsetup.TMC00002.40.exe\n            - 'C:\\Program Files\\SentinelOne\\Sentinel Agent' # C:\\Program Files\\SentinelOne\\Sentinel Agent 21.7.7.40005\\SentinelAgent.exe\n    filter_ends:\n        Image|endswith: '\\LANDesk\\LDCLient\\ldapwhoami.exe'\n    filter_domain_controller:\n        Image:\n            - 'C:\\Windows\\system32\\efsui.exe'\n            - 'C:\\Windows\\system32\\dsac.exe'\n    filter_citrix:\n        # Example:\n        #   TargetFilename=C:\\Windows\\ServiceProfiles\\NetworkService\\AppData\\Local\\Microsoft\\Windows\\SchCache\\REDACTED.com.sch\n        Image|endswith: ':\\Program Files\\Citrix\\Receiver StoreFront\\Services\\DefaultDomainServices\\Citrix.DeliveryServices.DomainServices.ServiceHost.exe'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Other legimate tools, which do ADSI (LDAP) operations, e.g. any remoting activity by MMC, Powershell, Windows etc.\nlevel: high\n",
      "question": "usage of ADSI (LDAP) operations by tools. This may also detect tools like LDAPFragger.",
      "answer": "In order to detect the usage of ADSI (LDAP) operations by tools, which may also detect tools like LDAPFragger, you should focus on monitoring Windows file events, specifically targeting modifications or accesses on files within the '\\Local\\Microsoft\\Windows\\SchCache\\' directory or files ending with '.sch'. However, it's crucial to exclude events originated from known system processes such as 'svchost.exe', 'dllhost.exe', 'mmc.exe', 'powershell.exe', several security and management services like 'CylanceSvc.exe', 'WmiPrvSE.exe', 'CcmExec.exe', as well as processes part of auto-upgrade tasks or initiated by specific security agents like 'ccmsetup' from SCCM and SentinelOne agent executables. Also, exclude files executed from domain controller-specific paths like 'efsui.exe' and 'dsac.exe', and Citrix services which are legitimate in their context. The rule emphasizes the importance of fine-tuning to avoid false positives from legitimate administrative or system activities which might involve ADSI or LDAP queries. The level of alert is set to high due to the sensitivity of LDAP operations, which could indicate an attempt to query or manipulate directory services in a potentially unauthorized manner."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious execution from ManageEngine as seen used by Mint Sandstorm.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious execution from ManageEngine as seen used by Mint Sandstorm, you should:\n\nFocus on the creation of processes within Windows operating systems, specifically monitoring the parent processes for instances of ManageEngine applications or the use of Java. You should be vigilant for child processes that involve PowerShell (either powershell.exe or powershell_ise.exe). Additionally, pay attention to PowerShell command lines that include specific keywords indicating potentially malicious activities, such as commands for dumping credentials, manipulating local group memberships, downloading files, executing web requests, handling encoded commands, and various other suspicious activities.\n\nAlso, monitor for the use of command-line tools targeting the Local Security Authority Subsystem Service (LSASS), including use cases that might involve dumping process memory or querying system information, commands initiating external network connections via tools like `wget` or `curl`, and the manipulation of user groups and system configurations through command-line interfaces. This includes adding users to local administrator groups, making unauthorized network configurations, disabling anti-spyware features, deleting shadow copies, and other actions that could undermine system integrity and security.\n\nPay extra attention to commands attempting to modify critical system settings through the Registry Editor, use of WMIC for process creation or deletion, and the utilization of utilities designed for backup management or shadow copy deletion, indicating an attempt to hamper system recovery.\n\nBe wary of false positive indicators and ensure that legitimate administrative activities, especially those involving ManageEngine sites or downloading Microsoft components, are not incorrectly flagged. The detection thresholds outlined are critical due to the potential impact and sophistication of the tactics involved.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_parent_path:\n        ParentImage|contains:\n            - 'manageengine'\n            - 'ServiceDesk'\n    selection_parent_image:\n        ParentImage|contains: '\\java'\n    selection_special_child_powershell_img:\n        Image|endswith:\n            - '\\powershell.exe'\n            - '\\powershell_ise.exe'\n    selection_special_child_powershell_cli:\n        - CommandLine|contains:\n            - ' echo '\n            - '-dumpmode'\n            - '-ssh'\n            - '.dmp'\n            - 'add-MpPreference'\n            - 'adscredentials'\n            - 'bitsadmin'\n            - 'certutil'\n            - 'csvhost.exe'\n            - 'DownloadFile'\n            - 'DownloadString'\n            - 'dsquery'\n            - 'ekern.exe'\n            - 'FromBase64String'\n            - 'iex '\n            - 'iex('\n            - 'Invoke-Expression'\n            - 'Invoke-WebRequest'\n            - 'localgroup administrators'\n            - 'net group'\n            - 'net user'\n            - 'o365accountconfiguration'\n            - 'query session'\n            - 'samaccountname='\n            - 'set-MpPreference'\n            - 'svhost.exe'\n            - 'System.IO.Compression'\n            - 'System.IO.MemoryStream'\n            - 'usoprivate'\n            - 'usoshared'\n            - 'whoami'\n        - CommandLine|re: '[-/\u2013][Ee^]{1,2}[ncodema^]*\\s[A-Za-z0-9+/=]{15,}'\n    selection_special_child_lsass_1:\n        CommandLine|contains: 'lsass'\n    selection_special_child_lsass_2:\n        CommandLine|contains:\n            - 'procdump'\n            - 'tasklist'\n            - 'findstr'\n    selection_child_wget:\n        Image|endswith: '\\wget.exe'\n        CommandLine|contains: 'http'\n    selection_child_curl:\n        Image|endswith: '\\curl.exe'\n        CommandLine|contains: 'http'\n    selection_child_script:\n        CommandLine|contains:\n            - 'E:jscript'\n            - 'e:vbscript'\n    selection_child_localgroup:\n        CommandLine|contains|all:\n            - 'localgroup Administrators'\n            - '/add'\n    selection_child_net:\n        CommandLine|contains: 'net' # Covers net1\n        CommandLine|contains|all:\n            - 'user'\n            - '/add'\n    selection_child_reg:\n        - CommandLine|contains|all:\n            - 'reg add'\n            - 'DisableAntiSpyware'\n            - '\\Microsoft\\Windows Defender'\n        - CommandLine|contains|all:\n            - 'reg add'\n            - 'DisableRestrictedAdmin'\n            - 'CurrentControlSet\\Control\\Lsa'\n    selection_child_wmic_1:\n        CommandLine|contains|all:\n            - 'wmic'\n            - 'process call create'\n    selection_child_wmic_2:\n        CommandLine|contains|all:\n            - 'wmic'\n            - 'delete'\n            - 'shadowcopy'\n    selection_child_vssadmin:\n        CommandLine|contains|all:\n            - 'vssadmin'\n            - 'delete'\n            - 'shadows'\n    selection_child_wbadmin:\n        CommandLine|contains|all:\n            - 'wbadmin'\n            - 'delete'\n            - 'catalog'\n    filter_main:\n        CommandLine|contains|all:\n            - 'download.microsoft.com'\n            - 'manageengine.com'\n            - 'msiexec'\n    condition: all of selection_parent_* and (all of selection_special_child_powershell_* or all of selection_special_child_lsass_* or 1 of selection_child_*) and not filter_main\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_parent_path:\n        ParentImage|contains:\n            - 'manageengine'\n            - 'ServiceDesk'\n    selection_parent_image:\n        ParentImage|contains: '\\java'\n    selection_special_child_powershell_img:\n        Image|endswith:\n            - '\\powershell.exe'\n            - '\\powershell_ise.exe'\n    selection_special_child_powershell_cli:\n        - CommandLine|contains:\n            - ' echo '\n            - '-dumpmode'\n            - '-ssh'\n            - '.dmp'\n            - 'add-MpPreference'\n            - 'adscredentials'\n            - 'bitsadmin'\n            - 'certutil'\n            - 'csvhost.exe'\n            - 'DownloadFile'\n            - 'DownloadString'\n            - 'dsquery'\n            - 'ekern.exe'\n            - 'FromBase64String'\n            - 'iex '\n            - 'iex('\n            - 'Invoke-Expression'\n            - 'Invoke-WebRequest'\n            - 'localgroup administrators'\n            - 'net group'\n            - 'net user'\n            - 'o365accountconfiguration'\n            - 'query session'\n            - 'samaccountname='\n            - 'set-MpPreference'\n            - 'svhost.exe'\n            - 'System.IO.Compression'\n            - 'System.IO.MemoryStream'\n            - 'usoprivate'\n            - 'usoshared'\n            - 'whoami'\n        - CommandLine|re: '[-/\u2013][Ee^]{1,2}[ncodema^]*\\s[A-Za-z0-9+/=]{15,}'\n    selection_special_child_lsass_1:\n        CommandLine|contains: 'lsass'\n    selection_special_child_lsass_2:\n        CommandLine|contains:\n            - 'procdump'\n            - 'tasklist'\n            - 'findstr'\n    selection_child_wget:\n        Image|endswith: '\\wget.exe'\n        CommandLine|contains: 'http'\n    selection_child_curl:\n        Image|endswith: '\\curl.exe'\n        CommandLine|contains: 'http'\n    selection_child_script:\n        CommandLine|contains:\n            - 'E:jscript'\n            - 'e:vbscript'\n    selection_child_localgroup:\n        CommandLine|contains|all:\n            - 'localgroup Administrators'\n            - '/add'\n    selection_child_net:\n        CommandLine|contains: 'net' # Covers net1\n        CommandLine|contains|all:\n            - 'user'\n            - '/add'\n    selection_child_reg:\n        - CommandLine|contains|all:\n            - 'reg add'\n            - 'DisableAntiSpyware'\n            - '\\Microsoft\\Windows Defender'\n        - CommandLine|contains|all:\n            - 'reg add'\n            - 'DisableRestrictedAdmin'\n            - 'CurrentControlSet\\Control\\Lsa'\n    selection_child_wmic_1:\n        CommandLine|contains|all:\n            - 'wmic'\n            - 'process call create'\n    selection_child_wmic_2:\n        CommandLine|contains|all:\n            - 'wmic'\n            - 'delete'\n            - 'shadowcopy'\n    selection_child_vssadmin:\n        CommandLine|contains|all:\n            - 'vssadmin'\n            - 'delete'\n            - 'shadows'\n    selection_child_wbadmin:\n        CommandLine|contains|all:\n            - 'wbadmin'\n            - 'delete'\n            - 'catalog'\n    filter_main:\n        CommandLine|contains|all:\n            - 'download.microsoft.com'\n            - 'manageengine.com'\n            - 'msiexec'\n    condition: all of selection_parent_* and (all of selection_special_child_powershell_* or all of selection_special_child_lsass_* or 1 of selection_child_*) and not filter_main\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
      "question": "suspicious execution from ManageEngine as seen used by Mint Sandstorm",
      "answer": "In order to detect suspicious execution from ManageEngine as seen used by Mint Sandstorm, you should:\n\nFocus on the creation of processes within Windows operating systems, specifically monitoring the parent processes for instances of ManageEngine applications or the use of Java. You should be vigilant for child processes that involve PowerShell (either powershell.exe or powershell_ise.exe). Additionally, pay attention to PowerShell command lines that include specific keywords indicating potentially malicious activities, such as commands for dumping credentials, manipulating local group memberships, downloading files, executing web requests, handling encoded commands, and various other suspicious activities.\n\nAlso, monitor for the use of command-line tools targeting the Local Security Authority Subsystem Service (LSASS), including use cases that might involve dumping process memory or querying system information, commands initiating external network connections via tools like `wget` or `curl`, and the manipulation of user groups and system configurations through command-line interfaces. This includes adding users to local administrator groups, making unauthorized network configurations, disabling anti-spyware features, deleting shadow copies, and other actions that could undermine system integrity and security.\n\nPay extra attention to commands attempting to modify critical system settings through the Registry Editor, use of WMIC for process creation or deletion, and the utilization of utilities designed for backup management or shadow copy deletion, indicating an attempt to hamper system recovery.\n\nBe wary of false positive indicators and ensure that legitimate administrative activities, especially those involving ManageEngine sites or downloading Microsoft components, are not incorrectly flagged. The detection thresholds outlined are critical due to the potential impact and sophistication of the tactics involved."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting failed sign-in from a PAW or SAW device.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect failed sign-in from a PAW or SAW device, you should: monitor Azure sign-in logs for specific activities that may signal unauthorized or suspicious behavior. This involves tracking messages related to the addition of members to roles which has been completed (indicative of Privileged Identity Management activations). It is crucial to discern between legitimate and potentially harmful activities by correlating the location of the sign-in attempt with a list of countries you operate out of. Any sign-in attempt originating from IP addresses not pre-approved, using unapproved devices, or from devices that are not compliant with your security policies should be flagged. Pay attention to both successful and failure status entries, as both can provide valuable insights into potential security breaches or attempts. Be aware that not using a Privileged Access Workstation (PAW) or Secure Access Workstation (SAW) in your environment might lead to false positives. Such meticulous monitoring is regarded with a high level of importance due to the potential security implications it carries.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: azure\n    service: signinlogs\ndetection:\n    # You have to tune the rule for your environment before use it\n    selection:\n        properties.message|contains: Add memmber to role completed (PIM aciviation)\n        # Countries you DO operate out of e,g GB, use list for mulitple\n        Location: '%LegitCountries%'\n        IPaddress: '%UnApprovedIp%'\n        # unapproved browser, operating system\n        DeviceInfo: '%UnApprovedDevice%'\n        DeviceDetail.isCompliant: 'false'\n        Status:\n            - Sucess\n            - failure\n    condition: selection\nfalsepositives:\n     - Not using a PAW/SAW in the environment\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: azure\n    service: signinlogs\ndetection:\n    # You have to tune the rule for your environment before use it\n    selection:\n        properties.message|contains: Add memmber to role completed (PIM aciviation)\n        # Countries you DO operate out of e,g GB, use list for mulitple\n        Location: '%LegitCountries%'\n        IPaddress: '%UnApprovedIp%'\n        # unapproved browser, operating system\n        DeviceInfo: '%UnApprovedDevice%'\n        DeviceDetail.isCompliant: 'false'\n        Status:\n            - Sucess\n            - failure\n    condition: selection\nfalsepositives:\n     - Not using a PAW/SAW in the environment\nlevel: high\n",
      "question": "failed sign-in from a PAW or SAW device",
      "answer": "In order to detect failed sign-in from a PAW or SAW device, you should: monitor Azure sign-in logs for specific activities that may signal unauthorized or suspicious behavior. This involves tracking messages related to the addition of members to roles which has been completed (indicative of Privileged Identity Management activations). It is crucial to discern between legitimate and potentially harmful activities by correlating the location of the sign-in attempt with a list of countries you operate out of. Any sign-in attempt originating from IP addresses not pre-approved, using unapproved devices, or from devices that are not compliant with your security policies should be flagged. Pay attention to both successful and failure status entries, as both can provide valuable insights into potential security breaches or attempts. Be aware that not using a Privileged Access Workstation (PAW) or Secure Access Workstation (SAW) in your environment might lead to false positives. Such meticulous monitoring is regarded with a high level of importance due to the potential security implications it carries."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    product: windows\n    category: create_stream_hash\ndetection:\n    selection:\n        Contents|startswith: '[ZoneTransfer]  ZoneId=3'\n        TargetFilename|endswith: ':Zone.Identifier'\n        TargetFilename|contains:\n            - '.exe'\n            - '.scr'\n            - '.bat'\n            - '.cmd'\n            - '.docx'\n            - '.hta'\n            - '.jse'\n            - '.lnk'\n            - '.pptx'\n            - '.ps'\n            - '.reg'\n            - '.sct'\n            - '.vb'\n            - '.wsc'\n            - '.wsf'\n            - '.xlsx'\n    filter_optional_brave:\n        Image|endswith: '\\brave.exe'\n    filter_optional_chrome:\n        Image:\n            - 'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe'\n            - 'C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe'\n    filter_optional_firefox:\n        Image:\n            - 'C:\\Program Files\\Mozilla Firefox\\firefox.exe'\n            - 'C:\\Program Files (x86)\\Mozilla Firefox\\firefox.exe'\n    filter_optional_ie:\n        Image:\n            - 'C:\\Program Files (x86)\\Internet Explorer\\iexplore.exe'\n            - 'C:\\Program Files\\Internet Explorer\\iexplore.exe'\n    filter_optional_maxthon:\n        Image|endswith: '\\maxthon.exe'\n    filter_optional_edge_1:\n        - Image|startswith: 'C:\\Program Files (x86)\\Microsoft\\EdgeWebView\\Application\\'\n        - Image|endswith: '\\WindowsApps\\MicrosoftEdge.exe'\n        - Image:\n            - 'C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe'\n            - 'C:\\Program Files\\Microsoft\\Edge\\Application\\msedge.exe'\n    filter_optional_edge_2:\n        Image|startswith:\n            - 'C:\\Program Files (x86)\\Microsoft\\EdgeCore\\'\n            - 'C:\\Program Files\\Microsoft\\EdgeCore\\'\n        Image|endswith:\n            - '\\msedge.exe'\n            - '\\msedgewebview2.exe'\n    filter_optional_opera:\n        Image|endswith: '\\opera.exe'\n    filter_optional_safari:\n        Image|endswith: '\\safari.exe'\n    filter_optional_seamonkey:\n        Image|endswith: '\\seamonkey.exe'\n    filter_optional_vivaldi:\n        Image|endswith: '\\vivaldi.exe'\n    filter_optional_whale:\n        Image|endswith: '\\whale.exe'\n    filter_optional_snipping_tool:\n        Image|startswith: 'C:\\Program Files\\WindowsApps\\Microsoft.ScreenSketch_'\n        Image|endswith: '\\SnippingTool\\SnippingTool.exe'\n        TargetFilename|startswith: 'C:\\Users\\'\n        TargetFilename|contains|all:\n            - '\\AppData\\Local\\Packages\\Microsoft.ScreenSketch_'\n            - '\\TempState\\Screenshot '\n        TargetFilename|endswith: '.png:Zone.Identifier'\n    condition: selection and not 1 of filter_optional_*\nfalsepositives:\n    - Other legitimate browsers not currently included in the filter (please add them)\n    - Legitimate downloads via scripting or command-line tools (Investigate to determine if it's legitimate)\nlevel: medium\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect creation of a suspicious ADS (Alternate Data Stream) file by software other than browsers\n\nHere is how  the given sigma rule operates: In order to detect the creation of a suspicious ADS (Alternate Data Stream) file by software other than browsers, you should monitor Windows systems for file creations where the content indicates a download from the Internet (marked by '[ZoneTransfer]  ZoneId=3'), specifically targeting files with certain extensions like '.exe', '.scr', '.bat', '.cmd', '.docx', '.hta', '.jse', '.lnk', '.pptx', '.ps', '.reg', '.sct', '.vb', '.wsc', '.wsf', '.xlsx'. These files should also have a ':Zone.Identifier' indicating they've been marked by Windows as coming from the Internet, which can indicate potential risk if such files are executed or opened. The detection focuses on such file creations that were not initiated by well-known browsers (like Chrome, Firefox, Internet Explorer, Edge, and others) or specific known applications like the Snipping Tool. This is done by excluding the creation of these suspicious files when they're associated with the binary paths of these trusted apps, acknowledging that legitimate software might also download files from the Internet but with less associated risk. Additionally, any download activity from browsers not included in the detection's exclusion list or legitimate downloads via scripting or command-line tools that match these criteria should be investigated to determine their legitimacy. This approach is aimed at identifying potential malicious activities involving Alternate Data Streams to evade detection or persist on a system while minimizing the risk of flagging legitimate browser downloads as suspicious.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: create_stream_hash\ndetection:\n    selection:\n        Contents|startswith: '[ZoneTransfer]  ZoneId=3'\n        TargetFilename|endswith: ':Zone.Identifier'\n        TargetFilename|contains:\n            - '.exe'\n            - '.scr'\n            - '.bat'\n            - '.cmd'\n            - '.docx'\n            - '.hta'\n            - '.jse'\n            - '.lnk'\n            - '.pptx'\n            - '.ps'\n            - '.reg'\n            - '.sct'\n            - '.vb'\n            - '.wsc'\n            - '.wsf'\n            - '.xlsx'\n    filter_optional_brave:\n        Image|endswith: '\\brave.exe'\n    filter_optional_chrome:\n        Image:\n            - 'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe'\n            - 'C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe'\n    filter_optional_firefox:\n        Image:\n            - 'C:\\Program Files\\Mozilla Firefox\\firefox.exe'\n            - 'C:\\Program Files (x86)\\Mozilla Firefox\\firefox.exe'\n    filter_optional_ie:\n        Image:\n            - 'C:\\Program Files (x86)\\Internet Explorer\\iexplore.exe'\n            - 'C:\\Program Files\\Internet Explorer\\iexplore.exe'\n    filter_optional_maxthon:\n        Image|endswith: '\\maxthon.exe'\n    filter_optional_edge_1:\n        - Image|startswith: 'C:\\Program Files (x86)\\Microsoft\\EdgeWebView\\Application\\'\n        - Image|endswith: '\\WindowsApps\\MicrosoftEdge.exe'\n        - Image:\n            - 'C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe'\n            - 'C:\\Program Files\\Microsoft\\Edge\\Application\\msedge.exe'\n    filter_optional_edge_2:\n        Image|startswith:\n            - 'C:\\Program Files (x86)\\Microsoft\\EdgeCore\\'\n            - 'C:\\Program Files\\Microsoft\\EdgeCore\\'\n        Image|endswith:\n            - '\\msedge.exe'\n            - '\\msedgewebview2.exe'\n    filter_optional_opera:\n        Image|endswith: '\\opera.exe'\n    filter_optional_safari:\n        Image|endswith: '\\safari.exe'\n    filter_optional_seamonkey:\n        Image|endswith: '\\seamonkey.exe'\n    filter_optional_vivaldi:\n        Image|endswith: '\\vivaldi.exe'\n    filter_optional_whale:\n        Image|endswith: '\\whale.exe'\n    filter_optional_snipping_tool:\n        Image|startswith: 'C:\\Program Files\\WindowsApps\\Microsoft.ScreenSketch_'\n        Image|endswith: '\\SnippingTool\\SnippingTool.exe'\n        TargetFilename|startswith: 'C:\\Users\\'\n        TargetFilename|contains|all:\n            - '\\AppData\\Local\\Packages\\Microsoft.ScreenSketch_'\n            - '\\TempState\\Screenshot '\n        TargetFilename|endswith: '.png:Zone.Identifier'\n    condition: selection and not 1 of filter_optional_*\nfalsepositives:\n    - Other legitimate browsers not currently included in the filter (please add them)\n    - Legitimate downloads via scripting or command-line tools (Investigate to determine if it's legitimate)\nlevel: medium\n",
      "question": "creation of a suspicious ADS (Alternate Data Stream) file by software other than browsers",
      "answer": "In order to detect the creation of a suspicious ADS (Alternate Data Stream) file by software other than browsers, you should monitor Windows systems for file creations where the content indicates a download from the Internet (marked by '[ZoneTransfer]  ZoneId=3'), specifically targeting files with certain extensions like '.exe', '.scr', '.bat', '.cmd', '.docx', '.hta', '.jse', '.lnk', '.pptx', '.ps', '.reg', '.sct', '.vb', '.wsc', '.wsf', '.xlsx'. These files should also have a ':Zone.Identifier' indicating they've been marked by Windows as coming from the Internet, which can indicate potential risk if such files are executed or opened. The detection focuses on such file creations that were not initiated by well-known browsers (like Chrome, Firefox, Internet Explorer, Edge, and others) or specific known applications like the Snipping Tool. This is done by excluding the creation of these suspicious files when they're associated with the binary paths of these trusted apps, acknowledging that legitimate software might also download files from the Internet but with less associated risk. Additionally, any download activity from browsers not included in the detection's exclusion list or legitimate downloads via scripting or command-line tools that match these criteria should be investigated to determine their legitimacy. This approach is aimed at identifying potential malicious activities involving Alternate Data Streams to evade detection or persist on a system while minimizing the risk of flagging legitimate browser downloads as suspicious."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_sc:\n        Image|endswith: '\\sc.exe'\n        CommandLine|contains|all:\n            - 'create'\n            - 'binPath'\n    selection_posh:\n        CommandLine|contains|all:\n            - 'New-Service'\n            - '-BinaryPathName'\n    condition: 1 of selection*\nfalsepositives:\n    - Legitimate administrator or user creates a service for legitimate reasons.\nlevel: low\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect creation of a new service.\n\nHere is how  the given sigma rule operates: In order to detect the creation of a new service, you should monitor Windows process creation logs for specific patterns that indicate such activity. Look for instances where the process image ends with '\\sc.exe' combined with command lines that include both 'create' and 'binPath'. Additionally, pay attention to the use of PowerShell commands containing 'New-Service' together with '-BinaryPathName'. This monitoring helps in identifying potentially unauthorized service creation, which could be indicative of malicious activity. However, be aware that there might be false positives, such as legitimate service creation by administrators or users for non-malicious purposes. Given these considerations, the detection level for such activities is categorized as low.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_sc:\n        Image|endswith: '\\sc.exe'\n        CommandLine|contains|all:\n            - 'create'\n            - 'binPath'\n    selection_posh:\n        CommandLine|contains|all:\n            - 'New-Service'\n            - '-BinaryPathName'\n    condition: 1 of selection*\nfalsepositives:\n    - Legitimate administrator or user creates a service for legitimate reasons.\nlevel: low\n",
      "question": "creation of a new service.",
      "answer": "In order to detect the creation of a new service, you should monitor Windows process creation logs for specific patterns that indicate such activity. Look for instances where the process image ends with '\\sc.exe' combined with command lines that include both 'create' and 'binPath'. Additionally, pay attention to the use of PowerShell commands containing 'New-Service' together with '-BinaryPathName'. This monitoring helps in identifying potentially unauthorized service creation, which could be indicative of malicious activity. However, be aware that there might be false positives, such as legitimate service creation by administrators or users for non-malicious purposes. Given these considerations, the detection level for such activities is categorized as low."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting outlvba (Microsoft VBA for Outlook Addin) DLL being loaded by the outlook process.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect outlvba (Microsoft VBA for Outlook Addin) DLL being loaded by the outlook process, you should: Monitor the event logs for instances where the Outlook application is observed loading the 'outlvba.dll' file. Focus on the image load logs within a Windows environment. Specifically, look for events where the image name ends with 'outlook.exe' indicating the Outlook application, and the loaded image (or DLL) name starts with 'outlvba.dll', which signifies the loading of the Microsoft VBA for Outlook Addin DLL. Be mindful of legitimate macro usages that may cause similar activities and adjust your monitoring filters accordingly. This activity is significant and flagged with a high level of attention due to its potential implication in suspicious behaviors or security concerns.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\outlook.exe'\n        ImageLoaded|startswith: '\\outlvba.dll'\n    condition: selection\nfalsepositives:\n    - Legitimate macro usage. Add the appropriate filter according to your environment\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\outlook.exe'\n        ImageLoaded|startswith: '\\outlvba.dll'\n    condition: selection\nfalsepositives:\n    - Legitimate macro usage. Add the appropriate filter according to your environment\nlevel: high\n",
      "question": "outlvba (Microsoft VBA for Outlook Addin) DLL being loaded by the outlook process",
      "answer": "In order to detect outlvba (Microsoft VBA for Outlook Addin) DLL being loaded by the outlook process, you should: Monitor the event logs for instances where the Outlook application is observed loading the 'outlvba.dll' file. Focus on the image load logs within a Windows environment. Specifically, look for events where the image name ends with 'outlook.exe' indicating the Outlook application, and the loaded image (or DLL) name starts with 'outlvba.dll', which signifies the loading of the Microsoft VBA for Outlook Addin DLL. Be mindful of legitimate macro usages that may cause similar activities and adjust your monitoring filters accordingly. This activity is significant and flagged with a high level of attention due to its potential implication in suspicious behaviors or security concerns."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious UltraVNC command line flag combination that indicate a auto reconnect upon execution, e.g. startup (as seen being used by Gamaredon threat group).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious UltraVNC command line flag combination that indicate a auto reconnect upon execution, e.g. startup (as seen being used by Gamaredon threat group), you should: Monitor for the creation of processes on Windows systems, specifically looking for command line arguments that include all of the following flags: '-autoreconnect ', '-connect ', and '-id:'. This combination of flags is unusual and suggests that an UltraVNC viewer is being configured to automatically reconnect and thus maintain persistent access to a remote system, a technique observed in activities of threat groups such as Gamaredon. Given the rare and specific nature of this flag combination under typical usage scenarios, the detection is rated with a high level of confidence, although it's advised to be aware of potential unknown false positives that could emerge in unique environments.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - '-autoreconnect '\n            - '-connect '\n            - '-id:'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - '-autoreconnect '\n            - '-connect '\n            - '-id:'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "suspicious UltraVNC command line flag combination that indicate a auto reconnect upon execution, e.g. startup (as seen being used by Gamaredon threat group)",
      "answer": "In order to detect suspicious UltraVNC command line flag combination that indicate a auto reconnect upon execution, e.g. startup (as seen being used by Gamaredon threat group), you should: Monitor for the creation of processes on Windows systems, specifically looking for command line arguments that include all of the following flags: '-autoreconnect ', '-connect ', and '-id:'. This combination of flags is unusual and suggests that an UltraVNC viewer is being configured to automatically reconnect and thus maintain persistent access to a remote system, a technique observed in activities of threat groups such as Gamaredon. Given the rare and specific nature of this flag combination under typical usage scenarios, the detection is rated with a high level of confidence, although it's advised to be aware of potential unknown false positives that could emerge in unique environments."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    product: windows\n    service: security\n    definition: 'Requirements: Audit Policy : System > Audit Security State Change, Group Policy : Computer Configuration\\Windows Settings\\Security Settings\\Advanced Audit Policy Configuration\\Audit Policies\\System\\Audit Security State Change'\ndetection:\n    selection:\n        EventID: 4616\n    filter1:\n        ProcessName:\n            - 'C:\\Program Files\\VMware\\VMware Tools\\vmtoolsd.exe'\n            - 'C:\\Windows\\System32\\VBoxService.exe'\n            - 'C:\\Windows\\System32\\oobe\\msoobe.exe'\n    filter2:\n        ProcessName: 'C:\\Windows\\System32\\svchost.exe'\n        SubjectUserSid: 'S-1-5-19'\n    condition: selection and not 1 of filter*\nfalsepositives:\n    - HyperV or other virtualization technologies with binary not listed in filter portion of detection\nlevel: low\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect Detect scenarios where a potentially unauthorized application or user is modifying the system time.\n\nHere is how  the given sigma rule operates: In order to detect scenarios where a potentially unauthorized application or user is modifying the system time, you should monitor security event logs in Windows systems. Specifically, keep an eye out for events with the ID 4616, which indicates that the system time was changed. This monitoring should be supported by setting up Audit Policies to track Security State Changes.\n\nIt is crucial to exclude certain processes that are known to legitimately change the system time as part of their normal operation. These processes include `C:\\Program Files\\VMware\\VMware Tools\\vmtoolsd.exe`, `C:\\Windows\\System32\\VBoxService.exe`, and `C:\\Windows\\System32\\oobe\\msoobe.exe`. Additionally, you should consider `C:\\Windows\\System32\\svchost.exe` running under the `SubjectUserSid` `S-1-5-19` as benign in this context. The exclusion of these processes helps reduce false positives, which might otherwise flag legitimate virtualization technology operations as suspicious.\n\nHowever, it is worth noting that there could be instances where virtualization technologies or similar applications not listed might also change the system time without posing a security threat. Therefore, while monitoring for unauthorized time changes, it's important to adjust the alerting mechanisms to account for such potential false positives.\n\nBy focusing on these criteria, you can more accurately identify unauthorized or potentially malicious modifications to the system time, which is an important aspect of maintaining security posture, given that attackers often manipulate system time to evade detection or to facilitate other malicious activities.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\n    definition: 'Requirements: Audit Policy : System > Audit Security State Change, Group Policy : Computer Configuration\\Windows Settings\\Security Settings\\Advanced Audit Policy Configuration\\Audit Policies\\System\\Audit Security State Change'\ndetection:\n    selection:\n        EventID: 4616\n    filter1:\n        ProcessName:\n            - 'C:\\Program Files\\VMware\\VMware Tools\\vmtoolsd.exe'\n            - 'C:\\Windows\\System32\\VBoxService.exe'\n            - 'C:\\Windows\\System32\\oobe\\msoobe.exe'\n    filter2:\n        ProcessName: 'C:\\Windows\\System32\\svchost.exe'\n        SubjectUserSid: 'S-1-5-19'\n    condition: selection and not 1 of filter*\nfalsepositives:\n    - HyperV or other virtualization technologies with binary not listed in filter portion of detection\nlevel: low\n",
      "question": "Detect scenarios where a potentially unauthorized application or user is modifying the system time.",
      "answer": "In order to detect scenarios where a potentially unauthorized application or user is modifying the system time, you should monitor security event logs in Windows systems. Specifically, keep an eye out for events with the ID 4616, which indicates that the system time was changed. This monitoring should be supported by setting up Audit Policies to track Security State Changes.\n\nIt is crucial to exclude certain processes that are known to legitimately change the system time as part of their normal operation. These processes include `C:\\Program Files\\VMware\\VMware Tools\\vmtoolsd.exe`, `C:\\Windows\\System32\\VBoxService.exe`, and `C:\\Windows\\System32\\oobe\\msoobe.exe`. Additionally, you should consider `C:\\Windows\\System32\\svchost.exe` running under the `SubjectUserSid` `S-1-5-19` as benign in this context. The exclusion of these processes helps reduce false positives, which might otherwise flag legitimate virtualization technology operations as suspicious.\n\nHowever, it is worth noting that there could be instances where virtualization technologies or similar applications not listed might also change the system time without posing a security threat. Therefore, while monitoring for unauthorized time changes, it's important to adjust the alerting mechanisms to account for such potential false positives.\n\nBy focusing on these criteria, you can more accurately identify unauthorized or potentially malicious modifications to the system time, which is an important aspect of maintaining security posture, given that attackers often manipulate system time to evade detection or to facilitate other malicious activities."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting use of the PowerShell \"Set-Service\" cmdlet to change the startup type of a service to \"disabled\" or \"manual\".\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the use of the PowerShell \"Set-Service\" cmdlet to change the startup type of a service to \"disabled\" or \"manual\", you should: Monitor process creation logs on Windows systems for the execution of 'powershell.exe' or any process where the original filename is 'PowerShell.EXE'. Specifically, look for command lines that contain both 'Set-Service' and '-StartupType', indicating an attempt to modify service startup settings. Additionally, pay attention to command lines that include either 'Disabled' or 'Manual', signifying the desired state for the service's startup type. Be aware that this activity, while suspicious, may have legitimate use in troubleshooting scripts, leading to potential false positives. This monitoring is tagged with tactics and techniques that include Execution, Persistence, and Privilege Escalation, among others, due to the nature of the modification of service startup settings.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\powershell.exe'\n        - OriginalFileName: 'PowerShell.EXE'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'Set-Service'\n            - '-StartupType'\n        CommandLine|contains:\n            - 'Disabled'\n            - 'Manual'\n    condition: all of selection_*\nfalsepositives:\n    - False positives may occur with troubleshooting scripts\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\powershell.exe'\n        - OriginalFileName: 'PowerShell.EXE'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'Set-Service'\n            - '-StartupType'\n        CommandLine|contains:\n            - 'Disabled'\n            - 'Manual'\n    condition: all of selection_*\nfalsepositives:\n    - False positives may occur with troubleshooting scripts\nlevel: medium\n",
      "question": "use of the PowerShell \"Set-Service\" cmdlet to change the startup type of a service to \"disabled\" or \"manual\"",
      "answer": "In order to detect the use of the PowerShell \"Set-Service\" cmdlet to change the startup type of a service to \"disabled\" or \"manual\", you should: Monitor process creation logs on Windows systems for the execution of 'powershell.exe' or any process where the original filename is 'PowerShell.EXE'. Specifically, look for command lines that contain both 'Set-Service' and '-StartupType', indicating an attempt to modify service startup settings. Additionally, pay attention to command lines that include either 'Disabled' or 'Manual', signifying the desired state for the service's startup type. Be aware that this activity, while suspicious, may have legitimate use in troubleshooting scripts, leading to potential false positives. This monitoring is tagged with tactics and techniques that include Execution, Persistence, and Privilege Escalation, among others, due to the nature of the modification of service startup settings."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting use of a scanner by zerosum0x0 that discovers targets vulnerable to  CVE-2019-0708 RDP RCE aka BlueKeep.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the use of a scanner by zerosum0x0 that discovers targets vulnerable to CVE-2019-0708 RDP RCE aka BlueKeep, you should: focus on monitoring Windows security event logs, specifically for events with the ID 4625 which represent failed login attempts. Particularly, you should watch for attempts that involve the username \"AAAAAAA\". This specific scenario is indicative of a scanning activity aiming to identify systems susceptible to the BlueKeep vulnerability by using a particular signature approach in scanning attempts. Considering the event's significance, false positives are deemed unlikely, indicating a high level of confidence in the correlation between detecting such events and the presence of scanning activity targeting this vulnerability.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 4625\n        TargetUserName: AAAAAAA\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 4625\n        TargetUserName: AAAAAAA\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "use of a scanner by zerosum0x0 that discovers targets vulnerable to  CVE-2019-0708 RDP RCE aka BlueKeep",
      "answer": "In order to detect the use of a scanner by zerosum0x0 that discovers targets vulnerable to CVE-2019-0708 RDP RCE aka BlueKeep, you should: focus on monitoring Windows security event logs, specifically for events with the ID 4625 which represent failed login attempts. Particularly, you should watch for attempts that involve the username \"AAAAAAA\". This specific scenario is indicative of a scanning activity aiming to identify systems susceptible to the BlueKeep vulnerability by using a particular signature approach in scanning attempts. Considering the event's significance, false positives are deemed unlikely, indicating a high level of confidence in the correlation between detecting such events and the presence of scanning activity targeting this vulnerability."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting registration of a debugger for a program that is available in the logon screen (sticky key backdoor)..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the registration of a debugger for a program that is available in the logon screen (sticky key backdoor), you should: Focus on monitoring process creation events within Windows environments. Specifically, look for commands that interact with the registry key path `\\CurrentVersion\\Image File Execution Options\\`. This registry path is critical because it's exploited in attacks where a debugger is set for legitimate Windows utilities. Pay extra attention to certain utilities that could be involved in these attacks, including `sethc.exe`, `utilman.exe`, `osk.exe`, `magnify.exe`, `narrator.exe`, `displayswitch.exe`, `atbroker.exe`, and `HelpPane.exe`. These utilities are commonly accessible from the logon screen, and adversaries may target them to establish a sticky key backdoor. Any process creation event involving modifications to these executable files through the specified registry path should be scrutinized. Note, however, that there might be instances where genuine software or system administrators perform legitimate actions that trigger similar alerts, but such cases are rare and should be verified to mitigate potential security risks. This method is associated with high alertness due to its strong links with tactics and techniques aimed at gaining persistent access and executing unauthorized commands or software.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1:\n        CommandLine|contains: '\\CurrentVersion\\Image File Execution Options\\'\n    selection2:\n        CommandLine|contains:\n            - 'sethc.exe'\n            - 'utilman.exe'\n            - 'osk.exe'\n            - 'magnify.exe'\n            - 'narrator.exe'\n            - 'displayswitch.exe'\n            - 'atbroker.exe'\n            - 'HelpPane.exe'\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1:\n        CommandLine|contains: '\\CurrentVersion\\Image File Execution Options\\'\n    selection2:\n        CommandLine|contains:\n            - 'sethc.exe'\n            - 'utilman.exe'\n            - 'osk.exe'\n            - 'magnify.exe'\n            - 'narrator.exe'\n            - 'displayswitch.exe'\n            - 'atbroker.exe'\n            - 'HelpPane.exe'\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "registration of a debugger for a program that is available in the logon screen (sticky key backdoor).",
      "answer": "In order to detect the registration of a debugger for a program that is available in the logon screen (sticky key backdoor), you should: Focus on monitoring process creation events within Windows environments. Specifically, look for commands that interact with the registry key path `\\CurrentVersion\\Image File Execution Options\\`. This registry path is critical because it's exploited in attacks where a debugger is set for legitimate Windows utilities. Pay extra attention to certain utilities that could be involved in these attacks, including `sethc.exe`, `utilman.exe`, `osk.exe`, `magnify.exe`, `narrator.exe`, `displayswitch.exe`, `atbroker.exe`, and `HelpPane.exe`. These utilities are commonly accessible from the logon screen, and adversaries may target them to establish a sticky key backdoor. Any process creation event involving modifications to these executable files through the specified registry path should be scrutinized. Note, however, that there might be instances where genuine software or system administrators perform legitimate actions that trigger similar alerts, but such cases are rare and should be verified to mitigate potential security risks. This method is associated with high alertness due to its strong links with tactics and techniques aimed at gaining persistent access and executing unauthorized commands or software."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting creation of a new service using powershell..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the creation of a new service using powershell, you should: Focus on the creation of processes on Windows systems. Specifically, monitor the use of PowerShell commands that involve the creation of new services. Look for instances where the command line contains both 'New-Service' and '-BinaryPathName' as these indicate the creation of a new service with a specified binary path, which is a common technique used by attackers to persist on a system or execute malicious processes. Be aware that there are legitimate scenarios where administrators or software installations may use this command for valid reasons, therefore, this activity should be considered low level unless other suspicious activities are observed. This method correlates with tactics and techniques such as Persistence and Privilege Escalation by making unauthorized changes to the system\u2019s services.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'New-Service'\n            - '-BinaryPathName'\n    condition: selection\nfalsepositives:\n    - Legitimate administrator or user creates a service for legitimate reasons.\n    - Software installation\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'New-Service'\n            - '-BinaryPathName'\n    condition: selection\nfalsepositives:\n    - Legitimate administrator or user creates a service for legitimate reasons.\n    - Software installation\nlevel: low\n",
      "question": "creation of a new service using powershell.",
      "answer": "In order to detect the creation of a new service using powershell, you should: Focus on the creation of processes on Windows systems. Specifically, monitor the use of PowerShell commands that involve the creation of new services. Look for instances where the command line contains both 'New-Service' and '-BinaryPathName' as these indicate the creation of a new service with a specified binary path, which is a common technique used by attackers to persist on a system or execute malicious processes. Be aware that there are legitimate scenarios where administrators or software installations may use this command for valid reasons, therefore, this activity should be considered low level unless other suspicious activities are observed. This method correlates with tactics and techniques such as Persistence and Privilege Escalation by making unauthorized changes to the system\u2019s services."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious starts of explorer.exe that use the /NOUACCHECK flag that allows to run all sub processes of that newly started explorer.exe without any UAC checks.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious starts of explorer.exe that use the /NOUACCHECK flag that allows running all subprocesses of that newly started explorer.exe without any UAC checks, you should: focus on monitoring process creation logs within a Windows environment. Specifically, look for instances where the process image ends with '\\explorer.exe' and the command line includes the flag '/NOUACCHECK'. It's important to exclude events where the parent command line is 'C:\\Windows\\system32\\svchost.exe -k netsvcs -p -s Schedule' or the parent image is 'C:\\Windows\\System32\\svchost.exe', as these are associated with domain controller user logon and may generate false positives. This detection identifies a high-severity security risk, however, please be aware that there might be legitimate software products that use this method, which could also trigger this alert.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\explorer.exe'\n        CommandLine|contains: '/NOUACCHECK'\n    filter_dc_logon:\n        - ParentCommandLine: 'C:\\Windows\\system32\\svchost.exe -k netsvcs -p -s Schedule'\n        - ParentImage: 'C:\\Windows\\System32\\svchost.exe' # coarse filter needed for ID 4688 Events\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Domain Controller User Logon\n    - Unknown how many legitimate software products use that method\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\explorer.exe'\n        CommandLine|contains: '/NOUACCHECK'\n    filter_dc_logon:\n        - ParentCommandLine: 'C:\\Windows\\system32\\svchost.exe -k netsvcs -p -s Schedule'\n        - ParentImage: 'C:\\Windows\\System32\\svchost.exe' # coarse filter needed for ID 4688 Events\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Domain Controller User Logon\n    - Unknown how many legitimate software products use that method\nlevel: high\n",
      "question": "suspicious starts of explorer.exe that use the /NOUACCHECK flag that allows to run all sub processes of that newly started explorer.exe without any UAC checks",
      "answer": "In order to detect suspicious starts of explorer.exe that use the /NOUACCHECK flag that allows running all subprocesses of that newly started explorer.exe without any UAC checks, you should: focus on monitoring process creation logs within a Windows environment. Specifically, look for instances where the process image ends with '\\explorer.exe' and the command line includes the flag '/NOUACCHECK'. It's important to exclude events where the parent command line is 'C:\\Windows\\system32\\svchost.exe -k netsvcs -p -s Schedule' or the parent image is 'C:\\Windows\\System32\\svchost.exe', as these are associated with domain controller user logon and may generate false positives. This detection identifies a high-severity security risk, however, please be aware that there might be legitimate software products that use this method, which could also trigger this alert."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    product: windows\n    service: sysmon\ndetection:\n    selection_one:\n        EventID: 11\n        Image: System\n        TargetFilename|endswith: '\\Internet Explorer\\iertutil.dll'\n    selection_two:\n        EventID: 7\n        Image|endswith: '\\Internet Explorer\\iexplore.exe'\n        ImageLoaded|endswith: '\\Internet Explorer\\iertutil.dll'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: critical\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect threat actor creating a file named `iertutil.dll` in the `C:\\Program Files\\Internet Explorer\\` directory over the network and loading it for a DCOM InternetExplorer DLL Hijack scenario.\n\nHere is how  the given sigma rule operates: In order to detect a threat actor creating a file named `iertutil.dll` in the `C:\\Program Files\\Internet Explorer\\` directory over the network and loading it for a DCOM InternetExplorer DLL Hijack scenario, you should: Monitor Windows systems using Sysmon for two specific patterns of activity. Firstly, look for events where a file creation is logged (EventID 11) with the system process image, targeting filenames that end with '\\Internet Explorer\\iertutil.dll'. This indicates the possible creation or modification of the DLL file associated with Internet Explorer, which could be an attempt at DLL hijacking. Secondly, track instances where the Internet Explorer executable ('iexplore.exe') is observed loading a DLL ('iertutil.dll') that also resides in the Internet Explorer directory, as evidenced by EventID 7. This could indicate that the hijacked DLL is being executed, a direct sign of a potential DCOM DLL hijacking attempt. The rule deems such activities as critical, alerting you to the possibility of an ongoing attack utilizing this method. Do note, however, that there might be unknown scenarios that could trigger these conditions and be classified as false positives, albeit such cases are not specified.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: sysmon\ndetection:\n    selection_one:\n        EventID: 11\n        Image: System\n        TargetFilename|endswith: '\\Internet Explorer\\iertutil.dll'\n    selection_two:\n        EventID: 7\n        Image|endswith: '\\Internet Explorer\\iexplore.exe'\n        ImageLoaded|endswith: '\\Internet Explorer\\iertutil.dll'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: critical\n",
      "question": "threat actor creating a file named `iertutil.dll` in the `C:\\Program Files\\Internet Explorer\\` directory over the network and loading it for a DCOM InternetExplorer DLL Hijack scenario.",
      "answer": "In order to detect a threat actor creating a file named `iertutil.dll` in the `C:\\Program Files\\Internet Explorer\\` directory over the network and loading it for a DCOM InternetExplorer DLL Hijack scenario, you should: Monitor Windows systems using Sysmon for two specific patterns of activity. Firstly, look for events where a file creation is logged (EventID 11) with the system process image, targeting filenames that end with '\\Internet Explorer\\iertutil.dll'. This indicates the possible creation or modification of the DLL file associated with Internet Explorer, which could be an attempt at DLL hijacking. Secondly, track instances where the Internet Explorer executable ('iexplore.exe') is observed loading a DLL ('iertutil.dll') that also resides in the Internet Explorer directory, as evidenced by EventID 7. This could indicate that the hijacked DLL is being executed, a direct sign of a potential DCOM DLL hijacking attempt. The rule deems such activities as critical, alerting you to the possibility of an ongoing attack utilizing this method. Do note, however, that there might be unknown scenarios that could trigger these conditions and be classified as false positives, albeit such cases are not specified."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_parent:\n        ParentImage|endswith:\n            # Add more if known\n            - \\WmiPrvSE.exe\n            - \\svchost.exe\n            - \\dllhost.exe\n        Image|endswith: '\\ImagingDevices.exe'\n    selection_child:\n        # You can add specific suspicious child processes (such as cmd, powershell...) to increase the accuracy\n        ParentImage|endswith: '\\ImagingDevices.exe'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect unusual parent or children of the ImagingDevices.exe (Windows Contacts) process as seen being used with Bumblebee activity\n\nHere is how  the given sigma rule operates: In order to detect unusual parent or children of the ImagingDevices.exe (Windows Contacts) process as seen being used with Bumblebee activity, you should: Focus on monitoring the creation of processes on Windows systems, especially looking out for instances where the ImagingDevices.exe process is initiated by or gives rise to suspicious processes. Specifically, be alert for the ImagingDevices.exe process being spawned by unexpected parent processes such as WmiPrvSE.exe, svchost.exe, or dllhost.exe. Additionally, it is crucial to remain vigilant for cases where ImagingDevices.exe itself acts as a parent to suspicious child processes. Though specifics on what constitutes a suspicious child process are not provided, typically, these would include command-line utilities or scripts like cmd or PowerShell that are not standard children of ImagingDevices.exe. Due to the high level of concern and potential for false positives being unknown, such detection efforts should be prioritized and investigated with due diligence.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_parent:\n        ParentImage|endswith:\n            # Add more if known\n            - \\WmiPrvSE.exe\n            - \\svchost.exe\n            - \\dllhost.exe\n        Image|endswith: '\\ImagingDevices.exe'\n    selection_child:\n        # You can add specific suspicious child processes (such as cmd, powershell...) to increase the accuracy\n        ParentImage|endswith: '\\ImagingDevices.exe'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "unusual parent or children of the ImagingDevices.exe (Windows Contacts) process as seen being used with Bumblebee activity",
      "answer": "In order to detect unusual parent or children of the ImagingDevices.exe (Windows Contacts) process as seen being used with Bumblebee activity, you should: Focus on monitoring the creation of processes on Windows systems, especially looking out for instances where the ImagingDevices.exe process is initiated by or gives rise to suspicious processes. Specifically, be alert for the ImagingDevices.exe process being spawned by unexpected parent processes such as WmiPrvSE.exe, svchost.exe, or dllhost.exe. Additionally, it is crucial to remain vigilant for cases where ImagingDevices.exe itself acts as a parent to suspicious child processes. Though specifics on what constitutes a suspicious child process are not provided, typically, these would include command-line utilities or scripts like cmd or PowerShell that are not standard children of ImagingDevices.exe. Due to the high level of concern and potential for false positives being unknown, such detection efforts should be prioritized and investigated with due diligence."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Powershell use PassThru option to start in background.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect PowerShell use PassThru option to start processes in the background, you should monitor PowerShell script activities, specifically focusing on the logs related to PowerShell scripting. Ensure that Script Block Logging is enabled to capture detailed information about script execution. Look for instances where the script text includes the use of `Start-Process` along with the parameters `-PassThru ` and `-FilePath `. These elements together indicate an attempt to start a process in the background via PowerShell, a technique that might be used by attackers to discreetly launch malicious processes on a system. Be mindful that similar script patterns can occur in legitimate PowerShell scripts, which represents a potential source of false positives. The overall concern level for such detections is classified as medium.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains|all:\n            - Start-Process\n            - '-PassThru '\n            - '-FilePath '\n    condition: selection\nfalsepositives:\n    - Legitimate PowerShell scripts\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains|all:\n            - Start-Process\n            - '-PassThru '\n            - '-FilePath '\n    condition: selection\nfalsepositives:\n    - Legitimate PowerShell scripts\nlevel: medium\n",
      "question": "Powershell use PassThru option to start in background",
      "answer": "In order to detect PowerShell use PassThru option to start processes in the background, you should monitor PowerShell script activities, specifically focusing on the logs related to PowerShell scripting. Ensure that Script Block Logging is enabled to capture detailed information about script execution. Look for instances where the script text includes the use of `Start-Process` along with the parameters `-PassThru ` and `-FilePath `. These elements together indicate an attempt to start a process in the background via PowerShell, a technique that might be used by attackers to discreetly launch malicious processes on a system. Be mindful that similar script patterns can occur in legitimate PowerShell scripts, which represents a potential source of false positives. The overall concern level for such detections is classified as medium."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: file_event\n    product: windows\ndetection:\n    selection:\n        TargetFilename|contains: '\\AppData\\Local\\Temp\\LogMeInInc\\GoToAssist Remote Support Expert\\'\n    condition: selection\nfalsepositives:\n    - Legitimate use\nlevel: medium\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.\nThese services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.\nRemote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)\n\n\nHere is how  the given sigma rule operates: In order to detect when an adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc., to establish an interactive command and control channel to target systems within networks, you should: Monitor file events on Windows systems for activities involving files located in the directory path containing '\\AppData\\Local\\Temp\\LogMeInInc\\GoToAssist Remote Support Expert\\'. This monitoring strategy is applied as these services, despite their legitimate uses, are often repurposed by adversaries to gain unauthorized access to systems. These types of remote access tools are notably flagged by security research, such as Symantec\u2019s report on \"Living off the Land\", as being used more frequently by adversaries compared to other legitimate software, for malicious intent. It is important to consider that there may be legitimate uses of these software tools within a network, and such instances are considered as false positives. The detection strategy is classified at a medium level of importance in the context of cybersecurity defenses.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: file_event\n    product: windows\ndetection:\n    selection:\n        TargetFilename|contains: '\\AppData\\Local\\Temp\\LogMeInInc\\GoToAssist Remote Support Expert\\'\n    condition: selection\nfalsepositives:\n    - Legitimate use\nlevel: medium\n",
      "question": "An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.\nThese services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.\nRemote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)\n",
      "answer": "In order to detect when an adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc., to establish an interactive command and control channel to target systems within networks, you should: Monitor file events on Windows systems for activities involving files located in the directory path containing '\\AppData\\Local\\Temp\\LogMeInInc\\GoToAssist Remote Support Expert\\'. This monitoring strategy is applied as these services, despite their legitimate uses, are often repurposed by adversaries to gain unauthorized access to systems. These types of remote access tools are notably flagged by security research, such as Symantec\u2019s report on \"Living off the Land\", as being used more frequently by adversaries compared to other legitimate software, for malicious intent. It is important to consider that there may be legitimate uses of these software tools within a network, and such instances are considered as false positives. The detection strategy is classified at a medium level of importance in the context of cybersecurity defenses."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: driver_load\n    product: windows\ndetection:\n    selection_sysmon:\n        Hashes|contains:\n            - 'SHA256=F05B1EE9E2F6AB704B8919D5071BECBCE6F9D0F9D0BA32A460C41D5272134ABE'\n            - 'SHA1=B89A8EEF5AEAE806AF5BA212A8068845CAFDAB6F'\n            - 'MD5=B941C8364308990EE4CC6EADF7214E0F'\n    selection_hash:\n        - sha256: 'f05b1ee9e2f6ab704b8919d5071becbce6f9d0f9d0ba32a460c41d5272134abe'\n        - sha1: 'b89a8eef5aeae806af5ba212a8068845cafdab6f'\n        - md5: 'b941c8364308990ee4cc6eadf7214e0f'\n    condition: 1 of selection*\nfalsepositives:\n    - Legitimate driver loads (old driver that didn't receive an update)\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect load of the vulnerable Lenovo driver as reported in CVE-2022-3699 which can be used to escalate privileges\n\nHere is how  the given sigma rule operates: In order to detect the load of the vulnerable Lenovo driver as reported in CVE-2022-3699 which can be used to escalate privileges, you should monitor the loading of drivers on Windows systems, particularly for specific hash values that identify the compromised Lenovo driver. Ensure that both Sysmon logs and other hash monitoring systems are checked for the presence of any of the following hashes: SHA256 hash of 'F05B1EE9E2F6AB704B8919D5071BECBCE6F9D0F9D0BA32A460C41D5272134ABE', SHA1 hash of 'B89A8EEF5AEAE806AF5BA212A8068845CAFDAB6F', or an MD5 hash of 'B941C8364308990EE4CC6EADF7214E0F'. These specific hashes indicate the loading of a particular driver that has been identified as vulnerable and potentially being exploited for privilege escalation purposes. Note that while detecting these hashes is critical for security, it's possible to encounter false positives in scenarios where legitimate driver loads occur (particularly with drivers that haven't been updated). Given the high risk associated with this vulnerable driver, the detection of any of these hashes should be treated with a high priority level to mitigate potential security threats effectively.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: driver_load\n    product: windows\ndetection:\n    selection_sysmon:\n        Hashes|contains:\n            - 'SHA256=F05B1EE9E2F6AB704B8919D5071BECBCE6F9D0F9D0BA32A460C41D5272134ABE'\n            - 'SHA1=B89A8EEF5AEAE806AF5BA212A8068845CAFDAB6F'\n            - 'MD5=B941C8364308990EE4CC6EADF7214E0F'\n    selection_hash:\n        - sha256: 'f05b1ee9e2f6ab704b8919d5071becbce6f9d0f9d0ba32a460c41d5272134abe'\n        - sha1: 'b89a8eef5aeae806af5ba212a8068845cafdab6f'\n        - md5: 'b941c8364308990ee4cc6eadf7214e0f'\n    condition: 1 of selection*\nfalsepositives:\n    - Legitimate driver loads (old driver that didn't receive an update)\nlevel: high\n",
      "question": "load of the vulnerable Lenovo driver as reported in CVE-2022-3699 which can be used to escalate privileges",
      "answer": "In order to detect the load of the vulnerable Lenovo driver as reported in CVE-2022-3699 which can be used to escalate privileges, you should monitor the loading of drivers on Windows systems, particularly for specific hash values that identify the compromised Lenovo driver. Ensure that both Sysmon logs and other hash monitoring systems are checked for the presence of any of the following hashes: SHA256 hash of 'F05B1EE9E2F6AB704B8919D5071BECBCE6F9D0F9D0BA32A460C41D5272134ABE', SHA1 hash of 'B89A8EEF5AEAE806AF5BA212A8068845CAFDAB6F', or an MD5 hash of 'B941C8364308990EE4CC6EADF7214E0F'. These specific hashes indicate the loading of a particular driver that has been identified as vulnerable and potentially being exploited for privilege escalation purposes. Note that while detecting these hashes is critical for security, it's possible to encounter false positives in scenarios where legitimate driver loads occur (particularly with drivers that haven't been updated). Given the high risk associated with this vulnerable driver, the detection of any of these hashes should be treated with a high priority level to mitigate potential security threats effectively."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting A General detection for a new application in AppCompat. This indicates an application executing for the first time on an endpoint..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a new application in AppCompat, indicating an application executing for the first time on an endpoint, you should focus on Windows logs, particularly those related to registry settings. Specifically, you should monitor for events where a value is being set in the registry under the path '\\AppCompatFlags\\Compatibility Assistant\\Store\\'. These events, denoted as 'Setvalue' under the 'EventType', are critical for identifying when an application is executed for the first time on a system, as this path in the registry is associated with the Compatibility Assistant's efforts to ensure applications run correctly on the Windows operating system.\n\nIt's important to understand that this detection mechanism serves an informational purpose. It is designed to alert when new applications are launched on an endpoint, which could either signify normal behavior, such as legitimate installation of new software, or potentially malicious activities if an application was executed without the user's knowledge. Given this context, one should be mindful of possible false positives, which might emanate from typical activities such as the initial setup phase of a system or the legitimate introduction of new applications to the endpoint. As such, while this detection strategy is invaluable for maintaining situational awareness and endpoint security hygiene, it necessitates a nuanced approach to response\u2014considering the specifics of one's organizational context and the commonality of new software installations.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: registry_set\ndetection:\n    selection:\n        EventType: Setvalue\n        TargetObject|contains: '\\AppCompatFlags\\Compatibility Assistant\\Store\\'\n    condition: selection\nfalsepositives:\n    - This rule is to explore new applications on an endpoint. False positives depends on the organization.\n    - Newly setup system.\n    - Legitimate installation of new application.\nlevel: informational\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: registry_set\ndetection:\n    selection:\n        EventType: Setvalue\n        TargetObject|contains: '\\AppCompatFlags\\Compatibility Assistant\\Store\\'\n    condition: selection\nfalsepositives:\n    - This rule is to explore new applications on an endpoint. False positives depends on the organization.\n    - Newly setup system.\n    - Legitimate installation of new application.\nlevel: informational\n",
      "question": "A General detection for a new application in AppCompat. This indicates an application executing for the first time on an endpoint.",
      "answer": "In order to detect a new application in AppCompat, indicating an application executing for the first time on an endpoint, you should focus on Windows logs, particularly those related to registry settings. Specifically, you should monitor for events where a value is being set in the registry under the path '\\AppCompatFlags\\Compatibility Assistant\\Store\\'. These events, denoted as 'Setvalue' under the 'EventType', are critical for identifying when an application is executed for the first time on a system, as this path in the registry is associated with the Compatibility Assistant's efforts to ensure applications run correctly on the Windows operating system.\n\nIt's important to understand that this detection mechanism serves an informational purpose. It is designed to alert when new applications are launched on an endpoint, which could either signify normal behavior, such as legitimate installation of new software, or potentially malicious activities if an application was executed without the user's knowledge. Given this context, one should be mindful of possible false positives, which might emanate from typical activities such as the initial setup phase of a system or the legitimate introduction of new applications to the endpoint. As such, while this detection strategy is invaluable for maintaining situational awareness and endpoint security hygiene, it necessitates a nuanced approach to response\u2014considering the specifics of one's organizational context and the commonality of new software installations."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    product: linux\n    category: process_creation\ndetection:\n    selection:\n        Image|endswith: '/nohup'\n    condition: selection\nfalsepositives:\n    - Administrators or installed processes that leverage nohup\nlevel: medium\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect usage of nohup which could be leveraged by an attacker to keep a process running or break out from restricted environments\n\nHere is how  the given sigma rule operates: In order to detect usage of nohup which could be leveraged by an attacker to keep a process running or break out from restricted environments, you should monitor Linux systems for the creation of any processes where the image name ends with '/nohup'. This is indicative of the use of the nohup command, which allows a process to continue running in the background even after a user has logged out. It\u2019s important to note that there may be legitimate uses of nohup by administrators or other system processes. Thus, some alerts might be false positives. The severity of this activity has been assessed as medium, implying that while it\u2019s not immediately indicative of a compromise, it\u2019s unusual enough to warrant further investigation. This monitoring targets the process creation events, looking specifically for instances involving nohup, under the broader context of tactics such as persistence, privilege escalation, and defense evasion.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\n    category: process_creation\ndetection:\n    selection:\n        Image|endswith: '/nohup'\n    condition: selection\nfalsepositives:\n    - Administrators or installed processes that leverage nohup\nlevel: medium\n",
      "question": "usage of nohup which could be leveraged by an attacker to keep a process running or break out from restricted environments",
      "answer": "In order to detect usage of nohup which could be leveraged by an attacker to keep a process running or break out from restricted environments, you should monitor Linux systems for the creation of any processes where the image name ends with '/nohup'. This is indicative of the use of the nohup command, which allows a process to continue running in the background even after a user has logged out. It\u2019s important to note that there may be legitimate uses of nohup by administrators or other system processes. Thus, some alerts might be false positives. The severity of this activity has been assessed as medium, implying that while it\u2019s not immediately indicative of a compromise, it\u2019s unusual enough to warrant further investigation. This monitoring targets the process creation events, looking specifically for instances involving nohup, under the broader context of tactics such as persistence, privilege escalation, and defense evasion."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - OriginalFileName: 'HH.exe'\n        - Image|endswith: '\\hh.exe'\n    selection_cli:\n        CommandLine|contains: '.chm'\n    condition: all of selection_*\nfalsepositives:\n    - False positives are expected with legitimate \".CHM\"\nlevel: medium\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect usage of \"hh.exe\" to execute \".chm\" files.\n\nHere is how  the given sigma rule operates: In order to detect the usage of \"hh.exe\" to execute \".chm\" files, you should: look for process creation events within Windows systems where the originating file is identified as \"HH.exe\" either by its original filename or where the executing image ends with \"\\hh.exe\". Additionally, pay attention to command line arguments that contain the \".chm\" file extension. Both criteria - associated file and command line argument - need to be met to create an alert. Be aware that there could be legitimate uses of \".chm\" files leading to possible false positives. This detection is set at a medium level of importance.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - OriginalFileName: 'HH.exe'\n        - Image|endswith: '\\hh.exe'\n    selection_cli:\n        CommandLine|contains: '.chm'\n    condition: all of selection_*\nfalsepositives:\n    - False positives are expected with legitimate \".CHM\"\nlevel: medium\n",
      "question": "usage of \"hh.exe\" to execute \".chm\" files.",
      "answer": "In order to detect the usage of \"hh.exe\" to execute \".chm\" files, you should: look for process creation events within Windows systems where the originating file is identified as \"HH.exe\" either by its original filename or where the executing image ends with \"\\hh.exe\". Additionally, pay attention to command line arguments that contain the \".chm\" file extension. Both criteria - associated file and command line argument - need to be met to create an alert. Be aware that there could be legitimate uses of \".chm\" files leading to possible false positives. This detection is set at a medium level of importance."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Detect built in PowerShell cmdlet Disable-WindowsOptionalFeature, Deployment Image Servicing and Management tool.\nSimilar to DISM.exe, this cmdlet is used to enumerate, install, uninstall, configure, and update features and packages in Windows images\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the usage of the built-in PowerShell cmdlet Disable-WindowsOptionalFeature, Deployment Image Servicing and Management tool, similar to DISM.exe, which is used to enumerate, install, uninstall, configure, and update features and packages in Windows images, you should: monitor for PowerShell script activities in Windows environments, particularly focusing on scripts that include the \u2018Disable-WindowsOptionalFeature\u2019 command combined with \u2018-Online\u2019 and \u2018-FeatureName\u2019. This command is indicative of attempts to disable certain Windows functionalities. Additionally, pay attention to scripts that contain references to disabling key Windows features, including 'Windows-Defender-Gui', 'Windows-Defender-Features', 'Windows-Defender', and 'Windows-Defender-ApplicationGuard'. This detection strategy requires Script Block Logging to be enabled to capture the necessary data for analysis. Consider any detection at a high priority level, though be aware that there may be unknown false positives.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection_cmd:\n        ScriptBlockText|contains|all:\n            - 'Disable-WindowsOptionalFeature'\n            - '-Online'\n            - '-FeatureName'\n    selection_feature:\n        # Add any important windows features\n        ScriptBlockText|contains:\n            - 'Windows-Defender-Gui'\n            - 'Windows-Defender-Features'\n            - 'Windows-Defender'\n            - 'Windows-Defender-ApplicationGuard'\n            #- 'Containers-DisposableClientVM' # Windows Sandbox\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection_cmd:\n        ScriptBlockText|contains|all:\n            - 'Disable-WindowsOptionalFeature'\n            - '-Online'\n            - '-FeatureName'\n    selection_feature:\n        # Add any important windows features\n        ScriptBlockText|contains:\n            - 'Windows-Defender-Gui'\n            - 'Windows-Defender-Features'\n            - 'Windows-Defender'\n            - 'Windows-Defender-ApplicationGuard'\n            #- 'Containers-DisposableClientVM' # Windows Sandbox\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Detect built in PowerShell cmdlet Disable-WindowsOptionalFeature, Deployment Image Servicing and Management tool.\nSimilar to DISM.exe, this cmdlet is used to enumerate, install, uninstall, configure, and update features and packages in Windows images\n",
      "answer": "In order to detect the usage of the built-in PowerShell cmdlet Disable-WindowsOptionalFeature, Deployment Image Servicing and Management tool, similar to DISM.exe, which is used to enumerate, install, uninstall, configure, and update features and packages in Windows images, you should: monitor for PowerShell script activities in Windows environments, particularly focusing on scripts that include the \u2018Disable-WindowsOptionalFeature\u2019 command combined with \u2018-Online\u2019 and \u2018-FeatureName\u2019. This command is indicative of attempts to disable certain Windows functionalities. Additionally, pay attention to scripts that contain references to disabling key Windows features, including 'Windows-Defender-Gui', 'Windows-Defender-Features', 'Windows-Defender', and 'Windows-Defender-ApplicationGuard'. This detection strategy requires Script Block Logging to be enabled to capture the necessary data for analysis. Consider any detection at a high priority level, though be aware that there may be unknown false positives."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_path:\n        CommandLine|contains:\n            - '\\ShellIds\\Microsoft.PowerShell\\ExecutionPolicy'\n            - '\\Policies\\Microsoft\\Windows\\PowerShell\\ExecutionPolicy'\n    selection_values:\n        CommandLine|contains:\n            - 'Bypass'\n            - 'RemoteSigned'\n            - 'Unrestricted'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect changes to the PowerShell execution policy registry key in order to bypass signing requirements for script execution from the CommandLine\n\nHere is how  the given sigma rule operates: In order to detect changes to the PowerShell execution policy registry key in order to bypass signing requirements for script execution from the CommandLine, you should: Monitor process creation logs in Windows for commands that modify the PowerShell execution policy registry keys. Specifically, watch for the use of '\\ShellIds\\Microsoft.PowerShell\\ExecutionPolicy' and '\\Policies\\Microsoft\\Windows\\PowerShell\\ExecutionPolicy' in command lines. Additionally, be alert for commands that include options such as 'Bypass', 'RemoteSigned', or 'Unrestricted'. These options can indicate attempts to alter the execution policy to allow unsigned or remote scripts to run, which might bypass security controls. This activity is considered high risk and warrants close attention due to the potential for abuse in executing malicious scripts.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_path:\n        CommandLine|contains:\n            - '\\ShellIds\\Microsoft.PowerShell\\ExecutionPolicy'\n            - '\\Policies\\Microsoft\\Windows\\PowerShell\\ExecutionPolicy'\n    selection_values:\n        CommandLine|contains:\n            - 'Bypass'\n            - 'RemoteSigned'\n            - 'Unrestricted'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "changes to the PowerShell execution policy registry key in order to bypass signing requirements for script execution from the CommandLine",
      "answer": "In order to detect changes to the PowerShell execution policy registry key in order to bypass signing requirements for script execution from the CommandLine, you should: Monitor process creation logs in Windows for commands that modify the PowerShell execution policy registry keys. Specifically, watch for the use of '\\ShellIds\\Microsoft.PowerShell\\ExecutionPolicy' and '\\Policies\\Microsoft\\Windows\\PowerShell\\ExecutionPolicy' in command lines. Additionally, be alert for commands that include options such as 'Bypass', 'RemoteSigned', or 'Unrestricted'. These options can indicate attempts to alter the execution policy to allow unsigned or remote scripts to run, which might bypass security controls. This activity is considered high risk and warrants close attention due to the potential for abuse in executing malicious scripts."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains: ':3389' # RDP port and usual SSH tunneling related switches in command line\n    selection_opt:\n        CommandLine|contains:\n            - ' -L '\n            - ' -P '\n            - ' -R '\n            - ' -pw '\n            - ' -ssh '\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: medium\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect potential use of an SSH utility to establish RDP over a reverse SSH Tunnel. This can be used by attackers to enable routing of network packets that would otherwise not reach their intended destination.\n\nHere is how  the given sigma rule operates: In order to detect potential use of an SSH utility to establish RDP over a reverse SSH Tunnel, which can be used by attackers to enable routing of network packets that would otherwise not reach their intended destination, you should: Focus on monitoring the creation of processes within Windows environments. Specifically, look for command lines that contain references to the RDP port number '3389', which is indicative of Remote Desktop Protocol activity. Additionally, pay attention to command lines that include switches commonly associated with SSH tunneling, such as '-L', '-P', '-R', '-pw', and '-ssh'. These commands and options are often utilized when setting up reverse tunnels with SSH, which can be a method for bypassing network controls and facilitating unauthorised access. It is important to evaluate all instances where these patterns are found together to effectively identify suspicious activity. False positives may occur, and the threat level for such detections is considered medium.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains: ':3389' # RDP port and usual SSH tunneling related switches in command line\n    selection_opt:\n        CommandLine|contains:\n            - ' -L '\n            - ' -P '\n            - ' -R '\n            - ' -pw '\n            - ' -ssh '\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "potential use of an SSH utility to establish RDP over a reverse SSH Tunnel. This can be used by attackers to enable routing of network packets that would otherwise not reach their intended destination.",
      "answer": "In order to detect potential use of an SSH utility to establish RDP over a reverse SSH Tunnel, which can be used by attackers to enable routing of network packets that would otherwise not reach their intended destination, you should: Focus on monitoring the creation of processes within Windows environments. Specifically, look for command lines that contain references to the RDP port number '3389', which is indicative of Remote Desktop Protocol activity. Additionally, pay attention to command lines that include switches commonly associated with SSH tunneling, such as '-L', '-P', '-R', '-pw', and '-ssh'. These commands and options are often utilized when setting up reverse tunnels with SSH, which can be a method for bypassing network controls and facilitating unauthorised access. It is important to evaluate all instances where these patterns are found together to effectively identify suspicious activity. False positives may occur, and the threat level for such detections is considered medium."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of renamed Remote Utilities (RURAT) via Product PE header field.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution of renamed Remote Utilities (RURAT) via Product PE header field, you should: Look for process creation events within Windows operating systems that indicate involvement of the Remote Utilities software, identified by the product name in the process execution's PE (Portable Executable) header. Specifically, search for events where the product is listed as 'Remote Utilities'. However, to accurately pinpoint malicious activity, exclude any process creation events that conclude with the execution image names '\\rutserv.exe' or '\\rfusclient.exe', as these are legitimate Remote Utilities executables. This approach aims at identifying instances where attackers might rename legitimate Remote Utilities executables to bypass detection mechanisms. Although there might be cases where these criteria are met without any malicious intent, such occurrences are presently unidentified, prompting a medium level of alertness. The underlying tactics and techniques associated with this activity include Execution, Persistence, and Command and Control, which align with methods typically employed by adversaries to maintain control over compromised systems.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Product: 'Remote Utilities'\n    filter:\n        Image|endswith:\n            - '\\rutserv.exe'\n            - '\\rfusclient.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Product: 'Remote Utilities'\n    filter:\n        Image|endswith:\n            - '\\rutserv.exe'\n            - '\\rfusclient.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "execution of renamed Remote Utilities (RURAT) via Product PE header field",
      "answer": "In order to detect execution of renamed Remote Utilities (RURAT) via Product PE header field, you should: Look for process creation events within Windows operating systems that indicate involvement of the Remote Utilities software, identified by the product name in the process execution's PE (Portable Executable) header. Specifically, search for events where the product is listed as 'Remote Utilities'. However, to accurately pinpoint malicious activity, exclude any process creation events that conclude with the execution image names '\\rutserv.exe' or '\\rfusclient.exe', as these are legitimate Remote Utilities executables. This approach aims at identifying instances where attackers might rename legitimate Remote Utilities executables to bypass detection mechanisms. Although there might be cases where these criteria are met without any malicious intent, such occurrences are presently unidentified, prompting a medium level of alertness. The underlying tactics and techniques associated with this activity include Execution, Persistence, and Command and Control, which align with methods typically employed by adversaries to maintain control over compromised systems."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: proxy\ndetection:\n    selection:\n        c-uri|contains|all:\n            - 'IconStorages/images/main/icon'\n            - '.ico'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect potential malicious .ICO files download from a compromised 3CXDesktopApp via web requests to the the malicious Github repository\n\nHere is how  the given sigma rule operates: In order to detect potential malicious .ICO files download from a compromised 3CXDesktopApp via web requests to the malicious Github repository, you should: monitor proxy logs for web requests that contain both 'IconStorages/images/main/icon' and '.ico' in the URI. This detection logic is crucial because it signifies an attempt to download .ICO files, which are potentially malicious, from a specific path that is indicative of a compromised application making requests to a malicious Github repository. The detection is marked at a high level of importance, indicating that such activities are rare and, if detected, should be investigated promptly due to their potential security implications. Be aware that there may be unknown false positives, so while urgency is advised, so is validation of the detected activity.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: proxy\ndetection:\n    selection:\n        c-uri|contains|all:\n            - 'IconStorages/images/main/icon'\n            - '.ico'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "potential malicious .ICO files download from a compromised 3CXDesktopApp via web requests to the the malicious Github repository",
      "answer": "In order to detect potential malicious .ICO files download from a compromised 3CXDesktopApp via web requests to the malicious Github repository, you should: monitor proxy logs for web requests that contain both 'IconStorages/images/main/icon' and '.ico' in the URI. This detection logic is crucial because it signifies an attempt to download .ICO files, which are potentially malicious, from a specific path that is indicative of a compromised application making requests to a malicious Github repository. The detection is marked at a high level of importance, indicating that such activities are rare and, if detected, should be investigated promptly due to their potential security implications. Be aware that there may be unknown false positives, so while urgency is advised, so is validation of the detected activity."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - OriginalFileName:\n            - 'PowerShell.EXE'\n            - 'pwsh.dll'\n        - Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n    selection_cmdlet:\n        CommandLine|contains|all:\n            - 'Set-Acl '\n            - '-AclObject '\n    selection_paths:\n        # Note: Add more suspicious paths\n        CommandLine|contains:\n            - '-Path \"C:\\Windows'\n            - \"-Path 'C:\\\\Windows\"\n            - '-Path %windir%'\n            - '-Path $env:windir'\n    selection_permissions:\n        # Note: Add more suspicious permissions\n        CommandLine|contains:\n            - 'FullControl'\n            - 'Allow'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect PowerShell scripts to set the ACL to a file in the Windows folder\n\nHere is how  the given sigma rule operates: In order to detect PowerShell scripts to set the ACL to a file in the Windows folder, you should look for process creation events in Windows operating systems that include the execution of PowerShell executables or libraries. Specifically, monitor for processes with original file names `PowerShell.EXE` or `pwsh.dll`, as well as those where the image name ends with `\\powershell.exe` or `\\pwsh.exe`.\n\nAdditionally, focus on command lines that contain specific patterns indicating attempts to modify Access Control Lists (ACLs). These patterns include the presence of commands like `Set-Acl`, along with the parameter `-AclObject`. To further refine the detection, check for command lines attempting to modify paths within the Windows directory. This can be indicated by any of the following patterns: `-Path \"C:\\Windows`, `-Path 'C:\\\\Windows`, `-Path %windir%`, or `-Path $env:windir`.\n\nBeyond path modifications, it's crucial to also monitor for command lines that specify permissions adjustments, especially those mentioning `FullControl` or `Allow`, as these indicate attempts to change permissions to allow full control over system files.\n\nWhile implementing this detection strategy, be aware that there could be legitimate uses of these commands and pathways. Therefore, each detection should be carefully investigated to determine its context and intent. The level of risk associated with these detections is considered high due to the potential for significant security implications if PowerShell is used maliciously to alter ACLs in sensitive Windows directories.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - OriginalFileName:\n            - 'PowerShell.EXE'\n            - 'pwsh.dll'\n        - Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n    selection_cmdlet:\n        CommandLine|contains|all:\n            - 'Set-Acl '\n            - '-AclObject '\n    selection_paths:\n        # Note: Add more suspicious paths\n        CommandLine|contains:\n            - '-Path \"C:\\Windows'\n            - \"-Path 'C:\\\\Windows\"\n            - '-Path %windir%'\n            - '-Path $env:windir'\n    selection_permissions:\n        # Note: Add more suspicious permissions\n        CommandLine|contains:\n            - 'FullControl'\n            - 'Allow'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "PowerShell scripts to set the ACL to a file in the Windows folder",
      "answer": "In order to detect PowerShell scripts to set the ACL to a file in the Windows folder, you should look for process creation events in Windows operating systems that include the execution of PowerShell executables or libraries. Specifically, monitor for processes with original file names `PowerShell.EXE` or `pwsh.dll`, as well as those where the image name ends with `\\powershell.exe` or `\\pwsh.exe`.\n\nAdditionally, focus on command lines that contain specific patterns indicating attempts to modify Access Control Lists (ACLs). These patterns include the presence of commands like `Set-Acl`, along with the parameter `-AclObject`. To further refine the detection, check for command lines attempting to modify paths within the Windows directory. This can be indicated by any of the following patterns: `-Path \"C:\\Windows`, `-Path 'C:\\\\Windows`, `-Path %windir%`, or `-Path $env:windir`.\n\nBeyond path modifications, it's crucial to also monitor for command lines that specify permissions adjustments, especially those mentioning `FullControl` or `Allow`, as these indicate attempts to change permissions to allow full control over system files.\n\nWhile implementing this detection strategy, be aware that there could be legitimate uses of these commands and pathways. Therefore, each detection should be carefully investigated to determine its context and intent. The level of risk associated with these detections is considered high due to the potential for significant security implications if PowerShell is used maliciously to alter ACLs in sensitive Windows directories."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Adversaries with no prior knowledge of legitimate credentials within the system or environment may guess passwords to attempt access to accounts.\nWithout knowledge of the password for an account, an adversary may opt to systematically guess the password using a repetitive or iterative mechanism\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to prevent adversaries with no prior knowledge of legitimate credentials within the system or environment from guessing passwords in an attempt to access accounts, you should monitor PowerShell scripts for specific signs of malicious activity targeting LDAP (Lightweight Directory Access Protocol) services. Focus on the Windows platform and ensure Script Block Logging is enabled to capture the necessary information. Look for any PowerShell scripts containing references to 'System.DirectoryServices.Protocols.LdapDirectoryIdentifier', 'System.Net.NetworkCredential', or 'System.DirectoryServices.Protocols.LdapConnection'. These references might indicate an attempt to access LDAP services possibly for credential validation or usage in unauthorized manners. Be aware that this detection operates at a low level of alert, suggesting there might be unknown scenarios that trigger false positives. Therefore, while monitoring for these indicators is crucial, each alert should be carefully investigated to differentiate between malicious activities and benign operations involving LDAP queries or connections.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains:\n            - 'System.DirectoryServices.Protocols.LdapDirectoryIdentifier'\n            - 'System.Net.NetworkCredential'\n            - 'System.DirectoryServices.Protocols.LdapConnection'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains:\n            - 'System.DirectoryServices.Protocols.LdapDirectoryIdentifier'\n            - 'System.Net.NetworkCredential'\n            - 'System.DirectoryServices.Protocols.LdapConnection'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low\n",
      "question": "Adversaries with no prior knowledge of legitimate credentials within the system or environment may guess passwords to attempt access to accounts.\nWithout knowledge of the password for an account, an adversary may opt to systematically guess the password using a repetitive or iterative mechanism\n",
      "answer": "In order to prevent adversaries with no prior knowledge of legitimate credentials within the system or environment from guessing passwords in an attempt to access accounts, you should monitor PowerShell scripts for specific signs of malicious activity targeting LDAP (Lightweight Directory Access Protocol) services. Focus on the Windows platform and ensure Script Block Logging is enabled to capture the necessary information. Look for any PowerShell scripts containing references to 'System.DirectoryServices.Protocols.LdapDirectoryIdentifier', 'System.Net.NetworkCredential', or 'System.DirectoryServices.Protocols.LdapConnection'. These references might indicate an attempt to access LDAP services possibly for credential validation or usage in unauthorized manners. Be aware that this detection operates at a low level of alert, suggesting there might be unknown scenarios that trigger false positives. Therefore, while monitoring for these indicators is crucial, each alert should be carefully investigated to differentiate between malicious activities and benign operations involving LDAP queries or connections."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    product: windows\n    category: create_remote_thread\ndetection:\n    selection:\n        TargetImage|endswith: '\\lsass.exe'\n        StartModule: ''\n    condition: selection\nfalsepositives:\n    - Antivirus products\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect password dumper activity by monitoring remote thread creation EventID 8 in combination with the lsass.exe process as TargetImage.\nThe process in field Process is the malicious program. A single execution can lead to hundreds of events.\n\n\nHere is how  the given sigma rule operates: In order to detect password dumper activity by monitoring remote thread creation EventID 8 in combination with the lsass.exe process as TargetImage, you should: focus on monitoring events within Windows systems specifically looking for the creation of remote threads that target the lsass.exe process. Key indicators of such suspicious activity include instances where the TargetImage field ends with '\\lsass.exe' and the StartModule field is empty. It is important to be aware that antivirus products may sometimes generate false positives. The activity is classified at a high severity level due to the critical nature of the lsass.exe process, which is central to the security subsystem of Windows and often targeted by attackers seeking to extract sensitive credential information. Monitoring for these events is essential in identifying potential password dumping attempts, which can involve the malicious program creating hundreds of events in a single execution as it tries to manipulate the lsass.exe process. Identifying these attempts early can prevent unauthorized access and potential breaches.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: create_remote_thread\ndetection:\n    selection:\n        TargetImage|endswith: '\\lsass.exe'\n        StartModule: ''\n    condition: selection\nfalsepositives:\n    - Antivirus products\nlevel: high\n",
      "question": "password dumper activity by monitoring remote thread creation EventID 8 in combination with the lsass.exe process as TargetImage.\nThe process in field Process is the malicious program. A single execution can lead to hundreds of events.\n",
      "answer": "In order to detect password dumper activity by monitoring remote thread creation EventID 8 in combination with the lsass.exe process as TargetImage, you should: focus on monitoring events within Windows systems specifically looking for the creation of remote threads that target the lsass.exe process. Key indicators of such suspicious activity include instances where the TargetImage field ends with '\\lsass.exe' and the StartModule field is empty. It is important to be aware that antivirus products may sometimes generate false positives. The activity is classified at a high severity level due to the critical nature of the lsass.exe process, which is central to the security subsystem of Windows and often targeted by attackers seeking to extract sensitive credential information. Monitoring for these events is essential in identifying potential password dumping attempts, which can involve the malicious program creating hundreds of events in a single execution as it tries to manipulate the lsass.exe process. Identifying these attempts early can prevent unauthorized access and potential breaches."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Detect use of the Windows 8.3 short name. Which could be used as a method to avoid Image detection.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the use of the Windows 8.3 short name, which could be used as a method to avoid Image detection, you should monitor the process creation logs on Windows systems. Specifically, look for process images that contain the use of Windows 8.3 short names, recognizable by the inclusion of '~1\\' or '~2\\' in their paths. This technique may evade some detection tools that expect full path names.\n\nHowever, not every instance of a short name indicates malicious activity. To refine detection accuracy, apply filters to exclude known legitimate uses. For instance, certain system utilities like Dism.exe and cleanmgr.exe, or third-party software such as InstallShield's setup engine, might legally create processes using short names under normal conditions. These can be identified by their parent image paths or by specific attributes like the product name, description, and company. Additionally, filter out installer-related processes that temporarily use short names within the '\\AppData\\Temp\\' directories for unpacking and installation procedures.\n\nBe aware of generating false positives; applications might occasionally use short name notation for benign reasons. When a detection occurs under these conditions, a deeper investigation into the parent and child processes involved is recommended to discern between malicious behavior and legitimate software operations.\n\nThis approach effectively focuses on identifying potentially malicious use of short names while minimizing disruption from false positive alerts, thanks to the careful consideration of various contexts in which short name usage may be legitimate. Key tags associated with this detection strategy include \"Defense Evasion\" and \"Execution\" tactics, aligning with the MITRE ATT&CK framework by identifying this as a technique that adversaries may use to avoid detection or to execute malicious payloads stealthily.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|contains:\n            - '~1\\'\n            - '~2\\'\n    filter1:\n        - ParentImage:\n            - C:\\Windows\\System32\\Dism.exe\n            - C:\\Windows\\System32\\cleanmgr.exe # Spawns DismHost.exe with a shortened username (if too long)\n        - ParentImage|endswith:\n            - '\\WebEx\\WebexHost.exe' # Spawns a shortened version of the CLI and Image processes\n            - '\\thor\\thor64.exe'\n        - Product: 'InstallShield (R)'\n        - Description: 'InstallShield (R) Setup Engine'\n        - Company: 'InstallShield Software Corporation'\n    filter_installers:\n        - Image|contains|all:\n            - '\\AppData\\'\n            - '\\Temp\\'\n        - Image|endswith:\n            - '~1\\unzip.exe'\n            - '~1\\7zG.exe'\n    condition: selection and not 1 of filter*\nfalsepositives:\n    - Applications could use this notation occasionally which might generate some false positives. In that case Investigate the parent and child process.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|contains:\n            - '~1\\'\n            - '~2\\'\n    filter1:\n        - ParentImage:\n            - C:\\Windows\\System32\\Dism.exe\n            - C:\\Windows\\System32\\cleanmgr.exe # Spawns DismHost.exe with a shortened username (if too long)\n        - ParentImage|endswith:\n            - '\\WebEx\\WebexHost.exe' # Spawns a shortened version of the CLI and Image processes\n            - '\\thor\\thor64.exe'\n        - Product: 'InstallShield (R)'\n        - Description: 'InstallShield (R) Setup Engine'\n        - Company: 'InstallShield Software Corporation'\n    filter_installers:\n        - Image|contains|all:\n            - '\\AppData\\'\n            - '\\Temp\\'\n        - Image|endswith:\n            - '~1\\unzip.exe'\n            - '~1\\7zG.exe'\n    condition: selection and not 1 of filter*\nfalsepositives:\n    - Applications could use this notation occasionally which might generate some false positives. In that case Investigate the parent and child process.\nlevel: medium\n",
      "question": "Detect use of the Windows 8.3 short name. Which could be used as a method to avoid Image detection",
      "answer": "In order to detect the use of the Windows 8.3 short name, which could be used as a method to avoid Image detection, you should monitor the process creation logs on Windows systems. Specifically, look for process images that contain the use of Windows 8.3 short names, recognizable by the inclusion of '~1\\' or '~2\\' in their paths. This technique may evade some detection tools that expect full path names.\n\nHowever, not every instance of a short name indicates malicious activity. To refine detection accuracy, apply filters to exclude known legitimate uses. For instance, certain system utilities like Dism.exe and cleanmgr.exe, or third-party software such as InstallShield's setup engine, might legally create processes using short names under normal conditions. These can be identified by their parent image paths or by specific attributes like the product name, description, and company. Additionally, filter out installer-related processes that temporarily use short names within the '\\AppData\\Temp\\' directories for unpacking and installation procedures.\n\nBe aware of generating false positives; applications might occasionally use short name notation for benign reasons. When a detection occurs under these conditions, a deeper investigation into the parent and child processes involved is recommended to discern between malicious behavior and legitimate software operations.\n\nThis approach effectively focuses on identifying potentially malicious use of short names while minimizing disruption from false positive alerts, thanks to the careful consideration of various contexts in which short name usage may be legitimate. Key tags associated with this detection strategy include \"Defense Evasion\" and \"Execution\" tactics, aligning with the MITRE ATT&CK framework by identifying this as a technique that adversaries may use to avoid detection or to execute malicious payloads stealthily."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting cor_enable_profiling and cor_profiler environment variables being set and configured..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect cor_enable_profiling and cor_profiler environment variables being set and configured, you should: Monitor Windows registry for events where the setting or modification of values occurs, focusing specifically on those instances where the event type is \"Setvalue\". The critical registry keys to watch for alterations include any ending with '\\COR_ENABLE_PROFILING' or '\\COR_PROFILER'. This activity is significant as it indicates potential malicious attempts to manipulate environment variables used by the .NET framework for profiling and debugging, which can be abused to execute arbitrary code or monitor application performance. Such modifications are noteworthy and have been categorized with a high level of importance due to their potential use in cyber attacks, reflecting techniques often utilized in Initial Access and Execution phases of an intrusion.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: Setvalue\n        TargetObject|endswith:\n            - '\\COR_ENABLE_PROFILING'\n            - '\\COR_PROFILER'\n    condition: selection\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: Setvalue\n        TargetObject|endswith:\n            - '\\COR_ENABLE_PROFILING'\n            - '\\COR_PROFILER'\n    condition: selection\nlevel: high\n",
      "question": "cor_enable_profiling and cor_profiler environment variables being set and configured.",
      "answer": "In order to detect cor_enable_profiling and cor_profiler environment variables being set and configured, you should: Monitor Windows registry for events where the setting or modification of values occurs, focusing specifically on those instances where the event type is \"Setvalue\". The critical registry keys to watch for alterations include any ending with '\\COR_ENABLE_PROFILING' or '\\COR_PROFILER'. This activity is significant as it indicates potential malicious attempts to manipulate environment variables used by the .NET framework for profiling and debugging, which can be abused to execute arbitrary code or monitor application performance. Such modifications are noteworthy and have been categorized with a high level of importance due to their potential use in cyber attacks, reflecting techniques often utilized in Initial Access and Execution phases of an intrusion."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Detect successful authentications from countries you do not operate out of..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect successful authentications from countries you do not operate out of, you should focus on monitoring Azure sign-in logs. Specifically, you should look for log entries that indicate a successful sign-in status. However, it is crucial to exclude sign-ins originating from locations or countries where your organization operates. This means if the sign-in attempt comes from any of the countries you do operate out of, these sign-ins should not trigger any alerts. Only successful authentications that originate from countries outside of your operational locations should be considered suspicious. It is important to note that some legitimate activities may sometimes be flagged if they fall outside the expected parameters, such as an approved action by a System Administrator. Therefore, it's vital to review such alerts with a medium level of priority to ascertain their validity. This approach helps in identifying potentially unauthorized or malicious access attempts from geographic locations inconsistent with your organization's normal operational footprint.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: azure\n    service: signinlogs\ndetection:\n    selection:\n        Status: 'Success'\n    filter:\n        Location|contains: '<Countries you DO operate out of e,g GB, use OR for multiple>'\n    condition: selection and not filter\nfalsepositives:\n    - If this was approved by System Administrator.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: azure\n    service: signinlogs\ndetection:\n    selection:\n        Status: 'Success'\n    filter:\n        Location|contains: '<Countries you DO operate out of e,g GB, use OR for multiple>'\n    condition: selection and not filter\nfalsepositives:\n    - If this was approved by System Administrator.\nlevel: medium\n",
      "question": "Detect successful authentications from countries you do not operate out of.",
      "answer": "In order to detect successful authentications from countries you do not operate out of, you should focus on monitoring Azure sign-in logs. Specifically, you should look for log entries that indicate a successful sign-in status. However, it is crucial to exclude sign-ins originating from locations or countries where your organization operates. This means if the sign-in attempt comes from any of the countries you do operate out of, these sign-ins should not trigger any alerts. Only successful authentications that originate from countries outside of your operational locations should be considered suspicious. It is important to note that some legitimate activities may sometimes be flagged if they fall outside the expected parameters, such as an approved action by a System Administrator. Therefore, it's vital to review such alerts with a medium level of priority to ascertain their validity. This approach helps in identifying potentially unauthorized or malicious access attempts from geographic locations inconsistent with your organization's normal operational footprint."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting creation of a new PowerShell module in the first folder of the module directory structure \"\\WindowsPowerShell\\Modules\\malware\\malware.psm1\". This is somewhat an uncommon practice as legitimate modules often includes a version folder..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the creation of a new PowerShell module in the first folder of the module directory structure \"\\WindowsPowerShell\\Modules\\malware\\malware.psm1\", which is somewhat an uncommon practice as legitimate modules often includes a version folder, you should: monitor file events on Windows systems focusing on the creation of files within the \\WindowsPowerShell\\Modules directory. Specifically, look for files ending with extensions \".ps\" or \".dll\" within that directory but omit PowerShell 7's default modules from consideration. The detection of files directly created in the root of the Modules directory, without being nested in a version-specific folder, can be indicative of suspicious activity, since legitimate PowerShell modules typically reside in versioned subdirectories. Keep in mind that the false positive rate may vary across different environments, and additional filtering criteria may be necessary to refine the detection mechanism for production use. The sensitivity level for this detection is set to medium due to the potential for both malicious and benign activities leading to similar artifacts.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: file_event\n    product: windows\ndetection:\n    selection:\n        TargetFilename|endswith:\n            # Note: Don't include PowerShell 7 as it has default modules that don't follow this logic\n            - '\\\\WindowsPowerShell\\\\Modules\\\\*\\.ps'\n            - '\\\\WindowsPowerShell\\\\Modules\\\\*\\.dll'\n    condition: selection\nfalsepositives:\n    - False positive rate will vary depending on the environments. Additional filters might be required to make this logic usable in production.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: file_event\n    product: windows\ndetection:\n    selection:\n        TargetFilename|endswith:\n            # Note: Don't include PowerShell 7 as it has default modules that don't follow this logic\n            - '\\\\WindowsPowerShell\\\\Modules\\\\*\\.ps'\n            - '\\\\WindowsPowerShell\\\\Modules\\\\*\\.dll'\n    condition: selection\nfalsepositives:\n    - False positive rate will vary depending on the environments. Additional filters might be required to make this logic usable in production.\nlevel: medium\n",
      "question": "creation of a new PowerShell module in the first folder of the module directory structure \"\\WindowsPowerShell\\Modules\\malware\\malware.psm1\". This is somewhat an uncommon practice as legitimate modules often includes a version folder.",
      "answer": "In order to detect the creation of a new PowerShell module in the first folder of the module directory structure \"\\WindowsPowerShell\\Modules\\malware\\malware.psm1\", which is somewhat an uncommon practice as legitimate modules often includes a version folder, you should: monitor file events on Windows systems focusing on the creation of files within the \\WindowsPowerShell\\Modules directory. Specifically, look for files ending with extensions \".ps\" or \".dll\" within that directory but omit PowerShell 7's default modules from consideration. The detection of files directly created in the root of the Modules directory, without being nested in a version-specific folder, can be indicative of suspicious activity, since legitimate PowerShell modules typically reside in versioned subdirectories. Keep in mind that the false positive rate may vary across different environments, and additional filtering criteria may be necessary to refine the detection mechanism for production use. The sensitivity level for this detection is set to medium due to the potential for both malicious and benign activities leading to similar artifacts."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    product: windows\n    service: codeintegrity-operational\ndetection:\n    selection:\n        EventID: 3036 # Windows is unable to verify the integrity of the file %2 because the signing certificate has been revoked.  Check with the publisher to see if a new signed version of the kernel module is available.\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect blocked image load events with revoked certificates by code integrity.\n\nHere is how  the given sigma rule operates: In order to detect blocked image load events with revoked certificates by code integrity, you should: Monitor the Windows Code Integrity operational logs for Event ID 3036. This event indicates that Windows cannot verify the integrity of a file because the signing certificate for the file has been revoked. You should check with the software publisher to see if a new, signed version of the kernel module or file is available. This detection is crucial as it points towards attempts to load software or drivers with known vulnerabilities or malicious intent, where the digital signatures have been revoked to maintain system integrity. The occurrence of such an event is considered highly suspicious and is unlikely to produce false positives, implying a high level of confidence in the significance of this alert in identifying potential security threats.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: codeintegrity-operational\ndetection:\n    selection:\n        EventID: 3036 # Windows is unable to verify the integrity of the file %2 because the signing certificate has been revoked.  Check with the publisher to see if a new signed version of the kernel module is available.\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "blocked image load events with revoked certificates by code integrity.",
      "answer": "In order to detect blocked image load events with revoked certificates by code integrity, you should: Monitor the Windows Code Integrity operational logs for Event ID 3036. This event indicates that Windows cannot verify the integrity of a file because the signing certificate for the file has been revoked. You should check with the software publisher to see if a new, signed version of the kernel module or file is available. This detection is crucial as it points towards attempts to load software or drivers with known vulnerabilities or malicious intent, where the digital signatures have been revoked to maintain system integrity. The occurrence of such an event is considered highly suspicious and is unlikely to produce false positives, implying a high level of confidence in the significance of this alert in identifying potential security threats."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'verb:sync'\n            - '-source:RunCommand'\n            - '-dest:runCommand'\n        Image|endswith: '\\msdeploy.exe'\n    condition: selection\nfields:\n    - ComputerName\n    - User\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - System administrator Usage\nlevel: medium\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect file execution using the msdeploy.exe lolbin\n\nHere is how  the given sigma rule operates: In order to detect file execution using the msdeploy.exe lolbin, you should: focus on the creation of processes within Windows environments. Specifically, keep an eye out for processes initiated by the msdeploy.exe application. The critical indicators for this activity include command line arguments that contain 'verb:sync', alongside the parameters '-source:RunCommand' and '-dest:runCommand'. Any occurrence of these specific command line arguments, especially when the process image path ends with '\\msdeploy.exe', should trigger an alert. It's important to capture details such as the name of the computer, user initiating the process, the full command line used, and the parent command line for deeper analysis. Beware, however, that system administrators might legitimately use these commands, which could lead to false positives. This monitoring is considered to have a medium level of importance in identifying potential misuse of the msdeploy.exe binary for executing files, lining up with attack techniques that leverage legitimate but potentially vulnerable or exploitable software found on the system.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'verb:sync'\n            - '-source:RunCommand'\n            - '-dest:runCommand'\n        Image|endswith: '\\msdeploy.exe'\n    condition: selection\nfields:\n    - ComputerName\n    - User\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - System administrator Usage\nlevel: medium\n",
      "question": "file execution using the msdeploy.exe lolbin",
      "answer": "In order to detect file execution using the msdeploy.exe lolbin, you should: focus on the creation of processes within Windows environments. Specifically, keep an eye out for processes initiated by the msdeploy.exe application. The critical indicators for this activity include command line arguments that contain 'verb:sync', alongside the parameters '-source:RunCommand' and '-dest:runCommand'. Any occurrence of these specific command line arguments, especially when the process image path ends with '\\msdeploy.exe', should trigger an alert. It's important to capture details such as the name of the computer, user initiating the process, the full command line used, and the parent command line for deeper analysis. Beware, however, that system administrators might legitimately use these commands, which could lead to false positives. This monitoring is considered to have a medium level of importance in identifying potential misuse of the msdeploy.exe binary for executing files, lining up with attack techniques that leverage legitimate but potentially vulnerable or exploitable software found on the system."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of shells from a parent process located in a temporary (/tmp) directory.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution of shells from a parent process located in a temporary (/tmp) directory, you should: Monitor Linux systems for the creation of processes where the parent process originates from a directory within /tmp and leads to the execution of various shell environments. Specifically, look for parent processes with paths starting in '/tmp/' that result in the creation of processes whose executable paths end in common shell names such as '/bash', '/csh', '/dash', '/fish', '/ksh', '/sh', and '/zsh'. This scenario is flagged with a high level of concern due to its uncommon and potentially malicious nature, although there could be cases where such activity might not signify malicious intent. The detection focuses on logs associated with the creation of processes, enabling the identification of suspicious activity that aligns with tactics and techniques such as Execution and Persistence, which are often utilized in malicious operations.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: linux\n    category: process_creation\ndetection:\n    selection:\n        ParentImage|startswith: '/tmp/'\n        Image|endswith:\n            - '/bash'\n            - '/csh'\n            - '/dash'\n            - '/fish'\n            - '/ksh'\n            - '/sh'\n            - '/zsh'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\n    category: process_creation\ndetection:\n    selection:\n        ParentImage|startswith: '/tmp/'\n        Image|endswith:\n            - '/bash'\n            - '/csh'\n            - '/dash'\n            - '/fish'\n            - '/ksh'\n            - '/sh'\n            - '/zsh'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "execution of shells from a parent process located in a temporary (/tmp) directory",
      "answer": "In order to detect execution of shells from a parent process located in a temporary (/tmp) directory, you should: Monitor Linux systems for the creation of processes where the parent process originates from a directory within /tmp and leads to the execution of various shell environments. Specifically, look for parent processes with paths starting in '/tmp/' that result in the creation of processes whose executable paths end in common shell names such as '/bash', '/csh', '/dash', '/fish', '/ksh', '/sh', and '/zsh'. This scenario is flagged with a high level of concern due to its uncommon and potentially malicious nature, although there could be cases where such activity might not signify malicious intent. The detection focuses on logs associated with the creation of processes, enabling the identification of suspicious activity that aligns with tactics and techniques such as Execution and Persistence, which are often utilized in malicious operations."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting renaming of an existing computer account to a account name that doesn't contain a $ symbol as seen in attacks against CVE-2021-42287.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the renaming of an existing computer account to an account name that doesn't contain a $ symbol as seen in attacks against CVE-2021-42287, you should: Monitor Windows security event logs for event ID 4781, which signifies a user account name change. Specifically, focus on instances where the old target username contains the '$' symbol, indicating it was likely a computer account, and ensure the new target username does not contain the '$' symbol. This pattern suggests an attempt to rename a computer account to a format not typical for such accounts, possibly indicating malicious activity linked to exploiting CVE-2021-42287. Be aware that there might be legitimate reasons for account name changes that do not involve a '$' symbol in the new name; hence, this activity is flagged with a high level of concern but should be investigated to rule out false positives. The key fields to review in the logs are the EventID and the SubjectUserName to understand the scope and nature of the change.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 4781 # rename user\n        OldTargetUserName|contains: '$'\n    filter:\n        NewTargetUserName|contains: '$'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nfields:\n    - EventID\n    - SubjectUserName\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 4781 # rename user\n        OldTargetUserName|contains: '$'\n    filter:\n        NewTargetUserName|contains: '$'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nfields:\n    - EventID\n    - SubjectUserName\nlevel: high\n",
      "question": "renaming of an existing computer account to a account name that doesn't contain a $ symbol as seen in attacks against CVE-2021-42287",
      "answer": "In order to detect the renaming of an existing computer account to an account name that doesn't contain a $ symbol as seen in attacks against CVE-2021-42287, you should: Monitor Windows security event logs for event ID 4781, which signifies a user account name change. Specifically, focus on instances where the old target username contains the '$' symbol, indicating it was likely a computer account, and ensure the new target username does not contain the '$' symbol. This pattern suggests an attempt to rename a computer account to a format not typical for such accounts, possibly indicating malicious activity linked to exploiting CVE-2021-42287. Be aware that there might be legitimate reasons for account name changes that do not involve a '$' symbol in the new name; hence, this activity is flagged with a high level of concern but should be investigated to rule out false positives. The key fields to review in the logs are the EventID and the SubjectUserName to understand the scope and nature of the change."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 6416\n        ClassName: 'DiskDrive'\n    selection2:\n        DeviceDescription: 'USB Mass Storage Device'\n    condition: selection or selection2\nfalsepositives:\n    - Legitimate administrative activity\nlevel: low\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect external diskdrives or plugged in USB devices, EventID 6416 on Windows 10 or later\n\nHere is how  the given sigma rule operates: In order to detect external disk drives or plugged in USB devices, EventID 6416 on Windows 10 or later, you should: Focus on monitoring security logs from Windows-operated systems, specifically looking for events that indicate the detection of an external disk drive or a USB mass storage device. There are two primary detection methods to be aware of. First, watch for logs with EventID 6416 that also mention 'DiskDrive' in the ClassName attribute. This signals that a new disk drive has been detected by the system's security measures. Alternatively, look for logs that specifically describe the new hardware with 'USB Mass Storage Device' in the DeviceDescription. This second method does not rely on the EventID and directly addresses the presence of USB mass storage devices.\n\nBe aware of possible false positives, which may include legitimate administrative activities where external devices are intentionally connected for maintenance or data transfer purposes. Given these circumstances are common, this type of monitoring is considered to have a low-level alert rating. However, it's crucial for cybersecurity defenses as it directly relates to tactics and techniques involving the initial access of systems through external devices, potentially used for delivering malware or stealing information.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 6416\n        ClassName: 'DiskDrive'\n    selection2:\n        DeviceDescription: 'USB Mass Storage Device'\n    condition: selection or selection2\nfalsepositives:\n    - Legitimate administrative activity\nlevel: low\n",
      "question": "external diskdrives or plugged in USB devices, EventID 6416 on Windows 10 or later",
      "answer": "In order to detect external disk drives or plugged in USB devices, EventID 6416 on Windows 10 or later, you should: Focus on monitoring security logs from Windows-operated systems, specifically looking for events that indicate the detection of an external disk drive or a USB mass storage device. There are two primary detection methods to be aware of. First, watch for logs with EventID 6416 that also mention 'DiskDrive' in the ClassName attribute. This signals that a new disk drive has been detected by the system's security measures. Alternatively, look for logs that specifically describe the new hardware with 'USB Mass Storage Device' in the DeviceDescription. This second method does not rely on the EventID and directly addresses the presence of USB mass storage devices.\n\nBe aware of possible false positives, which may include legitimate administrative activities where external devices are intentionally connected for maintenance or data transfer purposes. Given these circumstances are common, this type of monitoring is considered to have a low-level alert rating. However, it's crucial for cybersecurity defenses as it directly relates to tactics and techniques involving the initial access of systems through external devices, potentially used for delivering malware or stealing information."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting potential PowerShell commands or code within registry run keys.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential PowerShell commands or code within registry run keys, you should monitor Windows registry settings specifically for changes, with a focus on those registry keys that control programs which automatically execute when a user logs into a system. The emphasis is on monitoring the registry's \"SetValue\" event types, particularly those affecting the '\\Software\\Microsoft\\Windows\\CurrentVersion\\Run' paths, which also include \"RunOnce\" and \"RunOnceEx\" registry keys. These keys are of interest because they are commonly used by attackers to achieve persistence by ensuring malicious scripts or programs are executed every time the system starts.\n\nDetection should zero in on modifications that include specific PowerShell-related strings within the details of the registry modification. This includes, but is not limited to, instances where PowerShell ('powershell', 'pwsh') is invoked, especially in combination with flags and methods designed to hide the execution window, bypass execution policies, or execute encoded commands. Some key indicators include the presence of strings such as 'FromBase64String', DownloadFile', 'DownloadString', 'Invoke-Expression', 'IEX (', 'Invoke-Command', and 'Invoke-WebRequest'. These can be indicative of attempts to download and execute malicious code from external sources or to execute encoded scripts that are hard to detect through conventional means.\n\nHowever, it's important to consider the potential for false positives, as legitimate administrative scripts or third-party tools may also use similar methods for benign purposes. Establishing a baseline of normal registry and PowerShell usage within your environment will be crucial in distinguishing between malicious activities and legitimate administrative tasks. The level of concern for these detected activities is medium, which implies that while they are not definitively malicious on their own, they warrant further investigation due to their potential misuse by attackers for persistence, script execution, or other unauthorized activities.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|contains: '\\Software\\Microsoft\\Windows\\CurrentVersion\\Run' # Also covers \"RunOnce\" and \"RunOnceEx\"\n        Details|contains:\n            - 'powershell'\n            - 'pwsh '\n            - 'FromBase64String'\n            - '.DownloadFile('\n            - '.DownloadString('\n            - ' -w hidden '\n            - ' -w 1 '\n            - '-windowstyle hidden'\n            - '-window hidden'\n            - ' -nop '\n            - ' -encodedcommand '\n            - '-ExecutionPolicy Bypass'\n            - 'Invoke-Expression'\n            - 'IEX ('\n            - 'Invoke-Command'\n            - 'ICM -'\n            - 'Invoke-WebRequest'\n            - 'IWR '\n            - ' -noni '\n            - ' -noninteractive '\n    condition: selection\nfalsepositives:\n    - Legitimate admin or third party scripts. Baseline according to your environment\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|contains: '\\Software\\Microsoft\\Windows\\CurrentVersion\\Run' # Also covers \"RunOnce\" and \"RunOnceEx\"\n        Details|contains:\n            - 'powershell'\n            - 'pwsh '\n            - 'FromBase64String'\n            - '.DownloadFile('\n            - '.DownloadString('\n            - ' -w hidden '\n            - ' -w 1 '\n            - '-windowstyle hidden'\n            - '-window hidden'\n            - ' -nop '\n            - ' -encodedcommand '\n            - '-ExecutionPolicy Bypass'\n            - 'Invoke-Expression'\n            - 'IEX ('\n            - 'Invoke-Command'\n            - 'ICM -'\n            - 'Invoke-WebRequest'\n            - 'IWR '\n            - ' -noni '\n            - ' -noninteractive '\n    condition: selection\nfalsepositives:\n    - Legitimate admin or third party scripts. Baseline according to your environment\nlevel: medium\n",
      "question": "potential PowerShell commands or code within registry run keys",
      "answer": "In order to detect potential PowerShell commands or code within registry run keys, you should monitor Windows registry settings specifically for changes, with a focus on those registry keys that control programs which automatically execute when a user logs into a system. The emphasis is on monitoring the registry's \"SetValue\" event types, particularly those affecting the '\\Software\\Microsoft\\Windows\\CurrentVersion\\Run' paths, which also include \"RunOnce\" and \"RunOnceEx\" registry keys. These keys are of interest because they are commonly used by attackers to achieve persistence by ensuring malicious scripts or programs are executed every time the system starts.\n\nDetection should zero in on modifications that include specific PowerShell-related strings within the details of the registry modification. This includes, but is not limited to, instances where PowerShell ('powershell', 'pwsh') is invoked, especially in combination with flags and methods designed to hide the execution window, bypass execution policies, or execute encoded commands. Some key indicators include the presence of strings such as 'FromBase64String', DownloadFile', 'DownloadString', 'Invoke-Expression', 'IEX (', 'Invoke-Command', and 'Invoke-WebRequest'. These can be indicative of attempts to download and execute malicious code from external sources or to execute encoded scripts that are hard to detect through conventional means.\n\nHowever, it's important to consider the potential for false positives, as legitimate administrative scripts or third-party tools may also use similar methods for benign purposes. Establishing a baseline of normal registry and PowerShell usage within your environment will be crucial in distinguishing between malicious activities and legitimate administrative tasks. The level of concern for these detected activities is medium, which implies that while they are not definitively malicious on their own, they warrant further investigation due to their potential misuse by attackers for persistence, script execution, or other unauthorized activities."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    product: aws\n    service: cloudtrail\ndetection:\n    selection:\n        eventSource: eks.amazonaws.com\n        eventName:\n            - CreateCluster\n            - DeleteCluster\n    condition: selection\nfalsepositives:\n    - EKS Cluster being created or deleted may be performed by a system administrator.\n    - Verify whether the user identity, user agent, and/or hostname should be making changes in your environment.\n    - EKS Cluster created or deleted from unfamiliar users should be investigated. If known behavior is causing false positives, it can be exempted from the rule.\nlevel: low\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect Identifies when an EKS cluster is created or deleted.\n\nHere is how  the given sigma rule operates: In order to identify when an EKS cluster is created or deleted, you should: Monitor AWS CloudTrail logs for events related to the Amazon Elastic Kubernetes Service (EKS). Specifically, watch for the event sources associated with EKS (eks.amazonaws.com) and the events that indicate the creation or deletion of a cluster, namely \"CreateCluster\" and \"DeleteCluster\". It's crucial to be aware that while detecting these events is essential for security, there are legitimate instances where system administrators may create or delete EKS clusters as part of their regular duties. Therefore, it's recommended to corroborate the actions with the user's identity, user agent, and/or hostname to verify that these operations are expected within your environment. Unfamiliar users performing these operations should be scrutinized more closely. Known behaviors that lead to frequent benign triggers of this detection logic should be documented and possibly exempted to minimize the rate of false positives. The sensitivity of this detection is considered low, indicating that while it's important for comprehensive monitoring, it might not always signify a security issue on its own.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: aws\n    service: cloudtrail\ndetection:\n    selection:\n        eventSource: eks.amazonaws.com\n        eventName:\n            - CreateCluster\n            - DeleteCluster\n    condition: selection\nfalsepositives:\n    - EKS Cluster being created or deleted may be performed by a system administrator.\n    - Verify whether the user identity, user agent, and/or hostname should be making changes in your environment.\n    - EKS Cluster created or deleted from unfamiliar users should be investigated. If known behavior is causing false positives, it can be exempted from the rule.\nlevel: low\n",
      "question": "Identifies when an EKS cluster is created or deleted.",
      "answer": "In order to identify when an EKS cluster is created or deleted, you should: Monitor AWS CloudTrail logs for events related to the Amazon Elastic Kubernetes Service (EKS). Specifically, watch for the event sources associated with EKS (eks.amazonaws.com) and the events that indicate the creation or deletion of a cluster, namely \"CreateCluster\" and \"DeleteCluster\". It's crucial to be aware that while detecting these events is essential for security, there are legitimate instances where system administrators may create or delete EKS clusters as part of their regular duties. Therefore, it's recommended to corroborate the actions with the user's identity, user agent, and/or hostname to verify that these operations are expected within your environment. Unfamiliar users performing these operations should be scrutinized more closely. Known behaviors that lead to frequent benign triggers of this detection logic should be documented and possibly exempted to minimize the rate of false positives. The sensitivity of this detection is considered low, indicating that while it's important for comprehensive monitoring, it might not always signify a security issue on its own."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting exploitation attempt of privilege escalation vulnerability via SetupComplete.cmd and PartnerSetupComplete.cmd described in CVE-2019-1378.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect exploitation attempt of privilege escalation vulnerability via SetupComplete.cmd and PartnerSetupComplete.cmd described in CVE-2019-1378, you should: Monitor process creation events on Windows systems for executions where the parental command line involves 'cmd.exe' with a '/c' directive and references paths within 'C:\\Windows\\Setup\\Scripts\\'. Pay particular attention if the parent command line ends with 'SetupComplete.cmd' or 'PartnerSetupComplete.cmd'. However, exclude from suspicion any activities where the initiated process image starts within the directories 'C:\\Windows\\System32\\', 'C:\\Windows\\SysWOW64\\', 'C:\\Windows\\WinSxS\\', or 'C:\\Windows\\Setup\\'. This targeted monitoring approach helps to identify malicious privilege escalation attempts exploiting the mentioned vulnerability, while reducing the likelihood of flagging legitimate system activities.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentCommandLine|contains|all:\n            - '\\cmd.exe'\n            - '/c'\n            - 'C:\\Windows\\Setup\\Scripts\\'\n        ParentCommandLine|endswith:\n            - 'SetupComplete.cmd'\n            - 'PartnerSetupComplete.cmd'\n    filter:\n        Image|startswith:\n            - 'C:\\Windows\\System32\\'\n            - 'C:\\Windows\\SysWOW64\\'\n            - 'C:\\Windows\\WinSxS\\'\n            - 'C:\\Windows\\Setup\\'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentCommandLine|contains|all:\n            - '\\cmd.exe'\n            - '/c'\n            - 'C:\\Windows\\Setup\\Scripts\\'\n        ParentCommandLine|endswith:\n            - 'SetupComplete.cmd'\n            - 'PartnerSetupComplete.cmd'\n    filter:\n        Image|startswith:\n            - 'C:\\Windows\\System32\\'\n            - 'C:\\Windows\\SysWOW64\\'\n            - 'C:\\Windows\\WinSxS\\'\n            - 'C:\\Windows\\Setup\\'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "exploitation attempt of privilege escalation vulnerability via SetupComplete.cmd and PartnerSetupComplete.cmd described in CVE-2019-1378",
      "answer": "In order to detect exploitation attempt of privilege escalation vulnerability via SetupComplete.cmd and PartnerSetupComplete.cmd described in CVE-2019-1378, you should: Monitor process creation events on Windows systems for executions where the parental command line involves 'cmd.exe' with a '/c' directive and references paths within 'C:\\Windows\\Setup\\Scripts\\'. Pay particular attention if the parent command line ends with 'SetupComplete.cmd' or 'PartnerSetupComplete.cmd'. However, exclude from suspicion any activities where the initiated process image starts within the directories 'C:\\Windows\\System32\\', 'C:\\Windows\\SysWOW64\\', 'C:\\Windows\\WinSxS\\', or 'C:\\Windows\\Setup\\'. This targeted monitoring approach helps to identify malicious privilege escalation attempts exploiting the mentioned vulnerability, while reducing the likelihood of flagging legitimate system activities."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image: '\\AgentExecutor.exe'\n        - OriginalFileName: 'AgentExecutor.exe'\n    selection_cli:\n        # Example:\n        #   AgentExecutor.exe -powershell [scriptPath] [outputFilePath] [errorFilePath] [timeoutFilePath] [timeoutSeconds] [powershellPath] [enforceSignatureCheck] [runAs32BitOn64]\n        # Note:\n        #   - If [timeoutSeconds] is NULL then it defaults to 60000\n        #   - If [enforceSignatureCheck] is:\n        #       - \"NULL\" or \"1\" then a PowerShell instance is spawned with the args: \"-NoProfile -executionPolicy allsigned -file \"\n        #       - Else a PowerShell instance is spawned with the args: \"-NoProfile -executionPolicy bypass -file \"\n        #   - [powershellPath] is always concatendated to \"powershell.exe\"\n        CommandLine|contains:\n            - ' -powershell' # Also covers the \"-powershellDetection\" flag\n            - ' -remediationScript'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate use via Intune management. You exclude script paths and names to reduce FP rate\nlevel: medium\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect execution of the AgentExecutor.exe binary. Which can be abused as a LOLBIN to execute powershell scripts with the ExecutionPolicy \"Bypass\" or any binary named \"powershell.exe\" located in the path provided by 6th positional argument\n\nHere is how  the given sigma rule operates: In order to detect execution of the AgentExecutor.exe binary, which can be abused as a LOLBIN to execute PowerShell scripts with the ExecutionPolicy \"Bypass\" or any binary named \"powershell.exe\" located in the path provided by the 6th positional argument, you should: focus on monitoring the creation of processes on Windows machines. Specifically, keep an eye out for instances where the AgentExecutor.exe file is initiated. This can typically be identified through the image name 'AgentExecutor.exe' or the original file name being exactly 'AgentExecutor.exe'. Additionally, it's crucial to monitor command lines associated with this process for specific flags including ' -powershell' or ' -remediationScript'. These flags indicate that PowerShell may be used, potentially with settings that circumvent execution policy restrictions. This behavior signals a potential security risk, especially if the PowerShell script is executed with a policy set to bypass, which is often a tactic used by malicious actors to execute scripts without triggering security measures. It's important to differentiate between legitimate and suspicious uses of this executable, particularly in environments where Intune management is used, to minimize false positives. Focus on the command lines used with AgentExecutor.exe to distinguish between regular administrative tasks and potentially harmful activities.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image: '\\AgentExecutor.exe'\n        - OriginalFileName: 'AgentExecutor.exe'\n    selection_cli:\n        # Example:\n        #   AgentExecutor.exe -powershell [scriptPath] [outputFilePath] [errorFilePath] [timeoutFilePath] [timeoutSeconds] [powershellPath] [enforceSignatureCheck] [runAs32BitOn64]\n        # Note:\n        #   - If [timeoutSeconds] is NULL then it defaults to 60000\n        #   - If [enforceSignatureCheck] is:\n        #       - \"NULL\" or \"1\" then a PowerShell instance is spawned with the args: \"-NoProfile -executionPolicy allsigned -file \"\n        #       - Else a PowerShell instance is spawned with the args: \"-NoProfile -executionPolicy bypass -file \"\n        #   - [powershellPath] is always concatendated to \"powershell.exe\"\n        CommandLine|contains:\n            - ' -powershell' # Also covers the \"-powershellDetection\" flag\n            - ' -remediationScript'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate use via Intune management. You exclude script paths and names to reduce FP rate\nlevel: medium\n",
      "question": "execution of the AgentExecutor.exe binary. Which can be abused as a LOLBIN to execute powershell scripts with the ExecutionPolicy \"Bypass\" or any binary named \"powershell.exe\" located in the path provided by 6th positional argument",
      "answer": "In order to detect execution of the AgentExecutor.exe binary, which can be abused as a LOLBIN to execute PowerShell scripts with the ExecutionPolicy \"Bypass\" or any binary named \"powershell.exe\" located in the path provided by the 6th positional argument, you should: focus on monitoring the creation of processes on Windows machines. Specifically, keep an eye out for instances where the AgentExecutor.exe file is initiated. This can typically be identified through the image name 'AgentExecutor.exe' or the original file name being exactly 'AgentExecutor.exe'. Additionally, it's crucial to monitor command lines associated with this process for specific flags including ' -powershell' or ' -remediationScript'. These flags indicate that PowerShell may be used, potentially with settings that circumvent execution policy restrictions. This behavior signals a potential security risk, especially if the PowerShell script is executed with a policy set to bypass, which is often a tactic used by malicious actors to execute scripts without triggering security measures. It's important to differentiate between legitimate and suspicious uses of this executable, particularly in environments where Intune management is used, to minimize false positives. Focus on the command lines used with AgentExecutor.exe to distinguish between regular administrative tasks and potentially harmful activities."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting user has been elevated to manage all Azure Subscriptions.\nThis change should be investigated immediately if it isn't planned.\nThis setting could allow an attacker access to Azure subscriptions in your environment.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when a user has been elevated to manage all Azure Subscriptions, which should be investigated immediately if it isn't planned as this setting could allow an attacker access to Azure subscriptions in your environment, you should: Monitor Azure Audit Logs specifically for entries categorized under 'Administrative' activities. Look out for operations named 'Assigns the caller to user access admin'. This action is critical since it represents a case where a user's permissions are being elevated to manage Azure Subscriptions, a capability that should be tightly controlled and monitored. Consider any such activity as high risk and subject to immediate investigation, except in instances where the action was previously approved by a System Administrator, which could be considered a legitimate use of this capability.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: azure\n    service: auditlogs\ndetection:\n    selection:\n        Category: 'Administrative'\n        OperationName: 'Assigns the caller to user access admin'\n    condition: selection\nfalsepositives:\n    - If this was approved by System Administrator.\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: azure\n    service: auditlogs\ndetection:\n    selection:\n        Category: 'Administrative'\n        OperationName: 'Assigns the caller to user access admin'\n    condition: selection\nfalsepositives:\n    - If this was approved by System Administrator.\nlevel: high\n",
      "question": "user has been elevated to manage all Azure Subscriptions.\nThis change should be investigated immediately if it isn't planned.\nThis setting could allow an attacker access to Azure subscriptions in your environment.\n",
      "answer": "In order to detect when a user has been elevated to manage all Azure Subscriptions, which should be investigated immediately if it isn't planned as this setting could allow an attacker access to Azure subscriptions in your environment, you should: Monitor Azure Audit Logs specifically for entries categorized under 'Administrative' activities. Look out for operations named 'Assigns the caller to user access admin'. This action is critical since it represents a case where a user's permissions are being elevated to manage Azure Subscriptions, a capability that should be tightly controlled and monitored. Consider any such activity as high risk and subject to immediate investigation, except in instances where the action was previously approved by a System Administrator, which could be considered a legitimate use of this capability."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting process injection using the signed Windows tool Mavinject32.exe.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect process injection using the signed Windows tool Mavinject32.exe, you should focus on monitoring process creation events within Windows operating systems. Specifically, pay attention to command line arguments that include the \u2018/INJECTRUNNING\u2019 parameter. This particular parameter is indicative of attempts to perform process injection, a dangerous technique used by attackers to execute arbitrary code within the address space of another process. By doing so, attackers can evade detection mechanisms and gain unauthorized access to system resources or sensitive data. Due to the high severity of this attack method, any instances discovered should be investigated promptly to mitigate potential security threats. It's important to note, however, that due to the nature of this detection strategy, there might be situations where legitimate use of this command line argument produces alerts, though such cases are not well-documented and considered to be rare.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains: ' /INJECTRUNNING '\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains: ' /INJECTRUNNING '\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "process injection using the signed Windows tool Mavinject32.exe",
      "answer": "In order to detect process injection using the signed Windows tool Mavinject32.exe, you should focus on monitoring process creation events within Windows operating systems. Specifically, pay attention to command line arguments that include the \u2018/INJECTRUNNING\u2019 parameter. This particular parameter is indicative of attempts to perform process injection, a dangerous technique used by attackers to execute arbitrary code within the address space of another process. By doing so, attackers can evade detection mechanisms and gain unauthorized access to system resources or sensitive data. Due to the high severity of this attack method, any instances discovered should be investigated promptly to mitigate potential security threats. It's important to note, however, that due to the nature of this detection strategy, there might be situations where legitimate use of this command line argument produces alerts, though such cases are not well-documented and considered to be rare."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting creation of a new service using the \"sc.exe\" utility..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the creation of a new service using the \"sc.exe\" utility, you should: Monitor the process creation logs on Windows systems for any instances where the executable path ends with '\\sc.exe', and the command line includes both 'create' and 'binPath'. This activity might indicate an attempt to establish persistence or manage services in a malicious manner, as \"sc.exe\" is a legitimate Windows command-line tool used for managing Windows services, including creating new ones. However, be aware that there might be false positives, such as when a legitimate administrator or user creates a service for a valid reason or during software installation. Given these considerations, the detection sensitivity is set to low to minimize the chance of flagging legitimate activities as suspicious.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\sc.exe'\n        CommandLine|contains|all:\n            - 'create'\n            - 'binPath'\n    condition: selection\nfalsepositives:\n    - Legitimate administrator or user creates a service for legitimate reasons.\n    - Software installation\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\sc.exe'\n        CommandLine|contains|all:\n            - 'create'\n            - 'binPath'\n    condition: selection\nfalsepositives:\n    - Legitimate administrator or user creates a service for legitimate reasons.\n    - Software installation\nlevel: low\n",
      "question": "creation of a new service using the \"sc.exe\" utility.",
      "answer": "In order to detect the creation of a new service using the \"sc.exe\" utility, you should: Monitor the process creation logs on Windows systems for any instances where the executable path ends with '\\sc.exe', and the command line includes both 'create' and 'binPath'. This activity might indicate an attempt to establish persistence or manage services in a malicious manner, as \"sc.exe\" is a legitimate Windows command-line tool used for managing Windows services, including creating new ones. However, be aware that there might be false positives, such as when a legitimate administrator or user creates a service for a valid reason or during software installation. Given these considerations, the detection sensitivity is set to low to minimize the chance of flagging legitimate activities as suspicious."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Adversaries may search the Registry on compromised systems for insecurely stored credentials.\nThe Windows Registry stores configuration information that can be used by the system or other programs.\nAdversaries may query the Registry looking for credentials and passwords that have been stored for use by other programs or services\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect adversaries searching the Registry on compromised systems for insecurely stored credentials, you should monitor for signs of registry querying activities that focus on extracting sensitive information. Specifically, look for the creation of processes associated with the Windows Registry Editor tool, reg.exe. The detection mechanism should trigger alerts when reg.exe processes are observed executing commands that involve querying ('query') the registry with specific parameters targeting string values ('REG_SZ'), conducted in a recursive manner ('/s'), and filtering for types ('/t'). Additionally, detection should be honed in on commands that attempt to search ('/f') within critical registry hives such as HKLM (HKEY_LOCAL_MACHINE) and HKCU (HKEY_CURRENT_USER), including specific paths known to store configurations related to software like PuTTY under HKCU\\Software\\SimonTatham\\PuTTY\\Sessions. Such activities are indicative of attempts by adversaries to retrieve insecurely stored credentials from the registry, which could be used to facilitate further attacks or gains. The level of alert for this detection is considered medium, indicating a noteworthy severity that should prompt investigation, despite the potential for unknown false positives. This approach aligns with the methodology to secure systems against attackers leveraging registry information, particularly focusing on the credential access technique through registry data mining.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    reg:\n        Image|endswith: '\\reg.exe'\n        CommandLine|contains|all:\n            - ' query '\n            - '/t '\n            - 'REG_SZ'\n            - '/s'\n    hive:\n        - CommandLine|contains|all:\n            - '/f '\n            - 'HKLM'\n        - CommandLine|contains|all:\n            - '/f '\n            - 'HKCU'\n        - CommandLine|contains: 'HKCU\\Software\\SimonTatham\\PuTTY\\Sessions'\n    condition: reg and hive\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    reg:\n        Image|endswith: '\\reg.exe'\n        CommandLine|contains|all:\n            - ' query '\n            - '/t '\n            - 'REG_SZ'\n            - '/s'\n    hive:\n        - CommandLine|contains|all:\n            - '/f '\n            - 'HKLM'\n        - CommandLine|contains|all:\n            - '/f '\n            - 'HKCU'\n        - CommandLine|contains: 'HKCU\\Software\\SimonTatham\\PuTTY\\Sessions'\n    condition: reg and hive\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Adversaries may search the Registry on compromised systems for insecurely stored credentials.\nThe Windows Registry stores configuration information that can be used by the system or other programs.\nAdversaries may query the Registry looking for credentials and passwords that have been stored for use by other programs or services\n",
      "answer": "In order to detect adversaries searching the Registry on compromised systems for insecurely stored credentials, you should monitor for signs of registry querying activities that focus on extracting sensitive information. Specifically, look for the creation of processes associated with the Windows Registry Editor tool, reg.exe. The detection mechanism should trigger alerts when reg.exe processes are observed executing commands that involve querying ('query') the registry with specific parameters targeting string values ('REG_SZ'), conducted in a recursive manner ('/s'), and filtering for types ('/t'). Additionally, detection should be honed in on commands that attempt to search ('/f') within critical registry hives such as HKLM (HKEY_LOCAL_MACHINE) and HKCU (HKEY_CURRENT_USER), including specific paths known to store configurations related to software like PuTTY under HKCU\\Software\\SimonTatham\\PuTTY\\Sessions. Such activities are indicative of attempts by adversaries to retrieve insecurely stored credentials from the registry, which could be used to facilitate further attacks or gains. The level of alert for this detection is considered medium, indicating a noteworthy severity that should prompt investigation, despite the potential for unknown false positives. This approach aligns with the methodology to secure systems against attackers leveraging registry information, particularly focusing on the credential access technique through registry data mining."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    #useful_information: Add more office applications to the rule logic of choice\n    selection1:\n        - Image|endswith: '\\wbem\\WMIC.exe'\n        - CommandLine|contains: 'wmic '\n    selection2:\n        ParentImage|endswith:\n            - '\\winword.exe'\n            - '\\excel.exe'\n            - '\\powerpnt.exe'\n            - '\\msaccess.exe'\n            - '\\mspub.exe'\n            - '\\eqnedt32.exe'\n            - '\\visio.exe'\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect Initial execution of malicious document calls wmic to execute the file with regsvr32\n\nHere is how  the given sigma rule operates: In order to detect the initial execution of a malicious document that calls wmic to execute the file with regsvr32, you should: monitor Windows process creation logs for instances where the Windows Management Instrumentation Command-line (WMIC.exe) is initiated, specifically looking for commands containing 'wmic '. Additionally, pay close attention to the parent processes initiating these commands, which should include common Office applications such as Word (winword.exe), Excel (excel.exe), PowerPoint (powerpnt.exe), Access (msaccess.exe), Publisher (mspub.exe), Equation Editor (eqnedt32.exe), and Visio (visio.exe). This combination of events indicates a high likelihood of a malicious document attempting to leverage WMIC for execution, a tactic commonly associated with initial system compromise. Be mindful that false positives are currently unknown, suggesting the need for manual verification of detections.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    #useful_information: Add more office applications to the rule logic of choice\n    selection1:\n        - Image|endswith: '\\wbem\\WMIC.exe'\n        - CommandLine|contains: 'wmic '\n    selection2:\n        ParentImage|endswith:\n            - '\\winword.exe'\n            - '\\excel.exe'\n            - '\\powerpnt.exe'\n            - '\\msaccess.exe'\n            - '\\mspub.exe'\n            - '\\eqnedt32.exe'\n            - '\\visio.exe'\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Initial execution of malicious document calls wmic to execute the file with regsvr32",
      "answer": "In order to detect the initial execution of a malicious document that calls wmic to execute the file with regsvr32, you should: monitor Windows process creation logs for instances where the Windows Management Instrumentation Command-line (WMIC.exe) is initiated, specifically looking for commands containing 'wmic '. Additionally, pay close attention to the parent processes initiating these commands, which should include common Office applications such as Word (winword.exe), Excel (excel.exe), PowerPoint (powerpnt.exe), Access (msaccess.exe), Publisher (mspub.exe), Equation Editor (eqnedt32.exe), and Visio (visio.exe). This combination of events indicates a high likelihood of a malicious document attempting to leverage WMIC for execution, a tactic commonly associated with initial system compromise. Be mindful that false positives are currently unknown, suggesting the need for manual verification of detections."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains: 'UserInitMprLogonScript'\n    condition: selection\nfalsepositives:\n    - Legitimate addition of Logon Scripts via the command line by administrators or third party tools\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect addition of a new LogonScript to the registry value \"UserInitMprLogonScript\" for potential persistence\n\nHere is how  the given sigma rule operates: In order to detect the addition of a new LogonScript to the registry value \"UserInitMprLogonScript\" for potential persistence, you should: monitor process creation logs on Windows systems for instances where the command line contains 'UserInitMprLogonScript'. This activity could indicate attempts at gaining persistence on a system by modifying the logon script settings in the registry. Be aware that there can be legitimate reasons for this event, such as administrators or third party tools adding logon scripts via the command line, hence such instances should be carefully investigated to rule out false positives. The concern is heightened as it is associated with tactics and techniques that aim at maintaining access to a system unobtrusively.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains: 'UserInitMprLogonScript'\n    condition: selection\nfalsepositives:\n    - Legitimate addition of Logon Scripts via the command line by administrators or third party tools\nlevel: high\n",
      "question": "addition of a new LogonScript to the registry value \"UserInitMprLogonScript\" for potential persistence",
      "answer": "In order to detect the addition of a new LogonScript to the registry value \"UserInitMprLogonScript\" for potential persistence, you should: monitor process creation logs on Windows systems for instances where the command line contains 'UserInitMprLogonScript'. This activity could indicate attempts at gaining persistence on a system by modifying the logon script settings in the registry. Be aware that there can be legitimate reasons for this event, such as administrators or third party tools adding logon scripts via the command line, hence such instances should be carefully investigated to rule out false positives. The concern is heightened as it is associated with tactics and techniques that aim at maintaining access to a system unobtrusively."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting method to load DLL via LSASS process using an undocumented Registry key.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a method to load DLL via LSASS process using an undocumented Registry key, you should: Monitor registry events on Windows systems specifically for modifications to the registry keys '\\CurrentControlSet\\Services\\NTDS\\DirectoryServiceExtPt' and '\\CurrentControlSet\\Services\\NTDS\\LsaDbExtPt'. These modifications might indicate attempts to use these undocumented registry keys for the purpose of loading Dynamic Link Libraries (DLLs) into the Local Security Authority Subsystem Service (LSASS) process. It is crucial to exclude events related to the legitimate LSASS executable path 'C:\\Windows\\system32\\lsass.exe' when it loads DLLs from the expected locations '%%systemroot%%\\system32\\ntdsa.dll' and '%%systemroot%%\\system32\\lsadb.dll', as these are recognized and permitted operations. While conducting this monitoring, be aware that false positives are possible and currently classified as unknown; thus, each detected event should be thoroughly investigated. As this behavior is associated with malicious activity, namely the exploitation of systems by loading unauthorized DLLs to manipulate the LSASS process, the alert level for such detections is categorized as high. This method is a tactic employed by adversaries to achieve persistence, execute code, and potentially escalate privileges by injecting malicious code into a process that is critical for the Windows operation, hence its high severity.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_event\n    product: windows\ndetection:\n    selection:\n        TargetObject|contains:\n            - '\\CurrentControlSet\\Services\\NTDS\\DirectoryServiceExtPt'\n            - '\\CurrentControlSet\\Services\\NTDS\\LsaDbExtPt'\n    filter_domain_controller:\n        Image: 'C:\\Windows\\system32\\lsass.exe'\n        Details:\n            - '%%systemroot%%\\system32\\ntdsa.dll'\n            - '%%systemroot%%\\system32\\lsadb.dll'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_event\n    product: windows\ndetection:\n    selection:\n        TargetObject|contains:\n            - '\\CurrentControlSet\\Services\\NTDS\\DirectoryServiceExtPt'\n            - '\\CurrentControlSet\\Services\\NTDS\\LsaDbExtPt'\n    filter_domain_controller:\n        Image: 'C:\\Windows\\system32\\lsass.exe'\n        Details:\n            - '%%systemroot%%\\system32\\ntdsa.dll'\n            - '%%systemroot%%\\system32\\lsadb.dll'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "method to load DLL via LSASS process using an undocumented Registry key",
      "answer": "In order to detect a method to load DLL via LSASS process using an undocumented Registry key, you should: Monitor registry events on Windows systems specifically for modifications to the registry keys '\\CurrentControlSet\\Services\\NTDS\\DirectoryServiceExtPt' and '\\CurrentControlSet\\Services\\NTDS\\LsaDbExtPt'. These modifications might indicate attempts to use these undocumented registry keys for the purpose of loading Dynamic Link Libraries (DLLs) into the Local Security Authority Subsystem Service (LSASS) process. It is crucial to exclude events related to the legitimate LSASS executable path 'C:\\Windows\\system32\\lsass.exe' when it loads DLLs from the expected locations '%%systemroot%%\\system32\\ntdsa.dll' and '%%systemroot%%\\system32\\lsadb.dll', as these are recognized and permitted operations. While conducting this monitoring, be aware that false positives are possible and currently classified as unknown; thus, each detected event should be thoroughly investigated. As this behavior is associated with malicious activity, namely the exploitation of systems by loading unauthorized DLLs to manipulate the LSASS process, the alert level for such detections is categorized as high. This method is a tactic employed by adversaries to achieve persistence, execute code, and potentially escalate privileges by injecting malicious code into a process that is critical for the Windows operation, hence its high severity."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting important or interesting Windows services that got terminated unexpectedly..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect important or interesting Windows services that got terminated unexpectedly, you should: Monitor Windows System logs, specifically looking for events from the Service Control Manager. Focus on Event ID 7034, which indicates a service has terminated unexpectedly. Within these events, pay special attention to any occurrences of 'Message Queuing' within the parameter 'param1' or the presence of binary values '4d0053004d005100' (MSMQ in upper case) and '6d0073006d007100' (msmq in lower case) which both identify the Microsoft Message Queuing service. This detection focuses on ensuring that critical messaging services, which may be essential for the operation of various applications and processes, remain uninterrupted. Tags associated with this detection include Persistence, Privilege Escalation, and Defense Evasion, as unexpected termination of these services could be indicative of malicious activity aimed at disrupting normal operations or preparing for further attacks. Note that while true positives should be investigated promptly due to the high criticality of this detection, bear in mind that service terminations can occur for multiple reasons, so rare false positives can occur.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: system\ndetection:\n    selection_eid:\n        Provider_Name: 'Service Control Manager'\n        EventID: 7034 # The X service terminated unexpectedly. It has done this Y time(s).\n    selection_name:\n        # Note that these names contained in \"param1\" are \"Display Names\" and are language specific. If you're using a non-english system these can and will be different\n        - param1|contains: 'Message Queuing'\n        # Use this If you collect the binary value provided from this event, which is the wide hex encoded value of the service name.\n        - Binary|contains:\n            - '4d0053004d005100' # MSMQ (Microsoft Message Queuing). Encoded in upper case just in case\n            - '6d0073006d007100' # msmq\n    condition: all of selection_*\nfalsepositives:\n    - Rare false positives could occur since service termination could happen due to multiple reasons\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: system\ndetection:\n    selection_eid:\n        Provider_Name: 'Service Control Manager'\n        EventID: 7034 # The X service terminated unexpectedly. It has done this Y time(s).\n    selection_name:\n        # Note that these names contained in \"param1\" are \"Display Names\" and are language specific. If you're using a non-english system these can and will be different\n        - param1|contains: 'Message Queuing'\n        # Use this If you collect the binary value provided from this event, which is the wide hex encoded value of the service name.\n        - Binary|contains:\n            - '4d0053004d005100' # MSMQ (Microsoft Message Queuing). Encoded in upper case just in case\n            - '6d0073006d007100' # msmq\n    condition: all of selection_*\nfalsepositives:\n    - Rare false positives could occur since service termination could happen due to multiple reasons\nlevel: high\n",
      "question": "important or interesting Windows services that got terminated unexpectedly.",
      "answer": "In order to detect important or interesting Windows services that got terminated unexpectedly, you should: Monitor Windows System logs, specifically looking for events from the Service Control Manager. Focus on Event ID 7034, which indicates a service has terminated unexpectedly. Within these events, pay special attention to any occurrences of 'Message Queuing' within the parameter 'param1' or the presence of binary values '4d0053004d005100' (MSMQ in upper case) and '6d0073006d007100' (msmq in lower case) which both identify the Microsoft Message Queuing service. This detection focuses on ensuring that critical messaging services, which may be essential for the operation of various applications and processes, remain uninterrupted. Tags associated with this detection include Persistence, Privilege Escalation, and Defense Evasion, as unexpected termination of these services could be indicative of malicious activity aimed at disrupting normal operations or preparing for further attacks. Note that while true positives should be investigated promptly due to the high criticality of this detection, bear in mind that service terminations can occur for multiple reasons, so rare false positives can occur."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting usage of attrib with the \"+s\" option to set scripts or executables located in suspicious locations as system files to hide them from users and make them unable to be deleted with simple rights. The rule limits the search to specific extensions and directories to avoid FPs\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the usage of attrib with the \"+s\" option to set scripts or executables located in suspicious locations as system files to hide them from users and make them unable to be deleted with simple rights, you should monitor the creation of processes on Windows systems. Specifically, look for instances where the attrib.exe utility is executed, as indicated either by the image name ending with '\\attrib.exe' or the original filename being 'ATTRIB.EXE'. Pay close attention to the command line arguments to identify the use of the '+s' option, which denotes an attempt to change the file attribute to a system file. Additionally, scrutinize the command line for references to specific directories that are commonly targeted for such activities, including user public folders, application data locations, temporary files directories, and download folders. Be wary of attempts to manipulate files with extensions that are commonly associated with scripts and executables, such as '.bat', '.dll', '.exe', '.hta', '.ps1', '.vbe', and '.vbs'. Exclude from detection any commands that are specifically running an executable from the '\\Windows\\TEMP\\' directory to minimize false positives. This approach is designed to pinpoint suspicious use of the attrib command which can be indicative of an attempt to conceal malware or unauthorized scripts by marking them as system files, aligning with tactics and techniques like Defense Evasion and Persistence.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\attrib.exe'\n        - OriginalFileName: 'ATTRIB.EXE'\n    selection_cli:\n        CommandLine|contains: ' +s'\n    selection_paths:\n        CommandLine|contains:\n            - ' %' # Custom Environment variable\n            - '\\Users\\Public\\'\n            - '\\AppData\\Local\\'\n            - '\\ProgramData\\'\n            - '\\Downloads\\'\n            - '\\Windows\\Temp\\'\n    selection_ext:\n        CommandLine|contains:\n            - '.bat'\n            - '.dll'\n            - '.exe'\n            - '.hta'\n            - '.ps1'\n            - '.vbe'\n            - '.vbs'\n    filter:\n        CommandLine|contains|all:\n            - '\\Windows\\TEMP\\'\n            - '.exe'\n    condition: all of selection* and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\attrib.exe'\n        - OriginalFileName: 'ATTRIB.EXE'\n    selection_cli:\n        CommandLine|contains: ' +s'\n    selection_paths:\n        CommandLine|contains:\n            - ' %' # Custom Environment variable\n            - '\\Users\\Public\\'\n            - '\\AppData\\Local\\'\n            - '\\ProgramData\\'\n            - '\\Downloads\\'\n            - '\\Windows\\Temp\\'\n    selection_ext:\n        CommandLine|contains:\n            - '.bat'\n            - '.dll'\n            - '.exe'\n            - '.hta'\n            - '.ps1'\n            - '.vbe'\n            - '.vbs'\n    filter:\n        CommandLine|contains|all:\n            - '\\Windows\\TEMP\\'\n            - '.exe'\n    condition: all of selection* and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "usage of attrib with the \"+s\" option to set scripts or executables located in suspicious locations as system files to hide them from users and make them unable to be deleted with simple rights. The rule limits the search to specific extensions and directories to avoid FPs\n",
      "answer": "In order to detect the usage of attrib with the \"+s\" option to set scripts or executables located in suspicious locations as system files to hide them from users and make them unable to be deleted with simple rights, you should monitor the creation of processes on Windows systems. Specifically, look for instances where the attrib.exe utility is executed, as indicated either by the image name ending with '\\attrib.exe' or the original filename being 'ATTRIB.EXE'. Pay close attention to the command line arguments to identify the use of the '+s' option, which denotes an attempt to change the file attribute to a system file. Additionally, scrutinize the command line for references to specific directories that are commonly targeted for such activities, including user public folders, application data locations, temporary files directories, and download folders. Be wary of attempts to manipulate files with extensions that are commonly associated with scripts and executables, such as '.bat', '.dll', '.exe', '.hta', '.ps1', '.vbe', and '.vbs'. Exclude from detection any commands that are specifically running an executable from the '\\Windows\\TEMP\\' directory to minimize false positives. This approach is designed to pinpoint suspicious use of the attrib command which can be indicative of an attempt to conceal malware or unauthorized scripts by marking them as system files, aligning with tactics and techniques like Defense Evasion and Persistence."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Alert on when a user has performed an eDiscovery search or exported a PST file from the search. This PST file usually has sensitive information including email body content.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to alert on when a user has performed an eDiscovery search or exported a PST file from the search, which usually contains sensitive information including email body content, you should focus on monitoring activities within the Microsoft 365 Threat Management service, specifically those logged by the SecurityComplianceCenter. The activity to be aware of is when an event named 'eDiscovery search started or exported' occurs, with a status of success. This means that an eDiscovery search was successfully initiated or the results were exported, possibly into a PST file. Such activities must be carefully monitored because, while exporting PST files can be a part of regular operations, it involves access to sensitive content, and thus, should always be scrutinized to ensure it aligns with legitimate purposes. The level of concern for these types of activities is considered medium, implying they should not be ignored but also recognized that they can occur as part of normal business operations. Monitoring these activities helps in identifying potentially unauthorized or malicious actions aimed at accessing or exporting sensitive data, which is associated with tactics and techniques like Data Exfiltration and Collection in cybersecurity frameworks such as MITRE ATT&CK.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    service: threat_management\n    product: m365\n    definition: Requires the 'eDiscovery search or exported' alert to be enabled\ndetection:\n    selection:\n        eventSource: SecurityComplianceCenter\n        eventName: 'eDiscovery search started or exported'\n        status: success\n    condition: selection\nfalsepositives:\n    - PST export can be done for legitimate purposes but due to the sensitive nature of its content it must be monitored.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    service: threat_management\n    product: m365\n    definition: Requires the 'eDiscovery search or exported' alert to be enabled\ndetection:\n    selection:\n        eventSource: SecurityComplianceCenter\n        eventName: 'eDiscovery search started or exported'\n        status: success\n    condition: selection\nfalsepositives:\n    - PST export can be done for legitimate purposes but due to the sensitive nature of its content it must be monitored.\nlevel: medium\n",
      "question": "Alert on when a user has performed an eDiscovery search or exported a PST file from the search. This PST file usually has sensitive information including email body content",
      "answer": "In order to alert on when a user has performed an eDiscovery search or exported a PST file from the search, which usually contains sensitive information including email body content, you should focus on monitoring activities within the Microsoft 365 Threat Management service, specifically those logged by the SecurityComplianceCenter. The activity to be aware of is when an event named 'eDiscovery search started or exported' occurs, with a status of success. This means that an eDiscovery search was successfully initiated or the results were exported, possibly into a PST file. Such activities must be carefully monitored because, while exporting PST files can be a part of regular operations, it involves access to sensitive content, and thus, should always be scrutinized to ensure it aligns with legitimate purposes. The level of concern for these types of activities is considered medium, implying they should not be ignored but also recognized that they can occur as part of normal business operations. Monitoring these activities helps in identifying potentially unauthorized or malicious actions aimed at accessing or exporting sensitive data, which is associated with tactics and techniques like Data Exfiltration and Collection in cybersecurity frameworks such as MITRE ATT&CK."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    product: cisco\n    service: aaa\ndetection:\n    keywords:\n        - 'show history'\n        - 'show history all'\n        - 'show logging'\n    condition: keywords\nfields:\n    - CmdSet\nfalsepositives:\n    - Not commonly run by administrators, especially if remote logging is configured\nlevel: medium\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect See what commands are being input into the device by other people, full credentials can be in the history\n\nHere is how  the given sigma rule operates: In order to see what commands are being input into the device by other people, full credentials can be in the history, you should monitor for specific activities that involve examining the command history on devices. Detection focuses on the utilization of AAA (Authentication, Authorization, and Accounting) services within Cisco products. Specifically, one should look out for instances where commands such as 'show history', 'show history all', or 'show logging' are executed. These commands are typically used to view the command history or the logging history on a device, which can include sensitive information such as command inputs or possibly even credentials if they were typed as part of a command.\n\nThe primary fields you'll be concerned with in analyzing and detecting this activity include the command set executed (CmdSet). It is important to note that in environments where administrators commonly do not run these commands, especially if remote logging is configured to centralize log data, executing these commands can be considered unusual and thus a potential indicator of unauthorized access or reconnaissance activities.\n\nGiven the nature of these activities, they are associated with tactics and techniques that include but are not limited to reconnaissance and collection, as they represent an attempt to gather information that could be leveraged for further access or exploitation within the targeted environment.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: cisco\n    service: aaa\ndetection:\n    keywords:\n        - 'show history'\n        - 'show history all'\n        - 'show logging'\n    condition: keywords\nfields:\n    - CmdSet\nfalsepositives:\n    - Not commonly run by administrators, especially if remote logging is configured\nlevel: medium\n",
      "question": "See what commands are being input into the device by other people, full credentials can be in the history",
      "answer": "In order to see what commands are being input into the device by other people, full credentials can be in the history, you should monitor for specific activities that involve examining the command history on devices. Detection focuses on the utilization of AAA (Authentication, Authorization, and Accounting) services within Cisco products. Specifically, one should look out for instances where commands such as 'show history', 'show history all', or 'show logging' are executed. These commands are typically used to view the command history or the logging history on a device, which can include sensitive information such as command inputs or possibly even credentials if they were typed as part of a command.\n\nThe primary fields you'll be concerned with in analyzing and detecting this activity include the command set executed (CmdSet). It is important to note that in environments where administrators commonly do not run these commands, especially if remote logging is configured to centralize log data, executing these commands can be considered unusual and thus a potential indicator of unauthorized access or reconnaissance activities.\n\nGiven the nature of these activities, they are associated with tactics and techniques that include but are not limited to reconnaissance and collection, as they represent an attempt to gather information that could be leveraged for further access or exploitation within the targeted environment."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|contains: '\\SYSTEM\\CurrentControlSet\\Control\\LsaExtensionConfig\\LsaSrv\\Extensions'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect when an attacker modifies the \"REG_MULTI_SZ\" value named \"Extensions\" to include a custom DLL to achieve persistence via lsass.\nThe \"Extensions\" list contains filenames of DLLs being automatically loaded by lsass.exe. Each DLL has its InitializeLsaExtension() method called after loading.\n\n\nHere is how  the given sigma rule operates: In order to detect when an attacker modifies the \"REG_MULTI_SZ\" value named \"Extensions\" to include a custom DLL to achieve persistence via lsass, you should monitor registry setting activities on Windows systems, specifically focusing on events where a SetValue operation occurs. Pay close attention to modifications targeting the registry path `\\SYSTEM\\CurrentControlSet\\Control\\LsaExtensionConfig\\LsaSrv\\Extensions`. This specific registry path is crucial as it stores a list of DLL filenames automatically loaded by the Local Security Authority Subsystem Service (lsass.exe), where each DLL\u2019s `InitializeLsaExtension()` method is called upon loading. Such an unauthorized modification is a red flag for a high-level security threat aimed at achieving malicious persistence on the system by exploiting the way lsass.exe manages its extensions. Tracking changes to this registry value helps in identifying attempts to inject malicious DLLs into the legitimate process of lsass.exe, indicating a potential compromise. The detection of such activities is deemed to have a high level of importance due to the unlikely nature of false positives in this context, indicating that alterations to this registry key are typically not part of regular system operations or benign configurations.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|contains: '\\SYSTEM\\CurrentControlSet\\Control\\LsaExtensionConfig\\LsaSrv\\Extensions'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "when an attacker modifies the \"REG_MULTI_SZ\" value named \"Extensions\" to include a custom DLL to achieve persistence via lsass.\nThe \"Extensions\" list contains filenames of DLLs being automatically loaded by lsass.exe. Each DLL has its InitializeLsaExtension() method called after loading.\n",
      "answer": "In order to detect when an attacker modifies the \"REG_MULTI_SZ\" value named \"Extensions\" to include a custom DLL to achieve persistence via lsass, you should monitor registry setting activities on Windows systems, specifically focusing on events where a SetValue operation occurs. Pay close attention to modifications targeting the registry path `\\SYSTEM\\CurrentControlSet\\Control\\LsaExtensionConfig\\LsaSrv\\Extensions`. This specific registry path is crucial as it stores a list of DLL filenames automatically loaded by the Local Security Authority Subsystem Service (lsass.exe), where each DLL\u2019s `InitializeLsaExtension()` method is called upon loading. Such an unauthorized modification is a red flag for a high-level security threat aimed at achieving malicious persistence on the system by exploiting the way lsass.exe manages its extensions. Tracking changes to this registry value helps in identifying attempts to inject malicious DLLs into the legitimate process of lsass.exe, indicating a potential compromise. The detection of such activities is deemed to have a high level of importance due to the unlikely nature of false positives in this context, indicating that alterations to this registry key are typically not part of regular system operations or benign configurations."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting potential exfiltration by looking for a few compression extensions in the uri and signs of compression in the mime type, file type, and http body\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential exfiltration by looking for a few compression extensions in the uri and signs of compression in the mime type, file type, and http body, you should: Monitor HTTP traffic for specific patterns indicating compressed file transfers. This involves looking for URIs that end with '.7z', '.zip', or '.rar' extensions, which are common compression formats. Additionally, check for MIME types ending with 'compressed' to detect any content type indicating compression. File types and HTTP body contents ending with 'compressed' should also be scrutinized, especially with HTTP PUT methods, as this could signal an attempt to upload compressed files, potentially for malicious purposes. These detection criteria are based on Zeek logs focused on HTTP service activity. While employing this monitoring strategy, be aware of possible legitimate uploads or downloads of compressed archives, as these can generate false positives. The monitoring is considered of medium level due to the balance between the need for security and the potential for disrupting normal business activities.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: zeek\n    service: http\ndetection:\n    selection1:\n        uri|endswith:\n         - '.7z'\n         - '.zip'\n         - '.rar'\n        mime_types|endswith: 'compressed'\n    selection3:\n        filetype|endswith: 'compressed'\n    selection4:\n        http.bodyMagic|endswith: 'compressed'\n        http.method: PUT\n    condition: selection1 or selection3 or selection4\nfalsepositives:\n    - Legitimate upload/download of archives\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: zeek\n    service: http\ndetection:\n    selection1:\n        uri|endswith:\n         - '.7z'\n         - '.zip'\n         - '.rar'\n        mime_types|endswith: 'compressed'\n    selection3:\n        filetype|endswith: 'compressed'\n    selection4:\n        http.bodyMagic|endswith: 'compressed'\n        http.method: PUT\n    condition: selection1 or selection3 or selection4\nfalsepositives:\n    - Legitimate upload/download of archives\nlevel: medium\n",
      "question": "potential exfiltration by looking for a few compression extensions in the uri and signs of compression in the mime type, file type, and http body\n",
      "answer": "In order to detect potential exfiltration by looking for a few compression extensions in the uri and signs of compression in the mime type, file type, and http body, you should: Monitor HTTP traffic for specific patterns indicating compressed file transfers. This involves looking for URIs that end with '.7z', '.zip', or '.rar' extensions, which are common compression formats. Additionally, check for MIME types ending with 'compressed' to detect any content type indicating compression. File types and HTTP body contents ending with 'compressed' should also be scrutinized, especially with HTTP PUT methods, as this could signal an attempt to upload compressed files, potentially for malicious purposes. These detection criteria are based on Zeek logs focused on HTTP service activity. While employing this monitoring strategy, be aware of possible legitimate uploads or downloads of compressed archives, as these can generate false positives. The monitoring is considered of medium level due to the balance between the need for security and the potential for disrupting normal business activities."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Detect use of X509Enrollment.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect use of X509Enrollment, you should monitor the creation of processes on Windows systems for specific command-line arguments that indicate the use of X509Enrollment for potentially malicious purposes. Focus on detecting the presence of either 'X509Enrollment.CBinaryConverter' or the identifier '884e2002-217d-11da-b2a4-000e7bbb2b09' within the command line arguments. These indicators are associated with actions that may utilize the X509Enrollment interface, a component that can be leveraged in various certificate-related operations, potentially including the generation or manipulation of certificates in a manner not intended by system administrators or security policies. It is important to note that while detecting these command-line arguments can point towards malicious activities, there might be legitimate administrative scripts that use this interface for valid reasons. Therefore, any detection should be investigated to distinguish between benign and malicious use, keeping in mind that the detection level is classified as medium due to the possibility of legitimate use cases. The focus on the Windows process creation log source enhances the ability to catch such activities early in their operation.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        CommandLine|contains:\n            - 'X509Enrollment.CBinaryConverter'\n            - '884e2002-217d-11da-b2a4-000e7bbb2b09'\n    condition: selection\nfalsepositives:\n    - Legitimate administrative script\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        CommandLine|contains:\n            - 'X509Enrollment.CBinaryConverter'\n            - '884e2002-217d-11da-b2a4-000e7bbb2b09'\n    condition: selection\nfalsepositives:\n    - Legitimate administrative script\nlevel: medium\n",
      "question": "Detect use of X509Enrollment",
      "answer": "In order to detect use of X509Enrollment, you should monitor the creation of processes on Windows systems for specific command-line arguments that indicate the use of X509Enrollment for potentially malicious purposes. Focus on detecting the presence of either 'X509Enrollment.CBinaryConverter' or the identifier '884e2002-217d-11da-b2a4-000e7bbb2b09' within the command line arguments. These indicators are associated with actions that may utilize the X509Enrollment interface, a component that can be leveraged in various certificate-related operations, potentially including the generation or manipulation of certificates in a manner not intended by system administrators or security policies. It is important to note that while detecting these command-line arguments can point towards malicious activities, there might be legitimate administrative scripts that use this interface for valid reasons. Therefore, any detection should be investigated to distinguish between benign and malicious use, keeping in mind that the detection level is classified as medium due to the possibility of legitimate use cases. The focus on the Windows process creation log source enhances the ability to catch such activities early in their operation."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting when an attacker modifies values of the Disk Cleanup Handler in the registry to achieve persistence via autorun.\nThe disk cleanup manager is part of the operating system.\nIt displays the dialog box [\u2026] The user has the option of enabling or disabling individual handlers by selecting or clearing their check box in the disk cleanup manager's UI.\nAlthough Windows comes with a number of disk cleanup handlers, they aren't designed to handle files produced by other applications.\nInstead, the disk cleanup manager is designed to be flexible and extensible by enabling any developer to implement and register their own disk cleanup handler.\nAny developer can extend the available disk cleanup services by implementing and registering a disk cleanup handler.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when an attacker modifies values of the Disk Cleanup Handler in the registry to achieve persistence via autorun, you should: Monitor the Windows Registry for specific modifications that indicate an attack is taking place. Specifically, focus on the registry category related to settings changes, with emphasis on the Windows product. Detect instances where the event type is SetValue, which suggests that a registry value was modified. Pay close attention to any changes within the path '\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\VolumeCaches\\', as modifications here can relate to the Disk Cleanup Handler.\n\nLook for unauthorized modifications that involve the '\\Autorun' registry key combined with a DWORD value of '0x00000001', indicating an attempt to launch programs without a graphical user interface, potentially during an automated cleanup process. Additionally, monitor for alterations to '\\CleanupString' and '\\PreCleanupString' registry keys. These changes might involve paths or commands associated with common scripting languages or utilities such as 'cmd', 'powershell', 'rundll32', 'mshta', 'cscript', 'wscript', 'wsl', or directories like '\\Users\\Public\\', '\\Windows\\TEMP\\', and '\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\'.\n\nSuch registry modifications are critical to detect because they could indicate that an attacker is trying to gain persistence by executing malicious scripts or programs automatically during disk cleanup operations. Although it's essential to be aware of these indicators, also note that there might be unknown false positives due to the flexible nature of disk cleanup handlers in Windows. This monitoring strategy is situated at a medium level of importance and is associated with tactics and techniques that include persistence via modification of startup tasks or services.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    root:\n        EventType: SetValue\n        TargetObject|contains: '\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\VolumeCaches\\'\n    selection_autorun:\n        # Launching PreCleanupString / CleanupString programs w/o gui, i.e. while using e.g. /autoclean\n        TargetObject|contains: '\\Autorun'\n        Details: 'DWORD (0x00000001)'\n    selection_pre_after:\n        TargetObject|contains:\n            - '\\CleanupString'\n            - '\\PreCleanupString'\n        Details|contains:\n            # Add more as you see fit\n            - 'cmd'\n            - 'powershell'\n            - 'rundll32'\n            - 'mshta'\n            - 'cscript'\n            - 'wscript'\n            - 'wsl'\n            - '\\Users\\Public\\'\n            - '\\Windows\\TEMP\\'\n            - '\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\'\n    condition: root and 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    root:\n        EventType: SetValue\n        TargetObject|contains: '\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\VolumeCaches\\'\n    selection_autorun:\n        # Launching PreCleanupString / CleanupString programs w/o gui, i.e. while using e.g. /autoclean\n        TargetObject|contains: '\\Autorun'\n        Details: 'DWORD (0x00000001)'\n    selection_pre_after:\n        TargetObject|contains:\n            - '\\CleanupString'\n            - '\\PreCleanupString'\n        Details|contains:\n            # Add more as you see fit\n            - 'cmd'\n            - 'powershell'\n            - 'rundll32'\n            - 'mshta'\n            - 'cscript'\n            - 'wscript'\n            - 'wsl'\n            - '\\Users\\Public\\'\n            - '\\Windows\\TEMP\\'\n            - '\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\'\n    condition: root and 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "when an attacker modifies values of the Disk Cleanup Handler in the registry to achieve persistence via autorun.\nThe disk cleanup manager is part of the operating system.\nIt displays the dialog box [\u2026] The user has the option of enabling or disabling individual handlers by selecting or clearing their check box in the disk cleanup manager's UI.\nAlthough Windows comes with a number of disk cleanup handlers, they aren't designed to handle files produced by other applications.\nInstead, the disk cleanup manager is designed to be flexible and extensible by enabling any developer to implement and register their own disk cleanup handler.\nAny developer can extend the available disk cleanup services by implementing and registering a disk cleanup handler.\n",
      "answer": "In order to detect when an attacker modifies values of the Disk Cleanup Handler in the registry to achieve persistence via autorun, you should: Monitor the Windows Registry for specific modifications that indicate an attack is taking place. Specifically, focus on the registry category related to settings changes, with emphasis on the Windows product. Detect instances where the event type is SetValue, which suggests that a registry value was modified. Pay close attention to any changes within the path '\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\VolumeCaches\\', as modifications here can relate to the Disk Cleanup Handler.\n\nLook for unauthorized modifications that involve the '\\Autorun' registry key combined with a DWORD value of '0x00000001', indicating an attempt to launch programs without a graphical user interface, potentially during an automated cleanup process. Additionally, monitor for alterations to '\\CleanupString' and '\\PreCleanupString' registry keys. These changes might involve paths or commands associated with common scripting languages or utilities such as 'cmd', 'powershell', 'rundll32', 'mshta', 'cscript', 'wscript', 'wsl', or directories like '\\Users\\Public\\', '\\Windows\\TEMP\\', and '\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\'.\n\nSuch registry modifications are critical to detect because they could indicate that an attacker is trying to gain persistence by executing malicious scripts or programs automatically during disk cleanup operations. Although it's essential to be aware of these indicators, also note that there might be unknown false positives due to the flexible nature of disk cleanup handlers in Windows. This monitoring strategy is situated at a medium level of importance and is associated with tactics and techniques that include persistence via modification of startup tasks or services."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Detect use of icacls to deny access for everyone in Users folder sometimes used to hide malicious files.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect use of icacls to deny access for everyone in Users folder, sometimes used to hide malicious files, you should monitor for the creation of processes related to the execution of the 'icacls.exe' command, specifically under the Windows operating system. Look for instances where the original file name is marked as 'iCACLS.EXE' or the image path ends with '\\icacls.exe'. Additionally, pay close attention to the command line parameters, particularly commands that include paths starting with 'C:\\Users\\', coupled with the '/deny' parameter and the security identifier '*S-1-1-0:', which corresponds to denying access to the \"Everyone\" group. This combination of path, option, and identifier is a strong indicator that icacls is being used with potentially malicious intent, specifically to modify permissions in the User's folder to conceal unauthorized files. It's worth noting that there may be legitimate uses for these commands, so it is essential to consider the context in which they are being executed to reduce the number of false positives. The detection is based on process creation logs, making it critical to have a comprehensive logging mechanism on Windows machines to effectively monitor and react to such activities.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_icacls:\n        - OriginalFileName: 'iCACLS.EXE'\n        - Image|endswith: '\\icacls.exe'\n    selection_cmd: #icacls \"C:\\Users\\admin\\AppData\\Local\\37f92fe8-bcf0-4ee0-b8ba-561f797f5696\" /deny *S-1-1-0:(OI)(CI)(DE,DC)\n        CommandLine|contains|all:\n            - 'C:\\Users\\'\n            - '/deny'\n            - '*S-1-1-0:'\n    condition: all of selection*\nfalsepositives:\n    - Legitimate use\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_icacls:\n        - OriginalFileName: 'iCACLS.EXE'\n        - Image|endswith: '\\icacls.exe'\n    selection_cmd: #icacls \"C:\\Users\\admin\\AppData\\Local\\37f92fe8-bcf0-4ee0-b8ba-561f797f5696\" /deny *S-1-1-0:(OI)(CI)(DE,DC)\n        CommandLine|contains|all:\n            - 'C:\\Users\\'\n            - '/deny'\n            - '*S-1-1-0:'\n    condition: all of selection*\nfalsepositives:\n    - Legitimate use\nlevel: medium\n",
      "question": "Detect use of icacls to deny access for everyone in Users folder sometimes used to hide malicious files",
      "answer": "In order to detect use of icacls to deny access for everyone in Users folder, sometimes used to hide malicious files, you should monitor for the creation of processes related to the execution of the 'icacls.exe' command, specifically under the Windows operating system. Look for instances where the original file name is marked as 'iCACLS.EXE' or the image path ends with '\\icacls.exe'. Additionally, pay close attention to the command line parameters, particularly commands that include paths starting with 'C:\\Users\\', coupled with the '/deny' parameter and the security identifier '*S-1-1-0:', which corresponds to denying access to the \"Everyone\" group. This combination of path, option, and identifier is a strong indicator that icacls is being used with potentially malicious intent, specifically to modify permissions in the User's folder to conceal unauthorized files. It's worth noting that there may be legitimate uses for these commands, so it is essential to consider the context in which they are being executed to reduce the number of false positives. The detection is based on process creation logs, making it critical to have a comprehensive logging mechanism on Windows machines to effectively monitor and react to such activities."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Detect the use of \"sc.exe\" to change the startup type of a service to \"disabled\" or \"demand\".\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the use of \"sc.exe\" to change the startup type of a service to \"disabled\" or \"demand\", you should: monitor the creation of processes on Windows systems, particularly focusing on instances where the process image ends with '\\sc.exe' or has 'sc.exe' as its original file name. Additionally, pay attention to command line arguments that contain both 'config' and 'start', as well as either 'disabled' or 'demand'. This way, you can detect attempts to modify service startup types, which could be indicative of malicious activity. However, bear in mind that scripts used for troubleshooting might also trigger these conditions and could be considered as false positives. The severity of this detection is categorized as medium. This detection strategy helps safeguard against unauthorized modifications of service startup settings, aligning with tactics that involve the execution of processes in a manner that supports persistence or privilege escalation techniques.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\sc.exe'\n        - OriginalFileName: 'sc.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - ' config '\n            - 'start'\n        CommandLine|contains:\n            - 'disabled'\n            - 'demand'\n    condition: all of selection_*\nfalsepositives:\n    - False positives may occur with troubleshooting scripts\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\sc.exe'\n        - OriginalFileName: 'sc.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - ' config '\n            - 'start'\n        CommandLine|contains:\n            - 'disabled'\n            - 'demand'\n    condition: all of selection_*\nfalsepositives:\n    - False positives may occur with troubleshooting scripts\nlevel: medium\n",
      "question": "Detect the use of \"sc.exe\" to change the startup type of a service to \"disabled\" or \"demand\"",
      "answer": "In order to detect the use of \"sc.exe\" to change the startup type of a service to \"disabled\" or \"demand\", you should: monitor the creation of processes on Windows systems, particularly focusing on instances where the process image ends with '\\sc.exe' or has 'sc.exe' as its original file name. Additionally, pay attention to command line arguments that contain both 'config' and 'start', as well as either 'disabled' or 'demand'. This way, you can detect attempts to modify service startup types, which could be indicative of malicious activity. However, bear in mind that scripts used for troubleshooting might also trigger these conditions and could be considered as false positives. The severity of this detection is categorized as medium. This detection strategy helps safeguard against unauthorized modifications of service startup settings, aligning with tactics that involve the execution of processes in a manner that supports persistence or privilege escalation techniques."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    product: macos\n    category: process_creation\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'osacompile'\n            - ' -x '\n            - ' -e '\n    condition: selection\nfields:\n    - CommandLine\nfalsepositives:\n    - Unknown\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect potential suspicious run-only executions compiled using OSACompile\n\nHere is how  the given sigma rule operates: In order to detect potential suspicious run-only executions compiled using OSACompile, you should monitor process creation logs on macOS systems for instances where the command line contains 'osacompile', along with the flags ' -x ' and ' -e '. This specific combination of command and flags indicates an attempt to compile scripts in a manner that could be utilized for obfuscation or malicious purposes, suggesting a run-only execution which is harder to analyze and reverse-engineer. Pay close attention to the CommandLine field in the logs to catch such activities. Be aware that due to the nature of the detection, there might be instances where legitimate use triggers an alert, although such false positives are not specifically known. The severity level for this activity is considered high, underscoring the importance of monitoring for these specific command line parameters.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: macos\n    category: process_creation\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'osacompile'\n            - ' -x '\n            - ' -e '\n    condition: selection\nfields:\n    - CommandLine\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "potential suspicious run-only executions compiled using OSACompile",
      "answer": "In order to detect potential suspicious run-only executions compiled using OSACompile, you should monitor process creation logs on macOS systems for instances where the command line contains 'osacompile', along with the flags ' -x ' and ' -e '. This specific combination of command and flags indicates an attempt to compile scripts in a manner that could be utilized for obfuscation or malicious purposes, suggesting a run-only execution which is harder to analyze and reverse-engineer. Pay close attention to the CommandLine field in the logs to catch such activities. Be aware that due to the nature of the detection, there might be instances where legitimate use triggers an alert, although such false positives are not specifically known. The severity level for this activity is considered high, underscoring the importance of monitoring for these specific command line parameters."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Microsoft Cloud App Security reported users were active from an IP address identified as risky by Microsoft Threat Intelligence.\nThese IP addresses are involved in malicious activities, such as Botnet C&C, and may indicate compromised account.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when a Microsoft Cloud App Security reported users were active from an IP address identified as risky by Microsoft Threat Intelligence. These IP addresses are involved in malicious activities, such as Botnet C&C, and may indicate compromised account, you should: Monitor for specific events within the Microsoft 365 environment, particularly focusing on the Threat Detection service. Specifically, look for logs from the Security Compliance Center that report activities from IP addresses categorized as suspicious. These are flagged based on their reputation and known malicious activities, such as involvement in Botnet Command and Control (C&C) operations. The specific event to watch for is called \"Activity from suspicious IP addresses,\" and it must have a status of success to be considered relevant. This detection aims to identify potentially compromised accounts acting from IP addresses known for malicious behavior, which is critical for maintaining security within an organization's Microsoft cloud environment. It's important to note that some activities could be flagged as false positives, meaning they are marked as suspicious but do not actually represent malicious behavior. The threat level associated with this detection is considered medium.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    service: threat_detection\n    product: m365\ndetection:\n    selection:\n        eventSource: SecurityComplianceCenter\n        eventName: 'Activity from suspicious IP addresses'\n        status: success\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    service: threat_detection\n    product: m365\ndetection:\n    selection:\n        eventSource: SecurityComplianceCenter\n        eventName: 'Activity from suspicious IP addresses'\n        status: success\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Microsoft Cloud App Security reported users were active from an IP address identified as risky by Microsoft Threat Intelligence.\nThese IP addresses are involved in malicious activities, such as Botnet C&C, and may indicate compromised account.\n",
      "answer": "In order to detect when a Microsoft Cloud App Security reported users were active from an IP address identified as risky by Microsoft Threat Intelligence. These IP addresses are involved in malicious activities, such as Botnet C&C, and may indicate compromised account, you should: Monitor for specific events within the Microsoft 365 environment, particularly focusing on the Threat Detection service. Specifically, look for logs from the Security Compliance Center that report activities from IP addresses categorized as suspicious. These are flagged based on their reputation and known malicious activities, such as involvement in Botnet Command and Control (C&C) operations. The specific event to watch for is called \"Activity from suspicious IP addresses,\" and it must have a status of success to be considered relevant. This detection aims to identify potentially compromised accounts acting from IP addresses known for malicious behavior, which is critical for maintaining security within an organization's Microsoft cloud environment. It's important to note that some activities could be flagged as false positives, meaning they are marked as suspicious but do not actually represent malicious behavior. The threat level associated with this detection is considered medium."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_tools:\n        Image|endswith: '\\sqlcmd.exe'\n    selection_query:\n        CommandLine|contains|all:\n            - 'SELECT'\n            - 'TOP'\n            - '[VeeamBackup].[dbo].[Credentials]'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect dump of credentials in VeeamBackup dbo\n\nHere is how  the given sigma rule operates: In order to detect dump of credentials in VeeamBackup dbo, you should: look for the creation of processes on Windows systems where the process image name ends with '\\sqlcmd.exe'. This is particularly important because the command line used for launching the process includes key elements indicative of a suspicious query, specifically those containing 'SELECT', 'TOP', and '[VeeamBackup].[dbo].[Credentials]'. These elements suggest an attempt to query and possibly exfiltrate credentials from the VeeamBackup database. Such activities are flagged with a high level of concern due to their potential link to tactics and techniques associated with credential access and exfiltration. It's important to monitor for these signs while also being aware that there may be legitimate use cases that could trigger false positives, although these instances are unknown.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_tools:\n        Image|endswith: '\\sqlcmd.exe'\n    selection_query:\n        CommandLine|contains|all:\n            - 'SELECT'\n            - 'TOP'\n            - '[VeeamBackup].[dbo].[Credentials]'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "dump of credentials in VeeamBackup dbo",
      "answer": "In order to detect dump of credentials in VeeamBackup dbo, you should: look for the creation of processes on Windows systems where the process image name ends with '\\sqlcmd.exe'. This is particularly important because the command line used for launching the process includes key elements indicative of a suspicious query, specifically those containing 'SELECT', 'TOP', and '[VeeamBackup].[dbo].[Credentials]'. These elements suggest an attempt to query and possibly exfiltrate credentials from the VeeamBackup database. Such activities are flagged with a high level of concern due to their potential link to tactics and techniques associated with credential access and exfiltration. It's important to monitor for these signs while also being aware that there may be legitimate use cases that could trigger false positives, although these instances are unknown."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\curl.exe'\n        - Product: 'The curl executable'\n    condition: selection\nfalsepositives:\n    - Scripts created by developers and admins\n    - Administrative activity\nlevel: low\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect curl process start on Windows, which could indicates a file download from a remote location or a simple web request to a remote server\n\nHere is how  the given sigma rule operates: In order to detect a curl process start on Windows, which could indicates a file download from a remote location or a simple web request to a remote server, you should: Focus on monitoring process creation events within Windows environments. Specifically, look for the start of a process that is associated with the 'curl.exe' executable, which is often used for downloading files or making web requests from remote servers. This involves checking for event logs that indicate the launch of a process whose image path ends with '\\curl.exe' and is identified as 'The curl executable'. It's important to be aware that there can be legitimate uses of this executable, such as scripts created by developers and admins or for administrative activity, which could result in false positives. The overall threat level for this activity is considered low, but it\u2019s crucial to monitor it as part of a comprehensive security strategy to catch potential malicious activities early. Detection is aligned with understanding MITRE ATT&CK tactics and techniques, though specific tags were not mentioned in the provided context.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\curl.exe'\n        - Product: 'The curl executable'\n    condition: selection\nfalsepositives:\n    - Scripts created by developers and admins\n    - Administrative activity\nlevel: low\n",
      "question": "curl process start on Windows, which could indicates a file download from a remote location or a simple web request to a remote server",
      "answer": "In order to detect a curl process start on Windows, which could indicates a file download from a remote location or a simple web request to a remote server, you should: Focus on monitoring process creation events within Windows environments. Specifically, look for the start of a process that is associated with the 'curl.exe' executable, which is often used for downloading files or making web requests from remote servers. This involves checking for event logs that indicate the launch of a process whose image path ends with '\\curl.exe' and is identified as 'The curl executable'. It's important to be aware that there can be legitimate uses of this executable, such as scripts created by developers and admins or for administrative activity, which could result in false positives. The overall threat level for this activity is considered low, but it\u2019s crucial to monitor it as part of a comprehensive security strategy to catch potential malicious activities early. Detection is aligned with understanding MITRE ATT&CK tactics and techniques, though specific tags were not mentioned in the provided context."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of WMIC with the \"csproduct\" which is used to obtain information such as hardware models and vendor information.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the execution of WMIC with the \"csproduct\" which is used to obtain information such as hardware models and vendor information, you should: monitor for process creation events within Windows systems where the process image ends with '\\wmic.exe' or where the OriginalFileName is explicitly 'wmic.exe'. Additionally, pay attention to command-line executions that contain the string 'csproduct'. The detection encompasses any process creation events that satisfy both criteria regarding the image and command line. Be aware that there might be events that trigger false positives, though these instances are not specifically known. This detection operates at a medium severity level, emphasizing its significance in monitoring for potential reconnaissance activities, where attackers might be gathering system hardware information.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\wmic.exe'\n        - OriginalFileName: 'wmic.exe'\n    selection_cli:\n        CommandLine|contains: 'csproduct'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\wmic.exe'\n        - OriginalFileName: 'wmic.exe'\n    selection_cli:\n        CommandLine|contains: 'csproduct'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "execution of WMIC with the \"csproduct\" which is used to obtain information such as hardware models and vendor information",
      "answer": "In order to detect the execution of WMIC with the \"csproduct\" which is used to obtain information such as hardware models and vendor information, you should: monitor for process creation events within Windows systems where the process image ends with '\\wmic.exe' or where the OriginalFileName is explicitly 'wmic.exe'. Additionally, pay attention to command-line executions that contain the string 'csproduct'. The detection encompasses any process creation events that satisfy both criteria regarding the image and command line. Be aware that there might be events that trigger false positives, though these instances are not specifically known. This detection operates at a medium severity level, emphasizing its significance in monitoring for potential reconnaissance activities, where attackers might be gathering system hardware information."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting program executions in suspicious non-program folders related to malware or hacking activity.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect program executions in suspicious non-program folders related to malware or hacking activity, you should monitor audit logs on Linux systems for system call events (SYSCALL) originating from directories not typically associated with program execution. This includes executions from temporary folders like '/tmp/', various web server directories such as '/var/www/', per-user web directories like '/home/*/public_html/', and different locations where web services might be stored including classical and old Apache directories ('/usr/local/apache2/', '/usr/local/httpd/', '/var/apache/'), SuSE Linux 9.* web server directory ('/srv/www/'), Redhat 6 or older Apache directory ('/home/httpd/html/'), ArchLinux standard web server directories ('/srv/http/', '/usr/share/nginx/html/'), and data directories of commonly exploited services like PostgreSQL ('/var/lib/pgsql/data/'), MySQL ('/usr/local/mysql/data/', '/var/lib/mysql/'), VSFTPD ('/var/vsftpd/'), and BIND ('/etc/bind/', '/var/named/'). \n\nThis monitoring should be attentive to the nature of activities in these directories, acknowledging that false positives could occur due to administrative activities, especially in temporary folders, or unconventional web application behavior. This approach correlates with identifying tactics and techniques such as Execution and Persistence, which attackers employ by executing malware or scripts from directories uncommon for such activities to hide their malicious intents and maintain presence on the infected system.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: linux\n    service: auditd\ndetection:\n    selection:\n        type: 'SYSCALL'\n        exe|startswith:\n            # Temporary folder\n            - '/tmp/'\n            # Web server\n            - '/var/www/'              # Standard\n            - '/home/*/public_html/'   # Per-user\n            - '/usr/local/apache2/'    # Classical Apache\n            - '/usr/local/httpd/'      # Old SuSE Linux 6.* Apache\n            - '/var/apache/'           # Solaris Apache\n            - '/srv/www/'              # SuSE Linux 9.*\n            - '/home/httpd/html/'      # Redhat 6 or older Apache\n            - '/srv/http/'             # ArchLinux standard\n            - '/usr/share/nginx/html/' # ArchLinux nginx\n            # Data dirs of typically exploited services (incomplete list)\n            - '/var/lib/pgsql/data/'\n            - '/usr/local/mysql/data/'\n            - '/var/lib/mysql/'\n            - '/var/vsftpd/'\n            - '/etc/bind/'\n            - '/var/named/'\n    condition: selection\nfalsepositives:\n    - Admin activity (especially in /tmp folders)\n    - Crazy web applications\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\n    service: auditd\ndetection:\n    selection:\n        type: 'SYSCALL'\n        exe|startswith:\n            # Temporary folder\n            - '/tmp/'\n            # Web server\n            - '/var/www/'              # Standard\n            - '/home/*/public_html/'   # Per-user\n            - '/usr/local/apache2/'    # Classical Apache\n            - '/usr/local/httpd/'      # Old SuSE Linux 6.* Apache\n            - '/var/apache/'           # Solaris Apache\n            - '/srv/www/'              # SuSE Linux 9.*\n            - '/home/httpd/html/'      # Redhat 6 or older Apache\n            - '/srv/http/'             # ArchLinux standard\n            - '/usr/share/nginx/html/' # ArchLinux nginx\n            # Data dirs of typically exploited services (incomplete list)\n            - '/var/lib/pgsql/data/'\n            - '/usr/local/mysql/data/'\n            - '/var/lib/mysql/'\n            - '/var/vsftpd/'\n            - '/etc/bind/'\n            - '/var/named/'\n    condition: selection\nfalsepositives:\n    - Admin activity (especially in /tmp folders)\n    - Crazy web applications\nlevel: medium\n",
      "question": "program executions in suspicious non-program folders related to malware or hacking activity",
      "answer": "In order to detect program executions in suspicious non-program folders related to malware or hacking activity, you should monitor audit logs on Linux systems for system call events (SYSCALL) originating from directories not typically associated with program execution. This includes executions from temporary folders like '/tmp/', various web server directories such as '/var/www/', per-user web directories like '/home/*/public_html/', and different locations where web services might be stored including classical and old Apache directories ('/usr/local/apache2/', '/usr/local/httpd/', '/var/apache/'), SuSE Linux 9.* web server directory ('/srv/www/'), Redhat 6 or older Apache directory ('/home/httpd/html/'), ArchLinux standard web server directories ('/srv/http/', '/usr/share/nginx/html/'), and data directories of commonly exploited services like PostgreSQL ('/var/lib/pgsql/data/'), MySQL ('/usr/local/mysql/data/', '/var/lib/mysql/'), VSFTPD ('/var/vsftpd/'), and BIND ('/etc/bind/', '/var/named/'). \n\nThis monitoring should be attentive to the nature of activities in these directories, acknowledging that false positives could occur due to administrative activities, especially in temporary folders, or unconventional web application behavior. This approach correlates with identifying tactics and techniques such as Execution and Persistence, which attackers employ by executing malware or scripts from directories uncommon for such activities to hide their malicious intents and maintain presence on the infected system."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    product: macos\n    category: process_creation\ndetection:\n    selection1:\n        Image: '/usr/sbin/osascript'\n    selection2:\n        CommandLine|contains|all:\n            - '-e'\n            - 'display'\n            - 'dialog'\n            - 'answer'\n    selection3:\n        CommandLine|contains:\n            - 'admin'\n            - 'administrator'\n            - 'authenticate'\n            - 'authentication'\n            - 'credentials'\n            - 'pass'\n            - 'password'\n            - 'unlock'\n    condition: all of selection*\nfalsepositives:\n    - Legitimate administration tools and activities\nlevel: low\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect attempts to use system dialog prompts to capture user credentials\n\nHere is how  the given sigma rule operates: In order to detect attempts to use system dialog prompts to capture user credentials, you should: Focus on monitoring process creation events on macOS. Specifically, watch for instances where the osascript command is executed, which is indicated by the process image path '/usr/sbin/osascript'. The detection efforts should zoom in on command lines that include the elements '-e', 'display', 'dialog', and 'answer', as these flags and strings together suggest a script is attempting to display a dialog to the user. Additionally, scrutinize command lines for presence of key words such as 'admin', 'administrator', 'authenticate', 'authentication', 'credentials', 'pass', 'password', and 'unlock'. These terms could indicate an attempt to present a dialog box designed to deceive a user into entering their credentials. It's important to be aware, though, that this detection strategy might yield false positives, particularly from legitimate administration tools and activities that also use system dialogs for password input or other authentication methods. Therefore, the threat level for these kinds of alerts is considered low.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: macos\n    category: process_creation\ndetection:\n    selection1:\n        Image: '/usr/sbin/osascript'\n    selection2:\n        CommandLine|contains|all:\n            - '-e'\n            - 'display'\n            - 'dialog'\n            - 'answer'\n    selection3:\n        CommandLine|contains:\n            - 'admin'\n            - 'administrator'\n            - 'authenticate'\n            - 'authentication'\n            - 'credentials'\n            - 'pass'\n            - 'password'\n            - 'unlock'\n    condition: all of selection*\nfalsepositives:\n    - Legitimate administration tools and activities\nlevel: low\n",
      "question": "attempts to use system dialog prompts to capture user credentials",
      "answer": "In order to detect attempts to use system dialog prompts to capture user credentials, you should: Focus on monitoring process creation events on macOS. Specifically, watch for instances where the osascript command is executed, which is indicated by the process image path '/usr/sbin/osascript'. The detection efforts should zoom in on command lines that include the elements '-e', 'display', 'dialog', and 'answer', as these flags and strings together suggest a script is attempting to display a dialog to the user. Additionally, scrutinize command lines for presence of key words such as 'admin', 'administrator', 'authenticate', 'authentication', 'credentials', 'pass', 'password', and 'unlock'. These terms could indicate an attempt to present a dialog box designed to deceive a user into entering their credentials. It's important to be aware, though, that this detection strategy might yield false positives, particularly from legitimate administration tools and activities that also use system dialogs for password input or other authentication methods. Therefore, the threat level for these kinds of alerts is considered low."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_pe:\n        - Image|endswith: '\\setspn.exe'\n        - OriginalFileName: 'setspn.exe'\n        - Description|contains|all:\n            - 'Query or reset the computer'\n            - 'SPN attribute'\n    selection_cli:\n        CommandLine|contains: '-q'\n    condition: all of selection_*\nfalsepositives:\n    - Administration activity\nlevel: medium\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect service principal name (SPN) enumeration used for Kerberoasting\n\nHere is how  the given sigma rule operates: In order to detect service principal name (SPN) enumeration used for Kerberoasting, you should monitor for specific activities and conditions indicating the execution of command-line tool operations that are typically associated with this type of attack. This includes monitoring process creation logs on Windows systems for the execution of the `setspn.exe` tool, which is legitimately used for managing SPN registrations but can be abused for enumeration purposes.\n\nDetection should focus on identifying instances where the `setspn.exe` file is executed, which can be identified by the process image name ending with `\\setspn.exe`, or by the original filename being exactly `setspn.exe`. Furthermore, indications that the command is being used for querying or resetting the computer's SPN attribute should be flagged, specifically looking for the `setspn.exe` process description that contains phrases like \"Query or reset the computer\" and \"SPN attribute\". Additionally, any use of the command-line option `-q` with `setspn.exe` should be considered suspicious, as this is a common indicator of querying SPNs, a behavior often seen in Kerberoasting attacks.\n\nIt's important to consider that legitimate administration activities might involve the use of these commands and options, thus, such cases should be regarded as potential false positives. The detection of these events is rated at a medium-level severity, indicating a noticeable security risk, yet acknowledging that there is room for legitimate use in administrative contexts. When monitoring for these activities, it's crucial to correlate them with other suspicious behaviors to accurately identify malicious intent and differentiate it from standard administrative tasks.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_pe:\n        - Image|endswith: '\\setspn.exe'\n        - OriginalFileName: 'setspn.exe'\n        - Description|contains|all:\n            - 'Query or reset the computer'\n            - 'SPN attribute'\n    selection_cli:\n        CommandLine|contains: '-q'\n    condition: all of selection_*\nfalsepositives:\n    - Administration activity\nlevel: medium\n",
      "question": "service principal name (SPN) enumeration used for Kerberoasting",
      "answer": "In order to detect service principal name (SPN) enumeration used for Kerberoasting, you should monitor for specific activities and conditions indicating the execution of command-line tool operations that are typically associated with this type of attack. This includes monitoring process creation logs on Windows systems for the execution of the `setspn.exe` tool, which is legitimately used for managing SPN registrations but can be abused for enumeration purposes.\n\nDetection should focus on identifying instances where the `setspn.exe` file is executed, which can be identified by the process image name ending with `\\setspn.exe`, or by the original filename being exactly `setspn.exe`. Furthermore, indications that the command is being used for querying or resetting the computer's SPN attribute should be flagged, specifically looking for the `setspn.exe` process description that contains phrases like \"Query or reset the computer\" and \"SPN attribute\". Additionally, any use of the command-line option `-q` with `setspn.exe` should be considered suspicious, as this is a common indicator of querying SPNs, a behavior often seen in Kerberoasting attacks.\n\nIt's important to consider that legitimate administration activities might involve the use of these commands and options, thus, such cases should be regarded as potential false positives. The detection of these events is rated at a medium-level severity, indicating a noticeable security risk, yet acknowledging that there is room for legitimate use in administrative contexts. When monitoring for these activities, it's crucial to correlate them with other suspicious behaviors to accurately identify malicious intent and differentiate it from standard administrative tasks."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: registry_event\n    product: windows\ndetection:\n    selection:\n        TargetObject|contains:\n            - 'Software\\Microsoft\\Windows NT\\CurrentVersion\\Accessibility\\ATs'\n            - 'Software\\Microsoft\\Windows NT\\CurrentVersion\\Accessibility\\Configuration'\n    filter_atbroker:\n        Image: 'C:\\Windows\\system32\\atbroker.exe'\n        TargetObject|contains: '\\Microsoft\\Windows NT\\CurrentVersion\\Accessibility\\Configuration'\n        Details: '(Empty)'\n    filter_uninstallers:\n        Image|startswith: 'C:\\Windows\\Installer\\MSI'\n        TargetObject|contains: 'Software\\Microsoft\\Windows NT\\CurrentVersion\\Accessibility\\ATs'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Creation of non-default, legitimate at usage\nlevel: medium\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect creation/modification of Assistive Technology applications and persistence with usage of 'at'\n\nHere is how  the given sigma rule operates: In order to detect creation/modification of Assistive Technology applications and persistence with usage of 'at', you should: Monitor the Windows registry for any creation or modification events specifically under the 'Software\\Microsoft\\Windows NT\\CurrentVersion\\Accessibility\\ATs' and 'Software\\Microsoft\\Windows NT\\CurrentVersion\\Accessibility\\Configuration' registry keys. These registry locations are crucial as they are associated with Assistive Technology applications on Windows systems. It is essential to ignore events generated by the legitimate Assistive Technology broker process, which is executed from 'C:\\Windows\\system32\\atbroker.exe' and targets the '\\Microsoft\\Windows NT\\CurrentVersion\\Accessibility\\Configuration' registry key. In addition, ignore events triggered by uninstaller processes that start with 'C:\\Windows\\Installer\\MSI' and target the 'Software\\Microsoft\\Windows NT\\CurrentVersion\\Accessibility\\ATs' registry key since these might be legitimate removals of applications. Be aware that legitimate creation of non-default Assistive Technologies might also trigger false positives. This monitoring is of medium priority level and could indicate attempts at creating or modifying system configurations for persistence, especially using Assistive Technology applications as a method to achieve this. Further investigation is warranted upon detection to differentiate between legitimate and malicious activities. The related tactics and techniques for this activity include Persistence, Privilege Escalation, and Execution as delineated in the MITRE ATT&CK framework.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_event\n    product: windows\ndetection:\n    selection:\n        TargetObject|contains:\n            - 'Software\\Microsoft\\Windows NT\\CurrentVersion\\Accessibility\\ATs'\n            - 'Software\\Microsoft\\Windows NT\\CurrentVersion\\Accessibility\\Configuration'\n    filter_atbroker:\n        Image: 'C:\\Windows\\system32\\atbroker.exe'\n        TargetObject|contains: '\\Microsoft\\Windows NT\\CurrentVersion\\Accessibility\\Configuration'\n        Details: '(Empty)'\n    filter_uninstallers:\n        Image|startswith: 'C:\\Windows\\Installer\\MSI'\n        TargetObject|contains: 'Software\\Microsoft\\Windows NT\\CurrentVersion\\Accessibility\\ATs'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Creation of non-default, legitimate at usage\nlevel: medium\n",
      "question": "creation/modification of Assistive Technology applications and persistence with usage of 'at'",
      "answer": "In order to detect creation/modification of Assistive Technology applications and persistence with usage of 'at', you should: Monitor the Windows registry for any creation or modification events specifically under the 'Software\\Microsoft\\Windows NT\\CurrentVersion\\Accessibility\\ATs' and 'Software\\Microsoft\\Windows NT\\CurrentVersion\\Accessibility\\Configuration' registry keys. These registry locations are crucial as they are associated with Assistive Technology applications on Windows systems. It is essential to ignore events generated by the legitimate Assistive Technology broker process, which is executed from 'C:\\Windows\\system32\\atbroker.exe' and targets the '\\Microsoft\\Windows NT\\CurrentVersion\\Accessibility\\Configuration' registry key. In addition, ignore events triggered by uninstaller processes that start with 'C:\\Windows\\Installer\\MSI' and target the 'Software\\Microsoft\\Windows NT\\CurrentVersion\\Accessibility\\ATs' registry key since these might be legitimate removals of applications. Be aware that legitimate creation of non-default Assistive Technologies might also trigger false positives. This monitoring is of medium priority level and could indicate attempts at creating or modifying system configurations for persistence, especially using Assistive Technology applications as a method to achieve this. Further investigation is warranted upon detection to differentiate between legitimate and malicious activities. The related tactics and techniques for this activity include Persistence, Privilege Escalation, and Execution as delineated in the MITRE ATT&CK framework."
    }
  },
  {
    "instruction": "Given the following Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\WMIC.exe'\n        - OriginalFileName: 'wmic.exe'\n    selection_cli:\n        CommandLine|contains: '/node:'\n    filter_localhost:\n        CommandLine|contains:\n            - '/node:127.0.0.1 '\n            - '/node:localhost '\n    condition: all of selection_* and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: medium\n\n\ndescribe its goal in free text",
    "context": "",
    "output": "Sure! The goal of the Sigma rule above is to detect execution of WMIC to query information on a remote system\n\nHere is how  the given sigma rule operates: In order to detect the execution of WMIC to query information on a remote system, you should: focus on monitoring process creation events within Windows environments. Specifically, look for the execution of 'WMIC.exe', identifiable either through the process image ending in '\\WMIC.exe' or the OriginalFileName attribute being 'wmic.exe'. Additionally, pay attention to the command line for instances where it contains '/node:', which indicates querying of remote systems. However, it's vital to exclude any command line executions that are aimed at the localhost, marked by '/node:127.0.0.1 ' or '/node:localhost ', as these are not relevant to detecting remote system queries. The detection strategy should encompass all selected conditions excluding any that involve the localhost, and it would be categorized under a medium level of urgency due to the potential false positives, which might be unknown and should be considered during analysis.",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\WMIC.exe'\n        - OriginalFileName: 'wmic.exe'\n    selection_cli:\n        CommandLine|contains: '/node:'\n    filter_localhost:\n        CommandLine|contains:\n            - '/node:127.0.0.1 '\n            - '/node:localhost '\n    condition: all of selection_* and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "execution of WMIC to query information on a remote system",
      "answer": "In order to detect the execution of WMIC to query information on a remote system, you should: focus on monitoring process creation events within Windows environments. Specifically, look for the execution of 'WMIC.exe', identifiable either through the process image ending in '\\WMIC.exe' or the OriginalFileName attribute being 'wmic.exe'. Additionally, pay attention to the command line for instances where it contains '/node:', which indicates querying of remote systems. However, it's vital to exclude any command line executions that are aimed at the localhost, marked by '/node:127.0.0.1 ' or '/node:localhost ', as these are not relevant to detecting remote system queries. The detection strategy should encompass all selected conditions excluding any that involve the localhost, and it would be categorized under a medium level of urgency due to the potential false positives, which might be unknown and should be considered during analysis."
    }
  }
]