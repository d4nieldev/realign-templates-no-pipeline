[
  {
    "instruction": "How can you mitigate T1021.004 (SSH)?\nA.  Blocking the execution of files on a host in accordance with defined application policy rules.\nB.  Modifying system configuration to increase password strength.\nC.  Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\nD.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1021.004 (SSH)",
      "ddmc_optionA": "Blocking the execution of files on a host in accordance with defined application policy rules.",
      "ddmc_optionB": "Modifying system configuration to increase password strength.",
      "ddmc_optionC": "Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.",
      "ddmc_optionD": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "prompts": [],
      "instruction": "How can you mitigate T1021.004 (SSH)?\nA.  Blocking the execution of files on a host in accordance with defined application policy rules.\nB.  Modifying system configuration to increase password strength.\nC.  Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\nD.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Expired Pointer Dereference (CWE-825)?\nA.  Use non-predictable inputs for seed generation.\nB.  Choose a language that provides automatic memory management.\nC.  Developers should anticipate that macro symbols will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.\nD.  Understand the programming language's underlying representation and how it interacts with numeric calculation (CWE-681). Pay close attention to byte size discrepancies, precision, signed/unsigned distinctions, truncation, conversion and casting between types, \"not-a-number\" calculations, and how the language handles numbers that are too large or too small for its underlying representation. [REF-7] Also be careful to account for 32-bit, 64-bit, and other potential differences that may affect the numeric representation.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Expired Pointer Dereference (CWE-825)",
      "ddmc_optionA": "Use non-predictable inputs for seed generation.",
      "ddmc_optionB": "Choose a language that provides automatic memory management.",
      "ddmc_optionC": "Developers should anticipate that macro symbols will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.",
      "ddmc_optionD": "Understand the programming language's underlying representation and how it interacts with numeric calculation (CWE-681). Pay close attention to byte size discrepancies, precision, signed/unsigned distinctions, truncation, conversion and casting between types, \"not-a-number\" calculations, and how the language handles numbers that are too large or too small for its underlying representation. [REF-7] Also be careful to account for 32-bit, 64-bit, and other potential differences that may affect the numeric representation.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Choose a language that provides automatic memory management.",
      "prompts": [],
      "instruction": "What is a method to mitigate Expired Pointer Dereference (CWE-825)?\nA.  Use non-predictable inputs for seed generation.\nB.  Choose a language that provides automatic memory management.\nC.  Developers should anticipate that macro symbols will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.\nD.  Understand the programming language's underlying representation and how it interacts with numeric calculation (CWE-681). Pay close attention to byte size discrepancies, precision, signed/unsigned distinctions, truncation, conversion and casting between types, \"not-a-number\" calculations, and how the language handles numbers that are too large or too small for its underlying representation. [REF-7] Also be careful to account for 32-bit, 64-bit, and other potential differences that may affect the numeric representation.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection') (CWE-95)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives. Automated static analysis generally does not account for environmental considerations when reporting out-of-bounds memory operations. This can make it difficult for users to determine which warnings should be investigated first. For example, an analysis tool might report buffer overflows that originate from command line arguments in a program that is not expected to run with setuid or other special privileges.\nC.  Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection') (CWE-95)",
      "ddmc_optionA": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionB": "This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives. Automated static analysis generally does not account for environmental considerations when reporting out-of-bounds memory operations. This can make it difficult for users to determine which warnings should be investigated first. For example, an analysis tool might report buffer overflows that originate from command line arguments in a program that is not expected to run with setuid or other special privileges.",
      "ddmc_optionC": "Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.",
      "ddmc_optionD": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "How can you detect Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection') (CWE-95)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives. Automated static analysis generally does not account for environmental considerations when reporting out-of-bounds memory operations. This can make it difficult for users to determine which warnings should be investigated first. For example, an analysis tool might report buffer overflows that originate from command line arguments in a program that is not expected to run with setuid or other special privileges.\nC.  Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Passing Mutable Objects to an Untrusted Method (CWE-374)?\nA.  In Windows environments, use proper access control for the associated device or device namespace. See References.\nB.  Perform extensive input validation for any privileged code that must be exposed to the user and reject anything that does not fit your strict requirements.\nC.  Use resource-limiting settings provided by the operating system or environment. For example, when managing system resources in POSIX, setrlimit() can be used to set limits for certain types of resources, and getrlimit() can determine how many resources are available. However, these functions are not available on all operating systems. When the current levels get close to the maximum that is defined for the application (see CWE-770), then limit the allocation of further resources to privileged users; alternately, begin releasing resources for less-privileged users. While this mitigation may protect the system from attack, it will not necessarily stop attackers from adversely impacting other users. Ensure that the application performs the appropriate error checks and error handling in case resources become unavailable (CWE-703).\nD.  Pass in data which should not be altered as constant or immutable.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Passing Mutable Objects to an Untrusted Method (CWE-374)",
      "ddmc_optionA": "In Windows environments, use proper access control for the associated device or device namespace. See References.",
      "ddmc_optionB": "Perform extensive input validation for any privileged code that must be exposed to the user and reject anything that does not fit your strict requirements.",
      "ddmc_optionC": "Use resource-limiting settings provided by the operating system or environment. For example, when managing system resources in POSIX, setrlimit() can be used to set limits for certain types of resources, and getrlimit() can determine how many resources are available. However, these functions are not available on all operating systems. When the current levels get close to the maximum that is defined for the application (see CWE-770), then limit the allocation of further resources to privileged users; alternately, begin releasing resources for less-privileged users. While this mitigation may protect the system from attack, it will not necessarily stop attackers from adversely impacting other users. Ensure that the application performs the appropriate error checks and error handling in case resources become unavailable (CWE-703).",
      "ddmc_optionD": "Pass in data which should not be altered as constant or immutable.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Pass in data which should not be altered as constant or immutable.",
      "prompts": [],
      "instruction": "What is a method to mitigate Passing Mutable Objects to an Untrusted Method (CWE-374)?\nA.  In Windows environments, use proper access control for the associated device or device namespace. See References.\nB.  Perform extensive input validation for any privileged code that must be exposed to the user and reject anything that does not fit your strict requirements.\nC.  Use resource-limiting settings provided by the operating system or environment. For example, when managing system resources in POSIX, setrlimit() can be used to set limits for certain types of resources, and getrlimit() can determine how many resources are available. However, these functions are not available on all operating systems. When the current levels get close to the maximum that is defined for the application (see CWE-770), then limit the allocation of further resources to privileged users; alternately, begin releasing resources for less-privileged users. While this mitigation may protect the system from attack, it will not necessarily stop attackers from adversely impacting other users. Ensure that the application performs the appropriate error checks and error handling in case resources become unavailable (CWE-703).\nD.  Pass in data which should not be altered as constant or immutable.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1614 (System Location Discovery)?\nA.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\nB.  Encrypting a file using a cryptographic key.\nC.  Limiting the transmission of a credential to a scoped set of relying parties.\nD.  Restoring an software configuration.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1614 (System Location Discovery)",
      "ddmc_optionA": "Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.",
      "ddmc_optionB": "Encrypting a file using a cryptographic key.",
      "ddmc_optionC": "Limiting the transmission of a credential to a scoped set of relying parties.",
      "ddmc_optionD": "Restoring an software configuration.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Restoring an software configuration.",
      "prompts": [],
      "instruction": "How can you mitigate T1614 (System Location Discovery)?\nA.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\nB.  Encrypting a file using a cryptographic key.\nC.  Limiting the transmission of a credential to a scoped set of relying parties.\nD.  Restoring an software configuration.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1078.004 (Cloud Accounts)?\nA.  Configuring a kernel to use an allow or deny list to filter kernel api calls.\nB.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nC.  Employing file hash comparisons to detect known malware.\nD.  Using biological measures in order to authenticate a user.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1078.004 (Cloud Accounts)",
      "ddmc_optionA": "Configuring a kernel to use an allow or deny list to filter kernel api calls.",
      "ddmc_optionB": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmc_optionC": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionD": "Using biological measures in order to authenticate a user.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Using biological measures in order to authenticate a user.",
      "prompts": [],
      "instruction": "How can you mitigate T1078.004 (Cloud Accounts)?\nA.  Configuring a kernel to use an allow or deny list to filter kernel api calls.\nB.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nC.  Employing file hash comparisons to detect known malware.\nD.  Using biological measures in order to authenticate a user.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Use of Captured Hashes (Pass The Hash) (CAPEC-644)?\nA.  Authenticate all servers and perform redundant checks when using DNS hostnames.\nB.  Ensure that proper permissions on files and folders are enacted to limit accessibility.\nC.  On the client side, the system's design could make it difficult to get access to the JSON object content via the script tag. Since the JSON object is never assigned locally to a variable, it cannot be readily modified by the attacker before being used by a script tag. For instance, if while(1) was added to the beginning of the JavaScript returned by the server, trying to access it with a script tag would result in an infinite loop. On the other hand, legitimate client side code can remove the while(1) statement after which the JavaScript can be evaluated. A similar result can be achieved by surrounding the returned JavaScript with comment tags, or using other similar techniques (e.g. wrapping the JavaScript with HTML tags).\nD.  Never use implicit intents for inter-application communication.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Use of Captured Hashes (Pass The Hash) (CAPEC-644)",
      "ddmc_optionA": "Authenticate all servers and perform redundant checks when using DNS hostnames.",
      "ddmc_optionB": "Ensure that proper permissions on files and folders are enacted to limit accessibility.",
      "ddmc_optionC": "On the client side, the system's design could make it difficult to get access to the JSON object content via the script tag. Since the JSON object is never assigned locally to a variable, it cannot be readily modified by the attacker before being used by a script tag. For instance, if while(1) was added to the beginning of the JavaScript returned by the server, trying to access it with a script tag would result in an infinite loop. On the other hand, legitimate client side code can remove the while(1) statement after which the JavaScript can be evaluated. A similar result can be achieved by surrounding the returned JavaScript with comment tags, or using other similar techniques (e.g. wrapping the JavaScript with HTML tags).",
      "ddmc_optionD": "Never use implicit intents for inter-application communication.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Authenticate all servers and perform redundant checks when using DNS hostnames.",
      "prompts": [],
      "instruction": "How can you mitigate Use of Captured Hashes (Pass The Hash) (CAPEC-644)?\nA.  Authenticate all servers and perform redundant checks when using DNS hostnames.\nB.  Ensure that proper permissions on files and folders are enacted to limit accessibility.\nC.  On the client side, the system's design could make it difficult to get access to the JSON object content via the script tag. Since the JSON object is never assigned locally to a variable, it cannot be readily modified by the attacker before being used by a script tag. For instance, if while(1) was added to the beginning of the JavaScript returned by the server, trying to access it with a script tag would result in an infinite loop. On the other hand, legitimate client side code can remove the while(1) statement after which the JavaScript can be evaluated. A similar result can be achieved by surrounding the returned JavaScript with comment tags, or using other similar techniques (e.g. wrapping the JavaScript with HTML tags).\nD.  Never use implicit intents for inter-application communication.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Kernel Modules and Extensions (T1547.006)?\nA.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\nB.  Manage the creation, modification, use, and permissions associated to user accounts.\nC.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\nD.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Kernel Modules and Extensions (T1547.006)",
      "ddmc_optionA": "Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.",
      "ddmc_optionB": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmc_optionC": "Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.",
      "ddmc_optionD": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Kernel Modules and Extensions (T1547.006)?\nA.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\nB.  Manage the creation, modification, use, and permissions associated to user accounts.\nC.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\nD.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate T1110.004 (Credential Stuffing)?\nA.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nB.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nC.  Using kernel-level capabilities to isolate processes.\nD.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1110.004 (Credential Stuffing)",
      "ddmc_optionA": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_optionB": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmc_optionC": "Using kernel-level capabilities to isolate processes.",
      "ddmc_optionD": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate T1110.004 (Credential Stuffing)?\nA.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nB.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nC.  Using kernel-level capabilities to isolate processes.\nD.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Steal Application Access Token (T1528)?\nA.  Protect processes with high privileges that can be used to interact with critical system components through use of protected process light, anti-process injection defenses, or other process integrity enforcement measures.\nB.  Block execution of code on a system through application control, and/or script blocking.\nC.  Use intrusion detection signatures to block traffic at network boundaries.\nD.  Manage the creation, modification, use, and permissions associated to user accounts.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Steal Application Access Token (T1528)",
      "ddmc_optionA": "Protect processes with high privileges that can be used to interact with critical system components through use of protected process light, anti-process injection defenses, or other process integrity enforcement measures.",
      "ddmc_optionB": "Block execution of code on a system through application control, and/or script blocking.",
      "ddmc_optionC": "Use intrusion detection signatures to block traffic at network boundaries.",
      "ddmc_optionD": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "prompts": [],
      "instruction": "What is a method to mitigate Steal Application Access Token (T1528)?\nA.  Protect processes with high privileges that can be used to interact with critical system components through use of protected process light, anti-process injection defenses, or other process integrity enforcement measures.\nB.  Block execution of code on a system through application control, and/or script blocking.\nC.  Use intrusion detection signatures to block traffic at network boundaries.\nD.  Manage the creation, modification, use, and permissions associated to user accounts.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Hardware Additions (T1200)?\nA.  Prevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.\nB.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\nC.  Perform regular software updates to mitigate exploitation risk.\nD.  Use secure methods to boot a system and verify the integrity of the operating system and loading mechanisms.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Hardware Additions (T1200)",
      "ddmc_optionA": "Prevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.",
      "ddmc_optionB": "Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.",
      "ddmc_optionC": "Perform regular software updates to mitigate exploitation risk.",
      "ddmc_optionD": "Use secure methods to boot a system and verify the integrity of the operating system and loading mechanisms.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Prevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.",
      "prompts": [],
      "instruction": "What is a method to mitigate Hardware Additions (T1200)?\nA.  Prevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.\nB.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\nC.  Perform regular software updates to mitigate exploitation risk.\nD.  Use secure methods to boot a system and verify the integrity of the operating system and loading mechanisms.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Lateral Tool Transfer (T1570)?\nA.  Restricting network traffic originating from untrusted networks destined towards a private host or enclave.\nB.  Collecting network communication protocol metadata and identifying statistical outliers.\nC.  Restoring a entity's access to a computer network.\nD.  Replacing old software on a computer system component.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Lateral Tool Transfer (T1570)",
      "ddmc_optionA": "Restricting network traffic originating from untrusted networks destined towards a private host or enclave.",
      "ddmc_optionB": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmc_optionC": "Restoring a entity's access to a computer network.",
      "ddmc_optionD": "Replacing old software on a computer system component.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "prompts": [],
      "instruction": "How can you mitigate Lateral Tool Transfer (T1570)?\nA.  Restricting network traffic originating from untrusted networks destined towards a private host or enclave.\nB.  Collecting network communication protocol metadata and identifying statistical outliers.\nC.  Restoring a entity's access to a computer network.\nD.  Replacing old software on a computer system component.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Port Knocking (T1205.001)?\nA.  Characterizing the reputation of mail transfer agents (MTA) to determine the security risk in emails.\nB.  Blocking the execution of files on a host in accordance with defined application policy rules.\nC.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\nD.  Restoring a file for an entity to access.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Port Knocking (T1205.001)",
      "ddmc_optionA": "Characterizing the reputation of mail transfer agents (MTA) to determine the security risk in emails.",
      "ddmc_optionB": "Blocking the execution of files on a host in accordance with defined application policy rules.",
      "ddmc_optionC": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "ddmc_optionD": "Restoring a file for an entity to access.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "prompts": [],
      "instruction": "How can you mitigate Port Knocking (T1205.001)?\nA.  Characterizing the reputation of mail transfer agents (MTA) to determine the security risk in emails.\nB.  Blocking the execution of files on a host in accordance with defined application policy rules.\nC.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\nD.  Restoring a file for an entity to access.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG) (CWE-338)?\nA.  This kind of patch may not be feasible or implementable for all processors or all weaknesses.\nB.  When processing structured incoming data containing a size field followed by raw data, ensure that you identify and resolve any inconsistencies between the size field and the actual size of the data.\nC.  Use functions or hardware which use a hardware-based random number generation for all crypto. This is the recommended solution. Use CyptGenRandom on Windows, or hw_rand() on Linux.\nD.  A true random number generator should be implemented for cryptographic algorithms.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG) (CWE-338)",
      "ddmc_optionA": "This kind of patch may not be feasible or implementable for all processors or all weaknesses.",
      "ddmc_optionB": "When processing structured incoming data containing a size field followed by raw data, ensure that you identify and resolve any inconsistencies between the size field and the actual size of the data.",
      "ddmc_optionC": "Use functions or hardware which use a hardware-based random number generation for all crypto. This is the recommended solution. Use CyptGenRandom on Windows, or hw_rand() on Linux.",
      "ddmc_optionD": "A true random number generator should be implemented for cryptographic algorithms.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Use functions or hardware which use a hardware-based random number generation for all crypto. This is the recommended solution. Use CyptGenRandom on Windows, or hw_rand() on Linux.",
      "prompts": [],
      "instruction": "How can you mitigate Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG) (CWE-338)?\nA.  This kind of patch may not be feasible or implementable for all processors or all weaknesses.\nB.  When processing structured incoming data containing a size field followed by raw data, ensure that you identify and resolve any inconsistencies between the size field and the actual size of the data.\nC.  Use functions or hardware which use a hardware-based random number generation for all crypto. This is the recommended solution. Use CyptGenRandom on Windows, or hw_rand() on Linux.\nD.  A true random number generator should be implemented for cryptographic algorithms.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Network Topology (T1590.004)?\nA.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nB.  Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.\nC.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\nD.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Network Topology (T1590.004)",
      "ddmc_optionA": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
      "ddmc_optionB": "Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.",
      "ddmc_optionC": "Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.",
      "ddmc_optionD": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Network Topology (T1590.004)?\nA.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nB.  Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.\nC.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\nD.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate File and Directory Discovery (T1083)?\nA.  Restricting system configuration modifications to a specific user or group of users.\nB.  The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "File and Directory Discovery (T1083)",
      "ddmc_optionA": "Restricting system configuration modifications to a specific user or group of users.",
      "ddmc_optionB": "The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.",
      "ddmc_optionC": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionD": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate File and Directory Discovery (T1083)?\nA.  Restricting system configuration modifications to a specific user or group of users.\nB.  The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate CMSTP (T1218.003)?\nA.  Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.\nB.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\nC.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nD.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CMSTP (T1218.003)",
      "ddmc_optionA": "Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.",
      "ddmc_optionB": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "ddmc_optionC": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_optionD": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate CMSTP (T1218.003)?\nA.  Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.\nB.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\nC.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nD.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate T1574.010 (Services File Permissions Weakness)?\nA.  Detecting any suspicious changes to files in a computer system.\nB.  Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.\nC.  Encrypting a file using a cryptographic key.\nD.  Removing tokens or credentials from an authentication cache to prevent further user associated account accesses.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1574.010 (Services File Permissions Weakness)",
      "ddmc_optionA": "Detecting any suspicious changes to files in a computer system.",
      "ddmc_optionB": "Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.",
      "ddmc_optionC": "Encrypting a file using a cryptographic key.",
      "ddmc_optionD": "Removing tokens or credentials from an authentication cache to prevent further user associated account accesses.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate T1574.010 (Services File Permissions Weakness)?\nA.  Detecting any suspicious changes to files in a computer system.\nB.  Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.\nC.  Encrypting a file using a cryptographic key.\nD.  Removing tokens or credentials from an authentication cache to prevent further user associated account accesses.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Phishing (CAPEC-98)?\nA.  Implementation: Perform proper HTML encoding and URL escaping\nB.  Pay attention to concurrency problems related to the access of resources.\nC.  Use hardware security modules/trusted platform modules to verify authenticity using hardware-based cryptography.\nD.  Design: Use browser technologies that do not allow client side scripting.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Phishing (CAPEC-98)",
      "ddmc_optionA": "Implementation: Perform proper HTML encoding and URL escaping",
      "ddmc_optionB": "Pay attention to concurrency problems related to the access of resources.",
      "ddmc_optionC": "Use hardware security modules/trusted platform modules to verify authenticity using hardware-based cryptography.",
      "ddmc_optionD": "Design: Use browser technologies that do not allow client side scripting.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Design: Use browser technologies that do not allow client side scripting.",
      "prompts": [],
      "instruction": "What is a method to mitigate Phishing (CAPEC-98)?\nA.  Implementation: Perform proper HTML encoding and URL escaping\nB.  Pay attention to concurrency problems related to the access of resources.\nC.  Use hardware security modules/trusted platform modules to verify authenticity using hardware-based cryptography.\nD.  Design: Use browser technologies that do not allow client side scripting.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate System Owner/User Discovery (T1033)?\nA.  Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.\nB.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nC.  Credential Eviction techniques disable or remove compromised credentials from a computer network.\nD.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "System Owner/User Discovery (T1033)",
      "ddmc_optionA": "Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.",
      "ddmc_optionB": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionC": "Credential Eviction techniques disable or remove compromised credentials from a computer network.",
      "ddmc_optionD": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "prompts": [],
      "instruction": "What is a method to mitigate System Owner/User Discovery (T1033)?\nA.  Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.\nB.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nC.  Credential Eviction techniques disable or remove compromised credentials from a computer network.\nD.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Rogue Domain Controller (T1207)?\nA.  Blocking DNS Network Traffic based on criteria such as IP address, domain name, or DNS query type.\nB.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  Restricting system configuration modifications to a specific user or group of users.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Rogue Domain Controller (T1207)",
      "ddmc_optionA": "Blocking DNS Network Traffic based on criteria such as IP address, domain name, or DNS query type.",
      "ddmc_optionB": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmc_optionC": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionD": "Restricting system configuration modifications to a specific user or group of users.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Restricting system configuration modifications to a specific user or group of users.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Rogue Domain Controller (T1207)?\nA.  Blocking DNS Network Traffic based on criteria such as IP address, domain name, or DNS query type.\nB.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  Restricting system configuration modifications to a specific user or group of users.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Port Knocking (T1205.001)?\nA.  Collecting network communication protocol metadata and identifying statistical outliers.\nB.  Restoring a user account's access to resources by unlocking a locked User Account.\nC.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\nD.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Port Knocking (T1205.001)",
      "ddmc_optionA": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmc_optionB": "Restoring a user account's access to resources by unlocking a locked User Account.",
      "ddmc_optionC": "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.",
      "ddmc_optionD": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "prompts": [],
      "instruction": "How can you mitigate Port Knocking (T1205.001)?\nA.  Collecting network communication protocol metadata and identifying statistical outliers.\nB.  Restoring a user account's access to resources by unlocking a locked User Account.\nC.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\nD.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Embed Virus into DLL (CAPEC-448)?\nA.  Regenerate and destroy session identifiers when there is a change in the level of privilege: This ensures that even though a potential victim may have followed a link with a fixated identifier, a new one is issued when the level of privilege changes.\nB.  Even if a piece of software has a valid and trusted digital signature, it should be assessed for any weaknesses and vulnerabilities.\nC.  Leverage anti-virus products to detect and quarantine software with known virus.\nD.  If using the Firefox browser, use the NoScript plug-in that will help forbid iFrames.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Embed Virus into DLL (CAPEC-448)",
      "ddmc_optionA": "Regenerate and destroy session identifiers when there is a change in the level of privilege: This ensures that even though a potential victim may have followed a link with a fixated identifier, a new one is issued when the level of privilege changes.",
      "ddmc_optionB": "Even if a piece of software has a valid and trusted digital signature, it should be assessed for any weaknesses and vulnerabilities.",
      "ddmc_optionC": "Leverage anti-virus products to detect and quarantine software with known virus.",
      "ddmc_optionD": "If using the Firefox browser, use the NoScript plug-in that will help forbid iFrames.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Leverage anti-virus products to detect and quarantine software with known virus.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Embed Virus into DLL (CAPEC-448)?\nA.  Regenerate and destroy session identifiers when there is a change in the level of privilege: This ensures that even though a potential victim may have followed a link with a fixated identifier, a new one is issued when the level of privilege changes.\nB.  Even if a piece of software has a valid and trusted digital signature, it should be assessed for any weaknesses and vulnerabilities.\nC.  Leverage anti-virus products to detect and quarantine software with known virus.\nD.  If using the Firefox browser, use the NoScript plug-in that will help forbid iFrames.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1539 (Steal Web Session Cookie)?\nA.  A file created for the purposes of deceiving an adversary.\nB.  Determining which credentials may have been compromised by analyzing the user logon history of a particular system.\nC.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nD.  Blocking the execution of files on a host in accordance with defined application policy rules.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1539 (Steal Web Session Cookie)",
      "ddmc_optionA": "A file created for the purposes of deceiving an adversary.",
      "ddmc_optionB": "Determining which credentials may have been compromised by analyzing the user logon history of a particular system.",
      "ddmc_optionC": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionD": "Blocking the execution of files on a host in accordance with defined application policy rules.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Determining which credentials may have been compromised by analyzing the user logon history of a particular system.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1539 (Steal Web Session Cookie)?\nA.  A file created for the purposes of deceiving an adversary.\nB.  Determining which credentials may have been compromised by analyzing the user logon history of a particular system.\nC.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nD.  Blocking the execution of files on a host in accordance with defined application policy rules.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Group Policy Preferences (T1552.006)?\nA.  Using a digital signature to authenticate a file before opening.\nB.  Restricting network traffic originating from a private host or enclave destined towards untrusted networks.\nC.  Removing tokens or credentials from an authentication cache to prevent further user associated account accesses.\nD.  Access modeling identifies and records the access permissions granted to administrators, users, groups, and systems.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Group Policy Preferences (T1552.006)",
      "ddmc_optionA": "Using a digital signature to authenticate a file before opening.",
      "ddmc_optionB": "Restricting network traffic originating from a private host or enclave destined towards untrusted networks.",
      "ddmc_optionC": "Removing tokens or credentials from an authentication cache to prevent further user associated account accesses.",
      "ddmc_optionD": "Access modeling identifies and records the access permissions granted to administrators, users, groups, and systems.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Access modeling identifies and records the access permissions granted to administrators, users, groups, and systems.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Group Policy Preferences (T1552.006)?\nA.  Using a digital signature to authenticate a file before opening.\nB.  Restricting network traffic originating from a private host or enclave destined towards untrusted networks.\nC.  Removing tokens or credentials from an authentication cache to prevent further user associated account accesses.\nD.  Access modeling identifies and records the access permissions granted to administrators, users, groups, and systems.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Power Settings (T1653)?\nA.  Once adversaries leverage the abused web service as infrastructure (ex: for command and control), it may be possible to look for unique characteristics associated with adversary software, if known. Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Command and Control (Web Service) or Exfiltration Over Web Service.(Citations: ThreatConnect Infrastructure Dec 2020)\nB.  Look for inconsistencies between the various fields that store PPID information, such as the EventHeader ProcessId from data collected via Event Tracing for Windows (ETW), Creator Process ID/Name from Windows event logs, and the ProcessID and ParentProcessID (which are also produced from ETW and other utilities such as Task Manager and Process Explorer). The ETW provided EventHeader ProcessId identifies the actual parent process. Monitor and analyze API calls to <code>CreateProcess</code>/<code>CreateProcessA</code>, specifically those from user/potentially malicious processes and with parameters explicitly assigning PPIDs (ex: the Process Creation Flags of 0x8XXX, indicating that the process is being created with extended startup information). Malicious use of <code>CreateProcess</code>/<code>CreateProcessA</code> may also be proceeded by a call to <code>UpdateProcThreadAttribute</code>, which may be necessary to update process creation attributes. This may generate false positives from normal UAC elevation behavior, so compare to a system baseline/understanding of normal system activity if possible.(Citations: CounterCept PPID Spoofing Dec 2018, Microsoft Process Creation Flags May 2018, Secuirtyinbits Ataware3 May 2019)\nC.  File monitoring may be used to detect changes to files in the Web directory for organization login pages that do not match with authorized updates to the Web server's content.\nD.  Command-line invocation of tools capable of modifying services may be unusual and can be monitored for and alerted on, depending on how systems are typically used in a particular environment.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Power Settings (T1653)",
      "ddmc_optionA": "Once adversaries leverage the abused web service as infrastructure (ex: for command and control), it may be possible to look for unique characteristics associated with adversary software, if known. Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Command and Control (Web Service) or Exfiltration Over Web Service.(Citations: ThreatConnect Infrastructure Dec 2020)",
      "ddmc_optionB": "Look for inconsistencies between the various fields that store PPID information, such as the EventHeader ProcessId from data collected via Event Tracing for Windows (ETW), Creator Process ID/Name from Windows event logs, and the ProcessID and ParentProcessID (which are also produced from ETW and other utilities such as Task Manager and Process Explorer). The ETW provided EventHeader ProcessId identifies the actual parent process. Monitor and analyze API calls to <code>CreateProcess</code>/<code>CreateProcessA</code>, specifically those from user/potentially malicious processes and with parameters explicitly assigning PPIDs (ex: the Process Creation Flags of 0x8XXX, indicating that the process is being created with extended startup information). Malicious use of <code>CreateProcess</code>/<code>CreateProcessA</code> may also be proceeded by a call to <code>UpdateProcThreadAttribute</code>, which may be necessary to update process creation attributes. This may generate false positives from normal UAC elevation behavior, so compare to a system baseline/understanding of normal system activity if possible.(Citations: CounterCept PPID Spoofing Dec 2018, Microsoft Process Creation Flags May 2018, Secuirtyinbits Ataware3 May 2019)",
      "ddmc_optionC": "File monitoring may be used to detect changes to files in the Web directory for organization login pages that do not match with authorized updates to the Web server's content.",
      "ddmc_optionD": "Command-line invocation of tools capable of modifying services may be unusual and can be monitored for and alerted on, depending on how systems are typically used in a particular environment.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Command-line invocation of tools capable of modifying services may be unusual and can be monitored for and alerted on, depending on how systems are typically used in a particular environment.",
      "prompts": [],
      "instruction": "What is a method to detect Power Settings (T1653)?\nA.  Once adversaries leverage the abused web service as infrastructure (ex: for command and control), it may be possible to look for unique characteristics associated with adversary software, if known. Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Command and Control (Web Service) or Exfiltration Over Web Service.(Citations: ThreatConnect Infrastructure Dec 2020)\nB.  Look for inconsistencies between the various fields that store PPID information, such as the EventHeader ProcessId from data collected via Event Tracing for Windows (ETW), Creator Process ID/Name from Windows event logs, and the ProcessID and ParentProcessID (which are also produced from ETW and other utilities such as Task Manager and Process Explorer). The ETW provided EventHeader ProcessId identifies the actual parent process. Monitor and analyze API calls to <code>CreateProcess</code>/<code>CreateProcessA</code>, specifically those from user/potentially malicious processes and with parameters explicitly assigning PPIDs (ex: the Process Creation Flags of 0x8XXX, indicating that the process is being created with extended startup information). Malicious use of <code>CreateProcess</code>/<code>CreateProcessA</code> may also be proceeded by a call to <code>UpdateProcThreadAttribute</code>, which may be necessary to update process creation attributes. This may generate false positives from normal UAC elevation behavior, so compare to a system baseline/understanding of normal system activity if possible.(Citations: CounterCept PPID Spoofing Dec 2018, Microsoft Process Creation Flags May 2018, Secuirtyinbits Ataware3 May 2019)\nC.  File monitoring may be used to detect changes to files in the Web directory for organization login pages that do not match with authorized updates to the Web server's content.\nD.  Command-line invocation of tools capable of modifying services may be unusual and can be monitored for and alerted on, depending on how systems are typically used in a particular environment.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1498.002 (Reflection Amplification)?\nA.  Preventing one process from writing to the memory space of another process through hardware based address manager implementations.\nB.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nC.  Analyzing the duration of user sessions in order to detect unauthorized activity.\nD.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1498.002 (Reflection Amplification)",
      "ddmc_optionA": "Preventing one process from writing to the memory space of another process through hardware based address manager implementations.",
      "ddmc_optionB": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmc_optionC": "Analyzing the duration of user sessions in order to detect unauthorized activity.",
      "ddmc_optionD": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1498.002 (Reflection Amplification)?\nA.  Preventing one process from writing to the memory space of another process through hardware based address manager implementations.\nB.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nC.  Analyzing the duration of user sessions in order to detect unauthorized activity.\nD.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Non-Application Layer Protocol (T1095)?\nA.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nB.  Cryptographically verifying firmware integrity.\nC.  Employing file hash comparisons to detect known malware.\nD.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Non-Application Layer Protocol (T1095)",
      "ddmc_optionA": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmc_optionB": "Cryptographically verifying firmware integrity.",
      "ddmc_optionC": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionD": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Non-Application Layer Protocol (T1095)?\nA.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nB.  Cryptographically verifying firmware integrity.\nC.  Employing file hash comparisons to detect known malware.\nD.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Exposure of Access Control List Files to an Unauthorized Control Sphere (CWE-529)?\nA.  While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\nB.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nC.  This is a complex topic. See the book Translucent Databases for a good discussion of best practices.\nD.  Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Exposure of Access Control List Files to an Unauthorized Control Sphere (CWE-529)",
      "ddmc_optionA": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
      "ddmc_optionB": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmc_optionC": "This is a complex topic. See the book Translucent Databases for a good discussion of best practices.",
      "ddmc_optionD": "Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "prompts": [],
      "instruction": "How can you mitigate Exposure of Access Control List Files to an Unauthorized Control Sphere (CWE-529)?\nA.  While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\nB.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nC.  This is a complex topic. See the book Translucent Databases for a good discussion of best practices.\nD.  Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect J2EE Bad Practices: Direct Management of Connections (CWE-245)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "J2EE Bad Practices: Direct Management of Connections (CWE-245)",
      "ddmc_optionA": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionB": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies",
      "ddmc_optionC": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionD": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "What is a method to detect J2EE Bad Practices: Direct Management of Connections (CWE-245)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Functionality Misuse (CAPEC-212)?\nA.  While some information is shared by systems automatically based on standards and protocols, remove potentially sensitive information that is not necessary for the application's functionality as much as possible.\nB.  A given code signing scheme may be fallible due to improper use of cryptography. Developers must never roll out their own cryptography, nor should existing primitives be modified or ignored.\nC.  Design: Use obfuscation and other techniques to prevent reverse engineering the standard libraries.\nD.  When implementing security features, consider how they can be misused and compromised.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Functionality Misuse (CAPEC-212)",
      "ddmc_optionA": "While some information is shared by systems automatically based on standards and protocols, remove potentially sensitive information that is not necessary for the application's functionality as much as possible.",
      "ddmc_optionB": "A given code signing scheme may be fallible due to improper use of cryptography. Developers must never roll out their own cryptography, nor should existing primitives be modified or ignored.",
      "ddmc_optionC": "Design: Use obfuscation and other techniques to prevent reverse engineering the standard libraries.",
      "ddmc_optionD": "When implementing security features, consider how they can be misused and compromised.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "When implementing security features, consider how they can be misused and compromised.",
      "prompts": [],
      "instruction": "What is a method to mitigate Functionality Misuse (CAPEC-212)?\nA.  While some information is shared by systems automatically based on standards and protocols, remove potentially sensitive information that is not necessary for the application's functionality as much as possible.\nB.  A given code signing scheme may be fallible due to improper use of cryptography. Developers must never roll out their own cryptography, nor should existing primitives be modified or ignored.\nC.  Design: Use obfuscation and other techniques to prevent reverse engineering the standard libraries.\nD.  When implementing security features, consider how they can be misused and compromised.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Missing Protection Mechanism for Alternate Hardware Interface (CWE-1299)?\nA.  Protect assets from accesses against all potential interfaces and alternate paths.\nB.  Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. Choose languages with features such as exception handling that force the programmer to anticipate unusual conditions that may generate exceptions. Custom exceptions may need to be developed to handle unusual business-logic conditions. Be careful not to pass sensitive exceptions back to the user (CWE-209, CWE-248).\nC.  Security Token Decoders should be reviewed for design inconsistency and common weaknesses. Access and programming flows should be tested in both pre-silicon and post-silicon testing.\nD.  Passwords should be encrypted with keys that are at least 128 bits in length for adequate security.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Missing Protection Mechanism for Alternate Hardware Interface (CWE-1299)",
      "ddmc_optionA": "Protect assets from accesses against all potential interfaces and alternate paths.",
      "ddmc_optionB": "Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. Choose languages with features such as exception handling that force the programmer to anticipate unusual conditions that may generate exceptions. Custom exceptions may need to be developed to handle unusual business-logic conditions. Be careful not to pass sensitive exceptions back to the user (CWE-209, CWE-248).",
      "ddmc_optionC": "Security Token Decoders should be reviewed for design inconsistency and common weaknesses. Access and programming flows should be tested in both pre-silicon and post-silicon testing.",
      "ddmc_optionD": "Passwords should be encrypted with keys that are at least 128 bits in length for adequate security.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Protect assets from accesses against all potential interfaces and alternate paths.",
      "prompts": [],
      "instruction": "How can you mitigate Missing Protection Mechanism for Alternate Hardware Interface (CWE-1299)?\nA.  Protect assets from accesses against all potential interfaces and alternate paths.\nB.  Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. Choose languages with features such as exception handling that force the programmer to anticipate unusual conditions that may generate exceptions. Custom exceptions may need to be developed to handle unusual business-logic conditions. Be careful not to pass sensitive exceptions back to the user (CWE-209, CWE-248).\nC.  Security Token Decoders should be reviewed for design inconsistency and common weaknesses. Access and programming flows should be tested in both pre-silicon and post-silicon testing.\nD.  Passwords should be encrypted with keys that are at least 128 bits in length for adequate security.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Credential Stuffing (T1110.004)?\nA.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\nB.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\nC.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nD.  Collecting network communication protocol metadata and identifying statistical outliers.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Credential Stuffing (T1110.004)",
      "ddmc_optionA": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "ddmc_optionB": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "ddmc_optionC": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_optionD": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "prompts": [],
      "instruction": "What is a method to mitigate Credential Stuffing (T1110.004)?\nA.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\nB.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\nC.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nD.  Collecting network communication protocol metadata and identifying statistical outliers.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Forced Authentication (T1187)?\nA.  Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.\nB.  Set and enforce secure password policies for accounts.\nC.  Perform regular software updates to mitigate exploitation risk.\nD.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Forced Authentication (T1187)",
      "ddmc_optionA": "Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.",
      "ddmc_optionB": "Set and enforce secure password policies for accounts.",
      "ddmc_optionC": "Perform regular software updates to mitigate exploitation risk.",
      "ddmc_optionD": "Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Forced Authentication (T1187)?\nA.  Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.\nB.  Set and enforce secure password policies for accounts.\nC.  Perform regular software updates to mitigate exploitation risk.\nD.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Spyware (CWE-512)?\nA.  If the weakness is exposed by a single instruction (or a small set of instructions), then the compiler (or JIT, etc.) can be configured to prevent the affected instruction(s) from being generated. One prominent example of this mitigation is retpoline ([REF-1414]).\nB.  Always verify the integrity of the product that is being installed.\nC.  Use automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking. D3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail.\nD.  This kind of patch may not be feasible or implementable for all processors or all weaknesses.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Spyware (CWE-512)",
      "ddmc_optionA": "If the weakness is exposed by a single instruction (or a small set of instructions), then the compiler (or JIT, etc.) can be configured to prevent the affected instruction(s) from being generated. One prominent example of this mitigation is retpoline ([REF-1414]).",
      "ddmc_optionB": "Always verify the integrity of the product that is being installed.",
      "ddmc_optionC": "Use automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking. D3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail.",
      "ddmc_optionD": "This kind of patch may not be feasible or implementable for all processors or all weaknesses.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Always verify the integrity of the product that is being installed.",
      "prompts": [],
      "instruction": "What is a method to mitigate Spyware (CWE-512)?\nA.  If the weakness is exposed by a single instruction (or a small set of instructions), then the compiler (or JIT, etc.) can be configured to prevent the affected instruction(s) from being generated. One prominent example of this mitigation is retpoline ([REF-1414]).\nB.  Always verify the integrity of the product that is being installed.\nC.  Use automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking. D3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail.\nD.  This kind of patch may not be feasible or implementable for all processors or all weaknesses.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate CAPEC-251 (Local Code Inclusion)?\nA.  Implementation: Avoid passing user input to filesystem or framework API. If necessary to do so, implement a specific, allowlist approach.\nB.  Implementation: Obfuscate server fields of HTTP response.\nC.  Monitor cellular RF interface to detect the usage of weaker-than-expected cellular encryption.\nD.  Implementation: Provide for network flow control and traffic shaping to control access to the resources.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CAPEC-251 (Local Code Inclusion)",
      "ddmc_optionA": "Implementation: Avoid passing user input to filesystem or framework API. If necessary to do so, implement a specific, allowlist approach.",
      "ddmc_optionB": "Implementation: Obfuscate server fields of HTTP response.",
      "ddmc_optionC": "Monitor cellular RF interface to detect the usage of weaker-than-expected cellular encryption.",
      "ddmc_optionD": "Implementation: Provide for network flow control and traffic shaping to control access to the resources.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Implementation: Avoid passing user input to filesystem or framework API. If necessary to do so, implement a specific, allowlist approach.",
      "prompts": [],
      "instruction": "What is a method to mitigate CAPEC-251 (Local Code Inclusion)?\nA.  Implementation: Avoid passing user input to filesystem or framework API. If necessary to do so, implement a specific, allowlist approach.\nB.  Implementation: Obfuscate server fields of HTTP response.\nC.  Monitor cellular RF interface to detect the usage of weaker-than-expected cellular encryption.\nD.  Implementation: Provide for network flow control and traffic shaping to control access to the resources.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Group Policy Preferences (T1552.006)?\nA.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nB.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nC.  Network traffic policy mapping identifies and models the allowed pathways of data at the network, tranport, and/or application levels.\nD.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Group Policy Preferences (T1552.006)",
      "ddmc_optionA": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_optionB": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionC": "Network traffic policy mapping identifies and models the allowed pathways of data at the network, tranport, and/or application levels.",
      "ddmc_optionD": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Network traffic policy mapping identifies and models the allowed pathways of data at the network, tranport, and/or application levels.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Group Policy Preferences (T1552.006)?\nA.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nB.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nC.  Network traffic policy mapping identifies and models the allowed pathways of data at the network, tranport, and/or application levels.\nD.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1594 (Search Victim-Owned Websites)?\nA.  Configure Active Directory to prevent use of certain techniques; use SID Filtering, etc.\nB.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nC.  Take and store data backups from end user systems and critical servers. Ensure backup and storage systems are hardened and kept separate from the corporate network to prevent compromise.\nD.  Use secure methods to boot a system and verify the integrity of the operating system and loading mechanisms.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1594 (Search Victim-Owned Websites)",
      "ddmc_optionA": "Configure Active Directory to prevent use of certain techniques; use SID Filtering, etc.",
      "ddmc_optionB": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmc_optionC": "Take and store data backups from end user systems and critical servers. Ensure backup and storage systems are hardened and kept separate from the corporate network to prevent compromise.",
      "ddmc_optionD": "Use secure methods to boot a system and verify the integrity of the operating system and loading mechanisms.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1594 (Search Victim-Owned Websites)?\nA.  Configure Active Directory to prevent use of certain techniques; use SID Filtering, etc.\nB.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nC.  Take and store data backups from end user systems and critical servers. Ensure backup and storage systems are hardened and kept separate from the corporate network to prevent compromise.\nD.  Use secure methods to boot a system and verify the integrity of the operating system and loading mechanisms.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate T1003.001 (LSASS Memory)?\nA.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nB.  Identification of suspicious processes executing on an end-point device by examining the ancestry and siblings of a process, and the associated metadata of each node on the tree, such as process execution, duration, and order relative to siblings and ancestors.\nC.  Employing file hash comparisons to detect known malware.\nD.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1003.001 (LSASS Memory)",
      "ddmc_optionA": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionB": "Identification of suspicious processes executing on an end-point device by examining the ancestry and siblings of a process, and the associated metadata of each node on the tree, such as process execution, duration, and order relative to siblings and ancestors.",
      "ddmc_optionC": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionD": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Identification of suspicious processes executing on an end-point device by examining the ancestry and siblings of a process, and the associated metadata of each node on the tree, such as process execution, duration, and order relative to siblings and ancestors.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate T1003.001 (LSASS Memory)?\nA.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nB.  Identification of suspicious processes executing on an end-point device by examining the ancestry and siblings of a process, and the associated metadata of each node on the tree, such as process execution, duration, and order relative to siblings and ancestors.\nC.  Employing file hash comparisons to detect known malware.\nD.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate System Information Discovery (T1082)?\nA.  A decoy service, system, or environment, that is connected to the enterprise network, and simulates or emulates certain functionality to the network, without exposing full access to a production system.\nB.  Using a digital signature to authenticate a file before opening.\nC.  Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.\nD.  A file created for the purposes of deceiving an adversary.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "System Information Discovery (T1082)",
      "ddmc_optionA": "A decoy service, system, or environment, that is connected to the enterprise network, and simulates or emulates certain functionality to the network, without exposing full access to a production system.",
      "ddmc_optionB": "Using a digital signature to authenticate a file before opening.",
      "ddmc_optionC": "Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.",
      "ddmc_optionD": "A file created for the purposes of deceiving an adversary.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "A decoy service, system, or environment, that is connected to the enterprise network, and simulates or emulates certain functionality to the network, without exposing full access to a production system.",
      "prompts": [],
      "instruction": "What is a method to mitigate System Information Discovery (T1082)?\nA.  A decoy service, system, or environment, that is connected to the enterprise network, and simulates or emulates certain functionality to the network, without exposing full access to a production system.\nB.  Using a digital signature to authenticate a file before opening.\nC.  Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.\nD.  A file created for the purposes of deceiving an adversary.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Encrypted Channel (T1573)?\nA.  SSL/TLS inspection is one way of detecting command and control traffic within some encrypted communication channels. SSL/TLS inspection does come with certain risks that should be considered before implementing to avoid potential security issues such as incomplete certificate validation. In general, analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.(Citations: SANS Decrypting SSL, SEI SSL Inspection Risks, University of Birmingham C2)\nB.  Look for changes to tasks and services that do not correlate with known software, patch cycles, etc. Suspicious program execution through scheduled tasks or services may show up as outlier processes that have not been seen before when compared against historical data. Monitor processes and command-line arguments for actions that could be taken to create tasks or services. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.\nC.  Collect file hashes; file names that do not match their expected hash are suspect. Perform file monitoring; files with known names but in unusual locations are suspect. Likewise, files that are modified outside of an update or patch are suspect. If file names are mismatched between the file name on disk and that of the binary's PE metadata, this is a likely indicator that a binary was renamed after it was compiled. Collecting and comparing disk and resource filenames for binaries by looking to see if the InternalName, OriginalFilename, and/or ProductName match what is expected could provide useful leads, but may not always be indicative of malicious activity.  Do not focus on the possible names a file could have, but instead on the command-line arguments that are known to be used and are distinct because it will have a better rate of detection. In containerized environments, use image IDs and layer hashes to compare images instead of relying only on their names. Monitor for the unexpected creation of new resources within your cluster in Kubernetes, especially those created by atypical users.(Citations: Elastic Masquerade Ball, Twitter ItsReallyNick Masquerading Update, Docker Images)\nD.  Processes that appear to be reading files from disparate locations and writing them to the same directory or file may be an indication of data being staged, especially if they are suspected of performing encryption or compression on the files, such as 7zip, RAR, ZIP, or zlib. Monitor publicly writeable directories, central locations, and commonly used staging directories (recycle bin, temp folders, etc.) to regularly check for compressed or encrypted data that may be indicative of staging. Monitor processes and command-line arguments for actions that could be taken to collect and combine files. Remote access tools with built-in features may interact directly with the Windows API to gather and copy to a location. Data may also be acquired and staged through Windows system management tools such as Windows Management Instrumentation and PowerShell.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Encrypted Channel (T1573)",
      "ddmc_optionA": "SSL/TLS inspection is one way of detecting command and control traffic within some encrypted communication channels. SSL/TLS inspection does come with certain risks that should be considered before implementing to avoid potential security issues such as incomplete certificate validation. In general, analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.(Citations: SANS Decrypting SSL, SEI SSL Inspection Risks, University of Birmingham C2)",
      "ddmc_optionB": "Look for changes to tasks and services that do not correlate with known software, patch cycles, etc. Suspicious program execution through scheduled tasks or services may show up as outlier processes that have not been seen before when compared against historical data. Monitor processes and command-line arguments for actions that could be taken to create tasks or services. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.",
      "ddmc_optionC": "Collect file hashes; file names that do not match their expected hash are suspect. Perform file monitoring; files with known names but in unusual locations are suspect. Likewise, files that are modified outside of an update or patch are suspect. If file names are mismatched between the file name on disk and that of the binary's PE metadata, this is a likely indicator that a binary was renamed after it was compiled. Collecting and comparing disk and resource filenames for binaries by looking to see if the InternalName, OriginalFilename, and/or ProductName match what is expected could provide useful leads, but may not always be indicative of malicious activity.  Do not focus on the possible names a file could have, but instead on the command-line arguments that are known to be used and are distinct because it will have a better rate of detection. In containerized environments, use image IDs and layer hashes to compare images instead of relying only on their names. Monitor for the unexpected creation of new resources within your cluster in Kubernetes, especially those created by atypical users.(Citations: Elastic Masquerade Ball, Twitter ItsReallyNick Masquerading Update, Docker Images)",
      "ddmc_optionD": "Processes that appear to be reading files from disparate locations and writing them to the same directory or file may be an indication of data being staged, especially if they are suspected of performing encryption or compression on the files, such as 7zip, RAR, ZIP, or zlib. Monitor publicly writeable directories, central locations, and commonly used staging directories (recycle bin, temp folders, etc.) to regularly check for compressed or encrypted data that may be indicative of staging. Monitor processes and command-line arguments for actions that could be taken to collect and combine files. Remote access tools with built-in features may interact directly with the Windows API to gather and copy to a location. Data may also be acquired and staged through Windows system management tools such as Windows Management Instrumentation and PowerShell.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "SSL/TLS inspection is one way of detecting command and control traffic within some encrypted communication channels. SSL/TLS inspection does come with certain risks that should be considered before implementing to avoid potential security issues such as incomplete certificate validation. In general, analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.(Citations: SANS Decrypting SSL, SEI SSL Inspection Risks, University of Birmingham C2)",
      "prompts": [],
      "instruction": "What is a method to detect Encrypted Channel (T1573)?\nA.  SSL/TLS inspection is one way of detecting command and control traffic within some encrypted communication channels. SSL/TLS inspection does come with certain risks that should be considered before implementing to avoid potential security issues such as incomplete certificate validation. In general, analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.(Citations: SANS Decrypting SSL, SEI SSL Inspection Risks, University of Birmingham C2)\nB.  Look for changes to tasks and services that do not correlate with known software, patch cycles, etc. Suspicious program execution through scheduled tasks or services may show up as outlier processes that have not been seen before when compared against historical data. Monitor processes and command-line arguments for actions that could be taken to create tasks or services. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.\nC.  Collect file hashes; file names that do not match their expected hash are suspect. Perform file monitoring; files with known names but in unusual locations are suspect. Likewise, files that are modified outside of an update or patch are suspect. If file names are mismatched between the file name on disk and that of the binary's PE metadata, this is a likely indicator that a binary was renamed after it was compiled. Collecting and comparing disk and resource filenames for binaries by looking to see if the InternalName, OriginalFilename, and/or ProductName match what is expected could provide useful leads, but may not always be indicative of malicious activity.  Do not focus on the possible names a file could have, but instead on the command-line arguments that are known to be used and are distinct because it will have a better rate of detection. In containerized environments, use image IDs and layer hashes to compare images instead of relying only on their names. Monitor for the unexpected creation of new resources within your cluster in Kubernetes, especially those created by atypical users.(Citations: Elastic Masquerade Ball, Twitter ItsReallyNick Masquerading Update, Docker Images)\nD.  Processes that appear to be reading files from disparate locations and writing them to the same directory or file may be an indication of data being staged, especially if they are suspected of performing encryption or compression on the files, such as 7zip, RAR, ZIP, or zlib. Monitor publicly writeable directories, central locations, and commonly used staging directories (recycle bin, temp folders, etc.) to regularly check for compressed or encrypted data that may be indicative of staging. Monitor processes and command-line arguments for actions that could be taken to collect and combine files. Remote access tools with built-in features may interact directly with the Windows API to gather and copy to a location. Data may also be acquired and staged through Windows system management tools such as Windows Management Instrumentation and PowerShell.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect CWE-583 (finalize() Method Declared Public)?\nA.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  Pre-silicon / post-silicon: Test access to shared systems resources (memory ranges, control registers, etc.) from untrusted software to verify that the assets are not incorrectly exposed to untrusted agents. Note that access to shared resources can be dynamically allowed or revoked based on system flows. Security testing should cover such dynamic shared resource allocation and access control modification flows.\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "CWE-583 (finalize() Method Declared Public)",
      "ddmc_optionA": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)",
      "ddmc_optionB": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionC": "Pre-silicon / post-silicon: Test access to shared systems resources (memory ranges, control registers, etc.) from untrusted software to verify that the assets are not incorrectly exposed to untrusted agents. Note that access to shared resources can be dynamically allowed or revoked based on system flows. Security testing should cover such dynamic shared resource allocation and access control modification flows.",
      "ddmc_optionD": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "How can you detect CWE-583 (finalize() Method Declared Public)?\nA.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  Pre-silicon / post-silicon: Test access to shared systems resources (memory ranges, control registers, etc.) from untrusted software to verify that the assets are not incorrectly exposed to untrusted agents. Note that access to shared resources can be dynamically allowed or revoked based on system flows. Security testing should cover such dynamic shared resource allocation and access control modification flows.\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect Out-of-bounds Write (CWE-787)?\nA.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Man-in-the-middle attack tool Cost effective for partial coverage: Framework-based Fuzzer Automated Monitored Execution Monitored Virtual Environment - run potentially malicious code in sandbox / wrapper / virtual machine, see if it does anything suspicious\nB.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Automated Monitored Execution\nC.  This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives. Automated static analysis generally does not account for environmental considerations when reporting out-of-bounds memory operations. This can make it difficult for users to determine which warnings should be investigated first. For example, an analysis tool might report buffer overflows that originate from command line arguments in a program that is not expected to run with setuid or other special privileges.\nD.  This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Out-of-bounds Write (CWE-787)",
      "ddmc_optionA": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Man-in-the-middle attack tool Cost effective for partial coverage: Framework-based Fuzzer Automated Monitored Execution Monitored Virtual Environment - run potentially malicious code in sandbox / wrapper / virtual machine, see if it does anything suspicious",
      "ddmc_optionB": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Automated Monitored Execution",
      "ddmc_optionC": "This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives. Automated static analysis generally does not account for environmental considerations when reporting out-of-bounds memory operations. This can make it difficult for users to determine which warnings should be investigated first. For example, an analysis tool might report buffer overflows that originate from command line arguments in a program that is not expected to run with setuid or other special privileges.",
      "ddmc_optionD": "This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.",
      "prompts": [],
      "instruction": "How can you detect Out-of-bounds Write (CWE-787)?\nA.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Man-in-the-middle attack tool Cost effective for partial coverage: Framework-based Fuzzer Automated Monitored Execution Monitored Virtual Environment - run potentially malicious code in sandbox / wrapper / virtual machine, see if it does anything suspicious\nB.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Automated Monitored Execution\nC.  This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives. Automated static analysis generally does not account for environmental considerations when reporting out-of-bounds memory operations. This can make it difficult for users to determine which warnings should be investigated first. For example, an analysis tool might report buffer overflows that originate from command line arguments in a program that is not expected to run with setuid or other special privileges.\nD.  This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Domain Accounts (T1078.002)?\nA.  Restricting a user account's access to resources.\nB.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nC.  A one-time password is valid for only one user authentication.\nD.  Restricting access to a local file by configuring operating system functionality.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Domain Accounts (T1078.002)",
      "ddmc_optionA": "Restricting a user account's access to resources.",
      "ddmc_optionB": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionC": "A one-time password is valid for only one user authentication.",
      "ddmc_optionD": "Restricting access to a local file by configuring operating system functionality.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Restricting a user account's access to resources.",
      "prompts": [],
      "instruction": "How can you mitigate Domain Accounts (T1078.002)?\nA.  Restricting a user account's access to resources.\nB.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nC.  A one-time password is valid for only one user authentication.\nD.  Restricting access to a local file by configuring operating system functionality.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate CMSTP (T1218.003)?\nA.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nB.  Detecting any suspicious changes to files in a computer system.\nC.  Blocking the execution of files on a host in accordance with defined application policy rules.\nD.  Restoring an object for an entity to access. This is the broadest class for object restoral.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CMSTP (T1218.003)",
      "ddmc_optionA": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_optionB": "Detecting any suspicious changes to files in a computer system.",
      "ddmc_optionC": "Blocking the execution of files on a host in accordance with defined application policy rules.",
      "ddmc_optionD": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Blocking the execution of files on a host in accordance with defined application policy rules.",
      "prompts": [],
      "instruction": "How can you mitigate CMSTP (T1218.003)?\nA.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nB.  Detecting any suspicious changes to files in a computer system.\nC.  Blocking the execution of files on a host in accordance with defined application policy rules.\nD.  Restoring an object for an entity to access. This is the broadest class for object restoral.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Network Boundary Bridging (T1599)?\nA.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nB.  Set and enforce secure password policies for accounts.\nC.  Set and enforce secure password policies for accounts.\nD.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Network Boundary Bridging (T1599)",
      "ddmc_optionA": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_optionB": "Set and enforce secure password policies for accounts.",
      "ddmc_optionC": "Set and enforce secure password policies for accounts.",
      "ddmc_optionD": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Set and enforce secure password policies for accounts.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Network Boundary Bridging (T1599)?\nA.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nB.  Set and enforce secure password policies for accounts.\nC.  Set and enforce secure password policies for accounts.\nD.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Cause Web Server Misclassification (CAPEC-11)?\nA.  Design systems and products with the ability to patch firmware or ROM code after deployment to fix vulnerabilities.\nB.  Sign everything, including configuration files, XML files and packages.\nC.  Design: Use load balancing mechanisms\nD.  Implementation: Server routines should be determined by content not determined by filename or file extension.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Cause Web Server Misclassification (CAPEC-11)",
      "ddmc_optionA": "Design systems and products with the ability to patch firmware or ROM code after deployment to fix vulnerabilities.",
      "ddmc_optionB": "Sign everything, including configuration files, XML files and packages.",
      "ddmc_optionC": "Design: Use load balancing mechanisms",
      "ddmc_optionD": "Implementation: Server routines should be determined by content not determined by filename or file extension.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Implementation: Server routines should be determined by content not determined by filename or file extension.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Cause Web Server Misclassification (CAPEC-11)?\nA.  Design systems and products with the ability to patch firmware or ROM code after deployment to fix vulnerabilities.\nB.  Sign everything, including configuration files, XML files and packages.\nC.  Design: Use load balancing mechanisms\nD.  Implementation: Server routines should be determined by content not determined by filename or file extension.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate CWE-1239 (Improper Zeroization of Hardware Register)?\nA.  Use automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking. D3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail.\nB.  Every register potentially containing sensitive information must have a policy specifying how and when information is cleared, in addition to clarifying if it is the responsibility of the hardware logic or IP user to initiate the zeroization procedure at the appropriate time.\nC.  Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.\nD.  Disable interrupts or signals over critical parts of the code, but also make sure that the code does not go into a large or infinite loop.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CWE-1239 (Improper Zeroization of Hardware Register)",
      "ddmc_optionA": "Use automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking. D3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail.",
      "ddmc_optionB": "Every register potentially containing sensitive information must have a policy specifying how and when information is cleared, in addition to clarifying if it is the responsibility of the hardware logic or IP user to initiate the zeroization procedure at the appropriate time.",
      "ddmc_optionC": "Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.",
      "ddmc_optionD": "Disable interrupts or signals over critical parts of the code, but also make sure that the code does not go into a large or infinite loop.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Every register potentially containing sensitive information must have a policy specifying how and when information is cleared, in addition to clarifying if it is the responsibility of the hardware logic or IP user to initiate the zeroization procedure at the appropriate time.",
      "prompts": [],
      "instruction": "How can you mitigate CWE-1239 (Improper Zeroization of Hardware Register)?\nA.  Use automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking. D3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail.\nB.  Every register potentially containing sensitive information must have a policy specifying how and when information is cleared, in addition to clarifying if it is the responsibility of the hardware logic or IP user to initiate the zeroization procedure at the appropriate time.\nC.  Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.\nD.  Disable interrupts or signals over critical parts of the code, but also make sure that the code does not go into a large or infinite loop.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1014 (Rootkit)?\nA.  The file removal technique deletes malicious artifacts or programs from a computer system.\nB.  Cryptographically verifying firmware integrity.\nC.  File eviction techniques evict files from system storage.\nD.  Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1014 (Rootkit)",
      "ddmc_optionA": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "ddmc_optionB": "Cryptographically verifying firmware integrity.",
      "ddmc_optionC": "File eviction techniques evict files from system storage.",
      "ddmc_optionD": "Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Cryptographically verifying firmware integrity.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1014 (Rootkit)?\nA.  The file removal technique deletes malicious artifacts or programs from a computer system.\nB.  Cryptographically verifying firmware integrity.\nC.  File eviction techniques evict files from system storage.\nD.  Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate CWE-588 (Attempt to Access Child of a Non-structure Pointer)?\nA.  Protect the administrative/restricted functionality with a strong authentication mechanism.\nB.  Use the volatile type modifier for critical variables to avoid unexpected compiler optimization or reordering. This does not necessarily solve the synchronization problem, but it can help.\nC.  Programming languages and supporting technologies might be chosen which are not subject to these issues.\nD.  The choice could be made to use a language that is not susceptible to these issues.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CWE-588 (Attempt to Access Child of a Non-structure Pointer)",
      "ddmc_optionA": "Protect the administrative/restricted functionality with a strong authentication mechanism.",
      "ddmc_optionB": "Use the volatile type modifier for critical variables to avoid unexpected compiler optimization or reordering. This does not necessarily solve the synchronization problem, but it can help.",
      "ddmc_optionC": "Programming languages and supporting technologies might be chosen which are not subject to these issues.",
      "ddmc_optionD": "The choice could be made to use a language that is not susceptible to these issues.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "The choice could be made to use a language that is not susceptible to these issues.",
      "prompts": [],
      "instruction": "How can you mitigate CWE-588 (Attempt to Access Child of a Non-structure Pointer)?\nA.  Protect the administrative/restricted functionality with a strong authentication mechanism.\nB.  Use the volatile type modifier for critical variables to avoid unexpected compiler optimization or reordering. This does not necessarily solve the synchronization problem, but it can help.\nC.  Programming languages and supporting technologies might be chosen which are not subject to these issues.\nD.  The choice could be made to use a language that is not susceptible to these issues.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect Reliance on Cookies without Validation and Integrity Checking (CWE-565)?\nA.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.) Cost effective for partial coverage: Formal Methods / Correct-By-Construction\nB.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Binary Weakness Analysis - including disassembler + source code weakness analysis Cost effective for partial coverage: Binary / Bytecode Quality Analysis Binary / Bytecode simple extractor - strings, ELF readers, etc.\nC.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Reliance on Cookies without Validation and Integrity Checking (CWE-565)",
      "ddmc_optionA": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.) Cost effective for partial coverage: Formal Methods / Correct-By-Construction",
      "ddmc_optionB": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Binary Weakness Analysis - including disassembler + source code weakness analysis Cost effective for partial coverage: Binary / Bytecode Quality Analysis Binary / Bytecode simple extractor - strings, ELF readers, etc.",
      "ddmc_optionC": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies",
      "ddmc_optionD": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "How can you detect Reliance on Cookies without Validation and Integrity Checking (CWE-565)?\nA.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.) Cost effective for partial coverage: Formal Methods / Correct-By-Construction\nB.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Binary Weakness Analysis - including disassembler + source code weakness analysis Cost effective for partial coverage: Binary / Bytecode Quality Analysis Binary / Bytecode simple extractor - strings, ELF readers, etc.\nC.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Alternative Execution Due to Deceptive Filenames (CAPEC-635)?\nA.  Do not allow tainted data to be written in the log file without prior input validation. An allowlist may be used to properly validate the data.\nB.  Applications should insure that the content of the file is consistent with format it is expecting, and not depend solely on the file extension.\nC.  Perform comprehensive threat modeling, a process of identifying, evaluating, and mitigating potential threats to the application. This effort can help reveal potentially obscure application functionality that can be manipulated for malicious purposes.\nD.  Limit the amount of resources that are accessible to unprivileged users.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Alternative Execution Due to Deceptive Filenames (CAPEC-635)",
      "ddmc_optionA": "Do not allow tainted data to be written in the log file without prior input validation. An allowlist may be used to properly validate the data.",
      "ddmc_optionB": "Applications should insure that the content of the file is consistent with format it is expecting, and not depend solely on the file extension.",
      "ddmc_optionC": "Perform comprehensive threat modeling, a process of identifying, evaluating, and mitigating potential threats to the application. This effort can help reveal potentially obscure application functionality that can be manipulated for malicious purposes.",
      "ddmc_optionD": "Limit the amount of resources that are accessible to unprivileged users.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Applications should insure that the content of the file is consistent with format it is expecting, and not depend solely on the file extension.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Alternative Execution Due to Deceptive Filenames (CAPEC-635)?\nA.  Do not allow tainted data to be written in the log file without prior input validation. An allowlist may be used to properly validate the data.\nB.  Applications should insure that the content of the file is consistent with format it is expecting, and not depend solely on the file extension.\nC.  Perform comprehensive threat modeling, a process of identifying, evaluating, and mitigating potential threats to the application. This effort can help reveal potentially obscure application functionality that can be manipulated for malicious purposes.\nD.  Limit the amount of resources that are accessible to unprivileged users.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate CWE-638 (Not Using Complete Mediation)?\nA.  Use spyware detection and removal software.\nB.  Use PHP 4 or later.\nC.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nD.  When architecting the address map of the chip, ensure that protected and unprotected ranges are isolated and do not overlap. When designing, ensure that ranges hardcoded in Register-Transfer Level (RTL) do not overlap.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CWE-638 (Not Using Complete Mediation)",
      "ddmc_optionA": "Use spyware detection and removal software.",
      "ddmc_optionB": "Use PHP 4 or later.",
      "ddmc_optionC": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmc_optionD": "When architecting the address map of the chip, ensure that protected and unprotected ranges are isolated and do not overlap. When designing, ensure that ranges hardcoded in Register-Transfer Level (RTL) do not overlap.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Use PHP 4 or later.",
      "prompts": [],
      "instruction": "What is a method to mitigate CWE-638 (Not Using Complete Mediation)?\nA.  Use spyware detection and removal software.\nB.  Use PHP 4 or later.\nC.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nD.  When architecting the address map of the chip, ensure that protected and unprotected ranges are isolated and do not overlap. When designing, ensure that ranges hardcoded in Register-Transfer Level (RTL) do not overlap.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect Token Impersonation/Theft (T1134.001)?\nA.  If an adversary is using a standard command-line shell, analysts can detect token manipulation by auditing command-line activity. Specifically, analysts should look for use of the <code>runas</code> command. Detailed command-line logging is not enabled by default in Windows. Analysts can also monitor for use of Windows APIs such as <code>DuplicateToken(Ex)</code>, <code> ImpersonateLoggedOnUser </code>, and <code> SetThreadToken </code> and correlate activity with other suspicious behavior to reduce false positives that may be due to normal benign use by users and administrators.(Citations: Microsoft Command-line Logging)\nB.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\nC.  Monitor file creation for files named after partial directories and in locations that may be searched for common processes through the environment variable, or otherwise should not be user writable. Monitor the executing process for process executable paths that are named for partial directories. Monitor file creation for programs that are named after Windows system programs or programs commonly executed without a path (such as \"findstr,\" \"net,\" and \"python\"). If this activity occurs outside of known administration activity, upgrades, installations, or patches, then it may be suspicious. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.\nD.  Monitor script processes, such as `cscript`, and command-line parameters for scripts like PubPrn.vbs that may be used to proxy execution of malicious files.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Token Impersonation/Theft (T1134.001)",
      "ddmc_optionA": "If an adversary is using a standard command-line shell, analysts can detect token manipulation by auditing command-line activity. Specifically, analysts should look for use of the <code>runas</code> command. Detailed command-line logging is not enabled by default in Windows. Analysts can also monitor for use of Windows APIs such as <code>DuplicateToken(Ex)</code>, <code> ImpersonateLoggedOnUser </code>, and <code> SetThreadToken </code> and correlate activity with other suspicious behavior to reduce false positives that may be due to normal benign use by users and administrators.(Citations: Microsoft Command-line Logging)",
      "ddmc_optionB": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.",
      "ddmc_optionC": "Monitor file creation for files named after partial directories and in locations that may be searched for common processes through the environment variable, or otherwise should not be user writable. Monitor the executing process for process executable paths that are named for partial directories. Monitor file creation for programs that are named after Windows system programs or programs commonly executed without a path (such as \"findstr,\" \"net,\" and \"python\"). If this activity occurs outside of known administration activity, upgrades, installations, or patches, then it may be suspicious. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.",
      "ddmc_optionD": "Monitor script processes, such as `cscript`, and command-line parameters for scripts like PubPrn.vbs that may be used to proxy execution of malicious files.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "If an adversary is using a standard command-line shell, analysts can detect token manipulation by auditing command-line activity. Specifically, analysts should look for use of the <code>runas</code> command. Detailed command-line logging is not enabled by default in Windows. Analysts can also monitor for use of Windows APIs such as <code>DuplicateToken(Ex)</code>, <code> ImpersonateLoggedOnUser </code>, and <code> SetThreadToken </code> and correlate activity with other suspicious behavior to reduce false positives that may be due to normal benign use by users and administrators.(Citations: Microsoft Command-line Logging)",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect Token Impersonation/Theft (T1134.001)?\nA.  If an adversary is using a standard command-line shell, analysts can detect token manipulation by auditing command-line activity. Specifically, analysts should look for use of the <code>runas</code> command. Detailed command-line logging is not enabled by default in Windows. Analysts can also monitor for use of Windows APIs such as <code>DuplicateToken(Ex)</code>, <code> ImpersonateLoggedOnUser </code>, and <code> SetThreadToken </code> and correlate activity with other suspicious behavior to reduce false positives that may be due to normal benign use by users and administrators.(Citations: Microsoft Command-line Logging)\nB.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\nC.  Monitor file creation for files named after partial directories and in locations that may be searched for common processes through the environment variable, or otherwise should not be user writable. Monitor the executing process for process executable paths that are named for partial directories. Monitor file creation for programs that are named after Windows system programs or programs commonly executed without a path (such as \"findstr,\" \"net,\" and \"python\"). If this activity occurs outside of known administration activity, upgrades, installations, or patches, then it may be suspicious. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.\nD.  Monitor script processes, such as `cscript`, and command-line parameters for scripts like PubPrn.vbs that may be used to proxy execution of malicious files.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Alternative Execution Due to Deceptive Filenames (CAPEC-635)?\nA.  Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.\nB.  Upgrade the SIM card to use the state-of-the-art AES or the somewhat outdated 3DES algorithm for OTA.\nC.  Strong physical security of all devices that contain secret key information. (even when devices are not in use)\nD.  Implementation: Hide inner ordering of HTTP response header.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Alternative Execution Due to Deceptive Filenames (CAPEC-635)",
      "ddmc_optionA": "Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.",
      "ddmc_optionB": "Upgrade the SIM card to use the state-of-the-art AES or the somewhat outdated 3DES algorithm for OTA.",
      "ddmc_optionC": "Strong physical security of all devices that contain secret key information. (even when devices are not in use)",
      "ddmc_optionD": "Implementation: Hide inner ordering of HTTP response header.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Strong physical security of all devices that contain secret key information. (even when devices are not in use)",
      "prompts": [],
      "instruction": "What is a method to mitigate Alternative Execution Due to Deceptive Filenames (CAPEC-635)?\nA.  Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.\nB.  Upgrade the SIM card to use the state-of-the-art AES or the somewhat outdated 3DES algorithm for OTA.\nC.  Strong physical security of all devices that contain secret key information. (even when devices are not in use)\nD.  Implementation: Hide inner ordering of HTTP response header.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate CAPEC-623 (Compromising Emanations Attack)?\nA.  Authenticate all servers and perform redundant checks when using DNS hostnames.\nB.  Implementation: Prevent network boundary devices from being physically accessed by unauthorized personnel to prevent tampering.\nC.  Configuration: Disable PCIe tunneling to set Security Level to SL3\nD.  Design: Configure the access control correctly.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CAPEC-623 (Compromising Emanations Attack)",
      "ddmc_optionA": "Authenticate all servers and perform redundant checks when using DNS hostnames.",
      "ddmc_optionB": "Implementation: Prevent network boundary devices from being physically accessed by unauthorized personnel to prevent tampering.",
      "ddmc_optionC": "Configuration: Disable PCIe tunneling to set Security Level to SL3",
      "ddmc_optionD": "Design: Configure the access control correctly.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Authenticate all servers and perform redundant checks when using DNS hostnames.",
      "prompts": [],
      "instruction": "How can you mitigate CAPEC-623 (Compromising Emanations Attack)?\nA.  Authenticate all servers and perform redundant checks when using DNS hostnames.\nB.  Implementation: Prevent network boundary devices from being physically accessed by unauthorized personnel to prevent tampering.\nC.  Configuration: Disable PCIe tunneling to set Security Level to SL3\nD.  Design: Configure the access control correctly.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Unused/Unsupported Cloud Regions (T1535)?\nA.  Configure Windows User Account Control to mitigate risk of adversaries obtaining elevated process access.\nB.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nC.  Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.\nD.  Perform regular software updates to mitigate exploitation risk.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Unused/Unsupported Cloud Regions (T1535)",
      "ddmc_optionA": "Configure Windows User Account Control to mitigate risk of adversaries obtaining elevated process access.",
      "ddmc_optionB": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "ddmc_optionC": "Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.",
      "ddmc_optionD": "Perform regular software updates to mitigate exploitation risk.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.",
      "prompts": [],
      "instruction": "What is a method to mitigate Unused/Unsupported Cloud Regions (T1535)?\nA.  Configure Windows User Account Control to mitigate risk of adversaries obtaining elevated process access.\nB.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nC.  Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.\nD.  Perform regular software updates to mitigate exploitation risk.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Windows Admin Shares with Stolen Credentials (CAPEC-561)?\nA.  Enforce regular patching of software.\nB.  Design: Enforce principle of least privilege.\nC.  Do not allow accounts to be a local administrator on more than one system.\nD.  An iterative approach to input validation may be required to ensure that no dangerous characters are present. It may be necessary to implement redundant checking across different input validation layers. Ensure that invalid data is rejected as soon as possible and do not continue to work with it.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Windows Admin Shares with Stolen Credentials (CAPEC-561)",
      "ddmc_optionA": "Enforce regular patching of software.",
      "ddmc_optionB": "Design: Enforce principle of least privilege.",
      "ddmc_optionC": "Do not allow accounts to be a local administrator on more than one system.",
      "ddmc_optionD": "An iterative approach to input validation may be required to ensure that no dangerous characters are present. It may be necessary to implement redundant checking across different input validation layers. Ensure that invalid data is rejected as soon as possible and do not continue to work with it.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Do not allow accounts to be a local administrator on more than one system.",
      "prompts": [],
      "instruction": "How can you mitigate Windows Admin Shares with Stolen Credentials (CAPEC-561)?\nA.  Enforce regular patching of software.\nB.  Design: Enforce principle of least privilege.\nC.  Do not allow accounts to be a local administrator on more than one system.\nD.  An iterative approach to input validation may be required to ensure that no dangerous characters are present. It may be necessary to implement redundant checking across different input validation layers. Ensure that invalid data is rejected as soon as possible and do not continue to work with it.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect Covert Channel (CWE-514)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Covert Channel (CWE-514)",
      "ddmc_optionA": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionB": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionC": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionD": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect Covert Channel (CWE-514)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1037.001 (Logon Script (Windows))?\nA.  The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.\nB.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nC.  Employing file hash comparisons to detect known malware.\nD.  Restoring an object for an entity to access. This is the broadest class for object restoral.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1037.001 (Logon Script (Windows))",
      "ddmc_optionA": "The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.",
      "ddmc_optionB": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionC": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionD": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "prompts": [],
      "instruction": "How can you mitigate T1037.001 (Logon Script (Windows))?\nA.  The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.\nB.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nC.  Employing file hash comparisons to detect known malware.\nD.  Restoring an object for an entity to access. This is the broadest class for object restoral.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Netsh Helper DLL (T1546.007)?\nA.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nB.  Using kernel-level capabilities to isolate processes.\nC.  Blocking DNS Network Traffic based on criteria such as IP address, domain name, or DNS query type.\nD.  Collecting network communication protocol metadata and identifying statistical outliers.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Netsh Helper DLL (T1546.007)",
      "ddmc_optionA": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmc_optionB": "Using kernel-level capabilities to isolate processes.",
      "ddmc_optionC": "Blocking DNS Network Traffic based on criteria such as IP address, domain name, or DNS query type.",
      "ddmc_optionD": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Using kernel-level capabilities to isolate processes.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Netsh Helper DLL (T1546.007)?\nA.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nB.  Using kernel-level capabilities to isolate processes.\nC.  Blocking DNS Network Traffic based on criteria such as IP address, domain name, or DNS query type.\nD.  Collecting network communication protocol metadata and identifying statistical outliers.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Search Engines (T1593.002)?\nA.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nB.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nC.  Use intrusion detection signatures to block traffic at network boundaries.\nD.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Search Engines (T1593.002)",
      "ddmc_optionA": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmc_optionB": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_optionC": "Use intrusion detection signatures to block traffic at network boundaries.",
      "ddmc_optionD": "Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "prompts": [],
      "instruction": "How can you mitigate Search Engines (T1593.002)?\nA.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nB.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nC.  Use intrusion detection signatures to block traffic at network boundaries.\nD.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Stored Data Manipulation (T1565.001)?\nA.  The file removal technique deletes malicious artifacts or programs from a computer system.\nB.  Analyzing changes in service binary files by comparing to a source of truth.\nC.  Active logical link mapping sends and receives network traffic as a means to map the whole data link layer, where the links represent logical data flows rather than physical connection\nD.  File eviction techniques evict files from system storage.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Stored Data Manipulation (T1565.001)",
      "ddmc_optionA": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "ddmc_optionB": "Analyzing changes in service binary files by comparing to a source of truth.",
      "ddmc_optionC": "Active logical link mapping sends and receives network traffic as a means to map the whole data link layer, where the links represent logical data flows rather than physical connection",
      "ddmc_optionD": "File eviction techniques evict files from system storage.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "File eviction techniques evict files from system storage.",
      "prompts": [],
      "instruction": "How can you mitigate Stored Data Manipulation (T1565.001)?\nA.  The file removal technique deletes malicious artifacts or programs from a computer system.\nB.  Analyzing changes in service binary files by comparing to a source of truth.\nC.  Active logical link mapping sends and receives network traffic as a means to map the whole data link layer, where the links represent logical data flows rather than physical connection\nD.  File eviction techniques evict files from system storage.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate CAPEC-551 (Modify Existing Service)?\nA.  Limit privileges of user accounts so service changes can only be performed by authorized administrators. Also monitor any service changes that may occur inadvertently.\nB.  Employ robust identification and audit/blocking using an allowlist of applications on your system. Unnecessary applications, utilities, and configurations will have a presence in the system registry that can be leveraged by an adversary through this attack pattern.\nC.  Implementation: Perform input validation for all remote content.\nD.  Conduct rigorous threat assessments of suppliers.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CAPEC-551 (Modify Existing Service)",
      "ddmc_optionA": "Limit privileges of user accounts so service changes can only be performed by authorized administrators. Also monitor any service changes that may occur inadvertently.",
      "ddmc_optionB": "Employ robust identification and audit/blocking using an allowlist of applications on your system. Unnecessary applications, utilities, and configurations will have a presence in the system registry that can be leveraged by an adversary through this attack pattern.",
      "ddmc_optionC": "Implementation: Perform input validation for all remote content.",
      "ddmc_optionD": "Conduct rigorous threat assessments of suppliers.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Limit privileges of user accounts so service changes can only be performed by authorized administrators. Also monitor any service changes that may occur inadvertently.",
      "prompts": [],
      "instruction": "How can you mitigate CAPEC-551 (Modify Existing Service)?\nA.  Limit privileges of user accounts so service changes can only be performed by authorized administrators. Also monitor any service changes that may occur inadvertently.\nB.  Employ robust identification and audit/blocking using an allowlist of applications on your system. Unnecessary applications, utilities, and configurations will have a presence in the system registry that can be leveraged by an adversary through this attack pattern.\nC.  Implementation: Perform input validation for all remote content.\nD.  Conduct rigorous threat assessments of suppliers.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Improper Access Control in Fabric Bridge (CWE-1317)?\nA.  Implement access-control checks in the bridge for both upstream and downstream transactions.\nB.  Because setting manipulation covers a diverse set of functions, any attempt at illustrating it will inevitably be incomplete. Rather than searching for a tight-knit relationship between the functions addressed in the setting manipulation category, take a step back and consider the sorts of system values that an attacker should not be allowed to control.\nC.  If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.\nD.  When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Access Control in Fabric Bridge (CWE-1317)",
      "ddmc_optionA": "Implement access-control checks in the bridge for both upstream and downstream transactions.",
      "ddmc_optionB": "Because setting manipulation covers a diverse set of functions, any attempt at illustrating it will inevitably be incomplete. Rather than searching for a tight-knit relationship between the functions addressed in the setting manipulation category, take a step back and consider the sorts of system values that an attacker should not be allowed to control.",
      "ddmc_optionC": "If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.",
      "ddmc_optionD": "When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Implement access-control checks in the bridge for both upstream and downstream transactions.",
      "prompts": [],
      "instruction": "What is a method to mitigate Improper Access Control in Fabric Bridge (CWE-1317)?\nA.  Implement access-control checks in the bridge for both upstream and downstream transactions.\nB.  Because setting manipulation covers a diverse set of functions, any attempt at illustrating it will inevitably be incomplete. Rather than searching for a tight-knit relationship between the functions addressed in the setting manipulation category, take a step back and consider the sorts of system values that an attacker should not be allowed to control.\nC.  If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.\nD.  When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1553.001 (Gatekeeper Bypass)?\nA.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nB.  Prevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.\nC.  Block execution of code on a system through application control, and/or script blocking.\nD.  Block execution of code on a system through application control, and/or script blocking.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1553.001 (Gatekeeper Bypass)",
      "ddmc_optionA": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "ddmc_optionB": "Prevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.",
      "ddmc_optionC": "Block execution of code on a system through application control, and/or script blocking.",
      "ddmc_optionD": "Block execution of code on a system through application control, and/or script blocking.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Block execution of code on a system through application control, and/or script blocking.",
      "prompts": [],
      "instruction": "How can you mitigate T1553.001 (Gatekeeper Bypass)?\nA.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nB.  Prevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.\nC.  Block execution of code on a system through application control, and/or script blocking.\nD.  Block execution of code on a system through application control, and/or script blocking.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1021.004 (SSH)?\nA.  Detecting any suspicious changes to files in a computer system.\nB.  Restoring the data in a database.\nC.  Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.\nD.  Restricting network traffic originating from any location.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1021.004 (SSH)",
      "ddmc_optionA": "Detecting any suspicious changes to files in a computer system.",
      "ddmc_optionB": "Restoring the data in a database.",
      "ddmc_optionC": "Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.",
      "ddmc_optionD": "Restricting network traffic originating from any location.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Restricting network traffic originating from any location.",
      "prompts": [],
      "instruction": "How can you mitigate T1021.004 (SSH)?\nA.  Detecting any suspicious changes to files in a computer system.\nB.  Restoring the data in a database.\nC.  Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.\nD.  Restricting network traffic originating from any location.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Integer Overflow or Wraparound (CWE-190)?\nA.  In some industries such as healthcare [REF-1320] [REF-1322] or technologies such as the cloud [REF-1321], it might be unclear about who is responsible for applying patches for third-party vulnerabilities: the vendor, the operator/customer, or a separate service. Clarifying roles and responsibilities can be important to minimize confusion or unnecessary delay when third-party vulnerabilities are disclosed.\nB.  For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.\nC.  Run or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code. Examples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64]. Imported modules may be similarly realigned if their default memory addresses conflict with other modules, in a process known as \"rebasing\" (for Windows) and \"prelinking\" (for Linux) [REF-1332] using randomly generated addresses. ASLR for libraries cannot be used in conjunction with prelink since it would require relocating the libraries at run-time, defeating the whole purpose of prelinking. For more information on these techniques see D3-SAOR (Segment Address Offset Randomization) from D3FEND [REF-1335].\nD.  Antivirus software can help mitigate known malicious code.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Integer Overflow or Wraparound (CWE-190)",
      "ddmc_optionA": "In some industries such as healthcare [REF-1320] [REF-1322] or technologies such as the cloud [REF-1321], it might be unclear about who is responsible for applying patches for third-party vulnerabilities: the vendor, the operator/customer, or a separate service. Clarifying roles and responsibilities can be important to minimize confusion or unnecessary delay when third-party vulnerabilities are disclosed.",
      "ddmc_optionB": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.",
      "ddmc_optionC": "Run or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code. Examples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64]. Imported modules may be similarly realigned if their default memory addresses conflict with other modules, in a process known as \"rebasing\" (for Windows) and \"prelinking\" (for Linux) [REF-1332] using randomly generated addresses. ASLR for libraries cannot be used in conjunction with prelink since it would require relocating the libraries at run-time, defeating the whole purpose of prelinking. For more information on these techniques see D3-SAOR (Segment Address Offset Randomization) from D3FEND [REF-1335].",
      "ddmc_optionD": "Antivirus software can help mitigate known malicious code.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.",
      "prompts": [],
      "instruction": "What is a method to mitigate Integer Overflow or Wraparound (CWE-190)?\nA.  In some industries such as healthcare [REF-1320] [REF-1322] or technologies such as the cloud [REF-1321], it might be unclear about who is responsible for applying patches for third-party vulnerabilities: the vendor, the operator/customer, or a separate service. Clarifying roles and responsibilities can be important to minimize confusion or unnecessary delay when third-party vulnerabilities are disclosed.\nB.  For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.\nC.  Run or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code. Examples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64]. Imported modules may be similarly realigned if their default memory addresses conflict with other modules, in a process known as \"rebasing\" (for Windows) and \"prelinking\" (for Linux) [REF-1332] using randomly generated addresses. ASLR for libraries cannot be used in conjunction with prelink since it would require relocating the libraries at run-time, defeating the whole purpose of prelinking. For more information on these techniques see D3-SAOR (Segment Address Offset Randomization) from D3FEND [REF-1335].\nD.  Antivirus software can help mitigate known malicious code.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Domain Fronting (T1090.004)?\nA.  Determining if a URL is benign or malicious by analyzing the URL or its components.\nB.  Employing a pattern matching algorithm to statically analyze the content of files.\nC.  Restoring an software configuration.\nD.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Domain Fronting (T1090.004)",
      "ddmc_optionA": "Determining if a URL is benign or malicious by analyzing the URL or its components.",
      "ddmc_optionB": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_optionC": "Restoring an software configuration.",
      "ddmc_optionD": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Domain Fronting (T1090.004)?\nA.  Determining if a URL is benign or malicious by analyzing the URL or its components.\nB.  Employing a pattern matching algorithm to statically analyze the content of files.\nC.  Restoring an software configuration.\nD.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Logon Script (Windows) (T1037.001)?\nA.  Using a digital signature to authenticate a file before opening.\nB.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nC.  Encrypting a file using a cryptographic key.\nD.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Logon Script (Windows) (T1037.001)",
      "ddmc_optionA": "Using a digital signature to authenticate a file before opening.",
      "ddmc_optionB": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionC": "Encrypting a file using a cryptographic key.",
      "ddmc_optionD": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Using a digital signature to authenticate a file before opening.",
      "prompts": [],
      "instruction": "What is a method to mitigate Logon Script (Windows) (T1037.001)?\nA.  Using a digital signature to authenticate a file before opening.\nB.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nC.  Encrypting a file using a cryptographic key.\nD.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Incomplete List of Disallowed Inputs (CWE-184)?\nA.  Do not rely exclusively on detecting disallowed inputs. There are too many variants to encode a character, especially when different environments are used, so there is a high likelihood of missing some variants. Only use detection of disallowed inputs as a mechanism for detecting suspicious activity. Ensure that you are using other protection mechanisms that only identify \"good\" input - such as lists of allowed inputs - and ensure that you are properly encoding your outputs.\nB.  Identify and consult all relevant regulations for personal privacy. An organization may be required to comply with certain federal and state regulations, depending on its location, the type of business it conducts, and the nature of any private data it handles. Regulations may include Safe Harbor Privacy Framework [REF-340], Gramm-Leach Bliley Act (GLBA) [REF-341], Health Insurance Portability and Accountability Act (HIPAA) [REF-342], General Data Protection Regulation (GDPR) [REF-1047], California Consumer Privacy Act (CCPA) [REF-1048], and others.\nC.  Temporary files and other supporting resources should be deleted/released immediately after they are no longer needed.\nD.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Incomplete List of Disallowed Inputs (CWE-184)",
      "ddmc_optionA": "Do not rely exclusively on detecting disallowed inputs. There are too many variants to encode a character, especially when different environments are used, so there is a high likelihood of missing some variants. Only use detection of disallowed inputs as a mechanism for detecting suspicious activity. Ensure that you are using other protection mechanisms that only identify \"good\" input - such as lists of allowed inputs - and ensure that you are properly encoding your outputs.",
      "ddmc_optionB": "Identify and consult all relevant regulations for personal privacy. An organization may be required to comply with certain federal and state regulations, depending on its location, the type of business it conducts, and the nature of any private data it handles. Regulations may include Safe Harbor Privacy Framework [REF-340], Gramm-Leach Bliley Act (GLBA) [REF-341], Health Insurance Portability and Accountability Act (HIPAA) [REF-342], General Data Protection Regulation (GDPR) [REF-1047], California Consumer Privacy Act (CCPA) [REF-1048], and others.",
      "ddmc_optionC": "Temporary files and other supporting resources should be deleted/released immediately after they are no longer needed.",
      "ddmc_optionD": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Do not rely exclusively on detecting disallowed inputs. There are too many variants to encode a character, especially when different environments are used, so there is a high likelihood of missing some variants. Only use detection of disallowed inputs as a mechanism for detecting suspicious activity. Ensure that you are using other protection mechanisms that only identify \"good\" input - such as lists of allowed inputs - and ensure that you are properly encoding your outputs.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Incomplete List of Disallowed Inputs (CWE-184)?\nA.  Do not rely exclusively on detecting disallowed inputs. There are too many variants to encode a character, especially when different environments are used, so there is a high likelihood of missing some variants. Only use detection of disallowed inputs as a mechanism for detecting suspicious activity. Ensure that you are using other protection mechanisms that only identify \"good\" input - such as lists of allowed inputs - and ensure that you are properly encoding your outputs.\nB.  Identify and consult all relevant regulations for personal privacy. An organization may be required to comply with certain federal and state regulations, depending on its location, the type of business it conducts, and the nature of any private data it handles. Regulations may include Safe Harbor Privacy Framework [REF-340], Gramm-Leach Bliley Act (GLBA) [REF-341], Health Insurance Portability and Accountability Act (HIPAA) [REF-342], General Data Protection Regulation (GDPR) [REF-1047], California Consumer Privacy Act (CCPA) [REF-1048], and others.\nC.  Temporary files and other supporting resources should be deleted/released immediately after they are no longer needed.\nD.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate System Time Discovery (T1124)?\nA.  Restoring the data in a database.\nB.  Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.\nC.  Using a digital signature to authenticate a file before opening.\nD.  The file removal technique deletes malicious artifacts or programs from a computer system.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "System Time Discovery (T1124)",
      "ddmc_optionA": "Restoring the data in a database.",
      "ddmc_optionB": "Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.",
      "ddmc_optionC": "Using a digital signature to authenticate a file before opening.",
      "ddmc_optionD": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.",
      "prompts": [],
      "instruction": "How can you mitigate System Time Discovery (T1124)?\nA.  Restoring the data in a database.\nB.  Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.\nC.  Using a digital signature to authenticate a file before opening.\nD.  The file removal technique deletes malicious artifacts or programs from a computer system.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1176 (Browser Extensions)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  Preventing execution of any address in a memory region other than the code segment.\nC.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nD.  Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1176 (Browser Extensions)",
      "ddmc_optionA": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionB": "Preventing execution of any address in a memory region other than the code segment.",
      "ddmc_optionC": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_optionD": "Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1176 (Browser Extensions)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  Preventing execution of any address in a memory region other than the code segment.\nC.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nD.  Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Use of Known Operating System Credentials (CAPEC-653)?\nA.  You are redirected to a website that instructs you to call the number on-screen to address the call-to-action.\nB.  Data is being transferred and/or removed from systems/applications within the network.\nC.  Digital forensics tools may produce output that indicates an attack of this nature has occurred. Examples include unexpected disk partitions and/or unusual strings.\nD.  Authentication attempts are originating from IP addresses or locations that are inconsistent with a user's normal IP addresses or locations.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Use of Known Operating System Credentials (CAPEC-653)",
      "ddmc_optionA": "You are redirected to a website that instructs you to call the number on-screen to address the call-to-action.",
      "ddmc_optionB": "Data is being transferred and/or removed from systems/applications within the network.",
      "ddmc_optionC": "Digital forensics tools may produce output that indicates an attack of this nature has occurred. Examples include unexpected disk partitions and/or unusual strings.",
      "ddmc_optionD": "Authentication attempts are originating from IP addresses or locations that are inconsistent with a user's normal IP addresses or locations.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Authentication attempts are originating from IP addresses or locations that are inconsistent with a user's normal IP addresses or locations.",
      "prompts": [],
      "instruction": "What is a method to detect Use of Known Operating System Credentials (CAPEC-653)?\nA.  You are redirected to a website that instructs you to call the number on-screen to address the call-to-action.\nB.  Data is being transferred and/or removed from systems/applications within the network.\nC.  Digital forensics tools may produce output that indicates an attack of this nature has occurred. Examples include unexpected disk partitions and/or unusual strings.\nD.  Authentication attempts are originating from IP addresses or locations that are inconsistent with a user's normal IP addresses or locations.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Assigning instead of Comparing (CWE-481)?\nA.  Enable CORS-like access restrictions by verifying the 'Origin' header during the WebSocket handshake.\nB.  Ensure that the admin tool refreshes its model of the underlying OS on a regular basis, and note any inconsistencies with configuration files or other data sources that are expected to have the same data.\nC.  Recommendations include implementing a security policy within your organization that prohibits backing up web application source code in the webroot.\nD.  Use expressions such as \"sizeof(*pointer)\" instead of \"sizeof(pointer)\", unless you intend to run sizeof() on a pointer type to gain some platform independence or if you are allocating a variable on the stack.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Assigning instead of Comparing (CWE-481)",
      "ddmc_optionA": "Enable CORS-like access restrictions by verifying the 'Origin' header during the WebSocket handshake.",
      "ddmc_optionB": "Ensure that the admin tool refreshes its model of the underlying OS on a regular basis, and note any inconsistencies with configuration files or other data sources that are expected to have the same data.",
      "ddmc_optionC": "Recommendations include implementing a security policy within your organization that prohibits backing up web application source code in the webroot.",
      "ddmc_optionD": "Use expressions such as \"sizeof(*pointer)\" instead of \"sizeof(pointer)\", unless you intend to run sizeof() on a pointer type to gain some platform independence or if you are allocating a variable on the stack.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Use expressions such as \"sizeof(*pointer)\" instead of \"sizeof(pointer)\", unless you intend to run sizeof() on a pointer type to gain some platform independence or if you are allocating a variable on the stack.",
      "prompts": [],
      "instruction": "How can you mitigate Assigning instead of Comparing (CWE-481)?\nA.  Enable CORS-like access restrictions by verifying the 'Origin' header during the WebSocket handshake.\nB.  Ensure that the admin tool refreshes its model of the underlying OS on a regular basis, and note any inconsistencies with configuration files or other data sources that are expected to have the same data.\nC.  Recommendations include implementing a security policy within your organization that prohibits backing up web application source code in the webroot.\nD.  Use expressions such as \"sizeof(*pointer)\" instead of \"sizeof(pointer)\", unless you intend to run sizeof() on a pointer type to gain some platform independence or if you are allocating a variable on the stack.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Weak Encoding for Password (CWE-261)?\nA.  For all of the programmable memory protection regions, the memory protection unit (MPU) design can define a priority scheme. For example: if three memory regions can be programmed (Region_0, Region_1, and Region_2), the design can enforce a priority scheme, such that, if a system address is within multiple regions, then the region with the lowest ID takes priority and the access-control policy of that region will be applied. In some MPU designs, the priority scheme can also be programmed by trusted software. Hardware logic or trusted firmware can also check for region definitions and block programming of memory regions with overlapping addresses. The memory-access-control-check filter can also be designed to apply a policy filter to all of the overlapping ranges, i.e., if an address is within Region_0 and Region_1, then access to this address is only granted if both Region_0 and Region_1 policies allow the access.\nB.  Passwords should be encrypted with keys that are at least 128 bits in length for adequate security.\nC.  Client side tokens/parameters should not be such that it would be easy/predictable to guess another valid state.\nD.  Remove debug log files before deploying the application into production.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Weak Encoding for Password (CWE-261)",
      "ddmc_optionA": "For all of the programmable memory protection regions, the memory protection unit (MPU) design can define a priority scheme. For example: if three memory regions can be programmed (Region_0, Region_1, and Region_2), the design can enforce a priority scheme, such that, if a system address is within multiple regions, then the region with the lowest ID takes priority and the access-control policy of that region will be applied. In some MPU designs, the priority scheme can also be programmed by trusted software. Hardware logic or trusted firmware can also check for region definitions and block programming of memory regions with overlapping addresses. The memory-access-control-check filter can also be designed to apply a policy filter to all of the overlapping ranges, i.e., if an address is within Region_0 and Region_1, then access to this address is only granted if both Region_0 and Region_1 policies allow the access.",
      "ddmc_optionB": "Passwords should be encrypted with keys that are at least 128 bits in length for adequate security.",
      "ddmc_optionC": "Client side tokens/parameters should not be such that it would be easy/predictable to guess another valid state.",
      "ddmc_optionD": "Remove debug log files before deploying the application into production.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Passwords should be encrypted with keys that are at least 128 bits in length for adequate security.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Weak Encoding for Password (CWE-261)?\nA.  For all of the programmable memory protection regions, the memory protection unit (MPU) design can define a priority scheme. For example: if three memory regions can be programmed (Region_0, Region_1, and Region_2), the design can enforce a priority scheme, such that, if a system address is within multiple regions, then the region with the lowest ID takes priority and the access-control policy of that region will be applied. In some MPU designs, the priority scheme can also be programmed by trusted software. Hardware logic or trusted firmware can also check for region definitions and block programming of memory regions with overlapping addresses. The memory-access-control-check filter can also be designed to apply a policy filter to all of the overlapping ranges, i.e., if an address is within Region_0 and Region_1, then access to this address is only granted if both Region_0 and Region_1 policies allow the access.\nB.  Passwords should be encrypted with keys that are at least 128 bits in length for adequate security.\nC.  Client side tokens/parameters should not be such that it would be easy/predictable to guess another valid state.\nD.  Remove debug log files before deploying the application into production.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Compromise Host Software Binary (T1554)?\nA.  The file removal technique deletes malicious artifacts or programs from a computer system.\nB.  The email removal technique deletes email files from system storage.\nC.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nD.  Cryptographically verifying firmware integrity.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Compromise Host Software Binary (T1554)",
      "ddmc_optionA": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "ddmc_optionB": "The email removal technique deletes email files from system storage.",
      "ddmc_optionC": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_optionD": "Cryptographically verifying firmware integrity.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Compromise Host Software Binary (T1554)?\nA.  The file removal technique deletes malicious artifacts or programs from a computer system.\nB.  The email removal technique deletes email files from system storage.\nC.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nD.  Cryptographically verifying firmware integrity.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Code Repositories (T1213.003)?\nA.  Restoring software to a host.\nB.  Restoring the data in a database.\nC.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nD.  The detection of an internal host relaying traffic between the internal network and the external network.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Code Repositories (T1213.003)",
      "ddmc_optionA": "Restoring software to a host.",
      "ddmc_optionB": "Restoring the data in a database.",
      "ddmc_optionC": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_optionD": "The detection of an internal host relaying traffic between the internal network and the external network.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Restoring the data in a database.",
      "prompts": [],
      "instruction": "What is a method to mitigate Code Repositories (T1213.003)?\nA.  Restoring software to a host.\nB.  Restoring the data in a database.\nC.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nD.  The detection of an internal host relaying traffic between the internal network and the external network.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate ASP.NET Misconfiguration: Missing Custom Error Page (CWE-12)?\nA.  Protect mutable objects by making them private. Restrict access to the getter and setter as well.\nB.  Verify return values are correct and do not supply sensitive information about the system.\nC.  Avoid using vulnerable temp file functions.\nD.  If the architecture is unable to prevent the attack, using filtering components may reduce the ability to implement an attack, however, consideration must be given to the physical removal of the filter elements.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "ASP.NET Misconfiguration: Missing Custom Error Page (CWE-12)",
      "ddmc_optionA": "Protect mutable objects by making them private. Restrict access to the getter and setter as well.",
      "ddmc_optionB": "Verify return values are correct and do not supply sensitive information about the system.",
      "ddmc_optionC": "Avoid using vulnerable temp file functions.",
      "ddmc_optionD": "If the architecture is unable to prevent the attack, using filtering components may reduce the ability to implement an attack, however, consideration must be given to the physical removal of the filter elements.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Verify return values are correct and do not supply sensitive information about the system.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate ASP.NET Misconfiguration: Missing Custom Error Page (CWE-12)?\nA.  Protect mutable objects by making them private. Restrict access to the getter and setter as well.\nB.  Verify return values are correct and do not supply sensitive information about the system.\nC.  Avoid using vulnerable temp file functions.\nD.  If the architecture is unable to prevent the attack, using filtering components may reduce the ability to implement an attack, however, consideration must be given to the physical removal of the filter elements.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Data Injected During Configuration (CAPEC-536)?\nA.  Make sure to protect client side authentication tokens for confidentiality (encryption) and integrity (signed hash)\nB.  Strong input validation - All user-controllable input must be validated and filtered for illegal formatting characters.\nC.  Ensure that proper access control is implemented on all systems to prevent unauthorized access to system files and processes.\nD.  Reference vulnerability databases to determine if the software contains known vulnerabilities.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Data Injected During Configuration (CAPEC-536)",
      "ddmc_optionA": "Make sure to protect client side authentication tokens for confidentiality (encryption) and integrity (signed hash)",
      "ddmc_optionB": "Strong input validation - All user-controllable input must be validated and filtered for illegal formatting characters.",
      "ddmc_optionC": "Ensure that proper access control is implemented on all systems to prevent unauthorized access to system files and processes.",
      "ddmc_optionD": "Reference vulnerability databases to determine if the software contains known vulnerabilities.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Ensure that proper access control is implemented on all systems to prevent unauthorized access to system files and processes.",
      "prompts": [],
      "instruction": "What is a method to mitigate Data Injected During Configuration (CAPEC-536)?\nA.  Make sure to protect client side authentication tokens for confidentiality (encryption) and integrity (signed hash)\nB.  Strong input validation - All user-controllable input must be validated and filtered for illegal formatting characters.\nC.  Ensure that proper access control is implemented on all systems to prevent unauthorized access to system files and processes.\nD.  Reference vulnerability databases to determine if the software contains known vulnerabilities.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Spyware (CWE-512)?\nA.  Understand all the potential locations that are accessible to attackers. For example, some programmers assume that cookies and hidden form fields cannot be modified by an attacker, or they may not consider that environment variables can be modified before a privileged program is invoked.\nB.  Use spyware detection and removal software.\nC.  Refactor your code to avoid using reflection.\nD.  For all configuration files, executables, and libraries, make sure that they are only readable and writable by the software's administrator.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Spyware (CWE-512)",
      "ddmc_optionA": "Understand all the potential locations that are accessible to attackers. For example, some programmers assume that cookies and hidden form fields cannot be modified by an attacker, or they may not consider that environment variables can be modified before a privileged program is invoked.",
      "ddmc_optionB": "Use spyware detection and removal software.",
      "ddmc_optionC": "Refactor your code to avoid using reflection.",
      "ddmc_optionD": "For all configuration files, executables, and libraries, make sure that they are only readable and writable by the software's administrator.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Use spyware detection and removal software.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Spyware (CWE-512)?\nA.  Understand all the potential locations that are accessible to attackers. For example, some programmers assume that cookies and hidden form fields cannot be modified by an attacker, or they may not consider that environment variables can be modified before a privileged program is invoked.\nB.  Use spyware detection and removal software.\nC.  Refactor your code to avoid using reflection.\nD.  For all configuration files, executables, and libraries, make sure that they are only readable and writable by the software's administrator.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate T1070.002 (Clear Linux or Mac System Logs)?\nA.  Restoring a file for an entity to access.\nB.  Analyzing changes in service binary files by comparing to a source of truth.\nC.  Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\nD.  Restricting a user account's access to resources.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1070.002 (Clear Linux or Mac System Logs)",
      "ddmc_optionA": "Restoring a file for an entity to access.",
      "ddmc_optionB": "Analyzing changes in service binary files by comparing to a source of truth.",
      "ddmc_optionC": "Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.",
      "ddmc_optionD": "Restricting a user account's access to resources.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Analyzing changes in service binary files by comparing to a source of truth.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate T1070.002 (Clear Linux or Mac System Logs)?\nA.  Restoring a file for an entity to access.\nB.  Analyzing changes in service binary files by comparing to a source of truth.\nC.  Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\nD.  Restricting a user account's access to resources.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Archive via Utility (T1560.001)?\nA.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nB.  Employing a pattern matching rule language to analyze the content of files.\nC.  Using a digital signature to authenticate a file before opening.\nD.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Archive via Utility (T1560.001)",
      "ddmc_optionA": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionB": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_optionC": "Using a digital signature to authenticate a file before opening.",
      "ddmc_optionD": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Employing a pattern matching rule language to analyze the content of files.",
      "prompts": [],
      "instruction": "What is a method to mitigate Archive via Utility (T1560.001)?\nA.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nB.  Employing a pattern matching rule language to analyze the content of files.\nC.  Using a digital signature to authenticate a file before opening.\nD.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Clear Linux or Mac System Logs (T1070.002)?\nA.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nB.  Employing file hash comparisons to detect known malware.\nC.  Blocking the resolution of any subdomain of a specified domain name.\nD.  Preventing one process from writing to the memory space of another process through hardware based address manager implementations.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Clear Linux or Mac System Logs (T1070.002)",
      "ddmc_optionA": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmc_optionB": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionC": "Blocking the resolution of any subdomain of a specified domain name.",
      "ddmc_optionD": "Preventing one process from writing to the memory space of another process through hardware based address manager implementations.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Employing file hash comparisons to detect known malware.",
      "prompts": [],
      "instruction": "What is a method to mitigate Clear Linux or Mac System Logs (T1070.002)?\nA.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nB.  Employing file hash comparisons to detect known malware.\nC.  Blocking the resolution of any subdomain of a specified domain name.\nD.  Preventing one process from writing to the memory space of another process through hardware based address manager implementations.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1011.001 (Exfiltration Over Bluetooth)?\nA.  Perform regular software updates to mitigate exploitation risk.\nB.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nC.  Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.\nD.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1011.001 (Exfiltration Over Bluetooth)",
      "ddmc_optionA": "Perform regular software updates to mitigate exploitation risk.",
      "ddmc_optionB": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "ddmc_optionC": "Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.",
      "ddmc_optionD": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
      "prompts": [],
      "instruction": "How can you mitigate T1011.001 (Exfiltration Over Bluetooth)?\nA.  Perform regular software updates to mitigate exploitation risk.\nB.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nC.  Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.\nD.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect Improper Protections Against Hardware Overheating (CWE-1338)?\nA.  Code analysis can require knowledge of API behaviors for library functions that might return NULL, reducing the chances of detection when unknown libraries are used.\nB.  Automated dynamic analysis may find many or all possible interfaces that do not require authorization, but manual analysis is required to determine if the lack of authorization violates business logic.\nC.  Dynamic tests should be performed to stress-test temperature controls.\nD.  Testing of memory-device contents after clearing or erase commands. Dynamic analysis of memory contents during device operation to detect specific, confidential assets. Architecture and design analysis of memory clear and erase operations.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Improper Protections Against Hardware Overheating (CWE-1338)",
      "ddmc_optionA": "Code analysis can require knowledge of API behaviors for library functions that might return NULL, reducing the chances of detection when unknown libraries are used.",
      "ddmc_optionB": "Automated dynamic analysis may find many or all possible interfaces that do not require authorization, but manual analysis is required to determine if the lack of authorization violates business logic.",
      "ddmc_optionC": "Dynamic tests should be performed to stress-test temperature controls.",
      "ddmc_optionD": "Testing of memory-device contents after clearing or erase commands. Dynamic analysis of memory contents during device operation to detect specific, confidential assets. Architecture and design analysis of memory clear and erase operations.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Dynamic tests should be performed to stress-test temperature controls.",
      "prompts": [],
      "instruction": "How can you detect Improper Protections Against Hardware Overheating (CWE-1338)?\nA.  Code analysis can require knowledge of API behaviors for library functions that might return NULL, reducing the chances of detection when unknown libraries are used.\nB.  Automated dynamic analysis may find many or all possible interfaces that do not require authorization, but manual analysis is required to determine if the lack of authorization violates business logic.\nC.  Dynamic tests should be performed to stress-test temperature controls.\nD.  Testing of memory-device contents after clearing or erase commands. Dynamic analysis of memory contents during device operation to detect specific, confidential assets. Architecture and design analysis of memory clear and erase operations.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Social Media Accounts (T1586.001)?\nA.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nB.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\nC.  Protect sensitive information with strong encryption.\nD.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Social Media Accounts (T1586.001)",
      "ddmc_optionA": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
      "ddmc_optionB": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
      "ddmc_optionC": "Protect sensitive information with strong encryption.",
      "ddmc_optionD": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Social Media Accounts (T1586.001)?\nA.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nB.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\nC.  Protect sensitive information with strong encryption.\nD.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Netsh Helper DLL (T1546.007)?\nA.  Randomizing the base (start) address of one or more segments of memory during the initialization of a process.\nB.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  Monitoring the existence of or changes to Domain User Accounts.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Netsh Helper DLL (T1546.007)",
      "ddmc_optionA": "Randomizing the base (start) address of one or more segments of memory during the initialization of a process.",
      "ddmc_optionB": "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.",
      "ddmc_optionC": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionD": "Monitoring the existence of or changes to Domain User Accounts.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Netsh Helper DLL (T1546.007)?\nA.  Randomizing the base (start) address of one or more segments of memory during the initialization of a process.\nB.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  Monitoring the existence of or changes to Domain User Accounts.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Compromise Infrastructure (T1584)?\nA.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nB.  Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.\nC.  Block users or groups from installing unapproved software.\nD.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Compromise Infrastructure (T1584)",
      "ddmc_optionA": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmc_optionB": "Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.",
      "ddmc_optionC": "Block users or groups from installing unapproved software.",
      "ddmc_optionD": "Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Compromise Infrastructure (T1584)?\nA.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nB.  Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.\nC.  Block users or groups from installing unapproved software.\nD.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Deobfuscate/Decode Files or Information (T1140)?\nA.  Process eviction techniques terminate or remove running process.\nB.  Configuring a kernel to use an allow or deny list to filter kernel api calls.\nC.  Restoring an entity's access to resources.\nD.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Deobfuscate/Decode Files or Information (T1140)",
      "ddmc_optionA": "Process eviction techniques terminate or remove running process.",
      "ddmc_optionB": "Configuring a kernel to use an allow or deny list to filter kernel api calls.",
      "ddmc_optionC": "Restoring an entity's access to resources.",
      "ddmc_optionD": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Configuring a kernel to use an allow or deny list to filter kernel api calls.",
      "prompts": [],
      "instruction": "How can you mitigate Deobfuscate/Decode Files or Information (T1140)?\nA.  Process eviction techniques terminate or remove running process.\nB.  Configuring a kernel to use an allow or deny list to filter kernel api calls.\nC.  Restoring an entity's access to resources.\nD.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1564 (Hide Artifacts)?\nA.  Vulnerability scanning is used to find potentially exploitable software vulnerabilities to remediate them.\nB.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\nC.  This mitigation describes any guidance or training given to developers of applications to avoid introducing security weaknesses that an adversary may be able to take advantage of.\nD.  Block execution of code on a system through application control, and/or script blocking.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1564 (Hide Artifacts)",
      "ddmc_optionA": "Vulnerability scanning is used to find potentially exploitable software vulnerabilities to remediate them.",
      "ddmc_optionB": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
      "ddmc_optionC": "This mitigation describes any guidance or training given to developers of applications to avoid introducing security weaknesses that an adversary may be able to take advantage of.",
      "ddmc_optionD": "Block execution of code on a system through application control, and/or script blocking.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "This mitigation describes any guidance or training given to developers of applications to avoid introducing security weaknesses that an adversary may be able to take advantage of.",
      "prompts": [],
      "instruction": "How can you mitigate T1564 (Hide Artifacts)?\nA.  Vulnerability scanning is used to find potentially exploitable software vulnerabilities to remediate them.\nB.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\nC.  This mitigation describes any guidance or training given to developers of applications to avoid introducing security weaknesses that an adversary may be able to take advantage of.\nD.  Block execution of code on a system through application control, and/or script blocking.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Use of Hard-coded Credentials (CWE-798)?\nA.  Directly convert your input type into the expected data type, such as using a conversion function that translates a string into a number. After converting to the expected data type, ensure that the input's values fall within the expected range of allowable values and that multi-field consistencies are maintained.\nB.  Use the template engine's sandbox or restricted mode, if available.\nC.  Ensure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success. If errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not.\nD.  Regularly wrap sub-expressions in parentheses, especially in security-critical code.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Use of Hard-coded Credentials (CWE-798)",
      "ddmc_optionA": "Directly convert your input type into the expected data type, such as using a conversion function that translates a string into a number. After converting to the expected data type, ensure that the input's values fall within the expected range of allowable values and that multi-field consistencies are maintained.",
      "ddmc_optionB": "Use the template engine's sandbox or restricted mode, if available.",
      "ddmc_optionC": "Ensure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success. If errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not.",
      "ddmc_optionD": "Regularly wrap sub-expressions in parentheses, especially in security-critical code.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Regularly wrap sub-expressions in parentheses, especially in security-critical code.",
      "prompts": [],
      "instruction": "How can you mitigate Use of Hard-coded Credentials (CWE-798)?\nA.  Directly convert your input type into the expected data type, such as using a conversion function that translates a string into a number. After converting to the expected data type, ensure that the input's values fall within the expected range of allowable values and that multi-field consistencies are maintained.\nB.  Use the template engine's sandbox or restricted mode, if available.\nC.  Ensure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success. If errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not.\nD.  Regularly wrap sub-expressions in parentheses, especially in security-critical code.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Control Panel (T1218.002)?\nA.  Using biological measures in order to authenticate a user.\nB.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\nC.  Credential Eviction techniques disable or remove compromised credentials from a computer network.\nD.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Control Panel (T1218.002)",
      "ddmc_optionA": "Using biological measures in order to authenticate a user.",
      "ddmc_optionB": "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.",
      "ddmc_optionC": "Credential Eviction techniques disable or remove compromised credentials from a computer network.",
      "ddmc_optionD": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.",
      "prompts": [],
      "instruction": "What is a method to mitigate Control Panel (T1218.002)?\nA.  Using biological measures in order to authenticate a user.\nB.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\nC.  Credential Eviction techniques disable or remove compromised credentials from a computer network.\nD.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1562.009 (Safe Mode Boot)?\nA.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nB.  Block execution of code on a system through application control, and/or script blocking.\nC.  Block execution of code on a system through application control, and/or script blocking.\nD.  Perform regular software updates to mitigate exploitation risk.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1562.009 (Safe Mode Boot)",
      "ddmc_optionA": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_optionB": "Block execution of code on a system through application control, and/or script blocking.",
      "ddmc_optionC": "Block execution of code on a system through application control, and/or script blocking.",
      "ddmc_optionD": "Perform regular software updates to mitigate exploitation risk.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "prompts": [],
      "instruction": "How can you mitigate T1562.009 (Safe Mode Boot)?\nA.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nB.  Block execution of code on a system through application control, and/or script blocking.\nC.  Block execution of code on a system through application control, and/or script blocking.\nD.  Perform regular software updates to mitigate exploitation risk.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Clear Command History (T1070.003)?\nA.  Restrict execution of code to a virtual environment on or in transit to an endpoint system.\nB.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\nC.  Use remote security log and sensitive file storage where access can be controlled better to prevent exposure of intrusion detection log data or sensitive information.\nD.  Use a data loss prevention (DLP) strategy to categorize sensitive data, identify data formats indicative of personal identifiable information (PII), and restrict exfiltration of sensitive data.(Citations: PurpleSec Data Loss Prevention)\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Clear Command History (T1070.003)",
      "ddmc_optionA": "Restrict execution of code to a virtual environment on or in transit to an endpoint system.",
      "ddmc_optionB": "Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.",
      "ddmc_optionC": "Use remote security log and sensitive file storage where access can be controlled better to prevent exposure of intrusion detection log data or sensitive information.",
      "ddmc_optionD": "Use a data loss prevention (DLP) strategy to categorize sensitive data, identify data formats indicative of personal identifiable information (PII), and restrict exfiltration of sensitive data.(Citations: PurpleSec Data Loss Prevention)",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Use remote security log and sensitive file storage where access can be controlled better to prevent exposure of intrusion detection log data or sensitive information.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Clear Command History (T1070.003)?\nA.  Restrict execution of code to a virtual environment on or in transit to an endpoint system.\nB.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\nC.  Use remote security log and sensitive file storage where access can be controlled better to prevent exposure of intrusion detection log data or sensitive information.\nD.  Use a data loss prevention (DLP) strategy to categorize sensitive data, identify data formats indicative of personal identifiable information (PII), and restrict exfiltration of sensitive data.(Citations: PurpleSec Data Loss Prevention)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate T1068 (Exploitation for Privilege Escalation)?\nA.  Application Hardening makes an executable application more resilient to a class of exploits which either introduce new code or execute unwanted existing code. These techniques may be applied at compile-time or on an application binary.\nB.  Executing or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.\nC.  Network mapping encompasses the techniques to identify and model the physical layer, network layer, and data exchange layers of the organization's network and their physical location, and determine allowed pathways through that network.\nD.  Analyzing changes in service binary files by comparing to a source of truth.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1068 (Exploitation for Privilege Escalation)",
      "ddmc_optionA": "Application Hardening makes an executable application more resilient to a class of exploits which either introduce new code or execute unwanted existing code. These techniques may be applied at compile-time or on an application binary.",
      "ddmc_optionB": "Executing or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.",
      "ddmc_optionC": "Network mapping encompasses the techniques to identify and model the physical layer, network layer, and data exchange layers of the organization's network and their physical location, and determine allowed pathways through that network.",
      "ddmc_optionD": "Analyzing changes in service binary files by comparing to a source of truth.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Application Hardening makes an executable application more resilient to a class of exploits which either introduce new code or execute unwanted existing code. These techniques may be applied at compile-time or on an application binary.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate T1068 (Exploitation for Privilege Escalation)?\nA.  Application Hardening makes an executable application more resilient to a class of exploits which either introduce new code or execute unwanted existing code. These techniques may be applied at compile-time or on an application binary.\nB.  Executing or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.\nC.  Network mapping encompasses the techniques to identify and model the physical layer, network layer, and data exchange layers of the organization's network and their physical location, and determine allowed pathways through that network.\nD.  Analyzing changes in service binary files by comparing to a source of truth.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect T1484.001 (Group Policy Modification)?\nA.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\nB.  Loading, unloading, and manipulating modules on Linux systems can be detected by monitoring for the following commands: <code>modprobe</code>, <code>insmod</code>, <code>lsmod</code>, <code>rmmod</code>, or <code>modinfo</code>  LKMs are typically loaded into <code>/lib/modules</code> and have had the extension .ko (\"kernel object\") since version 2.6 of the Linux kernel.  Adversaries may run commands on the target system before loading a malicious module in order to ensure that it is properly compiled.  Adversaries may also execute commands to identify the exact version of the running Linux kernel and/or download multiple versions of the same .ko (kernel object) files to use the one appropriate for the running system. Many LKMs require Linux headers (specific to the target kernel) in order to compile properly. These are typically obtained through the operating systems package manager and installed like a normal package. On Ubuntu and Debian based systems this can be accomplished by running: <code>apt-get install linux-headers-$(uname -r)</code> On RHEL and CentOS based systems this can be accomplished by running: <code>yum install kernel-devel-$(uname -r)</code> On macOS, monitor for execution of <code>kextload</code> commands and user installed kernel extensions performing abnormal and/or potentially malicious activity (such as creating network connections). Monitor for new rows added in the <code>kext_policy</code> table. KextPolicy stores a list of user approved (non Apple) kernel extensions and a partial history of loaded kernel modules in a SQLite database, <code>/var/db/SystemPolicyConfiguration/KextPolicy</code>.(Citations: Linux Loadable Kernel Module Insert and Remove LKMs, Wikipedia Loadable Kernel Module, iDefense Rootkit Overview, Trend Micro Skidmap, User Approved Kernel Extension Pike\u2019s, Purves Kextpocalypse 2, Apple Developer Configuration Profile)\nC.  It is possible to detect GPO modifications by monitoring directory service changes using Windows event logs. Several events may be logged for such GPO modifications, including: * Event ID 5136 - A directory service object was modified * Event ID 5137 - A directory service object was created * Event ID 5138 - A directory service object was undeleted * Event ID 5139 - A directory service object was moved * Event ID 5141 - A directory service object was deleted GPO abuse will often be accompanied by some other behavior such as Scheduled Task/Job, which will have events associated with it to detect. Subsequent permission value modifications, like those to SeEnableDelegationPrivilege, can also be searched for in events associated with privileges assigned to new logons (Event ID 4672) and assignment of user rights (Event ID 4704).\nD.  Monitor internal and external websites for unplanned content changes. Monitor application logs for abnormal behavior that may indicate attempted or successful exploitation. Use deep packet inspection to look for artifacts of common exploit traffic, such as SQL injection. Web Application Firewalls may detect improper inputs attempting exploitation.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "T1484.001 (Group Policy Modification)",
      "ddmc_optionA": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.",
      "ddmc_optionB": "Loading, unloading, and manipulating modules on Linux systems can be detected by monitoring for the following commands: <code>modprobe</code>, <code>insmod</code>, <code>lsmod</code>, <code>rmmod</code>, or <code>modinfo</code>  LKMs are typically loaded into <code>/lib/modules</code> and have had the extension .ko (\"kernel object\") since version 2.6 of the Linux kernel.  Adversaries may run commands on the target system before loading a malicious module in order to ensure that it is properly compiled.  Adversaries may also execute commands to identify the exact version of the running Linux kernel and/or download multiple versions of the same .ko (kernel object) files to use the one appropriate for the running system. Many LKMs require Linux headers (specific to the target kernel) in order to compile properly. These are typically obtained through the operating systems package manager and installed like a normal package. On Ubuntu and Debian based systems this can be accomplished by running: <code>apt-get install linux-headers-$(uname -r)</code> On RHEL and CentOS based systems this can be accomplished by running: <code>yum install kernel-devel-$(uname -r)</code> On macOS, monitor for execution of <code>kextload</code> commands and user installed kernel extensions performing abnormal and/or potentially malicious activity (such as creating network connections). Monitor for new rows added in the <code>kext_policy</code> table. KextPolicy stores a list of user approved (non Apple) kernel extensions and a partial history of loaded kernel modules in a SQLite database, <code>/var/db/SystemPolicyConfiguration/KextPolicy</code>.(Citations: Linux Loadable Kernel Module Insert and Remove LKMs, Wikipedia Loadable Kernel Module, iDefense Rootkit Overview, Trend Micro Skidmap, User Approved Kernel Extension Pike\u2019s, Purves Kextpocalypse 2, Apple Developer Configuration Profile)",
      "ddmc_optionC": "It is possible to detect GPO modifications by monitoring directory service changes using Windows event logs. Several events may be logged for such GPO modifications, including: * Event ID 5136 - A directory service object was modified * Event ID 5137 - A directory service object was created * Event ID 5138 - A directory service object was undeleted * Event ID 5139 - A directory service object was moved * Event ID 5141 - A directory service object was deleted GPO abuse will often be accompanied by some other behavior such as Scheduled Task/Job, which will have events associated with it to detect. Subsequent permission value modifications, like those to SeEnableDelegationPrivilege, can also be searched for in events associated with privileges assigned to new logons (Event ID 4672) and assignment of user rights (Event ID 4704).",
      "ddmc_optionD": "Monitor internal and external websites for unplanned content changes. Monitor application logs for abnormal behavior that may indicate attempted or successful exploitation. Use deep packet inspection to look for artifacts of common exploit traffic, such as SQL injection. Web Application Firewalls may detect improper inputs attempting exploitation.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "It is possible to detect GPO modifications by monitoring directory service changes using Windows event logs. Several events may be logged for such GPO modifications, including: * Event ID 5136 - A directory service object was modified * Event ID 5137 - A directory service object was created * Event ID 5138 - A directory service object was undeleted * Event ID 5139 - A directory service object was moved * Event ID 5141 - A directory service object was deleted GPO abuse will often be accompanied by some other behavior such as Scheduled Task/Job, which will have events associated with it to detect. Subsequent permission value modifications, like those to SeEnableDelegationPrivilege, can also be searched for in events associated with privileges assigned to new logons (Event ID 4672) and assignment of user rights (Event ID 4704).",
      "prompts": [],
      "instruction": "What is a method to detect T1484.001 (Group Policy Modification)?\nA.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\nB.  Loading, unloading, and manipulating modules on Linux systems can be detected by monitoring for the following commands: <code>modprobe</code>, <code>insmod</code>, <code>lsmod</code>, <code>rmmod</code>, or <code>modinfo</code>  LKMs are typically loaded into <code>/lib/modules</code> and have had the extension .ko (\"kernel object\") since version 2.6 of the Linux kernel.  Adversaries may run commands on the target system before loading a malicious module in order to ensure that it is properly compiled.  Adversaries may also execute commands to identify the exact version of the running Linux kernel and/or download multiple versions of the same .ko (kernel object) files to use the one appropriate for the running system. Many LKMs require Linux headers (specific to the target kernel) in order to compile properly. These are typically obtained through the operating systems package manager and installed like a normal package. On Ubuntu and Debian based systems this can be accomplished by running: <code>apt-get install linux-headers-$(uname -r)</code> On RHEL and CentOS based systems this can be accomplished by running: <code>yum install kernel-devel-$(uname -r)</code> On macOS, monitor for execution of <code>kextload</code> commands and user installed kernel extensions performing abnormal and/or potentially malicious activity (such as creating network connections). Monitor for new rows added in the <code>kext_policy</code> table. KextPolicy stores a list of user approved (non Apple) kernel extensions and a partial history of loaded kernel modules in a SQLite database, <code>/var/db/SystemPolicyConfiguration/KextPolicy</code>.(Citations: Linux Loadable Kernel Module Insert and Remove LKMs, Wikipedia Loadable Kernel Module, iDefense Rootkit Overview, Trend Micro Skidmap, User Approved Kernel Extension Pike\u2019s, Purves Kextpocalypse 2, Apple Developer Configuration Profile)\nC.  It is possible to detect GPO modifications by monitoring directory service changes using Windows event logs. Several events may be logged for such GPO modifications, including: * Event ID 5136 - A directory service object was modified * Event ID 5137 - A directory service object was created * Event ID 5138 - A directory service object was undeleted * Event ID 5139 - A directory service object was moved * Event ID 5141 - A directory service object was deleted GPO abuse will often be accompanied by some other behavior such as Scheduled Task/Job, which will have events associated with it to detect. Subsequent permission value modifications, like those to SeEnableDelegationPrivilege, can also be searched for in events associated with privileges assigned to new logons (Event ID 4672) and assignment of user rights (Event ID 4704).\nD.  Monitor internal and external websites for unplanned content changes. Monitor application logs for abnormal behavior that may indicate attempted or successful exploitation. Use deep packet inspection to look for artifacts of common exploit traffic, such as SQL injection. Web Application Firewalls may detect improper inputs attempting exploitation.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect Targeted Malware (CAPEC-542)?\nA.  Suspicious or Malicious software is downloaded/installed on systems within the domain.\nB.  Software on a system is making calls to \"GetProcAddress()\" which is a commonly used function to implement dynamic API resolution\nC.  You are redirected to a website that instructs you to call the number on-screen to address the call-to-action.\nD.  Authentication attempts use credentials that have been used previously by the account in question.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Targeted Malware (CAPEC-542)",
      "ddmc_optionA": "Suspicious or Malicious software is downloaded/installed on systems within the domain.",
      "ddmc_optionB": "Software on a system is making calls to \"GetProcAddress()\" which is a commonly used function to implement dynamic API resolution",
      "ddmc_optionC": "You are redirected to a website that instructs you to call the number on-screen to address the call-to-action.",
      "ddmc_optionD": "Authentication attempts use credentials that have been used previously by the account in question.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Software on a system is making calls to \"GetProcAddress()\" which is a commonly used function to implement dynamic API resolution",
      "prompts": [],
      "instruction": "How can you detect Targeted Malware (CAPEC-542)?\nA.  Suspicious or Malicious software is downloaded/installed on systems within the domain.\nB.  Software on a system is making calls to \"GetProcAddress()\" which is a commonly used function to implement dynamic API resolution\nC.  You are redirected to a website that instructs you to call the number on-screen to address the call-to-action.\nD.  Authentication attempts use credentials that have been used previously by the account in question.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Services File Permissions Weakness (T1574.010)?\nA.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nB.  Detecting any suspicious changes to files in a computer system.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  A file created for the purposes of deceiving an adversary.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Services File Permissions Weakness (T1574.010)",
      "ddmc_optionA": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_optionB": "Detecting any suspicious changes to files in a computer system.",
      "ddmc_optionC": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionD": "A file created for the purposes of deceiving an adversary.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Services File Permissions Weakness (T1574.010)?\nA.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nB.  Detecting any suspicious changes to files in a computer system.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  A file created for the purposes of deceiving an adversary.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Traffic Signaling (T1205)?\nA.  A Credential created for the purpose of deceiving an adversary.\nB.  Collecting network communication protocol metadata and identifying statistical outliers.\nC.  Collecting authentication events, creating a baseline user profile, and determining whether authentication events are consistent with the baseline profile.\nD.  Application Hardening makes an executable application more resilient to a class of exploits which either introduce new code or execute unwanted existing code. These techniques may be applied at compile-time or on an application binary.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Traffic Signaling (T1205)",
      "ddmc_optionA": "A Credential created for the purpose of deceiving an adversary.",
      "ddmc_optionB": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmc_optionC": "Collecting authentication events, creating a baseline user profile, and determining whether authentication events are consistent with the baseline profile.",
      "ddmc_optionD": "Application Hardening makes an executable application more resilient to a class of exploits which either introduce new code or execute unwanted existing code. These techniques may be applied at compile-time or on an application binary.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "prompts": [],
      "instruction": "How can you mitigate Traffic Signaling (T1205)?\nA.  A Credential created for the purpose of deceiving an adversary.\nB.  Collecting network communication protocol metadata and identifying statistical outliers.\nC.  Collecting authentication events, creating a baseline user profile, and determining whether authentication events are consistent with the baseline profile.\nD.  Application Hardening makes an executable application more resilient to a class of exploits which either introduce new code or execute unwanted existing code. These techniques may be applied at compile-time or on an application binary.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Image File Execution Options Injection (T1546.012)?\nA.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\nB.  Collecting network communication protocol metadata and identifying statistical outliers.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Image File Execution Options Injection (T1546.012)",
      "ddmc_optionA": "Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.",
      "ddmc_optionB": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmc_optionC": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionD": "Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Image File Execution Options Injection (T1546.012)?\nA.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\nB.  Collecting network communication protocol metadata and identifying statistical outliers.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Multi-hop Proxy (T1090.003)?\nA.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nB.  The detection of an internal host relaying traffic between the internal network and the external network.\nC.  Process eviction techniques terminate or remove running process.\nD.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Multi-hop Proxy (T1090.003)",
      "ddmc_optionA": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmc_optionB": "The detection of an internal host relaying traffic between the internal network and the external network.",
      "ddmc_optionC": "Process eviction techniques terminate or remove running process.",
      "ddmc_optionD": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "The detection of an internal host relaying traffic between the internal network and the external network.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Multi-hop Proxy (T1090.003)?\nA.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nB.  The detection of an internal host relaying traffic between the internal network and the external network.\nC.  Process eviction techniques terminate or remove running process.\nD.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Indicator Blocking (T1562.006)?\nA.  Manage the creation, modification, use, and permissions associated to user accounts.\nB.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nC.  Block execution of code on a system through application control, and/or script blocking.\nD.  Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Indicator Blocking (T1562.006)",
      "ddmc_optionA": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmc_optionB": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
      "ddmc_optionC": "Block execution of code on a system through application control, and/or script blocking.",
      "ddmc_optionD": "Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Indicator Blocking (T1562.006)?\nA.  Manage the creation, modification, use, and permissions associated to user accounts.\nB.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nC.  Block execution of code on a system through application control, and/or script blocking.\nD.  Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Netsh Helper DLL (T1546.007)?\nA.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\nB.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nC.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nD.  Terminating a running application process on a computer system.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Netsh Helper DLL (T1546.007)",
      "ddmc_optionA": "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.",
      "ddmc_optionB": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_optionC": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmc_optionD": "Terminating a running application process on a computer system.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Terminating a running application process on a computer system.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Netsh Helper DLL (T1546.007)?\nA.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\nB.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nC.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nD.  Terminating a running application process on a computer system.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Use of Predictable Algorithm in Random Number Generator (CWE-1241)?\nA.  Where available, configure the environment to use less verbose error messages. For example, in PHP, disable the display_errors setting during configuration, or at runtime using the error_reporting() function.\nB.  If at all possible, use library calls rather than external processes to recreate the desired functionality.\nC.  A true random number generator should be implemented for cryptographic algorithms.\nD.  An application must make network resources available to a client commensurate with the client's access level.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Use of Predictable Algorithm in Random Number Generator (CWE-1241)",
      "ddmc_optionA": "Where available, configure the environment to use less verbose error messages. For example, in PHP, disable the display_errors setting during configuration, or at runtime using the error_reporting() function.",
      "ddmc_optionB": "If at all possible, use library calls rather than external processes to recreate the desired functionality.",
      "ddmc_optionC": "A true random number generator should be implemented for cryptographic algorithms.",
      "ddmc_optionD": "An application must make network resources available to a client commensurate with the client's access level.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "A true random number generator should be implemented for cryptographic algorithms.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Use of Predictable Algorithm in Random Number Generator (CWE-1241)?\nA.  Where available, configure the environment to use less verbose error messages. For example, in PHP, disable the display_errors setting during configuration, or at runtime using the error_reporting() function.\nB.  If at all possible, use library calls rather than external processes to recreate the desired functionality.\nC.  A true random number generator should be implemented for cryptographic algorithms.\nD.  An application must make network resources available to a client commensurate with the client's access level.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Bash History (T1552.003)?\nA.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\nB.  Restoring a file for an entity to access.\nC.  A file created for the purposes of deceiving an adversary.\nD.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Bash History (T1552.003)",
      "ddmc_optionA": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmc_optionB": "Restoring a file for an entity to access.",
      "ddmc_optionC": "A file created for the purposes of deceiving an adversary.",
      "ddmc_optionD": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "prompts": [],
      "instruction": "What is a method to mitigate Bash History (T1552.003)?\nA.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\nB.  Restoring a file for an entity to access.\nC.  A file created for the purposes of deceiving an adversary.\nD.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Improper Isolation of Shared Resources in Network On Chip (NoC) (CWE-1331)?\nA.  Make sensitive open/close operation non reachable by directly user-controlled data (e.g. open/close resources)\nB.  A programmer might attempt to remedy the password management problem by obscuring the password with an encoding function, such as base 64 encoding, but this effort does not adequately protect the password because the encoding can be detected and decoded easily.\nC.  Implement priority-based arbitration inside the NoC and have dedicated buffers or virtual channels for routing secret data from trusted agents.\nD.  Include secure wear leveling algorithms and ensure they may not be bypassed.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Isolation of Shared Resources in Network On Chip (NoC) (CWE-1331)",
      "ddmc_optionA": "Make sensitive open/close operation non reachable by directly user-controlled data (e.g. open/close resources)",
      "ddmc_optionB": "A programmer might attempt to remedy the password management problem by obscuring the password with an encoding function, such as base 64 encoding, but this effort does not adequately protect the password because the encoding can be detected and decoded easily.",
      "ddmc_optionC": "Implement priority-based arbitration inside the NoC and have dedicated buffers or virtual channels for routing secret data from trusted agents.",
      "ddmc_optionD": "Include secure wear leveling algorithms and ensure they may not be bypassed.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Implement priority-based arbitration inside the NoC and have dedicated buffers or virtual channels for routing secret data from trusted agents.",
      "prompts": [],
      "instruction": "How can you mitigate Improper Isolation of Shared Resources in Network On Chip (NoC) (CWE-1331)?\nA.  Make sensitive open/close operation non reachable by directly user-controlled data (e.g. open/close resources)\nB.  A programmer might attempt to remedy the password management problem by obscuring the password with an encoding function, such as base 64 encoding, but this effort does not adequately protect the password because the encoding can be detected and decoded easily.\nC.  Implement priority-based arbitration inside the NoC and have dedicated buffers or virtual channels for routing secret data from trusted agents.\nD.  Include secure wear leveling algorithms and ensure they may not be bypassed.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Regsvr32 (T1218.010)?\nA.  Use secure methods to boot a system and verify the integrity of the operating system and loading mechanisms.\nB.  Configure features related to account use like login attempt lockouts, specific login times, etc.\nC.  Use capabilities to detect and block conditions that may lead to or be indicative of a software exploit occurring.\nD.  Use signatures or heuristics to detect malicious software.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Regsvr32 (T1218.010)",
      "ddmc_optionA": "Use secure methods to boot a system and verify the integrity of the operating system and loading mechanisms.",
      "ddmc_optionB": "Configure features related to account use like login attempt lockouts, specific login times, etc.",
      "ddmc_optionC": "Use capabilities to detect and block conditions that may lead to or be indicative of a software exploit occurring.",
      "ddmc_optionD": "Use signatures or heuristics to detect malicious software.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Use capabilities to detect and block conditions that may lead to or be indicative of a software exploit occurring.",
      "prompts": [],
      "instruction": "How can you mitigate Regsvr32 (T1218.010)?\nA.  Use secure methods to boot a system and verify the integrity of the operating system and loading mechanisms.\nB.  Configure features related to account use like login attempt lockouts, specific login times, etc.\nC.  Use capabilities to detect and block conditions that may lead to or be indicative of a software exploit occurring.\nD.  Use signatures or heuristics to detect malicious software.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Remote Desktop Protocol (T1021.001)?\nA.  File eviction techniques evict files from system storage.\nB.  A file created for the purposes of deceiving an adversary.\nC.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nD.  Employing file hash comparisons to detect known malware.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Remote Desktop Protocol (T1021.001)",
      "ddmc_optionA": "File eviction techniques evict files from system storage.",
      "ddmc_optionB": "A file created for the purposes of deceiving an adversary.",
      "ddmc_optionC": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmc_optionD": "Employing file hash comparisons to detect known malware.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "prompts": [],
      "instruction": "What is a method to mitigate Remote Desktop Protocol (T1021.001)?\nA.  File eviction techniques evict files from system storage.\nB.  A file created for the purposes of deceiving an adversary.\nC.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nD.  Employing file hash comparisons to detect known malware.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Local Data Staging (T1074.001)?\nA.  Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.\nB.  A file created for the purposes of deceiving an adversary.\nC.  Identification of suspicious processes executing on an end-point device by examining the ancestry and siblings of a process, and the associated metadata of each node on the tree, such as process execution, duration, and order relative to siblings and ancestors.\nD.  A one-time password is valid for only one user authentication.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Local Data Staging (T1074.001)",
      "ddmc_optionA": "Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.",
      "ddmc_optionB": "A file created for the purposes of deceiving an adversary.",
      "ddmc_optionC": "Identification of suspicious processes executing on an end-point device by examining the ancestry and siblings of a process, and the associated metadata of each node on the tree, such as process execution, duration, and order relative to siblings and ancestors.",
      "ddmc_optionD": "A one-time password is valid for only one user authentication.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "A file created for the purposes of deceiving an adversary.",
      "prompts": [],
      "instruction": "How can you mitigate Local Data Staging (T1074.001)?\nA.  Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.\nB.  A file created for the purposes of deceiving an adversary.\nC.  Identification of suspicious processes executing on an end-point device by examining the ancestry and siblings of a process, and the associated metadata of each node on the tree, such as process execution, duration, and order relative to siblings and ancestors.\nD.  A one-time password is valid for only one user authentication.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate CWE-638 (Not Using Complete Mediation)?\nA.  Use allowlists of variable names that can be extracted.\nB.  When there is a need to store or transmit sensitive data, use strong, up-to-date cryptographic algorithms to encrypt that data. Select a well-vetted algorithm that is currently considered to be strong by experts in the field, and use well-tested implementations. As with all cryptographic mechanisms, the source code should be available for analysis. For example, US government systems require FIPS 140-2 certification. Do not develop custom or private cryptographic algorithms. They will likely be exposed to attacks that are well-understood by cryptographers. Reverse engineering techniques are mature. If the algorithm can be compromised if attackers find out how it works, then it is especially weak. Periodically ensure that the cryptography has not become obsolete. Some older algorithms, once thought to require a billion years of computing time, can now be broken in days or hours. This includes MD4, MD5, SHA1, DES, and other algorithms that were once regarded as strong. [REF-267]\nC.  For later PHP versions, reference uploaded files using the $HTTP_POST_FILES or $_FILES variables, and use is_uploaded_file() or move_uploaded_file() to ensure that you are dealing with an uploaded file.\nD.  Implement and perform bounds checking on input.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CWE-638 (Not Using Complete Mediation)",
      "ddmc_optionA": "Use allowlists of variable names that can be extracted.",
      "ddmc_optionB": "When there is a need to store or transmit sensitive data, use strong, up-to-date cryptographic algorithms to encrypt that data. Select a well-vetted algorithm that is currently considered to be strong by experts in the field, and use well-tested implementations. As with all cryptographic mechanisms, the source code should be available for analysis. For example, US government systems require FIPS 140-2 certification. Do not develop custom or private cryptographic algorithms. They will likely be exposed to attacks that are well-understood by cryptographers. Reverse engineering techniques are mature. If the algorithm can be compromised if attackers find out how it works, then it is especially weak. Periodically ensure that the cryptography has not become obsolete. Some older algorithms, once thought to require a billion years of computing time, can now be broken in days or hours. This includes MD4, MD5, SHA1, DES, and other algorithms that were once regarded as strong. [REF-267]",
      "ddmc_optionC": "For later PHP versions, reference uploaded files using the $HTTP_POST_FILES or $_FILES variables, and use is_uploaded_file() or move_uploaded_file() to ensure that you are dealing with an uploaded file.",
      "ddmc_optionD": "Implement and perform bounds checking on input.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "For later PHP versions, reference uploaded files using the $HTTP_POST_FILES or $_FILES variables, and use is_uploaded_file() or move_uploaded_file() to ensure that you are dealing with an uploaded file.",
      "prompts": [],
      "instruction": "What is a method to mitigate CWE-638 (Not Using Complete Mediation)?\nA.  Use allowlists of variable names that can be extracted.\nB.  When there is a need to store or transmit sensitive data, use strong, up-to-date cryptographic algorithms to encrypt that data. Select a well-vetted algorithm that is currently considered to be strong by experts in the field, and use well-tested implementations. As with all cryptographic mechanisms, the source code should be available for analysis. For example, US government systems require FIPS 140-2 certification. Do not develop custom or private cryptographic algorithms. They will likely be exposed to attacks that are well-understood by cryptographers. Reverse engineering techniques are mature. If the algorithm can be compromised if attackers find out how it works, then it is especially weak. Periodically ensure that the cryptography has not become obsolete. Some older algorithms, once thought to require a billion years of computing time, can now be broken in days or hours. This includes MD4, MD5, SHA1, DES, and other algorithms that were once regarded as strong. [REF-267]\nC.  For later PHP versions, reference uploaded files using the $HTTP_POST_FILES or $_FILES variables, and use is_uploaded_file() or move_uploaded_file() to ensure that you are dealing with an uploaded file.\nD.  Implement and perform bounds checking on input.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Log Injection-Tampering-Forging (CAPEC-93)?\nA.  Use static analysis tools to identify log forging vulnerabilities.\nB.  Include \"hosts file\"/IP address in the application.\nC.  In general, every request must be checked for the appropriate authentication token as well as authorization in the current session context.\nD.  Typically, an IDS/IPS system is very effective against this type of attack.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Log Injection-Tampering-Forging (CAPEC-93)",
      "ddmc_optionA": "Use static analysis tools to identify log forging vulnerabilities.",
      "ddmc_optionB": "Include \"hosts file\"/IP address in the application.",
      "ddmc_optionC": "In general, every request must be checked for the appropriate authentication token as well as authorization in the current session context.",
      "ddmc_optionD": "Typically, an IDS/IPS system is very effective against this type of attack.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Use static analysis tools to identify log forging vulnerabilities.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Log Injection-Tampering-Forging (CAPEC-93)?\nA.  Use static analysis tools to identify log forging vulnerabilities.\nB.  Include \"hosts file\"/IP address in the application.\nC.  In general, every request must be checked for the appropriate authentication token as well as authorization in the current session context.\nD.  Typically, an IDS/IPS system is very effective against this type of attack.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Credential Stuffing (T1110.004)?\nA.  A file created for the purposes of deceiving an adversary.\nB.  Restoring the data in a database.\nC.  A Credential created for the purpose of deceiving an adversary.\nD.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Credential Stuffing (T1110.004)",
      "ddmc_optionA": "A file created for the purposes of deceiving an adversary.",
      "ddmc_optionB": "Restoring the data in a database.",
      "ddmc_optionC": "A Credential created for the purpose of deceiving an adversary.",
      "ddmc_optionD": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "prompts": [],
      "instruction": "How can you mitigate Credential Stuffing (T1110.004)?\nA.  A file created for the purposes of deceiving an adversary.\nB.  Restoring the data in a database.\nC.  A Credential created for the purpose of deceiving an adversary.\nD.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1176 (Browser Extensions)?\nA.  System mapping encompasses the techniques to identify the organization's systems, how they are configured and decomposed into subsystems and components, how they are dependent on one another, and where they are physically located.\nB.  Software inventorying identifies and records the software items in the organization's architecture.\nC.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nD.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1176 (Browser Extensions)",
      "ddmc_optionA": "System mapping encompasses the techniques to identify the organization's systems, how they are configured and decomposed into subsystems and components, how they are dependent on one another, and where they are physically located.",
      "ddmc_optionB": "Software inventorying identifies and records the software items in the organization's architecture.",
      "ddmc_optionC": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionD": "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Software inventorying identifies and records the software items in the organization's architecture.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1176 (Browser Extensions)?\nA.  System mapping encompasses the techniques to identify the organization's systems, how they are configured and decomposed into subsystems and components, how they are dependent on one another, and where they are physically located.\nB.  Software inventorying identifies and records the software items in the organization's architecture.\nC.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nD.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate System Owner/User Discovery (T1033)?\nA.  Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.\nB.  File eviction techniques evict files from system storage.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  Detecting any suspicious changes to files in a computer system.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "System Owner/User Discovery (T1033)",
      "ddmc_optionA": "Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.",
      "ddmc_optionB": "File eviction techniques evict files from system storage.",
      "ddmc_optionC": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionD": "Detecting any suspicious changes to files in a computer system.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "File eviction techniques evict files from system storage.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate System Owner/User Discovery (T1033)?\nA.  Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.\nB.  File eviction techniques evict files from system storage.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  Detecting any suspicious changes to files in a computer system.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Local Data Staging (T1074.001)?\nA.  Emulating instructions in a file looking for specific patterns.\nB.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nC.  Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.\nD.  The file removal technique deletes malicious artifacts or programs from a computer system.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Local Data Staging (T1074.001)",
      "ddmc_optionA": "Emulating instructions in a file looking for specific patterns.",
      "ddmc_optionB": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_optionC": "Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.",
      "ddmc_optionD": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "prompts": [],
      "instruction": "What is a method to mitigate Local Data Staging (T1074.001)?\nA.  Emulating instructions in a file looking for specific patterns.\nB.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nC.  Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.\nD.  The file removal technique deletes malicious artifacts or programs from a computer system.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect Compromise Accounts (T1586)?\nA.  System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained. Normal, benign system and network events related to legitimate remote system discovery may be uncommon, depending on the environment and how they are used. Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell. Monitor for processes that can be used to discover remote systems, such as <code>ping.exe</code> and <code>tracert.exe</code>, especially when executed in quick succession.(Citations: Elastic - Koadiac Detection with EQL)\nB.  Consider monitoring social media activity related to your organization. Suspicious activity may include personas claiming to work for your organization or recently modified accounts making numerous connection requests to accounts affiliated with your organization. Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access (ex: Phishing).\nC.  Monitor processes and command-line arguments for actions that could be taken to collect files from a network share. Remote access tools with built-in features may interact directly with the Windows API to gather data. Data may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.\nD.  Monitor handle opens on drive volumes that are made by processes to determine when they may directly access logical drives.  Monitor processes and command-line arguments for actions that could be taken to copy files from the logical drive and evade common file system protections. Since this technique may also be used through PowerShell, additional logging of PowerShell scripts is recommended.(Citations: Github PowerSploit Ninjacopy)\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Compromise Accounts (T1586)",
      "ddmc_optionA": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained. Normal, benign system and network events related to legitimate remote system discovery may be uncommon, depending on the environment and how they are used. Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell. Monitor for processes that can be used to discover remote systems, such as <code>ping.exe</code> and <code>tracert.exe</code>, especially when executed in quick succession.(Citations: Elastic - Koadiac Detection with EQL)",
      "ddmc_optionB": "Consider monitoring social media activity related to your organization. Suspicious activity may include personas claiming to work for your organization or recently modified accounts making numerous connection requests to accounts affiliated with your organization. Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access (ex: Phishing).",
      "ddmc_optionC": "Monitor processes and command-line arguments for actions that could be taken to collect files from a network share. Remote access tools with built-in features may interact directly with the Windows API to gather data. Data may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.",
      "ddmc_optionD": "Monitor handle opens on drive volumes that are made by processes to determine when they may directly access logical drives.  Monitor processes and command-line arguments for actions that could be taken to copy files from the logical drive and evade common file system protections. Since this technique may also be used through PowerShell, additional logging of PowerShell scripts is recommended.(Citations: Github PowerSploit Ninjacopy)",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Consider monitoring social media activity related to your organization. Suspicious activity may include personas claiming to work for your organization or recently modified accounts making numerous connection requests to accounts affiliated with your organization. Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access (ex: Phishing).",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect Compromise Accounts (T1586)?\nA.  System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained. Normal, benign system and network events related to legitimate remote system discovery may be uncommon, depending on the environment and how they are used. Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell. Monitor for processes that can be used to discover remote systems, such as <code>ping.exe</code> and <code>tracert.exe</code>, especially when executed in quick succession.(Citations: Elastic - Koadiac Detection with EQL)\nB.  Consider monitoring social media activity related to your organization. Suspicious activity may include personas claiming to work for your organization or recently modified accounts making numerous connection requests to accounts affiliated with your organization. Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access (ex: Phishing).\nC.  Monitor processes and command-line arguments for actions that could be taken to collect files from a network share. Remote access tools with built-in features may interact directly with the Windows API to gather data. Data may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.\nD.  Monitor handle opens on drive volumes that are made by processes to determine when they may directly access logical drives.  Monitor processes and command-line arguments for actions that could be taken to copy files from the logical drive and evade common file system protections. Since this technique may also be used through PowerShell, additional logging of PowerShell scripts is recommended.(Citations: Github PowerSploit Ninjacopy)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Netsh Helper DLL (T1546.007)?\nA.  Suspending a running process on a computer system.\nB.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\nC.  Configuring a kernel to use an allow or deny list to filter kernel api calls.\nD.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Netsh Helper DLL (T1546.007)",
      "ddmc_optionA": "Suspending a running process on a computer system.",
      "ddmc_optionB": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "ddmc_optionC": "Configuring a kernel to use an allow or deny list to filter kernel api calls.",
      "ddmc_optionD": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Suspending a running process on a computer system.",
      "prompts": [],
      "instruction": "What is a method to mitigate Netsh Helper DLL (T1546.007)?\nA.  Suspending a running process on a computer system.\nB.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\nC.  Configuring a kernel to use an allow or deny list to filter kernel api calls.\nD.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Non-Standard Port (T1571)?\nA.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\nB.  Restricting network traffic originating from any location.\nC.  Logical link mapping creates a model of existing or previous node-to-node connections using network-layer data or metadata.\nD.  Employing a pattern matching algorithm to statically analyze the content of files.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Non-Standard Port (T1571)",
      "ddmc_optionA": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "ddmc_optionB": "Restricting network traffic originating from any location.",
      "ddmc_optionC": "Logical link mapping creates a model of existing or previous node-to-node connections using network-layer data or metadata.",
      "ddmc_optionD": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Restricting network traffic originating from any location.",
      "prompts": [],
      "instruction": "What is a method to mitigate Non-Standard Port (T1571)?\nA.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\nB.  Restricting network traffic originating from any location.\nC.  Logical link mapping creates a model of existing or previous node-to-node connections using network-layer data or metadata.\nD.  Employing a pattern matching algorithm to statically analyze the content of files.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Domain Fronting (T1090.004)?\nA.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nB.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nC.  Restricting network traffic originating from any location.\nD.  Employing a pattern matching rule language to analyze the content of files.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Domain Fronting (T1090.004)",
      "ddmc_optionA": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionB": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_optionC": "Restricting network traffic originating from any location.",
      "ddmc_optionD": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "prompts": [],
      "instruction": "What is a method to mitigate Domain Fronting (T1090.004)?\nA.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nB.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nC.  Restricting network traffic originating from any location.\nD.  Employing a pattern matching rule language to analyze the content of files.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate System Service Discovery (T1007)?\nA.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nB.  A file created for the purposes of deceiving an adversary.\nC.  Operational activity mapping identifies activities of the organization and the organization's suborganizations, groups, roles, and individuals that carry out the activities and then establishes the dependencies of the activities on the systems and people that perform those activities.\nD.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "System Service Discovery (T1007)",
      "ddmc_optionA": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_optionB": "A file created for the purposes of deceiving an adversary.",
      "ddmc_optionC": "Operational activity mapping identifies activities of the organization and the organization's suborganizations, groups, roles, and individuals that carry out the activities and then establishes the dependencies of the activities on the systems and people that perform those activities.",
      "ddmc_optionD": "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.",
      "prompts": [],
      "instruction": "How can you mitigate System Service Discovery (T1007)?\nA.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nB.  A file created for the purposes of deceiving an adversary.\nC.  Operational activity mapping identifies activities of the organization and the organization's suborganizations, groups, roles, and individuals that carry out the activities and then establishes the dependencies of the activities on the systems and people that perform those activities.\nD.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Keychain (T1555.001)?\nA.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nB.  Employing a pattern matching rule language to analyze the content of files.\nC.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\nD.  Restoring an object for an entity to access. This is the broadest class for object restoral.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Keychain (T1555.001)",
      "ddmc_optionA": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_optionB": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_optionC": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmc_optionD": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Keychain (T1555.001)?\nA.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nB.  Employing a pattern matching rule language to analyze the content of files.\nC.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\nD.  Restoring an object for an entity to access. This is the broadest class for object restoral.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Cross-Site Request Forgery (CSRF) (CWE-352)?\nA.  Check the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.\nB.  Ensure that the design includes provisions for access-control checks in the bridge for both upstream and downstream transactions.\nC.  Run time: Run time policy enforcement may be used in an allowlist fashion to prevent use of any non-sanctioned commands.\nD.  Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component. The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Cross-Site Request Forgery (CSRF) (CWE-352)",
      "ddmc_optionA": "Check the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.",
      "ddmc_optionB": "Ensure that the design includes provisions for access-control checks in the bridge for both upstream and downstream transactions.",
      "ddmc_optionC": "Run time: Run time policy enforcement may be used in an allowlist fashion to prevent use of any non-sanctioned commands.",
      "ddmc_optionD": "Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component. The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Check the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Cross-Site Request Forgery (CSRF) (CWE-352)?\nA.  Check the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.\nB.  Ensure that the design includes provisions for access-control checks in the bridge for both upstream and downstream transactions.\nC.  Run time: Run time policy enforcement may be used in an allowlist fashion to prevent use of any non-sanctioned commands.\nD.  Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component. The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect CWE-326 (Inadequate Encryption Strength)?\nA.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "CWE-326 (Inadequate Encryption Strength)",
      "ddmc_optionA": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer",
      "ddmc_optionB": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionC": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionD": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect CWE-326 (Inadequate Encryption Strength)?\nA.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Cellular Traffic Intercept (CAPEC-609)?\nA.  Changes to registry entries in \"HKLM\\Software\\Microsoft\\Windows NT\\Winlogon\\Notify\" that do not correlate with known software, patch cycles, etc are suspicious. New DLLs written to System32 which do not correlate with known good software or patching may be suspicious.\nB.  Perform comprehensive threat modeling, a process of identifying, evaluating, and mitigating potential threats to the application. This effort can help reveal potentially obscure application functionality that can be manipulated for malicious purposes.\nC.  Implementation: Run xml parsing and query infrastructure with minimal privileges so that an attacker is limited in their ability to probe other system resources from XQL.\nD.  Encryption of all data packets emanating from the smartphone to a retransmission device via two encrypted tunnels with Suite B cryptography, all the way to the VPN gateway at the datacenter.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Cellular Traffic Intercept (CAPEC-609)",
      "ddmc_optionA": "Changes to registry entries in \"HKLM\\Software\\Microsoft\\Windows NT\\Winlogon\\Notify\" that do not correlate with known software, patch cycles, etc are suspicious. New DLLs written to System32 which do not correlate with known good software or patching may be suspicious.",
      "ddmc_optionB": "Perform comprehensive threat modeling, a process of identifying, evaluating, and mitigating potential threats to the application. This effort can help reveal potentially obscure application functionality that can be manipulated for malicious purposes.",
      "ddmc_optionC": "Implementation: Run xml parsing and query infrastructure with minimal privileges so that an attacker is limited in their ability to probe other system resources from XQL.",
      "ddmc_optionD": "Encryption of all data packets emanating from the smartphone to a retransmission device via two encrypted tunnels with Suite B cryptography, all the way to the VPN gateway at the datacenter.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Encryption of all data packets emanating from the smartphone to a retransmission device via two encrypted tunnels with Suite B cryptography, all the way to the VPN gateway at the datacenter.",
      "prompts": [],
      "instruction": "What is a method to mitigate Cellular Traffic Intercept (CAPEC-609)?\nA.  Changes to registry entries in \"HKLM\\Software\\Microsoft\\Windows NT\\Winlogon\\Notify\" that do not correlate with known software, patch cycles, etc are suspicious. New DLLs written to System32 which do not correlate with known good software or patching may be suspicious.\nB.  Perform comprehensive threat modeling, a process of identifying, evaluating, and mitigating potential threats to the application. This effort can help reveal potentially obscure application functionality that can be manipulated for malicious purposes.\nC.  Implementation: Run xml parsing and query infrastructure with minimal privileges so that an attacker is limited in their ability to probe other system resources from XQL.\nD.  Encryption of all data packets emanating from the smartphone to a retransmission device via two encrypted tunnels with Suite B cryptography, all the way to the VPN gateway at the datacenter.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Image File Execution Options Injection (T1546.012)?\nA.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\nB.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nC.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\nD.  Analyzing changes in service binary files by comparing to a source of truth.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Image File Execution Options Injection (T1546.012)",
      "ddmc_optionA": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "ddmc_optionB": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionC": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "ddmc_optionD": "Analyzing changes in service binary files by comparing to a source of truth.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Image File Execution Options Injection (T1546.012)?\nA.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\nB.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nC.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\nD.  Analyzing changes in service binary files by comparing to a source of truth.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate File and Directory Permissions Modification (T1222)?\nA.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nB.  Use secure methods to boot a system and verify the integrity of the operating system and loading mechanisms.\nC.  Block execution of code on a system through application control, and/or script blocking.\nD.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "File and Directory Permissions Modification (T1222)",
      "ddmc_optionA": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "ddmc_optionB": "Use secure methods to boot a system and verify the integrity of the operating system and loading mechanisms.",
      "ddmc_optionC": "Block execution of code on a system through application control, and/or script blocking.",
      "ddmc_optionD": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "prompts": [],
      "instruction": "What is a method to mitigate File and Directory Permissions Modification (T1222)?\nA.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nB.  Use secure methods to boot a system and verify the integrity of the operating system and loading mechanisms.\nC.  Block execution of code on a system through application control, and/or script blocking.\nD.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Expanding Control over the Operating System from the Database (CAPEC-470)?\nA.  Design: Enforce principle of least privilege\nB.  Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input.\nC.  Design: Follow the defensive programming practices needed to protect an application accessing the database from SQL injection\nD.  Configuration: Architectural Design of Microcode to limit abuse of speculative execution and out-of-order execution\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Expanding Control over the Operating System from the Database (CAPEC-470)",
      "ddmc_optionA": "Design: Enforce principle of least privilege",
      "ddmc_optionB": "Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input.",
      "ddmc_optionC": "Design: Follow the defensive programming practices needed to protect an application accessing the database from SQL injection",
      "ddmc_optionD": "Configuration: Architectural Design of Microcode to limit abuse of speculative execution and out-of-order execution",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Design: Follow the defensive programming practices needed to protect an application accessing the database from SQL injection",
      "prompts": [],
      "instruction": "How can you mitigate Expanding Control over the Operating System from the Database (CAPEC-470)?\nA.  Design: Enforce principle of least privilege\nB.  Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input.\nC.  Design: Follow the defensive programming practices needed to protect an application accessing the database from SQL injection\nD.  Configuration: Architectural Design of Microcode to limit abuse of speculative execution and out-of-order execution\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Group Policy Preferences (T1552.006)?\nA.  Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\nB.  Using a digital signature to authenticate a file before opening.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  Executing or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Group Policy Preferences (T1552.006)",
      "ddmc_optionA": "Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.",
      "ddmc_optionB": "Using a digital signature to authenticate a file before opening.",
      "ddmc_optionC": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionD": "Executing or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.",
      "prompts": [],
      "instruction": "How can you mitigate Group Policy Preferences (T1552.006)?\nA.  Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\nB.  Using a digital signature to authenticate a file before opening.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  Executing or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Symmetric Cryptography (T1573.001)?\nA.  Manage the creation, modification, use, and permissions associated to user accounts.\nB.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nC.  Use intrusion detection signatures to block traffic at network boundaries.\nD.  Use intrusion detection signatures to block traffic at network boundaries.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Symmetric Cryptography (T1573.001)",
      "ddmc_optionA": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmc_optionB": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "ddmc_optionC": "Use intrusion detection signatures to block traffic at network boundaries.",
      "ddmc_optionD": "Use intrusion detection signatures to block traffic at network boundaries.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Use intrusion detection signatures to block traffic at network boundaries.",
      "prompts": [],
      "instruction": "How can you mitigate Symmetric Cryptography (T1573.001)?\nA.  Manage the creation, modification, use, and permissions associated to user accounts.\nB.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nC.  Use intrusion detection signatures to block traffic at network boundaries.\nD.  Use intrusion detection signatures to block traffic at network boundaries.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Multi-Stage Channels (T1104)?\nA.  Perform regular software updates to mitigate exploitation risk.\nB.  Perform regular software updates to mitigate exploitation risk.\nC.  Use intrusion detection signatures to block traffic at network boundaries.\nD.  Prevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Multi-Stage Channels (T1104)",
      "ddmc_optionA": "Perform regular software updates to mitigate exploitation risk.",
      "ddmc_optionB": "Perform regular software updates to mitigate exploitation risk.",
      "ddmc_optionC": "Use intrusion detection signatures to block traffic at network boundaries.",
      "ddmc_optionD": "Prevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Use intrusion detection signatures to block traffic at network boundaries.",
      "prompts": [],
      "instruction": "How can you mitigate Multi-Stage Channels (T1104)?\nA.  Perform regular software updates to mitigate exploitation risk.\nB.  Perform regular software updates to mitigate exploitation risk.\nC.  Use intrusion detection signatures to block traffic at network boundaries.\nD.  Prevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate CWE-607 (Public Static Final Field References Mutable Object)?\nA.  Protect mutable objects by making them private. Restrict access to the getter and setter as well.\nB.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.\nC.  Use dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.\nD.  Design signal handlers to only set flags rather than perform complex functionality.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CWE-607 (Public Static Final Field References Mutable Object)",
      "ddmc_optionA": "Protect mutable objects by making them private. Restrict access to the getter and setter as well.",
      "ddmc_optionB": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.",
      "ddmc_optionC": "Use dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.",
      "ddmc_optionD": "Design signal handlers to only set flags rather than perform complex functionality.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Protect mutable objects by making them private. Restrict access to the getter and setter as well.",
      "prompts": [],
      "instruction": "How can you mitigate CWE-607 (Public Static Final Field References Mutable Object)?\nA.  Protect mutable objects by making them private. Restrict access to the getter and setter as well.\nB.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.\nC.  Use dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.\nD.  Design signal handlers to only set flags rather than perform complex functionality.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Safe Mode Boot (T1562.009)?\nA.  Detects processes that modify, change, or replace their own code at runtime.\nB.  Employing file hash comparisons to detect known malware.\nC.  Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\nD.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Safe Mode Boot (T1562.009)",
      "ddmc_optionA": "Detects processes that modify, change, or replace their own code at runtime.",
      "ddmc_optionB": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionC": "Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.",
      "ddmc_optionD": "Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.",
      "prompts": [],
      "instruction": "What is a method to mitigate Safe Mode Boot (T1562.009)?\nA.  Detects processes that modify, change, or replace their own code at runtime.\nB.  Employing file hash comparisons to detect known malware.\nC.  Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\nD.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Improper Control of Resource Identifiers ('Resource Injection') (CWE-99)?\nA.  By blocking modifications of attributes that resolve to object prototype, such as proto or prototype, this weakness can be mitigated.\nB.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, it can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nC.  The hardware designer can attempt to prevent transient execution from causing observable discrepancies in specific covert channels.\nD.  Ensure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success. If errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Control of Resource Identifiers ('Resource Injection') (CWE-99)",
      "ddmc_optionA": "By blocking modifications of attributes that resolve to object prototype, such as proto or prototype, this weakness can be mitigated.",
      "ddmc_optionB": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, it can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmc_optionC": "The hardware designer can attempt to prevent transient execution from causing observable discrepancies in specific covert channels.",
      "ddmc_optionD": "Ensure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success. If errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, it can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Improper Control of Resource Identifiers ('Resource Injection') (CWE-99)?\nA.  By blocking modifications of attributes that resolve to object prototype, such as proto or prototype, this weakness can be mitigated.\nB.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, it can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nC.  The hardware designer can attempt to prevent transient execution from causing observable discrepancies in specific covert channels.\nD.  Ensure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success. If errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Use of Obsolete Function (CWE-477)?\nA.  Most mitigating technologies at the compiler or OS level to date address only a subset of buffer overflow problems and rarely provide complete protection against even that subset. It is good practice to implement strategies to increase the workload of an attacker, such as leaving the attacker to guess an unknown value that changes every program execution.\nB.  Avoid using wildcards in the cross-domain policy file. Any domain matching the wildcard expression will be implicitly trusted, and can perform two-way interaction with the target server.\nC.  With Struts, write all data from form beans with the bean's filter attribute set to true.\nD.  Consider seriously the security implications of using an obsolete function. Consider using alternate functions.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Use of Obsolete Function (CWE-477)",
      "ddmc_optionA": "Most mitigating technologies at the compiler or OS level to date address only a subset of buffer overflow problems and rarely provide complete protection against even that subset. It is good practice to implement strategies to increase the workload of an attacker, such as leaving the attacker to guess an unknown value that changes every program execution.",
      "ddmc_optionB": "Avoid using wildcards in the cross-domain policy file. Any domain matching the wildcard expression will be implicitly trusted, and can perform two-way interaction with the target server.",
      "ddmc_optionC": "With Struts, write all data from form beans with the bean's filter attribute set to true.",
      "ddmc_optionD": "Consider seriously the security implications of using an obsolete function. Consider using alternate functions.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Consider seriously the security implications of using an obsolete function. Consider using alternate functions.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Use of Obsolete Function (CWE-477)?\nA.  Most mitigating technologies at the compiler or OS level to date address only a subset of buffer overflow problems and rarely provide complete protection against even that subset. It is good practice to implement strategies to increase the workload of an attacker, such as leaving the attacker to guess an unknown value that changes every program execution.\nB.  Avoid using wildcards in the cross-domain policy file. Any domain matching the wildcard expression will be implicitly trusted, and can perform two-way interaction with the target server.\nC.  With Struts, write all data from form beans with the bean's filter attribute set to true.\nD.  Consider seriously the security implications of using an obsolete function. Consider using alternate functions.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Modify Cloud Compute Infrastructure (T1578)?\nA.  Perform regular software updates to mitigate exploitation risk.\nB.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nC.  Use secure methods to boot a system and verify the integrity of the operating system and loading mechanisms.\nD.  Manage the creation, modification, use, and permissions associated to user accounts.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Modify Cloud Compute Infrastructure (T1578)",
      "ddmc_optionA": "Perform regular software updates to mitigate exploitation risk.",
      "ddmc_optionB": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_optionC": "Use secure methods to boot a system and verify the integrity of the operating system and loading mechanisms.",
      "ddmc_optionD": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "prompts": [],
      "instruction": "How can you mitigate Modify Cloud Compute Infrastructure (T1578)?\nA.  Perform regular software updates to mitigate exploitation risk.\nB.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nC.  Use secure methods to boot a system and verify the integrity of the operating system and loading mechanisms.\nD.  Manage the creation, modification, use, and permissions associated to user accounts.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate CAPEC-125 (Flooding)?\nA.  Session tokens for specific host\nB.  Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the domain network.\nC.  An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.\nD.  Ensure that protocols have specific limits of scale configured.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CAPEC-125 (Flooding)",
      "ddmc_optionA": "Session tokens for specific host",
      "ddmc_optionB": "Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the domain network.",
      "ddmc_optionC": "An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.",
      "ddmc_optionD": "Ensure that protocols have specific limits of scale configured.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Ensure that protocols have specific limits of scale configured.",
      "prompts": [],
      "instruction": "How can you mitigate CAPEC-125 (Flooding)?\nA.  Session tokens for specific host\nB.  Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the domain network.\nC.  An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.\nD.  Ensure that protocols have specific limits of scale configured.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Cryptographic Operations are run Before Supporting Units are Ready (CWE-1279)?\nA.  Symbolic link attacks often occur when a program creates a tmp directory that stores files/links. Access to the directory should be restricted to the program as to prevent attackers from manipulating the files.\nB.  Ensure that there are no cases unaccounted for when adjusting program flow or values based on the value of a given variable. In the case of switch style statements, the very simple act of creating a default case can, if done correctly, mitigate this situation. Often however, the default case is used simply to represent an assumed option, as opposed to working as a check for invalid input. This is poor practice and in some cases is as bad as omitting a default case entirely.\nC.  Continuously ensuring that cryptographic inputs are supplying valid information is necessary to ensure that the encrypted output is secure.\nD.  Provide clear upper and lower bounds on the scale of any protocols designed.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Cryptographic Operations are run Before Supporting Units are Ready (CWE-1279)",
      "ddmc_optionA": "Symbolic link attacks often occur when a program creates a tmp directory that stores files/links. Access to the directory should be restricted to the program as to prevent attackers from manipulating the files.",
      "ddmc_optionB": "Ensure that there are no cases unaccounted for when adjusting program flow or values based on the value of a given variable. In the case of switch style statements, the very simple act of creating a default case can, if done correctly, mitigate this situation. Often however, the default case is used simply to represent an assumed option, as opposed to working as a check for invalid input. This is poor practice and in some cases is as bad as omitting a default case entirely.",
      "ddmc_optionC": "Continuously ensuring that cryptographic inputs are supplying valid information is necessary to ensure that the encrypted output is secure.",
      "ddmc_optionD": "Provide clear upper and lower bounds on the scale of any protocols designed.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Continuously ensuring that cryptographic inputs are supplying valid information is necessary to ensure that the encrypted output is secure.",
      "prompts": [],
      "instruction": "How can you mitigate Cryptographic Operations are run Before Supporting Units are Ready (CWE-1279)?\nA.  Symbolic link attacks often occur when a program creates a tmp directory that stores files/links. Access to the directory should be restricted to the program as to prevent attackers from manipulating the files.\nB.  Ensure that there are no cases unaccounted for when adjusting program flow or values based on the value of a given variable. In the case of switch style statements, the very simple act of creating a default case can, if done correctly, mitigate this situation. Often however, the default case is used simply to represent an assumed option, as opposed to working as a check for invalid input. This is poor practice and in some cases is as bad as omitting a default case entirely.\nC.  Continuously ensuring that cryptographic inputs are supplying valid information is necessary to ensure that the encrypted output is secure.\nD.  Provide clear upper and lower bounds on the scale of any protocols designed.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Predictable Seed in Pseudo-Random Number Generator (PRNG) (CWE-337)?\nA.  Do not store sensitive information in files which may be misinterpreted.\nB.  Prevention schemes mirror that of hard-coded password storage.\nC.  When locking and unlocking a resource, try to be sure that all control paths through the code in which the resource is locked one or more times correspond to exactly as many unlocks. If the software acquires a lock and then determines it is not able to perform its intended behavior, be sure to release the lock(s) before waiting for conditions to improve. Reacquire the lock(s) before trying again.\nD.  Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems, or use the more recent FIPS 140-3 [REF-1192] if possible.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Predictable Seed in Pseudo-Random Number Generator (PRNG) (CWE-337)",
      "ddmc_optionA": "Do not store sensitive information in files which may be misinterpreted.",
      "ddmc_optionB": "Prevention schemes mirror that of hard-coded password storage.",
      "ddmc_optionC": "When locking and unlocking a resource, try to be sure that all control paths through the code in which the resource is locked one or more times correspond to exactly as many unlocks. If the software acquires a lock and then determines it is not able to perform its intended behavior, be sure to release the lock(s) before waiting for conditions to improve. Reacquire the lock(s) before trying again.",
      "ddmc_optionD": "Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems, or use the more recent FIPS 140-3 [REF-1192] if possible.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems, or use the more recent FIPS 140-3 [REF-1192] if possible.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Predictable Seed in Pseudo-Random Number Generator (PRNG) (CWE-337)?\nA.  Do not store sensitive information in files which may be misinterpreted.\nB.  Prevention schemes mirror that of hard-coded password storage.\nC.  When locking and unlocking a resource, try to be sure that all control paths through the code in which the resource is locked one or more times correspond to exactly as many unlocks. If the software acquires a lock and then determines it is not able to perform its intended behavior, be sure to release the lock(s) before waiting for conditions to improve. Reacquire the lock(s) before trying again.\nD.  Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems, or use the more recent FIPS 140-3 [REF-1192] if possible.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Steal Web Session Cookie (T1539)?\nA.  The detection of an internal host relaying traffic between the internal network and the external network.\nB.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nC.  Limiting the transmission of a credential to a scoped set of relying parties.\nD.  Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Steal Web Session Cookie (T1539)",
      "ddmc_optionA": "The detection of an internal host relaying traffic between the internal network and the external network.",
      "ddmc_optionB": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionC": "Limiting the transmission of a credential to a scoped set of relying parties.",
      "ddmc_optionD": "Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Limiting the transmission of a credential to a scoped set of relying parties.",
      "prompts": [],
      "instruction": "How can you mitigate Steal Web Session Cookie (T1539)?\nA.  The detection of an internal host relaying traffic between the internal network and the external network.\nB.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nC.  Limiting the transmission of a credential to a scoped set of relying parties.\nD.  Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Improper Handling of Unicode Encoding (CWE-176)?\nA.  Most mitigating technologies at the compiler or OS level to date address only a subset of buffer overflow problems and rarely provide complete protection against even that subset. It is good practice to implement strategies to increase the workload of an attacker, such as leaving the attacker to guess an unknown value that changes every program execution.\nB.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nC.  Consider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource.\nD.  The hardware designer can attempt to prevent transient execution from causing observable discrepancies in specific covert channels.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Handling of Unicode Encoding (CWE-176)",
      "ddmc_optionA": "Most mitigating technologies at the compiler or OS level to date address only a subset of buffer overflow problems and rarely provide complete protection against even that subset. It is good practice to implement strategies to increase the workload of an attacker, such as leaving the attacker to guess an unknown value that changes every program execution.",
      "ddmc_optionB": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmc_optionC": "Consider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource.",
      "ddmc_optionD": "The hardware designer can attempt to prevent transient execution from causing observable discrepancies in specific covert channels.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Improper Handling of Unicode Encoding (CWE-176)?\nA.  Most mitigating technologies at the compiler or OS level to date address only a subset of buffer overflow problems and rarely provide complete protection against even that subset. It is good practice to implement strategies to increase the workload of an attacker, such as leaving the attacker to guess an unknown value that changes every program execution.\nB.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nC.  Consider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource.\nD.  The hardware designer can attempt to prevent transient execution from causing observable discrepancies in specific covert channels.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate T1021.004 (SSH)?\nA.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\nB.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nC.  Credential Eviction techniques disable or remove compromised credentials from a computer network.\nD.  Restoring software to a host.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1021.004 (SSH)",
      "ddmc_optionA": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "ddmc_optionB": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionC": "Credential Eviction techniques disable or remove compromised credentials from a computer network.",
      "ddmc_optionD": "Restoring software to a host.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate T1021.004 (SSH)?\nA.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\nB.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nC.  Credential Eviction techniques disable or remove compromised credentials from a computer network.\nD.  Restoring software to a host.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate CAPEC-467 (Cross Site Identification)?\nA.  Design: Enforce principle of least privilege\nB.  Encrypt and password-protect sensitive data.\nC.  Usage: Users should always explicitly log out from the social networking sites when done using them.\nD.  Only accept software updates from an official source.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CAPEC-467 (Cross Site Identification)",
      "ddmc_optionA": "Design: Enforce principle of least privilege",
      "ddmc_optionB": "Encrypt and password-protect sensitive data.",
      "ddmc_optionC": "Usage: Users should always explicitly log out from the social networking sites when done using them.",
      "ddmc_optionD": "Only accept software updates from an official source.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Usage: Users should always explicitly log out from the social networking sites when done using them.",
      "prompts": [],
      "instruction": "How can you mitigate CAPEC-467 (Cross Site Identification)?\nA.  Design: Enforce principle of least privilege\nB.  Encrypt and password-protect sensitive data.\nC.  Usage: Users should always explicitly log out from the social networking sites when done using them.\nD.  Only accept software updates from an official source.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Use of Default Cryptographic Key (CWE-1394)?\nA.  Always set the secure attribute when the cookie should sent via HTTPS only.\nB.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nC.  Passwords should be encrypted with keys that are at least 128 bits in length for adequate security.\nD.  Prohibit use of default, hard-coded, or other values that do not vary for each installation of the product - especially for separate organizations.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Use of Default Cryptographic Key (CWE-1394)",
      "ddmc_optionA": "Always set the secure attribute when the cookie should sent via HTTPS only.",
      "ddmc_optionB": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmc_optionC": "Passwords should be encrypted with keys that are at least 128 bits in length for adequate security.",
      "ddmc_optionD": "Prohibit use of default, hard-coded, or other values that do not vary for each installation of the product - especially for separate organizations.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Prohibit use of default, hard-coded, or other values that do not vary for each installation of the product - especially for separate organizations.",
      "prompts": [],
      "instruction": "What is a method to mitigate Use of Default Cryptographic Key (CWE-1394)?\nA.  Always set the secure attribute when the cookie should sent via HTTPS only.\nB.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nC.  Passwords should be encrypted with keys that are at least 128 bits in length for adequate security.\nD.  Prohibit use of default, hard-coded, or other values that do not vary for each installation of the product - especially for separate organizations.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Exploitation for Client Execution (T1203)?\nA.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nB.  Randomizing the base (start) address of one or more segments of memory during the initialization of a process.\nC.  Restricting network traffic originating from any location.\nD.  Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Exploitation for Client Execution (T1203)",
      "ddmc_optionA": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionB": "Randomizing the base (start) address of one or more segments of memory during the initialization of a process.",
      "ddmc_optionC": "Restricting network traffic originating from any location.",
      "ddmc_optionD": "Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Randomizing the base (start) address of one or more segments of memory during the initialization of a process.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Exploitation for Client Execution (T1203)?\nA.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nB.  Randomizing the base (start) address of one or more segments of memory during the initialization of a process.\nC.  Restricting network traffic originating from any location.\nD.  Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Scheduled Task (T1053.005)?\nA.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\nB.  Employing file hash comparisons to detect known malware.\nC.  Initiating a host's shutdown sequence to terminate all running processes.\nD.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Scheduled Task (T1053.005)",
      "ddmc_optionA": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "ddmc_optionB": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionC": "Initiating a host's shutdown sequence to terminate all running processes.",
      "ddmc_optionD": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Initiating a host's shutdown sequence to terminate all running processes.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Scheduled Task (T1053.005)?\nA.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\nB.  Employing file hash comparisons to detect known malware.\nC.  Initiating a host's shutdown sequence to terminate all running processes.\nD.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Multiple Locks of a Critical Resource (CWE-764)?\nA.  When locking and unlocking a resource, try to be sure that all control paths through the code in which the resource is locked one or more times correspond to exactly as many unlocks. If the software acquires a lock and then determines it is not able to perform its intended behavior, be sure to release the lock(s) before waiting for conditions to improve. Reacquire the lock(s) before trying again.\nB.  Secure patch support to allow ROM code to be patched on the next boot.\nC.  Run or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code. Examples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64]. Imported modules may be similarly realigned if their default memory addresses conflict with other modules, in a process known as \"rebasing\" (for Windows) and \"prelinking\" (for Linux) [REF-1332] using randomly generated addresses. ASLR for libraries cannot be used in conjunction with prelink since it would require relocating the libraries at run-time, defeating the whole purpose of prelinking. For more information on these techniques see D3-SAOR (Segment Address Offset Randomization) from D3FEND [REF-1335].\nD.  Ensure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success. If errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Multiple Locks of a Critical Resource (CWE-764)",
      "ddmc_optionA": "When locking and unlocking a resource, try to be sure that all control paths through the code in which the resource is locked one or more times correspond to exactly as many unlocks. If the software acquires a lock and then determines it is not able to perform its intended behavior, be sure to release the lock(s) before waiting for conditions to improve. Reacquire the lock(s) before trying again.",
      "ddmc_optionB": "Secure patch support to allow ROM code to be patched on the next boot.",
      "ddmc_optionC": "Run or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code. Examples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64]. Imported modules may be similarly realigned if their default memory addresses conflict with other modules, in a process known as \"rebasing\" (for Windows) and \"prelinking\" (for Linux) [REF-1332] using randomly generated addresses. ASLR for libraries cannot be used in conjunction with prelink since it would require relocating the libraries at run-time, defeating the whole purpose of prelinking. For more information on these techniques see D3-SAOR (Segment Address Offset Randomization) from D3FEND [REF-1335].",
      "ddmc_optionD": "Ensure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success. If errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "When locking and unlocking a resource, try to be sure that all control paths through the code in which the resource is locked one or more times correspond to exactly as many unlocks. If the software acquires a lock and then determines it is not able to perform its intended behavior, be sure to release the lock(s) before waiting for conditions to improve. Reacquire the lock(s) before trying again.",
      "prompts": [],
      "instruction": "What is a method to mitigate Multiple Locks of a Critical Resource (CWE-764)?\nA.  When locking and unlocking a resource, try to be sure that all control paths through the code in which the resource is locked one or more times correspond to exactly as many unlocks. If the software acquires a lock and then determines it is not able to perform its intended behavior, be sure to release the lock(s) before waiting for conditions to improve. Reacquire the lock(s) before trying again.\nB.  Secure patch support to allow ROM code to be patched on the next boot.\nC.  Run or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code. Examples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64]. Imported modules may be similarly realigned if their default memory addresses conflict with other modules, in a process known as \"rebasing\" (for Windows) and \"prelinking\" (for Linux) [REF-1332] using randomly generated addresses. ASLR for libraries cannot be used in conjunction with prelink since it would require relocating the libraries at run-time, defeating the whole purpose of prelinking. For more information on these techniques see D3-SAOR (Segment Address Offset Randomization) from D3FEND [REF-1335].\nD.  Ensure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success. If errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect LSA Secrets (T1003.004)?\nA.  Monitor processes and command-line arguments for program execution that may be indicative of credential dumping. Remote access tools may contain built-in features or incorporate existing tools like Mimikatz. PowerShell scripts also exist that contain credential dumping functionality, such as PowerSploit's Invoke-Mimikatz module, which may require additional logging features to be configured in the operating system to collect necessary information for analysis.(Citations: Powersploit)\nB.  Consider analyzing malware for features that may be associated with the adversary and/or their developers, such as compiler used, debugging artifacts, or code similarities. Malware repositories can also be used to identify additional samples associated with the adversary and identify development patterns over time. Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on post-compromise phases of the adversary lifecycle.\nC.  Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>CreateRemoteThread</code>, <code>SuspendThread</code>/<code>SetThreadContext</code>/<code>ResumeThread</code>, and those that can be used to modify memory within another process, such as <code>VirtualAllocEx</code>/<code>WriteProcessMemory</code>, may be used for this technique. Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior.(Citations: Elastic Process Injection July 2017)\nD.  Monitor authentication logs for system and application login failures of Valid Accounts. Specifically, monitor for many failed authentication attempts across various accounts that may result from password spraying attempts. Consider the following event IDs: * Domain Controllers: \"Audit Logon\" (Success & Failure) for event ID 4625. * Domain Controllers: \"Audit Kerberos Authentication Service\" (Success & Failure) for event ID 4771. * All systems: \"Audit Logon\" (Success & Failure) for event ID 4648.(Citations: Trimarc Detecting Password Spraying)\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "LSA Secrets (T1003.004)",
      "ddmc_optionA": "Monitor processes and command-line arguments for program execution that may be indicative of credential dumping. Remote access tools may contain built-in features or incorporate existing tools like Mimikatz. PowerShell scripts also exist that contain credential dumping functionality, such as PowerSploit's Invoke-Mimikatz module, which may require additional logging features to be configured in the operating system to collect necessary information for analysis.(Citations: Powersploit)",
      "ddmc_optionB": "Consider analyzing malware for features that may be associated with the adversary and/or their developers, such as compiler used, debugging artifacts, or code similarities. Malware repositories can also be used to identify additional samples associated with the adversary and identify development patterns over time. Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on post-compromise phases of the adversary lifecycle.",
      "ddmc_optionC": "Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>CreateRemoteThread</code>, <code>SuspendThread</code>/<code>SetThreadContext</code>/<code>ResumeThread</code>, and those that can be used to modify memory within another process, such as <code>VirtualAllocEx</code>/<code>WriteProcessMemory</code>, may be used for this technique. Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior.(Citations: Elastic Process Injection July 2017)",
      "ddmc_optionD": "Monitor authentication logs for system and application login failures of Valid Accounts. Specifically, monitor for many failed authentication attempts across various accounts that may result from password spraying attempts. Consider the following event IDs: * Domain Controllers: \"Audit Logon\" (Success & Failure) for event ID 4625. * Domain Controllers: \"Audit Kerberos Authentication Service\" (Success & Failure) for event ID 4771. * All systems: \"Audit Logon\" (Success & Failure) for event ID 4648.(Citations: Trimarc Detecting Password Spraying)",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Monitor processes and command-line arguments for program execution that may be indicative of credential dumping. Remote access tools may contain built-in features or incorporate existing tools like Mimikatz. PowerShell scripts also exist that contain credential dumping functionality, such as PowerSploit's Invoke-Mimikatz module, which may require additional logging features to be configured in the operating system to collect necessary information for analysis.(Citations: Powersploit)",
      "prompts": [],
      "instruction": "How can you detect LSA Secrets (T1003.004)?\nA.  Monitor processes and command-line arguments for program execution that may be indicative of credential dumping. Remote access tools may contain built-in features or incorporate existing tools like Mimikatz. PowerShell scripts also exist that contain credential dumping functionality, such as PowerSploit's Invoke-Mimikatz module, which may require additional logging features to be configured in the operating system to collect necessary information for analysis.(Citations: Powersploit)\nB.  Consider analyzing malware for features that may be associated with the adversary and/or their developers, such as compiler used, debugging artifacts, or code similarities. Malware repositories can also be used to identify additional samples associated with the adversary and identify development patterns over time. Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on post-compromise phases of the adversary lifecycle.\nC.  Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>CreateRemoteThread</code>, <code>SuspendThread</code>/<code>SetThreadContext</code>/<code>ResumeThread</code>, and those that can be used to modify memory within another process, such as <code>VirtualAllocEx</code>/<code>WriteProcessMemory</code>, may be used for this technique. Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior.(Citations: Elastic Process Injection July 2017)\nD.  Monitor authentication logs for system and application login failures of Valid Accounts. Specifically, monitor for many failed authentication attempts across various accounts that may result from password spraying attempts. Consider the following event IDs: * Domain Controllers: \"Audit Logon\" (Success & Failure) for event ID 4625. * Domain Controllers: \"Audit Kerberos Authentication Service\" (Success & Failure) for event ID 4771. * All systems: \"Audit Logon\" (Success & Failure) for event ID 4648.(Citations: Trimarc Detecting Password Spraying)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Dynamic Resolution (T1568)?\nA.  Collecting network communication protocol metadata and identifying statistical outliers.\nB.  Employing a pattern matching algorithm to statically analyze the content of files.\nC.  Blocking a lookup based on the query's domain name value.\nD.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Dynamic Resolution (T1568)",
      "ddmc_optionA": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmc_optionB": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_optionC": "Blocking a lookup based on the query's domain name value.",
      "ddmc_optionD": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Blocking a lookup based on the query's domain name value.",
      "prompts": [],
      "instruction": "How can you mitigate Dynamic Resolution (T1568)?\nA.  Collecting network communication protocol metadata and identifying statistical outliers.\nB.  Employing a pattern matching algorithm to statically analyze the content of files.\nC.  Blocking a lookup based on the query's domain name value.\nD.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect External Control of Assumed-Immutable Web Parameter (CWE-472)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  This weakness can be detected using dynamic tools and techniques that interact with the product using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The product's operation may slow down, but it should not become unstable, crash, or generate incorrect results.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "External Control of Assumed-Immutable Web Parameter (CWE-472)",
      "ddmc_optionA": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionB": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionC": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionD": "This weakness can be detected using dynamic tools and techniques that interact with the product using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The product's operation may slow down, but it should not become unstable, crash, or generate incorrect results.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "How can you detect External Control of Assumed-Immutable Web Parameter (CWE-472)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  This weakness can be detected using dynamic tools and techniques that interact with the product using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The product's operation may slow down, but it should not become unstable, crash, or generate incorrect results.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Systemd Timers (T1053.006)?\nA.  Monitor access to files and directories related to cryptographic keys and certificates as a means for potentially detecting access patterns that may indicate collection and exfiltration activity. Collect authentication logs and look for potentially abnormal activity that may indicate improper use of keys or certificates for remote authentication. For network infrastructure devices, collect AAA logging to monitor for private keys being exported.\nB.  Systemd timer unit files may be detected by auditing file creation and modification events within the <code>/etc/systemd/system</code>, <code>/usr/lib/systemd/system/</code>, and <code>~/.config/systemd/user/</code> directories, as well as associated symbolic links. Suspicious processes or scripts spawned in this manner will have a parent process of \u2018systemd\u2019, a parent process ID of 1, and will usually execute as the \u2018root\u2019 user. Suspicious systemd timers can also be identified by comparing results against a trusted system baseline. Malicious systemd timers may be detected by using the systemctl utility to examine system wide timers: <code>systemctl list-timers \u2013all</code>. Analyze the contents of corresponding <code>.service</code> files present on the file system and ensure that they refer to legitimate, expected executables. Audit the execution and command-line arguments of the 'systemd-run' utility as it may be used to create timers.(Citations: archlinux Systemd Timers Aug 2020)\nC.  Monitor processes and command-line arguments for actions that could be taken to modify the code signing policy of a system, such as <code>bcdedit.exe -set TESTSIGNING ON</code>. Consider monitoring for modifications made to Registry keys associated with code signing policies, such as <code>HKCU\\Software\\Policies\\Microsoft\\Windows NT\\Driver Signing</code>. Modifications to the code signing policy of a system are likely to be rare.(Citations: Microsoft TESTSIGNING Feb 2021)\nD.  Monitor processes, command-line arguments, and logs for actions that could be taken to gather information about cloud accounts, including the use of calls to cloud APIs that perform account discovery. System and network discovery techniques normally occur throughout an operation as an adversary learns the environment, and also to an extent in normal network operations. Therefore discovery data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Systemd Timers (T1053.006)",
      "ddmc_optionA": "Monitor access to files and directories related to cryptographic keys and certificates as a means for potentially detecting access patterns that may indicate collection and exfiltration activity. Collect authentication logs and look for potentially abnormal activity that may indicate improper use of keys or certificates for remote authentication. For network infrastructure devices, collect AAA logging to monitor for private keys being exported.",
      "ddmc_optionB": "Systemd timer unit files may be detected by auditing file creation and modification events within the <code>/etc/systemd/system</code>, <code>/usr/lib/systemd/system/</code>, and <code>~/.config/systemd/user/</code> directories, as well as associated symbolic links. Suspicious processes or scripts spawned in this manner will have a parent process of \u2018systemd\u2019, a parent process ID of 1, and will usually execute as the \u2018root\u2019 user. Suspicious systemd timers can also be identified by comparing results against a trusted system baseline. Malicious systemd timers may be detected by using the systemctl utility to examine system wide timers: <code>systemctl list-timers \u2013all</code>. Analyze the contents of corresponding <code>.service</code> files present on the file system and ensure that they refer to legitimate, expected executables. Audit the execution and command-line arguments of the 'systemd-run' utility as it may be used to create timers.(Citations: archlinux Systemd Timers Aug 2020)",
      "ddmc_optionC": "Monitor processes and command-line arguments for actions that could be taken to modify the code signing policy of a system, such as <code>bcdedit.exe -set TESTSIGNING ON</code>. Consider monitoring for modifications made to Registry keys associated with code signing policies, such as <code>HKCU\\Software\\Policies\\Microsoft\\Windows NT\\Driver Signing</code>. Modifications to the code signing policy of a system are likely to be rare.(Citations: Microsoft TESTSIGNING Feb 2021)",
      "ddmc_optionD": "Monitor processes, command-line arguments, and logs for actions that could be taken to gather information about cloud accounts, including the use of calls to cloud APIs that perform account discovery. System and network discovery techniques normally occur throughout an operation as an adversary learns the environment, and also to an extent in normal network operations. Therefore discovery data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Systemd timer unit files may be detected by auditing file creation and modification events within the <code>/etc/systemd/system</code>, <code>/usr/lib/systemd/system/</code>, and <code>~/.config/systemd/user/</code> directories, as well as associated symbolic links. Suspicious processes or scripts spawned in this manner will have a parent process of \u2018systemd\u2019, a parent process ID of 1, and will usually execute as the \u2018root\u2019 user. Suspicious systemd timers can also be identified by comparing results against a trusted system baseline. Malicious systemd timers may be detected by using the systemctl utility to examine system wide timers: <code>systemctl list-timers \u2013all</code>. Analyze the contents of corresponding <code>.service</code> files present on the file system and ensure that they refer to legitimate, expected executables. Audit the execution and command-line arguments of the 'systemd-run' utility as it may be used to create timers.(Citations: archlinux Systemd Timers Aug 2020)",
      "prompts": [],
      "instruction": "What is a method to detect Systemd Timers (T1053.006)?\nA.  Monitor access to files and directories related to cryptographic keys and certificates as a means for potentially detecting access patterns that may indicate collection and exfiltration activity. Collect authentication logs and look for potentially abnormal activity that may indicate improper use of keys or certificates for remote authentication. For network infrastructure devices, collect AAA logging to monitor for private keys being exported.\nB.  Systemd timer unit files may be detected by auditing file creation and modification events within the <code>/etc/systemd/system</code>, <code>/usr/lib/systemd/system/</code>, and <code>~/.config/systemd/user/</code> directories, as well as associated symbolic links. Suspicious processes or scripts spawned in this manner will have a parent process of \u2018systemd\u2019, a parent process ID of 1, and will usually execute as the \u2018root\u2019 user. Suspicious systemd timers can also be identified by comparing results against a trusted system baseline. Malicious systemd timers may be detected by using the systemctl utility to examine system wide timers: <code>systemctl list-timers \u2013all</code>. Analyze the contents of corresponding <code>.service</code> files present on the file system and ensure that they refer to legitimate, expected executables. Audit the execution and command-line arguments of the 'systemd-run' utility as it may be used to create timers.(Citations: archlinux Systemd Timers Aug 2020)\nC.  Monitor processes and command-line arguments for actions that could be taken to modify the code signing policy of a system, such as <code>bcdedit.exe -set TESTSIGNING ON</code>. Consider monitoring for modifications made to Registry keys associated with code signing policies, such as <code>HKCU\\Software\\Policies\\Microsoft\\Windows NT\\Driver Signing</code>. Modifications to the code signing policy of a system are likely to be rare.(Citations: Microsoft TESTSIGNING Feb 2021)\nD.  Monitor processes, command-line arguments, and logs for actions that could be taken to gather information about cloud accounts, including the use of calls to cloud APIs that perform account discovery. System and network discovery techniques normally occur throughout an operation as an adversary learns the environment, and also to an extent in normal network operations. Therefore discovery data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate CAPEC-71 (Using Unicode Encoding to Bypass Validation Logic)?\nA.  Design: Tunnel communications through a secure proxy\nB.  Monitor and control access to the configuration management system.\nC.  Ensure that the system is Unicode aware and can properly process Unicode data. Do not make an assumption that data will be in ASCII.\nD.  Separate the presentation layer and the business logic layer. Variables at the business logic layer should not be exposed at the presentation layer. This is to prevent computation of business logic from user controlled input data.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CAPEC-71 (Using Unicode Encoding to Bypass Validation Logic)",
      "ddmc_optionA": "Design: Tunnel communications through a secure proxy",
      "ddmc_optionB": "Monitor and control access to the configuration management system.",
      "ddmc_optionC": "Ensure that the system is Unicode aware and can properly process Unicode data. Do not make an assumption that data will be in ASCII.",
      "ddmc_optionD": "Separate the presentation layer and the business logic layer. Variables at the business logic layer should not be exposed at the presentation layer. This is to prevent computation of business logic from user controlled input data.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Ensure that the system is Unicode aware and can properly process Unicode data. Do not make an assumption that data will be in ASCII.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate CAPEC-71 (Using Unicode Encoding to Bypass Validation Logic)?\nA.  Design: Tunnel communications through a secure proxy\nB.  Monitor and control access to the configuration management system.\nC.  Ensure that the system is Unicode aware and can properly process Unicode data. Do not make an assumption that data will be in ASCII.\nD.  Separate the presentation layer and the business logic layer. Variables at the business logic layer should not be exposed at the presentation layer. This is to prevent computation of business logic from user controlled input data.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Attempt to Access Child of a Non-structure Pointer (CWE-588)?\nA.  Ensure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success. If errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not.\nB.  When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs. For example, ID 1 could map to \"inbox.txt\" and ID 2 could map to \"profile.txt\". Features such as the ESAPI AccessReferenceMap [REF-185] provide this capability.\nC.  Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. Use libraries or frameworks that make it easier to handle numbers without unexpected consequences, or buffer allocation routines that automatically track buffer size. Examples include safe integer handling packages such as SafeInt (C++) or IntegerLib (C or C++). [REF-106]\nD.  Review of type casting operations can identify locations where incompatible types are cast.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Attempt to Access Child of a Non-structure Pointer (CWE-588)",
      "ddmc_optionA": "Ensure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success. If errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not.",
      "ddmc_optionB": "When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs. For example, ID 1 could map to \"inbox.txt\" and ID 2 could map to \"profile.txt\". Features such as the ESAPI AccessReferenceMap [REF-185] provide this capability.",
      "ddmc_optionC": "Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. Use libraries or frameworks that make it easier to handle numbers without unexpected consequences, or buffer allocation routines that automatically track buffer size. Examples include safe integer handling packages such as SafeInt (C++) or IntegerLib (C or C++). [REF-106]",
      "ddmc_optionD": "Review of type casting operations can identify locations where incompatible types are cast.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Review of type casting operations can identify locations where incompatible types are cast.",
      "prompts": [],
      "instruction": "What is a method to mitigate Attempt to Access Child of a Non-structure Pointer (CWE-588)?\nA.  Ensure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success. If errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not.\nB.  When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs. For example, ID 1 could map to \"inbox.txt\" and ID 2 could map to \"profile.txt\". Features such as the ESAPI AccessReferenceMap [REF-185] provide this capability.\nC.  Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. Use libraries or frameworks that make it easier to handle numbers without unexpected consequences, or buffer allocation routines that automatically track buffer size. Examples include safe integer handling packages such as SafeInt (C++) or IntegerLib (C or C++). [REF-106]\nD.  Review of type casting operations can identify locations where incompatible types are cast.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Reliance on Cookies without Validation and Integrity Checking in a Security Decision (CWE-784)?\nA.  Use strong, non-reversible encryption to protect stored passwords.\nB.  In general, do not allow user-provided or otherwise untrusted data to control sensitive values. The leverage that an attacker gains by controlling these values is not always immediately obvious, but do not underestimate the creativity of the attacker.\nC.  Avoid using cookie data for a security-related decision.\nD.  Another potential mitigation is to parallelize shifting of secret data (see example 2 below). Note that the wider the bus the more effective the result.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Reliance on Cookies without Validation and Integrity Checking in a Security Decision (CWE-784)",
      "ddmc_optionA": "Use strong, non-reversible encryption to protect stored passwords.",
      "ddmc_optionB": "In general, do not allow user-provided or otherwise untrusted data to control sensitive values. The leverage that an attacker gains by controlling these values is not always immediately obvious, but do not underestimate the creativity of the attacker.",
      "ddmc_optionC": "Avoid using cookie data for a security-related decision.",
      "ddmc_optionD": "Another potential mitigation is to parallelize shifting of secret data (see example 2 below). Note that the wider the bus the more effective the result.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Avoid using cookie data for a security-related decision.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Reliance on Cookies without Validation and Integrity Checking in a Security Decision (CWE-784)?\nA.  Use strong, non-reversible encryption to protect stored passwords.\nB.  In general, do not allow user-provided or otherwise untrusted data to control sensitive values. The leverage that an attacker gains by controlling these values is not always immediately obvious, but do not underestimate the creativity of the attacker.\nC.  Avoid using cookie data for a security-related decision.\nD.  Another potential mitigation is to parallelize shifting of secret data (see example 2 below). Note that the wider the bus the more effective the result.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1048.001 (Exfiltration Over Symmetric Encrypted Non-C2 Protocol)?\nA.  Restricting access to a local file by configuring operating system functionality.\nB.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nC.  Restricting network traffic originating from untrusted networks destined towards a private host or enclave.\nD.  Employing a pattern matching algorithm to statically analyze the content of files.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1048.001 (Exfiltration Over Symmetric Encrypted Non-C2 Protocol)",
      "ddmc_optionA": "Restricting access to a local file by configuring operating system functionality.",
      "ddmc_optionB": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_optionC": "Restricting network traffic originating from untrusted networks destined towards a private host or enclave.",
      "ddmc_optionD": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1048.001 (Exfiltration Over Symmetric Encrypted Non-C2 Protocol)?\nA.  Restricting access to a local file by configuring operating system functionality.\nB.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nC.  Restricting network traffic originating from untrusted networks destined towards a private host or enclave.\nD.  Employing a pattern matching algorithm to statically analyze the content of files.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Forced Authentication (T1187)?\nA.  Perform regular software updates to mitigate exploitation risk.\nB.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nC.  Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.\nD.  Set and enforce secure password policies for accounts.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Forced Authentication (T1187)",
      "ddmc_optionA": "Perform regular software updates to mitigate exploitation risk.",
      "ddmc_optionB": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "ddmc_optionC": "Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.",
      "ddmc_optionD": "Set and enforce secure password policies for accounts.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Set and enforce secure password policies for accounts.",
      "prompts": [],
      "instruction": "What is a method to mitigate Forced Authentication (T1187)?\nA.  Perform regular software updates to mitigate exploitation risk.\nB.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nC.  Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.\nD.  Set and enforce secure password policies for accounts.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Spearphishing via Service (T1566.003)?\nA.  A file created for the purposes of deceiving an adversary.\nB.  Restricting access to a local file by configuring operating system functionality.\nC.  Emulating instructions in a file looking for specific patterns.\nD.  Employing a pattern matching rule language to analyze the content of files.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Spearphishing via Service (T1566.003)",
      "ddmc_optionA": "A file created for the purposes of deceiving an adversary.",
      "ddmc_optionB": "Restricting access to a local file by configuring operating system functionality.",
      "ddmc_optionC": "Emulating instructions in a file looking for specific patterns.",
      "ddmc_optionD": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Restricting access to a local file by configuring operating system functionality.",
      "prompts": [],
      "instruction": "What is a method to mitigate Spearphishing via Service (T1566.003)?\nA.  A file created for the purposes of deceiving an adversary.\nB.  Restricting access to a local file by configuring operating system functionality.\nC.  Emulating instructions in a file looking for specific patterns.\nD.  Employing a pattern matching rule language to analyze the content of files.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect T1218.003 (CMSTP)?\nA.  In general, detecting usage of fast flux DNS is difficult due to web traffic load balancing that services client requests quickly. In single flux cases only IP addresses change for static domain names. In double flux cases, nothing is static. Defenders such as domain registrars and service providers are likely in the best position for detection.\nB.  Use process monitoring to detect and analyze the execution and arguments of CMSTP.exe. Compare recent invocations of CMSTP.exe with prior history of known good arguments and loaded files to determine anomalous and potentially adversarial activity. Sysmon events can also be used to identify potential abuses of CMSTP.exe. Detection strategy may depend on the specific adversary procedure, but potential rules include:  * To detect loading and execution of local/remote payloads - Event 1 (Process creation) where ParentImage contains CMSTP.exe and/or Event 3 (Network connection) where Image contains CMSTP.exe and DestinationIP is external. * To detect Bypass User Account Control via an auto-elevated COM interface - Event 10 (ProcessAccess) where CallTrace contains CMLUA.dll and/or Event 12 or 13 (RegistryEvent) where TargetObject contains CMMGR32.exe. Also monitor for events, such as the creation of processes (Sysmon Event 1), that involve auto-elevated CMSTP COM interfaces such as CMSTPLUA (3E5FC7F9-9A51-4367-9063-A120244FBEC7) and CMLUAUTIL (3E000D72-A845-4CD9-BD83-80C07C3B881F).(Citations: Endurant CMSTP July 2018)\nC.  Monitor processes and command-line arguments for program execution that may be indicative of credential dumping. Remote access tools may contain built-in features or incorporate existing tools like Mimikatz. PowerShell scripts also exist that contain credential dumping functionality, such as PowerSploit's Invoke-Mimikatz module, which may require additional logging features to be configured in the operating system to collect necessary information for analysis.(Citations: Powersploit)\nD.  Detection of reflection amplification can sometimes be achieved before the traffic volume is sufficient to cause impact to the availability of the service, but such response time typically requires very aggressive monitoring and responsiveness or services provided by an upstream network service provider. Typical network throughput monitoring tools such as netflow, SNMP, and custom scripts can be used to detect sudden increases in network or service utilization. Real-time, automated, and qualitative study of the network traffic can identify a sudden surge in one type of protocol can be used to detect a reflection amplification DoS event as it starts. Often, the lead time may be small and the indicator of an event availability of the network or service drops. The analysis tools mentioned can then be used to determine the type of DoS causing the outage and help with remediation.(Citations: Cisco DoSdetectNetflow)\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "T1218.003 (CMSTP)",
      "ddmc_optionA": "In general, detecting usage of fast flux DNS is difficult due to web traffic load balancing that services client requests quickly. In single flux cases only IP addresses change for static domain names. In double flux cases, nothing is static. Defenders such as domain registrars and service providers are likely in the best position for detection.",
      "ddmc_optionB": "Use process monitoring to detect and analyze the execution and arguments of CMSTP.exe. Compare recent invocations of CMSTP.exe with prior history of known good arguments and loaded files to determine anomalous and potentially adversarial activity. Sysmon events can also be used to identify potential abuses of CMSTP.exe. Detection strategy may depend on the specific adversary procedure, but potential rules include:  * To detect loading and execution of local/remote payloads - Event 1 (Process creation) where ParentImage contains CMSTP.exe and/or Event 3 (Network connection) where Image contains CMSTP.exe and DestinationIP is external. * To detect Bypass User Account Control via an auto-elevated COM interface - Event 10 (ProcessAccess) where CallTrace contains CMLUA.dll and/or Event 12 or 13 (RegistryEvent) where TargetObject contains CMMGR32.exe. Also monitor for events, such as the creation of processes (Sysmon Event 1), that involve auto-elevated CMSTP COM interfaces such as CMSTPLUA (3E5FC7F9-9A51-4367-9063-A120244FBEC7) and CMLUAUTIL (3E000D72-A845-4CD9-BD83-80C07C3B881F).(Citations: Endurant CMSTP July 2018)",
      "ddmc_optionC": "Monitor processes and command-line arguments for program execution that may be indicative of credential dumping. Remote access tools may contain built-in features or incorporate existing tools like Mimikatz. PowerShell scripts also exist that contain credential dumping functionality, such as PowerSploit's Invoke-Mimikatz module, which may require additional logging features to be configured in the operating system to collect necessary information for analysis.(Citations: Powersploit)",
      "ddmc_optionD": "Detection of reflection amplification can sometimes be achieved before the traffic volume is sufficient to cause impact to the availability of the service, but such response time typically requires very aggressive monitoring and responsiveness or services provided by an upstream network service provider. Typical network throughput monitoring tools such as netflow, SNMP, and custom scripts can be used to detect sudden increases in network or service utilization. Real-time, automated, and qualitative study of the network traffic can identify a sudden surge in one type of protocol can be used to detect a reflection amplification DoS event as it starts. Often, the lead time may be small and the indicator of an event availability of the network or service drops. The analysis tools mentioned can then be used to determine the type of DoS causing the outage and help with remediation.(Citations: Cisco DoSdetectNetflow)",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Use process monitoring to detect and analyze the execution and arguments of CMSTP.exe. Compare recent invocations of CMSTP.exe with prior history of known good arguments and loaded files to determine anomalous and potentially adversarial activity. Sysmon events can also be used to identify potential abuses of CMSTP.exe. Detection strategy may depend on the specific adversary procedure, but potential rules include:  * To detect loading and execution of local/remote payloads - Event 1 (Process creation) where ParentImage contains CMSTP.exe and/or Event 3 (Network connection) where Image contains CMSTP.exe and DestinationIP is external. * To detect Bypass User Account Control via an auto-elevated COM interface - Event 10 (ProcessAccess) where CallTrace contains CMLUA.dll and/or Event 12 or 13 (RegistryEvent) where TargetObject contains CMMGR32.exe. Also monitor for events, such as the creation of processes (Sysmon Event 1), that involve auto-elevated CMSTP COM interfaces such as CMSTPLUA (3E5FC7F9-9A51-4367-9063-A120244FBEC7) and CMLUAUTIL (3E000D72-A845-4CD9-BD83-80C07C3B881F).(Citations: Endurant CMSTP July 2018)",
      "prompts": [],
      "instruction": "What is a method to detect T1218.003 (CMSTP)?\nA.  In general, detecting usage of fast flux DNS is difficult due to web traffic load balancing that services client requests quickly. In single flux cases only IP addresses change for static domain names. In double flux cases, nothing is static. Defenders such as domain registrars and service providers are likely in the best position for detection.\nB.  Use process monitoring to detect and analyze the execution and arguments of CMSTP.exe. Compare recent invocations of CMSTP.exe with prior history of known good arguments and loaded files to determine anomalous and potentially adversarial activity. Sysmon events can also be used to identify potential abuses of CMSTP.exe. Detection strategy may depend on the specific adversary procedure, but potential rules include:  * To detect loading and execution of local/remote payloads - Event 1 (Process creation) where ParentImage contains CMSTP.exe and/or Event 3 (Network connection) where Image contains CMSTP.exe and DestinationIP is external. * To detect Bypass User Account Control via an auto-elevated COM interface - Event 10 (ProcessAccess) where CallTrace contains CMLUA.dll and/or Event 12 or 13 (RegistryEvent) where TargetObject contains CMMGR32.exe. Also monitor for events, such as the creation of processes (Sysmon Event 1), that involve auto-elevated CMSTP COM interfaces such as CMSTPLUA (3E5FC7F9-9A51-4367-9063-A120244FBEC7) and CMLUAUTIL (3E000D72-A845-4CD9-BD83-80C07C3B881F).(Citations: Endurant CMSTP July 2018)\nC.  Monitor processes and command-line arguments for program execution that may be indicative of credential dumping. Remote access tools may contain built-in features or incorporate existing tools like Mimikatz. PowerShell scripts also exist that contain credential dumping functionality, such as PowerSploit's Invoke-Mimikatz module, which may require additional logging features to be configured in the operating system to collect necessary information for analysis.(Citations: Powersploit)\nD.  Detection of reflection amplification can sometimes be achieved before the traffic volume is sufficient to cause impact to the availability of the service, but such response time typically requires very aggressive monitoring and responsiveness or services provided by an upstream network service provider. Typical network throughput monitoring tools such as netflow, SNMP, and custom scripts can be used to detect sudden increases in network or service utilization. Real-time, automated, and qualitative study of the network traffic can identify a sudden surge in one type of protocol can be used to detect a reflection amplification DoS event as it starts. Often, the lead time may be small and the indicator of an event availability of the network or service drops. The analysis tools mentioned can then be used to determine the type of DoS causing the outage and help with remediation.(Citations: Cisco DoSdetectNetflow)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Server Software Component (T1505)?\nA.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nB.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nC.  Restrict the ability to modify certain hives or keys in the Windows Registry.\nD.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Server Software Component (T1505)",
      "ddmc_optionA": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
      "ddmc_optionB": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmc_optionC": "Restrict the ability to modify certain hives or keys in the Windows Registry.",
      "ddmc_optionD": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Restrict the ability to modify certain hives or keys in the Windows Registry.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Server Software Component (T1505)?\nA.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nB.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nC.  Restrict the ability to modify certain hives or keys in the Windows Registry.\nD.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate CAPEC-495 (UDP Fragmentation)?\nA.  Enforce regular patching of software.\nB.  Require SSL for update channels and implement certificate transparency based verification.\nC.  Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.\nD.  This attack may be mitigated by changing default cache sizes to be larger at the OS level. Additionally rules can be enforced to prune the cache with shorter timeouts for packet reassembly as the cache nears capacity.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CAPEC-495 (UDP Fragmentation)",
      "ddmc_optionA": "Enforce regular patching of software.",
      "ddmc_optionB": "Require SSL for update channels and implement certificate transparency based verification.",
      "ddmc_optionC": "Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.",
      "ddmc_optionD": "This attack may be mitigated by changing default cache sizes to be larger at the OS level. Additionally rules can be enforced to prune the cache with shorter timeouts for packet reassembly as the cache nears capacity.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "This attack may be mitigated by changing default cache sizes to be larger at the OS level. Additionally rules can be enforced to prune the cache with shorter timeouts for packet reassembly as the cache nears capacity.",
      "prompts": [],
      "instruction": "How can you mitigate CAPEC-495 (UDP Fragmentation)?\nA.  Enforce regular patching of software.\nB.  Require SSL for update channels and implement certificate transparency based verification.\nC.  Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.\nD.  This attack may be mitigated by changing default cache sizes to be larger at the OS level. Additionally rules can be enforced to prune the cache with shorter timeouts for packet reassembly as the cache nears capacity.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Use of Known Operating System Credentials (CAPEC-653)?\nA.  Messages from a legitimate user appear to contain suspicious links or communications not consistent with the user's normal behavior.\nB.  Many incorrect login attempts are detected by the system.\nC.  File Signatures for Malicious Software capable of abusing Transient Instruction Set Execution\nD.  Data is being transferred and/or removed from systems/applications within the network.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Use of Known Operating System Credentials (CAPEC-653)",
      "ddmc_optionA": "Messages from a legitimate user appear to contain suspicious links or communications not consistent with the user's normal behavior.",
      "ddmc_optionB": "Many incorrect login attempts are detected by the system.",
      "ddmc_optionC": "File Signatures for Malicious Software capable of abusing Transient Instruction Set Execution",
      "ddmc_optionD": "Data is being transferred and/or removed from systems/applications within the network.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Messages from a legitimate user appear to contain suspicious links or communications not consistent with the user's normal behavior.",
      "prompts": [],
      "instruction": "What is a method to detect Use of Known Operating System Credentials (CAPEC-653)?\nA.  Messages from a legitimate user appear to contain suspicious links or communications not consistent with the user's normal behavior.\nB.  Many incorrect login attempts are detected by the system.\nC.  File Signatures for Malicious Software capable of abusing Transient Instruction Set Execution\nD.  Data is being transferred and/or removed from systems/applications within the network.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate DNS (T1071.004)?\nA.  Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.\nB.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\nC.  Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.\nD.  Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "DNS (T1071.004)",
      "ddmc_optionA": "Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.",
      "ddmc_optionB": "Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.",
      "ddmc_optionC": "Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.",
      "ddmc_optionD": "Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate DNS (T1071.004)?\nA.  Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.\nB.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\nC.  Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.\nD.  Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate SSH (T1021.004)?\nA.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nB.  Using kernel-level capabilities to isolate processes.\nC.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nD.  Replacing old software on a computer system component.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "SSH (T1021.004)",
      "ddmc_optionA": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_optionB": "Using kernel-level capabilities to isolate processes.",
      "ddmc_optionC": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionD": "Replacing old software on a computer system component.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "prompts": [],
      "instruction": "What is a method to mitigate SSH (T1021.004)?\nA.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nB.  Using kernel-level capabilities to isolate processes.\nC.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nD.  Replacing old software on a computer system component.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate T1552.003 (Bash History)?\nA.  Restricting access to a local file by configuring operating system functionality.\nB.  Employing a pattern matching algorithm to statically analyze the content of files.\nC.  Detecting any suspicious changes to files in a computer system.\nD.  Configuring a kernel to use an allow or deny list to filter kernel api calls.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1552.003 (Bash History)",
      "ddmc_optionA": "Restricting access to a local file by configuring operating system functionality.",
      "ddmc_optionB": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_optionC": "Detecting any suspicious changes to files in a computer system.",
      "ddmc_optionD": "Configuring a kernel to use an allow or deny list to filter kernel api calls.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate T1552.003 (Bash History)?\nA.  Restricting access to a local file by configuring operating system functionality.\nB.  Employing a pattern matching algorithm to statically analyze the content of files.\nC.  Detecting any suspicious changes to files in a computer system.\nD.  Configuring a kernel to use an allow or deny list to filter kernel api calls.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect Missing Support for Security Features in On-chip Fabrics or Buses (CWE-1318)?\nA.  Lack of security features can also be confirmed through manual RTL review of the fabric RTL.\nB.  Automated static analysis typically has limited utility in recognizing resource exhaustion problems, except for program-independent system resources such as files, sockets, and processes. For system resources, automated static analysis may be able to detect circumstances in which resources are not released after they have expired. Automated analysis of configuration files may be able to detect settings that do not specify a maximum value. Automated static analysis tools will not be appropriate for detecting exhaustion of custom resources, such as an intended security policy in which a bulletin board user is only allowed to make a limited number of posts per day.\nC.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Cost effective for partial coverage: Binary Weakness Analysis - including disassembler + source code weakness analysis\nD.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Missing Support for Security Features in On-chip Fabrics or Buses (CWE-1318)",
      "ddmc_optionA": "Lack of security features can also be confirmed through manual RTL review of the fabric RTL.",
      "ddmc_optionB": "Automated static analysis typically has limited utility in recognizing resource exhaustion problems, except for program-independent system resources such as files, sockets, and processes. For system resources, automated static analysis may be able to detect circumstances in which resources are not released after they have expired. Automated analysis of configuration files may be able to detect settings that do not specify a maximum value. Automated static analysis tools will not be appropriate for detecting exhaustion of custom resources, such as an intended security policy in which a bulletin board user is only allowed to make a limited number of posts per day.",
      "ddmc_optionC": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Cost effective for partial coverage: Binary Weakness Analysis - including disassembler + source code weakness analysis",
      "ddmc_optionD": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Lack of security features can also be confirmed through manual RTL review of the fabric RTL.",
      "prompts": [],
      "instruction": "How can you detect Missing Support for Security Features in On-chip Fabrics or Buses (CWE-1318)?\nA.  Lack of security features can also be confirmed through manual RTL review of the fabric RTL.\nB.  Automated static analysis typically has limited utility in recognizing resource exhaustion problems, except for program-independent system resources such as files, sockets, and processes. For system resources, automated static analysis may be able to detect circumstances in which resources are not released after they have expired. Automated analysis of configuration files may be able to detect settings that do not specify a maximum value. Automated static analysis tools will not be appropriate for detecting exhaustion of custom resources, such as an intended security policy in which a bulletin board user is only allowed to make a limited number of posts per day.\nC.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Cost effective for partial coverage: Binary Weakness Analysis - including disassembler + source code weakness analysis\nD.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Incorrect Check of Function Return Value (CWE-253)?\nA.  When designing any function make sure you return a value or throw an exception in case of an error.\nB.  Run or compile the software using features or extensions that automatically provide a protection mechanism that mitigates or eliminates buffer overflows. For example, certain compilers and extensions provide automatic buffer overflow detection mechanisms that are built into the compiled code. Examples include the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice.\nC.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nD.  Choose a language which is not subject to these casting flaws.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Incorrect Check of Function Return Value (CWE-253)",
      "ddmc_optionA": "When designing any function make sure you return a value or throw an exception in case of an error.",
      "ddmc_optionB": "Run or compile the software using features or extensions that automatically provide a protection mechanism that mitigates or eliminates buffer overflows. For example, certain compilers and extensions provide automatic buffer overflow detection mechanisms that are built into the compiled code. Examples include the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice.",
      "ddmc_optionC": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmc_optionD": "Choose a language which is not subject to these casting flaws.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "When designing any function make sure you return a value or throw an exception in case of an error.",
      "prompts": [],
      "instruction": "What is a method to mitigate Incorrect Check of Function Return Value (CWE-253)?\nA.  When designing any function make sure you return a value or throw an exception in case of an error.\nB.  Run or compile the software using features or extensions that automatically provide a protection mechanism that mitigates or eliminates buffer overflows. For example, certain compilers and extensions provide automatic buffer overflow detection mechanisms that are built into the compiled code. Examples include the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice.\nC.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nD.  Choose a language which is not subject to these casting flaws.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate SQL Injection (CAPEC-66)?\nA.  Ensure digital certificates are protected and inaccessible by unauthorized uses.\nB.  Do not reuse local administrator account credentials across systems.\nC.  Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as SQL content. Keywords such as UNION, SELECT or INSERT must be filtered in addition to characters such as a single-quote(') or SQL-comments (--) based on the context in which they appear.\nD.  Implement: Use a protocol that encrypts the video signal; in case the signal is intercepted the signal is protected by the encryption.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "SQL Injection (CAPEC-66)",
      "ddmc_optionA": "Ensure digital certificates are protected and inaccessible by unauthorized uses.",
      "ddmc_optionB": "Do not reuse local administrator account credentials across systems.",
      "ddmc_optionC": "Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as SQL content. Keywords such as UNION, SELECT or INSERT must be filtered in addition to characters such as a single-quote(') or SQL-comments (--) based on the context in which they appear.",
      "ddmc_optionD": "Implement: Use a protocol that encrypts the video signal; in case the signal is intercepted the signal is protected by the encryption.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as SQL content. Keywords such as UNION, SELECT or INSERT must be filtered in addition to characters such as a single-quote(') or SQL-comments (--) based on the context in which they appear.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate SQL Injection (CAPEC-66)?\nA.  Ensure digital certificates are protected and inaccessible by unauthorized uses.\nB.  Do not reuse local administrator account credentials across systems.\nC.  Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as SQL content. Keywords such as UNION, SELECT or INSERT must be filtered in addition to characters such as a single-quote(') or SQL-comments (--) based on the context in which they appear.\nD.  Implement: Use a protocol that encrypts the video signal; in case the signal is intercepted the signal is protected by the encryption.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Setuid and Setgid (T1548.001)?\nA.  Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\nB.  A Credential created for the purpose of deceiving an adversary.\nC.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\nD.  Restricting network traffic originating from a private host or enclave destined towards untrusted networks.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Setuid and Setgid (T1548.001)",
      "ddmc_optionA": "Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.",
      "ddmc_optionB": "A Credential created for the purpose of deceiving an adversary.",
      "ddmc_optionC": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmc_optionD": "Restricting network traffic originating from a private host or enclave destined towards untrusted networks.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Setuid and Setgid (T1548.001)?\nA.  Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\nB.  A Credential created for the purpose of deceiving an adversary.\nC.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\nD.  Restricting network traffic originating from a private host or enclave destined towards untrusted networks.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1053.005 (Scheduled Task)?\nA.  The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.\nB.  Detects processes that modify, change, or replace their own code at runtime.\nC.  Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.\nD.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1053.005 (Scheduled Task)",
      "ddmc_optionA": "The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.",
      "ddmc_optionB": "Detects processes that modify, change, or replace their own code at runtime.",
      "ddmc_optionC": "Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.",
      "ddmc_optionD": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Detects processes that modify, change, or replace their own code at runtime.",
      "prompts": [],
      "instruction": "How can you mitigate T1053.005 (Scheduled Task)?\nA.  The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.\nB.  Detects processes that modify, change, or replace their own code at runtime.\nC.  Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.\nD.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Use of Captured Tickets (Pass The Ticket) (CAPEC-645)?\nA.  Properly handle the NULL characters supplied as part of user input prior to doing anything with the data.\nB.  Enforce regular patching of software.\nC.  Design: Enforce principle of least privilege\nD.  Reset the built-in KRBTGT account password twice to invalidate the existence of any current Golden Tickets and any tickets derived from them.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Use of Captured Tickets (Pass The Ticket) (CAPEC-645)",
      "ddmc_optionA": "Properly handle the NULL characters supplied as part of user input prior to doing anything with the data.",
      "ddmc_optionB": "Enforce regular patching of software.",
      "ddmc_optionC": "Design: Enforce principle of least privilege",
      "ddmc_optionD": "Reset the built-in KRBTGT account password twice to invalidate the existence of any current Golden Tickets and any tickets derived from them.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Reset the built-in KRBTGT account password twice to invalidate the existence of any current Golden Tickets and any tickets derived from them.",
      "prompts": [],
      "instruction": "What is a method to mitigate Use of Captured Tickets (Pass The Ticket) (CAPEC-645)?\nA.  Properly handle the NULL characters supplied as part of user input prior to doing anything with the data.\nB.  Enforce regular patching of software.\nC.  Design: Enforce principle of least privilege\nD.  Reset the built-in KRBTGT account password twice to invalidate the existence of any current Golden Tickets and any tickets derived from them.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Struts: Unused Validation Form (CWE-107)?\nA.  Ensure that design documentation is detailed enough to allow for post-manufacturing verification.\nB.  Once found, these issues are easy to fix. Use code inspection tools and relevant compiler features to identify potential violations. Pay special attention to code that is not likely to be exercised heavily during QA.\nC.  Follow the principle of least privilege when assigning access rights to entities in a software system. Denying access to a file can prevent an attacker from replacing that file with a link to a sensitive file. Ensure good compartmentalization in the system to provide protected areas that can be trusted.\nD.  Run the code in an environment that performs automatic taint propagation and prevents any command execution that uses tainted variables, such as Perl's \"-T\" switch. This will force the program to perform validation steps that remove the taint, although you must be careful to correctly validate your inputs so that you do not accidentally mark dangerous inputs as untainted (see CWE-183 and CWE-184).\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Struts: Unused Validation Form (CWE-107)",
      "ddmc_optionA": "Ensure that design documentation is detailed enough to allow for post-manufacturing verification.",
      "ddmc_optionB": "Once found, these issues are easy to fix. Use code inspection tools and relevant compiler features to identify potential violations. Pay special attention to code that is not likely to be exercised heavily during QA.",
      "ddmc_optionC": "Follow the principle of least privilege when assigning access rights to entities in a software system. Denying access to a file can prevent an attacker from replacing that file with a link to a sensitive file. Ensure good compartmentalization in the system to provide protected areas that can be trusted.",
      "ddmc_optionD": "Run the code in an environment that performs automatic taint propagation and prevents any command execution that uses tainted variables, such as Perl's \"-T\" switch. This will force the program to perform validation steps that remove the taint, although you must be careful to correctly validate your inputs so that you do not accidentally mark dangerous inputs as untainted (see CWE-183 and CWE-184).",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Ensure that design documentation is detailed enough to allow for post-manufacturing verification.",
      "prompts": [],
      "instruction": "What is a method to mitigate Struts: Unused Validation Form (CWE-107)?\nA.  Ensure that design documentation is detailed enough to allow for post-manufacturing verification.\nB.  Once found, these issues are easy to fix. Use code inspection tools and relevant compiler features to identify potential violations. Pay special attention to code that is not likely to be exercised heavily during QA.\nC.  Follow the principle of least privilege when assigning access rights to entities in a software system. Denying access to a file can prevent an attacker from replacing that file with a link to a sensitive file. Ensure good compartmentalization in the system to provide protected areas that can be trusted.\nD.  Run the code in an environment that performs automatic taint propagation and prevents any command execution that uses tainted variables, such as Perl's \"-T\" switch. This will force the program to perform validation steps that remove the taint, although you must be careful to correctly validate your inputs so that you do not accidentally mark dangerous inputs as untainted (see CWE-183 and CWE-184).\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Web Service (T1102)?\nA.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nB.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nC.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nD.  Restoring an software configuration.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Web Service (T1102)",
      "ddmc_optionA": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmc_optionB": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionC": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmc_optionD": "Restoring an software configuration.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Web Service (T1102)?\nA.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nB.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nC.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nD.  Restoring an software configuration.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Gather Victim Identity Information (T1589)?\nA.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nB.  Manage the creation, modification, use, and permissions associated to user accounts.\nC.  Make configuration changes related to the operating system or a common feature of the operating system that result in system hardening against techniques.\nD.  Use signatures or heuristics to detect malicious software.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Gather Victim Identity Information (T1589)",
      "ddmc_optionA": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmc_optionB": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmc_optionC": "Make configuration changes related to the operating system or a common feature of the operating system that result in system hardening against techniques.",
      "ddmc_optionD": "Use signatures or heuristics to detect malicious software.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "prompts": [],
      "instruction": "What is a method to mitigate Gather Victim Identity Information (T1589)?\nA.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nB.  Manage the creation, modification, use, and permissions associated to user accounts.\nC.  Make configuration changes related to the operating system or a common feature of the operating system that result in system hardening against techniques.\nD.  Use signatures or heuristics to detect malicious software.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate CAPEC-497 (File Discovery)?\nA.  Check your program for buffer overflow and format String vulnerabilities which can lead to execution of malicious code.\nB.  Enforce strict schema validation. The schema should enforce a maximum number of array elements. If the number of maximum array elements can't be limited another validation method should be used. One such method could be comparing the declared number of items in the array with the existing number of elements of the array. If these numbers don't match drop the SOAP packet at the web service layer.\nC.  Design: Browser's design needs to be changed to limit where cookies can be stored on the client side and provide an option to clear these cookies in all places, as well as another option to stop these cookies from being written in the first place.\nD.  Leverage file protection mechanisms to render these files accessible only to authorized parties.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CAPEC-497 (File Discovery)",
      "ddmc_optionA": "Check your program for buffer overflow and format String vulnerabilities which can lead to execution of malicious code.",
      "ddmc_optionB": "Enforce strict schema validation. The schema should enforce a maximum number of array elements. If the number of maximum array elements can't be limited another validation method should be used. One such method could be comparing the declared number of items in the array with the existing number of elements of the array. If these numbers don't match drop the SOAP packet at the web service layer.",
      "ddmc_optionC": "Design: Browser's design needs to be changed to limit where cookies can be stored on the client side and provide an option to clear these cookies in all places, as well as another option to stop these cookies from being written in the first place.",
      "ddmc_optionD": "Leverage file protection mechanisms to render these files accessible only to authorized parties.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Leverage file protection mechanisms to render these files accessible only to authorized parties.",
      "prompts": [],
      "instruction": "What is a method to mitigate CAPEC-497 (File Discovery)?\nA.  Check your program for buffer overflow and format String vulnerabilities which can lead to execution of malicious code.\nB.  Enforce strict schema validation. The schema should enforce a maximum number of array elements. If the number of maximum array elements can't be limited another validation method should be used. One such method could be comparing the declared number of items in the array with the existing number of elements of the array. If these numbers don't match drop the SOAP packet at the web service layer.\nC.  Design: Browser's design needs to be changed to limit where cookies can be stored on the client side and provide an option to clear these cookies in all places, as well as another option to stop these cookies from being written in the first place.\nD.  Leverage file protection mechanisms to render these files accessible only to authorized parties.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Direct Volume Access (T1006)?\nA.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\nB.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nC.  Block execution of code on a system through application control, and/or script blocking.\nD.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Direct Volume Access (T1006)",
      "ddmc_optionA": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
      "ddmc_optionB": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
      "ddmc_optionC": "Block execution of code on a system through application control, and/or script blocking.",
      "ddmc_optionD": "Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.",
      "prompts": [],
      "instruction": "What is a method to mitigate Direct Volume Access (T1006)?\nA.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\nB.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nC.  Block execution of code on a system through application control, and/or script blocking.\nD.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Data Encoding (T1132)?\nA.  On a MSSQL Server, consider monitoring for xp_cmdshell usage. Consider enabling audit features that can log malicious startup activities.(Citations: NetSPI Startup Stored Procedures)\nB.  Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citations: University of Birmingham C2)\nC.  Forensic techniques exist to identify information stored in NTFS EA.  Monitor calls to the <code>ZwSetEaFile</code> and <code>ZwQueryEaFile</code> Windows API functions as well as binaries used to interact with EA,   and consider regularly scanning for the presence of modified information.  There are many ways to create and interact with ADSs using Windows utilities. Monitor for operations (execution, copies, etc.) with file names that contain colons. This syntax (ex: <code>file.ext:ads[.ext]</code>) is commonly associated with ADSs.    For a more exhaustive list of utilities that can be used to execute and create ADSs, see https://gist.github.com/api0cradle/cdd2d0d0ec9abb686f0e89306e277b8f. The Streams tool of Sysinternals can be used to uncover files with ADSs. The <code>dir /r</code> command can also be used to display ADSs.  Many PowerShell commands (such as Get-Item, Set-Item, Remove-Item, and Get-ChildItem) can also accept a <code>-stream</code> parameter to interact with ADSs.  (Citations: Journey into IR ZeroAccess NTFS EA, Oddvar Moe ADS1 Jan 2018, Oddvar Moe ADS2 Apr 2018, SpectorOps Host-Based Jul 2017, Microsoft ADS Mar 2014, Oddvar Moe ADS1 Jan 2018, Oddvar Moe ADS2 Apr 2018, Symantec ADS May 2009, MalwareBytes ADS July 2015, Microsoft ADS Mar 2014)\nD.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Data Encoding (T1132)",
      "ddmc_optionA": "On a MSSQL Server, consider monitoring for xp_cmdshell usage. Consider enabling audit features that can log malicious startup activities.(Citations: NetSPI Startup Stored Procedures)",
      "ddmc_optionB": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citations: University of Birmingham C2)",
      "ddmc_optionC": "Forensic techniques exist to identify information stored in NTFS EA.  Monitor calls to the <code>ZwSetEaFile</code> and <code>ZwQueryEaFile</code> Windows API functions as well as binaries used to interact with EA,   and consider regularly scanning for the presence of modified information.  There are many ways to create and interact with ADSs using Windows utilities. Monitor for operations (execution, copies, etc.) with file names that contain colons. This syntax (ex: <code>file.ext:ads[.ext]</code>) is commonly associated with ADSs.    For a more exhaustive list of utilities that can be used to execute and create ADSs, see https://gist.github.com/api0cradle/cdd2d0d0ec9abb686f0e89306e277b8f. The Streams tool of Sysinternals can be used to uncover files with ADSs. The <code>dir /r</code> command can also be used to display ADSs.  Many PowerShell commands (such as Get-Item, Set-Item, Remove-Item, and Get-ChildItem) can also accept a <code>-stream</code> parameter to interact with ADSs.  (Citations: Journey into IR ZeroAccess NTFS EA, Oddvar Moe ADS1 Jan 2018, Oddvar Moe ADS2 Apr 2018, SpectorOps Host-Based Jul 2017, Microsoft ADS Mar 2014, Oddvar Moe ADS1 Jan 2018, Oddvar Moe ADS2 Apr 2018, Symantec ADS May 2009, MalwareBytes ADS July 2015, Microsoft ADS Mar 2014)",
      "ddmc_optionD": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citations: University of Birmingham C2)",
      "prompts": [],
      "instruction": "What is a method to detect Data Encoding (T1132)?\nA.  On a MSSQL Server, consider monitoring for xp_cmdshell usage. Consider enabling audit features that can log malicious startup activities.(Citations: NetSPI Startup Stored Procedures)\nB.  Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citations: University of Birmingham C2)\nC.  Forensic techniques exist to identify information stored in NTFS EA.  Monitor calls to the <code>ZwSetEaFile</code> and <code>ZwQueryEaFile</code> Windows API functions as well as binaries used to interact with EA,   and consider regularly scanning for the presence of modified information.  There are many ways to create and interact with ADSs using Windows utilities. Monitor for operations (execution, copies, etc.) with file names that contain colons. This syntax (ex: <code>file.ext:ads[.ext]</code>) is commonly associated with ADSs.    For a more exhaustive list of utilities that can be used to execute and create ADSs, see https://gist.github.com/api0cradle/cdd2d0d0ec9abb686f0e89306e277b8f. The Streams tool of Sysinternals can be used to uncover files with ADSs. The <code>dir /r</code> command can also be used to display ADSs.  Many PowerShell commands (such as Get-Item, Set-Item, Remove-Item, and Get-ChildItem) can also accept a <code>-stream</code> parameter to interact with ADSs.  (Citations: Journey into IR ZeroAccess NTFS EA, Oddvar Moe ADS1 Jan 2018, Oddvar Moe ADS2 Apr 2018, SpectorOps Host-Based Jul 2017, Microsoft ADS Mar 2014, Oddvar Moe ADS1 Jan 2018, Oddvar Moe ADS2 Apr 2018, Symantec ADS May 2009, MalwareBytes ADS July 2015, Microsoft ADS Mar 2014)\nD.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate System Service Discovery (T1007)?\nA.  Controlling access to local computer system resources with kernel-level capabilities.\nB.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nC.  Employing a pattern matching algorithm to statically analyze the content of files.\nD.  Filtering incoming email traffic based on specific criteria.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "System Service Discovery (T1007)",
      "ddmc_optionA": "Controlling access to local computer system resources with kernel-level capabilities.",
      "ddmc_optionB": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmc_optionC": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_optionD": "Filtering incoming email traffic based on specific criteria.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Controlling access to local computer system resources with kernel-level capabilities.",
      "prompts": [],
      "instruction": "What is a method to mitigate System Service Discovery (T1007)?\nA.  Controlling access to local computer system resources with kernel-level capabilities.\nB.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nC.  Employing a pattern matching algorithm to statically analyze the content of files.\nD.  Filtering incoming email traffic based on specific criteria.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate System Owner/User Discovery (T1033)?\nA.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nB.  Employing a pattern matching rule language to analyze the content of files.\nC.  Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.\nD.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "System Owner/User Discovery (T1033)",
      "ddmc_optionA": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_optionB": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_optionC": "Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.",
      "ddmc_optionD": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "prompts": [],
      "instruction": "How can you mitigate System Owner/User Discovery (T1033)?\nA.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nB.  Employing a pattern matching rule language to analyze the content of files.\nC.  Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.\nD.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect Port Monitors (T1547.010)?\nA.  Use process monitoring to detect and analyze the execution and arguments of CMSTP.exe. Compare recent invocations of CMSTP.exe with prior history of known good arguments and loaded files to determine anomalous and potentially adversarial activity. Sysmon events can also be used to identify potential abuses of CMSTP.exe. Detection strategy may depend on the specific adversary procedure, but potential rules include:  * To detect loading and execution of local/remote payloads - Event 1 (Process creation) where ParentImage contains CMSTP.exe and/or Event 3 (Network connection) where Image contains CMSTP.exe and DestinationIP is external. * To detect Bypass User Account Control via an auto-elevated COM interface - Event 10 (ProcessAccess) where CallTrace contains CMLUA.dll and/or Event 12 or 13 (RegistryEvent) where TargetObject contains CMMGR32.exe. Also monitor for events, such as the creation of processes (Sysmon Event 1), that involve auto-elevated CMSTP COM interfaces such as CMSTPLUA (3E5FC7F9-9A51-4367-9063-A120244FBEC7) and CMLUAUTIL (3E000D72-A845-4CD9-BD83-80C07C3B881F).(Citations: Endurant CMSTP July 2018)\nB.  Monitor the local image registry to make sure malicious images are not added. Track the deployment of new containers, especially from newly built images. Monitor the behavior of containers within the environment to detect anomalous behavior or malicious activity after users deploy from malicious images.\nC.  System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained. Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.\nD.  Monitor process API calls to <code>AddMonitor</code>. Monitor DLLs that are loaded by spoolsv.exe for DLLs that are abnormal. New DLLs written to the System32 directory that do not correlate with known good software or patching may be suspicious. Monitor Registry writes to <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Print\\Monitors</code>, paying particular attention to changes in the \"Driver\" subkey. Run the Autoruns utility, which checks for this Registry key as a persistence mechanism.(Citations: AddMonitor, TechNet Autoruns)\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Port Monitors (T1547.010)",
      "ddmc_optionA": "Use process monitoring to detect and analyze the execution and arguments of CMSTP.exe. Compare recent invocations of CMSTP.exe with prior history of known good arguments and loaded files to determine anomalous and potentially adversarial activity. Sysmon events can also be used to identify potential abuses of CMSTP.exe. Detection strategy may depend on the specific adversary procedure, but potential rules include:  * To detect loading and execution of local/remote payloads - Event 1 (Process creation) where ParentImage contains CMSTP.exe and/or Event 3 (Network connection) where Image contains CMSTP.exe and DestinationIP is external. * To detect Bypass User Account Control via an auto-elevated COM interface - Event 10 (ProcessAccess) where CallTrace contains CMLUA.dll and/or Event 12 or 13 (RegistryEvent) where TargetObject contains CMMGR32.exe. Also monitor for events, such as the creation of processes (Sysmon Event 1), that involve auto-elevated CMSTP COM interfaces such as CMSTPLUA (3E5FC7F9-9A51-4367-9063-A120244FBEC7) and CMLUAUTIL (3E000D72-A845-4CD9-BD83-80C07C3B881F).(Citations: Endurant CMSTP July 2018)",
      "ddmc_optionB": "Monitor the local image registry to make sure malicious images are not added. Track the deployment of new containers, especially from newly built images. Monitor the behavior of containers within the environment to detect anomalous behavior or malicious activity after users deploy from malicious images.",
      "ddmc_optionC": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained. Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.",
      "ddmc_optionD": "Monitor process API calls to <code>AddMonitor</code>. Monitor DLLs that are loaded by spoolsv.exe for DLLs that are abnormal. New DLLs written to the System32 directory that do not correlate with known good software or patching may be suspicious. Monitor Registry writes to <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Print\\Monitors</code>, paying particular attention to changes in the \"Driver\" subkey. Run the Autoruns utility, which checks for this Registry key as a persistence mechanism.(Citations: AddMonitor, TechNet Autoruns)",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Monitor process API calls to <code>AddMonitor</code>. Monitor DLLs that are loaded by spoolsv.exe for DLLs that are abnormal. New DLLs written to the System32 directory that do not correlate with known good software or patching may be suspicious. Monitor Registry writes to <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Print\\Monitors</code>, paying particular attention to changes in the \"Driver\" subkey. Run the Autoruns utility, which checks for this Registry key as a persistence mechanism.(Citations: AddMonitor, TechNet Autoruns)",
      "prompts": [],
      "instruction": "How can you detect Port Monitors (T1547.010)?\nA.  Use process monitoring to detect and analyze the execution and arguments of CMSTP.exe. Compare recent invocations of CMSTP.exe with prior history of known good arguments and loaded files to determine anomalous and potentially adversarial activity. Sysmon events can also be used to identify potential abuses of CMSTP.exe. Detection strategy may depend on the specific adversary procedure, but potential rules include:  * To detect loading and execution of local/remote payloads - Event 1 (Process creation) where ParentImage contains CMSTP.exe and/or Event 3 (Network connection) where Image contains CMSTP.exe and DestinationIP is external. * To detect Bypass User Account Control via an auto-elevated COM interface - Event 10 (ProcessAccess) where CallTrace contains CMLUA.dll and/or Event 12 or 13 (RegistryEvent) where TargetObject contains CMMGR32.exe. Also monitor for events, such as the creation of processes (Sysmon Event 1), that involve auto-elevated CMSTP COM interfaces such as CMSTPLUA (3E5FC7F9-9A51-4367-9063-A120244FBEC7) and CMLUAUTIL (3E000D72-A845-4CD9-BD83-80C07C3B881F).(Citations: Endurant CMSTP July 2018)\nB.  Monitor the local image registry to make sure malicious images are not added. Track the deployment of new containers, especially from newly built images. Monitor the behavior of containers within the environment to detect anomalous behavior or malicious activity after users deploy from malicious images.\nC.  System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained. Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.\nD.  Monitor process API calls to <code>AddMonitor</code>. Monitor DLLs that are loaded by spoolsv.exe for DLLs that are abnormal. New DLLs written to the System32 directory that do not correlate with known good software or patching may be suspicious. Monitor Registry writes to <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Print\\Monitors</code>, paying particular attention to changes in the \"Driver\" subkey. Run the Autoruns utility, which checks for this Registry key as a persistence mechanism.(Citations: AddMonitor, TechNet Autoruns)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Credentials from Web Browsers (T1555.003)?\nA.  Use intrusion detection signatures to block traffic at network boundaries.\nB.  Set and enforce secure password policies for accounts.\nC.  Set and enforce secure password policies for accounts.\nD.  Use capabilities to detect and block conditions that may lead to or be indicative of a software exploit occurring.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Credentials from Web Browsers (T1555.003)",
      "ddmc_optionA": "Use intrusion detection signatures to block traffic at network boundaries.",
      "ddmc_optionB": "Set and enforce secure password policies for accounts.",
      "ddmc_optionC": "Set and enforce secure password policies for accounts.",
      "ddmc_optionD": "Use capabilities to detect and block conditions that may lead to or be indicative of a software exploit occurring.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Set and enforce secure password policies for accounts.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Credentials from Web Browsers (T1555.003)?\nA.  Use intrusion detection signatures to block traffic at network boundaries.\nB.  Set and enforce secure password policies for accounts.\nC.  Set and enforce secure password policies for accounts.\nD.  Use capabilities to detect and block conditions that may lead to or be indicative of a software exploit occurring.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect Buffer Over-read (CWE-126)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  Tests that fuzz Debug and Test Interfaces should ensure that no access without appropriate authentication and authorization is possible.\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Buffer Over-read (CWE-126)",
      "ddmc_optionA": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionB": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionC": "Tests that fuzz Debug and Test Interfaces should ensure that no access without appropriate authentication and authorization is possible.",
      "ddmc_optionD": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "How can you detect Buffer Over-read (CWE-126)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  Tests that fuzz Debug and Test Interfaces should ensure that no access without appropriate authentication and authorization is possible.\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect J2EE Misconfiguration: Data Transmission Without Encryption (CWE-5)?\nA.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)\nB.  Analyze the device using the following steps: Identify all fabric master agents that are active during system Boot Flow when initial code is loaded from Non-volatile storage to volatile memory. Identify the volatile memory regions that are used for storing loaded system executable program. During system boot, test programming the identified memory regions in step 2 from all the masters identified in step 1. Only trusted masters should be allowed to write to the memory regions. For example, pluggable device peripherals should not have write access to program load memory regions.\nC.  This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives. Automated static analysis generally does not account for environmental considerations when reporting out-of-bounds memory operations. This can make it difficult for users to determine which warnings should be investigated first. For example, an analysis tool might report buffer overflows that originate from command line arguments in a program that is not expected to run with setuid or other special privileges.\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "J2EE Misconfiguration: Data Transmission Without Encryption (CWE-5)",
      "ddmc_optionA": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)",
      "ddmc_optionB": "Analyze the device using the following steps: Identify all fabric master agents that are active during system Boot Flow when initial code is loaded from Non-volatile storage to volatile memory. Identify the volatile memory regions that are used for storing loaded system executable program. During system boot, test programming the identified memory regions in step 2 from all the masters identified in step 1. Only trusted masters should be allowed to write to the memory regions. For example, pluggable device peripherals should not have write access to program load memory regions.",
      "ddmc_optionC": "This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives. Automated static analysis generally does not account for environmental considerations when reporting out-of-bounds memory operations. This can make it difficult for users to determine which warnings should be investigated first. For example, an analysis tool might report buffer overflows that originate from command line arguments in a program that is not expected to run with setuid or other special privileges.",
      "ddmc_optionD": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "What is a method to detect J2EE Misconfiguration: Data Transmission Without Encryption (CWE-5)?\nA.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)\nB.  Analyze the device using the following steps: Identify all fabric master agents that are active during system Boot Flow when initial code is loaded from Non-volatile storage to volatile memory. Identify the volatile memory regions that are used for storing loaded system executable program. During system boot, test programming the identified memory regions in step 2 from all the masters identified in step 1. Only trusted masters should be allowed to write to the memory regions. For example, pluggable device peripherals should not have write access to program load memory regions.\nC.  This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives. Automated static analysis generally does not account for environmental considerations when reporting out-of-bounds memory operations. This can make it difficult for users to determine which warnings should be investigated first. For example, an analysis tool might report buffer overflows that originate from command line arguments in a program that is not expected to run with setuid or other special privileges.\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate T1565.001 (Stored Data Manipulation)?\nA.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\nB.  Employing file hash comparisons to detect known malware.\nC.  Cryptographically authenticating the bootloader software before system boot.\nD.  A file created for the purposes of deceiving an adversary.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1565.001 (Stored Data Manipulation)",
      "ddmc_optionA": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "ddmc_optionB": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionC": "Cryptographically authenticating the bootloader software before system boot.",
      "ddmc_optionD": "A file created for the purposes of deceiving an adversary.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Employing file hash comparisons to detect known malware.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate T1565.001 (Stored Data Manipulation)?\nA.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\nB.  Employing file hash comparisons to detect known malware.\nC.  Cryptographically authenticating the bootloader software before system boot.\nD.  A file created for the purposes of deceiving an adversary.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate System Owner/User Discovery (T1033)?\nA.  Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.\nB.  Restoring the data in a database.\nC.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nD.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "System Owner/User Discovery (T1033)",
      "ddmc_optionA": "Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.",
      "ddmc_optionB": "Restoring the data in a database.",
      "ddmc_optionC": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_optionD": "Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Restoring the data in a database.",
      "prompts": [],
      "instruction": "How can you mitigate System Owner/User Discovery (T1033)?\nA.  Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.\nB.  Restoring the data in a database.\nC.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nD.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Data from Removable Media (T1025)?\nA.  Protect sensitive information with strong encryption.\nB.  Manage the creation, modification, use, and permissions associated to user accounts.\nC.  Use a data loss prevention (DLP) strategy to categorize sensitive data, identify data formats indicative of personal identifiable information (PII), and restrict exfiltration of sensitive data.(Citations: PurpleSec Data Loss Prevention)\nD.  Configure Active Directory to prevent use of certain techniques; use SID Filtering, etc.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Data from Removable Media (T1025)",
      "ddmc_optionA": "Protect sensitive information with strong encryption.",
      "ddmc_optionB": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmc_optionC": "Use a data loss prevention (DLP) strategy to categorize sensitive data, identify data formats indicative of personal identifiable information (PII), and restrict exfiltration of sensitive data.(Citations: PurpleSec Data Loss Prevention)",
      "ddmc_optionD": "Configure Active Directory to prevent use of certain techniques; use SID Filtering, etc.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Use a data loss prevention (DLP) strategy to categorize sensitive data, identify data formats indicative of personal identifiable information (PII), and restrict exfiltration of sensitive data.(Citations: PurpleSec Data Loss Prevention)",
      "prompts": [],
      "instruction": "What is a method to mitigate Data from Removable Media (T1025)?\nA.  Protect sensitive information with strong encryption.\nB.  Manage the creation, modification, use, and permissions associated to user accounts.\nC.  Use a data loss prevention (DLP) strategy to categorize sensitive data, identify data formats indicative of personal identifiable information (PII), and restrict exfiltration of sensitive data.(Citations: PurpleSec Data Loss Prevention)\nD.  Configure Active Directory to prevent use of certain techniques; use SID Filtering, etc.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect Use of Known Operating System Credentials (CAPEC-653)?\nA.  None. This attack happens offline.\nB.  Authentication attempts use credentials that have been used previously by the account in question.\nC.  Messages from a legitimate user appear to contain suspicious links or communications not consistent with the user's normal behavior.\nD.  Software being run on a system matches a file signature found in a malware database\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Use of Known Operating System Credentials (CAPEC-653)",
      "ddmc_optionA": "None. This attack happens offline.",
      "ddmc_optionB": "Authentication attempts use credentials that have been used previously by the account in question.",
      "ddmc_optionC": "Messages from a legitimate user appear to contain suspicious links or communications not consistent with the user's normal behavior.",
      "ddmc_optionD": "Software being run on a system matches a file signature found in a malware database",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Authentication attempts use credentials that have been used previously by the account in question.",
      "prompts": [],
      "instruction": "How can you detect Use of Known Operating System Credentials (CAPEC-653)?\nA.  None. This attack happens offline.\nB.  Authentication attempts use credentials that have been used previously by the account in question.\nC.  Messages from a legitimate user appear to contain suspicious links or communications not consistent with the user's normal behavior.\nD.  Software being run on a system matches a file signature found in a malware database\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect Insufficient Verification of Data Authenticity (CWE-345)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections)\nD.  To find the issue in the implementation, manual checks or automated static analysis could be applied to the XML configuration files.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Insufficient Verification of Data Authenticity (CWE-345)",
      "ddmc_optionA": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionB": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionC": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections)",
      "ddmc_optionD": "To find the issue in the implementation, manual checks or automated static analysis could be applied to the XML configuration files.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "How can you detect Insufficient Verification of Data Authenticity (CWE-345)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections)\nD.  To find the issue in the implementation, manual checks or automated static analysis could be applied to the XML configuration files.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Install Malicious Extension (CAPEC-698)?\nA.  The use of HMAC to hash the response from the server can also be used to thwart reflection. The server responds by returning its own challenge as well as hashing the client's challenge, its own challenge and the pre-shared secret. Requiring the client to respond with the HMAC of the two challenges ensures that only the possessor of a valid pre-shared secret can successfully hash in the two values.\nB.  Leverage antivirus tools to detect known malware\nC.  Firewalls or ACLs which block egress ICMP error types effectively prevent UDP scans from returning any useful information.\nD.  For web browsers, close sessions when finished to prevent malicious extensions/plugins from executing the the background.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Install Malicious Extension (CAPEC-698)",
      "ddmc_optionA": "The use of HMAC to hash the response from the server can also be used to thwart reflection. The server responds by returning its own challenge as well as hashing the client's challenge, its own challenge and the pre-shared secret. Requiring the client to respond with the HMAC of the two challenges ensures that only the possessor of a valid pre-shared secret can successfully hash in the two values.",
      "ddmc_optionB": "Leverage antivirus tools to detect known malware",
      "ddmc_optionC": "Firewalls or ACLs which block egress ICMP error types effectively prevent UDP scans from returning any useful information.",
      "ddmc_optionD": "For web browsers, close sessions when finished to prevent malicious extensions/plugins from executing the the background.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "For web browsers, close sessions when finished to prevent malicious extensions/plugins from executing the the background.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Install Malicious Extension (CAPEC-698)?\nA.  The use of HMAC to hash the response from the server can also be used to thwart reflection. The server responds by returning its own challenge as well as hashing the client's challenge, its own challenge and the pre-shared secret. Requiring the client to respond with the HMAC of the two challenges ensures that only the possessor of a valid pre-shared secret can successfully hash in the two values.\nB.  Leverage antivirus tools to detect known malware\nC.  Firewalls or ACLs which block egress ICMP error types effectively prevent UDP scans from returning any useful information.\nD.  For web browsers, close sessions when finished to prevent malicious extensions/plugins from executing the the background.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate CAPEC-568 (Capture Credentials via Keylogger)?\nA.  An organization should provide regular, robust cybersecurity training to its employees to prevent successful social engineering attacks.\nB.  Ensure to keep up to date with security relevant updates to the persistence framework used within your application.\nC.  Strong physical security can help reduce the ability of an adversary to install a keylogger.\nD.  Design: Enforce principle of least privilege\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CAPEC-568 (Capture Credentials via Keylogger)",
      "ddmc_optionA": "An organization should provide regular, robust cybersecurity training to its employees to prevent successful social engineering attacks.",
      "ddmc_optionB": "Ensure to keep up to date with security relevant updates to the persistence framework used within your application.",
      "ddmc_optionC": "Strong physical security can help reduce the ability of an adversary to install a keylogger.",
      "ddmc_optionD": "Design: Enforce principle of least privilege",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Strong physical security can help reduce the ability of an adversary to install a keylogger.",
      "prompts": [],
      "instruction": "How can you mitigate CAPEC-568 (Capture Credentials via Keylogger)?\nA.  An organization should provide regular, robust cybersecurity training to its employees to prevent successful social engineering attacks.\nB.  Ensure to keep up to date with security relevant updates to the persistence framework used within your application.\nC.  Strong physical security can help reduce the ability of an adversary to install a keylogger.\nD.  Design: Enforce principle of least privilege\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Pass the Hash (T1550.002)?\nA.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nB.  Restoring a file for an entity to access.\nC.  Employing a pattern matching algorithm to statically analyze the content of files.\nD.  Analyzing the resources accessed by a user to identify unauthorized activity.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Pass the Hash (T1550.002)",
      "ddmc_optionA": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmc_optionB": "Restoring a file for an entity to access.",
      "ddmc_optionC": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_optionD": "Analyzing the resources accessed by a user to identify unauthorized activity.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Analyzing the resources accessed by a user to identify unauthorized activity.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Pass the Hash (T1550.002)?\nA.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nB.  Restoring a file for an entity to access.\nC.  Employing a pattern matching algorithm to statically analyze the content of files.\nD.  Analyzing the resources accessed by a user to identify unauthorized activity.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Email Accounts (T1586.002)?\nA.  Use remote security log and sensitive file storage where access can be controlled better to prevent exposure of intrusion detection log data or sensitive information.\nB.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nC.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nD.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Email Accounts (T1586.002)",
      "ddmc_optionA": "Use remote security log and sensitive file storage where access can be controlled better to prevent exposure of intrusion detection log data or sensitive information.",
      "ddmc_optionB": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmc_optionC": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_optionD": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "prompts": [],
      "instruction": "How can you mitigate Email Accounts (T1586.002)?\nA.  Use remote security log and sensitive file storage where access can be controlled better to prevent exposure of intrusion detection log data or sensitive information.\nB.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nC.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nD.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Hidden Window (T1564.003)?\nA.  Block execution of code on a system through application control, and/or script blocking.\nB.  Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.\nC.  Block users or groups from installing unapproved software.\nD.  A threat intelligence program helps an organization generate their own threat intelligence information and track trends to inform defensive priorities to mitigate risk.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Hidden Window (T1564.003)",
      "ddmc_optionA": "Block execution of code on a system through application control, and/or script blocking.",
      "ddmc_optionB": "Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.",
      "ddmc_optionC": "Block users or groups from installing unapproved software.",
      "ddmc_optionD": "A threat intelligence program helps an organization generate their own threat intelligence information and track trends to inform defensive priorities to mitigate risk.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Block users or groups from installing unapproved software.",
      "prompts": [],
      "instruction": "What is a method to mitigate Hidden Window (T1564.003)?\nA.  Block execution of code on a system through application control, and/or script blocking.\nB.  Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.\nC.  Block users or groups from installing unapproved software.\nD.  A threat intelligence program helps an organization generate their own threat intelligence information and track trends to inform defensive priorities to mitigate risk.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate CWE-166 (Improper Handling of Missing Special Element)?\nA.  The Boehm-Demers-Weiser Garbage Collector or valgrind can be used to detect leaks in code.\nB.  For each and every data access, ensure that the user has sufficient privilege to access the record that is being requested.\nC.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nD.  Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CWE-166 (Improper Handling of Missing Special Element)",
      "ddmc_optionA": "The Boehm-Demers-Weiser Garbage Collector or valgrind can be used to detect leaks in code.",
      "ddmc_optionB": "For each and every data access, ensure that the user has sufficient privilege to access the record that is being requested.",
      "ddmc_optionC": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmc_optionD": "Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate CWE-166 (Improper Handling of Missing Special Element)?\nA.  The Boehm-Demers-Weiser Garbage Collector or valgrind can be used to detect leaks in code.\nB.  For each and every data access, ensure that the user has sufficient privilege to access the record that is being requested.\nC.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nD.  Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Clear Linux or Mac System Logs (T1070.002)?\nA.  Employing a pattern matching algorithm to statically analyze the content of files.\nB.  Limiting the transmission of a credential to a scoped set of relying parties.\nC.  Configuring a kernel to use an allow or deny list to filter kernel api calls.\nD.  Detecting any suspicious changes to files in a computer system.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Clear Linux or Mac System Logs (T1070.002)",
      "ddmc_optionA": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_optionB": "Limiting the transmission of a credential to a scoped set of relying parties.",
      "ddmc_optionC": "Configuring a kernel to use an allow or deny list to filter kernel api calls.",
      "ddmc_optionD": "Detecting any suspicious changes to files in a computer system.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Clear Linux or Mac System Logs (T1070.002)?\nA.  Employing a pattern matching algorithm to statically analyze the content of files.\nB.  Limiting the transmission of a credential to a scoped set of relying parties.\nC.  Configuring a kernel to use an allow or deny list to filter kernel api calls.\nD.  Detecting any suspicious changes to files in a computer system.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Leveraging Active Adversary in the Middle Attacks to Bypass Same Origin Policy (CAPEC-466)?\nA.  Have a security concept of operations (CONOPS) for the development environment that includes: Maintaining strict security administration and configuration management of requirements management and database tools, software design tools, configuration management tools, compilers, system build tools, and software performance testing and load testing tools.\nB.  This attack may be mitigated by tweaking the XML parser to not resolve external entities. If external entities are needed, then implement a custom XmlResolver that has a request timeout, data retrieval limit, and restrict resources it can retrieve locally.\nC.  Do not code send session ID with GET method, otherwise the session ID will be copied to the URL. In general avoid writing session IDs in the URLs. URLs can get logged in log files, which are vulnerable to an attacker.\nD.  Design: Trust level separation for privileged / non privileged interactions (e.g., two different browsers, two different users, two different operating systems, two different virtual machines)\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Leveraging Active Adversary in the Middle Attacks to Bypass Same Origin Policy (CAPEC-466)",
      "ddmc_optionA": "Have a security concept of operations (CONOPS) for the development environment that includes: Maintaining strict security administration and configuration management of requirements management and database tools, software design tools, configuration management tools, compilers, system build tools, and software performance testing and load testing tools.",
      "ddmc_optionB": "This attack may be mitigated by tweaking the XML parser to not resolve external entities. If external entities are needed, then implement a custom XmlResolver that has a request timeout, data retrieval limit, and restrict resources it can retrieve locally.",
      "ddmc_optionC": "Do not code send session ID with GET method, otherwise the session ID will be copied to the URL. In general avoid writing session IDs in the URLs. URLs can get logged in log files, which are vulnerable to an attacker.",
      "ddmc_optionD": "Design: Trust level separation for privileged / non privileged interactions (e.g., two different browsers, two different users, two different operating systems, two different virtual machines)",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Design: Trust level separation for privileged / non privileged interactions (e.g., two different browsers, two different users, two different operating systems, two different virtual machines)",
      "prompts": [],
      "instruction": "What is a method to mitigate Leveraging Active Adversary in the Middle Attacks to Bypass Same Origin Policy (CAPEC-466)?\nA.  Have a security concept of operations (CONOPS) for the development environment that includes: Maintaining strict security administration and configuration management of requirements management and database tools, software design tools, configuration management tools, compilers, system build tools, and software performance testing and load testing tools.\nB.  This attack may be mitigated by tweaking the XML parser to not resolve external entities. If external entities are needed, then implement a custom XmlResolver that has a request timeout, data retrieval limit, and restrict resources it can retrieve locally.\nC.  Do not code send session ID with GET method, otherwise the session ID will be copied to the URL. In general avoid writing session IDs in the URLs. URLs can get logged in log files, which are vulnerable to an attacker.\nD.  Design: Trust level separation for privileged / non privileged interactions (e.g., two different browsers, two different users, two different operating systems, two different virtual machines)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect Insertion of Sensitive Information into Log File (CWE-532)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Inter-application Flow Analysis Binary / Bytecode simple extractor - strings, ELF readers, etc.\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Insertion of Sensitive Information into Log File (CWE-532)",
      "ddmc_optionA": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionB": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionC": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Inter-application Flow Analysis Binary / Bytecode simple extractor - strings, ELF readers, etc.",
      "ddmc_optionD": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "How can you detect Insertion of Sensitive Information into Log File (CWE-532)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Inter-application Flow Analysis Binary / Bytecode simple extractor - strings, ELF readers, etc.\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Disable Windows Event Logging (T1562.002)?\nA.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nB.  Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.\nC.  Requiring proof of two or more pieces of evidence in order to authenticate a user.\nD.  Modifying an application's configuration to reduce its attack surface.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Disable Windows Event Logging (T1562.002)",
      "ddmc_optionA": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_optionB": "Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.",
      "ddmc_optionC": "Requiring proof of two or more pieces of evidence in order to authenticate a user.",
      "ddmc_optionD": "Modifying an application's configuration to reduce its attack surface.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Modifying an application's configuration to reduce its attack surface.",
      "prompts": [],
      "instruction": "How can you mitigate Disable Windows Event Logging (T1562.002)?\nA.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nB.  Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.\nC.  Requiring proof of two or more pieces of evidence in order to authenticate a user.\nD.  Modifying an application's configuration to reduce its attack surface.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1566.003 (Spearphishing via Service)?\nA.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\nB.  A file created for the purposes of deceiving an adversary.\nC.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nD.  Comparing strings using a variety of techniques to determine if a deceptive or malicious string is being presented to a user.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1566.003 (Spearphishing via Service)",
      "ddmc_optionA": "Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.",
      "ddmc_optionB": "A file created for the purposes of deceiving an adversary.",
      "ddmc_optionC": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmc_optionD": "Comparing strings using a variety of techniques to determine if a deceptive or malicious string is being presented to a user.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Comparing strings using a variety of techniques to determine if a deceptive or malicious string is being presented to a user.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1566.003 (Spearphishing via Service)?\nA.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\nB.  A file created for the purposes of deceiving an adversary.\nC.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nD.  Comparing strings using a variety of techniques to determine if a deceptive or malicious string is being presented to a user.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Improper Control of Resource Identifiers ('Resource Injection') (CWE-99)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Use monitoring tools that examine the software's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the software was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic. Attach the monitor to the process and perform a login. Look for library functions and system calls that indicate when privileges are being raised or dropped. Look for accesses of resources that are restricted to normal users.\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Improper Control of Resource Identifiers ('Resource Injection') (CWE-99)",
      "ddmc_optionA": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionB": "Use monitoring tools that examine the software's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the software was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic. Attach the monitor to the process and perform a login. Look for library functions and system calls that indicate when privileges are being raised or dropped. Look for accesses of resources that are restricted to normal users.",
      "ddmc_optionC": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionD": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "What is a method to detect Improper Control of Resource Identifiers ('Resource Injection') (CWE-99)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Use monitoring tools that examine the software's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the software was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic. Attach the monitor to the process and perform a login. Look for library functions and system calls that indicate when privileges are being raised or dropped. Look for accesses of resources that are restricted to normal users.\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Audio Capture (T1123)?\nA.  Detection of this technique may be difficult due to the various APIs that may be used. Telemetry data regarding API use may not be useful depending on how a system is normally used, but may provide context to other potentially malicious activity occurring on a system. Behavior that could indicate technique use include an unknown or unusual process accessing APIs associated with devices or software that interact with the microphone, recording devices, or recording software, and a process periodically writing files to disk that contain audio data.\nB.  Monitor for unexpected Docker image build requests to the Docker daemon on hosts in the environment. Additionally monitor for subsequent network communication with anomalous IPs that have never been seen before in the environment that indicate the download of malicious code.\nC.  Because most common third-party services used for spearphishing via service leverage TLS encryption, SSL/TLS inspection is generally required to detect the initial communication/delivery. With SSL/TLS inspection intrusion detection signatures or other security gateway appliances may be able to detect malware. Anti-virus can potentially detect malicious documents and files that are downloaded on the user's computer. Endpoint sensing or network sensing can potentially detect malicious events once the file is opened (such as a Microsoft Word document or PDF reaching out to the internet or spawning Powershell.exe) for techniques such as Exploitation for Client Execution or usage of malicious scripts.\nD.  Once adversaries leverage the web service as infrastructure (ex: for command and control), it may be possible to look for unique characteristics associated with adversary software, if known. Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Command and Control (Web Service) or Exfiltration Over Web Service.(Citations: ThreatConnect Infrastructure Dec 2020)\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Audio Capture (T1123)",
      "ddmc_optionA": "Detection of this technique may be difficult due to the various APIs that may be used. Telemetry data regarding API use may not be useful depending on how a system is normally used, but may provide context to other potentially malicious activity occurring on a system. Behavior that could indicate technique use include an unknown or unusual process accessing APIs associated with devices or software that interact with the microphone, recording devices, or recording software, and a process periodically writing files to disk that contain audio data.",
      "ddmc_optionB": "Monitor for unexpected Docker image build requests to the Docker daemon on hosts in the environment. Additionally monitor for subsequent network communication with anomalous IPs that have never been seen before in the environment that indicate the download of malicious code.",
      "ddmc_optionC": "Because most common third-party services used for spearphishing via service leverage TLS encryption, SSL/TLS inspection is generally required to detect the initial communication/delivery. With SSL/TLS inspection intrusion detection signatures or other security gateway appliances may be able to detect malware. Anti-virus can potentially detect malicious documents and files that are downloaded on the user's computer. Endpoint sensing or network sensing can potentially detect malicious events once the file is opened (such as a Microsoft Word document or PDF reaching out to the internet or spawning Powershell.exe) for techniques such as Exploitation for Client Execution or usage of malicious scripts.",
      "ddmc_optionD": "Once adversaries leverage the web service as infrastructure (ex: for command and control), it may be possible to look for unique characteristics associated with adversary software, if known. Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Command and Control (Web Service) or Exfiltration Over Web Service.(Citations: ThreatConnect Infrastructure Dec 2020)",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Detection of this technique may be difficult due to the various APIs that may be used. Telemetry data regarding API use may not be useful depending on how a system is normally used, but may provide context to other potentially malicious activity occurring on a system. Behavior that could indicate technique use include an unknown or unusual process accessing APIs associated with devices or software that interact with the microphone, recording devices, or recording software, and a process periodically writing files to disk that contain audio data.",
      "prompts": [],
      "instruction": "What is a method to detect Audio Capture (T1123)?\nA.  Detection of this technique may be difficult due to the various APIs that may be used. Telemetry data regarding API use may not be useful depending on how a system is normally used, but may provide context to other potentially malicious activity occurring on a system. Behavior that could indicate technique use include an unknown or unusual process accessing APIs associated with devices or software that interact with the microphone, recording devices, or recording software, and a process periodically writing files to disk that contain audio data.\nB.  Monitor for unexpected Docker image build requests to the Docker daemon on hosts in the environment. Additionally monitor for subsequent network communication with anomalous IPs that have never been seen before in the environment that indicate the download of malicious code.\nC.  Because most common third-party services used for spearphishing via service leverage TLS encryption, SSL/TLS inspection is generally required to detect the initial communication/delivery. With SSL/TLS inspection intrusion detection signatures or other security gateway appliances may be able to detect malware. Anti-virus can potentially detect malicious documents and files that are downloaded on the user's computer. Endpoint sensing or network sensing can potentially detect malicious events once the file is opened (such as a Microsoft Word document or PDF reaching out to the internet or spawning Powershell.exe) for techniques such as Exploitation for Client Execution or usage of malicious scripts.\nD.  Once adversaries leverage the web service as infrastructure (ex: for command and control), it may be possible to look for unique characteristics associated with adversary software, if known. Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Command and Control (Web Service) or Exfiltration Over Web Service.(Citations: ThreatConnect Infrastructure Dec 2020)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Improper Protection of Physical Side Channels (CWE-1300)?\nA.  Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations (\"stretching\") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use. Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead. Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.\nB.  Define all possible states and handle all unused states through default statements. Ensure that system defaults to a secure state.\nC.  Apply blinding or masking techniques to implementations of cryptographic algorithms.\nD.  Implement the necessary functionality to allow each component to be updated.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Protection of Physical Side Channels (CWE-1300)",
      "ddmc_optionA": "Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations (\"stretching\") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use. Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead. Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.",
      "ddmc_optionB": "Define all possible states and handle all unused states through default statements. Ensure that system defaults to a secure state.",
      "ddmc_optionC": "Apply blinding or masking techniques to implementations of cryptographic algorithms.",
      "ddmc_optionD": "Implement the necessary functionality to allow each component to be updated.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Apply blinding or masking techniques to implementations of cryptographic algorithms.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Improper Protection of Physical Side Channels (CWE-1300)?\nA.  Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations (\"stretching\") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use. Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead. Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.\nB.  Define all possible states and handle all unused states through default statements. Ensure that system defaults to a secure state.\nC.  Apply blinding or masking techniques to implementations of cryptographic algorithms.\nD.  Implement the necessary functionality to allow each component to be updated.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Serializable Data Element Containing non-Serializable Item Elements (CWE-1070)?\nA.  Consider using language-theoretic security (LangSec) techniques that characterize inputs using a formal language and build \"recognizers\" for that language. This effectively requires parsing to be a distinct layer that effectively enforces a boundary between raw input and internal data representations, instead of allowing parser code to be scattered throughout the program, where it could be subject to errors or inconsistencies that create weaknesses. [REF-1109] [REF-1110] [REF-1111]\nB.  Use an input validation framework such as Struts.\nC.  Understand your programming language's underlying representation and how it interacts with numeric calculation. Pay close attention to byte size discrepancies, precision, signed/unsigned distinctions, truncation, conversion and casting between types, \"not-a-number\" calculations, and how your language handles numbers that are too large or too small for its underlying representation.\nD.  Run the code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software. OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations. This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise. Be careful to avoid CWE-243 and other weaknesses related to jails.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Serializable Data Element Containing non-Serializable Item Elements (CWE-1070)",
      "ddmc_optionA": "Consider using language-theoretic security (LangSec) techniques that characterize inputs using a formal language and build \"recognizers\" for that language. This effectively requires parsing to be a distinct layer that effectively enforces a boundary between raw input and internal data representations, instead of allowing parser code to be scattered throughout the program, where it could be subject to errors or inconsistencies that create weaknesses. [REF-1109] [REF-1110] [REF-1111]",
      "ddmc_optionB": "Use an input validation framework such as Struts.",
      "ddmc_optionC": "Understand your programming language's underlying representation and how it interacts with numeric calculation. Pay close attention to byte size discrepancies, precision, signed/unsigned distinctions, truncation, conversion and casting between types, \"not-a-number\" calculations, and how your language handles numbers that are too large or too small for its underlying representation.",
      "ddmc_optionD": "Run the code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software. OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations. This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise. Be careful to avoid CWE-243 and other weaknesses related to jails.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Use an input validation framework such as Struts.",
      "prompts": [],
      "instruction": "What is a method to mitigate Serializable Data Element Containing non-Serializable Item Elements (CWE-1070)?\nA.  Consider using language-theoretic security (LangSec) techniques that characterize inputs using a formal language and build \"recognizers\" for that language. This effectively requires parsing to be a distinct layer that effectively enforces a boundary between raw input and internal data representations, instead of allowing parser code to be scattered throughout the program, where it could be subject to errors or inconsistencies that create weaknesses. [REF-1109] [REF-1110] [REF-1111]\nB.  Use an input validation framework such as Struts.\nC.  Understand your programming language's underlying representation and how it interacts with numeric calculation. Pay close attention to byte size discrepancies, precision, signed/unsigned distinctions, truncation, conversion and casting between types, \"not-a-number\" calculations, and how your language handles numbers that are too large or too small for its underlying representation.\nD.  Run the code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software. OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations. This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise. Be careful to avoid CWE-243 and other weaknesses related to jails.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Improper Neutralization of Leading Special Elements (CWE-160)?\nA.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nB.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nC.  Recommendations include restricting access to important directories or files by adopting a need to know requirement for both the document and server root, and turning off features such as Automatic Directory Listings that could expose private files and provide information that could be utilized by an attacker when formulating or conducting an attack.\nD.  Avoid using wildcards in the cross-domain policy file. Any domain matching the wildcard expression will be implicitly trusted, and can perform two-way interaction with the target server.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Neutralization of Leading Special Elements (CWE-160)",
      "ddmc_optionA": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmc_optionB": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmc_optionC": "Recommendations include restricting access to important directories or files by adopting a need to know requirement for both the document and server root, and turning off features such as Automatic Directory Listings that could expose private files and provide information that could be utilized by an attacker when formulating or conducting an attack.",
      "ddmc_optionD": "Avoid using wildcards in the cross-domain policy file. Any domain matching the wildcard expression will be implicitly trusted, and can perform two-way interaction with the target server.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "prompts": [],
      "instruction": "How can you mitigate Improper Neutralization of Leading Special Elements (CWE-160)?\nA.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nB.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nC.  Recommendations include restricting access to important directories or files by adopting a need to know requirement for both the document and server root, and turning off features such as Automatic Directory Listings that could expose private files and provide information that could be utilized by an attacker when formulating or conducting an attack.\nD.  Avoid using wildcards in the cross-domain policy file. Any domain matching the wildcard expression will be implicitly trusted, and can perform two-way interaction with the target server.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Exfiltration Over Alternative Protocol (T1048)?\nA.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\nB.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\nC.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nD.  Restoring an software configuration.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Exfiltration Over Alternative Protocol (T1048)",
      "ddmc_optionA": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "ddmc_optionB": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "ddmc_optionC": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_optionD": "Restoring an software configuration.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "prompts": [],
      "instruction": "What is a method to mitigate Exfiltration Over Alternative Protocol (T1048)?\nA.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\nB.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\nC.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nD.  Restoring an software configuration.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Non-Standard Port (T1571)?\nA.  Employing a pattern matching rule language to analyze the content of files.\nB.  Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.\nC.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\nD.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Non-Standard Port (T1571)",
      "ddmc_optionA": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_optionB": "Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.",
      "ddmc_optionC": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "ddmc_optionD": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Non-Standard Port (T1571)?\nA.  Employing a pattern matching rule language to analyze the content of files.\nB.  Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.\nC.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\nD.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate T1090.001 (Internal Proxy)?\nA.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nB.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nC.  Detecting any suspicious changes to files in a computer system.\nD.  A one-time password is valid for only one user authentication.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1090.001 (Internal Proxy)",
      "ddmc_optionA": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_optionB": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmc_optionC": "Detecting any suspicious changes to files in a computer system.",
      "ddmc_optionD": "A one-time password is valid for only one user authentication.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate T1090.001 (Internal Proxy)?\nA.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nB.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nC.  Detecting any suspicious changes to files in a computer system.\nD.  A one-time password is valid for only one user authentication.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Insufficiently Protected Credentials (CWE-522)?\nA.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nB.  Perform data validation (e.g. syntax, length, etc.) before interpreting the data.\nC.  Run or compile the software using features or extensions that automatically provide a protection mechanism that mitigates or eliminates buffer overflows. For example, certain compilers and extensions provide automatic buffer overflow detection mechanisms that are built into the compiled code. Examples include the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice.\nD.  Clearly identify the scope for all critical data elements, including whether they should be regarded as static.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Insufficiently Protected Credentials (CWE-522)",
      "ddmc_optionA": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmc_optionB": "Perform data validation (e.g. syntax, length, etc.) before interpreting the data.",
      "ddmc_optionC": "Run or compile the software using features or extensions that automatically provide a protection mechanism that mitigates or eliminates buffer overflows. For example, certain compilers and extensions provide automatic buffer overflow detection mechanisms that are built into the compiled code. Examples include the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice.",
      "ddmc_optionD": "Clearly identify the scope for all critical data elements, including whether they should be regarded as static.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Clearly identify the scope for all critical data elements, including whether they should be regarded as static.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Insufficiently Protected Credentials (CWE-522)?\nA.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nB.  Perform data validation (e.g. syntax, length, etc.) before interpreting the data.\nC.  Run or compile the software using features or extensions that automatically provide a protection mechanism that mitigates or eliminates buffer overflows. For example, certain compilers and extensions provide automatic buffer overflow detection mechanisms that are built into the compiled code. Examples include the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice.\nD.  Clearly identify the scope for all critical data elements, including whether they should be regarded as static.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Firmware Not Updateable (CWE-1277)?\nA.  Consider a PRNG that re-seeds itself as needed from high quality pseudo-random output sources, such as hardware devices.\nB.  Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.\nC.  Use a static analysis tool to spot dead code.\nD.  Specify requirements to include the ability to update the firmware. Include integrity checks and authentication to ensure that untrusted firmware cannot be installed.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Firmware Not Updateable (CWE-1277)",
      "ddmc_optionA": "Consider a PRNG that re-seeds itself as needed from high quality pseudo-random output sources, such as hardware devices.",
      "ddmc_optionB": "Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.",
      "ddmc_optionC": "Use a static analysis tool to spot dead code.",
      "ddmc_optionD": "Specify requirements to include the ability to update the firmware. Include integrity checks and authentication to ensure that untrusted firmware cannot be installed.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Specify requirements to include the ability to update the firmware. Include integrity checks and authentication to ensure that untrusted firmware cannot be installed.",
      "prompts": [],
      "instruction": "How can you mitigate Firmware Not Updateable (CWE-1277)?\nA.  Consider a PRNG that re-seeds itself as needed from high quality pseudo-random output sources, such as hardware devices.\nB.  Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.\nC.  Use a static analysis tool to spot dead code.\nD.  Specify requirements to include the ability to update the firmware. Include integrity checks and authentication to ensure that untrusted firmware cannot be installed.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect CWE-535 (Exposure of Information Through Shell Error Message)?\nA.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer Cost effective for partial coverage: Warning Flags\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  Use the XSS Cheat Sheet [REF-714] or automated test-generation tools to help launch a wide variety of attacks against your web application. The Cheat Sheet contains many subtle XSS variations that are specifically targeted against weak XSS defenses.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "CWE-535 (Exposure of Information Through Shell Error Message)",
      "ddmc_optionA": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer Cost effective for partial coverage: Warning Flags",
      "ddmc_optionB": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionC": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionD": "Use the XSS Cheat Sheet [REF-714] or automated test-generation tools to help launch a wide variety of attacks against your web application. The Cheat Sheet contains many subtle XSS variations that are specifically targeted against weak XSS defenses.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect CWE-535 (Exposure of Information Through Shell Error Message)?\nA.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer Cost effective for partial coverage: Warning Flags\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  Use the XSS Cheat Sheet [REF-714] or automated test-generation tools to help launch a wide variety of attacks against your web application. The Cheat Sheet contains many subtle XSS variations that are specifically targeted against weak XSS defenses.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate File and Directory Permissions Modification (T1222)?\nA.  Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.\nB.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nC.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nD.  The file removal technique deletes malicious artifacts or programs from a computer system.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "File and Directory Permissions Modification (T1222)",
      "ddmc_optionA": "Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.",
      "ddmc_optionB": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_optionC": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_optionD": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "prompts": [],
      "instruction": "What is a method to mitigate File and Directory Permissions Modification (T1222)?\nA.  Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.\nB.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nC.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nD.  The file removal technique deletes malicious artifacts or programs from a computer system.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Altered Installed BIOS (CAPEC-532)?\nA.  Use endpoint detection and response solutions that can automaticalkly detect and remediate suspicious activities.\nB.  Design: Input validation. Assume that user inputs are malicious. Utilize strict type, character, and encoding enforcement.\nC.  Implementation: Perform output validation for all remote content.\nD.  Implementation: Appropriately deal with error messages.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Altered Installed BIOS (CAPEC-532)",
      "ddmc_optionA": "Use endpoint detection and response solutions that can automaticalkly detect and remediate suspicious activities.",
      "ddmc_optionB": "Design: Input validation. Assume that user inputs are malicious. Utilize strict type, character, and encoding enforcement.",
      "ddmc_optionC": "Implementation: Perform output validation for all remote content.",
      "ddmc_optionD": "Implementation: Appropriately deal with error messages.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Use endpoint detection and response solutions that can automaticalkly detect and remediate suspicious activities.",
      "prompts": [],
      "instruction": "How can you mitigate Altered Installed BIOS (CAPEC-532)?\nA.  Use endpoint detection and response solutions that can automaticalkly detect and remediate suspicious activities.\nB.  Design: Input validation. Assume that user inputs are malicious. Utilize strict type, character, and encoding enforcement.\nC.  Implementation: Perform output validation for all remote content.\nD.  Implementation: Appropriately deal with error messages.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Non-Application Layer Protocol (T1095)?\nA.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\nB.  Analyzing Public Key Infrastructure certificates to detect if they have been misconfigured or spoofed using both network traffic, certificate fields and third-party logs.\nC.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nD.  Restoring an object for an entity to access. This is the broadest class for object restoral.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Non-Application Layer Protocol (T1095)",
      "ddmc_optionA": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "ddmc_optionB": "Analyzing Public Key Infrastructure certificates to detect if they have been misconfigured or spoofed using both network traffic, certificate fields and third-party logs.",
      "ddmc_optionC": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_optionD": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Non-Application Layer Protocol (T1095)?\nA.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\nB.  Analyzing Public Key Infrastructure certificates to detect if they have been misconfigured or spoofed using both network traffic, certificate fields and third-party logs.\nC.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nD.  Restoring an object for an entity to access. This is the broadest class for object restoral.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate MSBuild (T1127.001)?\nA.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\nB.  Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.\nC.  Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.\nD.  Protect sensitive information with strong encryption.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "MSBuild (T1127.001)",
      "ddmc_optionA": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
      "ddmc_optionB": "Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.",
      "ddmc_optionC": "Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.",
      "ddmc_optionD": "Protect sensitive information with strong encryption.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
      "prompts": [],
      "instruction": "How can you mitigate MSBuild (T1127.001)?\nA.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\nB.  Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.\nC.  Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.\nD.  Protect sensitive information with strong encryption.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Altered Installed BIOS (CAPEC-532)?\nA.  Firewalls or ACLs which block egress ICMP error types effectively prevent UDP scans from returning any useful information.\nB.  Implementation: Implement communications to and from the registry using secure protocols\nC.  Maintain a highly secure build and update infrastructure by immediately applying security patches for OS and software, implementing mandatory integrity controls to ensure only trusted tools run, and requiring multi-factor authentication for admins.\nD.  Ensure all remote methods are secured\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Altered Installed BIOS (CAPEC-532)",
      "ddmc_optionA": "Firewalls or ACLs which block egress ICMP error types effectively prevent UDP scans from returning any useful information.",
      "ddmc_optionB": "Implementation: Implement communications to and from the registry using secure protocols",
      "ddmc_optionC": "Maintain a highly secure build and update infrastructure by immediately applying security patches for OS and software, implementing mandatory integrity controls to ensure only trusted tools run, and requiring multi-factor authentication for admins.",
      "ddmc_optionD": "Ensure all remote methods are secured",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Maintain a highly secure build and update infrastructure by immediately applying security patches for OS and software, implementing mandatory integrity controls to ensure only trusted tools run, and requiring multi-factor authentication for admins.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Altered Installed BIOS (CAPEC-532)?\nA.  Firewalls or ACLs which block egress ICMP error types effectively prevent UDP scans from returning any useful information.\nB.  Implementation: Implement communications to and from the registry using secure protocols\nC.  Maintain a highly secure build and update infrastructure by immediately applying security patches for OS and software, implementing mandatory integrity controls to ensure only trusted tools run, and requiring multi-factor authentication for admins.\nD.  Ensure all remote methods are secured\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate External Proxy (T1090.002)?\nA.  Manage the creation, modification, use, and permissions associated to user accounts.\nB.  Use intrusion detection signatures to block traffic at network boundaries.\nC.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nD.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "External Proxy (T1090.002)",
      "ddmc_optionA": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmc_optionB": "Use intrusion detection signatures to block traffic at network boundaries.",
      "ddmc_optionC": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
      "ddmc_optionD": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Use intrusion detection signatures to block traffic at network boundaries.",
      "prompts": [],
      "instruction": "What is a method to mitigate External Proxy (T1090.002)?\nA.  Manage the creation, modification, use, and permissions associated to user accounts.\nB.  Use intrusion detection signatures to block traffic at network boundaries.\nC.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nD.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate File and Directory Permissions Modification (T1222)?\nA.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nB.  Access modeling identifies and records the access permissions granted to administrators, users, groups, and systems.\nC.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nD.  The file removal technique deletes malicious artifacts or programs from a computer system.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "File and Directory Permissions Modification (T1222)",
      "ddmc_optionA": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmc_optionB": "Access modeling identifies and records the access permissions granted to administrators, users, groups, and systems.",
      "ddmc_optionC": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_optionD": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Access modeling identifies and records the access permissions granted to administrators, users, groups, and systems.",
      "prompts": [],
      "instruction": "What is a method to mitigate File and Directory Permissions Modification (T1222)?\nA.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nB.  Access modeling identifies and records the access permissions granted to administrators, users, groups, and systems.\nC.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nD.  The file removal technique deletes malicious artifacts or programs from a computer system.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Launch Daemon (T1543.004)?\nA.  Manage the creation, modification, use, and permissions associated to user accounts.\nB.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nC.  Restrict execution of code to a virtual environment on or in transit to an endpoint system.\nD.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Launch Daemon (T1543.004)",
      "ddmc_optionA": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmc_optionB": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
      "ddmc_optionC": "Restrict execution of code to a virtual environment on or in transit to an endpoint system.",
      "ddmc_optionD": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "prompts": [],
      "instruction": "How can you mitigate Launch Daemon (T1543.004)?\nA.  Manage the creation, modification, use, and permissions associated to user accounts.\nB.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nC.  Restrict execution of code to a virtual environment on or in transit to an endpoint system.\nD.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Screensaver (T1546.002)?\nA.  Manage the creation, modification, use, and permissions associated to user accounts.\nB.  Block execution of code on a system through application control, and/or script blocking.\nC.  Block execution of code on a system through application control, and/or script blocking.\nD.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Screensaver (T1546.002)",
      "ddmc_optionA": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmc_optionB": "Block execution of code on a system through application control, and/or script blocking.",
      "ddmc_optionC": "Block execution of code on a system through application control, and/or script blocking.",
      "ddmc_optionD": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Block execution of code on a system through application control, and/or script blocking.",
      "prompts": [],
      "instruction": "How can you mitigate Screensaver (T1546.002)?\nA.  Manage the creation, modification, use, and permissions associated to user accounts.\nB.  Block execution of code on a system through application control, and/or script blocking.\nC.  Block execution of code on a system through application control, and/or script blocking.\nD.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate CWE-12 (ASP.NET Misconfiguration: Missing Custom Error Page)?\nA.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nB.  Do not use standard weak security questions and use several security questions.\nC.  Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations (\"stretching\") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use. Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead. Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.\nD.  Handle exceptions appropriately in source code. ASP .NET applications should be configured to use custom error pages instead of the framework default page.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CWE-12 (ASP.NET Misconfiguration: Missing Custom Error Page)",
      "ddmc_optionA": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmc_optionB": "Do not use standard weak security questions and use several security questions.",
      "ddmc_optionC": "Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations (\"stretching\") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use. Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead. Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.",
      "ddmc_optionD": "Handle exceptions appropriately in source code. ASP .NET applications should be configured to use custom error pages instead of the framework default page.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Handle exceptions appropriately in source code. ASP .NET applications should be configured to use custom error pages instead of the framework default page.",
      "prompts": [],
      "instruction": "What is a method to mitigate CWE-12 (ASP.NET Misconfiguration: Missing Custom Error Page)?\nA.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nB.  Do not use standard weak security questions and use several security questions.\nC.  Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations (\"stretching\") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use. Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead. Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.\nD.  Handle exceptions appropriately in source code. ASP .NET applications should be configured to use custom error pages instead of the framework default page.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion') (CWE-776)?\nA.  Never trust or rely any of the information in an Event for security.\nB.  Use automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking. D3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail.\nC.  Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations (\"stretching\") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use. Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead. Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.\nD.  Access-control-policy definition and programming flow must be sufficiently tested in pre-silicon and post-silicon testing.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion') (CWE-776)",
      "ddmc_optionA": "Never trust or rely any of the information in an Event for security.",
      "ddmc_optionB": "Use automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking. D3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail.",
      "ddmc_optionC": "Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations (\"stretching\") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use. Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead. Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.",
      "ddmc_optionD": "Access-control-policy definition and programming flow must be sufficiently tested in pre-silicon and post-silicon testing.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations (\"stretching\") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use. Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead. Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.",
      "prompts": [],
      "instruction": "What is a method to mitigate Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion') (CWE-776)?\nA.  Never trust or rely any of the information in an Event for security.\nB.  Use automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking. D3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail.\nC.  Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations (\"stretching\") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use. Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead. Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.\nD.  Access-control-policy definition and programming flow must be sufficiently tested in pre-silicon and post-silicon testing.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate ASP.NET Misconfiguration: Not Using Input Validation Framework (CWE-554)?\nA.  Avoid using wildcards in the cross-domain policy file. Any domain matching the wildcard expression will be implicitly trusted, and can perform two-way interaction with the target server.\nB.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nC.  Use the ASP.NET validation framework to check all program input before it is processed by the application. Example uses of the validation framework include checking to ensure that: Phone number fields contain only valid characters in phone numbers Boolean values are only \"T\" or \"F\" Free-form strings are of a reasonable length and composition\nD.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "ASP.NET Misconfiguration: Not Using Input Validation Framework (CWE-554)",
      "ddmc_optionA": "Avoid using wildcards in the cross-domain policy file. Any domain matching the wildcard expression will be implicitly trusted, and can perform two-way interaction with the target server.",
      "ddmc_optionB": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmc_optionC": "Use the ASP.NET validation framework to check all program input before it is processed by the application. Example uses of the validation framework include checking to ensure that: Phone number fields contain only valid characters in phone numbers Boolean values are only \"T\" or \"F\" Free-form strings are of a reasonable length and composition",
      "ddmc_optionD": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Use the ASP.NET validation framework to check all program input before it is processed by the application. Example uses of the validation framework include checking to ensure that: Phone number fields contain only valid characters in phone numbers Boolean values are only \"T\" or \"F\" Free-form strings are of a reasonable length and composition",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate ASP.NET Misconfiguration: Not Using Input Validation Framework (CWE-554)?\nA.  Avoid using wildcards in the cross-domain policy file. Any domain matching the wildcard expression will be implicitly trusted, and can perform two-way interaction with the target server.\nB.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nC.  Use the ASP.NET validation framework to check all program input before it is processed by the application. Example uses of the validation framework include checking to ensure that: Phone number fields contain only valid characters in phone numbers Boolean values are only \"T\" or \"F\" Free-form strings are of a reasonable length and composition\nD.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Executable Installer File Permissions Weakness (T1574.005)?\nA.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nB.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\nC.  Analyzing a Container Image with respect to a set of policies.\nD.  The detection of an internal host relaying traffic between the internal network and the external network.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Executable Installer File Permissions Weakness (T1574.005)",
      "ddmc_optionA": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmc_optionB": "Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.",
      "ddmc_optionC": "Analyzing a Container Image with respect to a set of policies.",
      "ddmc_optionD": "The detection of an internal host relaying traffic between the internal network and the external network.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Analyzing a Container Image with respect to a set of policies.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Executable Installer File Permissions Weakness (T1574.005)?\nA.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nB.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\nC.  Analyzing a Container Image with respect to a set of policies.\nD.  The detection of an internal host relaying traffic between the internal network and the external network.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Improper Neutralization of Macro Symbols (CWE-152)?\nA.  Developers should anticipate that value delimiters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.\nB.  Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component. The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.\nC.  Use a language that provides appropriate memory abstractions.\nD.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Neutralization of Macro Symbols (CWE-152)",
      "ddmc_optionA": "Developers should anticipate that value delimiters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.",
      "ddmc_optionB": "Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component. The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.",
      "ddmc_optionC": "Use a language that provides appropriate memory abstractions.",
      "ddmc_optionD": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Improper Neutralization of Macro Symbols (CWE-152)?\nA.  Developers should anticipate that value delimiters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.\nB.  Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component. The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.\nC.  Use a language that provides appropriate memory abstractions.\nD.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Improper Validation of Integrity Check Value (CWE-354)?\nA.  Where available, configure the environment to use less verbose error messages. For example, in PHP, disable the display_errors setting during configuration, or at runtime using the error_reporting() function.\nB.  Ensure that the checksums present in messages are properly checked in accordance with the protocol specification before they are parsed and used.\nC.  Restrict server socket address to known local addresses.\nD.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Validation of Integrity Check Value (CWE-354)",
      "ddmc_optionA": "Where available, configure the environment to use less verbose error messages. For example, in PHP, disable the display_errors setting during configuration, or at runtime using the error_reporting() function.",
      "ddmc_optionB": "Ensure that the checksums present in messages are properly checked in accordance with the protocol specification before they are parsed and used.",
      "ddmc_optionC": "Restrict server socket address to known local addresses.",
      "ddmc_optionD": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Ensure that the checksums present in messages are properly checked in accordance with the protocol specification before they are parsed and used.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Improper Validation of Integrity Check Value (CWE-354)?\nA.  Where available, configure the environment to use less verbose error messages. For example, in PHP, disable the display_errors setting during configuration, or at runtime using the error_reporting() function.\nB.  Ensure that the checksums present in messages are properly checked in accordance with the protocol specification before they are parsed and used.\nC.  Restrict server socket address to known local addresses.\nD.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Login Hook (T1037.002)?\nA.  Use a data loss prevention (DLP) strategy to categorize sensitive data, identify data formats indicative of personal identifiable information (PII), and restrict exfiltration of sensitive data.(Citations: PurpleSec Data Loss Prevention)\nB.  Use capabilities to prevent successful credential access by adversaries; including blocking forms of credential dumping.\nC.  Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.\nD.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Login Hook (T1037.002)",
      "ddmc_optionA": "Use a data loss prevention (DLP) strategy to categorize sensitive data, identify data formats indicative of personal identifiable information (PII), and restrict exfiltration of sensitive data.(Citations: PurpleSec Data Loss Prevention)",
      "ddmc_optionB": "Use capabilities to prevent successful credential access by adversaries; including blocking forms of credential dumping.",
      "ddmc_optionC": "Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.",
      "ddmc_optionD": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Login Hook (T1037.002)?\nA.  Use a data loss prevention (DLP) strategy to categorize sensitive data, identify data formats indicative of personal identifiable information (PII), and restrict exfiltration of sensitive data.(Citations: PurpleSec Data Loss Prevention)\nB.  Use capabilities to prevent successful credential access by adversaries; including blocking forms of credential dumping.\nC.  Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.\nD.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Remote Email Collection (T1114.002)?\nA.  Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.\nB.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nC.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nD.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Remote Email Collection (T1114.002)",
      "ddmc_optionA": "Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.",
      "ddmc_optionB": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_optionC": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_optionD": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Remote Email Collection (T1114.002)?\nA.  Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.\nB.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nC.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nD.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate T1528 (Steal Application Access Token)?\nA.  Collecting network communication protocol metadata and identifying statistical outliers.\nB.  Analysis of any system process startup configuration.\nC.  Removing tokens or credentials from an authentication cache to prevent further user associated account accesses.\nD.  Deleting a set of credentials permanently to prevent them from being used to authenticate.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1528 (Steal Application Access Token)",
      "ddmc_optionA": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmc_optionB": "Analysis of any system process startup configuration.",
      "ddmc_optionC": "Removing tokens or credentials from an authentication cache to prevent further user associated account accesses.",
      "ddmc_optionD": "Deleting a set of credentials permanently to prevent them from being used to authenticate.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Deleting a set of credentials permanently to prevent them from being used to authenticate.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate T1528 (Steal Application Access Token)?\nA.  Collecting network communication protocol metadata and identifying statistical outliers.\nB.  Analysis of any system process startup configuration.\nC.  Removing tokens or credentials from an authentication cache to prevent further user associated account accesses.\nD.  Deleting a set of credentials permanently to prevent them from being used to authenticate.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate System Network Connections Discovery (T1049)?\nA.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nB.  Using kernel-level capabilities to isolate processes.\nC.  Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.\nD.  Analyzing Public Key Infrastructure certificates to detect if they have been misconfigured or spoofed using both network traffic, certificate fields and third-party logs.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "System Network Connections Discovery (T1049)",
      "ddmc_optionA": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionB": "Using kernel-level capabilities to isolate processes.",
      "ddmc_optionC": "Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.",
      "ddmc_optionD": "Analyzing Public Key Infrastructure certificates to detect if they have been misconfigured or spoofed using both network traffic, certificate fields and third-party logs.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.",
      "prompts": [],
      "instruction": "How can you mitigate System Network Connections Discovery (T1049)?\nA.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nB.  Using kernel-level capabilities to isolate processes.\nC.  Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.\nD.  Analyzing Public Key Infrastructure certificates to detect if they have been misconfigured or spoofed using both network traffic, certificate fields and third-party logs.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Spearphishing via Service (T1566.003)?\nA.  Blocking the execution of files on a host in accordance with defined application policy rules.\nB.  Software inventorying identifies and records the software items in the organization's architecture.\nC.  File eviction techniques evict files from system storage.\nD.  An authentication token created for the purposes of deceiving an adversary.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Spearphishing via Service (T1566.003)",
      "ddmc_optionA": "Blocking the execution of files on a host in accordance with defined application policy rules.",
      "ddmc_optionB": "Software inventorying identifies and records the software items in the organization's architecture.",
      "ddmc_optionC": "File eviction techniques evict files from system storage.",
      "ddmc_optionD": "An authentication token created for the purposes of deceiving an adversary.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "File eviction techniques evict files from system storage.",
      "prompts": [],
      "instruction": "How can you mitigate Spearphishing via Service (T1566.003)?\nA.  Blocking the execution of files on a host in accordance with defined application policy rules.\nB.  Software inventorying identifies and records the software items in the organization's architecture.\nC.  File eviction techniques evict files from system storage.\nD.  An authentication token created for the purposes of deceiving an adversary.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1568 (Dynamic Resolution)?\nA.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nB.  File eviction techniques evict files from system storage.\nC.  Suspending a running process on a computer system.\nD.  The file removal technique deletes malicious artifacts or programs from a computer system.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1568 (Dynamic Resolution)",
      "ddmc_optionA": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmc_optionB": "File eviction techniques evict files from system storage.",
      "ddmc_optionC": "Suspending a running process on a computer system.",
      "ddmc_optionD": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1568 (Dynamic Resolution)?\nA.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nB.  File eviction techniques evict files from system storage.\nC.  Suspending a running process on a computer system.\nD.  The file removal technique deletes malicious artifacts or programs from a computer system.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect T1596.004 (CDNs)?\nA.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\nB.  Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. User behavior monitoring may help to detect abnormal patterns of activity.\nC.  In some cases, malware repositories can also be used to identify features of tool use associated with an adversary, such as watermarks in Cobalt Strike payloads. Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on post-compromise phases of the adversary lifecycle.(Citations: Analyzing CS Dec 2020)\nD.  Processes that appear to be reading files from disparate locations and writing them to the same directory or file may be an indication of data being staged, especially if they are suspected of performing encryption or compression on the files, such as 7zip, RAR, ZIP, or zlib. Monitor publicly writeable directories, central locations, and commonly used staging directories (recycle bin, temp folders, etc.) to regularly check for compressed or encrypted data that may be indicative of staging. Monitor processes and command-line arguments for actions that could be taken to collect and combine files. Remote access tools with built-in features may interact directly with the Windows API to gather and copy to a location. Data may also be acquired and staged through Windows system management tools such as Windows Management Instrumentation and PowerShell.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "T1596.004 (CDNs)",
      "ddmc_optionA": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.",
      "ddmc_optionB": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. User behavior monitoring may help to detect abnormal patterns of activity.",
      "ddmc_optionC": "In some cases, malware repositories can also be used to identify features of tool use associated with an adversary, such as watermarks in Cobalt Strike payloads. Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on post-compromise phases of the adversary lifecycle.(Citations: Analyzing CS Dec 2020)",
      "ddmc_optionD": "Processes that appear to be reading files from disparate locations and writing them to the same directory or file may be an indication of data being staged, especially if they are suspected of performing encryption or compression on the files, such as 7zip, RAR, ZIP, or zlib. Monitor publicly writeable directories, central locations, and commonly used staging directories (recycle bin, temp folders, etc.) to regularly check for compressed or encrypted data that may be indicative of staging. Monitor processes and command-line arguments for actions that could be taken to collect and combine files. Remote access tools with built-in features may interact directly with the Windows API to gather and copy to a location. Data may also be acquired and staged through Windows system management tools such as Windows Management Instrumentation and PowerShell.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.",
      "prompts": [],
      "instruction": "What is a method to detect T1596.004 (CDNs)?\nA.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\nB.  Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. User behavior monitoring may help to detect abnormal patterns of activity.\nC.  In some cases, malware repositories can also be used to identify features of tool use associated with an adversary, such as watermarks in Cobalt Strike payloads. Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on post-compromise phases of the adversary lifecycle.(Citations: Analyzing CS Dec 2020)\nD.  Processes that appear to be reading files from disparate locations and writing them to the same directory or file may be an indication of data being staged, especially if they are suspected of performing encryption or compression on the files, such as 7zip, RAR, ZIP, or zlib. Monitor publicly writeable directories, central locations, and commonly used staging directories (recycle bin, temp folders, etc.) to regularly check for compressed or encrypted data that may be indicative of staging. Monitor processes and command-line arguments for actions that could be taken to collect and combine files. Remote access tools with built-in features may interact directly with the Windows API to gather and copy to a location. Data may also be acquired and staged through Windows system management tools such as Windows Management Instrumentation and PowerShell.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect Match Legitimate Name or Location (T1036.005)?\nA.  Because most common third-party services used for spearphishing via service leverage TLS encryption, SSL/TLS inspection is generally required to detect the initial communication/delivery. With SSL/TLS inspection intrusion detection signatures or other security gateway appliances may be able to detect malware. Anti-virus can potentially detect malicious documents and files that are downloaded on the user's computer. Endpoint sensing or network sensing can potentially detect malicious events once the file is opened (such as a Microsoft Word document or PDF reaching out to the internet or spawning Powershell.exe) for techniques such as Exploitation for Client Execution or usage of malicious scripts.\nB.  Monitor process execution from the <code>svchost.exe</code> in Windows 10 and the Windows Task Scheduler <code>taskeng.exe</code> for older versions of Windows.  If scheduled tasks are not used for persistence, then the adversary is likely to remove the task when the action is complete. Monitor Windows Task Scheduler stores in %systemroot%\\System32\\Tasks for change entries related to scheduled tasks that do not correlate with known software, patch cycles, etc. Configure event logging for scheduled task creation and changes by enabling the \"Microsoft-Windows-TaskScheduler/Operational\" setting within the event logging service.  Several events will then be logged on scheduled task activity, including:  * Event ID 106 on Windows 7, Server 2008 R2 - Scheduled task registered * Event ID 140 on Windows 7, Server 2008 R2 / 4702 on Windows 10, Server 2016 - Scheduled task updated * Event ID 141 on Windows 7, Server 2008 R2 / 4699 on Windows 10, Server 2016 - Scheduled task deleted * Event ID 4698 on Windows 10, Server 2016 - Scheduled task created * Event ID 4700 on Windows 10, Server 2016 - Scheduled task enabled * Event ID 4701 on Windows 10, Server 2016 - Scheduled task disabled Tools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing current scheduled tasks.  Remote access tools with built-in features may interact directly with the Windows API to perform these functions outside of typical system utilities. Tasks may also be created through Windows system management tools such as Windows Management Instrumentation and PowerShell, so additional logging may need to be configured to gather the appropriate data.(Citations: Twitter Leoloobeek Scheduled Task, TechNet Forum Scheduled Task Operational Setting, TechNet Scheduled Task Events, Microsoft Scheduled Task Events Win10, TechNet Autoruns)\nC.  Collect file hashes; file names that do not match their expected hash are suspect. Perform file monitoring; files with known names but in unusual locations are suspect. Likewise, files that are modified outside of an update or patch are suspect. If file names are mismatched between the file name on disk and that of the binary's PE metadata, this is a likely indicator that a binary was renamed after it was compiled. Collecting and comparing disk and resource filenames for binaries by looking to see if the InternalName, OriginalFilename, and/or ProductName match what is expected could provide useful leads, but may not always be indicative of malicious activity.  Do not focus on the possible names a file could have, but instead on the command-line arguments that are known to be used and are distinct because it will have a better rate of detection. In containerized environments, use image IDs and layer hashes to compare images instead of relying only on their names. Monitor for the unexpected creation of new resources within your cluster in Kubernetes, especially those created by atypical users.(Citations: Elastic Masquerade Ball, Twitter ItsReallyNick Masquerading Update, Docker Images)\nD.  Trap commands must be registered for the shell or programs, so they appear in files. Monitoring files for suspicious or overly broad trap commands can narrow down suspicious behavior during an investigation. Monitor for suspicious processes executed through trap interrupts.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Match Legitimate Name or Location (T1036.005)",
      "ddmc_optionA": "Because most common third-party services used for spearphishing via service leverage TLS encryption, SSL/TLS inspection is generally required to detect the initial communication/delivery. With SSL/TLS inspection intrusion detection signatures or other security gateway appliances may be able to detect malware. Anti-virus can potentially detect malicious documents and files that are downloaded on the user's computer. Endpoint sensing or network sensing can potentially detect malicious events once the file is opened (such as a Microsoft Word document or PDF reaching out to the internet or spawning Powershell.exe) for techniques such as Exploitation for Client Execution or usage of malicious scripts.",
      "ddmc_optionB": "Monitor process execution from the <code>svchost.exe</code> in Windows 10 and the Windows Task Scheduler <code>taskeng.exe</code> for older versions of Windows.  If scheduled tasks are not used for persistence, then the adversary is likely to remove the task when the action is complete. Monitor Windows Task Scheduler stores in %systemroot%\\System32\\Tasks for change entries related to scheduled tasks that do not correlate with known software, patch cycles, etc. Configure event logging for scheduled task creation and changes by enabling the \"Microsoft-Windows-TaskScheduler/Operational\" setting within the event logging service.  Several events will then be logged on scheduled task activity, including:  * Event ID 106 on Windows 7, Server 2008 R2 - Scheduled task registered * Event ID 140 on Windows 7, Server 2008 R2 / 4702 on Windows 10, Server 2016 - Scheduled task updated * Event ID 141 on Windows 7, Server 2008 R2 / 4699 on Windows 10, Server 2016 - Scheduled task deleted * Event ID 4698 on Windows 10, Server 2016 - Scheduled task created * Event ID 4700 on Windows 10, Server 2016 - Scheduled task enabled * Event ID 4701 on Windows 10, Server 2016 - Scheduled task disabled Tools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing current scheduled tasks.  Remote access tools with built-in features may interact directly with the Windows API to perform these functions outside of typical system utilities. Tasks may also be created through Windows system management tools such as Windows Management Instrumentation and PowerShell, so additional logging may need to be configured to gather the appropriate data.(Citations: Twitter Leoloobeek Scheduled Task, TechNet Forum Scheduled Task Operational Setting, TechNet Scheduled Task Events, Microsoft Scheduled Task Events Win10, TechNet Autoruns)",
      "ddmc_optionC": "Collect file hashes; file names that do not match their expected hash are suspect. Perform file monitoring; files with known names but in unusual locations are suspect. Likewise, files that are modified outside of an update or patch are suspect. If file names are mismatched between the file name on disk and that of the binary's PE metadata, this is a likely indicator that a binary was renamed after it was compiled. Collecting and comparing disk and resource filenames for binaries by looking to see if the InternalName, OriginalFilename, and/or ProductName match what is expected could provide useful leads, but may not always be indicative of malicious activity.  Do not focus on the possible names a file could have, but instead on the command-line arguments that are known to be used and are distinct because it will have a better rate of detection. In containerized environments, use image IDs and layer hashes to compare images instead of relying only on their names. Monitor for the unexpected creation of new resources within your cluster in Kubernetes, especially those created by atypical users.(Citations: Elastic Masquerade Ball, Twitter ItsReallyNick Masquerading Update, Docker Images)",
      "ddmc_optionD": "Trap commands must be registered for the shell or programs, so they appear in files. Monitoring files for suspicious or overly broad trap commands can narrow down suspicious behavior during an investigation. Monitor for suspicious processes executed through trap interrupts.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Collect file hashes; file names that do not match their expected hash are suspect. Perform file monitoring; files with known names but in unusual locations are suspect. Likewise, files that are modified outside of an update or patch are suspect. If file names are mismatched between the file name on disk and that of the binary's PE metadata, this is a likely indicator that a binary was renamed after it was compiled. Collecting and comparing disk and resource filenames for binaries by looking to see if the InternalName, OriginalFilename, and/or ProductName match what is expected could provide useful leads, but may not always be indicative of malicious activity.  Do not focus on the possible names a file could have, but instead on the command-line arguments that are known to be used and are distinct because it will have a better rate of detection. In containerized environments, use image IDs and layer hashes to compare images instead of relying only on their names. Monitor for the unexpected creation of new resources within your cluster in Kubernetes, especially those created by atypical users.(Citations: Elastic Masquerade Ball, Twitter ItsReallyNick Masquerading Update, Docker Images)",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect Match Legitimate Name or Location (T1036.005)?\nA.  Because most common third-party services used for spearphishing via service leverage TLS encryption, SSL/TLS inspection is generally required to detect the initial communication/delivery. With SSL/TLS inspection intrusion detection signatures or other security gateway appliances may be able to detect malware. Anti-virus can potentially detect malicious documents and files that are downloaded on the user's computer. Endpoint sensing or network sensing can potentially detect malicious events once the file is opened (such as a Microsoft Word document or PDF reaching out to the internet or spawning Powershell.exe) for techniques such as Exploitation for Client Execution or usage of malicious scripts.\nB.  Monitor process execution from the <code>svchost.exe</code> in Windows 10 and the Windows Task Scheduler <code>taskeng.exe</code> for older versions of Windows.  If scheduled tasks are not used for persistence, then the adversary is likely to remove the task when the action is complete. Monitor Windows Task Scheduler stores in %systemroot%\\System32\\Tasks for change entries related to scheduled tasks that do not correlate with known software, patch cycles, etc. Configure event logging for scheduled task creation and changes by enabling the \"Microsoft-Windows-TaskScheduler/Operational\" setting within the event logging service.  Several events will then be logged on scheduled task activity, including:  * Event ID 106 on Windows 7, Server 2008 R2 - Scheduled task registered * Event ID 140 on Windows 7, Server 2008 R2 / 4702 on Windows 10, Server 2016 - Scheduled task updated * Event ID 141 on Windows 7, Server 2008 R2 / 4699 on Windows 10, Server 2016 - Scheduled task deleted * Event ID 4698 on Windows 10, Server 2016 - Scheduled task created * Event ID 4700 on Windows 10, Server 2016 - Scheduled task enabled * Event ID 4701 on Windows 10, Server 2016 - Scheduled task disabled Tools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing current scheduled tasks.  Remote access tools with built-in features may interact directly with the Windows API to perform these functions outside of typical system utilities. Tasks may also be created through Windows system management tools such as Windows Management Instrumentation and PowerShell, so additional logging may need to be configured to gather the appropriate data.(Citations: Twitter Leoloobeek Scheduled Task, TechNet Forum Scheduled Task Operational Setting, TechNet Scheduled Task Events, Microsoft Scheduled Task Events Win10, TechNet Autoruns)\nC.  Collect file hashes; file names that do not match their expected hash are suspect. Perform file monitoring; files with known names but in unusual locations are suspect. Likewise, files that are modified outside of an update or patch are suspect. If file names are mismatched between the file name on disk and that of the binary's PE metadata, this is a likely indicator that a binary was renamed after it was compiled. Collecting and comparing disk and resource filenames for binaries by looking to see if the InternalName, OriginalFilename, and/or ProductName match what is expected could provide useful leads, but may not always be indicative of malicious activity.  Do not focus on the possible names a file could have, but instead on the command-line arguments that are known to be used and are distinct because it will have a better rate of detection. In containerized environments, use image IDs and layer hashes to compare images instead of relying only on their names. Monitor for the unexpected creation of new resources within your cluster in Kubernetes, especially those created by atypical users.(Citations: Elastic Masquerade Ball, Twitter ItsReallyNick Masquerading Update, Docker Images)\nD.  Trap commands must be registered for the shell or programs, so they appear in files. Monitoring files for suspicious or overly broad trap commands can narrow down suspicious behavior during an investigation. Monitor for suspicious processes executed through trap interrupts.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Missing Immutable Root of Trust in Hardware (CWE-1326)?\nA.  When architecting the system, the RoT should be designated for storage in a memory that does not allow further programming/writes.\nB.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nC.  Catch all relevant exceptions. This is the recommended solution. Ensure that all exceptions are handled in such a way that you can be sure of the state of your system at any given moment.\nD.  Operating the hardware outside device specification, such as at extremely high temperatures, voltage, etc., accelerates semiconductor degradation and results in defects. When these defects manifest as faults in security-critical, hardware modules, it results in compromise of security guarantees. Thus, operating the device within the specification is important.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Missing Immutable Root of Trust in Hardware (CWE-1326)",
      "ddmc_optionA": "When architecting the system, the RoT should be designated for storage in a memory that does not allow further programming/writes.",
      "ddmc_optionB": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmc_optionC": "Catch all relevant exceptions. This is the recommended solution. Ensure that all exceptions are handled in such a way that you can be sure of the state of your system at any given moment.",
      "ddmc_optionD": "Operating the hardware outside device specification, such as at extremely high temperatures, voltage, etc., accelerates semiconductor degradation and results in defects. When these defects manifest as faults in security-critical, hardware modules, it results in compromise of security guarantees. Thus, operating the device within the specification is important.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "When architecting the system, the RoT should be designated for storage in a memory that does not allow further programming/writes.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Missing Immutable Root of Trust in Hardware (CWE-1326)?\nA.  When architecting the system, the RoT should be designated for storage in a memory that does not allow further programming/writes.\nB.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nC.  Catch all relevant exceptions. This is the recommended solution. Ensure that all exceptions are handled in such a way that you can be sure of the state of your system at any given moment.\nD.  Operating the hardware outside device specification, such as at extremely high temperatures, voltage, etc., accelerates semiconductor degradation and results in defects. When these defects manifest as faults in security-critical, hardware modules, it results in compromise of security guarantees. Thus, operating the device within the specification is important.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect Data Encrypted for Impact (T1486)?\nA.  Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on behaviors relating to the potential use of exploits for vulnerabilities (i.e. Exploit Public-Facing Application, Exploitation for Client Execution, Exploitation for Privilege Escalation, Exploitation for Defense Evasion, Exploitation for Credential Access, Exploitation of Remote Services, and Application or System Exploitation).\nB.  Consider monitoring for <code>/usr/libexec/security_authtrampoline</code> executions which may indicate that <code>AuthorizationExecuteWithPrivileges</code> is being executed. MacOS system logs may also indicate when <code>AuthorizationExecuteWithPrivileges</code> is being called. Monitoring OS API callbacks for the execution can also be a way to detect this behavior but requires specialized security tooling.\nC.  Monitor authentication logs for system and application login failures of Valid Accounts. If authentication failures are high, then there may be a brute force attempt to gain access to a system using legitimate credentials.\nD.  Use process monitoring to monitor the execution and command line parameters of binaries involved in data destruction activity, such as vssadmin, wbadmin, and bcdedit. Monitor for the creation of suspicious files as well as unusual file modification activity. In particular, look for large quantities of file modifications in user directories. In some cases, monitoring for unusual kernel driver installation activity can aid in detection. In cloud environments, monitor for events that indicate storage objects have been anomalously replaced by copies.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Data Encrypted for Impact (T1486)",
      "ddmc_optionA": "Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on behaviors relating to the potential use of exploits for vulnerabilities (i.e. Exploit Public-Facing Application, Exploitation for Client Execution, Exploitation for Privilege Escalation, Exploitation for Defense Evasion, Exploitation for Credential Access, Exploitation of Remote Services, and Application or System Exploitation).",
      "ddmc_optionB": "Consider monitoring for <code>/usr/libexec/security_authtrampoline</code> executions which may indicate that <code>AuthorizationExecuteWithPrivileges</code> is being executed. MacOS system logs may also indicate when <code>AuthorizationExecuteWithPrivileges</code> is being called. Monitoring OS API callbacks for the execution can also be a way to detect this behavior but requires specialized security tooling.",
      "ddmc_optionC": "Monitor authentication logs for system and application login failures of Valid Accounts. If authentication failures are high, then there may be a brute force attempt to gain access to a system using legitimate credentials.",
      "ddmc_optionD": "Use process monitoring to monitor the execution and command line parameters of binaries involved in data destruction activity, such as vssadmin, wbadmin, and bcdedit. Monitor for the creation of suspicious files as well as unusual file modification activity. In particular, look for large quantities of file modifications in user directories. In some cases, monitoring for unusual kernel driver installation activity can aid in detection. In cloud environments, monitor for events that indicate storage objects have been anomalously replaced by copies.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Use process monitoring to monitor the execution and command line parameters of binaries involved in data destruction activity, such as vssadmin, wbadmin, and bcdedit. Monitor for the creation of suspicious files as well as unusual file modification activity. In particular, look for large quantities of file modifications in user directories. In some cases, monitoring for unusual kernel driver installation activity can aid in detection. In cloud environments, monitor for events that indicate storage objects have been anomalously replaced by copies.",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect Data Encrypted for Impact (T1486)?\nA.  Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on behaviors relating to the potential use of exploits for vulnerabilities (i.e. Exploit Public-Facing Application, Exploitation for Client Execution, Exploitation for Privilege Escalation, Exploitation for Defense Evasion, Exploitation for Credential Access, Exploitation of Remote Services, and Application or System Exploitation).\nB.  Consider monitoring for <code>/usr/libexec/security_authtrampoline</code> executions which may indicate that <code>AuthorizationExecuteWithPrivileges</code> is being executed. MacOS system logs may also indicate when <code>AuthorizationExecuteWithPrivileges</code> is being called. Monitoring OS API callbacks for the execution can also be a way to detect this behavior but requires specialized security tooling.\nC.  Monitor authentication logs for system and application login failures of Valid Accounts. If authentication failures are high, then there may be a brute force attempt to gain access to a system using legitimate credentials.\nD.  Use process monitoring to monitor the execution and command line parameters of binaries involved in data destruction activity, such as vssadmin, wbadmin, and bcdedit. Monitor for the creation of suspicious files as well as unusual file modification activity. In particular, look for large quantities of file modifications in user directories. In some cases, monitoring for unusual kernel driver installation activity can aid in detection. In cloud environments, monitor for events that indicate storage objects have been anomalously replaced by copies.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Hijacking a Privileged Thread of Execution (CAPEC-30)?\nA.  Design: The browser's security model could be fixed to not leak timing information for cross domain requests\nB.  An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.\nC.  Design: Validate all input for content including files. Ensure that if files and remote content must be accepted that once accepted, they are placed in a sandbox type location so that lower assurance clients cannot write up to higher assurance processes (like Web server processes for example)\nD.  Application Architects must be careful to design callback, signal, and similar asynchronous constructs such that they shed excess privilege prior to handing control to user-written (thus untrusted) code.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Hijacking a Privileged Thread of Execution (CAPEC-30)",
      "ddmc_optionA": "Design: The browser's security model could be fixed to not leak timing information for cross domain requests",
      "ddmc_optionB": "An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.",
      "ddmc_optionC": "Design: Validate all input for content including files. Ensure that if files and remote content must be accepted that once accepted, they are placed in a sandbox type location so that lower assurance clients cannot write up to higher assurance processes (like Web server processes for example)",
      "ddmc_optionD": "Application Architects must be careful to design callback, signal, and similar asynchronous constructs such that they shed excess privilege prior to handing control to user-written (thus untrusted) code.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Application Architects must be careful to design callback, signal, and similar asynchronous constructs such that they shed excess privilege prior to handing control to user-written (thus untrusted) code.",
      "prompts": [],
      "instruction": "How can you mitigate Hijacking a Privileged Thread of Execution (CAPEC-30)?\nA.  Design: The browser's security model could be fixed to not leak timing information for cross domain requests\nB.  An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.\nC.  Design: Validate all input for content including files. Ensure that if files and remote content must be accepted that once accepted, they are placed in a sandbox type location so that lower assurance clients cannot write up to higher assurance processes (like Web server processes for example)\nD.  Application Architects must be careful to design callback, signal, and similar asynchronous constructs such that they shed excess privilege prior to handing control to user-written (thus untrusted) code.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Improper Handling of Overlap Between Protected Memory Ranges (CWE-1260)?\nA.  With Struts, write all data from form beans with the bean's filter attribute set to true.\nB.  Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.\nC.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nD.  For all of the programmable memory protection regions, the memory protection unit (MPU) design can define a priority scheme. For example: if three memory regions can be programmed (Region_0, Region_1, and Region_2), the design can enforce a priority scheme, such that, if a system address is within multiple regions, then the region with the lowest ID takes priority and the access-control policy of that region will be applied. In some MPU designs, the priority scheme can also be programmed by trusted software. Hardware logic or trusted firmware can also check for region definitions and block programming of memory regions with overlapping addresses. The memory-access-control-check filter can also be designed to apply a policy filter to all of the overlapping ranges, i.e., if an address is within Region_0 and Region_1, then access to this address is only granted if both Region_0 and Region_1 policies allow the access.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Handling of Overlap Between Protected Memory Ranges (CWE-1260)",
      "ddmc_optionA": "With Struts, write all data from form beans with the bean's filter attribute set to true.",
      "ddmc_optionB": "Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.",
      "ddmc_optionC": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmc_optionD": "For all of the programmable memory protection regions, the memory protection unit (MPU) design can define a priority scheme. For example: if three memory regions can be programmed (Region_0, Region_1, and Region_2), the design can enforce a priority scheme, such that, if a system address is within multiple regions, then the region with the lowest ID takes priority and the access-control policy of that region will be applied. In some MPU designs, the priority scheme can also be programmed by trusted software. Hardware logic or trusted firmware can also check for region definitions and block programming of memory regions with overlapping addresses. The memory-access-control-check filter can also be designed to apply a policy filter to all of the overlapping ranges, i.e., if an address is within Region_0 and Region_1, then access to this address is only granted if both Region_0 and Region_1 policies allow the access.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "For all of the programmable memory protection regions, the memory protection unit (MPU) design can define a priority scheme. For example: if three memory regions can be programmed (Region_0, Region_1, and Region_2), the design can enforce a priority scheme, such that, if a system address is within multiple regions, then the region with the lowest ID takes priority and the access-control policy of that region will be applied. In some MPU designs, the priority scheme can also be programmed by trusted software. Hardware logic or trusted firmware can also check for region definitions and block programming of memory regions with overlapping addresses. The memory-access-control-check filter can also be designed to apply a policy filter to all of the overlapping ranges, i.e., if an address is within Region_0 and Region_1, then access to this address is only granted if both Region_0 and Region_1 policies allow the access.",
      "prompts": [],
      "instruction": "What is a method to mitigate Improper Handling of Overlap Between Protected Memory Ranges (CWE-1260)?\nA.  With Struts, write all data from form beans with the bean's filter attribute set to true.\nB.  Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.\nC.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nD.  For all of the programmable memory protection regions, the memory protection unit (MPU) design can define a priority scheme. For example: if three memory regions can be programmed (Region_0, Region_1, and Region_2), the design can enforce a priority scheme, such that, if a system address is within multiple regions, then the region with the lowest ID takes priority and the access-control policy of that region will be applied. In some MPU designs, the priority scheme can also be programmed by trusted software. Hardware logic or trusted firmware can also check for region definitions and block programming of memory regions with overlapping addresses. The memory-access-control-check filter can also be designed to apply a policy filter to all of the overlapping ranges, i.e., if an address is within Region_0 and Region_1, then access to this address is only granted if both Region_0 and Region_1 policies allow the access.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1037.001 (Logon Script (Windows))?\nA.  The file removal technique deletes malicious artifacts or programs from a computer system.\nB.  Randomizing the base (start) address of one or more segments of memory during the initialization of a process.\nC.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nD.  Restoring an object for an entity to access. This is the broadest class for object restoral.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1037.001 (Logon Script (Windows))",
      "ddmc_optionA": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "ddmc_optionB": "Randomizing the base (start) address of one or more segments of memory during the initialization of a process.",
      "ddmc_optionC": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_optionD": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "prompts": [],
      "instruction": "How can you mitigate T1037.001 (Logon Script (Windows))?\nA.  The file removal technique deletes malicious artifacts or programs from a computer system.\nB.  Randomizing the base (start) address of one or more segments of memory during the initialization of a process.\nC.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nD.  Restoring an object for an entity to access. This is the broadest class for object restoral.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Intent Spoof (CAPEC-502)?\nA.  Prevent unknown or malicious software from loading through using an allowlist policy.\nB.  Perform comprehensive threat modeling, a process of identifying, evaluating, and mitigating potential threats to the application. This effort can help reveal potentially obscure application functionality that can be manipulated for malicious purposes.\nC.  To limit one's exposure to this type of attack, developers should avoid exporting components unless the component is specifically designed to handle requests from untrusted applications. Developers should be aware that declaring an intent filter will automatically export the component, exposing it to public access. Critical, state-changing actions should not be placed in exported components. If a single component handles both inter- and intra-application requests, the developer should consider dividing that component into separate components. If a component must be exported (e.g., to receive system broadcasts), then the component should dynamically check the caller's identity prior to performing any operations. Requiring Signature or SignatureOrSystem permissions is an effective way of limiting a component's exposure to a set of trusted applications. Finally, the return values of exported components can also leak private data, so developers should check the caller's identity prior to returning sensitive values.\nD.  Refer to the RFCs to safely decode URL.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Intent Spoof (CAPEC-502)",
      "ddmc_optionA": "Prevent unknown or malicious software from loading through using an allowlist policy.",
      "ddmc_optionB": "Perform comprehensive threat modeling, a process of identifying, evaluating, and mitigating potential threats to the application. This effort can help reveal potentially obscure application functionality that can be manipulated for malicious purposes.",
      "ddmc_optionC": "To limit one's exposure to this type of attack, developers should avoid exporting components unless the component is specifically designed to handle requests from untrusted applications. Developers should be aware that declaring an intent filter will automatically export the component, exposing it to public access. Critical, state-changing actions should not be placed in exported components. If a single component handles both inter- and intra-application requests, the developer should consider dividing that component into separate components. If a component must be exported (e.g., to receive system broadcasts), then the component should dynamically check the caller's identity prior to performing any operations. Requiring Signature or SignatureOrSystem permissions is an effective way of limiting a component's exposure to a set of trusted applications. Finally, the return values of exported components can also leak private data, so developers should check the caller's identity prior to returning sensitive values.",
      "ddmc_optionD": "Refer to the RFCs to safely decode URL.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "To limit one's exposure to this type of attack, developers should avoid exporting components unless the component is specifically designed to handle requests from untrusted applications. Developers should be aware that declaring an intent filter will automatically export the component, exposing it to public access. Critical, state-changing actions should not be placed in exported components. If a single component handles both inter- and intra-application requests, the developer should consider dividing that component into separate components. If a component must be exported (e.g., to receive system broadcasts), then the component should dynamically check the caller's identity prior to performing any operations. Requiring Signature or SignatureOrSystem permissions is an effective way of limiting a component's exposure to a set of trusted applications. Finally, the return values of exported components can also leak private data, so developers should check the caller's identity prior to returning sensitive values.",
      "prompts": [],
      "instruction": "What is a method to mitigate Intent Spoof (CAPEC-502)?\nA.  Prevent unknown or malicious software from loading through using an allowlist policy.\nB.  Perform comprehensive threat modeling, a process of identifying, evaluating, and mitigating potential threats to the application. This effort can help reveal potentially obscure application functionality that can be manipulated for malicious purposes.\nC.  To limit one's exposure to this type of attack, developers should avoid exporting components unless the component is specifically designed to handle requests from untrusted applications. Developers should be aware that declaring an intent filter will automatically export the component, exposing it to public access. Critical, state-changing actions should not be placed in exported components. If a single component handles both inter- and intra-application requests, the developer should consider dividing that component into separate components. If a component must be exported (e.g., to receive system broadcasts), then the component should dynamically check the caller's identity prior to performing any operations. Requiring Signature or SignatureOrSystem permissions is an effective way of limiting a component's exposure to a set of trusted applications. Finally, the return values of exported components can also leak private data, so developers should check the caller's identity prior to returning sensitive values.\nD.  Refer to the RFCs to safely decode URL.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Symmetric Cryptography (T1573.001)?\nA.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nB.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nC.  Terminating a running application process on a computer system.\nD.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Symmetric Cryptography (T1573.001)",
      "ddmc_optionA": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_optionB": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmc_optionC": "Terminating a running application process on a computer system.",
      "ddmc_optionD": "Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Symmetric Cryptography (T1573.001)?\nA.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nB.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nC.  Terminating a running application process on a computer system.\nD.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate T1547.003 (Time Providers)?\nA.  Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\nB.  Employing a pattern matching algorithm to statically analyze the content of files.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1547.003 (Time Providers)",
      "ddmc_optionA": "Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.",
      "ddmc_optionB": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_optionC": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionD": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate T1547.003 (Time Providers)?\nA.  Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\nB.  Employing a pattern matching algorithm to statically analyze the content of files.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect CWE-185 (Incorrect Regular Expression)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  Review if the protections against glitching merely transfer the attack target. For example, suppose a critical authentication routine that an attacker would want to bypass is given the protection of modifying certain artifacts from within that specific routine (so that if the routine is bypassed, one can examine the artifacts and figure out that an attack must have happened). However, if the attacker has the ability to bypass the critical authentication routine, they might also have the ability to bypass the other protection routine that checks the artifacts. Basically, depending on these kind of protections is akin to resorting to \"Security by Obscurity\".\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "CWE-185 (Incorrect Regular Expression)",
      "ddmc_optionA": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionB": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionC": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionD": "Review if the protections against glitching merely transfer the attack target. For example, suppose a critical authentication routine that an attacker would want to bypass is given the protection of modifying certain artifacts from within that specific routine (so that if the routine is bypassed, one can examine the artifacts and figure out that an attack must have happened). However, if the attacker has the ability to bypass the critical authentication routine, they might also have the ability to bypass the other protection routine that checks the artifacts. Basically, depending on these kind of protections is akin to resorting to \"Security by Obscurity\".",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "How can you detect CWE-185 (Incorrect Regular Expression)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  Review if the protections against glitching merely transfer the attack target. For example, suppose a critical authentication routine that an attacker would want to bypass is given the protection of modifying certain artifacts from within that specific routine (so that if the routine is bypassed, one can examine the artifacts and figure out that an attack must have happened). However, if the attacker has the ability to bypass the critical authentication routine, they might also have the ability to bypass the other protection routine that checks the artifacts. Basically, depending on these kind of protections is akin to resorting to \"Security by Obscurity\".\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Use of Uninitialized Variable (CWE-457)?\nA.  Only call matching memory management functions. Do not mix and match routines. For example, when you allocate a buffer with malloc(), dispose of the original pointer with free().\nB.  Check for expired certificates and provide the user with adequate information about the nature of the problem and how to proceed.\nC.  Refactor your program so that you do not have to dynamically generate code.\nD.  The choice could be made to use a language that is not susceptible to these issues.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Use of Uninitialized Variable (CWE-457)",
      "ddmc_optionA": "Only call matching memory management functions. Do not mix and match routines. For example, when you allocate a buffer with malloc(), dispose of the original pointer with free().",
      "ddmc_optionB": "Check for expired certificates and provide the user with adequate information about the nature of the problem and how to proceed.",
      "ddmc_optionC": "Refactor your program so that you do not have to dynamically generate code.",
      "ddmc_optionD": "The choice could be made to use a language that is not susceptible to these issues.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "The choice could be made to use a language that is not susceptible to these issues.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Use of Uninitialized Variable (CWE-457)?\nA.  Only call matching memory management functions. Do not mix and match routines. For example, when you allocate a buffer with malloc(), dispose of the original pointer with free().\nB.  Check for expired certificates and provide the user with adequate information about the nature of the problem and how to proceed.\nC.  Refactor your program so that you do not have to dynamically generate code.\nD.  The choice could be made to use a language that is not susceptible to these issues.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Unprotected Primary Channel (CWE-419)?\nA.  Do not expose administrative functionnality on the user UI.\nB.  The controls that allow enabling memory aliases or changing the size of mapped memory regions should only be programmable by trusted software components.\nC.  Use resource-limiting settings provided by the operating system or environment. For example, when managing system resources in POSIX, setrlimit() can be used to set limits for certain types of resources, and getrlimit() can determine how many resources are available. However, these functions are not available on all operating systems. When the current levels get close to the maximum that is defined for the application (see CWE-770), then limit the allocation of further resources to privileged users; alternately, begin releasing resources for less-privileged users. While this mitigation may protect the system from attack, it will not necessarily stop attackers from adversely impacting other users. Ensure that the application performs the appropriate error checks and error handling in case resources become unavailable (CWE-703).\nD.  Use multiple simultaneous checks before granting access to critical operations or granting critical privileges. A weaker but helpful mitigation is to use several successive checks (multiple layers of security).\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Unprotected Primary Channel (CWE-419)",
      "ddmc_optionA": "Do not expose administrative functionnality on the user UI.",
      "ddmc_optionB": "The controls that allow enabling memory aliases or changing the size of mapped memory regions should only be programmable by trusted software components.",
      "ddmc_optionC": "Use resource-limiting settings provided by the operating system or environment. For example, when managing system resources in POSIX, setrlimit() can be used to set limits for certain types of resources, and getrlimit() can determine how many resources are available. However, these functions are not available on all operating systems. When the current levels get close to the maximum that is defined for the application (see CWE-770), then limit the allocation of further resources to privileged users; alternately, begin releasing resources for less-privileged users. While this mitigation may protect the system from attack, it will not necessarily stop attackers from adversely impacting other users. Ensure that the application performs the appropriate error checks and error handling in case resources become unavailable (CWE-703).",
      "ddmc_optionD": "Use multiple simultaneous checks before granting access to critical operations or granting critical privileges. A weaker but helpful mitigation is to use several successive checks (multiple layers of security).",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Do not expose administrative functionnality on the user UI.",
      "prompts": [],
      "instruction": "What is a method to mitigate Unprotected Primary Channel (CWE-419)?\nA.  Do not expose administrative functionnality on the user UI.\nB.  The controls that allow enabling memory aliases or changing the size of mapped memory regions should only be programmable by trusted software components.\nC.  Use resource-limiting settings provided by the operating system or environment. For example, when managing system resources in POSIX, setrlimit() can be used to set limits for certain types of resources, and getrlimit() can determine how many resources are available. However, these functions are not available on all operating systems. When the current levels get close to the maximum that is defined for the application (see CWE-770), then limit the allocation of further resources to privileged users; alternately, begin releasing resources for less-privileged users. While this mitigation may protect the system from attack, it will not necessarily stop attackers from adversely impacting other users. Ensure that the application performs the appropriate error checks and error handling in case resources become unavailable (CWE-703).\nD.  Use multiple simultaneous checks before granting access to critical operations or granting critical privileges. A weaker but helpful mitigation is to use several successive checks (multiple layers of security).\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect Exfiltration Over C2 Channel (T1041)?\nA.  Consider analyzing malware for features that may be associated with malware providers, such as compiler used, debugging artifacts, code similarities, or even group identifiers associated with specific MaaS offerings. Malware repositories can also be used to identify additional samples associated with the developers and the adversary utilizing their services. Identifying overlaps in malware use by different adversaries may indicate malware was obtained by the adversary rather than developed by them. In some cases, identifying overlapping characteristics in malware used by different adversaries may point to a shared quartermaster. Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on post-compromise phases of the adversary lifecycle.(Citations: FireEyeSupplyChain)\nB.  Consider monitoring application logs for abnormal behavior that may indicate suspicious installation of application software components. Consider monitoring file locations associated with the installation of new application software components such as paths from which applications typically load such extensible components.\nC.  Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citations: University of Birmingham C2)\nD.  Command-line interface monitoring may be useful to detect instances of net.exe or other command-line utilities being used to gather system time or time zone. Methods of detecting API use for gathering this information are likely less useful due to how often they may be used by legitimate software. For network infrastructure devices, collect AAA logging to monitor `show` commands being run by non-standard users from non-standard locations.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Exfiltration Over C2 Channel (T1041)",
      "ddmc_optionA": "Consider analyzing malware for features that may be associated with malware providers, such as compiler used, debugging artifacts, code similarities, or even group identifiers associated with specific MaaS offerings. Malware repositories can also be used to identify additional samples associated with the developers and the adversary utilizing their services. Identifying overlaps in malware use by different adversaries may indicate malware was obtained by the adversary rather than developed by them. In some cases, identifying overlapping characteristics in malware used by different adversaries may point to a shared quartermaster. Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on post-compromise phases of the adversary lifecycle.(Citations: FireEyeSupplyChain)",
      "ddmc_optionB": "Consider monitoring application logs for abnormal behavior that may indicate suspicious installation of application software components. Consider monitoring file locations associated with the installation of new application software components such as paths from which applications typically load such extensible components.",
      "ddmc_optionC": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citations: University of Birmingham C2)",
      "ddmc_optionD": "Command-line interface monitoring may be useful to detect instances of net.exe or other command-line utilities being used to gather system time or time zone. Methods of detecting API use for gathering this information are likely less useful due to how often they may be used by legitimate software. For network infrastructure devices, collect AAA logging to monitor `show` commands being run by non-standard users from non-standard locations.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citations: University of Birmingham C2)",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect Exfiltration Over C2 Channel (T1041)?\nA.  Consider analyzing malware for features that may be associated with malware providers, such as compiler used, debugging artifacts, code similarities, or even group identifiers associated with specific MaaS offerings. Malware repositories can also be used to identify additional samples associated with the developers and the adversary utilizing their services. Identifying overlaps in malware use by different adversaries may indicate malware was obtained by the adversary rather than developed by them. In some cases, identifying overlapping characteristics in malware used by different adversaries may point to a shared quartermaster. Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on post-compromise phases of the adversary lifecycle.(Citations: FireEyeSupplyChain)\nB.  Consider monitoring application logs for abnormal behavior that may indicate suspicious installation of application software components. Consider monitoring file locations associated with the installation of new application software components such as paths from which applications typically load such extensible components.\nC.  Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citations: University of Birmingham C2)\nD.  Command-line interface monitoring may be useful to detect instances of net.exe or other command-line utilities being used to gather system time or time zone. Methods of detecting API use for gathering this information are likely less useful due to how often they may be used by legitimate software. For network infrastructure devices, collect AAA logging to monitor `show` commands being run by non-standard users from non-standard locations.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate CWE-263 (Password Aging with Long Expiration)?\nA.  Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, glibc in Linux provides protection against free of invalid pointers.\nB.  Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.\nC.  Ensure that all string functions used are understood fully as to how they append null characters. Also, be wary of off-by-one errors when appending nulls to the end of strings.\nD.  Ensure that the user is notified several times leading up to the password expiration.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CWE-263 (Password Aging with Long Expiration)",
      "ddmc_optionA": "Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, glibc in Linux provides protection against free of invalid pointers.",
      "ddmc_optionB": "Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.",
      "ddmc_optionC": "Ensure that all string functions used are understood fully as to how they append null characters. Also, be wary of off-by-one errors when appending nulls to the end of strings.",
      "ddmc_optionD": "Ensure that the user is notified several times leading up to the password expiration.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Ensure that the user is notified several times leading up to the password expiration.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate CWE-263 (Password Aging with Long Expiration)?\nA.  Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, glibc in Linux provides protection against free of invalid pointers.\nB.  Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.\nC.  Ensure that all string functions used are understood fully as to how they append null characters. Also, be wary of off-by-one errors when appending nulls to the end of strings.\nD.  Ensure that the user is notified several times leading up to the password expiration.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Proc Memory (T1055.009)?\nA.  Restoring a user account's access to resources.\nB.  Employing file hash comparisons to detect known malware.\nC.  Employing a pattern matching algorithm to statically analyze the content of files.\nD.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Proc Memory (T1055.009)",
      "ddmc_optionA": "Restoring a user account's access to resources.",
      "ddmc_optionB": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionC": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_optionD": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Employing file hash comparisons to detect known malware.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Proc Memory (T1055.009)?\nA.  Restoring a user account's access to resources.\nB.  Employing file hash comparisons to detect known malware.\nC.  Employing a pattern matching algorithm to statically analyze the content of files.\nD.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Cellular Rogue Base Station (CAPEC-617)?\nA.  Make sure that HTTPS is used to communicate with the target system. Alternatively, use VPN if possible. It is important to ensure that all communication between the client and the server happens via an encrypted secure channel.\nB.  Assess software during development and prior to deployment to ensure that it functions as intended and without any malicious functionality.\nC.  Passively monitor cellular network connection for real-time threat detection and logging for manual review.\nD.  Utilize DMEA\u2019s (Defense Microelectronics Activity) Trusted Foundry Program members for acquisition of microelectronic components.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Cellular Rogue Base Station (CAPEC-617)",
      "ddmc_optionA": "Make sure that HTTPS is used to communicate with the target system. Alternatively, use VPN if possible. It is important to ensure that all communication between the client and the server happens via an encrypted secure channel.",
      "ddmc_optionB": "Assess software during development and prior to deployment to ensure that it functions as intended and without any malicious functionality.",
      "ddmc_optionC": "Passively monitor cellular network connection for real-time threat detection and logging for manual review.",
      "ddmc_optionD": "Utilize DMEA\u2019s (Defense Microelectronics Activity) Trusted Foundry Program members for acquisition of microelectronic components.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Passively monitor cellular network connection for real-time threat detection and logging for manual review.",
      "prompts": [],
      "instruction": "How can you mitigate Cellular Rogue Base Station (CAPEC-617)?\nA.  Make sure that HTTPS is used to communicate with the target system. Alternatively, use VPN if possible. It is important to ensure that all communication between the client and the server happens via an encrypted secure channel.\nB.  Assess software during development and prior to deployment to ensure that it functions as intended and without any malicious functionality.\nC.  Passively monitor cellular network connection for real-time threat detection and logging for manual review.\nD.  Utilize DMEA\u2019s (Defense Microelectronics Activity) Trusted Foundry Program members for acquisition of microelectronic components.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Social Media (T1593.001)?\nA.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nB.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nC.  Restrict execution of code to a virtual environment on or in transit to an endpoint system.\nD.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Social Media (T1593.001)",
      "ddmc_optionA": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmc_optionB": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
      "ddmc_optionC": "Restrict execution of code to a virtual environment on or in transit to an endpoint system.",
      "ddmc_optionD": "Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "prompts": [],
      "instruction": "What is a method to mitigate Social Media (T1593.001)?\nA.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nB.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nC.  Restrict execution of code to a virtual environment on or in transit to an endpoint system.\nD.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Spearphishing via Service (T1566.003)?\nA.  Controlling access to local computer system resources with kernel-level capabilities.\nB.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nC.  The file removal technique deletes malicious artifacts or programs from a computer system.\nD.  File eviction techniques evict files from system storage.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Spearphishing via Service (T1566.003)",
      "ddmc_optionA": "Controlling access to local computer system resources with kernel-level capabilities.",
      "ddmc_optionB": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_optionC": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "ddmc_optionD": "File eviction techniques evict files from system storage.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "prompts": [],
      "instruction": "What is a method to mitigate Spearphishing via Service (T1566.003)?\nA.  Controlling access to local computer system resources with kernel-level capabilities.\nB.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nC.  The file removal technique deletes malicious artifacts or programs from a computer system.\nD.  File eviction techniques evict files from system storage.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate ASP.NET Misconfiguration: Password in Configuration File (CWE-13)?\nA.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nB.  When storing data in the cloud (e.g., S3 buckets, Azure blobs, Google Cloud Storage, etc.), use the provider's controls to disable public access.\nC.  Increase the entropy used to seed a PRNG.\nD.  Ensure that access control checks are performed related to the business logic. These checks may be different than the access control checks that are applied to more generic resources such as files, connections, processes, memory, and database records. For example, a database may restrict access for medical records to a specific database user, but each record might only be intended to be accessible to the patient and the patient's doctor [REF-7].\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "ASP.NET Misconfiguration: Password in Configuration File (CWE-13)",
      "ddmc_optionA": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmc_optionB": "When storing data in the cloud (e.g., S3 buckets, Azure blobs, Google Cloud Storage, etc.), use the provider's controls to disable public access.",
      "ddmc_optionC": "Increase the entropy used to seed a PRNG.",
      "ddmc_optionD": "Ensure that access control checks are performed related to the business logic. These checks may be different than the access control checks that are applied to more generic resources such as files, connections, processes, memory, and database records. For example, a database may restrict access for medical records to a specific database user, but each record might only be intended to be accessible to the patient and the patient's doctor [REF-7].",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "prompts": [],
      "instruction": "How can you mitigate ASP.NET Misconfiguration: Password in Configuration File (CWE-13)?\nA.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nB.  When storing data in the cloud (e.g., S3 buckets, Azure blobs, Google Cloud Storage, etc.), use the provider's controls to disable public access.\nC.  Increase the entropy used to seed a PRNG.\nD.  Ensure that access control checks are performed related to the business logic. These checks may be different than the access control checks that are applied to more generic resources such as files, connections, processes, memory, and database records. For example, a database may restrict access for medical records to a specific database user, but each record might only be intended to be accessible to the patient and the patient's doctor [REF-7].\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate LSASS Memory (T1003.001)?\nA.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\nB.  Suspending a running process on a computer system.\nC.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nD.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "LSASS Memory (T1003.001)",
      "ddmc_optionA": "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.",
      "ddmc_optionB": "Suspending a running process on a computer system.",
      "ddmc_optionC": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmc_optionD": "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.",
      "prompts": [],
      "instruction": "How can you mitigate LSASS Memory (T1003.001)?\nA.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\nB.  Suspending a running process on a computer system.\nC.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nD.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Domain Accounts (T1078.002)?\nA.  Analyzing a Container Image with respect to a set of policies.\nB.  Restoring a user account's access to resources.\nC.  Credential Eviction techniques disable or remove compromised credentials from a computer network.\nD.  The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Domain Accounts (T1078.002)",
      "ddmc_optionA": "Analyzing a Container Image with respect to a set of policies.",
      "ddmc_optionB": "Restoring a user account's access to resources.",
      "ddmc_optionC": "Credential Eviction techniques disable or remove compromised credentials from a computer network.",
      "ddmc_optionD": "The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Restoring a user account's access to resources.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Domain Accounts (T1078.002)?\nA.  Analyzing a Container Image with respect to a set of policies.\nB.  Restoring a user account's access to resources.\nC.  Credential Eviction techniques disable or remove compromised credentials from a computer network.\nD.  The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Network Trust Dependencies (T1590.003)?\nA.  Detection of a network flood can sometimes be achieved before the traffic volume is sufficient to cause impact to the availability of the service, but such response time typically requires very aggressive monitoring and responsiveness or services provided by an upstream network service provider. Typical network throughput monitoring tools such as netflow, SNMP, and custom scripts can be used to detect sudden increases in network or service utilization. Real-time, automated, and qualitative study of the network traffic can identify a sudden surge in one type of protocol can be used to detect a network flood event as it starts. Often, the lead time may be small and the indicator of an event availability of the network or service drops. The analysis tools mentioned can then be used to determine the type of DoS causing the outage and help with remediation.(Citations: Cisco DoSdetectNetflow)\nB.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\nC.  Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access (ex: Phishing).\nD.  Monitor processes and command-line arguments to see if critical processes are terminated or stop running. Monitor for edits for modifications to services and startup programs that correspond to services of high importance. Look for changes to services that do not correlate with known software, patch cycles, etc. Windows service information is stored in the Registry at <code>HKLM\\SYSTEM\\CurrentControlSet\\Services</code>. Systemd service unit files are stored within the /etc/systemd/system, /usr/lib/systemd/system/, and /home/.config/systemd/user/ directories, as well as associated symbolic links. Alterations to the service binary path or the service startup type changed to disabled may be suspicious. Remote access tools with built-in features may interact directly with the Windows API to perform these functions outside of typical system utilities. For example, <code>ChangeServiceConfigW</code> may be used by an adversary to prevent services from starting.(Citations: Talos Olympic Destroyer 2018)\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Network Trust Dependencies (T1590.003)",
      "ddmc_optionA": "Detection of a network flood can sometimes be achieved before the traffic volume is sufficient to cause impact to the availability of the service, but such response time typically requires very aggressive monitoring and responsiveness or services provided by an upstream network service provider. Typical network throughput monitoring tools such as netflow, SNMP, and custom scripts can be used to detect sudden increases in network or service utilization. Real-time, automated, and qualitative study of the network traffic can identify a sudden surge in one type of protocol can be used to detect a network flood event as it starts. Often, the lead time may be small and the indicator of an event availability of the network or service drops. The analysis tools mentioned can then be used to determine the type of DoS causing the outage and help with remediation.(Citations: Cisco DoSdetectNetflow)",
      "ddmc_optionB": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.",
      "ddmc_optionC": "Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access (ex: Phishing).",
      "ddmc_optionD": "Monitor processes and command-line arguments to see if critical processes are terminated or stop running. Monitor for edits for modifications to services and startup programs that correspond to services of high importance. Look for changes to services that do not correlate with known software, patch cycles, etc. Windows service information is stored in the Registry at <code>HKLM\\SYSTEM\\CurrentControlSet\\Services</code>. Systemd service unit files are stored within the /etc/systemd/system, /usr/lib/systemd/system/, and /home/.config/systemd/user/ directories, as well as associated symbolic links. Alterations to the service binary path or the service startup type changed to disabled may be suspicious. Remote access tools with built-in features may interact directly with the Windows API to perform these functions outside of typical system utilities. For example, <code>ChangeServiceConfigW</code> may be used by an adversary to prevent services from starting.(Citations: Talos Olympic Destroyer 2018)",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.",
      "prompts": [],
      "instruction": "What is a method to detect Network Trust Dependencies (T1590.003)?\nA.  Detection of a network flood can sometimes be achieved before the traffic volume is sufficient to cause impact to the availability of the service, but such response time typically requires very aggressive monitoring and responsiveness or services provided by an upstream network service provider. Typical network throughput monitoring tools such as netflow, SNMP, and custom scripts can be used to detect sudden increases in network or service utilization. Real-time, automated, and qualitative study of the network traffic can identify a sudden surge in one type of protocol can be used to detect a network flood event as it starts. Often, the lead time may be small and the indicator of an event availability of the network or service drops. The analysis tools mentioned can then be used to determine the type of DoS causing the outage and help with remediation.(Citations: Cisco DoSdetectNetflow)\nB.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\nC.  Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access (ex: Phishing).\nD.  Monitor processes and command-line arguments to see if critical processes are terminated or stop running. Monitor for edits for modifications to services and startup programs that correspond to services of high importance. Look for changes to services that do not correlate with known software, patch cycles, etc. Windows service information is stored in the Registry at <code>HKLM\\SYSTEM\\CurrentControlSet\\Services</code>. Systemd service unit files are stored within the /etc/systemd/system, /usr/lib/systemd/system/, and /home/.config/systemd/user/ directories, as well as associated symbolic links. Alterations to the service binary path or the service startup type changed to disabled may be suspicious. Remote access tools with built-in features may interact directly with the Windows API to perform these functions outside of typical system utilities. For example, <code>ChangeServiceConfigW</code> may be used by an adversary to prevent services from starting.(Citations: Talos Olympic Destroyer 2018)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Creation of Temporary File in Directory with Insecure Permissions (CWE-379)?\nA.  Try to store sensitive tempfiles in a directory which is not world readable -- i.e., per-user directories.\nB.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.\nC.  Use techniques such as requiring incrementing, time based and/or challenge response to assure uniqueness of nonces.\nD.  Avoid using wildcards in the cross-domain policy file. Any domain matching the wildcard expression will be implicitly trusted, and can perform two-way interaction with the target server.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Creation of Temporary File in Directory with Insecure Permissions (CWE-379)",
      "ddmc_optionA": "Try to store sensitive tempfiles in a directory which is not world readable -- i.e., per-user directories.",
      "ddmc_optionB": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.",
      "ddmc_optionC": "Use techniques such as requiring incrementing, time based and/or challenge response to assure uniqueness of nonces.",
      "ddmc_optionD": "Avoid using wildcards in the cross-domain policy file. Any domain matching the wildcard expression will be implicitly trusted, and can perform two-way interaction with the target server.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Try to store sensitive tempfiles in a directory which is not world readable -- i.e., per-user directories.",
      "prompts": [],
      "instruction": "How can you mitigate Creation of Temporary File in Directory with Insecure Permissions (CWE-379)?\nA.  Try to store sensitive tempfiles in a directory which is not world readable -- i.e., per-user directories.\nB.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.\nC.  Use techniques such as requiring incrementing, time based and/or challenge response to assure uniqueness of nonces.\nD.  Avoid using wildcards in the cross-domain policy file. Any domain matching the wildcard expression will be implicitly trusted, and can perform two-way interaction with the target server.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1114.003 (Email Forwarding Rule)?\nA.  Replacing old software on a computer system component.\nB.  Modifying an application's configuration to reduce its attack surface.\nC.  Restricting network traffic originating from any location.\nD.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1114.003 (Email Forwarding Rule)",
      "ddmc_optionA": "Replacing old software on a computer system component.",
      "ddmc_optionB": "Modifying an application's configuration to reduce its attack surface.",
      "ddmc_optionC": "Restricting network traffic originating from any location.",
      "ddmc_optionD": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Modifying an application's configuration to reduce its attack surface.",
      "prompts": [],
      "instruction": "How can you mitigate T1114.003 (Email Forwarding Rule)?\nA.  Replacing old software on a computer system component.\nB.  Modifying an application's configuration to reduce its attack surface.\nC.  Restricting network traffic originating from any location.\nD.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Server Software Component (T1505)?\nA.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\nB.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nC.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nD.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Server Software Component (T1505)",
      "ddmc_optionA": "Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.",
      "ddmc_optionB": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_optionC": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
      "ddmc_optionD": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
      "prompts": [],
      "instruction": "How can you mitigate Server Software Component (T1505)?\nA.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\nB.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nC.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nD.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Self-generated Error Message Containing Sensitive Information (CWE-210)?\nA.  In Java, explicitly define final writeObject() to prevent serialization. This is the recommended solution. Define the writeObject() function to throw an exception explicitly denying serialization.\nB.  Avoid using signed variables if you don't need to represent negative values. When negative values are needed, perform validation after you save those values to larger data types, or before passing them to functions that are expecting unsigned values.\nC.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nD.  Force the administrator to change the credential upon installation.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Self-generated Error Message Containing Sensitive Information (CWE-210)",
      "ddmc_optionA": "In Java, explicitly define final writeObject() to prevent serialization. This is the recommended solution. Define the writeObject() function to throw an exception explicitly denying serialization.",
      "ddmc_optionB": "Avoid using signed variables if you don't need to represent negative values. When negative values are needed, perform validation after you save those values to larger data types, or before passing them to functions that are expecting unsigned values.",
      "ddmc_optionC": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmc_optionD": "Force the administrator to change the credential upon installation.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Avoid using signed variables if you don't need to represent negative values. When negative values are needed, perform validation after you save those values to larger data types, or before passing them to functions that are expecting unsigned values.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Self-generated Error Message Containing Sensitive Information (CWE-210)?\nA.  In Java, explicitly define final writeObject() to prevent serialization. This is the recommended solution. Define the writeObject() function to throw an exception explicitly denying serialization.\nB.  Avoid using signed variables if you don't need to represent negative values. When negative values are needed, perform validation after you save those values to larger data types, or before passing them to functions that are expecting unsigned values.\nC.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nD.  Force the administrator to change the credential upon installation.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect T1498 (Network Denial of Service)?\nA.  Detection of Network DoS can sometimes be achieved before the traffic volume is sufficient to cause impact to the availability of the service, but such response time typically requires very aggressive monitoring and responsiveness or services provided by an upstream network service provider. Typical network throughput monitoring tools such as netflow, SNMP, and custom scripts can be used to detect sudden increases in network or service utilization. Real-time, automated, and qualitative study of the network traffic can identify a sudden surge in one type of protocol can be used to detect an Network DoS event as it starts. Often, the lead time may be small and the indicator of an event availability of the network or service drops. The analysis tools mentioned can then be used to determine the type of DoS causing the outage and help with remediation.(Citations: Cisco DoSdetectNetflow)\nB.  Monitor process and command-line parameters of <code>vaultcmd.exe</code> for suspicious activity, such as listing credentials from the Windows Credentials locker (i.e., <code>vaultcmd /listcreds:\u201cWindows Credentials\u201d</code>). Consider monitoring API calls such as <code>CredEnumerateA</code> that may list credentials from the Windows Credential Manager. Consider monitoring file reads to Vault locations, <code>%Systemdrive%\\Users\\\\[Username]\\AppData\\Local\\Microsoft\\\\[Vault/Credentials]\\</code>, for suspicious activity.(Citations: Malwarebytes The Windows Vault, Microsoft CredEnumerate, Delpy Mimikatz Crendential Manager, Malwarebytes The Windows Vault)\nC.  Use process monitoring to monitor the execution and arguments of Regsvcs.exe and Regasm.exe. Compare recent invocations of Regsvcs.exe and Regasm.exe with prior history of known good arguments and executed binaries to determine anomalous and potentially adversarial activity. Command arguments used before and after Regsvcs.exe or Regasm.exe invocation may also be useful in determining the origin and purpose of the binary being executed.\nD.  Monitor for changes to Registry keys associated with <code>ServiceDll</code> and other subkey values under <code>HKLM\\System\\CurrentControlSet\\services\\TermService\\Parameters\\</code>. Monitor unexpected changes and/or interactions with <code>termsrv.dll</code>, which is typically stored in <code>%SystemRoot%\\System32\\</code>. Monitor commands as well as processes and arguments for potential adversary actions to modify Registry values (ex: <code>reg.exe</code>) or modify/replace the legitimate <code>termsrv.dll</code>. Monitor module loads by the Terminal Services process (ex: <code>svchost.exe -k termsvcs</code>) for unexpected DLLs (the default is <code>%SystemRoot%\\System32\\termsrv.dll</code>, though an adversary could also use Match Legitimate Name or Location on a malicious payload).\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "T1498 (Network Denial of Service)",
      "ddmc_optionA": "Detection of Network DoS can sometimes be achieved before the traffic volume is sufficient to cause impact to the availability of the service, but such response time typically requires very aggressive monitoring and responsiveness or services provided by an upstream network service provider. Typical network throughput monitoring tools such as netflow, SNMP, and custom scripts can be used to detect sudden increases in network or service utilization. Real-time, automated, and qualitative study of the network traffic can identify a sudden surge in one type of protocol can be used to detect an Network DoS event as it starts. Often, the lead time may be small and the indicator of an event availability of the network or service drops. The analysis tools mentioned can then be used to determine the type of DoS causing the outage and help with remediation.(Citations: Cisco DoSdetectNetflow)",
      "ddmc_optionB": "Monitor process and command-line parameters of <code>vaultcmd.exe</code> for suspicious activity, such as listing credentials from the Windows Credentials locker (i.e., <code>vaultcmd /listcreds:\u201cWindows Credentials\u201d</code>). Consider monitoring API calls such as <code>CredEnumerateA</code> that may list credentials from the Windows Credential Manager. Consider monitoring file reads to Vault locations, <code>%Systemdrive%\\Users\\\\[Username]\\AppData\\Local\\Microsoft\\\\[Vault/Credentials]\\</code>, for suspicious activity.(Citations: Malwarebytes The Windows Vault, Microsoft CredEnumerate, Delpy Mimikatz Crendential Manager, Malwarebytes The Windows Vault)",
      "ddmc_optionC": "Use process monitoring to monitor the execution and arguments of Regsvcs.exe and Regasm.exe. Compare recent invocations of Regsvcs.exe and Regasm.exe with prior history of known good arguments and executed binaries to determine anomalous and potentially adversarial activity. Command arguments used before and after Regsvcs.exe or Regasm.exe invocation may also be useful in determining the origin and purpose of the binary being executed.",
      "ddmc_optionD": "Monitor for changes to Registry keys associated with <code>ServiceDll</code> and other subkey values under <code>HKLM\\System\\CurrentControlSet\\services\\TermService\\Parameters\\</code>. Monitor unexpected changes and/or interactions with <code>termsrv.dll</code>, which is typically stored in <code>%SystemRoot%\\System32\\</code>. Monitor commands as well as processes and arguments for potential adversary actions to modify Registry values (ex: <code>reg.exe</code>) or modify/replace the legitimate <code>termsrv.dll</code>. Monitor module loads by the Terminal Services process (ex: <code>svchost.exe -k termsvcs</code>) for unexpected DLLs (the default is <code>%SystemRoot%\\System32\\termsrv.dll</code>, though an adversary could also use Match Legitimate Name or Location on a malicious payload).",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Detection of Network DoS can sometimes be achieved before the traffic volume is sufficient to cause impact to the availability of the service, but such response time typically requires very aggressive monitoring and responsiveness or services provided by an upstream network service provider. Typical network throughput monitoring tools such as netflow, SNMP, and custom scripts can be used to detect sudden increases in network or service utilization. Real-time, automated, and qualitative study of the network traffic can identify a sudden surge in one type of protocol can be used to detect an Network DoS event as it starts. Often, the lead time may be small and the indicator of an event availability of the network or service drops. The analysis tools mentioned can then be used to determine the type of DoS causing the outage and help with remediation.(Citations: Cisco DoSdetectNetflow)",
      "prompts": [],
      "instruction": "How can you detect T1498 (Network Denial of Service)?\nA.  Detection of Network DoS can sometimes be achieved before the traffic volume is sufficient to cause impact to the availability of the service, but such response time typically requires very aggressive monitoring and responsiveness or services provided by an upstream network service provider. Typical network throughput monitoring tools such as netflow, SNMP, and custom scripts can be used to detect sudden increases in network or service utilization. Real-time, automated, and qualitative study of the network traffic can identify a sudden surge in one type of protocol can be used to detect an Network DoS event as it starts. Often, the lead time may be small and the indicator of an event availability of the network or service drops. The analysis tools mentioned can then be used to determine the type of DoS causing the outage and help with remediation.(Citations: Cisco DoSdetectNetflow)\nB.  Monitor process and command-line parameters of <code>vaultcmd.exe</code> for suspicious activity, such as listing credentials from the Windows Credentials locker (i.e., <code>vaultcmd /listcreds:\u201cWindows Credentials\u201d</code>). Consider monitoring API calls such as <code>CredEnumerateA</code> that may list credentials from the Windows Credential Manager. Consider monitoring file reads to Vault locations, <code>%Systemdrive%\\Users\\\\[Username]\\AppData\\Local\\Microsoft\\\\[Vault/Credentials]\\</code>, for suspicious activity.(Citations: Malwarebytes The Windows Vault, Microsoft CredEnumerate, Delpy Mimikatz Crendential Manager, Malwarebytes The Windows Vault)\nC.  Use process monitoring to monitor the execution and arguments of Regsvcs.exe and Regasm.exe. Compare recent invocations of Regsvcs.exe and Regasm.exe with prior history of known good arguments and executed binaries to determine anomalous and potentially adversarial activity. Command arguments used before and after Regsvcs.exe or Regasm.exe invocation may also be useful in determining the origin and purpose of the binary being executed.\nD.  Monitor for changes to Registry keys associated with <code>ServiceDll</code> and other subkey values under <code>HKLM\\System\\CurrentControlSet\\services\\TermService\\Parameters\\</code>. Monitor unexpected changes and/or interactions with <code>termsrv.dll</code>, which is typically stored in <code>%SystemRoot%\\System32\\</code>. Monitor commands as well as processes and arguments for potential adversary actions to modify Registry values (ex: <code>reg.exe</code>) or modify/replace the legitimate <code>termsrv.dll</code>. Monitor module loads by the Terminal Services process (ex: <code>svchost.exe -k termsvcs</code>) for unexpected DLLs (the default is <code>%SystemRoot%\\System32\\termsrv.dll</code>, though an adversary could also use Match Legitimate Name or Location on a malicious payload).\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect Cloud Accounts (T1586.003)?\nA.  Internet scanners may be used to look for patterns associated with malicious content designed to collect host software information from visitors. Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.(Citations: ThreatConnect Infrastructure Dec 2020, ATT ScanBox)\nB.  Monitor files, processes, and command-line arguments for actions indicative of hidden artifacts. Monitor event and authentication logs for records of hidden artifacts being used. Monitor the file system and shell commands for hidden attribute usage.\nC.  Monitor for changes to Registry keys associated with <code>ServiceDll</code> and other subkey values under <code>HKLM\\System\\CurrentControlSet\\services\\TermService\\Parameters\\</code>. Monitor unexpected changes and/or interactions with <code>termsrv.dll</code>, which is typically stored in <code>%SystemRoot%\\System32\\</code>. Monitor commands as well as processes and arguments for potential adversary actions to modify Registry values (ex: <code>reg.exe</code>) or modify/replace the legitimate <code>termsrv.dll</code>. Monitor module loads by the Terminal Services process (ex: <code>svchost.exe -k termsvcs</code>) for unexpected DLLs (the default is <code>%SystemRoot%\\System32\\termsrv.dll</code>, though an adversary could also use Match Legitimate Name or Location on a malicious payload).\nD.  Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during exfiltration (ex: Transfer Data to Cloud Account).\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Cloud Accounts (T1586.003)",
      "ddmc_optionA": "Internet scanners may be used to look for patterns associated with malicious content designed to collect host software information from visitors. Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.(Citations: ThreatConnect Infrastructure Dec 2020, ATT ScanBox)",
      "ddmc_optionB": "Monitor files, processes, and command-line arguments for actions indicative of hidden artifacts. Monitor event and authentication logs for records of hidden artifacts being used. Monitor the file system and shell commands for hidden attribute usage.",
      "ddmc_optionC": "Monitor for changes to Registry keys associated with <code>ServiceDll</code> and other subkey values under <code>HKLM\\System\\CurrentControlSet\\services\\TermService\\Parameters\\</code>. Monitor unexpected changes and/or interactions with <code>termsrv.dll</code>, which is typically stored in <code>%SystemRoot%\\System32\\</code>. Monitor commands as well as processes and arguments for potential adversary actions to modify Registry values (ex: <code>reg.exe</code>) or modify/replace the legitimate <code>termsrv.dll</code>. Monitor module loads by the Terminal Services process (ex: <code>svchost.exe -k termsvcs</code>) for unexpected DLLs (the default is <code>%SystemRoot%\\System32\\termsrv.dll</code>, though an adversary could also use Match Legitimate Name or Location on a malicious payload).",
      "ddmc_optionD": "Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during exfiltration (ex: Transfer Data to Cloud Account).",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during exfiltration (ex: Transfer Data to Cloud Account).",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect Cloud Accounts (T1586.003)?\nA.  Internet scanners may be used to look for patterns associated with malicious content designed to collect host software information from visitors. Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.(Citations: ThreatConnect Infrastructure Dec 2020, ATT ScanBox)\nB.  Monitor files, processes, and command-line arguments for actions indicative of hidden artifacts. Monitor event and authentication logs for records of hidden artifacts being used. Monitor the file system and shell commands for hidden attribute usage.\nC.  Monitor for changes to Registry keys associated with <code>ServiceDll</code> and other subkey values under <code>HKLM\\System\\CurrentControlSet\\services\\TermService\\Parameters\\</code>. Monitor unexpected changes and/or interactions with <code>termsrv.dll</code>, which is typically stored in <code>%SystemRoot%\\System32\\</code>. Monitor commands as well as processes and arguments for potential adversary actions to modify Registry values (ex: <code>reg.exe</code>) or modify/replace the legitimate <code>termsrv.dll</code>. Monitor module loads by the Terminal Services process (ex: <code>svchost.exe -k termsvcs</code>) for unexpected DLLs (the default is <code>%SystemRoot%\\System32\\termsrv.dll</code>, though an adversary could also use Match Legitimate Name or Location on a malicious payload).\nD.  Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during exfiltration (ex: Transfer Data to Cloud Account).\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1597.002 (Purchase Technical Data)?\nA.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nB.  Block users or groups from installing unapproved software.\nC.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nD.  Make configuration changes related to the operating system or a common feature of the operating system that result in system hardening against techniques.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1597.002 (Purchase Technical Data)",
      "ddmc_optionA": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmc_optionB": "Block users or groups from installing unapproved software.",
      "ddmc_optionC": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmc_optionD": "Make configuration changes related to the operating system or a common feature of the operating system that result in system hardening against techniques.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "prompts": [],
      "instruction": "How can you mitigate T1597.002 (Purchase Technical Data)?\nA.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nB.  Block users or groups from installing unapproved software.\nC.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nD.  Make configuration changes related to the operating system or a common feature of the operating system that result in system hardening against techniques.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate CWE-352 (Cross-Site Request Forgery (CSRF))?\nA.  Logic should be designed in a way that blown fuses do not put the product into an insecure state that can be leveraged by an attacker.\nB.  Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, use anti-CSRF packages such as the OWASP CSRFGuard. [REF-330] Another example is the ESAPI Session Management control, which includes a component for CSRF. [REF-45]\nC.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nD.  Access-control-policy protections must be reviewed for design inconsistency and common weaknesses. Access-control-policy definition and programming flow must be tested in pre-silicon, post-silicon testing.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CWE-352 (Cross-Site Request Forgery (CSRF))",
      "ddmc_optionA": "Logic should be designed in a way that blown fuses do not put the product into an insecure state that can be leveraged by an attacker.",
      "ddmc_optionB": "Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, use anti-CSRF packages such as the OWASP CSRFGuard. [REF-330] Another example is the ESAPI Session Management control, which includes a component for CSRF. [REF-45]",
      "ddmc_optionC": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmc_optionD": "Access-control-policy protections must be reviewed for design inconsistency and common weaknesses. Access-control-policy definition and programming flow must be tested in pre-silicon, post-silicon testing.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, use anti-CSRF packages such as the OWASP CSRFGuard. [REF-330] Another example is the ESAPI Session Management control, which includes a component for CSRF. [REF-45]",
      "prompts": [],
      "instruction": "How can you mitigate CWE-352 (Cross-Site Request Forgery (CSRF))?\nA.  Logic should be designed in a way that blown fuses do not put the product into an insecure state that can be leveraged by an attacker.\nB.  Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, use anti-CSRF packages such as the OWASP CSRFGuard. [REF-330] Another example is the ESAPI Session Management control, which includes a component for CSRF. [REF-45]\nC.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nD.  Access-control-policy protections must be reviewed for design inconsistency and common weaknesses. Access-control-policy definition and programming flow must be tested in pre-silicon, post-silicon testing.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Match Legitimate Name or Location (T1036.005)?\nA.  Employing a pattern matching algorithm to statically analyze the content of files.\nB.  A Credential created for the purpose of deceiving an adversary.\nC.  The file removal technique deletes malicious artifacts or programs from a computer system.\nD.  File eviction techniques evict files from system storage.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Match Legitimate Name or Location (T1036.005)",
      "ddmc_optionA": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_optionB": "A Credential created for the purpose of deceiving an adversary.",
      "ddmc_optionC": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "ddmc_optionD": "File eviction techniques evict files from system storage.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "File eviction techniques evict files from system storage.",
      "prompts": [],
      "instruction": "What is a method to mitigate Match Legitimate Name or Location (T1036.005)?\nA.  Employing a pattern matching algorithm to statically analyze the content of files.\nB.  A Credential created for the purpose of deceiving an adversary.\nC.  The file removal technique deletes malicious artifacts or programs from a computer system.\nD.  File eviction techniques evict files from system storage.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Phishing for Information (T1598)?\nA.  Monitor and analyze logs from host-based detection mechanisms, such as Sysmon, for events such as process creations that include or are resulting from parameters associated with invoking programs/commands/files and/or spawning child processes/network connections. (Citations: RSA Forfiles Aug 2017)\nB.  All login items created via shared file lists are viewable by using the System Preferences GUI or in the <code>~/Library/Application Support/com.apple.backgroundtaskmanagementagent/backgrounditems.btm</code> file. These locations should be monitored and audited for known good applications. Otherwise, login Items are located in <code>Contents/Library/LoginItems</code> within an application bundle, so these paths should be monitored as well. Monitor applications that leverage login items with either the LSUIElement or LSBackgroundOnly key in the Info.plist file set to true. Monitor processes that start at login for unusual or unknown applications. Usual applications for login items could include what users add to configure their user environment, such as email, chat, or music applications, or what administrators include for organization settings and protections. Check for running applications from login items that also have abnormal behavior,, such as establishing network connections.(Citations: Open Login Items Apple, Startup Items Eclectic, objsee block blocking login items, sentinelone macos persist Jun 2019, Adding Login Items, Adding Login Items, Launch Service Keys Developer Apple)\nC.  Monitor processes and command-line arguments for program execution that may be indicative of credential dumping. Remote access tools may contain built-in features or incorporate existing tools like Mimikatz. PowerShell scripts also exist that contain credential dumping functionality, such as PowerSploit's Invoke-Mimikatz module, which may require additional logging features to be configured in the operating system to collect necessary information for analysis.(Citations: Powersploit)\nD.  Depending on the specific method of phishing, the detections can vary. Monitor for suspicious email activity, such as numerous accounts receiving messages from a single unusual/unknown sender. Filtering based on DKIM+SPF or header analysis can help detect when the email sender is spoofed. When it comes to following links, monitor for references to uncategorized or known-bad sites. URL inspection within email (including expanding shortened links) can also help detect links leading to known malicious sites. Monitor social media traffic for suspicious activity, including messages requesting information as well as abnormal file or data transfers (especially those involving unknown, or otherwise suspicious accounts).(Citations: Microsoft Anti Spoofing, ACSC Email Spoofing)\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Phishing for Information (T1598)",
      "ddmc_optionA": "Monitor and analyze logs from host-based detection mechanisms, such as Sysmon, for events such as process creations that include or are resulting from parameters associated with invoking programs/commands/files and/or spawning child processes/network connections. (Citations: RSA Forfiles Aug 2017)",
      "ddmc_optionB": "All login items created via shared file lists are viewable by using the System Preferences GUI or in the <code>~/Library/Application Support/com.apple.backgroundtaskmanagementagent/backgrounditems.btm</code> file. These locations should be monitored and audited for known good applications. Otherwise, login Items are located in <code>Contents/Library/LoginItems</code> within an application bundle, so these paths should be monitored as well. Monitor applications that leverage login items with either the LSUIElement or LSBackgroundOnly key in the Info.plist file set to true. Monitor processes that start at login for unusual or unknown applications. Usual applications for login items could include what users add to configure their user environment, such as email, chat, or music applications, or what administrators include for organization settings and protections. Check for running applications from login items that also have abnormal behavior,, such as establishing network connections.(Citations: Open Login Items Apple, Startup Items Eclectic, objsee block blocking login items, sentinelone macos persist Jun 2019, Adding Login Items, Adding Login Items, Launch Service Keys Developer Apple)",
      "ddmc_optionC": "Monitor processes and command-line arguments for program execution that may be indicative of credential dumping. Remote access tools may contain built-in features or incorporate existing tools like Mimikatz. PowerShell scripts also exist that contain credential dumping functionality, such as PowerSploit's Invoke-Mimikatz module, which may require additional logging features to be configured in the operating system to collect necessary information for analysis.(Citations: Powersploit)",
      "ddmc_optionD": "Depending on the specific method of phishing, the detections can vary. Monitor for suspicious email activity, such as numerous accounts receiving messages from a single unusual/unknown sender. Filtering based on DKIM+SPF or header analysis can help detect when the email sender is spoofed. When it comes to following links, monitor for references to uncategorized or known-bad sites. URL inspection within email (including expanding shortened links) can also help detect links leading to known malicious sites. Monitor social media traffic for suspicious activity, including messages requesting information as well as abnormal file or data transfers (especially those involving unknown, or otherwise suspicious accounts).(Citations: Microsoft Anti Spoofing, ACSC Email Spoofing)",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Depending on the specific method of phishing, the detections can vary. Monitor for suspicious email activity, such as numerous accounts receiving messages from a single unusual/unknown sender. Filtering based on DKIM+SPF or header analysis can help detect when the email sender is spoofed. When it comes to following links, monitor for references to uncategorized or known-bad sites. URL inspection within email (including expanding shortened links) can also help detect links leading to known malicious sites. Monitor social media traffic for suspicious activity, including messages requesting information as well as abnormal file or data transfers (especially those involving unknown, or otherwise suspicious accounts).(Citations: Microsoft Anti Spoofing, ACSC Email Spoofing)",
      "prompts": [],
      "instruction": "What is a method to detect Phishing for Information (T1598)?\nA.  Monitor and analyze logs from host-based detection mechanisms, such as Sysmon, for events such as process creations that include or are resulting from parameters associated with invoking programs/commands/files and/or spawning child processes/network connections. (Citations: RSA Forfiles Aug 2017)\nB.  All login items created via shared file lists are viewable by using the System Preferences GUI or in the <code>~/Library/Application Support/com.apple.backgroundtaskmanagementagent/backgrounditems.btm</code> file. These locations should be monitored and audited for known good applications. Otherwise, login Items are located in <code>Contents/Library/LoginItems</code> within an application bundle, so these paths should be monitored as well. Monitor applications that leverage login items with either the LSUIElement or LSBackgroundOnly key in the Info.plist file set to true. Monitor processes that start at login for unusual or unknown applications. Usual applications for login items could include what users add to configure their user environment, such as email, chat, or music applications, or what administrators include for organization settings and protections. Check for running applications from login items that also have abnormal behavior,, such as establishing network connections.(Citations: Open Login Items Apple, Startup Items Eclectic, objsee block blocking login items, sentinelone macos persist Jun 2019, Adding Login Items, Adding Login Items, Launch Service Keys Developer Apple)\nC.  Monitor processes and command-line arguments for program execution that may be indicative of credential dumping. Remote access tools may contain built-in features or incorporate existing tools like Mimikatz. PowerShell scripts also exist that contain credential dumping functionality, such as PowerSploit's Invoke-Mimikatz module, which may require additional logging features to be configured in the operating system to collect necessary information for analysis.(Citations: Powersploit)\nD.  Depending on the specific method of phishing, the detections can vary. Monitor for suspicious email activity, such as numerous accounts receiving messages from a single unusual/unknown sender. Filtering based on DKIM+SPF or header analysis can help detect when the email sender is spoofed. When it comes to following links, monitor for references to uncategorized or known-bad sites. URL inspection within email (including expanding shortened links) can also help detect links leading to known malicious sites. Monitor social media traffic for suspicious activity, including messages requesting information as well as abnormal file or data transfers (especially those involving unknown, or otherwise suspicious accounts).(Citations: Microsoft Anti Spoofing, ACSC Email Spoofing)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Improper Prevention of Lock Bit Modification (CWE-1231)?\nA.  Force the administrator to change the credential upon installation.\nB.  Security lock bit protections must be reviewed for design inconsistency and common weaknesses. Security lock programming flow and lock properties must be tested in pre-silicon and post-silicon testing.\nC.  During hardware design all register write-once or sticky fields must be evaluated for proper configuration.\nD.  Do not expose sensitive error information to the user.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Prevention of Lock Bit Modification (CWE-1231)",
      "ddmc_optionA": "Force the administrator to change the credential upon installation.",
      "ddmc_optionB": "Security lock bit protections must be reviewed for design inconsistency and common weaknesses. Security lock programming flow and lock properties must be tested in pre-silicon and post-silicon testing.",
      "ddmc_optionC": "During hardware design all register write-once or sticky fields must be evaluated for proper configuration.",
      "ddmc_optionD": "Do not expose sensitive error information to the user.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Security lock bit protections must be reviewed for design inconsistency and common weaknesses. Security lock programming flow and lock properties must be tested in pre-silicon and post-silicon testing.",
      "prompts": [],
      "instruction": "How can you mitigate Improper Prevention of Lock Bit Modification (CWE-1231)?\nA.  Force the administrator to change the credential upon installation.\nB.  Security lock bit protections must be reviewed for design inconsistency and common weaknesses. Security lock programming flow and lock properties must be tested in pre-silicon and post-silicon testing.\nC.  During hardware design all register write-once or sticky fields must be evaluated for proper configuration.\nD.  Do not expose sensitive error information to the user.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Deobfuscate/Decode Files or Information (T1140)?\nA.  Employing file hash comparisons to detect known malware.\nB.  The email removal technique deletes email files from system storage.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  Restoring a file for an entity to access.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Deobfuscate/Decode Files or Information (T1140)",
      "ddmc_optionA": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionB": "The email removal technique deletes email files from system storage.",
      "ddmc_optionC": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionD": "Restoring a file for an entity to access.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Employing file hash comparisons to detect known malware.",
      "prompts": [],
      "instruction": "What is a method to mitigate Deobfuscate/Decode Files or Information (T1140)?\nA.  Employing file hash comparisons to detect known malware.\nB.  The email removal technique deletes email files from system storage.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  Restoring a file for an entity to access.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Improper Enforcement of Message Integrity During Transmission in a Communication Channel (CWE-924)?\nA.  Pay close attention to complex conditionals that affect initialization, since some branches might not perform the initialization.\nB.  Use static analysis tools to spot return of the address of a stack variable.\nC.  A true random number generator should be implemented for cryptographic algorithms.\nD.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Enforcement of Message Integrity During Transmission in a Communication Channel (CWE-924)",
      "ddmc_optionA": "Pay close attention to complex conditionals that affect initialization, since some branches might not perform the initialization.",
      "ddmc_optionB": "Use static analysis tools to spot return of the address of a stack variable.",
      "ddmc_optionC": "A true random number generator should be implemented for cryptographic algorithms.",
      "ddmc_optionD": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Pay close attention to complex conditionals that affect initialization, since some branches might not perform the initialization.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Improper Enforcement of Message Integrity During Transmission in a Communication Channel (CWE-924)?\nA.  Pay close attention to complex conditionals that affect initialization, since some branches might not perform the initialization.\nB.  Use static analysis tools to spot return of the address of a stack variable.\nC.  A true random number generator should be implemented for cryptographic algorithms.\nD.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate COR_PROFILER (T1574.012)?\nA.  Replacing old software on a computer system component.\nB.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  Restoring a file for an entity to access.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "COR_PROFILER (T1574.012)",
      "ddmc_optionA": "Replacing old software on a computer system component.",
      "ddmc_optionB": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_optionC": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionD": "Restoring a file for an entity to access.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate COR_PROFILER (T1574.012)?\nA.  Replacing old software on a computer system component.\nB.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  Restoring a file for an entity to access.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Archive via Utility (T1560.001)?\nA.  Replacing old software on a computer system component.\nB.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  Emulating instructions in a file looking for specific patterns.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Archive via Utility (T1560.001)",
      "ddmc_optionA": "Replacing old software on a computer system component.",
      "ddmc_optionB": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_optionC": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionD": "Emulating instructions in a file looking for specific patterns.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "prompts": [],
      "instruction": "How can you mitigate Archive via Utility (T1560.001)?\nA.  Replacing old software on a computer system component.\nB.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  Emulating instructions in a file looking for specific patterns.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Uninitialized Value on Reset for Registers Holding Security Settings (CWE-1271)?\nA.  Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations. Specifically, follow the principle of least privilege when creating user accounts to a SQL database. The database users should only have the minimum privileges necessary to use their account. If the requirements of the system indicate that a user can read and modify their own data, then limit their privileges so they cannot read/write others' data. Use the strictest permissions possible on all database objects, such as execute-only for stored procedures.\nB.  All registers holding security-critical information should be set to a specific value on reset.\nC.  Remove or restrict all environment settings before invoking other programs. This includes the PATH environment variable, LD_LIBRARY_PATH, and other settings that identify the location of code libraries, and any application-specific search paths.\nD.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Uninitialized Value on Reset for Registers Holding Security Settings (CWE-1271)",
      "ddmc_optionA": "Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations. Specifically, follow the principle of least privilege when creating user accounts to a SQL database. The database users should only have the minimum privileges necessary to use their account. If the requirements of the system indicate that a user can read and modify their own data, then limit their privileges so they cannot read/write others' data. Use the strictest permissions possible on all database objects, such as execute-only for stored procedures.",
      "ddmc_optionB": "All registers holding security-critical information should be set to a specific value on reset.",
      "ddmc_optionC": "Remove or restrict all environment settings before invoking other programs. This includes the PATH environment variable, LD_LIBRARY_PATH, and other settings that identify the location of code libraries, and any application-specific search paths.",
      "ddmc_optionD": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "All registers holding security-critical information should be set to a specific value on reset.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Uninitialized Value on Reset for Registers Holding Security Settings (CWE-1271)?\nA.  Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations. Specifically, follow the principle of least privilege when creating user accounts to a SQL database. The database users should only have the minimum privileges necessary to use their account. If the requirements of the system indicate that a user can read and modify their own data, then limit their privileges so they cannot read/write others' data. Use the strictest permissions possible on all database objects, such as execute-only for stored procedures.\nB.  All registers holding security-critical information should be set to a specific value on reset.\nC.  Remove or restrict all environment settings before invoking other programs. This includes the PATH environment variable, LD_LIBRARY_PATH, and other settings that identify the location of code libraries, and any application-specific search paths.\nD.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Rootkit (T1014)?\nA.  Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.\nB.  A file created for the purposes of deceiving an adversary.\nC.  A file created for the purposes of deceiving an adversary.\nD.  Restoring an software configuration.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Rootkit (T1014)",
      "ddmc_optionA": "Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.",
      "ddmc_optionB": "A file created for the purposes of deceiving an adversary.",
      "ddmc_optionC": "A file created for the purposes of deceiving an adversary.",
      "ddmc_optionD": "Restoring an software configuration.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "A file created for the purposes of deceiving an adversary.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Rootkit (T1014)?\nA.  Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.\nB.  A file created for the purposes of deceiving an adversary.\nC.  A file created for the purposes of deceiving an adversary.\nD.  Restoring an software configuration.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate System Time Discovery (T1124)?\nA.  Configuring a kernel to use an allow or deny list to filter kernel api calls.\nB.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nC.  Removing tokens or credentials from an authentication cache to prevent further user associated account accesses.\nD.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "System Time Discovery (T1124)",
      "ddmc_optionA": "Configuring a kernel to use an allow or deny list to filter kernel api calls.",
      "ddmc_optionB": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_optionC": "Removing tokens or credentials from an authentication cache to prevent further user associated account accesses.",
      "ddmc_optionD": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Configuring a kernel to use an allow or deny list to filter kernel api calls.",
      "prompts": [],
      "instruction": "How can you mitigate System Time Discovery (T1124)?\nA.  Configuring a kernel to use an allow or deny list to filter kernel api calls.\nB.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nC.  Removing tokens or credentials from an authentication cache to prevent further user associated account accesses.\nD.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate File and Directory Permissions Modification (T1222)?\nA.  Restricting network traffic originating from a private host or enclave destined towards untrusted networks.\nB.  Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.\nC.  Network mapping encompasses the techniques to identify and model the physical layer, network layer, and data exchange layers of the organization's network and their physical location, and determine allowed pathways through that network.\nD.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "File and Directory Permissions Modification (T1222)",
      "ddmc_optionA": "Restricting network traffic originating from a private host or enclave destined towards untrusted networks.",
      "ddmc_optionB": "Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.",
      "ddmc_optionC": "Network mapping encompasses the techniques to identify and model the physical layer, network layer, and data exchange layers of the organization's network and their physical location, and determine allowed pathways through that network.",
      "ddmc_optionD": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Network mapping encompasses the techniques to identify and model the physical layer, network layer, and data exchange layers of the organization's network and their physical location, and determine allowed pathways through that network.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate File and Directory Permissions Modification (T1222)?\nA.  Restricting network traffic originating from a private host or enclave destined towards untrusted networks.\nB.  Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.\nC.  Network mapping encompasses the techniques to identify and model the physical layer, network layer, and data exchange layers of the organization's network and their physical location, and determine allowed pathways through that network.\nD.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Taint Shared Content (T1080)?\nA.  Deploying a network resource for the purposes of deceiving an adversary.\nB.  Restricting network traffic originating from any location.\nC.  File eviction techniques evict files from system storage.\nD.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Taint Shared Content (T1080)",
      "ddmc_optionA": "Deploying a network resource for the purposes of deceiving an adversary.",
      "ddmc_optionB": "Restricting network traffic originating from any location.",
      "ddmc_optionC": "File eviction techniques evict files from system storage.",
      "ddmc_optionD": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Deploying a network resource for the purposes of deceiving an adversary.",
      "prompts": [],
      "instruction": "How can you mitigate Taint Shared Content (T1080)?\nA.  Deploying a network resource for the purposes of deceiving an adversary.\nB.  Restricting network traffic originating from any location.\nC.  File eviction techniques evict files from system storage.\nD.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate XQuery Injection (CAPEC-84)?\nA.  For security reasons, a UTF-8 decoder must not accept UTF-8 sequences that are longer than necessary to encode a character. If you use a parser to decode the UTF-8 encoding, make sure that parser filter the invalid UTF-8 characters (invalid forms or overlong forms).\nB.  Design: Perform input allowlist validation on all XML input\nC.  Digitize documents and cryptographically sign them to verify authenticity.\nD.  Ensure immutable code or data is programmed into ROM or write-once memory.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "XQuery Injection (CAPEC-84)",
      "ddmc_optionA": "For security reasons, a UTF-8 decoder must not accept UTF-8 sequences that are longer than necessary to encode a character. If you use a parser to decode the UTF-8 encoding, make sure that parser filter the invalid UTF-8 characters (invalid forms or overlong forms).",
      "ddmc_optionB": "Design: Perform input allowlist validation on all XML input",
      "ddmc_optionC": "Digitize documents and cryptographically sign them to verify authenticity.",
      "ddmc_optionD": "Ensure immutable code or data is programmed into ROM or write-once memory.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Design: Perform input allowlist validation on all XML input",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate XQuery Injection (CAPEC-84)?\nA.  For security reasons, a UTF-8 decoder must not accept UTF-8 sequences that are longer than necessary to encode a character. If you use a parser to decode the UTF-8 encoding, make sure that parser filter the invalid UTF-8 characters (invalid forms or overlong forms).\nB.  Design: Perform input allowlist validation on all XML input\nC.  Digitize documents and cryptographically sign them to verify authenticity.\nD.  Ensure immutable code or data is programmed into ROM or write-once memory.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Keychain (T1555.001)?\nA.  Restricting network traffic originating from a private host or enclave destined towards untrusted networks.\nB.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\nC.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\nD.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Keychain (T1555.001)",
      "ddmc_optionA": "Restricting network traffic originating from a private host or enclave destined towards untrusted networks.",
      "ddmc_optionB": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmc_optionC": "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.",
      "ddmc_optionD": "Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.",
      "prompts": [],
      "instruction": "What is a method to mitigate Keychain (T1555.001)?\nA.  Restricting network traffic originating from a private host or enclave destined towards untrusted networks.\nB.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\nC.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\nD.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate CAPEC-652 (Use of Known Kerberos Credentials)?\nA.  Maintain a highly secure build and update infrastructure by immediately applying security patches for OS and software, implementing mandatory integrity controls to ensure only trusted tools run, and requiring multi-factor authentication for admins.\nB.  Maintain backups of the document for recovery and verification.\nC.  Create a strong password policy and ensure that your system enforces this policy for Kerberos service accounts.\nD.  Use fuzz testing during the software QA process to uncover any surprises, uncover any assumptions or unexpected behavior.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CAPEC-652 (Use of Known Kerberos Credentials)",
      "ddmc_optionA": "Maintain a highly secure build and update infrastructure by immediately applying security patches for OS and software, implementing mandatory integrity controls to ensure only trusted tools run, and requiring multi-factor authentication for admins.",
      "ddmc_optionB": "Maintain backups of the document for recovery and verification.",
      "ddmc_optionC": "Create a strong password policy and ensure that your system enforces this policy for Kerberos service accounts.",
      "ddmc_optionD": "Use fuzz testing during the software QA process to uncover any surprises, uncover any assumptions or unexpected behavior.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Create a strong password policy and ensure that your system enforces this policy for Kerberos service accounts.",
      "prompts": [],
      "instruction": "How can you mitigate CAPEC-652 (Use of Known Kerberos Credentials)?\nA.  Maintain a highly secure build and update infrastructure by immediately applying security patches for OS and software, implementing mandatory integrity controls to ensure only trusted tools run, and requiring multi-factor authentication for admins.\nB.  Maintain backups of the document for recovery and verification.\nC.  Create a strong password policy and ensure that your system enforces this policy for Kerberos service accounts.\nD.  Use fuzz testing during the software QA process to uncover any surprises, uncover any assumptions or unexpected behavior.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Safe Mode Boot (T1562.009)?\nA.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nB.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nC.  A file created for the purposes of deceiving an adversary.\nD.  Preventing one process from writing to the memory space of another process through hardware based address manager implementations.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Safe Mode Boot (T1562.009)",
      "ddmc_optionA": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_optionB": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_optionC": "A file created for the purposes of deceiving an adversary.",
      "ddmc_optionD": "Preventing one process from writing to the memory space of another process through hardware based address manager implementations.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Safe Mode Boot (T1562.009)?\nA.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nB.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nC.  A file created for the purposes of deceiving an adversary.\nD.  Preventing one process from writing to the memory space of another process through hardware based address manager implementations.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1565.002 (Transmitted Data Manipulation)?\nA.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nB.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nC.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nD.  Detecting any suspicious changes to files in a computer system.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1565.002 (Transmitted Data Manipulation)",
      "ddmc_optionA": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_optionB": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmc_optionC": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmc_optionD": "Detecting any suspicious changes to files in a computer system.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1565.002 (Transmitted Data Manipulation)?\nA.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nB.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nC.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nD.  Detecting any suspicious changes to files in a computer system.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Relative Path Traversal (CWE-23)?\nA.  Use a hash table instead of an alist.\nB.  The controls that allow enabling memory aliases or changing the size of mapped memory regions should only be programmable by trusted software components.\nC.  Use sanity checks to reduce the timing window for exploitation of race conditions. This is only a partial solution, since many attacks might fail, but other attacks still might work within the narrower window, even accidentally.\nD.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Relative Path Traversal (CWE-23)",
      "ddmc_optionA": "Use a hash table instead of an alist.",
      "ddmc_optionB": "The controls that allow enabling memory aliases or changing the size of mapped memory regions should only be programmable by trusted software components.",
      "ddmc_optionC": "Use sanity checks to reduce the timing window for exploitation of race conditions. This is only a partial solution, since many attacks might fail, but other attacks still might work within the narrower window, even accidentally.",
      "ddmc_optionD": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.",
      "prompts": [],
      "instruction": "How can you mitigate Relative Path Traversal (CWE-23)?\nA.  Use a hash table instead of an alist.\nB.  The controls that allow enabling memory aliases or changing the size of mapped memory regions should only be programmable by trusted software components.\nC.  Use sanity checks to reduce the timing window for exploitation of race conditions. This is only a partial solution, since many attacks might fail, but other attacks still might work within the narrower window, even accidentally.\nD.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Archive via Utility (T1560.001)?\nA.  Emulating instructions in a file looking for specific patterns.\nB.  Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.\nC.  Restricting access to a local file by configuring operating system functionality.\nD.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Archive via Utility (T1560.001)",
      "ddmc_optionA": "Emulating instructions in a file looking for specific patterns.",
      "ddmc_optionB": "Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.",
      "ddmc_optionC": "Restricting access to a local file by configuring operating system functionality.",
      "ddmc_optionD": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "prompts": [],
      "instruction": "What is a method to mitigate Archive via Utility (T1560.001)?\nA.  Emulating instructions in a file looking for specific patterns.\nB.  Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.\nC.  Restricting access to a local file by configuring operating system functionality.\nD.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1546.012 (Image File Execution Options Injection)?\nA.  Restoring the data in a database.\nB.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\nC.  File eviction techniques evict files from system storage.\nD.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1546.012 (Image File Execution Options Injection)",
      "ddmc_optionA": "Restoring the data in a database.",
      "ddmc_optionB": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "ddmc_optionC": "File eviction techniques evict files from system storage.",
      "ddmc_optionD": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Restoring the data in a database.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1546.012 (Image File Execution Options Injection)?\nA.  Restoring the data in a database.\nB.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\nC.  File eviction techniques evict files from system storage.\nD.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate System Information Discovery (T1082)?\nA.  Restricting system configuration modifications to a specific user or group of users.\nB.  Controlling access to local computer system resources with kernel-level capabilities.\nC.  Terminating a running application process on a computer system.\nD.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "System Information Discovery (T1082)",
      "ddmc_optionA": "Restricting system configuration modifications to a specific user or group of users.",
      "ddmc_optionB": "Controlling access to local computer system resources with kernel-level capabilities.",
      "ddmc_optionC": "Terminating a running application process on a computer system.",
      "ddmc_optionD": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Controlling access to local computer system resources with kernel-level capabilities.",
      "prompts": [],
      "instruction": "How can you mitigate System Information Discovery (T1082)?\nA.  Restricting system configuration modifications to a specific user or group of users.\nB.  Controlling access to local computer system resources with kernel-level capabilities.\nC.  Terminating a running application process on a computer system.\nD.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Transmitted Data Manipulation (T1565.002)?\nA.  Restoring the data in a database.\nB.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\nC.  Removing tokens or credentials from an authentication cache to prevent further user associated account accesses.\nD.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Transmitted Data Manipulation (T1565.002)",
      "ddmc_optionA": "Restoring the data in a database.",
      "ddmc_optionB": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "ddmc_optionC": "Removing tokens or credentials from an authentication cache to prevent further user associated account accesses.",
      "ddmc_optionD": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Transmitted Data Manipulation (T1565.002)?\nA.  Restoring the data in a database.\nB.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\nC.  Removing tokens or credentials from an authentication cache to prevent further user associated account accesses.\nD.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Schema Poisoning (CAPEC-271)?\nA.  Implementation: For applications that leverage remote schemas, use the HTTPS protocol to prevent modification of traffic in transit and to avoid unauthorized modification.\nB.  Utilize proper character encoding for all output produced within client-site scripts manipulating the DOM.\nC.  Design proper access control policies for hardware register access from software and ensure these policies are implemented in accordance with the specified design.\nD.  In general, every request must be checked for the appropriate authentication token as well as authorization in the current session context.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Schema Poisoning (CAPEC-271)",
      "ddmc_optionA": "Implementation: For applications that leverage remote schemas, use the HTTPS protocol to prevent modification of traffic in transit and to avoid unauthorized modification.",
      "ddmc_optionB": "Utilize proper character encoding for all output produced within client-site scripts manipulating the DOM.",
      "ddmc_optionC": "Design proper access control policies for hardware register access from software and ensure these policies are implemented in accordance with the specified design.",
      "ddmc_optionD": "In general, every request must be checked for the appropriate authentication token as well as authorization in the current session context.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Implementation: For applications that leverage remote schemas, use the HTTPS protocol to prevent modification of traffic in transit and to avoid unauthorized modification.",
      "prompts": [],
      "instruction": "How can you mitigate Schema Poisoning (CAPEC-271)?\nA.  Implementation: For applications that leverage remote schemas, use the HTTPS protocol to prevent modification of traffic in transit and to avoid unauthorized modification.\nB.  Utilize proper character encoding for all output produced within client-site scripts manipulating the DOM.\nC.  Design proper access control policies for hardware register access from software and ensure these policies are implemented in accordance with the specified design.\nD.  In general, every request must be checked for the appropriate authentication token as well as authorization in the current session context.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Cloud Storage Object Discovery (T1619)?\nA.  Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.\nB.  Hardware component inventorying identifies and records the hardware items in the organization's architecture.\nC.  Credential Eviction techniques disable or remove compromised credentials from a computer network.\nD.  Hardware component inventorying identifies and records the hardware items in the organization's architecture.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Cloud Storage Object Discovery (T1619)",
      "ddmc_optionA": "Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.",
      "ddmc_optionB": "Hardware component inventorying identifies and records the hardware items in the organization's architecture.",
      "ddmc_optionC": "Credential Eviction techniques disable or remove compromised credentials from a computer network.",
      "ddmc_optionD": "Hardware component inventorying identifies and records the hardware items in the organization's architecture.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Hardware component inventorying identifies and records the hardware items in the organization's architecture.",
      "prompts": [],
      "instruction": "How can you mitigate Cloud Storage Object Discovery (T1619)?\nA.  Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.\nB.  Hardware component inventorying identifies and records the hardware items in the organization's architecture.\nC.  Credential Eviction techniques disable or remove compromised credentials from a computer network.\nD.  Hardware component inventorying identifies and records the hardware items in the organization's architecture.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Steal Application Access Token (T1528)?\nA.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\nB.  Block execution of code on a system through application control, and/or script blocking.\nC.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nD.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Steal Application Access Token (T1528)",
      "ddmc_optionA": "Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.",
      "ddmc_optionB": "Block execution of code on a system through application control, and/or script blocking.",
      "ddmc_optionC": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "ddmc_optionD": "Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.",
      "prompts": [],
      "instruction": "What is a method to mitigate Steal Application Access Token (T1528)?\nA.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\nB.  Block execution of code on a system through application control, and/or script blocking.\nC.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nD.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate CWE-462 (Duplicate Key in Associative List (Alist))?\nA.  Use a CPU and operating system that offers Data Execution Protection (using hardware NX or XD bits) or the equivalent techniques that simulate this feature in software, such as PaX [REF-60] [REF-61]. These techniques ensure that any instruction executed is exclusively at a memory address that is part of the code segment. For more information on these techniques see D3-PSEP (Process Segment Execution Prevention) from D3FEND [REF-1336].\nB.  While double-checked locking can be achieved in some languages, it is inherently flawed in Java before 1.5, and cannot be achieved without compromising platform independence. Before Java 1.5, only use of the synchronized keyword is known to work. Beginning in Java 1.5, use of the \"volatile\" keyword allows double-checked locking to work successfully, although there is some debate as to whether it achieves sufficient performance gains. See references.\nC.  Use an alist which checks the uniqueness of hash keys with each entry before inserting the entry.\nD.  Force the administrator to change the credential upon installation.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CWE-462 (Duplicate Key in Associative List (Alist))",
      "ddmc_optionA": "Use a CPU and operating system that offers Data Execution Protection (using hardware NX or XD bits) or the equivalent techniques that simulate this feature in software, such as PaX [REF-60] [REF-61]. These techniques ensure that any instruction executed is exclusively at a memory address that is part of the code segment. For more information on these techniques see D3-PSEP (Process Segment Execution Prevention) from D3FEND [REF-1336].",
      "ddmc_optionB": "While double-checked locking can be achieved in some languages, it is inherently flawed in Java before 1.5, and cannot be achieved without compromising platform independence. Before Java 1.5, only use of the synchronized keyword is known to work. Beginning in Java 1.5, use of the \"volatile\" keyword allows double-checked locking to work successfully, although there is some debate as to whether it achieves sufficient performance gains. See references.",
      "ddmc_optionC": "Use an alist which checks the uniqueness of hash keys with each entry before inserting the entry.",
      "ddmc_optionD": "Force the administrator to change the credential upon installation.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Use an alist which checks the uniqueness of hash keys with each entry before inserting the entry.",
      "prompts": [],
      "instruction": "What is a method to mitigate CWE-462 (Duplicate Key in Associative List (Alist))?\nA.  Use a CPU and operating system that offers Data Execution Protection (using hardware NX or XD bits) or the equivalent techniques that simulate this feature in software, such as PaX [REF-60] [REF-61]. These techniques ensure that any instruction executed is exclusively at a memory address that is part of the code segment. For more information on these techniques see D3-PSEP (Process Segment Execution Prevention) from D3FEND [REF-1336].\nB.  While double-checked locking can be achieved in some languages, it is inherently flawed in Java before 1.5, and cannot be achieved without compromising platform independence. Before Java 1.5, only use of the synchronized keyword is known to work. Beginning in Java 1.5, use of the \"volatile\" keyword allows double-checked locking to work successfully, although there is some debate as to whether it achieves sufficient performance gains. See references.\nC.  Use an alist which checks the uniqueness of hash keys with each entry before inserting the entry.\nD.  Force the administrator to change the credential upon installation.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1074.001 (Local Data Staging)?\nA.  Employing a pattern matching algorithm to statically analyze the content of files.\nB.  Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.\nC.  Credential Eviction techniques disable or remove compromised credentials from a computer network.\nD.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1074.001 (Local Data Staging)",
      "ddmc_optionA": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_optionB": "Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.",
      "ddmc_optionC": "Credential Eviction techniques disable or remove compromised credentials from a computer network.",
      "ddmc_optionD": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "prompts": [],
      "instruction": "How can you mitigate T1074.001 (Local Data Staging)?\nA.  Employing a pattern matching algorithm to statically analyze the content of files.\nB.  Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.\nC.  Credential Eviction techniques disable or remove compromised credentials from a computer network.\nD.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Clear Linux or Mac System Logs (T1070.002)?\nA.  File eviction techniques evict files from system storage.\nB.  Restoring a file for an entity to access.\nC.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nD.  Restricting network traffic originating from a private host or enclave destined towards untrusted networks.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Clear Linux or Mac System Logs (T1070.002)",
      "ddmc_optionA": "File eviction techniques evict files from system storage.",
      "ddmc_optionB": "Restoring a file for an entity to access.",
      "ddmc_optionC": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmc_optionD": "Restricting network traffic originating from a private host or enclave destined towards untrusted networks.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Restoring a file for an entity to access.",
      "prompts": [],
      "instruction": "What is a method to mitigate Clear Linux or Mac System Logs (T1070.002)?\nA.  File eviction techniques evict files from system storage.\nB.  Restoring a file for an entity to access.\nC.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nD.  Restricting network traffic originating from a private host or enclave destined towards untrusted networks.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Bash History (T1552.003)?\nA.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\nB.  Access modeling identifies and records the access permissions granted to administrators, users, groups, and systems.\nC.  Employing a pattern matching rule language to analyze the content of files.\nD.  The file removal technique deletes malicious artifacts or programs from a computer system.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Bash History (T1552.003)",
      "ddmc_optionA": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmc_optionB": "Access modeling identifies and records the access permissions granted to administrators, users, groups, and systems.",
      "ddmc_optionC": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_optionD": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "prompts": [],
      "instruction": "What is a method to mitigate Bash History (T1552.003)?\nA.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\nB.  Access modeling identifies and records the access permissions granted to administrators, users, groups, and systems.\nC.  Employing a pattern matching rule language to analyze the content of files.\nD.  The file removal technique deletes malicious artifacts or programs from a computer system.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Access of Memory Location Before Start of Buffer (CWE-786)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.\nC.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer\nD.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Access of Memory Location Before Start of Buffer (CWE-786)",
      "ddmc_optionA": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionB": "Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.",
      "ddmc_optionC": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer",
      "ddmc_optionD": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.",
      "prompts": [],
      "instruction": "What is a method to detect Access of Memory Location Before Start of Buffer (CWE-786)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.\nC.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer\nD.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect Use of Default Credentials (CWE-1392)?\nA.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Binary Weakness Analysis - including disassembler + source code weakness analysis\nB.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Binary / Bytecode Quality Analysis Compare binary / bytecode to application permission manifest\nC.  For commonly-used APIs and resource types, automated tools often have signatures that can spot this issue.\nD.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Binary Weakness Analysis - including disassembler + source code weakness analysis\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Use of Default Credentials (CWE-1392)",
      "ddmc_optionA": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Binary Weakness Analysis - including disassembler + source code weakness analysis",
      "ddmc_optionB": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Binary / Bytecode Quality Analysis Compare binary / bytecode to application permission manifest",
      "ddmc_optionC": "For commonly-used APIs and resource types, automated tools often have signatures that can spot this issue.",
      "ddmc_optionD": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Binary Weakness Analysis - including disassembler + source code weakness analysis",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "For commonly-used APIs and resource types, automated tools often have signatures that can spot this issue.",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect Use of Default Credentials (CWE-1392)?\nA.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Binary Weakness Analysis - including disassembler + source code weakness analysis\nB.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Binary / Bytecode Quality Analysis Compare binary / bytecode to application permission manifest\nC.  For commonly-used APIs and resource types, automated tools often have signatures that can spot this issue.\nD.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Binary Weakness Analysis - including disassembler + source code weakness analysis\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Compiled HTML File (T1218.001)?\nA.  Employing a pattern matching algorithm to statically analyze the content of files.\nB.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nC.  Determining which credentials may have been compromised by analyzing the user logon history of a particular system.\nD.  Analyzing the properties of file create system call invocations.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Compiled HTML File (T1218.001)",
      "ddmc_optionA": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_optionB": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmc_optionC": "Determining which credentials may have been compromised by analyzing the user logon history of a particular system.",
      "ddmc_optionD": "Analyzing the properties of file create system call invocations.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Analyzing the properties of file create system call invocations.",
      "prompts": [],
      "instruction": "How can you mitigate Compiled HTML File (T1218.001)?\nA.  Employing a pattern matching algorithm to statically analyze the content of files.\nB.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nC.  Determining which credentials may have been compromised by analyzing the user logon history of a particular system.\nD.  Analyzing the properties of file create system call invocations.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Struts: Form Bean Does Not Extend Validation Class (CWE-104)?\nA.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nB.  Leverage the HttpOnly flag when setting a sensitive cookie in a response.\nC.  If a technique that requires extra computational effort can not be implemented, then for each password that is processed, generate a new random salt using a strong random number generator with unpredictable seeds. Add the salt to the plaintext password before hashing it. When storing the hash, also store the salt. Do not use the same salt for every password.\nD.  Ensure that access control checks are performed related to the business logic. These checks may be different than the access control checks that are applied to more generic resources such as files, connections, processes, memory, and database records. For example, a database may restrict access for medical records to a specific database user, but each record might only be intended to be accessible to the patient and the patient's doctor [REF-7].\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Struts: Form Bean Does Not Extend Validation Class (CWE-104)",
      "ddmc_optionA": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmc_optionB": "Leverage the HttpOnly flag when setting a sensitive cookie in a response.",
      "ddmc_optionC": "If a technique that requires extra computational effort can not be implemented, then for each password that is processed, generate a new random salt using a strong random number generator with unpredictable seeds. Add the salt to the plaintext password before hashing it. When storing the hash, also store the salt. Do not use the same salt for every password.",
      "ddmc_optionD": "Ensure that access control checks are performed related to the business logic. These checks may be different than the access control checks that are applied to more generic resources such as files, connections, processes, memory, and database records. For example, a database may restrict access for medical records to a specific database user, but each record might only be intended to be accessible to the patient and the patient's doctor [REF-7].",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Leverage the HttpOnly flag when setting a sensitive cookie in a response.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Struts: Form Bean Does Not Extend Validation Class (CWE-104)?\nA.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nB.  Leverage the HttpOnly flag when setting a sensitive cookie in a response.\nC.  If a technique that requires extra computational effort can not be implemented, then for each password that is processed, generate a new random salt using a strong random number generator with unpredictable seeds. Add the salt to the plaintext password before hashing it. When storing the hash, also store the salt. Do not use the same salt for every password.\nD.  Ensure that access control checks are performed related to the business logic. These checks may be different than the access control checks that are applied to more generic resources such as files, connections, processes, memory, and database records. For example, a database may restrict access for medical records to a specific database user, but each record might only be intended to be accessible to the patient and the patient's doctor [REF-7].\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Browser in the Middle (BiTM) (CAPEC-701)?\nA.  Use the sendmail restricted shell program (smrsh)\nB.  Disable Bluetooth when not being used.\nC.  Implementation: Use strong, mutual authentication to fully authenticate with both ends of any communications channel\nD.  Use static analysis tools to find race conditions.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Browser in the Middle (BiTM) (CAPEC-701)",
      "ddmc_optionA": "Use the sendmail restricted shell program (smrsh)",
      "ddmc_optionB": "Disable Bluetooth when not being used.",
      "ddmc_optionC": "Implementation: Use strong, mutual authentication to fully authenticate with both ends of any communications channel",
      "ddmc_optionD": "Use static analysis tools to find race conditions.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Implementation: Use strong, mutual authentication to fully authenticate with both ends of any communications channel",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Browser in the Middle (BiTM) (CAPEC-701)?\nA.  Use the sendmail restricted shell program (smrsh)\nB.  Disable Bluetooth when not being used.\nC.  Implementation: Use strong, mutual authentication to fully authenticate with both ends of any communications channel\nD.  Use static analysis tools to find race conditions.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate System Owner/User Discovery (T1033)?\nA.  Employing a pattern matching algorithm to statically analyze the content of files.\nB.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\nC.  Application Hardening makes an executable application more resilient to a class of exploits which either introduce new code or execute unwanted existing code. These techniques may be applied at compile-time or on an application binary.\nD.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "System Owner/User Discovery (T1033)",
      "ddmc_optionA": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_optionB": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmc_optionC": "Application Hardening makes an executable application more resilient to a class of exploits which either introduce new code or execute unwanted existing code. These techniques may be applied at compile-time or on an application binary.",
      "ddmc_optionD": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "prompts": [],
      "instruction": "How can you mitigate System Owner/User Discovery (T1033)?\nA.  Employing a pattern matching algorithm to statically analyze the content of files.\nB.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\nC.  Application Hardening makes an executable application more resilient to a class of exploits which either introduce new code or execute unwanted existing code. These techniques may be applied at compile-time or on an application binary.\nD.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Remote Desktop Protocol (T1021.001)?\nA.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nB.  Employing a pattern matching algorithm to statically analyze the content of files.\nC.  Blocking the execution of files on a host in accordance with defined application policy rules.\nD.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Remote Desktop Protocol (T1021.001)",
      "ddmc_optionA": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmc_optionB": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_optionC": "Blocking the execution of files on a host in accordance with defined application policy rules.",
      "ddmc_optionD": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "prompts": [],
      "instruction": "How can you mitigate Remote Desktop Protocol (T1021.001)?\nA.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nB.  Employing a pattern matching algorithm to statically analyze the content of files.\nC.  Blocking the execution of files on a host in accordance with defined application policy rules.\nD.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Use of Incorrect Operator (CWE-480)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Source Code Quality Analyzer Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer\nC.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections)\nD.  This weakness can be found easily using static analysis. However in some cases an operator might appear to be incorrect, but is actually correct and reflects unusual logic within the program.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Use of Incorrect Operator (CWE-480)",
      "ddmc_optionA": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionB": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Source Code Quality Analyzer Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer",
      "ddmc_optionC": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections)",
      "ddmc_optionD": "This weakness can be found easily using static analysis. However in some cases an operator might appear to be incorrect, but is actually correct and reflects unusual logic within the program.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "This weakness can be found easily using static analysis. However in some cases an operator might appear to be incorrect, but is actually correct and reflects unusual logic within the program.",
      "prompts": [],
      "instruction": "What is a method to detect Use of Incorrect Operator (CWE-480)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Source Code Quality Analyzer Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer\nC.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections)\nD.  This weakness can be found easily using static analysis. However in some cases an operator might appear to be incorrect, but is actually correct and reflects unusual logic within the program.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1218.013 (Mavinject)?\nA.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nB.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nC.  Preventing execution of any address in a memory region other than the code segment.\nD.  Restricting network traffic originating from any location.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1218.013 (Mavinject)",
      "ddmc_optionA": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmc_optionB": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_optionC": "Preventing execution of any address in a memory region other than the code segment.",
      "ddmc_optionD": "Restricting network traffic originating from any location.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Preventing execution of any address in a memory region other than the code segment.",
      "prompts": [],
      "instruction": "How can you mitigate T1218.013 (Mavinject)?\nA.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nB.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nC.  Preventing execution of any address in a memory region other than the code segment.\nD.  Restricting network traffic originating from any location.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Upload a Web Shell to a Web Server (CAPEC-650)?\nA.  Implement: Use a protocol that encrypts the video signal; in case the signal is intercepted the signal is protected by the encryption.\nB.  Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application.\nC.  Use safe libraries when creating temporary files. For instance the standard library function mkstemp can be used to safely create temporary files. For shell scripts, the system utility mktemp does the same thing.\nD.  Ensure that the file permissions in directories on the web server from which files can be execute is set to the \"least privilege\" settings, and that those directories contents is controlled by an allowlist.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Upload a Web Shell to a Web Server (CAPEC-650)",
      "ddmc_optionA": "Implement: Use a protocol that encrypts the video signal; in case the signal is intercepted the signal is protected by the encryption.",
      "ddmc_optionB": "Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application.",
      "ddmc_optionC": "Use safe libraries when creating temporary files. For instance the standard library function mkstemp can be used to safely create temporary files. For shell scripts, the system utility mktemp does the same thing.",
      "ddmc_optionD": "Ensure that the file permissions in directories on the web server from which files can be execute is set to the \"least privilege\" settings, and that those directories contents is controlled by an allowlist.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Ensure that the file permissions in directories on the web server from which files can be execute is set to the \"least privilege\" settings, and that those directories contents is controlled by an allowlist.",
      "prompts": [],
      "instruction": "What is a method to mitigate Upload a Web Shell to a Web Server (CAPEC-650)?\nA.  Implement: Use a protocol that encrypts the video signal; in case the signal is intercepted the signal is protected by the encryption.\nB.  Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application.\nC.  Use safe libraries when creating temporary files. For instance the standard library function mkstemp can be used to safely create temporary files. For shell scripts, the system utility mktemp does the same thing.\nD.  Ensure that the file permissions in directories on the web server from which files can be execute is set to the \"least privilege\" settings, and that those directories contents is controlled by an allowlist.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect CWE-157 (Failure to Sanitize Paired Delimiters)?\nA.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  This weakness can be detected in hardware by employing static or dynamic taint analysis methods [REF-1401]. These methods can label each predictor entry (or prediction history, etc.) according to the processor context that created it. Taint analysis or information flow analysis can then be applied to detect when predictor state created in one context can influence predictions made in another context.\nD.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "CWE-157 (Failure to Sanitize Paired Delimiters)",
      "ddmc_optionA": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer",
      "ddmc_optionB": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionC": "This weakness can be detected in hardware by employing static or dynamic taint analysis methods [REF-1401]. These methods can label each predictor entry (or prediction history, etc.) according to the processor context that created it. Taint analysis or information flow analysis can then be applied to detect when predictor state created in one context can influence predictions made in another context.",
      "ddmc_optionD": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "This weakness can be detected in hardware by employing static or dynamic taint analysis methods [REF-1401]. These methods can label each predictor entry (or prediction history, etc.) according to the processor context that created it. Taint analysis or information flow analysis can then be applied to detect when predictor state created in one context can influence predictions made in another context.",
      "prompts": [],
      "instruction": "How can you detect CWE-157 (Failure to Sanitize Paired Delimiters)?\nA.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  This weakness can be detected in hardware by employing static or dynamic taint analysis methods [REF-1401]. These methods can label each predictor entry (or prediction history, etc.) according to the processor context that created it. Taint analysis or information flow analysis can then be applied to detect when predictor state created in one context can influence predictions made in another context.\nD.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Portable Executable Injection (T1055.002)?\nA.  Employing file hash comparisons to detect known malware.\nB.  Monitoring the security status of an endpoint by sending periodic messages with health status, where absence of a response may indicate that the endpoint has been compromised.\nC.  Analyzing email or instant message content to detect unauthorized activity.\nD.  Detecting any suspicious changes to files in a computer system.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Portable Executable Injection (T1055.002)",
      "ddmc_optionA": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionB": "Monitoring the security status of an endpoint by sending periodic messages with health status, where absence of a response may indicate that the endpoint has been compromised.",
      "ddmc_optionC": "Analyzing email or instant message content to detect unauthorized activity.",
      "ddmc_optionD": "Detecting any suspicious changes to files in a computer system.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Employing file hash comparisons to detect known malware.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Portable Executable Injection (T1055.002)?\nA.  Employing file hash comparisons to detect known malware.\nB.  Monitoring the security status of an endpoint by sending periodic messages with health status, where absence of a response may indicate that the endpoint has been compromised.\nC.  Analyzing email or instant message content to detect unauthorized activity.\nD.  Detecting any suspicious changes to files in a computer system.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect Use of Uninitialized Variable (CWE-457)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections)\nC.  Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.\nD.  Set up an untrusted endpoint (e.g. a server) with which the product will connect. Create a test certificate that uses an invalid hostname but is signed by a trusted CA and provide this certificate from the untrusted endpoint. If the product performs any operations instead of disconnecting and reporting an error, then this indicates that the hostname is not being checked and the test certificate has been accepted.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Use of Uninitialized Variable (CWE-457)",
      "ddmc_optionA": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionB": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections)",
      "ddmc_optionC": "Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.",
      "ddmc_optionD": "Set up an untrusted endpoint (e.g. a server) with which the product will connect. Create a test certificate that uses an invalid hostname but is signed by a trusted CA and provide this certificate from the untrusted endpoint. If the product performs any operations instead of disconnecting and reporting an error, then this indicates that the hostname is not being checked and the test certificate has been accepted.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.",
      "prompts": [],
      "instruction": "How can you detect Use of Uninitialized Variable (CWE-457)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections)\nC.  Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.\nD.  Set up an untrusted endpoint (e.g. a server) with which the product will connect. Create a test certificate that uses an invalid hostname but is signed by a trusted CA and provide this certificate from the untrusted endpoint. If the product performs any operations instead of disconnecting and reporting an error, then this indicates that the hostname is not being checked and the test certificate has been accepted.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect Downgrade Attack (T1562.010)?\nA.  SSL/TLS inspection is one way of detecting command and control traffic within some encrypted communication channels. SSL/TLS inspection does come with certain risks that should be considered before implementing to avoid potential security issues such as incomplete certificate validation. In general, analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.(Citations: SANS Decrypting SSL, SEI SSL Inspection Risks, University of Birmingham C2)\nB.  Monitor process execution from the <code>svchost.exe</code> in Windows 10 and the Windows Task Scheduler <code>taskeng.exe</code> for older versions of Windows.  If scheduled tasks are not used for persistence, then the adversary is likely to remove the task when the action is complete. Monitor Windows Task Scheduler stores in %systemroot%\\System32\\Tasks for change entries related to scheduled tasks that do not correlate with known software, patch cycles, etc. Configure event logging for scheduled task creation and changes by enabling the \"Microsoft-Windows-TaskScheduler/Operational\" setting within the event logging service.  Several events will then be logged on scheduled task activity, including:  * Event ID 106 on Windows 7, Server 2008 R2 - Scheduled task registered * Event ID 140 on Windows 7, Server 2008 R2 / 4702 on Windows 10, Server 2016 - Scheduled task updated * Event ID 141 on Windows 7, Server 2008 R2 / 4699 on Windows 10, Server 2016 - Scheduled task deleted * Event ID 4698 on Windows 10, Server 2016 - Scheduled task created * Event ID 4700 on Windows 10, Server 2016 - Scheduled task enabled * Event ID 4701 on Windows 10, Server 2016 - Scheduled task disabled Tools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing current scheduled tasks.  Remote access tools with built-in features may interact directly with the Windows API to perform these functions outside of typical system utilities. Tasks may also be created through Windows system management tools such as Windows Management Instrumentation and PowerShell, so additional logging may need to be configured to gather the appropriate data.(Citations: Twitter Leoloobeek Scheduled Task, TechNet Forum Scheduled Task Operational Setting, TechNet Scheduled Task Events, Microsoft Scheduled Task Events Win10, TechNet Autoruns)\nC.  Monitor for commands or other activity that may be indicative of attempts to abuse older or deprecated technologies (ex: <code>powershell \u2013v 2</code>). Also monitor for other abnormal events, such as execution of and/or processes spawning from a version of a tool that is not expected in the environment. Monitor for Windows event ID (EID) 400, specifically the <code>EngineVersion</code> field which shows the version of PowerShell running and may highlight a malicious downgrade attack. Monitor network data to detect cases where HTTP is used instead of HTTPS.(Citations: inv_ps_attacks)\nD.  URL inspection within email (including expanding shortened links) can help detect links leading to known malicious sites as well as links redirecting to adversary infrastructure based by upon suspicious OAuth patterns with unusual TLDs.. Detonation chambers can be used to detect these links and either automatically go to these sites to determine if they're potentially malicious, or wait and capture the content if a user visits the link. Filtering based on DKIM+SPF or header analysis can help detect when the email sender is spoofed. Because this technique usually involves user interaction on the endpoint, many of the possible detections take place once User Execution occurs.(Citations: Microsoft OAuth 2.0 Consent Phishing 2021, Microsoft Anti Spoofing, ACSC Email Spoofing)\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Downgrade Attack (T1562.010)",
      "ddmc_optionA": "SSL/TLS inspection is one way of detecting command and control traffic within some encrypted communication channels. SSL/TLS inspection does come with certain risks that should be considered before implementing to avoid potential security issues such as incomplete certificate validation. In general, analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.(Citations: SANS Decrypting SSL, SEI SSL Inspection Risks, University of Birmingham C2)",
      "ddmc_optionB": "Monitor process execution from the <code>svchost.exe</code> in Windows 10 and the Windows Task Scheduler <code>taskeng.exe</code> for older versions of Windows.  If scheduled tasks are not used for persistence, then the adversary is likely to remove the task when the action is complete. Monitor Windows Task Scheduler stores in %systemroot%\\System32\\Tasks for change entries related to scheduled tasks that do not correlate with known software, patch cycles, etc. Configure event logging for scheduled task creation and changes by enabling the \"Microsoft-Windows-TaskScheduler/Operational\" setting within the event logging service.  Several events will then be logged on scheduled task activity, including:  * Event ID 106 on Windows 7, Server 2008 R2 - Scheduled task registered * Event ID 140 on Windows 7, Server 2008 R2 / 4702 on Windows 10, Server 2016 - Scheduled task updated * Event ID 141 on Windows 7, Server 2008 R2 / 4699 on Windows 10, Server 2016 - Scheduled task deleted * Event ID 4698 on Windows 10, Server 2016 - Scheduled task created * Event ID 4700 on Windows 10, Server 2016 - Scheduled task enabled * Event ID 4701 on Windows 10, Server 2016 - Scheduled task disabled Tools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing current scheduled tasks.  Remote access tools with built-in features may interact directly with the Windows API to perform these functions outside of typical system utilities. Tasks may also be created through Windows system management tools such as Windows Management Instrumentation and PowerShell, so additional logging may need to be configured to gather the appropriate data.(Citations: Twitter Leoloobeek Scheduled Task, TechNet Forum Scheduled Task Operational Setting, TechNet Scheduled Task Events, Microsoft Scheduled Task Events Win10, TechNet Autoruns)",
      "ddmc_optionC": "Monitor for commands or other activity that may be indicative of attempts to abuse older or deprecated technologies (ex: <code>powershell \u2013v 2</code>). Also monitor for other abnormal events, such as execution of and/or processes spawning from a version of a tool that is not expected in the environment. Monitor for Windows event ID (EID) 400, specifically the <code>EngineVersion</code> field which shows the version of PowerShell running and may highlight a malicious downgrade attack. Monitor network data to detect cases where HTTP is used instead of HTTPS.(Citations: inv_ps_attacks)",
      "ddmc_optionD": "URL inspection within email (including expanding shortened links) can help detect links leading to known malicious sites as well as links redirecting to adversary infrastructure based by upon suspicious OAuth patterns with unusual TLDs.. Detonation chambers can be used to detect these links and either automatically go to these sites to determine if they're potentially malicious, or wait and capture the content if a user visits the link. Filtering based on DKIM+SPF or header analysis can help detect when the email sender is spoofed. Because this technique usually involves user interaction on the endpoint, many of the possible detections take place once User Execution occurs.(Citations: Microsoft OAuth 2.0 Consent Phishing 2021, Microsoft Anti Spoofing, ACSC Email Spoofing)",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Monitor for commands or other activity that may be indicative of attempts to abuse older or deprecated technologies (ex: <code>powershell \u2013v 2</code>). Also monitor for other abnormal events, such as execution of and/or processes spawning from a version of a tool that is not expected in the environment. Monitor for Windows event ID (EID) 400, specifically the <code>EngineVersion</code> field which shows the version of PowerShell running and may highlight a malicious downgrade attack. Monitor network data to detect cases where HTTP is used instead of HTTPS.(Citations: inv_ps_attacks)",
      "prompts": [],
      "instruction": "How can you detect Downgrade Attack (T1562.010)?\nA.  SSL/TLS inspection is one way of detecting command and control traffic within some encrypted communication channels. SSL/TLS inspection does come with certain risks that should be considered before implementing to avoid potential security issues such as incomplete certificate validation. In general, analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.(Citations: SANS Decrypting SSL, SEI SSL Inspection Risks, University of Birmingham C2)\nB.  Monitor process execution from the <code>svchost.exe</code> in Windows 10 and the Windows Task Scheduler <code>taskeng.exe</code> for older versions of Windows.  If scheduled tasks are not used for persistence, then the adversary is likely to remove the task when the action is complete. Monitor Windows Task Scheduler stores in %systemroot%\\System32\\Tasks for change entries related to scheduled tasks that do not correlate with known software, patch cycles, etc. Configure event logging for scheduled task creation and changes by enabling the \"Microsoft-Windows-TaskScheduler/Operational\" setting within the event logging service.  Several events will then be logged on scheduled task activity, including:  * Event ID 106 on Windows 7, Server 2008 R2 - Scheduled task registered * Event ID 140 on Windows 7, Server 2008 R2 / 4702 on Windows 10, Server 2016 - Scheduled task updated * Event ID 141 on Windows 7, Server 2008 R2 / 4699 on Windows 10, Server 2016 - Scheduled task deleted * Event ID 4698 on Windows 10, Server 2016 - Scheduled task created * Event ID 4700 on Windows 10, Server 2016 - Scheduled task enabled * Event ID 4701 on Windows 10, Server 2016 - Scheduled task disabled Tools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing current scheduled tasks.  Remote access tools with built-in features may interact directly with the Windows API to perform these functions outside of typical system utilities. Tasks may also be created through Windows system management tools such as Windows Management Instrumentation and PowerShell, so additional logging may need to be configured to gather the appropriate data.(Citations: Twitter Leoloobeek Scheduled Task, TechNet Forum Scheduled Task Operational Setting, TechNet Scheduled Task Events, Microsoft Scheduled Task Events Win10, TechNet Autoruns)\nC.  Monitor for commands or other activity that may be indicative of attempts to abuse older or deprecated technologies (ex: <code>powershell \u2013v 2</code>). Also monitor for other abnormal events, such as execution of and/or processes spawning from a version of a tool that is not expected in the environment. Monitor for Windows event ID (EID) 400, specifically the <code>EngineVersion</code> field which shows the version of PowerShell running and may highlight a malicious downgrade attack. Monitor network data to detect cases where HTTP is used instead of HTTPS.(Citations: inv_ps_attacks)\nD.  URL inspection within email (including expanding shortened links) can help detect links leading to known malicious sites as well as links redirecting to adversary infrastructure based by upon suspicious OAuth patterns with unusual TLDs.. Detonation chambers can be used to detect these links and either automatically go to these sites to determine if they're potentially malicious, or wait and capture the content if a user visits the link. Filtering based on DKIM+SPF or header analysis can help detect when the email sender is spoofed. Because this technique usually involves user interaction on the endpoint, many of the possible detections take place once User Execution occurs.(Citations: Microsoft OAuth 2.0 Consent Phishing 2021, Microsoft Anti Spoofing, ACSC Email Spoofing)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Vulnerability Scanning (T1595.002)?\nA.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nB.  Enforce binary and application integrity with digital signature verification to prevent untrusted code from executing.\nC.  Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.\nD.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Vulnerability Scanning (T1595.002)",
      "ddmc_optionA": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmc_optionB": "Enforce binary and application integrity with digital signature verification to prevent untrusted code from executing.",
      "ddmc_optionC": "Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.",
      "ddmc_optionD": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Vulnerability Scanning (T1595.002)?\nA.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nB.  Enforce binary and application integrity with digital signature verification to prevent untrusted code from executing.\nC.  Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.\nD.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Services File Permissions Weakness (T1574.010)?\nA.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nB.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nC.  The file removal technique deletes malicious artifacts or programs from a computer system.\nD.  Analyzing changes in service binary files by comparing to a source of truth.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Services File Permissions Weakness (T1574.010)",
      "ddmc_optionA": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmc_optionB": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_optionC": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "ddmc_optionD": "Analyzing changes in service binary files by comparing to a source of truth.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Analyzing changes in service binary files by comparing to a source of truth.",
      "prompts": [],
      "instruction": "How can you mitigate Services File Permissions Weakness (T1574.010)?\nA.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nB.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nC.  The file removal technique deletes malicious artifacts or programs from a computer system.\nD.  Analyzing changes in service binary files by comparing to a source of truth.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect Expression is Always True (CWE-571)?\nA.  Testing of memory-device contents after clearing or erase commands. Dynamic analysis of memory contents during device operation to detect specific, confidential assets. Architecture and design analysis of memory clear and erase operations.\nB.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Network Sniffer Cost effective for partial coverage: Fuzz Tester Framework-based Fuzzer Automated Monitored Execution Man-in-the-middle attack tool\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Expression is Always True (CWE-571)",
      "ddmc_optionA": "Testing of memory-device contents after clearing or erase commands. Dynamic analysis of memory contents during device operation to detect specific, confidential assets. Architecture and design analysis of memory clear and erase operations.",
      "ddmc_optionB": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Network Sniffer Cost effective for partial coverage: Fuzz Tester Framework-based Fuzzer Automated Monitored Execution Man-in-the-middle attack tool",
      "ddmc_optionC": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionD": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "How can you detect Expression is Always True (CWE-571)?\nA.  Testing of memory-device contents after clearing or erase commands. Dynamic analysis of memory contents during device operation to detect specific, confidential assets. Architecture and design analysis of memory clear and erase operations.\nB.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Network Sniffer Cost effective for partial coverage: Fuzz Tester Framework-based Fuzzer Automated Monitored Execution Man-in-the-middle attack tool\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Improper Locking (CWE-667)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Improper Locking (CWE-667)",
      "ddmc_optionA": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionB": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source",
      "ddmc_optionC": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionD": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "What is a method to detect Improper Locking (CWE-667)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Exfiltration Over Symmetric Encrypted Non-C2 Protocol (T1048.001)?\nA.  File eviction techniques evict files from system storage.\nB.  Restricting network traffic originating from any location.\nC.  The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.\nD.  Restoring a file for an entity to access.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Exfiltration Over Symmetric Encrypted Non-C2 Protocol (T1048.001)",
      "ddmc_optionA": "File eviction techniques evict files from system storage.",
      "ddmc_optionB": "Restricting network traffic originating from any location.",
      "ddmc_optionC": "The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.",
      "ddmc_optionD": "Restoring a file for an entity to access.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Restricting network traffic originating from any location.",
      "prompts": [],
      "instruction": "What is a method to mitigate Exfiltration Over Symmetric Encrypted Non-C2 Protocol (T1048.001)?\nA.  File eviction techniques evict files from system storage.\nB.  Restricting network traffic originating from any location.\nC.  The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.\nD.  Restoring a file for an entity to access.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Windows Service (T1543.003)?\nA.  Restoring an software configuration.\nB.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nC.  Requiring proof of two or more pieces of evidence in order to authenticate a user.\nD.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Windows Service (T1543.003)",
      "ddmc_optionA": "Restoring an software configuration.",
      "ddmc_optionB": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionC": "Requiring proof of two or more pieces of evidence in order to authenticate a user.",
      "ddmc_optionD": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Windows Service (T1543.003)?\nA.  Restoring an software configuration.\nB.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nC.  Requiring proof of two or more pieces of evidence in order to authenticate a user.\nD.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Blind SQL Injection (CAPEC-7)?\nA.  Minimize error/response output to only what is necessary for functional use or corrective language.\nB.  Design: Enforce principle of least privilege\nC.  There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx)\nD.  Security by Obscurity is not a solution to preventing SQL Injection. Rather than suppress error messages and exceptions, the application must handle them gracefully, returning either a custom error page or redirecting the user to a default page, without revealing any information about the database or the application internals.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Blind SQL Injection (CAPEC-7)",
      "ddmc_optionA": "Minimize error/response output to only what is necessary for functional use or corrective language.",
      "ddmc_optionB": "Design: Enforce principle of least privilege",
      "ddmc_optionC": "There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx)",
      "ddmc_optionD": "Security by Obscurity is not a solution to preventing SQL Injection. Rather than suppress error messages and exceptions, the application must handle them gracefully, returning either a custom error page or redirecting the user to a default page, without revealing any information about the database or the application internals.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Security by Obscurity is not a solution to preventing SQL Injection. Rather than suppress error messages and exceptions, the application must handle them gracefully, returning either a custom error page or redirecting the user to a default page, without revealing any information about the database or the application internals.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Blind SQL Injection (CAPEC-7)?\nA.  Minimize error/response output to only what is necessary for functional use or corrective language.\nB.  Design: Enforce principle of least privilege\nC.  There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx)\nD.  Security by Obscurity is not a solution to preventing SQL Injection. Rather than suppress error messages and exceptions, the application must handle them gracefully, returning either a custom error page or redirecting the user to a default page, without revealing any information about the database or the application internals.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Process Injection (T1055)?\nA.  Manage the creation, modification, use, and permissions associated to user accounts.\nB.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\nC.  Manage the creation, modification, use, and permissions associated to user accounts.\nD.  Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Process Injection (T1055)",
      "ddmc_optionA": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmc_optionB": "Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.",
      "ddmc_optionC": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmc_optionD": "Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.",
      "prompts": [],
      "instruction": "How can you mitigate Process Injection (T1055)?\nA.  Manage the creation, modification, use, and permissions associated to user accounts.\nB.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\nC.  Manage the creation, modification, use, and permissions associated to user accounts.\nD.  Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Contradictory Destinations in Traffic Routing Schemes (CAPEC-481)?\nA.  Minimize error/response output to only what is necessary for functional use or corrective language.\nB.  Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.\nC.  Implementation: Scan dynamically generated content against validation specification\nD.  Monitor connections, checking headers in traffic for contradictory domain names, or empty domain names.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Contradictory Destinations in Traffic Routing Schemes (CAPEC-481)",
      "ddmc_optionA": "Minimize error/response output to only what is necessary for functional use or corrective language.",
      "ddmc_optionB": "Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.",
      "ddmc_optionC": "Implementation: Scan dynamically generated content against validation specification",
      "ddmc_optionD": "Monitor connections, checking headers in traffic for contradictory domain names, or empty domain names.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Monitor connections, checking headers in traffic for contradictory domain names, or empty domain names.",
      "prompts": [],
      "instruction": "What is a method to mitigate Contradictory Destinations in Traffic Routing Schemes (CAPEC-481)?\nA.  Minimize error/response output to only what is necessary for functional use or corrective language.\nB.  Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.\nC.  Implementation: Scan dynamically generated content against validation specification\nD.  Monitor connections, checking headers in traffic for contradictory domain names, or empty domain names.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Improper Write Handling in Limited-write Non-Volatile Memories (CWE-1246)?\nA.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nB.  Include secure wear leveling algorithms and ensure they may not be bypassed.\nC.  Design the device to allow for updating the firmware. Ensure that the design specifies how to distribute the updates and ensure their integrity and authentication.\nD.  Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, consider using authorization frameworks such as the JAAS Authorization Framework [REF-233] and the OWASP ESAPI Access Control feature [REF-45].\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Write Handling in Limited-write Non-Volatile Memories (CWE-1246)",
      "ddmc_optionA": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmc_optionB": "Include secure wear leveling algorithms and ensure they may not be bypassed.",
      "ddmc_optionC": "Design the device to allow for updating the firmware. Ensure that the design specifies how to distribute the updates and ensure their integrity and authentication.",
      "ddmc_optionD": "Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, consider using authorization frameworks such as the JAAS Authorization Framework [REF-233] and the OWASP ESAPI Access Control feature [REF-45].",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Include secure wear leveling algorithms and ensure they may not be bypassed.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Improper Write Handling in Limited-write Non-Volatile Memories (CWE-1246)?\nA.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nB.  Include secure wear leveling algorithms and ensure they may not be bypassed.\nC.  Design the device to allow for updating the firmware. Ensure that the design specifies how to distribute the updates and ensure their integrity and authentication.\nD.  Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, consider using authorization frameworks such as the JAAS Authorization Framework [REF-233] and the OWASP ESAPI Access Control feature [REF-45].\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Storage of File With Sensitive Data Under FTP Root (CWE-220)?\nA.  Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, many languages that perform their own memory management, such as Java and Perl, are not subject to buffer overflows. Other languages, such as Ada and C#, typically provide overflow protection, but the protection can be disabled by the programmer. Be wary that a language's interface to native code may still be subject to overflows, even if the language itself is theoretically safe.\nB.  The hardware vendor may provide a patch to sanitize the affected shared microarchitectural state when the processor transitions to a different context.\nC.  Avoid storing information under the FTP root directory.\nD.  Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area. Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Storage of File With Sensitive Data Under FTP Root (CWE-220)",
      "ddmc_optionA": "Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, many languages that perform their own memory management, such as Java and Perl, are not subject to buffer overflows. Other languages, such as Ada and C#, typically provide overflow protection, but the protection can be disabled by the programmer. Be wary that a language's interface to native code may still be subject to overflows, even if the language itself is theoretically safe.",
      "ddmc_optionB": "The hardware vendor may provide a patch to sanitize the affected shared microarchitectural state when the processor transitions to a different context.",
      "ddmc_optionC": "Avoid storing information under the FTP root directory.",
      "ddmc_optionD": "Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area. Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Avoid storing information under the FTP root directory.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Storage of File With Sensitive Data Under FTP Root (CWE-220)?\nA.  Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, many languages that perform their own memory management, such as Java and Perl, are not subject to buffer overflows. Other languages, such as Ada and C#, typically provide overflow protection, but the protection can be disabled by the programmer. Be wary that a language's interface to native code may still be subject to overflows, even if the language itself is theoretically safe.\nB.  The hardware vendor may provide a patch to sanitize the affected shared microarchitectural state when the processor transitions to a different context.\nC.  Avoid storing information under the FTP root directory.\nD.  Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area. Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate CWE-925 (Improper Verification of Intent by Broadcast Receiver)?\nA.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nB.  Before acting on the Intent, check the Intent Action to make sure it matches the expected System action.\nC.  Common protection mechanisms include: Disconnecting the user after a small number of failed attempts Implementing a timeout Locking out a targeted account Requiring a computational task on the user's part.\nD.  Run the code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software. OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations. This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise. Be careful to avoid CWE-243 and other weaknesses related to jails.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CWE-925 (Improper Verification of Intent by Broadcast Receiver)",
      "ddmc_optionA": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmc_optionB": "Before acting on the Intent, check the Intent Action to make sure it matches the expected System action.",
      "ddmc_optionC": "Common protection mechanisms include: Disconnecting the user after a small number of failed attempts Implementing a timeout Locking out a targeted account Requiring a computational task on the user's part.",
      "ddmc_optionD": "Run the code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software. OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations. This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise. Be careful to avoid CWE-243 and other weaknesses related to jails.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Before acting on the Intent, check the Intent Action to make sure it matches the expected System action.",
      "prompts": [],
      "instruction": "How can you mitigate CWE-925 (Improper Verification of Intent by Broadcast Receiver)?\nA.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nB.  Before acting on the Intent, check the Intent Action to make sure it matches the expected System action.\nC.  Common protection mechanisms include: Disconnecting the user after a small number of failed attempts Implementing a timeout Locking out a targeted account Requiring a computational task on the user's part.\nD.  Run the code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software. OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations. This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise. Be careful to avoid CWE-243 and other weaknesses related to jails.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Trusted Relationship (T1199)?\nA.  Access modeling identifies and records the access permissions granted to administrators, users, groups, and systems.\nB.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\nC.  Monitoring code is injected into firmware for integrity monitoring of firmware and firmware data.\nD.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Trusted Relationship (T1199)",
      "ddmc_optionA": "Access modeling identifies and records the access permissions granted to administrators, users, groups, and systems.",
      "ddmc_optionB": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "ddmc_optionC": "Monitoring code is injected into firmware for integrity monitoring of firmware and firmware data.",
      "ddmc_optionD": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "prompts": [],
      "instruction": "What is a method to mitigate Trusted Relationship (T1199)?\nA.  Access modeling identifies and records the access permissions granted to administrators, users, groups, and systems.\nB.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\nC.  Monitoring code is injected into firmware for integrity monitoring of firmware and firmware data.\nD.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Compiled HTML File (T1218.001)?\nA.  Controlling access to local computer system resources with kernel-level capabilities.\nB.  Employing a pattern matching algorithm to statically analyze the content of files.\nC.  Using a digital signature to authenticate a file before opening.\nD.  Encrypting a file using a cryptographic key.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Compiled HTML File (T1218.001)",
      "ddmc_optionA": "Controlling access to local computer system resources with kernel-level capabilities.",
      "ddmc_optionB": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_optionC": "Using a digital signature to authenticate a file before opening.",
      "ddmc_optionD": "Encrypting a file using a cryptographic key.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Using a digital signature to authenticate a file before opening.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Compiled HTML File (T1218.001)?\nA.  Controlling access to local computer system resources with kernel-level capabilities.\nB.  Employing a pattern matching algorithm to statically analyze the content of files.\nC.  Using a digital signature to authenticate a file before opening.\nD.  Encrypting a file using a cryptographic key.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Command Shell in Externally Accessible Directory (CWE-553)?\nA.  This is a complex topic. See the book Translucent Databases for a good discussion of best practices.\nB.  Do not expose sensitive error information to the user.\nC.  Use a CPU and operating system that offers Data Execution Protection (using hardware NX or XD bits) or the equivalent techniques that simulate this feature in software, such as PaX [REF-60] [REF-61]. These techniques ensure that any instruction executed is exclusively at a memory address that is part of the code segment. For more information on these techniques see D3-PSEP (Process Segment Execution Prevention) from D3FEND [REF-1336].\nD.  Eliminate the usage of non-reentrant functionality inside of signal handlers. This includes replacing all non-reentrant library calls with reentrant calls. Note: This will not always be possible and may require large portions of the product to be rewritten or even redesigned. Sometimes reentrant-safe library alternatives will not be available. Sometimes non-reentrant interaction between the state of the system and the signal handler will be required by design.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Command Shell in Externally Accessible Directory (CWE-553)",
      "ddmc_optionA": "This is a complex topic. See the book Translucent Databases for a good discussion of best practices.",
      "ddmc_optionB": "Do not expose sensitive error information to the user.",
      "ddmc_optionC": "Use a CPU and operating system that offers Data Execution Protection (using hardware NX or XD bits) or the equivalent techniques that simulate this feature in software, such as PaX [REF-60] [REF-61]. These techniques ensure that any instruction executed is exclusively at a memory address that is part of the code segment. For more information on these techniques see D3-PSEP (Process Segment Execution Prevention) from D3FEND [REF-1336].",
      "ddmc_optionD": "Eliminate the usage of non-reentrant functionality inside of signal handlers. This includes replacing all non-reentrant library calls with reentrant calls. Note: This will not always be possible and may require large portions of the product to be rewritten or even redesigned. Sometimes reentrant-safe library alternatives will not be available. Sometimes non-reentrant interaction between the state of the system and the signal handler will be required by design.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Do not expose sensitive error information to the user.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Command Shell in Externally Accessible Directory (CWE-553)?\nA.  This is a complex topic. See the book Translucent Databases for a good discussion of best practices.\nB.  Do not expose sensitive error information to the user.\nC.  Use a CPU and operating system that offers Data Execution Protection (using hardware NX or XD bits) or the equivalent techniques that simulate this feature in software, such as PaX [REF-60] [REF-61]. These techniques ensure that any instruction executed is exclusively at a memory address that is part of the code segment. For more information on these techniques see D3-PSEP (Process Segment Execution Prevention) from D3FEND [REF-1336].\nD.  Eliminate the usage of non-reentrant functionality inside of signal handlers. This includes replacing all non-reentrant library calls with reentrant calls. Note: This will not always be possible and may require large portions of the product to be rewritten or even redesigned. Sometimes reentrant-safe library alternatives will not be available. Sometimes non-reentrant interaction between the state of the system and the signal handler will be required by design.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1546.010 (AppInit DLLs)?\nA.  Restricting inter-domain trust by modifying domain configuration.\nB.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nC.  Executing or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.\nD.  Using kernel-level capabilities to isolate processes.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1546.010 (AppInit DLLs)",
      "ddmc_optionA": "Restricting inter-domain trust by modifying domain configuration.",
      "ddmc_optionB": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmc_optionC": "Executing or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.",
      "ddmc_optionD": "Using kernel-level capabilities to isolate processes.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Using kernel-level capabilities to isolate processes.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1546.010 (AppInit DLLs)?\nA.  Restricting inter-domain trust by modifying domain configuration.\nB.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nC.  Executing or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.\nD.  Using kernel-level capabilities to isolate processes.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Security Support Provider (T1547.005)?\nA.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\nB.  Encrypting a file using a cryptographic key.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Security Support Provider (T1547.005)",
      "ddmc_optionA": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "ddmc_optionB": "Encrypting a file using a cryptographic key.",
      "ddmc_optionC": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionD": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Security Support Provider (T1547.005)?\nA.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\nB.  Encrypting a file using a cryptographic key.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Small Space of Random Values (CWE-334)?\nA.  Ensure an end condition will be reached under all logic conditions. The end condition may include testing against the depth of recursion and exiting with an error if the recursion goes too deep. The complexity of the end condition contributes to the effectiveness of this action.\nB.  Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.\nC.  Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C (\"Approved Random Number Generators\").\nD.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Small Space of Random Values (CWE-334)",
      "ddmc_optionA": "Ensure an end condition will be reached under all logic conditions. The end condition may include testing against the depth of recursion and exiting with an error if the recursion goes too deep. The complexity of the end condition contributes to the effectiveness of this action.",
      "ddmc_optionB": "Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.",
      "ddmc_optionC": "Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C (\"Approved Random Number Generators\").",
      "ddmc_optionD": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C (\"Approved Random Number Generators\").",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Small Space of Random Values (CWE-334)?\nA.  Ensure an end condition will be reached under all logic conditions. The end condition may include testing against the depth of recursion and exiting with an error if the recursion goes too deep. The complexity of the end condition contributes to the effectiveness of this action.\nB.  Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.\nC.  Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C (\"Approved Random Number Generators\").\nD.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Credential Stuffing (T1110.004)?\nA.  Restoring software to a host.\nB.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nC.  Detecting any suspicious changes to files in a computer system.\nD.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Credential Stuffing (T1110.004)",
      "ddmc_optionA": "Restoring software to a host.",
      "ddmc_optionB": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_optionC": "Detecting any suspicious changes to files in a computer system.",
      "ddmc_optionD": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "prompts": [],
      "instruction": "What is a method to mitigate Credential Stuffing (T1110.004)?\nA.  Restoring software to a host.\nB.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nC.  Detecting any suspicious changes to files in a computer system.\nD.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1110.003 (Password Spraying)?\nA.  Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.\nB.  Block execution of code on a system through application control, and/or script blocking.\nC.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\nD.  Set and enforce secure password policies for accounts.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1110.003 (Password Spraying)",
      "ddmc_optionA": "Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.",
      "ddmc_optionB": "Block execution of code on a system through application control, and/or script blocking.",
      "ddmc_optionC": "Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.",
      "ddmc_optionD": "Set and enforce secure password policies for accounts.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Set and enforce secure password policies for accounts.",
      "prompts": [],
      "instruction": "How can you mitigate T1110.003 (Password Spraying)?\nA.  Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.\nB.  Block execution of code on a system through application control, and/or script blocking.\nC.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\nD.  Set and enforce secure password policies for accounts.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Event Triggered Execution (T1546)?\nA.  Enforce binary and application integrity with digital signature verification to prevent untrusted code from executing.\nB.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nC.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nD.  Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Event Triggered Execution (T1546)",
      "ddmc_optionA": "Enforce binary and application integrity with digital signature verification to prevent untrusted code from executing.",
      "ddmc_optionB": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_optionC": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_optionD": "Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "prompts": [],
      "instruction": "How can you mitigate Event Triggered Execution (T1546)?\nA.  Enforce binary and application integrity with digital signature verification to prevent untrusted code from executing.\nB.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nC.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nD.  Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Missing Authentication for Critical Function (CWE-306)?\nA.  In Java, explicitly define final writeObject() to prevent serialization. This is the recommended solution. Define the writeObject() function to throw an exception explicitly denying serialization.\nB.  Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, consider using libraries with authentication capabilities such as OpenSSL or the ESAPI Authenticator [REF-45].\nC.  Remove or restrict all environment settings before invoking other programs. This includes the PATH environment variable, LD_LIBRARY_PATH, and other settings that identify the location of code libraries, and any application-specific search paths.\nD.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Missing Authentication for Critical Function (CWE-306)",
      "ddmc_optionA": "In Java, explicitly define final writeObject() to prevent serialization. This is the recommended solution. Define the writeObject() function to throw an exception explicitly denying serialization.",
      "ddmc_optionB": "Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, consider using libraries with authentication capabilities such as OpenSSL or the ESAPI Authenticator [REF-45].",
      "ddmc_optionC": "Remove or restrict all environment settings before invoking other programs. This includes the PATH environment variable, LD_LIBRARY_PATH, and other settings that identify the location of code libraries, and any application-specific search paths.",
      "ddmc_optionD": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, consider using libraries with authentication capabilities such as OpenSSL or the ESAPI Authenticator [REF-45].",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Missing Authentication for Critical Function (CWE-306)?\nA.  In Java, explicitly define final writeObject() to prevent serialization. This is the recommended solution. Define the writeObject() function to throw an exception explicitly denying serialization.\nB.  Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, consider using libraries with authentication capabilities such as OpenSSL or the ESAPI Authenticator [REF-45].\nC.  Remove or restrict all environment settings before invoking other programs. This includes the PATH environment variable, LD_LIBRARY_PATH, and other settings that identify the location of code libraries, and any application-specific search paths.\nD.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1030 (Data Transfer Size Limits)?\nA.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nB.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nC.  Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.\nD.  File eviction techniques evict files from system storage.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1030 (Data Transfer Size Limits)",
      "ddmc_optionA": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmc_optionB": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_optionC": "Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.",
      "ddmc_optionD": "File eviction techniques evict files from system storage.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1030 (Data Transfer Size Limits)?\nA.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nB.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nC.  Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.\nD.  File eviction techniques evict files from system storage.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Domain Fronting (T1090.004)?\nA.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nB.  Employing a pattern matching rule language to analyze the content of files.\nC.  Restoring an software configuration.\nD.  Employing file hash comparisons to detect known malware.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Domain Fronting (T1090.004)",
      "ddmc_optionA": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmc_optionB": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_optionC": "Restoring an software configuration.",
      "ddmc_optionD": "Employing file hash comparisons to detect known malware.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "prompts": [],
      "instruction": "What is a method to mitigate Domain Fronting (T1090.004)?\nA.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nB.  Employing a pattern matching rule language to analyze the content of files.\nC.  Restoring an software configuration.\nD.  Employing file hash comparisons to detect known malware.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Reversible Encryption (T1556.005)?\nA.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\nB.  Manage the creation, modification, use, and permissions associated to user accounts.\nC.  Block execution of code on a system through application control, and/or script blocking.\nD.  Set and enforce secure password policies for accounts.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Reversible Encryption (T1556.005)",
      "ddmc_optionA": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
      "ddmc_optionB": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmc_optionC": "Block execution of code on a system through application control, and/or script blocking.",
      "ddmc_optionD": "Set and enforce secure password policies for accounts.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Set and enforce secure password policies for accounts.",
      "prompts": [],
      "instruction": "What is a method to mitigate Reversible Encryption (T1556.005)?\nA.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\nB.  Manage the creation, modification, use, and permissions associated to user accounts.\nC.  Block execution of code on a system through application control, and/or script blocking.\nD.  Set and enforce secure password policies for accounts.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Exfiltration Over Symmetric Encrypted Non-C2 Protocol (T1048.001)?\nA.  Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.\nB.  Restricting network traffic originating from a private host or enclave destined towards untrusted networks.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Exfiltration Over Symmetric Encrypted Non-C2 Protocol (T1048.001)",
      "ddmc_optionA": "Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.",
      "ddmc_optionB": "Restricting network traffic originating from a private host or enclave destined towards untrusted networks.",
      "ddmc_optionC": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionD": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Restricting network traffic originating from a private host or enclave destined towards untrusted networks.",
      "prompts": [],
      "instruction": "What is a method to mitigate Exfiltration Over Symmetric Encrypted Non-C2 Protocol (T1048.001)?\nA.  Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.\nB.  Restricting network traffic originating from a private host or enclave destined towards untrusted networks.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Dynamic Resolution (T1568)?\nA.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nB.  Employing a pattern matching algorithm to statically analyze the content of files.\nC.  The detection of an internal host relaying traffic between the internal network and the external network.\nD.  Analyzing database queries to detect SQL Injection.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Dynamic Resolution (T1568)",
      "ddmc_optionA": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_optionB": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_optionC": "The detection of an internal host relaying traffic between the internal network and the external network.",
      "ddmc_optionD": "Analyzing database queries to detect SQL Injection.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "prompts": [],
      "instruction": "What is a method to mitigate Dynamic Resolution (T1568)?\nA.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nB.  Employing a pattern matching algorithm to statically analyze the content of files.\nC.  The detection of an internal host relaying traffic between the internal network and the external network.\nD.  Analyzing database queries to detect SQL Injection.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate System Service Discovery (T1007)?\nA.  Controlling access to local computer system resources with kernel-level capabilities.\nB.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nC.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nD.  Preventing one process from writing to the memory space of another process through hardware based address manager implementations.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "System Service Discovery (T1007)",
      "ddmc_optionA": "Controlling access to local computer system resources with kernel-level capabilities.",
      "ddmc_optionB": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmc_optionC": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmc_optionD": "Preventing one process from writing to the memory space of another process through hardware based address manager implementations.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Preventing one process from writing to the memory space of another process through hardware based address manager implementations.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate System Service Discovery (T1007)?\nA.  Controlling access to local computer system resources with kernel-level capabilities.\nB.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nC.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nD.  Preventing one process from writing to the memory space of another process through hardware based address manager implementations.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Rogue Domain Controller (T1207)?\nA.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\nB.  Restricting network traffic originating from any location.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Rogue Domain Controller (T1207)",
      "ddmc_optionA": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "ddmc_optionB": "Restricting network traffic originating from any location.",
      "ddmc_optionC": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionD": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "prompts": [],
      "instruction": "What is a method to mitigate Rogue Domain Controller (T1207)?\nA.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\nB.  Restricting network traffic originating from any location.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Improper Export of Android Application Components (CWE-926)?\nA.  Map can be used instead of objects in most cases. If Map methods are used instead of object attributes, it is not possible to access the object prototype or modify it.\nB.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nC.  Limit Content Provider permissions (read/write) as appropriate.\nD.  For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Export of Android Application Components (CWE-926)",
      "ddmc_optionA": "Map can be used instead of objects in most cases. If Map methods are used instead of object attributes, it is not possible to access the object prototype or modify it.",
      "ddmc_optionB": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmc_optionC": "Limit Content Provider permissions (read/write) as appropriate.",
      "ddmc_optionD": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Limit Content Provider permissions (read/write) as appropriate.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Improper Export of Android Application Components (CWE-926)?\nA.  Map can be used instead of objects in most cases. If Map methods are used instead of object attributes, it is not possible to access the object prototype or modify it.\nB.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nC.  Limit Content Provider permissions (read/write) as appropriate.\nD.  For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Contaminate Resource (CAPEC-548)?\nA.  Ensure to keep up to date with security relevant updates to the persistence framework used within your application.\nB.  Be aware that improper use of access function calls such as chown(), tempfile(), chmod(), etc. can cause a race condition.\nC.  Properly safeguard classified/sensitive data. This includes training cleared individuals to ensure they are handling and disposing of this data properly, as well as ensuring systems only handle information of the classification level they are designed for.\nD.  Configuration: Disallow HTTP messages with both Transfer-Encoding and Content-Length or Double Content-Length Headers.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Contaminate Resource (CAPEC-548)",
      "ddmc_optionA": "Ensure to keep up to date with security relevant updates to the persistence framework used within your application.",
      "ddmc_optionB": "Be aware that improper use of access function calls such as chown(), tempfile(), chmod(), etc. can cause a race condition.",
      "ddmc_optionC": "Properly safeguard classified/sensitive data. This includes training cleared individuals to ensure they are handling and disposing of this data properly, as well as ensuring systems only handle information of the classification level they are designed for.",
      "ddmc_optionD": "Configuration: Disallow HTTP messages with both Transfer-Encoding and Content-Length or Double Content-Length Headers.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Properly safeguard classified/sensitive data. This includes training cleared individuals to ensure they are handling and disposing of this data properly, as well as ensuring systems only handle information of the classification level they are designed for.",
      "prompts": [],
      "instruction": "How can you mitigate Contaminate Resource (CAPEC-548)?\nA.  Ensure to keep up to date with security relevant updates to the persistence framework used within your application.\nB.  Be aware that improper use of access function calls such as chown(), tempfile(), chmod(), etc. can cause a race condition.\nC.  Properly safeguard classified/sensitive data. This includes training cleared individuals to ensure they are handling and disposing of this data properly, as well as ensuring systems only handle information of the classification level they are designed for.\nD.  Configuration: Disallow HTTP messages with both Transfer-Encoding and Content-Length or Double Content-Length Headers.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Application or System Exploitation (T1499.004)?\nA.  Use intrusion detection signatures to block traffic at network boundaries.\nB.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\nC.  Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.\nD.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Application or System Exploitation (T1499.004)",
      "ddmc_optionA": "Use intrusion detection signatures to block traffic at network boundaries.",
      "ddmc_optionB": "Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.",
      "ddmc_optionC": "Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.",
      "ddmc_optionD": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.",
      "prompts": [],
      "instruction": "What is a method to mitigate Application or System Exploitation (T1499.004)?\nA.  Use intrusion detection signatures to block traffic at network boundaries.\nB.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\nC.  Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.\nD.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate CAPEC-523 (Malicious Software Implanted)?\nA.  Requiring authentication for local services adds another layer of security between the adversary and internal services running on the server. By enforcing local authentication, an adversary will not gain access to all internal services only with access to the server.\nB.  To mitigate this type of attack, physical security techniques such as locks doors, alarms, and monitoring of targets should be implemented.\nC.  Implementation: Remove all debug and testing options from production code.\nD.  Select a provably large secret space for selection of the secret. Provably large means that the procedure by which the secret is selected does not have artifacts that significantly reduce the size of the total secret space.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CAPEC-523 (Malicious Software Implanted)",
      "ddmc_optionA": "Requiring authentication for local services adds another layer of security between the adversary and internal services running on the server. By enforcing local authentication, an adversary will not gain access to all internal services only with access to the server.",
      "ddmc_optionB": "To mitigate this type of attack, physical security techniques such as locks doors, alarms, and monitoring of targets should be implemented.",
      "ddmc_optionC": "Implementation: Remove all debug and testing options from production code.",
      "ddmc_optionD": "Select a provably large secret space for selection of the secret. Provably large means that the procedure by which the secret is selected does not have artifacts that significantly reduce the size of the total secret space.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "To mitigate this type of attack, physical security techniques such as locks doors, alarms, and monitoring of targets should be implemented.",
      "prompts": [],
      "instruction": "How can you mitigate CAPEC-523 (Malicious Software Implanted)?\nA.  Requiring authentication for local services adds another layer of security between the adversary and internal services running on the server. By enforcing local authentication, an adversary will not gain access to all internal services only with access to the server.\nB.  To mitigate this type of attack, physical security techniques such as locks doors, alarms, and monitoring of targets should be implemented.\nC.  Implementation: Remove all debug and testing options from production code.\nD.  Select a provably large secret space for selection of the secret. Provably large means that the procedure by which the secret is selected does not have artifacts that significantly reduce the size of the total secret space.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Dylib Hijacking (T1574.004)?\nA.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nB.  Employing a pattern matching algorithm to statically analyze the content of files.\nC.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\nD.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Dylib Hijacking (T1574.004)",
      "ddmc_optionA": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionB": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_optionC": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "ddmc_optionD": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Dylib Hijacking (T1574.004)?\nA.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nB.  Employing a pattern matching algorithm to statically analyze the content of files.\nC.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\nD.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect Signal Handler Use of a Non-reentrant Function (CWE-479)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections)\nC.  For hard-coded credentials in incoming authentication: use monitoring tools that examine the product's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the product was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic. Attach the monitor to the process and perform a login. Using call trees or similar artifacts from the output, examine the associated behaviors and see if any of them appear to be comparing the input to a fixed string or value.\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Signal Handler Use of a Non-reentrant Function (CWE-479)",
      "ddmc_optionA": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionB": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections)",
      "ddmc_optionC": "For hard-coded credentials in incoming authentication: use monitoring tools that examine the product's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the product was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic. Attach the monitor to the process and perform a login. Using call trees or similar artifacts from the output, examine the associated behaviors and see if any of them appear to be comparing the input to a fixed string or value.",
      "ddmc_optionD": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect Signal Handler Use of a Non-reentrant Function (CWE-479)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections)\nC.  For hard-coded credentials in incoming authentication: use monitoring tools that examine the product's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the product was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic. Attach the monitor to the process and perform a login. Using call trees or similar artifacts from the output, examine the associated behaviors and see if any of them appear to be comparing the input to a fixed string or value.\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Mobile Phishing (CAPEC-164)?\nA.  Implementation: use validation on both client and server side.\nB.  Backup device data before erasure to retain intellectual property and inside knowledge.\nC.  Protect environment variables against unauthorized read and write access.\nD.  Do not follow any links that you receive within text messages and do not input any login credentials on the page that they take you too. Instead, call your Bank, PayPal, eBay, etc., and inquire about the problem. Safe practices also include leveraging the entity's mobile application or directly typing the entity's URL in the browser and only then logging in. Never reply to any text messages that ask you to provide sensitive information of any kind.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Mobile Phishing (CAPEC-164)",
      "ddmc_optionA": "Implementation: use validation on both client and server side.",
      "ddmc_optionB": "Backup device data before erasure to retain intellectual property and inside knowledge.",
      "ddmc_optionC": "Protect environment variables against unauthorized read and write access.",
      "ddmc_optionD": "Do not follow any links that you receive within text messages and do not input any login credentials on the page that they take you too. Instead, call your Bank, PayPal, eBay, etc., and inquire about the problem. Safe practices also include leveraging the entity's mobile application or directly typing the entity's URL in the browser and only then logging in. Never reply to any text messages that ask you to provide sensitive information of any kind.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Do not follow any links that you receive within text messages and do not input any login credentials on the page that they take you too. Instead, call your Bank, PayPal, eBay, etc., and inquire about the problem. Safe practices also include leveraging the entity's mobile application or directly typing the entity's URL in the browser and only then logging in. Never reply to any text messages that ask you to provide sensitive information of any kind.",
      "prompts": [],
      "instruction": "What is a method to mitigate Mobile Phishing (CAPEC-164)?\nA.  Implementation: use validation on both client and server side.\nB.  Backup device data before erasure to retain intellectual property and inside knowledge.\nC.  Protect environment variables against unauthorized read and write access.\nD.  Do not follow any links that you receive within text messages and do not input any login credentials on the page that they take you too. Instead, call your Bank, PayPal, eBay, etc., and inquire about the problem. Safe practices also include leveraging the entity's mobile application or directly typing the entity's URL in the browser and only then logging in. Never reply to any text messages that ask you to provide sensitive information of any kind.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1090.002 (External Proxy)?\nA.  Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.\nB.  Using kernel-level capabilities to isolate processes.\nC.  Restricting network traffic originating from any location.\nD.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1090.002 (External Proxy)",
      "ddmc_optionA": "Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.",
      "ddmc_optionB": "Using kernel-level capabilities to isolate processes.",
      "ddmc_optionC": "Restricting network traffic originating from any location.",
      "ddmc_optionD": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Restricting network traffic originating from any location.",
      "prompts": [],
      "instruction": "How can you mitigate T1090.002 (External Proxy)?\nA.  Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.\nB.  Using kernel-level capabilities to isolate processes.\nC.  Restricting network traffic originating from any location.\nD.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Use of Known Kerberos Credentials (CAPEC-652)?\nA.  If you have to use dangerous functions, make sure that you do boundary checking.\nB.  Do not reuse Kerberos service account credentials across systems.\nC.  Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.\nD.  Do not reuse local administrator account credentials across systems.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Use of Known Kerberos Credentials (CAPEC-652)",
      "ddmc_optionA": "If you have to use dangerous functions, make sure that you do boundary checking.",
      "ddmc_optionB": "Do not reuse Kerberos service account credentials across systems.",
      "ddmc_optionC": "Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.",
      "ddmc_optionD": "Do not reuse local administrator account credentials across systems.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Do not reuse Kerberos service account credentials across systems.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Use of Known Kerberos Credentials (CAPEC-652)?\nA.  If you have to use dangerous functions, make sure that you do boundary checking.\nB.  Do not reuse Kerberos service account credentials across systems.\nC.  Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.\nD.  Do not reuse local administrator account credentials across systems.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Cloud Infrastructure Discovery (T1580)?\nA.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nB.  Vulnerability scanning is used to find potentially exploitable software vulnerabilities to remediate them.\nC.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nD.  Manage the creation, modification, use, and permissions associated to user accounts.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Cloud Infrastructure Discovery (T1580)",
      "ddmc_optionA": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmc_optionB": "Vulnerability scanning is used to find potentially exploitable software vulnerabilities to remediate them.",
      "ddmc_optionC": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "ddmc_optionD": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "prompts": [],
      "instruction": "What is a method to mitigate Cloud Infrastructure Discovery (T1580)?\nA.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nB.  Vulnerability scanning is used to find potentially exploitable software vulnerabilities to remediate them.\nC.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nD.  Manage the creation, modification, use, and permissions associated to user accounts.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate LSASS Driver (T1547.008)?\nA.  Blocking the execution of files on a host in accordance with defined application policy rules.\nB.  Using a digital signature to authenticate a file before opening.\nC.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\nD.  A file created for the purposes of deceiving an adversary.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "LSASS Driver (T1547.008)",
      "ddmc_optionA": "Blocking the execution of files on a host in accordance with defined application policy rules.",
      "ddmc_optionB": "Using a digital signature to authenticate a file before opening.",
      "ddmc_optionC": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "ddmc_optionD": "A file created for the purposes of deceiving an adversary.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "A file created for the purposes of deceiving an adversary.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate LSASS Driver (T1547.008)?\nA.  Blocking the execution of files on a host in accordance with defined application policy rules.\nB.  Using a digital signature to authenticate a file before opening.\nC.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\nD.  A file created for the purposes of deceiving an adversary.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Application Window Discovery (T1010)?\nA.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\nB.  Employing a pattern matching algorithm to statically analyze the content of files.\nC.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nD.  Preventing one process from writing to the memory space of another process through hardware based address manager implementations.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Application Window Discovery (T1010)",
      "ddmc_optionA": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "ddmc_optionB": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_optionC": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_optionD": "Preventing one process from writing to the memory space of another process through hardware based address manager implementations.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Preventing one process from writing to the memory space of another process through hardware based address manager implementations.",
      "prompts": [],
      "instruction": "How can you mitigate Application Window Discovery (T1010)?\nA.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\nB.  Employing a pattern matching algorithm to statically analyze the content of files.\nC.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nD.  Preventing one process from writing to the memory space of another process through hardware based address manager implementations.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect Use of Incorrect Byte Ordering (CWE-198)?\nA.  Automated techniques can find areas where path traversal weaknesses exist. However, tuning or customization may be required to remove or de-prioritize path-traversal problems that are only exploitable by the product's administrator - or other privileged users - and thus potentially valid behavior or, at worst, a bug instead of a vulnerability.\nB.  Because byte ordering bugs are usually very noticeable even with normal inputs, this bug is more likely to occur in rarely triggered error conditions, making them difficult to detect using black box methods.\nC.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Host Application Interface Scanner Fuzz Tester Framework-based Fuzzer\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Use of Incorrect Byte Ordering (CWE-198)",
      "ddmc_optionA": "Automated techniques can find areas where path traversal weaknesses exist. However, tuning or customization may be required to remove or de-prioritize path-traversal problems that are only exploitable by the product's administrator - or other privileged users - and thus potentially valid behavior or, at worst, a bug instead of a vulnerability.",
      "ddmc_optionB": "Because byte ordering bugs are usually very noticeable even with normal inputs, this bug is more likely to occur in rarely triggered error conditions, making them difficult to detect using black box methods.",
      "ddmc_optionC": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Host Application Interface Scanner Fuzz Tester Framework-based Fuzzer",
      "ddmc_optionD": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Because byte ordering bugs are usually very noticeable even with normal inputs, this bug is more likely to occur in rarely triggered error conditions, making them difficult to detect using black box methods.",
      "prompts": [],
      "instruction": "How can you detect Use of Incorrect Byte Ordering (CWE-198)?\nA.  Automated techniques can find areas where path traversal weaknesses exist. However, tuning or customization may be required to remove or de-prioritize path-traversal problems that are only exploitable by the product's administrator - or other privileged users - and thus potentially valid behavior or, at worst, a bug instead of a vulnerability.\nB.  Because byte ordering bugs are usually very noticeable even with normal inputs, this bug is more likely to occur in rarely triggered error conditions, making them difficult to detect using black box methods.\nC.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Host Application Interface Scanner Fuzz Tester Framework-based Fuzzer\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Dylib Hijacking (T1574.004)?\nA.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nB.  Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\nC.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\nD.  Restricting network traffic originating from any location.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Dylib Hijacking (T1574.004)",
      "ddmc_optionA": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_optionB": "Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.",
      "ddmc_optionC": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "ddmc_optionD": "Restricting network traffic originating from any location.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Dylib Hijacking (T1574.004)?\nA.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nB.  Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\nC.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\nD.  Restricting network traffic originating from any location.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Transport Agent (T1505.002)?\nA.  Use signatures or heuristics to detect malicious software.\nB.  Manage the creation, modification, use, and permissions associated to user accounts.\nC.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\nD.  Enforce binary and application integrity with digital signature verification to prevent untrusted code from executing.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Transport Agent (T1505.002)",
      "ddmc_optionA": "Use signatures or heuristics to detect malicious software.",
      "ddmc_optionB": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmc_optionC": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
      "ddmc_optionD": "Enforce binary and application integrity with digital signature verification to prevent untrusted code from executing.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Enforce binary and application integrity with digital signature verification to prevent untrusted code from executing.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Transport Agent (T1505.002)?\nA.  Use signatures or heuristics to detect malicious software.\nB.  Manage the creation, modification, use, and permissions associated to user accounts.\nC.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\nD.  Enforce binary and application integrity with digital signature verification to prevent untrusted code from executing.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Target Programs with Elevated Privileges (CAPEC-69)?\nA.  Suspicious or Malicious software is downloaded/installed on systems within the domain.\nB.  The log can have a trace of abnormal activity. Also if abnormal activity is detected on the host target. For instance flooding should be seen as abnormal activity and the target host may decide to take appropriate action in order to mitigate the attack (data filtering or blocking). Resource exhaustion is also a sign of abnormal activity.\nC.  Authentication attempts are originating from IP addresses or locations that are inconsistent with the user's normal IP addresses or locations.\nD.  Many invalid login attempts are coming from the same machine (same IP address) or for the same log in name. The login attempts use passwords that are dictionary words.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Target Programs with Elevated Privileges (CAPEC-69)",
      "ddmc_optionA": "Suspicious or Malicious software is downloaded/installed on systems within the domain.",
      "ddmc_optionB": "The log can have a trace of abnormal activity. Also if abnormal activity is detected on the host target. For instance flooding should be seen as abnormal activity and the target host may decide to take appropriate action in order to mitigate the attack (data filtering or blocking). Resource exhaustion is also a sign of abnormal activity.",
      "ddmc_optionC": "Authentication attempts are originating from IP addresses or locations that are inconsistent with the user's normal IP addresses or locations.",
      "ddmc_optionD": "Many invalid login attempts are coming from the same machine (same IP address) or for the same log in name. The login attempts use passwords that are dictionary words.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "The log can have a trace of abnormal activity. Also if abnormal activity is detected on the host target. For instance flooding should be seen as abnormal activity and the target host may decide to take appropriate action in order to mitigate the attack (data filtering or blocking). Resource exhaustion is also a sign of abnormal activity.",
      "prompts": [],
      "instruction": "What is a method to detect Target Programs with Elevated Privileges (CAPEC-69)?\nA.  Suspicious or Malicious software is downloaded/installed on systems within the domain.\nB.  The log can have a trace of abnormal activity. Also if abnormal activity is detected on the host target. For instance flooding should be seen as abnormal activity and the target host may decide to take appropriate action in order to mitigate the attack (data filtering or blocking). Resource exhaustion is also a sign of abnormal activity.\nC.  Authentication attempts are originating from IP addresses or locations that are inconsistent with the user's normal IP addresses or locations.\nD.  Many invalid login attempts are coming from the same machine (same IP address) or for the same log in name. The login attempts use passwords that are dictionary words.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Improper Neutralization of Line Delimiters (CWE-144)?\nA.  Support a maximum size for the log file that can be controlled by the administrator. If the maximum size is reached, the admin should be notified. Also, consider reducing functionality of the product. This may result in a denial-of-service to legitimate product users, but it will prevent the product from adversely impacting the entire system.\nB.  Ensure that the software runs properly under the United States Government Configuration Baseline (USGCB) [REF-199] or an equivalent hardening configuration guide, which many organizations use to limit the attack surface and potential risk of deployed software.\nC.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nD.  Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Neutralization of Line Delimiters (CWE-144)",
      "ddmc_optionA": "Support a maximum size for the log file that can be controlled by the administrator. If the maximum size is reached, the admin should be notified. Also, consider reducing functionality of the product. This may result in a denial-of-service to legitimate product users, but it will prevent the product from adversely impacting the entire system.",
      "ddmc_optionB": "Ensure that the software runs properly under the United States Government Configuration Baseline (USGCB) [REF-199] or an equivalent hardening configuration guide, which many organizations use to limit the attack surface and potential risk of deployed software.",
      "ddmc_optionC": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmc_optionD": "Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "prompts": [],
      "instruction": "How can you mitigate Improper Neutralization of Line Delimiters (CWE-144)?\nA.  Support a maximum size for the log file that can be controlled by the administrator. If the maximum size is reached, the admin should be notified. Also, consider reducing functionality of the product. This may result in a denial-of-service to legitimate product users, but it will prevent the product from adversely impacting the entire system.\nB.  Ensure that the software runs properly under the United States Government Configuration Baseline (USGCB) [REF-199] or an equivalent hardening configuration guide, which many organizations use to limit the attack surface and potential risk of deployed software.\nC.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nD.  Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1033 (System Owner/User Discovery)?\nA.  Blocking the execution of files on a host in accordance with defined application policy rules.\nB.  Application Hardening makes an executable application more resilient to a class of exploits which either introduce new code or execute unwanted existing code. These techniques may be applied at compile-time or on an application binary.\nC.  Employing a pattern matching rule language to analyze the content of files.\nD.  Configuring a kernel to use an allow or deny list to filter kernel api calls.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1033 (System Owner/User Discovery)",
      "ddmc_optionA": "Blocking the execution of files on a host in accordance with defined application policy rules.",
      "ddmc_optionB": "Application Hardening makes an executable application more resilient to a class of exploits which either introduce new code or execute unwanted existing code. These techniques may be applied at compile-time or on an application binary.",
      "ddmc_optionC": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_optionD": "Configuring a kernel to use an allow or deny list to filter kernel api calls.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Configuring a kernel to use an allow or deny list to filter kernel api calls.",
      "prompts": [],
      "instruction": "How can you mitigate T1033 (System Owner/User Discovery)?\nA.  Blocking the execution of files on a host in accordance with defined application policy rules.\nB.  Application Hardening makes an executable application more resilient to a class of exploits which either introduce new code or execute unwanted existing code. These techniques may be applied at compile-time or on an application binary.\nC.  Employing a pattern matching rule language to analyze the content of files.\nD.  Configuring a kernel to use an allow or deny list to filter kernel api calls.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Digital Certificates (T1596.003)?\nA.  Monitor whether default accounts have been activated or logged into. These audits should also include checks on any appliances and applications for default credentials or SSH keys, and if any are discovered, they should be updated immediately.\nB.  Perform integrity checking on pre-OS boot mechanisms that can be manipulated for malicious purposes. Take snapshots of boot records and firmware and compare against known good images. Log changes to boot records, BIOS, and EFI, which can be performed by API calls, and compare against known good behavior and patching. Disk check, forensic utilities, and data from device drivers (i.e. processes and API calls) may reveal anomalies that warrant deeper investigation.(Citations: ITWorld Hard Disk Health Dec 2014)\nC.  Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>CreateRemoteThread</code>, <code>SuspendThread</code>/<code>SetThreadContext</code>/<code>ResumeThread</code>, <code>QueueUserAPC</code>/<code>NtQueueApcThread</code>, and those that can be used to modify memory within another process, such as <code>VirtualAllocEx</code>/<code>WriteProcessMemory</code>, may be used for this technique. Monitor DLL/PE file events, specifically creation of these binary files as well as the loading of DLLs into processes. Look for DLLs that are not recognized or not normally loaded into a process. Monitoring for Linux specific calls such as the ptrace system call should not generate large amounts of data due to their specialized nature, and can be a very effective method to detect some of the common process injection methods.    Monitor for named pipe creation and connection events (Event IDs 17 and 18) for possible indicators of infected processes with external modules. Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior.(Citations: Elastic Process Injection July 2017, ArtOfMemoryForensics, GNU Acct, RHEL auditd, Chokepoint preload rootkits, Microsoft Sysmon v6 May 2017)\nD.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Digital Certificates (T1596.003)",
      "ddmc_optionA": "Monitor whether default accounts have been activated or logged into. These audits should also include checks on any appliances and applications for default credentials or SSH keys, and if any are discovered, they should be updated immediately.",
      "ddmc_optionB": "Perform integrity checking on pre-OS boot mechanisms that can be manipulated for malicious purposes. Take snapshots of boot records and firmware and compare against known good images. Log changes to boot records, BIOS, and EFI, which can be performed by API calls, and compare against known good behavior and patching. Disk check, forensic utilities, and data from device drivers (i.e. processes and API calls) may reveal anomalies that warrant deeper investigation.(Citations: ITWorld Hard Disk Health Dec 2014)",
      "ddmc_optionC": "Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>CreateRemoteThread</code>, <code>SuspendThread</code>/<code>SetThreadContext</code>/<code>ResumeThread</code>, <code>QueueUserAPC</code>/<code>NtQueueApcThread</code>, and those that can be used to modify memory within another process, such as <code>VirtualAllocEx</code>/<code>WriteProcessMemory</code>, may be used for this technique. Monitor DLL/PE file events, specifically creation of these binary files as well as the loading of DLLs into processes. Look for DLLs that are not recognized or not normally loaded into a process. Monitoring for Linux specific calls such as the ptrace system call should not generate large amounts of data due to their specialized nature, and can be a very effective method to detect some of the common process injection methods.    Monitor for named pipe creation and connection events (Event IDs 17 and 18) for possible indicators of infected processes with external modules. Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior.(Citations: Elastic Process Injection July 2017, ArtOfMemoryForensics, GNU Acct, RHEL auditd, Chokepoint preload rootkits, Microsoft Sysmon v6 May 2017)",
      "ddmc_optionD": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.",
      "prompts": [],
      "instruction": "What is a method to detect Digital Certificates (T1596.003)?\nA.  Monitor whether default accounts have been activated or logged into. These audits should also include checks on any appliances and applications for default credentials or SSH keys, and if any are discovered, they should be updated immediately.\nB.  Perform integrity checking on pre-OS boot mechanisms that can be manipulated for malicious purposes. Take snapshots of boot records and firmware and compare against known good images. Log changes to boot records, BIOS, and EFI, which can be performed by API calls, and compare against known good behavior and patching. Disk check, forensic utilities, and data from device drivers (i.e. processes and API calls) may reveal anomalies that warrant deeper investigation.(Citations: ITWorld Hard Disk Health Dec 2014)\nC.  Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>CreateRemoteThread</code>, <code>SuspendThread</code>/<code>SetThreadContext</code>/<code>ResumeThread</code>, <code>QueueUserAPC</code>/<code>NtQueueApcThread</code>, and those that can be used to modify memory within another process, such as <code>VirtualAllocEx</code>/<code>WriteProcessMemory</code>, may be used for this technique. Monitor DLL/PE file events, specifically creation of these binary files as well as the loading of DLLs into processes. Look for DLLs that are not recognized or not normally loaded into a process. Monitoring for Linux specific calls such as the ptrace system call should not generate large amounts of data due to their specialized nature, and can be a very effective method to detect some of the common process injection methods.    Monitor for named pipe creation and connection events (Event IDs 17 and 18) for possible indicators of infected processes with external modules. Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior.(Citations: Elastic Process Injection July 2017, ArtOfMemoryForensics, GNU Acct, RHEL auditd, Chokepoint preload rootkits, Microsoft Sysmon v6 May 2017)\nD.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect T1556.003 (Pluggable Authentication Modules)?\nA.  Monitor PAM configuration and module paths (ex: <code>/etc/pam.d/</code>) for changes. Use system-integrity tools such as AIDE and monitoring tools such as auditd to monitor PAM files. Look for suspicious account behavior across systems that share accounts, either user, admin, or service accounts. Examples: one account logged into multiple systems simultaneously; multiple accounts logged into the same machine simultaneously; accounts logged in at odd times (ex: when the user is not present) or outside of business hours. Activity may be from interactive login sessions or process ownership from accounts being used to execute binaries on a remote system as a particular account. Correlate other security systems with login information (e.g., a user has an active login session but has not entered the building or does not have VPN access).\nB.  Monitor the execution of and command-line arguments for applications that may be used by an adversary to gain Initial Access that require user interaction. This includes compression applications, such as those for zip files, that can be used to Deobfuscate/Decode Files or Information in payloads. Anti-virus can potentially detect malicious documents and files that are downloaded and executed on the user's computer. Endpoint sensing or network sensing can potentially detect malicious events once the file is opened (such as a Microsoft Word document or PDF reaching out to the internet or spawning powershell.exe).\nC.  Monitor DLL loads by processes, specifically looking for DLLs that are not recognized or not normally loaded into a process. Monitor the AppCertDLLs Registry value for modifications that do not correlate with known software, patch cycles, etc. Monitor and analyze application programming interface (API) calls that are indicative of Registry edits such as RegCreateKeyEx and RegSetValueEx.  Tools such as Sysinternals Autoruns may overlook AppCert DLLs as an auto-starting location.   Look for abnormal process behavior that may be due to a process loading a malicious DLL. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as making network connections for Command and Control, learning details about the environment through Discovery, and conducting Lateral Movement.(Citations: Elastic Process Injection July 2017, TechNet Autoruns, Sysinternals AppCertDlls Oct 2007)\nD.  Monitor for anomalous Kerberos activity, such as malformed or blank fields in Windows logon/logoff events (Event ID 4624, 4672, 4634), RC4 encryption within ticket granting tickets (TGTs), and ticket granting service (TGS) requests without preceding TGT requests. Monitor the lifetime of TGT tickets for values that differ from the default domain duration. Monitor for indications of Pass the Ticket being used to move laterally. Enable Audit Kerberos Service Ticket Operations to log Kerberos TGS service ticket requests. Particularly investigate irregular patterns of activity (ex: accounts making numerous requests, Event ID 4769, within a small time frame, especially if they also request RC4 encryption [Type 0x17]).  Monitor for unexpected processes interacting with lsass.exe. Common credential dumpers such as Mimikatz access the LSA Subsystem Service (LSASS) process by opening the process, locating the LSA secrets key, and decrypting the sections in memory where credential details, including Kerberos tickets, are stored. Monitor for unusual processes accessing <code>secrets.ldb</code> and <code>.secrets.mkey</code> located in <code>/var/lib/sss/secrets/</code>.(Citations: ADSecurity Detecting Forged Tickets, Stealthbits Detect PtT 2019, CERT-EU Golden Ticket Protection, Microsoft Kerberos Golden Ticket, Microsoft Detecting Kerberoasting Feb 2018, AdSecurity Cracking Kerberos Dec 2015, Medium Detecting Attempts to Steal Passwords from Memory)\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "T1556.003 (Pluggable Authentication Modules)",
      "ddmc_optionA": "Monitor PAM configuration and module paths (ex: <code>/etc/pam.d/</code>) for changes. Use system-integrity tools such as AIDE and monitoring tools such as auditd to monitor PAM files. Look for suspicious account behavior across systems that share accounts, either user, admin, or service accounts. Examples: one account logged into multiple systems simultaneously; multiple accounts logged into the same machine simultaneously; accounts logged in at odd times (ex: when the user is not present) or outside of business hours. Activity may be from interactive login sessions or process ownership from accounts being used to execute binaries on a remote system as a particular account. Correlate other security systems with login information (e.g., a user has an active login session but has not entered the building or does not have VPN access).",
      "ddmc_optionB": "Monitor the execution of and command-line arguments for applications that may be used by an adversary to gain Initial Access that require user interaction. This includes compression applications, such as those for zip files, that can be used to Deobfuscate/Decode Files or Information in payloads. Anti-virus can potentially detect malicious documents and files that are downloaded and executed on the user's computer. Endpoint sensing or network sensing can potentially detect malicious events once the file is opened (such as a Microsoft Word document or PDF reaching out to the internet or spawning powershell.exe).",
      "ddmc_optionC": "Monitor DLL loads by processes, specifically looking for DLLs that are not recognized or not normally loaded into a process. Monitor the AppCertDLLs Registry value for modifications that do not correlate with known software, patch cycles, etc. Monitor and analyze application programming interface (API) calls that are indicative of Registry edits such as RegCreateKeyEx and RegSetValueEx.  Tools such as Sysinternals Autoruns may overlook AppCert DLLs as an auto-starting location.   Look for abnormal process behavior that may be due to a process loading a malicious DLL. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as making network connections for Command and Control, learning details about the environment through Discovery, and conducting Lateral Movement.(Citations: Elastic Process Injection July 2017, TechNet Autoruns, Sysinternals AppCertDlls Oct 2007)",
      "ddmc_optionD": "Monitor for anomalous Kerberos activity, such as malformed or blank fields in Windows logon/logoff events (Event ID 4624, 4672, 4634), RC4 encryption within ticket granting tickets (TGTs), and ticket granting service (TGS) requests without preceding TGT requests. Monitor the lifetime of TGT tickets for values that differ from the default domain duration. Monitor for indications of Pass the Ticket being used to move laterally. Enable Audit Kerberos Service Ticket Operations to log Kerberos TGS service ticket requests. Particularly investigate irregular patterns of activity (ex: accounts making numerous requests, Event ID 4769, within a small time frame, especially if they also request RC4 encryption [Type 0x17]).  Monitor for unexpected processes interacting with lsass.exe. Common credential dumpers such as Mimikatz access the LSA Subsystem Service (LSASS) process by opening the process, locating the LSA secrets key, and decrypting the sections in memory where credential details, including Kerberos tickets, are stored. Monitor for unusual processes accessing <code>secrets.ldb</code> and <code>.secrets.mkey</code> located in <code>/var/lib/sss/secrets/</code>.(Citations: ADSecurity Detecting Forged Tickets, Stealthbits Detect PtT 2019, CERT-EU Golden Ticket Protection, Microsoft Kerberos Golden Ticket, Microsoft Detecting Kerberoasting Feb 2018, AdSecurity Cracking Kerberos Dec 2015, Medium Detecting Attempts to Steal Passwords from Memory)",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Monitor PAM configuration and module paths (ex: <code>/etc/pam.d/</code>) for changes. Use system-integrity tools such as AIDE and monitoring tools such as auditd to monitor PAM files. Look for suspicious account behavior across systems that share accounts, either user, admin, or service accounts. Examples: one account logged into multiple systems simultaneously; multiple accounts logged into the same machine simultaneously; accounts logged in at odd times (ex: when the user is not present) or outside of business hours. Activity may be from interactive login sessions or process ownership from accounts being used to execute binaries on a remote system as a particular account. Correlate other security systems with login information (e.g., a user has an active login session but has not entered the building or does not have VPN access).",
      "prompts": [],
      "instruction": "What is a method to detect T1556.003 (Pluggable Authentication Modules)?\nA.  Monitor PAM configuration and module paths (ex: <code>/etc/pam.d/</code>) for changes. Use system-integrity tools such as AIDE and monitoring tools such as auditd to monitor PAM files. Look for suspicious account behavior across systems that share accounts, either user, admin, or service accounts. Examples: one account logged into multiple systems simultaneously; multiple accounts logged into the same machine simultaneously; accounts logged in at odd times (ex: when the user is not present) or outside of business hours. Activity may be from interactive login sessions or process ownership from accounts being used to execute binaries on a remote system as a particular account. Correlate other security systems with login information (e.g., a user has an active login session but has not entered the building or does not have VPN access).\nB.  Monitor the execution of and command-line arguments for applications that may be used by an adversary to gain Initial Access that require user interaction. This includes compression applications, such as those for zip files, that can be used to Deobfuscate/Decode Files or Information in payloads. Anti-virus can potentially detect malicious documents and files that are downloaded and executed on the user's computer. Endpoint sensing or network sensing can potentially detect malicious events once the file is opened (such as a Microsoft Word document or PDF reaching out to the internet or spawning powershell.exe).\nC.  Monitor DLL loads by processes, specifically looking for DLLs that are not recognized or not normally loaded into a process. Monitor the AppCertDLLs Registry value for modifications that do not correlate with known software, patch cycles, etc. Monitor and analyze application programming interface (API) calls that are indicative of Registry edits such as RegCreateKeyEx and RegSetValueEx.  Tools such as Sysinternals Autoruns may overlook AppCert DLLs as an auto-starting location.   Look for abnormal process behavior that may be due to a process loading a malicious DLL. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as making network connections for Command and Control, learning details about the environment through Discovery, and conducting Lateral Movement.(Citations: Elastic Process Injection July 2017, TechNet Autoruns, Sysinternals AppCertDlls Oct 2007)\nD.  Monitor for anomalous Kerberos activity, such as malformed or blank fields in Windows logon/logoff events (Event ID 4624, 4672, 4634), RC4 encryption within ticket granting tickets (TGTs), and ticket granting service (TGS) requests without preceding TGT requests. Monitor the lifetime of TGT tickets for values that differ from the default domain duration. Monitor for indications of Pass the Ticket being used to move laterally. Enable Audit Kerberos Service Ticket Operations to log Kerberos TGS service ticket requests. Particularly investigate irregular patterns of activity (ex: accounts making numerous requests, Event ID 4769, within a small time frame, especially if they also request RC4 encryption [Type 0x17]).  Monitor for unexpected processes interacting with lsass.exe. Common credential dumpers such as Mimikatz access the LSA Subsystem Service (LSASS) process by opening the process, locating the LSA secrets key, and decrypting the sections in memory where credential details, including Kerberos tickets, are stored. Monitor for unusual processes accessing <code>secrets.ldb</code> and <code>.secrets.mkey</code> located in <code>/var/lib/sss/secrets/</code>.(Citations: ADSecurity Detecting Forged Tickets, Stealthbits Detect PtT 2019, CERT-EU Golden Ticket Protection, Microsoft Kerberos Golden Ticket, Microsoft Detecting Kerberoasting Feb 2018, AdSecurity Cracking Kerberos Dec 2015, Medium Detecting Attempts to Steal Passwords from Memory)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect Buffer Overflow via Environment Variables (CAPEC-10)?\nA.  If the application does bound checking, it should fail when the data source is larger than the size of the destination buffer. If the application's code is well written, that failure should trigger an alert.\nB.  Suspicious or Malicious software is executed within administrative network shares.\nC.  File Signatures for Malicious Software capable of abusing Transient Instruction Set Execution\nD.  Executed queries or commands that appear to malicious in nature or originating from an untrustworthy source.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Buffer Overflow via Environment Variables (CAPEC-10)",
      "ddmc_optionA": "If the application does bound checking, it should fail when the data source is larger than the size of the destination buffer. If the application's code is well written, that failure should trigger an alert.",
      "ddmc_optionB": "Suspicious or Malicious software is executed within administrative network shares.",
      "ddmc_optionC": "File Signatures for Malicious Software capable of abusing Transient Instruction Set Execution",
      "ddmc_optionD": "Executed queries or commands that appear to malicious in nature or originating from an untrustworthy source.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "If the application does bound checking, it should fail when the data source is larger than the size of the destination buffer. If the application's code is well written, that failure should trigger an alert.",
      "prompts": [],
      "instruction": "How can you detect Buffer Overflow via Environment Variables (CAPEC-10)?\nA.  If the application does bound checking, it should fail when the data source is larger than the size of the destination buffer. If the application's code is well written, that failure should trigger an alert.\nB.  Suspicious or Malicious software is executed within administrative network shares.\nC.  File Signatures for Malicious Software capable of abusing Transient Instruction Set Execution\nD.  Executed queries or commands that appear to malicious in nature or originating from an untrustworthy source.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate CMSTP (T1218.003)?\nA.  Using a digital signature to authenticate a file before opening.\nB.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\nC.  Restricting network traffic originating from any location.\nD.  Hardware component inventorying identifies and records the hardware items in the organization's architecture.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CMSTP (T1218.003)",
      "ddmc_optionA": "Using a digital signature to authenticate a file before opening.",
      "ddmc_optionB": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "ddmc_optionC": "Restricting network traffic originating from any location.",
      "ddmc_optionD": "Hardware component inventorying identifies and records the hardware items in the organization's architecture.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Using a digital signature to authenticate a file before opening.",
      "prompts": [],
      "instruction": "How can you mitigate CMSTP (T1218.003)?\nA.  Using a digital signature to authenticate a file before opening.\nB.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\nC.  Restricting network traffic originating from any location.\nD.  Hardware component inventorying identifies and records the hardware items in the organization's architecture.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Replace Winlogon Helper DLL (CAPEC-579)?\nA.  Utilize DMEA\u2019s (Defense Microelectronics Activity) Trusted Foundry Program members for acquisition of microelectronic components.\nB.  Implementation: Provide for network flow control and traffic shaping to control access to the resources.\nC.  Changes to registry entries in \"HKLM\\Software\\Microsoft\\Windows NT\\Winlogon\\Notify\" that do not correlate with known software, patch cycles, etc are suspicious. New DLLs written to System32 which do not correlate with known good software or patching may be suspicious.\nD.  Require elevated privileges for distribution of software and software updates.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Replace Winlogon Helper DLL (CAPEC-579)",
      "ddmc_optionA": "Utilize DMEA\u2019s (Defense Microelectronics Activity) Trusted Foundry Program members for acquisition of microelectronic components.",
      "ddmc_optionB": "Implementation: Provide for network flow control and traffic shaping to control access to the resources.",
      "ddmc_optionC": "Changes to registry entries in \"HKLM\\Software\\Microsoft\\Windows NT\\Winlogon\\Notify\" that do not correlate with known software, patch cycles, etc are suspicious. New DLLs written to System32 which do not correlate with known good software or patching may be suspicious.",
      "ddmc_optionD": "Require elevated privileges for distribution of software and software updates.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Changes to registry entries in \"HKLM\\Software\\Microsoft\\Windows NT\\Winlogon\\Notify\" that do not correlate with known software, patch cycles, etc are suspicious. New DLLs written to System32 which do not correlate with known good software or patching may be suspicious.",
      "prompts": [],
      "instruction": "How can you mitigate Replace Winlogon Helper DLL (CAPEC-579)?\nA.  Utilize DMEA\u2019s (Defense Microelectronics Activity) Trusted Foundry Program members for acquisition of microelectronic components.\nB.  Implementation: Provide for network flow control and traffic shaping to control access to the resources.\nC.  Changes to registry entries in \"HKLM\\Software\\Microsoft\\Windows NT\\Winlogon\\Notify\" that do not correlate with known software, patch cycles, etc are suspicious. New DLLs written to System32 which do not correlate with known good software or patching may be suspicious.\nD.  Require elevated privileges for distribution of software and software updates.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Remote Desktop Protocol (T1021.001)?\nA.  Restoring a file for an entity to access.\nB.  Collecting network communication protocol metadata and identifying statistical outliers.\nC.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nD.  Collecting network communication protocol metadata and identifying statistical outliers.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Remote Desktop Protocol (T1021.001)",
      "ddmc_optionA": "Restoring a file for an entity to access.",
      "ddmc_optionB": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmc_optionC": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmc_optionD": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "prompts": [],
      "instruction": "How can you mitigate Remote Desktop Protocol (T1021.001)?\nA.  Restoring a file for an entity to access.\nB.  Collecting network communication protocol metadata and identifying statistical outliers.\nC.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nD.  Collecting network communication protocol metadata and identifying statistical outliers.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Process Discovery (T1057)?\nA.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nB.  Restoring an software configuration.\nC.  Using kernel-level capabilities to isolate processes.\nD.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Process Discovery (T1057)",
      "ddmc_optionA": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_optionB": "Restoring an software configuration.",
      "ddmc_optionC": "Using kernel-level capabilities to isolate processes.",
      "ddmc_optionD": "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Process Discovery (T1057)?\nA.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nB.  Restoring an software configuration.\nC.  Using kernel-level capabilities to isolate processes.\nD.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate CWE-96 (Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection'))?\nA.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nB.  When storing data in the cloud (e.g., S3 buckets, Azure blobs, Google Cloud Storage, etc.), use the provider's controls to encrypt the data at rest. [REF-1297] [REF-1299] [REF-1301]\nC.  Perform proper output validation and escaping to neutralize all code syntax from data written to code files.\nD.  Refactor your code to avoid using reflection.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CWE-96 (Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection'))",
      "ddmc_optionA": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmc_optionB": "When storing data in the cloud (e.g., S3 buckets, Azure blobs, Google Cloud Storage, etc.), use the provider's controls to encrypt the data at rest. [REF-1297] [REF-1299] [REF-1301]",
      "ddmc_optionC": "Perform proper output validation and escaping to neutralize all code syntax from data written to code files.",
      "ddmc_optionD": "Refactor your code to avoid using reflection.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Perform proper output validation and escaping to neutralize all code syntax from data written to code files.",
      "prompts": [],
      "instruction": "What is a method to mitigate CWE-96 (Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection'))?\nA.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nB.  When storing data in the cloud (e.g., S3 buckets, Azure blobs, Google Cloud Storage, etc.), use the provider's controls to encrypt the data at rest. [REF-1297] [REF-1299] [REF-1301]\nC.  Perform proper output validation and escaping to neutralize all code syntax from data written to code files.\nD.  Refactor your code to avoid using reflection.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate External Proxy (T1090.002)?\nA.  Employing a pattern matching rule language to analyze the content of files.\nB.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\nC.  Modifying system configuration to increase password strength.\nD.  Analyzing the duration of user sessions in order to detect unauthorized activity.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "External Proxy (T1090.002)",
      "ddmc_optionA": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_optionB": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "ddmc_optionC": "Modifying system configuration to increase password strength.",
      "ddmc_optionD": "Analyzing the duration of user sessions in order to detect unauthorized activity.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "prompts": [],
      "instruction": "How can you mitigate External Proxy (T1090.002)?\nA.  Employing a pattern matching rule language to analyze the content of files.\nB.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\nC.  Modifying system configuration to increase password strength.\nD.  Analyzing the duration of user sessions in order to detect unauthorized activity.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Deobfuscate/Decode Files or Information (T1140)?\nA.  Employing a pattern matching algorithm to statically analyze the content of files.\nB.  Detecting any suspicious changes to files in a computer system.\nC.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\nD.  Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Deobfuscate/Decode Files or Information (T1140)",
      "ddmc_optionA": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_optionB": "Detecting any suspicious changes to files in a computer system.",
      "ddmc_optionC": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "ddmc_optionD": "Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Detecting any suspicious changes to files in a computer system.",
      "prompts": [],
      "instruction": "What is a method to mitigate Deobfuscate/Decode Files or Information (T1140)?\nA.  Employing a pattern matching algorithm to statically analyze the content of files.\nB.  Detecting any suspicious changes to files in a computer system.\nC.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\nD.  Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate CAPEC-668 (Key Negotiation of Bluetooth Attack (KNOB))?\nA.  Newer Bluetooth firmwares ensure that the KNOB is not negotaited in plaintext. Update your device.\nB.  Do not follow any links that you receive within your e-mails and certainly do not input any login credentials on the page that they take you too. Instead, call your Bank, PayPal, eBay, etc., and inquire about the problem. A safe practice would also be to type the URL of your bank in the browser directly and only then log in. Also, never reply to any e-mails that ask you to provide sensitive information of any kind.\nC.  Patch installed applications as soon as new updates become available.\nD.  Server side developers should not proxy content via XHR or other means. If a HTTP proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CAPEC-668 (Key Negotiation of Bluetooth Attack (KNOB))",
      "ddmc_optionA": "Newer Bluetooth firmwares ensure that the KNOB is not negotaited in plaintext. Update your device.",
      "ddmc_optionB": "Do not follow any links that you receive within your e-mails and certainly do not input any login credentials on the page that they take you too. Instead, call your Bank, PayPal, eBay, etc., and inquire about the problem. A safe practice would also be to type the URL of your bank in the browser directly and only then log in. Also, never reply to any e-mails that ask you to provide sensitive information of any kind.",
      "ddmc_optionC": "Patch installed applications as soon as new updates become available.",
      "ddmc_optionD": "Server side developers should not proxy content via XHR or other means. If a HTTP proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Newer Bluetooth firmwares ensure that the KNOB is not negotaited in plaintext. Update your device.",
      "prompts": [],
      "instruction": "What is a method to mitigate CAPEC-668 (Key Negotiation of Bluetooth Attack (KNOB))?\nA.  Newer Bluetooth firmwares ensure that the KNOB is not negotaited in plaintext. Update your device.\nB.  Do not follow any links that you receive within your e-mails and certainly do not input any login credentials on the page that they take you too. Instead, call your Bank, PayPal, eBay, etc., and inquire about the problem. A safe practice would also be to type the URL of your bank in the browser directly and only then log in. Also, never reply to any e-mails that ask you to provide sensitive information of any kind.\nC.  Patch installed applications as soon as new updates become available.\nD.  Server side developers should not proxy content via XHR or other means. If a HTTP proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1074.001 (Local Data Staging)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nC.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nD.  Preventing one process from writing to the memory space of another process through hardware based address manager implementations.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1074.001 (Local Data Staging)",
      "ddmc_optionA": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionB": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_optionC": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_optionD": "Preventing one process from writing to the memory space of another process through hardware based address manager implementations.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1074.001 (Local Data Staging)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nC.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nD.  Preventing one process from writing to the memory space of another process through hardware based address manager implementations.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Exploiting Incorrectly Configured SSL/TLS (CAPEC-217)?\nA.  After downloading open-source software, ensure integrity values have not changed.\nB.  Do not use SSL, as all SSL versions have been broken and should not be used. If TLS is not an option for the client or server, consider setting timeouts on SSL sessions to extremely low values to lessen the potential impact.\nC.  Test security lock programming flow in both pre-silicon and post-silicon environments.\nD.  Design: Include \"hosts file\"/IP address in the application\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Exploiting Incorrectly Configured SSL/TLS (CAPEC-217)",
      "ddmc_optionA": "After downloading open-source software, ensure integrity values have not changed.",
      "ddmc_optionB": "Do not use SSL, as all SSL versions have been broken and should not be used. If TLS is not an option for the client or server, consider setting timeouts on SSL sessions to extremely low values to lessen the potential impact.",
      "ddmc_optionC": "Test security lock programming flow in both pre-silicon and post-silicon environments.",
      "ddmc_optionD": "Design: Include \"hosts file\"/IP address in the application",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Do not use SSL, as all SSL versions have been broken and should not be used. If TLS is not an option for the client or server, consider setting timeouts on SSL sessions to extremely low values to lessen the potential impact.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Exploiting Incorrectly Configured SSL/TLS (CAPEC-217)?\nA.  After downloading open-source software, ensure integrity values have not changed.\nB.  Do not use SSL, as all SSL versions have been broken and should not be used. If TLS is not an option for the client or server, consider setting timeouts on SSL sessions to extremely low values to lessen the potential impact.\nC.  Test security lock programming flow in both pre-silicon and post-silicon environments.\nD.  Design: Include \"hosts file\"/IP address in the application\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect Improper Handling of Overlap Between Protected Memory Ranges (CWE-1260)?\nA.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Configuration Checker\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  Create a high privilege memory block of any arbitrary size. Attempt to create a lower privilege memory block with an overlap of the high privilege memory block. If the creation attempt works, fix the hardware. Repeat the test.\nD.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Binary Weakness Analysis - including disassembler + source code weakness analysis\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Improper Handling of Overlap Between Protected Memory Ranges (CWE-1260)",
      "ddmc_optionA": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Configuration Checker",
      "ddmc_optionB": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionC": "Create a high privilege memory block of any arbitrary size. Attempt to create a lower privilege memory block with an overlap of the high privilege memory block. If the creation attempt works, fix the hardware. Repeat the test.",
      "ddmc_optionD": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Binary Weakness Analysis - including disassembler + source code weakness analysis",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Create a high privilege memory block of any arbitrary size. Attempt to create a lower privilege memory block with an overlap of the high privilege memory block. If the creation attempt works, fix the hardware. Repeat the test.",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect Improper Handling of Overlap Between Protected Memory Ranges (CWE-1260)?\nA.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Configuration Checker\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  Create a high privilege memory block of any arbitrary size. Attempt to create a lower privilege memory block with an overlap of the high privilege memory block. If the creation attempt works, fix the hardware. Repeat the test.\nD.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Binary Weakness Analysis - including disassembler + source code weakness analysis\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Remote Code Inclusion (CAPEC-253)?\nA.  There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx).\nB.  Implementation: Host integrity monitoring for critical files, directories, and processes. The goal of host integrity monitoring is to be aware when a security issue has occurred so that incident response and other forensic activities can begin.\nC.  Employ robust identification and audit/blocking using an allowlist of applications on your system. Unnecessary applications, utilities, and configurations will have a presence in the system registry that can be leveraged by an adversary through this attack pattern.\nD.  Minimize attacks by input validation and sanitization of any user data that will be used by the target application to locate a remote file to be included.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Remote Code Inclusion (CAPEC-253)",
      "ddmc_optionA": "There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx).",
      "ddmc_optionB": "Implementation: Host integrity monitoring for critical files, directories, and processes. The goal of host integrity monitoring is to be aware when a security issue has occurred so that incident response and other forensic activities can begin.",
      "ddmc_optionC": "Employ robust identification and audit/blocking using an allowlist of applications on your system. Unnecessary applications, utilities, and configurations will have a presence in the system registry that can be leveraged by an adversary through this attack pattern.",
      "ddmc_optionD": "Minimize attacks by input validation and sanitization of any user data that will be used by the target application to locate a remote file to be included.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Minimize attacks by input validation and sanitization of any user data that will be used by the target application to locate a remote file to be included.",
      "prompts": [],
      "instruction": "What is a method to mitigate Remote Code Inclusion (CAPEC-253)?\nA.  There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx).\nB.  Implementation: Host integrity monitoring for critical files, directories, and processes. The goal of host integrity monitoring is to be aware when a security issue has occurred so that incident response and other forensic activities can begin.\nC.  Employ robust identification and audit/blocking using an allowlist of applications on your system. Unnecessary applications, utilities, and configurations will have a presence in the system registry that can be leveraged by an adversary through this attack pattern.\nD.  Minimize attacks by input validation and sanitization of any user data that will be used by the target application to locate a remote file to be included.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect Download of Code Without Integrity Check (CWE-494)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Configuration Checker\nC.  Use monitoring tools that examine the software's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the software was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic. Attach the monitor to the process and also sniff the network connection. Trigger features related to product updates or plugin installation, which is likely to force a code download. Monitor when files are downloaded and separately executed, or if they are otherwise read back into the process. Look for evidence of cryptographic library calls that use integrity checking.\nD.  Certain automated dynamic analysis techniques may be effective in producing side effects of uncontrolled resource allocation problems, especially with resources such as processes, memory, and connections. The technique may involve generating a large number of requests to the product within a short time frame. Manual analysis is likely required to interpret the results.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Download of Code Without Integrity Check (CWE-494)",
      "ddmc_optionA": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionB": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Configuration Checker",
      "ddmc_optionC": "Use monitoring tools that examine the software's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the software was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic. Attach the monitor to the process and also sniff the network connection. Trigger features related to product updates or plugin installation, which is likely to force a code download. Monitor when files are downloaded and separately executed, or if they are otherwise read back into the process. Look for evidence of cryptographic library calls that use integrity checking.",
      "ddmc_optionD": "Certain automated dynamic analysis techniques may be effective in producing side effects of uncontrolled resource allocation problems, especially with resources such as processes, memory, and connections. The technique may involve generating a large number of requests to the product within a short time frame. Manual analysis is likely required to interpret the results.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Use monitoring tools that examine the software's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the software was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic. Attach the monitor to the process and also sniff the network connection. Trigger features related to product updates or plugin installation, which is likely to force a code download. Monitor when files are downloaded and separately executed, or if they are otherwise read back into the process. Look for evidence of cryptographic library calls that use integrity checking.",
      "prompts": [],
      "instruction": "How can you detect Download of Code Without Integrity Check (CWE-494)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Configuration Checker\nC.  Use monitoring tools that examine the software's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the software was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic. Attach the monitor to the process and also sniff the network connection. Trigger features related to product updates or plugin installation, which is likely to force a code download. Monitor when files are downloaded and separately executed, or if they are otherwise read back into the process. Look for evidence of cryptographic library calls that use integrity checking.\nD.  Certain automated dynamic analysis techniques may be effective in producing side effects of uncontrolled resource allocation problems, especially with resources such as processes, memory, and connections. The technique may involve generating a large number of requests to the product within a short time frame. Manual analysis is likely required to interpret the results.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Winlogon Helper DLL (T1547.004)?\nA.  Restoring an software configuration.\nB.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nC.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nD.  Employing file hash comparisons to detect known malware.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Winlogon Helper DLL (T1547.004)",
      "ddmc_optionA": "Restoring an software configuration.",
      "ddmc_optionB": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_optionC": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmc_optionD": "Employing file hash comparisons to detect known malware.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Restoring an software configuration.",
      "prompts": [],
      "instruction": "What is a method to mitigate Winlogon Helper DLL (T1547.004)?\nA.  Restoring an software configuration.\nB.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nC.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nD.  Employing file hash comparisons to detect known malware.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate System Owner/User Discovery (T1033)?\nA.  Analyzing the behavior of embedded code in firmware and looking for anomalous behavior and suspicious activity.\nB.  Restoring an software configuration.\nC.  Detecting any suspicious changes to files in a computer system.\nD.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "System Owner/User Discovery (T1033)",
      "ddmc_optionA": "Analyzing the behavior of embedded code in firmware and looking for anomalous behavior and suspicious activity.",
      "ddmc_optionB": "Restoring an software configuration.",
      "ddmc_optionC": "Detecting any suspicious changes to files in a computer system.",
      "ddmc_optionD": "Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate System Owner/User Discovery (T1033)?\nA.  Analyzing the behavior of embedded code in firmware and looking for anomalous behavior and suspicious activity.\nB.  Restoring an software configuration.\nC.  Detecting any suspicious changes to files in a computer system.\nD.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate System Owner/User Discovery (T1033)?\nA.  Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.\nB.  Restricting access to a local file by configuring operating system functionality.\nC.  Using kernel-level capabilities to isolate processes.\nD.  Restoring an object for an entity to access. This is the broadest class for object restoral.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "System Owner/User Discovery (T1033)",
      "ddmc_optionA": "Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.",
      "ddmc_optionB": "Restricting access to a local file by configuring operating system functionality.",
      "ddmc_optionC": "Using kernel-level capabilities to isolate processes.",
      "ddmc_optionD": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate System Owner/User Discovery (T1033)?\nA.  Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.\nB.  Restricting access to a local file by configuring operating system functionality.\nC.  Using kernel-level capabilities to isolate processes.\nD.  Restoring an object for an entity to access. This is the broadest class for object restoral.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1074.001 (Local Data Staging)?\nA.  Detecting any suspicious changes to files in a computer system.\nB.  File eviction techniques evict files from system storage.\nC.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nD.  Network traffic policy mapping identifies and models the allowed pathways of data at the network, tranport, and/or application levels.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1074.001 (Local Data Staging)",
      "ddmc_optionA": "Detecting any suspicious changes to files in a computer system.",
      "ddmc_optionB": "File eviction techniques evict files from system storage.",
      "ddmc_optionC": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_optionD": "Network traffic policy mapping identifies and models the allowed pathways of data at the network, tranport, and/or application levels.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Detecting any suspicious changes to files in a computer system.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1074.001 (Local Data Staging)?\nA.  Detecting any suspicious changes to files in a computer system.\nB.  File eviction techniques evict files from system storage.\nC.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nD.  Network traffic policy mapping identifies and models the allowed pathways of data at the network, tranport, and/or application levels.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Malware-Directed Internal Reconnaissance (CAPEC-529)?\nA.  Sign everything, including configuration files, XML files and packages.\nB.  Design: Use browser technologies that do not allow client side scripting.\nC.  Deploy strong code integrity policies to allow only authorized apps to run.\nD.  Identify programs that may be used to acquire peripheral information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Malware-Directed Internal Reconnaissance (CAPEC-529)",
      "ddmc_optionA": "Sign everything, including configuration files, XML files and packages.",
      "ddmc_optionB": "Design: Use browser technologies that do not allow client side scripting.",
      "ddmc_optionC": "Deploy strong code integrity policies to allow only authorized apps to run.",
      "ddmc_optionD": "Identify programs that may be used to acquire peripheral information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Identify programs that may be used to acquire peripheral information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.",
      "prompts": [],
      "instruction": "What is a method to mitigate Malware-Directed Internal Reconnaissance (CAPEC-529)?\nA.  Sign everything, including configuration files, XML files and packages.\nB.  Design: Use browser technologies that do not allow client side scripting.\nC.  Deploy strong code integrity policies to allow only authorized apps to run.\nD.  Identify programs that may be used to acquire peripheral information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Cleartext Storage of Sensitive Information (CWE-312)?\nA.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source\nB.  When Certificate Pinning is being used in a mobile application, consider using a tool such as Spinner [REF-955]. This methodology might be extensible to other technologies.\nC.  Review address map in specification to see if there are any overlapping ranges.\nD.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Cleartext Storage of Sensitive Information (CWE-312)",
      "ddmc_optionA": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source",
      "ddmc_optionB": "When Certificate Pinning is being used in a mobile application, consider using a tool such as Spinner [REF-955]. This methodology might be extensible to other technologies.",
      "ddmc_optionC": "Review address map in specification to see if there are any overlapping ranges.",
      "ddmc_optionD": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "When Certificate Pinning is being used in a mobile application, consider using a tool such as Spinner [REF-955]. This methodology might be extensible to other technologies.",
      "prompts": [],
      "instruction": "What is a method to detect Cleartext Storage of Sensitive Information (CWE-312)?\nA.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source\nB.  When Certificate Pinning is being used in a mobile application, consider using a tool such as Spinner [REF-955]. This methodology might be extensible to other technologies.\nC.  Review address map in specification to see if there are any overlapping ranges.\nD.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Cellular Data Injection (CAPEC-610)?\nA.  Use OS-level preventative functionality. Not a complete solution.\nB.  Commercial defensive technology to detect and alert to any attempts to modify mobile technology data flows or to inject new data into existing data flows and signaling data.\nC.  Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.\nD.  Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process. Refer to the RFCs to safely decode URL.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Cellular Data Injection (CAPEC-610)",
      "ddmc_optionA": "Use OS-level preventative functionality. Not a complete solution.",
      "ddmc_optionB": "Commercial defensive technology to detect and alert to any attempts to modify mobile technology data flows or to inject new data into existing data flows and signaling data.",
      "ddmc_optionC": "Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.",
      "ddmc_optionD": "Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process. Refer to the RFCs to safely decode URL.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Commercial defensive technology to detect and alert to any attempts to modify mobile technology data flows or to inject new data into existing data flows and signaling data.",
      "prompts": [],
      "instruction": "What is a method to mitigate Cellular Data Injection (CAPEC-610)?\nA.  Use OS-level preventative functionality. Not a complete solution.\nB.  Commercial defensive technology to detect and alert to any attempts to modify mobile technology data flows or to inject new data into existing data flows and signaling data.\nC.  Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.\nD.  Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process. Refer to the RFCs to safely decode URL.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Network Boundary Bridging (T1599)?\nA.  Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.\nB.  Manage the creation, modification, use, and permissions associated to user accounts.\nC.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nD.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Network Boundary Bridging (T1599)",
      "ddmc_optionA": "Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.",
      "ddmc_optionB": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmc_optionC": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "ddmc_optionD": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "prompts": [],
      "instruction": "What is a method to mitigate Network Boundary Bridging (T1599)?\nA.  Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.\nB.  Manage the creation, modification, use, and permissions associated to user accounts.\nC.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nD.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate LSASS Memory (T1003.001)?\nA.  Restricting network traffic originating from any location.\nB.  Initiating a host's shutdown sequence to terminate all running processes.\nC.  Restoring an entity's access to resources.\nD.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "LSASS Memory (T1003.001)",
      "ddmc_optionA": "Restricting network traffic originating from any location.",
      "ddmc_optionB": "Initiating a host's shutdown sequence to terminate all running processes.",
      "ddmc_optionC": "Restoring an entity's access to resources.",
      "ddmc_optionD": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Initiating a host's shutdown sequence to terminate all running processes.",
      "prompts": [],
      "instruction": "What is a method to mitigate LSASS Memory (T1003.001)?\nA.  Restricting network traffic originating from any location.\nB.  Initiating a host's shutdown sequence to terminate all running processes.\nC.  Restoring an entity's access to resources.\nD.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate T1553.003 (SIP and Trust Provider Hijacking)?\nA.  Comparing strings using a variety of techniques to determine if a deceptive or malicious string is being presented to a user.\nB.  Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\nC.  Requiring proof of two or more pieces of evidence in order to authenticate a user.\nD.  Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1553.003 (SIP and Trust Provider Hijacking)",
      "ddmc_optionA": "Comparing strings using a variety of techniques to determine if a deceptive or malicious string is being presented to a user.",
      "ddmc_optionB": "Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.",
      "ddmc_optionC": "Requiring proof of two or more pieces of evidence in order to authenticate a user.",
      "ddmc_optionD": "Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate T1553.003 (SIP and Trust Provider Hijacking)?\nA.  Comparing strings using a variety of techniques to determine if a deceptive or malicious string is being presented to a user.\nB.  Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\nC.  Requiring proof of two or more pieces of evidence in order to authenticate a user.\nD.  Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Web Service (T1102)?\nA.  Actively collecting PKI certificates by connecting to the server and downloading its server certificates for analysis.\nB.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\nC.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\nD.  Configuring a kernel to use an allow or deny list to filter kernel api calls.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Web Service (T1102)",
      "ddmc_optionA": "Actively collecting PKI certificates by connecting to the server and downloading its server certificates for analysis.",
      "ddmc_optionB": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "ddmc_optionC": "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.",
      "ddmc_optionD": "Configuring a kernel to use an allow or deny list to filter kernel api calls.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Web Service (T1102)?\nA.  Actively collecting PKI certificates by connecting to the server and downloading its server certificates for analysis.\nB.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\nC.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\nD.  Configuring a kernel to use an allow or deny list to filter kernel api calls.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Bash History (T1552.003)?\nA.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nB.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\nC.  Using kernel-level capabilities to isolate processes.\nD.  Collecting network communication protocol metadata and identifying statistical outliers.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Bash History (T1552.003)",
      "ddmc_optionA": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionB": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmc_optionC": "Using kernel-level capabilities to isolate processes.",
      "ddmc_optionD": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Bash History (T1552.003)?\nA.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nB.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\nC.  Using kernel-level capabilities to isolate processes.\nD.  Collecting network communication protocol metadata and identifying statistical outliers.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Credential Stuffing (T1110.004)?\nA.  The file removal technique deletes malicious artifacts or programs from a computer system.\nB.  Analyzing failed connections in a network to detect unauthorized activity.\nC.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nD.  Controlling access to local computer system resources with kernel-level capabilities.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Credential Stuffing (T1110.004)",
      "ddmc_optionA": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "ddmc_optionB": "Analyzing failed connections in a network to detect unauthorized activity.",
      "ddmc_optionC": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_optionD": "Controlling access to local computer system resources with kernel-level capabilities.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Analyzing failed connections in a network to detect unauthorized activity.",
      "prompts": [],
      "instruction": "How can you mitigate Credential Stuffing (T1110.004)?\nA.  The file removal technique deletes malicious artifacts or programs from a computer system.\nB.  Analyzing failed connections in a network to detect unauthorized activity.\nC.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nD.  Controlling access to local computer system resources with kernel-level capabilities.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate CWE-781 (Improper Address Validation in IOCTL with METHOD_NEITHER I/O Control Code)?\nA.  Treat data/input as untrusted in both directions and apply the same data/input sanitization as XSS, SQLi, etc.\nB.  Use industry standards to protect the credentials (e.g. LDAP, keystore, etc.).\nC.  If possible, avoid using METHOD_NEITHER in the IOCTL and select methods that effectively control the buffer size, such as METHOD_BUFFERED, METHOD_IN_DIRECT, or METHOD_OUT_DIRECT.\nD.  Make any static fields private and constant. A constant field is denoted by the keyword 'const' in C/C++ and ' final' in Java\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CWE-781 (Improper Address Validation in IOCTL with METHOD_NEITHER I/O Control Code)",
      "ddmc_optionA": "Treat data/input as untrusted in both directions and apply the same data/input sanitization as XSS, SQLi, etc.",
      "ddmc_optionB": "Use industry standards to protect the credentials (e.g. LDAP, keystore, etc.).",
      "ddmc_optionC": "If possible, avoid using METHOD_NEITHER in the IOCTL and select methods that effectively control the buffer size, such as METHOD_BUFFERED, METHOD_IN_DIRECT, or METHOD_OUT_DIRECT.",
      "ddmc_optionD": "Make any static fields private and constant. A constant field is denoted by the keyword 'const' in C/C++ and ' final' in Java",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "If possible, avoid using METHOD_NEITHER in the IOCTL and select methods that effectively control the buffer size, such as METHOD_BUFFERED, METHOD_IN_DIRECT, or METHOD_OUT_DIRECT.",
      "prompts": [],
      "instruction": "What is a method to mitigate CWE-781 (Improper Address Validation in IOCTL with METHOD_NEITHER I/O Control Code)?\nA.  Treat data/input as untrusted in both directions and apply the same data/input sanitization as XSS, SQLi, etc.\nB.  Use industry standards to protect the credentials (e.g. LDAP, keystore, etc.).\nC.  If possible, avoid using METHOD_NEITHER in the IOCTL and select methods that effectively control the buffer size, such as METHOD_BUFFERED, METHOD_IN_DIRECT, or METHOD_OUT_DIRECT.\nD.  Make any static fields private and constant. A constant field is denoted by the keyword 'const' in C/C++ and ' final' in Java\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect Integer Coercion Error (CWE-192)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  Using an external debugger, send write transactions to mirrored regions to test if original, write-protected regions are modified. Similarly, send read transactions to mirrored regions to test if the original, read-protected signals can be read.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Integer Coercion Error (CWE-192)",
      "ddmc_optionA": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionB": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies",
      "ddmc_optionC": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionD": "Using an external debugger, send write transactions to mirrored regions to test if original, write-protected regions are modified. Similarly, send read transactions to mirrored regions to test if the original, read-protected signals can be read.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect Integer Coercion Error (CWE-192)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  Using an external debugger, send write transactions to mirrored regions to test if original, write-protected regions are modified. Similarly, send read transactions to mirrored regions to test if the original, read-protected signals can be read.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Session Fixation (CWE-384)?\nA.  If available, use the signing/sealing features of the programming language to assure that deserialized data has not been tainted. For example, a hash-based message authentication code (HMAC) could be used to ensure that data has not been modified.\nB.  Declare returned data which should not be altered as constant or immutable.\nC.  Invalidate any existing session identifiers prior to authorizing a new user session.\nD.  Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Session Fixation (CWE-384)",
      "ddmc_optionA": "If available, use the signing/sealing features of the programming language to assure that deserialized data has not been tainted. For example, a hash-based message authentication code (HMAC) could be used to ensure that data has not been modified.",
      "ddmc_optionB": "Declare returned data which should not be altered as constant or immutable.",
      "ddmc_optionC": "Invalidate any existing session identifiers prior to authorizing a new user session.",
      "ddmc_optionD": "Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Invalidate any existing session identifiers prior to authorizing a new user session.",
      "prompts": [],
      "instruction": "What is a method to mitigate Session Fixation (CWE-384)?\nA.  If available, use the signing/sealing features of the programming language to assure that deserialized data has not been tainted. For example, a hash-based message authentication code (HMAC) could be used to ensure that data has not been modified.\nB.  Declare returned data which should not be altered as constant or immutable.\nC.  Invalidate any existing session identifiers prior to authorizing a new user session.\nD.  Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1090.003 (Multi-hop Proxy)?\nA.  Restricting network traffic originating from any location.\nB.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\nC.  Restricting access to a local file by configuring operating system functionality.\nD.  Comparing strings using a variety of techniques to determine if a deceptive or malicious string is being presented to a user.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1090.003 (Multi-hop Proxy)",
      "ddmc_optionA": "Restricting network traffic originating from any location.",
      "ddmc_optionB": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmc_optionC": "Restricting access to a local file by configuring operating system functionality.",
      "ddmc_optionD": "Comparing strings using a variety of techniques to determine if a deceptive or malicious string is being presented to a user.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Restricting network traffic originating from any location.",
      "prompts": [],
      "instruction": "How can you mitigate T1090.003 (Multi-hop Proxy)?\nA.  Restricting network traffic originating from any location.\nB.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\nC.  Restricting access to a local file by configuring operating system functionality.\nD.  Comparing strings using a variety of techniques to determine if a deceptive or malicious string is being presented to a user.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Group Permission Footprinting (CAPEC-576)?\nA.  Design: Utilize strict type, character, and encoding enforcement\nB.  Identify programs (such as \"net\") that may be used to enumerate local group permissions and block them by using a software restriction Policy or tools that restrict program execution by using a process allowlist.\nC.  Implementation: Privileges are constrained, if a script is loaded, ensure system runs in chroot jail or other limited authority mode\nD.  Design: For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Group Permission Footprinting (CAPEC-576)",
      "ddmc_optionA": "Design: Utilize strict type, character, and encoding enforcement",
      "ddmc_optionB": "Identify programs (such as \"net\") that may be used to enumerate local group permissions and block them by using a software restriction Policy or tools that restrict program execution by using a process allowlist.",
      "ddmc_optionC": "Implementation: Privileges are constrained, if a script is loaded, ensure system runs in chroot jail or other limited authority mode",
      "ddmc_optionD": "Design: For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Identify programs (such as \"net\") that may be used to enumerate local group permissions and block them by using a software restriction Policy or tools that restrict program execution by using a process allowlist.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Group Permission Footprinting (CAPEC-576)?\nA.  Design: Utilize strict type, character, and encoding enforcement\nB.  Identify programs (such as \"net\") that may be used to enumerate local group permissions and block them by using a software restriction Policy or tools that restrict program execution by using a process allowlist.\nC.  Implementation: Privileges are constrained, if a script is loaded, ensure system runs in chroot jail or other limited authority mode\nD.  Design: For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Return of Stack Variable Address (CWE-562)?\nA.  Use naming conventions and strong types to make it easier to spot when sensitive data is being used. When creating structures, objects, or other complex entities, separate the sensitive and non-sensitive data as much as possible.\nB.  Use static analysis tools to spot return of the address of a stack variable.\nC.  Since any attacker who can listen to traffic can see sequence numbers, it is necessary to sign messages with some kind of cryptography to ensure that sequence numbers are not simply doctored along with content.\nD.  The fabric firewall should apply the same protections as the original region to the mirrored regions.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Return of Stack Variable Address (CWE-562)",
      "ddmc_optionA": "Use naming conventions and strong types to make it easier to spot when sensitive data is being used. When creating structures, objects, or other complex entities, separate the sensitive and non-sensitive data as much as possible.",
      "ddmc_optionB": "Use static analysis tools to spot return of the address of a stack variable.",
      "ddmc_optionC": "Since any attacker who can listen to traffic can see sequence numbers, it is necessary to sign messages with some kind of cryptography to ensure that sequence numbers are not simply doctored along with content.",
      "ddmc_optionD": "The fabric firewall should apply the same protections as the original region to the mirrored regions.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Use static analysis tools to spot return of the address of a stack variable.",
      "prompts": [],
      "instruction": "How can you mitigate Return of Stack Variable Address (CWE-562)?\nA.  Use naming conventions and strong types to make it easier to spot when sensitive data is being used. When creating structures, objects, or other complex entities, separate the sensitive and non-sensitive data as much as possible.\nB.  Use static analysis tools to spot return of the address of a stack variable.\nC.  Since any attacker who can listen to traffic can see sequence numbers, it is necessary to sign messages with some kind of cryptography to ensure that sequence numbers are not simply doctored along with content.\nD.  The fabric firewall should apply the same protections as the original region to the mirrored regions.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Non-Standard Port (T1571)?\nA.  Restricting access to a local file by configuring operating system functionality.\nB.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nC.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nD.  Restricting network traffic originating from a private host or enclave destined towards untrusted networks.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Non-Standard Port (T1571)",
      "ddmc_optionA": "Restricting access to a local file by configuring operating system functionality.",
      "ddmc_optionB": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmc_optionC": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_optionD": "Restricting network traffic originating from a private host or enclave destined towards untrusted networks.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Restricting network traffic originating from a private host or enclave destined towards untrusted networks.",
      "prompts": [],
      "instruction": "How can you mitigate Non-Standard Port (T1571)?\nA.  Restricting access to a local file by configuring operating system functionality.\nB.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nC.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nD.  Restricting network traffic originating from a private host or enclave destined towards untrusted networks.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Kernel Modules and Extensions (T1547.006)?\nA.  Manage the creation, modification, use, and permissions associated to user accounts.\nB.  Use signatures or heuristics to detect malicious software.\nC.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nD.  Protect sensitive information with strong encryption.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Kernel Modules and Extensions (T1547.006)",
      "ddmc_optionA": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmc_optionB": "Use signatures or heuristics to detect malicious software.",
      "ddmc_optionC": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmc_optionD": "Protect sensitive information with strong encryption.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Use signatures or heuristics to detect malicious software.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Kernel Modules and Extensions (T1547.006)?\nA.  Manage the creation, modification, use, and permissions associated to user accounts.\nB.  Use signatures or heuristics to detect malicious software.\nC.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nD.  Protect sensitive information with strong encryption.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Exfiltration over USB (T1052.001)?\nA.  Using kernel-level capabilities to isolate processes.\nB.  Encrypting a file using a cryptographic key.\nC.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nD.  Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Exfiltration over USB (T1052.001)",
      "ddmc_optionA": "Using kernel-level capabilities to isolate processes.",
      "ddmc_optionB": "Encrypting a file using a cryptographic key.",
      "ddmc_optionC": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_optionD": "Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "prompts": [],
      "instruction": "How can you mitigate Exfiltration over USB (T1052.001)?\nA.  Using kernel-level capabilities to isolate processes.\nB.  Encrypting a file using a cryptographic key.\nC.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nD.  Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Improper Neutralization of Leading Special Elements (CWE-160)?\nA.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nB.  Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C (\"Approved Random Number Generators\").\nC.  Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.\nD.  Ensure that memory regions are isolated as intended and that access control (read/write) policies are used by hardware to protect privileged software.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Neutralization of Leading Special Elements (CWE-160)",
      "ddmc_optionA": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmc_optionB": "Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C (\"Approved Random Number Generators\").",
      "ddmc_optionC": "Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.",
      "ddmc_optionD": "Ensure that memory regions are isolated as intended and that access control (read/write) policies are used by hardware to protect privileged software.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "prompts": [],
      "instruction": "What is a method to mitigate Improper Neutralization of Leading Special Elements (CWE-160)?\nA.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nB.  Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C (\"Approved Random Number Generators\").\nC.  Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.\nD.  Ensure that memory regions are isolated as intended and that access control (read/write) policies are used by hardware to protect privileged software.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Steal Web Session Cookie (T1539)?\nA.  Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.\nB.  Prevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.\nC.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nD.  Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Steal Web Session Cookie (T1539)",
      "ddmc_optionA": "Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.",
      "ddmc_optionB": "Prevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.",
      "ddmc_optionC": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmc_optionD": "Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.",
      "prompts": [],
      "instruction": "How can you mitigate Steal Web Session Cookie (T1539)?\nA.  Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.\nB.  Prevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.\nC.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nD.  Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate System Owner/User Discovery (T1033)?\nA.  Restoring an entity's access to resources.\nB.  Collecting network communication protocol metadata and identifying statistical outliers.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "System Owner/User Discovery (T1033)",
      "ddmc_optionA": "Restoring an entity's access to resources.",
      "ddmc_optionB": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmc_optionC": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionD": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "prompts": [],
      "instruction": "What is a method to mitigate System Owner/User Discovery (T1033)?\nA.  Restoring an entity's access to resources.\nB.  Collecting network communication protocol metadata and identifying statistical outliers.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Spearphishing via Service (T1566.003)?\nA.  Identification of suspicious processes executing on an end-point device by examining the ancestry and siblings of a process, and the associated metadata of each node on the tree, such as process execution, duration, and order relative to siblings and ancestors.\nB.  Employing a pattern matching rule language to analyze the content of files.\nC.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nD.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Spearphishing via Service (T1566.003)",
      "ddmc_optionA": "Identification of suspicious processes executing on an end-point device by examining the ancestry and siblings of a process, and the associated metadata of each node on the tree, such as process execution, duration, and order relative to siblings and ancestors.",
      "ddmc_optionB": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_optionC": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionD": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Employing a pattern matching rule language to analyze the content of files.",
      "prompts": [],
      "instruction": "What is a method to mitigate Spearphishing via Service (T1566.003)?\nA.  Identification of suspicious processes executing on an end-point device by examining the ancestry and siblings of a process, and the associated metadata of each node on the tree, such as process execution, duration, and order relative to siblings and ancestors.\nB.  Employing a pattern matching rule language to analyze the content of files.\nC.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nD.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Rogue Domain Controller (T1207)?\nA.  Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect application layer protocols that do not follow the expected protocol standards regarding syntax, structure, or any other variable adversaries could leverage to conceal data. Monitor for DNS traffic to/from known-bad or suspicious domains.(Citations: University of Birmingham C2)\nB.  Monitor and analyze network traffic associated with data replication (such as calls to DrsAddEntry, DrsReplicaAdd, and especially GetNCChanges) between DCs as well as to/from non DC hosts.   DC replication will naturally take place every 15 minutes but can be triggered by an adversary or by legitimate urgent changes (ex: passwords). Also consider monitoring and alerting on the replication of AD objects (Audit Detailed Directory Service Replication Events 4928 and 4929).  Leverage AD directory synchronization (DirSync) to monitor changes to directory state using AD replication cookies.   Baseline and periodically analyze the Configuration partition of the AD schema and alert on creation of nTDSDSA objects.  Investigate usage of Kerberos Service Principal Names (SPNs), especially those associated with services (beginning with \u201cGC/\u201d) by computers not present in the DC organizational unit (OU). The SPN associated with the Directory Replication Service (DRS) Remote Protocol interface (GUID E3514235\u20134B06\u201311D1-AB04\u201300C04FC2DCD2) can be set without logging.  A rogue DC must authenticate as a service using these two SPNs for the replication process to successfully complete.(Citations: GitHub DCSYNCMonitor, DCShadow Blog, DCShadow Blog, Microsoft DirSync, ADDSecurity DCShadow Feb 2018, DCShadow Blog, ADDSecurity DCShadow Feb 2018)\nC.  Monitor logs and processes for tools and command line arguments that may indicate they're being used for password policy discovery. Correlate that activity with other suspicious activity from the originating system to reduce potential false positives from valid user or administrator activity. Adversaries will likely attempt to find the password policy early in an operation and the activity is likely to happen with other Discovery activity.\nD.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Rogue Domain Controller (T1207)",
      "ddmc_optionA": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect application layer protocols that do not follow the expected protocol standards regarding syntax, structure, or any other variable adversaries could leverage to conceal data. Monitor for DNS traffic to/from known-bad or suspicious domains.(Citations: University of Birmingham C2)",
      "ddmc_optionB": "Monitor and analyze network traffic associated with data replication (such as calls to DrsAddEntry, DrsReplicaAdd, and especially GetNCChanges) between DCs as well as to/from non DC hosts.   DC replication will naturally take place every 15 minutes but can be triggered by an adversary or by legitimate urgent changes (ex: passwords). Also consider monitoring and alerting on the replication of AD objects (Audit Detailed Directory Service Replication Events 4928 and 4929).  Leverage AD directory synchronization (DirSync) to monitor changes to directory state using AD replication cookies.   Baseline and periodically analyze the Configuration partition of the AD schema and alert on creation of nTDSDSA objects.  Investigate usage of Kerberos Service Principal Names (SPNs), especially those associated with services (beginning with \u201cGC/\u201d) by computers not present in the DC organizational unit (OU). The SPN associated with the Directory Replication Service (DRS) Remote Protocol interface (GUID E3514235\u20134B06\u201311D1-AB04\u201300C04FC2DCD2) can be set without logging.  A rogue DC must authenticate as a service using these two SPNs for the replication process to successfully complete.(Citations: GitHub DCSYNCMonitor, DCShadow Blog, DCShadow Blog, Microsoft DirSync, ADDSecurity DCShadow Feb 2018, DCShadow Blog, ADDSecurity DCShadow Feb 2018)",
      "ddmc_optionC": "Monitor logs and processes for tools and command line arguments that may indicate they're being used for password policy discovery. Correlate that activity with other suspicious activity from the originating system to reduce potential false positives from valid user or administrator activity. Adversaries will likely attempt to find the password policy early in an operation and the activity is likely to happen with other Discovery activity.",
      "ddmc_optionD": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Monitor and analyze network traffic associated with data replication (such as calls to DrsAddEntry, DrsReplicaAdd, and especially GetNCChanges) between DCs as well as to/from non DC hosts.   DC replication will naturally take place every 15 minutes but can be triggered by an adversary or by legitimate urgent changes (ex: passwords). Also consider monitoring and alerting on the replication of AD objects (Audit Detailed Directory Service Replication Events 4928 and 4929).  Leverage AD directory synchronization (DirSync) to monitor changes to directory state using AD replication cookies.   Baseline and periodically analyze the Configuration partition of the AD schema and alert on creation of nTDSDSA objects.  Investigate usage of Kerberos Service Principal Names (SPNs), especially those associated with services (beginning with \u201cGC/\u201d) by computers not present in the DC organizational unit (OU). The SPN associated with the Directory Replication Service (DRS) Remote Protocol interface (GUID E3514235\u20134B06\u201311D1-AB04\u201300C04FC2DCD2) can be set without logging.  A rogue DC must authenticate as a service using these two SPNs for the replication process to successfully complete.(Citations: GitHub DCSYNCMonitor, DCShadow Blog, DCShadow Blog, Microsoft DirSync, ADDSecurity DCShadow Feb 2018, DCShadow Blog, ADDSecurity DCShadow Feb 2018)",
      "prompts": [],
      "instruction": "What is a method to detect Rogue Domain Controller (T1207)?\nA.  Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect application layer protocols that do not follow the expected protocol standards regarding syntax, structure, or any other variable adversaries could leverage to conceal data. Monitor for DNS traffic to/from known-bad or suspicious domains.(Citations: University of Birmingham C2)\nB.  Monitor and analyze network traffic associated with data replication (such as calls to DrsAddEntry, DrsReplicaAdd, and especially GetNCChanges) between DCs as well as to/from non DC hosts.   DC replication will naturally take place every 15 minutes but can be triggered by an adversary or by legitimate urgent changes (ex: passwords). Also consider monitoring and alerting on the replication of AD objects (Audit Detailed Directory Service Replication Events 4928 and 4929).  Leverage AD directory synchronization (DirSync) to monitor changes to directory state using AD replication cookies.   Baseline and periodically analyze the Configuration partition of the AD schema and alert on creation of nTDSDSA objects.  Investigate usage of Kerberos Service Principal Names (SPNs), especially those associated with services (beginning with \u201cGC/\u201d) by computers not present in the DC organizational unit (OU). The SPN associated with the Directory Replication Service (DRS) Remote Protocol interface (GUID E3514235\u20134B06\u201311D1-AB04\u201300C04FC2DCD2) can be set without logging.  A rogue DC must authenticate as a service using these two SPNs for the replication process to successfully complete.(Citations: GitHub DCSYNCMonitor, DCShadow Blog, DCShadow Blog, Microsoft DirSync, ADDSecurity DCShadow Feb 2018, DCShadow Blog, ADDSecurity DCShadow Feb 2018)\nC.  Monitor logs and processes for tools and command line arguments that may indicate they're being used for password policy discovery. Correlate that activity with other suspicious activity from the originating system to reduce potential false positives from valid user or administrator activity. Adversaries will likely attempt to find the password policy early in an operation and the activity is likely to happen with other Discovery activity.\nD.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Android Activity Hijack (CAPEC-501)?\nA.  An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.\nB.  To mitigate this type of an attack, explicit intents should be used whenever sensitive data is being sent. An 'explicit intent' is delivered to a specific application as declared within the intent, whereas an 'implicit intent' is directed to an application as defined by the Android operating system. If an implicit intent must be used, then it should be assumed that the intent will be received by an unknown application and any response should be treated accordingly (i.e., with appropriate security controls).\nC.  Implementation: Disable scripting languages such as JavaScript in browser\nD.  Implementation: Host integrity monitoring for critical files, directories, and processes. The goal of host integrity monitoring is to be aware when a security issue has occurred so that incident response and other forensic activities can begin.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Android Activity Hijack (CAPEC-501)",
      "ddmc_optionA": "An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.",
      "ddmc_optionB": "To mitigate this type of an attack, explicit intents should be used whenever sensitive data is being sent. An 'explicit intent' is delivered to a specific application as declared within the intent, whereas an 'implicit intent' is directed to an application as defined by the Android operating system. If an implicit intent must be used, then it should be assumed that the intent will be received by an unknown application and any response should be treated accordingly (i.e., with appropriate security controls).",
      "ddmc_optionC": "Implementation: Disable scripting languages such as JavaScript in browser",
      "ddmc_optionD": "Implementation: Host integrity monitoring for critical files, directories, and processes. The goal of host integrity monitoring is to be aware when a security issue has occurred so that incident response and other forensic activities can begin.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "To mitigate this type of an attack, explicit intents should be used whenever sensitive data is being sent. An 'explicit intent' is delivered to a specific application as declared within the intent, whereas an 'implicit intent' is directed to an application as defined by the Android operating system. If an implicit intent must be used, then it should be assumed that the intent will be received by an unknown application and any response should be treated accordingly (i.e., with appropriate security controls).",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Android Activity Hijack (CAPEC-501)?\nA.  An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.\nB.  To mitigate this type of an attack, explicit intents should be used whenever sensitive data is being sent. An 'explicit intent' is delivered to a specific application as declared within the intent, whereas an 'implicit intent' is directed to an application as defined by the Android operating system. If an implicit intent must be used, then it should be assumed that the intent will be received by an unknown application and any response should be treated accordingly (i.e., with appropriate security controls).\nC.  Implementation: Disable scripting languages such as JavaScript in browser\nD.  Implementation: Host integrity monitoring for critical files, directories, and processes. The goal of host integrity monitoring is to be aware when a security issue has occurred so that incident response and other forensic activities can begin.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Keychain (T1555.001)?\nA.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\nB.  A Credential created for the purpose of deceiving an adversary.\nC.  Restricting network traffic originating from any location.\nD.  Restoring the data in a database.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Keychain (T1555.001)",
      "ddmc_optionA": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmc_optionB": "A Credential created for the purpose of deceiving an adversary.",
      "ddmc_optionC": "Restricting network traffic originating from any location.",
      "ddmc_optionD": "Restoring the data in a database.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Restoring the data in a database.",
      "prompts": [],
      "instruction": "What is a method to mitigate Keychain (T1555.001)?\nA.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\nB.  A Credential created for the purpose of deceiving an adversary.\nC.  Restricting network traffic originating from any location.\nD.  Restoring the data in a database.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect Login Hook (T1037.002)?\nA.  Monitor script processes, such as `cscript`, and command-line parameters for scripts like PubPrn.vbs that may be used to proxy execution of malicious files.\nB.  Monitor system logs to review activities occurring across all cloud environments and regions. Configure alerting to notify of activity in normally unused regions or if the number of instances active in a region goes above a certain threshold.(Citations: CloudSploit - Unused AWS Regions)\nC.  `System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities based on the information obtained. Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell. For network infrastructure devices, collect AAA logging to monitor `show` commands being run by non-standard users from non-standard locations.\nD.  Monitor logon scripts for unusual access by abnormal users or at abnormal times. Look for files added or modified by unusual accounts outside of normal administration duties. Monitor running process for actions that could be indicative of abnormal programs or executables running upon logon.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Login Hook (T1037.002)",
      "ddmc_optionA": "Monitor script processes, such as `cscript`, and command-line parameters for scripts like PubPrn.vbs that may be used to proxy execution of malicious files.",
      "ddmc_optionB": "Monitor system logs to review activities occurring across all cloud environments and regions. Configure alerting to notify of activity in normally unused regions or if the number of instances active in a region goes above a certain threshold.(Citations: CloudSploit - Unused AWS Regions)",
      "ddmc_optionC": "`System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities based on the information obtained. Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell. For network infrastructure devices, collect AAA logging to monitor `show` commands being run by non-standard users from non-standard locations.",
      "ddmc_optionD": "Monitor logon scripts for unusual access by abnormal users or at abnormal times. Look for files added or modified by unusual accounts outside of normal administration duties. Monitor running process for actions that could be indicative of abnormal programs or executables running upon logon.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Monitor logon scripts for unusual access by abnormal users or at abnormal times. Look for files added or modified by unusual accounts outside of normal administration duties. Monitor running process for actions that could be indicative of abnormal programs or executables running upon logon.",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect Login Hook (T1037.002)?\nA.  Monitor script processes, such as `cscript`, and command-line parameters for scripts like PubPrn.vbs that may be used to proxy execution of malicious files.\nB.  Monitor system logs to review activities occurring across all cloud environments and regions. Configure alerting to notify of activity in normally unused regions or if the number of instances active in a region goes above a certain threshold.(Citations: CloudSploit - Unused AWS Regions)\nC.  `System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities based on the information obtained. Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell. For network infrastructure devices, collect AAA logging to monitor `show` commands being run by non-standard users from non-standard locations.\nD.  Monitor logon scripts for unusual access by abnormal users or at abnormal times. Look for files added or modified by unusual accounts outside of normal administration duties. Monitor running process for actions that could be indicative of abnormal programs or executables running upon logon.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect Web Service (T1102)?\nA.  Enable Audit Kerberos Service Ticket Operations to log Kerberos TGS service ticket requests. Particularly investigate irregular patterns of activity (ex: accounts making numerous requests, Event ID 4768 and 4769, within a small time frame, especially if they also request RC4 encryption [Type 0x17], pre-authentication not required [Type: 0x0]).(Citations: AdSecurity Cracking Kerberos Dec 2015, Microsoft Detecting Kerberoasting Feb 2018, Microsoft 4768 TGT 2017)\nB.  Collect file hashes; file names that do not match their expected hash are suspect. Perform file monitoring; files with known names but in unusual locations are suspect. Likewise, files that are modified outside of an update or patch are suspect. If file names are mismatched between the file name on disk and that of the binary's PE metadata, this is a likely indicator that a binary was renamed after it was compiled. Collecting and comparing disk and resource filenames for binaries by looking to see if the InternalName, OriginalFilename, and/or ProductName match what is expected could provide useful leads, but may not always be indicative of malicious activity.  Do not focus on the possible names a file could have, but instead on the command-line arguments that are known to be used and are distinct because it will have a better rate of detection. Look for indications of common characters that may indicate an attempt to trick users into misidentifying the file type, such as a space as the last character of a file name or the right-to-left override characters\"\\u202E\", \"[U+202E]\", and \"%E2%80%AE\u201d.(Citations: Elastic Masquerade Ball, Twitter ItsReallyNick Masquerading Update)\nC.  Detecting use of proxied smart card connections by an adversary may be difficult because it requires the token to be inserted into a system; thus it is more likely to be in use by a legitimate user and blend in with other network behavior. Similar to Input Capture, keylogging activity can take various forms but can may be detected via installation of a driver, setting a hook, or usage of particular API calls associated with polling to intercept keystrokes.\nD.  Host data that can relate unknown or suspicious process activity using a network connection is important to supplement any existing indicators of compromise based on malware command and control signatures and infrastructure or the presence of strong encryption. Packet capture analysis will require SSL/TLS inspection if data is encrypted. Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). User behavior monitoring may help to detect abnormal patterns of activity.(Citations: University of Birmingham C2)\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Web Service (T1102)",
      "ddmc_optionA": "Enable Audit Kerberos Service Ticket Operations to log Kerberos TGS service ticket requests. Particularly investigate irregular patterns of activity (ex: accounts making numerous requests, Event ID 4768 and 4769, within a small time frame, especially if they also request RC4 encryption [Type 0x17], pre-authentication not required [Type: 0x0]).(Citations: AdSecurity Cracking Kerberos Dec 2015, Microsoft Detecting Kerberoasting Feb 2018, Microsoft 4768 TGT 2017)",
      "ddmc_optionB": "Collect file hashes; file names that do not match their expected hash are suspect. Perform file monitoring; files with known names but in unusual locations are suspect. Likewise, files that are modified outside of an update or patch are suspect. If file names are mismatched between the file name on disk and that of the binary's PE metadata, this is a likely indicator that a binary was renamed after it was compiled. Collecting and comparing disk and resource filenames for binaries by looking to see if the InternalName, OriginalFilename, and/or ProductName match what is expected could provide useful leads, but may not always be indicative of malicious activity.  Do not focus on the possible names a file could have, but instead on the command-line arguments that are known to be used and are distinct because it will have a better rate of detection. Look for indications of common characters that may indicate an attempt to trick users into misidentifying the file type, such as a space as the last character of a file name or the right-to-left override characters\"\\u202E\", \"[U+202E]\", and \"%E2%80%AE\u201d.(Citations: Elastic Masquerade Ball, Twitter ItsReallyNick Masquerading Update)",
      "ddmc_optionC": "Detecting use of proxied smart card connections by an adversary may be difficult because it requires the token to be inserted into a system; thus it is more likely to be in use by a legitimate user and blend in with other network behavior. Similar to Input Capture, keylogging activity can take various forms but can may be detected via installation of a driver, setting a hook, or usage of particular API calls associated with polling to intercept keystrokes.",
      "ddmc_optionD": "Host data that can relate unknown or suspicious process activity using a network connection is important to supplement any existing indicators of compromise based on malware command and control signatures and infrastructure or the presence of strong encryption. Packet capture analysis will require SSL/TLS inspection if data is encrypted. Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). User behavior monitoring may help to detect abnormal patterns of activity.(Citations: University of Birmingham C2)",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Host data that can relate unknown or suspicious process activity using a network connection is important to supplement any existing indicators of compromise based on malware command and control signatures and infrastructure or the presence of strong encryption. Packet capture analysis will require SSL/TLS inspection if data is encrypted. Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). User behavior monitoring may help to detect abnormal patterns of activity.(Citations: University of Birmingham C2)",
      "prompts": [],
      "instruction": "How can you detect Web Service (T1102)?\nA.  Enable Audit Kerberos Service Ticket Operations to log Kerberos TGS service ticket requests. Particularly investigate irregular patterns of activity (ex: accounts making numerous requests, Event ID 4768 and 4769, within a small time frame, especially if they also request RC4 encryption [Type 0x17], pre-authentication not required [Type: 0x0]).(Citations: AdSecurity Cracking Kerberos Dec 2015, Microsoft Detecting Kerberoasting Feb 2018, Microsoft 4768 TGT 2017)\nB.  Collect file hashes; file names that do not match their expected hash are suspect. Perform file monitoring; files with known names but in unusual locations are suspect. Likewise, files that are modified outside of an update or patch are suspect. If file names are mismatched between the file name on disk and that of the binary's PE metadata, this is a likely indicator that a binary was renamed after it was compiled. Collecting and comparing disk and resource filenames for binaries by looking to see if the InternalName, OriginalFilename, and/or ProductName match what is expected could provide useful leads, but may not always be indicative of malicious activity.  Do not focus on the possible names a file could have, but instead on the command-line arguments that are known to be used and are distinct because it will have a better rate of detection. Look for indications of common characters that may indicate an attempt to trick users into misidentifying the file type, such as a space as the last character of a file name or the right-to-left override characters\"\\u202E\", \"[U+202E]\", and \"%E2%80%AE\u201d.(Citations: Elastic Masquerade Ball, Twitter ItsReallyNick Masquerading Update)\nC.  Detecting use of proxied smart card connections by an adversary may be difficult because it requires the token to be inserted into a system; thus it is more likely to be in use by a legitimate user and blend in with other network behavior. Similar to Input Capture, keylogging activity can take various forms but can may be detected via installation of a driver, setting a hook, or usage of particular API calls associated with polling to intercept keystrokes.\nD.  Host data that can relate unknown or suspicious process activity using a network connection is important to supplement any existing indicators of compromise based on malware command and control signatures and infrastructure or the presence of strong encryption. Packet capture analysis will require SSL/TLS inspection if data is encrypted. Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). User behavior monitoring may help to detect abnormal patterns of activity.(Citations: University of Birmingham C2)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Non-Standard Port (T1571)?\nA.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nB.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nC.  Encrypting a file using a cryptographic key.\nD.  Restricting access to a local file by configuring operating system functionality.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Non-Standard Port (T1571)",
      "ddmc_optionA": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_optionB": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmc_optionC": "Encrypting a file using a cryptographic key.",
      "ddmc_optionD": "Restricting access to a local file by configuring operating system functionality.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "prompts": [],
      "instruction": "How can you mitigate Non-Standard Port (T1571)?\nA.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nB.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nC.  Encrypting a file using a cryptographic key.\nD.  Restricting access to a local file by configuring operating system functionality.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Remote Data Staging (T1074.002)?\nA.  Deploying a network resource for the purposes of deceiving an adversary.\nB.  Restoring a user account's access to resources by unlocking a locked User Account.\nC.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nD.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Remote Data Staging (T1074.002)",
      "ddmc_optionA": "Deploying a network resource for the purposes of deceiving an adversary.",
      "ddmc_optionB": "Restoring a user account's access to resources by unlocking a locked User Account.",
      "ddmc_optionC": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_optionD": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Deploying a network resource for the purposes of deceiving an adversary.",
      "prompts": [],
      "instruction": "What is a method to mitigate Remote Data Staging (T1074.002)?\nA.  Deploying a network resource for the purposes of deceiving an adversary.\nB.  Restoring a user account's access to resources by unlocking a locked User Account.\nC.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nD.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate File and Directory Permissions Modification (T1222)?\nA.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nB.  Emulating instructions in a file looking for specific patterns.\nC.  Encrypting a file using a cryptographic key.\nD.  Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "File and Directory Permissions Modification (T1222)",
      "ddmc_optionA": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionB": "Emulating instructions in a file looking for specific patterns.",
      "ddmc_optionC": "Encrypting a file using a cryptographic key.",
      "ddmc_optionD": "Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate File and Directory Permissions Modification (T1222)?\nA.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nB.  Emulating instructions in a file looking for specific patterns.\nC.  Encrypting a file using a cryptographic key.\nD.  Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate T1547.008 (LSASS Driver)?\nA.  Block execution of code on a system through application control, and/or script blocking.\nB.  Prevent abuse of library loading mechanisms in the operating system and software to load untrusted code by configuring appropriate library loading mechanisms and investigating potential vulnerable software.\nC.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\nD.  This mitigation describes any guidance or training given to developers of applications to avoid introducing security weaknesses that an adversary may be able to take advantage of.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1547.008 (LSASS Driver)",
      "ddmc_optionA": "Block execution of code on a system through application control, and/or script blocking.",
      "ddmc_optionB": "Prevent abuse of library loading mechanisms in the operating system and software to load untrusted code by configuring appropriate library loading mechanisms and investigating potential vulnerable software.",
      "ddmc_optionC": "Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.",
      "ddmc_optionD": "This mitigation describes any guidance or training given to developers of applications to avoid introducing security weaknesses that an adversary may be able to take advantage of.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Prevent abuse of library loading mechanisms in the operating system and software to load untrusted code by configuring appropriate library loading mechanisms and investigating potential vulnerable software.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate T1547.008 (LSASS Driver)?\nA.  Block execution of code on a system through application control, and/or script blocking.\nB.  Prevent abuse of library loading mechanisms in the operating system and software to load untrusted code by configuring appropriate library loading mechanisms and investigating potential vulnerable software.\nC.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\nD.  This mitigation describes any guidance or training given to developers of applications to avoid introducing security weaknesses that an adversary may be able to take advantage of.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1114.003 (Email Forwarding Rule)?\nA.  Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.\nB.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\nC.  Make configuration changes related to the operating system or a common feature of the operating system that result in system hardening against techniques.\nD.  Manage the creation, modification, use, and permissions associated to user accounts.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1114.003 (Email Forwarding Rule)",
      "ddmc_optionA": "Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.",
      "ddmc_optionB": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
      "ddmc_optionC": "Make configuration changes related to the operating system or a common feature of the operating system that result in system hardening against techniques.",
      "ddmc_optionD": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
      "prompts": [],
      "instruction": "How can you mitigate T1114.003 (Email Forwarding Rule)?\nA.  Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.\nB.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\nC.  Make configuration changes related to the operating system or a common feature of the operating system that result in system hardening against techniques.\nD.  Manage the creation, modification, use, and permissions associated to user accounts.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Direct Network Flood (T1498.001)?\nA.  Employing a pattern matching rule language to analyze the content of files.\nB.  Requiring proof of two or more pieces of evidence in order to authenticate a user.\nC.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\nD.  Deleting a set of credentials permanently to prevent them from being used to authenticate.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Direct Network Flood (T1498.001)",
      "ddmc_optionA": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_optionB": "Requiring proof of two or more pieces of evidence in order to authenticate a user.",
      "ddmc_optionC": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "ddmc_optionD": "Deleting a set of credentials permanently to prevent them from being used to authenticate.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Direct Network Flood (T1498.001)?\nA.  Employing a pattern matching rule language to analyze the content of files.\nB.  Requiring proof of two or more pieces of evidence in order to authenticate a user.\nC.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\nD.  Deleting a set of credentials permanently to prevent them from being used to authenticate.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Free of Pointer not at Start of Buffer (CWE-761)?\nA.  Where possible, use automated tools to enforce the standards.\nB.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nC.  Add synchronization to your non-reentrant function.\nD.  Use a CPU and operating system that offers Data Execution Protection (using hardware NX or XD bits) or the equivalent techniques that simulate this feature in software, such as PaX [REF-60] [REF-61]. These techniques ensure that any instruction executed is exclusively at a memory address that is part of the code segment. For more information on these techniques see D3-PSEP (Process Segment Execution Prevention) from D3FEND [REF-1336].\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Free of Pointer not at Start of Buffer (CWE-761)",
      "ddmc_optionA": "Where possible, use automated tools to enforce the standards.",
      "ddmc_optionB": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmc_optionC": "Add synchronization to your non-reentrant function.",
      "ddmc_optionD": "Use a CPU and operating system that offers Data Execution Protection (using hardware NX or XD bits) or the equivalent techniques that simulate this feature in software, such as PaX [REF-60] [REF-61]. These techniques ensure that any instruction executed is exclusively at a memory address that is part of the code segment. For more information on these techniques see D3-PSEP (Process Segment Execution Prevention) from D3FEND [REF-1336].",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Where possible, use automated tools to enforce the standards.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Free of Pointer not at Start of Buffer (CWE-761)?\nA.  Where possible, use automated tools to enforce the standards.\nB.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nC.  Add synchronization to your non-reentrant function.\nD.  Use a CPU and operating system that offers Data Execution Protection (using hardware NX or XD bits) or the equivalent techniques that simulate this feature in software, such as PaX [REF-60] [REF-61]. These techniques ensure that any instruction executed is exclusively at a memory address that is part of the code segment. For more information on these techniques see D3-PSEP (Process Segment Execution Prevention) from D3FEND [REF-1336].\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Email Hiding Rules (T1564.008)?\nA.  The file removal technique deletes malicious artifacts or programs from a computer system.\nB.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nC.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nD.  Detecting any suspicious changes to files in a computer system.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Email Hiding Rules (T1564.008)",
      "ddmc_optionA": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "ddmc_optionB": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionC": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_optionD": "Detecting any suspicious changes to files in a computer system.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Email Hiding Rules (T1564.008)?\nA.  The file removal technique deletes malicious artifacts or programs from a computer system.\nB.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nC.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nD.  Detecting any suspicious changes to files in a computer system.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate UNIX Hard Link (CWE-62)?\nA.  Programming languages and supporting technologies might be chosen which are not subject to these issues.\nB.  Restrict server socket address to known local addresses.\nC.  Processor designers may expose registers (for example, control registers or model-specific registers) that allow privileged and/or user software to disable specific predictors or other hardware features that can cause confidential data to be exposed during transient execution.\nD.  Implement access-control checks in the bridge for both upstream and downstream transactions.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "UNIX Hard Link (CWE-62)",
      "ddmc_optionA": "Programming languages and supporting technologies might be chosen which are not subject to these issues.",
      "ddmc_optionB": "Restrict server socket address to known local addresses.",
      "ddmc_optionC": "Processor designers may expose registers (for example, control registers or model-specific registers) that allow privileged and/or user software to disable specific predictors or other hardware features that can cause confidential data to be exposed during transient execution.",
      "ddmc_optionD": "Implement access-control checks in the bridge for both upstream and downstream transactions.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Restrict server socket address to known local addresses.",
      "prompts": [],
      "instruction": "What is a method to mitigate UNIX Hard Link (CWE-62)?\nA.  Programming languages and supporting technologies might be chosen which are not subject to these issues.\nB.  Restrict server socket address to known local addresses.\nC.  Processor designers may expose registers (for example, control registers or model-specific registers) that allow privileged and/or user software to disable specific predictors or other hardware features that can cause confidential data to be exposed during transient execution.\nD.  Implement access-control checks in the bridge for both upstream and downstream transactions.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect Ingress Tool Transfer (T1105)?\nA.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\nB.  Monitor processes and command-line parameters for suspicious or malicious use of MMC. Since MMC is a signed Windows binary, verify use of MMC is legitimate and not malicious. Monitor for creation and use of .msc files. MMC may legitimately be used to call Microsoft-created .msc files, such as <code>services.msc</code> or <code>eventvwr.msc</code>. Invoking non-Microsoft .msc files may be an indicator of malicious activity.\nC.  Monitor for file creation and files transferred into the network. Unusual processes with external network connections creating files on-system may be suspicious. Use of utilities, such as ftp, that does not normally occur may also be suspicious. Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Specifically, for the finger utility on Windows and Linux systems, monitor command line or terminal execution for the finger command. Monitor network activity for TCP port 79, which is used by the finger utility, and Windows <code>netsh interface portproxy</code> modifications to well-known ports such as 80 and 443. Furthermore, monitor file system for the download/creation and execution of suspicious files, which may indicate adversary-downloaded payloads. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.(Citations: University of Birmingham C2)\nD.  Follow best practices for detecting adversary use of Valid Accounts for authenticating to remote services. Collect authentication logs and analyze for unusual access patterns, windows of activity, and access outside of normal business hours. When authentication is not required to access an exposed remote service, monitor for follow-on activities such as anomalous external use of the exposed API or application.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Ingress Tool Transfer (T1105)",
      "ddmc_optionA": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.",
      "ddmc_optionB": "Monitor processes and command-line parameters for suspicious or malicious use of MMC. Since MMC is a signed Windows binary, verify use of MMC is legitimate and not malicious. Monitor for creation and use of .msc files. MMC may legitimately be used to call Microsoft-created .msc files, such as <code>services.msc</code> or <code>eventvwr.msc</code>. Invoking non-Microsoft .msc files may be an indicator of malicious activity.",
      "ddmc_optionC": "Monitor for file creation and files transferred into the network. Unusual processes with external network connections creating files on-system may be suspicious. Use of utilities, such as ftp, that does not normally occur may also be suspicious. Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Specifically, for the finger utility on Windows and Linux systems, monitor command line or terminal execution for the finger command. Monitor network activity for TCP port 79, which is used by the finger utility, and Windows <code>netsh interface portproxy</code> modifications to well-known ports such as 80 and 443. Furthermore, monitor file system for the download/creation and execution of suspicious files, which may indicate adversary-downloaded payloads. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.(Citations: University of Birmingham C2)",
      "ddmc_optionD": "Follow best practices for detecting adversary use of Valid Accounts for authenticating to remote services. Collect authentication logs and analyze for unusual access patterns, windows of activity, and access outside of normal business hours. When authentication is not required to access an exposed remote service, monitor for follow-on activities such as anomalous external use of the exposed API or application.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Monitor for file creation and files transferred into the network. Unusual processes with external network connections creating files on-system may be suspicious. Use of utilities, such as ftp, that does not normally occur may also be suspicious. Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Specifically, for the finger utility on Windows and Linux systems, monitor command line or terminal execution for the finger command. Monitor network activity for TCP port 79, which is used by the finger utility, and Windows <code>netsh interface portproxy</code> modifications to well-known ports such as 80 and 443. Furthermore, monitor file system for the download/creation and execution of suspicious files, which may indicate adversary-downloaded payloads. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.(Citations: University of Birmingham C2)",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect Ingress Tool Transfer (T1105)?\nA.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\nB.  Monitor processes and command-line parameters for suspicious or malicious use of MMC. Since MMC is a signed Windows binary, verify use of MMC is legitimate and not malicious. Monitor for creation and use of .msc files. MMC may legitimately be used to call Microsoft-created .msc files, such as <code>services.msc</code> or <code>eventvwr.msc</code>. Invoking non-Microsoft .msc files may be an indicator of malicious activity.\nC.  Monitor for file creation and files transferred into the network. Unusual processes with external network connections creating files on-system may be suspicious. Use of utilities, such as ftp, that does not normally occur may also be suspicious. Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Specifically, for the finger utility on Windows and Linux systems, monitor command line or terminal execution for the finger command. Monitor network activity for TCP port 79, which is used by the finger utility, and Windows <code>netsh interface portproxy</code> modifications to well-known ports such as 80 and 443. Furthermore, monitor file system for the download/creation and execution of suspicious files, which may indicate adversary-downloaded payloads. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.(Citations: University of Birmingham C2)\nD.  Follow best practices for detecting adversary use of Valid Accounts for authenticating to remote services. Collect authentication logs and analyze for unusual access patterns, windows of activity, and access outside of normal business hours. When authentication is not required to access an exposed remote service, monitor for follow-on activities such as anomalous external use of the exposed API or application.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate T1588.006 (Vulnerabilities)?\nA.  Make configuration changes related to the operating system or a common feature of the operating system that result in system hardening against techniques.\nB.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\nC.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nD.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1588.006 (Vulnerabilities)",
      "ddmc_optionA": "Make configuration changes related to the operating system or a common feature of the operating system that result in system hardening against techniques.",
      "ddmc_optionB": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
      "ddmc_optionC": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
      "ddmc_optionD": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate T1588.006 (Vulnerabilities)?\nA.  Make configuration changes related to the operating system or a common feature of the operating system that result in system hardening against techniques.\nB.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\nC.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nD.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Insertion of Sensitive Information Into Debugging Code (CWE-215)?\nA.  Do not write user-controlled input to error pages.\nB.  Enforce the use of strong mutual authentication mechanism between the two parties.\nC.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nD.  Do not leave debug statements that could be executed in the source code. Ensure that all debug information is eradicated before releasing the software.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Insertion of Sensitive Information Into Debugging Code (CWE-215)",
      "ddmc_optionA": "Do not write user-controlled input to error pages.",
      "ddmc_optionB": "Enforce the use of strong mutual authentication mechanism between the two parties.",
      "ddmc_optionC": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmc_optionD": "Do not leave debug statements that could be executed in the source code. Ensure that all debug information is eradicated before releasing the software.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Do not leave debug statements that could be executed in the source code. Ensure that all debug information is eradicated before releasing the software.",
      "prompts": [],
      "instruction": "How can you mitigate Insertion of Sensitive Information Into Debugging Code (CWE-215)?\nA.  Do not write user-controlled input to error pages.\nB.  Enforce the use of strong mutual authentication mechanism between the two parties.\nC.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nD.  Do not leave debug statements that could be executed in the source code. Ensure that all debug information is eradicated before releasing the software.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Exfiltration Over Alternative Protocol (T1048)?\nA.  Initiating a host's reboot sequence to terminate all running processes.\nB.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nC.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nD.  Employing a pattern matching rule language to analyze the content of files.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Exfiltration Over Alternative Protocol (T1048)",
      "ddmc_optionA": "Initiating a host's reboot sequence to terminate all running processes.",
      "ddmc_optionB": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_optionC": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmc_optionD": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "prompts": [],
      "instruction": "What is a method to mitigate Exfiltration Over Alternative Protocol (T1048)?\nA.  Initiating a host's reboot sequence to terminate all running processes.\nB.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nC.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nD.  Employing a pattern matching rule language to analyze the content of files.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate CWE-641 (Improper Restriction of Names for Files and Other Resources)?\nA.  Hardware designers may choose to sanitize specific microarchitectural state (for example, store buffers) when the processor transitions to a different context, such as whenever a system call is invoked. Alternatively, the hardware may expose instruction(s) that allow software to sanitize microarchitectural state according to the user or system administrator's threat model. These mitigation approaches are similar to those that address CWE-226; however, sanitizing microarchitectural state may not be the optimal or best way to mitigate this weakness on every processor design.\nB.  While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\nC.  Do not allow users to control names of resources used on the server side.\nD.  Whenever a product is an intermediary or proxy for transactions between two other components, the proxy core should not drop the identity of the initiator of the transaction. The immutability of the identity of the initiator must be maintained and should be forwarded all the way to the target.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CWE-641 (Improper Restriction of Names for Files and Other Resources)",
      "ddmc_optionA": "Hardware designers may choose to sanitize specific microarchitectural state (for example, store buffers) when the processor transitions to a different context, such as whenever a system call is invoked. Alternatively, the hardware may expose instruction(s) that allow software to sanitize microarchitectural state according to the user or system administrator's threat model. These mitigation approaches are similar to those that address CWE-226; however, sanitizing microarchitectural state may not be the optimal or best way to mitigate this weakness on every processor design.",
      "ddmc_optionB": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
      "ddmc_optionC": "Do not allow users to control names of resources used on the server side.",
      "ddmc_optionD": "Whenever a product is an intermediary or proxy for transactions between two other components, the proxy core should not drop the identity of the initiator of the transaction. The immutability of the identity of the initiator must be maintained and should be forwarded all the way to the target.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Do not allow users to control names of resources used on the server side.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate CWE-641 (Improper Restriction of Names for Files and Other Resources)?\nA.  Hardware designers may choose to sanitize specific microarchitectural state (for example, store buffers) when the processor transitions to a different context, such as whenever a system call is invoked. Alternatively, the hardware may expose instruction(s) that allow software to sanitize microarchitectural state according to the user or system administrator's threat model. These mitigation approaches are similar to those that address CWE-226; however, sanitizing microarchitectural state may not be the optimal or best way to mitigate this weakness on every processor design.\nB.  While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\nC.  Do not allow users to control names of resources used on the server side.\nD.  Whenever a product is an intermediary or proxy for transactions between two other components, the proxy core should not drop the identity of the initiator of the transaction. The immutability of the identity of the initiator must be maintained and should be forwarded all the way to the target.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Protocol Tunneling (T1572)?\nA.  Identify running processes with raw sockets. Ensure processes listed have a need for an open raw socket and are in accordance with enterprise policy.(Citations: crowdstrike bpf socket filters)\nB.  Monitor for files written to disk that contain two file extensions, particularly when the second is an executable.(Citations: Seqrite DoubleExtension)\nC.  Detection is challenging because all messages forwarded because of an auto-forwarding rule have the same presentation as a manually forwarded message. It is also possible for the user to not be aware of the addition of such an auto-forwarding rule and not suspect that their account has been compromised; email-forwarding rules alone will not affect the normal usage patterns or operations of the email account. This is especially true in cases with hidden auto-forwarding rules. This makes it only possible to reliably detect the existence of a hidden auto-forwarding rule by examining message tracking logs or by using a MAPI editor to notice the modified rule property values. Auto-forwarded messages generally contain specific detectable artifacts that may be present in the header; such artifacts would be platform-specific. Examples include `X-MS-Exchange-Organization-AutoForwarded` set to true, `X-MailFwdBy` and `X-Forwarded-To`. The `forwardingSMTPAddress` parameter used in a forwarding process that is managed by administrators and not by user actions. All messages for the mailbox are forwarded to the specified SMTP address. However, unlike typical client-side rules, the message does not appear as forwarded in the mailbox; it appears as if it were sent directly to the specified destination mailbox. High volumes of emails that bear the `X-MS-Exchange-Organization-AutoForwarded` header (indicating auto-forwarding) without a corresponding number of emails that match the appearance of a forwarded message may indicate that further investigation is needed at the administrator level rather than user-level.(Citations: Pfammatter - Hidden Inbox Rules, Microsoft Tim McMichael Exchange Mail Forwarding 2)\nD.  Monitoring for systems listening and/or establishing external connections using ports/protocols commonly associated with tunneling, such as SSH (port 22). Also monitor for processes commonly associated with tunneling, such as Plink and the OpenSSH client. Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect application layer protocols that do not follow the expected protocol standards regarding syntax, structure, or any other variable adversaries could leverage to conceal data.(Citations: University of Birmingham C2)\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Protocol Tunneling (T1572)",
      "ddmc_optionA": "Identify running processes with raw sockets. Ensure processes listed have a need for an open raw socket and are in accordance with enterprise policy.(Citations: crowdstrike bpf socket filters)",
      "ddmc_optionB": "Monitor for files written to disk that contain two file extensions, particularly when the second is an executable.(Citations: Seqrite DoubleExtension)",
      "ddmc_optionC": "Detection is challenging because all messages forwarded because of an auto-forwarding rule have the same presentation as a manually forwarded message. It is also possible for the user to not be aware of the addition of such an auto-forwarding rule and not suspect that their account has been compromised; email-forwarding rules alone will not affect the normal usage patterns or operations of the email account. This is especially true in cases with hidden auto-forwarding rules. This makes it only possible to reliably detect the existence of a hidden auto-forwarding rule by examining message tracking logs or by using a MAPI editor to notice the modified rule property values. Auto-forwarded messages generally contain specific detectable artifacts that may be present in the header; such artifacts would be platform-specific. Examples include `X-MS-Exchange-Organization-AutoForwarded` set to true, `X-MailFwdBy` and `X-Forwarded-To`. The `forwardingSMTPAddress` parameter used in a forwarding process that is managed by administrators and not by user actions. All messages for the mailbox are forwarded to the specified SMTP address. However, unlike typical client-side rules, the message does not appear as forwarded in the mailbox; it appears as if it were sent directly to the specified destination mailbox. High volumes of emails that bear the `X-MS-Exchange-Organization-AutoForwarded` header (indicating auto-forwarding) without a corresponding number of emails that match the appearance of a forwarded message may indicate that further investigation is needed at the administrator level rather than user-level.(Citations: Pfammatter - Hidden Inbox Rules, Microsoft Tim McMichael Exchange Mail Forwarding 2)",
      "ddmc_optionD": "Monitoring for systems listening and/or establishing external connections using ports/protocols commonly associated with tunneling, such as SSH (port 22). Also monitor for processes commonly associated with tunneling, such as Plink and the OpenSSH client. Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect application layer protocols that do not follow the expected protocol standards regarding syntax, structure, or any other variable adversaries could leverage to conceal data.(Citations: University of Birmingham C2)",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Monitoring for systems listening and/or establishing external connections using ports/protocols commonly associated with tunneling, such as SSH (port 22). Also monitor for processes commonly associated with tunneling, such as Plink and the OpenSSH client. Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect application layer protocols that do not follow the expected protocol standards regarding syntax, structure, or any other variable adversaries could leverage to conceal data.(Citations: University of Birmingham C2)",
      "prompts": [],
      "instruction": "What is a method to detect Protocol Tunneling (T1572)?\nA.  Identify running processes with raw sockets. Ensure processes listed have a need for an open raw socket and are in accordance with enterprise policy.(Citations: crowdstrike bpf socket filters)\nB.  Monitor for files written to disk that contain two file extensions, particularly when the second is an executable.(Citations: Seqrite DoubleExtension)\nC.  Detection is challenging because all messages forwarded because of an auto-forwarding rule have the same presentation as a manually forwarded message. It is also possible for the user to not be aware of the addition of such an auto-forwarding rule and not suspect that their account has been compromised; email-forwarding rules alone will not affect the normal usage patterns or operations of the email account. This is especially true in cases with hidden auto-forwarding rules. This makes it only possible to reliably detect the existence of a hidden auto-forwarding rule by examining message tracking logs or by using a MAPI editor to notice the modified rule property values. Auto-forwarded messages generally contain specific detectable artifacts that may be present in the header; such artifacts would be platform-specific. Examples include `X-MS-Exchange-Organization-AutoForwarded` set to true, `X-MailFwdBy` and `X-Forwarded-To`. The `forwardingSMTPAddress` parameter used in a forwarding process that is managed by administrators and not by user actions. All messages for the mailbox are forwarded to the specified SMTP address. However, unlike typical client-side rules, the message does not appear as forwarded in the mailbox; it appears as if it were sent directly to the specified destination mailbox. High volumes of emails that bear the `X-MS-Exchange-Organization-AutoForwarded` header (indicating auto-forwarding) without a corresponding number of emails that match the appearance of a forwarded message may indicate that further investigation is needed at the administrator level rather than user-level.(Citations: Pfammatter - Hidden Inbox Rules, Microsoft Tim McMichael Exchange Mail Forwarding 2)\nD.  Monitoring for systems listening and/or establishing external connections using ports/protocols commonly associated with tunneling, such as SSH (port 22). Also monitor for processes commonly associated with tunneling, such as Plink and the OpenSSH client. Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect application layer protocols that do not follow the expected protocol standards regarding syntax, structure, or any other variable adversaries could leverage to conceal data.(Citations: University of Birmingham C2)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Use of Default Credentials (CWE-1392)?\nA.  Change the code's logic so that the resource is only closed once. This might require simplifying or refactoring. This fix can be simple to do in small code blocks, but more difficult when multiple closes are buried within complex conditionals.\nB.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nC.  Insert restrictions on when the hardware's test or debug features can be activated. For example, during normal operating modes, the hardware's privileged modes that allow access to such features cannot be activated. Configuring the hardware to only enter a test or debug mode within a window of opportunity such as during boot or configuration stage. The result is disablement of such test/debug features and associated modes during normal runtime operations.\nD.  Perform a type check before interpreting an object.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Use of Default Credentials (CWE-1392)",
      "ddmc_optionA": "Change the code's logic so that the resource is only closed once. This might require simplifying or refactoring. This fix can be simple to do in small code blocks, but more difficult when multiple closes are buried within complex conditionals.",
      "ddmc_optionB": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmc_optionC": "Insert restrictions on when the hardware's test or debug features can be activated. For example, during normal operating modes, the hardware's privileged modes that allow access to such features cannot be activated. Configuring the hardware to only enter a test or debug mode within a window of opportunity such as during boot or configuration stage. The result is disablement of such test/debug features and associated modes during normal runtime operations.",
      "ddmc_optionD": "Perform a type check before interpreting an object.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Change the code's logic so that the resource is only closed once. This might require simplifying or refactoring. This fix can be simple to do in small code blocks, but more difficult when multiple closes are buried within complex conditionals.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Use of Default Credentials (CWE-1392)?\nA.  Change the code's logic so that the resource is only closed once. This might require simplifying or refactoring. This fix can be simple to do in small code blocks, but more difficult when multiple closes are buried within complex conditionals.\nB.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nC.  Insert restrictions on when the hardware's test or debug features can be activated. For example, during normal operating modes, the hardware's privileged modes that allow access to such features cannot be activated. Configuring the hardware to only enter a test or debug mode within a window of opportunity such as during boot or configuration stage. The result is disablement of such test/debug features and associated modes during normal runtime operations.\nD.  Perform a type check before interpreting an object.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect Phishing (CAPEC-98)?\nA.  You receive any e-mail that provides you with a link which takes you to a website on which you need to enter your log in information.\nB.  Login attempts are originating from IP addresses or locations that are inconsistent with the user's normal IP addresses or locations.\nC.  None. This attack happens offline.\nD.  Differences in requests processed by the two agents. This requires careful monitoring or a capable log analysis tool.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Phishing (CAPEC-98)",
      "ddmc_optionA": "You receive any e-mail that provides you with a link which takes you to a website on which you need to enter your log in information.",
      "ddmc_optionB": "Login attempts are originating from IP addresses or locations that are inconsistent with the user's normal IP addresses or locations.",
      "ddmc_optionC": "None. This attack happens offline.",
      "ddmc_optionD": "Differences in requests processed by the two agents. This requires careful monitoring or a capable log analysis tool.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "You receive any e-mail that provides you with a link which takes you to a website on which you need to enter your log in information.",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect Phishing (CAPEC-98)?\nA.  You receive any e-mail that provides you with a link which takes you to a website on which you need to enter your log in information.\nB.  Login attempts are originating from IP addresses or locations that are inconsistent with the user's normal IP addresses or locations.\nC.  None. This attack happens offline.\nD.  Differences in requests processed by the two agents. This requires careful monitoring or a capable log analysis tool.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Obtain Capabilities (T1588)?\nA.  This mitigation describes any guidance or training given to developers of applications to avoid introducing security weaknesses that an adversary may be able to take advantage of.\nB.  Configure Active Directory to prevent use of certain techniques; use SID Filtering, etc.\nC.  Restrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.\nD.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Obtain Capabilities (T1588)",
      "ddmc_optionA": "This mitigation describes any guidance or training given to developers of applications to avoid introducing security weaknesses that an adversary may be able to take advantage of.",
      "ddmc_optionB": "Configure Active Directory to prevent use of certain techniques; use SID Filtering, etc.",
      "ddmc_optionC": "Restrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.",
      "ddmc_optionD": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Obtain Capabilities (T1588)?\nA.  This mitigation describes any guidance or training given to developers of applications to avoid introducing security weaknesses that an adversary may be able to take advantage of.\nB.  Configure Active Directory to prevent use of certain techniques; use SID Filtering, etc.\nC.  Restrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.\nD.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1565.001 (Stored Data Manipulation)?\nA.  Controlling access to local computer system resources with kernel-level capabilities.\nB.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nC.  The file removal technique deletes malicious artifacts or programs from a computer system.\nD.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1565.001 (Stored Data Manipulation)",
      "ddmc_optionA": "Controlling access to local computer system resources with kernel-level capabilities.",
      "ddmc_optionB": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_optionC": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "ddmc_optionD": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "prompts": [],
      "instruction": "How can you mitigate T1565.001 (Stored Data Manipulation)?\nA.  Controlling access to local computer system resources with kernel-level capabilities.\nB.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nC.  The file removal technique deletes malicious artifacts or programs from a computer system.\nD.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate COR_PROFILER (T1574.012)?\nA.  Analysis of source files, processes, destination files, or destination servers associated with a scheduled job to detect unauthorized use of job scheduling.\nB.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nC.  A file created for the purposes of deceiving an adversary.\nD.  Restoring an object for an entity to access. This is the broadest class for object restoral.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "COR_PROFILER (T1574.012)",
      "ddmc_optionA": "Analysis of source files, processes, destination files, or destination servers associated with a scheduled job to detect unauthorized use of job scheduling.",
      "ddmc_optionB": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionC": "A file created for the purposes of deceiving an adversary.",
      "ddmc_optionD": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "A file created for the purposes of deceiving an adversary.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate COR_PROFILER (T1574.012)?\nA.  Analysis of source files, processes, destination files, or destination servers associated with a scheduled job to detect unauthorized use of job scheduling.\nB.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nC.  A file created for the purposes of deceiving an adversary.\nD.  Restoring an object for an entity to access. This is the broadest class for object restoral.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Critical Data Element Declared Public (CWE-766)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.\nC.  Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.\nD.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections)\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Critical Data Element Declared Public (CWE-766)",
      "ddmc_optionA": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionB": "Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.",
      "ddmc_optionC": "Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.",
      "ddmc_optionD": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections)",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "What is a method to detect Critical Data Element Declared Public (CWE-766)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.\nC.  Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.\nD.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Path Traversal: '.../...//' (CWE-35)?\nA.  While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\nB.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.\nC.  When programming in C++, consider using smart pointers provided by the boost library to help correctly and consistently manage memory.\nD.  Always define appropriate error pages. The application configuration should specify a default error page in order to guarantee that the application will never leak error messages to an attacker. Handling standard HTTP error codes is useful and user-friendly in addition to being a good security practice, and a good configuration will also define a last-chance error handler that catches any exception that could possibly be thrown by the application.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Path Traversal: '.../...//' (CWE-35)",
      "ddmc_optionA": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
      "ddmc_optionB": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.",
      "ddmc_optionC": "When programming in C++, consider using smart pointers provided by the boost library to help correctly and consistently manage memory.",
      "ddmc_optionD": "Always define appropriate error pages. The application configuration should specify a default error page in order to guarantee that the application will never leak error messages to an attacker. Handling standard HTTP error codes is useful and user-friendly in addition to being a good security practice, and a good configuration will also define a last-chance error handler that catches any exception that could possibly be thrown by the application.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.",
      "prompts": [],
      "instruction": "How can you mitigate Path Traversal: '.../...//' (CWE-35)?\nA.  While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\nB.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.\nC.  When programming in C++, consider using smart pointers provided by the boost library to help correctly and consistently manage memory.\nD.  Always define appropriate error pages. The application configuration should specify a default error page in order to guarantee that the application will never leak error messages to an attacker. Handling standard HTTP error codes is useful and user-friendly in addition to being a good security practice, and a good configuration will also define a last-chance error handler that catches any exception that could possibly be thrown by the application.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Msiexec (T1218.007)?\nA.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\nB.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nC.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\nD.  Block users or groups from installing unapproved software.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Msiexec (T1218.007)",
      "ddmc_optionA": "Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.",
      "ddmc_optionB": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_optionC": "Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.",
      "ddmc_optionD": "Block users or groups from installing unapproved software.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "prompts": [],
      "instruction": "How can you mitigate Msiexec (T1218.007)?\nA.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\nB.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nC.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\nD.  Block users or groups from installing unapproved software.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Spearphishing via Service (T1566.003)?\nA.  Using a digital signature to authenticate a file before opening.\nB.  Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.\nC.  Encrypting a file using a cryptographic key.\nD.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Spearphishing via Service (T1566.003)",
      "ddmc_optionA": "Using a digital signature to authenticate a file before opening.",
      "ddmc_optionB": "Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.",
      "ddmc_optionC": "Encrypting a file using a cryptographic key.",
      "ddmc_optionD": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Encrypting a file using a cryptographic key.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Spearphishing via Service (T1566.003)?\nA.  Using a digital signature to authenticate a file before opening.\nB.  Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.\nC.  Encrypting a file using a cryptographic key.\nD.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate System Owner/User Discovery (T1033)?\nA.  Detects processes that modify, change, or replace their own code at runtime.\nB.  Employing file hash comparisons to detect known malware.\nC.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nD.  Replacing old software on a computer system component.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "System Owner/User Discovery (T1033)",
      "ddmc_optionA": "Detects processes that modify, change, or replace their own code at runtime.",
      "ddmc_optionB": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionC": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionD": "Replacing old software on a computer system component.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Detects processes that modify, change, or replace their own code at runtime.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate System Owner/User Discovery (T1033)?\nA.  Detects processes that modify, change, or replace their own code at runtime.\nB.  Employing file hash comparisons to detect known malware.\nC.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nD.  Replacing old software on a computer system component.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect Input Capture (T1056)?\nA.  If an adversary is using a standard command-line shell, analysts can detect token manipulation by auditing command-line activity. Specifically, analysts should look for use of the <code>runas</code> command. Detailed command-line logging is not enabled by default in Windows. Analysts can also monitor for use of Windows APIs such as <code>DuplicateToken(Ex)</code>, <code> ImpersonateLoggedOnUser </code>, and <code> SetThreadToken </code> and correlate activity with other suspicious behavior to reduce false positives that may be due to normal benign use by users and administrators.(Citations: Microsoft Command-line Logging)\nB.  Monitor for suspicious network traffic that could be indicative of scanning, such as large quantities originating from a single source (especially if the source is known to be associated with an adversary/botnet). Analyzing web metadata may also reveal artifacts that can be attributed to potentially malicious activity, such as referer or user-agent string HTTP/S fields. Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\nC.  Detection for this technique is difficult because it would require knowledge of the specific implementation of the port calculation algorithm. Detection may be possible by analyzing DNS records if the algorithm is known.\nD.  Detection may vary depending on how input is captured but may include monitoring for certain Windows API calls (e.g. `SetWindowsHook`, `GetKeyState`, and `GetAsyncKeyState`), monitoring for malicious instances of Command and Scripting Interpreter, and ensuring no unauthorized drivers or kernel modules that could indicate keylogging or API hooking are present.(Citations: Adventures of a Keystroke)\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Input Capture (T1056)",
      "ddmc_optionA": "If an adversary is using a standard command-line shell, analysts can detect token manipulation by auditing command-line activity. Specifically, analysts should look for use of the <code>runas</code> command. Detailed command-line logging is not enabled by default in Windows. Analysts can also monitor for use of Windows APIs such as <code>DuplicateToken(Ex)</code>, <code> ImpersonateLoggedOnUser </code>, and <code> SetThreadToken </code> and correlate activity with other suspicious behavior to reduce false positives that may be due to normal benign use by users and administrators.(Citations: Microsoft Command-line Logging)",
      "ddmc_optionB": "Monitor for suspicious network traffic that could be indicative of scanning, such as large quantities originating from a single source (especially if the source is known to be associated with an adversary/botnet). Analyzing web metadata may also reveal artifacts that can be attributed to potentially malicious activity, such as referer or user-agent string HTTP/S fields. Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.",
      "ddmc_optionC": "Detection for this technique is difficult because it would require knowledge of the specific implementation of the port calculation algorithm. Detection may be possible by analyzing DNS records if the algorithm is known.",
      "ddmc_optionD": "Detection may vary depending on how input is captured but may include monitoring for certain Windows API calls (e.g. `SetWindowsHook`, `GetKeyState`, and `GetAsyncKeyState`), monitoring for malicious instances of Command and Scripting Interpreter, and ensuring no unauthorized drivers or kernel modules that could indicate keylogging or API hooking are present.(Citations: Adventures of a Keystroke)",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Detection may vary depending on how input is captured but may include monitoring for certain Windows API calls (e.g. `SetWindowsHook`, `GetKeyState`, and `GetAsyncKeyState`), monitoring for malicious instances of Command and Scripting Interpreter, and ensuring no unauthorized drivers or kernel modules that could indicate keylogging or API hooking are present.(Citations: Adventures of a Keystroke)",
      "prompts": [],
      "instruction": "How can you detect Input Capture (T1056)?\nA.  If an adversary is using a standard command-line shell, analysts can detect token manipulation by auditing command-line activity. Specifically, analysts should look for use of the <code>runas</code> command. Detailed command-line logging is not enabled by default in Windows. Analysts can also monitor for use of Windows APIs such as <code>DuplicateToken(Ex)</code>, <code> ImpersonateLoggedOnUser </code>, and <code> SetThreadToken </code> and correlate activity with other suspicious behavior to reduce false positives that may be due to normal benign use by users and administrators.(Citations: Microsoft Command-line Logging)\nB.  Monitor for suspicious network traffic that could be indicative of scanning, such as large quantities originating from a single source (especially if the source is known to be associated with an adversary/botnet). Analyzing web metadata may also reveal artifacts that can be attributed to potentially malicious activity, such as referer or user-agent string HTTP/S fields. Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\nC.  Detection for this technique is difficult because it would require knowledge of the specific implementation of the port calculation algorithm. Detection may be possible by analyzing DNS records if the algorithm is known.\nD.  Detection may vary depending on how input is captured but may include monitoring for certain Windows API calls (e.g. `SetWindowsHook`, `GetKeyState`, and `GetAsyncKeyState`), monitoring for malicious instances of Command and Scripting Interpreter, and ensuring no unauthorized drivers or kernel modules that could indicate keylogging or API hooking are present.(Citations: Adventures of a Keystroke)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Key Exchange without Entity Authentication (CWE-322)?\nA.  Where possible, avoid building a single string that contains the command and its arguments. Some languages or frameworks have functions that support specifying independent arguments, e.g. as an array, which is used to automatically perform the appropriate quoting or escaping while building the command. For example, in PHP, escapeshellarg() can be used to escape a single argument to system(), or exec() can be called with an array of arguments. In C, code can often be refactored from using system() - which accepts a single string - to using exec(), which requires separate function arguments for each parameter.\nB.  Ensure that proper authentication is included in the system design.\nC.  Functionality to completely scrub data from a product at the conclusion of its lifecycle should be part of the design phase. Trying to add this function on top of an existing architecture could lead to incomplete removal of sensitive information/data.\nD.  Pay close attention to complex conditionals that affect initialization, since some branches might not perform the initialization.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Key Exchange without Entity Authentication (CWE-322)",
      "ddmc_optionA": "Where possible, avoid building a single string that contains the command and its arguments. Some languages or frameworks have functions that support specifying independent arguments, e.g. as an array, which is used to automatically perform the appropriate quoting or escaping while building the command. For example, in PHP, escapeshellarg() can be used to escape a single argument to system(), or exec() can be called with an array of arguments. In C, code can often be refactored from using system() - which accepts a single string - to using exec(), which requires separate function arguments for each parameter.",
      "ddmc_optionB": "Ensure that proper authentication is included in the system design.",
      "ddmc_optionC": "Functionality to completely scrub data from a product at the conclusion of its lifecycle should be part of the design phase. Trying to add this function on top of an existing architecture could lead to incomplete removal of sensitive information/data.",
      "ddmc_optionD": "Pay close attention to complex conditionals that affect initialization, since some branches might not perform the initialization.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Ensure that proper authentication is included in the system design.",
      "prompts": [],
      "instruction": "What is a method to mitigate Key Exchange without Entity Authentication (CWE-322)?\nA.  Where possible, avoid building a single string that contains the command and its arguments. Some languages or frameworks have functions that support specifying independent arguments, e.g. as an array, which is used to automatically perform the appropriate quoting or escaping while building the command. For example, in PHP, escapeshellarg() can be used to escape a single argument to system(), or exec() can be called with an array of arguments. In C, code can often be refactored from using system() - which accepts a single string - to using exec(), which requires separate function arguments for each parameter.\nB.  Ensure that proper authentication is included in the system design.\nC.  Functionality to completely scrub data from a product at the conclusion of its lifecycle should be part of the design phase. Trying to add this function on top of an existing architecture could lead to incomplete removal of sensitive information/data.\nD.  Pay close attention to complex conditionals that affect initialization, since some branches might not perform the initialization.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect T1537 (Transfer Data to Cloud Account)?\nA.  Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). If a process maintains a long connection during which it consistently sends fixed size data packets or a process opens connections and sends fixed sized data packets at regular intervals, it may be performing an aggregate data transfer. Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citations: University of Birmingham C2)\nB.  Monitor for suspicious email activity, such as numerous accounts receiving messages from a single unusual/unknown sender. Filtering based on DKIM+SPF or header analysis can help detect when the email sender is spoofed. Monitor for references to uncategorized or known-bad sites. URL inspection within email (including expanding shortened links) can also help detect links leading to known malicious sites.(Citations: Microsoft Anti Spoofing, ACSC Email Spoofing)\nC.  Monitor account activity for attempts to share data, snapshots, or backups with untrusted or unusual accounts on the same cloud service provider. Monitor for anomalous file transfer activity between accounts and to untrusted VPCs. In AWS, sharing an Elastic Block Store (EBS) snapshot, either with specified users or publicly, generates a ModifySnapshotAttribute event in CloudTrail logs. Similarly, in Azure, creating a Shared Access Signature (SAS) URI for a Virtual Hard Disk (VHS) snapshot generates a \"Get Snapshot SAS URL\" event in Activity Logs.(Citations: AWS EBS Snapshot Sharing, Azure Blob Snapshots, Azure Shared Access Signature)\nD.  Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect application layer protocols that do not follow the expected protocol standards regarding syntax, structure, or any other variable adversaries could leverage to conceal data. Monitor for DNS traffic to/from known-bad or suspicious domains.(Citations: University of Birmingham C2)\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "T1537 (Transfer Data to Cloud Account)",
      "ddmc_optionA": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). If a process maintains a long connection during which it consistently sends fixed size data packets or a process opens connections and sends fixed sized data packets at regular intervals, it may be performing an aggregate data transfer. Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citations: University of Birmingham C2)",
      "ddmc_optionB": "Monitor for suspicious email activity, such as numerous accounts receiving messages from a single unusual/unknown sender. Filtering based on DKIM+SPF or header analysis can help detect when the email sender is spoofed. Monitor for references to uncategorized or known-bad sites. URL inspection within email (including expanding shortened links) can also help detect links leading to known malicious sites.(Citations: Microsoft Anti Spoofing, ACSC Email Spoofing)",
      "ddmc_optionC": "Monitor account activity for attempts to share data, snapshots, or backups with untrusted or unusual accounts on the same cloud service provider. Monitor for anomalous file transfer activity between accounts and to untrusted VPCs. In AWS, sharing an Elastic Block Store (EBS) snapshot, either with specified users or publicly, generates a ModifySnapshotAttribute event in CloudTrail logs. Similarly, in Azure, creating a Shared Access Signature (SAS) URI for a Virtual Hard Disk (VHS) snapshot generates a \"Get Snapshot SAS URL\" event in Activity Logs.(Citations: AWS EBS Snapshot Sharing, Azure Blob Snapshots, Azure Shared Access Signature)",
      "ddmc_optionD": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect application layer protocols that do not follow the expected protocol standards regarding syntax, structure, or any other variable adversaries could leverage to conceal data. Monitor for DNS traffic to/from known-bad or suspicious domains.(Citations: University of Birmingham C2)",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Monitor account activity for attempts to share data, snapshots, or backups with untrusted or unusual accounts on the same cloud service provider. Monitor for anomalous file transfer activity between accounts and to untrusted VPCs. In AWS, sharing an Elastic Block Store (EBS) snapshot, either with specified users or publicly, generates a ModifySnapshotAttribute event in CloudTrail logs. Similarly, in Azure, creating a Shared Access Signature (SAS) URI for a Virtual Hard Disk (VHS) snapshot generates a \"Get Snapshot SAS URL\" event in Activity Logs.(Citations: AWS EBS Snapshot Sharing, Azure Blob Snapshots, Azure Shared Access Signature)",
      "prompts": [],
      "instruction": "How can you detect T1537 (Transfer Data to Cloud Account)?\nA.  Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). If a process maintains a long connection during which it consistently sends fixed size data packets or a process opens connections and sends fixed sized data packets at regular intervals, it may be performing an aggregate data transfer. Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citations: University of Birmingham C2)\nB.  Monitor for suspicious email activity, such as numerous accounts receiving messages from a single unusual/unknown sender. Filtering based on DKIM+SPF or header analysis can help detect when the email sender is spoofed. Monitor for references to uncategorized or known-bad sites. URL inspection within email (including expanding shortened links) can also help detect links leading to known malicious sites.(Citations: Microsoft Anti Spoofing, ACSC Email Spoofing)\nC.  Monitor account activity for attempts to share data, snapshots, or backups with untrusted or unusual accounts on the same cloud service provider. Monitor for anomalous file transfer activity between accounts and to untrusted VPCs. In AWS, sharing an Elastic Block Store (EBS) snapshot, either with specified users or publicly, generates a ModifySnapshotAttribute event in CloudTrail logs. Similarly, in Azure, creating a Shared Access Signature (SAS) URI for a Virtual Hard Disk (VHS) snapshot generates a \"Get Snapshot SAS URL\" event in Activity Logs.(Citations: AWS EBS Snapshot Sharing, Azure Blob Snapshots, Azure Shared Access Signature)\nD.  Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect application layer protocols that do not follow the expected protocol standards regarding syntax, structure, or any other variable adversaries could leverage to conceal data. Monitor for DNS traffic to/from known-bad or suspicious domains.(Citations: University of Birmingham C2)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Authorization Bypass Through User-Controlled SQL Primary Key (CWE-566)?\nA.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. For example, limiting filenames to alphanumeric characters can help to restrict the introduction of unintended file extensions.\nB.  If the program must fail, ensure that it fails gracefully (fails closed). There may be a temptation to simply let the program fail poorly in cases such as low memory conditions, but an attacker may be able to assert control before the software has fully exited. Alternately, an uncontrolled failure could cause cascading problems with other downstream components; for example, the program could send a signal to a downstream process so the process immediately knows that a problem has occurred and has a better chance of recovery. Ensure that all failures in resource allocation place the system into a safe posture.\nC.  If a hardware feature can allow incorrect operations (or correct operations with incorrect data) to execute transiently, the hardware designer may opt to disclose this behavior in architecture documentation. This documentation can inform users about potential consequences and effective mitigations.\nD.  Assume all input is malicious. Use a standard input validation mechanism to validate all input for length, type, syntax, and business rules before accepting the data. Use an \"accept known good\" validation strategy.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Authorization Bypass Through User-Controlled SQL Primary Key (CWE-566)",
      "ddmc_optionA": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. For example, limiting filenames to alphanumeric characters can help to restrict the introduction of unintended file extensions.",
      "ddmc_optionB": "If the program must fail, ensure that it fails gracefully (fails closed). There may be a temptation to simply let the program fail poorly in cases such as low memory conditions, but an attacker may be able to assert control before the software has fully exited. Alternately, an uncontrolled failure could cause cascading problems with other downstream components; for example, the program could send a signal to a downstream process so the process immediately knows that a problem has occurred and has a better chance of recovery. Ensure that all failures in resource allocation place the system into a safe posture.",
      "ddmc_optionC": "If a hardware feature can allow incorrect operations (or correct operations with incorrect data) to execute transiently, the hardware designer may opt to disclose this behavior in architecture documentation. This documentation can inform users about potential consequences and effective mitigations.",
      "ddmc_optionD": "Assume all input is malicious. Use a standard input validation mechanism to validate all input for length, type, syntax, and business rules before accepting the data. Use an \"accept known good\" validation strategy.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Assume all input is malicious. Use a standard input validation mechanism to validate all input for length, type, syntax, and business rules before accepting the data. Use an \"accept known good\" validation strategy.",
      "prompts": [],
      "instruction": "What is a method to mitigate Authorization Bypass Through User-Controlled SQL Primary Key (CWE-566)?\nA.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. For example, limiting filenames to alphanumeric characters can help to restrict the introduction of unintended file extensions.\nB.  If the program must fail, ensure that it fails gracefully (fails closed). There may be a temptation to simply let the program fail poorly in cases such as low memory conditions, but an attacker may be able to assert control before the software has fully exited. Alternately, an uncontrolled failure could cause cascading problems with other downstream components; for example, the program could send a signal to a downstream process so the process immediately knows that a problem has occurred and has a better chance of recovery. Ensure that all failures in resource allocation place the system into a safe posture.\nC.  If a hardware feature can allow incorrect operations (or correct operations with incorrect data) to execute transiently, the hardware designer may opt to disclose this behavior in architecture documentation. This documentation can inform users about potential consequences and effective mitigations.\nD.  Assume all input is malicious. Use a standard input validation mechanism to validate all input for length, type, syntax, and business rules before accepting the data. Use an \"accept known good\" validation strategy.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect CWE-509 (Replicating Malicious Code (Virus or Worm))?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  Appropriate Post-Si tests should be carried out to ensure that residual confidential information is not left on parts leaving one facility for another facility.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "CWE-509 (Replicating Malicious Code (Virus or Worm))",
      "ddmc_optionA": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionB": "This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.",
      "ddmc_optionC": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionD": "Appropriate Post-Si tests should be carried out to ensure that residual confidential information is not left on parts leaving one facility for another facility.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "How can you detect CWE-509 (Replicating Malicious Code (Virus or Worm))?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  Appropriate Post-Si tests should be carried out to ensure that residual confidential information is not left on parts leaving one facility for another facility.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Exfiltration Over Symmetric Encrypted Non-C2 Protocol (T1048.001)?\nA.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nB.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\nC.  Software inventorying identifies and records the software items in the organization's architecture.\nD.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Exfiltration Over Symmetric Encrypted Non-C2 Protocol (T1048.001)",
      "ddmc_optionA": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmc_optionB": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "ddmc_optionC": "Software inventorying identifies and records the software items in the organization's architecture.",
      "ddmc_optionD": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "prompts": [],
      "instruction": "How can you mitigate Exfiltration Over Symmetric Encrypted Non-C2 Protocol (T1048.001)?\nA.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nB.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\nC.  Software inventorying identifies and records the software items in the organization's architecture.\nD.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Use of Known Kerberos Credentials (CAPEC-652)?\nA.  Configuration: Use HTTP/2 for back-end connections.\nB.  Implementation: Only allow known URL to be included as remote flash movies in a flash application\nC.  Look for overlong UTF-8 sequences starting with malicious pattern. You can also use a UTF-8 decoder stress test to test your UTF-8 parser (See Markus Kuhn's UTF-8 and Unicode FAQ in reference section)\nD.  Deny remote use of Kerberos service account credentials to log into domain systems.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Use of Known Kerberos Credentials (CAPEC-652)",
      "ddmc_optionA": "Configuration: Use HTTP/2 for back-end connections.",
      "ddmc_optionB": "Implementation: Only allow known URL to be included as remote flash movies in a flash application",
      "ddmc_optionC": "Look for overlong UTF-8 sequences starting with malicious pattern. You can also use a UTF-8 decoder stress test to test your UTF-8 parser (See Markus Kuhn's UTF-8 and Unicode FAQ in reference section)",
      "ddmc_optionD": "Deny remote use of Kerberos service account credentials to log into domain systems.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Deny remote use of Kerberos service account credentials to log into domain systems.",
      "prompts": [],
      "instruction": "What is a method to mitigate Use of Known Kerberos Credentials (CAPEC-652)?\nA.  Configuration: Use HTTP/2 for back-end connections.\nB.  Implementation: Only allow known URL to be included as remote flash movies in a flash application\nC.  Look for overlong UTF-8 sequences starting with malicious pattern. You can also use a UTF-8 decoder stress test to test your UTF-8 parser (See Markus Kuhn's UTF-8 and Unicode FAQ in reference section)\nD.  Deny remote use of Kerberos service account credentials to log into domain systems.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate COR_PROFILER (T1574.012)?\nA.  File eviction techniques evict files from system storage.\nB.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\nC.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nD.  The file removal technique deletes malicious artifacts or programs from a computer system.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "COR_PROFILER (T1574.012)",
      "ddmc_optionA": "File eviction techniques evict files from system storage.",
      "ddmc_optionB": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "ddmc_optionC": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_optionD": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "File eviction techniques evict files from system storage.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate COR_PROFILER (T1574.012)?\nA.  File eviction techniques evict files from system storage.\nB.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\nC.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nD.  The file removal technique deletes malicious artifacts or programs from a computer system.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Rootkit (T1014)?\nA.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nB.  Terminating a running application process on a computer system.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  Restricting access to a local file by configuring operating system functionality.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Rootkit (T1014)",
      "ddmc_optionA": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmc_optionB": "Terminating a running application process on a computer system.",
      "ddmc_optionC": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionD": "Restricting access to a local file by configuring operating system functionality.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "prompts": [],
      "instruction": "What is a method to mitigate Rootkit (T1014)?\nA.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nB.  Terminating a running application process on a computer system.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  Restricting access to a local file by configuring operating system functionality.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection') (CWE-74)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results. Initialization problems may be detected with a stress-test by calling the software simultaneously from a large number of threads or processes, and look for evidence of any unexpected behavior. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection') (CWE-74)",
      "ddmc_optionA": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionB": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionC": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionD": "This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results. Initialization problems may be detected with a stress-test by calling the software simultaneously from a large number of threads or processes, and look for evidence of any unexpected behavior. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection') (CWE-74)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results. Initialization problems may be detected with a stress-test by calling the software simultaneously from a large number of threads or processes, and look for evidence of any unexpected behavior. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Multi-hop Proxy (T1090.003)?\nA.  A file created for the purposes of deceiving an adversary.\nB.  Using kernel-level capabilities to isolate processes.\nC.  Employing file hash comparisons to detect known malware.\nD.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Multi-hop Proxy (T1090.003)",
      "ddmc_optionA": "A file created for the purposes of deceiving an adversary.",
      "ddmc_optionB": "Using kernel-level capabilities to isolate processes.",
      "ddmc_optionC": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionD": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "prompts": [],
      "instruction": "How can you mitigate Multi-hop Proxy (T1090.003)?\nA.  A file created for the purposes of deceiving an adversary.\nB.  Using kernel-level capabilities to isolate processes.\nC.  Employing file hash comparisons to detect known malware.\nD.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate T1021.004 (SSH)?\nA.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nB.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nC.  Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\nD.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1021.004 (SSH)",
      "ddmc_optionA": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionB": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_optionC": "Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.",
      "ddmc_optionD": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate T1021.004 (SSH)?\nA.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nB.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nC.  Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\nD.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Hide Artifacts (T1564)?\nA.  Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.\nB.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nC.  Use signatures or heuristics to detect malicious software.\nD.  Use capabilities to prevent successful credential access by adversaries; including blocking forms of credential dumping.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Hide Artifacts (T1564)",
      "ddmc_optionA": "Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.",
      "ddmc_optionB": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "ddmc_optionC": "Use signatures or heuristics to detect malicious software.",
      "ddmc_optionD": "Use capabilities to prevent successful credential access by adversaries; including blocking forms of credential dumping.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Use signatures or heuristics to detect malicious software.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Hide Artifacts (T1564)?\nA.  Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.\nB.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nC.  Use signatures or heuristics to detect malicious software.\nD.  Use capabilities to prevent successful credential access by adversaries; including blocking forms of credential dumping.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Match Legitimate Name or Location (T1036.005)?\nA.  Restoring an entity's access to resources.\nB.  Restoring an software configuration.\nC.  Using biological measures in order to authenticate a user.\nD.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Match Legitimate Name or Location (T1036.005)",
      "ddmc_optionA": "Restoring an entity's access to resources.",
      "ddmc_optionB": "Restoring an software configuration.",
      "ddmc_optionC": "Using biological measures in order to authenticate a user.",
      "ddmc_optionD": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "prompts": [],
      "instruction": "What is a method to mitigate Match Legitimate Name or Location (T1036.005)?\nA.  Restoring an entity's access to resources.\nB.  Restoring an software configuration.\nC.  Using biological measures in order to authenticate a user.\nD.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Cloud Storage Object Discovery (T1619)?\nA.  File eviction techniques evict files from system storage.\nB.  Detecting any suspicious changes to files in a computer system.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  File eviction techniques evict files from system storage.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Cloud Storage Object Discovery (T1619)",
      "ddmc_optionA": "File eviction techniques evict files from system storage.",
      "ddmc_optionB": "Detecting any suspicious changes to files in a computer system.",
      "ddmc_optionC": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionD": "File eviction techniques evict files from system storage.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "prompts": [],
      "instruction": "What is a method to mitigate Cloud Storage Object Discovery (T1619)?\nA.  File eviction techniques evict files from system storage.\nB.  Detecting any suspicious changes to files in a computer system.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  File eviction techniques evict files from system storage.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Launch Daemon (T1543.004)?\nA.  Restricting network traffic originating from any location.\nB.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nC.  Restoring a file for an entity to access.\nD.  Employing a pattern matching algorithm to statically analyze the content of files.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Launch Daemon (T1543.004)",
      "ddmc_optionA": "Restricting network traffic originating from any location.",
      "ddmc_optionB": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionC": "Restoring a file for an entity to access.",
      "ddmc_optionD": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Launch Daemon (T1543.004)?\nA.  Restricting network traffic originating from any location.\nB.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nC.  Restoring a file for an entity to access.\nD.  Employing a pattern matching algorithm to statically analyze the content of files.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Filter Failure through Buffer Overflow (CAPEC-24)?\nA.  Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.\nB.  Operational: Use OS-level preventative functionality. Not a complete solution.\nC.  Make sure that ANY failure occurring in the filtering or input validation routine is properly handled and that offending input is NOT allowed to go through. Basically make sure that the vault is closed when failure occurs.\nD.  Design: Ensure that function calls that should not be called by an unprivileged user are not accessible to them.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Filter Failure through Buffer Overflow (CAPEC-24)",
      "ddmc_optionA": "Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.",
      "ddmc_optionB": "Operational: Use OS-level preventative functionality. Not a complete solution.",
      "ddmc_optionC": "Make sure that ANY failure occurring in the filtering or input validation routine is properly handled and that offending input is NOT allowed to go through. Basically make sure that the vault is closed when failure occurs.",
      "ddmc_optionD": "Design: Ensure that function calls that should not be called by an unprivileged user are not accessible to them.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Make sure that ANY failure occurring in the filtering or input validation routine is properly handled and that offending input is NOT allowed to go through. Basically make sure that the vault is closed when failure occurs.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Filter Failure through Buffer Overflow (CAPEC-24)?\nA.  Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.\nB.  Operational: Use OS-level preventative functionality. Not a complete solution.\nC.  Make sure that ANY failure occurring in the filtering or input validation routine is properly handled and that offending input is NOT allowed to go through. Basically make sure that the vault is closed when failure occurs.\nD.  Design: Ensure that function calls that should not be called by an unprivileged user are not accessible to them.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1037.001 (Logon Script (Windows))?\nA.  The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.\nB.  File eviction techniques evict files from system storage.\nC.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\nD.  Employing a pattern matching algorithm to statically analyze the content of files.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1037.001 (Logon Script (Windows))",
      "ddmc_optionA": "The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.",
      "ddmc_optionB": "File eviction techniques evict files from system storage.",
      "ddmc_optionC": "Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.",
      "ddmc_optionD": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "File eviction techniques evict files from system storage.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1037.001 (Logon Script (Windows))?\nA.  The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.\nB.  File eviction techniques evict files from system storage.\nC.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\nD.  Employing a pattern matching algorithm to statically analyze the content of files.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate T1518.001 (Security Software Discovery)?\nA.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\nB.  Executing or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.\nC.  Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\nD.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1518.001 (Security Software Discovery)",
      "ddmc_optionA": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "ddmc_optionB": "Executing or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.",
      "ddmc_optionC": "Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.",
      "ddmc_optionD": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate T1518.001 (Security Software Discovery)?\nA.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\nB.  Executing or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.\nC.  Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\nD.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate LSASS Driver (T1547.008)?\nA.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nB.  Deploying a network resource for the purposes of deceiving an adversary.\nC.  Encrypting a file using a cryptographic key.\nD.  Restricting access to a local file by configuring operating system functionality.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "LSASS Driver (T1547.008)",
      "ddmc_optionA": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmc_optionB": "Deploying a network resource for the purposes of deceiving an adversary.",
      "ddmc_optionC": "Encrypting a file using a cryptographic key.",
      "ddmc_optionD": "Restricting access to a local file by configuring operating system functionality.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Encrypting a file using a cryptographic key.",
      "prompts": [],
      "instruction": "What is a method to mitigate LSASS Driver (T1547.008)?\nA.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nB.  Deploying a network resource for the purposes of deceiving an adversary.\nC.  Encrypting a file using a cryptographic key.\nD.  Restricting access to a local file by configuring operating system functionality.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Using Meta-characters in E-mail Headers to Inject Malicious Payloads (CAPEC-41)?\nA.  Implementation: Implement email filtering solutions on mail server or on MTA, relay server.\nB.  Implementation: Prevent network boundary devices from being physically accessed by unauthorized personnel to prevent tampering.\nC.  Use secure functions not vulnerable to buffer overflow.\nD.  Implement an audit log written to a separate host. In the event of a compromise, the audit log may be able to provide evidence and details of the compromise.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Using Meta-characters in E-mail Headers to Inject Malicious Payloads (CAPEC-41)",
      "ddmc_optionA": "Implementation: Implement email filtering solutions on mail server or on MTA, relay server.",
      "ddmc_optionB": "Implementation: Prevent network boundary devices from being physically accessed by unauthorized personnel to prevent tampering.",
      "ddmc_optionC": "Use secure functions not vulnerable to buffer overflow.",
      "ddmc_optionD": "Implement an audit log written to a separate host. In the event of a compromise, the audit log may be able to provide evidence and details of the compromise.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Implementation: Implement email filtering solutions on mail server or on MTA, relay server.",
      "prompts": [],
      "instruction": "How can you mitigate Using Meta-characters in E-mail Headers to Inject Malicious Payloads (CAPEC-41)?\nA.  Implementation: Implement email filtering solutions on mail server or on MTA, relay server.\nB.  Implementation: Prevent network boundary devices from being physically accessed by unauthorized personnel to prevent tampering.\nC.  Use secure functions not vulnerable to buffer overflow.\nD.  Implement an audit log written to a separate host. In the event of a compromise, the audit log may be able to provide evidence and details of the compromise.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect Return of Stack Variable Address (CWE-562)?\nA.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source\nB.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Return of Stack Variable Address (CWE-562)",
      "ddmc_optionA": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source",
      "ddmc_optionB": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies",
      "ddmc_optionC": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionD": "Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.",
      "prompts": [],
      "instruction": "How can you detect Return of Stack Variable Address (CWE-562)?\nA.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source\nB.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Struts: Unused Validation Form (CWE-107)?\nA.  Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.\nB.  Security Token assignment review checks for design inconsistency and common weaknesses. Security-Token definition and programming flow is tested in both pre-silicon and post-silicon testing.\nC.  By freezing the object prototype first (for example, Object.freeze(Object.prototype)), modification of the prototype becomes impossible.\nD.  Remove the unused Validation Form from the validation.xml file.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Struts: Unused Validation Form (CWE-107)",
      "ddmc_optionA": "Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.",
      "ddmc_optionB": "Security Token assignment review checks for design inconsistency and common weaknesses. Security-Token definition and programming flow is tested in both pre-silicon and post-silicon testing.",
      "ddmc_optionC": "By freezing the object prototype first (for example, Object.freeze(Object.prototype)), modification of the prototype becomes impossible.",
      "ddmc_optionD": "Remove the unused Validation Form from the validation.xml file.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Remove the unused Validation Form from the validation.xml file.",
      "prompts": [],
      "instruction": "What is a method to mitigate Struts: Unused Validation Form (CWE-107)?\nA.  Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.\nB.  Security Token assignment review checks for design inconsistency and common weaknesses. Security-Token definition and programming flow is tested in both pre-silicon and post-silicon testing.\nC.  By freezing the object prototype first (for example, Object.freeze(Object.prototype)), modification of the prototype becomes impossible.\nD.  Remove the unused Validation Form from the validation.xml file.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Netsh Helper DLL (T1546.007)?\nA.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nB.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nC.  Blocking the execution of files on a host in accordance with defined application policy rules.\nD.  Initiating a host's reboot sequence to terminate all running processes.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Netsh Helper DLL (T1546.007)",
      "ddmc_optionA": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionB": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmc_optionC": "Blocking the execution of files on a host in accordance with defined application policy rules.",
      "ddmc_optionD": "Initiating a host's reboot sequence to terminate all running processes.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Initiating a host's reboot sequence to terminate all running processes.",
      "prompts": [],
      "instruction": "How can you mitigate Netsh Helper DLL (T1546.007)?\nA.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nB.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nC.  Blocking the execution of files on a host in accordance with defined application policy rules.\nD.  Initiating a host's reboot sequence to terminate all running processes.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Netsh Helper DLL (T1546.007)?\nA.  Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.\nB.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nC.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nD.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Netsh Helper DLL (T1546.007)",
      "ddmc_optionA": "Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.",
      "ddmc_optionB": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_optionC": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_optionD": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "prompts": [],
      "instruction": "What is a method to mitigate Netsh Helper DLL (T1546.007)?\nA.  Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.\nB.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nC.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nD.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Sudo and Sudo Caching (T1548.003)?\nA.  The file removal technique deletes malicious artifacts or programs from a computer system.\nB.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\nC.  The file removal technique deletes malicious artifacts or programs from a computer system.\nD.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Sudo and Sudo Caching (T1548.003)",
      "ddmc_optionA": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "ddmc_optionB": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "ddmc_optionC": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "ddmc_optionD": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "prompts": [],
      "instruction": "How can you mitigate Sudo and Sudo Caching (T1548.003)?\nA.  The file removal technique deletes malicious artifacts or programs from a computer system.\nB.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\nC.  The file removal technique deletes malicious artifacts or programs from a computer system.\nD.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Cross-Site Request Forgery (CSRF) (CWE-352)?\nA.  Always check to see if you have successfully accessed a resource or system functionality, and use proper error handling if it is unsuccessful. Do this even when you are operating in a highly privileged mode, because errors or environmental conditions might still cause a failure. For example, environments with highly granular permissions/privilege models, such as Windows or Linux capabilities, can cause unexpected failures.\nB.  Force the administrator to change the credential upon installation.\nC.  Use other functions that require explicit paths. Making use of any of the other readily available functions that require explicit paths is a safe way to avoid this problem. For example, system() in C does not require a full path since the shell can take care of it, while execl() and execv() require a full path.\nD.  Identify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Cross-Site Request Forgery (CSRF) (CWE-352)",
      "ddmc_optionA": "Always check to see if you have successfully accessed a resource or system functionality, and use proper error handling if it is unsuccessful. Do this even when you are operating in a highly privileged mode, because errors or environmental conditions might still cause a failure. For example, environments with highly granular permissions/privilege models, such as Windows or Linux capabilities, can cause unexpected failures.",
      "ddmc_optionB": "Force the administrator to change the credential upon installation.",
      "ddmc_optionC": "Use other functions that require explicit paths. Making use of any of the other readily available functions that require explicit paths is a safe way to avoid this problem. For example, system() in C does not require a full path since the shell can take care of it, while execl() and execv() require a full path.",
      "ddmc_optionD": "Identify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Identify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.",
      "prompts": [],
      "instruction": "How can you mitigate Cross-Site Request Forgery (CSRF) (CWE-352)?\nA.  Always check to see if you have successfully accessed a resource or system functionality, and use proper error handling if it is unsuccessful. Do this even when you are operating in a highly privileged mode, because errors or environmental conditions might still cause a failure. For example, environments with highly granular permissions/privilege models, such as Windows or Linux capabilities, can cause unexpected failures.\nB.  Force the administrator to change the credential upon installation.\nC.  Use other functions that require explicit paths. Making use of any of the other readily available functions that require explicit paths is a safe way to avoid this problem. For example, system() in C does not require a full path since the shell can take care of it, while execl() and execv() require a full path.\nD.  Identify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate CMSTP (T1218.003)?\nA.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\nB.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nC.  Restoring a file for an entity to access.\nD.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CMSTP (T1218.003)",
      "ddmc_optionA": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "ddmc_optionB": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_optionC": "Restoring a file for an entity to access.",
      "ddmc_optionD": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "prompts": [],
      "instruction": "What is a method to mitigate CMSTP (T1218.003)?\nA.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\nB.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nC.  Restoring a file for an entity to access.\nD.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate CAPEC-621 (Analysis of Packet Timing and Sizes)?\nA.  Only accept software updates from an official source.\nB.  Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist would not be permitted to enter into the system.\nC.  Distort packet sizes and timing at VPN layer by adding padding to normalize packet sizes and timing delays to reduce information leakage via timing.\nD.  Utilize contract language requiring contractors and subcontractors to flow down to subcontractors and suppliers SCRM and SCRA (Supply Chain Risk Assessment) requirements.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CAPEC-621 (Analysis of Packet Timing and Sizes)",
      "ddmc_optionA": "Only accept software updates from an official source.",
      "ddmc_optionB": "Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist would not be permitted to enter into the system.",
      "ddmc_optionC": "Distort packet sizes and timing at VPN layer by adding padding to normalize packet sizes and timing delays to reduce information leakage via timing.",
      "ddmc_optionD": "Utilize contract language requiring contractors and subcontractors to flow down to subcontractors and suppliers SCRM and SCRA (Supply Chain Risk Assessment) requirements.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Distort packet sizes and timing at VPN layer by adding padding to normalize packet sizes and timing delays to reduce information leakage via timing.",
      "prompts": [],
      "instruction": "What is a method to mitigate CAPEC-621 (Analysis of Packet Timing and Sizes)?\nA.  Only accept software updates from an official source.\nB.  Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist would not be permitted to enter into the system.\nC.  Distort packet sizes and timing at VPN layer by adding padding to normalize packet sizes and timing delays to reduce information leakage via timing.\nD.  Utilize contract language requiring contractors and subcontractors to flow down to subcontractors and suppliers SCRM and SCRA (Supply Chain Risk Assessment) requirements.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Email Collection (T1114)?\nA.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\nB.  Perform regular software updates to mitigate exploitation risk.\nC.  Configure features related to account use like login attempt lockouts, specific login times, etc.\nD.  Protect sensitive information with strong encryption.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Email Collection (T1114)",
      "ddmc_optionA": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
      "ddmc_optionB": "Perform regular software updates to mitigate exploitation risk.",
      "ddmc_optionC": "Configure features related to account use like login attempt lockouts, specific login times, etc.",
      "ddmc_optionD": "Protect sensitive information with strong encryption.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Protect sensitive information with strong encryption.",
      "prompts": [],
      "instruction": "What is a method to mitigate Email Collection (T1114)?\nA.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\nB.  Perform regular software updates to mitigate exploitation risk.\nC.  Configure features related to account use like login attempt lockouts, specific login times, etc.\nD.  Protect sensitive information with strong encryption.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Msiexec (T1218.007)?\nA.  Use intrusion detection signatures to block traffic at network boundaries.\nB.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nC.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\nD.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Msiexec (T1218.007)",
      "ddmc_optionA": "Use intrusion detection signatures to block traffic at network boundaries.",
      "ddmc_optionB": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "ddmc_optionC": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
      "ddmc_optionD": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
      "prompts": [],
      "instruction": "How can you mitigate Msiexec (T1218.007)?\nA.  Use intrusion detection signatures to block traffic at network boundaries.\nB.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nC.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\nD.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Missing Ability to Patch ROM Code (CWE-1310)?\nA.  Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.\nB.  Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C (\"Approved Random Number Generators\").\nC.  Do not leave debug statements that could be executed in the source code. Ensure that all debug information is eradicated before releasing the software.\nD.  Support patches that can be programmed in-field or during manufacturing through hardware fuses. This feature can be used for limited patching of devices after shipping, or for the next batch of silicon devices manufactured, without changing the full device ROM.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Missing Ability to Patch ROM Code (CWE-1310)",
      "ddmc_optionA": "Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.",
      "ddmc_optionB": "Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C (\"Approved Random Number Generators\").",
      "ddmc_optionC": "Do not leave debug statements that could be executed in the source code. Ensure that all debug information is eradicated before releasing the software.",
      "ddmc_optionD": "Support patches that can be programmed in-field or during manufacturing through hardware fuses. This feature can be used for limited patching of devices after shipping, or for the next batch of silicon devices manufactured, without changing the full device ROM.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Support patches that can be programmed in-field or during manufacturing through hardware fuses. This feature can be used for limited patching of devices after shipping, or for the next batch of silicon devices manufactured, without changing the full device ROM.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Missing Ability to Patch ROM Code (CWE-1310)?\nA.  Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.\nB.  Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C (\"Approved Random Number Generators\").\nC.  Do not leave debug statements that could be executed in the source code. Ensure that all debug information is eradicated before releasing the software.\nD.  Support patches that can be programmed in-field or during manufacturing through hardware fuses. This feature can be used for limited patching of devices after shipping, or for the next batch of silicon devices manufactured, without changing the full device ROM.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate SQL Injection (CAPEC-66)?\nA.  Configure account privileges such privileged/administrator functionality is not exposed to non-privileged/lower accounts.\nB.  Use strong access control such as two factor access control for administrative access to the switch\nC.  Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application.\nD.  Design: Follow the defensive programming practices needed to protect an application accessing the database from SQL injection\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "SQL Injection (CAPEC-66)",
      "ddmc_optionA": "Configure account privileges such privileged/administrator functionality is not exposed to non-privileged/lower accounts.",
      "ddmc_optionB": "Use strong access control such as two factor access control for administrative access to the switch",
      "ddmc_optionC": "Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application.",
      "ddmc_optionD": "Design: Follow the defensive programming practices needed to protect an application accessing the database from SQL injection",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application.",
      "prompts": [],
      "instruction": "How can you mitigate SQL Injection (CAPEC-66)?\nA.  Configure account privileges such privileged/administrator functionality is not exposed to non-privileged/lower accounts.\nB.  Use strong access control such as two factor access control for administrative access to the switch\nC.  Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application.\nD.  Design: Follow the defensive programming practices needed to protect an application accessing the database from SQL injection\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1573.001 (Symmetric Cryptography)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  Restricting network traffic originating from any location.\nC.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nD.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1573.001 (Symmetric Cryptography)",
      "ddmc_optionA": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionB": "Restricting network traffic originating from any location.",
      "ddmc_optionC": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionD": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Restricting network traffic originating from any location.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1573.001 (Symmetric Cryptography)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  Restricting network traffic originating from any location.\nC.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nD.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Stored Data Manipulation (T1565.001)?\nA.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nB.  Employing a pattern matching rule language to analyze the content of files.\nC.  Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.\nD.  Restoring an object for an entity to access. This is the broadest class for object restoral.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Stored Data Manipulation (T1565.001)",
      "ddmc_optionA": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_optionB": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_optionC": "Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.",
      "ddmc_optionD": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Employing a pattern matching rule language to analyze the content of files.",
      "prompts": [],
      "instruction": "How can you mitigate Stored Data Manipulation (T1565.001)?\nA.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nB.  Employing a pattern matching rule language to analyze the content of files.\nC.  Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.\nD.  Restoring an object for an entity to access. This is the broadest class for object restoral.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Improper Handling of Unicode Encoding (CWE-176)?\nA.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nB.  Consider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource.\nC.  Use resource-limiting settings provided by the operating system or environment. For example, when managing system resources in POSIX, setrlimit() can be used to set limits for certain types of resources, and getrlimit() can determine how many resources are available. However, these functions are not available on all operating systems. When the current levels get close to the maximum that is defined for the application (see CWE-770), then limit the allocation of further resources to privileged users; alternately, begin releasing resources for less-privileged users. While this mitigation may protect the system from attack, it will not necessarily stop attackers from adversely impacting other users. Ensure that the application performs the appropriate error checks and error handling in case resources become unavailable (CWE-703).\nD.  Try not to use cryptographic algorithms in novel ways or with new modes of operation even when you \"know\" it is secure. For example, using SHA-2 chaining to create a 1-time pad for encryption might sound like a good idea, but one should not do this.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Handling of Unicode Encoding (CWE-176)",
      "ddmc_optionA": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmc_optionB": "Consider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource.",
      "ddmc_optionC": "Use resource-limiting settings provided by the operating system or environment. For example, when managing system resources in POSIX, setrlimit() can be used to set limits for certain types of resources, and getrlimit() can determine how many resources are available. However, these functions are not available on all operating systems. When the current levels get close to the maximum that is defined for the application (see CWE-770), then limit the allocation of further resources to privileged users; alternately, begin releasing resources for less-privileged users. While this mitigation may protect the system from attack, it will not necessarily stop attackers from adversely impacting other users. Ensure that the application performs the appropriate error checks and error handling in case resources become unavailable (CWE-703).",
      "ddmc_optionD": "Try not to use cryptographic algorithms in novel ways or with new modes of operation even when you \"know\" it is secure. For example, using SHA-2 chaining to create a 1-time pad for encryption might sound like a good idea, but one should not do this.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "prompts": [],
      "instruction": "What is a method to mitigate Improper Handling of Unicode Encoding (CWE-176)?\nA.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nB.  Consider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource.\nC.  Use resource-limiting settings provided by the operating system or environment. For example, when managing system resources in POSIX, setrlimit() can be used to set limits for certain types of resources, and getrlimit() can determine how many resources are available. However, these functions are not available on all operating systems. When the current levels get close to the maximum that is defined for the application (see CWE-770), then limit the allocation of further resources to privileged users; alternately, begin releasing resources for less-privileged users. While this mitigation may protect the system from attack, it will not necessarily stop attackers from adversely impacting other users. Ensure that the application performs the appropriate error checks and error handling in case resources become unavailable (CWE-703).\nD.  Try not to use cryptographic algorithms in novel ways or with new modes of operation even when you \"know\" it is secure. For example, using SHA-2 chaining to create a 1-time pad for encryption might sound like a good idea, but one should not do this.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Control Panel (T1218.002)?\nA.  Restricting a user account's access to resources.\nB.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\nC.  Operating system level mechanisms to prevent abusive input device exploitation.\nD.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Control Panel (T1218.002)",
      "ddmc_optionA": "Restricting a user account's access to resources.",
      "ddmc_optionB": "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.",
      "ddmc_optionC": "Operating system level mechanisms to prevent abusive input device exploitation.",
      "ddmc_optionD": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Control Panel (T1218.002)?\nA.  Restricting a user account's access to resources.\nB.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\nC.  Operating system level mechanisms to prevent abusive input device exploitation.\nD.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Local Data Staging (T1074.001)?\nA.  Encrypting a file using a cryptographic key.\nB.  Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.\nC.  Encrypting a file using a cryptographic key.\nD.  A file created for the purposes of deceiving an adversary.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Local Data Staging (T1074.001)",
      "ddmc_optionA": "Encrypting a file using a cryptographic key.",
      "ddmc_optionB": "Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.",
      "ddmc_optionC": "Encrypting a file using a cryptographic key.",
      "ddmc_optionD": "A file created for the purposes of deceiving an adversary.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Encrypting a file using a cryptographic key.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Local Data Staging (T1074.001)?\nA.  Encrypting a file using a cryptographic key.\nB.  Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.\nC.  Encrypting a file using a cryptographic key.\nD.  A file created for the purposes of deceiving an adversary.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate CAPEC-529 (Malware-Directed Internal Reconnaissance)?\nA.  Implementation: Perform input validation for all remote content, including remote and user-generated content\nB.  Keep patches up to date by installing weekly or daily if possible.\nC.  Conduct detailed vendor assessment before acquiring COTS hardware.\nD.  Input should be parameterized, or restricted to data sections of a command, thus removing the chance that the input will be treated as part of the command itself.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CAPEC-529 (Malware-Directed Internal Reconnaissance)",
      "ddmc_optionA": "Implementation: Perform input validation for all remote content, including remote and user-generated content",
      "ddmc_optionB": "Keep patches up to date by installing weekly or daily if possible.",
      "ddmc_optionC": "Conduct detailed vendor assessment before acquiring COTS hardware.",
      "ddmc_optionD": "Input should be parameterized, or restricted to data sections of a command, thus removing the chance that the input will be treated as part of the command itself.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Keep patches up to date by installing weekly or daily if possible.",
      "prompts": [],
      "instruction": "How can you mitigate CAPEC-529 (Malware-Directed Internal Reconnaissance)?\nA.  Implementation: Perform input validation for all remote content, including remote and user-generated content\nB.  Keep patches up to date by installing weekly or daily if possible.\nC.  Conduct detailed vendor assessment before acquiring COTS hardware.\nD.  Input should be parameterized, or restricted to data sections of a command, thus removing the chance that the input will be treated as part of the command itself.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Clear Linux or Mac System Logs (T1070.002)?\nA.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nB.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\nC.  Restricting access to a local file by configuring operating system functionality.\nD.  An authentication token created for the purposes of deceiving an adversary.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Clear Linux or Mac System Logs (T1070.002)",
      "ddmc_optionA": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmc_optionB": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "ddmc_optionC": "Restricting access to a local file by configuring operating system functionality.",
      "ddmc_optionD": "An authentication token created for the purposes of deceiving an adversary.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Restricting access to a local file by configuring operating system functionality.",
      "prompts": [],
      "instruction": "How can you mitigate Clear Linux or Mac System Logs (T1070.002)?\nA.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nB.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\nC.  Restricting access to a local file by configuring operating system functionality.\nD.  An authentication token created for the purposes of deceiving an adversary.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate CAPEC-163 (Spear Phishing)?\nA.  Ensure that production systems do not contain non-production interfaces and that these interfaces are only used in development environments.\nB.  Do not follow any links that you receive within your e-mails and certainly do not input any login credentials on the page that they take you too. Instead, call your Bank, PayPal, eBay, etc., and inquire about the problem. A safe practice would also be to type the URL of your bank in the browser directly and only then log in. Also, never reply to any e-mails that ask you to provide sensitive information of any kind.\nC.  Configuration: Make sure your DNS servers have been updated to the latest versions\nD.  Configuration: Disallow HTTP messages with both Transfer-Encoding and Content-Length or Double Content-Length Headers.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CAPEC-163 (Spear Phishing)",
      "ddmc_optionA": "Ensure that production systems do not contain non-production interfaces and that these interfaces are only used in development environments.",
      "ddmc_optionB": "Do not follow any links that you receive within your e-mails and certainly do not input any login credentials on the page that they take you too. Instead, call your Bank, PayPal, eBay, etc., and inquire about the problem. A safe practice would also be to type the URL of your bank in the browser directly and only then log in. Also, never reply to any e-mails that ask you to provide sensitive information of any kind.",
      "ddmc_optionC": "Configuration: Make sure your DNS servers have been updated to the latest versions",
      "ddmc_optionD": "Configuration: Disallow HTTP messages with both Transfer-Encoding and Content-Length or Double Content-Length Headers.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Do not follow any links that you receive within your e-mails and certainly do not input any login credentials on the page that they take you too. Instead, call your Bank, PayPal, eBay, etc., and inquire about the problem. A safe practice would also be to type the URL of your bank in the browser directly and only then log in. Also, never reply to any e-mails that ask you to provide sensitive information of any kind.",
      "prompts": [],
      "instruction": "How can you mitigate CAPEC-163 (Spear Phishing)?\nA.  Ensure that production systems do not contain non-production interfaces and that these interfaces are only used in development environments.\nB.  Do not follow any links that you receive within your e-mails and certainly do not input any login credentials on the page that they take you too. Instead, call your Bank, PayPal, eBay, etc., and inquire about the problem. A safe practice would also be to type the URL of your bank in the browser directly and only then log in. Also, never reply to any e-mails that ask you to provide sensitive information of any kind.\nC.  Configuration: Make sure your DNS servers have been updated to the latest versions\nD.  Configuration: Disallow HTTP messages with both Transfer-Encoding and Content-Length or Double Content-Length Headers.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Privilege Context Switching Error (CWE-270)?\nA.  Never allow the user to control what e-mail address the new password will be sent to in the password recovery mechanism.\nB.  Consider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource.\nC.  Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls. Many file inclusion problems occur because the programmer assumed that certain inputs could not be modified, especially for cookies and URL components.\nD.  Use OS-level preventative functionality integrated after the fact. Not a complete solution.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Privilege Context Switching Error (CWE-270)",
      "ddmc_optionA": "Never allow the user to control what e-mail address the new password will be sent to in the password recovery mechanism.",
      "ddmc_optionB": "Consider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource.",
      "ddmc_optionC": "Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls. Many file inclusion problems occur because the programmer assumed that certain inputs could not be modified, especially for cookies and URL components.",
      "ddmc_optionD": "Use OS-level preventative functionality integrated after the fact. Not a complete solution.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Consider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource.",
      "prompts": [],
      "instruction": "What is a method to mitigate Privilege Context Switching Error (CWE-270)?\nA.  Never allow the user to control what e-mail address the new password will be sent to in the password recovery mechanism.\nB.  Consider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource.\nC.  Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls. Many file inclusion problems occur because the programmer assumed that certain inputs could not be modified, especially for cookies and URL components.\nD.  Use OS-level preventative functionality integrated after the fact. Not a complete solution.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Bash History (T1552.003)?\nA.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nB.  Emulating instructions in a file looking for specific patterns.\nC.  File eviction techniques evict files from system storage.\nD.  Restoring a user account's access to resources by unlocking a locked User Account.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Bash History (T1552.003)",
      "ddmc_optionA": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_optionB": "Emulating instructions in a file looking for specific patterns.",
      "ddmc_optionC": "File eviction techniques evict files from system storage.",
      "ddmc_optionD": "Restoring a user account's access to resources by unlocking a locked User Account.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "File eviction techniques evict files from system storage.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Bash History (T1552.003)?\nA.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nB.  Emulating instructions in a file looking for specific patterns.\nC.  File eviction techniques evict files from system storage.\nD.  Restoring a user account's access to resources by unlocking a locked User Account.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate CWE-323 (Reusing a Nonce, Key Pair in Encryption)?\nA.  Use techniques such as requiring incrementing, time based and/or challenge response to assure uniqueness of nonces.\nB.  Limit Content Provider permissions (read/write) as appropriate.\nC.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nD.  Run or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code. Examples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64]. Imported modules may be similarly realigned if their default memory addresses conflict with other modules, in a process known as \"rebasing\" (for Windows) and \"prelinking\" (for Linux) [REF-1332] using randomly generated addresses. ASLR for libraries cannot be used in conjunction with prelink since it would require relocating the libraries at run-time, defeating the whole purpose of prelinking. For more information on these techniques see D3-SAOR (Segment Address Offset Randomization) from D3FEND [REF-1335].\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CWE-323 (Reusing a Nonce, Key Pair in Encryption)",
      "ddmc_optionA": "Use techniques such as requiring incrementing, time based and/or challenge response to assure uniqueness of nonces.",
      "ddmc_optionB": "Limit Content Provider permissions (read/write) as appropriate.",
      "ddmc_optionC": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmc_optionD": "Run or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code. Examples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64]. Imported modules may be similarly realigned if their default memory addresses conflict with other modules, in a process known as \"rebasing\" (for Windows) and \"prelinking\" (for Linux) [REF-1332] using randomly generated addresses. ASLR for libraries cannot be used in conjunction with prelink since it would require relocating the libraries at run-time, defeating the whole purpose of prelinking. For more information on these techniques see D3-SAOR (Segment Address Offset Randomization) from D3FEND [REF-1335].",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Use techniques such as requiring incrementing, time based and/or challenge response to assure uniqueness of nonces.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate CWE-323 (Reusing a Nonce, Key Pair in Encryption)?\nA.  Use techniques such as requiring incrementing, time based and/or challenge response to assure uniqueness of nonces.\nB.  Limit Content Provider permissions (read/write) as appropriate.\nC.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nD.  Run or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code. Examples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64]. Imported modules may be similarly realigned if their default memory addresses conflict with other modules, in a process known as \"rebasing\" (for Windows) and \"prelinking\" (for Linux) [REF-1332] using randomly generated addresses. ASLR for libraries cannot be used in conjunction with prelink since it would require relocating the libraries at run-time, defeating the whole purpose of prelinking. For more information on these techniques see D3-SAOR (Segment Address Offset Randomization) from D3FEND [REF-1335].\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Credential Stuffing (T1110.004)?\nA.  Restricting network traffic originating from untrusted networks destined towards a private host or enclave.\nB.  Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.\nC.  Collecting authentication events, creating a baseline user profile, and determining whether authentication events are consistent with the baseline profile.\nD.  Identification of suspicious processes executing on an end-point device by examining the ancestry and siblings of a process, and the associated metadata of each node on the tree, such as process execution, duration, and order relative to siblings and ancestors.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Credential Stuffing (T1110.004)",
      "ddmc_optionA": "Restricting network traffic originating from untrusted networks destined towards a private host or enclave.",
      "ddmc_optionB": "Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.",
      "ddmc_optionC": "Collecting authentication events, creating a baseline user profile, and determining whether authentication events are consistent with the baseline profile.",
      "ddmc_optionD": "Identification of suspicious processes executing on an end-point device by examining the ancestry and siblings of a process, and the associated metadata of each node on the tree, such as process execution, duration, and order relative to siblings and ancestors.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Collecting authentication events, creating a baseline user profile, and determining whether authentication events are consistent with the baseline profile.",
      "prompts": [],
      "instruction": "What is a method to mitigate Credential Stuffing (T1110.004)?\nA.  Restricting network traffic originating from untrusted networks destined towards a private host or enclave.\nB.  Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.\nC.  Collecting authentication events, creating a baseline user profile, and determining whether authentication events are consistent with the baseline profile.\nD.  Identification of suspicious processes executing on an end-point device by examining the ancestry and siblings of a process, and the associated metadata of each node on the tree, such as process execution, duration, and order relative to siblings and ancestors.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate T1014 (Rootkit)?\nA.  Configuring a kernel to use an allow or deny list to filter kernel api calls.\nB.  Encrypting a file using a cryptographic key.\nC.  Employing file hash comparisons to detect known malware.\nD.  Software inventorying identifies and records the software items in the organization's architecture.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1014 (Rootkit)",
      "ddmc_optionA": "Configuring a kernel to use an allow or deny list to filter kernel api calls.",
      "ddmc_optionB": "Encrypting a file using a cryptographic key.",
      "ddmc_optionC": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionD": "Software inventorying identifies and records the software items in the organization's architecture.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Encrypting a file using a cryptographic key.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate T1014 (Rootkit)?\nA.  Configuring a kernel to use an allow or deny list to filter kernel api calls.\nB.  Encrypting a file using a cryptographic key.\nC.  Employing file hash comparisons to detect known malware.\nD.  Software inventorying identifies and records the software items in the organization's architecture.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Password Spraying (T1110.003)?\nA.  Manage the creation, modification, use, and permissions associated to user accounts.\nB.  Configure features related to account use like login attempt lockouts, specific login times, etc.\nC.  Configure features related to account use like login attempt lockouts, specific login times, etc.\nD.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Password Spraying (T1110.003)",
      "ddmc_optionA": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmc_optionB": "Configure features related to account use like login attempt lockouts, specific login times, etc.",
      "ddmc_optionC": "Configure features related to account use like login attempt lockouts, specific login times, etc.",
      "ddmc_optionD": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Configure features related to account use like login attempt lockouts, specific login times, etc.",
      "prompts": [],
      "instruction": "What is a method to mitigate Password Spraying (T1110.003)?\nA.  Manage the creation, modification, use, and permissions associated to user accounts.\nB.  Configure features related to account use like login attempt lockouts, specific login times, etc.\nC.  Configure features related to account use like login attempt lockouts, specific login times, etc.\nD.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Non-Application Layer Protocol (T1095)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\nC.  Collecting network communication protocol metadata and identifying statistical outliers.\nD.  A file created for the purposes of deceiving an adversary.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Non-Application Layer Protocol (T1095)",
      "ddmc_optionA": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionB": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "ddmc_optionC": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmc_optionD": "A file created for the purposes of deceiving an adversary.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "prompts": [],
      "instruction": "How can you mitigate Non-Application Layer Protocol (T1095)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\nC.  Collecting network communication protocol metadata and identifying statistical outliers.\nD.  A file created for the purposes of deceiving an adversary.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1056.001 (Keylogging)?\nA.  Configuring a kernel to use an allow or deny list to filter kernel api calls.\nB.  The detection of an internal host relaying traffic between the internal network and the external network.\nC.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\nD.  A file created for the purposes of deceiving an adversary.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1056.001 (Keylogging)",
      "ddmc_optionA": "Configuring a kernel to use an allow or deny list to filter kernel api calls.",
      "ddmc_optionB": "The detection of an internal host relaying traffic between the internal network and the external network.",
      "ddmc_optionC": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmc_optionD": "A file created for the purposes of deceiving an adversary.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1056.001 (Keylogging)?\nA.  Configuring a kernel to use an allow or deny list to filter kernel api calls.\nB.  The detection of an internal host relaying traffic between the internal network and the external network.\nC.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\nD.  A file created for the purposes of deceiving an adversary.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Email Forwarding Rule (T1114.003)?\nA.  Restoring an software configuration.\nB.  Using kernel-level capabilities to isolate processes.\nC.  Restricting network traffic originating from a private host or enclave destined towards untrusted networks.\nD.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Email Forwarding Rule (T1114.003)",
      "ddmc_optionA": "Restoring an software configuration.",
      "ddmc_optionB": "Using kernel-level capabilities to isolate processes.",
      "ddmc_optionC": "Restricting network traffic originating from a private host or enclave destined towards untrusted networks.",
      "ddmc_optionD": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Restoring an software configuration.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Email Forwarding Rule (T1114.003)?\nA.  Restoring an software configuration.\nB.  Using kernel-level capabilities to isolate processes.\nC.  Restricting network traffic originating from a private host or enclave destined towards untrusted networks.\nD.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Contaminate Resource (CAPEC-548)?\nA.  Implementation: Perform input validation for all remote content.\nB.  Design systems with redundancy in mind. This could mean creating backing servers that could be switched over to in the event that a server has to be taken down for investigation.\nC.  Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)\nD.  Be mindful of your surroundings when discussing or viewing sensitive information in public areas.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Contaminate Resource (CAPEC-548)",
      "ddmc_optionA": "Implementation: Perform input validation for all remote content.",
      "ddmc_optionB": "Design systems with redundancy in mind. This could mean creating backing servers that could be switched over to in the event that a server has to be taken down for investigation.",
      "ddmc_optionC": "Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)",
      "ddmc_optionD": "Be mindful of your surroundings when discussing or viewing sensitive information in public areas.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Design systems with redundancy in mind. This could mean creating backing servers that could be switched over to in the event that a server has to be taken down for investigation.",
      "prompts": [],
      "instruction": "How can you mitigate Contaminate Resource (CAPEC-548)?\nA.  Implementation: Perform input validation for all remote content.\nB.  Design systems with redundancy in mind. This could mean creating backing servers that could be switched over to in the event that a server has to be taken down for investigation.\nC.  Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)\nD.  Be mindful of your surroundings when discussing or viewing sensitive information in public areas.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate AppInit DLLs (T1546.010)?\nA.  Employing a pattern matching rule language to analyze the content of files.\nB.  Permitting only approved domains and their subdomains to be resolved.\nC.  Analyzing the duration of user sessions in order to detect unauthorized activity.\nD.  File eviction techniques evict files from system storage.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "AppInit DLLs (T1546.010)",
      "ddmc_optionA": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_optionB": "Permitting only approved domains and their subdomains to be resolved.",
      "ddmc_optionC": "Analyzing the duration of user sessions in order to detect unauthorized activity.",
      "ddmc_optionD": "File eviction techniques evict files from system storage.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Employing a pattern matching rule language to analyze the content of files.",
      "prompts": [],
      "instruction": "How can you mitigate AppInit DLLs (T1546.010)?\nA.  Employing a pattern matching rule language to analyze the content of files.\nB.  Permitting only approved domains and their subdomains to be resolved.\nC.  Analyzing the duration of user sessions in order to detect unauthorized activity.\nD.  File eviction techniques evict files from system storage.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate T1558.003 (Kerberoasting)?\nA.  Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.\nB.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\nC.  Collecting network communication protocol metadata and identifying statistical outliers.\nD.  Restricting network traffic originating from any location.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1558.003 (Kerberoasting)",
      "ddmc_optionA": "Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.",
      "ddmc_optionB": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "ddmc_optionC": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmc_optionD": "Restricting network traffic originating from any location.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate T1558.003 (Kerberoasting)?\nA.  Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.\nB.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\nC.  Collecting network communication protocol metadata and identifying statistical outliers.\nD.  Restricting network traffic originating from any location.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Scheduled Task (T1053.005)?\nA.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\nB.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nC.  Terminating a running application process on a computer system.\nD.  Using a digital signature to authenticate a file before opening.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Scheduled Task (T1053.005)",
      "ddmc_optionA": "Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.",
      "ddmc_optionB": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionC": "Terminating a running application process on a computer system.",
      "ddmc_optionD": "Using a digital signature to authenticate a file before opening.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Terminating a running application process on a computer system.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Scheduled Task (T1053.005)?\nA.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\nB.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nC.  Terminating a running application process on a computer system.\nD.  Using a digital signature to authenticate a file before opening.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Detection of Error Condition Without Action (CWE-390)?\nA.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.) Formal Methods / Correct-By-Construction Cost effective for partial coverage: Attack Modeling\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  Negative testing of access control on overlapped ranges.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Detection of Error Condition Without Action (CWE-390)",
      "ddmc_optionA": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.) Formal Methods / Correct-By-Construction Cost effective for partial coverage: Attack Modeling",
      "ddmc_optionB": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionC": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionD": "Negative testing of access control on overlapped ranges.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "What is a method to detect Detection of Error Condition Without Action (CWE-390)?\nA.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.) Formal Methods / Correct-By-Construction Cost effective for partial coverage: Attack Modeling\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  Negative testing of access control on overlapped ranges.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate clone() Method Without super.clone() (CWE-580)?\nA.  In some cases, you can eliminate the clone method altogether and use copy constructors.\nB.  Remove debug log files before deploying the application into production.\nC.  Protect log files against unauthorized read/write.\nD.  Outside the IP, incorporate integrity checking of the configuration state via a trusted agent. Before powering down, the trusted agent performs a hash of the configuration and saves the hash in persistent storage. Upon restore, the IP requests the trusted agent validate its current configuration. If the configuration hash is invalid, then the IP should not trust the configuration.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "clone() Method Without super.clone() (CWE-580)",
      "ddmc_optionA": "In some cases, you can eliminate the clone method altogether and use copy constructors.",
      "ddmc_optionB": "Remove debug log files before deploying the application into production.",
      "ddmc_optionC": "Protect log files against unauthorized read/write.",
      "ddmc_optionD": "Outside the IP, incorporate integrity checking of the configuration state via a trusted agent. Before powering down, the trusted agent performs a hash of the configuration and saves the hash in persistent storage. Upon restore, the IP requests the trusted agent validate its current configuration. If the configuration hash is invalid, then the IP should not trust the configuration.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "In some cases, you can eliminate the clone method altogether and use copy constructors.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate clone() Method Without super.clone() (CWE-580)?\nA.  In some cases, you can eliminate the clone method altogether and use copy constructors.\nB.  Remove debug log files before deploying the application into production.\nC.  Protect log files against unauthorized read/write.\nD.  Outside the IP, incorporate integrity checking of the configuration state via a trusted agent. Before powering down, the trusted agent performs a hash of the configuration and saves the hash in persistent storage. Upon restore, the IP requests the trusted agent validate its current configuration. If the configuration hash is invalid, then the IP should not trust the configuration.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Security Support Provider (T1547.005)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nC.  Restricting network traffic originating from a private host or enclave destined towards untrusted networks.\nD.  Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Security Support Provider (T1547.005)",
      "ddmc_optionA": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionB": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_optionC": "Restricting network traffic originating from a private host or enclave destined towards untrusted networks.",
      "ddmc_optionD": "Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Security Support Provider (T1547.005)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nC.  Restricting network traffic originating from a private host or enclave destined towards untrusted networks.\nD.  Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1558.003 (Kerberoasting)?\nA.  Use signatures or heuristics to detect malicious software.\nB.  Protect sensitive information with strong encryption.\nC.  Restrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.\nD.  Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1558.003 (Kerberoasting)",
      "ddmc_optionA": "Use signatures or heuristics to detect malicious software.",
      "ddmc_optionB": "Protect sensitive information with strong encryption.",
      "ddmc_optionC": "Restrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.",
      "ddmc_optionD": "Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Protect sensitive information with strong encryption.",
      "prompts": [],
      "instruction": "How can you mitigate T1558.003 (Kerberoasting)?\nA.  Use signatures or heuristics to detect malicious software.\nB.  Protect sensitive information with strong encryption.\nC.  Restrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.\nD.  Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Local Data Staging (T1074.001)?\nA.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nB.  Limiting the transmission of a credential to a scoped set of relying parties.\nC.  The file removal technique deletes malicious artifacts or programs from a computer system.\nD.  Restoring an software configuration.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Local Data Staging (T1074.001)",
      "ddmc_optionA": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionB": "Limiting the transmission of a credential to a scoped set of relying parties.",
      "ddmc_optionC": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "ddmc_optionD": "Restoring an software configuration.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "prompts": [],
      "instruction": "What is a method to mitigate Local Data Staging (T1074.001)?\nA.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nB.  Limiting the transmission of a credential to a scoped set of relying parties.\nC.  The file removal technique deletes malicious artifacts or programs from a computer system.\nD.  Restoring an software configuration.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Rogue Domain Controller (T1207)?\nA.  The detection of an internal host relaying traffic between the internal network and the external network.\nB.  Physical link mapping identifies and models the link connectivity of the network devices within a physical network.\nC.  Using biological measures in order to authenticate a user.\nD.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Rogue Domain Controller (T1207)",
      "ddmc_optionA": "The detection of an internal host relaying traffic between the internal network and the external network.",
      "ddmc_optionB": "Physical link mapping identifies and models the link connectivity of the network devices within a physical network.",
      "ddmc_optionC": "Using biological measures in order to authenticate a user.",
      "ddmc_optionD": "Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Rogue Domain Controller (T1207)?\nA.  The detection of an internal host relaying traffic between the internal network and the external network.\nB.  Physical link mapping identifies and models the link connectivity of the network devices within a physical network.\nC.  Using biological measures in order to authenticate a user.\nD.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Office Test (T1137.002)?\nA.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nB.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nC.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\nD.  Restoring an software configuration.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Office Test (T1137.002)",
      "ddmc_optionA": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmc_optionB": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_optionC": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "ddmc_optionD": "Restoring an software configuration.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Restoring an software configuration.",
      "prompts": [],
      "instruction": "What is a method to mitigate Office Test (T1137.002)?\nA.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nB.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nC.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\nD.  Restoring an software configuration.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate System Information Discovery (T1082)?\nA.  Encrypting a file using a cryptographic key.\nB.  Collecting authorization events, creating a baseline user profile, and determining whether authorization events are consistent with the baseline profile.\nC.  Restoring a file for an entity to access.\nD.  A Decoy Environment comprises hosts and networks for the purposes of deceiving an attacker.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "System Information Discovery (T1082)",
      "ddmc_optionA": "Encrypting a file using a cryptographic key.",
      "ddmc_optionB": "Collecting authorization events, creating a baseline user profile, and determining whether authorization events are consistent with the baseline profile.",
      "ddmc_optionC": "Restoring a file for an entity to access.",
      "ddmc_optionD": "A Decoy Environment comprises hosts and networks for the purposes of deceiving an attacker.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "A Decoy Environment comprises hosts and networks for the purposes of deceiving an attacker.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate System Information Discovery (T1082)?\nA.  Encrypting a file using a cryptographic key.\nB.  Collecting authorization events, creating a baseline user profile, and determining whether authorization events are consistent with the baseline profile.\nC.  Restoring a file for an entity to access.\nD.  A Decoy Environment comprises hosts and networks for the purposes of deceiving an attacker.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Golden Ticket (T1558.001)?\nA.  Encrypting a file using a cryptographic key.\nB.  Removing tokens or credentials from an authentication cache to prevent further user associated account accesses.\nC.  Software inventorying identifies and records the software items in the organization's architecture.\nD.  Employing a pattern matching rule language to analyze the content of files.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Golden Ticket (T1558.001)",
      "ddmc_optionA": "Encrypting a file using a cryptographic key.",
      "ddmc_optionB": "Removing tokens or credentials from an authentication cache to prevent further user associated account accesses.",
      "ddmc_optionC": "Software inventorying identifies and records the software items in the organization's architecture.",
      "ddmc_optionD": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Removing tokens or credentials from an authentication cache to prevent further user associated account accesses.",
      "prompts": [],
      "instruction": "What is a method to mitigate Golden Ticket (T1558.001)?\nA.  Encrypting a file using a cryptographic key.\nB.  Removing tokens or credentials from an authentication cache to prevent further user associated account accesses.\nC.  Software inventorying identifies and records the software items in the organization's architecture.\nD.  Employing a pattern matching rule language to analyze the content of files.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Domain Accounts (T1078.002)?\nA.  Requiring proof of two or more pieces of evidence in order to authenticate a user.\nB.  Restricting network traffic originating from any location.\nC.  The file removal technique deletes malicious artifacts or programs from a computer system.\nD.  Emulating instructions in a file looking for specific patterns.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Domain Accounts (T1078.002)",
      "ddmc_optionA": "Requiring proof of two or more pieces of evidence in order to authenticate a user.",
      "ddmc_optionB": "Restricting network traffic originating from any location.",
      "ddmc_optionC": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "ddmc_optionD": "Emulating instructions in a file looking for specific patterns.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Requiring proof of two or more pieces of evidence in order to authenticate a user.",
      "prompts": [],
      "instruction": "How can you mitigate Domain Accounts (T1078.002)?\nA.  Requiring proof of two or more pieces of evidence in order to authenticate a user.\nB.  Restricting network traffic originating from any location.\nC.  The file removal technique deletes malicious artifacts or programs from a computer system.\nD.  Emulating instructions in a file looking for specific patterns.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Server Software Component (T1505)?\nA.  Block execution of code on a system through application control, and/or script blocking.\nB.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\nC.  Manage the creation, modification, use, and permissions associated to user accounts.\nD.  Use intrusion detection signatures to block traffic at network boundaries.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Server Software Component (T1505)",
      "ddmc_optionA": "Block execution of code on a system through application control, and/or script blocking.",
      "ddmc_optionB": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
      "ddmc_optionC": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmc_optionD": "Use intrusion detection signatures to block traffic at network boundaries.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
      "prompts": [],
      "instruction": "What is a method to mitigate Server Software Component (T1505)?\nA.  Block execution of code on a system through application control, and/or script blocking.\nB.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\nC.  Manage the creation, modification, use, and permissions associated to user accounts.\nD.  Use intrusion detection signatures to block traffic at network boundaries.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Winlogon Helper DLL (T1547.004)?\nA.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nB.  Access modeling identifies and records the access permissions granted to administrators, users, groups, and systems.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Winlogon Helper DLL (T1547.004)",
      "ddmc_optionA": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionB": "Access modeling identifies and records the access permissions granted to administrators, users, groups, and systems.",
      "ddmc_optionC": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionD": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Winlogon Helper DLL (T1547.004)?\nA.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nB.  Access modeling identifies and records the access permissions granted to administrators, users, groups, and systems.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Identity Spoofing (CAPEC-151)?\nA.  Employ robust authentication processes (e.g., multi-factor authentication).\nB.  Authenticating both services and their discovery, and protecting that authentication mechanism simply fixes the bulk of this problem. Protecting the authentication involves the standard means, including: 1) protecting the channel over which authentication occurs, 2) preventing the theft, forgery, or prediction of authentication credentials or the resultant tokens, or 3) subversion of password reset and the like.\nC.  Implement Ingress filters to check the validity of received routes. However, this relies on the accuracy of Internet Routing Registries (IRRs) databases which are often not well-maintained.\nD.  The only known mitigation to this attack is to avoid installing the malicious application on the device. However, to impersonate a running task the malicious application does need the GET_TASKS permission to be able to query the task list, and being suspicious of applications with that permission can help.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Identity Spoofing (CAPEC-151)",
      "ddmc_optionA": "Employ robust authentication processes (e.g., multi-factor authentication).",
      "ddmc_optionB": "Authenticating both services and their discovery, and protecting that authentication mechanism simply fixes the bulk of this problem. Protecting the authentication involves the standard means, including: 1) protecting the channel over which authentication occurs, 2) preventing the theft, forgery, or prediction of authentication credentials or the resultant tokens, or 3) subversion of password reset and the like.",
      "ddmc_optionC": "Implement Ingress filters to check the validity of received routes. However, this relies on the accuracy of Internet Routing Registries (IRRs) databases which are often not well-maintained.",
      "ddmc_optionD": "The only known mitigation to this attack is to avoid installing the malicious application on the device. However, to impersonate a running task the malicious application does need the GET_TASKS permission to be able to query the task list, and being suspicious of applications with that permission can help.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Employ robust authentication processes (e.g., multi-factor authentication).",
      "prompts": [],
      "instruction": "What is a method to mitigate Identity Spoofing (CAPEC-151)?\nA.  Employ robust authentication processes (e.g., multi-factor authentication).\nB.  Authenticating both services and their discovery, and protecting that authentication mechanism simply fixes the bulk of this problem. Protecting the authentication involves the standard means, including: 1) protecting the channel over which authentication occurs, 2) preventing the theft, forgery, or prediction of authentication credentials or the resultant tokens, or 3) subversion of password reset and the like.\nC.  Implement Ingress filters to check the validity of received routes. However, this relies on the accuracy of Internet Routing Registries (IRRs) databases which are often not well-maintained.\nD.  The only known mitigation to this attack is to avoid installing the malicious application on the device. However, to impersonate a running task the malicious application does need the GET_TASKS permission to be able to query the task list, and being suspicious of applications with that permission can help.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Non-Standard Port (T1571)?\nA.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\nB.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nC.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\nD.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Non-Standard Port (T1571)",
      "ddmc_optionA": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "ddmc_optionB": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmc_optionC": "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.",
      "ddmc_optionD": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Non-Standard Port (T1571)?\nA.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\nB.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nC.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\nD.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate External Defacement (T1491.002)?\nA.  Take and store data backups from end user systems and critical servers. Ensure backup and storage systems are hardened and kept separate from the corporate network to prevent compromise.\nB.  Perform regular software updates to mitigate exploitation risk.\nC.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nD.  Configure Active Directory to prevent use of certain techniques; use SID Filtering, etc.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "External Defacement (T1491.002)",
      "ddmc_optionA": "Take and store data backups from end user systems and critical servers. Ensure backup and storage systems are hardened and kept separate from the corporate network to prevent compromise.",
      "ddmc_optionB": "Perform regular software updates to mitigate exploitation risk.",
      "ddmc_optionC": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_optionD": "Configure Active Directory to prevent use of certain techniques; use SID Filtering, etc.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Take and store data backups from end user systems and critical servers. Ensure backup and storage systems are hardened and kept separate from the corporate network to prevent compromise.",
      "prompts": [],
      "instruction": "What is a method to mitigate External Defacement (T1491.002)?\nA.  Take and store data backups from end user systems and critical servers. Ensure backup and storage systems are hardened and kept separate from the corporate network to prevent compromise.\nB.  Perform regular software updates to mitigate exploitation risk.\nC.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nD.  Configure Active Directory to prevent use of certain techniques; use SID Filtering, etc.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Dylib Hijacking (T1574.004)?\nA.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nB.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\nC.  Set and enforce secure password policies for accounts.\nD.  Protect sensitive information with strong encryption.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Dylib Hijacking (T1574.004)",
      "ddmc_optionA": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "ddmc_optionB": "Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.",
      "ddmc_optionC": "Set and enforce secure password policies for accounts.",
      "ddmc_optionD": "Protect sensitive information with strong encryption.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "prompts": [],
      "instruction": "What is a method to mitigate Dylib Hijacking (T1574.004)?\nA.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nB.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\nC.  Set and enforce secure password policies for accounts.\nD.  Protect sensitive information with strong encryption.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1053.005 (Scheduled Task)?\nA.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nB.  The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.\nC.  A file created for the purposes of deceiving an adversary.\nD.  A Credential created for the purpose of deceiving an adversary.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1053.005 (Scheduled Task)",
      "ddmc_optionA": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmc_optionB": "The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.",
      "ddmc_optionC": "A file created for the purposes of deceiving an adversary.",
      "ddmc_optionD": "A Credential created for the purpose of deceiving an adversary.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.",
      "prompts": [],
      "instruction": "How can you mitigate T1053.005 (Scheduled Task)?\nA.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nB.  The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.\nC.  A file created for the purposes of deceiving an adversary.\nD.  A Credential created for the purpose of deceiving an adversary.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Multi-Stage Channels (T1104)?\nA.  Detecting any suspicious changes to files in a computer system.\nB.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nC.  Restricting network traffic originating from a private host or enclave destined towards untrusted networks.\nD.  Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Multi-Stage Channels (T1104)",
      "ddmc_optionA": "Detecting any suspicious changes to files in a computer system.",
      "ddmc_optionB": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_optionC": "Restricting network traffic originating from a private host or enclave destined towards untrusted networks.",
      "ddmc_optionD": "Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Restricting network traffic originating from a private host or enclave destined towards untrusted networks.",
      "prompts": [],
      "instruction": "How can you mitigate Multi-Stage Channels (T1104)?\nA.  Detecting any suspicious changes to files in a computer system.\nB.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nC.  Restricting network traffic originating from a private host or enclave destined towards untrusted networks.\nD.  Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate CWE-412 (Unrestricted Externally Accessible Lock)?\nA.  Pay close attention to complex conditionals that affect initialization, since some branches might not perform the initialization.\nB.  A true random number generator should be specified for cryptographic algorithms.\nC.  While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\nD.  Consider modifying your code to use non-blocking synchronization methods.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CWE-412 (Unrestricted Externally Accessible Lock)",
      "ddmc_optionA": "Pay close attention to complex conditionals that affect initialization, since some branches might not perform the initialization.",
      "ddmc_optionB": "A true random number generator should be specified for cryptographic algorithms.",
      "ddmc_optionC": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
      "ddmc_optionD": "Consider modifying your code to use non-blocking synchronization methods.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Consider modifying your code to use non-blocking synchronization methods.",
      "prompts": [],
      "instruction": "How can you mitigate CWE-412 (Unrestricted Externally Accessible Lock)?\nA.  Pay close attention to complex conditionals that affect initialization, since some branches might not perform the initialization.\nB.  A true random number generator should be specified for cryptographic algorithms.\nC.  While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\nD.  Consider modifying your code to use non-blocking synchronization methods.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Double Free (CWE-415)?\nA.  Choose a language that provides automatic memory management.\nB.  Only call matching memory management functions. Do not mix and match routines. For example, when you allocate a buffer with malloc(), dispose of the original pointer with free().\nC.  Use other functions that require explicit paths. Making use of any of the other readily available functions that require explicit paths is a safe way to avoid this problem. For example, system() in C does not require a full path since the shell can take care of finding the program using the PATH environment variable, while execl() and execv() require a full path.\nD.  Ensure that any possibly sensitive data specified in the requirements is verified with designers to ensure that it is either a calculated risk or mitigated elsewhere. Any information that is not necessary to the functionality should be removed in order to lower both the overhead and the possibility of security sensitive data being sent.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Double Free (CWE-415)",
      "ddmc_optionA": "Choose a language that provides automatic memory management.",
      "ddmc_optionB": "Only call matching memory management functions. Do not mix and match routines. For example, when you allocate a buffer with malloc(), dispose of the original pointer with free().",
      "ddmc_optionC": "Use other functions that require explicit paths. Making use of any of the other readily available functions that require explicit paths is a safe way to avoid this problem. For example, system() in C does not require a full path since the shell can take care of finding the program using the PATH environment variable, while execl() and execv() require a full path.",
      "ddmc_optionD": "Ensure that any possibly sensitive data specified in the requirements is verified with designers to ensure that it is either a calculated risk or mitigated elsewhere. Any information that is not necessary to the functionality should be removed in order to lower both the overhead and the possibility of security sensitive data being sent.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Choose a language that provides automatic memory management.",
      "prompts": [],
      "instruction": "How can you mitigate Double Free (CWE-415)?\nA.  Choose a language that provides automatic memory management.\nB.  Only call matching memory management functions. Do not mix and match routines. For example, when you allocate a buffer with malloc(), dispose of the original pointer with free().\nC.  Use other functions that require explicit paths. Making use of any of the other readily available functions that require explicit paths is a safe way to avoid this problem. For example, system() in C does not require a full path since the shell can take care of finding the program using the PATH environment variable, while execl() and execv() require a full path.\nD.  Ensure that any possibly sensitive data specified in the requirements is verified with designers to ensure that it is either a calculated risk or mitigated elsewhere. Any information that is not necessary to the functionality should be removed in order to lower both the overhead and the possibility of security sensitive data being sent.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Control Panel (T1218.002)?\nA.  Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.\nB.  Employing a pattern matching rule language to analyze the content of files.\nC.  Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.\nD.  Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Control Panel (T1218.002)",
      "ddmc_optionA": "Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.",
      "ddmc_optionB": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_optionC": "Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.",
      "ddmc_optionD": "Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.",
      "prompts": [],
      "instruction": "What is a method to mitigate Control Panel (T1218.002)?\nA.  Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.\nB.  Employing a pattern matching rule language to analyze the content of files.\nC.  Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.\nD.  Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Rogue Domain Controller (T1207)?\nA.  Restricting network traffic originating from any location.\nB.  Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.\nC.  The file removal technique deletes malicious artifacts or programs from a computer system.\nD.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Rogue Domain Controller (T1207)",
      "ddmc_optionA": "Restricting network traffic originating from any location.",
      "ddmc_optionB": "Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.",
      "ddmc_optionC": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "ddmc_optionD": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Restricting network traffic originating from any location.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Rogue Domain Controller (T1207)?\nA.  Restricting network traffic originating from any location.\nB.  Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.\nC.  The file removal technique deletes malicious artifacts or programs from a computer system.\nD.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate CWE-339 (Small Seed Space in PRNG)?\nA.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nB.  The fabric firewall should apply the same protections as the original region to the mirrored regions.\nC.  During development, do not mark it as safe for scripting.\nD.  Adequate consideration should be put in to the user interface in order to notify users previous to the key's expiration, to explain the importance of new key generation and to walk users through the process as painlessly as possible.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CWE-339 (Small Seed Space in PRNG)",
      "ddmc_optionA": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmc_optionB": "The fabric firewall should apply the same protections as the original region to the mirrored regions.",
      "ddmc_optionC": "During development, do not mark it as safe for scripting.",
      "ddmc_optionD": "Adequate consideration should be put in to the user interface in order to notify users previous to the key's expiration, to explain the importance of new key generation and to walk users through the process as painlessly as possible.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Adequate consideration should be put in to the user interface in order to notify users previous to the key's expiration, to explain the importance of new key generation and to walk users through the process as painlessly as possible.",
      "prompts": [],
      "instruction": "How can you mitigate CWE-339 (Small Seed Space in PRNG)?\nA.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nB.  The fabric firewall should apply the same protections as the original region to the mirrored regions.\nC.  During development, do not mark it as safe for scripting.\nD.  Adequate consideration should be put in to the user interface in order to notify users previous to the key's expiration, to explain the importance of new key generation and to walk users through the process as painlessly as possible.\n\nPlease select the correct answer."
    }
  }
]