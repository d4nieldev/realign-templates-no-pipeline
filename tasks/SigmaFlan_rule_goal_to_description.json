[
  {
    "instruction": "Explain how should I detect the following: Identifies when an EKS cluster is created or deleted.",
    "context": "",
    "output": "In order to identify when an EKS cluster is created or deleted, you should: Monitor AWS CloudTrail logs for events related to the Amazon Elastic Kubernetes Service (EKS). Specifically, watch for the event sources associated with EKS (eks.amazonaws.com) and the events that indicate the creation or deletion of a cluster, namely \"CreateCluster\" and \"DeleteCluster\". It's crucial to be aware that while detecting these events is essential for security, there are legitimate instances where system administrators may create or delete EKS clusters as part of their regular duties. Therefore, it's recommended to corroborate the actions with the user's identity, user agent, and/or hostname to verify that these operations are expected within your environment. Unfamiliar users performing these operations should be scrutinized more closely. Known behaviors that lead to frequent benign triggers of this detection logic should be documented and possibly exempted to minimize the rate of false positives. The sensitivity of this detection is considered low, indicating that while it's important for comprehensive monitoring, it might not always signify a security issue on its own.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Identifies when an EKS cluster is created or deleted.",
      "answer": "In order to identify when an EKS cluster is created or deleted, you should: Monitor AWS CloudTrail logs for events related to the Amazon Elastic Kubernetes Service (EKS). Specifically, watch for the event sources associated with EKS (eks.amazonaws.com) and the events that indicate the creation or deletion of a cluster, namely \"CreateCluster\" and \"DeleteCluster\". It's crucial to be aware that while detecting these events is essential for security, there are legitimate instances where system administrators may create or delete EKS clusters as part of their regular duties. Therefore, it's recommended to corroborate the actions with the user's identity, user agent, and/or hostname to verify that these operations are expected within your environment. Unfamiliar users performing these operations should be scrutinized more closely. Known behaviors that lead to frequent benign triggers of this detection logic should be documented and possibly exempted to minimize the rate of false positives. The sensitivity of this detection is considered low, indicating that while it's important for comprehensive monitoring, it might not always signify a security issue on its own."
    }
  },
  {
    "instruction": "How can I detect: tampering with attachment manager settings policies associations to lower the default file type risks (See reference for more information)",
    "context": "",
    "output": "In order to detect tampering with attachment manager settings policies associations to lower the default file type risks, you should focus on monitoring Windows registry settings, specifically looking for changes within the Registry. The key elements to watch include the event where the value is being set (with the EventType of SetValue) within paths that contain '\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\Associations\\'. There are two main selections to pay attention to for detection:\n\n1. Changes made to the '\\DefaultFileTypeRisk' setting, especially where the details indicate a DWORD value of '0x00006152'. This modification signifies a potential effort to alter the default risk level associated with certain types of file extensions.\n\n2. Adjustments to the '\\LowRiskFileTypes' setting, where an array of file extensions such as '.zip;', '.rar;', '.exe;', '.bat;', '.com;', '.cmd;', '.reg;', '.msi;', '.htm;', and '.html;' are appended. Such alterations could be indicative of an attempt to classify traditionally risky file types as low risk, thereby bypassing security controls designed to scrutinize or block these types of files based on their inherent risk.\n\nGiven the nature of these changes and their implications for security, it's concluded that the likelihood of these modifications being benign or accidental is quite low, hence being categorized at a high level of concern. Monitoring for such changes is critical in identifying attempts to compromise security by manipulating settings that govern how attachments and files are treated based on their extension types. The detection of such activities is associated with MITRE ATT&CK tactics and techniques that include Persistence, Privilege Escalation, and Defense Evasion, as these modifications to the attachment manager settings could be leveraged to maintain persistent access, elevate privileges, or evade defenses respectively.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "tampering with attachment manager settings policies associations to lower the default file type risks (See reference for more information)",
      "answer": "In order to detect tampering with attachment manager settings policies associations to lower the default file type risks, you should focus on monitoring Windows registry settings, specifically looking for changes within the Registry. The key elements to watch include the event where the value is being set (with the EventType of SetValue) within paths that contain '\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\Associations\\'. There are two main selections to pay attention to for detection:\n\n1. Changes made to the '\\DefaultFileTypeRisk' setting, especially where the details indicate a DWORD value of '0x00006152'. This modification signifies a potential effort to alter the default risk level associated with certain types of file extensions.\n\n2. Adjustments to the '\\LowRiskFileTypes' setting, where an array of file extensions such as '.zip;', '.rar;', '.exe;', '.bat;', '.com;', '.cmd;', '.reg;', '.msi;', '.htm;', and '.html;' are appended. Such alterations could be indicative of an attempt to classify traditionally risky file types as low risk, thereby bypassing security controls designed to scrutinize or block these types of files based on their inherent risk.\n\nGiven the nature of these changes and their implications for security, it's concluded that the likelihood of these modifications being benign or accidental is quite low, hence being categorized at a high level of concern. Monitoring for such changes is critical in identifying attempts to compromise security by manipulating settings that govern how attachments and files are treated based on their extension types. The detection of such activities is associated with MITRE ATT&CK tactics and techniques that include Persistence, Privilege Escalation, and Defense Evasion, as these modifications to the attachment manager settings could be leveraged to maintain persistent access, elevate privileges, or evade defenses respectively."
    }
  },
  {
    "instruction": "Can you explain how to detect: rundll32 loading a renamed comsvcs.dll to dump process memory",
    "context": "",
    "output": "Certainly!\n\nIn order to detect rundll32 loading a renamed comsvcs.dll to dump process memory, you should monitor Windows image load events for the loading of 'rundll32.exe'. Specifically, look for events where 'rundll32.exe' is being loaded with specific hash values that match known versions of Windows\u2014including Windows 11 21H2 x64, Windows 10 1607, Windows 10 1809, Windows 10 2004 x64, and Windows 10 2004 x86. It's critical to identify these specific instances because they indicate the execution of rundll32 that could be employed to dump process memory, a technique commonly utilized in malicious activities. Additionally, you must ensure that these detections are not associated with the legitimate loading of 'comsvcs.dll', as this DLL can be loaded by 'rundll32.exe' in normal, benign circumstances. To reduce false positives and focus on potential malicious activity, confirm that the 'ImageLoaded' does not end with '\\comsvcs.dll'. Given these parameters, this approach is deemed highly reliable in identifying suspicious activities related to memory dumping via rundll32 without catching legitimate system behavior.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "rundll32 loading a renamed comsvcs.dll to dump process memory",
      "answer": "In order to detect rundll32 loading a renamed comsvcs.dll to dump process memory, you should monitor Windows image load events for the loading of 'rundll32.exe'. Specifically, look for events where 'rundll32.exe' is being loaded with specific hash values that match known versions of Windows\u2014including Windows 11 21H2 x64, Windows 10 1607, Windows 10 1809, Windows 10 2004 x64, and Windows 10 2004 x86. It's critical to identify these specific instances because they indicate the execution of rundll32 that could be employed to dump process memory, a technique commonly utilized in malicious activities. Additionally, you must ensure that these detections are not associated with the legitimate loading of 'comsvcs.dll', as this DLL can be loaded by 'rundll32.exe' in normal, benign circumstances. To reduce false positives and focus on potential malicious activity, confirm that the 'ImageLoaded' does not end with '\\comsvcs.dll'. Given these parameters, this approach is deemed highly reliable in identifying suspicious activities related to memory dumping via rundll32 without catching legitimate system behavior."
    }
  },
  {
    "instruction": "Can you explain how to detect: AzureHound (A BloodHound data collector for Microsoft Azure) activity via the default User-Agent that is used during its operation after successful authentication.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect AzureHound (A BloodHound data collector for Microsoft Azure) activity via the default User-Agent that is used during its operation after successful authentication, you should: Look for log entries in Azure's signinlogs service that signify successful authentication attempts where the User-Agent string contains 'azurehound'. This detection mechanism is focused on the Azure platform, specifically monitoring for signs of AzureHound usage post-authentication, which is indicated by a ResultType of 0, symbolizing a successful sign-in event. Such activity is highly suspicious as AzureHound is a reconnaissance tool used to gather information on Azure and Active Directory environments, making it a potential indicator of adversarial behavior within the network. This specific behavior falls under the category of reconnaissance activities, associated with tactics aiming to collect information useful for planning subsequent attacks on the network. Given the high-risk nature of this detection, there should be minimal to no known benign triggers for this pattern of activity, marking any hits as high priority.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "AzureHound (A BloodHound data collector for Microsoft Azure) activity via the default User-Agent that is used during its operation after successful authentication.",
      "answer": "In order to detect AzureHound (A BloodHound data collector for Microsoft Azure) activity via the default User-Agent that is used during its operation after successful authentication, you should: Look for log entries in Azure's signinlogs service that signify successful authentication attempts where the User-Agent string contains 'azurehound'. This detection mechanism is focused on the Azure platform, specifically monitoring for signs of AzureHound usage post-authentication, which is indicated by a ResultType of 0, symbolizing a successful sign-in event. Such activity is highly suspicious as AzureHound is a reconnaissance tool used to gather information on Azure and Active Directory environments, making it a potential indicator of adversarial behavior within the network. This specific behavior falls under the category of reconnaissance activities, associated with tactics aiming to collect information useful for planning subsequent attacks on the network. Given the high-risk nature of this detection, there should be minimal to no known benign triggers for this pattern of activity, marking any hits as high priority."
    }
  },
  {
    "instruction": "Explain how should I detect the following: Executes arbitrary PowerShell code using SyncAppvPublishingServer.vbs",
    "context": "",
    "output": "In order to execute arbitrary PowerShell code using SyncAppvPublishingServer.vbs, you should: focus on monitoring the creation of processes within Windows environments. Specifically, look for instances where the command line contains references to '\\SyncAppvPublishingServer.vbs' combined with the use of a semi-colon, indicating the possible execution of additional arbitrary code. This activity can be indicative of attempts to execute unauthorized PowerShell commands, potentially for malicious purposes. It is essential to keep track of the computer name, user, command line, and parent command line used in these situations to aid in identifying and mitigating such threats. Be aware that while this method of detection is useful, there may be instances where it does not apply (unknown false positives), so it's important to verify the context of detections to avoid misinterpretation.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Executes arbitrary PowerShell code using SyncAppvPublishingServer.vbs",
      "answer": "In order to execute arbitrary PowerShell code using SyncAppvPublishingServer.vbs, you should: focus on monitoring the creation of processes within Windows environments. Specifically, look for instances where the command line contains references to '\\SyncAppvPublishingServer.vbs' combined with the use of a semi-colon, indicating the possible execution of additional arbitrary code. This activity can be indicative of attempts to execute unauthorized PowerShell commands, potentially for malicious purposes. It is essential to keep track of the computer name, user, command line, and parent command line used in these situations to aid in identifying and mitigating such threats. Be aware that while this method of detection is useful, there may be instances where it does not apply (unknown false positives), so it's important to verify the context of detections to avoid misinterpretation."
    }
  },
  {
    "instruction": "Please help me detect the following: ForceV1 asks for information directly from the kernel space. Conhost connects to the console application. High IntegrityLevel means the process is running with elevated privileges, such as an Administrator context.",
    "context": "",
    "output": "Sure!\nIn order to detect when ForceV1 asks for information directly from the kernel space, and Conhost connects to the console application, with the implication that the process is running with elevated privileges such as in an Administrator context, you should: Monitor Windows process creation logs for any instance where a process is created with a High Integrity Level, and its command line includes all of the following elements: 'conhost.exe', '0xffffffff', and '-ForceV1'. These elements indicate an operation that directly interacts with kernel space, which could be suspect if not part of standard administrative tasks. However, it's essential to note that detecting this activity can result in very likely false positives, especially in cases where cmd.exe is launched with administrative privileges. This detection is mainly for informational purposes to highlight potential areas of concern rather than definitive malicious activity without further context.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "ForceV1 asks for information directly from the kernel space. Conhost connects to the console application. High IntegrityLevel means the process is running with elevated privileges, such as an Administrator context.",
      "answer": "In order to detect when ForceV1 asks for information directly from the kernel space, and Conhost connects to the console application, with the implication that the process is running with elevated privileges such as in an Administrator context, you should: Monitor Windows process creation logs for any instance where a process is created with a High Integrity Level, and its command line includes all of the following elements: 'conhost.exe', '0xffffffff', and '-ForceV1'. These elements indicate an operation that directly interacts with kernel space, which could be suspect if not part of standard administrative tasks. However, it's essential to note that detecting this activity can result in very likely false positives, especially in cases where cmd.exe is launched with administrative privileges. This detection is mainly for informational purposes to highlight potential areas of concern rather than definitive malicious activity without further context."
    }
  },
  {
    "instruction": "Explain how should I detect the following: Microsoft Cloud App Security reported when a user uploads files to the cloud that might be infected with ransomware.",
    "context": "",
    "output": "In order to detect when a Microsoft Cloud App Security reported when a user uploads files to the cloud that might be infected with ransomware, you should: Monitor logs from the threat management service, specifically targeting the Microsoft 365 product. Focus on logs generated by the SecurityComplianceCenter, and look for events named 'Potential ransomware activity' where the status is reported as success. This approach aims to capture instances where the system identifies activities that resemble the upload of files possibly carrying ransomware into the cloud environment. It is important to consider that some detections might be false positives, as these activities could occur under legitimate scenarios not intended to be harmful, and the detection confidence is considered medium. This monitoring closely aligns with understanding ransomware tactics and spotting potential breaches or threats in cloud security compliance efforts.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Microsoft Cloud App Security reported when a user uploads files to the cloud that might be infected with ransomware.",
      "answer": "In order to detect when a Microsoft Cloud App Security reported when a user uploads files to the cloud that might be infected with ransomware, you should: Monitor logs from the threat management service, specifically targeting the Microsoft 365 product. Focus on logs generated by the SecurityComplianceCenter, and look for events named 'Potential ransomware activity' where the status is reported as success. This approach aims to capture instances where the system identifies activities that resemble the upload of files possibly carrying ransomware into the cloud environment. It is important to consider that some detections might be false positives, as these activities could occur under legitimate scenarios not intended to be harmful, and the detection confidence is considered medium. This monitoring closely aligns with understanding ransomware tactics and spotting potential breaches or threats in cloud security compliance efforts."
    }
  },
  {
    "instruction": "Can you explain how to detect: Remote Utilities Host service installation on the target system.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect Remote Utilities Host service installation on the target system, you should: \n\nMonitor Windows system logs for the occurrence of event ID 7045, which is an indication of a new service installation managed by the Service Control Manager. Specifically, look for the installation of a service named \"Remote Utilities - Host\". This can be identified by the presence of the executable path containing \"\\rutserv.exe\" in conjunction with the \"-service\" command line argument, indicating it runs as a user mode service and is configured to auto-start. The account associated with this service typically runs under the \"LocalSystem\" account. It's essential to be vigilant for such installations as they can serve as indicators of potential unauthorized remote access tools being deployed on the system. However, it's also important to consider that there may be legitimate uses of the tool, so verification is recommended to differentiate between benign and malicious intents. The detection level is set to medium, emphasizing the need for further investigation upon alerts.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Remote Utilities Host service installation on the target system.",
      "answer": "In order to detect Remote Utilities Host service installation on the target system, you should: \n\nMonitor Windows system logs for the occurrence of event ID 7045, which is an indication of a new service installation managed by the Service Control Manager. Specifically, look for the installation of a service named \"Remote Utilities - Host\". This can be identified by the presence of the executable path containing \"\\rutserv.exe\" in conjunction with the \"-service\" command line argument, indicating it runs as a user mode service and is configured to auto-start. The account associated with this service typically runs under the \"LocalSystem\" account. It's essential to be vigilant for such installations as they can serve as indicators of potential unauthorized remote access tools being deployed on the system. However, it's also important to consider that there may be legitimate uses of the tool, so verification is recommended to differentiate between benign and malicious intents. The detection level is set to medium, emphasizing the need for further investigation upon alerts."
    }
  },
  {
    "instruction": "How to detect: PDQDeploy service installation which indicates that PDQDeploy was installed on the machines.\nPDQDeploy can be abused by attackers to remotely install packages or execute commands on target machines\n",
    "context": "",
    "output": "In order to detect a PDQDeploy service installation which indicates that PDQDeploy was installed on the machines, and considering that PDQDeploy can be abused by attackers to remotely install packages or execute commands on target machines, you should focus on monitoring Windows system service logs for specific events that signal the installation of a PDQDeploy service. You should look for logs generated by the Service Control Manager with an Event ID of 7045, which indicates a new service was installed. Specifically, filter for events where the 'Provider_Name' is listed as 'Service Control Manager' and focus on entries showing the installation or update of services named 'PDQDeploy' or 'PDQ Deploy', or any service with an 'ImagePath' containing 'PDQDeployService.exe'. This approach helps identify unauthorized or suspicious deployments of PDQDeploy, which could be leveraged by an attacker for malicious purposes such as remote package installation or command execution. Be aware that there might be false positives in cases where PDQDeploy is legitimately used within the organization, thus requiring a medium level of attention to contextual information surrounding each detection.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "PDQDeploy service installation which indicates that PDQDeploy was installed on the machines.\nPDQDeploy can be abused by attackers to remotely install packages or execute commands on target machines\n",
      "answer": "In order to detect a PDQDeploy service installation which indicates that PDQDeploy was installed on the machines, and considering that PDQDeploy can be abused by attackers to remotely install packages or execute commands on target machines, you should focus on monitoring Windows system service logs for specific events that signal the installation of a PDQDeploy service. You should look for logs generated by the Service Control Manager with an Event ID of 7045, which indicates a new service was installed. Specifically, filter for events where the 'Provider_Name' is listed as 'Service Control Manager' and focus on entries showing the installation or update of services named 'PDQDeploy' or 'PDQ Deploy', or any service with an 'ImagePath' containing 'PDQDeployService.exe'. This approach helps identify unauthorized or suspicious deployments of PDQDeploy, which could be leveraged by an attacker for malicious purposes such as remote package installation or command execution. Be aware that there might be false positives in cases where PDQDeploy is legitimately used within the organization, thus requiring a medium level of attention to contextual information surrounding each detection."
    }
  },
  {
    "instruction": "How to detect: Clear command history in linux which is used for defense evasion.",
    "context": "",
    "output": "In order to clear command history in Linux which is used for defense evasion, you should: monitor for specific activities on Linux systems that indicate attempts to clear or otherwise manipulate the bash command history in an effort to evade detection or obscure their actions. Key activities to watch for include the use of commands to remove bash history files (e.g., 'rm *bash_history'), empty the contents of these files (e.g., 'echo \"\" > *bash_history', 'cat /dev/null > *bash_history', 'cat /dev/zero > *bash_history'), create symbolic links of bash history files to /dev/null or /dev/zero (e.g., 'ln -sf /dev/null *bash_history', 'ln -sf /dev/zero *bash_history'), resetting file size to 0 (e.g., 'truncate -s0 *bash_history'), setting the bash history file size to 0 (e.g., 'export HISTFILESIZE=0'), clearing (e.g., 'history -c'), writing current session commands to the bash history file ('history -w'), using shredding to securely delete bash history files ('shred *bash_history'), running a command named 'empty_bash_history', or making bash history files immutable ('chattr +i *bash_history'). These activities are linked to the tactic of defense evasion, as attackers clearing command history are attempting to remove traces of their activities from compromised systems. Monitoring for such activities provides insight into suspicious behaviors indicative of an adversary trying to hide their tracks.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Clear command history in linux which is used for defense evasion.",
      "answer": "In order to clear command history in Linux which is used for defense evasion, you should: monitor for specific activities on Linux systems that indicate attempts to clear or otherwise manipulate the bash command history in an effort to evade detection or obscure their actions. Key activities to watch for include the use of commands to remove bash history files (e.g., 'rm *bash_history'), empty the contents of these files (e.g., 'echo \"\" > *bash_history', 'cat /dev/null > *bash_history', 'cat /dev/zero > *bash_history'), create symbolic links of bash history files to /dev/null or /dev/zero (e.g., 'ln -sf /dev/null *bash_history', 'ln -sf /dev/zero *bash_history'), resetting file size to 0 (e.g., 'truncate -s0 *bash_history'), setting the bash history file size to 0 (e.g., 'export HISTFILESIZE=0'), clearing (e.g., 'history -c'), writing current session commands to the bash history file ('history -w'), using shredding to securely delete bash history files ('shred *bash_history'), running a command named 'empty_bash_history', or making bash history files immutable ('chattr +i *bash_history'). These activities are linked to the tactic of defense evasion, as attackers clearing command history are attempting to remove traces of their activities from compromised systems. Monitoring for such activities provides insight into suspicious behaviors indicative of an adversary trying to hide their tracks."
    }
  },
  {
    "instruction": "How to detect: usage of the copy builtin cmd command to copy files with the \".dmp\"/\".dump\" extension from a remote share",
    "context": "",
    "output": "In order to detect usage of the copy builtin cmd command to copy files with the \".dmp\"/\".dump\" extension from a remote share, you should: Focus on monitoring process creation logs in Windows. Specifically, look for instances where 'cmd.exe' or its original filename 'Cmd.Exe' is executed. Both conditions must be met: 1) The command line contains the keyword 'copy ' followed by a double backslash '\\\\', indicating an operation to copy files from a network location. 2) The command must also include either '.dmp' or '.dump' in it, suggesting the types of files being copied are memory dump files. These indicators, when present together, suggest that an action is being taken to copy potentially sensitive or diagnostic information from a remote share, possibly for malicious reasons. Due to the nature of the data being targeted and the method of acquisition, this activity is flagged at a high level of concern. However, there might be instances where such actions are legitimate and thus could be considered false positives, although such cases are unknown. The tactics associated with this activity include the retrieval of information and potentially the exfiltration of data.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of the copy builtin cmd command to copy files with the \".dmp\"/\".dump\" extension from a remote share",
      "answer": "In order to detect usage of the copy builtin cmd command to copy files with the \".dmp\"/\".dump\" extension from a remote share, you should: Focus on monitoring process creation logs in Windows. Specifically, look for instances where 'cmd.exe' or its original filename 'Cmd.Exe' is executed. Both conditions must be met: 1) The command line contains the keyword 'copy ' followed by a double backslash '\\\\', indicating an operation to copy files from a network location. 2) The command must also include either '.dmp' or '.dump' in it, suggesting the types of files being copied are memory dump files. These indicators, when present together, suggest that an action is being taken to copy potentially sensitive or diagnostic information from a remote share, possibly for malicious reasons. Due to the nature of the data being targeted and the method of acquisition, this activity is flagged at a high level of concern. However, there might be instances where such actions are legitimate and thus could be considered false positives, although such cases are unknown. The tactics associated with this activity include the retrieval of information and potentially the exfiltration of data."
    }
  },
  {
    "instruction": "Please help me detect the following: appending of zip file to image",
    "context": "",
    "output": "Sure!\nIn order to detect appending of zip file to image, you should monitor auditd logs on Linux systems for execution events (EXECVE) where the \"cat\" command is utilized. Specifically, look for instances where the command involves an image file (with extensions '.jpg' or '.png') followed by a '.zip' file, indicating an attempt to append a ZIP archive to an image file. This activity could be an indicator of malicious behavior, such as hiding a payload within an image file for stealthy operations. However, be aware that there may be benign reasons for this behavior, so the detection level is considered low. The related MITRE ATT&CK tactics and techniques would focus on techniques that involve data obfuscation or concealing payloads within files commonly perceived as benign.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "appending of zip file to image",
      "answer": "In order to detect appending of zip file to image, you should monitor auditd logs on Linux systems for execution events (EXECVE) where the \"cat\" command is utilized. Specifically, look for instances where the command involves an image file (with extensions '.jpg' or '.png') followed by a '.zip' file, indicating an attempt to append a ZIP archive to an image file. This activity could be an indicator of malicious behavior, such as hiding a payload within an image file for stealthy operations. However, be aware that there may be benign reasons for this behavior, so the detection level is considered low. The related MITRE ATT&CK tactics and techniques would focus on techniques that involve data obfuscation or concealing payloads within files commonly perceived as benign."
    }
  },
  {
    "instruction": "How to detect: execution of perl using the \"-e\"/\"-E\" flags. This is could be used as a way to launch a reverse shell or execute live perl code.",
    "context": "",
    "output": "In order to detect execution of perl using the \"-e\"/\"-E\" flags, which could be used as a way to launch a reverse shell or execute live perl code, you should: monitor for the creation of processes on Windows systems, specifically looking for the execution of perl. This involves checking for processes where the image name ends with '\\perl.exe' or the original file name is identified exactly as 'perl.exe', which also covers variations like 'perlX.XX.exe'. Additionally, it's important to scrutinize the command line arguments for any instances containing ' -e', as this flag is commonly used to execute code directly from the command line. If both conditions regarding the image name and command line arguments are met, it likely indicates a potential security threat. Despite this, be aware that there are scenarios where this detection might lead to false positives, though those instances are not clearly defined. The severity level of this rule is considered medium, emphasizing the need for prompt investigation into alerts generated by these conditions.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of perl using the \"-e\"/\"-E\" flags. This is could be used as a way to launch a reverse shell or execute live perl code.",
      "answer": "In order to detect execution of perl using the \"-e\"/\"-E\" flags, which could be used as a way to launch a reverse shell or execute live perl code, you should: monitor for the creation of processes on Windows systems, specifically looking for the execution of perl. This involves checking for processes where the image name ends with '\\perl.exe' or the original file name is identified exactly as 'perl.exe', which also covers variations like 'perlX.XX.exe'. Additionally, it's important to scrutinize the command line arguments for any instances containing ' -e', as this flag is commonly used to execute code directly from the command line. If both conditions regarding the image name and command line arguments are met, it likely indicates a potential security threat. Despite this, be aware that there are scenarios where this detection might lead to false positives, though those instances are not clearly defined. The severity level of this rule is considered medium, emphasizing the need for prompt investigation into alerts generated by these conditions."
    }
  },
  {
    "instruction": "How can I detect: usage of \"hh.exe\" to execute \".chm\" files.",
    "context": "",
    "output": "In order to detect the usage of \"hh.exe\" to execute \".chm\" files, you should: look for process creation events within Windows systems where the originating file is identified as \"HH.exe\" either by its original filename or where the executing image ends with \"\\hh.exe\". Additionally, pay attention to command line arguments that contain the \".chm\" file extension. Both criteria - associated file and command line argument - need to be met to create an alert. Be aware that there could be legitimate uses of \".chm\" files leading to possible false positives. This detection is set at a medium level of importance.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of \"hh.exe\" to execute \".chm\" files.",
      "answer": "In order to detect the usage of \"hh.exe\" to execute \".chm\" files, you should: look for process creation events within Windows systems where the originating file is identified as \"HH.exe\" either by its original filename or where the executing image ends with \"\\hh.exe\". Additionally, pay attention to command line arguments that contain the \".chm\" file extension. Both criteria - associated file and command line argument - need to be met to create an alert. Be aware that there could be legitimate uses of \".chm\" files leading to possible false positives. This detection is set at a medium level of importance."
    }
  },
  {
    "instruction": "Explain how should I detect the following: calls to cmdlets inside of PowerShell scripts that are used to export certificates from the local certificate store. Threat actors were seen abusing this to steal private keys from compromised machines.",
    "context": "",
    "output": "In order to detect calls to cmdlets inside of PowerShell scripts that are used to export certificates from the local certificate store, which threat actors were seen abusing this to steal private keys from compromised machines, you should: Monitor Windows PowerShell script logs, specifically looking for any script activity that involves the use of the cmdlets 'Export-PfxCertificate' or 'Export-Certificate'. This requires that Script Block Logging is enabled on the system to capture the relevant script execution details. It's important to note that there could be legitimate uses of these cmdlets by administrators for exporting certificates; therefore, the detection strategy should allow for an optional filter to exclude cases where the export is part of a module export, identifiable when 'CmdletsToExport = @(' is found in the script text. This should form part of a balanced approach to identifying potentially malicious activity while minimizing false positives, given the detection has been set at a medium level of confidence.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "calls to cmdlets inside of PowerShell scripts that are used to export certificates from the local certificate store. Threat actors were seen abusing this to steal private keys from compromised machines.",
      "answer": "In order to detect calls to cmdlets inside of PowerShell scripts that are used to export certificates from the local certificate store, which threat actors were seen abusing this to steal private keys from compromised machines, you should: Monitor Windows PowerShell script logs, specifically looking for any script activity that involves the use of the cmdlets 'Export-PfxCertificate' or 'Export-Certificate'. This requires that Script Block Logging is enabled on the system to capture the relevant script execution details. It's important to note that there could be legitimate uses of these cmdlets by administrators for exporting certificates; therefore, the detection strategy should allow for an optional filter to exclude cases where the export is part of a module export, identifiable when 'CmdletsToExport = @(' is found in the script text. This should form part of a balanced approach to identifying potentially malicious activity while minimizing false positives, given the detection has been set at a medium level of confidence."
    }
  },
  {
    "instruction": "Explain how should I detect the following: suspicious commandline flags used by PsExec and PAExec to escalate a command line to LOCAL_SYSTEM rights",
    "context": "",
    "output": "In order to detect suspicious commandline flags used by PsExec and PAExec to escalate a command line to LOCAL_SYSTEM rights, you should monitor process creation events on Windows systems for specific command line patterns. These patterns focus on the use of command-line utilities such as PsExec and PAExec, which are often utilized by administrators but can also be abused by attackers to gain elevated privileges. The detection criteria include looking for command line arguments that indicate an attempt to run commands with LOCAL_SYSTEM privileges, which is a high-level privilege on Windows.\n\nSuch command line arguments often contain switches like \"-s\", \"/s\", \"-i\", \"/i\", or combinations thereof, followed by a command shell or scripting interpreter like \"cmd\", \"pwsh\" (PowerShell 7), or \"powershell\" (PowerShell 5). Variations in the syntax, such as changing \"-\" to \"/\", mixing the order of the switches, or the inclusion of the \"accepteula\" parameter typical for PsExec or PAExec usage, are also considered indicators of suspicious activity.\n\nBe aware that there are legitimate scenarios where administrators might use these tools for maintenance or debugging purposes, such as with Microsoft Intune issues. However, seeing these command-line flags in conjunction with the named utilities should raise a high level of suspicion and warrants further investigation to rule out malicious intent.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious commandline flags used by PsExec and PAExec to escalate a command line to LOCAL_SYSTEM rights",
      "answer": "In order to detect suspicious commandline flags used by PsExec and PAExec to escalate a command line to LOCAL_SYSTEM rights, you should monitor process creation events on Windows systems for specific command line patterns. These patterns focus on the use of command-line utilities such as PsExec and PAExec, which are often utilized by administrators but can also be abused by attackers to gain elevated privileges. The detection criteria include looking for command line arguments that indicate an attempt to run commands with LOCAL_SYSTEM privileges, which is a high-level privilege on Windows.\n\nSuch command line arguments often contain switches like \"-s\", \"/s\", \"-i\", \"/i\", or combinations thereof, followed by a command shell or scripting interpreter like \"cmd\", \"pwsh\" (PowerShell 7), or \"powershell\" (PowerShell 5). Variations in the syntax, such as changing \"-\" to \"/\", mixing the order of the switches, or the inclusion of the \"accepteula\" parameter typical for PsExec or PAExec usage, are also considered indicators of suspicious activity.\n\nBe aware that there are legitimate scenarios where administrators might use these tools for maintenance or debugging purposes, such as with Microsoft Intune issues. However, seeing these command-line flags in conjunction with the named utilities should raise a high level of suspicion and warrants further investigation to rule out malicious intent."
    }
  },
  {
    "instruction": "How can I detect: Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network",
    "context": "",
    "output": "In order to detect adversaries using a non-application layer protocol for communication between a host and a Command and Control (C2) server or among infected hosts within a network, you should focus on identifying suspicious use of PowerShell, specifically commands related to \"powercat\" or the \"powercat.ps1\" script. These are indicators of PowerShell being used in ways that are typically associated with establishing non-standard protocols for communication, often for nefarious purposes like data exfiltration or remote control.\n\nThe process involves monitoring PowerShell command-line executions on Windows systems. Specifically, look out for instances where the command line includes \"powercat \" or the direct invocation of the \"powercat.ps1\" script. These are captured under the PowerShell classic start event logs. Since \"powercat\" can be used to open network connections or listen for incoming connections in a way that might bypass standard network monitoring, spotting it is crucial.\n\nIt's important to note that there might be legitimate uses of \"powercat\" in your environment, so unexpected detections should be investigated to distinguish between benign use cases and malicious activity. The alert level for this kind of detection is considered medium, indicating that while detections are significant, they require context to confirm malicious intent.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network",
      "answer": "In order to detect adversaries using a non-application layer protocol for communication between a host and a Command and Control (C2) server or among infected hosts within a network, you should focus on identifying suspicious use of PowerShell, specifically commands related to \"powercat\" or the \"powercat.ps1\" script. These are indicators of PowerShell being used in ways that are typically associated with establishing non-standard protocols for communication, often for nefarious purposes like data exfiltration or remote control.\n\nThe process involves monitoring PowerShell command-line executions on Windows systems. Specifically, look out for instances where the command line includes \"powercat \" or the direct invocation of the \"powercat.ps1\" script. These are captured under the PowerShell classic start event logs. Since \"powercat\" can be used to open network connections or listen for incoming connections in a way that might bypass standard network monitoring, spotting it is crucial.\n\nIt's important to note that there might be legitimate uses of \"powercat\" in your environment, so unexpected detections should be investigated to distinguish between benign use cases and malicious activity. The alert level for this kind of detection is considered medium, indicating that while detections are significant, they require context to confirm malicious intent."
    }
  },
  {
    "instruction": "How to detect: pattern of UAC Bypass using ICMLuaUtil Elevated COM interface",
    "context": "",
    "output": "In order to detect the pattern of UAC Bypass using ICMLuaUtil Elevated COM interface, you should: Look for the creation of processes on Windows where the parent process is 'dllhost.exe', and the ParentCommandLine includes specific Process IDs '/Processid:{3E5FC7F9-9A51-4367-9063-A120244FBEC7}' or '/Processid:{D2E7041B-2927-42FB-8E9F-7CE93B6DC937}'. However, it's important to ignore cases where the new process being created is 'WerFault.exe', whether identified by the process's image ending with '\\WerFault.exe' or by its original file name. This filtering helps in accurately identifying activities associated with UAC Bypass attempts using the ICMLuaUtil Elevated COM interface, minimizing the chances of detecting regular system activities as false positives. The significance of this detection is marked as high due to the potential security breach it represents.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "pattern of UAC Bypass using ICMLuaUtil Elevated COM interface",
      "answer": "In order to detect the pattern of UAC Bypass using ICMLuaUtil Elevated COM interface, you should: Look for the creation of processes on Windows where the parent process is 'dllhost.exe', and the ParentCommandLine includes specific Process IDs '/Processid:{3E5FC7F9-9A51-4367-9063-A120244FBEC7}' or '/Processid:{D2E7041B-2927-42FB-8E9F-7CE93B6DC937}'. However, it's important to ignore cases where the new process being created is 'WerFault.exe', whether identified by the process's image ending with '\\WerFault.exe' or by its original file name. This filtering helps in accurately identifying activities associated with UAC Bypass attempts using the ICMLuaUtil Elevated COM interface, minimizing the chances of detecting regular system activities as false positives. The significance of this detection is marked as high due to the potential security breach it represents."
    }
  },
  {
    "instruction": "Explain how should I detect the following: Detect usage of DLL \"coregen.exe\" (Microsoft CoreCLR Native Image Generator) binary to sideload arbitrary DLLs.",
    "context": "",
    "output": "In order to detect usage of DLL \"coregen.exe\" (Microsoft CoreCLR Native Image Generator) binary to sideload arbitrary DLLs, you should: monitor the loading of images within Windows systems, specifically looking for instances where the file name ends with '\\coregen.exe'. It's important to exclude any events where the loaded images originate from common and likely benign directories such as 'C:\\Windows\\System32\\', 'C:\\Windows\\SysWOW64\\', 'C:\\Program Files\\Microsoft Silverlight\\', and 'C:\\Program Files (x86)\\Microsoft Silverlight\\'. This approach helps in identifying potentially malicious activities involving \"coregen.exe\" being used outside of its regular operations, which could indicate an attempt to sideload DLLs in a harmful manner. The reliability of this detection process is considered medium, though there may be cases where legitimate activities trigger this rule, these instances are currently unknown.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Detect usage of DLL \"coregen.exe\" (Microsoft CoreCLR Native Image Generator) binary to sideload arbitrary DLLs.",
      "answer": "In order to detect usage of DLL \"coregen.exe\" (Microsoft CoreCLR Native Image Generator) binary to sideload arbitrary DLLs, you should: monitor the loading of images within Windows systems, specifically looking for instances where the file name ends with '\\coregen.exe'. It's important to exclude any events where the loaded images originate from common and likely benign directories such as 'C:\\Windows\\System32\\', 'C:\\Windows\\SysWOW64\\', 'C:\\Program Files\\Microsoft Silverlight\\', and 'C:\\Program Files (x86)\\Microsoft Silverlight\\'. This approach helps in identifying potentially malicious activities involving \"coregen.exe\" being used outside of its regular operations, which could indicate an attempt to sideload DLLs in a harmful manner. The reliability of this detection process is considered medium, though there may be cases where legitimate activities trigger this rule, these instances are currently unknown."
    }
  },
  {
    "instruction": "How can I detect: Detect use of Ilasm.exe to compile c# code into dll or exe.",
    "context": "",
    "output": "In order to detect the use of Ilasm.exe to compile C# code into dll or exe, you should: Monitor process creation logs on Windows systems for instances where the process image name ends with '\\ilasm.exe' or the original file name is identified as 'ilasm.exe'. This monitoring helps in identifying potential misuse of the Ilasm.exe utility, which is a legitimate tool used for compiling .NET Intermediate Language (IL) code into executable files or DLLs, but can be exploited for malicious purposes such as generating malware on an infected system. Since this behavior might not always signify a security threat, it is marked with a medium level of concern, and unknown false positives are acknowledged, emphasizing the need for context and further investigation upon detection.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Detect use of Ilasm.exe to compile c# code into dll or exe.",
      "answer": "In order to detect the use of Ilasm.exe to compile C# code into dll or exe, you should: Monitor process creation logs on Windows systems for instances where the process image name ends with '\\ilasm.exe' or the original file name is identified as 'ilasm.exe'. This monitoring helps in identifying potential misuse of the Ilasm.exe utility, which is a legitimate tool used for compiling .NET Intermediate Language (IL) code into executable files or DLLs, but can be exploited for malicious purposes such as generating malware on an infected system. Since this behavior might not always signify a security threat, it is marked with a medium level of concern, and unknown false positives are acknowledged, emphasizing the need for context and further investigation upon detection."
    }
  },
  {
    "instruction": "How can I detect: usage of the \"Set-Service\" powershell cmdlet to configure a new SecurityDescriptor that allows a service to be hidden from other utilities such as \"sc.exe\", \"Get-Service\"...etc. (Works only in powershell 7)",
    "context": "",
    "output": "In order to detect usage of the \"Set-Service\" PowerShell cmdlet to configure a new SecurityDescriptor that allows a service to be hidden from other utilities such as \"sc.exe\", \"Get-Service\"...etc. (Works only in PowerShell 7), you should: Monitor for process creation events on Windows systems, specifically focusing on the invocation of PowerShell 7 (identified by the 'pwsh.exe' executable or 'pwsh.dll' as the original filename). Pay particular attention to command lines that include the Set-Service cmdlet combined with parameters indicative of configuring a SecurityDescriptor to hide services. This involves looking for command lines that contain both 'Set-Service ' and 'DCLCWPDTSD' as part of the SDDL (Security Descriptor Definition Language) string, which suggests an attempt to adjust the service's visibility. Additionally, monitor for command lines that include flags '-SecurityDescriptorSddl ' or '-sd ', which are used to specify the SecurityDescriptor directly within the Set-Service cmdlet. All these factors combined indicate a potential security event. Be aware that there might be rare legitimate uses of these techniques, albeit they should be treated with high suspicion due to their potential for abuse in hiding malicious services from standard detection tools in Windows environments.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of the \"Set-Service\" powershell cmdlet to configure a new SecurityDescriptor that allows a service to be hidden from other utilities such as \"sc.exe\", \"Get-Service\"...etc. (Works only in powershell 7)",
      "answer": "In order to detect usage of the \"Set-Service\" PowerShell cmdlet to configure a new SecurityDescriptor that allows a service to be hidden from other utilities such as \"sc.exe\", \"Get-Service\"...etc. (Works only in PowerShell 7), you should: Monitor for process creation events on Windows systems, specifically focusing on the invocation of PowerShell 7 (identified by the 'pwsh.exe' executable or 'pwsh.dll' as the original filename). Pay particular attention to command lines that include the Set-Service cmdlet combined with parameters indicative of configuring a SecurityDescriptor to hide services. This involves looking for command lines that contain both 'Set-Service ' and 'DCLCWPDTSD' as part of the SDDL (Security Descriptor Definition Language) string, which suggests an attempt to adjust the service's visibility. Additionally, monitor for command lines that include flags '-SecurityDescriptorSddl ' or '-sd ', which are used to specify the SecurityDescriptor directly within the Set-Service cmdlet. All these factors combined indicate a potential security event. Be aware that there might be rare legitimate uses of these techniques, albeit they should be treated with high suspicion due to their potential for abuse in hiding malicious services from standard detection tools in Windows environments."
    }
  },
  {
    "instruction": "Can you explain how to detect: sdiagnhost.exe calling a suspicious child process (e.g. used in exploits for Follina / CVE-2022-30190)",
    "context": "",
    "output": "Certainly!\n\nIn order to detect sdiagnhost.exe calling a suspicious child process (e.g. used in exploits for Follina / CVE-2022-30190), you should focus on monitoring Windows process creation events for instances where the parent process \"sdiagnhost.exe\" initiates any of several known potentially malicious child processes. This includes observation for execution of processes such as `powershell.exe`, `pwsh.exe`, `cmd.exe`, `mshta.exe`, `cscript.exe`, `wscript.exe`, `taskkill.exe`, `regsvr32.exe`, `rundll32.exe`, and `calc.exe`. These child processes are frequently used by attackers as living-off-the-land binaries (LOLBins) to perform malicious activities while attempting to evade detection. Monitoring for these specific process relationships is crucial in identifying and mitigating attacks exploiting vulnerabilities like CVE-2022-30190, often characterized by the abuse of the `sdiagnhost.exe` process to execute malicious scripts or commands. Due to the legitimate use of these binaries in various administrative and operational tasks, it is possible to encounter false positives, though the level of threat associated with this detection pattern is high. By focusing on this behavior, potential malicious activity leveraging these techniques can be identified, providing an opportunity for early detection and response.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "sdiagnhost.exe calling a suspicious child process (e.g. used in exploits for Follina / CVE-2022-30190)",
      "answer": "In order to detect sdiagnhost.exe calling a suspicious child process (e.g. used in exploits for Follina / CVE-2022-30190), you should focus on monitoring Windows process creation events for instances where the parent process \"sdiagnhost.exe\" initiates any of several known potentially malicious child processes. This includes observation for execution of processes such as `powershell.exe`, `pwsh.exe`, `cmd.exe`, `mshta.exe`, `cscript.exe`, `wscript.exe`, `taskkill.exe`, `regsvr32.exe`, `rundll32.exe`, and `calc.exe`. These child processes are frequently used by attackers as living-off-the-land binaries (LOLBins) to perform malicious activities while attempting to evade detection. Monitoring for these specific process relationships is crucial in identifying and mitigating attacks exploiting vulnerabilities like CVE-2022-30190, often characterized by the abuse of the `sdiagnhost.exe` process to execute malicious scripts or commands. Due to the legitimate use of these binaries in various administrative and operational tasks, it is possible to encounter false positives, though the level of threat associated with this detection pattern is high. By focusing on this behavior, potential malicious activity leveraging these techniques can be identified, providing an opportunity for early detection and response."
    }
  },
  {
    "instruction": "Please help me detect the following: when multi-factor authentication (MFA) is disabled.",
    "context": "",
    "output": "Sure!\nIn order to detect when multi-factor authentication (MFA) is disabled, you should: Monitor logs from Google Workspace, specifically the admin service logs. Look for events reported by the \"admin.googleapis.com\" service that indicate either the enforcement or allowance of strong authentication has been triggered. The events of interest are when \"ENFORCE_STRONG_AUTHENTICATION\" or \"ALLOW_STRONG_AUTHENTICATION\" actions are taken. Further scrutiny is required if the value associated with these actions is set to 'false', indicating that multi-factor authentication is being weakened or disabled. It's important to be aware that there may be legitimate reasons for these changes, such as actions taken by a system administrator, which could result in false positives. The severity of these incidents is considered medium.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "when multi-factor authentication (MFA) is disabled.",
      "answer": "In order to detect when multi-factor authentication (MFA) is disabled, you should: Monitor logs from Google Workspace, specifically the admin service logs. Look for events reported by the \"admin.googleapis.com\" service that indicate either the enforcement or allowance of strong authentication has been triggered. The events of interest are when \"ENFORCE_STRONG_AUTHENTICATION\" or \"ALLOW_STRONG_AUTHENTICATION\" actions are taken. Further scrutiny is required if the value associated with these actions is set to 'false', indicating that multi-factor authentication is being weakened or disabled. It's important to be aware that there may be legitimate reasons for these changes, such as actions taken by a system administrator, which could result in false positives. The severity of these incidents is considered medium."
    }
  },
  {
    "instruction": "How to detect: usage of system utilities to discover files and directories",
    "context": "",
    "output": "In order to detect usage of system utilities to discover files and directories, you should focus on monitoring process creation logs on Linux systems for specific patterns indicating the exploitation of common Linux file and directory discovery tools. This includes:\n\n1. Identifying instances where the 'file' command is used with extensive wildcards resulting in a very long command line, likely intended to create a comprehensive list of files within a directory and log them, exemplified by commands like 'file */* *>> /tmp/output.txt'. This is unusual because the 'file' command, when utilized in this manner, produces an extensive command line that exceeds 200 characters, which is not common for regular use.\n\n2. Watching for the usage of the 'ls' command with the '-R' argument, which indicates a recursive directory listing. This is a common tactic used to map out the file system structure, but when used in certain contexts, it can indicate an attempt at reconnaissance within a compromised system.\n\n3. Monitoring for the execution of the 'find' and 'tree' commands, as both are powerful tools used for file and directory discovery. The 'find' command is versatile and can be used to search for files meeting specific criteria across the filesystem. On the other hand, the 'tree' command is used to display the directory structure in a graphical format, which can quickly reveal the layout of files and directories.\n\nFor accurate detection, consider any command invocation that matches these patterns as a potential indicator of an attack, with the caveat that there can be legitimate uses for these commands that could result in false positives. Thus, it's classified at an informational level, implying that each detection should be contextually interpreted to differentiate between benign activity and potential reconnaissance efforts by an attacker.\n\nThese monitoring techniques are crucial for anticipatory defense measures against actors attempting to understand the filesystem layout and sensitive files' locations, tagged under reconnaissance tactics.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of system utilities to discover files and directories",
      "answer": "In order to detect usage of system utilities to discover files and directories, you should focus on monitoring process creation logs on Linux systems for specific patterns indicating the exploitation of common Linux file and directory discovery tools. This includes:\n\n1. Identifying instances where the 'file' command is used with extensive wildcards resulting in a very long command line, likely intended to create a comprehensive list of files within a directory and log them, exemplified by commands like 'file */* *>> /tmp/output.txt'. This is unusual because the 'file' command, when utilized in this manner, produces an extensive command line that exceeds 200 characters, which is not common for regular use.\n\n2. Watching for the usage of the 'ls' command with the '-R' argument, which indicates a recursive directory listing. This is a common tactic used to map out the file system structure, but when used in certain contexts, it can indicate an attempt at reconnaissance within a compromised system.\n\n3. Monitoring for the execution of the 'find' and 'tree' commands, as both are powerful tools used for file and directory discovery. The 'find' command is versatile and can be used to search for files meeting specific criteria across the filesystem. On the other hand, the 'tree' command is used to display the directory structure in a graphical format, which can quickly reveal the layout of files and directories.\n\nFor accurate detection, consider any command invocation that matches these patterns as a potential indicator of an attack, with the caveat that there can be legitimate uses for these commands that could result in false positives. Thus, it's classified at an informational level, implying that each detection should be contextually interpreted to differentiate between benign activity and potential reconnaissance efforts by an attacker.\n\nThese monitoring techniques are crucial for anticipatory defense measures against actors attempting to understand the filesystem layout and sensitive files' locations, tagged under reconnaissance tactics."
    }
  },
  {
    "instruction": "Can you explain how to detect: suspicious 7zip execution that involves a file with a \".dmp\"/\".dump\" extension, which could be a step in a process of dump file exfiltration",
    "context": "",
    "output": "Certainly!\n\nIn order to detect a suspicious 7zip execution that involves a file with a \".dmp\"/\".dump\" extension, which could be a step in a process of dump file exfiltration, you should: Monitor Windows process creation logs for activities associated with 7-Zip, the popular file archiving utility. Specifically, look out for process creations that contain descriptions mentioning \"7-Zip\", or where the executable image ends with '\\7z.exe', '\\7za.exe', or '\\7zr.exe'. Additionally, the OriginalFileName attribute should match '7z.exe' or '7za.exe'. Another crucial detection parameter is the presence of command line arguments that include '.dmp' or '.dump' extensions, which signifies an attempt to archive or manipulate dump files. This could potentially be linked to malicious activities, such as data exfiltration or attempting to stealthily extract sensitive information saved in these dump files. It's important to approach detection with a high level of caution due to the potential for unknown false positives, indicating that while this behavior might be suspicious, it might not always be malicious. However, given the high level specified for these alerts, any matches should be closely investigated to determine their nature.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious 7zip execution that involves a file with a \".dmp\"/\".dump\" extension, which could be a step in a process of dump file exfiltration",
      "answer": "In order to detect a suspicious 7zip execution that involves a file with a \".dmp\"/\".dump\" extension, which could be a step in a process of dump file exfiltration, you should: Monitor Windows process creation logs for activities associated with 7-Zip, the popular file archiving utility. Specifically, look out for process creations that contain descriptions mentioning \"7-Zip\", or where the executable image ends with '\\7z.exe', '\\7za.exe', or '\\7zr.exe'. Additionally, the OriginalFileName attribute should match '7z.exe' or '7za.exe'. Another crucial detection parameter is the presence of command line arguments that include '.dmp' or '.dump' extensions, which signifies an attempt to archive or manipulate dump files. This could potentially be linked to malicious activities, such as data exfiltration or attempting to stealthily extract sensitive information saved in these dump files. It's important to approach detection with a high level of caution due to the potential for unknown false positives, indicating that while this behavior might be suspicious, it might not always be malicious. However, given the high level specified for these alerts, any matches should be closely investigated to determine their nature."
    }
  },
  {
    "instruction": "Please help me detect the following: suspicious encoded payloads in WMI Event Consumers",
    "context": "",
    "output": "Sure!\nIn order to detect suspicious encoded payloads in WMI Event Consumers, you should monitor Windows Management Instrumentation (WMI) event logs for specific encoded payload patterns. Focus on identifying any events where the destination contains certain base64 offsets indicative of suspicious or potentially malicious content. These include patterns that reference \"WriteProcessMemory\", which suggests an attempt to modify another process's memory\u2014a common tactic in exploitation and persistence; or strings like \"This program cannot be run in DOS mode\" and \"This program must be run under Win32\", which are typically found in the headers of Windows executables and may indicate embedded or obfuscated executable content within the payload. Monitoring for these specific patterns in WMI event logs is crucial. Additionally, keeping track of the user and the operation involved in these events can provide further context and aid in investigation. It is important to note that while this approach is high in its detection level, there may still be unknown false positives, so corroborating these findings with other indicators of compromise is recommended.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious encoded payloads in WMI Event Consumers",
      "answer": "In order to detect suspicious encoded payloads in WMI Event Consumers, you should monitor Windows Management Instrumentation (WMI) event logs for specific encoded payload patterns. Focus on identifying any events where the destination contains certain base64 offsets indicative of suspicious or potentially malicious content. These include patterns that reference \"WriteProcessMemory\", which suggests an attempt to modify another process's memory\u2014a common tactic in exploitation and persistence; or strings like \"This program cannot be run in DOS mode\" and \"This program must be run under Win32\", which are typically found in the headers of Windows executables and may indicate embedded or obfuscated executable content within the payload. Monitoring for these specific patterns in WMI event logs is crucial. Additionally, keeping track of the user and the operation involved in these events can provide further context and aid in investigation. It is important to note that while this approach is high in its detection level, there may still be unknown false positives, so corroborating these findings with other indicators of compromise is recommended."
    }
  },
  {
    "instruction": "Explain how should I detect the following: when sign-ins increased by 10% or greater.",
    "context": "",
    "output": "In order to detect when sign-ins increased by 10% or greater, you should: Monitor Azure's sign-in logs for an increase in sign-in failures. Specifically, look for events where the status is marked as a failure, and this failure rate constitutes less than 10% of total attempts. This monitoring approach is designed for Azure environments and concerns the sign-in logs service. An increase in sign-in failures might indicate an unauthorized attempt to access accounts, which could be part of a broader attack strategy. This detection strategy is of medium importance and is considered to have an unlikely chance of producing false positives, suggesting high confidence in the reliability of the detection. The tags associated with this form of monitoring include tactics and techniques that involve initial access attempts through credential exploitation or brute force methods.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "when sign-ins increased by 10% or greater.",
      "answer": "In order to detect when sign-ins increased by 10% or greater, you should: Monitor Azure's sign-in logs for an increase in sign-in failures. Specifically, look for events where the status is marked as a failure, and this failure rate constitutes less than 10% of total attempts. This monitoring approach is designed for Azure environments and concerns the sign-in logs service. An increase in sign-in failures might indicate an unauthorized attempt to access accounts, which could be part of a broader attack strategy. This detection strategy is of medium importance and is considered to have an unlikely chance of producing false positives, suggesting high confidence in the reliability of the detection. The tags associated with this form of monitoring include tactics and techniques that involve initial access attempts through credential exploitation or brute force methods."
    }
  },
  {
    "instruction": "Explain how should I detect the following: new and suspicious printer port creation in Registry that could be an attempt to exploit CVE-2020-1048",
    "context": "",
    "output": "In order to detect a new and suspicious printer port creation in Registry that could be an attempt to exploit CVE-2020-1048, you should: Monitor Windows Registry settings, specifically looking for events where a value is being set (SetValue) within the registry path 'HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Ports'. This path is critical because it is where printer port configurations are stored. You should be vigilant for modifications that include file references, particularly those ending in '.dll', '.exe', '.bat', '.com', or containing 'C:' in their paths. These types of modifications are unusual for printer port configurations and can indicate an attempt to exploit vulnerabilities or execute malicious code via printer ports. It is essential to be aware that legitimate scenarios, such as the installation of a new printer port on a host, can also trigger this alert, so such occurrences should be considered when evaluating alerts to reduce false positives. This detection strategy is classified at a high level of importance due to the potential for this kind of registry modification to be used in exploiting specific security vulnerabilities like CVE-2020-1048.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "new and suspicious printer port creation in Registry that could be an attempt to exploit CVE-2020-1048",
      "answer": "In order to detect a new and suspicious printer port creation in Registry that could be an attempt to exploit CVE-2020-1048, you should: Monitor Windows Registry settings, specifically looking for events where a value is being set (SetValue) within the registry path 'HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Ports'. This path is critical because it is where printer port configurations are stored. You should be vigilant for modifications that include file references, particularly those ending in '.dll', '.exe', '.bat', '.com', or containing 'C:' in their paths. These types of modifications are unusual for printer port configurations and can indicate an attempt to exploit vulnerabilities or execute malicious code via printer ports. It is essential to be aware that legitimate scenarios, such as the installation of a new printer port on a host, can also trigger this alert, so such occurrences should be considered when evaluating alerts to reduce false positives. This detection strategy is classified at a high level of importance due to the potential for this kind of registry modification to be used in exploiting specific security vulnerabilities like CVE-2020-1048."
    }
  },
  {
    "instruction": "How to detect: execution of the hacktool SharPersist - used to deploy various different kinds of persistence mechanisms",
    "context": "",
    "output": "In order to detect the execution of the hacktool SharPersist - used to deploy various different kinds of persistence mechanisms, you should: \n\nMonitor Windows process creation logs for any activity related to SharPersist.exe. Specifically, look for the process name ending with '\\SharPersist.exe' or instances where the product name is identified as 'SharPersist'. Additionally, pay close attention to the command line arguments associated with these processes. Detection can be achieved by identifying specific patterns in the command line that indicate attempts to establish persistence on the system through various methods. \n\nThere are several command line patterns to be aware of:\n- Commands that include ' -t schtask -c ' or ' -t startupfolder -c ', which suggest attempts to create scheduled tasks or add items to the startup folder for persistence.\n- Commands containing both ' -t reg -c ' and ' -m add', indicating attempts to add registry keys for persistence.\n- Similarly, identifying command line patterns with both ' -t service -c ' and ' -m add' points towards attempts to add new services for persistence.\n- Lastly, be vigilant for commands that contain both ' -t schtask -c ' and ' -m add', signaling an attempt to add scheduled tasks.\n\nIt's important to consider any command fitting these patterns as a potential indicator of malicious activity associated with persistence attempts using SharPersist. However, be mindful of false positives, as they can occur, although unspecified. Given the severity of these actions, any detected activity should be considered high-risk and warrant immediate investigation.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of the hacktool SharPersist - used to deploy various different kinds of persistence mechanisms",
      "answer": "In order to detect the execution of the hacktool SharPersist - used to deploy various different kinds of persistence mechanisms, you should: \n\nMonitor Windows process creation logs for any activity related to SharPersist.exe. Specifically, look for the process name ending with '\\SharPersist.exe' or instances where the product name is identified as 'SharPersist'. Additionally, pay close attention to the command line arguments associated with these processes. Detection can be achieved by identifying specific patterns in the command line that indicate attempts to establish persistence on the system through various methods. \n\nThere are several command line patterns to be aware of:\n- Commands that include ' -t schtask -c ' or ' -t startupfolder -c ', which suggest attempts to create scheduled tasks or add items to the startup folder for persistence.\n- Commands containing both ' -t reg -c ' and ' -m add', indicating attempts to add registry keys for persistence.\n- Similarly, identifying command line patterns with both ' -t service -c ' and ' -m add' points towards attempts to add new services for persistence.\n- Lastly, be vigilant for commands that contain both ' -t schtask -c ' and ' -m add', signaling an attempt to add scheduled tasks.\n\nIt's important to consider any command fitting these patterns as a potential indicator of malicious activity associated with persistence attempts using SharPersist. However, be mindful of false positives, as they can occur, although unspecified. Given the severity of these actions, any detected activity should be considered high-risk and warrant immediate investigation."
    }
  },
  {
    "instruction": "How to detect: Detect remote login by Administrator user (depending on internal pattern).",
    "context": "",
    "output": "In order to detect remote login by Administrator user (depending on internal pattern), you should monitor Windows Security logs for specific login activities. Focus on event ID 4624, which represents successful account logins. Look for logon type 10, indicating a remote interactive login, commonly used in remote desktop connections. The authentication package should be set to Negotiate, highlighting the negotiation protocol used for authentication.\n\nPay special attention to usernames that begin with \"Admin\". This is under the assumption that your organization has a naming convention for administrator accounts, requiring these accounts to have a distinguishable identifier like \"Admin-*\". This practice aids in identifying logins made by administrator accounts, facilitating the detection of remote logins that comply with internal naming policies.\n\nBe mindful that these detections could flag legitimate administrative activities, as administrators might legitimately log in remotely for maintenance or other tasks. Therefore, this detection operates at a low level of alerting to minimize disruptions while ensuring monitoring for unauthorized or irregular access patterns by users with elevated privileges. Ensure your analysis includes reviewing the context of each alert to distinguish between legitimate administrative work and potential security incidents.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Detect remote login by Administrator user (depending on internal pattern).",
      "answer": "In order to detect remote login by Administrator user (depending on internal pattern), you should monitor Windows Security logs for specific login activities. Focus on event ID 4624, which represents successful account logins. Look for logon type 10, indicating a remote interactive login, commonly used in remote desktop connections. The authentication package should be set to Negotiate, highlighting the negotiation protocol used for authentication.\n\nPay special attention to usernames that begin with \"Admin\". This is under the assumption that your organization has a naming convention for administrator accounts, requiring these accounts to have a distinguishable identifier like \"Admin-*\". This practice aids in identifying logins made by administrator accounts, facilitating the detection of remote logins that comply with internal naming policies.\n\nBe mindful that these detections could flag legitimate administrative activities, as administrators might legitimately log in remotely for maintenance or other tasks. Therefore, this detection operates at a low level of alerting to minimize disruptions while ensuring monitoring for unauthorized or irregular access patterns by users with elevated privileges. Ensure your analysis includes reviewing the context of each alert to distinguish between legitimate administrative work and potential security incidents."
    }
  },
  {
    "instruction": "Explain how should I detect the following: VBScript content stored into registry keys as seen being used by UNC2452 group",
    "context": "",
    "output": "In order to detect VBScript content stored into registry keys as seen being used by UNC2452 group, you should monitor the Windows registry for specific SetValue events within keys related to the 'Software\\Microsoft\\Windows\\CurrentVersion' path. Emphasis should be placed on identifying entries that contain VBScript-related content such as the use of 'vbscript:', 'jscript:', 'mshtml,', 'RunHTMLApplication', 'Execute(', 'CreateObject', or 'window.close'. However, it's crucial to exclude monitoring keys directly under 'Software\\Microsoft\\Windows\\CurrentVersion\\Run' to reduce false positives, as legitimate operations frequently occur in this path.\n\nAdditionally, a more refined filtering should be applied to exclude any instances where the modifications are associated with the '.NET installer' processes, specifically signaled by the image path ending in '\\msiexec.exe' and targeting registry keys under '\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Installer\\UserData\\'. These exclusions should also consider details containing references to '.NET Primary Interop Assemblies' or specific file versions and cultural settings of 'Microsoft.mshtml.dll', as these are generally indicative of regular .NET installation activities rather than malicious interventions.\n\nThe approach should be vigilant for the sophistication of attack techniques akin to those deployed by the UNC2452 group, focusing on registry key modifications that serve as a means to execute VBScript for malicious purposes. Despite potential unknown false positives, the priority remains high in detecting these registry-based scripts, given their utilization in advanced persistent threat activities. Through this concentrated monitoring of registry set events, coupled with strategic exclusions, one can effectively identify and mitigate unauthorized VBScript execution within Windows environments, a tactic aligned with behaviors observed in the UNC2452 group's operations.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "VBScript content stored into registry keys as seen being used by UNC2452 group",
      "answer": "In order to detect VBScript content stored into registry keys as seen being used by UNC2452 group, you should monitor the Windows registry for specific SetValue events within keys related to the 'Software\\Microsoft\\Windows\\CurrentVersion' path. Emphasis should be placed on identifying entries that contain VBScript-related content such as the use of 'vbscript:', 'jscript:', 'mshtml,', 'RunHTMLApplication', 'Execute(', 'CreateObject', or 'window.close'. However, it's crucial to exclude monitoring keys directly under 'Software\\Microsoft\\Windows\\CurrentVersion\\Run' to reduce false positives, as legitimate operations frequently occur in this path.\n\nAdditionally, a more refined filtering should be applied to exclude any instances where the modifications are associated with the '.NET installer' processes, specifically signaled by the image path ending in '\\msiexec.exe' and targeting registry keys under '\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Installer\\UserData\\'. These exclusions should also consider details containing references to '.NET Primary Interop Assemblies' or specific file versions and cultural settings of 'Microsoft.mshtml.dll', as these are generally indicative of regular .NET installation activities rather than malicious interventions.\n\nThe approach should be vigilant for the sophistication of attack techniques akin to those deployed by the UNC2452 group, focusing on registry key modifications that serve as a means to execute VBScript for malicious purposes. Despite potential unknown false positives, the priority remains high in detecting these registry-based scripts, given their utilization in advanced persistent threat activities. Through this concentrated monitoring of registry set events, coupled with strategic exclusions, one can effectively identify and mitigate unauthorized VBScript execution within Windows environments, a tactic aligned with behaviors observed in the UNC2452 group's operations."
    }
  },
  {
    "instruction": "Please help me detect the following: execution of javascript code using \"mshta.exe\".",
    "context": "",
    "output": "Sure!\nIn order to detect execution of javascript code using \"mshta.exe\", you should:\nMonitor process creation logs on Windows systems for instances where 'mshta.exe' appears either at the end of the image path or the original filename is exactly 'MSHTA.EXE'. Additionally, check if the command line includes 'javascript'. To ensure accurate detection, both conditions related to the image name and command line content must be met. This activity is significant due to its high potential for malicious use, although be aware that there might be unknown scenarios leading to false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of javascript code using \"mshta.exe\".",
      "answer": "In order to detect execution of javascript code using \"mshta.exe\", you should:\nMonitor process creation logs on Windows systems for instances where 'mshta.exe' appears either at the end of the image path or the original filename is exactly 'MSHTA.EXE'. Additionally, check if the command line includes 'javascript'. To ensure accurate detection, both conditions related to the image name and command line content must be met. This activity is significant due to its high potential for malicious use, although be aware that there might be unknown scenarios leading to false positives."
    }
  },
  {
    "instruction": "Please help me detect the following: Detect changes to the \"LegalNoticeCaption\" or \"LegalNoticeText\" registry values where the message set contains keywords often used in ransomware ransom messages",
    "context": "",
    "output": "Sure!\nIn order to detect changes to the \"LegalNoticeCaption\" or \"LegalNoticeText\" registry values where the message set contains keywords often used in ransomware ransom messages, you should: Monitor Windows Registry modification events specifically targeting the registry paths associated with the system's legal notice settings. Pay attention to modifications where the event type is 'SetValue'. Specifically, look for changes to two registry paths: '\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\LegalNoticeCaption' and '\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\LegalNoticeText'. These are critical locations as they control the text displayed before a user logs into Windows, which can be misused by attackers to display a ransom message.\n\nAdditionally, scrutinize the details of these registry modifications for containing any of the following keywords: 'encrypted', 'Unlock-Password', or 'paying'. These words are indicative of content that might be related to ransomware activity, where attackers leave instructions for decrypting files or contacting them for payment. \n\nBeing vigilant about modifications containing these keywords helps in the early detection of ransomware attacks aimed at leveraging system functionalities to coerce victims into complying with payment demands. It's vital to note, however, that due to variability in ransomware messages and techniques, there may be unknown false positives. This detection mechanism is considered to have a high level of criticality due to the potentially significant impact of ransomware attacks on organizations.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Detect changes to the \"LegalNoticeCaption\" or \"LegalNoticeText\" registry values where the message set contains keywords often used in ransomware ransom messages",
      "answer": "In order to detect changes to the \"LegalNoticeCaption\" or \"LegalNoticeText\" registry values where the message set contains keywords often used in ransomware ransom messages, you should: Monitor Windows Registry modification events specifically targeting the registry paths associated with the system's legal notice settings. Pay attention to modifications where the event type is 'SetValue'. Specifically, look for changes to two registry paths: '\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\LegalNoticeCaption' and '\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\LegalNoticeText'. These are critical locations as they control the text displayed before a user logs into Windows, which can be misused by attackers to display a ransom message.\n\nAdditionally, scrutinize the details of these registry modifications for containing any of the following keywords: 'encrypted', 'Unlock-Password', or 'paying'. These words are indicative of content that might be related to ransomware activity, where attackers leave instructions for decrypting files or contacting them for payment. \n\nBeing vigilant about modifications containing these keywords helps in the early detection of ransomware attacks aimed at leveraging system functionalities to coerce victims into complying with payment demands. It's vital to note, however, that due to variability in ransomware messages and techniques, there may be unknown false positives. This detection mechanism is considered to have a high level of criticality due to the potentially significant impact of ransomware attacks on organizations."
    }
  },
  {
    "instruction": "Please help me detect the following: when changes are made to PIM roles",
    "context": "",
    "output": "Sure!\nIn order to detect when changes are made to PIM roles, you should: monitor Azure audit logs for events that indicate an update to role settings in Privileged Identity Management (PIM). Specifically, look for audit log entries where the message includes \"Update role setting in PIM.\" It is important to note that legitimate administrative changes to PIM settings might trigger this detection, so validation is advised to differentiate between benign and malicious activities. The severity of such detections is considered high due to the potential impact on security posture if unauthorized changes are made.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "when changes are made to PIM roles",
      "answer": "In order to detect when changes are made to PIM roles, you should: monitor Azure audit logs for events that indicate an update to role settings in Privileged Identity Management (PIM). Specifically, look for audit log entries where the message includes \"Update role setting in PIM.\" It is important to note that legitimate administrative changes to PIM settings might trigger this detection, so validation is advised to differentiate between benign and malicious activities. The severity of such detections is considered high due to the potential impact on security posture if unauthorized changes are made."
    }
  },
  {
    "instruction": "How can I detect: Identifies user account which has been locked because the user tried to sign in too many times with an incorrect user ID or password.",
    "context": "",
    "output": "In order to identify a user account which has been locked because the user tried to sign in too many times with an incorrect user ID or password, you should monitor Azure signin logs for specific sign-in attempt outcomes. Pay attention to logs that show a ResultType of 50053. This specific ResultType indicates that a user account has been locked due to multiple failed sign-in attempts. Such behavior could be indicative of an attempted attack where an adversary is trying to guess or brute-force a user\u2019s password. Monitoring for this activity is crucial for detecting and responding to potential security incidents related to account lockout policies. It\u2019s important to note that there may be instances where these detections could trigger on benign activities; however, the security event's level is considered medium, suggesting a balanced approach to investigating these alerts.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Identifies user account which has been locked because the user tried to sign in too many times with an incorrect user ID or password.",
      "answer": "In order to identify a user account which has been locked because the user tried to sign in too many times with an incorrect user ID or password, you should monitor Azure signin logs for specific sign-in attempt outcomes. Pay attention to logs that show a ResultType of 50053. This specific ResultType indicates that a user account has been locked due to multiple failed sign-in attempts. Such behavior could be indicative of an attempted attack where an adversary is trying to guess or brute-force a user\u2019s password. Monitoring for this activity is crucial for detecting and responding to potential security incidents related to account lockout policies. It\u2019s important to note that there may be instances where these detections could trigger on benign activities; however, the security event's level is considered medium, suggesting a balanced approach to investigating these alerts."
    }
  },
  {
    "instruction": "Explain how should I detect the following: Adversaries may enumerate browser bookmarks to learn more about compromised hosts.\nBrowser bookmarks may reveal personal information about users (ex: banking sites, interests, social media, etc.) as well as details about\ninternal network resources such as servers, tools/dashboards, or other related infrastructure.\n",
    "context": "",
    "output": "In order to detect adversaries attempting to enumerate browser bookmarks to learn more about compromised hosts, you should focus on monitoring Windows process creation events for indications of this specific activity. Look for the execution of \"where.exe\" which is a command-line utility in Windows used to locate files within the system directories. In the context of this attack, \"where.exe\" might be misused to find specific browser data files. The files of interest include browser-specific SQLite databases and JSON files such as 'places.sqlite', 'cookies.sqlite', 'formhistory.sqlite', 'logins.json', 'key4.db', 'key3.db', and 'sessionstore.jsonlz4' for Firefox, as well as 'History', 'Bookmarks', 'Cookies', and 'Login Data' for Chrome. These files contain sensitive information like bookmarks, cookies, and login data which, if accessed, can provide adversaries with insights about personal user interests, banking information, social media, and internal network resources.\n\nWhen setting up detection mechanisms, include rules that trigger alarms for process creation events where the command line includes attempts to locate any of these critical files. This approach ensures you can identify potential reconnaissance efforts aimed at gathering browser bookmarks and related information.\n\nKeep in mind that while this detection strategy is vital for catching suspicious activities, it might also generate false positives, as the usage of \"where.exe\" is not exclusively malicious and could be part of regular system or administrative tasks. Therefore, it's recommended to verify such detection hits with further investigation. The monitoring strategy encompasses tags associated with MITRE ATT&CK tactics and techniques such as Credential Access, Discovery, and Collection, as interacting with these browser data files can relate to these categories of attack techniques.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Adversaries may enumerate browser bookmarks to learn more about compromised hosts.\nBrowser bookmarks may reveal personal information about users (ex: banking sites, interests, social media, etc.) as well as details about\ninternal network resources such as servers, tools/dashboards, or other related infrastructure.\n",
      "answer": "In order to detect adversaries attempting to enumerate browser bookmarks to learn more about compromised hosts, you should focus on monitoring Windows process creation events for indications of this specific activity. Look for the execution of \"where.exe\" which is a command-line utility in Windows used to locate files within the system directories. In the context of this attack, \"where.exe\" might be misused to find specific browser data files. The files of interest include browser-specific SQLite databases and JSON files such as 'places.sqlite', 'cookies.sqlite', 'formhistory.sqlite', 'logins.json', 'key4.db', 'key3.db', and 'sessionstore.jsonlz4' for Firefox, as well as 'History', 'Bookmarks', 'Cookies', and 'Login Data' for Chrome. These files contain sensitive information like bookmarks, cookies, and login data which, if accessed, can provide adversaries with insights about personal user interests, banking information, social media, and internal network resources.\n\nWhen setting up detection mechanisms, include rules that trigger alarms for process creation events where the command line includes attempts to locate any of these critical files. This approach ensures you can identify potential reconnaissance efforts aimed at gathering browser bookmarks and related information.\n\nKeep in mind that while this detection strategy is vital for catching suspicious activities, it might also generate false positives, as the usage of \"where.exe\" is not exclusively malicious and could be part of regular system or administrative tasks. Therefore, it's recommended to verify such detection hits with further investigation. The monitoring strategy encompasses tags associated with MITRE ATT&CK tactics and techniques such as Credential Access, Discovery, and Collection, as interacting with these browser data files can relate to these categories of attack techniques."
    }
  },
  {
    "instruction": "How to detect: remote RPC calls to read information about scheduled tasks via AtScv",
    "context": "",
    "output": "In order to detect remote RPC calls to read information about scheduled tasks via AtScv, you should focus on monitoring for specific events generated by the RPC Firewall applied to processes that interact with remote procedure calls. Specifically:\n\n1. Ensure that the RPC Firewall is installed and configured to audit and block actions for processes, particularly those with the UUID \"1ff70682-0a51-30e8-076d-740be8cee98b\". This UUID is crucial as it identifies the specific interface associated with the remote calls you are interested in monitoring.\n\n2. Monitor the RPCFW event logs for EventID 3. EventID 3 is pertinent as it signifies that an audited action took place, which in the context of your monitoring, relates to remote RPC calls that could potentially be reading information about scheduled tasks.\n\n3. Check that the InterfaceUuid in the logged event matches \"1ff70682-0a51-30e8-076d-740be8cee98b\". This ensures that the event you're monitoring is relevant to the specific remote procedure call interface that interacts with scheduled tasks.\n\n4. Apply a filter to exclude events where the OpNum is 0 or 1. OpNums (operation numbers) specify the particular operation being called in the RPC; excluding these numbers helps to focus on the relevant operations that could indicate an attempt to read task information illicitly.\n\nGiven the high importance of detecting such activity, any matches to these criteria should be treated with a high level of scrutiny. However, be aware of the potential for unknown false positives, meaning some legitimate activities might inadvertently match these criteria until they are properly identified and whitelisted.\n\nThis approach is aligned with cybersecurity practices that aim to detect unauthorized access or malicious activity related to scheduled tasks, a technique that can be crucial for maintaining the security and integrity of systems.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "remote RPC calls to read information about scheduled tasks via AtScv",
      "answer": "In order to detect remote RPC calls to read information about scheduled tasks via AtScv, you should focus on monitoring for specific events generated by the RPC Firewall applied to processes that interact with remote procedure calls. Specifically:\n\n1. Ensure that the RPC Firewall is installed and configured to audit and block actions for processes, particularly those with the UUID \"1ff70682-0a51-30e8-076d-740be8cee98b\". This UUID is crucial as it identifies the specific interface associated with the remote calls you are interested in monitoring.\n\n2. Monitor the RPCFW event logs for EventID 3. EventID 3 is pertinent as it signifies that an audited action took place, which in the context of your monitoring, relates to remote RPC calls that could potentially be reading information about scheduled tasks.\n\n3. Check that the InterfaceUuid in the logged event matches \"1ff70682-0a51-30e8-076d-740be8cee98b\". This ensures that the event you're monitoring is relevant to the specific remote procedure call interface that interacts with scheduled tasks.\n\n4. Apply a filter to exclude events where the OpNum is 0 or 1. OpNums (operation numbers) specify the particular operation being called in the RPC; excluding these numbers helps to focus on the relevant operations that could indicate an attempt to read task information illicitly.\n\nGiven the high importance of detecting such activity, any matches to these criteria should be treated with a high level of scrutiny. However, be aware of the potential for unknown false positives, meaning some legitimate activities might inadvertently match these criteria until they are properly identified and whitelisted.\n\nThis approach is aligned with cybersecurity practices that aim to detect unauthorized access or malicious activity related to scheduled tasks, a technique that can be crucial for maintaining the security and integrity of systems."
    }
  },
  {
    "instruction": "How can I detect: potential abuse of ntdsutil to dump ntds.dit database",
    "context": "",
    "output": "In order to detect potential abuse of ntdsutil to dump ntds.dit database, you should: Monitor Windows application logs for specific event IDs associated with the ESENT provider. The relevant event IDs to look out for are 216, 325, 326, and 327. Additionally, scrutinize these events for any references to 'ntds.dit'. This file is critical as it contains the Active Directory database, and its unauthorized duplication or access could indicate an ongoing attack to extract sensitive domain information. Be aware, however, that seeing these indicators may also coincide with legitimate backup operations or the creation of shadow copies, which are considered normal false positives in this context. The severity of this monitoring strategy is categorized as medium, signifying a significant level of importance in detecting and mitigating potential threats that exploit ntdsutil for malicious purposes. This detection method aligns with securing against tactics that involve Credential Access through techniques such as OS Credential Dumping.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential abuse of ntdsutil to dump ntds.dit database",
      "answer": "In order to detect potential abuse of ntdsutil to dump ntds.dit database, you should: Monitor Windows application logs for specific event IDs associated with the ESENT provider. The relevant event IDs to look out for are 216, 325, 326, and 327. Additionally, scrutinize these events for any references to 'ntds.dit'. This file is critical as it contains the Active Directory database, and its unauthorized duplication or access could indicate an ongoing attack to extract sensitive domain information. Be aware, however, that seeing these indicators may also coincide with legitimate backup operations or the creation of shadow copies, which are considered normal false positives in this context. The severity of this monitoring strategy is categorized as medium, signifying a significant level of importance in detecting and mitigating potential threats that exploit ntdsutil for malicious purposes. This detection method aligns with securing against tactics that involve Credential Access through techniques such as OS Credential Dumping."
    }
  },
  {
    "instruction": "Can you explain how to detect: export of a crital Registry key to a file.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect the export of a critical Registry key to a file, you should: Monitor Windows process creation logs for instances of the Registry Editor (`regedit.exe`) executing with command-line arguments that indicate exporting actions. Specifically, lookout for the `regedit.exe` process with command-line parameters that include `/E` or `-E` which are used to export registry keys to a file. Additionally, pay attention to parameters that contain references to critical registry hives such as `hklm` or `hkey_local_machine`, and further, parameters that target critical registry paths ending with `\\system`, `\\sam`, or `\\security`. Collect information about the parent process of `regedit.exe` and the exact command line used for closer examination. It's important to note that there may be legitimate reasons for exporting parts of the Registry, such as for backups or forensic investigations, which you will need to differentiate from malicious activity. The severity of such actions is considered high because unauthorized access to or exporting of critical registry hives can be indicative of an attempt to steal sensitive system information or manipulate system configurations maliciously.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "export of a crital Registry key to a file.",
      "answer": "In order to detect the export of a critical Registry key to a file, you should: Monitor Windows process creation logs for instances of the Registry Editor (`regedit.exe`) executing with command-line arguments that indicate exporting actions. Specifically, lookout for the `regedit.exe` process with command-line parameters that include `/E` or `-E` which are used to export registry keys to a file. Additionally, pay attention to parameters that contain references to critical registry hives such as `hklm` or `hkey_local_machine`, and further, parameters that target critical registry paths ending with `\\system`, `\\sam`, or `\\security`. Collect information about the parent process of `regedit.exe` and the exact command line used for closer examination. It's important to note that there may be legitimate reasons for exporting parts of the Registry, such as for backups or forensic investigations, which you will need to differentiate from malicious activity. The severity of such actions is considered high because unauthorized access to or exporting of critical registry hives can be indicative of an attempt to steal sensitive system information or manipulate system configurations maliciously."
    }
  },
  {
    "instruction": "Explain how should I detect the following: activity when a member is added to a security-enabled global group",
    "context": "",
    "output": "In order to detect activity when a member is added to a security-enabled global group, you should: observe the security logs from Windows operating systems for specific event identifiers that indicate this activity. Specifically, monitor for the event IDs 4728, which signifies \"A member was added to a security-enabled global group,\" and 632, which also denotes \"Security Enabled Global Group Member Added.\" It is important to understand that these logs are crucial in identifying potential unauthorized or suspicious additions to critical security groups that could indicate a breach or an attempt to gain elevated privileges. Be aware that some detections might not signify malicious activity, hence the low level of confidence in these indicators without further context.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "activity when a member is added to a security-enabled global group",
      "answer": "In order to detect activity when a member is added to a security-enabled global group, you should: observe the security logs from Windows operating systems for specific event identifiers that indicate this activity. Specifically, monitor for the event IDs 4728, which signifies \"A member was added to a security-enabled global group,\" and 632, which also denotes \"Security Enabled Global Group Member Added.\" It is important to understand that these logs are crucial in identifying potential unauthorized or suspicious additions to critical security groups that could indicate a breach or an attempt to gain elevated privileges. Be aware that some detections might not signify malicious activity, hence the low level of confidence in these indicators without further context."
    }
  },
  {
    "instruction": "How to detect: potential DLL sideloading of \"appverifUI.dll\"",
    "context": "",
    "output": "In order to detect potential DLL sideloading of \"appverifUI.dll\", you should: monitor for instances where the \"appverifUI.dll\" file is loaded into memory, specifically within a Windows environment. This is achieved by focusing on the image load category, which tracks when DLL files are loaded by applications. The primary condition for raising an alert is when the loaded DLL file ends with the name '\\appverifUI.dll'. However, to reduce false positives and ensure legitimate use cases where \"appverifUI.dll\" is loaded by the system's app verification tools located at 'C:\\Windows\\System32\\appverif.exe' or 'C:\\Windows\\SysWOW64\\appverif.exe' are not flagged, any loading event originating from these paths or that start with 'C:\\Windows\\System32\\', 'C:\\Windows\\SysWOW64\\', or 'C:\\Windows\\WinSxS\\' should be excluded from the detection logic. Due to the precision of this detection method, false positives are considered unlikely, and the severity level is set to high, indicating the importance of monitoring for this activity as it relates to security implications involving DLL sideloading techniques.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential DLL sideloading of \"appverifUI.dll\"",
      "answer": "In order to detect potential DLL sideloading of \"appverifUI.dll\", you should: monitor for instances where the \"appverifUI.dll\" file is loaded into memory, specifically within a Windows environment. This is achieved by focusing on the image load category, which tracks when DLL files are loaded by applications. The primary condition for raising an alert is when the loaded DLL file ends with the name '\\appverifUI.dll'. However, to reduce false positives and ensure legitimate use cases where \"appverifUI.dll\" is loaded by the system's app verification tools located at 'C:\\Windows\\System32\\appverif.exe' or 'C:\\Windows\\SysWOW64\\appverif.exe' are not flagged, any loading event originating from these paths or that start with 'C:\\Windows\\System32\\', 'C:\\Windows\\SysWOW64\\', or 'C:\\Windows\\WinSxS\\' should be excluded from the detection logic. Due to the precision of this detection method, false positives are considered unlikely, and the severity level is set to high, indicating the importance of monitoring for this activity as it relates to security implications involving DLL sideloading techniques."
    }
  },
  {
    "instruction": "How can I detect: usage of the Gpg4win to decrypt files located in suspicious locations from CLI",
    "context": "",
    "output": "In order to detect usage of the Gpg4win to decrypt files located in suspicious locations from CLI, you should: Focus on the creation of new processes on Windows operating systems, specifically keeping an eye out for any instances of the 'gpg2.exe' executable, which is a component of the GNU Privacy Guard (GnuPG), developed by g10 Code GmbH. It's critical to monitor any command line arguments that include '-passphrase', which indicates the input of a passphrase for decryption directly through the command line interface - a method that could suggest an automated or scripted decryption process, possibly indicating malicious behavior. \n\nAdditionally, pay close attention to the command line paths involving directory locations such as '\\AppData\\Roaming\\', 'C:\\Perflogs\\', 'C:\\Windows\\Temp\\', and 'C:\\temp'. Usage of these paths can be indicative of attempts to decrypt files stored in locations that are commonly used for temporary storage or hiding malicious data away from typical user directories. \n\nIt's important, however, to consider the context of these detections, as legitimate usage of Gpg4win for file encryption and decryption could also trigger these conditions. Thus, any alert based on these criteria should be investigated to discern between benign use and potential security threats. The detection sensitivity is set to a medium level to balance between the likelihood of detecting actual malicious activity and minimizing false positives originating from regular, non-malicious use of GnuPG for encryption and decryption tasks.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of the Gpg4win to decrypt files located in suspicious locations from CLI",
      "answer": "In order to detect usage of the Gpg4win to decrypt files located in suspicious locations from CLI, you should: Focus on the creation of new processes on Windows operating systems, specifically keeping an eye out for any instances of the 'gpg2.exe' executable, which is a component of the GNU Privacy Guard (GnuPG), developed by g10 Code GmbH. It's critical to monitor any command line arguments that include '-passphrase', which indicates the input of a passphrase for decryption directly through the command line interface - a method that could suggest an automated or scripted decryption process, possibly indicating malicious behavior. \n\nAdditionally, pay close attention to the command line paths involving directory locations such as '\\AppData\\Roaming\\', 'C:\\Perflogs\\', 'C:\\Windows\\Temp\\', and 'C:\\temp'. Usage of these paths can be indicative of attempts to decrypt files stored in locations that are commonly used for temporary storage or hiding malicious data away from typical user directories. \n\nIt's important, however, to consider the context of these detections, as legitimate usage of Gpg4win for file encryption and decryption could also trigger these conditions. Thus, any alert based on these criteria should be investigated to discern between benign use and potential security threats. The detection sensitivity is set to a medium level to balance between the likelihood of detecting actual malicious activity and minimizing false positives originating from regular, non-malicious use of GnuPG for encryption and decryption tasks."
    }
  },
  {
    "instruction": "Please help me detect the following: suspicious files created by Microsoft Sync Center (mobsync)",
    "context": "",
    "output": "Sure!\nIn order to detect suspicious files created by Microsoft Sync Center (mobsync), you should: monitor file event logs on Windows systems, focusing specifically on events where the Microsoft Sync Center executable ('mobsync.exe') is involved. Pay particular attention to the creation of new files with extensions '.dll' or '.exe' that are associated with this process. This focus is essential because the creation of these file types by mobsync.exe may indicate malicious activity where adversaries attempt to leverage or mimic the behavior of Microsoft Sync Center for nefarious purposes. It is advised to keep an alert level at medium due to the potential for unknown false positives, indicating that while this activity is suspicious, it may not always represent a definitive threat and should be investigated further when detected.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious files created by Microsoft Sync Center (mobsync)",
      "answer": "In order to detect suspicious files created by Microsoft Sync Center (mobsync), you should: monitor file event logs on Windows systems, focusing specifically on events where the Microsoft Sync Center executable ('mobsync.exe') is involved. Pay particular attention to the creation of new files with extensions '.dll' or '.exe' that are associated with this process. This focus is essential because the creation of these file types by mobsync.exe may indicate malicious activity where adversaries attempt to leverage or mimic the behavior of Microsoft Sync Center for nefarious purposes. It is advised to keep an alert level at medium due to the potential for unknown false positives, indicating that while this activity is suspicious, it may not always represent a definitive threat and should be investigated further when detected."
    }
  },
  {
    "instruction": "Please help me detect the following: Detect attacker collecting audio via SoundRecorder application.",
    "context": "",
    "output": "Sure!\nIn order to detect an attacker collecting audio via the SoundRecorder application, you should monitor for instances where the SoundRecorder.exe process is initiated with command-line arguments that include '/FILE'. This activity is indicative of the program being used, possibly for malicious purposes, to record and save audio files. Your detection efforts should focus on Windows systems, specifically looking into process creation logs for such activities. Be mindful, however, that there could be legitimate uses of this application by users trying to capture audio for non-malicious reasons. This scenario is tagged under tactics and techniques such as Collection and Capture Audio. The level of concern for these detections is considered medium, due to the potential for false positives related to legitimate use of the SoundRecorder by users.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Detect attacker collecting audio via SoundRecorder application.",
      "answer": "In order to detect an attacker collecting audio via the SoundRecorder application, you should monitor for instances where the SoundRecorder.exe process is initiated with command-line arguments that include '/FILE'. This activity is indicative of the program being used, possibly for malicious purposes, to record and save audio files. Your detection efforts should focus on Windows systems, specifically looking into process creation logs for such activities. Be mindful, however, that there could be legitimate uses of this application by users trying to capture audio for non-malicious reasons. This scenario is tagged under tactics and techniques such as Collection and Capture Audio. The level of concern for these detections is considered medium, due to the potential for false positives related to legitimate use of the SoundRecorder by users."
    }
  },
  {
    "instruction": "How can I detect: when an attacker register a new SIP provider for persistence and defense evasion",
    "context": "",
    "output": "In order to detect when an attacker registers a new SIP provider for persistence and defense evasion, you should monitor the Windows registry for any SetValue operations (indicating data being written to the registry) specifically targeting the registry keys related to Cryptography Providers and Encoding Types. These registry keys include paths like '\\SOFTWARE\\Microsoft\\Cryptography\\Providers\\', '\\SOFTWARE\\Microsoft\\Cryptography\\OID\\EncodingType', '\\SOFTWARE\\WOW6432Node\\Microsoft\\Cryptography\\Providers\\', and '\\SOFTWARE\\WOW6432Node\\Microsoft\\Cryptography\\OID\\EncodingType'. Additionally, pay attention to registry modifications that add or reference DLLs, especially when the target objects contain '\\Dll' or '\\$DLL'. However, it's essential to exclude any SetValue operations involving known and legitimate SIP providers such as WINTRUST.DLL and mso.dll from the detections. Another specific exclusion should be made for operations involving 'C:\\Windows\\System32\\poqexec.exe' targeting '\\CryptSIPDll' with 'C:\\Windows\\System32\\PsfSip.dll' detailed in the operation, as this might represent a legitimate system activity. This approach aims to minimize false positives like legitimate SIP registrations by the OS or other software, maintaining a focus on potential malicious activities related to persistence and defense evasion. This monitoring is crucial for maintaining computer security against attackers utilizing registry modifications to ensure their malware remains persistent and evades detection effectively.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "when an attacker register a new SIP provider for persistence and defense evasion",
      "answer": "In order to detect when an attacker registers a new SIP provider for persistence and defense evasion, you should monitor the Windows registry for any SetValue operations (indicating data being written to the registry) specifically targeting the registry keys related to Cryptography Providers and Encoding Types. These registry keys include paths like '\\SOFTWARE\\Microsoft\\Cryptography\\Providers\\', '\\SOFTWARE\\Microsoft\\Cryptography\\OID\\EncodingType', '\\SOFTWARE\\WOW6432Node\\Microsoft\\Cryptography\\Providers\\', and '\\SOFTWARE\\WOW6432Node\\Microsoft\\Cryptography\\OID\\EncodingType'. Additionally, pay attention to registry modifications that add or reference DLLs, especially when the target objects contain '\\Dll' or '\\$DLL'. However, it's essential to exclude any SetValue operations involving known and legitimate SIP providers such as WINTRUST.DLL and mso.dll from the detections. Another specific exclusion should be made for operations involving 'C:\\Windows\\System32\\poqexec.exe' targeting '\\CryptSIPDll' with 'C:\\Windows\\System32\\PsfSip.dll' detailed in the operation, as this might represent a legitimate system activity. This approach aims to minimize false positives like legitimate SIP registrations by the OS or other software, maintaining a focus on potential malicious activities related to persistence and defense evasion. This monitoring is crucial for maintaining computer security against attackers utilizing registry modifications to ensure their malware remains persistent and evades detection effectively."
    }
  },
  {
    "instruction": "Please help me detect the following: path traversal exploitation attempts",
    "context": "",
    "output": "Sure!\nIn order to detect path traversal exploitation attempts, you should monitor web server logs for specific patterns in the query strings of HTTP requests that indicate an attempt to navigate directory structures in an unauthorized manner. These patterns include the use of sequences like '../../../../../etc/passwd', '../../../../windows/', and '../../../../../lib/password', which are typically employed by attackers trying to access critical system files or directories by exploiting a vulnerability in the web application. The presence of these patterns in the cs-uri-query (that is, the query part of the URI requested by the client) should raise alerts. However, it is important to note that such patterns can also be generated by benign activities, such as systems exposed to the Internet facing automated scans, or internal vulnerability scans conducted for security assessments, leading to potential false positives. The severity level for these detections is considered medium.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "path traversal exploitation attempts",
      "answer": "In order to detect path traversal exploitation attempts, you should monitor web server logs for specific patterns in the query strings of HTTP requests that indicate an attempt to navigate directory structures in an unauthorized manner. These patterns include the use of sequences like '../../../../../etc/passwd', '../../../../windows/', and '../../../../../lib/password', which are typically employed by attackers trying to access critical system files or directories by exploiting a vulnerability in the web application. The presence of these patterns in the cs-uri-query (that is, the query part of the URI requested by the client) should raise alerts. However, it is important to note that such patterns can also be generated by benign activities, such as systems exposed to the Internet facing automated scans, or internal vulnerability scans conducted for security assessments, leading to potential false positives. The severity level for these detections is considered medium."
    }
  },
  {
    "instruction": "How to detect: creation of an executable by another executable",
    "context": "",
    "output": "To detect the creation of an executable by another executable, you should monitor for events where an executable file creates another executable file within a Windows environment. This involves tracking file creation activities specifically where both the source (Image) and target (TargetFilename) elements end with '.exe', indicating the involvement of executable files. However, to reduce false positives and focus the detection, it's essential to exclude certain benign and system-related activities from triggering alarms. This includes ignoring file creation events initiated by known system processes like `msiexec.exe`, `cleanmgr.exe`, `explorer.exe`, among others, which are legitimate parts of Windows operations. Additionally, special attention should be given to exclude system-update-related activities, such as those involving `svchost.exe` interacting with Windows update directories or during Windows upgrade processes.\n\nKey exclusions also extend to activities involving common application update mechanisms, like those of Microsoft Teams or GitHub Desktop, where executable files might be created as part of their normal update process. Moreover, it's crucial to filter out processes associated with software installations, update utilities, and the execution of 32-bit applications launching their 64-bit counterparts to avoid misidentification of legitimate software behavior as malicious activities.\n\nIn essence, the detection aims to highlight unusual executable file creation occurrences that could indicate unauthorized or malicious software propagation. Still, it simultaneously avoids raising alerts on certified Windows update operations, legitimate software update processes, and recognized system activities to maintain a focus on potential security threats.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "creation of an executable by another executable",
      "answer": "To detect the creation of an executable by another executable, you should monitor for events where an executable file creates another executable file within a Windows environment. This involves tracking file creation activities specifically where both the source (Image) and target (TargetFilename) elements end with '.exe', indicating the involvement of executable files. However, to reduce false positives and focus the detection, it's essential to exclude certain benign and system-related activities from triggering alarms. This includes ignoring file creation events initiated by known system processes like `msiexec.exe`, `cleanmgr.exe`, `explorer.exe`, among others, which are legitimate parts of Windows operations. Additionally, special attention should be given to exclude system-update-related activities, such as those involving `svchost.exe` interacting with Windows update directories or during Windows upgrade processes.\n\nKey exclusions also extend to activities involving common application update mechanisms, like those of Microsoft Teams or GitHub Desktop, where executable files might be created as part of their normal update process. Moreover, it's crucial to filter out processes associated with software installations, update utilities, and the execution of 32-bit applications launching their 64-bit counterparts to avoid misidentification of legitimate software behavior as malicious activities.\n\nIn essence, the detection aims to highlight unusual executable file creation occurrences that could indicate unauthorized or malicious software propagation. Still, it simultaneously avoids raising alerts on certified Windows update operations, legitimate software update processes, and recognized system activities to maintain a focus on potential security threats."
    }
  },
  {
    "instruction": "Explain how should I detect the following: access to a file share with a naming schema seen being used during exploitation of CVE-2023-36884",
    "context": "",
    "output": "In order to detect access to a file share with a naming schema seen being used during exploitation of CVE-2023-36884, you should: focus on monitoring Windows security event logs, especially looking for event ID 5140 which indicates an attempt to access a file share. Essential criteria include the configuration of the advanced audit policy setting for Object Access to Audit File Share for both Success and Failure events. Look specifically for file shares named or paths containing the marker '\\MSHTML_C7\\' or those that match an IP address format (expressed as four groups of numbers ranging from 0 to 255, separated by periods). This detection is crucial as it signals potential exploitation attempts of a specific vulnerability identified as CVE-2023-36884. It's important to note that any hits on these criteria should be treated with caution due to the potential high impact of the threat, though there could be unknown false positives. The approach encapsulates vigilance against tactics and techniques that exploit vulnerabilities in network services, aiming to intercept or manipulate information.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "access to a file share with a naming schema seen being used during exploitation of CVE-2023-36884",
      "answer": "In order to detect access to a file share with a naming schema seen being used during exploitation of CVE-2023-36884, you should: focus on monitoring Windows security event logs, especially looking for event ID 5140 which indicates an attempt to access a file share. Essential criteria include the configuration of the advanced audit policy setting for Object Access to Audit File Share for both Success and Failure events. Look specifically for file shares named or paths containing the marker '\\MSHTML_C7\\' or those that match an IP address format (expressed as four groups of numbers ranging from 0 to 255, separated by periods). This detection is crucial as it signals potential exploitation attempts of a specific vulnerability identified as CVE-2023-36884. It's important to note that any hits on these criteria should be treated with caution due to the potential high impact of the threat, though there could be unknown false positives. The approach encapsulates vigilance against tactics and techniques that exploit vulnerabilities in network services, aiming to intercept or manipulate information."
    }
  },
  {
    "instruction": "Explain how should I detect the following: when an attacker registers a new AMSI provider in order to achieve persistence",
    "context": "",
    "output": "In order to detect when an attacker registers a new AMSI provider in order to achieve persistence, you should: Focus on monitoring registry addition events on Windows systems, specifically looking into cases where keys are created under the registry paths '\\SOFTWARE\\Microsoft\\AMSI\\Providers\\' and '\\SOFTWARE\\WOW6432Node\\Microsoft\\AMSI\\Providers\\'. However, it's crucial to exclude events triggered by legitimate processes that start from 'C:\\Windows\\System32\\', 'C:\\Program Files\\', and 'C:\\Program Files (x86)\\' to reduce false positives. Bear in mind that legitimate security products might add their own AMSI providers, and these should be filtered out according to your specific environment to avoid misinterpreting benign activities as malicious. This detection strategy is essential for identifying efforts by attackers to gain persistence on a system by manipulating the Anti-Malware Scan Interface (AMSI) through the registry, and it is classified at a high level of importance.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "when an attacker registers a new AMSI provider in order to achieve persistence",
      "answer": "In order to detect when an attacker registers a new AMSI provider in order to achieve persistence, you should: Focus on monitoring registry addition events on Windows systems, specifically looking into cases where keys are created under the registry paths '\\SOFTWARE\\Microsoft\\AMSI\\Providers\\' and '\\SOFTWARE\\WOW6432Node\\Microsoft\\AMSI\\Providers\\'. However, it's crucial to exclude events triggered by legitimate processes that start from 'C:\\Windows\\System32\\', 'C:\\Program Files\\', and 'C:\\Program Files (x86)\\' to reduce false positives. Bear in mind that legitimate security products might add their own AMSI providers, and these should be filtered out according to your specific environment to avoid misinterpreting benign activities as malicious. This detection strategy is essential for identifying efforts by attackers to gain persistence on a system by manipulating the Anti-Malware Scan Interface (AMSI) through the registry, and it is classified at a high level of importance."
    }
  },
  {
    "instruction": "How can I detect: Adversaries may attempt to get a listing of network connections to or from the compromised system they are currently accessing or from remote systems by querying for information over the network.",
    "context": "",
    "output": "In order to detect adversaries attempting to get a listing of network connections to or from the compromised system they are currently accessing or from remote systems by querying for information over the network, you should focus on monitoring the PowerShell command usage on Windows systems, especially within the classic PowerShell start logs. Specifically, look for instances where the PowerShell command `Get-NetTCPConnection` is executed. This command retrieves information about TCP connections on the system, which could be indicative of an adversary trying to understand the network landscape and identify potential targets or existing connections that can be exploited. The detection of this activity is considered to be of low level due to the possibility of false positives, as there might be legitimate uses of the `Get-NetTCPConnection` command in administrative or maintenance tasks. However, consistent monitoring and context analysis are crucial for distinguishing between benign and malicious uses of this command in the environment.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Adversaries may attempt to get a listing of network connections to or from the compromised system they are currently accessing or from remote systems by querying for information over the network.",
      "answer": "In order to detect adversaries attempting to get a listing of network connections to or from the compromised system they are currently accessing or from remote systems by querying for information over the network, you should focus on monitoring the PowerShell command usage on Windows systems, especially within the classic PowerShell start logs. Specifically, look for instances where the PowerShell command `Get-NetTCPConnection` is executed. This command retrieves information about TCP connections on the system, which could be indicative of an adversary trying to understand the network landscape and identify potential targets or existing connections that can be exploited. The detection of this activity is considered to be of low level due to the possibility of false positives, as there might be legitimate uses of the `Get-NetTCPConnection` command in administrative or maintenance tasks. However, consistent monitoring and context analysis are crucial for distinguishing between benign and malicious uses of this command in the environment."
    }
  },
  {
    "instruction": "How to detect: execution of the hacktool SafetyKatz via PE information and default Image name",
    "context": "",
    "output": "In order to detect the execution of the hacktool SafetyKatz via PE information and default Image name, you should: Focus on monitoring process creation logs within Windows environments for any instances where the image name ends with '\\SafetyKatz.exe', the original file name is specified as 'SafetyKatz.exe', or the description is exactly 'SafetyKatz'. These indicators are critical for identifying potential malicious activities associated with SafetyKatz, a well-known tool used in cyber attacks for extracting sensitive information. The detection of such activities is crucial, with false positives being unlikely, indicating a high confidence in these specific attributes as indicators of compromise. By focusing on these specific characteristics within the process creation logs, efforts can be concentrated on a vital aspect of monitoring for malicious activity, aligning with tactics and techniques that include but are not limited to credential access.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of the hacktool SafetyKatz via PE information and default Image name",
      "answer": "In order to detect the execution of the hacktool SafetyKatz via PE information and default Image name, you should: Focus on monitoring process creation logs within Windows environments for any instances where the image name ends with '\\SafetyKatz.exe', the original file name is specified as 'SafetyKatz.exe', or the description is exactly 'SafetyKatz'. These indicators are critical for identifying potential malicious activities associated with SafetyKatz, a well-known tool used in cyber attacks for extracting sensitive information. The detection of such activities is crucial, with false positives being unlikely, indicating a high confidence in these specific attributes as indicators of compromise. By focusing on these specific characteristics within the process creation logs, efforts can be concentrated on a vital aspect of monitoring for malicious activity, aligning with tactics and techniques that include but are not limited to credential access."
    }
  },
  {
    "instruction": "Explain how should I detect the following: execution of the POWERHOLD script seen used by FIN7 as reported by WithSecureLabs",
    "context": "",
    "output": "In order to detect the execution of the POWERHOLD script seen used by FIN7 as reported by WithSecureLabs, you should: Monitor Windows PowerShell script logs for specific script contents that include all of the following indicators: the use of the '$env:APPDATA' environment variable, the presence of a function named 'MainPayload', the utilization of the '::WriteAllBytes' method, and the execution of 'wscript.exe'. These indicators, when found together in PowerShell scripts, suggest the script may be part of the malicious activity associated with the POWERHOLD script, which is linked to the cybercriminal group FIN7. It is important to note the level of concern for this detection is high, suggesting that occurrences matching these conditions should be investigated promptly due to the potential severity of the threat. However, be aware that there might be instances where legitimate activities inadvertently match these criteria, although such false positives are not specifically known.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of the POWERHOLD script seen used by FIN7 as reported by WithSecureLabs",
      "answer": "In order to detect the execution of the POWERHOLD script seen used by FIN7 as reported by WithSecureLabs, you should: Monitor Windows PowerShell script logs for specific script contents that include all of the following indicators: the use of the '$env:APPDATA' environment variable, the presence of a function named 'MainPayload', the utilization of the '::WriteAllBytes' method, and the execution of 'wscript.exe'. These indicators, when found together in PowerShell scripts, suggest the script may be part of the malicious activity associated with the POWERHOLD script, which is linked to the cybercriminal group FIN7. It is important to note the level of concern for this detection is high, suggesting that occurrences matching these conditions should be investigated promptly due to the potential severity of the threat. However, be aware that there might be instances where legitimate activities inadvertently match these criteria, although such false positives are not specifically known."
    }
  },
  {
    "instruction": "How to detect: Detect the harvesting of wifi credentials using netsh.exe",
    "context": "",
    "output": "In order to detect the harvesting of wifi credentials using netsh.exe, you should: focus on monitoring process creation events on Windows systems. Specifically, keep an eye out for instances where the process image name ends with '\\netsh.exe' or has the original file name 'netsh.exe'. Additionally, be vigilant for command lines that contain all of the following strings: 'wlan', ' s', ' p', ' k', and '=clear'. These indicators suggest that netsh.exe is being used in a manner consistent with an attempt to extract WiFi credentials, which warrants further investigation. It's important to note that while this is a medium-level alert, there may be unknown circumstances that trigger false positives, so context and additional analysis are necessary to validate the threat.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Detect the harvesting of wifi credentials using netsh.exe",
      "answer": "In order to detect the harvesting of wifi credentials using netsh.exe, you should: focus on monitoring process creation events on Windows systems. Specifically, keep an eye out for instances where the process image name ends with '\\netsh.exe' or has the original file name 'netsh.exe'. Additionally, be vigilant for command lines that contain all of the following strings: 'wlan', ' s', ' p', ' k', and '=clear'. These indicators suggest that netsh.exe is being used in a manner consistent with an attempt to extract WiFi credentials, which warrants further investigation. It's important to note that while this is a medium-level alert, there may be unknown circumstances that trigger false positives, so context and additional analysis are necessary to validate the threat."
    }
  },
  {
    "instruction": "How to detect: HandleKatz opening LSASS to duplicate its handle to later dump the memory without opening any new handles",
    "context": "",
    "output": "In order to detect HandleKatz opening LSASS to duplicate its handle to later dump the memory without opening any new handles, you should: Monitor Windows process access logs specifically focusing on accesses to the LSASS (Local Security Authority Subsystem Service) process. Look for any process that ends its target image name with '\\lsass.exe', signifying it's interacting with LSASS, and where the granted access rights are specifically '0x1440'. This access code indicates the process is requesting permissions only for duplicating handles (PROCESS_DUP_HANDLE), querying limited information (PROCESS_QUERY_LIMITED_INFORMATION), and querying information (PROCESS_QUERY_INFORMATION) about LSASS, which are minimal and stealthy permissions for an attack. Also, scrutinize the call trace logs for entries that start with 'C:\\Windows\\System32\\ntdll.dll+', contain an unknown marker '|UNKNOWN(', and end with a parenthesis ')'. This pattern in the call trace suggests an anomalous or injected call possibly attempting to manipulate LSASS in a covert manner, characteristic of HandleKatz operation. Paying attention to these specific indicators within the respective Windows log sources is crucial for early detection of this sophisticated attack tactic.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "HandleKatz opening LSASS to duplicate its handle to later dump the memory without opening any new handles",
      "answer": "In order to detect HandleKatz opening LSASS to duplicate its handle to later dump the memory without opening any new handles, you should: Monitor Windows process access logs specifically focusing on accesses to the LSASS (Local Security Authority Subsystem Service) process. Look for any process that ends its target image name with '\\lsass.exe', signifying it's interacting with LSASS, and where the granted access rights are specifically '0x1440'. This access code indicates the process is requesting permissions only for duplicating handles (PROCESS_DUP_HANDLE), querying limited information (PROCESS_QUERY_LIMITED_INFORMATION), and querying information (PROCESS_QUERY_INFORMATION) about LSASS, which are minimal and stealthy permissions for an attack. Also, scrutinize the call trace logs for entries that start with 'C:\\Windows\\System32\\ntdll.dll+', contain an unknown marker '|UNKNOWN(', and end with a parenthesis ')'. This pattern in the call trace suggests an anomalous or injected call possibly attempting to manipulate LSASS in a covert manner, characteristic of HandleKatz operation. Paying attention to these specific indicators within the respective Windows log sources is crucial for early detection of this sophisticated attack tactic."
    }
  },
  {
    "instruction": "Can you explain how to detect: Execute commands and binaries from the context of \"forfiles\". This is used as a LOLBIN for example to bypass application whitelisting.",
    "context": "",
    "output": "Certainly!\n\nIn order to execute commands and binaries from the context of \"forfiles\", a method employed for example to bypass application whitelisting, you should monitor process creation events on Windows systems for specific characteristics associated with the use of \"forfiles.exe\". Detecting such activity involves identifying instances where \u201cforfiles.exe\u201d is executed, which can be pinpointed by looking for process creation events where the image path ends with \"\\forfiles.exe\" or the original file name is exactly \"forfiles.exe\". Additionally, it is crucial to pay attention to the command line parameters used with \"forfiles.exe\", specifically looking for occurrences of the \"/p\", \"-p\", \"/m\", \"-m\", \"/c\", or \"-c\" flags, as these are indicative of potential malicious use for command execution or script processing. It\u2019s important to note that while these indicators can point towards a malicious attempt at executing commands or binaries in a way that bypasses restrictions, there could be legitimate administrative or scripting activities that utilize \"forfiles.exe\" with these parameters. Thus, these detections should be considered with medium urgency and investigated to differentiate between benign use and malicious activities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Execute commands and binaries from the context of \"forfiles\". This is used as a LOLBIN for example to bypass application whitelisting.",
      "answer": "In order to execute commands and binaries from the context of \"forfiles\", a method employed for example to bypass application whitelisting, you should monitor process creation events on Windows systems for specific characteristics associated with the use of \"forfiles.exe\". Detecting such activity involves identifying instances where \u201cforfiles.exe\u201d is executed, which can be pinpointed by looking for process creation events where the image path ends with \"\\forfiles.exe\" or the original file name is exactly \"forfiles.exe\". Additionally, it is crucial to pay attention to the command line parameters used with \"forfiles.exe\", specifically looking for occurrences of the \"/p\", \"-p\", \"/m\", \"-m\", \"/c\", or \"-c\" flags, as these are indicative of potential malicious use for command execution or script processing. It\u2019s important to note that while these indicators can point towards a malicious attempt at executing commands or binaries in a way that bypasses restrictions, there could be legitimate administrative or scripting activities that utilize \"forfiles.exe\" with these parameters. Thus, these detections should be considered with medium urgency and investigated to differentiate between benign use and malicious activities."
    }
  },
  {
    "instruction": "Please help me detect the following: suspicious child process of Script Event Consumer (scrcons.exe).",
    "context": "",
    "output": "Sure!\nIn order to detect a suspicious child process of Script Event Consumer (scrcons.exe), you should: Monitor the creation of processes on Windows systems, specifically focusing on instances where the Script Event Consumer (`scrcons.exe`) spawns certain child processes. Be vigilant for the initiation of these processes as children of `scrcons.exe`: Service Host Process (`svchost.exe`), COM Surrogate (`dllhost.exe`), Windows PowerShell (`powershell.exe`), PowerShell Core (`pwsh.exe`), Windows Script Host (`wscript.exe`), Command Based Script Host (`cscript.exe`), Task Scheduler (`schtasks.exe`), Microsoft Register Server (`regsvr32.exe`), Microsoft HTML Application Host (`mshta.exe`), Run a DLL as an App (`rundll32.exe`), Windows Installer Service (`msiexec.exe`), and Microsoft Build Engine (`msbuild.exe`). Collecting and analyzing the command lines used to initiate these processes, along with the parent process's command line, is crucial. Although there might be legitimate use cases, the occurrence of these patterns should be considered with high suspicion due to the potential for misuse by malicious actors to perform unauthorized actions on the system.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious child process of Script Event Consumer (scrcons.exe).",
      "answer": "In order to detect a suspicious child process of Script Event Consumer (scrcons.exe), you should: Monitor the creation of processes on Windows systems, specifically focusing on instances where the Script Event Consumer (`scrcons.exe`) spawns certain child processes. Be vigilant for the initiation of these processes as children of `scrcons.exe`: Service Host Process (`svchost.exe`), COM Surrogate (`dllhost.exe`), Windows PowerShell (`powershell.exe`), PowerShell Core (`pwsh.exe`), Windows Script Host (`wscript.exe`), Command Based Script Host (`cscript.exe`), Task Scheduler (`schtasks.exe`), Microsoft Register Server (`regsvr32.exe`), Microsoft HTML Application Host (`mshta.exe`), Run a DLL as an App (`rundll32.exe`), Windows Installer Service (`msiexec.exe`), and Microsoft Build Engine (`msbuild.exe`). Collecting and analyzing the command lines used to initiate these processes, along with the parent process's command line, is crucial. Although there might be legitimate use cases, the occurrence of these patterns should be considered with high suspicion due to the potential for misuse by malicious actors to perform unauthorized actions on the system."
    }
  },
  {
    "instruction": "How can I detect: Obfuscated use of Environment Variables to execute PowerShell",
    "context": "",
    "output": "In order to detect obfuscated use of environment variables to execute PowerShell, you should monitor Windows PowerShell modules for specific patterns of command execution that attempt to disguise their activities. This involves looking for commands that use the `cmd` utility with either `/c` or `/r` options followed by a set of characters indicating an attempt to set an environment variable. The pattern to watch involves a complex structure where the `set` command is used with a variable name ranging from three to six characters in length, immediately followed by a secretive usage of curly braces and numbers (indicating an attempt at obfuscation by accessing environment variables in an unusual way) and then proceeding with a `-f` option possibly indicating formatting or further command instructions contained within parentheses.\n\nThis detection relies on observing command-line parameters that fit the above description within the PowerShell module logs (`ps_module` category) on Windows systems. Such activities can be indicative of attempts to evade detection by using environment variables in non-standard ways to execute malicious PowerShell scripts or commands.\n\nIn terms of cybersecurity, these activities are associated with tactics and techniques that include but are not limited to Execution, Defense Evasion, and possibly Discovery if the attackers are probing the environment variables for information. While it's recognized that there may be unknown legitimate use cases that could potentially trigger this detection pattern, the level of threat is considered high due to the sophisticated nature of the obfuscation techniques used. Therefore, any hits on this pattern demands thorough investigation to rule out or confirm malicious intent.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Obfuscated use of Environment Variables to execute PowerShell",
      "answer": "In order to detect obfuscated use of environment variables to execute PowerShell, you should monitor Windows PowerShell modules for specific patterns of command execution that attempt to disguise their activities. This involves looking for commands that use the `cmd` utility with either `/c` or `/r` options followed by a set of characters indicating an attempt to set an environment variable. The pattern to watch involves a complex structure where the `set` command is used with a variable name ranging from three to six characters in length, immediately followed by a secretive usage of curly braces and numbers (indicating an attempt at obfuscation by accessing environment variables in an unusual way) and then proceeding with a `-f` option possibly indicating formatting or further command instructions contained within parentheses.\n\nThis detection relies on observing command-line parameters that fit the above description within the PowerShell module logs (`ps_module` category) on Windows systems. Such activities can be indicative of attempts to evade detection by using environment variables in non-standard ways to execute malicious PowerShell scripts or commands.\n\nIn terms of cybersecurity, these activities are associated with tactics and techniques that include but are not limited to Execution, Defense Evasion, and possibly Discovery if the attackers are probing the environment variables for information. While it's recognized that there may be unknown legitimate use cases that could potentially trigger this detection pattern, the level of threat is considered high due to the sophisticated nature of the obfuscation techniques used. Therefore, any hits on this pattern demands thorough investigation to rule out or confirm malicious intent."
    }
  },
  {
    "instruction": "Please help me detect the following: new commands that add new printer port which point to suspicious file",
    "context": "",
    "output": "Sure!\nIn order to detect new commands that add a new printer port which point to suspicious file, you should: Monitor Windows process creation logs for commands that are attempting to add a printer port with the name parameter. Specifically, watch for command lines that contain 'Add-PrinterPort -Name' in conjunction with file extensions such as '.exe', '.dll', or '.bat', indicating the potential for malicious files being linked to the printer port. Additionally, be alert for the command line containing 'Generic / Text Only', which may also signify an attempt to add a suspicious printer port. It's important to note that legitimate actions, such as the installation of a new printer port on a host, can generate false positives. Given the high level of risk associated with this behavior, any matches should be investigated promptly.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "new commands that add new printer port which point to suspicious file",
      "answer": "In order to detect new commands that add a new printer port which point to suspicious file, you should: Monitor Windows process creation logs for commands that are attempting to add a printer port with the name parameter. Specifically, watch for command lines that contain 'Add-PrinterPort -Name' in conjunction with file extensions such as '.exe', '.dll', or '.bat', indicating the potential for malicious files being linked to the printer port. Additionally, be alert for the command line containing 'Generic / Text Only', which may also signify an attempt to add a suspicious printer port. It's important to note that legitimate actions, such as the installation of a new printer port on a host, can generate false positives. Given the high level of risk associated with this behavior, any matches should be investigated promptly."
    }
  },
  {
    "instruction": "Please help me detect the following: removal of a port or application rule in the Windows Firewall configuration using netsh",
    "context": "",
    "output": "Sure!\nIn order to detect the removal of a port or application rule in the Windows Firewall configuration using netsh, you should: Look for the creation of processes on Windows systems specifically invoking 'netsh.exe', either by the exact name in the Image path or by the OriginalFileName. Pay attention to commands that include both 'firewall' and 'delete' within the CommandLine to catch incidences where firewall rules are being altered. However, ensure to exclude any actions originating from 'Dropbox.exe' or containing 'name=Dropbox' in the command line, as these are marked as known exceptions. Be aware that legitimate administration activities or software installations and removals might trigger this detection, which has been classified with a medium level of urgency. This process is aligned with identifying and mitigating tactics where attackers might try to disable security measures by manipulating firewall rules.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "removal of a port or application rule in the Windows Firewall configuration using netsh",
      "answer": "In order to detect the removal of a port or application rule in the Windows Firewall configuration using netsh, you should: Look for the creation of processes on Windows systems specifically invoking 'netsh.exe', either by the exact name in the Image path or by the OriginalFileName. Pay attention to commands that include both 'firewall' and 'delete' within the CommandLine to catch incidences where firewall rules are being altered. However, ensure to exclude any actions originating from 'Dropbox.exe' or containing 'name=Dropbox' in the command line, as these are marked as known exceptions. Be aware that legitimate administration activities or software installations and removals might trigger this detection, which has been classified with a medium level of urgency. This process is aligned with identifying and mitigating tactics where attackers might try to disable security measures by manipulating firewall rules."
    }
  },
  {
    "instruction": "Can you explain how to detect: creation of files with an \"LNK\" as a second extension. This is sometimes used by malware as a method to abuse the fact that Windows hides the \"LNK\" extension by default.\n",
    "context": "",
    "output": "Certainly!\n\nIn order to detect the creation of files with an \"LNK\" as a second extension, which is sometimes used by malware as a method to abuse the fact that Windows hides the \"LNK\" extension by default, you should monitor for the occurrence of file creation events within the Windows environment, especially focusing on files that end with '.lnk' extension. These files are of particular interest when their names contain common document and image formats as part of their names, such as '.doc', '.docx', '.jpg', '.pdf', '.ppt', '.pptx', '.xls', and '.xlsx'. \n\nTo reduce false positives and focus the detection, it is advised to exclude events that relate to files created in certain directories that are generally used by legitimate applications. Specifically, files created in the '\\AppData\\Roaming\\Microsoft\\Windows\\Recent\\' directory should be excluded as these often relate to non-malicious activities. Furthermore, files executed or associated with common Microsoft Office applications (Excel, PowerPoint, Word) and located in directories related to recent files used by these applications ('\\AppData\\Roaming\\Microsoft\\Office\\Recent\\', '\\AppData\\Roaming\\Microsoft\\Excel', '\\AppData\\Roaming\\Microsoft\\PowerPoint', '\\AppData\\Roaming\\Microsoft\\Word') should also be checked; if a detection matches these criteria, it might be considered as a false positive, unless other suspicious activities are noticed.\n\nThis approach aims at striking a balance between detecting potentially malicious activities related to the misuse of .lnk files and minimizing the number of false positives by considering the context in which these files are created. It is worth noting that some amount of tuning might be necessary, especially when dealing with directories used by third-party applications that are not inherently malicious but may also use similar file naming conventions.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "creation of files with an \"LNK\" as a second extension. This is sometimes used by malware as a method to abuse the fact that Windows hides the \"LNK\" extension by default.\n",
      "answer": "In order to detect the creation of files with an \"LNK\" as a second extension, which is sometimes used by malware as a method to abuse the fact that Windows hides the \"LNK\" extension by default, you should monitor for the occurrence of file creation events within the Windows environment, especially focusing on files that end with '.lnk' extension. These files are of particular interest when their names contain common document and image formats as part of their names, such as '.doc', '.docx', '.jpg', '.pdf', '.ppt', '.pptx', '.xls', and '.xlsx'. \n\nTo reduce false positives and focus the detection, it is advised to exclude events that relate to files created in certain directories that are generally used by legitimate applications. Specifically, files created in the '\\AppData\\Roaming\\Microsoft\\Windows\\Recent\\' directory should be excluded as these often relate to non-malicious activities. Furthermore, files executed or associated with common Microsoft Office applications (Excel, PowerPoint, Word) and located in directories related to recent files used by these applications ('\\AppData\\Roaming\\Microsoft\\Office\\Recent\\', '\\AppData\\Roaming\\Microsoft\\Excel', '\\AppData\\Roaming\\Microsoft\\PowerPoint', '\\AppData\\Roaming\\Microsoft\\Word') should also be checked; if a detection matches these criteria, it might be considered as a false positive, unless other suspicious activities are noticed.\n\nThis approach aims at striking a balance between detecting potentially malicious activities related to the misuse of .lnk files and minimizing the number of false positives by considering the context in which these files are created. It is worth noting that some amount of tuning might be necessary, especially when dealing with directories used by third-party applications that are not inherently malicious but may also use similar file naming conventions."
    }
  },
  {
    "instruction": "Please help me detect the following: use of aspnet_regiis to decrypt Microsoft IIS connection strings. An attacker with Microsoft IIS web server access via a webshell or alike can decrypt and dump any hardcoded connection strings, such as the MSSQL service account password using aspnet_regiis command.",
    "context": "",
    "output": "Sure!\nIn order to detect the use of aspnet_regiis to decrypt Microsoft IIS connection strings, where an attacker with Microsoft IIS web server access via a webshell or alike can decrypt and dump any hardcoded connection strings, such as the MSSQL service account password using aspnet_regiis command, you should: Monitor for the creation of processes on Windows systems that involve the aspnet_regiis.exe file, particularly when the command line executed includes both 'connectionStrings' and '-pdf'. This detection is critical as it identifies attempts to decrypt and access sensitive information typically found in Microsoft IIS connection strings, which could include service account passwords. Flagging any instances where these criteria are met is crucial since this activity is highly suspicious and often indicative of an attacker exploiting access to a Microsoft IIS web server to extract sensitive data. Although the possibility of false positives is noted as unknown, the high level of concern warrants close observation of events matching these conditions.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "use of aspnet_regiis to decrypt Microsoft IIS connection strings. An attacker with Microsoft IIS web server access via a webshell or alike can decrypt and dump any hardcoded connection strings, such as the MSSQL service account password using aspnet_regiis command.",
      "answer": "In order to detect the use of aspnet_regiis to decrypt Microsoft IIS connection strings, where an attacker with Microsoft IIS web server access via a webshell or alike can decrypt and dump any hardcoded connection strings, such as the MSSQL service account password using aspnet_regiis command, you should: Monitor for the creation of processes on Windows systems that involve the aspnet_regiis.exe file, particularly when the command line executed includes both 'connectionStrings' and '-pdf'. This detection is critical as it identifies attempts to decrypt and access sensitive information typically found in Microsoft IIS connection strings, which could include service account passwords. Flagging any instances where these criteria are met is crucial since this activity is highly suspicious and often indicative of an attacker exploiting access to a Microsoft IIS web server to extract sensitive data. Although the possibility of false positives is noted as unknown, the high level of concern warrants close observation of events matching these conditions."
    }
  },
  {
    "instruction": "Can you explain how to detect: Obfuscated Powershell via COMPRESS OBFUSCATION",
    "context": "",
    "output": "Certainly!\n\nIn order to detect obfuscated Powershell via COMPRESS OBFUSCATION, you should analyze process creation logs from Windows systems for specific command line patterns that indicate this type of obfuscation. Particularly, you should look for commands that contain all of the following elements: 'new-object' and 'text.encoding]::ascii'. Additionally, you should check for the presence of any of these elements in the command line arguments: 'system.io.compression.deflatestream', 'system.io.streamreader', or 'readtoend('. These patterns are common in PowerShell scripts that utilize compression techniques to obfuscate the script contents, making it harder to detect malicious activity. It's crucial to monitor for these indications, despite the potential for unknown false positives, as they are associated with medium-level security threats. The detection focuses on PowerShell invocations that employ specific .NET classes and methods related to ASCII encoding and stream manipulation, which are techniques commonly used in compressed obfuscation to disguise and execute malicious code.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Obfuscated Powershell via COMPRESS OBFUSCATION",
      "answer": "In order to detect obfuscated Powershell via COMPRESS OBFUSCATION, you should analyze process creation logs from Windows systems for specific command line patterns that indicate this type of obfuscation. Particularly, you should look for commands that contain all of the following elements: 'new-object' and 'text.encoding]::ascii'. Additionally, you should check for the presence of any of these elements in the command line arguments: 'system.io.compression.deflatestream', 'system.io.streamreader', or 'readtoend('. These patterns are common in PowerShell scripts that utilize compression techniques to obfuscate the script contents, making it harder to detect malicious activity. It's crucial to monitor for these indications, despite the potential for unknown false positives, as they are associated with medium-level security threats. The detection focuses on PowerShell invocations that employ specific .NET classes and methods related to ASCII encoding and stream manipulation, which are techniques commonly used in compressed obfuscation to disguise and execute malicious code."
    }
  },
  {
    "instruction": "How can I detect: Detect use of the Windows 8.3 short name. Which could be used as a method to avoid command-line detection",
    "context": "",
    "output": "In order to detect use of the Windows 8.3 short name, which could be used as a method to avoid command-line detection, you should: Focus on monitoring Windows process creation logs for commands that contain 8.3 short names, identifiable by patterns such as '~1\\' and '~2\\'. However, it's essential to exclude certain parent processes from triggering alerts. Specifically, ignore processes initiated by `C:\\Windows\\System32\\Dism.exe`, `C:\\Windows\\System32\\cleanmgr.exe`, `C:\\Program Files\\GPSoftware\\Directory Opus\\dopus.exe`, and processes ending with `\\WebEx\\WebexHost.exe`, `\\thor\\thor64.exe`, `\\veam.backup.shell.exe`, `\\winget.exe`, `\\Everything\\Everything.exe`, or contain `\\AppData\\Local\\Temp\\WinGet\\`. Additionally, command lines that include paths such as `\\appdata\\local\\webex\\webex64\\meetings\\wbxreport.exe`, `C:\\Program Files\\Git\\post-install.bat`, or `C:\\Program Files\\Git\\cmd\\scalar.exe` should also be excluded. This approach helps mitigate false positives, especially since legitimate applications might occasionally use the 8.3 naming convention. Always investigate the context of the parent and child process if a potential match is detected. The associated MITRE ATT&CK tactics and techniques for this detection include Execution and Defense Evasion.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Detect use of the Windows 8.3 short name. Which could be used as a method to avoid command-line detection",
      "answer": "In order to detect use of the Windows 8.3 short name, which could be used as a method to avoid command-line detection, you should: Focus on monitoring Windows process creation logs for commands that contain 8.3 short names, identifiable by patterns such as '~1\\' and '~2\\'. However, it's essential to exclude certain parent processes from triggering alerts. Specifically, ignore processes initiated by `C:\\Windows\\System32\\Dism.exe`, `C:\\Windows\\System32\\cleanmgr.exe`, `C:\\Program Files\\GPSoftware\\Directory Opus\\dopus.exe`, and processes ending with `\\WebEx\\WebexHost.exe`, `\\thor\\thor64.exe`, `\\veam.backup.shell.exe`, `\\winget.exe`, `\\Everything\\Everything.exe`, or contain `\\AppData\\Local\\Temp\\WinGet\\`. Additionally, command lines that include paths such as `\\appdata\\local\\webex\\webex64\\meetings\\wbxreport.exe`, `C:\\Program Files\\Git\\post-install.bat`, or `C:\\Program Files\\Git\\cmd\\scalar.exe` should also be excluded. This approach helps mitigate false positives, especially since legitimate applications might occasionally use the 8.3 naming convention. Always investigate the context of the parent and child process if a potential match is detected. The associated MITRE ATT&CK tactics and techniques for this detection include Execution and Defense Evasion."
    }
  },
  {
    "instruction": "Explain how should I detect the following: Base64 encoded Shellcode",
    "context": "",
    "output": "In order to detect Base64 encoded Shellcode, you should: focus on monitoring Windows PowerShell scripts, as this specific detection mechanism is applied within the context of PowerShell script activity. It is crucial that Script Block Logging is enabled to capture the necessary data for analysis. The detection revolves around identifying specific base64 encoded strings within the ScriptBlockText content of PowerShell scripts. Specifically, the presence of 'AAAAYInlM' must be observed alongside either 'OiCAAAAYInlM' or 'OiJAAAAYInlM' within the script text to trigger an alert. This detection is of high importance due to the nature of the attack it aims to uncover, yet it is acknowledged that there may be instances where false positives occur, although such instances are currently unknown. The strategy employs a combination of these conditions to pinpoint potential malicious script executions resembling the encoding patterns of shellcode, which are commonly used in various attack scenarios.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Base64 encoded Shellcode",
      "answer": "In order to detect Base64 encoded Shellcode, you should: focus on monitoring Windows PowerShell scripts, as this specific detection mechanism is applied within the context of PowerShell script activity. It is crucial that Script Block Logging is enabled to capture the necessary data for analysis. The detection revolves around identifying specific base64 encoded strings within the ScriptBlockText content of PowerShell scripts. Specifically, the presence of 'AAAAYInlM' must be observed alongside either 'OiCAAAAYInlM' or 'OiJAAAAYInlM' within the script text to trigger an alert. This detection is of high importance due to the nature of the attack it aims to uncover, yet it is acknowledged that there may be instances where false positives occur, although such instances are currently unknown. The strategy employs a combination of these conditions to pinpoint potential malicious script executions resembling the encoding patterns of shellcode, which are commonly used in various attack scenarios."
    }
  },
  {
    "instruction": "Please help me detect the following: potential DLL sideloading of rcdll.dll",
    "context": "",
    "output": "Sure!\nIn order to detect potential DLL sideloading of rcdll.dll, you should: Monitor for instances where the specific Dynamic Link Library (DLL) file named 'rcdll.dll' is loaded into the memory space of a process on Windows systems, particularly paying attention to the event of this DLL being loaded outside of the usual, legitimate paths. Typically, 'rcdll.dll' may be legitimately loaded from paths associated with Microsoft Visual Studio or the Windows Kits directories. Hence, any loading of 'rcdll.dll' from locations that do not start with 'C:\\Program Files (x86)\\Microsoft Visual Studio\\' or 'C:\\Program Files (x86)\\Windows Kits\\' should be flagged for further investigation. This detection mechanism is important because attackers might attempt to exploit legitimate processes by sideloading a malicious version of 'rcdll.dll', a technique that could bypass traditional security measures. The detection focuses on the image load category within the Windows environment, drawing attention to instances that diverge from the expected, safeguarded behavior. It's also noted that while this checking mechanism is in place, cases of unknown false positives are acknowledged, reinforcing the need for periodic review and validation of the detection logic to maintain a high level of security vigilance.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential DLL sideloading of rcdll.dll",
      "answer": "In order to detect potential DLL sideloading of rcdll.dll, you should: Monitor for instances where the specific Dynamic Link Library (DLL) file named 'rcdll.dll' is loaded into the memory space of a process on Windows systems, particularly paying attention to the event of this DLL being loaded outside of the usual, legitimate paths. Typically, 'rcdll.dll' may be legitimately loaded from paths associated with Microsoft Visual Studio or the Windows Kits directories. Hence, any loading of 'rcdll.dll' from locations that do not start with 'C:\\Program Files (x86)\\Microsoft Visual Studio\\' or 'C:\\Program Files (x86)\\Windows Kits\\' should be flagged for further investigation. This detection mechanism is important because attackers might attempt to exploit legitimate processes by sideloading a malicious version of 'rcdll.dll', a technique that could bypass traditional security measures. The detection focuses on the image load category within the Windows environment, drawing attention to instances that diverge from the expected, safeguarded behavior. It's also noted that while this checking mechanism is in place, cases of unknown false positives are acknowledged, reinforcing the need for periodic review and validation of the detection logic to maintain a high level of security vigilance."
    }
  },
  {
    "instruction": "How to detect: powershell scripts that creates sockets/listeners which could be indicative of tunneling activity",
    "context": "",
    "output": "In order to detect PowerShell scripts that create sockets/listeners which could be indicative of tunneling activity, you should: focus on monitoring Windows PowerShell script logs, specifically ensuring that Script Block Logging is enabled. Look for occurrences within these logs where script texts contain instances of '[System.Net.HttpWebRequest]', 'System.Net.Sockets.TcpListener', and 'AcceptTcpClient'. These specific calls are important indicators that a script is creating network sockets or listeners, suggesting a potential tunneling activity. It's essential to scrutinize these scripts since tunneling can be leveraged to bypass network security measures, allowing unauthorized access to network traffic. Note that there might be instances where such activities are benign, but these would be considered exceptions. The detection of such scripts is rated at a medium severity level, highlighting the importance of being vigilant against this technique commonly associated with malicious activities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "powershell scripts that creates sockets/listeners which could be indicative of tunneling activity",
      "answer": "In order to detect PowerShell scripts that create sockets/listeners which could be indicative of tunneling activity, you should: focus on monitoring Windows PowerShell script logs, specifically ensuring that Script Block Logging is enabled. Look for occurrences within these logs where script texts contain instances of '[System.Net.HttpWebRequest]', 'System.Net.Sockets.TcpListener', and 'AcceptTcpClient'. These specific calls are important indicators that a script is creating network sockets or listeners, suggesting a potential tunneling activity. It's essential to scrutinize these scripts since tunneling can be leveraged to bypass network security measures, allowing unauthorized access to network traffic. Note that there might be instances where such activities are benign, but these would be considered exceptions. The detection of such scripts is rated at a medium severity level, highlighting the importance of being vigilant against this technique commonly associated with malicious activities."
    }
  },
  {
    "instruction": "Explain how should I detect the following: Execute VBscript code that is referenced within the *.bgi file.",
    "context": "",
    "output": "In order to execute VBscript code that is referenced within the *.bgi file, you should monitor the creation of processes on Windows systems, especially focusing on the execution of 'bginfo.exe'. Specifically, look for instances where 'bginfo.exe' is executed with command line parameters that include both '/popup' and '/nolicprompt'. These command line parameters are crucial indicators of the script\u2019s execution attempt without displaying license prompts, potentially for stealthy operations. It's important to note that detecting such activities can be challenging and might result in unknown false positives. The severity of this activity is considered medium.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Execute VBscript code that is referenced within the *.bgi file.",
      "answer": "In order to execute VBscript code that is referenced within the *.bgi file, you should monitor the creation of processes on Windows systems, especially focusing on the execution of 'bginfo.exe'. Specifically, look for instances where 'bginfo.exe' is executed with command line parameters that include both '/popup' and '/nolicprompt'. These command line parameters are crucial indicators of the script\u2019s execution attempt without displaying license prompts, potentially for stealthy operations. It's important to note that detecting such activities can be challenging and might result in unknown false positives. The severity of this activity is considered medium."
    }
  },
  {
    "instruction": "Can you explain how to detect: execution of \"wmic\" with the \"group\" flag.\nAdversaries may attempt to find local system groups and permission settings.\nThe knowledge of local system permission groups can help adversaries determine which groups exist and which users belong to a particular group.\nAdversaries may use this information to determine which users have elevated permissions, such as the users found within the local administrators group.\n",
    "context": "",
    "output": "Certainly!\n\nIn order to detect the execution of \"wmic\" with the \"group\" flag, where adversaries may attempt to find local system groups and permission settings to determine which groups exist and which users belong to them, especially to identify users with elevated permissions, you should: Monitor Windows process creation logs for the execution of 'wmic.exe' or any instance where the original file name is 'wmic.exe'. Specifically, look for command-line instances containing the 'group' flag. This detection is crucial as acquiring knowledge of local system permission groups enables adversaries to understand which users may have administrative rights, aiding in further malicious activities. The rule applies to Windows environments, focusing on capturing the initiation of processes that could indicate an attempt to query local system groups. Keep in mind, the detection confidence is considered low, indicating there might be cases where legitimate use of these commands triggers an alert.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of \"wmic\" with the \"group\" flag.\nAdversaries may attempt to find local system groups and permission settings.\nThe knowledge of local system permission groups can help adversaries determine which groups exist and which users belong to a particular group.\nAdversaries may use this information to determine which users have elevated permissions, such as the users found within the local administrators group.\n",
      "answer": "In order to detect the execution of \"wmic\" with the \"group\" flag, where adversaries may attempt to find local system groups and permission settings to determine which groups exist and which users belong to them, especially to identify users with elevated permissions, you should: Monitor Windows process creation logs for the execution of 'wmic.exe' or any instance where the original file name is 'wmic.exe'. Specifically, look for command-line instances containing the 'group' flag. This detection is crucial as acquiring knowledge of local system permission groups enables adversaries to understand which users may have administrative rights, aiding in further malicious activities. The rule applies to Windows environments, focusing on capturing the initiation of processes that could indicate an attempt to query local system groups. Keep in mind, the detection confidence is considered low, indicating there might be cases where legitimate use of these commands triggers an alert."
    }
  },
  {
    "instruction": "How can I detect: powershell script installed as a Service",
    "context": "",
    "output": "In order to detect a PowerShell script installed as a service, you should focus on monitoring Windows system logs, specifically targeting events logged by the Service Control Manager. Look for event ID 7045, which is indicative of a new service being installed on the system. Pay special attention to the service's image path. If the image path contains references to 'powershell' or 'pwsh', it may suggest that a PowerShell script is being installed as a service, a common technique utilized by adversaries to maintain persistence on a compromised system or execute malicious scripts. It's important to note that while this detection strategy is significant, it may also yield unknown false positives due to legitimate uses of PowerShell scripts as services in some environments. Therefore, the analysis level for this kind of detection is considered high due to the potentially severe implications of PowerShell scripts being maliciously installed as services.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "powershell script installed as a Service",
      "answer": "In order to detect a PowerShell script installed as a service, you should focus on monitoring Windows system logs, specifically targeting events logged by the Service Control Manager. Look for event ID 7045, which is indicative of a new service being installed on the system. Pay special attention to the service's image path. If the image path contains references to 'powershell' or 'pwsh', it may suggest that a PowerShell script is being installed as a service, a common technique utilized by adversaries to maintain persistence on a compromised system or execute malicious scripts. It's important to note that while this detection strategy is significant, it may also yield unknown false positives due to legitimate uses of PowerShell scripts as services in some environments. Therefore, the analysis level for this kind of detection is considered high due to the potentially severe implications of PowerShell scripts being maliciously installed as services."
    }
  },
  {
    "instruction": "Please help me detect the following: when an attacker modifies values of the Disk Cleanup Handler in the registry to achieve persistence via autorun.\nThe disk cleanup manager is part of the operating system.\nIt displays the dialog box [\u2026] The user has the option of enabling or disabling individual handlers by selecting or clearing their check box in the disk cleanup manager's UI.\nAlthough Windows comes with a number of disk cleanup handlers, they aren't designed to handle files produced by other applications.\nInstead, the disk cleanup manager is designed to be flexible and extensible by enabling any developer to implement and register their own disk cleanup handler.\nAny developer can extend the available disk cleanup services by implementing and registering a disk cleanup handler.\n",
    "context": "",
    "output": "Sure!\nIn order to detect when an attacker modifies values of the Disk Cleanup Handler in the registry to achieve persistence via autorun, you should: Monitor the Windows Registry for specific modifications that indicate an attack is taking place. Specifically, focus on the registry category related to settings changes, with emphasis on the Windows product. Detect instances where the event type is SetValue, which suggests that a registry value was modified. Pay close attention to any changes within the path '\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\VolumeCaches\\', as modifications here can relate to the Disk Cleanup Handler.\n\nLook for unauthorized modifications that involve the '\\Autorun' registry key combined with a DWORD value of '0x00000001', indicating an attempt to launch programs without a graphical user interface, potentially during an automated cleanup process. Additionally, monitor for alterations to '\\CleanupString' and '\\PreCleanupString' registry keys. These changes might involve paths or commands associated with common scripting languages or utilities such as 'cmd', 'powershell', 'rundll32', 'mshta', 'cscript', 'wscript', 'wsl', or directories like '\\Users\\Public\\', '\\Windows\\TEMP\\', and '\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\'.\n\nSuch registry modifications are critical to detect because they could indicate that an attacker is trying to gain persistence by executing malicious scripts or programs automatically during disk cleanup operations. Although it's essential to be aware of these indicators, also note that there might be unknown false positives due to the flexible nature of disk cleanup handlers in Windows. This monitoring strategy is situated at a medium level of importance and is associated with tactics and techniques that include persistence via modification of startup tasks or services.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "when an attacker modifies values of the Disk Cleanup Handler in the registry to achieve persistence via autorun.\nThe disk cleanup manager is part of the operating system.\nIt displays the dialog box [\u2026] The user has the option of enabling or disabling individual handlers by selecting or clearing their check box in the disk cleanup manager's UI.\nAlthough Windows comes with a number of disk cleanup handlers, they aren't designed to handle files produced by other applications.\nInstead, the disk cleanup manager is designed to be flexible and extensible by enabling any developer to implement and register their own disk cleanup handler.\nAny developer can extend the available disk cleanup services by implementing and registering a disk cleanup handler.\n",
      "answer": "In order to detect when an attacker modifies values of the Disk Cleanup Handler in the registry to achieve persistence via autorun, you should: Monitor the Windows Registry for specific modifications that indicate an attack is taking place. Specifically, focus on the registry category related to settings changes, with emphasis on the Windows product. Detect instances where the event type is SetValue, which suggests that a registry value was modified. Pay close attention to any changes within the path '\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\VolumeCaches\\', as modifications here can relate to the Disk Cleanup Handler.\n\nLook for unauthorized modifications that involve the '\\Autorun' registry key combined with a DWORD value of '0x00000001', indicating an attempt to launch programs without a graphical user interface, potentially during an automated cleanup process. Additionally, monitor for alterations to '\\CleanupString' and '\\PreCleanupString' registry keys. These changes might involve paths or commands associated with common scripting languages or utilities such as 'cmd', 'powershell', 'rundll32', 'mshta', 'cscript', 'wscript', 'wsl', or directories like '\\Users\\Public\\', '\\Windows\\TEMP\\', and '\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\'.\n\nSuch registry modifications are critical to detect because they could indicate that an attacker is trying to gain persistence by executing malicious scripts or programs automatically during disk cleanup operations. Although it's essential to be aware of these indicators, also note that there might be unknown false positives due to the flexible nature of disk cleanup handlers in Windows. This monitoring strategy is situated at a medium level of importance and is associated with tactics and techniques that include persistence via modification of startup tasks or services."
    }
  },
  {
    "instruction": "Can you explain how to detect: cases in which ngrok, a reverse proxy tool, forwards events to the local RDP port, which could be a sign of malicious behaviour",
    "context": "",
    "output": "Certainly!\n\nIn order to detect cases in which ngrok, a reverse proxy tool, forwards events to the local RDP port, which could be a sign of malicious behaviour, you should: Monitor the Windows 'terminalservices-localsessionmanager' service logs for specific event patterns that indicate potential malicious activity. Look for log entries with an EventID of 21, which corresponds to events related to starting a session on the local machine. Particularly, pay attention to records where the address field contains the value '16777216', as this could signify that ngrok is being used to forward events to the local RDP port. Activities flagged by these criteria should be treated with a high level of suspicion due to their potential malicious nature, although it's important to note that not all detections might represent actual threats, and some might not have known false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "cases in which ngrok, a reverse proxy tool, forwards events to the local RDP port, which could be a sign of malicious behaviour",
      "answer": "In order to detect cases in which ngrok, a reverse proxy tool, forwards events to the local RDP port, which could be a sign of malicious behaviour, you should: Monitor the Windows 'terminalservices-localsessionmanager' service logs for specific event patterns that indicate potential malicious activity. Look for log entries with an EventID of 21, which corresponds to events related to starting a session on the local machine. Particularly, pay attention to records where the address field contains the value '16777216', as this could signify that ngrok is being used to forward events to the local RDP port. Activities flagged by these criteria should be treated with a high level of suspicion due to their potential malicious nature, although it's important to note that not all detections might represent actual threats, and some might not have known false positives."
    }
  },
  {
    "instruction": "How can I detect: execution of ruby with the \"-e\" flag and calls to \"socket\" related functions. This could be an indication of a potential attempt to setup a reverse shell",
    "context": "",
    "output": "In order to detect execution of ruby with the \"-e\" flag and calls to \"socket\" related functions, which could be an indication of a potential attempt to setup a reverse shell, you should monitor process creation logs on Linux systems for instances where the command line includes execution of the 'ruby' command. Specifically, look for commands that utilize the '-e' option along with references to 'rsocket' or 'TCPSocket', which are indicative of socket-related operations that could be employed in the establishment of a reverse shell. Additionally, pay attention to whether these commands are executed within common shell environments, as indicated by the presence of shell names such as 'ash', 'bash', 'bsh', 'csh', 'ksh', 'pdksh', 'sh', or 'tcsh' within the command line. This approach allows for the identification of suspicious behavior that aligns with tactics and techniques related to the execution of potentially malicious code and the use of application layer protocols to facilitate command and control activities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of ruby with the \"-e\" flag and calls to \"socket\" related functions. This could be an indication of a potential attempt to setup a reverse shell",
      "answer": "In order to detect execution of ruby with the \"-e\" flag and calls to \"socket\" related functions, which could be an indication of a potential attempt to setup a reverse shell, you should monitor process creation logs on Linux systems for instances where the command line includes execution of the 'ruby' command. Specifically, look for commands that utilize the '-e' option along with references to 'rsocket' or 'TCPSocket', which are indicative of socket-related operations that could be employed in the establishment of a reverse shell. Additionally, pay attention to whether these commands are executed within common shell environments, as indicated by the presence of shell names such as 'ash', 'bash', 'bsh', 'csh', 'ksh', 'pdksh', 'sh', or 'tcsh' within the command line. This approach allows for the identification of suspicious behavior that aligns with tactics and techniques related to the execution of potentially malicious code and the use of application layer protocols to facilitate command and control activities."
    }
  },
  {
    "instruction": "Can you explain how to detect: use of getsystem Meterpreter/Cobalt Strike command by detecting a specific service starting",
    "context": "",
    "output": "Certainly!\n\nIn order to detect the use of getsystem Meterpreter/Cobalt Strike command by detecting a specific service starting, you should: Monitor Windows process creation events for instances where the parent process is 'services.exe'. Specifically, look for command lines that indicate an attempt to elevate privileges using Meterpreter or Cobalt Strike. These command lines typically involve:\n\n1. The use of 'cmd.exe' or the environment variable '%COMSPEC%' in conjunction with commands that include '/c', 'echo', and reference to a '\\pipe\\', indicating a technique to acquire elevated system privileges.\n2. The use of 'rundll32' with parameters pointing to a DLL file followed by '.dll,a' and '/p:', which is another method employed for privilege escalation.\n\nExclude any command line invocation of 'MpCmdRun', as this is associated with legitimate Microsoft Defender operations. \n\nMonitor and log details such as the computer name, user, and the exact command line used for any event matching these patterns. Be wary of false positives, which may arise from legitimate uses of the command line that coincidentally match these patterns. Due to the high level of risk associated with these techniques, such detections should be prioritized for review.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "use of getsystem Meterpreter/Cobalt Strike command by detecting a specific service starting",
      "answer": "In order to detect the use of getsystem Meterpreter/Cobalt Strike command by detecting a specific service starting, you should: Monitor Windows process creation events for instances where the parent process is 'services.exe'. Specifically, look for command lines that indicate an attempt to elevate privileges using Meterpreter or Cobalt Strike. These command lines typically involve:\n\n1. The use of 'cmd.exe' or the environment variable '%COMSPEC%' in conjunction with commands that include '/c', 'echo', and reference to a '\\pipe\\', indicating a technique to acquire elevated system privileges.\n2. The use of 'rundll32' with parameters pointing to a DLL file followed by '.dll,a' and '/p:', which is another method employed for privilege escalation.\n\nExclude any command line invocation of 'MpCmdRun', as this is associated with legitimate Microsoft Defender operations. \n\nMonitor and log details such as the computer name, user, and the exact command line used for any event matching these patterns. Be wary of false positives, which may arise from legitimate uses of the command line that coincidentally match these patterns. Due to the high level of risk associated with these techniques, such detections should be prioritized for review."
    }
  },
  {
    "instruction": "How can I detect: presence of reversed PowerShell commands in the CommandLine. This is often used as a method of obfuscation by attackers",
    "context": "",
    "output": "In order to detect the presence of reversed PowerShell commands in the CommandLine, which is often used as a method of obfuscation by attackers, you should: focus on monitoring process creation logs in Windows. Look for processes that are ending with either '\\powershell.exe' or '\\pwsh.exe', and also where the OriginalFileName is listed as 'PowerShell.EXE' or 'pwsh.dll'. Additionally, pay attention to the CommandLine for the presence of certain reversed strings like 'hctac', 'kaerb', and 'dnammoc' among others. These strings could indicate the use of reversed commands for obfuscation purposes. However, you should exclude any command lines that contain '-EncodedCommand' or '-enc', as these might lead to false positives. The detection of these patterns is of high importance and it's unlikely to produce false positives. By following these guidelines, you can effectively detect potential obfuscation attempts by attackers using reversed PowerShell commands.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "presence of reversed PowerShell commands in the CommandLine. This is often used as a method of obfuscation by attackers",
      "answer": "In order to detect the presence of reversed PowerShell commands in the CommandLine, which is often used as a method of obfuscation by attackers, you should: focus on monitoring process creation logs in Windows. Look for processes that are ending with either '\\powershell.exe' or '\\pwsh.exe', and also where the OriginalFileName is listed as 'PowerShell.EXE' or 'pwsh.dll'. Additionally, pay attention to the CommandLine for the presence of certain reversed strings like 'hctac', 'kaerb', and 'dnammoc' among others. These strings could indicate the use of reversed commands for obfuscation purposes. However, you should exclude any command lines that contain '-EncodedCommand' or '-enc', as these might lead to false positives. The detection of these patterns is of high importance and it's unlikely to produce false positives. By following these guidelines, you can effectively detect potential obfuscation attempts by attackers using reversed PowerShell commands."
    }
  },
  {
    "instruction": "Please help me detect the following: programs on a Windows system that should not write an archive to disk",
    "context": "",
    "output": "Sure!\nIn order to detect programs on a Windows system that should not write an archive to disk, you should monitor file events for instances where specific applications, which under normal circumstances wouldn't be involved in the creation or dropping of archive files (.zip, .rar, .7z, .diagcab, .appx), are recorded doing so. This detection focuses on a variety of programs including:\n\n- Microsoft Office applications like Word, Excel, PowerPoint, Access, Publisher, Equation Editor, Visio, and WordPad, which are legitimate applications but could be misused to drop malicious archives.\n- Living off the land binaries (LOLBins) such as CertUtil, CertOC, CertReq, DesktopImgDownldr, Esentutl, and Finger. These tools are part of Windows but can be abused to download or drop executable files and archives.\n- Certain applications like Notepad, Acrobat Reader, ReaderCEF (a part of Acrobat Reader), MSHTA, and HH (HTML Help executable) that under typical operation should not be writing archives to disk. Their involvement in such activities could indicate a process injection attack or masquerading, where malware adopts a legitimate name to evade detection.\n\nThe emphasis on these specific executable files and archive types stems from their potential misuse in bypassing security measures, delivering malware, or performing unauthorized actions without the user's knowledge. Monitoring for such anomalies is critical in identifying and mitigating sophisticated cyber threats that leverage legitimate processes for malicious purposes. Tags related to the MITRE ATT&CK framework for this activity include execution, persistence, privilege escalation, defense evasion, and discovery, as this behavior crosses multiple tactics attackers use to gain, maintain control, or gather information from a compromised system.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "programs on a Windows system that should not write an archive to disk",
      "answer": "In order to detect programs on a Windows system that should not write an archive to disk, you should monitor file events for instances where specific applications, which under normal circumstances wouldn't be involved in the creation or dropping of archive files (.zip, .rar, .7z, .diagcab, .appx), are recorded doing so. This detection focuses on a variety of programs including:\n\n- Microsoft Office applications like Word, Excel, PowerPoint, Access, Publisher, Equation Editor, Visio, and WordPad, which are legitimate applications but could be misused to drop malicious archives.\n- Living off the land binaries (LOLBins) such as CertUtil, CertOC, CertReq, DesktopImgDownldr, Esentutl, and Finger. These tools are part of Windows but can be abused to download or drop executable files and archives.\n- Certain applications like Notepad, Acrobat Reader, ReaderCEF (a part of Acrobat Reader), MSHTA, and HH (HTML Help executable) that under typical operation should not be writing archives to disk. Their involvement in such activities could indicate a process injection attack or masquerading, where malware adopts a legitimate name to evade detection.\n\nThe emphasis on these specific executable files and archive types stems from their potential misuse in bypassing security measures, delivering malware, or performing unauthorized actions without the user's knowledge. Monitoring for such anomalies is critical in identifying and mitigating sophisticated cyber threats that leverage legitimate processes for malicious purposes. Tags related to the MITRE ATT&CK framework for this activity include execution, persistence, privilege escalation, defense evasion, and discovery, as this behavior crosses multiple tactics attackers use to gain, maintain control, or gather information from a compromised system."
    }
  },
  {
    "instruction": "How can I detect: creation of an \"svchost\" process with specific command line flags, that were seen present and used by ColdSteel RAT",
    "context": "",
    "output": "In order to detect the creation of an \"svchost\" process with specific command line flags, that were seen present and used by ColdSteel RAT, you should: Focus on monitoring process creation events within Windows environments. Specifically, pay attention to any instance where the process image name ends with '\\svchost.exe' and the command line ends with either ' -k msupdate', ' -k msupdate2', or ' -k alg'. These particular command line flags have been associated with the ColdSteel RAT, thus their presence could indicate a compromise. Considering the critical nature of this detection and the fact that false positives are unlikely, vigilance in tracking such process activities is paramount for maintaining security posture against such threats.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "creation of an \"svchost\" process with specific command line flags, that were seen present and used by ColdSteel RAT",
      "answer": "In order to detect the creation of an \"svchost\" process with specific command line flags, that were seen present and used by ColdSteel RAT, you should: Focus on monitoring process creation events within Windows environments. Specifically, pay attention to any instance where the process image name ends with '\\svchost.exe' and the command line ends with either ' -k msupdate', ' -k msupdate2', or ' -k alg'. These particular command line flags have been associated with the ColdSteel RAT, thus their presence could indicate a compromise. Considering the critical nature of this detection and the fact that false positives are unlikely, vigilance in tracking such process activities is paramount for maintaining security posture against such threats."
    }
  },
  {
    "instruction": "Explain how should I detect the following: shell32.dll executing a DLL in a suspicious directory",
    "context": "",
    "output": "In order to detect shell32.dll executing a DLL in a suspicious directory, you should monitor process creation events on Windows systems. Specifically, keep an eye out for instances where the process image name ends with '\\rundll32.exe' or where the original file name is explicitly 'RUNDLL32.EXE'. Additionally, scrutinize the command line for the following patterns: the command must include both 'shell32.dll' and 'Control_RunDLL' to match, and it may contain references to common ephemeral or user profile directories such as '%AppData%', '%LocalAppData%', '%Temp%', '%tmp%', '\\AppData\\', '\\Temp\\', or '\\Users\\Public\\'. For detection to be considered valid, both the image name or file name criteria and the command line conditions must be met. This approach aims to highlight activities potentially related to malware execution or persistence mechanisms that abuse shell32.dll to load malicious DLLs from directories that attackers often exploit for stealth.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "shell32.dll executing a DLL in a suspicious directory",
      "answer": "In order to detect shell32.dll executing a DLL in a suspicious directory, you should monitor process creation events on Windows systems. Specifically, keep an eye out for instances where the process image name ends with '\\rundll32.exe' or where the original file name is explicitly 'RUNDLL32.EXE'. Additionally, scrutinize the command line for the following patterns: the command must include both 'shell32.dll' and 'Control_RunDLL' to match, and it may contain references to common ephemeral or user profile directories such as '%AppData%', '%LocalAppData%', '%Temp%', '%tmp%', '\\AppData\\', '\\Temp\\', or '\\Users\\Public\\'. For detection to be considered valid, both the image name or file name criteria and the command line conditions must be met. This approach aims to highlight activities potentially related to malware execution or persistence mechanisms that abuse shell32.dll to load malicious DLLs from directories that attackers often exploit for stealth."
    }
  },
  {
    "instruction": "Please help me detect the following: suspicious certreq execution taken from the LOLBAS examples, which can be abused to download (small) files",
    "context": "",
    "output": "Sure!\nIn order to detect a suspicious certreq execution taken from the LOLBAS examples, which can be abused to download (small) files, you should focus on monitoring the creation of processes within Windows systems. Specifically, identify instances where the process image ends with '\\certreq.exe' or the original file name is identified as 'CertReq.exe'. Additionally, scrutinize the command line arguments for the presence of ' -Post ', ' -config ', ' http', and the specific reference to ' C:\\windows\\win.ini '. These particular command line argument combinations are indicative of an attempt to misuse certreq.exe for downloading files, an activity that could be aligned with malicious operations. Command line monitoring along with tracking the parent command line execution can greatly aid in detecting this type of attack. The methodology for detection holds a high importance level due to the low likelihood of false positives under normal operational conditions. This approach ensures that activities related to the misuse of certreq for file downloading purposes are accurately identified and scrutinized.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious certreq execution taken from the LOLBAS examples, which can be abused to download (small) files",
      "answer": "In order to detect a suspicious certreq execution taken from the LOLBAS examples, which can be abused to download (small) files, you should focus on monitoring the creation of processes within Windows systems. Specifically, identify instances where the process image ends with '\\certreq.exe' or the original file name is identified as 'CertReq.exe'. Additionally, scrutinize the command line arguments for the presence of ' -Post ', ' -config ', ' http', and the specific reference to ' C:\\windows\\win.ini '. These particular command line argument combinations are indicative of an attempt to misuse certreq.exe for downloading files, an activity that could be aligned with malicious operations. Command line monitoring along with tracking the parent command line execution can greatly aid in detecting this type of attack. The methodology for detection holds a high importance level due to the low likelihood of false positives under normal operational conditions. This approach ensures that activities related to the misuse of certreq for file downloading purposes are accurately identified and scrutinized."
    }
  },
  {
    "instruction": "Please help me detect the following: usage of \"xor\" or \"bxor\" in combination of a \"foreach\" loop. This pattern is often found in encoded powershell code and commands as a way to avoid detection",
    "context": "",
    "output": "Sure!\nIn order to detect usage of \"xor\" or \"bxor\" in combination with a \"foreach\" loop, which is often found in encoded PowerShell code and commands as a way to avoid detection, you should: focus on monitoring process creation events in Windows systems, specifically looking for the execution of PowerShell (`powershell.exe` or `pwsh.exe`) or the use of PowerShell's binary (`PowerShell.exe` or `pwsh.dll`) as an indicator. It is crucial to examine the command-line arguments of these processes for the presence of both 'ForEach' and 'Xor' keywords together. This combination is a common tactic used by attackers to encode malicious scripts and evade basic detection techniques. Be aware that there might be instances where this behavior is flagged without a direct malicious intent, but given the medium level of risk, such occurrences should be carefully evaluated.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of \"xor\" or \"bxor\" in combination of a \"foreach\" loop. This pattern is often found in encoded powershell code and commands as a way to avoid detection",
      "answer": "In order to detect usage of \"xor\" or \"bxor\" in combination with a \"foreach\" loop, which is often found in encoded PowerShell code and commands as a way to avoid detection, you should: focus on monitoring process creation events in Windows systems, specifically looking for the execution of PowerShell (`powershell.exe` or `pwsh.exe`) or the use of PowerShell's binary (`PowerShell.exe` or `pwsh.dll`) as an indicator. It is crucial to examine the command-line arguments of these processes for the presence of both 'ForEach' and 'Xor' keywords together. This combination is a common tactic used by attackers to encode malicious scripts and evade basic detection techniques. Be aware that there might be instances where this behavior is flagged without a direct malicious intent, but given the medium level of risk, such occurrences should be carefully evaluated."
    }
  },
  {
    "instruction": "How to detect: scenarios where one can control another users or computers account without having to use their credentials.",
    "context": "",
    "output": "In order to detect scenarios where one can control another users or computers account without having to use their credentials, you should: Focus on monitoring Windows security event logs, specifically looking for significant events that could indicate unauthorized control or delegation attempts. You should setup your system to audit User Account Management and Directory Service Changes as detailed by Windows Audit Policies and Group Policy configurations. \n\nSpecifically, look out for event ID 4738 in security logs, which signals modifications to an account that could be malicious, especially if the 'AllowedToDelegateTo' attribute is not set to null or has been altered, indicating an attempt to delegate control.\n\nAdditionally, you should pay attention to event ID 5136, which gets raised when changes occur to directory service objects. There are three critical scenarios to watch out for:\n1. Modifications to the 'msDS-AllowedToDelegateTo' attribute, which could indicate attempts to permit unauthorized delegations.\n2. Changes to the 'servicePrincipalName' attribute for user objects, which could signify manipulation of service accounts to impersonate or control other accounts.\n3. Alterations to the 'msDS-AllowedToActOnBehalfOfOtherIdentity' attribute, further pointing towards attempts to gain unauthorized control or impersonation capabilities.\n\nWhile monitoring these activities, it's important to understand there might be unknown scenarios that could trigger these events, which should be considered potential false positives. Since the detection level is set to high, any triggered alerts should be investigated thoroughly to confirm if they signify malicious activity or are benign system or user actions. \n\nThis detailed monitoring strategy is designed to protect against tactics and techniques such as privilege escalation and credential access by catching unauthorized attempts to gain control over other users' or computers' accounts without needing their actual credentials.\n",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "scenarios where one can control another users or computers account without having to use their credentials.",
      "answer": "In order to detect scenarios where one can control another users or computers account without having to use their credentials, you should: Focus on monitoring Windows security event logs, specifically looking for significant events that could indicate unauthorized control or delegation attempts. You should setup your system to audit User Account Management and Directory Service Changes as detailed by Windows Audit Policies and Group Policy configurations. \n\nSpecifically, look out for event ID 4738 in security logs, which signals modifications to an account that could be malicious, especially if the 'AllowedToDelegateTo' attribute is not set to null or has been altered, indicating an attempt to delegate control.\n\nAdditionally, you should pay attention to event ID 5136, which gets raised when changes occur to directory service objects. There are three critical scenarios to watch out for:\n1. Modifications to the 'msDS-AllowedToDelegateTo' attribute, which could indicate attempts to permit unauthorized delegations.\n2. Changes to the 'servicePrincipalName' attribute for user objects, which could signify manipulation of service accounts to impersonate or control other accounts.\n3. Alterations to the 'msDS-AllowedToActOnBehalfOfOtherIdentity' attribute, further pointing towards attempts to gain unauthorized control or impersonation capabilities.\n\nWhile monitoring these activities, it's important to understand there might be unknown scenarios that could trigger these events, which should be considered potential false positives. Since the detection level is set to high, any triggered alerts should be investigated thoroughly to confirm if they signify malicious activity or are benign system or user actions. \n\nThis detailed monitoring strategy is designed to protect against tactics and techniques such as privilege escalation and credential access by catching unauthorized attempts to gain control over other users' or computers' accounts without needing their actual credentials.\n"
    }
  },
  {
    "instruction": "Explain how should I detect the following: This detection uses Windows security events to detect suspicious access attempts to the registry key values and sub-keys of Azure AD Health service agents (e.g AD FS).\nInformation from AD Health service agents can be used to potentially abuse some of the features provided by those services in the cloud (e.g. Federation).\nThis detection requires an access control entry (ACE) on the system access control list (SACL) of the following securable object: HKLM:\\SOFTWARE\\Microsoft\\ADHealthAgent.\nMake sure you set the SACL to propagate to its sub-keys.\n",
    "context": "",
    "output": "In order to detect suspicious access attempts to the registry key values and sub-keys of Azure AD Health service agents (e.g., AD FS), which information from can be used to potentially abuse some of the features provided by those services in the cloud (e.g., Federation), you should: Monitor Windows security logs for events with IDs 4656 and 4663 that indicate an attempt to access the registry key '\\REGISTRY\\MACHINE\\SOFTWARE\\Microsoft\\ADHealthAgent'. It's crucial to pay attention to these events because they represent attempts to interact with the registry keys associated with the Azure AD Health service agents. However, you should disregard events generated by the known legitimate processes of the AD Health services such as 'Microsoft.Identity.Health.Adfs.DiagnosticsAgent.exe', 'Microsoft.Identity.Health.Adfs.InsightsService.exe', 'Microsoft.Identity.Health.Adfs.MonitoringAgent.Startup.exe', 'Microsoft.Identity.Health.Adfs.PshSurrogate.exe', and 'Microsoft.Identity.Health.Common.Clients.ResourceMonitor.exe'. This detection mechanism leans on filtering out known legitimate access attempts by these specific processes, focusing on identifying potentially unauthorized or malicious attempts to access these keys. To ensure these detections are accurate, you need to have configured an access control entry (ACE) on the system access control list (SACL) for the securable object (in this case, the registry key HKLM:\\SOFTWARE\\Microsoft\\ADHealthAgent) and set the SACL to also apply to its sub-keys. This method helps in monitoring and alerting on potential abuses or intrusion attempts related to Federation features and other cloud services tied to the Azure AD Health service.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "This detection uses Windows security events to detect suspicious access attempts to the registry key values and sub-keys of Azure AD Health service agents (e.g AD FS).\nInformation from AD Health service agents can be used to potentially abuse some of the features provided by those services in the cloud (e.g. Federation).\nThis detection requires an access control entry (ACE) on the system access control list (SACL) of the following securable object: HKLM:\\SOFTWARE\\Microsoft\\ADHealthAgent.\nMake sure you set the SACL to propagate to its sub-keys.\n",
      "answer": "In order to detect suspicious access attempts to the registry key values and sub-keys of Azure AD Health service agents (e.g., AD FS), which information from can be used to potentially abuse some of the features provided by those services in the cloud (e.g., Federation), you should: Monitor Windows security logs for events with IDs 4656 and 4663 that indicate an attempt to access the registry key '\\REGISTRY\\MACHINE\\SOFTWARE\\Microsoft\\ADHealthAgent'. It's crucial to pay attention to these events because they represent attempts to interact with the registry keys associated with the Azure AD Health service agents. However, you should disregard events generated by the known legitimate processes of the AD Health services such as 'Microsoft.Identity.Health.Adfs.DiagnosticsAgent.exe', 'Microsoft.Identity.Health.Adfs.InsightsService.exe', 'Microsoft.Identity.Health.Adfs.MonitoringAgent.Startup.exe', 'Microsoft.Identity.Health.Adfs.PshSurrogate.exe', and 'Microsoft.Identity.Health.Common.Clients.ResourceMonitor.exe'. This detection mechanism leans on filtering out known legitimate access attempts by these specific processes, focusing on identifying potentially unauthorized or malicious attempts to access these keys. To ensure these detections are accurate, you need to have configured an access control entry (ACE) on the system access control list (SACL) for the securable object (in this case, the registry key HKLM:\\SOFTWARE\\Microsoft\\ADHealthAgent) and set the SACL to also apply to its sub-keys. This method helps in monitoring and alerting on potential abuses or intrusion attempts related to Federation features and other cloud services tied to the Azure AD Health service."
    }
  },
  {
    "instruction": "Can you explain how to detect: shellshock expressions in log files",
    "context": "",
    "output": "Certainly!\n\nIn order to detect shellshock expressions in log files, you should monitor log files generated by Linux systems for specific patterns that indicate a shellshock attack. These patterns are unique sequences of characters that exploit the shellshock vulnerability, specifically:\n\n- '(){:;};'\n- '() {:;};'\n- '() { :;};'\n- '() { :; };'\n\nThese expressions are indicative of attempts to exploit the shellshock vulnerability, which allows attackers to execute arbitrary commands on the affected system. Monitoring for these expressions in logs will help identify potential shellshock attack attempts. It is important to note that there may be unknown false positives, indicating situations where these patterns might be logged without malicious intent. The severity level of detecting these patterns is considered high due to the potential impact of shellshock exploits.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "shellshock expressions in log files",
      "answer": "In order to detect shellshock expressions in log files, you should monitor log files generated by Linux systems for specific patterns that indicate a shellshock attack. These patterns are unique sequences of characters that exploit the shellshock vulnerability, specifically:\n\n- '(){:;};'\n- '() {:;};'\n- '() { :;};'\n- '() { :; };'\n\nThese expressions are indicative of attempts to exploit the shellshock vulnerability, which allows attackers to execute arbitrary commands on the affected system. Monitoring for these expressions in logs will help identify potential shellshock attack attempts. It is important to note that there may be unknown false positives, indicating situations where these patterns might be logged without malicious intent. The severity level of detecting these patterns is considered high due to the potential impact of shellshock exploits."
    }
  },
  {
    "instruction": "Can you explain how to detect: execution of the \"mofcomp\" utility as a child of a suspicious shell or script running utility or by having a supsicious path in the commandline.\nThe \"mofcomp\" utility parses a file containing MOF statements and adds the classes and class instances defined in the file to the WMI repository.\nAttackers abuse this utility to install malicious MOF scripts\n",
    "context": "",
    "output": "Certainly!\n\nIn order to detect execution of the \"mofcomp\" utility as a child of a suspicious shell or script running utility or by having a suspicious path in the command line, you should monitor process creation logs within the Windows operating system. Look for instances where the \"mofcomp.exe\" utility is executed. This can be identified either by the image name ending with '\\mofcomp.exe' or the original filename being exactly 'mofcomp.exe'. Be especially vigilant if this utility is launched by parent processes known to be used by attackers for command execution, such as 'cmd.exe', 'powershell.exe', 'pwsh.exe', 'wsl.exe', 'wscript.exe', or 'cscript.exe'. Additionally, pay attention to command lines that include suspicious paths like '\\AppData\\Local\\Temp', '\\Users\\Public\\', '\\WINDOWS\\Temp\\', '%temp%', '%tmp%', and '%appdata%'. \n\nHowever, it is essential to exclude legitimate use cases where 'mofcomp' is run as a child of 'WmiPrvSE.exe' with command line paths pointing to 'C:\\Windows\\TEMP\\' and ending in '.mof', as well as instances where parent information is unavailable but the command line criteria match, to minimize false positives.\n\nBy following these guidelines, organizations can more effectively spot malicious attempts to abuse 'mofcomp' for installing harmful MOF scripts, a technique often used in malware deployment and persistence mechanisms.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of the \"mofcomp\" utility as a child of a suspicious shell or script running utility or by having a supsicious path in the commandline.\nThe \"mofcomp\" utility parses a file containing MOF statements and adds the classes and class instances defined in the file to the WMI repository.\nAttackers abuse this utility to install malicious MOF scripts\n",
      "answer": "In order to detect execution of the \"mofcomp\" utility as a child of a suspicious shell or script running utility or by having a suspicious path in the command line, you should monitor process creation logs within the Windows operating system. Look for instances where the \"mofcomp.exe\" utility is executed. This can be identified either by the image name ending with '\\mofcomp.exe' or the original filename being exactly 'mofcomp.exe'. Be especially vigilant if this utility is launched by parent processes known to be used by attackers for command execution, such as 'cmd.exe', 'powershell.exe', 'pwsh.exe', 'wsl.exe', 'wscript.exe', or 'cscript.exe'. Additionally, pay attention to command lines that include suspicious paths like '\\AppData\\Local\\Temp', '\\Users\\Public\\', '\\WINDOWS\\Temp\\', '%temp%', '%tmp%', and '%appdata%'. \n\nHowever, it is essential to exclude legitimate use cases where 'mofcomp' is run as a child of 'WmiPrvSE.exe' with command line paths pointing to 'C:\\Windows\\TEMP\\' and ending in '.mof', as well as instances where parent information is unavailable but the command line criteria match, to minimize false positives.\n\nBy following these guidelines, organizations can more effectively spot malicious attempts to abuse 'mofcomp' for installing harmful MOF scripts, a technique often used in malware deployment and persistence mechanisms."
    }
  },
  {
    "instruction": "Can you explain how to detect: suspicious PowerShell invocation command parameters",
    "context": "",
    "output": "Certainly!\n\nIn order to detect suspicious PowerShell invocation command parameters, you should monitor Windows PowerShell module activity for specific command-line parameters and techniques that attackers frequently use to evade detection, execute code, or persist on a system. Monitoring should focus on:\n\n1. Commands that attempt to execute PowerShell with parameters designed to bypass execution policies and run scripts or commands in a hidden window. This includes looking for sequences that convert strings from Base64 encoding inline, an obfuscation technique often used to hide malicious scripts from simple inspection.\n\n2. Spot instances where the Invoke-Expression (iex) cmdlet is used in conjunction with commands that create new objects or download content over the network. The presence of 'iex' alongside parameters for non-interactivity, window hiding, and bypassing the execution policy can be indicative of an attempt to dynamically execute code that is fetched or constructed at runtime.\n\n3. Identifications of attempts to use encoded commands with PowerShell, which are passed using the `-Enc` parameter. This tactic is utilized to hide the actual commands being executed from plain view.\n\n4. Checks for manipulation of Windows registry to establish persistence, specifically through adding entries under the `HKCU\\software\\microsoft\\windows\\currentversion\\run` path. This is a common method for ensuring malware or tools auto-start with the logged-on user's session.\n\n5. Look for utilization of the .NET WebClient class in scripts to download payloads or otherwise interact with external network resources while trying to remain hidden and potentially bypass execution policy through `-bypass` and `-noprofile` parameters.\n\n6. Monitor for scripts that use the combination of 'iex' for execution of expressions and `New-Object Net.WebClient` for network operations. This could indicate an attempt to download and execute scripts or commands from remote locations.\n\nExclude from alerts:\n- Legitimate installation scripts from known software deployment tools like Chocolatey, which may use similar techniques for legitimate purposes. Specifically, exclude commands involving downloading and running the Chocolatey installer script from the community site.\n\nThis monitoring should be considered high priority due to the high likelihood that such behavior is indicative of malicious activity, including but not limited to initial access, execution of malware, or establishing persistence within the network.\n\nTags related to the attack include execution, persistence, and defense evasion, signaling the broad impact and severity of detected activities that match these patterns.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious PowerShell invocation command parameters",
      "answer": "In order to detect suspicious PowerShell invocation command parameters, you should monitor Windows PowerShell module activity for specific command-line parameters and techniques that attackers frequently use to evade detection, execute code, or persist on a system. Monitoring should focus on:\n\n1. Commands that attempt to execute PowerShell with parameters designed to bypass execution policies and run scripts or commands in a hidden window. This includes looking for sequences that convert strings from Base64 encoding inline, an obfuscation technique often used to hide malicious scripts from simple inspection.\n\n2. Spot instances where the Invoke-Expression (iex) cmdlet is used in conjunction with commands that create new objects or download content over the network. The presence of 'iex' alongside parameters for non-interactivity, window hiding, and bypassing the execution policy can be indicative of an attempt to dynamically execute code that is fetched or constructed at runtime.\n\n3. Identifications of attempts to use encoded commands with PowerShell, which are passed using the `-Enc` parameter. This tactic is utilized to hide the actual commands being executed from plain view.\n\n4. Checks for manipulation of Windows registry to establish persistence, specifically through adding entries under the `HKCU\\software\\microsoft\\windows\\currentversion\\run` path. This is a common method for ensuring malware or tools auto-start with the logged-on user's session.\n\n5. Look for utilization of the .NET WebClient class in scripts to download payloads or otherwise interact with external network resources while trying to remain hidden and potentially bypass execution policy through `-bypass` and `-noprofile` parameters.\n\n6. Monitor for scripts that use the combination of 'iex' for execution of expressions and `New-Object Net.WebClient` for network operations. This could indicate an attempt to download and execute scripts or commands from remote locations.\n\nExclude from alerts:\n- Legitimate installation scripts from known software deployment tools like Chocolatey, which may use similar techniques for legitimate purposes. Specifically, exclude commands involving downloading and running the Chocolatey installer script from the community site.\n\nThis monitoring should be considered high priority due to the high likelihood that such behavior is indicative of malicious activity, including but not limited to initial access, execution of malware, or establishing persistence within the network.\n\nTags related to the attack include execution, persistence, and defense evasion, signaling the broad impact and severity of detected activities that match these patterns."
    }
  },
  {
    "instruction": "How to detect: This rule looks for Windows Installer service (msiexec.exe) spawning command line and/or powershell that spawns other processes",
    "context": "",
    "output": "In order to detect an attack where the Windows Installer service (msiexec.exe) is used to spawn command line and/or PowerShell processes that then spawn other processes, you should: Monitor Windows systems for the creation of processes where the parent process is identified as either 'cmd.exe' or 'powershell.exe'. Additionally, it's crucial to scrutinize the parent of the parent process for instances where its path includes '\\Windows\\Installer\\' and contains the string 'msi', or when the image name ends with 'tmp'. These specifics are instrumental in identifying suspicious activity associated with the misuse of the Windows Installer to launch potentially malicious scripts or commands through common administrative tools like the command prompt and PowerShell. This detection strategy is built upon enriching Sysmon events with additional details about process relationships, particularly looking into the ParentImage and ParentOfParentImage fields of process creation logs. Any matches should be treated with high suspicion due to the potentially malicious nature of leveraging the Windows Installer process in this manner. It's also important to note that while this method aims to accurately identify malicious activity, instances where it may flag benign processes as suspicious could occur, hence a thorough investigation is recommended for any alerts generated.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "This rule looks for Windows Installer service (msiexec.exe) spawning command line and/or powershell that spawns other processes",
      "answer": "In order to detect an attack where the Windows Installer service (msiexec.exe) is used to spawn command line and/or PowerShell processes that then spawn other processes, you should: Monitor Windows systems for the creation of processes where the parent process is identified as either 'cmd.exe' or 'powershell.exe'. Additionally, it's crucial to scrutinize the parent of the parent process for instances where its path includes '\\Windows\\Installer\\' and contains the string 'msi', or when the image name ends with 'tmp'. These specifics are instrumental in identifying suspicious activity associated with the misuse of the Windows Installer to launch potentially malicious scripts or commands through common administrative tools like the command prompt and PowerShell. This detection strategy is built upon enriching Sysmon events with additional details about process relationships, particularly looking into the ParentImage and ParentOfParentImage fields of process creation logs. Any matches should be treated with high suspicion due to the potentially malicious nature of leveraging the Windows Installer process in this manner. It's also important to note that while this method aims to accurately identify malicious activity, instances where it may flag benign processes as suspicious could occur, hence a thorough investigation is recommended for any alerts generated."
    }
  },
  {
    "instruction": "Please help me detect the following: Security Compliance Center reported a user who exceeded sending limits of the service policies and because of this has been restricted from sending email.",
    "context": "",
    "output": "Sure!\nIn order to detect when a Security Compliance Center reported a user who exceeded sending limits of the service policies and because of this has been restricted from sending email, you should monitor logs from the threat management service, specifically targeting the Microsoft 365 platform. Focus on identifying events where the SecurityComplianceCenter is the event source. Specifically, look for the event named 'User restricted from sending email' with a status marked as success. This indicates a successful action where a user has been restricted due to exceeding sending limits, aligning with security compliance policies. Be aware that it might be challenging to distinguish between genuine policy violations and benign activities that trigger similar alerts, as there could be unknown factors leading to false positives. The severity of this activity is considered medium, suggesting it requires attention to mitigate potential security or compliance issues.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Security Compliance Center reported a user who exceeded sending limits of the service policies and because of this has been restricted from sending email.",
      "answer": "In order to detect when a Security Compliance Center reported a user who exceeded sending limits of the service policies and because of this has been restricted from sending email, you should monitor logs from the threat management service, specifically targeting the Microsoft 365 platform. Focus on identifying events where the SecurityComplianceCenter is the event source. Specifically, look for the event named 'User restricted from sending email' with a status marked as success. This indicates a successful action where a user has been restricted due to exceeding sending limits, aligning with security compliance policies. Be aware that it might be challenging to distinguish between genuine policy violations and benign activities that trigger similar alerts, as there could be unknown factors leading to false positives. The severity of this activity is considered medium, suggesting it requires attention to mitigate potential security or compliance issues."
    }
  },
  {
    "instruction": "Can you explain how to detect: events of driver load errors in print service logs that could be a sign of successful exploitation attempts of print spooler vulnerability CVE-2021-1675",
    "context": "",
    "output": "Certainly!\n\nIn order to detect events of driver load errors in print service logs that could be a sign of successful exploitation attempts of print spooler vulnerability CVE-2021-1675, you should: Identify and monitor specific event patterns within Windows print service logs. Focus on event ID 808, which signals issues with loading print spooler components. Look for errors with specific error codes, '0x45A' and '0x7e', indicating potential malicious activity. Watch out for messages stating \"The print spooler failed to load a plug-in module,\" which can be indicative of an attempted exploit. Additionally, scrutinize any occurrences of default file names common in proof of concept codes related to this attack, such as 'MyExploit.dll', 'evil.dll', and various others listed like '\\addCube.dll', '\\rev.dll', etc. \n\nBe vigilant for these signals but also consider the possibility of false positives. Situations where the error message includes phrases like 'registration timed out' should not be immediately considered an attack, as this can be a normal occurrence unrelated to malicious activity. Exclude these instances to improve the accuracy of your detection efforts.\n\nFurthermore, always record the name of the plugin DLL implicated in such events, as this information can be crucial for further investigation and response activities. Be aware that issues with printer drivers can also cause similar log entries, which are not necessarily indicative of an attack, thus representing potential false positives. The detection strategy should maintain a high alert level due to the serious implications of successful exploitation of CVE-2021-1675 through the print spooler service.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "events of driver load errors in print service logs that could be a sign of successful exploitation attempts of print spooler vulnerability CVE-2021-1675",
      "answer": "In order to detect events of driver load errors in print service logs that could be a sign of successful exploitation attempts of print spooler vulnerability CVE-2021-1675, you should: Identify and monitor specific event patterns within Windows print service logs. Focus on event ID 808, which signals issues with loading print spooler components. Look for errors with specific error codes, '0x45A' and '0x7e', indicating potential malicious activity. Watch out for messages stating \"The print spooler failed to load a plug-in module,\" which can be indicative of an attempted exploit. Additionally, scrutinize any occurrences of default file names common in proof of concept codes related to this attack, such as 'MyExploit.dll', 'evil.dll', and various others listed like '\\addCube.dll', '\\rev.dll', etc. \n\nBe vigilant for these signals but also consider the possibility of false positives. Situations where the error message includes phrases like 'registration timed out' should not be immediately considered an attack, as this can be a normal occurrence unrelated to malicious activity. Exclude these instances to improve the accuracy of your detection efforts.\n\nFurthermore, always record the name of the plugin DLL implicated in such events, as this information can be crucial for further investigation and response activities. Be aware that issues with printer drivers can also cause similar log entries, which are not necessarily indicative of an attack, thus representing potential false positives. The detection strategy should maintain a high alert level due to the serious implications of successful exploitation of CVE-2021-1675 through the print spooler service."
    }
  },
  {
    "instruction": "Explain how should I detect the following: Obfuscated use of Clip.exe to execute PowerShell",
    "context": "",
    "output": "In order to Detect Obfuscated use of Clip.exe to execute PowerShell, you should: Focus on detecting suspicious process creation events on Windows systems that reveal the obfuscated use of Clip.exe in conjunction with PowerShell execution. This activity involves monitoring for command lines that initiate with 'cmd' and include the usage of '&&' which indicates the chaining of commands. A specific indication of this malicious activity is the presence of 'clipboard]::' and '-f', which are part of the syntax used to obfuscate the commands further. The commands may start with either '/c' or '/r', which are used to execute the sequence of commands provided to cmd.exe. The detection of such patterns in the command line is crucial to identifying attempts to exploit Clip.exe for executing PowerShell scripts in a manner that is typically not straightforward to discern. This kind of obfuscation is a common tactic used by attackers to evade detection and execute malicious PowerShell scripts, hence monitoring for these patterns is critical.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Obfuscated use of Clip.exe to execute PowerShell",
      "answer": "In order to Detect Obfuscated use of Clip.exe to execute PowerShell, you should: Focus on detecting suspicious process creation events on Windows systems that reveal the obfuscated use of Clip.exe in conjunction with PowerShell execution. This activity involves monitoring for command lines that initiate with 'cmd' and include the usage of '&&' which indicates the chaining of commands. A specific indication of this malicious activity is the presence of 'clipboard]::' and '-f', which are part of the syntax used to obfuscate the commands further. The commands may start with either '/c' or '/r', which are used to execute the sequence of commands provided to cmd.exe. The detection of such patterns in the command line is crucial to identifying attempts to exploit Clip.exe for executing PowerShell scripts in a manner that is typically not straightforward to discern. This kind of obfuscation is a common tactic used by attackers to evade detection and execute malicious PowerShell scripts, hence monitoring for these patterns is critical."
    }
  },
  {
    "instruction": "Please help me detect the following: deletion of IIS WebServer access logs which may indicate an attempt to destroy forensic evidence",
    "context": "",
    "output": "Sure!\nIn order to detect the deletion of IIS WebServer access logs which may indicate an attempt to destroy forensic evidence, you should: Monitor for deletion events in Windows environments specifically targeting files within the directory path '\\inetpub\\logs\\LogFiles\\' with a file extension of '.log'. This focuses on identifying actions where an attacker may attempt to erase their tracks by removing access logs from the IIS WebServer, a critical piece of forensic evidence in cybersecurity investigations. Be aware that not every deletion event flagged through this monitoring will be malicious in nature. Common legitimate reasons for these events include the uninstallation of the IIS service itself or routine log rotation procedures. The risk level associated with this activity is considered medium, reflecting its potential importance in an investigation balanced by the likelihood of legitimate causes for such events.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "deletion of IIS WebServer access logs which may indicate an attempt to destroy forensic evidence",
      "answer": "In order to detect the deletion of IIS WebServer access logs which may indicate an attempt to destroy forensic evidence, you should: Monitor for deletion events in Windows environments specifically targeting files within the directory path '\\inetpub\\logs\\LogFiles\\' with a file extension of '.log'. This focuses on identifying actions where an attacker may attempt to erase their tracks by removing access logs from the IIS WebServer, a critical piece of forensic evidence in cybersecurity investigations. Be aware that not every deletion event flagged through this monitoring will be malicious in nature. Common legitimate reasons for these events include the uninstallation of the IIS service itself or routine log rotation procedures. The risk level associated with this activity is considered medium, reflecting its potential importance in an investigation balanced by the likelihood of legitimate causes for such events."
    }
  },
  {
    "instruction": "How to detect: deactivation and disabling of the Scheduled defragmentation task as seen by Slingshot APT group",
    "context": "",
    "output": "In order to detect the deactivation and disabling of the Scheduled defragmentation task as seen by Slingshot APT group, you should: Monitor Windows security logs, specifically for Event ID 4701, which is indicative of a task scheduling action. Pay close attention to any modifications involving the \u201c\\Microsoft\\Windows\\Defrag\\ScheduledDefrag\u201d task. This specific task is related to the automated defragmentation of a Windows system's drives, and alterations to its schedule could be a tactic used by attackers, like the Slingshot APT group, to reduce system performance or evade detection mechanisms that rely on the predictable performance of the system. Any unexpected activity regarding this task, especially its deactivation or disabling, should be treated with suspicion. This monitoring requires the system's audit policy to be configured to log 'Audit Other Object Access Events' successfully. While encountering such an event could potentially be benign, it could also indicate malicious activity, with very few known legitimate reasons for such an alteration to occur.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "deactivation and disabling of the Scheduled defragmentation task as seen by Slingshot APT group",
      "answer": "In order to detect the deactivation and disabling of the Scheduled defragmentation task as seen by Slingshot APT group, you should: Monitor Windows security logs, specifically for Event ID 4701, which is indicative of a task scheduling action. Pay close attention to any modifications involving the \u201c\\Microsoft\\Windows\\Defrag\\ScheduledDefrag\u201d task. This specific task is related to the automated defragmentation of a Windows system's drives, and alterations to its schedule could be a tactic used by attackers, like the Slingshot APT group, to reduce system performance or evade detection mechanisms that rely on the predictable performance of the system. Any unexpected activity regarding this task, especially its deactivation or disabling, should be treated with suspicion. This monitoring requires the system's audit policy to be configured to log 'Audit Other Object Access Events' successfully. While encountering such an event could potentially be benign, it could also indicate malicious activity, with very few known legitimate reasons for such an alteration to occur."
    }
  },
  {
    "instruction": "How can I detect: Adversaries may manipulate accounts to maintain access to victim systems.\nAccount manipulation may consist of any action that preserves adversary access to a compromised account, such as modifying credentials or permission groups\n",
    "context": "",
    "output": "In order to detect adversaries manipulating accounts to maintain access to victim systems, which may involve actions like modifying credentials or permission groups, you should monitor for PowerShell script activity related to user account manipulation on Windows systems. Specifically, ensure that Script Block Logging is enabled to capture the execution of PowerShell scripts. Look for scripts containing commands that either create, rename, remove, disable, enable, retrieve, or modify local user accounts, including 'Disable-LocalUser', 'Enable-LocalUser', 'Get-LocalUser', 'Set-LocalUser', 'New-LocalUser', 'Rename-LocalUser', and 'Remove-LocalUser'. It's important to note that while detecting these commands can indicate malicious account manipulation, there may also be legitimate administrative reasons for their use, and thus they may generate false positives. These activities are associated with tactics and techniques of maintaining access and potentially escalating privileges within a compromised system.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Adversaries may manipulate accounts to maintain access to victim systems.\nAccount manipulation may consist of any action that preserves adversary access to a compromised account, such as modifying credentials or permission groups\n",
      "answer": "In order to detect adversaries manipulating accounts to maintain access to victim systems, which may involve actions like modifying credentials or permission groups, you should monitor for PowerShell script activity related to user account manipulation on Windows systems. Specifically, ensure that Script Block Logging is enabled to capture the execution of PowerShell scripts. Look for scripts containing commands that either create, rename, remove, disable, enable, retrieve, or modify local user accounts, including 'Disable-LocalUser', 'Enable-LocalUser', 'Get-LocalUser', 'Set-LocalUser', 'New-LocalUser', 'Rename-LocalUser', and 'Remove-LocalUser'. It's important to note that while detecting these commands can indicate malicious account manipulation, there may also be legitimate administrative reasons for their use, and thus they may generate false positives. These activities are associated with tactics and techniques of maintaining access and potentially escalating privileges within a compromised system."
    }
  },
  {
    "instruction": "Please help me detect the following: when end user consent is blocked due to risk-based consent.",
    "context": "",
    "output": "Sure!\nIn order to detect when end user consent is blocked due to risk-based consent, you should monitor Azure audit logs for specific events where a failure status reason is identified as 'Microsoft.online.Security.userConsentBlockedForRiskyAppsExceptions'. This condition indicates that the system has automatically blocked an end user's consent for an application due to it being deemed risky. Monitoring for such events is crucial in identifying and mitigating potential security threats associated with unauthorized or malicious applications trying to gain access through user consent. Tags associated with this activity would include Initial Access and Credential Access, as such blockages are indicative of protective measures against techniques that seek to exploit user permissions or credentials for unauthorized access. The detection of this event should be treated with a medium level of importance, and while it's possible to encounter scenarios where such blockages are legitimate and not an indication of a security threat, these instances are considered as unknown false positives and warrant further investigation.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "when end user consent is blocked due to risk-based consent.",
      "answer": "In order to detect when end user consent is blocked due to risk-based consent, you should monitor Azure audit logs for specific events where a failure status reason is identified as 'Microsoft.online.Security.userConsentBlockedForRiskyAppsExceptions'. This condition indicates that the system has automatically blocked an end user's consent for an application due to it being deemed risky. Monitoring for such events is crucial in identifying and mitigating potential security threats associated with unauthorized or malicious applications trying to gain access through user consent. Tags associated with this activity would include Initial Access and Credential Access, as such blockages are indicative of protective measures against techniques that seek to exploit user permissions or credentials for unauthorized access. The detection of this event should be treated with a medium level of importance, and while it's possible to encounter scenarios where such blockages are legitimate and not an indication of a security threat, these instances are considered as unknown false positives and warrant further investigation."
    }
  },
  {
    "instruction": "Explain how should I detect the following: The Reset-ComputerMachinePassword cmdlet changes the computer account password that the computers use to authenticate to the domain controllers in the domain.\nYou can use it to reset the password of the local computer.\n",
    "context": "",
    "output": "In order to reset the password of the local computer or change the computer account password that computers use to authenticate to the domain controllers in the domain, you should monitor Windows PowerShell modules activity for the execution of the \"Reset-ComputerMachinePassword\" cmdlet. This action can be identified in the logs generated by PowerShell module activity, specifically those with the definition ID \"0ad03ef1-f21b-4a79-8ce8-e6900c54b65b\". Look for entries containing the context information \"Reset-ComputerMachinePassword\", as this indicates the cmdlet was used.\n\nBe aware that legitimate administrative activities may occasionally involve using this cmdlet, so not all instances may represent malicious behavior. These legitimate cases are commonly referred to as false positives; an example includes Administrator PowerShell scripts that are run for legitimate maintenance or recovery tasks.\n\nThis monitoring strategy is set at a medium level of alert priority, indicating that while the action monitored can be used in malicious scenarios; it can also be part of normal administrative duties. Identifying unauthorized or malicious use of the \"Reset-ComputerMachinePassword\" cmdlet may point towards attempts to manipulate computer accounts and their authentication processes to the domain controllers, which could impact the integrity and security of domain communications and accesses.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "The Reset-ComputerMachinePassword cmdlet changes the computer account password that the computers use to authenticate to the domain controllers in the domain.\nYou can use it to reset the password of the local computer.\n",
      "answer": "In order to reset the password of the local computer or change the computer account password that computers use to authenticate to the domain controllers in the domain, you should monitor Windows PowerShell modules activity for the execution of the \"Reset-ComputerMachinePassword\" cmdlet. This action can be identified in the logs generated by PowerShell module activity, specifically those with the definition ID \"0ad03ef1-f21b-4a79-8ce8-e6900c54b65b\". Look for entries containing the context information \"Reset-ComputerMachinePassword\", as this indicates the cmdlet was used.\n\nBe aware that legitimate administrative activities may occasionally involve using this cmdlet, so not all instances may represent malicious behavior. These legitimate cases are commonly referred to as false positives; an example includes Administrator PowerShell scripts that are run for legitimate maintenance or recovery tasks.\n\nThis monitoring strategy is set at a medium level of alert priority, indicating that while the action monitored can be used in malicious scenarios; it can also be part of normal administrative duties. Identifying unauthorized or malicious use of the \"Reset-ComputerMachinePassword\" cmdlet may point towards attempts to manipulate computer accounts and their authentication processes to the domain controllers, which could impact the integrity and security of domain communications and accesses."
    }
  },
  {
    "instruction": "Please help me detect the following: when an ElastiCache security group has been created.",
    "context": "",
    "output": "Sure!\nIn order to detect when an ElastiCache security group has been created, you should monitor AWS CloudTrail logs for events where a new ElastiCache security group is created. Specifically, look for the event source \"elasticache.amazonaws.com\" combined with the event name \"CreateCacheSecurityGroup.\" It's important to note that while some of these events could be flagged, not all instances are malicious. Often, a system or network administrator might legitimately create an ElastiCache security group as part of routine operations. Therefore, it's crucial to check whether the creation comes from expected users, using known user agents, or occurs from known hosts within your environment. Any creation activity from unfamiliar sources should prompt an investigation. To minimize distractions from alerts that are not actual threats, known legitimate behavior causing alerts can be configured to bypass or be exempted from monitoring under this specific criterion.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "when an ElastiCache security group has been created.",
      "answer": "In order to detect when an ElastiCache security group has been created, you should monitor AWS CloudTrail logs for events where a new ElastiCache security group is created. Specifically, look for the event source \"elasticache.amazonaws.com\" combined with the event name \"CreateCacheSecurityGroup.\" It's important to note that while some of these events could be flagged, not all instances are malicious. Often, a system or network administrator might legitimately create an ElastiCache security group as part of routine operations. Therefore, it's crucial to check whether the creation comes from expected users, using known user agents, or occurs from known hosts within your environment. Any creation activity from unfamiliar sources should prompt an investigation. To minimize distractions from alerts that are not actual threats, known legitimate behavior causing alerts can be configured to bypass or be exempted from monitoring under this specific criterion."
    }
  },
  {
    "instruction": "Can you explain how to detect: Detect modification for a specific user to prevent that user from being listed on the logon screen",
    "context": "",
    "output": "Certainly!\n\nIn order to detect modification for a specific user to prevent that user from being listed on the logon screen, you should: focus on monitoring Windows Registry settings modifications, particularly in the registry category that tracks changes. Look for events where the type is set to SetValue, indicating a modification or addition of a registry value. Specifically, observe changes occurring in the registry path that includes '\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\Userlist\\', as this path is crucial for managing user visibility on the login screen. Attention should be paid to target objects that not only contain this path but also end with a dollar sign ('$'), which is often a sign of operations performed on hidden or system accounts. Additionally, check if the modification details involve setting a DWORD value to 0 (0x00000000), which effectively hides the user from the logon screen. Given the high potential for misuse, any such modification should be closely scrutinized, despite the low likelihood of legitimate use cases, thus unknown scenarios are considered as possible false positives. The severity of this activity is considered high due to its potential use in evading detection or maintaining persistent access without immediate visibility to system administrators or users.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Detect modification for a specific user to prevent that user from being listed on the logon screen",
      "answer": "In order to detect modification for a specific user to prevent that user from being listed on the logon screen, you should: focus on monitoring Windows Registry settings modifications, particularly in the registry category that tracks changes. Look for events where the type is set to SetValue, indicating a modification or addition of a registry value. Specifically, observe changes occurring in the registry path that includes '\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\Userlist\\', as this path is crucial for managing user visibility on the login screen. Attention should be paid to target objects that not only contain this path but also end with a dollar sign ('$'), which is often a sign of operations performed on hidden or system accounts. Additionally, check if the modification details involve setting a DWORD value to 0 (0x00000000), which effectively hides the user from the logon screen. Given the high potential for misuse, any such modification should be closely scrutinized, despite the low likelihood of legitimate use cases, thus unknown scenarios are considered as possible false positives. The severity of this activity is considered high due to its potential use in evading detection or maintaining persistent access without immediate visibility to system administrators or users."
    }
  },
  {
    "instruction": "Can you explain how to detect: installation of RTCore service. Which could be an indication of Micro-Star MSI Afterburner vulnerable driver abuse",
    "context": "",
    "output": "Certainly!\n\nIn order to detect the installation of RTCore service, which could be an indication of Micro-Star MSI Afterburner vulnerable driver abuse, you should: Monitor Windows system logs for entries that indicate the creation or modification of a service. Specifically, look for logs sourced from the Service Control Manager with an EventID of 7045, signaling a service was installed. Pay special attention to the service named 'RTCore64'. This particular service installation event is significant as it might be related to the abuse of a vulnerable driver associated with Micro-Star MSI Afterburner, a popular graphics card overclocking tool. This type of activity could potentially be utilized by attackers to gain unauthorized access or privileges within a system. Be mindful that some detections might be false positives, as not all instances of this service installation are malicious. Nonetheless, such events should be considered highly suspicious and warrant further investigation due to their potential security implications.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "installation of RTCore service. Which could be an indication of Micro-Star MSI Afterburner vulnerable driver abuse",
      "answer": "In order to detect the installation of RTCore service, which could be an indication of Micro-Star MSI Afterburner vulnerable driver abuse, you should: Monitor Windows system logs for entries that indicate the creation or modification of a service. Specifically, look for logs sourced from the Service Control Manager with an EventID of 7045, signaling a service was installed. Pay special attention to the service named 'RTCore64'. This particular service installation event is significant as it might be related to the abuse of a vulnerable driver associated with Micro-Star MSI Afterburner, a popular graphics card overclocking tool. This type of activity could potentially be utilized by attackers to gain unauthorized access or privileges within a system. Be mindful that some detections might be false positives, as not all instances of this service installation are malicious. Nonetheless, such events should be considered highly suspicious and warrant further investigation due to their potential security implications."
    }
  },
  {
    "instruction": "Please help me detect the following: user disables the Windows Firewall via a Profile to help evade defense.",
    "context": "",
    "output": "Sure!\nIn order to detect when a user disables the Windows Firewall via a Profile to help evade defense, you should: Monitor script execution logs on Windows machines, ensuring that Script Block Logging is activated. Specifically, watch for PowerShell script texts that include commands aimed at deactivating the firewall. These include the presence of \"Set-NetFirewallProfile\" along with \"-Enabled\" followed by \"False\", indicating the firewall is being turned off. Additionally, lookout for optional parameters that might specify the scope of this disablement, such as the inclusion of keywords \"-All\", \"Public\", \"Domain\", or \"Private\". This detection mechanism should be always active as there are no known legitimate reasons (false positives) for these actions under normal circumstances, and the risk associated with these activities is considered medium. This monitoring strategy targets potential evasion techniques where attackers attempt to weaken the host's defenses by turning off the firewall.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "user disables the Windows Firewall via a Profile to help evade defense.",
      "answer": "In order to detect when a user disables the Windows Firewall via a Profile to help evade defense, you should: Monitor script execution logs on Windows machines, ensuring that Script Block Logging is activated. Specifically, watch for PowerShell script texts that include commands aimed at deactivating the firewall. These include the presence of \"Set-NetFirewallProfile\" along with \"-Enabled\" followed by \"False\", indicating the firewall is being turned off. Additionally, lookout for optional parameters that might specify the scope of this disablement, such as the inclusion of keywords \"-All\", \"Public\", \"Domain\", or \"Private\". This detection mechanism should be always active as there are no known legitimate reasons (false positives) for these actions under normal circumstances, and the risk associated with these activities is considered medium. This monitoring strategy targets potential evasion techniques where attackers attempt to weaken the host's defenses by turning off the firewall."
    }
  },
  {
    "instruction": "Explain how should I detect the following: execution of whoami.exe with suspicious parent processes.",
    "context": "",
    "output": "In order to detect the execution of whoami.exe with suspicious parent processes, you should: monitor Windows process creation logs for instances where 'whoami.exe' is executed (either directly or implied through its original filename matching 'whoami.exe'). It's crucial to exclude typical, expected parent processes such as 'cmd.exe', 'powershell.exe', 'pwsh.exe', and 'powershell_ise.exe', which are generally considered legitimate contexts for 'whoami.exe' to run from. Additionally, executions originating from 'C:\\Program Files\\Microsoft Monitoring Agent\\Agent\\MonitoringHost.exe', or cases where 'whoami.exe' is executed without any parent process information (indicated by null or empty 'ParentImage' values) should also be disregarded to reduce false positives. False positives might include regular administrative activities, the use of scripts and administrative tools present in the environment, or monitoring tasks. This detection strategy has a high importance due to its potential to unveil suspicious activities, such as attempts by malicious entities to scout and gather information about user privileges or system details, typically in the early or middle stages of an attack.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of whoami.exe with suspicious parent processes.",
      "answer": "In order to detect the execution of whoami.exe with suspicious parent processes, you should: monitor Windows process creation logs for instances where 'whoami.exe' is executed (either directly or implied through its original filename matching 'whoami.exe'). It's crucial to exclude typical, expected parent processes such as 'cmd.exe', 'powershell.exe', 'pwsh.exe', and 'powershell_ise.exe', which are generally considered legitimate contexts for 'whoami.exe' to run from. Additionally, executions originating from 'C:\\Program Files\\Microsoft Monitoring Agent\\Agent\\MonitoringHost.exe', or cases where 'whoami.exe' is executed without any parent process information (indicated by null or empty 'ParentImage' values) should also be disregarded to reduce false positives. False positives might include regular administrative activities, the use of scripts and administrative tools present in the environment, or monitoring tasks. This detection strategy has a high importance due to its potential to unveil suspicious activities, such as attempts by malicious entities to scout and gather information about user privileges or system details, typically in the early or middle stages of an attack."
    }
  },
  {
    "instruction": "How to detect: usage of a PowerShell command to dump the live memory of a Windows machine",
    "context": "",
    "output": "In order to detect usage of a PowerShell command to dump the live memory of a Windows machine, you should: focus on monitoring PowerShell scripts within the Windows environment, particularly those that are captured by Script Block Logging. Make sure Script Block Logging is enabled as it is a requirement for detecting such activities. The specific command to watch out for includes \"Get-StorageDiagnosticInfo\" along with the parameter \"-IncludeLiveDump\". These elements together indicate an attempt to dump live memory data, which is a significant action often associated with diagnostic activities but could also be leveraged maliciousally for information gathering or exploitation purposes. Be aware that legitimate diagnostic operations may also trigger this detection, hence they are considered as potential false positives. Nevertheless, given the high level of concern associated with unauthorized memory dumps, the detection of these commands warrants a high priority investigation.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of a PowerShell command to dump the live memory of a Windows machine",
      "answer": "In order to detect usage of a PowerShell command to dump the live memory of a Windows machine, you should: focus on monitoring PowerShell scripts within the Windows environment, particularly those that are captured by Script Block Logging. Make sure Script Block Logging is enabled as it is a requirement for detecting such activities. The specific command to watch out for includes \"Get-StorageDiagnosticInfo\" along with the parameter \"-IncludeLiveDump\". These elements together indicate an attempt to dump live memory data, which is a significant action often associated with diagnostic activities but could also be leveraged maliciousally for information gathering or exploitation purposes. Be aware that legitimate diagnostic operations may also trigger this detection, hence they are considered as potential false positives. Nevertheless, given the high level of concern associated with unauthorized memory dumps, the detection of these commands warrants a high priority investigation."
    }
  },
  {
    "instruction": "Please help me detect the following: COM interface (EditionUpgradeManager) that is not used by standard executables.",
    "context": "",
    "output": "Sure!\nIn order to detect unauthorized access or manipulation of the COM interface (EditionUpgradeManager) that is not used by standard executables, you should: Monitor process access logs on Windows systems for any traces indicating the use of 'editionupgrademanagerobj.dll' in the call trace. This specific DLL is associated with the EditionUpgradeManager COM interface, which under normal circumstances, should not be accessed or utilized by standard applications. It's crucial to capture and analyze details such as the computer name, user, source image, target image, and the call trace itself from the logs. Be aware that due to the nature of this detection, there may be unknown scenarios that could lead to false positives, however, the risk level associated with this activity is considered high. This monitoring will help in identifying potentially malicious activities attempting to exploit this interface for unauthorized actions on the system.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "COM interface (EditionUpgradeManager) that is not used by standard executables.",
      "answer": "In order to detect unauthorized access or manipulation of the COM interface (EditionUpgradeManager) that is not used by standard executables, you should: Monitor process access logs on Windows systems for any traces indicating the use of 'editionupgrademanagerobj.dll' in the call trace. This specific DLL is associated with the EditionUpgradeManager COM interface, which under normal circumstances, should not be accessed or utilized by standard applications. It's crucial to capture and analyze details such as the computer name, user, source image, target image, and the call trace itself from the logs. Be aware that due to the nature of this detection, there may be unknown scenarios that could lead to false positives, however, the risk level associated with this activity is considered high. This monitoring will help in identifying potentially malicious activities attempting to exploit this interface for unauthorized actions on the system."
    }
  },
  {
    "instruction": "Explain how should I detect the following: exploitation attempt against log4j RCE vulnerability reported as CVE-2021-44228 (Log4Shell)",
    "context": "",
    "output": "In order to detect exploitation attempt against log4j RCE vulnerability reported as CVE-2021-44228 (Log4Shell), you should focus on monitoring web server logs for specific patterns that indicate an attempt to exploit this vulnerability. These patterns revolve around the use of the Java Naming and Directory Interface (JNDI) lookup strings, which are central to the exploitation process. Specifically, look for logs containing the following keyword fragments:\n\n- Strings starting with '${jndi:ldap:/', '${jndi:rmi:/', '${jndi:ldaps:/', '${jndi:dns:/', which are direct indicators of an attempt to use JNDI to access various services like LDAP, RMI, LDAPS, and DNS.\n- URL-encoded versions of these strings, such as '/$%7bjndi:', '%24%7bjndi:', '$%7Bjndi:', '%2524%257Bjndi', '%2F%252524%25257Bjndi%3A', to circumvent simple detection mechanisms.\n- More sophisticated variations attempting to avoid detection by using mixed case or encoding, including '${jndi:${lower:', '${::-j}${', '${jndi:nis', '${jndi:nds', '${jndi:corba', '${jndi:iiop', reflecting attempts to exploit the log4j vulnerability using different protocols or obfuscation techniques.\n- Attempts to manipulate or exploit environment variables or class references within JNDI lookups, indicated by strings like 'Reference Class Name: foo', '${${env:BARFOO:-j}', '${::-l}${::-d}${::-a}${::-p}', '${base64:JHtqbmRp', which suggest an attacker's effort to leverage environmental data for malicious purposes.\n- The use of expressions designed to manipulate the case of characters ('${${lower:j}ndi:', '${${upper:j}ndi:') or to break the usual patterns to evade simpler pattern-matching defenses ('${${::-j}${::-n}${::-d}${::-i}:').\n\nHowever, it's crucial to exclude certain patterns that are known to generate false positives, such as references to 'w.nessus.org/nessus' or '/nessus}', which might appear in vulnerability scanning activity rather than actual attacks.\n\nThe detection effort should focus on identifying these patterns while excluding known benign triggers to reduce the likelihood of false positives, keeping in mind that legitimate vulnerability scanning activities might inadvertently produce similar log entries. This monitoring should tag detections with the associated tactics and techniques, such as Initial Access, Execution, and Impact, as part of a comprehensive security strategy to guard against the exploitation of the log4j vulnerability known as Log4Shell.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "exploitation attempt against log4j RCE vulnerability reported as CVE-2021-44228 (Log4Shell)",
      "answer": "In order to detect exploitation attempt against log4j RCE vulnerability reported as CVE-2021-44228 (Log4Shell), you should focus on monitoring web server logs for specific patterns that indicate an attempt to exploit this vulnerability. These patterns revolve around the use of the Java Naming and Directory Interface (JNDI) lookup strings, which are central to the exploitation process. Specifically, look for logs containing the following keyword fragments:\n\n- Strings starting with '${jndi:ldap:/', '${jndi:rmi:/', '${jndi:ldaps:/', '${jndi:dns:/', which are direct indicators of an attempt to use JNDI to access various services like LDAP, RMI, LDAPS, and DNS.\n- URL-encoded versions of these strings, such as '/$%7bjndi:', '%24%7bjndi:', '$%7Bjndi:', '%2524%257Bjndi', '%2F%252524%25257Bjndi%3A', to circumvent simple detection mechanisms.\n- More sophisticated variations attempting to avoid detection by using mixed case or encoding, including '${jndi:${lower:', '${::-j}${', '${jndi:nis', '${jndi:nds', '${jndi:corba', '${jndi:iiop', reflecting attempts to exploit the log4j vulnerability using different protocols or obfuscation techniques.\n- Attempts to manipulate or exploit environment variables or class references within JNDI lookups, indicated by strings like 'Reference Class Name: foo', '${${env:BARFOO:-j}', '${::-l}${::-d}${::-a}${::-p}', '${base64:JHtqbmRp', which suggest an attacker's effort to leverage environmental data for malicious purposes.\n- The use of expressions designed to manipulate the case of characters ('${${lower:j}ndi:', '${${upper:j}ndi:') or to break the usual patterns to evade simpler pattern-matching defenses ('${${::-j}${::-n}${::-d}${::-i}:').\n\nHowever, it's crucial to exclude certain patterns that are known to generate false positives, such as references to 'w.nessus.org/nessus' or '/nessus}', which might appear in vulnerability scanning activity rather than actual attacks.\n\nThe detection effort should focus on identifying these patterns while excluding known benign triggers to reduce the likelihood of false positives, keeping in mind that legitimate vulnerability scanning activities might inadvertently produce similar log entries. This monitoring should tag detections with the associated tactics and techniques, such as Initial Access, Execution, and Impact, as part of a comprehensive security strategy to guard against the exploitation of the log4j vulnerability known as Log4Shell."
    }
  },
  {
    "instruction": "How to detect: Adversaries may attempt to access or create a copy of the Active Directory domain database in order to steal credential information",
    "context": "",
    "output": "In order to detect attempts by adversaries to access or create a copy of the Active Directory domain database in order to steal credential information, you should monitor for specific PowerShell script activities that indicate such behavior. Focus on Windows environments where Script Block Logging is enabled, which falls under the category of PowerShell scripting activity. \n\nSpecifically, look for PowerShell scripts that contain all of the following strings: 'win32_shadowcopy', ').Create(', and 'ClientAccessible'. These strings suggest that a script is attempting to use the Windows Volume Shadow Copy Service to access or create a shadow copy of data, which can include the Active Directory domain database, hence facilitating the theft of credential information. \n\nIt's important to be aware that there can be false positives, as legitimate PowerShell scripts may also perform these actions for benign purposes. Thus, any detection at a high level of alert should be carefully investigated to distinguish between malicious activity and legitimate administrative tasks.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Adversaries may attempt to access or create a copy of the Active Directory domain database in order to steal credential information",
      "answer": "In order to detect attempts by adversaries to access or create a copy of the Active Directory domain database in order to steal credential information, you should monitor for specific PowerShell script activities that indicate such behavior. Focus on Windows environments where Script Block Logging is enabled, which falls under the category of PowerShell scripting activity. \n\nSpecifically, look for PowerShell scripts that contain all of the following strings: 'win32_shadowcopy', ').Create(', and 'ClientAccessible'. These strings suggest that a script is attempting to use the Windows Volume Shadow Copy Service to access or create a shadow copy of data, which can include the Active Directory domain database, hence facilitating the theft of credential information. \n\nIt's important to be aware that there can be false positives, as legitimate PowerShell scripts may also perform these actions for benign purposes. Thus, any detection at a high level of alert should be carefully investigated to distinguish between malicious activity and legitimate administrative tasks."
    }
  },
  {
    "instruction": "Can you explain how to detect: creation of taskmgr.exe process in context of LOCAL_SYSTEM",
    "context": "",
    "output": "Certainly!\n\nIn order to detect the creation of taskmgr.exe process in the context of LOCAL_SYSTEM, you should monitor process creation events on Windows systems. Specifically, look for instances where the process being created ends with the name '\\taskmgr.exe'. Additionally, scrutinize the user context under which this process is initiated, particularly focusing on user names that contain variations of 'AUTHORI' or 'AUTORI', which might hint at different language settings. This approach is aimed at identifying suspicious activities that might be attempting to masquerade or operate under highly privileged accounts, indicative of potential malicious behavior. It is important to note that there might be legitimate cases where such events could occur; however, due to the high-risk nature associated with the creation of the Task Manager process under the LOCAL_SYSTEM account, these events are tagged with a high level of concern and require immediate attention.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "creation of taskmgr.exe process in context of LOCAL_SYSTEM",
      "answer": "In order to detect the creation of taskmgr.exe process in the context of LOCAL_SYSTEM, you should monitor process creation events on Windows systems. Specifically, look for instances where the process being created ends with the name '\\taskmgr.exe'. Additionally, scrutinize the user context under which this process is initiated, particularly focusing on user names that contain variations of 'AUTHORI' or 'AUTORI', which might hint at different language settings. This approach is aimed at identifying suspicious activities that might be attempting to masquerade or operate under highly privileged accounts, indicative of potential malicious behavior. It is important to note that there might be legitimate cases where such events could occur; however, due to the high-risk nature associated with the creation of the Task Manager process under the LOCAL_SYSTEM account, these events are tagged with a high level of concern and require immediate attention."
    }
  },
  {
    "instruction": "How to detect: access to a domain user from a non-machine account",
    "context": "",
    "output": "In order to detect access to a domain user from a non-machine account, you should focus on monitoring security logs from Windows systems. Specifically, look for event ID 4662, which signals an attempt to access an object. The object type of interest is identified by its globally unique identifier (GUID) 'bf967aba-0de6-11d0-a285-00aa003049e2', which corresponds to user objects in Windows. This means the detection targets situations where someone is accessing properties of a user object within the domain.\n\nHowever, it's important to exclude events generated by machine accounts and specific system accounts used by Microsoft services (like those starting with 'MSOL_'), as these are normally involved in legitimate operations and could otherwise generate false positives. Machine accounts can be identified and excluded if the subject's username ends with a '$', a customary naming convention for such accounts.\n\nBe aware that legitimate administrative activities, such as configuring new users, might trigger this detection, which could lead to potential false positives.\n\nBy focusing on these criteria, the aim is to pinpoint access attempts to domain user objects that are not initiated by recognized system processes or machine accounts, indicating a possible unauthorized access or reconnaissance activity by an attacker trying to explore or compromise domain user accounts. This approach plays a crucial role in safeguarding against tactics and techniques related to unauthorized access, lateral movement, and domain discovery.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "access to a domain user from a non-machine account",
      "answer": "In order to detect access to a domain user from a non-machine account, you should focus on monitoring security logs from Windows systems. Specifically, look for event ID 4662, which signals an attempt to access an object. The object type of interest is identified by its globally unique identifier (GUID) 'bf967aba-0de6-11d0-a285-00aa003049e2', which corresponds to user objects in Windows. This means the detection targets situations where someone is accessing properties of a user object within the domain.\n\nHowever, it's important to exclude events generated by machine accounts and specific system accounts used by Microsoft services (like those starting with 'MSOL_'), as these are normally involved in legitimate operations and could otherwise generate false positives. Machine accounts can be identified and excluded if the subject's username ends with a '$', a customary naming convention for such accounts.\n\nBe aware that legitimate administrative activities, such as configuring new users, might trigger this detection, which could lead to potential false positives.\n\nBy focusing on these criteria, the aim is to pinpoint access attempts to domain user objects that are not initiated by recognized system processes or machine accounts, indicating a possible unauthorized access or reconnaissance activity by an attacker trying to explore or compromise domain user accounts. This approach plays a crucial role in safeguarding against tactics and techniques related to unauthorized access, lateral movement, and domain discovery."
    }
  },
  {
    "instruction": "Can you explain how to detect: discovery of domain trusts.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect a discovery of domain trusts, you should: Monitor the creation of processes on Windows systems for executions of 'dsquery.exe' or 'nltest.exe' with specific command-line arguments indicating a search for domain trusts. Specifically, look for 'dsquery.exe' processes that include both '-filter' and 'trustedDomain' in the command line. Additionally, watch for 'nltest.exe' processes that include 'domain_trusts' in their command lines. It is important to note that while these behaviors can indicate an attacker's intent to discover domain trusts, they may also be part of legitimate system administration activities. Therefore, it's classified with a medium level of caution due to possible false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "discovery of domain trusts.",
      "answer": "In order to detect a discovery of domain trusts, you should: Monitor the creation of processes on Windows systems for executions of 'dsquery.exe' or 'nltest.exe' with specific command-line arguments indicating a search for domain trusts. Specifically, look for 'dsquery.exe' processes that include both '-filter' and 'trustedDomain' in the command line. Additionally, watch for 'nltest.exe' processes that include 'domain_trusts' in their command lines. It is important to note that while these behaviors can indicate an attacker's intent to discover domain trusts, they may also be part of legitimate system administration activities. Therefore, it's classified with a medium level of caution due to possible false positives."
    }
  },
  {
    "instruction": "How to detect: Microsoft Excel loading an Add-In (.xll) file",
    "context": "",
    "output": "In order to detect Microsoft Excel loading an Add-In (.xll) file, you should: monitor for instances where the Microsoft Windows operating system reports the loading of image files specifically related to Microsoft Excel (identified by the file name ending in '\\excel.exe'). Furthermore, you should check if these instances involve Excel loading a file with a '.xll' extension, which refers to Excel Add-In files. It's important to note that this detection might trigger some false positives since the rule is precisely looking for the loading of '.xll' files, which could occasionally include legitimate and allowed XLL Add-Ins. The security level for this alert is considered low, indicating that while it's valuable for identifying potentially suspicious behavior, it's also expected to occasionally flag benign activities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Microsoft Excel loading an Add-In (.xll) file",
      "answer": "In order to detect Microsoft Excel loading an Add-In (.xll) file, you should: monitor for instances where the Microsoft Windows operating system reports the loading of image files specifically related to Microsoft Excel (identified by the file name ending in '\\excel.exe'). Furthermore, you should check if these instances involve Excel loading a file with a '.xll' extension, which refers to Excel Add-In files. It's important to note that this detection might trigger some false positives since the rule is precisely looking for the loading of '.xll' files, which could occasionally include legitimate and allowed XLL Add-Ins. The security level for this alert is considered low, indicating that while it's valuable for identifying potentially suspicious behavior, it's also expected to occasionally flag benign activities."
    }
  },
  {
    "instruction": "Can you explain how to detect: Attackers may leverage fsutil to enumerated connected drives.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect attackers who may leverage fsutil to enumerate connected drives, you should: Monitor for the creation of processes on Windows systems, specifically focusing on instances where the process image either ends with '\\fsutil.exe' or has an original filename of 'fsutil.exe'. Additionally, watch for command-line usage containing the term 'drives'. This approach aims to identify attempts to use fsutil for discovering connected drives, a method that could be indicative of reconnaissance activities. It is important to note, however, that certain legitimate software installations or administrative tasks might also trigger these indicators, potentially leading to false positives. This detection strategy is categorized at a low level of alert due to the possibility of such benign triggers.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Attackers may leverage fsutil to enumerated connected drives.",
      "answer": "In order to detect attackers who may leverage fsutil to enumerate connected drives, you should: Monitor for the creation of processes on Windows systems, specifically focusing on instances where the process image either ends with '\\fsutil.exe' or has an original filename of 'fsutil.exe'. Additionally, watch for command-line usage containing the term 'drives'. This approach aims to identify attempts to use fsutil for discovering connected drives, a method that could be indicative of reconnaissance activities. It is important to note, however, that certain legitimate software installations or administrative tasks might also trigger these indicators, potentially leading to false positives. This detection strategy is categorized at a low level of alert due to the possibility of such benign triggers."
    }
  },
  {
    "instruction": "How can I detect: suspicious process spawning from an Outlook process.",
    "context": "",
    "output": "In order to detect a suspicious process spawning from an Outlook process, you should: observe the creation of processes on Windows systems, particularly focusing on instances where the parent process is Outlook (OUTLOOK.EXE). The types of processes you should be alert for include but are not limited to AppVLP.exe, bash.exe, cmd.exe, cscript.exe, forfiles.exe, hh.exe, mftrace.exe, msbuild.exe, msdt.exe (associated with CVE-2022-30190), mshta.exe, msiexec.exe, powershell.exe, pwsh.exe, regsvr32.exe, schtasks.exe, scrcons.exe, scriptrunner.exe, sh.exe, svchost.exe, wmic.exe, and wscript.exe. Despite rundll32.exe being a common process spawned for malicious purposes, it has been deliberately excluded from this detection due to producing numerous false positives in certain contexts. This monitoring is crucial for identifying potential unauthorized or malicious activities initiated via Outlook, such as the execution of scripts or unauthorized commands that could be indicative of an attack or exploitation attempt. Pay special attention to the command line used to initiate these processes, as it may provide additional context or evidence of malicious intent.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious process spawning from an Outlook process.",
      "answer": "In order to detect a suspicious process spawning from an Outlook process, you should: observe the creation of processes on Windows systems, particularly focusing on instances where the parent process is Outlook (OUTLOOK.EXE). The types of processes you should be alert for include but are not limited to AppVLP.exe, bash.exe, cmd.exe, cscript.exe, forfiles.exe, hh.exe, mftrace.exe, msbuild.exe, msdt.exe (associated with CVE-2022-30190), mshta.exe, msiexec.exe, powershell.exe, pwsh.exe, regsvr32.exe, schtasks.exe, scrcons.exe, scriptrunner.exe, sh.exe, svchost.exe, wmic.exe, and wscript.exe. Despite rundll32.exe being a common process spawned for malicious purposes, it has been deliberately excluded from this detection due to producing numerous false positives in certain contexts. This monitoring is crucial for identifying potential unauthorized or malicious activities initiated via Outlook, such as the execution of scripts or unauthorized commands that could be indicative of an attack or exploitation attempt. Pay special attention to the command line used to initiate these processes, as it may provide additional context or evidence of malicious intent."
    }
  },
  {
    "instruction": "Can you explain how to detect: modification of autostart extensibility point (ASEP) in registry.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect modification of autostart extensibility point (ASEP) in registry, you should: Monitor the Windows registry for changes targeting autostart extensibility points. Specifically, watch for SetValue events within the Windows registry that modify keys related to the Windows NT current version, including but not limited to areas within Winlogon (e.g., VmApplet, Userinit, Taskman, Shell, GpExtensions, AppSetup, AlternateShells/AvailableShells), Windows services such as IconServiceLib, Appinit_Dlls, various driver configurations (e.g., Font Drivers, Drivers32), and startup commands (Windows\\Run, Windows\\Load). It is important to exclude legitimate modifications made by trusted system processes or during legitimate software installations, such as those originating from recognized paths of Microsoft Office installer, Microsoft Edge Update process, ClickToRun service, .NET Framework's NGEN, or OneDrive's update mechanism. Special attention is given to filtering out known legitimate uses of Image File Execution Options that are not typically used for persistence. Any modification attempt not excluded by these filters, especially with the matching security identifiers, object names, and changes in value types, should be considered for investigation. Common legitimate reasons for these changes include software installation routines and administrative configurations, so it is vital to balance sensitivity to avoid false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "modification of autostart extensibility point (ASEP) in registry.",
      "answer": "In order to detect modification of autostart extensibility point (ASEP) in registry, you should: Monitor the Windows registry for changes targeting autostart extensibility points. Specifically, watch for SetValue events within the Windows registry that modify keys related to the Windows NT current version, including but not limited to areas within Winlogon (e.g., VmApplet, Userinit, Taskman, Shell, GpExtensions, AppSetup, AlternateShells/AvailableShells), Windows services such as IconServiceLib, Appinit_Dlls, various driver configurations (e.g., Font Drivers, Drivers32), and startup commands (Windows\\Run, Windows\\Load). It is important to exclude legitimate modifications made by trusted system processes or during legitimate software installations, such as those originating from recognized paths of Microsoft Office installer, Microsoft Edge Update process, ClickToRun service, .NET Framework's NGEN, or OneDrive's update mechanism. Special attention is given to filtering out known legitimate uses of Image File Execution Options that are not typically used for persistence. Any modification attempt not excluded by these filters, especially with the matching security identifiers, object names, and changes in value types, should be considered for investigation. Common legitimate reasons for these changes include software installation routines and administrative configurations, so it is vital to balance sensitivity to avoid false positives."
    }
  },
  {
    "instruction": "Explain how should I detect the following: an attempt to leverage dnscmd.exe to enumerate the DNS zones of a domain. DNS zones used to host the DNS records for a particular domain.",
    "context": "",
    "output": "In order to detect an attempt to leverage dnscmd.exe to enumerate the DNS zones of a domain, which are used to host the DNS records for a particular domain, you should focus on monitoring the creation of processes on Windows systems. Specifically, watch for any processes that are initiated where the image name ends with '\\dnscmd.exe'. Additionally, check if the command line used to start these processes includes any of the following arguments: '/enumrecords', '/enumzones', '/ZonePrint', or '/info'. These particular arguments are indicative of actions that could be used maliciously to gather information about DNS zones and records. It's important to be aware that these detections could also trigger on legitimate administration activities. Therefore, such detections have been assigned a medium level of importance, implying that while they are noteworthy, they should not be considered definitive proof of malicious behavior without further investigation.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "an attempt to leverage dnscmd.exe to enumerate the DNS zones of a domain. DNS zones used to host the DNS records for a particular domain.",
      "answer": "In order to detect an attempt to leverage dnscmd.exe to enumerate the DNS zones of a domain, which are used to host the DNS records for a particular domain, you should focus on monitoring the creation of processes on Windows systems. Specifically, watch for any processes that are initiated where the image name ends with '\\dnscmd.exe'. Additionally, check if the command line used to start these processes includes any of the following arguments: '/enumrecords', '/enumzones', '/ZonePrint', or '/info'. These particular arguments are indicative of actions that could be used maliciously to gather information about DNS zones and records. It's important to be aware that these detections could also trigger on legitimate administration activities. Therefore, such detections have been assigned a medium level of importance, implying that while they are noteworthy, they should not be considered definitive proof of malicious behavior without further investigation."
    }
  },
  {
    "instruction": "Can you explain how to detect: when an a role privilege is deleted in Google Workspace.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect when a role privilege is deleted in Google Workspace, you should focus on monitoring administrative activities within Google Workspace's admin service. Specifically, pay attention to logs generated by the admin.googleapis.com service, looking for events named REMOVE_PRIVILEGE. This approach zeroes in on instances where a role's privilege is removed, which could indicate unauthorized changes or potential security concerns. It is important to note that the reliability of this method is considered to be at a medium level due to the possibility of unknown false positives. Essentially, by scrutinizing such specific administrative actions within Google Workspace, you can identify and respond to unauthorized privilege deletions, thereby enhancing the security posture of the environment.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "when an a role privilege is deleted in Google Workspace.",
      "answer": "In order to detect when a role privilege is deleted in Google Workspace, you should focus on monitoring administrative activities within Google Workspace's admin service. Specifically, pay attention to logs generated by the admin.googleapis.com service, looking for events named REMOVE_PRIVILEGE. This approach zeroes in on instances where a role's privilege is removed, which could indicate unauthorized changes or potential security concerns. It is important to note that the reliability of this method is considered to be at a medium level due to the possibility of unknown false positives. Essentially, by scrutinizing such specific administrative actions within Google Workspace, you can identify and respond to unauthorized privilege deletions, thereby enhancing the security posture of the environment."
    }
  },
  {
    "instruction": "Can you explain how to detect: Detect adversaries enumerate sensitive files",
    "context": "",
    "output": "Certainly!\n\nIn order to detect adversaries enumerating sensitive files, you should: Monitor Windows PowerShell script activities, specifically focusing on script block logging which must be enabled for accurate detection. Look for scripts containing commands like 'ls', 'get-childitem', or 'gci' indicating an intention to list directory contents. Further scrutiny should be applied to scripts attempting to use the '-recurse' option, indicating a deeper, possibly malicious directory traversal. Pay special attention to scripts that seem to search for sensitive file types, such as '.pass', '.kdbx', or '.kdb', as this could signify an attempt to locate and potentially compromise crucial data. The detection should be considered genuine if all the mentioned conditions are met, acknowledging the possibility of unknown false positives at a medium severity level.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Detect adversaries enumerate sensitive files",
      "answer": "In order to detect adversaries enumerating sensitive files, you should: Monitor Windows PowerShell script activities, specifically focusing on script block logging which must be enabled for accurate detection. Look for scripts containing commands like 'ls', 'get-childitem', or 'gci' indicating an intention to list directory contents. Further scrutiny should be applied to scripts attempting to use the '-recurse' option, indicating a deeper, possibly malicious directory traversal. Pay special attention to scripts that seem to search for sensitive file types, such as '.pass', '.kdbx', or '.kdb', as this could signify an attempt to locate and potentially compromise crucial data. The detection should be considered genuine if all the mentioned conditions are met, acknowledging the possibility of unknown false positives at a medium severity level."
    }
  },
  {
    "instruction": "Explain how should I detect the following: creation of a office macro file from a a suspicious process",
    "context": "",
    "output": "In order to detect the creation of an office macro file from a suspicious process, you should monitor file events on Windows systems, with a spotlight on the creation of macro-enabled Office documents (.docm, .dotm, .xlsm, .xltm, .potm, .pptm). Specifically, you need to check if such documents are being created by processes typically associated with automation or script execution, such as cscript.exe, mshta.exe, regsvr32.exe, rundll32.exe, and wscript.exe. It's crucial to note that this detection requires the enrichment of Sysmon Event ID 11 logs with the ParentImage field, as this field isn't available by default but is essential for identifying the parent process involved in the creation of the document. Monitoring for these conditions can help identify potentially malicious activities tied to tactics and techniques such as execution through API, Windows Management Instrumentation, or other script-based execution methods, indicating a high level of threat.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "creation of a office macro file from a a suspicious process",
      "answer": "In order to detect the creation of an office macro file from a suspicious process, you should monitor file events on Windows systems, with a spotlight on the creation of macro-enabled Office documents (.docm, .dotm, .xlsm, .xltm, .potm, .pptm). Specifically, you need to check if such documents are being created by processes typically associated with automation or script execution, such as cscript.exe, mshta.exe, regsvr32.exe, rundll32.exe, and wscript.exe. It's crucial to note that this detection requires the enrichment of Sysmon Event ID 11 logs with the ParentImage field, as this field isn't available by default but is essential for identifying the parent process involved in the creation of the document. Monitoring for these conditions can help identify potentially malicious activities tied to tactics and techniques such as execution through API, Windows Management Instrumentation, or other script-based execution methods, indicating a high level of threat."
    }
  },
  {
    "instruction": "Can you explain how to detect: use of Wlrmdr.exe in which the -u parameter is passed to ShellExecute",
    "context": "",
    "output": "Certainly!\n\nIn order to detect the use of Wlrmdr.exe in which the -u parameter is passed to ShellExecute, you should monitor for the creation of processes on Windows systems where the new process image name ends with '\\wlrmdr.exe' or the OriginalFileName is 'WLRMNDR.EXE'. Additionally, look for command line arguments that contain all of the following: '-s ', '-f ', '-t ', '-m ', '-a ', and particularly '-u '. It is crucial to also check for instances where these processes are spawned by a parent process ending with '\\wlrmdr.exe'. However, make an exception for processes that have 'C:\\Windows\\System32\\winlogon.exe' as their parent image to minimize false positives and ignore cases where the parent image information is not available. This monitoring helps in identifying potentially malicious use of Wlrmdr.exe, which could be indicative of an attack attempt exploiting ShellExecute with specific parameters to perform unauthorized actions.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "use of Wlrmdr.exe in which the -u parameter is passed to ShellExecute",
      "answer": "In order to detect the use of Wlrmdr.exe in which the -u parameter is passed to ShellExecute, you should monitor for the creation of processes on Windows systems where the new process image name ends with '\\wlrmdr.exe' or the OriginalFileName is 'WLRMNDR.EXE'. Additionally, look for command line arguments that contain all of the following: '-s ', '-f ', '-t ', '-m ', '-a ', and particularly '-u '. It is crucial to also check for instances where these processes are spawned by a parent process ending with '\\wlrmdr.exe'. However, make an exception for processes that have 'C:\\Windows\\System32\\winlogon.exe' as their parent image to minimize false positives and ignore cases where the parent image information is not available. This monitoring helps in identifying potentially malicious use of Wlrmdr.exe, which could be indicative of an attack attempt exploiting ShellExecute with specific parameters to perform unauthorized actions."
    }
  },
  {
    "instruction": "Please help me detect the following: changes to the ClickOnce trust prompt registry key in order to enable an installation from different locations such as the Internet.",
    "context": "",
    "output": "Sure!\nIn order to detect changes to the ClickOnce trust prompt registry key in order to enable an installation from different locations such as the Internet, you should monitor Windows Registry settings specifically for \"SetValue\" events. Focus on changes made under the `\\SOFTWARE\\MICROSOFT\\.NETFramework\\Security\\TrustManager\\PromptingLevel\\` path with particular attention to any modifications ending with '\\Internet', '\\LocalIntranet', '\\MyComputer', '\\TrustedSites', or '\\UntrustedSites'. The critical detail to look for is the 'Enabled' status in these registry settings. These changes might signal an attempt to lower security measures and facilitate installations from less secure or trusted locations. However, be aware that some legitimate internal requirements might necessitate such modifications, leading to possible false positives. The severity of this detection is considered medium, emphasizing its importance without suggesting it signals an immediate and critical threat. Understanding these modifications can play a crucial role in identifying potential security risks associated with the weakening of ClickOnce trust prompts.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "changes to the ClickOnce trust prompt registry key in order to enable an installation from different locations such as the Internet.",
      "answer": "In order to detect changes to the ClickOnce trust prompt registry key in order to enable an installation from different locations such as the Internet, you should monitor Windows Registry settings specifically for \"SetValue\" events. Focus on changes made under the `\\SOFTWARE\\MICROSOFT\\.NETFramework\\Security\\TrustManager\\PromptingLevel\\` path with particular attention to any modifications ending with '\\Internet', '\\LocalIntranet', '\\MyComputer', '\\TrustedSites', or '\\UntrustedSites'. The critical detail to look for is the 'Enabled' status in these registry settings. These changes might signal an attempt to lower security measures and facilitate installations from less secure or trusted locations. However, be aware that some legitimate internal requirements might necessitate such modifications, leading to possible false positives. The severity of this detection is considered medium, emphasizing its importance without suggesting it signals an immediate and critical threat. Understanding these modifications can play a crucial role in identifying potential security risks associated with the weakening of ClickOnce trust prompts."
    }
  },
  {
    "instruction": "Can you explain how to detect: Setting of Windows Defender Exclusions",
    "context": "",
    "output": "Certainly!\n\nIn order to detect the setting of Windows Defender exclusions, you should monitor Windows registry modification events specifically related to Windows Defender exclusions settings. Focus on the Windows event log entries that come from registry settings adjustments (category: registry_set) and look for events where the type of event is 'SetValue'. This event type indicates that a registry value was changed, which in this context means a potential modification to the Windows Defender exclusions list. Specifically, concentrate on entries where the targeted registry object includes the path '\\Microsoft\\Windows Defender\\Exclusions'. These are indicative of changes to the list of files, folders, file types, or processes excluded from scanning by Windows Defender, a common tactic used by attackers to avoid detection. However, be aware that not all changes to this list are malicious. Legitimate administrator actions can include modifications to the exclusions list for various reasons, and these should be considered as possible false positives. The severity level associated with detecting changes to the Windows Defender exclusions list is deemed medium, reflecting the balance between the potential for this activity to represent a security threat and the possibility of legitimate administrative actions.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Setting of Windows Defender Exclusions",
      "answer": "In order to detect the setting of Windows Defender exclusions, you should monitor Windows registry modification events specifically related to Windows Defender exclusions settings. Focus on the Windows event log entries that come from registry settings adjustments (category: registry_set) and look for events where the type of event is 'SetValue'. This event type indicates that a registry value was changed, which in this context means a potential modification to the Windows Defender exclusions list. Specifically, concentrate on entries where the targeted registry object includes the path '\\Microsoft\\Windows Defender\\Exclusions'. These are indicative of changes to the list of files, folders, file types, or processes excluded from scanning by Windows Defender, a common tactic used by attackers to avoid detection. However, be aware that not all changes to this list are malicious. Legitimate administrator actions can include modifications to the exclusions list for various reasons, and these should be considered as possible false positives. The severity level associated with detecting changes to the Windows Defender exclusions list is deemed medium, reflecting the balance between the potential for this activity to represent a security threat and the possibility of legitimate administrative actions."
    }
  },
  {
    "instruction": "Please help me detect the following: Java class download in proxy logs, e.g. used in Log4shell exploitation attacks against Log4j.",
    "context": "",
    "output": "Sure!\nIn order to detect Java class download in proxy logs, e.g. used in Log4shell exploitation attacks against Log4j, you should: Monitor proxy logs for any indications of '.class' files being requested or downloaded. This involves specifically looking for URLs that end with '.class', as this is a common indicator of an attempt to exploit vulnerabilities found in Java applications, possibly related to the Log4j library. Evaluating these proxy logs under this condition is crucial for early detection of exploitation attempts. It's important to act with a high level of caution due to the severity of potential exploits, although there may be cases of false positives where legitimate '.class' files are being downloaded for non-malicious purposes.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Java class download in proxy logs, e.g. used in Log4shell exploitation attacks against Log4j.",
      "answer": "In order to detect Java class download in proxy logs, e.g. used in Log4shell exploitation attacks against Log4j, you should: Monitor proxy logs for any indications of '.class' files being requested or downloaded. This involves specifically looking for URLs that end with '.class', as this is a common indicator of an attempt to exploit vulnerabilities found in Java applications, possibly related to the Log4j library. Evaluating these proxy logs under this condition is crucial for early detection of exploitation attempts. It's important to act with a high level of caution due to the severity of potential exploits, although there may be cases of false positives where legitimate '.class' files are being downloaded for non-malicious purposes."
    }
  },
  {
    "instruction": "How can I detect: creation of a new service.",
    "context": "",
    "output": "In order to detect the creation of a new service, you should monitor Windows process creation logs for specific patterns that indicate such activity. Look for instances where the process image ends with '\\sc.exe' combined with command lines that include both 'create' and 'binPath'. Additionally, pay attention to the use of PowerShell commands containing 'New-Service' together with '-BinaryPathName'. This monitoring helps in identifying potentially unauthorized service creation, which could be indicative of malicious activity. However, be aware that there might be false positives, such as legitimate service creation by administrators or users for non-malicious purposes. Given these considerations, the detection level for such activities is categorized as low.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "creation of a new service.",
      "answer": "In order to detect the creation of a new service, you should monitor Windows process creation logs for specific patterns that indicate such activity. Look for instances where the process image ends with '\\sc.exe' combined with command lines that include both 'create' and 'binPath'. Additionally, pay attention to the use of PowerShell commands containing 'New-Service' together with '-BinaryPathName'. This monitoring helps in identifying potentially unauthorized service creation, which could be indicative of malicious activity. However, be aware that there might be false positives, such as legitimate service creation by administrators or users for non-malicious purposes. Given these considerations, the detection level for such activities is categorized as low."
    }
  },
  {
    "instruction": "How to detect: execution of rundll32 with a command line that doesn't contain a .dll file",
    "context": "",
    "output": "In order to detect the execution of rundll32 with a command line that doesn't contain a .dll file, you should monitor the process creation events on Windows systems. Specifically, you should focus on instances where the process image ends with '\\rundll32.exe' or the original file name is 'RUNDLL32.EXE'. It's important to eliminate any command lines that are null or explicitly contain '.dll' to reduce false positives. You should also disregard any rundll32 command lines that start with 'C:\\Windows\\system32\\rundll32.exe C:\\Windows\\system32\\inetcpl.cpl,ClearMyTracksByProcess', as this is a common legitimate usage.\n\nAdditionally, pay close attention to the parent process information. Exclude any instances where rundll32 is launched by Internet Explorer (with a parent image ending in '\\iexplore.exe' and a command line containing '.cpl'), the Windows Installer service from both 'SysWOW64' and 'System32' directories (having command lines that start with the respective paths to 'MsiExec.exe -Embedding'), and specific instances where rundll32 is initiated as a part of system updates or maintenance tasks by known parent processes like the Splunk Universal Forwarder, McAfee uninstallation routines, Microsoft Edge updates, and the Avira antivirus installer, among others.\n\nBy applying these filters, you aim to detect anomalous use of rundll32 that might indicate malicious activity while minimizing the false positives from legitimate rundll32 usage patterns, such as system updates, software installations, and routine maintenance tasks executed through known and trusted parent processes.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of rundll32 with a command line that doesn't contain a .dll file",
      "answer": "In order to detect the execution of rundll32 with a command line that doesn't contain a .dll file, you should monitor the process creation events on Windows systems. Specifically, you should focus on instances where the process image ends with '\\rundll32.exe' or the original file name is 'RUNDLL32.EXE'. It's important to eliminate any command lines that are null or explicitly contain '.dll' to reduce false positives. You should also disregard any rundll32 command lines that start with 'C:\\Windows\\system32\\rundll32.exe C:\\Windows\\system32\\inetcpl.cpl,ClearMyTracksByProcess', as this is a common legitimate usage.\n\nAdditionally, pay close attention to the parent process information. Exclude any instances where rundll32 is launched by Internet Explorer (with a parent image ending in '\\iexplore.exe' and a command line containing '.cpl'), the Windows Installer service from both 'SysWOW64' and 'System32' directories (having command lines that start with the respective paths to 'MsiExec.exe -Embedding'), and specific instances where rundll32 is initiated as a part of system updates or maintenance tasks by known parent processes like the Splunk Universal Forwarder, McAfee uninstallation routines, Microsoft Edge updates, and the Avira antivirus installer, among others.\n\nBy applying these filters, you aim to detect anomalous use of rundll32 that might indicate malicious activity while minimizing the false positives from legitimate rundll32 usage patterns, such as system updates, software installations, and routine maintenance tasks executed through known and trusted parent processes."
    }
  },
  {
    "instruction": "How to detect: Use living off the land tools to zip a file and stage it in the Windows temporary folder for later exfiltration",
    "context": "",
    "output": "In order to use living off the land tools to zip a file and stage it in the Windows temporary folder for later exfiltration, you should monitor Windows PowerShell module logs for specific command-line patterns that indicate such activity. This involves tracking commands that utilize the 'Compress-Archive' function, a part of PowerShell used to create zip archives. Specifically, you should look for commands that include both the '-Path' and '-DestinationPath' parameters, indicating the source files to compress and the location where the compressed archive should be stored. It's critical to focus on commands that specify the destination path as the Windows temporary folder, denoted by `$env:TEMP\\`. This pattern of behavior is indicative of attackers leveraging built-in tools to compress potentially sensitive information before exfiltration, aligning with tactics and techniques such as Resource Development and Collection. While this detection strategy is important for identifying suspicious zipping activity, it's also advised to be aware of potential unknown false positives, given the legitimate use of 'Compress-Archive' in non-malicious contexts. The monitoring of these activities is categorized as medium level due to the possibility of both legitimate and malicious use cases.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Use living off the land tools to zip a file and stage it in the Windows temporary folder for later exfiltration",
      "answer": "In order to use living off the land tools to zip a file and stage it in the Windows temporary folder for later exfiltration, you should monitor Windows PowerShell module logs for specific command-line patterns that indicate such activity. This involves tracking commands that utilize the 'Compress-Archive' function, a part of PowerShell used to create zip archives. Specifically, you should look for commands that include both the '-Path' and '-DestinationPath' parameters, indicating the source files to compress and the location where the compressed archive should be stored. It's critical to focus on commands that specify the destination path as the Windows temporary folder, denoted by `$env:TEMP\\`. This pattern of behavior is indicative of attackers leveraging built-in tools to compress potentially sensitive information before exfiltration, aligning with tactics and techniques such as Resource Development and Collection. While this detection strategy is important for identifying suspicious zipping activity, it's also advised to be aware of potential unknown false positives, given the legitimate use of 'Compress-Archive' in non-malicious contexts. The monitoring of these activities is categorized as medium level due to the possibility of both legitimate and malicious use cases."
    }
  },
  {
    "instruction": "How to detect: events in which someone prints the contents of history files to the commandline or redirects it to a file for reconnaissance",
    "context": "",
    "output": "In order to detect events in which someone prints the contents of history files to the commandline or redirects it to a file for reconnaissance, you should: Monitor the creation of Linux processes for instances where command-line utilities such as 'cat', 'head', 'tail', or 'more' are used. Specifically, pay attention to when these utilities are employed to access or display the contents of shell history files like '/.bash_history', '/.zsh_history', or any files that end with '_history', '.history', or 'zhistory'. This activity can indicate an attempt to understand the victim's command-line usage, possibly for further malicious endeavours. It is crucial, however, to consider that such actions might also be a part of legitimate administration activities, which are recognized as potential false positives at a medium threat level.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "events in which someone prints the contents of history files to the commandline or redirects it to a file for reconnaissance",
      "answer": "In order to detect events in which someone prints the contents of history files to the commandline or redirects it to a file for reconnaissance, you should: Monitor the creation of Linux processes for instances where command-line utilities such as 'cat', 'head', 'tail', or 'more' are used. Specifically, pay attention to when these utilities are employed to access or display the contents of shell history files like '/.bash_history', '/.zsh_history', or any files that end with '_history', '.history', or 'zhistory'. This activity can indicate an attempt to understand the victim's command-line usage, possibly for further malicious endeavours. It is crucial, however, to consider that such actions might also be a part of legitimate administration activities, which are recognized as potential false positives at a medium threat level."
    }
  },
  {
    "instruction": "Can you explain how to detect: scheduled task deletion events. Scheduled tasks are likely to be deleted if not used for persistence. Malicious Software often creates tasks directly under the root node e.g. \\TASKNAME",
    "context": "",
    "output": "Certainly!\n\nIn order to detect scheduled task deletion events, which are likely to be deleted if not used for persistence, and considering that malicious software often creates tasks directly under the root node e.g. \\TASKNAME, you should monitor for specific security events within Windows systems. Specifically, the detection requires the monitoring of Windows Security logs for event ID 4699, which indicates the deletion of a scheduled task. It's important to have the Advanced Audit Policy setting configured to audit Other Object Access Events to capture this activity. During the analysis, tasks with the name '\\Microsoft\\Windows\\RemovalTools\\MRT_ERROR_HB', typically associated with errors in Microsoft's Removal Tool executions, should not trigger alerts due to their benign nature. Similarly, tasks containing '\\Mozilla\\Firefox Default Browser Agent' in their name, usually linked to Firefox updates, should also be excluded to reduce false positive alerts. This filtering strategy is essential because tasks directly under the root node, not indicated by these exclusions, are more suspicious and could indicate an attempt by malicious software to persist within the system. Therefore, alerting on the deletion of scheduled tasks, excluding known software installation or update tasks, could indicate an adversary's attempt to remove traces of their presence or to disrupt scheduled tasks used by security tools or system maintenance functions.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "scheduled task deletion events. Scheduled tasks are likely to be deleted if not used for persistence. Malicious Software often creates tasks directly under the root node e.g. \\TASKNAME",
      "answer": "In order to detect scheduled task deletion events, which are likely to be deleted if not used for persistence, and considering that malicious software often creates tasks directly under the root node e.g. \\TASKNAME, you should monitor for specific security events within Windows systems. Specifically, the detection requires the monitoring of Windows Security logs for event ID 4699, which indicates the deletion of a scheduled task. It's important to have the Advanced Audit Policy setting configured to audit Other Object Access Events to capture this activity. During the analysis, tasks with the name '\\Microsoft\\Windows\\RemovalTools\\MRT_ERROR_HB', typically associated with errors in Microsoft's Removal Tool executions, should not trigger alerts due to their benign nature. Similarly, tasks containing '\\Mozilla\\Firefox Default Browser Agent' in their name, usually linked to Firefox updates, should also be excluded to reduce false positive alerts. This filtering strategy is essential because tasks directly under the root node, not indicated by these exclusions, are more suspicious and could indicate an attempt by malicious software to persist within the system. Therefore, alerting on the deletion of scheduled tasks, excluding known software installation or update tasks, could indicate an adversary's attempt to remove traces of their presence or to disrupt scheduled tasks used by security tools or system maintenance functions."
    }
  },
  {
    "instruction": "Can you explain how to detect: load of the vulnerable Lenovo driver as reported in CVE-2022-3699 which can be used to escalate privileges",
    "context": "",
    "output": "Certainly!\n\nIn order to detect the load of the vulnerable Lenovo driver as reported in CVE-2022-3699 which can be used to escalate privileges, you should monitor the loading of drivers on Windows systems, particularly for specific hash values that identify the compromised Lenovo driver. Ensure that both Sysmon logs and other hash monitoring systems are checked for the presence of any of the following hashes: SHA256 hash of 'F05B1EE9E2F6AB704B8919D5071BECBCE6F9D0F9D0BA32A460C41D5272134ABE', SHA1 hash of 'B89A8EEF5AEAE806AF5BA212A8068845CAFDAB6F', or an MD5 hash of 'B941C8364308990EE4CC6EADF7214E0F'. These specific hashes indicate the loading of a particular driver that has been identified as vulnerable and potentially being exploited for privilege escalation purposes. Note that while detecting these hashes is critical for security, it's possible to encounter false positives in scenarios where legitimate driver loads occur (particularly with drivers that haven't been updated). Given the high risk associated with this vulnerable driver, the detection of any of these hashes should be treated with a high priority level to mitigate potential security threats effectively.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "load of the vulnerable Lenovo driver as reported in CVE-2022-3699 which can be used to escalate privileges",
      "answer": "In order to detect the load of the vulnerable Lenovo driver as reported in CVE-2022-3699 which can be used to escalate privileges, you should monitor the loading of drivers on Windows systems, particularly for specific hash values that identify the compromised Lenovo driver. Ensure that both Sysmon logs and other hash monitoring systems are checked for the presence of any of the following hashes: SHA256 hash of 'F05B1EE9E2F6AB704B8919D5071BECBCE6F9D0F9D0BA32A460C41D5272134ABE', SHA1 hash of 'B89A8EEF5AEAE806AF5BA212A8068845CAFDAB6F', or an MD5 hash of 'B941C8364308990EE4CC6EADF7214E0F'. These specific hashes indicate the loading of a particular driver that has been identified as vulnerable and potentially being exploited for privilege escalation purposes. Note that while detecting these hashes is critical for security, it's possible to encounter false positives in scenarios where legitimate driver loads occur (particularly with drivers that haven't been updated). Given the high risk associated with this vulnerable driver, the detection of any of these hashes should be treated with a high priority level to mitigate potential security threats effectively."
    }
  },
  {
    "instruction": "How can I detect: processes loading the non-existent DLL \"ShellChromeAPI\". One known example is the \"DeviceEnroller\" binary in combination with the \"PhoneDeepLink\" flag tries to load this DLL.\nAdversaries can drop their own renamed DLL and execute it via DeviceEnroller.exe using this parameter\n",
    "context": "",
    "output": "In order to detect processes loading the non-existent DLL \"ShellChromeAPI\", which could indicate that adversaries are attempting to execute their own malicious DLL via legitimate Windows processes like DeviceEnroller.exe by misusing the \"PhoneDeepLink\" flag, you should focus on monitoring image loading activities within Windows environments. Specifically, you should pay attention to any instances where a DLL ending with the name \"\\ShellChromeAPI.dll\" is loaded. This DLL should not exist on modern Windows systems, and any attempt to load it should be considered suspicious and possibly indicative of an attack where an adversary is leveraging a renamed malicious DLL to compromise the system. It is important to remain vigilant for false positives, although they are currently unknown, and treat any detection at a high severity level due to the potential for significant system compromise. This technique is a telltale sign of adversaries trying to discreetly execute malicious code under the guise of legitimate operations.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "processes loading the non-existent DLL \"ShellChromeAPI\". One known example is the \"DeviceEnroller\" binary in combination with the \"PhoneDeepLink\" flag tries to load this DLL.\nAdversaries can drop their own renamed DLL and execute it via DeviceEnroller.exe using this parameter\n",
      "answer": "In order to detect processes loading the non-existent DLL \"ShellChromeAPI\", which could indicate that adversaries are attempting to execute their own malicious DLL via legitimate Windows processes like DeviceEnroller.exe by misusing the \"PhoneDeepLink\" flag, you should focus on monitoring image loading activities within Windows environments. Specifically, you should pay attention to any instances where a DLL ending with the name \"\\ShellChromeAPI.dll\" is loaded. This DLL should not exist on modern Windows systems, and any attempt to load it should be considered suspicious and possibly indicative of an attack where an adversary is leveraging a renamed malicious DLL to compromise the system. It is important to remain vigilant for false positives, although they are currently unknown, and treat any detection at a high severity level due to the potential for significant system compromise. This technique is a telltale sign of adversaries trying to discreetly execute malicious code under the guise of legitimate operations."
    }
  },
  {
    "instruction": "Can you explain how to detect: launch of the PSEXESVC service, which means that this system was the target of a psexec remote execution",
    "context": "",
    "output": "Certainly!\n\nIn order to detect the launch of the PSEXESVC service, which means that this system was the target of a psexec remote execution, you should: Monitor process creation logs on Windows systems for instances where the PSEXESVC.exe file, specifically located at C:\\Windows\\PSEXESVC.exe and bearing the original file name 'psexesvc.exe', is initiated. This detection helps in identifying potential malicious usage of the PsExec tool for remote execution, which could indicate a system compromise. Bear in mind, however, that the detection can generate alerts for legitimate administrative tasks that also use PsExec, hence such activities are considered as potential false positives and the alert level is set at medium.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "launch of the PSEXESVC service, which means that this system was the target of a psexec remote execution",
      "answer": "In order to detect the launch of the PSEXESVC service, which means that this system was the target of a psexec remote execution, you should: Monitor process creation logs on Windows systems for instances where the PSEXESVC.exe file, specifically located at C:\\Windows\\PSEXESVC.exe and bearing the original file name 'psexesvc.exe', is initiated. This detection helps in identifying potential malicious usage of the PsExec tool for remote execution, which could indicate a system compromise. Bear in mind, however, that the detection can generate alerts for legitimate administrative tasks that also use PsExec, hence such activities are considered as potential false positives and the alert level is set at medium."
    }
  },
  {
    "instruction": "Please help me detect the following: creation of a named pipe used by known APT malware",
    "context": "",
    "output": "Sure!\nIn order to detect the creation of a named pipe used by known APT malware, you should focus on monitoring Windows event logs specifically for events related to named pipe creation. Ensure your logging capabilities are configured to track Named Pipe Events, which in Sysmon are represented by Event ID 17 and Event ID 18. This is key to identifying the initial foothold or movement of a variety of sophisticated threats, including but not limited to advanced persistent threats (APT) that leverage this technique for communication or execution on a compromised system.\n\nYou should look for the creation of specific named pipes that are known to be associated with a variety of sophisticated malware families and groups, such as Uroburos, Cobra Trojan, Sofacy group malware, Wild Neutron APT malware, Project Sauron, Cloud Hopper, Equation Group malware, Covenant, SolarWinds SUNBURST malware, Snatch Ransomware, Crackmapexec, PoshC2, CSEXEC, LiquidSnake, Turla HyperStack, Hidden Cobra Hoplight, Pacifier, Emissary Panda Hyperbro, and Qbot. These specific named pipes, which include but are not limited to '\\isapi_http', '\\isapi_dg', '\\sdlrpc', '\\ahexec', '\\winsession', '\\lsassw', and many others detailed in the identification criteria, are strong indicators of malicious activity when they are detected being created within the system.\n\nGiven the critical level of this detection, it is advisable to treat any hits with high priority, although one should also consider the potential for unknown false positives. Verification and investigation would be required to distinguish between benign activity involving named pipes and these specific, high-risk malware signatures. This proactive monitoring and detection strategy is essential for defending against sophisticated threats that utilize named pipes for malicious purposes within an environment.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "creation of a named pipe used by known APT malware",
      "answer": "In order to detect the creation of a named pipe used by known APT malware, you should focus on monitoring Windows event logs specifically for events related to named pipe creation. Ensure your logging capabilities are configured to track Named Pipe Events, which in Sysmon are represented by Event ID 17 and Event ID 18. This is key to identifying the initial foothold or movement of a variety of sophisticated threats, including but not limited to advanced persistent threats (APT) that leverage this technique for communication or execution on a compromised system.\n\nYou should look for the creation of specific named pipes that are known to be associated with a variety of sophisticated malware families and groups, such as Uroburos, Cobra Trojan, Sofacy group malware, Wild Neutron APT malware, Project Sauron, Cloud Hopper, Equation Group malware, Covenant, SolarWinds SUNBURST malware, Snatch Ransomware, Crackmapexec, PoshC2, CSEXEC, LiquidSnake, Turla HyperStack, Hidden Cobra Hoplight, Pacifier, Emissary Panda Hyperbro, and Qbot. These specific named pipes, which include but are not limited to '\\isapi_http', '\\isapi_dg', '\\sdlrpc', '\\ahexec', '\\winsession', '\\lsassw', and many others detailed in the identification criteria, are strong indicators of malicious activity when they are detected being created within the system.\n\nGiven the critical level of this detection, it is advisable to treat any hits with high priority, although one should also consider the potential for unknown false positives. Verification and investigation would be required to distinguish between benign activity involving named pipes and these specific, high-risk malware signatures. This proactive monitoring and detection strategy is essential for defending against sophisticated threats that utilize named pipes for malicious purposes within an environment."
    }
  },
  {
    "instruction": "Can you explain how to detect: potential Dridex acitvity via specific process patterns",
    "context": "",
    "output": "Certainly!\n\nIn order to detect potential Dridex activity via specific process patterns, you should monitor Windows process creation logs for several suspicious behaviors indicative of malware operations. Specifically, look for instances where `svchost.exe` is running with a command line path indicating it was launched from a user's Desktop, but not when it's parent process is a legitimate system process from `C:\\Windows\\System32\\`. Additionally, be wary of `regsvr32.exe` being executed as a child of `excel.exe`, especially when the command line includes silent operation flags (`-s`) and targets files in the `\\AppData\\Local\\Temp\\` directory, unless it is explicitly loading `.dll` files which might still be legitimate use. Moreover, any `svchost.exe` process spawning `whoami.exe` with the `/all` switch or either `net.exe` or `net1.exe` with the `view` command is highly suspicious. These anomalies suggest attempts to enumerate system and network information, which is common in Dridex malware attacks. Given the critical nature of these activities and their low likelihood of being false positives, it's crucial to investigate and remediate detections promptly.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential Dridex acitvity via specific process patterns",
      "answer": "In order to detect potential Dridex activity via specific process patterns, you should monitor Windows process creation logs for several suspicious behaviors indicative of malware operations. Specifically, look for instances where `svchost.exe` is running with a command line path indicating it was launched from a user's Desktop, but not when it's parent process is a legitimate system process from `C:\\Windows\\System32\\`. Additionally, be wary of `regsvr32.exe` being executed as a child of `excel.exe`, especially when the command line includes silent operation flags (`-s`) and targets files in the `\\AppData\\Local\\Temp\\` directory, unless it is explicitly loading `.dll` files which might still be legitimate use. Moreover, any `svchost.exe` process spawning `whoami.exe` with the `/all` switch or either `net.exe` or `net1.exe` with the `view` command is highly suspicious. These anomalies suggest attempts to enumerate system and network information, which is common in Dridex malware attacks. Given the critical nature of these activities and their low likelihood of being false positives, it's crucial to investigate and remediate detections promptly."
    }
  },
  {
    "instruction": "Please help me detect the following: use of the PhoneDeepLink parameter to potentially sideload a DLL file that does not exist. This non-existent DLL file is named \"ShellChromeAPI.dll\".\nAdversaries can drop their own renamed DLL and execute it via DeviceEnroller.exe using this parameter\n",
    "context": "",
    "output": "Sure!\nIn order to detect the use of the PhoneDeepLink parameter to potentially sideload a DLL file that does not exist, which adversaries might exploit to drop and execute their own DLL named \"ShellChromeAPI.dll\" via DeviceEnroller.exe, you should: Focus on monitoring process creation events within Windows environments. Specifically, track the execution of 'deviceenroller.exe' either by identifying processes where the image path ends with '\\deviceenroller.exe' or where the original file name is 'deviceenroller.exe'. Additionally, you should look for command-line executions containing the '/PhoneDeepLink' argument. It is crucial to evaluate both conditions - the execution of 'deviceenroller.exe' and the presence of '/PhoneDeepLink' in the command line - together to effectively detect this activity. Be aware that there might be unknown false positives, and this detection is considered to have a medium level of importance.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "use of the PhoneDeepLink parameter to potentially sideload a DLL file that does not exist. This non-existent DLL file is named \"ShellChromeAPI.dll\".\nAdversaries can drop their own renamed DLL and execute it via DeviceEnroller.exe using this parameter\n",
      "answer": "In order to detect the use of the PhoneDeepLink parameter to potentially sideload a DLL file that does not exist, which adversaries might exploit to drop and execute their own DLL named \"ShellChromeAPI.dll\" via DeviceEnroller.exe, you should: Focus on monitoring process creation events within Windows environments. Specifically, track the execution of 'deviceenroller.exe' either by identifying processes where the image path ends with '\\deviceenroller.exe' or where the original file name is 'deviceenroller.exe'. Additionally, you should look for command-line executions containing the '/PhoneDeepLink' argument. It is crucial to evaluate both conditions - the execution of 'deviceenroller.exe' and the presence of '/PhoneDeepLink' in the command line - together to effectively detect this activity. Be aware that there might be unknown false positives, and this detection is considered to have a medium level of importance."
    }
  },
  {
    "instruction": "How can I detect: potential persistence activity via startup add-ins that load when Microsoft Office starts (.wll/.xll are simply .dll fit for Word or Excel).",
    "context": "",
    "output": "In order to detect potential persistence activity via startup add-ins that load when Microsoft Office starts (.wll/.xll are simply .dll fit for Word or Excel), you should: focus on monitoring file events in Windows for the creation or modification of specific startup add-in files associated with Microsoft Office applications. Look for files with the '.wll' extension, which are intended for Word, and are dropped in the directory path '\\Microsoft\\Word\\Startup\\'. Also, be vigilant for files with the '.xll' extension, suited for Excel add-ins, placed within '\\Microsoft\\Excel\\Startup\\' and for '.xlam' files within 'Microsoft\\Excel\\XLSTART\\'. Additionally, it's essential to monitor for any additions to '\\Microsoft\\Addins\\' directory, specifically files ending with extensions '.xlam', '.xla', and '.ppam', which are linked to add-ins capable of executing when Office applications launch. These activities could signal an attempt to establish persistence mechanisms by adversaries using Office applications as their vector. It is vital to be aware that there could be false positives in the form of legitimate add-ins; hence, a high level of suspicion should be applied when these conditions are met to avoid misinterpreting benign activity as malicious.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential persistence activity via startup add-ins that load when Microsoft Office starts (.wll/.xll are simply .dll fit for Word or Excel).",
      "answer": "In order to detect potential persistence activity via startup add-ins that load when Microsoft Office starts (.wll/.xll are simply .dll fit for Word or Excel), you should: focus on monitoring file events in Windows for the creation or modification of specific startup add-in files associated with Microsoft Office applications. Look for files with the '.wll' extension, which are intended for Word, and are dropped in the directory path '\\Microsoft\\Word\\Startup\\'. Also, be vigilant for files with the '.xll' extension, suited for Excel add-ins, placed within '\\Microsoft\\Excel\\Startup\\' and for '.xlam' files within 'Microsoft\\Excel\\XLSTART\\'. Additionally, it's essential to monitor for any additions to '\\Microsoft\\Addins\\' directory, specifically files ending with extensions '.xlam', '.xla', and '.ppam', which are linked to add-ins capable of executing when Office applications launch. These activities could signal an attempt to establish persistence mechanisms by adversaries using Office applications as their vector. It is vital to be aware that there could be false positives in the form of legitimate add-ins; hence, a high level of suspicion should be applied when these conditions are met to avoid misinterpreting benign activity as malicious."
    }
  },
  {
    "instruction": "How can I detect: suspicious access to Lsass handle via a call trace to \"seclogon.dll\"",
    "context": "",
    "output": "In order to detect suspicious access to Lsass handle via a call trace to \"seclogon.dll\", you should: Focus on logs related to process access within Windows environments. Specifically, look for instances where the target process is 'lsass.exe', which is a critical system process associated with the Local Security Authority Subsystem. The access attempt should originate from a process named 'svchost.exe', which is a legitimate system process but could be abused to perform malicious tasks. Crucially, the access permissions being requested are indicated by 'GrantedAccess' with a value of '0x14c0', suggesting a high level of access that is not typically necessary for routine operations. Additionally, the presence of 'seclogon.dll' in the call trace is a strong indicator of suspicious activity, as this could imply an attempt to manipulate security or authentication mechanisms. It's essential to monitor for these signs closely, as they represent activities often associated with higher-level threats attempting to gain unauthorized access or escalate privileges within a system.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious access to Lsass handle via a call trace to \"seclogon.dll\"",
      "answer": "In order to detect suspicious access to Lsass handle via a call trace to \"seclogon.dll\", you should: Focus on logs related to process access within Windows environments. Specifically, look for instances where the target process is 'lsass.exe', which is a critical system process associated with the Local Security Authority Subsystem. The access attempt should originate from a process named 'svchost.exe', which is a legitimate system process but could be abused to perform malicious tasks. Crucially, the access permissions being requested are indicated by 'GrantedAccess' with a value of '0x14c0', suggesting a high level of access that is not typically necessary for routine operations. Additionally, the presence of 'seclogon.dll' in the call trace is a strong indicator of suspicious activity, as this could imply an attempt to manipulate security or authentication mechanisms. It's essential to monitor for these signs closely, as they represent activities often associated with higher-level threats attempting to gain unauthorized access or escalate privileges within a system."
    }
  },
  {
    "instruction": "How can I detect: disabling Windows Defender threat protection",
    "context": "",
    "output": "In order to detect disabling Windows Defender threat protection, you should: focus on monitoring the Windows Defender service (windefend) logs for specific event IDs that signify critical functionalities of the Windows Defender being turned off or compromised. These event IDs include 5001, which indicates that real-time protection has been disabled; 5010, which shows that scanning for malware and other potentially unwanted software has been turned off; 5012, pointing to the disabling of virus scanning; and 5101, which signals that the antimalware platform has expired. It's essential to treat these events with a high level of suspicion, as they could imply a deliberate action to undermine the system's defenses, possibly by an administrator for legitimate reasons or as part of a cyber attack. However, note that these events might be triggered incorrectly during some Windows 8 Defender updates, so while these detections should prompt an investigation, they might not always point to a security breach.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "disabling Windows Defender threat protection",
      "answer": "In order to detect disabling Windows Defender threat protection, you should: focus on monitoring the Windows Defender service (windefend) logs for specific event IDs that signify critical functionalities of the Windows Defender being turned off or compromised. These event IDs include 5001, which indicates that real-time protection has been disabled; 5010, which shows that scanning for malware and other potentially unwanted software has been turned off; 5012, pointing to the disabling of virus scanning; and 5101, which signals that the antimalware platform has expired. It's essential to treat these events with a high level of suspicion, as they could imply a deliberate action to undermine the system's defenses, possibly by an administrator for legitimate reasons or as part of a cyber attack. However, note that these events might be triggered incorrectly during some Windows 8 Defender updates, so while these detections should prompt an investigation, they might not always point to a security breach."
    }
  },
  {
    "instruction": "Can you explain how to detect: file deletion using \"rm\", \"shred\" or \"unlink\" commands which are used often by adversaries to delete files left behind by the actions of their intrusion activity",
    "context": "",
    "output": "Certainly!\n\nIn order to detect file deletion using \"rm\", \"shred\" or \"unlink\" commands which are used often by adversaries to delete files left behind by the actions of their intrusion activity, you should: Focus on Linux-based systems and monitor the creation process logs. Specifically, you should keep an eye out for processes that end with '/rm', which covers the use of both the 'rm' command and its variant 'rmdir', as well as processes that conclude with '/shred' or '/unlink'. These commands are frequently employed by attackers to remove traces of their presence or activities. It's important to note, however, that these commands can also be used for legitimate administrative activities, so some occurrences might be false positives. The information level for this type of detection is classified as informational, indicating that while it's useful for understanding system activity, it should be validated in the context of other suspicious activities to accurately identify malicious behavior.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "file deletion using \"rm\", \"shred\" or \"unlink\" commands which are used often by adversaries to delete files left behind by the actions of their intrusion activity",
      "answer": "In order to detect file deletion using \"rm\", \"shred\" or \"unlink\" commands which are used often by adversaries to delete files left behind by the actions of their intrusion activity, you should: Focus on Linux-based systems and monitor the creation process logs. Specifically, you should keep an eye out for processes that end with '/rm', which covers the use of both the 'rm' command and its variant 'rmdir', as well as processes that conclude with '/shred' or '/unlink'. These commands are frequently employed by attackers to remove traces of their presence or activities. It's important to note, however, that these commands can also be used for legitimate administrative activities, so some occurrences might be false positives. The information level for this type of detection is classified as informational, indicating that while it's useful for understanding system activity, it should be validated in the context of other suspicious activities to accurately identify malicious behavior."
    }
  },
  {
    "instruction": "How to detect: user disables a critical security feature for an organization.",
    "context": "",
    "output": "In order to detect when a user disables a critical security feature for an organization, you should monitor GitHub audit logs, which requires the audit log streaming feature to be enabled. This monitoring targets activities that compromise security configurations, specifically within GitHub organizations or repositories. The key actions indicative of such activities include disabling OAuth app restrictions, disabling the requirement for two-factor authentication, disabling advanced security for a repository, and selecting a member to disable advanced security policy. \n\nFor effective detection, focus on the following data points extracted from the audit logs: the specific action taken, the actor who performed the action, the organization affected, the country code of the actor's location, the transport protocol used, the targeted repository, the public status of the repository, and the timestamp of the action. It is important to distinguish between legitimate administrative activities and malicious actions. Any activity falling outside approved administrative tasks should be considered a high-level security concern. \n\nThis approach is aligned with the MITRE ATT&CK tactics and techniques for Initial Access and Persistence by monitoring and flagging the disabling of critical security measures in GitHub environments.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "user disables a critical security feature for an organization.",
      "answer": "In order to detect when a user disables a critical security feature for an organization, you should monitor GitHub audit logs, which requires the audit log streaming feature to be enabled. This monitoring targets activities that compromise security configurations, specifically within GitHub organizations or repositories. The key actions indicative of such activities include disabling OAuth app restrictions, disabling the requirement for two-factor authentication, disabling advanced security for a repository, and selecting a member to disable advanced security policy. \n\nFor effective detection, focus on the following data points extracted from the audit logs: the specific action taken, the actor who performed the action, the organization affected, the country code of the actor's location, the transport protocol used, the targeted repository, the public status of the repository, and the timestamp of the action. It is important to distinguish between legitimate administrative activities and malicious actions. Any activity falling outside approved administrative tasks should be considered a high-level security concern. \n\nThis approach is aligned with the MITRE ATT&CK tactics and techniques for Initial Access and Persistence by monitoring and flagging the disabling of critical security measures in GitHub environments."
    }
  },
  {
    "instruction": "Explain how should I detect the following: program executions in suspicious non-program folders related to malware or hacking activity",
    "context": "",
    "output": "In order to detect program executions in suspicious non-program folders related to malware or hacking activity, you should monitor audit logs on Linux systems for system call events (SYSCALL) originating from directories not typically associated with program execution. This includes executions from temporary folders like '/tmp/', various web server directories such as '/var/www/', per-user web directories like '/home/*/public_html/', and different locations where web services might be stored including classical and old Apache directories ('/usr/local/apache2/', '/usr/local/httpd/', '/var/apache/'), SuSE Linux 9.* web server directory ('/srv/www/'), Redhat 6 or older Apache directory ('/home/httpd/html/'), ArchLinux standard web server directories ('/srv/http/', '/usr/share/nginx/html/'), and data directories of commonly exploited services like PostgreSQL ('/var/lib/pgsql/data/'), MySQL ('/usr/local/mysql/data/', '/var/lib/mysql/'), VSFTPD ('/var/vsftpd/'), and BIND ('/etc/bind/', '/var/named/'). \n\nThis monitoring should be attentive to the nature of activities in these directories, acknowledging that false positives could occur due to administrative activities, especially in temporary folders, or unconventional web application behavior. This approach correlates with identifying tactics and techniques such as Execution and Persistence, which attackers employ by executing malware or scripts from directories uncommon for such activities to hide their malicious intents and maintain presence on the infected system.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "program executions in suspicious non-program folders related to malware or hacking activity",
      "answer": "In order to detect program executions in suspicious non-program folders related to malware or hacking activity, you should monitor audit logs on Linux systems for system call events (SYSCALL) originating from directories not typically associated with program execution. This includes executions from temporary folders like '/tmp/', various web server directories such as '/var/www/', per-user web directories like '/home/*/public_html/', and different locations where web services might be stored including classical and old Apache directories ('/usr/local/apache2/', '/usr/local/httpd/', '/var/apache/'), SuSE Linux 9.* web server directory ('/srv/www/'), Redhat 6 or older Apache directory ('/home/httpd/html/'), ArchLinux standard web server directories ('/srv/http/', '/usr/share/nginx/html/'), and data directories of commonly exploited services like PostgreSQL ('/var/lib/pgsql/data/'), MySQL ('/usr/local/mysql/data/', '/var/lib/mysql/'), VSFTPD ('/var/vsftpd/'), and BIND ('/etc/bind/', '/var/named/'). \n\nThis monitoring should be attentive to the nature of activities in these directories, acknowledging that false positives could occur due to administrative activities, especially in temporary folders, or unconventional web application behavior. This approach correlates with identifying tactics and techniques such as Execution and Persistence, which attackers employ by executing malware or scripts from directories uncommon for such activities to hide their malicious intents and maintain presence on the infected system."
    }
  },
  {
    "instruction": "How to detect: java process spawning suspicious children",
    "context": "",
    "output": "In order to detect java process spawning suspicious children, you should monitor Linux systems for process creations where the parent process is a Java application. Specifically, look for child processes that are initiated by Java and involve the use of shell or scripting languages such as '/bin/sh', 'bash', 'dash', 'ksh', 'zsh', 'csh', or 'fish'. Additionally, be alert to the use of utilities often leveraged in suspicious activities, like 'curl', 'wget', or 'python'. This monitoring is critical because the initiation of such child processes by a Java application can indicate exploitation or malicious activity. Despite the high importance of this detection, be aware that there can be unknown situations that might lead to false positives. Therefore, it's essential to analyze the context of the detected activities carefully.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "java process spawning suspicious children",
      "answer": "In order to detect java process spawning suspicious children, you should monitor Linux systems for process creations where the parent process is a Java application. Specifically, look for child processes that are initiated by Java and involve the use of shell or scripting languages such as '/bin/sh', 'bash', 'dash', 'ksh', 'zsh', 'csh', or 'fish'. Additionally, be alert to the use of utilities often leveraged in suspicious activities, like 'curl', 'wget', or 'python'. This monitoring is critical because the initiation of such child processes by a Java application can indicate exploitation or malicious activity. Despite the high importance of this detection, be aware that there can be unknown situations that might lead to false positives. Therefore, it's essential to analyze the context of the detected activities carefully."
    }
  },
  {
    "instruction": "How can I detect: execution of known compromised version of 3CXDesktopApp",
    "context": "",
    "output": "In order to detect execution of known compromised version of 3CXDesktopApp, you should monitor process creation events on Windows systems for specific indicators of compromise. These indicators include a variety of cryptographic hashes representing known malicious versions of the 3CXDesktopApp software. Specifically, look out for process creation events where the hash of the executable matches any in a list that includes both SHA256, SHA1, and MD5 hashes. Additionally, monitor for processes that have filenames, image paths, or product names matching '3CXDesktopApp' or where the file version contains '18.12.', which are indicative of potentially compromised software versions.\n\nBe aware that legitimate usage of the 3CXDesktopApp may sometimes trigger these alerts; thus, it's crucial to validate potential incidents carefully to distinguish between malicious and benign activities. The detection level for these indicators is considered high due to the specificity and potential impact of executing a compromised application version.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of known compromised version of 3CXDesktopApp",
      "answer": "In order to detect execution of known compromised version of 3CXDesktopApp, you should monitor process creation events on Windows systems for specific indicators of compromise. These indicators include a variety of cryptographic hashes representing known malicious versions of the 3CXDesktopApp software. Specifically, look out for process creation events where the hash of the executable matches any in a list that includes both SHA256, SHA1, and MD5 hashes. Additionally, monitor for processes that have filenames, image paths, or product names matching '3CXDesktopApp' or where the file version contains '18.12.', which are indicative of potentially compromised software versions.\n\nBe aware that legitimate usage of the 3CXDesktopApp may sometimes trigger these alerts; thus, it's crucial to validate potential incidents carefully to distinguish between malicious and benign activities. The detection level for these indicators is considered high due to the specificity and potential impact of executing a compromised application version."
    }
  },
  {
    "instruction": "Please help me detect the following: Adversaries may attempt to gather information about attached peripheral devices and components connected to a computer system.",
    "context": "",
    "output": "Sure!\nIn order to detect attempts by adversaries to gather information about attached peripheral devices and components connected to a computer system, you should focus on monitoring PowerShell script activities within Windows environments, particularly by leveraging Script Block Logging. Specifically, look for instances where the PowerShell script text contains references to \"Win32_PnPEntity\". This string indicates the script is querying information about plug and play devices connected to the system, which can be a method used by attackers to understand hardware characteristics of a target. It's crucial to have Script Block Logging enabled to capture these details. However, be aware that some legitimate administrative scripts might also query this information, which could lead to low-level false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Adversaries may attempt to gather information about attached peripheral devices and components connected to a computer system.",
      "answer": "In order to detect attempts by adversaries to gather information about attached peripheral devices and components connected to a computer system, you should focus on monitoring PowerShell script activities within Windows environments, particularly by leveraging Script Block Logging. Specifically, look for instances where the PowerShell script text contains references to \"Win32_PnPEntity\". This string indicates the script is querying information about plug and play devices connected to the system, which can be a method used by attackers to understand hardware characteristics of a target. It's crucial to have Script Block Logging enabled to capture these details. However, be aware that some legitimate administrative scripts might also query this information, which could lead to low-level false positives."
    }
  },
  {
    "instruction": "Explain how should I detect the following: Backdooring domain object to grant the rights associated with DCSync to a regular user or machine account using Powerview\\Add-DomainObjectAcl DCSync Extended Right cmdlet, will allow to re-obtain the pwd hashes of any user/computer",
    "context": "",
    "output": "In order to backdoor domain object to grant the rights associated with DCSync to a regular user or machine account using Powerview\\Add-DomainObjectAcl DCSync Extended Right cmdlet, will allow to re-obtain the pwd hashes of any user/computer, you should: Monitor Windows security logs for event IDs related to changes in directory services. Specifically, watch for event ID 5136, which indicates a modification to an Active Directory object. This event becomes significant when the 'ntSecurityDescriptor' attribute is altered, especially if the change involves specific GUIDs ('1131f6ad-9c07-11d1-f79f-00c04fc2dcd2', '1131f6aa-9c07-11d1-f79f-00c04fc2dcd2', '89e95b76-444d-4c62-991a-0facbeda640c'). These GUIDs represent permissions often sought in attacks aiming to grant DCSync rights, which could enable adversaries to replicate the contents of Active Directory, including password hashes, potentially leading to domain-wide escalation of privileges. Be sure to exclude events that pertain to 'dnsNode', 'dnsZoneScope', and 'dnsZone' object classes, as changes to these objects are less likely to be related to the described attack scenario.\n\nWhen investigating potential security events, it's important to consider the context of detected changes. For example, the creation of a new Domain Controller computer account could trigger similar alerts. When such events are detected, verify the user or machine account involved by inspecting the SID within the 'AttributeValue' of event 5136 to determine whether it's a regular user or Domain Controller computer account. This attack and defense technique typically involves MITRE ATT&CK tactics and techniques such as Privilege Escalation and Credential Access, focusing on replicating directory services to extract sensitive information like password hashes. Keep the alert level high due to the significant impact of successfully executing this type of attack.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Backdooring domain object to grant the rights associated with DCSync to a regular user or machine account using Powerview\\Add-DomainObjectAcl DCSync Extended Right cmdlet, will allow to re-obtain the pwd hashes of any user/computer",
      "answer": "In order to backdoor domain object to grant the rights associated with DCSync to a regular user or machine account using Powerview\\Add-DomainObjectAcl DCSync Extended Right cmdlet, will allow to re-obtain the pwd hashes of any user/computer, you should: Monitor Windows security logs for event IDs related to changes in directory services. Specifically, watch for event ID 5136, which indicates a modification to an Active Directory object. This event becomes significant when the 'ntSecurityDescriptor' attribute is altered, especially if the change involves specific GUIDs ('1131f6ad-9c07-11d1-f79f-00c04fc2dcd2', '1131f6aa-9c07-11d1-f79f-00c04fc2dcd2', '89e95b76-444d-4c62-991a-0facbeda640c'). These GUIDs represent permissions often sought in attacks aiming to grant DCSync rights, which could enable adversaries to replicate the contents of Active Directory, including password hashes, potentially leading to domain-wide escalation of privileges. Be sure to exclude events that pertain to 'dnsNode', 'dnsZoneScope', and 'dnsZone' object classes, as changes to these objects are less likely to be related to the described attack scenario.\n\nWhen investigating potential security events, it's important to consider the context of detected changes. For example, the creation of a new Domain Controller computer account could trigger similar alerts. When such events are detected, verify the user or machine account involved by inspecting the SID within the 'AttributeValue' of event 5136 to determine whether it's a regular user or Domain Controller computer account. This attack and defense technique typically involves MITRE ATT&CK tactics and techniques such as Privilege Escalation and Credential Access, focusing on replicating directory services to extract sensitive information like password hashes. Keep the alert level high due to the significant impact of successfully executing this type of attack."
    }
  },
  {
    "instruction": "Can you explain how to detect: pattern of UAC Bypass using NTFS reparse point and wusa.exe DLL hijacking (UACMe 36)",
    "context": "",
    "output": "Certainly!\n\nIn order to Detects the pattern of UAC Bypass using NTFS reparse point and wusa.exe DLL hijacking (UACMe 36), you should: Monitor the creation of processes on Windows systems, specifically looking out for activities that may indicate an attempt to bypass User Account Control (UAC) through particular manipulation methods. This involves observing for process creations that start with executing the Windows Update Standalone Installer (wusa.exe) with specific command-line arguments indicating a quiet operation mode and targeting files within the user's temporary directory, suggesting an attempt to use a downloaded update file (.msu) for nefarious purposes. These process creations must occur under high integrity level or system-level privileges to be considered suspicious.\n\nAdditionally, one should watch for the execution of the Deployment Image Servicing and Management (DISM) tool (dism.exe) through a specific command-line sequence that indicates an operation to quietly add a package online without restarting, and targeting a dubious package path. Moreover, this detection scenario extends to observing processes that contain command-line patterns pointing toward the execution in the user's temporary directory alongside the creation of processes with names ending in 'DismHost.exe', all occurring under high integrity or system privileges. The combination of these elements, particularly involving unusual paths and filenames, serves as a significant indicator of an attack leveraging specialized techniques to circumvent UAC, specifically through the exploitation of NTFS reparse points and the hijacking of Dynamic Link Libraries (DLLs) associated with the Windows Update Standalone Installer. Understanding these maneuvers is crucial for identifying and mitigating potential UAC bypass attempts exploiting system-level operations to execute unauthorized changes or installations.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "pattern of UAC Bypass using NTFS reparse point and wusa.exe DLL hijacking (UACMe 36)",
      "answer": "In order to Detects the pattern of UAC Bypass using NTFS reparse point and wusa.exe DLL hijacking (UACMe 36), you should: Monitor the creation of processes on Windows systems, specifically looking out for activities that may indicate an attempt to bypass User Account Control (UAC) through particular manipulation methods. This involves observing for process creations that start with executing the Windows Update Standalone Installer (wusa.exe) with specific command-line arguments indicating a quiet operation mode and targeting files within the user's temporary directory, suggesting an attempt to use a downloaded update file (.msu) for nefarious purposes. These process creations must occur under high integrity level or system-level privileges to be considered suspicious.\n\nAdditionally, one should watch for the execution of the Deployment Image Servicing and Management (DISM) tool (dism.exe) through a specific command-line sequence that indicates an operation to quietly add a package online without restarting, and targeting a dubious package path. Moreover, this detection scenario extends to observing processes that contain command-line patterns pointing toward the execution in the user's temporary directory alongside the creation of processes with names ending in 'DismHost.exe', all occurring under high integrity or system privileges. The combination of these elements, particularly involving unusual paths and filenames, serves as a significant indicator of an attack leveraging specialized techniques to circumvent UAC, specifically through the exploitation of NTFS reparse points and the hijacking of Dynamic Link Libraries (DLLs) associated with the Windows Update Standalone Installer. Understanding these maneuvers is crucial for identifying and mitigating potential UAC bypass attempts exploiting system-level operations to execute unauthorized changes or installations."
    }
  },
  {
    "instruction": "How to detect: execution of binaries located in potentially suspicious locations via \"nohup\"",
    "context": "",
    "output": "In order to detect execution of binaries located in potentially suspicious locations via \"nohup\", you should: Monitor the creation of processes on Linux systems, focusing specifically on those initiated with the 'nohup' command that are executing files from the '/tmp/' directory. This detection hinges on identifying processes that end their image path with '/nohup' and contain '/tmp/' within their command line argument, indicating that binaries are being executed from locations that are commonly used by attackers to temporarily store malicious files. The uncertainty about the nature of activities that match this pattern necessitates considering them as high-severity incidents, despite the recognition that not all such detections will represent true security threats.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of binaries located in potentially suspicious locations via \"nohup\"",
      "answer": "In order to detect execution of binaries located in potentially suspicious locations via \"nohup\", you should: Monitor the creation of processes on Linux systems, focusing specifically on those initiated with the 'nohup' command that are executing files from the '/tmp/' directory. This detection hinges on identifying processes that end their image path with '/nohup' and contain '/tmp/' within their command line argument, indicating that binaries are being executed from locations that are commonly used by attackers to temporarily store malicious files. The uncertainty about the nature of activities that match this pattern necessitates considering them as high-severity incidents, despite the recognition that not all such detections will represent true security threats."
    }
  },
  {
    "instruction": "Explain how should I detect the following: system changes made by Blue Mockingbird",
    "context": "",
    "output": "In order to detect system changes made by Blue Mockingbird, you should monitor the Windows Registry for specific modifications that are indicative of this attack. Specifically, focus on the registry setting events where the value is being set (Setvalue EventType). The critical alteration to lookout for occurs in the registry key path that ends with '\\CurrentControlSet\\Services\\wercplsupport\\Parameters\\ServiceDll'. This particular change is a common tactic used by Blue Mockingbird to achieve persistence and control over a compromised system by potentially modifying the referenced DLL to one under their control. \n\nMonitoring for such alterations will require configuring your security systems to log and alert whenever this type of registry modification occurs. It's important to be aware that, as of the knowledge available, there are no known false positives associated with this detection strategy, indicating a high level of confidence in these specific modifications as indicators of Blue Mockingbird activity. However, always exercise caution and investigate alerts thoroughly to confirm malicious activity. This detection strategy is of high importance due to the direct association with Blue Mockingbird's technique for maintaining persistence and potentially executing unauthorized commands or software on the system.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "system changes made by Blue Mockingbird",
      "answer": "In order to detect system changes made by Blue Mockingbird, you should monitor the Windows Registry for specific modifications that are indicative of this attack. Specifically, focus on the registry setting events where the value is being set (Setvalue EventType). The critical alteration to lookout for occurs in the registry key path that ends with '\\CurrentControlSet\\Services\\wercplsupport\\Parameters\\ServiceDll'. This particular change is a common tactic used by Blue Mockingbird to achieve persistence and control over a compromised system by potentially modifying the referenced DLL to one under their control. \n\nMonitoring for such alterations will require configuring your security systems to log and alert whenever this type of registry modification occurs. It's important to be aware that, as of the knowledge available, there are no known false positives associated with this detection strategy, indicating a high level of confidence in these specific modifications as indicators of Blue Mockingbird activity. However, always exercise caution and investigate alerts thoroughly to confirm malicious activity. This detection strategy is of high importance due to the direct association with Blue Mockingbird's technique for maintaining persistence and potentially executing unauthorized commands or software on the system."
    }
  },
  {
    "instruction": "How to detect: Once established within a system or network, an adversary may use automated techniques for collecting internal data.",
    "context": "",
    "output": "In order to detect signs of adversaries using automated techniques for collecting internal data within a system or network, you should monitor for PowerShell script block execution that specifically searches for and potentially gathers common document file types. This includes watching for scripts that are programmed to look for file types such as .doc, .docx, .xls, .xlsx, .ppt, .pptx, .rtf, .pdf, and .txt. These file types are often targeted as they are commonly used to store valuable information in an organization. Additionally, scripts that use the 'Get-ChildItem' cmdlet combined with the parameters '-Recurse' and '-Include', aiming to traverse directories to locate these files, should also raise alerts. This involves ensuring that Script Block Logging is enabled in Windows environments. By doing so, you can identify suspicious activities that match these patterns, which are indicative of threats trying to systematically collect sensitive data post-compromise. It's crucial to be aware that while these signs can be highly indicative of malicious activity, there might also be legitimate uses of similar scripts, thus all detections should be thoroughly investigated to rule out or confirm malicious intent.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Once established within a system or network, an adversary may use automated techniques for collecting internal data.",
      "answer": "In order to detect signs of adversaries using automated techniques for collecting internal data within a system or network, you should monitor for PowerShell script block execution that specifically searches for and potentially gathers common document file types. This includes watching for scripts that are programmed to look for file types such as .doc, .docx, .xls, .xlsx, .ppt, .pptx, .rtf, .pdf, and .txt. These file types are often targeted as they are commonly used to store valuable information in an organization. Additionally, scripts that use the 'Get-ChildItem' cmdlet combined with the parameters '-Recurse' and '-Include', aiming to traverse directories to locate these files, should also raise alerts. This involves ensuring that Script Block Logging is enabled in Windows environments. By doing so, you can identify suspicious activities that match these patterns, which are indicative of threats trying to systematically collect sensitive data post-compromise. It's crucial to be aware that while these signs can be highly indicative of malicious activity, there might also be legitimate uses of similar scripts, thus all detections should be thoroughly investigated to rule out or confirm malicious intent."
    }
  },
  {
    "instruction": "Explain how should I detect the following: LOLBINs executing from an abnormal drive such as a mounted ISO.",
    "context": "",
    "output": "In order to detect LOLBINs executing from an abnormal drive such as a mounted ISO, you should monitor process creation events on Windows systems, focusing on processes that could potentially be leveraged by adversaries. Specifically, look for creation events of processes such as `rundll32.exe`, `calc.exe`, `mshta.exe`, `cscript.exe`, `wscript.exe`, `regsvr32.exe`, `installutil.exe`, and `cmstp.exe`. Ensure these process creation events are also analyzed for the original file names to match, including both uppercase and lowercase variants like `RUNDLL32.EXE` and `cscript.exe`.\n\nAdditionally, apply filters to exclude execution events that originate from the root of the C:\\ drive, or where the CurrentDirectory attribute is empty or null. This helps in focusing on detecting execution from unusual locations, which is more characteristic of malicious activity, including but not limited to, instances where binaries are executed from mounted ISOs. \n\nThe detection strategy includes leveraging tags associated with corresponding MITRE ATT&CK tactics and techniques exhibited by adversaries during the execution phase of their attacks. However, consider that rare false positives might occur, especially on servers that have multiple drives, which could lead to legitimate process creation events being flagged. The overall sensitivity of this detection approach is set to a medium level, balancing between the likelihood of capturing malicious activities and minimizing false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "LOLBINs executing from an abnormal drive such as a mounted ISO.",
      "answer": "In order to detect LOLBINs executing from an abnormal drive such as a mounted ISO, you should monitor process creation events on Windows systems, focusing on processes that could potentially be leveraged by adversaries. Specifically, look for creation events of processes such as `rundll32.exe`, `calc.exe`, `mshta.exe`, `cscript.exe`, `wscript.exe`, `regsvr32.exe`, `installutil.exe`, and `cmstp.exe`. Ensure these process creation events are also analyzed for the original file names to match, including both uppercase and lowercase variants like `RUNDLL32.EXE` and `cscript.exe`.\n\nAdditionally, apply filters to exclude execution events that originate from the root of the C:\\ drive, or where the CurrentDirectory attribute is empty or null. This helps in focusing on detecting execution from unusual locations, which is more characteristic of malicious activity, including but not limited to, instances where binaries are executed from mounted ISOs. \n\nThe detection strategy includes leveraging tags associated with corresponding MITRE ATT&CK tactics and techniques exhibited by adversaries during the execution phase of their attacks. However, consider that rare false positives might occur, especially on servers that have multiple drives, which could lead to legitimate process creation events being flagged. The overall sensitivity of this detection approach is set to a medium level, balancing between the likelihood of capturing malicious activities and minimizing false positives."
    }
  },
  {
    "instruction": "Please help me detect the following: usage of bitsadmin downloading a file with a suspicious extension",
    "context": "",
    "output": "Sure!\nIn order to detect usage of bitsadmin downloading a file with a suspicious extension, you should: Monitor process creation logs on Windows systems for instances where the image or original filename is identified as `bitsadmin.exe`. Specifically, look for command lines that include operations such as `/transfer`, `/create`, or `/addfile`, which are indicative of using bitsadmin to manipulate files. Further focus your scrutiny on cases where these command lines are associated with files having extensions known to be potentially malicious or commonly used for executing scripts or payloads, such as `.7z`, `.asp`, `.aspx`, `.bat`, `.cmd`, `.dll`, `.exe`, `.jsp`, `.jspx`, `.ps1`, `.rar`, `.txt`, `.vbs`, `.zip`, and others. This detection is crucial because the manipulation or transfer of files with these extensions by bitsadmin can be a tactic used by attackers to deliver malware or deploy scripts for executing malicious activities on a targeted system.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of bitsadmin downloading a file with a suspicious extension",
      "answer": "In order to detect usage of bitsadmin downloading a file with a suspicious extension, you should: Monitor process creation logs on Windows systems for instances where the image or original filename is identified as `bitsadmin.exe`. Specifically, look for command lines that include operations such as `/transfer`, `/create`, or `/addfile`, which are indicative of using bitsadmin to manipulate files. Further focus your scrutiny on cases where these command lines are associated with files having extensions known to be potentially malicious or commonly used for executing scripts or payloads, such as `.7z`, `.asp`, `.aspx`, `.bat`, `.cmd`, `.dll`, `.exe`, `.jsp`, `.jspx`, `.ps1`, `.rar`, `.txt`, `.vbs`, `.zip`, and others. This detection is crucial because the manipulation or transfer of files with these extensions by bitsadmin can be a tactic used by attackers to deliver malware or deploy scripts for executing malicious activities on a targeted system."
    }
  },
  {
    "instruction": "How can I detect: usage of Metasploit SMB PsExec (exploit/windows/smb/psexec) and Impacket psexec.py by triggering on specific service installation",
    "context": "",
    "output": "In order to detect usage of Metasploit SMB PsExec (exploit/windows/smb/psexec) and Impacket psexec.py by triggering on specific service installation, you should focus on monitoring Windows System logs, specifically looking for Service Control Manager events. Keep an eye out for event ID 7045, which indicates a service was installed on the system. \n\nKey detection principles involve spotting an anomaly in the `ImagePath` and `ServiceName`. The service's executable path (`ImagePath`) should match a pattern where it is located in the system root directory with an 8-character name ending in `.exe`. The service names to be vigilant of are those comprising exactly 4, 8, or 16 characters. The services of interest are configured to start on-demand (`StartType` of 3) and are of the type `0x10`, indicating they are Win32 own process services.\n\nIt is critical to exclude any instances where the service name matches `PSEXESVC` to reduce false positives, as this is a known legitimate service name that doesn't necessarily indicate malicious activity by itself. Nevertheless, expect some possible false positives, notably different legitimate services that coincidentally fit the described naming and path pattern. \n\nThe relevant information that should be extracted when such an event is detected includes the Computer Name, Domain Name, and Username under which the service was installed, in addition to the Service Name and the executable file\u2019s path (ServiceFileName).\n\nGiven the high severity of potential impacts implied by the usage of such tools for remote code execution or lateral movement within a network, these detections are critical components of a robust defense posture. Mitigations and monitoring strategies should incorporate the understanding that these tactics and techniques are commonly employed in intrusion attempts, mapping closely to well-known MITRE ATT&CK frameworks.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of Metasploit SMB PsExec (exploit/windows/smb/psexec) and Impacket psexec.py by triggering on specific service installation",
      "answer": "In order to detect usage of Metasploit SMB PsExec (exploit/windows/smb/psexec) and Impacket psexec.py by triggering on specific service installation, you should focus on monitoring Windows System logs, specifically looking for Service Control Manager events. Keep an eye out for event ID 7045, which indicates a service was installed on the system. \n\nKey detection principles involve spotting an anomaly in the `ImagePath` and `ServiceName`. The service's executable path (`ImagePath`) should match a pattern where it is located in the system root directory with an 8-character name ending in `.exe`. The service names to be vigilant of are those comprising exactly 4, 8, or 16 characters. The services of interest are configured to start on-demand (`StartType` of 3) and are of the type `0x10`, indicating they are Win32 own process services.\n\nIt is critical to exclude any instances where the service name matches `PSEXESVC` to reduce false positives, as this is a known legitimate service name that doesn't necessarily indicate malicious activity by itself. Nevertheless, expect some possible false positives, notably different legitimate services that coincidentally fit the described naming and path pattern. \n\nThe relevant information that should be extracted when such an event is detected includes the Computer Name, Domain Name, and Username under which the service was installed, in addition to the Service Name and the executable file\u2019s path (ServiceFileName).\n\nGiven the high severity of potential impacts implied by the usage of such tools for remote code execution or lateral movement within a network, these detections are critical components of a robust defense posture. Mitigations and monitoring strategies should incorporate the understanding that these tactics and techniques are commonly employed in intrusion attempts, mapping closely to well-known MITRE ATT&CK frameworks."
    }
  },
  {
    "instruction": "Can you explain how to detect: usage of \"appcmd\" to create new global URL rewrite rules. This behaviour has been observed being used by threat actors to add new rules so they can access their webshells.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect usage of \"appcmd\" to create new global URL rewrite rules, which has been observed being used by threat actors to add new rules so they can access their webshells, you should: Monitor Windows process creation logs for instances of the application \"appcmd.exe\" being executed, especially focusing on commands that include 'set', 'config', 'section:system.webServer/rewrite/globalRules', and 'commit:' in the command line. This behavior is indicative of attempts to modify web server configurations, potentially to insert malicious URL rewrite rules that could facilitate unsanctioned access to webshells. It is important to note, though, that there might be legitimate cases where administrators use \"appcmd.exe\" to add new URL rewrite rules for valid reasons, which are considered as possible false positives that need to be carefully evaluated. The severity of this activity is assessed as medium, suggesting a balanced approach to monitoring and investigation.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of \"appcmd\" to create new global URL rewrite rules. This behaviour has been observed being used by threat actors to add new rules so they can access their webshells.",
      "answer": "In order to detect usage of \"appcmd\" to create new global URL rewrite rules, which has been observed being used by threat actors to add new rules so they can access their webshells, you should: Monitor Windows process creation logs for instances of the application \"appcmd.exe\" being executed, especially focusing on commands that include 'set', 'config', 'section:system.webServer/rewrite/globalRules', and 'commit:' in the command line. This behavior is indicative of attempts to modify web server configurations, potentially to insert malicious URL rewrite rules that could facilitate unsanctioned access to webshells. It is important to note, though, that there might be legitimate cases where administrators use \"appcmd.exe\" to add new URL rewrite rules for valid reasons, which are considered as possible false positives that need to be carefully evaluated. The severity of this activity is assessed as medium, suggesting a balanced approach to monitoring and investigation."
    }
  },
  {
    "instruction": "Can you explain how to detect: presence of \"bpf_probe_write_user\" BPF helper-generated warning messages. Which could be a sign of suspicious eBPF activity on the system.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect the presence of \"bpf_probe_write_user\" BPF helper-generated warning messages, which could be a sign of suspicious eBPF activity on the system, you should: Monitor Linux systems for log entries that contain references to 'bpf_probe_write_user'. This specific function is part of the eBPF (extended Berkeley Packet Filter) technology used in Linux for running sandboxed programs in the kernel, and its misuse could imply an attempt to write to user-space memory, potentially indicating malicious behavior. As the log source for this activity is Linux, focusing on system logs that capture kernel or security-related events is essential. Given that the misuse of eBPF can be associated with various forms of system attacks, including privilege escalation and data manipulation, any detection of 'bpf_probe_write_user' in logs should be considered with high concern, albeit with the understanding that there might be unknown false positives. The detection of such activity should prompt further investigation to ensure the system's integrity and security.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "presence of \"bpf_probe_write_user\" BPF helper-generated warning messages. Which could be a sign of suspicious eBPF activity on the system.",
      "answer": "In order to detect the presence of \"bpf_probe_write_user\" BPF helper-generated warning messages, which could be a sign of suspicious eBPF activity on the system, you should: Monitor Linux systems for log entries that contain references to 'bpf_probe_write_user'. This specific function is part of the eBPF (extended Berkeley Packet Filter) technology used in Linux for running sandboxed programs in the kernel, and its misuse could imply an attempt to write to user-space memory, potentially indicating malicious behavior. As the log source for this activity is Linux, focusing on system logs that capture kernel or security-related events is essential. Given that the misuse of eBPF can be associated with various forms of system attacks, including privilege escalation and data manipulation, any detection of 'bpf_probe_write_user' in logs should be considered with high concern, albeit with the understanding that there might be unknown false positives. The detection of such activity should prompt further investigation to ensure the system's integrity and security."
    }
  },
  {
    "instruction": "Explain how should I detect the following: changes to the registry values related to outlook security settings",
    "context": "",
    "output": "In order to detect changes to the registry values related to outlook security settings, you should: Focus on monitoring changes made to Windows registry settings specifically within the Microsoft Office and Outlook Security paths. This involves capturing instances where the event type is 'SetValue', indicating that a registry value has been added or modified. Any modification targeting paths that contain both '\\SOFTWARE\\Microsoft\\Office\\' and '\\Outlook\\Security\\' should be flagged for further analysis. When analyzing logs, it's essential to account for potential false positives which may arise from legitimate administrative activities that involve changes to these registry areas. The severity of these detections is considered medium, indicating a need for prompt review to confirm whether the modification is benign or part of a malicious attack. Pay special attention to the context of these changes as they relate to tactics and techniques such as Persistent Access and Privilege Escalation, as such modifications to Outlook Security settings may be leveraged by attackers to bypass security mechanisms or maintain persistence within a compromised system.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "changes to the registry values related to outlook security settings",
      "answer": "In order to detect changes to the registry values related to outlook security settings, you should: Focus on monitoring changes made to Windows registry settings specifically within the Microsoft Office and Outlook Security paths. This involves capturing instances where the event type is 'SetValue', indicating that a registry value has been added or modified. Any modification targeting paths that contain both '\\SOFTWARE\\Microsoft\\Office\\' and '\\Outlook\\Security\\' should be flagged for further analysis. When analyzing logs, it's essential to account for potential false positives which may arise from legitimate administrative activities that involve changes to these registry areas. The severity of these detections is considered medium, indicating a need for prompt review to confirm whether the modification is benign or part of a malicious attack. Pay special attention to the context of these changes as they relate to tactics and techniques such as Persistent Access and Privilege Escalation, as such modifications to Outlook Security settings may be leveraged by attackers to bypass security mechanisms or maintain persistence within a compromised system."
    }
  },
  {
    "instruction": "Please help me detect the following: when an attacker or tool disables the  Windows Defender service (WinDefend) via the registry",
    "context": "",
    "output": "Sure!\nIn order to detect when an attacker or tool disables the Windows Defender service (WinDefend) via the registry, you should monitor Windows Registry setting changes specifically for the Windows Defender service configuration. Focus on capturing events where the \"SetValue\" event type occurs, indicating a modification in the registry. The exact registry key to watch is \"HKLM\\SYSTEM\\CurrentControlSet\\Services\\WinDefend\\Start\". An alteration to this key, especially to set its value to \"DWORD (0x00000004)\", signifies that the Windows Defender service is being disabled. This monitoring is crucial as it directly impacts the system's security posture by potentially allowing malicious activities to go undetected. Be aware that changes made by administrators as part of legitimate maintenance or configuration can also trigger these alerts, thus they are considered potential false positives. Due to the critical nature of this modification, alerts generated from this activity are treated with a high level of severity.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "when an attacker or tool disables the  Windows Defender service (WinDefend) via the registry",
      "answer": "In order to detect when an attacker or tool disables the Windows Defender service (WinDefend) via the registry, you should monitor Windows Registry setting changes specifically for the Windows Defender service configuration. Focus on capturing events where the \"SetValue\" event type occurs, indicating a modification in the registry. The exact registry key to watch is \"HKLM\\SYSTEM\\CurrentControlSet\\Services\\WinDefend\\Start\". An alteration to this key, especially to set its value to \"DWORD (0x00000004)\", signifies that the Windows Defender service is being disabled. This monitoring is crucial as it directly impacts the system's security posture by potentially allowing malicious activities to go undetected. Be aware that changes made by administrators as part of legitimate maintenance or configuration can also trigger these alerts, thus they are considered potential false positives. Due to the critical nature of this modification, alerts generated from this activity are treated with a high level of severity."
    }
  },
  {
    "instruction": "Explain how should I detect the following: By replacing the sticky keys executable with the local admins CMD executable, an attacker is able to access a privileged windows console session without authenticating to the system.\nWhen the sticky keys are \"activated\" the privilleged shell is launched.\n",
    "context": "",
    "output": "In order to detect an attack where the sticky keys executable is replaced with the local admin's CMD executable, allowing an attacker to access a privileged Windows console session without authenticating to the system, you should monitor for process creation logs within Windows. Look specifically for command lines that contain all the following: 'copy ', '/y ', and the exact command to replace 'C:\\windows\\system32\\cmd.exe' with 'C:\\windows\\system32\\sethc.exe'. This action is highly indicative of an attacker trying to substitute the sticky keys feature-accessible executable (sethc.exe) with the command prompt executable (cmd.exe), effectively enabling access to a privileged shell by triggering the sticky keys function. This type of attack is considered critical, and false positives are unlikely, signaling the importance of immediate investigation upon detection.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "By replacing the sticky keys executable with the local admins CMD executable, an attacker is able to access a privileged windows console session without authenticating to the system.\nWhen the sticky keys are \"activated\" the privilleged shell is launched.\n",
      "answer": "In order to detect an attack where the sticky keys executable is replaced with the local admin's CMD executable, allowing an attacker to access a privileged Windows console session without authenticating to the system, you should monitor for process creation logs within Windows. Look specifically for command lines that contain all the following: 'copy ', '/y ', and the exact command to replace 'C:\\windows\\system32\\cmd.exe' with 'C:\\windows\\system32\\sethc.exe'. This action is highly indicative of an attacker trying to substitute the sticky keys feature-accessible executable (sethc.exe) with the command prompt executable (cmd.exe), effectively enabling access to a privileged shell by triggering the sticky keys function. This type of attack is considered critical, and false positives are unlikely, signaling the importance of immediate investigation upon detection."
    }
  },
  {
    "instruction": "How can I detect: removal of an exported Exchange mailbox which could be to cover tracks from ProxyShell exploit",
    "context": "",
    "output": "In order to detect removal of an exported Exchange mailbox which could be to cover tracks from ProxyShell exploit, you should: Monitor logs from Microsoft Exchange Management services on Windows systems for specific activities that indicate a removal of an exported Exchange mailbox. Look for events that contain the keyword 'Remove-MailboxExportRequest' in combination with ' -Identity ' and ' -Confirm \"False\"'. These are commands executed to delete mailbox export requests without requiring confirmation, which could be an attempt to erase evidence or manipulate data post-compromise, especially in the context of a ProxyShell exploit. It's important to approach detected instances with high caution as this behavior is considered highly suspicious, although be aware that there might be unknown scenarios that could trigger false positives. This activity correlates with tactics and techniques typically used in post-exploitation stages of an attack, aiming at evasion and covering tracks.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "removal of an exported Exchange mailbox which could be to cover tracks from ProxyShell exploit",
      "answer": "In order to detect removal of an exported Exchange mailbox which could be to cover tracks from ProxyShell exploit, you should: Monitor logs from Microsoft Exchange Management services on Windows systems for specific activities that indicate a removal of an exported Exchange mailbox. Look for events that contain the keyword 'Remove-MailboxExportRequest' in combination with ' -Identity ' and ' -Confirm \"False\"'. These are commands executed to delete mailbox export requests without requiring confirmation, which could be an attempt to erase evidence or manipulate data post-compromise, especially in the context of a ProxyShell exploit. It's important to approach detected instances with high caution as this behavior is considered highly suspicious, although be aware that there might be unknown scenarios that could trigger false positives. This activity correlates with tactics and techniques typically used in post-exploitation stages of an attack, aiming at evasion and covering tracks."
    }
  },
  {
    "instruction": "Can you explain how to detect: buffer overflow attempts in Unix system log files",
    "context": "",
    "output": "Certainly!\n\nIn order to detect buffer overflow attempts in Unix system log files, you should: Monitor for specific keywords in log entries that suggest a buffer overflow attempt. The focus should be on Linux systems, especially within their logs. Look for entries containing phrases like \"attempt to execute code on stack by\", which directly indicates an attempt to run code in an area of memory typically not intended for execution. Additionally, logins through FTP with the identifier \"FTP LOGIN FROM .* 0bin0sh\" can flag an exploit attempt, as this pattern may indicate an unusual or malicious login meant to execute shell commands. Another sign of a buffer overflow attempt is errors related to \"rpc.statd\" followed by a message about \"gethostbyname error for\", which may indicate an attempt to exploit the rpc.statd service. Lastly, a long string of 'A's (e.g., \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\") in logs can be indicative of a classic buffer overflow attempt, where an attacker tries to overflow memory buffers with excessive input data. No known false positives are associated with these detection mechanisms, which means that although the system may not always identify irrelevant activities, every alert should be investigated due to the high level of risk associated with these types of cybersecurity threats. The detection of such activities is crucial for maintaining security and is associated with techniques and tactics such as Execution, Persistence, Privilege Escalation, and Defense Evasion.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "buffer overflow attempts in Unix system log files",
      "answer": "In order to detect buffer overflow attempts in Unix system log files, you should: Monitor for specific keywords in log entries that suggest a buffer overflow attempt. The focus should be on Linux systems, especially within their logs. Look for entries containing phrases like \"attempt to execute code on stack by\", which directly indicates an attempt to run code in an area of memory typically not intended for execution. Additionally, logins through FTP with the identifier \"FTP LOGIN FROM .* 0bin0sh\" can flag an exploit attempt, as this pattern may indicate an unusual or malicious login meant to execute shell commands. Another sign of a buffer overflow attempt is errors related to \"rpc.statd\" followed by a message about \"gethostbyname error for\", which may indicate an attempt to exploit the rpc.statd service. Lastly, a long string of 'A's (e.g., \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\") in logs can be indicative of a classic buffer overflow attempt, where an attacker tries to overflow memory buffers with excessive input data. No known false positives are associated with these detection mechanisms, which means that although the system may not always identify irrelevant activities, every alert should be investigated due to the high level of risk associated with these types of cybersecurity threats. The detection of such activities is crucial for maintaining security and is associated with techniques and tactics such as Execution, Persistence, Privilege Escalation, and Defense Evasion."
    }
  },
  {
    "instruction": "How to detect: user signs ins outside of normal business hours.",
    "context": "",
    "output": "In order to detect user sign-ins outside of normal business hours, you should focus on monitoring Azure sign-in logs. Pay attention to successful sign-in attempts that are registered from locations where your organization operates, but occur outside of the typical working hours specified for your organization. This can be defined by adjusting the parameters to include only the countries you operate out of, referred to here as 'LegitCountries', and setting a specific timeframe that represents your closing hours, labeled as 'ClosingTime'.\n\nBe aware of potential false positives, which may include scenarios where a user is genuinely working beyond their typical hours. These detections are categorized with a low level of severity, indicating that while they should be reviewed, they are less likely to represent critical security incidents. These activities are tagged and associated with MITRE ATT&CK tactics and techniques focusing on initial access and defense evasion, as they might indicate an attempt to bypass normal security measures during off-hours.\n",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "user signs ins outside of normal business hours.",
      "answer": "In order to detect user sign-ins outside of normal business hours, you should focus on monitoring Azure sign-in logs. Pay attention to successful sign-in attempts that are registered from locations where your organization operates, but occur outside of the typical working hours specified for your organization. This can be defined by adjusting the parameters to include only the countries you operate out of, referred to here as 'LegitCountries', and setting a specific timeframe that represents your closing hours, labeled as 'ClosingTime'.\n\nBe aware of potential false positives, which may include scenarios where a user is genuinely working beyond their typical hours. These detections are categorized with a low level of severity, indicating that while they should be reviewed, they are less likely to represent critical security incidents. These activities are tagged and associated with MITRE ATT&CK tactics and techniques focusing on initial access and defense evasion, as they might indicate an attempt to bypass normal security measures during off-hours.\n"
    }
  },
  {
    "instruction": "Can you explain how to detect: Pandemic Windows Implant",
    "context": "",
    "output": "Certainly!\n\nIn order to detect Pandemic Windows Implant, you should: Monitor registry events on Windows operating systems for any activities that involve the specific registry path '\\SYSTEM\\CurrentControlSet\\services\\null\\Instance'. This approach relies on recognizing attempts to interact with a registry key often associated with the Pandemic implant, which might indicate the presence of this malicious software on the system. The detection process includes gathering additional context such as the EventID, CommandLine, ParentCommandLine, Image, User, and the TargetObject involved in the operation. While it's critical to watch for such activities, be aware that not all modifications or interactions with this registry key are malicious, though they are considered highly suspicious hence classified at a critical level.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Pandemic Windows Implant",
      "answer": "In order to detect Pandemic Windows Implant, you should: Monitor registry events on Windows operating systems for any activities that involve the specific registry path '\\SYSTEM\\CurrentControlSet\\services\\null\\Instance'. This approach relies on recognizing attempts to interact with a registry key often associated with the Pandemic implant, which might indicate the presence of this malicious software on the system. The detection process includes gathering additional context such as the EventID, CommandLine, ParentCommandLine, Image, User, and the TargetObject involved in the operation. While it's critical to watch for such activities, be aware that not all modifications or interactions with this registry key are malicious, though they are considered highly suspicious hence classified at a critical level."
    }
  },
  {
    "instruction": "Explain how should I detect the following: events that appear when a user click on a link file with a powershell command in it",
    "context": "",
    "output": "In order to detect events that appear when a user clicks on a link file with a PowerShell command in it, you should: Monitor the process creation logs in Windows systems for occurrences where the Command Prompt (cmd.exe) is launched directly by the Windows Explorer (explorer.exe). Specifically, look for instances where the command line executed involves PowerShell commands being initiated from a link file (.lnk). This activity may suggest an attempt to execute malicious scripts or commands through seemingly innocuous link files, directly correlating with techniques that leverage user interaction to perform unauthorized actions. Be mindful that there could be legitimate reasons for such occurrences, and those should be considered to reduce the chances of false positives. The severity level for this type of detection is considered medium.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "events that appear when a user click on a link file with a powershell command in it",
      "answer": "In order to detect events that appear when a user clicks on a link file with a PowerShell command in it, you should: Monitor the process creation logs in Windows systems for occurrences where the Command Prompt (cmd.exe) is launched directly by the Windows Explorer (explorer.exe). Specifically, look for instances where the command line executed involves PowerShell commands being initiated from a link file (.lnk). This activity may suggest an attempt to execute malicious scripts or commands through seemingly innocuous link files, directly correlating with techniques that leverage user interaction to perform unauthorized actions. Be mindful that there could be legitimate reasons for such occurrences, and those should be considered to reduce the chances of false positives. The severity level for this type of detection is considered medium."
    }
  },
  {
    "instruction": "How can I detect: artifacts associated with GALLIUM cyber espionage group as reported by Microsoft Threat Intelligence Center in the December 2019 report.",
    "context": "",
    "output": "In order to detect artifacts associated with GALLIUM cyber espionage group as reported by Microsoft Threat Intelligence Center in the December 2019 report, you should: monitor the creation of processes on Windows systems and check for any process that has been created with file hashes known to be associated with the GALLIUM cyber espionage group. Specifically, look for processes created with files matching any of these SHA256 or SHA1 hashes, as these are indicators of compromise (IoCs) tied to GALLIUM\u2019s activities. By identifying processes created with these specific hashes, it is possible to detect and potentially block or investigate suspicious activities attributed to this espionage group on your network. This detection method is critical for identifying attacks that use known malicious files to compromise systems, part of the tactics and techniques used for initial access, execution, persistence, or defense evasion by cyber espionage actors like GALLIUM.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "artifacts associated with GALLIUM cyber espionage group as reported by Microsoft Threat Intelligence Center in the December 2019 report.",
      "answer": "In order to detect artifacts associated with GALLIUM cyber espionage group as reported by Microsoft Threat Intelligence Center in the December 2019 report, you should: monitor the creation of processes on Windows systems and check for any process that has been created with file hashes known to be associated with the GALLIUM cyber espionage group. Specifically, look for processes created with files matching any of these SHA256 or SHA1 hashes, as these are indicators of compromise (IoCs) tied to GALLIUM\u2019s activities. By identifying processes created with these specific hashes, it is possible to detect and potentially block or investigate suspicious activities attributed to this espionage group on your network. This detection method is critical for identifying attacks that use known malicious files to compromise systems, part of the tactics and techniques used for initial access, execution, persistence, or defense evasion by cyber espionage actors like GALLIUM."
    }
  },
  {
    "instruction": "How can I detect: execution of WMIC with the \"csproduct\" which is used to obtain information such as hardware models and vendor information",
    "context": "",
    "output": "In order to detect the execution of WMIC with the \"csproduct\" which is used to obtain information such as hardware models and vendor information, you should: monitor for process creation events within Windows systems where the process image ends with '\\wmic.exe' or where the OriginalFileName is explicitly 'wmic.exe'. Additionally, pay attention to command-line executions that contain the string 'csproduct'. The detection encompasses any process creation events that satisfy both criteria regarding the image and command line. Be aware that there might be events that trigger false positives, though these instances are not specifically known. This detection operates at a medium severity level, emphasizing its significance in monitoring for potential reconnaissance activities, where attackers might be gathering system hardware information.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of WMIC with the \"csproduct\" which is used to obtain information such as hardware models and vendor information",
      "answer": "In order to detect the execution of WMIC with the \"csproduct\" which is used to obtain information such as hardware models and vendor information, you should: monitor for process creation events within Windows systems where the process image ends with '\\wmic.exe' or where the OriginalFileName is explicitly 'wmic.exe'. Additionally, pay attention to command-line executions that contain the string 'csproduct'. The detection encompasses any process creation events that satisfy both criteria regarding the image and command line. Be aware that there might be events that trigger false positives, though these instances are not specifically known. This detection operates at a medium severity level, emphasizing its significance in monitoring for potential reconnaissance activities, where attackers might be gathering system hardware information."
    }
  },
  {
    "instruction": "Please help me detect the following: potential malicious modification of the property value of UseLogonCredential from HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest to enable clear-text credentials",
    "context": "",
    "output": "Sure!\nIn order to detect potential malicious modification of the property value of UseLogonCredential from HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest to enable clear-text credentials, you should: Monitor registry settings adjustments within Windows environments, specifically focusing on events where the registry key in question is related to the UseLogonCredential setting within the WDigest path. Look for actions categorized as SetValue events indicating a change in the registry. The critical aspect to watch out for is the modification of the TargetObject ending with 'WDigest\\UseLogonCredential' where the details of the modification involve setting the DWORD value to (0x00000001), which effectively enables the storage of login credentials in clear-text. Given that such modifications could serve as a vector for compromising credentials, monitoring these registry changes is crucial. The primary log source for these observations is registry_set activities related to the Windows operating system. It is essential to remain vigilant for any actions fitting this description, albeit there may be rare instances where these modifications are not indicative of malicious intent, leading to potential false positives. Nonetheless, due to the high impact of enabling clear-text credential storage, such modifications are treated with a high level of suspicion. This detection process is aligned with understanding and preempting tactics and techniques that exploit credential access vulnerabilities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential malicious modification of the property value of UseLogonCredential from HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest to enable clear-text credentials",
      "answer": "In order to detect potential malicious modification of the property value of UseLogonCredential from HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest to enable clear-text credentials, you should: Monitor registry settings adjustments within Windows environments, specifically focusing on events where the registry key in question is related to the UseLogonCredential setting within the WDigest path. Look for actions categorized as SetValue events indicating a change in the registry. The critical aspect to watch out for is the modification of the TargetObject ending with 'WDigest\\UseLogonCredential' where the details of the modification involve setting the DWORD value to (0x00000001), which effectively enables the storage of login credentials in clear-text. Given that such modifications could serve as a vector for compromising credentials, monitoring these registry changes is crucial. The primary log source for these observations is registry_set activities related to the Windows operating system. It is essential to remain vigilant for any actions fitting this description, albeit there may be rare instances where these modifications are not indicative of malicious intent, leading to potential false positives. Nonetheless, due to the high impact of enabling clear-text credential storage, such modifications are treated with a high level of suspicion. This detection process is aligned with understanding and preempting tactics and techniques that exploit credential access vulnerabilities."
    }
  },
  {
    "instruction": "How to detect: loading of a DLL by the VMware Xfer utility from the non-default directory which may be an attempt to sideload arbitrary DLL",
    "context": "",
    "output": "In order to detect loading of a DLL by the VMware Xfer utility from the non-default directory which may be an attempt to sideload arbitrary DLL, you should monitor for events where specific files are loaded within the Windows operating system, more precisely within the context of image loading events. Focus on any occurrences where the VMware Xfer utility, identified by the 'VMwareXferlogs.exe', loads DLL files, with particular attention to 'glib-2.0.dll'. It's important to distinguish legitimate use cases from malicious activities by filtering out events where the DLL is loaded from the default VMware installation directory, typically 'C:\\Program Files\\VMware\\'. This approach aims to identify attempts to exploit the VMware Xfer utility for DLL sideloading, a technique often used by adversaries to execute malicious code by loading it into a trusted process. Given the nature of this method, occurrences are less likely to represent false positives and should therefore be treated with a high level of scrutiny.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "loading of a DLL by the VMware Xfer utility from the non-default directory which may be an attempt to sideload arbitrary DLL",
      "answer": "In order to detect loading of a DLL by the VMware Xfer utility from the non-default directory which may be an attempt to sideload arbitrary DLL, you should monitor for events where specific files are loaded within the Windows operating system, more precisely within the context of image loading events. Focus on any occurrences where the VMware Xfer utility, identified by the 'VMwareXferlogs.exe', loads DLL files, with particular attention to 'glib-2.0.dll'. It's important to distinguish legitimate use cases from malicious activities by filtering out events where the DLL is loaded from the default VMware installation directory, typically 'C:\\Program Files\\VMware\\'. This approach aims to identify attempts to exploit the VMware Xfer utility for DLL sideloading, a technique often used by adversaries to execute malicious code by loading it into a trusted process. Given the nature of this method, occurrences are less likely to represent false positives and should therefore be treated with a high level of scrutiny."
    }
  },
  {
    "instruction": "Explain how should I detect the following: execution of the built-in script located in \"C:\\Windows\\System32\\gatherNetworkInfo.vbs\". Which can be used to gather information about the target machine",
    "context": "",
    "output": "In order to detect execution of the built-in script located in \"C:\\Windows\\System32\\gatherNetworkInfo.vbs\", which can be used to gather information about the target machine, you should monitor process creation events on Windows systems for any command line execution that includes 'gatherNetworkInfo.vbs'. It's crucial to exclude processes where the command line execution image ends with '\\cscript.exe' or '\\wscript.exe' to reduce false positives. This approach is designed to identify potential reconnaissance activity where adversaries attempt to gather valuable information about the network configuration and settings of the target machine. The associated tactics and techniques based on the MITRE ATT&CK framework for this detection include Discovery and Scripting. It is important to note that the reliability of this detection is high, but unknown false positives may occur, implying a need for further investigation into any alerts generated from this detection strategy.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of the built-in script located in \"C:\\Windows\\System32\\gatherNetworkInfo.vbs\". Which can be used to gather information about the target machine",
      "answer": "In order to detect execution of the built-in script located in \"C:\\Windows\\System32\\gatherNetworkInfo.vbs\", which can be used to gather information about the target machine, you should monitor process creation events on Windows systems for any command line execution that includes 'gatherNetworkInfo.vbs'. It's crucial to exclude processes where the command line execution image ends with '\\cscript.exe' or '\\wscript.exe' to reduce false positives. This approach is designed to identify potential reconnaissance activity where adversaries attempt to gather valuable information about the network configuration and settings of the target machine. The associated tactics and techniques based on the MITRE ATT&CK framework for this detection include Discovery and Scripting. It is important to note that the reliability of this detection is high, but unknown false positives may occur, implying a need for further investigation into any alerts generated from this detection strategy."
    }
  },
  {
    "instruction": "Please help me detect the following: Ensure that all account usernames and authentication credentials are transmitted across networks using encrypted channels.\nEnsure that an encryption is used for all sensitive information in transit. Ensure that an encrypted channels is used for all administrative account access.\n",
    "context": "",
    "output": "Sure!\nIn order to ensure that all account usernames and authentication credentials are transmitted across networks using encrypted channels, ensure that encryption is used for all sensitive information in transit, and ensure that encrypted channels are used for all administrative account access, you should monitor network traffic through firewall logs for communication over common ports associated with unencrypted services. Specifically, look for traffic destined to ports 8080, 21, 80, 23, 50000, 1521, 27017, 3306, 1433, 11211, 15672, 5900, 5901, 5902, 5903, 5904. These ports often correspond to services that might not use encryption by default, such as web servers (HTTP), FTP, Telnet, various databases, and other application-specific protocols. \n\nEffective detection should include verifying that actions related to this traffic are set to either forward, accept, or are marked with a numerical value like '2', which can denote an allowable action in certain firewall configurations. Furthermore, consider if the firewall marks the connection as not blocked (either not explicitly setting an action or by marking the connection as allowed). \n\nIt is crucial to be aware that some legitimate traffic to these ports may not represent a breach of sensitive information transmission policies, resulting in potential false positives. Thus, while monitoring for these conditions signifies potential policy violations, each alert should be scrutinized to confirm the nature of the transmitted data and the encryption status of the channel. Similarly, it is essential to ensure administrative account access and sensitive information travel exclusively through encrypted channels to prevent unauthorized access and data interception, reinforcing the organization's cybersecurity posture against espionage and data theft.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Ensure that all account usernames and authentication credentials are transmitted across networks using encrypted channels.\nEnsure that an encryption is used for all sensitive information in transit. Ensure that an encrypted channels is used for all administrative account access.\n",
      "answer": "In order to ensure that all account usernames and authentication credentials are transmitted across networks using encrypted channels, ensure that encryption is used for all sensitive information in transit, and ensure that encrypted channels are used for all administrative account access, you should monitor network traffic through firewall logs for communication over common ports associated with unencrypted services. Specifically, look for traffic destined to ports 8080, 21, 80, 23, 50000, 1521, 27017, 3306, 1433, 11211, 15672, 5900, 5901, 5902, 5903, 5904. These ports often correspond to services that might not use encryption by default, such as web servers (HTTP), FTP, Telnet, various databases, and other application-specific protocols. \n\nEffective detection should include verifying that actions related to this traffic are set to either forward, accept, or are marked with a numerical value like '2', which can denote an allowable action in certain firewall configurations. Furthermore, consider if the firewall marks the connection as not blocked (either not explicitly setting an action or by marking the connection as allowed). \n\nIt is crucial to be aware that some legitimate traffic to these ports may not represent a breach of sensitive information transmission policies, resulting in potential false positives. Thus, while monitoring for these conditions signifies potential policy violations, each alert should be scrutinized to confirm the nature of the transmitted data and the encryption status of the channel. Similarly, it is essential to ensure administrative account access and sensitive information travel exclusively through encrypted channels to prevent unauthorized access and data interception, reinforcing the organization's cybersecurity posture against espionage and data theft."
    }
  },
  {
    "instruction": "Explain how should I detect the following: activity when Windows Defender Firewall has been reset to its default configuration",
    "context": "",
    "output": "In order to detect activity when Windows Defender Firewall has been reset to its default configuration, you should: Monitor Windows firewall event logs for signs indicating that the Windows Defender Firewall settings have been reverted to their default configurations. This can be identified by looking for events with ID 2032, which signals this reset on versions of Windows prior to Windows 11, and event ID 2060, which indicates the same action but specifically on Windows 11 systems. This monitoring is crucial as resetting firewall configurations can be an indicator of an attacker attempting to weaken the host\u2019s defenses by reverting any custom rules that were added to block malicious activity.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "activity when Windows Defender Firewall has been reset to its default configuration",
      "answer": "In order to detect activity when Windows Defender Firewall has been reset to its default configuration, you should: Monitor Windows firewall event logs for signs indicating that the Windows Defender Firewall settings have been reverted to their default configurations. This can be identified by looking for events with ID 2032, which signals this reset on versions of Windows prior to Windows 11, and event ID 2060, which indicates the same action but specifically on Windows 11 systems. This monitoring is crucial as resetting firewall configurations can be an indicator of an attacker attempting to weaken the host\u2019s defenses by reverting any custom rules that were added to block malicious activity."
    }
  },
  {
    "instruction": "Can you explain how to detect: Potential adversaries accessing the microphone and webcam in an endpoint.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect potential adversaries accessing the microphone and webcam in an endpoint, you should monitor Windows Security logs for events with IDs 4657, 4656, and 4663 that indicate modifications or attempts to modify the registry entries associated with the permission settings of non-packaged applications for the microphone and webcam. Specifically, lookout for changes in the registry paths '\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\CapabilityAccessManager\\ConsentStore\\microphone\\NonPackaged' and '\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\CapabilityAccessManager\\ConsentStore\\webcam\\NonPackaged'. Being vigilant about such modifications can help in identifying unauthorized access to these sensitive resources.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Potential adversaries accessing the microphone and webcam in an endpoint.",
      "answer": "In order to detect potential adversaries accessing the microphone and webcam in an endpoint, you should monitor Windows Security logs for events with IDs 4657, 4656, and 4663 that indicate modifications or attempts to modify the registry entries associated with the permission settings of non-packaged applications for the microphone and webcam. Specifically, lookout for changes in the registry paths '\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\CapabilityAccessManager\\ConsentStore\\microphone\\NonPackaged' and '\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\CapabilityAccessManager\\ConsentStore\\webcam\\NonPackaged'. Being vigilant about such modifications can help in identifying unauthorized access to these sensitive resources."
    }
  },
  {
    "instruction": "Can you explain how to detect: connections from routable IPs to an RDP listener - which is indicative of a publicly-accessible RDP service.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect connections from routable IPs to an RDP listener - which is indicative of a publicly-accessible RDP service, you should monitor traffic for Remote Desktop Protocol (RDP) connections where the originating IP address starts with commonly used private address spaces ('192.168.', '10.', and '172.16.' through '172.31.') or unique local addresses ('fd', '2620:83:800f'). These indicators point to traffic originating from private or internal networks to an RDP service, suggesting that the RDP service might be publicly accessible. Monitoring for such traffic patterns is crucial as it could imply a risk of unauthorized access or potential brute force or remote exploit attempts on the RDP service. It is highly recommended to verify that any detected RDP exposure to the internet is intentional and approved, ensuring that the servers have not been compromised and are properly secured if they must be exposed. This approach focuses on leveraging Zeek logs targeted at RDP traffic, emphasizing the importance of validating the authenticity and security stance of such connections to minimize risk.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "connections from routable IPs to an RDP listener - which is indicative of a publicly-accessible RDP service.",
      "answer": "In order to detect connections from routable IPs to an RDP listener - which is indicative of a publicly-accessible RDP service, you should monitor traffic for Remote Desktop Protocol (RDP) connections where the originating IP address starts with commonly used private address spaces ('192.168.', '10.', and '172.16.' through '172.31.') or unique local addresses ('fd', '2620:83:800f'). These indicators point to traffic originating from private or internal networks to an RDP service, suggesting that the RDP service might be publicly accessible. Monitoring for such traffic patterns is crucial as it could imply a risk of unauthorized access or potential brute force or remote exploit attempts on the RDP service. It is highly recommended to verify that any detected RDP exposure to the internet is intentional and approved, ensuring that the servers have not been compromised and are properly secured if they must be exposed. This approach focuses on leveraging Zeek logs targeted at RDP traffic, emphasizing the importance of validating the authenticity and security stance of such connections to minimize risk."
    }
  },
  {
    "instruction": "How can I detect: Execution of ssh.exe to perform data exfiltration and tunneling through RDP",
    "context": "",
    "output": "In order to execute ssh.exe to perform data exfiltration and tunneling through RDP, you should: Monitor the creation of processes on Windows systems, particularly focusing on instances where 'ssh.exe' is executed with command line arguments containing ':3389'. This detection strategy is critical for identifying attempts to use Secure Shell (SSH) for forwarding Remote Desktop Protocol (RDP) sessions, which could indicate unauthorized access or data tunneling activities. It is important to note that some events may represent legitimate administrative activity and thus could be considered as false positives. The severity of this detection is considered high, underlining the potential risk associated with such activities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Execution of ssh.exe to perform data exfiltration and tunneling through RDP",
      "answer": "In order to execute ssh.exe to perform data exfiltration and tunneling through RDP, you should: Monitor the creation of processes on Windows systems, particularly focusing on instances where 'ssh.exe' is executed with command line arguments containing ':3389'. This detection strategy is critical for identifying attempts to use Secure Shell (SSH) for forwarding Remote Desktop Protocol (RDP) sessions, which could indicate unauthorized access or data tunneling activities. It is important to note that some events may represent legitimate administrative activity and thus could be considered as false positives. The severity of this detection is considered high, underlining the potential risk associated with such activities."
    }
  },
  {
    "instruction": "How to detect: execution of the \"curl\" process with \"upload\" flags. Which might indicate potential data exfiltration",
    "context": "",
    "output": "In order to detect the execution of the \"curl\" process with \"upload\" flags, which might indicate potential data exfiltration, you should focus on monitoring process creation within Windows environments. Specifically, look out for instances where the \"curl.exe\" application is executed. The key indicators of potential malicious activity involve the use of command-line arguments that initiate data uploads. These include the use of flags such as `--form`, `--upload-file`, `--data`, along with variations like `--data-ascii`, `--data-binary`, `--data-raw`, and `--data-urlencode`. Additionally, less common but equally important flags to monitor for include those denoted by the regex pattern `\\s-[FTd]\\s`, which captures short-form upload-related flags that might be case sensitive.\n\nBe aware that not all usage of curl for uploading data is malicious. Common legitimate cases involve scripts created by developers and system administrators for various benign purposes. To refine detection and reduce false positives, you can optionally exclude curl command lines that target `localhost` or the loopback IP address `127.0.0.1`, as these are often used in non-malicious, internal operations.\n\nMonitoring for these behaviors helps identify potential data exfiltration attempts through a commonly used command-line tool, allowing for timely investigation and response to suspicious activities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of the \"curl\" process with \"upload\" flags. Which might indicate potential data exfiltration",
      "answer": "In order to detect the execution of the \"curl\" process with \"upload\" flags, which might indicate potential data exfiltration, you should focus on monitoring process creation within Windows environments. Specifically, look out for instances where the \"curl.exe\" application is executed. The key indicators of potential malicious activity involve the use of command-line arguments that initiate data uploads. These include the use of flags such as `--form`, `--upload-file`, `--data`, along with variations like `--data-ascii`, `--data-binary`, `--data-raw`, and `--data-urlencode`. Additionally, less common but equally important flags to monitor for include those denoted by the regex pattern `\\s-[FTd]\\s`, which captures short-form upload-related flags that might be case sensitive.\n\nBe aware that not all usage of curl for uploading data is malicious. Common legitimate cases involve scripts created by developers and system administrators for various benign purposes. To refine detection and reduce false positives, you can optionally exclude curl command lines that target `localhost` or the loopback IP address `127.0.0.1`, as these are often used in non-malicious, internal operations.\n\nMonitoring for these behaviors helps identify potential data exfiltration attempts through a commonly used command-line tool, allowing for timely investigation and response to suspicious activities."
    }
  },
  {
    "instruction": "Please help me detect the following: Microsoft Cloud App Security reported a user has deleted a unusual a large volume of files.",
    "context": "",
    "output": "Sure!\nIn order to detect when a Microsoft Cloud App Security reported a user has deleted an unusual large volume of files, you should: Monitor logs from the threat management service specifically for Microsoft 365 products. Focus on identifying events sourced from the SecurityComplianceCenter that are labeled with the event name 'Unusual volume of file deletion' and have a status of 'success'. This approach aims to catch activities where there might be an exceptional number of file deletions happening which is not a common behavior and could indicate a potential security threat or compromise. The level of concern for such detections is considered medium and while it might result in false positives, whose sources are unknown, it's crucial not to overlook these alerts without proper investigation. This monitoring strategy aligns with identifying suspicious behavior that could signify data destruction or exfiltration methods often associated with cybersecurity threats.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Microsoft Cloud App Security reported a user has deleted a unusual a large volume of files.",
      "answer": "In order to detect when a Microsoft Cloud App Security reported a user has deleted an unusual large volume of files, you should: Monitor logs from the threat management service specifically for Microsoft 365 products. Focus on identifying events sourced from the SecurityComplianceCenter that are labeled with the event name 'Unusual volume of file deletion' and have a status of 'success'. This approach aims to catch activities where there might be an exceptional number of file deletions happening which is not a common behavior and could indicate a potential security threat or compromise. The level of concern for such detections is considered medium and while it might result in false positives, whose sources are unknown, it's crucial not to overlook these alerts without proper investigation. This monitoring strategy aligns with identifying suspicious behavior that could signify data destruction or exfiltration methods often associated with cybersecurity threats."
    }
  },
  {
    "instruction": "Can you explain how to detect: tampering with the MacroRuntimeScanScope registry key to disable runtime scanning of enabled macros",
    "context": "",
    "output": "Certainly!\n\nIn order to detect tampering with the MacroRuntimeScanScope registry key to disable runtime scanning of enabled macros, you should focus on monitoring changes within the Windows registry specifically targeting registry set actions. Look for events where the EventType is marked as \"SetValue\" which indicates a modification attempt. Narrow this monitoring further by specifically targeting registry keys that contain the following path segments: '\\SOFTWARE\\', '\\Microsoft\\Office\\', and '\\Common\\Security'. Additionally, ensure that these registry changes conclude with the '\\MacroRuntimeScanScope' to accurately pinpoint attempts at disabling macro scanning. Pay particular attention to modifications where the Details are set to a DWORD value of 0x00000000, as this indicates the disarming of macro runtime scans.\n\nIt's essential to have this monitoring in place despite the potential for unknown false positives, given this activity's high threat level. This approach aligns with identifying tactics and techniques such as defense evasion and execution through the manipulation of security-critical registry keys to bypass the runtime scanning of macros. This ensures a robust defense mechanism is in place to detect attempts at undermining security features designed to prevent the execution of potentially malicious macros.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "tampering with the MacroRuntimeScanScope registry key to disable runtime scanning of enabled macros",
      "answer": "In order to detect tampering with the MacroRuntimeScanScope registry key to disable runtime scanning of enabled macros, you should focus on monitoring changes within the Windows registry specifically targeting registry set actions. Look for events where the EventType is marked as \"SetValue\" which indicates a modification attempt. Narrow this monitoring further by specifically targeting registry keys that contain the following path segments: '\\SOFTWARE\\', '\\Microsoft\\Office\\', and '\\Common\\Security'. Additionally, ensure that these registry changes conclude with the '\\MacroRuntimeScanScope' to accurately pinpoint attempts at disabling macro scanning. Pay particular attention to modifications where the Details are set to a DWORD value of 0x00000000, as this indicates the disarming of macro runtime scans.\n\nIt's essential to have this monitoring in place despite the potential for unknown false positives, given this activity's high threat level. This approach aligns with identifying tactics and techniques such as defense evasion and execution through the manipulation of security-critical registry keys to bypass the runtime scanning of macros. This ensures a robust defense mechanism is in place to detect attempts at undermining security features designed to prevent the execution of potentially malicious macros."
    }
  },
  {
    "instruction": "Can you explain how to detect: creation of scheduled tasks in user session",
    "context": "",
    "output": "Certainly!\n\nIn order to detect the creation of scheduled tasks in user sessions, you should focus on monitoring process creation events within Windows operating systems. Specifically, pay attention to instances where the 'schtasks.exe' process is executed, which is indicated by the end of the process image path. Moreover, look for commands that include ' /create ', signifying an attempt to create a new scheduled task. It's also important to filter out any activities where the User field contains language settings that are indicative of authorized or automated system activities, commonly including terms like 'AUTHORI' or 'AUTORI', to reduce false positive alerts due to legitimate administrative activities or software installations. Keep an eye on the command line used for process creation and the parent process's command line to catch malicious attempts. This approach aims at a low level of alert severity due to the potential for legitimate uses of scheduled task creation.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "creation of scheduled tasks in user session",
      "answer": "In order to detect the creation of scheduled tasks in user sessions, you should focus on monitoring process creation events within Windows operating systems. Specifically, pay attention to instances where the 'schtasks.exe' process is executed, which is indicated by the end of the process image path. Moreover, look for commands that include ' /create ', signifying an attempt to create a new scheduled task. It's also important to filter out any activities where the User field contains language settings that are indicative of authorized or automated system activities, commonly including terms like 'AUTHORI' or 'AUTORI', to reduce false positive alerts due to legitimate administrative activities or software installations. Keep an eye on the command line used for process creation and the parent process's command line to catch malicious attempts. This approach aims at a low level of alert severity due to the potential for legitimate uses of scheduled task creation."
    }
  },
  {
    "instruction": "Explain how should I detect the following: embeding of files with usage of steghide binary, the adversaries may use this technique to prevent the detection of hidden information.",
    "context": "",
    "output": "In order to detect embedding of files with usage of steghide binary, the adversaries may use this technique to prevent the detection of hidden information, you should: Monitor Linux systems for the use of the 'steghide' binary, specifically focusing on the auditd logs. Be on the lookout for the execution of 'steghide' with the arguments 'embed', '-cf', and '-ef'. These arguments indicate an attempt to embed hidden information within files. The 'execve' type in the logs is crucial, as it signifies an execution request for the steghide command. The '-cf' option specifies the cover file that will contain the hidden data, while '-ef' denotes the embedded file that carries the data to be hidden. It's important to understand that, despite the low level of initial suspicion attributed to these actions (as they could theoretically be used in benign scenarios), their detection plays a critical role in uncovering efforts by adversaries to transfer or conceal sensitive information.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "embeding of files with usage of steghide binary, the adversaries may use this technique to prevent the detection of hidden information.",
      "answer": "In order to detect embedding of files with usage of steghide binary, the adversaries may use this technique to prevent the detection of hidden information, you should: Monitor Linux systems for the use of the 'steghide' binary, specifically focusing on the auditd logs. Be on the lookout for the execution of 'steghide' with the arguments 'embed', '-cf', and '-ef'. These arguments indicate an attempt to embed hidden information within files. The 'execve' type in the logs is crucial, as it signifies an execution request for the steghide command. The '-cf' option specifies the cover file that will contain the hidden data, while '-ef' denotes the embedded file that carries the data to be hidden. It's important to understand that, despite the low level of initial suspicion attributed to these actions (as they could theoretically be used in benign scenarios), their detection plays a critical role in uncovering efforts by adversaries to transfer or conceal sensitive information."
    }
  },
  {
    "instruction": "How can I detect: suspicious and uncommon child processes of WmiPrvSE",
    "context": "",
    "output": "In order to detect suspicious and uncommon child processes of WmiPrvSE, you should: monitor the creation of processes on Windows systems, specifically looking for instances where the Windows Management Instrumentation Provider Service (WmiPrvSE.exe) spawns child processes. Pay particular attention to child processes that are typically associated with living off the land binaries and scripts (LOLBAS) or are otherwise suspicious in the context of WmiPrvSE.exe, such as certutil.exe, cscript.exe, mshta.exe, msiexec.exe, regsvr32.exe, rundll32.exe, verclsid.exe, and wscript.exe. Another critical set of detections involves monitoring for the command-line interpreter (cmd.exe) being spawned as a child process of WmiPrvSE.exe, particularly if the command line includes references to scripts or tools often used in attacks, like cscript, mshta, powershell, pwsh, regsvr32, rundll32, and wscript. Exclude any instances where WerFault.exe or additional instances of WmiPrvSE.exe are spawned, as these can be indicative of legitimate behavior or error conditions. It's important to act on these detections due to their high potential for being indicative of malicious activity, although there may be unknown false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious and uncommon child processes of WmiPrvSE",
      "answer": "In order to detect suspicious and uncommon child processes of WmiPrvSE, you should: monitor the creation of processes on Windows systems, specifically looking for instances where the Windows Management Instrumentation Provider Service (WmiPrvSE.exe) spawns child processes. Pay particular attention to child processes that are typically associated with living off the land binaries and scripts (LOLBAS) or are otherwise suspicious in the context of WmiPrvSE.exe, such as certutil.exe, cscript.exe, mshta.exe, msiexec.exe, regsvr32.exe, rundll32.exe, verclsid.exe, and wscript.exe. Another critical set of detections involves monitoring for the command-line interpreter (cmd.exe) being spawned as a child process of WmiPrvSE.exe, particularly if the command line includes references to scripts or tools often used in attacks, like cscript, mshta, powershell, pwsh, regsvr32, rundll32, and wscript. Exclude any instances where WerFault.exe or additional instances of WmiPrvSE.exe are spawned, as these can be indicative of legitimate behavior or error conditions. It's important to act on these detections due to their high potential for being indicative of malicious activity, although there may be unknown false positives."
    }
  },
  {
    "instruction": "How to detect: API token is created",
    "context": "",
    "output": "In order to detect when an API token is created, you should monitor Okta logs for events where an API token is generated. Specifically, focus on identifying events classified under the event type `system.api_token.create`. This indicates the creation of an API token. While monitoring for these events, it is essential to consider that there might be legitimate instances where an API token is created by authorized users, serving as potential false positives. The level of concern for this activity is classified as medium, owing to the potential misuse of API tokens if they are created maliciously. Such events should be scrutinized to ensure they align with expected behavior and authorized activity within the system.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "API token is created",
      "answer": "In order to detect when an API token is created, you should monitor Okta logs for events where an API token is generated. Specifically, focus on identifying events classified under the event type `system.api_token.create`. This indicates the creation of an API token. While monitoring for these events, it is essential to consider that there might be legitimate instances where an API token is created by authorized users, serving as potential false positives. The level of concern for this activity is classified as medium, owing to the potential misuse of API tokens if they are created maliciously. Such events should be scrutinized to ensure they align with expected behavior and authorized activity within the system."
    }
  },
  {
    "instruction": "Can you explain how to detect: specific process tree behavior of a \"rundll32\" execution often linked with potential Qakbot activity.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect specific process tree behavior of a \"rundll32\" execution often linked with potential Qakbot activity, you should: monitor Windows process creation logs for instances where specific parent processes, including 'cmd.exe', 'cscript.exe', 'curl.exe', 'mshta.exe', 'powershell.exe', 'pwsh.exe', and 'wscript.exe', spawn 'rundll32.exe'. It is crucial to look for 'rundll32.exe' executions that also have command lines containing paths indicative of Qakbot's behavior, such as files located in '\\ProgramData\\', '\\Users\\Public\\', '\\AppData\\Local\\Temp\\', and '\\AppData\\Roaming\\'. An additional sign of this malware's activity includes the 'rundll32.exe' command line invoking a '.dll' file. Given that these characteristics have been uniquely observed in Qakbot infections, their presence with the specified conditions suggests a high likelihood of this specific malware strain operating on the system without the common risk of false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "specific process tree behavior of a \"rundll32\" execution often linked with potential Qakbot activity.",
      "answer": "In order to detect specific process tree behavior of a \"rundll32\" execution often linked with potential Qakbot activity, you should: monitor Windows process creation logs for instances where specific parent processes, including 'cmd.exe', 'cscript.exe', 'curl.exe', 'mshta.exe', 'powershell.exe', 'pwsh.exe', and 'wscript.exe', spawn 'rundll32.exe'. It is crucial to look for 'rundll32.exe' executions that also have command lines containing paths indicative of Qakbot's behavior, such as files located in '\\ProgramData\\', '\\Users\\Public\\', '\\AppData\\Local\\Temp\\', and '\\AppData\\Roaming\\'. An additional sign of this malware's activity includes the 'rundll32.exe' command line invoking a '.dll' file. Given that these characteristics have been uniquely observed in Qakbot infections, their presence with the specified conditions suggests a high likelihood of this specific malware strain operating on the system without the common risk of false positives."
    }
  },
  {
    "instruction": "How can I detect: suspicious PowerShell invocation command parameters",
    "context": "",
    "output": "In order to detect suspicious PowerShell invocation command parameters, you should: focus on monitoring PowerShell scripts on Windows systems, ensuring that Script Block Logging is enabled for detailed observation. Look for scripts that contain specific command-line parameters indicating potentially malicious activities. These parameters include forms of encoded commands such as ' -enc ', ' -EncodedCommand ', and ' -ec ', which are often used by attackers to obscure malicious scripts from plain sight. Additionally, watch for indicators that a script is trying to hide its window or execute without interacting with the desktop, through parameters like ' -w hidden ', ' -window hidden ', ' -windowstyle hidden ', ' -w 1 ', ' -noni ', and ' -noninteractive '. These techniques are commonly employed in stealth operations to avoid detection by users or administrators. The presence of any of these command-line arguments should raise a high level of suspicion, although be aware of the rare legitimate cases that may generate false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious PowerShell invocation command parameters",
      "answer": "In order to detect suspicious PowerShell invocation command parameters, you should: focus on monitoring PowerShell scripts on Windows systems, ensuring that Script Block Logging is enabled for detailed observation. Look for scripts that contain specific command-line parameters indicating potentially malicious activities. These parameters include forms of encoded commands such as ' -enc ', ' -EncodedCommand ', and ' -ec ', which are often used by attackers to obscure malicious scripts from plain sight. Additionally, watch for indicators that a script is trying to hide its window or execute without interacting with the desktop, through parameters like ' -w hidden ', ' -window hidden ', ' -windowstyle hidden ', ' -w 1 ', ' -noni ', and ' -noninteractive '. These techniques are commonly employed in stealth operations to avoid detection by users or administrators. The presence of any of these command-line arguments should raise a high level of suspicion, although be aware of the rare legitimate cases that may generate false positives."
    }
  },
  {
    "instruction": "Explain how should I detect the following: remote RPC calls that performs remote DCOM operations. These could be abused for lateral movement via DCOM or WMI.",
    "context": "",
    "output": "In order to detect remote RPC calls that perform remote DCOM operations, which could be abused for lateral movement via DCOM or WMI, you should focus on analyzing logs from RPC firewalls. These logs are critical because they help identify when potentially malicious remote procedure calls are made, ones that might facilitate lateral movement within a network\u2014an attacker's method to move from one system to another.\n\nWhen examining the RPC firewall's application logs, look for those categorized under \"RPCFW\" with an EventID of 3. This event ID is crucial as it specifically points to scenarios where remote DCOM operations might be taking place. To further narrow down the search for malicious activity, the detection process should filter logs based on specific InterfaceUuids. The InterfaceUuids of interest, indicating operations that need scrutiny, include:\n\n- 4d9f4ab8-7d1c-11cf-861e-0020af6e7c57,\n- 99fcfec4-5260-101b-bbcb-00aa0021347a,\n- 000001a0-0000-0000-c000-000000000046,\n- 00000131-0000-0000-c000-000000000046,\n- 00000143-0000-0000-c000-000000000046, and\n- 00000000-0000-0000-c000-000000000046.\n\nThese specific UUIDs relate to operations that are commonly used in legitimate administrative tasks but could also be exploited for malicious purposes like lateral movement through DCOM or WMI.\n\nIt's also important to be aware of potential false positives, which can occur during some administrative tasks on a remote host. Despite this, the risk level of such detections is considered high due to the possible exploitation for lateral movement, highlighting the need for rigorous investigation when such patterns are observed.\n\nIn summary, close monitoring of RPC firewall application logs, with particular attention to EventLog RPCFW, EventID 3, and the listed InterfaceUuids, is essential for identifying and investigating potential abuses of remote DCOM operations, which could signify attempts at lateral movement through the network.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "remote RPC calls that performs remote DCOM operations. These could be abused for lateral movement via DCOM or WMI.",
      "answer": "In order to detect remote RPC calls that perform remote DCOM operations, which could be abused for lateral movement via DCOM or WMI, you should focus on analyzing logs from RPC firewalls. These logs are critical because they help identify when potentially malicious remote procedure calls are made, ones that might facilitate lateral movement within a network\u2014an attacker's method to move from one system to another.\n\nWhen examining the RPC firewall's application logs, look for those categorized under \"RPCFW\" with an EventID of 3. This event ID is crucial as it specifically points to scenarios where remote DCOM operations might be taking place. To further narrow down the search for malicious activity, the detection process should filter logs based on specific InterfaceUuids. The InterfaceUuids of interest, indicating operations that need scrutiny, include:\n\n- 4d9f4ab8-7d1c-11cf-861e-0020af6e7c57,\n- 99fcfec4-5260-101b-bbcb-00aa0021347a,\n- 000001a0-0000-0000-c000-000000000046,\n- 00000131-0000-0000-c000-000000000046,\n- 00000143-0000-0000-c000-000000000046, and\n- 00000000-0000-0000-c000-000000000046.\n\nThese specific UUIDs relate to operations that are commonly used in legitimate administrative tasks but could also be exploited for malicious purposes like lateral movement through DCOM or WMI.\n\nIt's also important to be aware of potential false positives, which can occur during some administrative tasks on a remote host. Despite this, the risk level of such detections is considered high due to the possible exploitation for lateral movement, highlighting the need for rigorous investigation when such patterns are observed.\n\nIn summary, close monitoring of RPC firewall application logs, with particular attention to EventLog RPCFW, EventID 3, and the listed InterfaceUuids, is essential for identifying and investigating potential abuses of remote DCOM operations, which could signify attempts at lateral movement through the network."
    }
  },
  {
    "instruction": "Please help me detect the following: events generated by user-mode applications when they call the CveEventWrite API when a known vulnerability is trying to be exploited.\nMS started using this log in Jan. 2020 with CVE-2020-0601 (a Windows CryptoAPI vulnerability.\nUnfortunately, that is about the only instance of CVEs being written to this log.\n",
    "context": "",
    "output": "Sure!\nIn order to detect events generated by user-mode applications when they call the CveEventWrite API when a known vulnerability is trying to be exploited, you should focus on Windows application service logs. Specifically, look for events from providers named 'Microsoft-Windows-Audit-CVE' or 'Audit-CVE' with an EventID of 1. These logs are critical since they indicate attempts to exploit known vulnerabilities using the CveEventWrite API. Microsoft began incorporating this logging mechanism in January 2020, starting with the identification of the CVE-2020-0601 vulnerability within the Windows CryptoAPI. However, it's important to note that this logging for CVEs is still relatively uncommon, and the only widely noted instance is for CVE-2020-0601. When analyzing these logs, be aware that false positives are considered unknown, underscoring the importance of careful examination of these events due to their critical level of severity. The tags related to this activity include tactics and techniques such as Defense Evasion, Execution, Privilege Escalation, and Credential Access, reflective of the MITRE ATT&CK framework's categorization of this kind of exploit behavior.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "events generated by user-mode applications when they call the CveEventWrite API when a known vulnerability is trying to be exploited.\nMS started using this log in Jan. 2020 with CVE-2020-0601 (a Windows CryptoAPI vulnerability.\nUnfortunately, that is about the only instance of CVEs being written to this log.\n",
      "answer": "In order to detect events generated by user-mode applications when they call the CveEventWrite API when a known vulnerability is trying to be exploited, you should focus on Windows application service logs. Specifically, look for events from providers named 'Microsoft-Windows-Audit-CVE' or 'Audit-CVE' with an EventID of 1. These logs are critical since they indicate attempts to exploit known vulnerabilities using the CveEventWrite API. Microsoft began incorporating this logging mechanism in January 2020, starting with the identification of the CVE-2020-0601 vulnerability within the Windows CryptoAPI. However, it's important to note that this logging for CVEs is still relatively uncommon, and the only widely noted instance is for CVE-2020-0601. When analyzing these logs, be aware that false positives are considered unknown, underscoring the importance of careful examination of these events due to their critical level of severity. The tags related to this activity include tactics and techniques such as Defense Evasion, Execution, Privilege Escalation, and Credential Access, reflective of the MITRE ATT&CK framework's categorization of this kind of exploit behavior."
    }
  },
  {
    "instruction": "Can you explain how to detect: pattern of UAC Bypass using consent.exe and comctl32.dll (UACMe 22)",
    "context": "",
    "output": "Certainly!\n\nIn order to detect the pattern of UAC Bypass using consent.exe and comctl32.dll (UACMe 22), you should: Monitor process creation events on Windows systems for any instances where a process is initiated by 'consent.exe' and subsequently spawns 'werfault.exe'. It's crucial to ensure that these observed processes operate at either a 'High' or 'System' integrity level, indicative of elevated privileges. This pattern of activity is generally associated with attempts to circumvent User Account Control (UAC), specifically leveraging a known bypass technique referred to as UACMe method number 22. Any detections of such activities should be treated with a high level of suspicion due to their potential malicious nature and lack of known legitimate use cases.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "pattern of UAC Bypass using consent.exe and comctl32.dll (UACMe 22)",
      "answer": "In order to detect the pattern of UAC Bypass using consent.exe and comctl32.dll (UACMe 22), you should: Monitor process creation events on Windows systems for any instances where a process is initiated by 'consent.exe' and subsequently spawns 'werfault.exe'. It's crucial to ensure that these observed processes operate at either a 'High' or 'System' integrity level, indicative of elevated privileges. This pattern of activity is generally associated with attempts to circumvent User Account Control (UAC), specifically leveraging a known bypass technique referred to as UACMe method number 22. Any detections of such activities should be treated with a high level of suspicion due to their potential malicious nature and lack of known legitimate use cases."
    }
  },
  {
    "instruction": "How to detect: pattern of UAC Bypass via WSReset usable by default sysmon-config",
    "context": "",
    "output": "In order to detect the pattern of UAC Bypass via WSReset usable by default sysmon-config, you should monitor process creation events within Windows operating systems. Specifically, look for processes that end with the '\\wsreset.exe' in their image paths. This executable is particularly interesting as it is commonly involved in User Account Control (UAC) bypass techniques. The processes to pay close attention to are those running at High or System integrity levels, which indicates they have elevated privileges. It is essential to react swiftly to alerts regarding such activity given the high threat level, although it's important to note that the nature of false positives in this context is currently unknown. This approach aligns with understanding techniques related to privilege escalation and evasion tactics.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "pattern of UAC Bypass via WSReset usable by default sysmon-config",
      "answer": "In order to detect the pattern of UAC Bypass via WSReset usable by default sysmon-config, you should monitor process creation events within Windows operating systems. Specifically, look for processes that end with the '\\wsreset.exe' in their image paths. This executable is particularly interesting as it is commonly involved in User Account Control (UAC) bypass techniques. The processes to pay close attention to are those running at High or System integrity levels, which indicates they have elevated privileges. It is essential to react swiftly to alerts regarding such activity given the high threat level, although it's important to note that the nature of false positives in this context is currently unknown. This approach aligns with understanding techniques related to privilege escalation and evasion tactics."
    }
  },
  {
    "instruction": "Explain how should I detect the following: execution of netsh to configure a port forwarding of port 3389 (RDP) rule",
    "context": "",
    "output": "In order to detect the execution of netsh to configure a port forwarding of port 3389 (RDP) rule, you should monitor for the creation of processes on Windows systems, specifically looking for instances where the process image file ends with '\\netsh.exe' or the original file name is identified as 'netsh.exe'. Additionally, check the command line arguments to ensure they contain specific patterns: ' i', ' p', '=3389', and ' c', all of which must be present to match the criteria. This particular behavior could indicate an attempt to manipulate network settings to allow Remote Desktop Protocol (RDP) connections through port 3389, which could be malicious in nature. However, be aware that there could be legitimate administrative activities that also use these commands, so false positives may occur. The significance of this detection is considered high due to the potential security implications of unauthorized port forwarding setups.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of netsh to configure a port forwarding of port 3389 (RDP) rule",
      "answer": "In order to detect the execution of netsh to configure a port forwarding of port 3389 (RDP) rule, you should monitor for the creation of processes on Windows systems, specifically looking for instances where the process image file ends with '\\netsh.exe' or the original file name is identified as 'netsh.exe'. Additionally, check the command line arguments to ensure they contain specific patterns: ' i', ' p', '=3389', and ' c', all of which must be present to match the criteria. This particular behavior could indicate an attempt to manipulate network settings to allow Remote Desktop Protocol (RDP) connections through port 3389, which could be malicious in nature. However, be aware that there could be legitimate administrative activities that also use these commands, so false positives may occur. The significance of this detection is considered high due to the potential security implications of unauthorized port forwarding setups."
    }
  },
  {
    "instruction": "Can you explain how to detect: execution of \"wget\" to download a \".zip\" or \".rar\" files from \"temp.sh\". As seen used by UNC4841 during their Barracuda ESG zero day exploitation.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect execution of \"wget\" to download a \".zip\" or \".rar\" files from \"temp.sh\", as seen used by UNC4841 during their Barracuda ESG zero day exploitation, you should: Monitor Linux systems for process creation events specifically focusing on instances where the \"wget\" utility is executed. Look for command lines that contain the specific URL \"https://temp.sh/\", which is a known indicator of this attack type. Additionally, ensure that the command line ends with either \".rar\" or \".zip\", suggesting the download of a compressed file, which is a common tactic used in the delivery of malicious payloads. This behavior is significant and should be regarded with a high level of suspicion, given its association with a known threat actor's method of operation.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of \"wget\" to download a \".zip\" or \".rar\" files from \"temp.sh\". As seen used by UNC4841 during their Barracuda ESG zero day exploitation.",
      "answer": "In order to detect execution of \"wget\" to download a \".zip\" or \".rar\" files from \"temp.sh\", as seen used by UNC4841 during their Barracuda ESG zero day exploitation, you should: Monitor Linux systems for process creation events specifically focusing on instances where the \"wget\" utility is executed. Look for command lines that contain the specific URL \"https://temp.sh/\", which is a known indicator of this attack type. Additionally, ensure that the command line ends with either \".rar\" or \".zip\", suggesting the download of a compressed file, which is a common tactic used in the delivery of malicious payloads. This behavior is significant and should be regarded with a high level of suspicion, given its association with a known threat actor's method of operation."
    }
  },
  {
    "instruction": "How to detect: suspicious ways to download files from Microsoft domains that are used to store attachments in Emails or OneNote documents",
    "context": "",
    "output": "In order to detect suspicious ways to download files from Microsoft domains that are used to store attachments in Emails or OneNote documents, you should monitor process creation logs on Windows systems for the activation of specific utilities or commands indicative of file downloads. Specifically, look for instances where the image name ends with '\\curl.exe' or '\\wget.exe', or where the command line includes phrases such as 'Invoke-WebRequest', 'iwr ', 'curl ', 'wget ', or 'Start-BitsTransfer'. Additionally, monitor for use of '.DownloadFile(' or '.DownloadString(' in command lines, which are methods often used in PowerShell scripting to download files from the internet. Attention should also be focused on commands that contain URLs pointing to 'https://attachment.outlook.live.net/owa/' or 'https://onenoteonlinesync.onenote.com/onenoteonlinesync/', as these are Microsoft domains hosting attachments for Emails and OneNote documents. It's important to be aware that there could be legitimate scripts or tools designed to download attachments from these domains, and these should be considered as potential false positives. This detection approach is highly relevant for identifying activities that may involve unauthorized downloading of sensitive documents or data exfiltration attempts through trusted Microsoft services.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious ways to download files from Microsoft domains that are used to store attachments in Emails or OneNote documents",
      "answer": "In order to detect suspicious ways to download files from Microsoft domains that are used to store attachments in Emails or OneNote documents, you should monitor process creation logs on Windows systems for the activation of specific utilities or commands indicative of file downloads. Specifically, look for instances where the image name ends with '\\curl.exe' or '\\wget.exe', or where the command line includes phrases such as 'Invoke-WebRequest', 'iwr ', 'curl ', 'wget ', or 'Start-BitsTransfer'. Additionally, monitor for use of '.DownloadFile(' or '.DownloadString(' in command lines, which are methods often used in PowerShell scripting to download files from the internet. Attention should also be focused on commands that contain URLs pointing to 'https://attachment.outlook.live.net/owa/' or 'https://onenoteonlinesync.onenote.com/onenoteonlinesync/', as these are Microsoft domains hosting attachments for Emails and OneNote documents. It's important to be aware that there could be legitimate scripts or tools designed to download attachments from these domains, and these should be considered as potential false positives. This detection approach is highly relevant for identifying activities that may involve unauthorized downloading of sensitive documents or data exfiltration attempts through trusted Microsoft services."
    }
  },
  {
    "instruction": "How to detect: execution of specific named binaries which were used by UNC4841 to deploy their SEASPY backdoor",
    "context": "",
    "output": "In order to detect execution of specific named binaries which were used by UNC4841 to deploy their SEASPY backdoor, you should monitor the creation of processes on Linux systems. Focus on identifying any process that is initiated by executables ending with '/BarracudaMailService', '/resize2fstab', or '/resize_reisertab'. The execution of these specific binaries is indicative of an attempt to deploy the SEASPY backdoor, a method associated with the threat group UNC4841. The detection of such activities should be treated with a high level of concern due to the critical nature of the threat. False positives are considered unlikely, which implies that any detection of these binaries should be thoroughly investigated.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of specific named binaries which were used by UNC4841 to deploy their SEASPY backdoor",
      "answer": "In order to detect execution of specific named binaries which were used by UNC4841 to deploy their SEASPY backdoor, you should monitor the creation of processes on Linux systems. Focus on identifying any process that is initiated by executables ending with '/BarracudaMailService', '/resize2fstab', or '/resize_reisertab'. The execution of these specific binaries is indicative of an attempt to deploy the SEASPY backdoor, a method associated with the threat group UNC4841. The detection of such activities should be treated with a high level of concern due to the critical nature of the threat. False positives are considered unlikely, which implies that any detection of these binaries should be thoroughly investigated."
    }
  },
  {
    "instruction": "Can you explain how to detect: mshta loaded by wmiprvse as parent as used by TA505 malicious documents",
    "context": "",
    "output": "Certainly!\n\nIn order to detect mshta loaded by wmiprvse as parent as used by TA505 malicious documents, you should: Monitor the creation of processes on Windows systems, specifically looking for instances where 'mshta.exe' is launched and the parent process is 'wmiprvse.exe'. This specific behavior is indicative of an attack, where mshta.exe, typically used for running Microsoft HTML Application (HTA) files, is maliciously invoked by a WMI (Windows Management Instrumentation) process. Such a pattern is a strong indicator of the TA505 threat group's tactics, aiming to execute harmful scripts or payloads via documents designed to exploit this vector. Keep in mind that there might be instances where this behavior occurs that are not malicious, though they are currently unknown and the level of threat is considered critical.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "mshta loaded by wmiprvse as parent as used by TA505 malicious documents",
      "answer": "In order to detect mshta loaded by wmiprvse as parent as used by TA505 malicious documents, you should: Monitor the creation of processes on Windows systems, specifically looking for instances where 'mshta.exe' is launched and the parent process is 'wmiprvse.exe'. This specific behavior is indicative of an attack, where mshta.exe, typically used for running Microsoft HTML Application (HTA) files, is maliciously invoked by a WMI (Windows Management Instrumentation) process. Such a pattern is a strong indicator of the TA505 threat group's tactics, aiming to execute harmful scripts or payloads via documents designed to exploit this vector. Keep in mind that there might be instances where this behavior occurs that are not malicious, though they are currently unknown and the level of threat is considered critical."
    }
  },
  {
    "instruction": "Explain how should I detect the following: changes to the registry for the currently logged-in user. In order to disable PowerShell module logging, script block logging or transcription and script execution logging",
    "context": "",
    "output": "In order to detect changes to the registry for the currently logged-in user, in order to disable PowerShell module logging, script block logging or transcription and script execution logging, you should focus on monitoring Windows registry settings related to PowerShell logging and script execution policies. Specifically, pay attention to any `SetValue` `EventType` actions on registry paths associated with both PowerShell 5 (located under `\\Microsoft\\Windows\\PowerShell\\`) and PowerShell 7 (under `\\Microsoft\\PowerShellCore\\`). Look for registry changes targeting \n\n- Module Logging (`\\ModuleLogging\\EnableModuleLogging`), \n- Script Block Logging (`\\ScriptBlockLogging\\EnableScriptBlockLogging` and `\\ScriptBlockLogging\\EnableScriptBlockInvocationLogging`), \n- Transcription settings (`\\Transcription\\EnableTranscripting` and `\\Transcription\\EnableInvocationHeader`), \n- And the general setting to enable scripts (`\\EnableScripts`). \n\nThese registry paths are crucial, as changes to them, specifically to disable logging or script execution (indicated by setting the DWORD to `0x00000000`), can indicate malicious activity aimed at evading detection. Monitoring these changes is of high importance due to their association with MITRE ATT&CK tactics and techniques like \"Defense Evasion\". Adversaries may manipulate these registry settings to operate undetected by disabling important logging mechanisms that could otherwise alert security teams to their presence. It's important to note that modifications in these registry areas can sometimes generate false positives; however, given the high level of threat they potentially represent, such changes should be investigated promptly.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "changes to the registry for the currently logged-in user. In order to disable PowerShell module logging, script block logging or transcription and script execution logging",
      "answer": "In order to detect changes to the registry for the currently logged-in user, in order to disable PowerShell module logging, script block logging or transcription and script execution logging, you should focus on monitoring Windows registry settings related to PowerShell logging and script execution policies. Specifically, pay attention to any `SetValue` `EventType` actions on registry paths associated with both PowerShell 5 (located under `\\Microsoft\\Windows\\PowerShell\\`) and PowerShell 7 (under `\\Microsoft\\PowerShellCore\\`). Look for registry changes targeting \n\n- Module Logging (`\\ModuleLogging\\EnableModuleLogging`), \n- Script Block Logging (`\\ScriptBlockLogging\\EnableScriptBlockLogging` and `\\ScriptBlockLogging\\EnableScriptBlockInvocationLogging`), \n- Transcription settings (`\\Transcription\\EnableTranscripting` and `\\Transcription\\EnableInvocationHeader`), \n- And the general setting to enable scripts (`\\EnableScripts`). \n\nThese registry paths are crucial, as changes to them, specifically to disable logging or script execution (indicated by setting the DWORD to `0x00000000`), can indicate malicious activity aimed at evading detection. Monitoring these changes is of high importance due to their association with MITRE ATT&CK tactics and techniques like \"Defense Evasion\". Adversaries may manipulate these registry settings to operate undetected by disabling important logging mechanisms that could otherwise alert security teams to their presence. It's important to note that modifications in these registry areas can sometimes generate false positives; however, given the high level of threat they potentially represent, such changes should be investigated promptly."
    }
  },
  {
    "instruction": "Can you explain how to detect: an attacker trying to enable the outlook security setting \"EnableUnsafeClientMailRules\" which allows outlook to run applications or execute macros",
    "context": "",
    "output": "Certainly!\n\nIn order to detect an attacker trying to enable the outlook security setting \"EnableUnsafeClientMailRules\" which allows outlook to run applications or execute macros, you should: Monitor for process creation events within Windows systems for any instances where the command line contains the string '\\Outlook\\Security\\EnableUnsafeClientMailRules'. This string's presence suggests an attempt to alter Outlook's security settings to enable potentially unsafe client mail rules that could allow the execution of applications or macros, often used by attackers to perform malicious activities. It is important to consider any detection of this activity as high risk, although the possibility of false positives is acknowledged to be unknown.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "an attacker trying to enable the outlook security setting \"EnableUnsafeClientMailRules\" which allows outlook to run applications or execute macros",
      "answer": "In order to detect an attacker trying to enable the outlook security setting \"EnableUnsafeClientMailRules\" which allows outlook to run applications or execute macros, you should: Monitor for process creation events within Windows systems for any instances where the command line contains the string '\\Outlook\\Security\\EnableUnsafeClientMailRules'. This string's presence suggests an attempt to alter Outlook's security settings to enable potentially unsafe client mail rules that could allow the execution of applications or macros, often used by attackers to perform malicious activities. It is important to consider any detection of this activity as high risk, although the possibility of false positives is acknowledged to be unknown."
    }
  },
  {
    "instruction": "Please help me detect the following: creation of a file named \"wpbbin\" in the \"%systemroot%\\system32\\\" directory. Which could be indicative of UEFI based persistence method",
    "context": "",
    "output": "Sure!\nIn order to detect creation of a file named \"wpbbin\" in the \"%systemroot%\\system32\\\" directory, which could be indicative of UEFI based persistence method, you should: Monitor the Windows file event logs for any instances where a file named \"wpbbin.exe\" is created in the C:\\Windows\\System32 directory. This activity requires careful observation as it might suggest an attempt at establishing persistence on the system through UEFI manipulation. However, it's important to note that in some cases, this file creation could be a legitimate action performed by hardware manufacturers, such as Lenovo. The alert generated from this monitoring is considered high severity due to the potential for it being a part of a more complex attack strategy aiming at persistent access at a low system level.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "creation of a file named \"wpbbin\" in the \"%systemroot%\\system32\\\" directory. Which could be indicative of UEFI based persistence method",
      "answer": "In order to detect creation of a file named \"wpbbin\" in the \"%systemroot%\\system32\\\" directory, which could be indicative of UEFI based persistence method, you should: Monitor the Windows file event logs for any instances where a file named \"wpbbin.exe\" is created in the C:\\Windows\\System32 directory. This activity requires careful observation as it might suggest an attempt at establishing persistence on the system through UEFI manipulation. However, it's important to note that in some cases, this file creation could be a legitimate action performed by hardware manufacturers, such as Lenovo. The alert generated from this monitoring is considered high severity due to the potential for it being a part of a more complex attack strategy aiming at persistent access at a low system level."
    }
  },
  {
    "instruction": "Explain how should I detect the following: execution of AdvancedRun utility in the context of the TrustedInstaller, SYSTEM, Local Service or Network Service accounts",
    "context": "",
    "output": "In order to detect the execution of AdvancedRun utility in the context of the TrustedInstaller, SYSTEM, Local Service, or Network Service accounts, you should: monitor Windows process creation logs for command lines that contain specific patterns related to the AdvancedRun utility. Look out for command lines that include '/EXEFilename' or '/CommandLine', which are indicative of the AdvancedRun utility being executed. Additionally, be vigilant for commands containing '/RunAs 8', '/RunAs 4', '/RunAs 10', '/RunAs 11', or those that end with these '/RunAs' arguments. These particular commands are crucial to identify because they signify attempts to execute processes as either the TrustedInstaller, SYSTEM, Local Service, or Network Service accounts, respectively. High alert levels should be assigned to detections matching these criteria due to the significant implications of executing operations under these powerful and sensitive accounts.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of AdvancedRun utility in the context of the TrustedInstaller, SYSTEM, Local Service or Network Service accounts",
      "answer": "In order to detect the execution of AdvancedRun utility in the context of the TrustedInstaller, SYSTEM, Local Service, or Network Service accounts, you should: monitor Windows process creation logs for command lines that contain specific patterns related to the AdvancedRun utility. Look out for command lines that include '/EXEFilename' or '/CommandLine', which are indicative of the AdvancedRun utility being executed. Additionally, be vigilant for commands containing '/RunAs 8', '/RunAs 4', '/RunAs 10', '/RunAs 11', or those that end with these '/RunAs' arguments. These particular commands are crucial to identify because they signify attempts to execute processes as either the TrustedInstaller, SYSTEM, Local Service, or Network Service accounts, respectively. High alert levels should be assigned to detections matching these criteria due to the significant implications of executing operations under these powerful and sensitive accounts."
    }
  },
  {
    "instruction": "How to detect: logon events that have characteristics of events generated during an attack with KrbRelayUp and the like",
    "context": "",
    "output": "In order to detect logon events that have characteristics of events generated during an attack with KrbRelayUp and the like, you should monitor Windows security event logs for specific logon events. Focus on finding events with the Event ID 4624, which indicates a successful logon, and where the logon type is 3, denoting a network logon. These events should also specify 'Kerberos' as the authentication package used. Additionally, it's important to filter for logon attempts that originate from the IP address 127.0.0.1, implying that the logon attempt is coming from the same machine. Ensure to scrutinize events where the Target User Security Identifier (SID) begins with 'S-1-5-21-' and ends with '-500', indicating an attempt to log on using an account with administrative privileges. This focused monitoring is aimed at uncovering potential malicious activities associated with tactics and techniques like KrbRelayUp, by identifying abnormal use of legitimate login processes. Be aware that there might be situations where legitimate activities could trigger these conditions, although these occurrences are generally unknown. The level of concern for these specific detection parameters is high, emphasizing the need for immediate investigation upon trigger.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "logon events that have characteristics of events generated during an attack with KrbRelayUp and the like",
      "answer": "In order to detect logon events that have characteristics of events generated during an attack with KrbRelayUp and the like, you should monitor Windows security event logs for specific logon events. Focus on finding events with the Event ID 4624, which indicates a successful logon, and where the logon type is 3, denoting a network logon. These events should also specify 'Kerberos' as the authentication package used. Additionally, it's important to filter for logon attempts that originate from the IP address 127.0.0.1, implying that the logon attempt is coming from the same machine. Ensure to scrutinize events where the Target User Security Identifier (SID) begins with 'S-1-5-21-' and ends with '-500', indicating an attempt to log on using an account with administrative privileges. This focused monitoring is aimed at uncovering potential malicious activities associated with tactics and techniques like KrbRelayUp, by identifying abnormal use of legitimate login processes. Be aware that there might be situations where legitimate activities could trigger these conditions, although these occurrences are generally unknown. The level of concern for these specific detection parameters is high, emphasizing the need for immediate investigation upon trigger."
    }
  },
  {
    "instruction": "Explain how should I detect the following: Windows Update get some error Check if need a 0-days KB",
    "context": "",
    "output": "In order to check if Windows Update errors indicate a need for a zero-day KB (Knowledge Base update), you should monitor the Windows System log, specifically the Microsoft-Windows-WindowsUpdateClient/Operational log. Look for events generated by the provider named 'Microsoft-Windows-WindowsUpdateClient' with specific Event IDs that indicate various types of update failures:\n\n- Event ID 16, which indicates that Windows was unable to connect to the automatic updates service, preventing the system from downloading and installing updates according to its schedule.\n- Event ID 20, denoting installation failure, where Windows couldn't install an update due to an error.\n- Event ID 24, which signifies an uninstallation failure, meaning Windows failed to uninstall an update with an error.\n- Event ID 213, pointing to a revert failure where Windows struggled to revert an update due to an error.\n- Event ID 217, indicating a commit failure, as Windows was unable to commit an update with an error.\n\nThese specific event IDs are crucial for identifying issues with the Windows Update process, which could hint at underlying vulnerabilities or the need for a zero-day patch to address newly discovered security risks. It's important to note that there may be false positives, as not every failure is indicative of a critical issue needing a zero-day solution. The detection level is considered low, suggesting that while these events are worth noting, they should be contextualized within a broader investigation to ascertain their significance correctly.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Windows Update get some error Check if need a 0-days KB",
      "answer": "In order to check if Windows Update errors indicate a need for a zero-day KB (Knowledge Base update), you should monitor the Windows System log, specifically the Microsoft-Windows-WindowsUpdateClient/Operational log. Look for events generated by the provider named 'Microsoft-Windows-WindowsUpdateClient' with specific Event IDs that indicate various types of update failures:\n\n- Event ID 16, which indicates that Windows was unable to connect to the automatic updates service, preventing the system from downloading and installing updates according to its schedule.\n- Event ID 20, denoting installation failure, where Windows couldn't install an update due to an error.\n- Event ID 24, which signifies an uninstallation failure, meaning Windows failed to uninstall an update with an error.\n- Event ID 213, pointing to a revert failure where Windows struggled to revert an update due to an error.\n- Event ID 217, indicating a commit failure, as Windows was unable to commit an update with an error.\n\nThese specific event IDs are crucial for identifying issues with the Windows Update process, which could hint at underlying vulnerabilities or the need for a zero-day patch to address newly discovered security risks. It's important to note that there may be false positives, as not every failure is indicative of a critical issue needing a zero-day solution. The detection level is considered low, suggesting that while these events are worth noting, they should be contextualized within a broader investigation to ascertain their significance correctly."
    }
  },
  {
    "instruction": "Explain how should I detect the following: execution of \"Tpmvscmgr.exe\" to create a new virtual smart card.",
    "context": "",
    "output": "In order to detect execution of \"Tpmvscmgr.exe\" to create a new virtual smart card, you should: monitor process creation events on Windows operating systems, specifically looking for instances where the process image file name ends with '\\tpmvscmgr.exe' and the original file name is 'TpmVscMgr.exe'. Additionally, examine the command line arguments for the presence of the word 'create'. It's important to consider all these criteria together for accurate detection. However, be aware that legitimate administrative activities may also involve these indicators, so false positives, where genuine uses are flagged, are possible. This detection strategy is of medium importance and aids in identifying potential misuse of system tools for unauthorized creation of virtual smart cards.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of \"Tpmvscmgr.exe\" to create a new virtual smart card.",
      "answer": "In order to detect execution of \"Tpmvscmgr.exe\" to create a new virtual smart card, you should: monitor process creation events on Windows operating systems, specifically looking for instances where the process image file name ends with '\\tpmvscmgr.exe' and the original file name is 'TpmVscMgr.exe'. Additionally, examine the command line arguments for the presence of the word 'create'. It's important to consider all these criteria together for accurate detection. However, be aware that legitimate administrative activities may also involve these indicators, so false positives, where genuine uses are flagged, are possible. This detection strategy is of medium importance and aids in identifying potential misuse of system tools for unauthorized creation of virtual smart cards."
    }
  },
  {
    "instruction": "Can you explain how to detect: non-browser process communicating with the Notion API. This could indicate potential use of a covert C2 channel such as \"OffensiveNotion C2\"",
    "context": "",
    "output": "Certainly!\n\nIn order to detect a non-browser process communicating with the Notion API, which could indicate potential use of a covert C2 channel such as \"OffensiveNotion C2\", you should monitor network connection logs on Windows platforms for any instance where a destination hostname contains 'api.notion.com'. This check is designed to identify suspicious activities where applications other than standard browsers or the official Notion desktop application attempt to connect to the Notion API. The standard browser applications included in this monitoring are Google Chrome, Mozilla Firefox, Internet Explorer, Microsoft Edge, Opera, Safari, SeaMonkey, Vivaldi, and a few others, along with the Notion desktop application. If any process outside these specified applications attempts to communicate with 'api.notion.com', it could be indicative of an unauthorized application using the Notion API as a command and control channel. It is important to note that legitimate applications that are not listed but communicate with the Notion API might trigger false positives, although such occurrences are considered to have a low level of alert.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "non-browser process communicating with the Notion API. This could indicate potential use of a covert C2 channel such as \"OffensiveNotion C2\"",
      "answer": "In order to detect a non-browser process communicating with the Notion API, which could indicate potential use of a covert C2 channel such as \"OffensiveNotion C2\", you should monitor network connection logs on Windows platforms for any instance where a destination hostname contains 'api.notion.com'. This check is designed to identify suspicious activities where applications other than standard browsers or the official Notion desktop application attempt to connect to the Notion API. The standard browser applications included in this monitoring are Google Chrome, Mozilla Firefox, Internet Explorer, Microsoft Edge, Opera, Safari, SeaMonkey, Vivaldi, and a few others, along with the Notion desktop application. If any process outside these specified applications attempts to communicate with 'api.notion.com', it could be indicative of an unauthorized application using the Notion API as a command and control channel. It is important to note that legitimate applications that are not listed but communicate with the Notion API might trigger false positives, although such occurrences are considered to have a low level of alert."
    }
  },
  {
    "instruction": "Explain how should I detect the following: usage of the \"msedge.exe\" binary as a LOLBIN to download arbitrary file via the CLI",
    "context": "",
    "output": "In order to detect the usage of the \"msedge.exe\" binary as a LOLBIN to download arbitrary files via the CLI, you should: monitor for the creation of processes on Windows systems where the process image name ends with \"\\msedge.exe\" or the OriginalFileName is exactly \"msedge.exe\". Additionally, watch for command line executions that contain '.exe http' or 'msedge http'. Both conditions, related to the image name and the command line parameters, need to be met for a potential detection. Be aware of legitimate software that might use MsEdge to download components in the background, as these could be falsely flagged by this detection method. This monitoring is set to a medium level of concern due to the potential for legitimate use cases that could trigger false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of the \"msedge.exe\" binary as a LOLBIN to download arbitrary file via the CLI",
      "answer": "In order to detect the usage of the \"msedge.exe\" binary as a LOLBIN to download arbitrary files via the CLI, you should: monitor for the creation of processes on Windows systems where the process image name ends with \"\\msedge.exe\" or the OriginalFileName is exactly \"msedge.exe\". Additionally, watch for command line executions that contain '.exe http' or 'msedge http'. Both conditions, related to the image name and the command line parameters, need to be met for a potential detection. Be aware of legitimate software that might use MsEdge to download components in the background, as these could be falsely flagged by this detection method. This monitoring is set to a medium level of concern due to the potential for legitimate use cases that could trigger false positives."
    }
  },
  {
    "instruction": "Explain how should I detect the following: NetNTLM downgrade attack",
    "context": "",
    "output": "In order to detect NetNTLM downgrade attack, you should monitor Windows Registry events for modifications to specific keys within the system. Focus on observing Registry changes where the target object\u2019s path contains all the strings 'SYSTEM\\', 'ControlSet', and '\\Control\\Lsa', and specifically ends with '\\lmcompatibilitylevel', '\\NtlmMinClientSec', or '\\RestrictSendingNTLMTraffic'. These registry keys are crucial as they are typically targeted by attackers looking to downgrade NTLM security settings, making the system more vulnerable to attack. The detection of changes to these keys should be treated with high suspicion, although it's important to keep in mind that there could be legitimate, though rare, reasons for their modification. This monitoring process is critical in identifying and reacting to potential NetNTLM downgrade attacks, aimed at weakening system authentication protocols.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "NetNTLM downgrade attack",
      "answer": "In order to detect NetNTLM downgrade attack, you should monitor Windows Registry events for modifications to specific keys within the system. Focus on observing Registry changes where the target object\u2019s path contains all the strings 'SYSTEM\\', 'ControlSet', and '\\Control\\Lsa', and specifically ends with '\\lmcompatibilitylevel', '\\NtlmMinClientSec', or '\\RestrictSendingNTLMTraffic'. These registry keys are crucial as they are typically targeted by attackers looking to downgrade NTLM security settings, making the system more vulnerable to attack. The detection of changes to these keys should be treated with high suspicion, although it's important to keep in mind that there could be legitimate, though rare, reasons for their modification. This monitoring process is critical in identifying and reacting to potential NetNTLM downgrade attacks, aimed at weakening system authentication protocols."
    }
  },
  {
    "instruction": "How can I detect: Microsoft Cloud App Security reported when a user or IP address uses an app that is not sanctioned to perform an activity that resembles an attempt to exfiltrate information from your organization.",
    "context": "",
    "output": "In order to detect when a Microsoft Cloud App Security reported when a user or IP address uses an app that is not sanctioned to perform an activity that resembles an attempt to exfiltrate information from your organization, you should: Focus on analyzing logs generated by the threat management service within Microsoft 365 products. Specifically, pay attention to entries coming from the SecurityComplianceCenter. Look for events named 'Data exfiltration to unsanctioned apps' that have been marked as successful. This detection mechanism aims to identify actions that may involve transferring sensitive data outside the organization through applications that are not approved or recognized, indicating a potential security threat. Be aware of false positives, as the nature of these incidents might sometimes be misidentified. The severity level of this activity is considered medium, highlighting the need for timely investigation to prevent unauthorized access or loss of data.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Microsoft Cloud App Security reported when a user or IP address uses an app that is not sanctioned to perform an activity that resembles an attempt to exfiltrate information from your organization.",
      "answer": "In order to detect when a Microsoft Cloud App Security reported when a user or IP address uses an app that is not sanctioned to perform an activity that resembles an attempt to exfiltrate information from your organization, you should: Focus on analyzing logs generated by the threat management service within Microsoft 365 products. Specifically, pay attention to entries coming from the SecurityComplianceCenter. Look for events named 'Data exfiltration to unsanctioned apps' that have been marked as successful. This detection mechanism aims to identify actions that may involve transferring sensitive data outside the organization through applications that are not approved or recognized, indicating a potential security threat. Be aware of false positives, as the nature of these incidents might sometimes be misidentified. The severity level of this activity is considered medium, highlighting the need for timely investigation to prevent unauthorized access or loss of data."
    }
  },
  {
    "instruction": "Can you explain how to detect: use of Setres.exe to set the screen resolution and then potentially launch a file named \"choice\" (with any executable extension such as \".cmd\" or \".exe\") from the current execution path",
    "context": "",
    "output": "Certainly!\n\nIn order to detect the use of Setres.exe to set the screen resolution and then potentially launch a file named \"choice\" (with any executable extension such as \".cmd\" or \".exe\") from the current execution path, you should: Look for instances within the Windows operating environment where processes are created in such a manner that Setres.exe acts as a parent process, and subsequently, a process named \"choice\" (irrespective of its file extension) is initiated. This detection focuses on monitoring process creation logs to identify the sequence where Setres.exe is utilized, possibly to alter screen resolution settings as a precursor activity, followed by the execution of a \"choice\" executable, which could be indicative of unauthorized or malicious operations. Be mindful that there may be legitimate scenarios where Setres is used; therefore, not all detections should be considered malicious without additional context. The severity level of this rule is deemed medium, suggesting that while potentially indicative of suspicious activity, it may not always represent a critical security threat without further evidence of malicious intent.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "use of Setres.exe to set the screen resolution and then potentially launch a file named \"choice\" (with any executable extension such as \".cmd\" or \".exe\") from the current execution path",
      "answer": "In order to detect the use of Setres.exe to set the screen resolution and then potentially launch a file named \"choice\" (with any executable extension such as \".cmd\" or \".exe\") from the current execution path, you should: Look for instances within the Windows operating environment where processes are created in such a manner that Setres.exe acts as a parent process, and subsequently, a process named \"choice\" (irrespective of its file extension) is initiated. This detection focuses on monitoring process creation logs to identify the sequence where Setres.exe is utilized, possibly to alter screen resolution settings as a precursor activity, followed by the execution of a \"choice\" executable, which could be indicative of unauthorized or malicious operations. Be mindful that there may be legitimate scenarios where Setres is used; therefore, not all detections should be considered malicious without additional context. The severity level of this rule is deemed medium, suggesting that while potentially indicative of suspicious activity, it may not always represent a critical security threat without further evidence of malicious intent."
    }
  },
  {
    "instruction": "How can I detect: user agent and URI paths used by empire agents",
    "context": "",
    "output": "In order to detect user agent and URI paths used by empire agents, you should monitor your network's proxy logs for HTTP POST requests that originate from clients using a specific user agent string, typically associated with Internet Explorer 11 on Windows 7. Look for requests made to the following server scripts: '/admin/get.php', '/news.php', or '/login/process.php'. These indicators of compromise are notable as they may suggest an adversary is attempting to control compromised systems or exfiltrate data using well-known paths associated with malicious activity. When analyzing the logs, pay attention to the requested URI and the client's IP address, as these fields can provide further context around potentially suspicious activity. However, be aware that there might be legitimate traffic that coincides with these indicators, such as valid requests matching this exact user agent and requesting these specific server scripts, which could result in false positives. The gravity ascribed to such findings is high, indicating that detections should be treated with a significant level of concern and investigated promptly.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "user agent and URI paths used by empire agents",
      "answer": "In order to detect user agent and URI paths used by empire agents, you should monitor your network's proxy logs for HTTP POST requests that originate from clients using a specific user agent string, typically associated with Internet Explorer 11 on Windows 7. Look for requests made to the following server scripts: '/admin/get.php', '/news.php', or '/login/process.php'. These indicators of compromise are notable as they may suggest an adversary is attempting to control compromised systems or exfiltrate data using well-known paths associated with malicious activity. When analyzing the logs, pay attention to the requested URI and the client's IP address, as these fields can provide further context around potentially suspicious activity. However, be aware that there might be legitimate traffic that coincides with these indicators, such as valid requests matching this exact user agent and requesting these specific server scripts, which could result in false positives. The gravity ascribed to such findings is high, indicating that detections should be treated with a significant level of concern and investigated promptly."
    }
  },
  {
    "instruction": "How can I detect: usage of the 'Get-Clipboard' cmdlet via CLI",
    "context": "",
    "output": "In order to detect the usage of the 'Get-Clipboard' cmdlet via CLI, you should: Focus on monitoring the creation of processes within Windows environments. Specifically, look for instances where command-line executions contain the 'Get-Clipboard' instruction. This detection is crucial as it may indicate attempts to access data stored in the clipboard, which could be part of unauthorized information gathering or data exfiltration activities. The severity of such detections is considered to be of medium level, although the potential for false positives is noted to be unknown, suggesting the need for contextual analysis of each event.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of the 'Get-Clipboard' cmdlet via CLI",
      "answer": "In order to detect the usage of the 'Get-Clipboard' cmdlet via CLI, you should: Focus on monitoring the creation of processes within Windows environments. Specifically, look for instances where command-line executions contain the 'Get-Clipboard' instruction. This detection is crucial as it may indicate attempts to access data stored in the clipboard, which could be part of unauthorized information gathering or data exfiltration activities. The severity of such detections is considered to be of medium level, although the potential for false positives is noted to be unknown, suggesting the need for contextual analysis of each event."
    }
  },
  {
    "instruction": "Please help me detect the following: Identifies use of Fodhelper.exe to bypass User Account Control. Adversaries use this technique to execute privileged processes.",
    "context": "",
    "output": "Sure!\nIn order to identify use of Fodhelper.exe to bypass User Account Control, which adversaries use this technique to execute privileged processes, you should: Monitor the creation of processes on Windows systems, specifically examining if any process has been initiated by 'fodhelper.exe' as its parent process. It's vital to log and examine the computer name, username involved, and the exact command line used during the process creation. However, be mindful that there can be legitimate uses of 'fodhelper.exe' by authorized users, and such instances should not be hastily labeled as malicious without further investigation. This activity is recognized as a high-severity issue due to its relation to techniques that seek to execute operations with elevated privileges.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Identifies use of Fodhelper.exe to bypass User Account Control. Adversaries use this technique to execute privileged processes.",
      "answer": "In order to identify use of Fodhelper.exe to bypass User Account Control, which adversaries use this technique to execute privileged processes, you should: Monitor the creation of processes on Windows systems, specifically examining if any process has been initiated by 'fodhelper.exe' as its parent process. It's vital to log and examine the computer name, username involved, and the exact command line used during the process creation. However, be mindful that there can be legitimate uses of 'fodhelper.exe' by authorized users, and such instances should not be hastily labeled as malicious without further investigation. This activity is recognized as a high-severity issue due to its relation to techniques that seek to execute operations with elevated privileges."
    }
  },
  {
    "instruction": "Explain how should I detect the following: registry key used by IceID in a campaign that distributes malicious OneNote files",
    "context": "",
    "output": "In order to detect a registry key used by IceID in a campaign that distributes malicious OneNote files, you should monitor registry event logs on Windows systems for any activity indicating access to or modification of the specific registry key ending with '\\Software\\firm\\soft\\Name'. This particular pattern of registry key modification or access is commonly associated with the IceID malware, which has been known to distribute itself through malicious OneNote files. The detection of such activity should be treated with high severity due to the potential for significant damage or data loss. As false positives are currently unknown, any detection warrants immediate investigation to ensure the system's integrity and security.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "registry key used by IceID in a campaign that distributes malicious OneNote files",
      "answer": "In order to detect a registry key used by IceID in a campaign that distributes malicious OneNote files, you should monitor registry event logs on Windows systems for any activity indicating access to or modification of the specific registry key ending with '\\Software\\firm\\soft\\Name'. This particular pattern of registry key modification or access is commonly associated with the IceID malware, which has been known to distribute itself through malicious OneNote files. The detection of such activity should be treated with high severity due to the potential for significant damage or data loss. As false positives are currently unknown, any detection warrants immediate investigation to ensure the system's integrity and security."
    }
  },
  {
    "instruction": "Explain how should I detect the following: when an application is granted delegated or app role permissions for Microsoft Graph, Exchange, Sharepoint, or Azure AD",
    "context": "",
    "output": "In order to detect when an application is granted delegated or app role permissions for Microsoft Graph, Exchange, SharePoint, or Azure AD, you should: focus on monitoring the audit logs within the Azure environment. Specifically, look for events where there is an addition of delegated permissions or app role assignments to a service principal. This detection is crucial because it helps identify potentially unauthorized or malicious attempts to gain extensive access to sensitive resources within these services. However, it's important to consider that there may be legitimate reasons for these permissions to be granted, so any detections should be investigated to ascertain their validity before taking action. The significance of these activities is rated highly due to their potential impact on security and access control within the Azure ecosystem.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "when an application is granted delegated or app role permissions for Microsoft Graph, Exchange, Sharepoint, or Azure AD",
      "answer": "In order to detect when an application is granted delegated or app role permissions for Microsoft Graph, Exchange, SharePoint, or Azure AD, you should: focus on monitoring the audit logs within the Azure environment. Specifically, look for events where there is an addition of delegated permissions or app role assignments to a service principal. This detection is crucial because it helps identify potentially unauthorized or malicious attempts to gain extensive access to sensitive resources within these services. However, it's important to consider that there may be legitimate reasons for these permissions to be granted, so any detections should be investigated to ascertain their validity before taking action. The significance of these activities is rated highly due to their potential impact on security and access control within the Azure ecosystem."
    }
  },
  {
    "instruction": "How can I detect: inline Windows shell commands redirecting output via the \">\" symbol to a suspicious location",
    "context": "",
    "output": "In order to Detect inline Windows shell commands redirecting output via the \">\" symbol to a suspicious location, you should: Focus on monitoring the creation of processes on Windows systems, specifically looking for instances where the 'cmd.exe' command-line interpreter is invoked, identified either by the process image ending with '\\cmd.exe' or having an 'OriginalFileName' attribute of 'Cmd.Exe'. Additionally, scrutinize command-line inputs for patterns that include the redirection symbol '>' followed by paths to commonly abused directories such as '\\Users\\Public\\', '%APPDATA%\\', '%TEMP%\\', '%TMP%\\', '%USERPROFILE%\\', 'C:\\Temp\\', 'C:\\Users\\Public\\', and 'C:\\Windows\\Temp\\'. Also, pay attention to commands that contain a space or quotation mark before the redirection symbol '>', suggesting an attempt to redirect output. Specifically, commands that redirect to a user's local AppData folder, indicated by the presence of 'C:\\Users\\' combined with '\\AppData\\Local\\', should be investigated. However, be aware that legitimate administrative tasks or third-party scripts might occasionally use similar patterns for benign purposes, potentially leading to false positives. This analysis is critical for pinpointing malicious activities where attackers attempt to discreetly execute or log commands in sensitive or commonly overlooked file locations.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "inline Windows shell commands redirecting output via the \">\" symbol to a suspicious location",
      "answer": "In order to Detect inline Windows shell commands redirecting output via the \">\" symbol to a suspicious location, you should: Focus on monitoring the creation of processes on Windows systems, specifically looking for instances where the 'cmd.exe' command-line interpreter is invoked, identified either by the process image ending with '\\cmd.exe' or having an 'OriginalFileName' attribute of 'Cmd.Exe'. Additionally, scrutinize command-line inputs for patterns that include the redirection symbol '>' followed by paths to commonly abused directories such as '\\Users\\Public\\', '%APPDATA%\\', '%TEMP%\\', '%TMP%\\', '%USERPROFILE%\\', 'C:\\Temp\\', 'C:\\Users\\Public\\', and 'C:\\Windows\\Temp\\'. Also, pay attention to commands that contain a space or quotation mark before the redirection symbol '>', suggesting an attempt to redirect output. Specifically, commands that redirect to a user's local AppData folder, indicated by the presence of 'C:\\Users\\' combined with '\\AppData\\Local\\', should be investigated. However, be aware that legitimate administrative tasks or third-party scripts might occasionally use similar patterns for benign purposes, potentially leading to false positives. This analysis is critical for pinpointing malicious activities where attackers attempt to discreetly execute or log commands in sensitive or commonly overlooked file locations."
    }
  },
  {
    "instruction": "How can I detect: PowerShell scripts that contains reference to keystroke capturing functions",
    "context": "",
    "output": "In order to detect PowerShell scripts that contain reference to keystroke capturing functions, you should: Monitor PowerShell script logs, specifically focusing on instances where the logs reveal scripts that include text matching '[Windows.Input.Keyboard]::IsKeyDown([System.Windows.Input.Key]::'. This indicates the script may be attempting to capture keystrokes, which is a common technique used by attackers to secretly gather sensitive user input data like passwords or other confidential information. It is essential that Script Block Logging is enabled on Windows to detect such activities. Although this method of detection is reliable, be aware that there might be instances where legitimate scripts use similar functions for non-malicious purposes, which would be considered false positives. The severity of these findings is considered medium, emphasizing the importance of further investigation to confirm malicious intent.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "PowerShell scripts that contains reference to keystroke capturing functions",
      "answer": "In order to detect PowerShell scripts that contain reference to keystroke capturing functions, you should: Monitor PowerShell script logs, specifically focusing on instances where the logs reveal scripts that include text matching '[Windows.Input.Keyboard]::IsKeyDown([System.Windows.Input.Key]::'. This indicates the script may be attempting to capture keystrokes, which is a common technique used by attackers to secretly gather sensitive user input data like passwords or other confidential information. It is essential that Script Block Logging is enabled on Windows to detect such activities. Although this method of detection is reliable, be aware that there might be instances where legitimate scripts use similar functions for non-malicious purposes, which would be considered false positives. The severity of these findings is considered medium, emphasizing the importance of further investigation to confirm malicious intent."
    }
  },
  {
    "instruction": "Explain how should I detect the following: Detect creation of dump files containing the memory space of lsass.exe, which contains sensitive credentials.\nIdentifies usage of Sysinternals procdump.exe to export the memory space of lsass.exe which contains sensitive credentials.\n",
    "context": "",
    "output": "In order to detect the creation of dump files containing the memory space of lsass.exe, which contains sensitive credentials, and identify the usage of Sysinternals procdump.exe to export the memory space of lsass.exe which contains sensitive credentials, you should: Focus on monitoring the creation of processes within Windows environments. Specifically, pay attention to command lines that include both 'lsass' and '.dmp', indicating an attempt to create a memory dump file of the Local Security Authority Subsystem Service (lsass.exe), which is known to store sensitive credentials. However, it's important to exclude any events where the image path ends with '\\werfault.exe' to avoid false positives, as this is associated with Windows Error Reporting and not an attack tactic. The relevant information to be collected includes the computer's name, the user executing the command, and the exact command line used. Given the high risk associated with unauthorized access to lsass.exe memory contents, such attempts are considered to have a high level of severity with unlikely false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Detect creation of dump files containing the memory space of lsass.exe, which contains sensitive credentials.\nIdentifies usage of Sysinternals procdump.exe to export the memory space of lsass.exe which contains sensitive credentials.\n",
      "answer": "In order to detect the creation of dump files containing the memory space of lsass.exe, which contains sensitive credentials, and identify the usage of Sysinternals procdump.exe to export the memory space of lsass.exe which contains sensitive credentials, you should: Focus on monitoring the creation of processes within Windows environments. Specifically, pay attention to command lines that include both 'lsass' and '.dmp', indicating an attempt to create a memory dump file of the Local Security Authority Subsystem Service (lsass.exe), which is known to store sensitive credentials. However, it's important to exclude any events where the image path ends with '\\werfault.exe' to avoid false positives, as this is associated with Windows Error Reporting and not an attack tactic. The relevant information to be collected includes the computer's name, the user executing the command, and the exact command line used. Given the high risk associated with unauthorized access to lsass.exe memory contents, such attempts are considered to have a high level of severity with unlikely false positives."
    }
  },
  {
    "instruction": "Explain how should I detect the following: highly relevant Antivirus alert that reports ransomware",
    "context": "",
    "output": "In order to detect a highly relevant Antivirus alert that reports ransomware, you should focus on monitoring antivirus logs for specific signatures that indicate the presence of ransomware-related threats. Look for antivirus alerts containing any of the following signatures: 'Ransom', 'Cryptor', 'Crypter', 'CRYPTES', 'GandCrab', 'BlackWorm', 'Phobos', 'Destructor', 'Filecoder', 'GrandCrab', 'Krypt', 'Locker', 'Ryuk', 'Ryzerlo', 'Tescrypt', 'TeslaCrypt'. These signatures are associated with known ransomware variants that can encrypt files, demand ransom, and potentially cause significant damage to the affected systems. The detection of any of these signatures should be treated as a critical alert, as ransomware attacks can lead to data loss, financial loss, and operational disruption. It is unlikely that the detection of these signatures would represent a false positive, indicating the high confidence level in this detection approach.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "highly relevant Antivirus alert that reports ransomware",
      "answer": "In order to detect a highly relevant Antivirus alert that reports ransomware, you should focus on monitoring antivirus logs for specific signatures that indicate the presence of ransomware-related threats. Look for antivirus alerts containing any of the following signatures: 'Ransom', 'Cryptor', 'Crypter', 'CRYPTES', 'GandCrab', 'BlackWorm', 'Phobos', 'Destructor', 'Filecoder', 'GrandCrab', 'Krypt', 'Locker', 'Ryuk', 'Ryzerlo', 'Tescrypt', 'TeslaCrypt'. These signatures are associated with known ransomware variants that can encrypt files, demand ransom, and potentially cause significant damage to the affected systems. The detection of any of these signatures should be treated as a critical alert, as ransomware attacks can lead to data loss, financial loss, and operational disruption. It is unlikely that the detection of these signatures would represent a false positive, indicating the high confidence level in this detection approach."
    }
  },
  {
    "instruction": "Please help me detect the following: use of Replace.exe which can be used to replace file with another file",
    "context": "",
    "output": "Sure!\nIn order to detect the use of Replace.exe which can be used to replace file with another file, you should: Monitor process creation logs on Windows systems, focusing on instances where the 'Image' path ends with '\\replace.exe'. Also, scrutinize the command line arguments for the presence of either '/a' or '-a' as these indicate an attempt to use Replace.exe for its file replacement function. This detection strategy applies when both the specific command path and argument conditions are met simultaneously. It is set at a medium alert level due to potential unknown benign usages of Replace.exe that might not be related to malicious activities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "use of Replace.exe which can be used to replace file with another file",
      "answer": "In order to detect the use of Replace.exe which can be used to replace file with another file, you should: Monitor process creation logs on Windows systems, focusing on instances where the 'Image' path ends with '\\replace.exe'. Also, scrutinize the command line arguments for the presence of either '/a' or '-a' as these indicate an attempt to use Replace.exe for its file replacement function. This detection strategy applies when both the specific command path and argument conditions are met simultaneously. It is set at a medium alert level due to potential unknown benign usages of Replace.exe that might not be related to malicious activities."
    }
  },
  {
    "instruction": "Explain how should I detect the following: keywords from well-known PowerShell exploitation frameworks",
    "context": "",
    "output": "In order to detect keywords from well-known PowerShell exploitation frameworks, you should: Monitor PowerShell script activity on Windows systems by enabling Script Block Logging. This approach requires looking for specific keywords in the script text that are commonly associated with exploitation frameworks and tools, such as 'AdjustTokenPrivileges', 'IMAGE_NT_OPTIONAL_HDR64_MAGIC', 'Metasploit', 'Microsoft.Win32.UnsafeNativeMethods', 'Mimikatz', 'MiniDumpWriteDump', 'PAGE_EXECUTE_READ', 'ReadProcessMemory.Invoke', 'SE_PRIVILEGE_ENABLED', 'SECURITY_DELEGATION', 'TOKEN_ADJUST_PRIVILEGES', 'TOKEN_ALL_ACCESS', 'TOKEN_ASSIGN_PRIMARY', 'TOKEN_DUPLICATE', 'TOKEN_ELEVATION', 'TOKEN_IMPERSONATE', 'TOKEN_INFORMATION_CLASS', 'TOKEN_PRIVILEGES', 'TOKEN_QUERY'. These indications could suggest an attempt to exploit PowerShell for malicious activities such as privilege escalation, memory dumping, or security tokens manipulation. Given the wide range of script uses, it might be necessary to adjust the sensitivity of the detection to match the specifics of the environment to minimize false positives. This approach is aligned with medium-level security monitoring practices.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "keywords from well-known PowerShell exploitation frameworks",
      "answer": "In order to detect keywords from well-known PowerShell exploitation frameworks, you should: Monitor PowerShell script activity on Windows systems by enabling Script Block Logging. This approach requires looking for specific keywords in the script text that are commonly associated with exploitation frameworks and tools, such as 'AdjustTokenPrivileges', 'IMAGE_NT_OPTIONAL_HDR64_MAGIC', 'Metasploit', 'Microsoft.Win32.UnsafeNativeMethods', 'Mimikatz', 'MiniDumpWriteDump', 'PAGE_EXECUTE_READ', 'ReadProcessMemory.Invoke', 'SE_PRIVILEGE_ENABLED', 'SECURITY_DELEGATION', 'TOKEN_ADJUST_PRIVILEGES', 'TOKEN_ALL_ACCESS', 'TOKEN_ASSIGN_PRIMARY', 'TOKEN_DUPLICATE', 'TOKEN_ELEVATION', 'TOKEN_IMPERSONATE', 'TOKEN_INFORMATION_CLASS', 'TOKEN_PRIVILEGES', 'TOKEN_QUERY'. These indications could suggest an attempt to exploit PowerShell for malicious activities such as privilege escalation, memory dumping, or security tokens manipulation. Given the wide range of script uses, it might be necessary to adjust the sensitivity of the detection to match the specifics of the environment to minimize false positives. This approach is aligned with medium-level security monitoring practices."
    }
  },
  {
    "instruction": "Can you explain how to detect: suspicious Unicode characters in the command line, which could be a sign of obfuscation or defense evasion",
    "context": "",
    "output": "Certainly!\n\nIn order to detect suspicious Unicode characters in the command line, which could be a sign of obfuscation or defense evasion, you should: monitor Windows process creation logs for instances where command lines contain unusual Unicode characters that attackers may use as obfuscation techniques or to evade defenses. Specifically, look for command lines that include spacing modifier letters such as '\u02e3' (Unicode 0x02E3), '\u02ea' (Unicode 0x02EA), and '\u02e2' (Unicode 0x02E2), which might be used to disguise spaces. Additionally, keep an eye out for alternative forms of forward slashes and hyphens, such as '\u2215' (Unicode 0x22FF) and '\u2044' (Unicode 0x206F) for slashes, and '\u2015' (Unicode 0x2015) and '\u2014' (Unicode 0x2014) for hyphens, as these could be employed to bypass security mechanisms that scan command lines for specific patterns. Detecting these characters requires only matching one of the described patterns (using the condition \"1 of selection*\"), suggesting a high level of concern when such activity is spotted, although the potential for false positives remains undetermined.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious Unicode characters in the command line, which could be a sign of obfuscation or defense evasion",
      "answer": "In order to detect suspicious Unicode characters in the command line, which could be a sign of obfuscation or defense evasion, you should: monitor Windows process creation logs for instances where command lines contain unusual Unicode characters that attackers may use as obfuscation techniques or to evade defenses. Specifically, look for command lines that include spacing modifier letters such as '\u02e3' (Unicode 0x02E3), '\u02ea' (Unicode 0x02EA), and '\u02e2' (Unicode 0x02E2), which might be used to disguise spaces. Additionally, keep an eye out for alternative forms of forward slashes and hyphens, such as '\u2215' (Unicode 0x22FF) and '\u2044' (Unicode 0x206F) for slashes, and '\u2015' (Unicode 0x2015) and '\u2014' (Unicode 0x2014) for hyphens, as these could be employed to bypass security mechanisms that scan command lines for specific patterns. Detecting these characters requires only matching one of the described patterns (using the condition \"1 of selection*\"), suggesting a high level of concern when such activity is spotted, although the potential for false positives remains undetermined."
    }
  },
  {
    "instruction": "Can you explain how to detect: suspicious files created via the OneNote application. This could indicate a potential malicious \".one\"/\".onepkg\" file was executed as seen being used in malware activity in the wild",
    "context": "",
    "output": "Certainly!\n\nIn order to detect suspicious files created via the OneNote application, which could indicate a potential malicious \".one\"/\".onepkg\" file was executed as seen being used in malware activity in the wild, you should: Monitor file events on Windows systems, particularly focusing on the execution of OneNote application executables (onenote.exe, onenotem.exe, onenoteim.exe). Pay close attention to files created in the '\\AppData\\Local\\Temp\\OneNote\\' directory, especially those with extensions such as '.bat', '.chm', '.cmd', '.dll', '.exe', '.hta', '.htm', '.html', '.js', '.lnk', '.ps1', '.vbe', '.vbs', and '.wsf'. These file types are known to be leveraged in attacks and their creation in the context of OneNote activity is highly suspicious. The rule is designed with a high confidence level, implying that false positives should be minimal unless OneNote is regularly used for embedding and sharing different document types, in which case, occasional false positives may occur.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious files created via the OneNote application. This could indicate a potential malicious \".one\"/\".onepkg\" file was executed as seen being used in malware activity in the wild",
      "answer": "In order to detect suspicious files created via the OneNote application, which could indicate a potential malicious \".one\"/\".onepkg\" file was executed as seen being used in malware activity in the wild, you should: Monitor file events on Windows systems, particularly focusing on the execution of OneNote application executables (onenote.exe, onenotem.exe, onenoteim.exe). Pay close attention to files created in the '\\AppData\\Local\\Temp\\OneNote\\' directory, especially those with extensions such as '.bat', '.chm', '.cmd', '.dll', '.exe', '.hta', '.htm', '.html', '.js', '.lnk', '.ps1', '.vbe', '.vbs', and '.wsf'. These file types are known to be leveraged in attacks and their creation in the context of OneNote activity is highly suspicious. The rule is designed with a high confidence level, implying that false positives should be minimal unless OneNote is regularly used for embedding and sharing different document types, in which case, occasional false positives may occur."
    }
  },
  {
    "instruction": "Explain how should I detect the following: remote task creation via at.exe or API interacting with ATSVC namedpipe",
    "context": "",
    "output": "In order to detect remote task creation via at.exe or API interacting with ATSVC namedpipe, you should: Monitor SMB (Server Message Block) file activities for specific patterns that indicate misuse of the SMB service for remote task management. Specifically, pay attention to file activities within the SMB protocol that involve access to the \"IPC$\" share, which is a special share that Windows computers use for inter-process communication. Additionally, look for any interaction with a file or named pipe called \"atsvc\", as this is a common tactic used by attackers to remotely create tasks on a target machine, typically utilizing the \"at.exe\" command or directly interacting with the ATSVC named pipe through an API. As such activities could potentially represent malicious behavior, it's important to log and analyze these interactions. Note that this monitoring is configured with a medium alert level due to the potential for false positives, as the exact circumstances under which these patterns may be benign are currently unknown and therefore any detection should be investigated to confirm the nature of the activity. This detection process is crucial for defending against tactics and techniques that involve Execution through remote task creation, specifically tying back to MITRE ATT&CK framework's documentation on these types of attack methodologies.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "remote task creation via at.exe or API interacting with ATSVC namedpipe",
      "answer": "In order to detect remote task creation via at.exe or API interacting with ATSVC namedpipe, you should: Monitor SMB (Server Message Block) file activities for specific patterns that indicate misuse of the SMB service for remote task management. Specifically, pay attention to file activities within the SMB protocol that involve access to the \"IPC$\" share, which is a special share that Windows computers use for inter-process communication. Additionally, look for any interaction with a file or named pipe called \"atsvc\", as this is a common tactic used by attackers to remotely create tasks on a target machine, typically utilizing the \"at.exe\" command or directly interacting with the ATSVC named pipe through an API. As such activities could potentially represent malicious behavior, it's important to log and analyze these interactions. Note that this monitoring is configured with a medium alert level due to the potential for false positives, as the exact circumstances under which these patterns may be benign are currently unknown and therefore any detection should be investigated to confirm the nature of the activity. This detection process is crucial for defending against tactics and techniques that involve Execution through remote task creation, specifically tying back to MITRE ATT&CK framework's documentation on these types of attack methodologies."
    }
  },
  {
    "instruction": "Explain how should I detect the following: REGSVR32.exe to execute DLL hosted on remote shares",
    "context": "",
    "output": "In order to Detects REGSVR32.exe to execute DLL hosted on remote shares, you should: focus on monitoring process creations within Windows environments. Specifically, look for instances where the 'regsvr32.exe' process is initiated, which is a common Windows utility used for registering and unregistering DLLs and ActiveX controls. Pay special attention to cases where the image name of the process ends with '\\regsvr32.exe' or where the original file name matches '\\REGSVR32.EXE'. Additionally, it's important to scrutinize the command line arguments associated with these processes, especially looking for command lines that contain a double backslash '\\\\', which could indicate an attempt to execute a DLL hosted on a remote share. It is recommended to treat all such detections with a high level of suspicion, though it is acknowledged that there may be legitimate but unknown uses of these patterns within an organization, potentially requiring adjustment of alert levels from high to medium based on an organization's specific environment and usage patterns.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "REGSVR32.exe to execute DLL hosted on remote shares",
      "answer": "In order to Detects REGSVR32.exe to execute DLL hosted on remote shares, you should: focus on monitoring process creations within Windows environments. Specifically, look for instances where the 'regsvr32.exe' process is initiated, which is a common Windows utility used for registering and unregistering DLLs and ActiveX controls. Pay special attention to cases where the image name of the process ends with '\\regsvr32.exe' or where the original file name matches '\\REGSVR32.EXE'. Additionally, it's important to scrutinize the command line arguments associated with these processes, especially looking for command lines that contain a double backslash '\\\\', which could indicate an attempt to execute a DLL hosted on a remote share. It is recommended to treat all such detections with a high level of suspicion, though it is acknowledged that there may be legitimate but unknown uses of these patterns within an organization, potentially requiring adjustment of alert levels from high to medium based on an organization's specific environment and usage patterns."
    }
  },
  {
    "instruction": "How to detect: Detect usage of the \"driverquery\" utility to perform reconnaissance on installed drivers",
    "context": "",
    "output": "In order to detect usage of the \"driverquery\" utility to perform reconnaissance on installed drivers, you should: Monitor process creation logs on Windows systems for instances where the \"driverquery.exe\" tool or its variant \"drvqry.exe\" (as denoted by the original file name) is executed. Specifically, watch for scenarios where these utilities are launched by parent processes commonly used for script execution or command-line activities, such as \"cmd.exe\", \"powershell.exe\", \"pwsh.exe\", \"wscript.exe\", \"cscript.exe\", or \"mshta.exe\". Additionally, scrutinize situations where the parent process's image path includes directories typically associated with suspicious activities, like \"\\AppData\\Local\\\", \"\\Users\\Public\\\", or \"\\Windows\\Temp\\\". All these indicators combined suggest an attempt to stealthily gather information about drivers installed on the system, which could be indicative of reconnaissance activity by an adversary. Be aware, however, that the determination of such activity as malicious may result in unknown false positives, and thus, it demands a high level of alertness.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Detect usage of the \"driverquery\" utility to perform reconnaissance on installed drivers",
      "answer": "In order to detect usage of the \"driverquery\" utility to perform reconnaissance on installed drivers, you should: Monitor process creation logs on Windows systems for instances where the \"driverquery.exe\" tool or its variant \"drvqry.exe\" (as denoted by the original file name) is executed. Specifically, watch for scenarios where these utilities are launched by parent processes commonly used for script execution or command-line activities, such as \"cmd.exe\", \"powershell.exe\", \"pwsh.exe\", \"wscript.exe\", \"cscript.exe\", or \"mshta.exe\". Additionally, scrutinize situations where the parent process's image path includes directories typically associated with suspicious activities, like \"\\AppData\\Local\\\", \"\\Users\\Public\\\", or \"\\Windows\\Temp\\\". All these indicators combined suggest an attempt to stealthily gather information about drivers installed on the system, which could be indicative of reconnaissance activity by an adversary. Be aware, however, that the determination of such activity as malicious may result in unknown false positives, and thus, it demands a high level of alertness."
    }
  },
  {
    "instruction": "Please help me detect the following: Identifies user login with multifactor authentication failures, which might be an indication an attacker has the password for the account but can't pass the MFA challenge.",
    "context": "",
    "output": "Sure!\nIn order to identify user login with multifactor authentication failures, which might be an indication an attacker has the password for the account but can't pass the MFA challenge, you should: monitor Azure signin logs for events that suggest failed attempts at passing multifactor authentication (MFA) challenges. Specifically, pay attention to logs that report with a ResultType of 50074, indicating a requirement for strong authentication, or ResultType of 500121, signaling that an authentication attempt has failed during a strong authentication request. These findings are pertinent as they might highlight instances where an unauthorized user has obtained the password to an account but is unable to bypass the additional security layer provided by MFA. It's important to investigate such events to prevent potential breaches. Keep in mind that some detected events may not necessarily indicate malicious activity (as some false positives are unknown), so thorough examination is advised. This monitoring process is guided by medium-level urgency, underscoring the significant risk that unsuccessful MFA attempts can pose.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Identifies user login with multifactor authentication failures, which might be an indication an attacker has the password for the account but can't pass the MFA challenge.",
      "answer": "In order to identify user login with multifactor authentication failures, which might be an indication an attacker has the password for the account but can't pass the MFA challenge, you should: monitor Azure signin logs for events that suggest failed attempts at passing multifactor authentication (MFA) challenges. Specifically, pay attention to logs that report with a ResultType of 50074, indicating a requirement for strong authentication, or ResultType of 500121, signaling that an authentication attempt has failed during a strong authentication request. These findings are pertinent as they might highlight instances where an unauthorized user has obtained the password to an account but is unable to bypass the additional security layer provided by MFA. It's important to investigate such events to prevent potential breaches. Keep in mind that some detected events may not necessarily indicate malicious activity (as some false positives are unknown), so thorough examination is advised. This monitoring process is guided by medium-level urgency, underscoring the significant risk that unsuccessful MFA attempts can pose."
    }
  },
  {
    "instruction": "Explain how should I detect the following: creation of \"msiexec.exe\" in the \"bin\" directory of the ManageEngine SupportCenter Plus (Related to CVE-2021-44077) and public POC available (See references section)",
    "context": "",
    "output": "In order to detect the creation of \"msiexec.exe\" in the \"bin\" directory of the ManageEngine SupportCenter Plus (Related to CVE-2021-44077) and public POC available (See references section), you should: Monitor file event logs on Windows systems for events where the target file name ends with '\\ManageEngine\\SupportCenterPlus\\bin\\msiexec.exe'. Such an event likely indicates the exploitation of a known vulnerability, and given that there are not many legitimate reasons for this file to be created in that specific location, false positives are considered unlikely. The severity of this rule is set to high due to the potential impact of exploiting CVE-2021-44077.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "creation of \"msiexec.exe\" in the \"bin\" directory of the ManageEngine SupportCenter Plus (Related to CVE-2021-44077) and public POC available (See references section)",
      "answer": "In order to detect the creation of \"msiexec.exe\" in the \"bin\" directory of the ManageEngine SupportCenter Plus (Related to CVE-2021-44077) and public POC available (See references section), you should: Monitor file event logs on Windows systems for events where the target file name ends with '\\ManageEngine\\SupportCenterPlus\\bin\\msiexec.exe'. Such an event likely indicates the exploitation of a known vulnerability, and given that there are not many legitimate reasons for this file to be created in that specific location, false positives are considered unlikely. The severity of this rule is set to high due to the potential impact of exploiting CVE-2021-44077."
    }
  },
  {
    "instruction": "Can you explain how to detect: new owner is added to an application. This gives that account privileges to make modifications and configuration changes to the application.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect when a new owner is added to an application, which gives that account privileges to make modifications and configuration changes to the application, you should monitor the Azure audit logs for events where the message indicates an owner has been added to an application. This involves looking for logs with the property message containing the phrase \"Add owner to application.\" It is important to consider that legitimate management activities may trigger this detection, such as when a new application owner is added by an administrator. This scenario is considered a medium-level threat because adding a new owner can potentially lead to unauthorized changes or access if done maliciously.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "new owner is added to an application. This gives that account privileges to make modifications and configuration changes to the application.",
      "answer": "In order to detect when a new owner is added to an application, which gives that account privileges to make modifications and configuration changes to the application, you should monitor the Azure audit logs for events where the message indicates an owner has been added to an application. This involves looking for logs with the property message containing the phrase \"Add owner to application.\" It is important to consider that legitimate management activities may trigger this detection, such as when a new application owner is added by an administrator. This scenario is considered a medium-level threat because adding a new owner can potentially lead to unauthorized changes or access if done maliciously."
    }
  },
  {
    "instruction": "How can I detect: suspicious execution of a Microsoft HTML Help (HH.exe)",
    "context": "",
    "output": "In order to detect a suspicious execution of a Microsoft HTML Help (HH.exe), you should monitor the creation of processes on Windows systems looking specifically for the execution or starting of the Microsoft HTML Help executable, recognized either by its original file name 'HH.exe', or by its image path ending in '\\hh.exe'. Further attention should be paid to the command line paths involved in the execution, especially if they contain references to common temporary and download directories like '.application', '\\AppData\\Local\\Temp\\', '\\Content.Outlook\\', '\\Downloads\\', '\\Users\\Public\\', and '\\Windows\\Temp\\'. These specific paths are often utilized by attackers to execute malicious scripts or programs in seemingly benign or temporary locations on a victim's device, making it vital to scrutinize any process involving them closely. However, it's important to note that there might be legitimate cases leading to false positives, although they are not specifically known or predictable. The seriousness of such detections is regarded as high, highlighting the need for immediate investigation upon alert.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious execution of a Microsoft HTML Help (HH.exe)",
      "answer": "In order to detect a suspicious execution of a Microsoft HTML Help (HH.exe), you should monitor the creation of processes on Windows systems looking specifically for the execution or starting of the Microsoft HTML Help executable, recognized either by its original file name 'HH.exe', or by its image path ending in '\\hh.exe'. Further attention should be paid to the command line paths involved in the execution, especially if they contain references to common temporary and download directories like '.application', '\\AppData\\Local\\Temp\\', '\\Content.Outlook\\', '\\Downloads\\', '\\Users\\Public\\', and '\\Windows\\Temp\\'. These specific paths are often utilized by attackers to execute malicious scripts or programs in seemingly benign or temporary locations on a victim's device, making it vital to scrutinize any process involving them closely. However, it's important to note that there might be legitimate cases leading to false positives, although they are not specifically known or predictable. The seriousness of such detections is regarded as high, highlighting the need for immediate investigation upon alert."
    }
  },
  {
    "instruction": "How to detect: Detection of child processes spawned with SYSTEM privileges by parents with non-SYSTEM privileges and Medium integrity level",
    "context": "",
    "output": "In order to detect child processes spawned with SYSTEM privileges by parents with non-SYSTEM privileges and Medium integrity level, you should: Monitor process creation events on Windows systems, particularly focusing on instances where a new process is initiated with SYSTEM level privileges (`IntegrityLevel: System`) by a parent process that operates under Medium integrity level (`ParentIntegrityLevel: Medium`) and is executed by the \"NT AUTHORITY\\SYSTEM\" user. This scenario is indicative of potential elevation of privilege attempts or malicious activity where an attacker might be trying to execute code with higher privileges than initially granted. It is essential to observe these events as they unfold within the context of Windows environments, specifically those that are enriched with Sysmon for detailed monitoring. Be aware that this kind of detection may bring up false positives, the nature of which could be unknown due to the varied legitimate uses of such privilege escalations under normal circumstances. However, such activities are classified at a high level of severity due to their potential impact and the tactics they represent, including privilege escalation and potentially others depending on the context of the attack.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Detection of child processes spawned with SYSTEM privileges by parents with non-SYSTEM privileges and Medium integrity level",
      "answer": "In order to detect child processes spawned with SYSTEM privileges by parents with non-SYSTEM privileges and Medium integrity level, you should: Monitor process creation events on Windows systems, particularly focusing on instances where a new process is initiated with SYSTEM level privileges (`IntegrityLevel: System`) by a parent process that operates under Medium integrity level (`ParentIntegrityLevel: Medium`) and is executed by the \"NT AUTHORITY\\SYSTEM\" user. This scenario is indicative of potential elevation of privilege attempts or malicious activity where an attacker might be trying to execute code with higher privileges than initially granted. It is essential to observe these events as they unfold within the context of Windows environments, specifically those that are enriched with Sysmon for detailed monitoring. Be aware that this kind of detection may bring up false positives, the nature of which could be unknown due to the varied legitimate uses of such privilege escalations under normal circumstances. However, such activities are classified at a high level of severity due to their potential impact and the tactics they represent, including privilege escalation and potentially others depending on the context of the attack."
    }
  },
  {
    "instruction": "Please help me detect the following: indicators of APT 29 (Cozy Bear) phishing-campaign as reported by mandiant",
    "context": "",
    "output": "Sure!\nIn order to detect indicators of APT 29 (Cozy Bear) phishing-campaign as reported by mandiant, you should focus on monitoring process creation logs within Windows environments. Specifically, look for processes initiated with command lines containing: \n\n1. '-noni -ep bypass $' which is typically employed to bypass execution policies in PowerShell, indicating a potential attempt to execute unauthorized scripts or commands.\n2. Both 'cyzfc.dat,' and 'PointFunctionCall' within the same command line, suggesting the use of specific obfuscated files or functions commonly associated with APT 29 activities.\n\nThese indicators are critical to identify as they directly align with tactics and techniques associated with sophisticated threat actors like APT 29. Given the nature of these indicators and the context of their use in documented campaigns by APT 29, false positives are considered unlikely. Always prioritize the analysis and investigation of alerts generated based on these conditions due to the severe threat level associated.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "indicators of APT 29 (Cozy Bear) phishing-campaign as reported by mandiant",
      "answer": "In order to detect indicators of APT 29 (Cozy Bear) phishing-campaign as reported by mandiant, you should focus on monitoring process creation logs within Windows environments. Specifically, look for processes initiated with command lines containing: \n\n1. '-noni -ep bypass $' which is typically employed to bypass execution policies in PowerShell, indicating a potential attempt to execute unauthorized scripts or commands.\n2. Both 'cyzfc.dat,' and 'PointFunctionCall' within the same command line, suggesting the use of specific obfuscated files or functions commonly associated with APT 29 activities.\n\nThese indicators are critical to identify as they directly align with tactics and techniques associated with sophisticated threat actors like APT 29. Given the nature of these indicators and the context of their use in documented campaigns by APT 29, false positives are considered unlikely. Always prioritize the analysis and investigation of alerts generated based on these conditions due to the severe threat level associated."
    }
  },
  {
    "instruction": "Explain how should I detect the following: wceaux.dll access while WCE pass-the-hash remote command execution on source host",
    "context": "",
    "output": "In order to detect wceaux.dll access while WCE pass-the-hash remote command execution on source host, you should: Monitor Windows security event logs for occurrences of event IDs 4656, 4658, 4660, and 4663 that are specifically related to attempts to access an object named wceaux.dll, which may indicate an attempt to use a pass-the-hash technique for remote command execution on the source host. This detection is critical due to the potential severity of pass-the-hash attacks, which can allow unauthorized access to systems by exploiting hashed credentials.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "wceaux.dll access while WCE pass-the-hash remote command execution on source host",
      "answer": "In order to detect wceaux.dll access while WCE pass-the-hash remote command execution on source host, you should: Monitor Windows security event logs for occurrences of event IDs 4656, 4658, 4660, and 4663 that are specifically related to attempts to access an object named wceaux.dll, which may indicate an attempt to use a pass-the-hash technique for remote command execution on the source host. This detection is critical due to the potential severity of pass-the-hash attacks, which can allow unauthorized access to systems by exploiting hashed credentials."
    }
  },
  {
    "instruction": "How can I detect: suspicious failed logins with different user accounts from a single source system",
    "context": "",
    "output": "In order to detect suspicious failed logins with different user accounts from a single source system, you should monitor Windows security event logs for specific event IDs that indicate failed login attempts. Focus on Event IDs 529 and 4625, which are critical for identifying unsuccessful login efforts. It is important to track these events when any user name (indicated by '*') attempts to log in from any workstation (also indicated by '*'). To effectively identify suspicious activity, analyze the logs to find instances where more than three failed login attempts occur with different user accounts from the same workstation. This approach helps in flagging potentially malicious attempts to gain unauthorized access. However, be mindful that certain environments such as terminal servers, jump servers, Citrix server farms, or workstations with frequently changing users may generate false positives due to the nature of their legitimate multi-user access patterns. This detection mechanism is of medium severity level and aids in identifying threat actors employing tactics that align with Credential Access through Brute Force methods, by observing and responding to anomalous login patterns.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious failed logins with different user accounts from a single source system",
      "answer": "In order to detect suspicious failed logins with different user accounts from a single source system, you should monitor Windows security event logs for specific event IDs that indicate failed login attempts. Focus on Event IDs 529 and 4625, which are critical for identifying unsuccessful login efforts. It is important to track these events when any user name (indicated by '*') attempts to log in from any workstation (also indicated by '*'). To effectively identify suspicious activity, analyze the logs to find instances where more than three failed login attempts occur with different user accounts from the same workstation. This approach helps in flagging potentially malicious attempts to gain unauthorized access. However, be mindful that certain environments such as terminal servers, jump servers, Citrix server farms, or workstations with frequently changing users may generate false positives due to the nature of their legitimate multi-user access patterns. This detection mechanism is of medium severity level and aids in identifying threat actors employing tactics that align with Credential Access through Brute Force methods, by observing and responding to anomalous login patterns."
    }
  },
  {
    "instruction": "Explain how should I detect the following: Adversaries may execute their own malicious payloads by hijacking the Registry entries used by services.\nAdversaries may use flaws in the permissions for registry to redirect from the originally specified executable to one that they control, in order to launch their own code at Service start.\nWindows stores local service configuration information in the Registry under HKLM\\SYSTEM\\CurrentControlSet\\Services\n",
    "context": "",
    "output": "In order to detect adversaries executing their own malicious payloads by hijacking the Registry entries used by services, you should monitor the process creation logs on Windows systems. Focus on tracking the usage of the \"reg.exe\" application, specifically when it is involved in adding or modifying the ImagePath for services under \"SYSTEM\\CurrentControlSet\\Services\\\" in the registry. Detection criteria include command lines that end with \"\\reg.exe\" and contain the strings \"add \", \"SYSTEM\\CurrentControlSet\\Services\\\", and \" ImagePath \", along with optional flags \" /d \" or \" -d \" which are used to specify the data for a registry value. This detection helps identify attempts to use Registry modifications for redirecting service executables to malicious files, leveraging potential flaws in registry permissions. Be aware that some activity might generate false positives due to the dynamic nature of registry operations and should be investigated accordingly. The severity level for this detection strategy is considered medium, highlighting its importance in identifying service hijacking attempts as part of broader tactics such as Persistence, Privilege Escalation, and Execution, but also recognizing that not all modifications may be malicious in nature.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Adversaries may execute their own malicious payloads by hijacking the Registry entries used by services.\nAdversaries may use flaws in the permissions for registry to redirect from the originally specified executable to one that they control, in order to launch their own code at Service start.\nWindows stores local service configuration information in the Registry under HKLM\\SYSTEM\\CurrentControlSet\\Services\n",
      "answer": "In order to detect adversaries executing their own malicious payloads by hijacking the Registry entries used by services, you should monitor the process creation logs on Windows systems. Focus on tracking the usage of the \"reg.exe\" application, specifically when it is involved in adding or modifying the ImagePath for services under \"SYSTEM\\CurrentControlSet\\Services\\\" in the registry. Detection criteria include command lines that end with \"\\reg.exe\" and contain the strings \"add \", \"SYSTEM\\CurrentControlSet\\Services\\\", and \" ImagePath \", along with optional flags \" /d \" or \" -d \" which are used to specify the data for a registry value. This detection helps identify attempts to use Registry modifications for redirecting service executables to malicious files, leveraging potential flaws in registry permissions. Be aware that some activity might generate false positives due to the dynamic nature of registry operations and should be investigated accordingly. The severity level for this detection strategy is considered medium, highlighting its importance in identifying service hijacking attempts as part of broader tactics such as Persistence, Privilege Escalation, and Execution, but also recognizing that not all modifications may be malicious in nature."
    }
  },
  {
    "instruction": "Can you explain how to detect: Execution of well known tools for data exfiltration and tunneling",
    "context": "",
    "output": "Certainly!\n\nIn order to execute well-known tools for data exfiltration and tunneling, you should: monitor the creation of processes on Windows systems for instances where the names of the executable files end with '\\plink.exe', '\\socat.exe', '\\stunnel.exe', or '\\httptunnel.exe'. These executables are commonly associated with tunneling and data exfiltration activities, potentially indicating a security breach or malicious activity within the network. Keep in mind that there could be legitimate use cases where administrators are utilizing these tools, which are flagged as false positives. This monitoring activity is of medium importance due to its potential for detecting unauthorized data movement or covert communication channels established by an adversary leveraging these tools.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Execution of well known tools for data exfiltration and tunneling",
      "answer": "In order to execute well-known tools for data exfiltration and tunneling, you should: monitor the creation of processes on Windows systems for instances where the names of the executable files end with '\\plink.exe', '\\socat.exe', '\\stunnel.exe', or '\\httptunnel.exe'. These executables are commonly associated with tunneling and data exfiltration activities, potentially indicating a security breach or malicious activity within the network. Keep in mind that there could be legitimate use cases where administrators are utilizing these tools, which are flagged as false positives. This monitoring activity is of medium importance due to its potential for detecting unauthorized data movement or covert communication channels established by an adversary leveraging these tools."
    }
  },
  {
    "instruction": "Please help me detect the following: Turn off logging locally or remote",
    "context": "",
    "output": "Sure!\nIn order to turn off logging locally or remote, you should monitor logs sourced from Cisco products, specifically those coming from AAA (Authentication, Authorization, and Accounting) services. Look for specific keywords within these logs such as 'no logging' or 'no aaa new-model'. These keywords indicate attempts to disable logging mechanisms either locally or remotely, which could signify a potential security breach or an attempt to evade detection by hiding malicious activities. During the monitoring process, focus on capturing details like the source of the command, the set of commands executed, the user who executed the command, their privilege level, and the remote address involved in the session. However, be aware that there can be instances where these indications might not signify a malicious activity and are considered unknown false positives. This monitoring process is essential for identifying activities related to disabling security measures and is tagged with tactics and techniques without specifically naming them.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Turn off logging locally or remote",
      "answer": "In order to turn off logging locally or remote, you should monitor logs sourced from Cisco products, specifically those coming from AAA (Authentication, Authorization, and Accounting) services. Look for specific keywords within these logs such as 'no logging' or 'no aaa new-model'. These keywords indicate attempts to disable logging mechanisms either locally or remotely, which could signify a potential security breach or an attempt to evade detection by hiding malicious activities. During the monitoring process, focus on capturing details like the source of the command, the set of commands executed, the user who executed the command, their privilege level, and the remote address involved in the session. However, be aware that there can be instances where these indications might not signify a malicious activity and are considered unknown false positives. This monitoring process is essential for identifying activities related to disabling security measures and is tagged with tactics and techniques without specifically naming them."
    }
  },
  {
    "instruction": "Explain how should I detect the following: usage of the PsLogList utility to dump event log in order to extract admin accounts and perform account discovery or delete events logs",
    "context": "",
    "output": "In order to detect usage of the PsLogList utility to dump event log in order to extract admin accounts and perform account discovery or delete events logs, you should: Monitor for the creation of processes related to the PsLogList utility on Windows operating systems. Specifically, look for processes where the original file name or the image path ends with 'psloglist.exe' or 'psloglist64.exe'. Additionally, check for command line arguments that indicate the utility is being used to access 'security', 'application', or 'system' event logs. Pay special attention to command line switches such as '-d', '/d' (for specifying the number of recent events to display), '-x', '/x' (for XML output), '-s', '/s' (for displaying event log records in reverse chronological order), '-c', '/c' (for clearing the event log after displaying), and '-g', '/g' (for exporting an event log as an EVT file). These indicators can suggest malicious use of PsLogList for the purpose of extracting information on admin accounts or tampering with log files to obscure activities. It is important to investigate such events while also considering potential false positives, including other tools that utilize similar command line switches or legitimate administrative use of PsLogList.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of the PsLogList utility to dump event log in order to extract admin accounts and perform account discovery or delete events logs",
      "answer": "In order to detect usage of the PsLogList utility to dump event log in order to extract admin accounts and perform account discovery or delete events logs, you should: Monitor for the creation of processes related to the PsLogList utility on Windows operating systems. Specifically, look for processes where the original file name or the image path ends with 'psloglist.exe' or 'psloglist64.exe'. Additionally, check for command line arguments that indicate the utility is being used to access 'security', 'application', or 'system' event logs. Pay special attention to command line switches such as '-d', '/d' (for specifying the number of recent events to display), '-x', '/x' (for XML output), '-s', '/s' (for displaying event log records in reverse chronological order), '-c', '/c' (for clearing the event log after displaying), and '-g', '/g' (for exporting an event log as an EVT file). These indicators can suggest malicious use of PsLogList for the purpose of extracting information on admin accounts or tampering with log files to obscure activities. It is important to investigate such events while also considering potential false positives, including other tools that utilize similar command line switches or legitimate administrative use of PsLogList."
    }
  },
  {
    "instruction": "How to detect: suspicious interactive bash as a parent to rather uncommon child processes",
    "context": "",
    "output": "In order to detect suspicious interactive bash as a parent to rather uncommon child processes, you should: Monitor Linux systems for the creation of processes where the interactive bash (`bash -i`) is the parent process. Pay special attention to child processes that either contain command-line arguments such as '-c import', 'base64', or 'pty.spawn', or are executables like 'whoami', 'iptables', '/ncat', '/nc', or '/netcat'. These patterns may indicate malicious activity. Nevertheless, be aware that there could be legitimate software that uses these command patterns or executable names, thus it's vital to differentiate between benign and suspicious activities with a medium level of caution.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious interactive bash as a parent to rather uncommon child processes",
      "answer": "In order to detect suspicious interactive bash as a parent to rather uncommon child processes, you should: Monitor Linux systems for the creation of processes where the interactive bash (`bash -i`) is the parent process. Pay special attention to child processes that either contain command-line arguments such as '-c import', 'base64', or 'pty.spawn', or are executables like 'whoami', 'iptables', '/ncat', '/nc', or '/netcat'. These patterns may indicate malicious activity. Nevertheless, be aware that there could be legitimate software that uses these command patterns or executable names, thus it's vital to differentiate between benign and suspicious activities with a medium level of caution."
    }
  },
  {
    "instruction": "How to detect: presence of a registry key created during Azorult execution",
    "context": "",
    "output": "In order to detect the presence of a registry key created during Azorult execution, you should: focus on monitoring Windows registry events specifically. Look for events with ID 12 or 13, which are indicative of registry key creation, modification, or deletion. Specifically, pay attention to changes made to registry keys that contain 'SYSTEM\\' in their path or specifically end with '\\services\\localNETService'. This specific path is crucial as it aligns with tactics commonly utilized by the Azorult malware, which is known to manipulate such registry keys to establish persistence or modify system configurations maliciously. It's important to log and scrutinize the image path, the targeted registry object, and any pertinent details surrounding the registry modification. While false positives can occur, the critical nature of these indicators demands attentive analysis due to the association with severe threats like Azorult.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "presence of a registry key created during Azorult execution",
      "answer": "In order to detect the presence of a registry key created during Azorult execution, you should: focus on monitoring Windows registry events specifically. Look for events with ID 12 or 13, which are indicative of registry key creation, modification, or deletion. Specifically, pay attention to changes made to registry keys that contain 'SYSTEM\\' in their path or specifically end with '\\services\\localNETService'. This specific path is crucial as it aligns with tactics commonly utilized by the Azorult malware, which is known to manipulate such registry keys to establish persistence or modify system configurations maliciously. It's important to log and scrutinize the image path, the targeted registry object, and any pertinent details surrounding the registry modification. While false positives can occur, the critical nature of these indicators demands attentive analysis due to the association with severe threats like Azorult."
    }
  },
  {
    "instruction": "How to detect: svchost hosting RDP termsvcs communicating with the loopback address and on TCP port 3389",
    "context": "",
    "output": "In order to detect svchost hosting RDP termsvcs communicating with the loopback address and on TCP port 3389, you should monitor network connections specifically on Windows systems. Look out for processes where the executable name ends with '\\svchost.exe' that have initiated a connection. Moreover, these connections should be specifically using SourcePort 3389, which is typically used for Remote Desktop Protocol (RDP) services. Additionally, pay attention to connections where the destination IP address starts with '127.' or is '::1', as these represent loopback addresses used to communicate within the host. This type of behavior could signal that the svchost process, which is a legitimate Windows service host, is being used to host RDP services in a potentially unauthorized or malicious manner, especially when communicating over the loopback address. Note that while detections based on these criteria are considered to hold a high level of importance, there might be unknown cases causing false positives. Therefore, thorough investigation is recommended upon detection to determine the context and legitimacy of such actions. This monitoring strategy leans on tactics and techniques associated with malicious use of valid accounts, remote services, and potentially persistence mechanisms without directly referencing the MITRE ATT&CK taxonomy.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "svchost hosting RDP termsvcs communicating with the loopback address and on TCP port 3389",
      "answer": "In order to detect svchost hosting RDP termsvcs communicating with the loopback address and on TCP port 3389, you should monitor network connections specifically on Windows systems. Look out for processes where the executable name ends with '\\svchost.exe' that have initiated a connection. Moreover, these connections should be specifically using SourcePort 3389, which is typically used for Remote Desktop Protocol (RDP) services. Additionally, pay attention to connections where the destination IP address starts with '127.' or is '::1', as these represent loopback addresses used to communicate within the host. This type of behavior could signal that the svchost process, which is a legitimate Windows service host, is being used to host RDP services in a potentially unauthorized or malicious manner, especially when communicating over the loopback address. Note that while detections based on these criteria are considered to hold a high level of importance, there might be unknown cases causing false positives. Therefore, thorough investigation is recommended upon detection to determine the context and legitimacy of such actions. This monitoring strategy leans on tactics and techniques associated with malicious use of valid accounts, remote services, and potentially persistence mechanisms without directly referencing the MITRE ATT&CK taxonomy."
    }
  },
  {
    "instruction": "How to detect: conditional access changes where non approved actor removed CA Policy.",
    "context": "",
    "output": "In order to monitor and alert on conditional access changes where a non-approved actor removed a Conditional Access (CA) Policy, you should focus on monitoring Azure audit logs. Specifically, look for log entries where the message includes \"Delete conditional access policy.\" This indicates that a CA policy has been deleted, which could be a sign of unauthorized or malicious activity if done by an unapproved actor. It is important to consider potential false positives such as misconfigured role permissions or legitimate changes that may appear suspicious. Verify the context of the deletion by examining the user identity, user agent, and hostname involved in the change to ensure they are authorized to make such modifications in your environment. This detection carries a medium level of urgency, highlighting the need for prompt review and action if such activities are detected.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "conditional access changes where non approved actor removed CA Policy.",
      "answer": "In order to monitor and alert on conditional access changes where a non-approved actor removed a Conditional Access (CA) Policy, you should focus on monitoring Azure audit logs. Specifically, look for log entries where the message includes \"Delete conditional access policy.\" This indicates that a CA policy has been deleted, which could be a sign of unauthorized or malicious activity if done by an unapproved actor. It is important to consider potential false positives such as misconfigured role permissions or legitimate changes that may appear suspicious. Verify the context of the deletion by examining the user identity, user agent, and hostname involved in the change to ensure they are authorized to make such modifications in your environment. This detection carries a medium level of urgency, highlighting the need for prompt review and action if such activities are detected."
    }
  },
  {
    "instruction": "Can you explain how to detect: Alert for the addition of a new federated domain.",
    "context": "",
    "output": "Certainly!\n\nIn order to alert for the addition of a new federated domain, you should monitor Microsoft 365 or Exchange service logs for the event that corresponds to the successful execution of the 'Add-FederatedDomain' command. This action is identified through logs that have 'Exchange' as their event source and contain an event name 'Add-FederatedDomain' with a status of successful completion. It's important to pay close attention to such events because, while adding a new federated domain is not intrinsically malicious, it could signal an attempt at federated credential abuse or the establishment of a backdoor via federated identities with other cloud providers. These incidents carry a medium level of urgency due to their potential security implications but are also accompanied by a note of caution regarding false positives, recognizing that legitimate administrative actions can also trigger these alerts.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Alert for the addition of a new federated domain.",
      "answer": "In order to alert for the addition of a new federated domain, you should monitor Microsoft 365 or Exchange service logs for the event that corresponds to the successful execution of the 'Add-FederatedDomain' command. This action is identified through logs that have 'Exchange' as their event source and contain an event name 'Add-FederatedDomain' with a status of successful completion. It's important to pay close attention to such events because, while adding a new federated domain is not intrinsically malicious, it could signal an attempt at federated credential abuse or the establishment of a backdoor via federated identities with other cloud providers. These incidents carry a medium level of urgency due to their potential security implications but are also accompanied by a note of caution regarding false positives, recognizing that legitimate administrative actions can also trigger these alerts."
    }
  },
  {
    "instruction": "Please help me detect the following: execution of the \"userdel\" binary. Which is used to delete a user account and related files. This is sometimes abused by threat actors in order to cover their tracks",
    "context": "",
    "output": "Sure!\nIn order to detect the execution of the \"userdel\" binary, which is used to delete a user account and related files and is sometimes abused by threat actors in order to cover their tracks, you should: Monitor Linux process creation logs for activities where the process image name ends with '/userdel'. This action points toward the deletion of user accounts, a method that might be utilized by attackers to remove traces of their presence or malicious activities within a system. Be aware that there could be legitimate reasons for an administrator to use this command, so it's classified with a medium level of risk. Identifying unauthorized or suspicious usage of the 'userdel' command among system logs is crucial for maintaining security and integrity within Linux environments.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of the \"userdel\" binary. Which is used to delete a user account and related files. This is sometimes abused by threat actors in order to cover their tracks",
      "answer": "In order to detect the execution of the \"userdel\" binary, which is used to delete a user account and related files and is sometimes abused by threat actors in order to cover their tracks, you should: Monitor Linux process creation logs for activities where the process image name ends with '/userdel'. This action points toward the deletion of user accounts, a method that might be utilized by attackers to remove traces of their presence or malicious activities within a system. Be aware that there could be legitimate reasons for an administrator to use this command, so it's classified with a medium level of risk. Identifying unauthorized or suspicious usage of the 'userdel' command among system logs is crucial for maintaining security and integrity within Linux environments."
    }
  },
  {
    "instruction": "How can I detect: actions caused by the RedMimicry Winnti playbook a automated breach emulations utility",
    "context": "",
    "output": "In order to detect actions caused by the RedMimicry Winnti playbook, a automated breach emulations utility, you should focus on monitoring process creations within Windows environments. Specifically, pay attention to processes that are started using 'rundll32.exe' or 'cmd.exe'. These executable paths are commonly leveraged by malicious actors for executing arbitrary or malicious code. Additionally, scrutinize the command line for instances that include the strings 'gthread-3.6.dll', '\\Windows\\Temp\\tmp.bat', or 'sigcmm-2.4.dll'. These indicators suggest unusual or potentially harmful activity, likely associated with the execution mechanisms employed by threat actors following the RedMimicry Winnti tactics. Given the elevated risk and the high chance of malicious intent when such patterns are detected, it's crucial to promptly investigate these occurrences to mitigate potential security breaches. This proactive monitoring and detection approach is aimed at catching and addressing suspicious activities early on, aligning with best practices in cybersecurity defense strategies.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "actions caused by the RedMimicry Winnti playbook a automated breach emulations utility",
      "answer": "In order to detect actions caused by the RedMimicry Winnti playbook, a automated breach emulations utility, you should focus on monitoring process creations within Windows environments. Specifically, pay attention to processes that are started using 'rundll32.exe' or 'cmd.exe'. These executable paths are commonly leveraged by malicious actors for executing arbitrary or malicious code. Additionally, scrutinize the command line for instances that include the strings 'gthread-3.6.dll', '\\Windows\\Temp\\tmp.bat', or 'sigcmm-2.4.dll'. These indicators suggest unusual or potentially harmful activity, likely associated with the execution mechanisms employed by threat actors following the RedMimicry Winnti tactics. Given the elevated risk and the high chance of malicious intent when such patterns are detected, it's crucial to promptly investigate these occurrences to mitigate potential security breaches. This proactive monitoring and detection approach is aimed at catching and addressing suspicious activities early on, aligning with best practices in cybersecurity defense strategies."
    }
  },
  {
    "instruction": "How to detect: execution of rundll32 where the DLL being called is stored in an Alternate Data Stream (ADS).",
    "context": "",
    "output": "In order to detect execution of rundll32 where the DLL being called is stored in an Alternate Data Stream (ADS), you should: Focus on monitoring process creation events within Windows environments. Specifically, keep an eye out for instances where the process image ends with '\\rundll32.exe' or the original file name is identified as 'RUNDLL32.EXE'. Additionally, pay close attention to the command line used for execution. Look for patterns that match the execution of 'rundll32' (case insensitive) followed by a space, then a path that includes a colon, indicating the potential use of an Alternate Data Stream. This pattern is crucial as it signifies the DLL being called from within an ADS, which is a common technique used by attackers to hide malicious activities. Be aware that this rule may yield unknown false positives, indicating that while it is set to a high alert level, each alert should still be investigated to confirm its validity.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of rundll32 where the DLL being called is stored in an Alternate Data Stream (ADS).",
      "answer": "In order to detect execution of rundll32 where the DLL being called is stored in an Alternate Data Stream (ADS), you should: Focus on monitoring process creation events within Windows environments. Specifically, keep an eye out for instances where the process image ends with '\\rundll32.exe' or the original file name is identified as 'RUNDLL32.EXE'. Additionally, pay close attention to the command line used for execution. Look for patterns that match the execution of 'rundll32' (case insensitive) followed by a space, then a path that includes a colon, indicating the potential use of an Alternate Data Stream. This pattern is crucial as it signifies the DLL being called from within an ADS, which is a common technique used by attackers to hide malicious activities. Be aware that this rule may yield unknown false positives, indicating that while it is set to a high alert level, each alert should still be investigated to confirm its validity."
    }
  },
  {
    "instruction": "Explain how should I detect the following: An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.\nThese services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.\nRemote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)\n",
    "context": "",
    "output": "In order to detect adversaries leveraging legitimate remote desktop and support software for establishing command and control channels on target systems within networks, you should monitor DNS query logs on Windows systems for queries that are directed to domain names associated with these remote access services. This includes a wide range of services such as TeamViewer, GoToAssist, LogMeIn, Ammyy Admin, NetSupport Manager RAT, Remote Utilities RAT, AnyDesk, Splashtop, Atera, VNC, RustDesk, Zoho Assist, JumpCloud, Kaseya, Bomgar (BeyondTrust), and others. \n\nDetection should focus on the end part of the domain queried (e.g., '.getgo.com', '.logmein.com', '.ammyy.com') to catch activity related to these services. Special attention should be given to RustDesk connectivity patterns, marked by domain queries ending with '.rustdesk.com' and starting with 'rs-'. This specific pattern can indicate an attempt to connect to RustDesk's infrastructure, which could signify malicious use of this remote desktop software.\n\nIt is also crucial to exclude web browser processes from detection to minimize false positives. These exclusions encompass a variety of popular web browsers like Brave, Chrome, Firefox, Internet Explorer, Maxthon, Edge, Opera, Safari, SeaMonkey, Vivaldi, and Whale, considering their executable paths to differentiate legitimate browsing access to these domains from suspicious activities. \n\nThis monitoring strategy helps in identifying unauthorized or malicious usage of widely trusted remote access tools, which adversaries might exploit to maintain persistence and control over compromised systems subtly. Identifying such connections can be crucial in detecting and preventing breaches that utilize these legitimate services for harmful purposes.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.\nThese services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.\nRemote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)\n",
      "answer": "In order to detect adversaries leveraging legitimate remote desktop and support software for establishing command and control channels on target systems within networks, you should monitor DNS query logs on Windows systems for queries that are directed to domain names associated with these remote access services. This includes a wide range of services such as TeamViewer, GoToAssist, LogMeIn, Ammyy Admin, NetSupport Manager RAT, Remote Utilities RAT, AnyDesk, Splashtop, Atera, VNC, RustDesk, Zoho Assist, JumpCloud, Kaseya, Bomgar (BeyondTrust), and others. \n\nDetection should focus on the end part of the domain queried (e.g., '.getgo.com', '.logmein.com', '.ammyy.com') to catch activity related to these services. Special attention should be given to RustDesk connectivity patterns, marked by domain queries ending with '.rustdesk.com' and starting with 'rs-'. This specific pattern can indicate an attempt to connect to RustDesk's infrastructure, which could signify malicious use of this remote desktop software.\n\nIt is also crucial to exclude web browser processes from detection to minimize false positives. These exclusions encompass a variety of popular web browsers like Brave, Chrome, Firefox, Internet Explorer, Maxthon, Edge, Opera, Safari, SeaMonkey, Vivaldi, and Whale, considering their executable paths to differentiate legitimate browsing access to these domains from suspicious activities. \n\nThis monitoring strategy helps in identifying unauthorized or malicious usage of widely trusted remote access tools, which adversaries might exploit to maintain persistence and control over compromised systems subtly. Identifying such connections can be crucial in detecting and preventing breaches that utilize these legitimate services for harmful purposes."
    }
  },
  {
    "instruction": "How can I detect: use of a renamed SysInternals Sdelete, which is something an administrator shouldn't do (the renaming)",
    "context": "",
    "output": "In order to detect the use of a renamed SysInternals Sdelete, which is something an administrator shouldn't do (the renaming), you should: monitor for the creation of processes on Windows systems where the original file name is 'sdelete.exe'. However, it's important to note that detections should exclude any cases where the image path ends with '\\sdelete.exe' or '\\sdelete64.exe' to avoid flagging legitimate usage of these tools. Key information to be logged includes the Computer Name, User, Command Line, and Parent Command Line. Be aware that legitimate system administrator activities might sometimes involve using such tools, which could be considered a false positive in the context of this detection. This process aims to recognize unauthorized modifications or potential misuse of Sdelete, a tool known for securely deleting files, indicating a high level of concern if detected under these conditions.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "use of a renamed SysInternals Sdelete, which is something an administrator shouldn't do (the renaming)",
      "answer": "In order to detect the use of a renamed SysInternals Sdelete, which is something an administrator shouldn't do (the renaming), you should: monitor for the creation of processes on Windows systems where the original file name is 'sdelete.exe'. However, it's important to note that detections should exclude any cases where the image path ends with '\\sdelete.exe' or '\\sdelete64.exe' to avoid flagging legitimate usage of these tools. Key information to be logged includes the Computer Name, User, Command Line, and Parent Command Line. Be aware that legitimate system administrator activities might sometimes involve using such tools, which could be considered a false positive in the context of this detection. This process aims to recognize unauthorized modifications or potential misuse of Sdelete, a tool known for securely deleting files, indicating a high level of concern if detected under these conditions."
    }
  },
  {
    "instruction": "How can I detect: specific export function name used by one of EquationGroup tools",
    "context": "",
    "output": "In order to detect a specific export function name used by one of EquationGroup tools, you should monitor for process creation events in Windows systems. Specifically, look for command-line invocations that contain '-export dll_u' or end with ',dll_u' or ' dll_u'. These particular patterns are indicators of the specified tool being used. Given the nature of the activity and the rarity of legitimate uses for these command-line arguments, false positives are considered unlikely. This detection is critical due to the potential security implications associated with the EquationGroup tools' operations.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "specific export function name used by one of EquationGroup tools",
      "answer": "In order to detect a specific export function name used by one of EquationGroup tools, you should monitor for process creation events in Windows systems. Specifically, look for command-line invocations that contain '-export dll_u' or end with ',dll_u' or ' dll_u'. These particular patterns are indicators of the specified tool being used. Given the nature of the activity and the rarity of legitimate uses for these command-line arguments, false positives are considered unlikely. This detection is critical due to the potential security implications associated with the EquationGroup tools' operations."
    }
  },
  {
    "instruction": "How to detect: Offensive tradecraft is switching away from using APIs like \"CreateRemoteThread\", however, this is still largely observed in the wild.\nThis rule aims to detect suspicious processes (those we would not expect to behave in this way like winword.exe or outlook.exe) creating remote threads on other processes.\nIt is a generalistic rule, but it should have a low FP ratio due to the selected range of processes.\n",
    "context": "",
    "output": "In order to detect suspicious processes creating remote threads on other processes, which is an observed tactic despite the shift away from using APIs like \"CreateRemoteThread\", you should: Monitor for events where a process initiates the creation of a remote thread into specific target processes, namely 'spoolsv.exe' or 'notepad.exe', which are generally not expected to behave in such a manner. This detection focuses on Windows environments, specifically watching the creation of remote threads, which can be indicative of malicious activity like code injection or execution of unauthorized commands in benign processes. It is crucial to exclude events where the source of the remote thread creation is from 'csrss.exe', or any process labeled as an 'unknown process', as well as to ignore threads starting with the function 'EtwpNotificationThread' to reduce false positive rates. Relevant information to be collected and analyzed includes the computer name, user account, source process image, and target process image involved in these events. This approach is designed to identify potential malicious activities with a medium level of confidence, capturing attempts to misuse system processes for executing unauthorized code or commands, typically associated with tactics and techniques like Persistence, Privilege Escalation, and Defense Evasion.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Offensive tradecraft is switching away from using APIs like \"CreateRemoteThread\", however, this is still largely observed in the wild.\nThis rule aims to detect suspicious processes (those we would not expect to behave in this way like winword.exe or outlook.exe) creating remote threads on other processes.\nIt is a generalistic rule, but it should have a low FP ratio due to the selected range of processes.\n",
      "answer": "In order to detect suspicious processes creating remote threads on other processes, which is an observed tactic despite the shift away from using APIs like \"CreateRemoteThread\", you should: Monitor for events where a process initiates the creation of a remote thread into specific target processes, namely 'spoolsv.exe' or 'notepad.exe', which are generally not expected to behave in such a manner. This detection focuses on Windows environments, specifically watching the creation of remote threads, which can be indicative of malicious activity like code injection or execution of unauthorized commands in benign processes. It is crucial to exclude events where the source of the remote thread creation is from 'csrss.exe', or any process labeled as an 'unknown process', as well as to ignore threads starting with the function 'EtwpNotificationThread' to reduce false positive rates. Relevant information to be collected and analyzed includes the computer name, user account, source process image, and target process image involved in these events. This approach is designed to identify potential malicious activities with a medium level of confidence, capturing attempts to misuse system processes for executing unauthorized code or commands, typically associated with tactics and techniques like Persistence, Privilege Escalation, and Defense Evasion."
    }
  },
  {
    "instruction": "Please help me detect the following: successful authentication from potential clients using legacy authentication via user agent strings. This could be a sign of MFA bypass using a password spray attack.",
    "context": "",
    "output": "Sure!\nIn order to detect successful authentication from potential clients using legacy authentication via user agent strings, which could be a sign of MFA bypass using a password spray attack, you should: Monitor sign-in logs from Azure for successful authentication events. Pay particular attention to the user agent strings within these logs. Specifically, look out for user agent strings that contain any of the identifiers 'BAV2ROPC', 'CBAinPROD', or 'CBAinTAR'. These strings are indicative of the use of legacy authentication methods, which might be employed by attackers attempting to bypass multi-factor authentication through password spray attacks. Be aware that there may be legitimate uses of these indicators, such as known legacy accounts, and these should be considered as potential false positives. The importance of scrutinizing these events is high due to the potential security implications.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "successful authentication from potential clients using legacy authentication via user agent strings. This could be a sign of MFA bypass using a password spray attack.",
      "answer": "In order to detect successful authentication from potential clients using legacy authentication via user agent strings, which could be a sign of MFA bypass using a password spray attack, you should: Monitor sign-in logs from Azure for successful authentication events. Pay particular attention to the user agent strings within these logs. Specifically, look out for user agent strings that contain any of the identifiers 'BAV2ROPC', 'CBAinPROD', or 'CBAinTAR'. These strings are indicative of the use of legacy authentication methods, which might be employed by attackers attempting to bypass multi-factor authentication through password spray attacks. Be aware that there may be legitimate uses of these indicators, such as known legacy accounts, and these should be considered as potential false positives. The importance of scrutinizing these events is high due to the potential security implications."
    }
  },
  {
    "instruction": "Please help me detect the following: Detect commandline usage of Microsoft Connection Manager Profile Installer (cmstp.exe) to install specially formatted local .INF files",
    "context": "",
    "output": "Sure!\nIn order to detect commandline usage of Microsoft Connection Manager Profile Installer (cmstp.exe) to install specially formatted local .INF files, you should focus on monitoring process creation events within Windows environments. Specifically, pay attention to processes that end with '\\cmstp.exe' or have the original filename 'CMSTP.EXE'. Moreover, scrutinize the command line arguments for specific flags, including '/s', '-s', '/au', '-au', '/ni', and '-ni', which are indicative of silent installation attempts and automatic updates without user notification or consent. It's essential to gather and review data fields such as the computer name, user account, and the full command line used in the execution to effectively identify malicious activities. However, be cautious of false positives, which may arise from legitimate uses of the cmstp.exe utility by authorized users. This method is tagged with high importance due to its relevance in detecting potential misuse of system utilities to install malware or unauthorized configurations.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Detect commandline usage of Microsoft Connection Manager Profile Installer (cmstp.exe) to install specially formatted local .INF files",
      "answer": "In order to detect commandline usage of Microsoft Connection Manager Profile Installer (cmstp.exe) to install specially formatted local .INF files, you should focus on monitoring process creation events within Windows environments. Specifically, pay attention to processes that end with '\\cmstp.exe' or have the original filename 'CMSTP.EXE'. Moreover, scrutinize the command line arguments for specific flags, including '/s', '-s', '/au', '-au', '/ni', and '-ni', which are indicative of silent installation attempts and automatic updates without user notification or consent. It's essential to gather and review data fields such as the computer name, user account, and the full command line used in the execution to effectively identify malicious activities. However, be cautious of false positives, which may arise from legitimate uses of the cmstp.exe utility by authorized users. This method is tagged with high importance due to its relevance in detecting potential misuse of system utilities to install malware or unauthorized configurations."
    }
  },
  {
    "instruction": "Can you explain how to detect: remote RPC calls to read information about scheduled tasks via SASec",
    "context": "",
    "output": "Certainly!\n\nIn order to detect remote RPC calls to read information about scheduled tasks via SASec, you should monitor logs from the RPC Firewall, specifically focusing on application category logs. Ensure the RPC Firewall is installed and applies to all processes with the configuration \"audit:true action:block uuid:378e52b0-c0a9-11cf-822d-00aa0051e40f\". Look for log entries in the RPCFW Event Log that have an EventID of 3, which signals an operation related to this specific UUID interface - identified to be associated with actions like reading information about scheduled tasks via SASec. It is important to exclude operations with an OpNum of 0 or 1 from this detection as they are filtered out to reduce false positives. This method of detection leans on understanding complex interactions and filtering for precise activities, elevating the importance of meticulous log analysis in identifying suspicious remote procedure calls that could indicate malicious intent or breach attempts.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "remote RPC calls to read information about scheduled tasks via SASec",
      "answer": "In order to detect remote RPC calls to read information about scheduled tasks via SASec, you should monitor logs from the RPC Firewall, specifically focusing on application category logs. Ensure the RPC Firewall is installed and applies to all processes with the configuration \"audit:true action:block uuid:378e52b0-c0a9-11cf-822d-00aa0051e40f\". Look for log entries in the RPCFW Event Log that have an EventID of 3, which signals an operation related to this specific UUID interface - identified to be associated with actions like reading information about scheduled tasks via SASec. It is important to exclude operations with an OpNum of 0 or 1 from this detection as they are filtered out to reduce false positives. This method of detection leans on understanding complex interactions and filtering for precise activities, elevating the importance of meticulous log analysis in identifying suspicious remote procedure calls that could indicate malicious intent or breach attempts."
    }
  },
  {
    "instruction": "How to detect: One of the Windows Eventlogs has been cleared. e.g. caused by \"wevtutil cl\" command execution",
    "context": "",
    "output": "In order to detect when one of the Windows Eventlogs has been cleared, potentially as a consequence of \"wevtutil cl\" command execution, you should monitor Windows system logs, specifically focusing on events related to the Microsoft-Windows-Eventlog provider. The critical indicator of this activity is Event ID 104, which signifies that an event log was cleared. It is important, however, to exclude events originating from channels such as Application, Microsoft-Windows-PowerShell/Operational, Microsoft-Windows-Sysmon/Operational, PowerShellCore/Operational, Security, System, and Windows PowerShell, as these are already covered by another monitoring mechanism. \n\nBe aware that there could be legitimate reasons for these logs to be cleared, such as during the rollout of log collection agents or system provisioning before the creation of a 'golden' system image. These activities might generate false positives, which are situations where normal or expected actions are misinterpreted as malicious. This monitoring activity is of a medium level importance in identifying potential security incidents related to the clearing of event logs, which can be an indicator of an attacker's attempt to cover their tracks or interfere with system logging capabilities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "One of the Windows Eventlogs has been cleared. e.g. caused by \"wevtutil cl\" command execution",
      "answer": "In order to detect when one of the Windows Eventlogs has been cleared, potentially as a consequence of \"wevtutil cl\" command execution, you should monitor Windows system logs, specifically focusing on events related to the Microsoft-Windows-Eventlog provider. The critical indicator of this activity is Event ID 104, which signifies that an event log was cleared. It is important, however, to exclude events originating from channels such as Application, Microsoft-Windows-PowerShell/Operational, Microsoft-Windows-Sysmon/Operational, PowerShellCore/Operational, Security, System, and Windows PowerShell, as these are already covered by another monitoring mechanism. \n\nBe aware that there could be legitimate reasons for these logs to be cleared, such as during the rollout of log collection agents or system provisioning before the creation of a 'golden' system image. These activities might generate false positives, which are situations where normal or expected actions are misinterpreted as malicious. This monitoring activity is of a medium level importance in identifying potential security incidents related to the clearing of event logs, which can be an indicator of an attacker's attempt to cover their tracks or interfere with system logging capabilities."
    }
  },
  {
    "instruction": "How can I detect: an unexpected process spawning from dns.exe which may indicate activity related to remote code execution or other forms of exploitation as seen in CVE-2020-1350 (SigRed)",
    "context": "",
    "output": "In order to detect an unexpected process spawning from dns.exe which may indicate activity related to remote code execution or other forms of exploitation as seen in CVE-2020-1350 (SigRed), you should focus on monitoring process creation events within Windows systems. Specifically, keep an eye out for any processes that are initialized by dns.exe, signaling possible malicious activity. It is important, however, to exclude any instances where conhost.exe is the spawned process, as this does not necessarily indicate an attack. Despite this measure, the uncertainty of false positives remains high, emphasizing the need for vigilant analysis. This approach aligns with understanding and mitigating threats against remote code execution or exploitation tactics.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "an unexpected process spawning from dns.exe which may indicate activity related to remote code execution or other forms of exploitation as seen in CVE-2020-1350 (SigRed)",
      "answer": "In order to detect an unexpected process spawning from dns.exe which may indicate activity related to remote code execution or other forms of exploitation as seen in CVE-2020-1350 (SigRed), you should focus on monitoring process creation events within Windows systems. Specifically, keep an eye out for any processes that are initialized by dns.exe, signaling possible malicious activity. It is important, however, to exclude any instances where conhost.exe is the spawned process, as this does not necessarily indicate an attack. Despite this measure, the uncertainty of false positives remains high, emphasizing the need for vigilant analysis. This approach aligns with understanding and mitigating threats against remote code execution or exploitation tactics."
    }
  },
  {
    "instruction": "Explain how should I detect the following: when an attacker tries to backdoor the MSSQL server by adding a backdoor account to the sysadmin fixed server role",
    "context": "",
    "output": "In order to detect when an attacker tries to backdoor the MSSQL server by adding a backdoor account to the sysadmin fixed server role, you should: Monitor Windows application logs specifically for events generated by MSSQLSERVER with the EventID 33205. This event ID is crucial as it indicates changes being made to the sysadmin fixed server role within the MSSQL server environment. You must look for modifications that include the addition of members to the sysadmin role, particularly focusing on the presence of phrases 'object_name:sysadmin' and 'statement:alter server role [sysadmin] add member' within the event data. This kind of activity is indicative of potential malicious behavior, where an attacker attempts to grant administrative privileges to a backdoor account, thereby gaining high-level access to the database system. \n\nTake into account that while this behavior might rarely coincide with legitimate administrative modifications, such events generally represent a high threat level and warrant immediate investigation. The detection of these specific event characteristics aids in identifying suspicious alterations to critical server roles, aligning with tactics and techniques that involve elevation of privilege and manipulation of database roles for unauthorized access or persistence within a targeted system.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "when an attacker tries to backdoor the MSSQL server by adding a backdoor account to the sysadmin fixed server role",
      "answer": "In order to detect when an attacker tries to backdoor the MSSQL server by adding a backdoor account to the sysadmin fixed server role, you should: Monitor Windows application logs specifically for events generated by MSSQLSERVER with the EventID 33205. This event ID is crucial as it indicates changes being made to the sysadmin fixed server role within the MSSQL server environment. You must look for modifications that include the addition of members to the sysadmin role, particularly focusing on the presence of phrases 'object_name:sysadmin' and 'statement:alter server role [sysadmin] add member' within the event data. This kind of activity is indicative of potential malicious behavior, where an attacker attempts to grant administrative privileges to a backdoor account, thereby gaining high-level access to the database system. \n\nTake into account that while this behavior might rarely coincide with legitimate administrative modifications, such events generally represent a high threat level and warrant immediate investigation. The detection of these specific event characteristics aids in identifying suspicious alterations to critical server roles, aligning with tactics and techniques that involve elevation of privilege and manipulation of database roles for unauthorized access or persistence within a targeted system."
    }
  },
  {
    "instruction": "How to detect: potential DLL sideloading of \"waveedit.dll\", which is part of the Nero WaveEditor audio editing software.",
    "context": "",
    "output": "In order to detect potential DLL sideloading of \"waveedit.dll\", which is part of the Nero WaveEditor audio editing software, you should: Look for events where the 'waveedit.dll' file is loaded, in the context of Windows operating system image load logging. The detection focuses on identifying situations where 'waveedit.dll' is loaded outside of the legitimate Nero WaveEditor directories. Specifically, if the loaded 'waveedit.dll' does not originate from the legitimate Nero software paths - either 'C:\\Program Files (x86)\\Nero\\Nero Apps\\Nero WaveEditor\\waveedit.exe' or 'C:\\Program Files\\Nero\\Nero Apps\\Nero WaveEditor\\waveedit.exe' and their respective directories - it might indicate an attempt of DLL sideloading. It's highly unlikely that there will be false positives given the specificity of these conditions, meaning if an alert is triggered it suggests a high probability of a malicious activity. Through this method, the focus is on spotting potentially malicious exploitation of trusted processes to execute unauthorized or malicious code, indicative of techniques employed in initial access or persistence.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential DLL sideloading of \"waveedit.dll\", which is part of the Nero WaveEditor audio editing software.",
      "answer": "In order to detect potential DLL sideloading of \"waveedit.dll\", which is part of the Nero WaveEditor audio editing software, you should: Look for events where the 'waveedit.dll' file is loaded, in the context of Windows operating system image load logging. The detection focuses on identifying situations where 'waveedit.dll' is loaded outside of the legitimate Nero WaveEditor directories. Specifically, if the loaded 'waveedit.dll' does not originate from the legitimate Nero software paths - either 'C:\\Program Files (x86)\\Nero\\Nero Apps\\Nero WaveEditor\\waveedit.exe' or 'C:\\Program Files\\Nero\\Nero Apps\\Nero WaveEditor\\waveedit.exe' and their respective directories - it might indicate an attempt of DLL sideloading. It's highly unlikely that there will be false positives given the specificity of these conditions, meaning if an alert is triggered it suggests a high probability of a malicious activity. Through this method, the focus is on spotting potentially malicious exploitation of trusted processes to execute unauthorized or malicious code, indicative of techniques employed in initial access or persistence."
    }
  },
  {
    "instruction": "Explain how should I detect the following: Files with well-known filenames (sensitive files with credential data) copying",
    "context": "",
    "output": "In order to detect the copying of files with well-known filenames that contain sensitive credential data, you should monitor for process creation events on Windows systems, specifically looking for instances where the 'esentutl.exe' executable is involved. This can be identified either by the image or the original filename ending with '\\esentutl.exe'. Additionally, check for command line arguments that include references to 'vss', ' /m ', or ' /y ', which may indicate an attempt to manipulate or interact with shadow copies or specific operations related to the executable.\n\nIt's also crucial to be aware of command line activities that point to sensitive locations often targeted for data extraction, such as '\\windows\\ntds\\ntds.dit' (Active Directory database), various configuration files like '\\config\\sam' (Security Account Manager), '\\config\\security', '\\config\\system', and their counterparts in the '\\repair' and '\\config\\RegBack' directories. These files are critical as they contain user credentials and system information which could be exploited if copied or accessed by unauthorized individuals.\n\nThis detection strategy is pivotal for identifying potential security incidents involving the unauthorized collection of credentials and other sensitive information. However, note that there may be legitimate reasons for accessing or copying these files, such as during backup operations or forensic investigations by authorized personnel. Thus, while this approach is set to a high alert level due to the sensitive nature of the data involved, it's essential to consider potential false positives and verify the context of detected activities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Files with well-known filenames (sensitive files with credential data) copying",
      "answer": "In order to detect the copying of files with well-known filenames that contain sensitive credential data, you should monitor for process creation events on Windows systems, specifically looking for instances where the 'esentutl.exe' executable is involved. This can be identified either by the image or the original filename ending with '\\esentutl.exe'. Additionally, check for command line arguments that include references to 'vss', ' /m ', or ' /y ', which may indicate an attempt to manipulate or interact with shadow copies or specific operations related to the executable.\n\nIt's also crucial to be aware of command line activities that point to sensitive locations often targeted for data extraction, such as '\\windows\\ntds\\ntds.dit' (Active Directory database), various configuration files like '\\config\\sam' (Security Account Manager), '\\config\\security', '\\config\\system', and their counterparts in the '\\repair' and '\\config\\RegBack' directories. These files are critical as they contain user credentials and system information which could be exploited if copied or accessed by unauthorized individuals.\n\nThis detection strategy is pivotal for identifying potential security incidents involving the unauthorized collection of credentials and other sensitive information. However, note that there may be legitimate reasons for accessing or copying these files, such as during backup operations or forensic investigations by authorized personnel. Thus, while this approach is set to a high alert level due to the sensitive nature of the data involved, it's essential to consider potential false positives and verify the context of detected activities."
    }
  },
  {
    "instruction": "How to detect: Ursnif C2 traffic.",
    "context": "",
    "output": "In order to detect Ursnif C2 traffic, you should monitor traffic through your proxy logs for specific patterns indicating malicious activity. Specifically, look for URLs or Uniform Resource Identifiers (URIs) in the traffic that contain patterns indicative of base64 encoding, such as '_2f' and '_2b' sequences. Additionally, pay close attention to URLs containing '.avi' file extensions within a '/images/' directory path, as these are part of the detection criteria. Both conditions involving base64 encoded segments and suspicious URL patterns need to be met for an alert to be triggered.\n\nIn your analysis, focus on fields including the client IP address (c-ip), the full requested URI (c-uri), server response size in bytes (sc-bytes), and the client's User-Agent string (c-ua) to gather more context about the suspicious traffic. It's important to note that while these detections are crucial, the possibility of encountering unknown false positive instances exists due to the broad nature of the detection rules. This detection is considered critical due to its association with the Ursnif C2 traffic, a known malicious operation.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Ursnif C2 traffic.",
      "answer": "In order to detect Ursnif C2 traffic, you should monitor traffic through your proxy logs for specific patterns indicating malicious activity. Specifically, look for URLs or Uniform Resource Identifiers (URIs) in the traffic that contain patterns indicative of base64 encoding, such as '_2f' and '_2b' sequences. Additionally, pay close attention to URLs containing '.avi' file extensions within a '/images/' directory path, as these are part of the detection criteria. Both conditions involving base64 encoded segments and suspicious URL patterns need to be met for an alert to be triggered.\n\nIn your analysis, focus on fields including the client IP address (c-ip), the full requested URI (c-uri), server response size in bytes (sc-bytes), and the client's User-Agent string (c-ua) to gather more context about the suspicious traffic. It's important to note that while these detections are crucial, the possibility of encountering unknown false positive instances exists due to the broad nature of the detection rules. This detection is considered critical due to its association with the Ursnif C2 traffic, a known malicious operation."
    }
  },
  {
    "instruction": "How can I detect: \"iscsicpl.exe\" UAC bypass technique that leverages a DLL Search Order hijacking technique to load a custom DLL's from temp or a any user controlled location in the users %PATH%",
    "context": "",
    "output": "In order to detect the \"iscsicpl.exe\" UAC bypass technique that leverages a DLL Search Order hijacking technique to load custom DLLs from temp or any user-controlled location in the user's %PATH%, you should focus on monitoring Windows image load events. Specifically, look for instances where the image \"C:\\Windows\\SysWOW64\\iscsicpl.exe\" is loaded, and then it subsequently tries to load a DLL that ends with \"\\iscsiexe.dll\". However, ensure to exclude the cases where \"iscsiexe.dll\" is loaded directly from a path starting with \"C:\\Windows\\\", as this might be legitimate and thus, reduces false positives. This detection methodology is crucial for identifying potentially malicious activities associated with bypassing User Account Control (UAC) by exploiting the DLL search order, indicating a high severity level for such detections.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "\"iscsicpl.exe\" UAC bypass technique that leverages a DLL Search Order hijacking technique to load a custom DLL's from temp or a any user controlled location in the users %PATH%",
      "answer": "In order to detect the \"iscsicpl.exe\" UAC bypass technique that leverages a DLL Search Order hijacking technique to load custom DLLs from temp or any user-controlled location in the user's %PATH%, you should focus on monitoring Windows image load events. Specifically, look for instances where the image \"C:\\Windows\\SysWOW64\\iscsicpl.exe\" is loaded, and then it subsequently tries to load a DLL that ends with \"\\iscsiexe.dll\". However, ensure to exclude the cases where \"iscsiexe.dll\" is loaded directly from a path starting with \"C:\\Windows\\\", as this might be legitimate and thus, reduces false positives. This detection methodology is crucial for identifying potentially malicious activities associated with bypassing User Account Control (UAC) by exploiting the DLL search order, indicating a high severity level for such detections."
    }
  },
  {
    "instruction": "Please help me detect the following: nltest commands that can be used for information discovery",
    "context": "",
    "output": "Sure!\nIn order to detect nltest commands that can be used for information discovery, you should: Focus on monitoring the creation of processes within Windows operating systems. Specifically, observe processes where the image path ends with \"\\nltest.exe\" or where the OriginalFileName is explicitly 'nltestrk.exe'. This approach is vital for identifying attempts at gathering information that could be leveraged in further attacks. It's important to note, however, that such detections might occasionally capture legitimate administrative activities. Due to this, the perceived threat level associated with these detections is categorized as low, indicating that while these activities are noteworthy, they might not always signify a genuine threat. Remember, these observations are tied to well-known tactics and techniques of information discovery, part of the broader framework of identifying potentially malicious activities early on.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "nltest commands that can be used for information discovery",
      "answer": "In order to detect nltest commands that can be used for information discovery, you should: Focus on monitoring the creation of processes within Windows operating systems. Specifically, observe processes where the image path ends with \"\\nltest.exe\" or where the OriginalFileName is explicitly 'nltestrk.exe'. This approach is vital for identifying attempts at gathering information that could be leveraged in further attacks. It's important to note, however, that such detections might occasionally capture legitimate administrative activities. Due to this, the perceived threat level associated with these detections is categorized as low, indicating that while these activities are noteworthy, they might not always signify a genuine threat. Remember, these observations are tied to well-known tactics and techniques of information discovery, part of the broader framework of identifying potentially malicious activities early on."
    }
  },
  {
    "instruction": "Can you explain how to detect: Detect usage of the \"driverquery\" utility. Which can be used to perform reconnaissance on installed drivers",
    "context": "",
    "output": "Certainly!\n\nIn order to detect usage of the \"driverquery\" utility, which can be used to perform reconnaissance on installed drivers, you should: Focus on monitoring process creation events within Windows operating systems. Look specifically for occurrences where the process image name ends with 'driverquery.exe' or the original file name is recognized as 'drvqry.exe'. Be aware that there can be legitimate uses of this utility by third-party tools for investigating installed drivers; thus, this may result in false positives. The importance of this detection is considered medium, but it might be adjusted to low if the utility is frequently used within your environment for non-malicious purposes.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Detect usage of the \"driverquery\" utility. Which can be used to perform reconnaissance on installed drivers",
      "answer": "In order to detect usage of the \"driverquery\" utility, which can be used to perform reconnaissance on installed drivers, you should: Focus on monitoring process creation events within Windows operating systems. Look specifically for occurrences where the process image name ends with 'driverquery.exe' or the original file name is recognized as 'drvqry.exe'. Be aware that there can be legitimate uses of this utility by third-party tools for investigating installed drivers; thus, this may result in false positives. The importance of this detection is considered medium, but it might be adjusted to low if the utility is frequently used within your environment for non-malicious purposes."
    }
  },
  {
    "instruction": "Please help me detect the following: network connections and DNS queries initiated by Regsvr32.exe",
    "context": "",
    "output": "Sure!\nIn order to detect network connections and DNS queries initiated by Regsvr32.exe, you should: focus on analyzing DNS query logs from Windows operating systems. Specifically, look for events where the image path ends with '\\regsvr32.exe', indicating that Regsvr32.exe is initiating these connections or queries. Important fields to monitor in this context include the computer name, the user account involved, the exact image path, and the destination IP and port numbers related to the activities. Although there may be rare instances where legitimate uses of Regsvr32.exe could trigger this detection, such cases are generally considered unknown and thus, the alert level for this behavior is classified as high. This detection is closely associated with tactics and techniques like Execution, Command and Control, and Defense Evasion, reflecting the malicious use of Regsvr32.exe to bypass security mechanisms, execute code, and establish connections to control servers.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "network connections and DNS queries initiated by Regsvr32.exe",
      "answer": "In order to detect network connections and DNS queries initiated by Regsvr32.exe, you should: focus on analyzing DNS query logs from Windows operating systems. Specifically, look for events where the image path ends with '\\regsvr32.exe', indicating that Regsvr32.exe is initiating these connections or queries. Important fields to monitor in this context include the computer name, the user account involved, the exact image path, and the destination IP and port numbers related to the activities. Although there may be rare instances where legitimate uses of Regsvr32.exe could trigger this detection, such cases are generally considered unknown and thus, the alert level for this behavior is classified as high. This detection is closely associated with tactics and techniques like Execution, Command and Control, and Defense Evasion, reflecting the malicious use of Regsvr32.exe to bypass security mechanisms, execute code, and establish connections to control servers."
    }
  },
  {
    "instruction": "How to detect: usage of system utilities to discover system network connections",
    "context": "",
    "output": "In order to detect usage of system utilities to discover system network connections, you should monitor process creation events on Linux systems focusing on the use of specific system utilities that could indicate an interest in gathering information about network connections and system activities. Specifically, look for processes that are being created where the executable (Image) path ends with '/who', '/w', '/last', '/lsof', or '/netstat'. These utilities are commonly used for legitimate purposes, such as who is logged on the system, current system load, listing of open files, and displaying network connections respectively. However, in the context of a cyber attack, they can be used by an adversary to gather information about the system and its network connections.\n\nIt is important to apply a filter to exclude benign usage related to specific known good processes. For this purpose, any process creation event where the parent command line includes '/usr/bin/landscape-sysinfo' and the executable path ends with '/who' should be filtered out. This particular condition is designed to reduce false positives by recognizing that the landscape-sysinfo tool, which is a part of a legitimate system management toolset for Ubuntu, also uses the 'who' command as part of its operations.\n\nDetection of these activities should be labeled with a low level of threat initially, due to the possibility of false positives stemming from legitimate activities. However, it remains crucial for security teams to monitor such system utility usage as it can be indicative of reconnaissance activities. Identifying such actions early can assist in thwarting potential attacks at an initial stage.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of system utilities to discover system network connections",
      "answer": "In order to detect usage of system utilities to discover system network connections, you should monitor process creation events on Linux systems focusing on the use of specific system utilities that could indicate an interest in gathering information about network connections and system activities. Specifically, look for processes that are being created where the executable (Image) path ends with '/who', '/w', '/last', '/lsof', or '/netstat'. These utilities are commonly used for legitimate purposes, such as who is logged on the system, current system load, listing of open files, and displaying network connections respectively. However, in the context of a cyber attack, they can be used by an adversary to gather information about the system and its network connections.\n\nIt is important to apply a filter to exclude benign usage related to specific known good processes. For this purpose, any process creation event where the parent command line includes '/usr/bin/landscape-sysinfo' and the executable path ends with '/who' should be filtered out. This particular condition is designed to reduce false positives by recognizing that the landscape-sysinfo tool, which is a part of a legitimate system management toolset for Ubuntu, also uses the 'who' command as part of its operations.\n\nDetection of these activities should be labeled with a low level of threat initially, due to the possibility of false positives stemming from legitimate activities. However, it remains crucial for security teams to monitor such system utility usage as it can be indicative of reconnaissance activities. Identifying such actions early can assist in thwarting potential attacks at an initial stage."
    }
  },
  {
    "instruction": "How can I detect: An adversary might use WMI to check if a certain remote service is running on a remote device.\nWhen the test completes, a service information will be displayed on the screen if it exists.\nA common feedback message is that \"No instance(s) Available\" if the service queried is not running.\nA common error message is \"Node - (provided IP or default) ERROR Description =The RPC server is unavailable\" if the provided remote host is unreachable\n",
    "context": "",
    "output": "In order to detect when an adversary might use Windows Management Instrumentation (WMI) to check if a certain remote service is running on a remote device, you should: monitor for the creation of processes that end with '\\WMIC.exe' or have an original filename of 'wmic.exe'. Additionally, it's important to look for command lines that contain the word 'service'. These observations indicate that someone is likely using the WMIC tool to query remote services, which can be a sign of reconnaissance activity as part of a broader campaign to understand the network environment and potentially identify vulnerable services for exploitation. The feedback from such a query might indicate whether a service is running, not present, or if the remote host is unreachable, commonly noted by messages like \"No instance(s) Available\" or \"Node - (provided IP or default) ERROR Description =The RPC server is unavailable.\" This monitoring should be applied to systems running Windows, given the use of WMIC. The level of concern for such activities is considered medium, and while there may be legitimate uses for querying service information remotely, it's essential to review these activities to rule out malicious intent.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "An adversary might use WMI to check if a certain remote service is running on a remote device.\nWhen the test completes, a service information will be displayed on the screen if it exists.\nA common feedback message is that \"No instance(s) Available\" if the service queried is not running.\nA common error message is \"Node - (provided IP or default) ERROR Description =The RPC server is unavailable\" if the provided remote host is unreachable\n",
      "answer": "In order to detect when an adversary might use Windows Management Instrumentation (WMI) to check if a certain remote service is running on a remote device, you should: monitor for the creation of processes that end with '\\WMIC.exe' or have an original filename of 'wmic.exe'. Additionally, it's important to look for command lines that contain the word 'service'. These observations indicate that someone is likely using the WMIC tool to query remote services, which can be a sign of reconnaissance activity as part of a broader campaign to understand the network environment and potentially identify vulnerable services for exploitation. The feedback from such a query might indicate whether a service is running, not present, or if the remote host is unreachable, commonly noted by messages like \"No instance(s) Available\" or \"Node - (provided IP or default) ERROR Description =The RPC server is unavailable.\" This monitoring should be applied to systems running Windows, given the use of WMIC. The level of concern for such activities is considered medium, and while there may be legitimate uses for querying service information remotely, it's essential to review these activities to rule out malicious intent."
    }
  },
  {
    "instruction": "Can you explain how to detect: delete action in the Github audit logs for codespaces, environment, project and repo.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect delete action in the Github audit logs for codespaces, environment, project, and repo, you should: Monitor GitHub's audit logs specifically looking for actions that indicate deletion activities. These actions include 'codespaces.delete', 'environment.delete', 'project.delete', and 'repo.destroy'. To effectively perform this monitoring, ensure the audit log streaming feature is enabled, a requirement for receiving such logs. Information on enabling this feature is available in GitHub's documentation. When one of these deletion actions is detected, important information such as the action itself, the actor who initiated the action, the organization where the action took place, and the country code of the actor's location should be logged. It's crucial to validate that any detected deletion activity was permitted and examine the \"actor\" field closely to authenticate their identity and authority to perform the deletion. This detection is of medium importance and helps in identifying potentially malicious activities or misconfigurations that could lead to unintentional loss of critical resources within GitHub environments.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "delete action in the Github audit logs for codespaces, environment, project and repo.",
      "answer": "In order to detect delete action in the Github audit logs for codespaces, environment, project, and repo, you should: Monitor GitHub's audit logs specifically looking for actions that indicate deletion activities. These actions include 'codespaces.delete', 'environment.delete', 'project.delete', and 'repo.destroy'. To effectively perform this monitoring, ensure the audit log streaming feature is enabled, a requirement for receiving such logs. Information on enabling this feature is available in GitHub's documentation. When one of these deletion actions is detected, important information such as the action itself, the actor who initiated the action, the organization where the action took place, and the country code of the actor's location should be logged. It's crucial to validate that any detected deletion activity was permitted and examine the \"actor\" field closely to authenticate their identity and authority to perform the deletion. This detection is of medium importance and helps in identifying potentially malicious activities or misconfigurations that could lead to unintentional loss of critical resources within GitHub environments."
    }
  },
  {
    "instruction": "Can you explain how to detect: attempts to exploit an apache spark server via CVE-2014-6287 from a commandline perspective",
    "context": "",
    "output": "Certainly!\n\nIn order to detect attempts to exploit an apache spark server via CVE-2014-6287 from a commandline perspective, you should: Monitor Linux systems, specifically focusing on the creation of new processes. Keep an eye out for processes that have been initiated by the Bash shell, identifiable by their parent process ending with '\\bash'. Among these, pay special attention to command lines that contain either 'id -Gn `' or \"id -Gn '\", which could indicate malicious activity associated with this particular vulnerability. False positives are deemed unlikely, which suggests that if such activity is detected, it should be treated with a high level of concern. This monitoring is crucial for identifying potential exploitation attempts of the CVE-2014-6287 vulnerability from the command line.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "attempts to exploit an apache spark server via CVE-2014-6287 from a commandline perspective",
      "answer": "In order to detect attempts to exploit an apache spark server via CVE-2014-6287 from a commandline perspective, you should: Monitor Linux systems, specifically focusing on the creation of new processes. Keep an eye out for processes that have been initiated by the Bash shell, identifiable by their parent process ending with '\\bash'. Among these, pay special attention to command lines that contain either 'id -Gn `' or \"id -Gn '\", which could indicate malicious activity associated with this particular vulnerability. False positives are deemed unlikely, which suggests that if such activity is detected, it should be treated with a high level of concern. This monitoring is crucial for identifying potential exploitation attempts of the CVE-2014-6287 vulnerability from the command line."
    }
  },
  {
    "instruction": "Explain how should I detect the following: process injection of a LittleCorporal generated Maldoc.",
    "context": "",
    "output": "In order to detect the process injection of a LittleCorporal generated Maldoc, you should: Monitor process access logs on Windows systems for instances where the source image ends with '\\winword.exe', indicating that the Microsoft Word process is executing. Additionally, check if the call trace of these processes includes both a path containing ':\\Windows\\Microsoft.NET\\Framework64\\v2.' and the term 'UNKNOWN'. This combination of behaviors suggests an attempt to inject malicious code into a legitimate process, potentially indicative of a LittleCorporal generated malicious document being executed. Remain vigilant for these signs as they signal a high threat level, though be aware that detections can sometimes be false positives if they fit this pattern but are not malicious.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "process injection of a LittleCorporal generated Maldoc.",
      "answer": "In order to detect the process injection of a LittleCorporal generated Maldoc, you should: Monitor process access logs on Windows systems for instances where the source image ends with '\\winword.exe', indicating that the Microsoft Word process is executing. Additionally, check if the call trace of these processes includes both a path containing ':\\Windows\\Microsoft.NET\\Framework64\\v2.' and the term 'UNKNOWN'. This combination of behaviors suggests an attempt to inject malicious code into a legitimate process, potentially indicative of a LittleCorporal generated malicious document being executed. Remain vigilant for these signs as they signal a high threat level, though be aware that detections can sometimes be false positives if they fit this pattern but are not malicious."
    }
  },
  {
    "instruction": "Please help me detect the following: modification of autostart extensibility point (ASEP) in registry.",
    "context": "",
    "output": "Sure!\nIn order to detect modification of autostart extensibility point (ASEP) in registry, you should: Monitor the Windows registry for any changes related to the autostart extensibility points (ASEPs), particularly those associated with Microsoft Office applications like Word, PowerPoint, Outlook, OneNote, Excel, and Access. Specifically, look for the SetValue event type within the registry paths related to the Microsoft Office suite, both under the standard and Wow6432Node paths. Pay attention to modifications that include subkeys for Addins within these applications, which could indicate unauthorized or malicious software attempting to gain persistence or execute as part of these office applications.\n\nBe thorough in filtering out changes originating from known, legitimate addin sources to minimize false positives. These include changes made from legitimate Microsoft Office paths, system utilities such as msiexec.exe and regsvr32.exe, and also filter out modifications involving well-known addins from your environment, such as those provided by Microsoft for Excel, Outlook, and others. In addition, monitor for changes initiated by the Office ClickToRun executable, or from known antivirus registry modifications, as these are typically benign.\n\nShould ensure capturing specific fields like SecurityID, ObjectName, OldValueType, and NewValueType for detailed analysis of such events. Be aware of legitimate cases where software installations or administrative actions may modify these ASEP locations, which are to be expected and could contribute to false positives.\n\nThis approach uses a multi-layered filter strategy to focus on unauthorized modifications while attempting to exclude known, legitimate activities, with a medium level of confidence in the detection of potential malicious behavior targeting the autostart extensibility points within the Windows registry, aiming at gaining persistence or unauthorized execution through Microsoft Office applications.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "modification of autostart extensibility point (ASEP) in registry.",
      "answer": "In order to detect modification of autostart extensibility point (ASEP) in registry, you should: Monitor the Windows registry for any changes related to the autostart extensibility points (ASEPs), particularly those associated with Microsoft Office applications like Word, PowerPoint, Outlook, OneNote, Excel, and Access. Specifically, look for the SetValue event type within the registry paths related to the Microsoft Office suite, both under the standard and Wow6432Node paths. Pay attention to modifications that include subkeys for Addins within these applications, which could indicate unauthorized or malicious software attempting to gain persistence or execute as part of these office applications.\n\nBe thorough in filtering out changes originating from known, legitimate addin sources to minimize false positives. These include changes made from legitimate Microsoft Office paths, system utilities such as msiexec.exe and regsvr32.exe, and also filter out modifications involving well-known addins from your environment, such as those provided by Microsoft for Excel, Outlook, and others. In addition, monitor for changes initiated by the Office ClickToRun executable, or from known antivirus registry modifications, as these are typically benign.\n\nShould ensure capturing specific fields like SecurityID, ObjectName, OldValueType, and NewValueType for detailed analysis of such events. Be aware of legitimate cases where software installations or administrative actions may modify these ASEP locations, which are to be expected and could contribute to false positives.\n\nThis approach uses a multi-layered filter strategy to focus on unauthorized modifications while attempting to exclude known, legitimate activities, with a medium level of confidence in the detection of potential malicious behavior targeting the autostart extensibility points within the Windows registry, aiming at gaining persistence or unauthorized execution through Microsoft Office applications."
    }
  },
  {
    "instruction": "Explain how should I detect the following: potential PowerShell commands or code within registry run keys",
    "context": "",
    "output": "In order to detect potential PowerShell commands or code within registry run keys, you should monitor Windows registry settings specifically for changes, with a focus on those registry keys that control programs which automatically execute when a user logs into a system. The emphasis is on monitoring the registry's \"SetValue\" event types, particularly those affecting the '\\Software\\Microsoft\\Windows\\CurrentVersion\\Run' paths, which also include \"RunOnce\" and \"RunOnceEx\" registry keys. These keys are of interest because they are commonly used by attackers to achieve persistence by ensuring malicious scripts or programs are executed every time the system starts.\n\nDetection should zero in on modifications that include specific PowerShell-related strings within the details of the registry modification. This includes, but is not limited to, instances where PowerShell ('powershell', 'pwsh') is invoked, especially in combination with flags and methods designed to hide the execution window, bypass execution policies, or execute encoded commands. Some key indicators include the presence of strings such as 'FromBase64String', DownloadFile', 'DownloadString', 'Invoke-Expression', 'IEX (', 'Invoke-Command', and 'Invoke-WebRequest'. These can be indicative of attempts to download and execute malicious code from external sources or to execute encoded scripts that are hard to detect through conventional means.\n\nHowever, it's important to consider the potential for false positives, as legitimate administrative scripts or third-party tools may also use similar methods for benign purposes. Establishing a baseline of normal registry and PowerShell usage within your environment will be crucial in distinguishing between malicious activities and legitimate administrative tasks. The level of concern for these detected activities is medium, which implies that while they are not definitively malicious on their own, they warrant further investigation due to their potential misuse by attackers for persistence, script execution, or other unauthorized activities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential PowerShell commands or code within registry run keys",
      "answer": "In order to detect potential PowerShell commands or code within registry run keys, you should monitor Windows registry settings specifically for changes, with a focus on those registry keys that control programs which automatically execute when a user logs into a system. The emphasis is on monitoring the registry's \"SetValue\" event types, particularly those affecting the '\\Software\\Microsoft\\Windows\\CurrentVersion\\Run' paths, which also include \"RunOnce\" and \"RunOnceEx\" registry keys. These keys are of interest because they are commonly used by attackers to achieve persistence by ensuring malicious scripts or programs are executed every time the system starts.\n\nDetection should zero in on modifications that include specific PowerShell-related strings within the details of the registry modification. This includes, but is not limited to, instances where PowerShell ('powershell', 'pwsh') is invoked, especially in combination with flags and methods designed to hide the execution window, bypass execution policies, or execute encoded commands. Some key indicators include the presence of strings such as 'FromBase64String', DownloadFile', 'DownloadString', 'Invoke-Expression', 'IEX (', 'Invoke-Command', and 'Invoke-WebRequest'. These can be indicative of attempts to download and execute malicious code from external sources or to execute encoded scripts that are hard to detect through conventional means.\n\nHowever, it's important to consider the potential for false positives, as legitimate administrative scripts or third-party tools may also use similar methods for benign purposes. Establishing a baseline of normal registry and PowerShell usage within your environment will be crucial in distinguishing between malicious activities and legitimate administrative tasks. The level of concern for these detected activities is medium, which implies that while they are not definitively malicious on their own, they warrant further investigation due to their potential misuse by attackers for persistence, script execution, or other unauthorized activities."
    }
  },
  {
    "instruction": "Explain how should I detect the following: This detection method points out highly relevant Antivirus events",
    "context": "",
    "output": "In order to point out highly relevant Antivirus events, you should focus on monitoring application logs within Windows systems. Specifically, keep an eye out for the appearance of certain keywords that signify the usage or presence of known hacking tools, backdoors, and other malicious software. These can include, but are not limited to, 'Adfind', variations of 'Backdoor' with different file extensions such as '.ASP', '.JSP', '.PHP', hacking tools and kits like 'Mimikatz', 'Metasploit', 'Meterpreter', and ransomware indicators like 'GrandCrab', 'Phobos'. \n\nIt is also crucial to note not all detected keywords may represent a threat. For example, the presence of tools sometimes categorized as hack tools like 'Keygen' or 'Crack', and specific executable files like 'anti_ransomware_service.exe' and 'cyber-protect-service.exe', might not always indicate malicious activity. These could stem from legitimate use cases or software piracy tools, which, while potentially illegal, do not necessarily pose a cybersecurity threat in the same way as malware or ransomware does.\n\nAdditionally, adjusting the informational level to 4 and noticing if any events are triggered by 'Microsoft-Windows-RestartManager' can help fine-tune the detection process, reducing the likelihood of false positives.\n\nThe actions and tools mentioned are often linked to specific tactics and techniques detailed in the MITRE ATT&CK framework, such as credential access, execution through backdoors, and defense evasion through the use of obfuscated malware or ransomware. By keeping track of these signs in application logs, you can effectively spot indications of unauthorized or malicious activities within a Windows environment.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "This detection method points out highly relevant Antivirus events",
      "answer": "In order to point out highly relevant Antivirus events, you should focus on monitoring application logs within Windows systems. Specifically, keep an eye out for the appearance of certain keywords that signify the usage or presence of known hacking tools, backdoors, and other malicious software. These can include, but are not limited to, 'Adfind', variations of 'Backdoor' with different file extensions such as '.ASP', '.JSP', '.PHP', hacking tools and kits like 'Mimikatz', 'Metasploit', 'Meterpreter', and ransomware indicators like 'GrandCrab', 'Phobos'. \n\nIt is also crucial to note not all detected keywords may represent a threat. For example, the presence of tools sometimes categorized as hack tools like 'Keygen' or 'Crack', and specific executable files like 'anti_ransomware_service.exe' and 'cyber-protect-service.exe', might not always indicate malicious activity. These could stem from legitimate use cases or software piracy tools, which, while potentially illegal, do not necessarily pose a cybersecurity threat in the same way as malware or ransomware does.\n\nAdditionally, adjusting the informational level to 4 and noticing if any events are triggered by 'Microsoft-Windows-RestartManager' can help fine-tune the detection process, reducing the likelihood of false positives.\n\nThe actions and tools mentioned are often linked to specific tactics and techniques detailed in the MITRE ATT&CK framework, such as credential access, execution through backdoors, and defense evasion through the use of obfuscated malware or ransomware. By keeping track of these signs in application logs, you can effectively spot indications of unauthorized or malicious activities within a Windows environment."
    }
  },
  {
    "instruction": "Can you explain how to detect: addition of office test registry that allows a user to specify an arbitrary DLL that will be executed every time an Office application is started",
    "context": "",
    "output": "Certainly!\n\nIn order to detect the addition of office test registry that allows a user to specify an arbitrary DLL that will be executed every time an Office application is started, you should: Monitor Windows registry events focusing on the creation or modification of specific registry keys. These keys include 'HKCU\\Software\\Microsoft\\Office test\\Special\\Perf' and 'HKLM\\Software\\Microsoft\\Office test\\Special\\Perf'. Any alterations or additions to these registry paths could indicate an attempt to execute unauthorized or malicious DLL files through Office applications. It is considered unlikely to encounter false positives with this detection strategy, and the severity level of this activity is assessed as medium. This detection is important for identifying potential persistence or privilege escalation attempts that leverage Office applications as a vector.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "addition of office test registry that allows a user to specify an arbitrary DLL that will be executed every time an Office application is started",
      "answer": "In order to detect the addition of office test registry that allows a user to specify an arbitrary DLL that will be executed every time an Office application is started, you should: Monitor Windows registry events focusing on the creation or modification of specific registry keys. These keys include 'HKCU\\Software\\Microsoft\\Office test\\Special\\Perf' and 'HKLM\\Software\\Microsoft\\Office test\\Special\\Perf'. Any alterations or additions to these registry paths could indicate an attempt to execute unauthorized or malicious DLL files through Office applications. It is considered unlikely to encounter false positives with this detection strategy, and the severity level of this activity is assessed as medium. This detection is important for identifying potential persistence or privilege escalation attempts that leverage Office applications as a vector."
    }
  },
  {
    "instruction": "How can I detect: execution of PowerShell via creation of named pipe starting with PSHost",
    "context": "",
    "output": "In order to detect execution of PowerShell via creation of named pipe starting with PSHost, you should: Focus on monitoring the creation of named pipes in Windows environments, specifically looking for any instances where the pipe name begins with '\\PSHost'. This detection requires you to have logging for Named Pipe Events enabled in your Sysmon configuration, particularly looking out for Event ID 17 and Event ID 18. It's recommended to use or verify against popular Sysmon configurations available online, such as those by SwiftOnSecurity, Neo23x0, or Olaf Hartong. These configurations need to be in place as they are instrumental in capturing the required event data. Testing the detection can be achieved through the use of specific PowerShell scripts designed to simulate named pipe creation that follows the patterns attackers might use. It's important to note that while this method aims to identify malicious activity related to PowerShell execution, the possibility of encountering unknown false positives exists - meaning that not all detections might represent genuine threats. The focus is on providing informational level insights into potential suspicious activities involving PowerShell and named pipes, aiding in the broader strategy of mitigating tactics that involve the execution and automation based on PowerShell scripts, particularly those initiated by adversaries through named pipes that adhere to a naming convention starting with 'PSHost'.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of PowerShell via creation of named pipe starting with PSHost",
      "answer": "In order to detect execution of PowerShell via creation of named pipe starting with PSHost, you should: Focus on monitoring the creation of named pipes in Windows environments, specifically looking for any instances where the pipe name begins with '\\PSHost'. This detection requires you to have logging for Named Pipe Events enabled in your Sysmon configuration, particularly looking out for Event ID 17 and Event ID 18. It's recommended to use or verify against popular Sysmon configurations available online, such as those by SwiftOnSecurity, Neo23x0, or Olaf Hartong. These configurations need to be in place as they are instrumental in capturing the required event data. Testing the detection can be achieved through the use of specific PowerShell scripts designed to simulate named pipe creation that follows the patterns attackers might use. It's important to note that while this method aims to identify malicious activity related to PowerShell execution, the possibility of encountering unknown false positives exists - meaning that not all detections might represent genuine threats. The focus is on providing informational level insights into potential suspicious activities involving PowerShell and named pipes, aiding in the broader strategy of mitigating tactics that involve the execution and automation based on PowerShell scripts, particularly those initiated by adversaries through named pipes that adhere to a naming convention starting with 'PSHost'."
    }
  },
  {
    "instruction": "How can I detect: execution of Microsoft Defender's CLI process (MpCmdRun.exe) from the non-default directory which may be an attempt to sideload arbitrary DLL",
    "context": "",
    "output": "In order to detect execution of Microsoft Defender's CLI process (MpCmdRun.exe) from the non-default directory which may be an attempt to sideload arbitrary DLL, you should: Monitor for the creation of processes specifically ending with '\\MpCmdRun.exe' on Windows systems, focusing on those originating from directories other than the standard legitimate paths which include 'C:\\Program Files\\Windows Defender\\', 'C:\\ProgramData\\Microsoft\\Windows Defender\\Platform\\', 'C:\\Windows\\winsxs\\', and 'C:\\Program Files\\Microsoft Security Client\\MpCmdRun.exe'. This detection targets scenarios where an attacker might attempt to execute malicious code by masquerading as the legitimate Microsoft Defender Command Line Utility, indicating a high level of suspicion for such activities not originating from the aforementioned legitimate directories.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of Microsoft Defender's CLI process (MpCmdRun.exe) from the non-default directory which may be an attempt to sideload arbitrary DLL",
      "answer": "In order to detect execution of Microsoft Defender's CLI process (MpCmdRun.exe) from the non-default directory which may be an attempt to sideload arbitrary DLL, you should: Monitor for the creation of processes specifically ending with '\\MpCmdRun.exe' on Windows systems, focusing on those originating from directories other than the standard legitimate paths which include 'C:\\Program Files\\Windows Defender\\', 'C:\\ProgramData\\Microsoft\\Windows Defender\\Platform\\', 'C:\\Windows\\winsxs\\', and 'C:\\Program Files\\Microsoft Security Client\\MpCmdRun.exe'. This detection targets scenarios where an attacker might attempt to execute malicious code by masquerading as the legitimate Microsoft Defender Command Line Utility, indicating a high level of suspicion for such activities not originating from the aforementioned legitimate directories."
    }
  },
  {
    "instruction": "Explain how should I detect the following: detects execution of psexec or paexec with renamed service name, this rule helps to filter out the noise if psexec is used for legit purposes or if attacker uses a different psexec client other than sysinternal one",
    "context": "",
    "output": "In order to detect execution of psexec or paexec with renamed service name, this rule helps to filter out the noise if psexec is used for legit purposes or if attacker uses a different psexec client other than sysinternal one, you should: Monitor SMB file service logs for specific patterns that indicate the use of remote execution tools such as psexec or paexec, which are often utilized by attackers to execute commands on remote systems. Focus on logs where the file path includes both backslashes \"\\\\\" and the special IPC$ share '\\IPC$', indicating an attempt to access administrative shares typical in lateral movement activities. Moreover, look for files with names ending in '-stdin', '-stdout', or '-stderr', which are indicative of input/output redirection commonly used by these tools. It's important to exclude any activity where the file name starts with 'PSEXESVC', as this is the default service name used by psexec for legitimate purposes. The detection of such activities is considered high priority due to the potential misuse for malicious purposes, particularly in lateral movement during an attack. Pay attention to any false positives that may arise, although they are currently unknown, and continuously refine detection methods to improve accuracy.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "detects execution of psexec or paexec with renamed service name, this rule helps to filter out the noise if psexec is used for legit purposes or if attacker uses a different psexec client other than sysinternal one",
      "answer": "In order to detect execution of psexec or paexec with renamed service name, this rule helps to filter out the noise if psexec is used for legit purposes or if attacker uses a different psexec client other than sysinternal one, you should: Monitor SMB file service logs for specific patterns that indicate the use of remote execution tools such as psexec or paexec, which are often utilized by attackers to execute commands on remote systems. Focus on logs where the file path includes both backslashes \"\\\\\" and the special IPC$ share '\\IPC$', indicating an attempt to access administrative shares typical in lateral movement activities. Moreover, look for files with names ending in '-stdin', '-stdout', or '-stderr', which are indicative of input/output redirection commonly used by these tools. It's important to exclude any activity where the file name starts with 'PSEXESVC', as this is the default service name used by psexec for legitimate purposes. The detection of such activities is considered high priority due to the potential misuse for malicious purposes, particularly in lateral movement during an attack. Pay attention to any false positives that may arise, although they are currently unknown, and continuously refine detection methods to improve accuracy."
    }
  },
  {
    "instruction": "Can you explain how to detect: Execution via SyncInvoke in CL_Invocation.ps1 module",
    "context": "",
    "output": "Certainly!\n\nIn order to detect Execution via SyncInvoke in CL_Invocation.ps1 module, you should: identify and monitor for the execution of processes on Windows systems where the command line involves specific references to both the 'CL_Invocation.ps1' script and the 'SyncInvoke' command. This is indicative of an attempt to execute malicious code through the exploitation of the 'CL_Invocation.ps1' Powershell module, which is not commonly used in standard operations. Monitoring for these indicators within process creation logs is critical. It is important to be aware that there might be rare legitimate uses of this pattern, although they are categorized as high-level threats due to their unusual nature and potential for abuse in executing unauthorized or malicious scripts and commands. The tactics associated with this attack include Execution and potentially Privilege Escalation, as the use of PowerShell with specific commands like this can be leveraged by attackers to execute code with elevated privileges.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Execution via SyncInvoke in CL_Invocation.ps1 module",
      "answer": "In order to detect Execution via SyncInvoke in CL_Invocation.ps1 module, you should: identify and monitor for the execution of processes on Windows systems where the command line involves specific references to both the 'CL_Invocation.ps1' script and the 'SyncInvoke' command. This is indicative of an attempt to execute malicious code through the exploitation of the 'CL_Invocation.ps1' Powershell module, which is not commonly used in standard operations. Monitoring for these indicators within process creation logs is critical. It is important to be aware that there might be rare legitimate uses of this pattern, although they are categorized as high-level threats due to their unusual nature and potential for abuse in executing unauthorized or malicious scripts and commands. The tactics associated with this attack include Execution and potentially Privilege Escalation, as the use of PowerShell with specific commands like this can be leveraged by attackers to execute code with elevated privileges."
    }
  },
  {
    "instruction": "How can I detect: changes to the registry values related to outlook that indicates that a reminder was triggered for a Note or Task item. This could be a sign of exploitation of CVE-2023-23397. Further investigation is required to determine the success of an exploitation.",
    "context": "",
    "output": "In order to detect changes to the registry values related to outlook that indicates that a reminder was triggered for a Note or Task item, which could be a sign of exploitation of CVE-2023-23397, you should: Monitor the Windows Registry for modifications. Specifically, focus on registry sets associated with Microsoft Office and Outlook, especially those changes made to the Tasks and Notes sections. These modifications are identified by the 'SetValue' event type in the registry logs. It's important to note that sometimes legitimate actions, like receiving reminders for tasks or notes, can also trigger this monitoring condition, so these instances are considered low-level alerts and require further investigation to confirm any actual exploitation attempt.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "changes to the registry values related to outlook that indicates that a reminder was triggered for a Note or Task item. This could be a sign of exploitation of CVE-2023-23397. Further investigation is required to determine the success of an exploitation.",
      "answer": "In order to detect changes to the registry values related to outlook that indicates that a reminder was triggered for a Note or Task item, which could be a sign of exploitation of CVE-2023-23397, you should: Monitor the Windows Registry for modifications. Specifically, focus on registry sets associated with Microsoft Office and Outlook, especially those changes made to the Tasks and Notes sections. These modifications are identified by the 'SetValue' event type in the registry logs. It's important to note that sometimes legitimate actions, like receiving reminders for tasks or notes, can also trigger this monitoring condition, so these instances are considered low-level alerts and require further investigation to confirm any actual exploitation attempt."
    }
  },
  {
    "instruction": "How to detect: Detect use of the Windows 8.3 short name. Which could be used as a method to avoid command-line detection",
    "context": "",
    "output": "In order to detect the use of the Windows 8.3 short name, which could be used as a method to avoid command-line detection, you should: Monitor for process creation events on Windows systems that involve command line parameters containing short filenames, specifically those that end in familiar executable and script extensions like '.exe', '.bat', '.msi', '.vbe', '.vbs', '.dll', '.ps1', '.js', and '.hta'. These can be signifiers of obfuscated or malicious activity intending to bypass simple detection mechanisms that look for known bad filenames or paths. It is crucial to exclude certain parent processes, such as those related to 'WebEx\\WebexHost.exe' and 'thor\\thor64.exe', which might legitimately use short names in their operation. Additionally, command lines directly invoking known paths, such as 'C:\\xampp\\vcredist\\VCREDI~1.EXE', should be filtered out to reduce false positives. Nevertheless, be mindful that this detection strategy can lead to false alarms due to legitimate applications occasionally using short name notation; thus, further investigation into the relationships between parent and child processes is advised when alerts arise.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Detect use of the Windows 8.3 short name. Which could be used as a method to avoid command-line detection",
      "answer": "In order to detect the use of the Windows 8.3 short name, which could be used as a method to avoid command-line detection, you should: Monitor for process creation events on Windows systems that involve command line parameters containing short filenames, specifically those that end in familiar executable and script extensions like '.exe', '.bat', '.msi', '.vbe', '.vbs', '.dll', '.ps1', '.js', and '.hta'. These can be signifiers of obfuscated or malicious activity intending to bypass simple detection mechanisms that look for known bad filenames or paths. It is crucial to exclude certain parent processes, such as those related to 'WebEx\\WebexHost.exe' and 'thor\\thor64.exe', which might legitimately use short names in their operation. Additionally, command lines directly invoking known paths, such as 'C:\\xampp\\vcredist\\VCREDI~1.EXE', should be filtered out to reduce false positives. Nevertheless, be mindful that this detection strategy can lead to false alarms due to legitimate applications occasionally using short name notation; thus, further investigation into the relationships between parent and child processes is advised when alerts arise."
    }
  },
  {
    "instruction": "Please help me detect the following: suspicious execution of \"PDQDeployRunner\" which is part of the PDQDeploy service stack that is responsible for executing commands and packages on a remote machines",
    "context": "",
    "output": "Sure!\nIn order to detect suspicious execution of \"PDQDeployRunner\" which is part of the PDQDeploy service stack that is responsible for executing commands and packages on remote machines, you should: monitor the creation of processes on Windows systems, particularly focusing on the parent process image name containing 'PDQDeployRunner-'. It's essential to scrutinize specific executable files and scripts, notably those ending with extensions such as '\\wscript.exe', '\\cscript.exe', '\\rundll32.exe', '\\regsvr32.exe', '\\wmic.exe', '\\msiexec.exe', '\\mshta.exe', '\\csc.exe', '\\dllhost.exe', '\\certutil.exe', '\\scriptrunner.exe', '\\bash.exe', and '\\wsl.exe'. Additionally, keep an eye out for executable images located in suspicious directories like 'C:\\Users\\Public\\', 'C:\\ProgramData\\', 'C:\\Windows\\TEMP\\', and '\\AppData\\Local\\Temp'. It's also advised to be vigilant of command-line parameters that contain potential indications of malicious activity, such as 'iex ', 'Invoke-', 'DownloadString', 'http', ' -enc ', ' -encodedcommand ', 'FromBase64String', ' -decode ', and ' -w hidden'. This approach ensures that any unauthorized or malicious use of the PDQDeploy tool to execute questionable commands alerts you, while acknowledging that there could be legitimate uses of these parameters and paths within organization-approved procedures.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious execution of \"PDQDeployRunner\" which is part of the PDQDeploy service stack that is responsible for executing commands and packages on a remote machines",
      "answer": "In order to detect suspicious execution of \"PDQDeployRunner\" which is part of the PDQDeploy service stack that is responsible for executing commands and packages on remote machines, you should: monitor the creation of processes on Windows systems, particularly focusing on the parent process image name containing 'PDQDeployRunner-'. It's essential to scrutinize specific executable files and scripts, notably those ending with extensions such as '\\wscript.exe', '\\cscript.exe', '\\rundll32.exe', '\\regsvr32.exe', '\\wmic.exe', '\\msiexec.exe', '\\mshta.exe', '\\csc.exe', '\\dllhost.exe', '\\certutil.exe', '\\scriptrunner.exe', '\\bash.exe', and '\\wsl.exe'. Additionally, keep an eye out for executable images located in suspicious directories like 'C:\\Users\\Public\\', 'C:\\ProgramData\\', 'C:\\Windows\\TEMP\\', and '\\AppData\\Local\\Temp'. It's also advised to be vigilant of command-line parameters that contain potential indications of malicious activity, such as 'iex ', 'Invoke-', 'DownloadString', 'http', ' -enc ', ' -encodedcommand ', 'FromBase64String', ' -decode ', and ' -w hidden'. This approach ensures that any unauthorized or malicious use of the PDQDeploy tool to execute questionable commands alerts you, while acknowledging that there could be legitimate uses of these parameters and paths within organization-approved procedures."
    }
  },
  {
    "instruction": "Can you explain how to detect: Automatically lock workstation sessions after a standard period of inactivity.\nThe case is not applicable for Unix OS. Supported OS - Windows 2008 R2 and 7, Windows 2012 R2 and 8.1, Windows 2016 and 10 Windows Server 2019.\n",
    "context": "",
    "output": "Certainly!\n\nIn order to automatically lock workstation sessions after a standard period of inactivity, you should: Monitor security logs from Windows-based operating systems, specifically looking for Event ID 4800. This event is indicative of a workstation being locked, either due to a user manually locking it or the system automatically doing so after a predetermined period of inactivity. This monitoring is relevant for a range of Windows versions including Windows 2008 R2 and 7, Windows 2012 R2 and 8.1, Windows 2016 and 10, as well as Windows Server 2019. Note that this practice targets enhancing system security by detecting when sessions are secured, thus reducing the window of opportunity for unauthorized access. It's important to consider that instances triggering this event might not always represent security-relevant actions, as false positives are unknown and the severity level of this rule is considered low.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Automatically lock workstation sessions after a standard period of inactivity.\nThe case is not applicable for Unix OS. Supported OS - Windows 2008 R2 and 7, Windows 2012 R2 and 8.1, Windows 2016 and 10 Windows Server 2019.\n",
      "answer": "In order to automatically lock workstation sessions after a standard period of inactivity, you should: Monitor security logs from Windows-based operating systems, specifically looking for Event ID 4800. This event is indicative of a workstation being locked, either due to a user manually locking it or the system automatically doing so after a predetermined period of inactivity. This monitoring is relevant for a range of Windows versions including Windows 2008 R2 and 7, Windows 2012 R2 and 8.1, Windows 2016 and 10, as well as Windows Server 2019. Note that this practice targets enhancing system security by detecting when sessions are secured, thus reducing the window of opportunity for unauthorized access. It's important to consider that instances triggering this event might not always represent security-relevant actions, as false positives are unknown and the severity level of this rule is considered low."
    }
  },
  {
    "instruction": "Can you explain how to detect: anyone attempting a backup for the DPAPI Master Key. This events gets generated at the source and not the Domain Controller.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect anyone attempting a backup for the DPAPI Master Key, which is an event generated at the source and not the Domain Controller, you should monitor security logs from Windows systems for the event ID 4692. This specific event ID is triggered when there's an attempt to backup the Data Protection API (DPAPI) Master Key. Pay particular attention to fields such as ComputerName, SubjectDomainName, and SubjectUserName within these logs to help identify the source and context of the attempt. It's worth noting that false positives may occur if a computer is part of a domain because DPAPI employs a backup mechanism to allow unprotection of the data, which can trigger this event. The risk level associated with this detection is considered medium.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "anyone attempting a backup for the DPAPI Master Key. This events gets generated at the source and not the Domain Controller.",
      "answer": "In order to detect anyone attempting a backup for the DPAPI Master Key, which is an event generated at the source and not the Domain Controller, you should monitor security logs from Windows systems for the event ID 4692. This specific event ID is triggered when there's an attempt to backup the Data Protection API (DPAPI) Master Key. Pay particular attention to fields such as ComputerName, SubjectDomainName, and SubjectUserName within these logs to help identify the source and context of the attempt. It's worth noting that false positives may occur if a computer is part of a domain because DPAPI employs a backup mechanism to allow unprotection of the data, which can trigger this event. The risk level associated with this detection is considered medium."
    }
  },
  {
    "instruction": "Explain how should I detect the following: execution of the \"del\" builtin command to remove files using greedy/wildcard expression. This is often used by malware to delete content of folders that perhaps contains the initial malware infection or to delete evidence.",
    "context": "",
    "output": "In order to detect execution of the \"del\" builtin command to remove files using greedy/wildcard expression, which is often used by malware to delete content of folders that perhaps contains the initial malware infection or to delete evidence, you should: Monitor process creation logs on Windows systems for activity related to the command prompt executable (cmd.exe) either by the image name ending with '\\cmd.exe' or the original file name being 'Cmd.Exe'. Specifically, look for command lines that include 'del ' or 'erase ', coupled with wildcards targeting '.dll' or '.exe' files, such as in the patterns '\\\\*.dll' or '\\\\*.exe'. This detection is crucial as it helps in identifying attempts to remove critical files, potentially as part of an attack to hide malicious activity or the traces of an infection. The rule treats unknown cases as potential false positives and assigns a medium severity level to such detection efforts.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of the \"del\" builtin command to remove files using greedy/wildcard expression. This is often used by malware to delete content of folders that perhaps contains the initial malware infection or to delete evidence.",
      "answer": "In order to detect execution of the \"del\" builtin command to remove files using greedy/wildcard expression, which is often used by malware to delete content of folders that perhaps contains the initial malware infection or to delete evidence, you should: Monitor process creation logs on Windows systems for activity related to the command prompt executable (cmd.exe) either by the image name ending with '\\cmd.exe' or the original file name being 'Cmd.Exe'. Specifically, look for command lines that include 'del ' or 'erase ', coupled with wildcards targeting '.dll' or '.exe' files, such as in the patterns '\\\\*.dll' or '\\\\*.exe'. This detection is crucial as it helps in identifying attempts to remove critical files, potentially as part of an attack to hide malicious activity or the traces of an infection. The rule treats unknown cases as potential false positives and assigns a medium severity level to such detection efforts."
    }
  },
  {
    "instruction": "Can you explain how to detect: This rule triggers on user accounts that are added to the local Administrators group, which could be legitimate activity or a sign of privilege escalation activity",
    "context": "",
    "output": "Certainly!\n\nIn order to detect when user accounts are added to the local Administrators group, which might indicate either legitimate administrative actions or potential privilege escalation activities, you should monitor Windows Security logs for event ID 4732. This event signals when a user account has been added to a specific group. Specifically, pay attention to instances where the target user name begins with \"Administr,\" or when the target SID corresponds to the well-known SID for the Administrators group, \"S-1-5-32-544.\" It is essential, however, to exclude any entries where the subject user name ends with a \"$\" symbol, as this usually denotes a computer account rather than a human user, reducing the likelihood of it being a malicious activity. Be aware that such detection might capture legitimate administrative activities, so it's categorized with a medium level of confidence. The focus is on ensuring the security of sensitive groups by identifying unauthorized attempts to gain elevated privileges, aligning with known tactics and techniques of privilege escalation.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "This rule triggers on user accounts that are added to the local Administrators group, which could be legitimate activity or a sign of privilege escalation activity",
      "answer": "In order to detect when user accounts are added to the local Administrators group, which might indicate either legitimate administrative actions or potential privilege escalation activities, you should monitor Windows Security logs for event ID 4732. This event signals when a user account has been added to a specific group. Specifically, pay attention to instances where the target user name begins with \"Administr,\" or when the target SID corresponds to the well-known SID for the Administrators group, \"S-1-5-32-544.\" It is essential, however, to exclude any entries where the subject user name ends with a \"$\" symbol, as this usually denotes a computer account rather than a human user, reducing the likelihood of it being a malicious activity. Be aware that such detection might capture legitimate administrative activities, so it's categorized with a medium level of confidence. The focus is on ensuring the security of sensitive groups by identifying unauthorized attempts to gain elevated privileges, aligning with known tactics and techniques of privilege escalation."
    }
  },
  {
    "instruction": "How to detect: suspicious command lines that look as if they would create symbolic links to /etc/passwd",
    "context": "",
    "output": "In order to detect suspicious command lines that look as if they would create symbolic links to /etc/passwd, you should monitor for specific command line activities within Linux systems. Specifically, you should look for occurrences of command lines that include 'ln -s -f /etc/passwd' or 'ln -s /etc/passwd'. These commands are used to create symbolic links, and when they point to critical system files like /etc/passwd, it could indicate an attempt to gain unauthorized access to system credentials or manipulate user information. It's important to treat any detection of these commands with a high level of suspicion. There may be legitimate uses for these commands in certain contexts, but due to the potential for abuse, any detection should be carefully investigated to rule out malicious activity. This detection is integral to identifying tactics that involve unauthorized access or manipulation of system files, which could be indicative of broader malicious behaviors within a network.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious command lines that look as if they would create symbolic links to /etc/passwd",
      "answer": "In order to detect suspicious command lines that look as if they would create symbolic links to /etc/passwd, you should monitor for specific command line activities within Linux systems. Specifically, you should look for occurrences of command lines that include 'ln -s -f /etc/passwd' or 'ln -s /etc/passwd'. These commands are used to create symbolic links, and when they point to critical system files like /etc/passwd, it could indicate an attempt to gain unauthorized access to system credentials or manipulate user information. It's important to treat any detection of these commands with a high level of suspicion. There may be legitimate uses for these commands in certain contexts, but due to the potential for abuse, any detection should be carefully investigated to rule out malicious activity. This detection is integral to identifying tactics that involve unauthorized access or manipulation of system files, which could be indicative of broader malicious behaviors within a network."
    }
  },
  {
    "instruction": "Explain how should I detect the following: Malleable OneDrive Profile",
    "context": "",
    "output": "In order to Detect Malleable OneDrive Profile, you should: Monitor network traffic through your proxy logs focusing on GET requests sent to onedrive.live.com. Specifically, look for URLs that end with the parameter '?manifest=wac'. It's essential to filter out and not consider URLs that start with 'http' and contain '://onedrive.live.com/' within them as these are not indicative of the malicious activity this mechanism aims to detect. This detection strategy is vital for identifying attempts to misuse or mimic OneDrive for potentially malicious purposes, marking it with a high importance. Note that there may be unknown scenarios leading to false positives in this detection approach. The associated tactics and techniques include Exfiltration Over Web Service and Data Obfuscation, indicating an attacker's attempt to stealthily exfiltrate data or conceal their actions using legitimate web services.\n",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Malleable OneDrive Profile",
      "answer": "In order to Detect Malleable OneDrive Profile, you should: Monitor network traffic through your proxy logs focusing on GET requests sent to onedrive.live.com. Specifically, look for URLs that end with the parameter '?manifest=wac'. It's essential to filter out and not consider URLs that start with 'http' and contain '://onedrive.live.com/' within them as these are not indicative of the malicious activity this mechanism aims to detect. This detection strategy is vital for identifying attempts to misuse or mimic OneDrive for potentially malicious purposes, marking it with a high importance. Note that there may be unknown scenarios leading to false positives in this detection approach. The associated tactics and techniques include Exfiltration Over Web Service and Data Obfuscation, indicating an attacker's attempt to stealthily exfiltrate data or conceal their actions using legitimate web services.\n"
    }
  },
  {
    "instruction": "How to detect: system information discovery commands",
    "context": "",
    "output": "In order to detect system information discovery commands, you should focus on monitoring Linux system logs, specifically those managed by auditd (the Linux Audit daemon). Look for any activity where the system's critical paths such as '/sys/class/dmi/id/bios_version', '/sys/class/dmi/id/product_name', '/sys/class/dmi/id/chassis_vendor', '/proc/scsi/scsi', '/proc/ide/hd0/model', '/proc/version', and multiple files that include 'version', 'release', or 'issue' within the '/etc' directory are accessed. These paths are essential because they contain detailed information about the system's BIOS version, product name, chassis vendor, SCSI devices, primary IDE device model, and overall system version and release information. Access to these files may indicate an attempt to discover valuable system information. It is, however, important to note that not all access to these files is malicious as they may be accessed during legitimate administration activities. Hence, any detection should be considered informational and reviewed within the context it was detected to determine if it matches known administration patterns or if it's indicative of reconnaissance by an unauthorized user. This monitoring strategy aligns with tactics and techniques related to reconnaissance, specifically those aimed at gathering valuable system configuration details which could be leveraged in further attacks.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "system information discovery commands",
      "answer": "In order to detect system information discovery commands, you should focus on monitoring Linux system logs, specifically those managed by auditd (the Linux Audit daemon). Look for any activity where the system's critical paths such as '/sys/class/dmi/id/bios_version', '/sys/class/dmi/id/product_name', '/sys/class/dmi/id/chassis_vendor', '/proc/scsi/scsi', '/proc/ide/hd0/model', '/proc/version', and multiple files that include 'version', 'release', or 'issue' within the '/etc' directory are accessed. These paths are essential because they contain detailed information about the system's BIOS version, product name, chassis vendor, SCSI devices, primary IDE device model, and overall system version and release information. Access to these files may indicate an attempt to discover valuable system information. It is, however, important to note that not all access to these files is malicious as they may be accessed during legitimate administration activities. Hence, any detection should be considered informational and reviewed within the context it was detected to determine if it matches known administration patterns or if it's indicative of reconnaissance by an unauthorized user. This monitoring strategy aligns with tactics and techniques related to reconnaissance, specifically those aimed at gathering valuable system configuration details which could be leveraged in further attacks."
    }
  },
  {
    "instruction": "Can you explain how to detect: Invoke-Mimikatz PowerShell script and alike. Mimikatz is a credential dumper capable of obtaining plaintext Windows account logins and passwords.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect Invoke-Mimikatz PowerShell script and alike, which are known for being capable of obtaining plaintext Windows account logins and passwords, you should focus on monitoring PowerShell scripts on Windows platforms. Specifically, look for scripts containing specific blocks of text indicative of credential dumping activities. Key patterns to watch for include the presence of 'DumpCreds' and 'DumpCerts' together, the string 'sekurlsa::logonpasswords', or both 'crypto::certificates' and 'CERT_SYSTEM_STORE_LOCAL_MACHINE' within the same block of script text. Any script matching one of these patterns should be considered suspicious of attempting to dump credentials or certificates, commonly associated with malicious activities. However, it's crucial to note that tools like Mimikatz can also be used legitimately for security testing, which could lead to potential false positives. Given the significant security implications, any detection on this level is deemed of high importance.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Invoke-Mimikatz PowerShell script and alike. Mimikatz is a credential dumper capable of obtaining plaintext Windows account logins and passwords.",
      "answer": "In order to detect Invoke-Mimikatz PowerShell script and alike, which are known for being capable of obtaining plaintext Windows account logins and passwords, you should focus on monitoring PowerShell scripts on Windows platforms. Specifically, look for scripts containing specific blocks of text indicative of credential dumping activities. Key patterns to watch for include the presence of 'DumpCreds' and 'DumpCerts' together, the string 'sekurlsa::logonpasswords', or both 'crypto::certificates' and 'CERT_SYSTEM_STORE_LOCAL_MACHINE' within the same block of script text. Any script matching one of these patterns should be considered suspicious of attempting to dump credentials or certificates, commonly associated with malicious activities. However, it's crucial to note that tools like Mimikatz can also be used legitimately for security testing, which could lead to potential false positives. Given the significant security implications, any detection on this level is deemed of high importance."
    }
  },
  {
    "instruction": "How to detect: base64 encoded .NET reflective loading of Assembly",
    "context": "",
    "output": "In order to detect base64 encoded .NET reflective loading of Assembly, you should: focus on monitoring process creation logs within Windows environments. Look for command line executions that contain specific base64 encoded strings which are indicative of attempts to use reflection for the loading of .NET assemblies. This technique typically involves obscure or obfuscated base64 strings that, when decoded, reference the .NET reflection methods such as `[Reflection.Assembly]::Load(` or variations thereof, often with additional obfuscation to evade simple detection mechanisms. Since this behavior is rarely found in legitimate system activity and given its high potential for misuse in executing malicious code via reflection (a method that allows for the runtime loading of .NET assemblies), it is regarded with a high level of suspicion. Detected occurrences should be closely inspected to determine their nature and origin, though they are unlikely to represent false positives. This monitoring strategy is aligned with identifying malicious activities related to the execution and persistence tactics commonly associated with various forms of malware and targeted attacks, making it an essential practice for defending against advanced threats leveraging .NET assemblies.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "base64 encoded .NET reflective loading of Assembly",
      "answer": "In order to detect base64 encoded .NET reflective loading of Assembly, you should: focus on monitoring process creation logs within Windows environments. Look for command line executions that contain specific base64 encoded strings which are indicative of attempts to use reflection for the loading of .NET assemblies. This technique typically involves obscure or obfuscated base64 strings that, when decoded, reference the .NET reflection methods such as `[Reflection.Assembly]::Load(` or variations thereof, often with additional obfuscation to evade simple detection mechanisms. Since this behavior is rarely found in legitimate system activity and given its high potential for misuse in executing malicious code via reflection (a method that allows for the runtime loading of .NET assemblies), it is regarded with a high level of suspicion. Detected occurrences should be closely inspected to determine their nature and origin, though they are unlikely to represent false positives. This monitoring strategy is aligned with identifying malicious activities related to the execution and persistence tactics commonly associated with various forms of malware and targeted attacks, making it an essential practice for defending against advanced threats leveraging .NET assemblies."
    }
  },
  {
    "instruction": "How to detect: execution of chromium based browser in headless mode using the \"dump-dom\" command line to download files",
    "context": "",
    "output": "In order to detect execution of chromium based browser in headless mode using the \"dump-dom\" command line to download files, you should: Look for instances where process creation events are generated within a Windows operating environment for specific browser executables, namely 'brave.exe', 'chrome.exe', 'msedge.exe', 'opera.exe', or 'vivaldi.exe'. These browser processes should be flagged when their command line arguments include both the '--headless' option, indicating they are running without a user interface, and the 'dump-dom' command, which suggests an automatic document object model (DOM) dump. Additionally, the presence of 'http' in the command line hints that the operation involves network communication. This activity is often not typical for day-to-day operations and, thus, has a high level of suspicion associated with it.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of chromium based browser in headless mode using the \"dump-dom\" command line to download files",
      "answer": "In order to detect execution of chromium based browser in headless mode using the \"dump-dom\" command line to download files, you should: Look for instances where process creation events are generated within a Windows operating environment for specific browser executables, namely 'brave.exe', 'chrome.exe', 'msedge.exe', 'opera.exe', or 'vivaldi.exe'. These browser processes should be flagged when their command line arguments include both the '--headless' option, indicating they are running without a user interface, and the 'dump-dom' command, which suggests an automatic document object model (DOM) dump. Additionally, the presence of 'http' in the command line hints that the operation involves network communication. This activity is often not typical for day-to-day operations and, thus, has a high level of suspicion associated with it."
    }
  },
  {
    "instruction": "Can you explain how to detect: use of Cobalt Strike commands accidentally entered in the CMD shell",
    "context": "",
    "output": "Certainly!\n\nIn order to detect the use of Cobalt Strike commands accidentally entered in the CMD shell, you should observe process creation logs on Windows systems. Specifically, look for instances where the command prompt executable (`cmd.exe`) is launched, denoted both by specific file names such as 'Cmd.Exe' or paths ending with '\\cmd.exe'. Moreover, it is crucial to pay attention to the command line inputs that start with variations of 'cmd' like 'cmd ', 'cmd.exe', or the full path 'c:\\windows\\system32\\cmd.exe'. Within these command line executions, be on the lookout for specific Cobalt Strike-related commands including 'psinject', 'spawnas', 'make_token', 'remote-exec', 'rev2self', 'dcsync', 'logonpasswords', 'execute-assembly', and 'getsystem'. The rule's trigger is based on the simultaneous occurrence of these command prompt executions and the listed Cobalt Strike commands. Even though this monitoring strategy is set at a high level of alert due to the potential impact, be aware that it might sometimes flag benign activity as suspicious, although such occurrences are not specifically known or documented.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "use of Cobalt Strike commands accidentally entered in the CMD shell",
      "answer": "In order to detect the use of Cobalt Strike commands accidentally entered in the CMD shell, you should observe process creation logs on Windows systems. Specifically, look for instances where the command prompt executable (`cmd.exe`) is launched, denoted both by specific file names such as 'Cmd.Exe' or paths ending with '\\cmd.exe'. Moreover, it is crucial to pay attention to the command line inputs that start with variations of 'cmd' like 'cmd ', 'cmd.exe', or the full path 'c:\\windows\\system32\\cmd.exe'. Within these command line executions, be on the lookout for specific Cobalt Strike-related commands including 'psinject', 'spawnas', 'make_token', 'remote-exec', 'rev2self', 'dcsync', 'logonpasswords', 'execute-assembly', and 'getsystem'. The rule's trigger is based on the simultaneous occurrence of these command prompt executions and the listed Cobalt Strike commands. Even though this monitoring strategy is set at a high level of alert due to the potential impact, be aware that it might sometimes flag benign activity as suspicious, although such occurrences are not specifically known or documented."
    }
  },
  {
    "instruction": "Explain how should I detect the following: Execute C# code with the Build Provider and proper folder structure in place.",
    "context": "",
    "output": "In order to execute C# code with the Build Provider and proper folder structure in place, you should monitor the creation of processes on Windows systems, specifically looking for instances where the `aspnet_compiler.exe` executable is being run from any subdirectory within the `C:\\Windows\\Microsoft.NET\\Framework` directory. This activity is crucial to detect because it can indicate an attacker's attempt to compile and execute C# code using the ASP.NET Compilation Tool, which is a legitimate tool but may be misused in this context. Identifying this pattern of behavior is essential in defending against threats that utilize legitimate system tools for malicious purposes. Monitor for such occurrences diligently, as false positives are considered to be unknown, indicating that while this detection rule is valuable, one must also be aware of potential legitimate uses of the `aspnet_compiler.exe` that may trigger alerts. The threat detection level for this activity is classified as medium, reflecting its significance in the context of cybersecurity defense efforts.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Execute C# code with the Build Provider and proper folder structure in place.",
      "answer": "In order to execute C# code with the Build Provider and proper folder structure in place, you should monitor the creation of processes on Windows systems, specifically looking for instances where the `aspnet_compiler.exe` executable is being run from any subdirectory within the `C:\\Windows\\Microsoft.NET\\Framework` directory. This activity is crucial to detect because it can indicate an attacker's attempt to compile and execute C# code using the ASP.NET Compilation Tool, which is a legitimate tool but may be misused in this context. Identifying this pattern of behavior is essential in defending against threats that utilize legitimate system tools for malicious purposes. Monitor for such occurrences diligently, as false positives are considered to be unknown, indicating that while this detection rule is valuable, one must also be aware of potential legitimate uses of the `aspnet_compiler.exe` that may trigger alerts. The threat detection level for this activity is classified as medium, reflecting its significance in the context of cybersecurity defense efforts."
    }
  },
  {
    "instruction": "Please help me detect the following: PowerShell module creation where the module Contents are set to \"function Get-VMRemoteFXPhysicalVideoAdapter\". This could be a sign of potential abuse of the \"RemoteFXvGPUDisablement.exe\" binary which is known to be vulnerable to module load-order hijacking.",
    "context": "",
    "output": "Sure!\nIn order to Detects PowerShell module creation where the module Contents are set to \"function Get-VMRemoteFXPhysicalVideoAdapter\". This could be a sign of potential abuse of the \"RemoteFXvGPUDisablement.exe\" binary which is known to be vulnerable to module load-order hijacking, you should: Monitor Windows PowerShell modules for any instances where the contents of the module are explicitly set to contain \"function Get-VMRemoteFXPhysicalVideoAdapter\". This specific function is a key indicator that an attacker may be attempting to exploit a known vulnerability associated with the RemoteFXvGPUDisablement.exe binary. Such an attack involves module load-order hijacking which can lead to the potential execution of unauthorized or malicious code. Due to the nature of this attack vector, logs from PowerShell modules (ps_module) should be scrutinized for any payload containing the specified function. Given the context, this activity is considered to possess a high level of threat. However, it is worth noting that there may be instances where the detection could raise false positives, although such occurrences are currently unknown.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "PowerShell module creation where the module Contents are set to \"function Get-VMRemoteFXPhysicalVideoAdapter\". This could be a sign of potential abuse of the \"RemoteFXvGPUDisablement.exe\" binary which is known to be vulnerable to module load-order hijacking.",
      "answer": "In order to Detects PowerShell module creation where the module Contents are set to \"function Get-VMRemoteFXPhysicalVideoAdapter\". This could be a sign of potential abuse of the \"RemoteFXvGPUDisablement.exe\" binary which is known to be vulnerable to module load-order hijacking, you should: Monitor Windows PowerShell modules for any instances where the contents of the module are explicitly set to contain \"function Get-VMRemoteFXPhysicalVideoAdapter\". This specific function is a key indicator that an attacker may be attempting to exploit a known vulnerability associated with the RemoteFXvGPUDisablement.exe binary. Such an attack involves module load-order hijacking which can lead to the potential execution of unauthorized or malicious code. Due to the nature of this attack vector, logs from PowerShell modules (ps_module) should be scrutinized for any payload containing the specified function. Given the context, this activity is considered to possess a high level of threat. However, it is worth noting that there may be instances where the detection could raise false positives, although such occurrences are currently unknown."
    }
  },
  {
    "instruction": "Please help me detect the following: usage of bitsadmin downloading a file using an URL that contains an IP",
    "context": "",
    "output": "Sure!\nIn order to detect usage of bitsadmin downloading a file using an URL that contains an IP, you should monitor process creation events on Windows systems for the execution of the bitsadmin utility. Specifically, look for cases where the bitsadmin executable is initiated (either directly as 'bitsadmin.exe' or where the image path ends with '\\bitsadmin.exe'), and the command line includes parameters such as ' /transfer ', ' /create ', or ' /addfile '. Additionally, scrutinize the command line for URLs containing direct IP addresses, indicated by '://1' through '://9', but excluding the specific use case of '://7-' which is related to accessing the legitimate 7-Zip website. Keep track of the complete CommandLine and ParentCommandLine for further analysis. This approach is critical for identifying attempts to misuse bitsadmin for downloading malicious files directly using IP addresses, which is a common tactic in various types of cyber attacks, enhancing your security posture against such threats.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of bitsadmin downloading a file using an URL that contains an IP",
      "answer": "In order to detect usage of bitsadmin downloading a file using an URL that contains an IP, you should monitor process creation events on Windows systems for the execution of the bitsadmin utility. Specifically, look for cases where the bitsadmin executable is initiated (either directly as 'bitsadmin.exe' or where the image path ends with '\\bitsadmin.exe'), and the command line includes parameters such as ' /transfer ', ' /create ', or ' /addfile '. Additionally, scrutinize the command line for URLs containing direct IP addresses, indicated by '://1' through '://9', but excluding the specific use case of '://7-' which is related to accessing the legitimate 7-Zip website. Keep track of the complete CommandLine and ParentCommandLine for further analysis. This approach is critical for identifying attempts to misuse bitsadmin for downloading malicious files directly using IP addresses, which is a common tactic in various types of cyber attacks, enhancing your security posture against such threats."
    }
  },
  {
    "instruction": "How to detect: an svchost process spawning an instance of an office application. This happens when the initial word application creates an instance of one of the Office COM objects such as 'Word.Application', 'Excel.Application', etc.\nThis can be used by malicious actors to create malicious Office documents with macros on the fly. (See vba2clr project in the references)\n",
    "context": "",
    "output": "In order to detect an svchost process spawning an instance of an office application, which happens when the initial word application creates an instance of one of the Office COM objects such as 'Word.Application', 'Excel.Application', etc., a method used by malicious actors to create malicious Office documents with macros on the fly, you should: Monitor the creation of processes on Windows systems, focusing on spotting instances where the 'svchost.exe' process, a legitimate Windows service host, is the parent process for launching office applications such as Word (winword.exe), Excel (excel.exe), PowerPoint (powerpnt.exe), Access (msaccess.exe), Publisher (mspub.exe), Equation Editor (eqnedt32.exe), or Visio (visio.exe). This activity is suspicious because 'svchost.exe' typically does not directly start Office applications, suggesting an abnormal use possibly tied to automation scripts. Be aware, however, that there can be benign instances where scripts or legitimate automated tasks do exactly this for office automation purposes, which are considered as potential false positives. The severity level for these observations is classified as medium, indicating a noteworthy but not definitive indication of malicious activity.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "an svchost process spawning an instance of an office application. This happens when the initial word application creates an instance of one of the Office COM objects such as 'Word.Application', 'Excel.Application', etc.\nThis can be used by malicious actors to create malicious Office documents with macros on the fly. (See vba2clr project in the references)\n",
      "answer": "In order to detect an svchost process spawning an instance of an office application, which happens when the initial word application creates an instance of one of the Office COM objects such as 'Word.Application', 'Excel.Application', etc., a method used by malicious actors to create malicious Office documents with macros on the fly, you should: Monitor the creation of processes on Windows systems, focusing on spotting instances where the 'svchost.exe' process, a legitimate Windows service host, is the parent process for launching office applications such as Word (winword.exe), Excel (excel.exe), PowerPoint (powerpnt.exe), Access (msaccess.exe), Publisher (mspub.exe), Equation Editor (eqnedt32.exe), or Visio (visio.exe). This activity is suspicious because 'svchost.exe' typically does not directly start Office applications, suggesting an abnormal use possibly tied to automation scripts. Be aware, however, that there can be benign instances where scripts or legitimate automated tasks do exactly this for office automation purposes, which are considered as potential false positives. The severity level for these observations is classified as medium, indicating a noteworthy but not definitive indication of malicious activity."
    }
  },
  {
    "instruction": "How can I detect: when verclsid.exe is used to run COM object via GUID",
    "context": "",
    "output": "In order to detect when verclsid.exe is used to run COM object via GUID, you should: note that this detection focuses on Windows process creation events. Specifically, it looks for instances where the process 'verclsid.exe' is executed, which can be identified either by the image name ending with '\\verclsid.exe' or the original file name being 'verclsid.exe'. Additionally, the command line arguments are scrutinized for the presence of both '/S' and '/C', indicating a specific mode of operation often associated with this type of attack. The relevant data fields to observe include the command line arguments used during the process execution. It\u2019s important to be aware that there may be legitimate uses of this process, although they are currently unkown, and thus, potential false positives should be considered with a medium level of caution. The primary goal is to identify suspicious activities related to the execution of COM objects, which could indicate an attack based on the provided MITRE ATT&CK tactics and techniques.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "when verclsid.exe is used to run COM object via GUID",
      "answer": "In order to detect when verclsid.exe is used to run COM object via GUID, you should: note that this detection focuses on Windows process creation events. Specifically, it looks for instances where the process 'verclsid.exe' is executed, which can be identified either by the image name ending with '\\verclsid.exe' or the original file name being 'verclsid.exe'. Additionally, the command line arguments are scrutinized for the presence of both '/S' and '/C', indicating a specific mode of operation often associated with this type of attack. The relevant data fields to observe include the command line arguments used during the process execution. It\u2019s important to be aware that there may be legitimate uses of this process, although they are currently unkown, and thus, potential false positives should be considered with a medium level of caution. The primary goal is to identify suspicious activities related to the execution of COM objects, which could indicate an attack based on the provided MITRE ATT&CK tactics and techniques."
    }
  },
  {
    "instruction": "Please help me detect the following: Uses PowerShell to install/copy a a file into a system directory such as \"System32\" or \"SysWOW64\"",
    "context": "",
    "output": "Sure!\nIn order to use PowerShell to install/copy a file into a system directory such as \"System32\" or \"SysWOW64\", you should: focus on monitoring PowerShell script activity, particularly scripts that are attempting to copy items to critical system directories. This involves ensuring that Script Block Logging is enabled on Windows systems to capture the necessary detail in logs. Specifically, look for scripts that include commands indicative of copy operations, such as 'Copy-Item ' followed by '-Destination '. Additionally, it is crucial to pay attention to scripts that target specific directories known for housing critical system files, namely '\\Windows\\System32' and '\\Windows\\SysWOW64'. By detecting these patterns of behavior, it is possible to identify potentially malicious activity aiming to manipulate or compromise system directories through PowerShell scripts. It's important to remain vigilant for false positives but given the high level of risk associated with unauthorized access to these directories, any related activity should be scrutinized closely.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Uses PowerShell to install/copy a a file into a system directory such as \"System32\" or \"SysWOW64\"",
      "answer": "In order to use PowerShell to install/copy a file into a system directory such as \"System32\" or \"SysWOW64\", you should: focus on monitoring PowerShell script activity, particularly scripts that are attempting to copy items to critical system directories. This involves ensuring that Script Block Logging is enabled on Windows systems to capture the necessary detail in logs. Specifically, look for scripts that include commands indicative of copy operations, such as 'Copy-Item ' followed by '-Destination '. Additionally, it is crucial to pay attention to scripts that target specific directories known for housing critical system files, namely '\\Windows\\System32' and '\\Windows\\SysWOW64'. By detecting these patterns of behavior, it is possible to identify potentially malicious activity aiming to manipulate or compromise system directories through PowerShell scripts. It's important to remain vigilant for false positives but given the high level of risk associated with unauthorized access to these directories, any related activity should be scrutinized closely."
    }
  },
  {
    "instruction": "How to detect: Remote desktop is a common feature in operating systems.\nIt allows a user to log into an interactive session with a system desktop graphical user interface on a remote system.\nMicrosoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS).\n",
    "context": "",
    "output": "In order to detect unauthorized modifications targeting the registry setting that defines the port number for Remote Desktop Services (RDS), which is Microsoft's implementation of the Remote Desktop Protocol, enabling a user to log into an interactive session with a system's desktop graphical user interface from a remote system, you should monitor Windows registry settings for any SetValue events that alter the TargetObject located at \"HKLM\\System\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp\\PortNumber\". This indicates an attempt to change the port used by RDP, potentially as part of an effort to bypass security controls or hide malicious activity by using non-standard ports. The detection strategy should exclude the modification events where the Details attribute equals \"DWORD (0x00000d3d)\", as this represents a known configuration and may not indicate malicious activity. However, other modifications to this registry value could be indicative of unauthorized attempts to alter RDP settings, warranting a high alert level. It is noted that there may be unknown false positives, suggesting cautious interpretation of alerts. This monitoring effort relates to tactics and techniques such as Defense Evasion and Persistence, aiming to identify potential security breaches involving remote desktop protocols.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Remote desktop is a common feature in operating systems.\nIt allows a user to log into an interactive session with a system desktop graphical user interface on a remote system.\nMicrosoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS).\n",
      "answer": "In order to detect unauthorized modifications targeting the registry setting that defines the port number for Remote Desktop Services (RDS), which is Microsoft's implementation of the Remote Desktop Protocol, enabling a user to log into an interactive session with a system's desktop graphical user interface from a remote system, you should monitor Windows registry settings for any SetValue events that alter the TargetObject located at \"HKLM\\System\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp\\PortNumber\". This indicates an attempt to change the port used by RDP, potentially as part of an effort to bypass security controls or hide malicious activity by using non-standard ports. The detection strategy should exclude the modification events where the Details attribute equals \"DWORD (0x00000d3d)\", as this represents a known configuration and may not indicate malicious activity. However, other modifications to this registry value could be indicative of unauthorized attempts to alter RDP settings, warranting a high alert level. It is noted that there may be unknown false positives, suggesting cautious interpretation of alerts. This monitoring effort relates to tactics and techniques such as Defense Evasion and Persistence, aiming to identify potential security breaches involving remote desktop protocols."
    }
  },
  {
    "instruction": "Explain how should I detect the following: creation of \".xml\" and \".txt\" files in folders of the \"\\AppData\\Roaming\\Microsoft\" directory by uncommon processes. This behavior was seen common across different Devil Bait samples and stages as described by the NCSC",
    "context": "",
    "output": "In order to detect the creation of \".xml\" and \".txt\" files in folders of the \"\\AppData\\Roaming\\Microsoft\" directory by uncommon processes, which was seen as a common behavior across different Devil Bait samples and stages as described by the NCSC, you should: Focus on monitoring file events within Windows environments. Particularly, you need to watch for the creation of \".txt\" and \".xml\" files in directories under the \"\\AppData\\Roaming\\Microsoft\" path. The processes of interest that could indicate malicious activity if they are creating these files are 'schtasks.exe', 'wscript.exe', and 'mshta.exe'. These executables are generally legitimate Windows components but can be misused by attackers for malicious purposes. The detection strategy is highly reliable with a low chance of false positives, emphasizing its importance in proactively identifying potential stages of a Devil Bait attack campaign.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "creation of \".xml\" and \".txt\" files in folders of the \"\\AppData\\Roaming\\Microsoft\" directory by uncommon processes. This behavior was seen common across different Devil Bait samples and stages as described by the NCSC",
      "answer": "In order to detect the creation of \".xml\" and \".txt\" files in folders of the \"\\AppData\\Roaming\\Microsoft\" directory by uncommon processes, which was seen as a common behavior across different Devil Bait samples and stages as described by the NCSC, you should: Focus on monitoring file events within Windows environments. Particularly, you need to watch for the creation of \".txt\" and \".xml\" files in directories under the \"\\AppData\\Roaming\\Microsoft\" path. The processes of interest that could indicate malicious activity if they are creating these files are 'schtasks.exe', 'wscript.exe', and 'mshta.exe'. These executables are generally legitimate Windows components but can be misused by attackers for malicious purposes. The detection strategy is highly reliable with a low chance of false positives, emphasizing its importance in proactively identifying potential stages of a Devil Bait attack campaign."
    }
  },
  {
    "instruction": "Explain how should I detect the following: suspicious shell commands indicating the information gathering phase as preparation for the Privilege Escalation.",
    "context": "",
    "output": "In order to detect suspicious shell commands indicating the information gathering phase as preparation for the Privilege Escalation, you should monitor Linux systems for the execution of specific shell commands. These commands can reveal the machine's configuration and environment, which could be used by an attacker in the initial stages of planning a privilege escalation attack. Monitoring should cover:\n\n- Distribution type and kernel version queries, such as viewing the contents of `/etc/issue`, various release files under `/etc/`, the kernel version via `/proc/version`, and commands like `uname` to get system information, along with `rpm -q kernel` to check installed kernel packages, `dmesg | grep Linux` for boot messages, and looking for kernel images in `/boot`.\n- Examination of environment variables and shell settings through files like `/etc/profile`, `/etc/bashrc`, and user-specific ones like `~/.bash_profile`, `~/.bashrc`, and `~/.bash_logout`.\n- Commands that list running applications and services under the root user, utilizing `ps` with various options.\n- Queries around scheduled tasks including listing cron jobs, content in cron-related directories, and cron permission files such as `/etc/cron.allow` and `/etc/cron.deny`.\n- Searches for plain text usernames and passwords within files using `grep`.\n- Networking configurations and active connections checks via `ifconfig`, contents of network configuration files like `/etc/network/interfaces`, firewall rules with `iptables` and `ip6tables`, and listening ports or active connections observed with `lsof`, `netstat`, and investigating the ARP table with `arp`.\n- Viewing sensitive files, including password and group information in `/etc/passwd`, `/etc/group`, and encrypted passwords in `/etc/shadow`.\n- Finding files with setuid or setgid bits set, which can grant escalated privileges to users, through `find` commands looking for specific permissions.\n- Locating world writable files which could potentially be exploited by attackers to modify system behavior or gain escalated privileges.\n\nThis monitoring should be performed over a period of 30 minutes, alerting if more than six such commands are detected for a host, as this volume of information-gathering commands in a short timeframe can indicate malicious intent. However, it is crucial to consider that such activities could also be part of regular troubleshooting or maintenance tasks on Linux machines, thus they might generate false positives. The associated tags with these monitoring efforts are Discovery and Privilege Escalation, indicating the attack techniques potentially in use.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious shell commands indicating the information gathering phase as preparation for the Privilege Escalation.",
      "answer": "In order to detect suspicious shell commands indicating the information gathering phase as preparation for the Privilege Escalation, you should monitor Linux systems for the execution of specific shell commands. These commands can reveal the machine's configuration and environment, which could be used by an attacker in the initial stages of planning a privilege escalation attack. Monitoring should cover:\n\n- Distribution type and kernel version queries, such as viewing the contents of `/etc/issue`, various release files under `/etc/`, the kernel version via `/proc/version`, and commands like `uname` to get system information, along with `rpm -q kernel` to check installed kernel packages, `dmesg | grep Linux` for boot messages, and looking for kernel images in `/boot`.\n- Examination of environment variables and shell settings through files like `/etc/profile`, `/etc/bashrc`, and user-specific ones like `~/.bash_profile`, `~/.bashrc`, and `~/.bash_logout`.\n- Commands that list running applications and services under the root user, utilizing `ps` with various options.\n- Queries around scheduled tasks including listing cron jobs, content in cron-related directories, and cron permission files such as `/etc/cron.allow` and `/etc/cron.deny`.\n- Searches for plain text usernames and passwords within files using `grep`.\n- Networking configurations and active connections checks via `ifconfig`, contents of network configuration files like `/etc/network/interfaces`, firewall rules with `iptables` and `ip6tables`, and listening ports or active connections observed with `lsof`, `netstat`, and investigating the ARP table with `arp`.\n- Viewing sensitive files, including password and group information in `/etc/passwd`, `/etc/group`, and encrypted passwords in `/etc/shadow`.\n- Finding files with setuid or setgid bits set, which can grant escalated privileges to users, through `find` commands looking for specific permissions.\n- Locating world writable files which could potentially be exploited by attackers to modify system behavior or gain escalated privileges.\n\nThis monitoring should be performed over a period of 30 minutes, alerting if more than six such commands are detected for a host, as this volume of information-gathering commands in a short timeframe can indicate malicious intent. However, it is crucial to consider that such activities could also be part of regular troubleshooting or maintenance tasks on Linux machines, thus they might generate false positives. The associated tags with these monitoring efforts are Discovery and Privilege Escalation, indicating the attack techniques potentially in use."
    }
  },
  {
    "instruction": "Please help me detect the following: usage of the \"Accesschk\" utility, an access and privilege audit tool developed by SysInternal and often being abused by attacker to verify process privileges",
    "context": "",
    "output": "Sure!\nIn order to detect the usage of the \"Accesschk\" utility, an access and privilege audit tool developed by SysInternal and often being abused by attackers to verify process privileges, you should monitor Windows process creation logs for certain indicators. These indicators include any process where the product name ends with 'AccessChk', or the description contains 'Reports effective permissions'. Additionally, look for processes where the image path ends with '\\accesschk.exe' or '\\accesschk64.exe', and those with the original file name 'accesschk.exe'. It's also essential to pay attention to the command line arguments used with Accesschk, particularly the presence of common flags like 'uwcqv ', 'kwsu ', 'qwsu ', and 'uwdqs ', as these are indicative of the utility being used potentially for nefarious purposes.\n\nWhen evaluating logs, ensure to consider the integrity level, product name, description, and command line arguments used, as these fields can provide valuable context for determining the legitimacy of the Accesschk usage. Be aware that system administrators may legitimately use Accesschk for system maintenance and auditing purposes, which can lead to potential false positive alerts. The security level associated with detecting the malicious use of Accesschk is considered medium, reflecting the utility's role in both legitimate system maintenance and potential abuse scenarios.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of the \"Accesschk\" utility, an access and privilege audit tool developed by SysInternal and often being abused by attacker to verify process privileges",
      "answer": "In order to detect the usage of the \"Accesschk\" utility, an access and privilege audit tool developed by SysInternal and often being abused by attackers to verify process privileges, you should monitor Windows process creation logs for certain indicators. These indicators include any process where the product name ends with 'AccessChk', or the description contains 'Reports effective permissions'. Additionally, look for processes where the image path ends with '\\accesschk.exe' or '\\accesschk64.exe', and those with the original file name 'accesschk.exe'. It's also essential to pay attention to the command line arguments used with Accesschk, particularly the presence of common flags like 'uwcqv ', 'kwsu ', 'qwsu ', and 'uwdqs ', as these are indicative of the utility being used potentially for nefarious purposes.\n\nWhen evaluating logs, ensure to consider the integrity level, product name, description, and command line arguments used, as these fields can provide valuable context for determining the legitimacy of the Accesschk usage. Be aware that system administrators may legitimately use Accesschk for system maintenance and auditing purposes, which can lead to potential false positive alerts. The security level associated with detecting the malicious use of Accesschk is considered medium, reflecting the utility's role in both legitimate system maintenance and potential abuse scenarios."
    }
  },
  {
    "instruction": "Explain how should I detect the following: suspicious manipulations of default accounts such as 'administrator' and 'guest'. For example 'enable' or 'disable' accounts or change the password...etc",
    "context": "",
    "output": "In order to detect suspicious manipulations of default accounts such as 'administrator' and 'guest', for example 'enable' or 'disable' accounts or change the password etc., you should: Monitor Windows process creation logs for instances where net.exe or net1.exe is executed, as these are common tools used for managing user accounts and groups on Windows systems. Specifically, look out for command lines that contain the word 'user', indicating that user account management activity is taking place. Pay particular attention to command lines that contain specific account names, including those for 'Administrator' and 'Guest' in various languages, as well as 'DefaultAccount'. This is crucial for detecting attempts to manipulate these sensitive default accounts. Moreover, you should exclude any detection where the command line explicitly involves the 'guest' account being deactivated ('/active no'), to reduce false positives. However, be aware that some legitimate administration scripts may also perform these actions, which could result in false positives. Therefore, it is advisable to adjust the sensitivity of this detection in your environment as necessary. This monitoring is anchored in understanding that attackers might attempt to manipulate default or high-privilege accounts as part of their tactics for gaining or expanding access within a target system.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious manipulations of default accounts such as 'administrator' and 'guest'. For example 'enable' or 'disable' accounts or change the password...etc",
      "answer": "In order to detect suspicious manipulations of default accounts such as 'administrator' and 'guest', for example 'enable' or 'disable' accounts or change the password etc., you should: Monitor Windows process creation logs for instances where net.exe or net1.exe is executed, as these are common tools used for managing user accounts and groups on Windows systems. Specifically, look out for command lines that contain the word 'user', indicating that user account management activity is taking place. Pay particular attention to command lines that contain specific account names, including those for 'Administrator' and 'Guest' in various languages, as well as 'DefaultAccount'. This is crucial for detecting attempts to manipulate these sensitive default accounts. Moreover, you should exclude any detection where the command line explicitly involves the 'guest' account being deactivated ('/active no'), to reduce false positives. However, be aware that some legitimate administration scripts may also perform these actions, which could result in false positives. Therefore, it is advisable to adjust the sensitivity of this detection in your environment as necessary. This monitoring is anchored in understanding that attackers might attempt to manipulate default or high-privilege accounts as part of their tactics for gaining or expanding access within a target system."
    }
  },
  {
    "instruction": "How to detect: code integrity failures such as missing page hashes or corrupted drivers due unauthorized modification. This could be a sign of tampered binaries.",
    "context": "",
    "output": "In order to detect code integrity failures such as missing page hashes or corrupted drivers due to unauthorized modification, which could be a sign of tampered binaries, you should: monitor Windows security logs for the occurrence of Event IDs 5038 and 6281. These Event IDs are indicative of issues with code integrity, suggesting that system files or drivers may have been modified or corrupted, potentially as part of malicious activity. It's important to note that these events could sometimes be triggered by disk device errors, which are considered low-level false positives in the context of this detection strategy. By staying vigilant against these specific event codes, it's possible to identify and investigate instances of suspected unauthorized file modifications, aiding in the protection of the system against tampering and related security threats.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "code integrity failures such as missing page hashes or corrupted drivers due unauthorized modification. This could be a sign of tampered binaries.",
      "answer": "In order to detect code integrity failures such as missing page hashes or corrupted drivers due to unauthorized modification, which could be a sign of tampered binaries, you should: monitor Windows security logs for the occurrence of Event IDs 5038 and 6281. These Event IDs are indicative of issues with code integrity, suggesting that system files or drivers may have been modified or corrupted, potentially as part of malicious activity. It's important to note that these events could sometimes be triggered by disk device errors, which are considered low-level false positives in the context of this detection strategy. By staying vigilant against these specific event codes, it's possible to identify and investigate instances of suspected unauthorized file modifications, aiding in the protection of the system against tampering and related security threats."
    }
  },
  {
    "instruction": "Can you explain how to detect: Request to \"amsiInitFailed\" that can be used to disable AMSI Scanning",
    "context": "",
    "output": "Certainly!\n\nIn order to detect requests to \"amsiInitFailed\" that can be used to disable AMSI scanning, you should monitor for specific command-line activity within your Windows environment's process creation logs. Focus on detecting command lines containing either the 'System.Management.Automation.AmsiUtils' or 'amsiInitFailed' strings as one potential indicator. Another strong sign is command lines containing all the following strings: '[Ref].Assembly.GetType', 'SetValue($null,$true)', and 'NonPublic,Static'. Any one of these patterns matching is considered a high-level alert with an unlikely chance of being a false positive. This detection strategy helps in identifying attempts to bypass the Antimalware Scan Interface (AMSI) which is crucial for the proactive defense against malware and script-based attacks.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Request to \"amsiInitFailed\" that can be used to disable AMSI Scanning",
      "answer": "In order to detect requests to \"amsiInitFailed\" that can be used to disable AMSI scanning, you should monitor for specific command-line activity within your Windows environment's process creation logs. Focus on detecting command lines containing either the 'System.Management.Automation.AmsiUtils' or 'amsiInitFailed' strings as one potential indicator. Another strong sign is command lines containing all the following strings: '[Ref].Assembly.GetType', 'SetValue($null,$true)', and 'NonPublic,Static'. Any one of these patterns matching is considered a high-level alert with an unlikely chance of being a false positive. This detection strategy helps in identifying attempts to bypass the Antimalware Scan Interface (AMSI) which is crucial for the proactive defense against malware and script-based attacks."
    }
  },
  {
    "instruction": "Explain how should I detect the following: execution of a renamed \"client32.exe\" (NetSupport RAT) via Imphash, Product and OriginalFileName strings",
    "context": "",
    "output": "In order to detect the execution of a renamed \"client32.exe\" (NetSupport RAT) via Imphash, Product, and OriginalFileName strings, you should: Look for process creation events in Windows systems that indicate the execution of NetSupport Remote Control software. Specifically, monitor for processes where the Product name includes 'NetSupport Remote Control', the OriginalFileName contains 'client32.exe', or the Imphash matches 'a9d50692e95b79723f3e76fcf70d023e'. Additionally, check for processes where IMPHASH is 'A9D50692E95B79723F3E76FCF70D023E'. It's critical to exclude any events where the Image path ends with '\\client32.exe' to avoid detecting the legitimate use of client32.exe. This approach aims to identify attempts to use the NetSupport Remote Administration Tool (RAT) in a malicious manner by renaming its executable, which is a common tactic to evade detection by security software. Attention to these details can help in identifying unauthorized remote control activities, which could be indicative of a broader cyber attack or malicious activity within the network.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of a renamed \"client32.exe\" (NetSupport RAT) via Imphash, Product and OriginalFileName strings",
      "answer": "In order to detect the execution of a renamed \"client32.exe\" (NetSupport RAT) via Imphash, Product, and OriginalFileName strings, you should: Look for process creation events in Windows systems that indicate the execution of NetSupport Remote Control software. Specifically, monitor for processes where the Product name includes 'NetSupport Remote Control', the OriginalFileName contains 'client32.exe', or the Imphash matches 'a9d50692e95b79723f3e76fcf70d023e'. Additionally, check for processes where IMPHASH is 'A9D50692E95B79723F3E76FCF70D023E'. It's critical to exclude any events where the Image path ends with '\\client32.exe' to avoid detecting the legitimate use of client32.exe. This approach aims to identify attempts to use the NetSupport Remote Administration Tool (RAT) in a malicious manner by renaming its executable, which is a common tactic to evade detection by security software. Attention to these details can help in identifying unauthorized remote control activities, which could be indicative of a broader cyber attack or malicious activity within the network."
    }
  },
  {
    "instruction": "Please help me detect the following: PowerShell called from an executable by the version mismatch method",
    "context": "",
    "output": "Sure!\nIn order to detect PowerShell called from an executable by the version mismatch method, you should: Monitor Windows PowerShell classic start events, specifically focusing on instances where there is a mismatch in the versions of the PowerShell engine and host. Look for situations where the EngineVersion starts with '2.', '4.', or '5.', while simultaneously the HostVersion begins with '3.'. This detection is based on the premise that legitimate PowerShell sessions typically have matching or compatible engine and host versions, and a significant discrepancy, as described, could indicate an attempt to exploit or leverage PowerShell for malicious purposes. Being a high-level alert, any matches should be investigated thoroughly, although it is recognized that there may be unknown scenarios leading to false positives. This method ties into broader cybersecurity frameworks by addressing techniques commonly used in Initial Access, Execution, and Defense Evasion phases of an attack, aligning with tactics and techniques such as Execution through API, User Execution, and Scripting.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "PowerShell called from an executable by the version mismatch method",
      "answer": "In order to detect PowerShell called from an executable by the version mismatch method, you should: Monitor Windows PowerShell classic start events, specifically focusing on instances where there is a mismatch in the versions of the PowerShell engine and host. Look for situations where the EngineVersion starts with '2.', '4.', or '5.', while simultaneously the HostVersion begins with '3.'. This detection is based on the premise that legitimate PowerShell sessions typically have matching or compatible engine and host versions, and a significant discrepancy, as described, could indicate an attempt to exploit or leverage PowerShell for malicious purposes. Being a high-level alert, any matches should be investigated thoroughly, although it is recognized that there may be unknown scenarios leading to false positives. This method ties into broader cybersecurity frameworks by addressing techniques commonly used in Initial Access, Execution, and Defense Evasion phases of an attack, aligning with tactics and techniques such as Execution through API, User Execution, and Scripting."
    }
  },
  {
    "instruction": "Can you explain how to detect: when adversaries try to stop system services or processes by deleting their respective scheduled tasks in order to conduct data destructive activities",
    "context": "",
    "output": "Certainly!\n\nIn order to detect when adversaries try to stop system services or processes by deleting their respective scheduled tasks in order to conduct data destructive activities, you should: Monitor the Windows Task Scheduler for any deletions of scheduled tasks that are crucial for system services or processes integrity. Specifically, look for event ID 141, which indicates deletion of a task, and focus on tasks named under the directories such as '\\Windows\\SystemRestore\\SR', '\\Windows\\Windows Defender\\', '\\Windows\\BitLocker', '\\Windows\\WindowsBackup\\', '\\Windows\\WindowsUpdate\\', '\\Windows\\UpdateOrchestrator\\', and '\\Windows\\ExploitGuard'. It's important to exclude any events initiated by user accounts that contain 'AUTHORI' or 'AUTORI' to reduce false positives. This monitoring requires the \"Microsoft-Windows-TaskScheduler/Operational\" log to be enabled, as it is not by default. The heightened concern level for such detections is due to the high impact of data destructive activities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "when adversaries try to stop system services or processes by deleting their respective scheduled tasks in order to conduct data destructive activities",
      "answer": "In order to detect when adversaries try to stop system services or processes by deleting their respective scheduled tasks in order to conduct data destructive activities, you should: Monitor the Windows Task Scheduler for any deletions of scheduled tasks that are crucial for system services or processes integrity. Specifically, look for event ID 141, which indicates deletion of a task, and focus on tasks named under the directories such as '\\Windows\\SystemRestore\\SR', '\\Windows\\Windows Defender\\', '\\Windows\\BitLocker', '\\Windows\\WindowsBackup\\', '\\Windows\\WindowsUpdate\\', '\\Windows\\UpdateOrchestrator\\', and '\\Windows\\ExploitGuard'. It's important to exclude any events initiated by user accounts that contain 'AUTHORI' or 'AUTORI' to reduce false positives. This monitoring requires the \"Microsoft-Windows-TaskScheduler/Operational\" log to be enabled, as it is not by default. The heightened concern level for such detections is due to the high impact of data destructive activities."
    }
  },
  {
    "instruction": "Please help me detect the following: an appx package deployment that was blocked by the local computer policy",
    "context": "",
    "output": "Sure!\nIn order to detect an appx package deployment that was blocked by the local computer policy, you should: Monitor the AppX Deployment Server logs on Windows systems for events with IDs 441, 442, 453, and 454. These event IDs signify actions related to AppX package deployment that have been blocked due to local computer policy settings. It's crucial to pay attention to these specific events as they can indicate attempts to install packages which are not allowed by the policy, potentially signaling a security concern. As false positives are unknown, it's important to investigate these events when they occur to determine if they are legitimate or malicious attempts at package deployment. The detection is of a medium level of importance, suggesting that while it's not critical, it should not be ignored.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "an appx package deployment that was blocked by the local computer policy",
      "answer": "In order to detect an appx package deployment that was blocked by the local computer policy, you should: Monitor the AppX Deployment Server logs on Windows systems for events with IDs 441, 442, 453, and 454. These event IDs signify actions related to AppX package deployment that have been blocked due to local computer policy settings. It's crucial to pay attention to these specific events as they can indicate attempts to install packages which are not allowed by the policy, potentially signaling a security concern. As false positives are unknown, it's important to investigate these events when they occur to determine if they are legitimate or malicious attempts at package deployment. The detection is of a medium level of importance, suggesting that while it's not critical, it should not be ignored."
    }
  },
  {
    "instruction": "Please help me detect the following: loading of \"RjvPlatform.dll\" by the \"SystemResetPlatform.exe\" binary which can be abused as a method of DLL side loading since the \"$SysReset\" directory isn't created by default.",
    "context": "",
    "output": "Sure!\nIn order to detect loading of \"RjvPlatform.dll\" by the \"SystemResetPlatform.exe\" binary which can be abused as a method of DLL side loading since the \"$SysReset\" directory isn't created by default, you should: focus on monitoring image load events on Windows systems, specifically looking for instances where \"SystemResetPlatform.exe\" located at \"C:\\Windows\\System32\\SystemResetPlatform\\SystemResetPlatform.exe\" loads \"RjvPlatform.dll\" from \"C:\\$SysReset\\Framework\\Stack\". This particular activity is notable because the \"$SysReset\" directory is not typically created by the operating system, implying that the loading of \"RjvPlatform.dll\" in this manner could be indicative of a DLL side-loading attempt, a technique often used by malicious actors to execute arbitrary code. It is important to be aware that there might be scenarios where this detection could trigger on legitimate activities that are not yet known, hence, potential false positives are classified as \"unknown\". The seriousness of this detection is considered to be of medium level.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "loading of \"RjvPlatform.dll\" by the \"SystemResetPlatform.exe\" binary which can be abused as a method of DLL side loading since the \"$SysReset\" directory isn't created by default.",
      "answer": "In order to detect loading of \"RjvPlatform.dll\" by the \"SystemResetPlatform.exe\" binary which can be abused as a method of DLL side loading since the \"$SysReset\" directory isn't created by default, you should: focus on monitoring image load events on Windows systems, specifically looking for instances where \"SystemResetPlatform.exe\" located at \"C:\\Windows\\System32\\SystemResetPlatform\\SystemResetPlatform.exe\" loads \"RjvPlatform.dll\" from \"C:\\$SysReset\\Framework\\Stack\". This particular activity is notable because the \"$SysReset\" directory is not typically created by the operating system, implying that the loading of \"RjvPlatform.dll\" in this manner could be indicative of a DLL side-loading attempt, a technique often used by malicious actors to execute arbitrary code. It is important to be aware that there might be scenarios where this detection could trigger on legitimate activities that are not yet known, hence, potential false positives are classified as \"unknown\". The seriousness of this detection is considered to be of medium level."
    }
  },
  {
    "instruction": "Can you explain how to detect: driver load of the System Informer tool",
    "context": "",
    "output": "Certainly!\n\nIn order to detect driver load of the System Informer tool, you should monitor Windows driver load events for any instances where the 'SystemInformer.sys' file is loaded. Specifically, lookout for situations where the loaded image's name ends with '\\SystemInformer.sys'. Moreover, it is crucial to scrutinize the hashes associated with the 'SystemInformer.sys' file. A set of specific SHA256 hashes has been identified that correlate with known instances of the System Informer tool. If any of these particular hashes are detected in connection with the loading of 'SystemInformer.sys', it may indicate an operational instance of the tool. These hashes are instrumental in distinguishing between legitimate and potentially malicious uses of System Informer. \n\nIt's important to note that while System Informer can be legitimately used by system administrators or developers for various purposes, its detection in driver load events might also signify misuse. Therefore, although the detection of these hashes or the loading of 'SystemInformer.sys' raises a medium-level alert, consider employing additional contextual filters or investigative actions to ascertain the intent behind its usage in your environment. This approach helps in reducing false positives and ensuring that routine administrative activities are not disrupted.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "driver load of the System Informer tool",
      "answer": "In order to detect driver load of the System Informer tool, you should monitor Windows driver load events for any instances where the 'SystemInformer.sys' file is loaded. Specifically, lookout for situations where the loaded image's name ends with '\\SystemInformer.sys'. Moreover, it is crucial to scrutinize the hashes associated with the 'SystemInformer.sys' file. A set of specific SHA256 hashes has been identified that correlate with known instances of the System Informer tool. If any of these particular hashes are detected in connection with the loading of 'SystemInformer.sys', it may indicate an operational instance of the tool. These hashes are instrumental in distinguishing between legitimate and potentially malicious uses of System Informer. \n\nIt's important to note that while System Informer can be legitimately used by system administrators or developers for various purposes, its detection in driver load events might also signify misuse. Therefore, although the detection of these hashes or the loading of 'SystemInformer.sys' raises a medium-level alert, consider employing additional contextual filters or investigative actions to ascertain the intent behind its usage in your environment. This approach helps in reducing false positives and ensuring that routine administrative activities are not disrupted."
    }
  },
  {
    "instruction": "How to detect: An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.\nThese services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.\nRemote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)\n",
    "context": "",
    "output": "In order to detect adversaries leveraging legitimate desktop support and remote access software to establish an interactive command and control channel to target systems within networks, you should monitor the creation of processes corresponding to the NetSupport Client Configurator. Specifically, pay attention to processes created on Windows systems that are linked to the NetSupport Remote Control product. This can be identified by processes with the description \"NetSupport Client Configurator,\" product name \"NetSupport Remote Control,\" listed under the company \"NetSupport Ltd,\" and particularly those originating from an executable file named \"PCICFGUI.EXE.\" It's important to note that while this behavior can indicate malicious activity, there can also be legitimate uses of this software within an organization. Therefore, the identification of these processes warrants an investigation to determine the context of their use. If the usage is authorized and for legitimate purposes, it may be considered a false positive. This method of detection is categorized under a medium level of severity and ties back to tactics and techniques often utilized by adversaries, such as Execution and Command and Control, without specifically referring to predefined MITRE ATT&CK framework tags. This approach is in line with understanding and mitigating threats that exploit legitimate software for malicious aims, as identified in various cybersecurity analyses.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.\nThese services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.\nRemote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)\n",
      "answer": "In order to detect adversaries leveraging legitimate desktop support and remote access software to establish an interactive command and control channel to target systems within networks, you should monitor the creation of processes corresponding to the NetSupport Client Configurator. Specifically, pay attention to processes created on Windows systems that are linked to the NetSupport Remote Control product. This can be identified by processes with the description \"NetSupport Client Configurator,\" product name \"NetSupport Remote Control,\" listed under the company \"NetSupport Ltd,\" and particularly those originating from an executable file named \"PCICFGUI.EXE.\" It's important to note that while this behavior can indicate malicious activity, there can also be legitimate uses of this software within an organization. Therefore, the identification of these processes warrants an investigation to determine the context of their use. If the usage is authorized and for legitimate purposes, it may be considered a false positive. This method of detection is categorized under a medium level of severity and ties back to tactics and techniques often utilized by adversaries, such as Execution and Command and Control, without specifically referring to predefined MITRE ATT&CK framework tags. This approach is in line with understanding and mitigating threats that exploit legitimate software for malicious aims, as identified in various cybersecurity analyses."
    }
  },
  {
    "instruction": "Please help me detect the following: an a non-browser process interacting with the Telegram API which could indicate use of a covert C2",
    "context": "",
    "output": "Sure!\nIn order to detect a non-browser process interacting with the Telegram API which could indicate the use of a covert command and control (C2) channel, you should monitor network connections specifically targeting Windows as the operating system. Focus on identifying any destination hostname within network connections that contains 'api.telegram.org'. This is because telegram.org is often used for legitimate communications, but when a non-browser application attempts to engage with it, it could suggest a covert operation.\n\nHowever, not all communications with 'api.telegram.org' are inherently suspicious. Applications like web browsers regularly communicate with the Telegram API for various legitimate reasons. Therefore, exclude known web browsers from triggering an alert by checking the process image path against a list of common browsers. This list includes multiple versions and install locations of Chrome, Firefox, Internet Explorer, Microsoft Edge, Safari, Opera, and others like Brave, Maxthon, SeaMonkey, Vivaldi, and Whale. If the process initiating the connection is not one of these browsers, as indicated by the image path, it may suggest a non-browser application is being used potentially to establish a covert command and control (C2) channel through Telegram's APIs.\n\nTake note that there can be false positives, such as legitimate applications not listed as exceptions which also use the Telegram API. Therefore, while this detection process indicates potential covert C2 communication, each alert should be investigated to confirm the nature of the interaction. The severity of these detections is considered medium, underscoring the need for cautious analysis of alerts generated by this detection logic.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "an a non-browser process interacting with the Telegram API which could indicate use of a covert C2",
      "answer": "In order to detect a non-browser process interacting with the Telegram API which could indicate the use of a covert command and control (C2) channel, you should monitor network connections specifically targeting Windows as the operating system. Focus on identifying any destination hostname within network connections that contains 'api.telegram.org'. This is because telegram.org is often used for legitimate communications, but when a non-browser application attempts to engage with it, it could suggest a covert operation.\n\nHowever, not all communications with 'api.telegram.org' are inherently suspicious. Applications like web browsers regularly communicate with the Telegram API for various legitimate reasons. Therefore, exclude known web browsers from triggering an alert by checking the process image path against a list of common browsers. This list includes multiple versions and install locations of Chrome, Firefox, Internet Explorer, Microsoft Edge, Safari, Opera, and others like Brave, Maxthon, SeaMonkey, Vivaldi, and Whale. If the process initiating the connection is not one of these browsers, as indicated by the image path, it may suggest a non-browser application is being used potentially to establish a covert command and control (C2) channel through Telegram's APIs.\n\nTake note that there can be false positives, such as legitimate applications not listed as exceptions which also use the Telegram API. Therefore, while this detection process indicates potential covert C2 communication, each alert should be investigated to confirm the nature of the interaction. The severity of these detections is considered medium, underscoring the need for cautious analysis of alerts generated by this detection logic."
    }
  },
  {
    "instruction": "Can you explain how to detect: when an application acquires a certificate private key",
    "context": "",
    "output": "Certainly!\n\nIn order to detect when an application acquires a certificate private key, you should: Monitor the CAPI2 Operational log on Windows systems for event ID 70, which signals an instance where a certificate's private key is acquired. This activity can be indicative of malicious actions, such as attempts to access sensitive information or impersonate other entities by using their certificates. However, it's important to note that legitimate applications may also request certificate exports, which can lead to false positives. Therefore, it may be necessary to apply additional filters to accurately differentiate between malicious and benign behaviors. The detection of this event is considered to have a medium level of importance.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "when an application acquires a certificate private key",
      "answer": "In order to detect when an application acquires a certificate private key, you should: Monitor the CAPI2 Operational log on Windows systems for event ID 70, which signals an instance where a certificate's private key is acquired. This activity can be indicative of malicious actions, such as attempts to access sensitive information or impersonate other entities by using their certificates. However, it's important to note that legitimate applications may also request certificate exports, which can lead to false positives. Therefore, it may be necessary to apply additional filters to accurately differentiate between malicious and benign behaviors. The detection of this event is considered to have a medium level of importance."
    }
  },
  {
    "instruction": "Please help me detect the following: modification of autostart extensibility point (ASEP) in registry.",
    "context": "",
    "output": "Sure!\nIn order to detect modification of autostart extensibility point (ASEP) in the registry, you should monitor for specific changes in Windows registry settings associated with the WinSock (Windows Sockets API) parameters, which can indicate unauthorized adjustments to how applications automatically start or integrate with the network stack. \n\nThis involves tracking registry set actions (SetValue events) targeting the `\\System\\CurrentControlSet\\Services\\WinSock2\\Parameters` key or its subkeys, `\\Protocol_Catalog9\\Catalog_Entries` and `\\NameSpace_Catalog5\\Catalog_Entries`. These areas are pertinent as they control critical networking functionalities that could be leveraged by an attacker to ensure persistence or to manipulate network communications.\n\nTo accurately identify malicious activity and reduce false positives, filter out entries related to known benign software, specifically installations involving `C:\\Windows\\System32\\MsiExec.exe` and `C:\\Windows\\syswow64\\MsiExec.exe`, as these paths are common for legitimate software installers and might perform legitimate changes to these registry keys.\n\nThe relevant log source for these activities is the registry set category within Windows products. Key fields to keep in view include `SecurityID`, `ObjectName`, `OldValueType`, and `NewValueType`, as changes in these can offer insights into the nature of the modification and the scope of potential impacts.\n\nBe mindful of potential false positives, as legitimate software, including updates and installations, often modifies these Windows registry keys. Similarly, legitimate administrator actions might involve necessary adjustments to these settings for various benign reasons. These instances should be carefully considered to maintain a balance between security vigilance and operational functionality. \n\nThe detection is categorized under medium level due to the potential for legitimate use cases that might lead to modifications in these registry areas. It is essential to correlate this detection with other suspicious activities to ascertain the intent, whether benign or malicious. This observation is a component of broader security measures aimed at safeguarding against tactics and techniques related to the compromise and manipulation of system features for persistence, privilege escalation, or other unauthorized activities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "modification of autostart extensibility point (ASEP) in registry.",
      "answer": "In order to detect modification of autostart extensibility point (ASEP) in the registry, you should monitor for specific changes in Windows registry settings associated with the WinSock (Windows Sockets API) parameters, which can indicate unauthorized adjustments to how applications automatically start or integrate with the network stack. \n\nThis involves tracking registry set actions (SetValue events) targeting the `\\System\\CurrentControlSet\\Services\\WinSock2\\Parameters` key or its subkeys, `\\Protocol_Catalog9\\Catalog_Entries` and `\\NameSpace_Catalog5\\Catalog_Entries`. These areas are pertinent as they control critical networking functionalities that could be leveraged by an attacker to ensure persistence or to manipulate network communications.\n\nTo accurately identify malicious activity and reduce false positives, filter out entries related to known benign software, specifically installations involving `C:\\Windows\\System32\\MsiExec.exe` and `C:\\Windows\\syswow64\\MsiExec.exe`, as these paths are common for legitimate software installers and might perform legitimate changes to these registry keys.\n\nThe relevant log source for these activities is the registry set category within Windows products. Key fields to keep in view include `SecurityID`, `ObjectName`, `OldValueType`, and `NewValueType`, as changes in these can offer insights into the nature of the modification and the scope of potential impacts.\n\nBe mindful of potential false positives, as legitimate software, including updates and installations, often modifies these Windows registry keys. Similarly, legitimate administrator actions might involve necessary adjustments to these settings for various benign reasons. These instances should be carefully considered to maintain a balance between security vigilance and operational functionality. \n\nThe detection is categorized under medium level due to the potential for legitimate use cases that might lead to modifications in these registry areas. It is essential to correlate this detection with other suspicious activities to ascertain the intent, whether benign or malicious. This observation is a component of broader security measures aimed at safeguarding against tactics and techniques related to the compromise and manipulation of system features for persistence, privilege escalation, or other unauthorized activities."
    }
  },
  {
    "instruction": "Can you explain how to detect: suspicious call to the user32.dll function that locks the user workstation",
    "context": "",
    "output": "Certainly!\n\nIn order to detect a suspicious call to the user32.dll function that locks the user workstation, you should monitor for the creation of processes on Windows systems where the following criteria are met: \n\n1. The process image name ends with '\\rundll32.exe' or the original file name matches 'RUNDLL32.EXE'. This indicates the running process is rundll32.exe, which is a legitimate Windows program often misused in attacks.\n\n2. The parent process image name ends with '\\cmd.exe', identifying the command prompt as the parent process. This is common in script-based or command-line attacks.\n\n3. The command line includes 'user32.dll,' pointing to the specific DLL being called, and contains 'LockWorkStation'. Together, these suggest the use of rundll32.exe to call a function within user32.dll that locks the user's workstation. \n\nIt is important to log and review the names of the processes involved (both the Image and ParentImage) for any matches to the above criteria. However, be aware of legitimate scripts or shortcuts that may be used to lock the workstation, such as those that an end-user might have created for convenience. These are noted as potential false positives. The threat level for this activity is considered medium, indicating it's important but not an immediate high-priority threat.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious call to the user32.dll function that locks the user workstation",
      "answer": "In order to detect a suspicious call to the user32.dll function that locks the user workstation, you should monitor for the creation of processes on Windows systems where the following criteria are met: \n\n1. The process image name ends with '\\rundll32.exe' or the original file name matches 'RUNDLL32.EXE'. This indicates the running process is rundll32.exe, which is a legitimate Windows program often misused in attacks.\n\n2. The parent process image name ends with '\\cmd.exe', identifying the command prompt as the parent process. This is common in script-based or command-line attacks.\n\n3. The command line includes 'user32.dll,' pointing to the specific DLL being called, and contains 'LockWorkStation'. Together, these suggest the use of rundll32.exe to call a function within user32.dll that locks the user's workstation. \n\nIt is important to log and review the names of the processes involved (both the Image and ParentImage) for any matches to the above criteria. However, be aware of legitimate scripts or shortcuts that may be used to lock the workstation, such as those that an end-user might have created for convenience. These are noted as potential false positives. The threat level for this activity is considered medium, indicating it's important but not an immediate high-priority threat."
    }
  },
  {
    "instruction": "Can you explain how to detect: suspicious Spring framework exceptions that could indicate exploitation attempts",
    "context": "",
    "output": "Certainly!\n\nIn order to detect suspicious Spring framework exceptions that could indicate exploitation attempts, you should: Monitor application logs from products using the Spring framework for occurrences of specific exceptions. These exceptions include AccessDeniedException, CsrfException, InvalidCsrfTokenException, MissingCsrfTokenException, CookieTheftException, InvalidCookieException, and RequestRejectedException. When any of these exceptions are recorded in the logs, it might suggest an attempt to exploit the system, although one must consider potential false positives that could arise from application bugs. The severity of this monitoring strategy is considered medium, highlighting the importance of staying vigilant against possible exploitation activities targeting the Spring framework.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious Spring framework exceptions that could indicate exploitation attempts",
      "answer": "In order to detect suspicious Spring framework exceptions that could indicate exploitation attempts, you should: Monitor application logs from products using the Spring framework for occurrences of specific exceptions. These exceptions include AccessDeniedException, CsrfException, InvalidCsrfTokenException, MissingCsrfTokenException, CookieTheftException, InvalidCookieException, and RequestRejectedException. When any of these exceptions are recorded in the logs, it might suggest an attempt to exploit the system, although one must consider potential false positives that could arise from application bugs. The severity of this monitoring strategy is considered medium, highlighting the importance of staying vigilant against possible exploitation activities targeting the Spring framework."
    }
  },
  {
    "instruction": "How to detect: usage of the \"Import-Module\" cmdlet to load the \"Microsoft.ActiveDirectory.Management.dl\" DLL. Which is often used by attackers to perform AD enumeration.",
    "context": "",
    "output": "In order to detect usage of the \"Import-Module\" cmdlet to load the \"Microsoft.ActiveDirectory.Management.dll\" DLL, which is often used by attackers to perform AD enumeration, you should monitor for specific characteristics in process creation logs within Windows environments. Observations should focus on executions of PowerShell (powershell.exe or pwsh.exe) or instances where PowerShell\u2019s executable file name (PowerShell.EXE) or its associated dynamic link library (pwsh.dll) appears. Further scrutiny is required for any command line activity that includes the usage of 'Import-Module' or its alias 'ipmo', specifically when it is used to load the 'Microsoft.ActiveDirectory.Management.dll'. This behavior flags potential attempts at Active Directory enumeration, a common tactic in cyber attacks to gather information about the network's users, groups, and services.\n\nAttention should be paid to legitimate administrative activities that might use similar methods for benign purposes. Such instances are considered potential false positives. Detection efforts aimed at identifying this activity are set at a medium level of urgency, indicating a balanced approach to monitoring and response, ensuring that regular administrative tasks are not hindered while still maintaining vigilance against potential threats. The tags associated with this behavior include Tactic: Credential Access, and Technique: Unsecured Credentials, specifically relating to the misuse of PowerShell for executing commands that involve loading suspicious modules, indicative of reconnaissance activities or preparation for further attack stages.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of the \"Import-Module\" cmdlet to load the \"Microsoft.ActiveDirectory.Management.dl\" DLL. Which is often used by attackers to perform AD enumeration.",
      "answer": "In order to detect usage of the \"Import-Module\" cmdlet to load the \"Microsoft.ActiveDirectory.Management.dll\" DLL, which is often used by attackers to perform AD enumeration, you should monitor for specific characteristics in process creation logs within Windows environments. Observations should focus on executions of PowerShell (powershell.exe or pwsh.exe) or instances where PowerShell\u2019s executable file name (PowerShell.EXE) or its associated dynamic link library (pwsh.dll) appears. Further scrutiny is required for any command line activity that includes the usage of 'Import-Module' or its alias 'ipmo', specifically when it is used to load the 'Microsoft.ActiveDirectory.Management.dll'. This behavior flags potential attempts at Active Directory enumeration, a common tactic in cyber attacks to gather information about the network's users, groups, and services.\n\nAttention should be paid to legitimate administrative activities that might use similar methods for benign purposes. Such instances are considered potential false positives. Detection efforts aimed at identifying this activity are set at a medium level of urgency, indicating a balanced approach to monitoring and response, ensuring that regular administrative tasks are not hindered while still maintaining vigilance against potential threats. The tags associated with this behavior include Tactic: Credential Access, and Technique: Unsecured Credentials, specifically relating to the misuse of PowerShell for executing commands that involve loading suspicious modules, indicative of reconnaissance activities or preparation for further attack stages."
    }
  },
  {
    "instruction": "Can you explain how to detect: non-browser process interacting with the Google API which could indicate the use of a covert C2 such as Google Sheet C2 (GC2-sheet)",
    "context": "",
    "output": "Certainly!\n\nIn order to detect a non-browser process interacting with the Google API which could indicate the use of a covert C2 such as Google Sheet C2 (GC2-sheet), you should focus on monitoring network connections in Windows environments, particularly looking for activities that involve destinations known to be associated with Google APIs. These destinations include 'oauth2.googleapis.com', 'sheets.googleapis.com', 'drive.googleapis.com', and 'www.googleapis.com'. \n\nIt's essential to differentiate between legitimate and potentially malicious activity. To achieve this, filter out connections originating from known browser processes, including Chrome, Brave, Firefox, Internet Explorer, Edge, Opera, Safari, SeaMonkey, Vivaldi, Whale, as well as processes like Google Drive File Stream, Google Update, Outlook, and Teams which might legitimately communicate with Google APIs.\n\nThe presence of network connections to the specified Google API endpoints from applications other than the ones explicitly filtered out (like known browsers and Google-related legitimate applications) should raise suspicion. This activity might point to a misuse of Google's infrastructure for command and control purposes, particularly through non-browser applications. Pay attention to any unusual or unexpected applications making such connections as potential indicators of compromise.\n\nIt's crucial to be aware that there could be legitimate reasons for some applications to interact with Google APIs that aren't covered by the filters provided. This includes custom or specialized enterprise software which legitimately uses Google services for operation. Therefore, while alerts generated by this detection logic are a good starting point, they should be investigated to confirm whether they are benign or a sign of malicious activity, adjusting the exclusion list as necessary to minimize false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "non-browser process interacting with the Google API which could indicate the use of a covert C2 such as Google Sheet C2 (GC2-sheet)",
      "answer": "In order to detect a non-browser process interacting with the Google API which could indicate the use of a covert C2 such as Google Sheet C2 (GC2-sheet), you should focus on monitoring network connections in Windows environments, particularly looking for activities that involve destinations known to be associated with Google APIs. These destinations include 'oauth2.googleapis.com', 'sheets.googleapis.com', 'drive.googleapis.com', and 'www.googleapis.com'. \n\nIt's essential to differentiate between legitimate and potentially malicious activity. To achieve this, filter out connections originating from known browser processes, including Chrome, Brave, Firefox, Internet Explorer, Edge, Opera, Safari, SeaMonkey, Vivaldi, Whale, as well as processes like Google Drive File Stream, Google Update, Outlook, and Teams which might legitimately communicate with Google APIs.\n\nThe presence of network connections to the specified Google API endpoints from applications other than the ones explicitly filtered out (like known browsers and Google-related legitimate applications) should raise suspicion. This activity might point to a misuse of Google's infrastructure for command and control purposes, particularly through non-browser applications. Pay attention to any unusual or unexpected applications making such connections as potential indicators of compromise.\n\nIt's crucial to be aware that there could be legitimate reasons for some applications to interact with Google APIs that aren't covered by the filters provided. This includes custom or specialized enterprise software which legitimately uses Google services for operation. Therefore, while alerts generated by this detection logic are a good starting point, they should be investigated to confirm whether they are benign or a sign of malicious activity, adjusting the exclusion list as necessary to minimize false positives."
    }
  },
  {
    "instruction": "How can I detect: potential use of an SSH utility to establish RDP over a reverse SSH Tunnel. This can be used by attackers to enable routing of network packets that would otherwise not reach their intended destination.",
    "context": "",
    "output": "In order to detect potential use of an SSH utility to establish RDP over a reverse SSH Tunnel, which can be used by attackers to enable routing of network packets that would otherwise not reach their intended destination, you should: Focus on monitoring the creation of processes within Windows environments. Specifically, look for command lines that contain references to the RDP port number '3389', which is indicative of Remote Desktop Protocol activity. Additionally, pay attention to command lines that include switches commonly associated with SSH tunneling, such as '-L', '-P', '-R', '-pw', and '-ssh'. These commands and options are often utilized when setting up reverse tunnels with SSH, which can be a method for bypassing network controls and facilitating unauthorised access. It is important to evaluate all instances where these patterns are found together to effectively identify suspicious activity. False positives may occur, and the threat level for such detections is considered medium.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential use of an SSH utility to establish RDP over a reverse SSH Tunnel. This can be used by attackers to enable routing of network packets that would otherwise not reach their intended destination.",
      "answer": "In order to detect potential use of an SSH utility to establish RDP over a reverse SSH Tunnel, which can be used by attackers to enable routing of network packets that would otherwise not reach their intended destination, you should: Focus on monitoring the creation of processes within Windows environments. Specifically, look for command lines that contain references to the RDP port number '3389', which is indicative of Remote Desktop Protocol activity. Additionally, pay attention to command lines that include switches commonly associated with SSH tunneling, such as '-L', '-P', '-R', '-pw', and '-ssh'. These commands and options are often utilized when setting up reverse tunnels with SSH, which can be a method for bypassing network controls and facilitating unauthorised access. It is important to evaluate all instances where these patterns are found together to effectively identify suspicious activity. False positives may occur, and the threat level for such detections is considered medium."
    }
  },
  {
    "instruction": "How to detect: multiple file rename or delete events occurrence within a specified period of time by a same user (these events may signalize about ransomware activity).",
    "context": "",
    "output": "In order to detect multiple file rename or delete events occurrence within a specified period of time by a same user (these events may signalize about ransomware activity), you should:\n\nMonitor Windows security logs for event ID 4663, which indicates an attempt to access a file object. Pay special attention to the instances where the object type is specifically a file and the access list includes '%%1537', signaling a rename or delete operation. Furthermore, ensure the keyword '0x8020000000000000' is present in the log entry, as it denotes a specific type of access attempt related to these operations. To effectively identify potential ransomware activity, look for cases where more than ten of these specific events are detected within a short timeframe of 30 seconds, all linked by the same SubjectLogonId, indicating they were performed by the same user account.\n\nBe mindful of potential false positives which may arise from legitimate activities like software uninstallation processes or file restoration activities, which can also trigger similar log entries. The alert level for such detections is considered medium, emphasizing the need for further investigation to confirm malicious activities. This monitoring strategy aligns with understanding and mitigating tactics and techniques such as Data Destruction and Data Encrypted for Impact, common in ransomware attacks.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "multiple file rename or delete events occurrence within a specified period of time by a same user (these events may signalize about ransomware activity).",
      "answer": "In order to detect multiple file rename or delete events occurrence within a specified period of time by a same user (these events may signalize about ransomware activity), you should:\n\nMonitor Windows security logs for event ID 4663, which indicates an attempt to access a file object. Pay special attention to the instances where the object type is specifically a file and the access list includes '%%1537', signaling a rename or delete operation. Furthermore, ensure the keyword '0x8020000000000000' is present in the log entry, as it denotes a specific type of access attempt related to these operations. To effectively identify potential ransomware activity, look for cases where more than ten of these specific events are detected within a short timeframe of 30 seconds, all linked by the same SubjectLogonId, indicating they were performed by the same user account.\n\nBe mindful of potential false positives which may arise from legitimate activities like software uninstallation processes or file restoration activities, which can also trigger similar log entries. The alert level for such detections is considered medium, emphasizing the need for further investigation to confirm malicious activities. This monitoring strategy aligns with understanding and mitigating tactics and techniques such as Data Destruction and Data Encrypted for Impact, common in ransomware attacks."
    }
  },
  {
    "instruction": "Explain how should I detect the following: Access to Domain Group Policies stored in SYSVOL",
    "context": "",
    "output": "In order to detect access to Domain Group Policies stored in SYSVOL, you should monitor for the creation of processes on Windows systems that involve command lines containing both '\\SYSVOL\\' and '\\policies\\' paths. This is indicative of activities related to accessing or manipulating Domain Group Policies which are typically stored within the SYSVOL folder on domain controllers. Be aware that genuine administrative activities can also trigger this detection due to legitimate access to the SYSVOL directory, thus these should be considered as potential false positives. The severity of this rule is deemed medium, reflecting the importance of vigilance against unauthorized attempts to access or alter domain policies, which could signify a security threat or an attempt to assert control over domain resources and settings.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Access to Domain Group Policies stored in SYSVOL",
      "answer": "In order to detect access to Domain Group Policies stored in SYSVOL, you should monitor for the creation of processes on Windows systems that involve command lines containing both '\\SYSVOL\\' and '\\policies\\' paths. This is indicative of activities related to accessing or manipulating Domain Group Policies which are typically stored within the SYSVOL folder on domain controllers. Be aware that genuine administrative activities can also trigger this detection due to legitimate access to the SYSVOL directory, thus these should be considered as potential false positives. The severity of this rule is deemed medium, reflecting the importance of vigilance against unauthorized attempts to access or alter domain policies, which could signify a security threat or an attempt to assert control over domain resources and settings."
    }
  },
  {
    "instruction": "How can I detect: executions of scripts located in potentially suspicious locations such as \"/tmp\" via a shell such as \"bash\", \"sh\", etc.",
    "context": "",
    "output": "In order to detect executions of scripts located in potentially suspicious locations such as \"/tmp\" via a shell such as \"bash\", \"sh\", etc., you should monitor Linux systems for the creation of process events that involve the use of various common shells including bash, csh, dash, fish, ksh, sh, and zsh. Specifically, focus on commands that include the '-c' flag, which denotes that the command is being read from the next string in the environment, thus indicating a direct command execution rather than the start of an interactive shell session. Additionally, it's crucial to look for commands that involve scripts located in locations considered to be potentially suspicious, like '/tmp/'. These criteria aim to highlight instances where scripts, which could be malicious, are being run from locations that are typically used by attackers to store and execute malware or scripts due to their writable nature for most users. This technique is a common tactic used in various types of attacks to execute malicious scripts without leaving much trace. It's important to investigate these instances to rule out false positives, as legitimate tasks might occasionally perform similar actions.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "executions of scripts located in potentially suspicious locations such as \"/tmp\" via a shell such as \"bash\", \"sh\", etc.",
      "answer": "In order to detect executions of scripts located in potentially suspicious locations such as \"/tmp\" via a shell such as \"bash\", \"sh\", etc., you should monitor Linux systems for the creation of process events that involve the use of various common shells including bash, csh, dash, fish, ksh, sh, and zsh. Specifically, focus on commands that include the '-c' flag, which denotes that the command is being read from the next string in the environment, thus indicating a direct command execution rather than the start of an interactive shell session. Additionally, it's crucial to look for commands that involve scripts located in locations considered to be potentially suspicious, like '/tmp/'. These criteria aim to highlight instances where scripts, which could be malicious, are being run from locations that are typically used by attackers to store and execute malware or scripts due to their writable nature for most users. This technique is a common tactic used in various types of attacks to execute malicious scripts without leaving much trace. It's important to investigate these instances to rule out false positives, as legitimate tasks might occasionally perform similar actions."
    }
  },
  {
    "instruction": "Please help me detect the following: execution of the Notepad++ updater in a suspicious directory, which is often used in DLL side-loading attacks",
    "context": "",
    "output": "Sure!\nIn order to detect execution of the Notepad++ updater in a suspicious directory, which is often used in DLL side-loading attacks, you should monitor for the creation of processes on Windows systems, paying close attention to any executions of a program named `GUP.exe`. This is particularly important if `GUP.exe` is not running from its conventional location within the Notepad++ program directories, specifically the updater folder located in either the standard `Program Files` or `Program Files (x86)` paths, or within a user's `AppData\\Local` or `AppData\\Roaming` directories under Notepad++'s updater folder.\n\nYou should disregard any instances where `GUP.exe` executes from these known legitimate paths as these can be considered normal behavior and not indicative of a suspicious activity. However, executing from locations outside these paths could potentially signal a DLL side-loading attack, whereby an adversary places a malicious executable in a directory where the system or another program may inadvertently run it, thinking it's the legitimate Notepad++ updater. This method is often exploited to bypass security measures and execute malicious code under the guise of legitimate processes.\n\nTo effectively mitigate false positive alerts, it's important to consider that any `GUP.exe` executions occurring outside of the described Notepad++ updater locations should be investigated, while those within the specified legitimate paths should not trigger an alert, recognizing that `GUP.exe` running from its correct location is expected and not of concern. This vigilant monitoring approach ensures a high level of detection precision for activities associated with DLL side-loading tactics employing the Notepad++ updater as a disguise.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of the Notepad++ updater in a suspicious directory, which is often used in DLL side-loading attacks",
      "answer": "In order to detect execution of the Notepad++ updater in a suspicious directory, which is often used in DLL side-loading attacks, you should monitor for the creation of processes on Windows systems, paying close attention to any executions of a program named `GUP.exe`. This is particularly important if `GUP.exe` is not running from its conventional location within the Notepad++ program directories, specifically the updater folder located in either the standard `Program Files` or `Program Files (x86)` paths, or within a user's `AppData\\Local` or `AppData\\Roaming` directories under Notepad++'s updater folder.\n\nYou should disregard any instances where `GUP.exe` executes from these known legitimate paths as these can be considered normal behavior and not indicative of a suspicious activity. However, executing from locations outside these paths could potentially signal a DLL side-loading attack, whereby an adversary places a malicious executable in a directory where the system or another program may inadvertently run it, thinking it's the legitimate Notepad++ updater. This method is often exploited to bypass security measures and execute malicious code under the guise of legitimate processes.\n\nTo effectively mitigate false positive alerts, it's important to consider that any `GUP.exe` executions occurring outside of the described Notepad++ updater locations should be investigated, while those within the specified legitimate paths should not trigger an alert, recognizing that `GUP.exe` running from its correct location is expected and not of concern. This vigilant monitoring approach ensures a high level of detection precision for activities associated with DLL side-loading tactics employing the Notepad++ updater as a disguise."
    }
  },
  {
    "instruction": "How can I detect: possible process memory dump based on a keyword in the file name of the accessing process",
    "context": "",
    "output": "In order to detect a possible process memory dump based on a keyword in the file name of the accessing process, you should monitor for instances where a process attempts to access the memory of the Local Security Authority Subsystem Service (lsass.exe) on Windows systems. Look for processes whose image names end with '\\lsass.exe' and originate from source images that contain the word 'dump'. Additionally, be alert for processes that have been granted specific access rights, which are typically indicative of attempts to read from or write to lsass.exe's memory. These specific access rights include a variety of hexademically-notated permissions such as '10', '30', '50', up to 'FA', and a particular focus on '0x14C2', a permission linked to specific memory dumping techniques. While carrying out this monitoring, it's crucial to remember that there are rare, legitimate scenarios where benign programs might fit this pattern by accessing lsass for non-malicious reasons. This detection strategy is vital because capturing or dumping the memory of lsass.exe is a tactic often employed by attackers seeking to harvest credentials and other sensitive information directly from system memory, posing a high threat level to the integrity and security of the affected systems.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "possible process memory dump based on a keyword in the file name of the accessing process",
      "answer": "In order to detect a possible process memory dump based on a keyword in the file name of the accessing process, you should monitor for instances where a process attempts to access the memory of the Local Security Authority Subsystem Service (lsass.exe) on Windows systems. Look for processes whose image names end with '\\lsass.exe' and originate from source images that contain the word 'dump'. Additionally, be alert for processes that have been granted specific access rights, which are typically indicative of attempts to read from or write to lsass.exe's memory. These specific access rights include a variety of hexademically-notated permissions such as '10', '30', '50', up to 'FA', and a particular focus on '0x14C2', a permission linked to specific memory dumping techniques. While carrying out this monitoring, it's crucial to remember that there are rare, legitimate scenarios where benign programs might fit this pattern by accessing lsass for non-malicious reasons. This detection strategy is vital because capturing or dumping the memory of lsass.exe is a tactic often employed by attackers seeking to harvest credentials and other sensitive information directly from system memory, posing a high threat level to the integrity and security of the affected systems."
    }
  },
  {
    "instruction": "How to detect: suspicious use of XORDump process memory dumping utility",
    "context": "",
    "output": "In order to detect suspicious use of XORDump process memory dumping utility, you should: Monitor the creation of processes on Windows systems, particularly looking for any instances where a process ends with '\\xordump.exe'. Additionally, scrutinize the command lines used to initiate processes, especially those containing specific parameters such as ' -process lsass.exe ', ' -m comsvcs ', ' -m dbghelp ', or ' -m dbgcore '. These parameters are indicators of potentially malicious activity related to memory dumping methods that are commonly associated with gaining unauthorized access or executing malign code on the system. It is critical to note, however, that there may be legitimate uses of these command line switches by other tools, which should be considered as possible false positives. The importance of this detection mechanism is rated high due to the severe implications of successful exploitation.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious use of XORDump process memory dumping utility",
      "answer": "In order to detect suspicious use of XORDump process memory dumping utility, you should: Monitor the creation of processes on Windows systems, particularly looking for any instances where a process ends with '\\xordump.exe'. Additionally, scrutinize the command lines used to initiate processes, especially those containing specific parameters such as ' -process lsass.exe ', ' -m comsvcs ', ' -m dbghelp ', or ' -m dbgcore '. These parameters are indicators of potentially malicious activity related to memory dumping methods that are commonly associated with gaining unauthorized access or executing malign code on the system. It is critical to note, however, that there may be legitimate uses of these command line switches by other tools, which should be considered as possible false positives. The importance of this detection mechanism is rated high due to the severe implications of successful exploitation."
    }
  },
  {
    "instruction": "Explain how should I detect the following: Windows executables that writes files with suspicious extensions",
    "context": "",
    "output": "In order to detect Windows executables that write files with suspicious extensions, you should monitor file system events on Windows systems for the creation or modification of files by specific Windows executables. Pay special attention to files ending with extensions like '.bat', '.vbe', '.txt', '.vbs', '.exe', '.ps1', '.hta', '.iso', and '.dll', as these can often be linked to malicious activities. The list of executables to watch includes common Windows process names such as 'smss.exe', 'RuntimeBroker.exe', 'sihost.exe', 'lsass.exe', 'csrss.exe', 'winlogon.exe', and 'wininit.exe'. However, increased scrutiny should be applied to actions initiated by 'rundll32.exe', 'svchost.exe', and 'dllhost.exe', as these are frequently leveraged by threat actors for malicious purposes. It is crucial to examine these file interactions within the file event logs to detect potentially harmful activities involving these file types and executables, aiding in identifying and mitigating attacks that leverage file manipulation or masquerade as legitimate system processes.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Windows executables that writes files with suspicious extensions",
      "answer": "In order to detect Windows executables that write files with suspicious extensions, you should monitor file system events on Windows systems for the creation or modification of files by specific Windows executables. Pay special attention to files ending with extensions like '.bat', '.vbe', '.txt', '.vbs', '.exe', '.ps1', '.hta', '.iso', and '.dll', as these can often be linked to malicious activities. The list of executables to watch includes common Windows process names such as 'smss.exe', 'RuntimeBroker.exe', 'sihost.exe', 'lsass.exe', 'csrss.exe', 'winlogon.exe', and 'wininit.exe'. However, increased scrutiny should be applied to actions initiated by 'rundll32.exe', 'svchost.exe', and 'dllhost.exe', as these are frequently leveraged by threat actors for malicious purposes. It is crucial to examine these file interactions within the file event logs to detect potentially harmful activities involving these file types and executables, aiding in identifying and mitigating attacks that leverage file manipulation or masquerade as legitimate system processes."
    }
  },
  {
    "instruction": "Can you explain how to detect: blocking of process creations originating from PSExec and WMI commands",
    "context": "",
    "output": "Certainly!\n\nIn order to detect blocking of process creations originating from PSExec and WMI commands, you should monitor Windows Defender events. Specifically, capture logs from Windows Defender (WinDefend) with the requirement of having \"Block process creations originating from PSExec and WMI commands\" from Attack Surface Reduction configured. Look for Event ID 1121, which indicates an execution attempt blocked by this rule, and focus on processes ending with '\\wmiprvse.exe' or '\\psexesvc.exe'. These entries are crucial as they signify blocked attempts to create processes via Windows Management Instrumentation (WMI) and PSExec, respectively. The detection of such events is of high importance due to the potential misuse of these tools in cyber attacks, involving tactics and techniques such as Execution, Persistence, Privilege Escalation, and Defense Evasion.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "blocking of process creations originating from PSExec and WMI commands",
      "answer": "In order to detect blocking of process creations originating from PSExec and WMI commands, you should monitor Windows Defender events. Specifically, capture logs from Windows Defender (WinDefend) with the requirement of having \"Block process creations originating from PSExec and WMI commands\" from Attack Surface Reduction configured. Look for Event ID 1121, which indicates an execution attempt blocked by this rule, and focus on processes ending with '\\wmiprvse.exe' or '\\psexesvc.exe'. These entries are crucial as they signify blocked attempts to create processes via Windows Management Instrumentation (WMI) and PSExec, respectively. The detection of such events is of high importance due to the potential misuse of these tools in cyber attacks, involving tactics and techniques such as Execution, Persistence, Privilege Escalation, and Defense Evasion."
    }
  },
  {
    "instruction": "How to detect: changes to the AppInstaller (winget) admin settings. Such as enabling local manifest installations or disabling installer hash checks",
    "context": "",
    "output": "In order to detect changes to the AppInstaller (winget) admin settings, such as enabling local manifest installations or disabling installer hash checks, you should monitor Windows registry settings. Specifically, look for events where the type is \"SetValue\" indicating a modification has been made. This event should originate from an executable path ending with '\\winget.exe', ensuring the modification is related to the AppInstaller. Additionally, ensure the target object of this modification begins with '\\REGISTRY\\A\\' and ends with '\\LocalState\\admin_settings', pinpointing the specific part of the registry where admin settings for the AppInstaller are stored. Be aware that these detections might include false positives because the event doesn't specify the type of change made; thus, legitimate modifications to these settings could also trigger alerts. The importance of monitoring these modifications is categorized as low level, indicating they should be tracked but are not typically critical security issues on their own. However, vigilance in detecting these changes is crucial as they relate to the modification of admin settings that could potentially enable actions like local manifest installations or disable installer hash checks, presenting security risks if altered maliciously.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "changes to the AppInstaller (winget) admin settings. Such as enabling local manifest installations or disabling installer hash checks",
      "answer": "In order to detect changes to the AppInstaller (winget) admin settings, such as enabling local manifest installations or disabling installer hash checks, you should monitor Windows registry settings. Specifically, look for events where the type is \"SetValue\" indicating a modification has been made. This event should originate from an executable path ending with '\\winget.exe', ensuring the modification is related to the AppInstaller. Additionally, ensure the target object of this modification begins with '\\REGISTRY\\A\\' and ends with '\\LocalState\\admin_settings', pinpointing the specific part of the registry where admin settings for the AppInstaller are stored. Be aware that these detections might include false positives because the event doesn't specify the type of change made; thus, legitimate modifications to these settings could also trigger alerts. The importance of monitoring these modifications is categorized as low level, indicating they should be tracked but are not typically critical security issues on their own. However, vigilance in detecting these changes is crucial as they relate to the modification of admin settings that could potentially enable actions like local manifest installations or disable installer hash checks, presenting security risks if altered maliciously."
    }
  },
  {
    "instruction": "How to detect: Microsoft Cloud App Security reported users were active from an IP address identified as risky by Microsoft Threat Intelligence.\nThese IP addresses are involved in malicious activities, such as Botnet C&C, and may indicate compromised account.\n",
    "context": "",
    "output": "In order to detect when a Microsoft Cloud App Security reported users were active from an IP address identified as risky by Microsoft Threat Intelligence. These IP addresses are involved in malicious activities, such as Botnet C&C, and may indicate compromised account, you should: Monitor for specific events within the Microsoft 365 environment, particularly focusing on the Threat Detection service. Specifically, look for logs from the Security Compliance Center that report activities from IP addresses categorized as suspicious. These are flagged based on their reputation and known malicious activities, such as involvement in Botnet Command and Control (C&C) operations. The specific event to watch for is called \"Activity from suspicious IP addresses,\" and it must have a status of success to be considered relevant. This detection aims to identify potentially compromised accounts acting from IP addresses known for malicious behavior, which is critical for maintaining security within an organization's Microsoft cloud environment. It's important to note that some activities could be flagged as false positives, meaning they are marked as suspicious but do not actually represent malicious behavior. The threat level associated with this detection is considered medium.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Microsoft Cloud App Security reported users were active from an IP address identified as risky by Microsoft Threat Intelligence.\nThese IP addresses are involved in malicious activities, such as Botnet C&C, and may indicate compromised account.\n",
      "answer": "In order to detect when a Microsoft Cloud App Security reported users were active from an IP address identified as risky by Microsoft Threat Intelligence. These IP addresses are involved in malicious activities, such as Botnet C&C, and may indicate compromised account, you should: Monitor for specific events within the Microsoft 365 environment, particularly focusing on the Threat Detection service. Specifically, look for logs from the Security Compliance Center that report activities from IP addresses categorized as suspicious. These are flagged based on their reputation and known malicious activities, such as involvement in Botnet Command and Control (C&C) operations. The specific event to watch for is called \"Activity from suspicious IP addresses,\" and it must have a status of success to be considered relevant. This detection aims to identify potentially compromised accounts acting from IP addresses known for malicious behavior, which is critical for maintaining security within an organization's Microsoft cloud environment. It's important to note that some activities could be flagged as false positives, meaning they are marked as suspicious but do not actually represent malicious behavior. The threat level associated with this detection is considered medium."
    }
  },
  {
    "instruction": "Please help me detect the following: Obfuscated Powershell via RUNDLL LAUNCHER",
    "context": "",
    "output": "Sure!\nIn order to Detect Obfuscated Powershell via RUNDLL LAUNCHER, you should: Focus on monitoring driver load events in Windows environments. Specifically, look for the loading of drivers where the ImagePath includes rundll32.exe in conjunction with shell32.dll, as well as the specific mention of shellexec_rundll and powershell within the same command context. This scenario is indicative of a method used to execute obfuscated PowerShell scripts, an approach commonly leveraged by attackers to evade detection mechanisms. Such actions align with defense evasion and execution tactics, particularly those involving the obfuscation of malicious scripts (T1027) and the execution of PowerShell scripts (T1059.001) in an attempt to sidestep security measures. The identification of these activities should be met with a medium level of alertness due to the potential for false positives, although such occurrences are currently unknown.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Obfuscated Powershell via RUNDLL LAUNCHER",
      "answer": "In order to Detect Obfuscated Powershell via RUNDLL LAUNCHER, you should: Focus on monitoring driver load events in Windows environments. Specifically, look for the loading of drivers where the ImagePath includes rundll32.exe in conjunction with shell32.dll, as well as the specific mention of shellexec_rundll and powershell within the same command context. This scenario is indicative of a method used to execute obfuscated PowerShell scripts, an approach commonly leveraged by attackers to evade detection mechanisms. Such actions align with defense evasion and execution tactics, particularly those involving the obfuscation of malicious scripts (T1027) and the execution of PowerShell scripts (T1059.001) in an attempt to sidestep security measures. The identification of these activities should be met with a medium level of alertness due to the potential for false positives, although such occurrences are currently unknown."
    }
  },
  {
    "instruction": "Please help me detect the following: Obfuscated Powershell via RUNDLL LAUNCHER",
    "context": "",
    "output": "Sure!\nIn order to Detect Obfuscated Powershell via RUNDLL LAUNCHER, you should: Monitor Windows security event logs, specifically focusing on enabling the 'System Security Extension' audit subcategory to capture Event ID 4697. This event ID is critical for detecting instances where services are being installed, which could be indicative of malicious activity, especially when certain file names and command lines are involved. The detection hinges on spotting any service installation attempts that involve the combination of 'rundll32.exe', 'shell32.dll', 'shellexec_rundll', and 'powershell' in the Service File Name field. These particular command-line arguments are often used in obfuscation techniques to hide the true nature of a PowerShell script execution, which can be a common tactic in various attack scenarios. Given this method's stealthy nature, it's been tagged with tactics and techniques that include Execution, Persistence, and Defense Evasion, without directly indicating these by their MITRE ATT&CK identifiers. While there's acknowledgement of unknown false positives, the level of concern is set at medium, suggesting a balanced approach to vigilance against these types of threats. This approach underscores the importance of detailed monitoring and analysis of security logs for indicators of sophisticated PowerShell usage that could evade simpler detection methods.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Obfuscated Powershell via RUNDLL LAUNCHER",
      "answer": "In order to Detect Obfuscated Powershell via RUNDLL LAUNCHER, you should: Monitor Windows security event logs, specifically focusing on enabling the 'System Security Extension' audit subcategory to capture Event ID 4697. This event ID is critical for detecting instances where services are being installed, which could be indicative of malicious activity, especially when certain file names and command lines are involved. The detection hinges on spotting any service installation attempts that involve the combination of 'rundll32.exe', 'shell32.dll', 'shellexec_rundll', and 'powershell' in the Service File Name field. These particular command-line arguments are often used in obfuscation techniques to hide the true nature of a PowerShell script execution, which can be a common tactic in various attack scenarios. Given this method's stealthy nature, it's been tagged with tactics and techniques that include Execution, Persistence, and Defense Evasion, without directly indicating these by their MITRE ATT&CK identifiers. While there's acknowledgement of unknown false positives, the level of concern is set at medium, suggesting a balanced approach to vigilance against these types of threats. This approach underscores the importance of detailed monitoring and analysis of security logs for indicators of sophisticated PowerShell usage that could evade simpler detection methods."
    }
  },
  {
    "instruction": "How to detect: Adversaries may use binary padding to add junk data and change the on-disk representation of malware. This rule detect using dd and truncate to add a junk data to file.",
    "context": "",
    "output": "In order to detect adversaries who may use binary padding to add junk data and change the on-disk representation of malware on macOS systems, you should: Monitor process creation logs for instances where either the 'truncate' command ends with '/truncate' and contains the '-s +' in the command line indicating an increase in file size, or the 'dd' command ends with '/dd' and includes command lines that contain 'if=/dev/zero' for null padding, 'if=/dev/random' for high-quality random data, and 'if=/dev/urandom' for low-quality random data. These activities could signify attempts to use binary padding to manipulate the appearance of malware on the disk. It's important to note that there might be legitimate uses of these commands in scripts, so any detection should be reviewed to confirm the context of their use. The severity of this rule is considered high because it's associated with techniques aimed at evading detection.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Adversaries may use binary padding to add junk data and change the on-disk representation of malware. This rule detect using dd and truncate to add a junk data to file.",
      "answer": "In order to detect adversaries who may use binary padding to add junk data and change the on-disk representation of malware on macOS systems, you should: Monitor process creation logs for instances where either the 'truncate' command ends with '/truncate' and contains the '-s +' in the command line indicating an increase in file size, or the 'dd' command ends with '/dd' and includes command lines that contain 'if=/dev/zero' for null padding, 'if=/dev/random' for high-quality random data, and 'if=/dev/urandom' for low-quality random data. These activities could signify attempts to use binary padding to manipulate the appearance of malware on the disk. It's important to note that there might be legitimate uses of these commands in scripts, so any detection should be reviewed to confirm the context of their use. The severity of this rule is considered high because it's associated with techniques aimed at evading detection."
    }
  },
  {
    "instruction": "Can you explain how to detect: possible addition of shadow credentials to an active directory object.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect possible addition of shadow credentials to an active directory object, you should monitor Windows security event logs, particularly focusing on events generated by changes to the directory service. This requires the \"Audit Directory Service Changes\" logging policy to be configured, as audit events will only be logged for objects that have system access control lists (SACLs) set up and are accessed in ways that match those SACL settings. Notably, the events of interest include event ID 5136, which indicates a change was made to an object in Active Directory. Specifically, pay attention to changes made to the 'msDS-KeyCredentialLink' attribute, as modifications to this attribute could signify the unauthorized addition of shadow credentials, which attackers could use to gain elevated privileges or maintain persistence in the network.\n\nHowever, be aware that there are legitimate scenarios where this attribute might be altered, such as operations performed by the Azure AD Connect synchronization account or the ADFS service account. These legitimate cases should be considered exceptions to reduce false positives. The logging of these events will not only help in identifying unauthorized modifications but also in assessing the security posture of Active Directory objects regarding their SACL configurations. In essence, vigilance over these specific event IDs and attributes is crucial for detecting and mitigating potential attacks that attempt to introduce shadow credentials into Active Directory objects.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "possible addition of shadow credentials to an active directory object.",
      "answer": "In order to detect possible addition of shadow credentials to an active directory object, you should monitor Windows security event logs, particularly focusing on events generated by changes to the directory service. This requires the \"Audit Directory Service Changes\" logging policy to be configured, as audit events will only be logged for objects that have system access control lists (SACLs) set up and are accessed in ways that match those SACL settings. Notably, the events of interest include event ID 5136, which indicates a change was made to an object in Active Directory. Specifically, pay attention to changes made to the 'msDS-KeyCredentialLink' attribute, as modifications to this attribute could signify the unauthorized addition of shadow credentials, which attackers could use to gain elevated privileges or maintain persistence in the network.\n\nHowever, be aware that there are legitimate scenarios where this attribute might be altered, such as operations performed by the Azure AD Connect synchronization account or the ADFS service account. These legitimate cases should be considered exceptions to reduce false positives. The logging of these events will not only help in identifying unauthorized modifications but also in assessing the security posture of Active Directory objects regarding their SACL configurations. In essence, vigilance over these specific event IDs and attributes is crucial for detecting and mitigating potential attacks that attempt to introduce shadow credentials into Active Directory objects."
    }
  },
  {
    "instruction": "How can I detect: DLL sideloading of DLLs that are loaded by the SCM for some services (IKE, IKEEXT, SessionEnv) which do not exists on a typical modern system",
    "context": "",
    "output": "In order to detect DLL sideloading of DLLs that are loaded by the SCM for some services (IKE, IKEEXT, SessionEnv) which do not exist on a typical modern system, you should: Monitor the image load events on Windows systems, especially focusing on the loading of specific DLL files such as 'C:\\Windows\\System32\\WLBSCTRL.dll', 'C:\\Windows\\System32\\TSMSISrv.dll', and 'C:\\Windows\\System32\\TSVIPSrv.dll' by the 'C:\\Windows\\System32\\svchost.exe' process. This observation is crucial because these particular DLLs are not usually found on modern systems and their unexpected loading by services that manage critical tasks like IKE (Internet Key Exchange), IKEEXT (IKE Extension), and SessionEnv (Session Environment) could indicate an attempt of malicious behavior involving DLL sideloading. Such monitoring can help in identifying potentially malicious activities associated with this technique.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "DLL sideloading of DLLs that are loaded by the SCM for some services (IKE, IKEEXT, SessionEnv) which do not exists on a typical modern system",
      "answer": "In order to detect DLL sideloading of DLLs that are loaded by the SCM for some services (IKE, IKEEXT, SessionEnv) which do not exist on a typical modern system, you should: Monitor the image load events on Windows systems, especially focusing on the loading of specific DLL files such as 'C:\\Windows\\System32\\WLBSCTRL.dll', 'C:\\Windows\\System32\\TSMSISrv.dll', and 'C:\\Windows\\System32\\TSVIPSrv.dll' by the 'C:\\Windows\\System32\\svchost.exe' process. This observation is crucial because these particular DLLs are not usually found on modern systems and their unexpected loading by services that manage critical tasks like IKE (Internet Key Exchange), IKEEXT (IKE Extension), and SessionEnv (Session Environment) could indicate an attempt of malicious behavior involving DLL sideloading. Such monitoring can help in identifying potentially malicious activities associated with this technique."
    }
  },
  {
    "instruction": "Explain how should I detect the following: The attacker creates a computer object using those permissions with a password known to her.\nAfter that she clears the attribute ServicePrincipalName on the computer object.\nBecause she created the object (CREATOR OWNER), she gets granted additional permissions and can do many changes to the object.\n",
    "context": "",
    "output": "In order to detect activities indicative of an attacker creating a computer object using specific permissions with a known password, and then clearing the ServicePrincipalName attribute on the computer object to gain additional permissions and make various changes, you should monitor for specific event IDs within the Windows System log. These events are logged by the \"Microsoft-Windows-Kerberos-Key-Distribution-Center\", which is part of Active Directory services. The events of interest are:\n\n- Event ID 35, which indicates a Privilege Attribute Certificate (PAC) was issued without attributes. This could signify an abnormal ticket request, potentially part of an exploitation attempt to manipulate permissions or access levels.\n- Event ID 36, highlighting a ticket was issued without a PAC. This is unusual because a PAC contains user authorization and security information, and its absence could signal an attempt to bypass security mechanisms.\n- Event ID 37, signifying a ticket issuance without a requester. This could be an indication of an impersonation or privilege escalation attempt, where an attacker might be trying to gain access or permissions without valid credentials.\n- Event ID 38, which shows a mismatch between the requestor's information and the ticket issued. This again could point towards an impersonation or an attempt to access resources unauthorizedly.\n\nMonitoring these events can help in identifying suspicious activities related to the modification of computer objects within Active Directory. It's crucial to investigate occurrences of these events, notwithstanding that some might be false positives, for understanding the context and ensuring that they are not part of an attack. The fields to particularly look at in these events include the 'samAccountName' which might give insight into which accounts are being targeted or misused.\n\nThe security level for these detections is considered medium, indicating a significant risk that warrants attention but not an immediate high threat. It's advised to regularly review these logs and investigate any anomalies to protect against potential attacks exploiting these methods.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "The attacker creates a computer object using those permissions with a password known to her.\nAfter that she clears the attribute ServicePrincipalName on the computer object.\nBecause she created the object (CREATOR OWNER), she gets granted additional permissions and can do many changes to the object.\n",
      "answer": "In order to detect activities indicative of an attacker creating a computer object using specific permissions with a known password, and then clearing the ServicePrincipalName attribute on the computer object to gain additional permissions and make various changes, you should monitor for specific event IDs within the Windows System log. These events are logged by the \"Microsoft-Windows-Kerberos-Key-Distribution-Center\", which is part of Active Directory services. The events of interest are:\n\n- Event ID 35, which indicates a Privilege Attribute Certificate (PAC) was issued without attributes. This could signify an abnormal ticket request, potentially part of an exploitation attempt to manipulate permissions or access levels.\n- Event ID 36, highlighting a ticket was issued without a PAC. This is unusual because a PAC contains user authorization and security information, and its absence could signal an attempt to bypass security mechanisms.\n- Event ID 37, signifying a ticket issuance without a requester. This could be an indication of an impersonation or privilege escalation attempt, where an attacker might be trying to gain access or permissions without valid credentials.\n- Event ID 38, which shows a mismatch between the requestor's information and the ticket issued. This again could point towards an impersonation or an attempt to access resources unauthorizedly.\n\nMonitoring these events can help in identifying suspicious activities related to the modification of computer objects within Active Directory. It's crucial to investigate occurrences of these events, notwithstanding that some might be false positives, for understanding the context and ensuring that they are not part of an attack. The fields to particularly look at in these events include the 'samAccountName' which might give insight into which accounts are being targeted or misused.\n\nThe security level for these detections is considered medium, indicating a significant risk that warrants attention but not an immediate high threat. It's advised to regularly review these logs and investigate any anomalies to protect against potential attacks exploiting these methods."
    }
  },
  {
    "instruction": "How to detect: common commands used in Windows webshells",
    "context": "",
    "output": "In order to detect common commands used in Windows webshells, you should focus on monitoring webserver logs for specific GET request patterns that indicate the execution or attempt to execute operating system commands. This involves looking for URL encoded versions of space (\"%20\") and plus (\"+\"), as well as URL encoded versions of commands typically used by attackers such as `whoami`, `net user`, `cmd`, `powershell`, `tasklist`, `wmic`, `ssh`, `python`, `ipconfig`, `wget`, `curl`, `certutil`, `copy`, `dsquery`, `nltest`, and several others in their encoded forms. \n\nCommands embedded in GET requests may signal an attacker's attempt to execute these commands via a webshell they have placed on the server. Identify these requests by examining logs for the presence of specific keywords that match these encoded command parameters. \n\nPay particular attention to fields such as the client's IP address, the virtual host (`vhost`), the URL being accessed, and the server's response to these requests, as they can provide crucial context about the nature and source of the attempted or successful execution of commands. \n\nBe mindful of potential false positives, such as legitimate web pages that discuss operating system commands or users entering these commands into search boxes on websites, which can mimic attack patterns but are benign in nature.\n\nThe severity of these detections is generally high due to the potential for significant impact, including unauthorized access, data exfiltration, and system commands execution indicating a compromised web server.\n\nThe tags associated with this kind of activity, based on the MITRE ATT&CK framework, encompass tactics and techniques such as Execution, Command and Scripting Interpreter, and Exploitation for Client Execution which highlight the malicious nature and potential objectives of the attackers using these methods.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "common commands used in Windows webshells",
      "answer": "In order to detect common commands used in Windows webshells, you should focus on monitoring webserver logs for specific GET request patterns that indicate the execution or attempt to execute operating system commands. This involves looking for URL encoded versions of space (\"%20\") and plus (\"+\"), as well as URL encoded versions of commands typically used by attackers such as `whoami`, `net user`, `cmd`, `powershell`, `tasklist`, `wmic`, `ssh`, `python`, `ipconfig`, `wget`, `curl`, `certutil`, `copy`, `dsquery`, `nltest`, and several others in their encoded forms. \n\nCommands embedded in GET requests may signal an attacker's attempt to execute these commands via a webshell they have placed on the server. Identify these requests by examining logs for the presence of specific keywords that match these encoded command parameters. \n\nPay particular attention to fields such as the client's IP address, the virtual host (`vhost`), the URL being accessed, and the server's response to these requests, as they can provide crucial context about the nature and source of the attempted or successful execution of commands. \n\nBe mindful of potential false positives, such as legitimate web pages that discuss operating system commands or users entering these commands into search boxes on websites, which can mimic attack patterns but are benign in nature.\n\nThe severity of these detections is generally high due to the potential for significant impact, including unauthorized access, data exfiltration, and system commands execution indicating a compromised web server.\n\nThe tags associated with this kind of activity, based on the MITRE ATT&CK framework, encompass tactics and techniques such as Execution, Command and Scripting Interpreter, and Exploitation for Client Execution which highlight the malicious nature and potential objectives of the attackers using these methods."
    }
  },
  {
    "instruction": "Explain how should I detect the following: Commandlet names from well-known PowerShell exploitation frameworks",
    "context": "",
    "output": "In order to detect Commandlet names from well-known PowerShell exploitation frameworks, you should focus on monitoring PowerShell module activities within Windows environments. Specifically, look for the execution of payloads known to be associated with various tactics and techniques of cyber attacks, including but not limited to gaining persistence, privilege escalation, defense evasion, credential access, discovery, lateral movement, collection, command and control, exfiltration, and impact.\n\nKey detection measures include identifying any usage of specific PowerShell commandlets indicative of suspicious activities. These include, but are not limited to:\n- Adding or modifying backdoors and persistence mechanisms (e.g., `Add-Exfiltration`, `Add-Persistence`, `Add-RegBackdoor`).\n- Disabling or enabling system features or accounts to evade detection or maintain access (e.g., `Disable-ADIDNSNode`, `Enable-MachineAccount`).\n- Executing reconnaissance activities to gather system, network, or user information (e.g., `Check-VM`, `Get-ADIDNS`, `Find-GPOLocation`).\n- Employing encryption and decryption techniques to hide or reveal data (e.g., `ConvertTo-Rc4ByteStream`, `Decrypt-Hash`).\n- Engaging in exfiltration activities to transfer data outside the targeted environment (e.g., `Do-Exfiltration`).\n- Utilizing known exploitation tools and frameworks such as Mimikatz, PowerView, or Invoke-Mimikatz for various malicious purposes like credential theft, lateral movement, or privilege escalation.\n\nMitigation strategies and response measures should be focused on closely monitoring the PowerShell activity logs for occurrences of these highly specific commandlets. It's also crucial to understand the context in which these commandlets are executed, as legitimate use by system administrators may occasionally trigger false positives.\n\nGiven the high level of threat associated with these activities, it is advised to treat any detections with a high level of scrutiny. Investigate the source, purpose, and outcome of the detected commandlet executions to ensure that any malicious activities are promptly identified, isolated, and remediated to maintain the security and integrity of the environment.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Commandlet names from well-known PowerShell exploitation frameworks",
      "answer": "In order to detect Commandlet names from well-known PowerShell exploitation frameworks, you should focus on monitoring PowerShell module activities within Windows environments. Specifically, look for the execution of payloads known to be associated with various tactics and techniques of cyber attacks, including but not limited to gaining persistence, privilege escalation, defense evasion, credential access, discovery, lateral movement, collection, command and control, exfiltration, and impact.\n\nKey detection measures include identifying any usage of specific PowerShell commandlets indicative of suspicious activities. These include, but are not limited to:\n- Adding or modifying backdoors and persistence mechanisms (e.g., `Add-Exfiltration`, `Add-Persistence`, `Add-RegBackdoor`).\n- Disabling or enabling system features or accounts to evade detection or maintain access (e.g., `Disable-ADIDNSNode`, `Enable-MachineAccount`).\n- Executing reconnaissance activities to gather system, network, or user information (e.g., `Check-VM`, `Get-ADIDNS`, `Find-GPOLocation`).\n- Employing encryption and decryption techniques to hide or reveal data (e.g., `ConvertTo-Rc4ByteStream`, `Decrypt-Hash`).\n- Engaging in exfiltration activities to transfer data outside the targeted environment (e.g., `Do-Exfiltration`).\n- Utilizing known exploitation tools and frameworks such as Mimikatz, PowerView, or Invoke-Mimikatz for various malicious purposes like credential theft, lateral movement, or privilege escalation.\n\nMitigation strategies and response measures should be focused on closely monitoring the PowerShell activity logs for occurrences of these highly specific commandlets. It's also crucial to understand the context in which these commandlets are executed, as legitimate use by system administrators may occasionally trigger false positives.\n\nGiven the high level of threat associated with these activities, it is advised to treat any detections with a high level of scrutiny. Investigate the source, purpose, and outcome of the detected commandlet executions to ensure that any malicious activities are promptly identified, isolated, and remediated to maintain the security and integrity of the environment."
    }
  },
  {
    "instruction": "Explain how should I detect the following: when an app is assigned Azure AD roles, such as global adminsitrator, or Azure RBAC roles, such as subscription owner.",
    "context": "",
    "output": "In order to detect when an app is assigned Azure AD roles, such as global administrator, or Azure RBAC roles, such as subscription owner, you should: Monitor Azure audit logs for events indicating the addition of a member to a role. Specifically, look for log entries where the message contains activities like \"Add member to role,\" \"Add eligible member to role,\" or \"Add scoped member to role.\" It's important to be cautious of legitimate instances where an application may require permission adjustments, as these changes can sometimes be necessary for app functionality. The risk level associated with these events is considered medium.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "when an app is assigned Azure AD roles, such as global adminsitrator, or Azure RBAC roles, such as subscription owner.",
      "answer": "In order to detect when an app is assigned Azure AD roles, such as global administrator, or Azure RBAC roles, such as subscription owner, you should: Monitor Azure audit logs for events indicating the addition of a member to a role. Specifically, look for log entries where the message contains activities like \"Add member to role,\" \"Add eligible member to role,\" or \"Add scoped member to role.\" It's important to be cautious of legitimate instances where an application may require permission adjustments, as these changes can sometimes be necessary for app functionality. The risk level associated with these events is considered medium."
    }
  },
  {
    "instruction": "Can you explain how to detect: exploitation attempt using the JDNIExploiit Kit",
    "context": "",
    "output": "Certainly!\n\nIn order to detect exploitation attempts using the JNDIExploit Kit, you should monitor web server logs for specific keywords that indicate an attack attempt. These keywords are paths or strings that are commonly used by attackers leveraging the JNDIExploit Kit. The focus should be on various pathways that attackers may employ, including basic commands, reverse shell commands, and memory shell injections targeting several Java-based web servers and applications like Tomcat, Jetty, Weblogic, JBoss, Websphere, and Spring framework, among others. Additionally, look for signs of deserialization attacks and methods used to bypass security in Tomcat and Websphere, including DNS logging, command execution, and file upload paths encoded in Base64.\n\nThe attack indicators cover a range of techniques from simple command execution, reverse shells, and memory shell injections to more sophisticated deserialization attacks and bypasses exploiting Groovy scripting and specific vulnerabilities in Java environments. Each keyword represents a tactic or technique an attacker might use to exploit vulnerabilities within the web server or application framework.\n\nThe log source of interest here is the web server, as the exploitation attempts by the JNDIExploit Kit are likely to leave traces in the web server's access or error logs when the attacker attempts to inject malicious payloads.\n\nIt is essential to be aware of potential false positives, as legitimate applications might use paths or functionalities that mimic malicious activity covered by these keywords. This detection strategy tags various tactics and techniques associated with the exploitation attempts, including execution, defense evasion, and privilege escalation, without directly referencing the MITRE ATT&CK framework.\n\nBy keeping an eye on these specific keywords within web server logs and understanding the context in which they may appear, defenders can effectively identify and respond to attempts to exploit vulnerabilities using the JNDIExploit Kit. This comprehensive monitoring is crucial for maintaining the security and integrity of web applications and their underlying servers.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "exploitation attempt using the JDNIExploiit Kit",
      "answer": "In order to detect exploitation attempts using the JNDIExploit Kit, you should monitor web server logs for specific keywords that indicate an attack attempt. These keywords are paths or strings that are commonly used by attackers leveraging the JNDIExploit Kit. The focus should be on various pathways that attackers may employ, including basic commands, reverse shell commands, and memory shell injections targeting several Java-based web servers and applications like Tomcat, Jetty, Weblogic, JBoss, Websphere, and Spring framework, among others. Additionally, look for signs of deserialization attacks and methods used to bypass security in Tomcat and Websphere, including DNS logging, command execution, and file upload paths encoded in Base64.\n\nThe attack indicators cover a range of techniques from simple command execution, reverse shells, and memory shell injections to more sophisticated deserialization attacks and bypasses exploiting Groovy scripting and specific vulnerabilities in Java environments. Each keyword represents a tactic or technique an attacker might use to exploit vulnerabilities within the web server or application framework.\n\nThe log source of interest here is the web server, as the exploitation attempts by the JNDIExploit Kit are likely to leave traces in the web server's access or error logs when the attacker attempts to inject malicious payloads.\n\nIt is essential to be aware of potential false positives, as legitimate applications might use paths or functionalities that mimic malicious activity covered by these keywords. This detection strategy tags various tactics and techniques associated with the exploitation attempts, including execution, defense evasion, and privilege escalation, without directly referencing the MITRE ATT&CK framework.\n\nBy keeping an eye on these specific keywords within web server logs and understanding the context in which they may appear, defenders can effectively identify and respond to attempts to exploit vulnerabilities using the JNDIExploit Kit. This comprehensive monitoring is crucial for maintaining the security and integrity of web applications and their underlying servers."
    }
  },
  {
    "instruction": "How to detect: suspicious RDP session redirect using tscon.exe",
    "context": "",
    "output": "In order to detect a suspicious RDP session redirect using tscon.exe, you should: Focus on monitoring the creation of processes within Windows systems. Specifically, look for instances where the command line invocation includes the parameter ' /dest:rdp-tcp#' which is indicative of an attempt to redirect a Remote Desktop Protocol (RDP) session using the utility tscon.exe. Such activity is usually not common in day-to-day operations and could signify malicious intent, especially tactics that involve gaining or exercising control over remote systems. The importance of identifying this behavior is marked as high due to the potential for unauthorized access and control over targeted systems. There are no known benign instances automatically associated with this behavior, but care should be taken to verify the context of detections to minimize false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious RDP session redirect using tscon.exe",
      "answer": "In order to detect a suspicious RDP session redirect using tscon.exe, you should: Focus on monitoring the creation of processes within Windows systems. Specifically, look for instances where the command line invocation includes the parameter ' /dest:rdp-tcp#' which is indicative of an attempt to redirect a Remote Desktop Protocol (RDP) session using the utility tscon.exe. Such activity is usually not common in day-to-day operations and could signify malicious intent, especially tactics that involve gaining or exercising control over remote systems. The importance of identifying this behavior is marked as high due to the potential for unauthorized access and control over targeted systems. There are no known benign instances automatically associated with this behavior, but care should be taken to verify the context of detections to minimize false positives."
    }
  },
  {
    "instruction": "How to detect: DLL sideloading of VMGuestLib.dll by the WmiApSrv service.",
    "context": "",
    "output": "In order to detect DLL sideloading of VMGuestLib.dll by the WmiApSrv service, you should: Monitor Windows image load events specifically focusing on instances where the WmiApSrv.exe service, located in \\Windows\\System32\\wbem\\, loads images. Pay particular attention to images loaded from paths containing '\\VMware\\VMware Tools\\vmStatsProvider\\win32' and involving the 'vmGuestLib.dll' file. It's essential to exclude from alerts those instances where the image being loaded is digitally signed, as this could indicate legitimate activity. However, be aware that even with these precautions, there might be false positives if the legitimate version of vmGuestLib.dll is present on the system. This detection method leverages information from the image_load log sources in Windows environments and addresses concerns related to the tactic of defense evasion, specifically focusing on the technique of DLL sideloading.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "DLL sideloading of VMGuestLib.dll by the WmiApSrv service.",
      "answer": "In order to detect DLL sideloading of VMGuestLib.dll by the WmiApSrv service, you should: Monitor Windows image load events specifically focusing on instances where the WmiApSrv.exe service, located in \\Windows\\System32\\wbem\\, loads images. Pay particular attention to images loaded from paths containing '\\VMware\\VMware Tools\\vmStatsProvider\\win32' and involving the 'vmGuestLib.dll' file. It's essential to exclude from alerts those instances where the image being loaded is digitally signed, as this could indicate legitimate activity. However, be aware that even with these precautions, there might be false positives if the legitimate version of vmGuestLib.dll is present on the system. This detection method leverages information from the image_load log sources in Windows environments and addresses concerns related to the tactic of defense evasion, specifically focusing on the technique of DLL sideloading."
    }
  },
  {
    "instruction": "How to detect: specific process parameters as used by Mustang Panda droppers",
    "context": "",
    "output": "In order to detect specific process parameters as used by Mustang Panda droppers, you should focus on monitoring Windows process creation events for specific command-line activity and the execution of certain images. Keep an eye on command lines that contain sequences like 'Temp\\wtask.exe /create', use partial environment variable obfuscations such as '%windir:~-3,1%%PUBLIC:~-9,1%', include the string '/tn \"Security Script ', or conclude with '%windir:~-1,1%'. It's also important to watch for commands that simultaneously contain '/E:vbscript', a path indicating a user's folder 'C:\\Users\\', a '.txt' file extension, and the '/F' flag. Additionally, processes where the image path ends with 'Temp\\winwsh.exe' should be considered suspicious. These commands and paths are indicative of tactics and techniques related to initial access, execution and potentially persistence, by utilizing scripts or executables placed in temp directories or mimicking legitimate filenames to evade detection. Monitoring these particular process creation log entries, while capturing both the command line and parent command line data, can be crucial. Given the low likelihood of false positives at such a high specificity level, alerts generated from these conditions should be treated with a high priority.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "specific process parameters as used by Mustang Panda droppers",
      "answer": "In order to detect specific process parameters as used by Mustang Panda droppers, you should focus on monitoring Windows process creation events for specific command-line activity and the execution of certain images. Keep an eye on command lines that contain sequences like 'Temp\\wtask.exe /create', use partial environment variable obfuscations such as '%windir:~-3,1%%PUBLIC:~-9,1%', include the string '/tn \"Security Script ', or conclude with '%windir:~-1,1%'. It's also important to watch for commands that simultaneously contain '/E:vbscript', a path indicating a user's folder 'C:\\Users\\', a '.txt' file extension, and the '/F' flag. Additionally, processes where the image path ends with 'Temp\\winwsh.exe' should be considered suspicious. These commands and paths are indicative of tactics and techniques related to initial access, execution and potentially persistence, by utilizing scripts or executables placed in temp directories or mimicking legitimate filenames to evade detection. Monitoring these particular process creation log entries, while capturing both the command line and parent command line data, can be crucial. Given the low likelihood of false positives at such a high specificity level, alerts generated from these conditions should be treated with a high priority."
    }
  },
  {
    "instruction": "How can I detect: scheduled task creations that have suspicious action command and folder combinations",
    "context": "",
    "output": "In order to detect scheduled task creations that have suspicious action command and folder combinations, you should look for events where the Windows process creation log indicates the usage of the Task Scheduler tool (`schtasks.exe`), specifically focusing on instances where tasks are being created (`/create` command line argument). Further scrutiny is necessary if the command line includes calls to command processors or scripting interfaces such as PowerShell (`powershell`, `pwsh`) or Command Prompt (`cmd /c`, `cmd /k`, `cmd /r`, `cmd.exe /c`, `cmd.exe /k`, `cmd.exe /r`). Additionally, pay special attention when the commands reference critical system folders like `C:\\ProgramData\\` or use the environmental variable `%ProgramData%`. The detection of these elements combined points toward a high possibility of a malicious scheduled task being established, especially when found together in the process creation logs under the Windows operating system.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "scheduled task creations that have suspicious action command and folder combinations",
      "answer": "In order to detect scheduled task creations that have suspicious action command and folder combinations, you should look for events where the Windows process creation log indicates the usage of the Task Scheduler tool (`schtasks.exe`), specifically focusing on instances where tasks are being created (`/create` command line argument). Further scrutiny is necessary if the command line includes calls to command processors or scripting interfaces such as PowerShell (`powershell`, `pwsh`) or Command Prompt (`cmd /c`, `cmd /k`, `cmd /r`, `cmd.exe /c`, `cmd.exe /k`, `cmd.exe /r`). Additionally, pay special attention when the commands reference critical system folders like `C:\\ProgramData\\` or use the environmental variable `%ProgramData%`. The detection of these elements combined points toward a high possibility of a malicious scheduled task being established, especially when found together in the process creation logs under the Windows operating system."
    }
  },
  {
    "instruction": "Can you explain how to detect: dump of credentials in VeeamBackup dbo",
    "context": "",
    "output": "Certainly!\n\nIn order to detect dump of credentials in VeeamBackup dbo, you should: look for the creation of processes on Windows systems where the process image name ends with '\\sqlcmd.exe'. This is particularly important because the command line used for launching the process includes key elements indicative of a suspicious query, specifically those containing 'SELECT', 'TOP', and '[VeeamBackup].[dbo].[Credentials]'. These elements suggest an attempt to query and possibly exfiltrate credentials from the VeeamBackup database. Such activities are flagged with a high level of concern due to their potential link to tactics and techniques associated with credential access and exfiltration. It's important to monitor for these signs while also being aware that there may be legitimate use cases that could trigger false positives, although these instances are unknown.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "dump of credentials in VeeamBackup dbo",
      "answer": "In order to detect dump of credentials in VeeamBackup dbo, you should: look for the creation of processes on Windows systems where the process image name ends with '\\sqlcmd.exe'. This is particularly important because the command line used for launching the process includes key elements indicative of a suspicious query, specifically those containing 'SELECT', 'TOP', and '[VeeamBackup].[dbo].[Credentials]'. These elements suggest an attempt to query and possibly exfiltrate credentials from the VeeamBackup database. Such activities are flagged with a high level of concern due to their potential link to tactics and techniques associated with credential access and exfiltration. It's important to monitor for these signs while also being aware that there may be legitimate use cases that could trigger false positives, although these instances are unknown."
    }
  },
  {
    "instruction": "How can I detect: execution of Scheduled Tasks where the Program being run is located in a suspicious location or it's an unusale program to be run from a Scheduled Task",
    "context": "",
    "output": "In order to detect the execution of Scheduled Tasks where the Program being run is located in a suspicious location or it's an unusual program to be run from a Scheduled Task, you should monitor the Windows Task Scheduler for task creation events specifically with the Event ID 129, which signifies a created task process. This detection focuses on tasks that are configured to execute programs located in paths that are commonly used by attackers to stage or execute malicious software, including 'C:\\Windows\\Temp\\', '\\AppData\\Local\\Temp\\', '\\Desktop\\', '\\Downloads\\', '\\Users\\Public\\', and 'C:\\Temp\\'. These locations are typically writable by non-administrative users and are therefore popular choices for temporary storage of malicious files. Monitoring for tasks executing from these directories can help identify potential malicious activity, such as malware launching or persistence mechanisms being established. It's important to have the \"Microsoft-Windows-TaskScheduler/Operational\" logging enabled to capture the necessary information for this detection to work. Be aware that monitoring these events may lead to unknown false positives, which can be reduced by specifically excluding known legitimate tasks from the detection logic if necessary.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of Scheduled Tasks where the Program being run is located in a suspicious location or it's an unusale program to be run from a Scheduled Task",
      "answer": "In order to detect the execution of Scheduled Tasks where the Program being run is located in a suspicious location or it's an unusual program to be run from a Scheduled Task, you should monitor the Windows Task Scheduler for task creation events specifically with the Event ID 129, which signifies a created task process. This detection focuses on tasks that are configured to execute programs located in paths that are commonly used by attackers to stage or execute malicious software, including 'C:\\Windows\\Temp\\', '\\AppData\\Local\\Temp\\', '\\Desktop\\', '\\Downloads\\', '\\Users\\Public\\', and 'C:\\Temp\\'. These locations are typically writable by non-administrative users and are therefore popular choices for temporary storage of malicious files. Monitoring for tasks executing from these directories can help identify potential malicious activity, such as malware launching or persistence mechanisms being established. It's important to have the \"Microsoft-Windows-TaskScheduler/Operational\" logging enabled to capture the necessary information for this detection to work. Be aware that monitoring these events may lead to unknown false positives, which can be reduced by specifically excluding known legitimate tasks from the detection logic if necessary."
    }
  },
  {
    "instruction": "Can you explain how to detect: It is extremely abnormal for svchost.exe to spawn without any CLI arguments and is normally observed when a malicious process spawns the process and injects code into the process memory space.",
    "context": "",
    "output": "Certainly!\n\nIn order to identify abnormal activity where svchost.exe is spawned without any command-line arguments, suggesting a possible malicious process initiation and code injection into the process memory space, you should: Focus on monitoring process creation events within Windows environments. Specifically, look for instances where the command line ends with 'svchost.exe' or the image path ends with '\\svchost.exe', indicating the process in question. It is critical to exclude any events where the parent image path ends with '\\rpcnet.exe' or '\\rpcnetp.exe', as these are associated with Lojack-style software, which represents a known false positive scenario. Additionally, discard events that do not provide any command-line value, as the absence of command-line arguments in conjunction with svchost.exe\u2019s initiation is the primary indicator of suspicious activity. This process targets the identification of techniques used for Persistence, Privilege Escalation, and Defense Evasion by focusing on how adversaries may execute code on a compromised system by injecting into svchost.exe processes.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "It is extremely abnormal for svchost.exe to spawn without any CLI arguments and is normally observed when a malicious process spawns the process and injects code into the process memory space.",
      "answer": "In order to identify abnormal activity where svchost.exe is spawned without any command-line arguments, suggesting a possible malicious process initiation and code injection into the process memory space, you should: Focus on monitoring process creation events within Windows environments. Specifically, look for instances where the command line ends with 'svchost.exe' or the image path ends with '\\svchost.exe', indicating the process in question. It is critical to exclude any events where the parent image path ends with '\\rpcnet.exe' or '\\rpcnetp.exe', as these are associated with Lojack-style software, which represents a known false positive scenario. Additionally, discard events that do not provide any command-line value, as the absence of command-line arguments in conjunction with svchost.exe\u2019s initiation is the primary indicator of suspicious activity. This process targets the identification of techniques used for Persistence, Privilege Escalation, and Defense Evasion by focusing on how adversaries may execute code on a compromised system by injecting into svchost.exe processes."
    }
  },
  {
    "instruction": "How can I detect: potential DLL sideloading using the Microsoft Office winword process via the '/l' flag.",
    "context": "",
    "output": "In order to detect potential DLL sideloading using the Microsoft Office winword process via the '/l' flag, you should: Monitor the creation of processes on Windows systems, specifically focusing on instances where the winword.exe process is initiated. Look for scenarios where the command line includes the use of the '/l' flag followed by a reference to a DLL file. This is accomplished by checking for processes that have either their image path ending with '\\WINWORD.exe' or the original file name being 'WinWord.exe'. Furthermore, verify that the command line arguments for these processes contain both '/l ' and reference a '.dll' file, indicating a DLL is being specified explicitly for loading. This method is indicative of an attempt to sideload a DLL, which could be malicious in nature. Be aware that there might be instances where similar behavior is flagged but turns out to be benign, though these cases are not specifically known. The risk level associated with this behavior is considered medium.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential DLL sideloading using the Microsoft Office winword process via the '/l' flag.",
      "answer": "In order to detect potential DLL sideloading using the Microsoft Office winword process via the '/l' flag, you should: Monitor the creation of processes on Windows systems, specifically focusing on instances where the winword.exe process is initiated. Look for scenarios where the command line includes the use of the '/l' flag followed by a reference to a DLL file. This is accomplished by checking for processes that have either their image path ending with '\\WINWORD.exe' or the original file name being 'WinWord.exe'. Furthermore, verify that the command line arguments for these processes contain both '/l ' and reference a '.dll' file, indicating a DLL is being specified explicitly for loading. This method is indicative of an attempt to sideload a DLL, which could be malicious in nature. Be aware that there might be instances where similar behavior is flagged but turns out to be benign, though these cases are not specifically known. The risk level associated with this behavior is considered medium."
    }
  },
  {
    "instruction": "Please help me detect the following: suspicious WMI event filter and command line event consumer based on WMI and Security Logs.",
    "context": "",
    "output": "Sure!\nIn order to detect suspicious WMI event filter and command line event consumer based on WMI and Security Logs, you should: Monitor Windows security logs for instances where the event ID is 4662, which indicates an operation was performed on an object. Specifically, focus on scenarios where the object type is related to \"WMI Namespace\" and the object name contains the term \"subscription\u201d. These instances can signal potentially malicious activities since attackers might exploit WMI subscriptions to execute arbitrary code or maintain persistence on a host. Be aware that the reliability of detections might vary as the dataset being analyzed could be too small or not sufficiently varied; hence, further testing might be needed to reduce false positives. The severity level for this activity is considered medium.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious WMI event filter and command line event consumer based on WMI and Security Logs.",
      "answer": "In order to detect suspicious WMI event filter and command line event consumer based on WMI and Security Logs, you should: Monitor Windows security logs for instances where the event ID is 4662, which indicates an operation was performed on an object. Specifically, focus on scenarios where the object type is related to \"WMI Namespace\" and the object name contains the term \"subscription\u201d. These instances can signal potentially malicious activities since attackers might exploit WMI subscriptions to execute arbitrary code or maintain persistence on a host. Be aware that the reliability of detections might vary as the dataset being analyzed could be too small or not sufficiently varied; hence, further testing might be needed to reduce false positives. The severity level for this activity is considered medium."
    }
  },
  {
    "instruction": "Please help me detect the following: potential C2 communication related to Devil Bait malware",
    "context": "",
    "output": "Sure!\nIn order to detect potential C2 communication related to Devil Bait malware, you should: focus on monitoring proxy logs for specific patterns of HTTP GET requests. Look for requests that include the following indicators in their URL: '/cross.php?op=', '&dt=', and '&uid='. These parameters within the requests are characteristic of communication patterns associated with Devil Bait malware, attempting to reach out to its command and control servers. This type of analysis is crucial for identifying potential breaches, as the detection of these specific request patterns, especially when they are found together in proxy logs, is a strong indicator of malicious activity linked to Devil Bait malware. False positives are considered unlikely due to the specificity of these patterns, indicating that such detection should be treated with a high level of concern.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential C2 communication related to Devil Bait malware",
      "answer": "In order to detect potential C2 communication related to Devil Bait malware, you should: focus on monitoring proxy logs for specific patterns of HTTP GET requests. Look for requests that include the following indicators in their URL: '/cross.php?op=', '&dt=', and '&uid='. These parameters within the requests are characteristic of communication patterns associated with Devil Bait malware, attempting to reach out to its command and control servers. This type of analysis is crucial for identifying potential breaches, as the detection of these specific request patterns, especially when they are found together in proxy logs, is a strong indicator of malicious activity linked to Devil Bait malware. False positives are considered unlikely due to the specificity of these patterns, indicating that such detection should be treated with a high level of concern."
    }
  },
  {
    "instruction": "How can I detect: command used by conti to find volume shadow backups",
    "context": "",
    "output": "In order to detect a command used by conti to find volume shadow backups, you should: Monitor for the creation of processes on Windows systems where the command line includes both the use of 'vssadmin list shadows' and 'log.txt'. This indicates the execution of a command that is often associated with adversaries, such as conti, attempting to discover volume shadow backups, potentially in preparation for their deletion or manipulation. This process creation event should be logged and include details such as the user account executing the command, the exact command line used, and the parent process image. Be aware that while this behavior can strongly indicate malicious activity, there might be scenarios where it does not relate to an attack, though such instances are considered unknown. The detection of this activity is deemed to be of high importance due to its potential impact on an organization's ability to recover from an attack that involves ransomware or data destruction.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "command used by conti to find volume shadow backups",
      "answer": "In order to detect a command used by conti to find volume shadow backups, you should: Monitor for the creation of processes on Windows systems where the command line includes both the use of 'vssadmin list shadows' and 'log.txt'. This indicates the execution of a command that is often associated with adversaries, such as conti, attempting to discover volume shadow backups, potentially in preparation for their deletion or manipulation. This process creation event should be logged and include details such as the user account executing the command, the exact command line used, and the parent process image. Be aware that while this behavior can strongly indicate malicious activity, there might be scenarios where it does not relate to an attack, though such instances are considered unknown. The detection of this activity is deemed to be of high importance due to its potential impact on an organization's ability to recover from an attack that involves ransomware or data destruction."
    }
  },
  {
    "instruction": "How to detect: PowerShell core DLL being loaded by an Office Product",
    "context": "",
    "output": "In order to detect PowerShell core DLL being loaded by an Office Product, you should monitor for the loading of specific images in Windows. This entails tracking when any of the main Office applications, such as Excel, Microsoft Publisher, Outlook, OneNote (including a specific variant labeled 'onenoteim' for completeness), PowerPoint, and Word, loads images. The detection hinges on identifying when these applications load either 'System.Management.Automation.Dll' or 'System.Management.Automation.ni.Dll,' which are core components of PowerShell. This activity is noteworthy as it could suggest an attempt to execute PowerShell commands or scripts in a manner that leverages Office products, possibly for malicious purposes. The monitoring for such behavior is set at a medium level of concern due to the potential for false positives, which are currently unspecified but could arise from legitimate uses of PowerShell functionalities within these Office applications.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "PowerShell core DLL being loaded by an Office Product",
      "answer": "In order to detect PowerShell core DLL being loaded by an Office Product, you should monitor for the loading of specific images in Windows. This entails tracking when any of the main Office applications, such as Excel, Microsoft Publisher, Outlook, OneNote (including a specific variant labeled 'onenoteim' for completeness), PowerPoint, and Word, loads images. The detection hinges on identifying when these applications load either 'System.Management.Automation.Dll' or 'System.Management.Automation.ni.Dll,' which are core components of PowerShell. This activity is noteworthy as it could suggest an attempt to execute PowerShell commands or scripts in a manner that leverages Office products, possibly for malicious purposes. The monitoring for such behavior is set at a medium level of concern due to the potential for false positives, which are currently unspecified but could arise from legitimate uses of PowerShell functionalities within these Office applications."
    }
  },
  {
    "instruction": "Explain how should I detect the following: addition of the \"Debugger\" value to the \"DbgManagedDebugger\" key in order to achieve persistence. Which will get invoked when an application crashes",
    "context": "",
    "output": "In order to detect the addition of the \"Debugger\" value to the \"DbgManagedDebugger\" key in order to achieve persistence, which will get invoked when an application crashes, you should: Monitor Windows registry settings specifically under the category for registry changes, targeting the Windows product. Focus on detecting events where a value is being set (EventType: SetValue) specifically to the registry path ending with '\\Microsoft\\.NETFramework\\DbgManagedDebugger'. It is critical to exclude events where the details match a legitimate debugger setup, specifically the use of \"C:\\Windows\\system32\\vsjitdebugger.exe\" with various process and environment parameters. This exclusion helps in reducing false positives that are common in environments where developers might legitimately set up a debugger. Be aware that changing registry values, particularly in the context described, can be a technique used to maintain persistence by ensuring a debugger gets called upon application crashes, providing a covert way to execute malicious payloads. This monitoring should be considered of medium importance and should be attentive to the potential legitimate use of the debugger setup, particularly on developers\u2019 machines, to avoid unnecessary alarms. The tactics and techniques associated with this behavior include persistence, as it aims to ensure continuous malicious presence on the affected system.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "addition of the \"Debugger\" value to the \"DbgManagedDebugger\" key in order to achieve persistence. Which will get invoked when an application crashes",
      "answer": "In order to detect the addition of the \"Debugger\" value to the \"DbgManagedDebugger\" key in order to achieve persistence, which will get invoked when an application crashes, you should: Monitor Windows registry settings specifically under the category for registry changes, targeting the Windows product. Focus on detecting events where a value is being set (EventType: SetValue) specifically to the registry path ending with '\\Microsoft\\.NETFramework\\DbgManagedDebugger'. It is critical to exclude events where the details match a legitimate debugger setup, specifically the use of \"C:\\Windows\\system32\\vsjitdebugger.exe\" with various process and environment parameters. This exclusion helps in reducing false positives that are common in environments where developers might legitimately set up a debugger. Be aware that changing registry values, particularly in the context described, can be a technique used to maintain persistence by ensuring a debugger gets called upon application crashes, providing a covert way to execute malicious payloads. This monitoring should be considered of medium importance and should be attentive to the potential legitimate use of the debugger setup, particularly on developers\u2019 machines, to avoid unnecessary alarms. The tactics and techniques associated with this behavior include persistence, as it aims to ensure continuous malicious presence on the affected system."
    }
  },
  {
    "instruction": "Explain how should I detect the following: use of NPS, a port forwarding and intranet penetration proxy server",
    "context": "",
    "output": "In order to detect the use of NPS, a port forwarding and intranet penetration proxy server, you should: Monitor process creation events within Windows environments for specific indicators that signify the usage of NPS. Look for processes that end with the filename '\\npc.exe'. Additionally, scrutinize the command line arguments of these processes for the presence of '-server=', '-vkey=', and '-password=' all within the same command, or the presence of '-config=npc'. To enhance the accuracy of detection, also check the process hashes against known indicators of compromise associated with NPS, including specific MD5, SHA1, and SHA256 hashes. Any match in these checks could indicate malicious activity involving NPS and warrants further investigation. Be aware there could be legitimate uses of these indicators, so it's recommended to verify the context of detection to rule out false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "use of NPS, a port forwarding and intranet penetration proxy server",
      "answer": "In order to detect the use of NPS, a port forwarding and intranet penetration proxy server, you should: Monitor process creation events within Windows environments for specific indicators that signify the usage of NPS. Look for processes that end with the filename '\\npc.exe'. Additionally, scrutinize the command line arguments of these processes for the presence of '-server=', '-vkey=', and '-password=' all within the same command, or the presence of '-config=npc'. To enhance the accuracy of detection, also check the process hashes against known indicators of compromise associated with NPS, including specific MD5, SHA1, and SHA256 hashes. Any match in these checks could indicate malicious activity involving NPS and warrants further investigation. Be aware there could be legitimate uses of these indicators, so it's recommended to verify the context of detection to rule out false positives."
    }
  },
  {
    "instruction": "How to detect: script file execution (.js, .jse, .vba, .vbe, .vbs, .wsf) by Wscript/Cscript",
    "context": "",
    "output": "In order to detect script file execution (.js, .jse, .vba, .vbe, .vbs, .wsf) by Wscript/Cscript, you should monitor for process creation events on Windows systems, specifically focusing on the execution of `wscript.exe` or `cscript.exe`. Detecting the use of these scripting hosts involves looking for their original file names (`wscript.exe` and `cscript.exe`) or paths that end with these executables. Additionally, pay attention to the command line arguments for these processes, as script file executions are indicated by the presence of file extensions such as `.js`, `.jse`, `.vba`, `.vbe`, `.vbs`, and `.wsf`. It's important to note that the effectiveness of this detection might require fine-tuning to reduce potential false positives. One recommended approach is to incorporate the user profile path in the command line analysis if the rule generates too many alerts. This approach will significantly improve the detection's accuracy and utility in identifying actual malicious activity involving script file execution with Wscript or Cscript.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "script file execution (.js, .jse, .vba, .vbe, .vbs, .wsf) by Wscript/Cscript",
      "answer": "In order to detect script file execution (.js, .jse, .vba, .vbe, .vbs, .wsf) by Wscript/Cscript, you should monitor for process creation events on Windows systems, specifically focusing on the execution of `wscript.exe` or `cscript.exe`. Detecting the use of these scripting hosts involves looking for their original file names (`wscript.exe` and `cscript.exe`) or paths that end with these executables. Additionally, pay attention to the command line arguments for these processes, as script file executions are indicated by the presence of file extensions such as `.js`, `.jse`, `.vba`, `.vbe`, `.vbs`, and `.wsf`. It's important to note that the effectiveness of this detection might require fine-tuning to reduce potential false positives. One recommended approach is to incorporate the user profile path in the command line analysis if the rule generates too many alerts. This approach will significantly improve the detection's accuracy and utility in identifying actual malicious activity involving script file execution with Wscript or Cscript."
    }
  },
  {
    "instruction": "How can I detect: addition of new root, CA or AuthRoot certificates to the Windows registry",
    "context": "",
    "output": "In order to detect the addition of new root, CA or AuthRoot certificates to the Windows registry, you should monitor Windows registry settings specifically within the registry key categories associated with root, CA, or AuthRoot certificates. This involves tracking any SetValue events where TargetObject paths contain specific strings related to the system, policies, or enterprise certificates within the Root, CA, or AuthRoot directories. In more detail, lookout for changes in registry paths such as '\\SOFTWARE\\Microsoft\\SystemCertificates\\Root\\Certificates\\', '\\SOFTWARE\\Policies\\Microsoft\\SystemCertificates\\Root\\Certificates\\', and similar paths for CA and AuthRoot certificates. Additionally, ensure that these registry modifications end with '\\Blob' and involve binary data, as these attributes are indicative of certificate additions. This detection method is crucial for maintaining the integrity and security of the system's trust store, as unauthorized or malicious certificates can compromise secure communications and facilitate further attacks. It's categorized under medium severity due to the potential risk it represents, although it's noted that there may be unknown false positives. Keep an eye on these registry alterations to protect the system against unauthorized certificate injections, which are a part of several attack techniques like spoofing, man-in-the-middle attacks, and more.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "addition of new root, CA or AuthRoot certificates to the Windows registry",
      "answer": "In order to detect the addition of new root, CA or AuthRoot certificates to the Windows registry, you should monitor Windows registry settings specifically within the registry key categories associated with root, CA, or AuthRoot certificates. This involves tracking any SetValue events where TargetObject paths contain specific strings related to the system, policies, or enterprise certificates within the Root, CA, or AuthRoot directories. In more detail, lookout for changes in registry paths such as '\\SOFTWARE\\Microsoft\\SystemCertificates\\Root\\Certificates\\', '\\SOFTWARE\\Policies\\Microsoft\\SystemCertificates\\Root\\Certificates\\', and similar paths for CA and AuthRoot certificates. Additionally, ensure that these registry modifications end with '\\Blob' and involve binary data, as these attributes are indicative of certificate additions. This detection method is crucial for maintaining the integrity and security of the system's trust store, as unauthorized or malicious certificates can compromise secure communications and facilitate further attacks. It's categorized under medium severity due to the potential risk it represents, although it's noted that there may be unknown false positives. Keep an eye on these registry alterations to protect the system against unauthorized certificate injections, which are a part of several attack techniques like spoofing, man-in-the-middle attacks, and more."
    }
  },
  {
    "instruction": "How can I detect: suspicious enumeration of the domain the user is associated with.",
    "context": "",
    "output": "In order to detect suspicious enumeration of the domain the user is associated with, you should: Monitor the creation of processes on Windows systems for command line executions that include both the use of the 'echo' command and the presence of the '%userdomain%' environment variable. These specific indicators suggest an attempt to display or otherwise enumerate the domain information of the user's account. While this behavior can be observed in benign scripts or applications, it is flagged at a low severity level due to its potential link to reconnaissance activities aimed at gathering information about domain affiliations.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious enumeration of the domain the user is associated with.",
      "answer": "In order to detect suspicious enumeration of the domain the user is associated with, you should: Monitor the creation of processes on Windows systems for command line executions that include both the use of the 'echo' command and the presence of the '%userdomain%' environment variable. These specific indicators suggest an attempt to display or otherwise enumerate the domain information of the user's account. While this behavior can be observed in benign scripts or applications, it is flagged at a low severity level due to its potential link to reconnaissance activities aimed at gathering information about domain affiliations."
    }
  },
  {
    "instruction": "How to detect: Detetcts PowerShell activity in which Get-Addefaultdomainpasswordpolicy is used to get the default password policy for an Active Directory domain.",
    "context": "",
    "output": "In order to detect PowerShell activity in which Get-AdDefaultDomainPasswordPolicy is used to get the default password policy for an Active Directory domain, you should: Monitor PowerShell script log sources on Windows systems, specifically focusing on script block logging. Enable Script Block Logging to ensure the capture of all PowerShell script executions. Look for the presence of the command \"Get-AdDefaultDomainPasswordPolicy\" within the text of the script blocks being executed. This command indicates an attempt to retrieve the default password policy settings of the Active Directory domain, which might be a part of reconnaissance activities by an attacker looking to understand password policies in place. Recognize that there may be false positives, as legitimate scripts used by administrators might also query this information for valid purposes. The risk level associated with this activity is considered low, reflecting the likelihood that, while potentially indicative of reconnaissance, it does not directly result in a breach or compromise.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Detetcts PowerShell activity in which Get-Addefaultdomainpasswordpolicy is used to get the default password policy for an Active Directory domain.",
      "answer": "In order to detect PowerShell activity in which Get-AdDefaultDomainPasswordPolicy is used to get the default password policy for an Active Directory domain, you should: Monitor PowerShell script log sources on Windows systems, specifically focusing on script block logging. Enable Script Block Logging to ensure the capture of all PowerShell script executions. Look for the presence of the command \"Get-AdDefaultDomainPasswordPolicy\" within the text of the script blocks being executed. This command indicates an attempt to retrieve the default password policy settings of the Active Directory domain, which might be a part of reconnaissance activities by an attacker looking to understand password policies in place. Recognize that there may be false positives, as legitimate scripts used by administrators might also query this information for valid purposes. The risk level associated with this activity is considered low, reflecting the likelihood that, while potentially indicative of reconnaissance, it does not directly result in a breach or compromise."
    }
  },
  {
    "instruction": "Can you explain how to detect: execution of regsvr32 where the DLL is located in a potentially suspicious location.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect execution of regsvr32 where the DLL is located in a potentially suspicious location, you should monitor for instances where the regsvr32.exe utility is initiated within a Windows environment. This involves keeping an eye on any process creation logs, particularly looking for events where the image name ends with '\\regsvr32.exe' or the OriginalFileName is explicitly 'REGSVR32.EXE'. Additionally, it's crucial to scrutinize the command line arguments used during the execution of regsvr32.exe, paying special attention to file paths that include potentially suspicious locations such as ':\\ProgramData\\', ':\\Temp\\', ':\\Users\\Public\\', ':\\Windows\\Temp\\', '\\AppData\\Local\\Temp\\', and '\\AppData\\Roaming\\'. The simultaneous occurrence of these indicators suggests a possible misuse of regsvr32, a scenario that warrants further investigation. However, bear in mind that legitimate software installers might also execute regsvr32 with DLLs located in these directories; thus, differentiation based on additional context might be necessary to reduce false positives. This detection strategy is pivotal for identifying suspicious activities that could signify attempts at execution of malicious scripts or malware leveraging common system tools in disguise, aligning with methodologies typically categorized under persistence, defense evasion, or execution tactics.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of regsvr32 where the DLL is located in a potentially suspicious location.",
      "answer": "In order to detect execution of regsvr32 where the DLL is located in a potentially suspicious location, you should monitor for instances where the regsvr32.exe utility is initiated within a Windows environment. This involves keeping an eye on any process creation logs, particularly looking for events where the image name ends with '\\regsvr32.exe' or the OriginalFileName is explicitly 'REGSVR32.EXE'. Additionally, it's crucial to scrutinize the command line arguments used during the execution of regsvr32.exe, paying special attention to file paths that include potentially suspicious locations such as ':\\ProgramData\\', ':\\Temp\\', ':\\Users\\Public\\', ':\\Windows\\Temp\\', '\\AppData\\Local\\Temp\\', and '\\AppData\\Roaming\\'. The simultaneous occurrence of these indicators suggests a possible misuse of regsvr32, a scenario that warrants further investigation. However, bear in mind that legitimate software installers might also execute regsvr32 with DLLs located in these directories; thus, differentiation based on additional context might be necessary to reduce false positives. This detection strategy is pivotal for identifying suspicious activities that could signify attempts at execution of malicious scripts or malware leveraging common system tools in disguise, aligning with methodologies typically categorized under persistence, defense evasion, or execution tactics."
    }
  },
  {
    "instruction": "How to detect: attempts to exploit a Rejetto HTTP File Server (HFS) via CVE-2014-6287",
    "context": "",
    "output": "In order to detect attempts to exploit a Rejetto HTTP File Server (HFS) via CVE-2014-6287, you should: Monitor webserver logs for specific patterns in the query section of URLs that are indicative of exploitation attempts. Initially, look for queries containing '?search=%00{.' which points toward an attempt to inject malicious code or commands. Additionally, pay attention to URLs that include certain key terms in their query part, such as 'save|', an indication of an attempt to save a file in an unauthorized manner, or various command execution tools and paths like 'powershell', 'cmd.exe', 'cmd /c', 'cmd /r', 'cmd /k', 'cscript', 'wscript', 'python', and even specific paths like 'C:\\Users\\Public\\'. Another critical pattern to watch for is the presence of '%comspec%' within the query, indicating the exploitation of command processor invocation. The detection method hinges on identifying all these patterns simultaneously to ensure a comprehensive approach to identifying potential exploitation attempts. Be mindful that there might be unknown instances resulting in false positives. The severity of such detection is considered high, highlighting the critical nature of preventing or swiftly responding to these exploitation attempts, as they relate to executing unauthorized commands or scripts on the server, thereby compromising its security.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "attempts to exploit a Rejetto HTTP File Server (HFS) via CVE-2014-6287",
      "answer": "In order to detect attempts to exploit a Rejetto HTTP File Server (HFS) via CVE-2014-6287, you should: Monitor webserver logs for specific patterns in the query section of URLs that are indicative of exploitation attempts. Initially, look for queries containing '?search=%00{.' which points toward an attempt to inject malicious code or commands. Additionally, pay attention to URLs that include certain key terms in their query part, such as 'save|', an indication of an attempt to save a file in an unauthorized manner, or various command execution tools and paths like 'powershell', 'cmd.exe', 'cmd /c', 'cmd /r', 'cmd /k', 'cscript', 'wscript', 'python', and even specific paths like 'C:\\Users\\Public\\'. Another critical pattern to watch for is the presence of '%comspec%' within the query, indicating the exploitation of command processor invocation. The detection method hinges on identifying all these patterns simultaneously to ensure a comprehensive approach to identifying potential exploitation attempts. Be mindful that there might be unknown instances resulting in false positives. The severity of such detection is considered high, highlighting the critical nature of preventing or swiftly responding to these exploitation attempts, as they relate to executing unauthorized commands or scripts on the server, thereby compromising its security."
    }
  },
  {
    "instruction": "How can I detect: Adversaries may employ a known encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol.",
    "context": "",
    "output": "In order to detect adversaries who are using a known encryption algorithm to conceal command and control traffic instead of relying on inherent protections offered by a communication protocol, you should focus on analyzing scripts executed on Windows environments. Specifically, monitor for script activities that involve scripting block logs, given that Script Block Logging must be enabled. Look for scripts that incorporate elements such as 'System.Net.Security.SslStream', 'Net.Security.RemoteCertificateValidationCallback', and '.AuthenticateAsClient' within their text. These specific components suggest an attempt to implement SSL/TLS encryption directly, possibly as a means to obscure malicious traffic. It's essential to note, however, that such detection might also flag legitimate administrative scripts using similar techniques for secure communication, hence the possibility of false positives is considered low.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Adversaries may employ a known encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol.",
      "answer": "In order to detect adversaries who are using a known encryption algorithm to conceal command and control traffic instead of relying on inherent protections offered by a communication protocol, you should focus on analyzing scripts executed on Windows environments. Specifically, monitor for script activities that involve scripting block logs, given that Script Block Logging must be enabled. Look for scripts that incorporate elements such as 'System.Net.Security.SslStream', 'Net.Security.RemoteCertificateValidationCallback', and '.AuthenticateAsClient' within their text. These specific components suggest an attempt to implement SSL/TLS encryption directly, possibly as a means to obscure malicious traffic. It's essential to note, however, that such detection might also flag legitimate administrative scripts using similar techniques for secure communication, hence the possibility of false positives is considered low."
    }
  },
  {
    "instruction": "How can I detect: execution of a renamed PsExec often used by attackers or malware",
    "context": "",
    "output": "In order to detect the execution of a renamed PsExec often used by attackers or malware, you should monitor for process creation events on Windows systems. Look for descriptions indicating the remote execution of processes, particularly those associated with the Sysinternals PsExec product. However, it's crucial to exclude events where the image path ends with '\\PsExec.exe' or '\\PsExec64.exe' as these indicate legitimate PsExec usage. The focus should be on instances where PsExec may have been renamed, as this can be a sign of malicious activity. Be aware that there might be false positives, such as software that integrates PsExec in a renamed form without malicious intent, or administrators who have renamed PsExec for reasons unknown. This detection is rated at a high level of importance due to the potential for abuse by attackers leveraging renamed instances of PsExec to conduct their operations covertly.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of a renamed PsExec often used by attackers or malware",
      "answer": "In order to detect the execution of a renamed PsExec often used by attackers or malware, you should monitor for process creation events on Windows systems. Look for descriptions indicating the remote execution of processes, particularly those associated with the Sysinternals PsExec product. However, it's crucial to exclude events where the image path ends with '\\PsExec.exe' or '\\PsExec64.exe' as these indicate legitimate PsExec usage. The focus should be on instances where PsExec may have been renamed, as this can be a sign of malicious activity. Be aware that there might be false positives, such as software that integrates PsExec in a renamed form without malicious intent, or administrators who have renamed PsExec for reasons unknown. This detection is rated at a high level of importance due to the potential for abuse by attackers leveraging renamed instances of PsExec to conduct their operations covertly."
    }
  },
  {
    "instruction": "How to detect: pattern of a pipe name as used by the tool EfsPotato",
    "context": "",
    "output": "In order to detect the pattern of a pipe name as used by the tool EfsPotato, you should monitor the creation of named pipes on Windows systems, which can be a sign of specific malicious activities like those conducted by EfsPotato. This requires configuring the logging of Named Pipe Events through Sysmon (specifically Event IDs 17 and 18). Once logging is set up, focus on identifying instances where named pipes are created with names that contain the substring `'\\pipe\\'`. However, to refine the detection and reduce noise, give special attention to named pipes that further specify `'\\pipe\\srvsvc'` in their name, as this is a more distinct pattern linked to suspicious activity. It is also important to exclude any pipe names containing `'\\CtxShare'` from the detection as this can lead to false positives. This approach is critical for identifying potential exploitation activities tied to EfsPotato without being overwhelmed by irrelevant data.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "pattern of a pipe name as used by the tool EfsPotato",
      "answer": "In order to detect the pattern of a pipe name as used by the tool EfsPotato, you should monitor the creation of named pipes on Windows systems, which can be a sign of specific malicious activities like those conducted by EfsPotato. This requires configuring the logging of Named Pipe Events through Sysmon (specifically Event IDs 17 and 18). Once logging is set up, focus on identifying instances where named pipes are created with names that contain the substring `'\\pipe\\'`. However, to refine the detection and reduce noise, give special attention to named pipes that further specify `'\\pipe\\srvsvc'` in their name, as this is a more distinct pattern linked to suspicious activity. It is also important to exclude any pipe names containing `'\\CtxShare'` from the detection as this can lead to false positives. This approach is critical for identifying potential exploitation activities tied to EfsPotato without being overwhelmed by irrelevant data."
    }
  },
  {
    "instruction": "Can you explain how to detect: suspicious Hangul Word Processor (Hanword) sub processes that could indicate an exploitation",
    "context": "",
    "output": "Certainly!\n\nIn order to detect suspicious Hangul Word Processor (Hanword) sub processes that could indicate an exploitation, you should: monitor the creation of processes on Windows systems, specifically looking for instances where a process named 'gbb.exe' is launched by a parent process named 'Hwp.exe'. This specific pattern of process creation is uncommon and could signify an attempt to exploit vulnerabilities associated with the Hangul Word Processor software, often utilized in targeting specific systems or environments. Given the rarity of such activities under normal circumstances, events matching these criteria should be considered with high suspicion, although it's acknowledged that in some rare instances there might be legitimate reasons for this activity, thus potential false positives are noted as \"Unknown\".",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious Hangul Word Processor (Hanword) sub processes that could indicate an exploitation",
      "answer": "In order to detect suspicious Hangul Word Processor (Hanword) sub processes that could indicate an exploitation, you should: monitor the creation of processes on Windows systems, specifically looking for instances where a process named 'gbb.exe' is launched by a parent process named 'Hwp.exe'. This specific pattern of process creation is uncommon and could signify an attempt to exploit vulnerabilities associated with the Hangul Word Processor software, often utilized in targeting specific systems or environments. Given the rarity of such activities under normal circumstances, events matching these criteria should be considered with high suspicion, although it's acknowledged that in some rare instances there might be legitimate reasons for this activity, thus potential false positives are noted as \"Unknown\"."
    }
  },
  {
    "instruction": "How to detect: new process creation using WMIC via the \"process call create\" flag",
    "context": "",
    "output": "In order to detect new process creation using WMIC via the \"process call create\" flag, you should: focus on process creation events within Windows environments. Specifically, the detection mechanism centers on identifying instances where the WMIC (Windows Management Instrumentation Command-line) utility, recognizable either through the image file ending with '\\wmic.exe' or having an original file name of 'wmic.exe', is employed to initiate a new process. This activity is typically signified by the command line arguments containing the keywords 'process', 'call', and 'create' concurrently. Such detection criteria aim to flag potentially malicious behavior where WMIC is misused to launch new processes, a tactic often leveraged by attackers to execute code or scripts. It is important to note that while this detection method is of medium sensitivity, it might also encounter scenarios where its findings are not indicative of malicious activity, thus necessitating further investigation to ascertain the context of the detected events.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "new process creation using WMIC via the \"process call create\" flag",
      "answer": "In order to detect new process creation using WMIC via the \"process call create\" flag, you should: focus on process creation events within Windows environments. Specifically, the detection mechanism centers on identifying instances where the WMIC (Windows Management Instrumentation Command-line) utility, recognizable either through the image file ending with '\\wmic.exe' or having an original file name of 'wmic.exe', is employed to initiate a new process. This activity is typically signified by the command line arguments containing the keywords 'process', 'call', and 'create' concurrently. Such detection criteria aim to flag potentially malicious behavior where WMIC is misused to launch new processes, a tactic often leveraged by attackers to execute code or scripts. It is important to note that while this detection method is of medium sensitivity, it might also encounter scenarios where its findings are not indicative of malicious activity, thus necessitating further investigation to ascertain the context of the detected events."
    }
  },
  {
    "instruction": "Please help me detect the following: execution of a renamed binary often used by attackers or malware leveraging new Sysmon OriginalFileName datapoint.",
    "context": "",
    "output": "Sure!\nIn order to detect the execution of a renamed binary often used by attackers or malware leveraging new Sysmon OriginalFileName datapoint, you should focus on monitoring process creation events in Windows systems. Look for particular indicators such as the execution of processes remotely, the use of tools like Sysinternals PsExec, or processes with descriptions starting with \"Windows PowerShell\" or \"pwsh\". Also, pay attention to processes with specific original file names including but not limited to 'powershell.exe', 'pwsh.dll', 'powershell_ise.exe', 'psexec.exe', 'psexec.c', and various others known to be used in malicious activities.\n\nIt's critical to filter out false positives by excluding processes with images ending in common legitimate names such as '\\powershell.exe', '\\pwsh.exe', among others. This is important as attackers might rename binaries to slightly altered names that are hard to distinguish from the originals at a quick glance. Be aware of potential false positives like custom applications using renamed binaries with slight changes to the binary name, or the use of PsExec installed via the Windows Store, which doesn't contain the original filename field leading to possible false negatives.\n\nThis detection strategy is grounded in tactics and techniques akin to Credential Access, Execution, Defense Evasion, and Discovery, with a high importance level assigned due to the criticality of identifying and reacting to such malicious activities promptly.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of a renamed binary often used by attackers or malware leveraging new Sysmon OriginalFileName datapoint.",
      "answer": "In order to detect the execution of a renamed binary often used by attackers or malware leveraging new Sysmon OriginalFileName datapoint, you should focus on monitoring process creation events in Windows systems. Look for particular indicators such as the execution of processes remotely, the use of tools like Sysinternals PsExec, or processes with descriptions starting with \"Windows PowerShell\" or \"pwsh\". Also, pay attention to processes with specific original file names including but not limited to 'powershell.exe', 'pwsh.dll', 'powershell_ise.exe', 'psexec.exe', 'psexec.c', and various others known to be used in malicious activities.\n\nIt's critical to filter out false positives by excluding processes with images ending in common legitimate names such as '\\powershell.exe', '\\pwsh.exe', among others. This is important as attackers might rename binaries to slightly altered names that are hard to distinguish from the originals at a quick glance. Be aware of potential false positives like custom applications using renamed binaries with slight changes to the binary name, or the use of PsExec installed via the Windows Store, which doesn't contain the original filename field leading to possible false negatives.\n\nThis detection strategy is grounded in tactics and techniques akin to Credential Access, Execution, Defense Evasion, and Discovery, with a high importance level assigned due to the criticality of identifying and reacting to such malicious activities promptly."
    }
  },
  {
    "instruction": "How can I detect: potential reconnaissance activity used by Trickbot malware. Trickbot enumerates domain/network topology and executes certain commands automatically every few minutes.",
    "context": "",
    "output": "In order to detect potential reconnaissance activity used by Trickbot malware, which enumerates domain/network topology and executes certain commands automatically every few minutes, you should: Monitor process creation logs on Windows systems for instances where the parent process is 'cmd.exe' and the child process is 'nltest.exe' executing the command line containing '/domain_trusts /all_trusts'. This pattern of activity is indicative of Trickbot's behavior to understand the network's structure, possibly for future malicious actions. Be aware that similar commands might occasionally be used by system administrators for legitimate purposes, so it's important to investigate potential hits before making a definitive assessment. The significance of detecting this pattern is classified as high due to its association with known malicious intent.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential reconnaissance activity used by Trickbot malware. Trickbot enumerates domain/network topology and executes certain commands automatically every few minutes.",
      "answer": "In order to detect potential reconnaissance activity used by Trickbot malware, which enumerates domain/network topology and executes certain commands automatically every few minutes, you should: Monitor process creation logs on Windows systems for instances where the parent process is 'cmd.exe' and the child process is 'nltest.exe' executing the command line containing '/domain_trusts /all_trusts'. This pattern of activity is indicative of Trickbot's behavior to understand the network's structure, possibly for future malicious actions. Be aware that similar commands might occasionally be used by system administrators for legitimate purposes, so it's important to investigate potential hits before making a definitive assessment. The significance of detecting this pattern is classified as high due to its association with known malicious intent."
    }
  },
  {
    "instruction": "Can you explain how to detect: known malicious service installs that only appear in cases of lateral movement, credential dumping, and other suspicious activities.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect known malicious service installs that only appear in cases of lateral movement, credential dumping, and other suspicious activities, you should monitor the Windows System logs, particularly focusing on events from the Service Control Manager with EventID 7045. This event indicates service installations, which can be leveraged by attackers for various purposes such as executing lateral movement within a network or dumping credentials.\n\nYou will need to look for specific indicators within the logs to identify potentially malicious activities. These include:\n\n1. Any service installation where the ImagePath contains the '\\PAExec' string. PAExec is a tool that can be used for executing processes on other systems, which is commonly utilized in lateral movement.\n\n2. Services named 'mssecsvc2.0'; this service name is infamously associated with the WannaCry ransomware, indicating a highly malicious activity.\n\n3. Service installations that contain 'net user' in the ImagePath. This is often used for creating or modifying user accounts on the local system or domain, which can be an indicator of attempts to establish persistence or perform credential dumping.\n\n4. The installation of a service named 'Java(TM) Virtual Machine Support Service'. This service name can be indicative of attacks carried out by sophisticated threat actors, such as APT29, who often disguise their malware as legitimate services to avoid detection.\n\nIt's critical to approach detection with the understanding that there could be unknown false positives, given the nature of these indicators. Any match should be subjected to a critical level of scrutiny due to the potential impact of these threats. The associated tactics and techniques from the MITRE ATT&CK framework for these activities include Execution, Persistence, Privilege Escalation, Defense Evasion, Credential Access, Lateral Movement, and Execution.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "known malicious service installs that only appear in cases of lateral movement, credential dumping, and other suspicious activities.",
      "answer": "In order to detect known malicious service installs that only appear in cases of lateral movement, credential dumping, and other suspicious activities, you should monitor the Windows System logs, particularly focusing on events from the Service Control Manager with EventID 7045. This event indicates service installations, which can be leveraged by attackers for various purposes such as executing lateral movement within a network or dumping credentials.\n\nYou will need to look for specific indicators within the logs to identify potentially malicious activities. These include:\n\n1. Any service installation where the ImagePath contains the '\\PAExec' string. PAExec is a tool that can be used for executing processes on other systems, which is commonly utilized in lateral movement.\n\n2. Services named 'mssecsvc2.0'; this service name is infamously associated with the WannaCry ransomware, indicating a highly malicious activity.\n\n3. Service installations that contain 'net user' in the ImagePath. This is often used for creating or modifying user accounts on the local system or domain, which can be an indicator of attempts to establish persistence or perform credential dumping.\n\n4. The installation of a service named 'Java(TM) Virtual Machine Support Service'. This service name can be indicative of attacks carried out by sophisticated threat actors, such as APT29, who often disguise their malware as legitimate services to avoid detection.\n\nIt's critical to approach detection with the understanding that there could be unknown false positives, given the nature of these indicators. Any match should be subjected to a critical level of scrutiny due to the potential impact of these threats. The associated tactics and techniques from the MITRE ATT&CK framework for these activities include Execution, Persistence, Privilege Escalation, Defense Evasion, Credential Access, Lateral Movement, and Execution."
    }
  },
  {
    "instruction": "Can you explain how to detect: ntds.dit retrieving using synchronisation with legitimate domain controller using Directory Replication Service Remote Protocol",
    "context": "",
    "output": "Certainly!\n\nIn order to detect unauthorized attempts to retrieve the ntds.dit file through synchronization with a legitimate domain controller using the Directory Replication Service Remote Protocol, you should monitor specific indicators within Windows Security logs. Look for events that signify access requests to domain controllers, focusing on Windows Security Event IDs 4624 and 4662 in particular.\n\nEvent ID 4624 should be scrutinized for logons to your domain controllers, listed specifically by their names. This helps to identify any successful authentication attempts that could potentially be used for malicious purposes.\n\nAdditionally, monitor for any IP addresses that correspond to your domain controllers in the event of network-based interactions that could bypass typical authentication mechanisms, aiming to identify direct IP interactions that might signify suspicious activities.\n\nCrucially, focus on Event ID 4662, particularly looking for access requests to objects within the domain controllers specified by their names. This event should be cross-referenced with a list of suspicious target logon IDs, which are identified from previous monitoring (as specified in the initial logon monitoring step). The properties to watch for in these access requests include specific GUIDs ('1131f6aa-9c07-11d1-f79f-00c04fc2dcd2' and '1131f6ad-9c07-11d1-f79f-00c04fc2dcd2') that are associated with actions on the domain controller that could indicate an attempt to replicate or retrieve sensitive directory data, such as the ntds.dit file.\n\nDetecting these activities involves a nuanced approach where a successful logon event (EventID 4624) to a domain controller that does not subsequently interact through a direct IP address (as checked against a predetermined list of domain controllers' IPs) flags the logon IDs associated with these events. These flagged IDs are then used to monitor for access (EventID 4662) involving the critical GUID properties. If these conditions are met, it indicates a potential unauthorized attempt to access or replicate directory services data, prompting an alert.\n\nBe aware that there are legitimate circumstances where these indicators may be triggered, such as when an administrator is adding a new domain controller to an existing domain. Therefore, it's crucial to analyze the context of alerts and investigate further to differentiate between legitimate administrative activities and malicious actions.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "ntds.dit retrieving using synchronisation with legitimate domain controller using Directory Replication Service Remote Protocol",
      "answer": "In order to detect unauthorized attempts to retrieve the ntds.dit file through synchronization with a legitimate domain controller using the Directory Replication Service Remote Protocol, you should monitor specific indicators within Windows Security logs. Look for events that signify access requests to domain controllers, focusing on Windows Security Event IDs 4624 and 4662 in particular.\n\nEvent ID 4624 should be scrutinized for logons to your domain controllers, listed specifically by their names. This helps to identify any successful authentication attempts that could potentially be used for malicious purposes.\n\nAdditionally, monitor for any IP addresses that correspond to your domain controllers in the event of network-based interactions that could bypass typical authentication mechanisms, aiming to identify direct IP interactions that might signify suspicious activities.\n\nCrucially, focus on Event ID 4662, particularly looking for access requests to objects within the domain controllers specified by their names. This event should be cross-referenced with a list of suspicious target logon IDs, which are identified from previous monitoring (as specified in the initial logon monitoring step). The properties to watch for in these access requests include specific GUIDs ('1131f6aa-9c07-11d1-f79f-00c04fc2dcd2' and '1131f6ad-9c07-11d1-f79f-00c04fc2dcd2') that are associated with actions on the domain controller that could indicate an attempt to replicate or retrieve sensitive directory data, such as the ntds.dit file.\n\nDetecting these activities involves a nuanced approach where a successful logon event (EventID 4624) to a domain controller that does not subsequently interact through a direct IP address (as checked against a predetermined list of domain controllers' IPs) flags the logon IDs associated with these events. These flagged IDs are then used to monitor for access (EventID 4662) involving the critical GUID properties. If these conditions are met, it indicates a potential unauthorized attempt to access or replicate directory services data, prompting an alert.\n\nBe aware that there are legitimate circumstances where these indicators may be triggered, such as when an administrator is adding a new domain controller to an existing domain. Therefore, it's crucial to analyze the context of alerts and investigate further to differentiate between legitimate administrative activities and malicious actions."
    }
  },
  {
    "instruction": "How to detect: modification of autostart extensibility point (ASEP) in registry.",
    "context": "",
    "output": "In order to detect modification of autostart extensibility point (ASEP) in registry, you should focus on monitoring Windows registry settings for specific events and changes that signify potential unauthorized modifications aimed at enabling autostart mechanisms for malware or other unwanted programs. The analysis should be concentrated on registry set events, particularly the `SetValue` event type, which indicates an attempt to modify registry values.\n\nKey registry paths to monitor include various locations under the `SOFTWARE\\Wow6432Node\\Microsoft` and `SOFTWARE\\Microsoft` paths that are commonly targeted for persistence mechanisms, such as `AutoStart`, `Command Processor\\Autorun`, `Active Setup\\Installed Components`, and several others including `SYSTEM\\Setup\\CmdLine`, `Software\\Microsoft\\Ctf\\LangBarAddin`, and `Environment\\UserInitMprLogonScript`. \n\nFurthermore, entries relating to browser components (`Software\\Microsoft\\Internet Explorer\\UrlSearchHooks`, `SOFTWARE\\Microsoft\\Internet Explorer\\Desktop\\Components`, etc.), desktop components (`Control Panel\\Desktop\\Scrnsave.exe`), and protocol handlers (`SOFTWARE\\Classes\\Protocols\\Handler`, `Software\\Classes\\Protocols\\Filter`) are crucial to monitor due to their potential to be leveraged for persistence and execution through user interaction or system events.\n\nSpecial attention should be given to exclude modifications related to certain Microsoft Office, Chrome, Edge, and Internet Explorer components, as denoted by specific registry paths and details related to these applications, from triggering alerts to reduce false positives. This is achieved by filtering out changes occurring in specified registry locations related to Microsoft Office ClickToRun, Chrome, Edge, and Internet Explorer setup components, alongside some known benign executables (`poqexec.exe`, `integrator.exe` and `OfficeClickToRun.exe`).\n\nCrucially, ensuring that legitimate software installations and administrator-configured autorun keys are carefully distinguished from malicious modifications is imperative to maintain operational integrity and minimize instances of false alarms. \n\nThe successful detection strategy encompasses monitoring for modifications in the specified registry paths while excluding changes that are identified as legitimate through the listed exclusions. The key fields to be logged for further investigation are the SecurityID, ObjectName, OldValueType, and NewValueType, which provide essential information about the operation performed. This approach offers a balanced and focused method to detect and alert on potentially malicious ASEP modifications in the Windows registry with a medium level of confidence, aiming to protect against persistence and execution mechanisms commonly used by malware and unwanted software.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "modification of autostart extensibility point (ASEP) in registry.",
      "answer": "In order to detect modification of autostart extensibility point (ASEP) in registry, you should focus on monitoring Windows registry settings for specific events and changes that signify potential unauthorized modifications aimed at enabling autostart mechanisms for malware or other unwanted programs. The analysis should be concentrated on registry set events, particularly the `SetValue` event type, which indicates an attempt to modify registry values.\n\nKey registry paths to monitor include various locations under the `SOFTWARE\\Wow6432Node\\Microsoft` and `SOFTWARE\\Microsoft` paths that are commonly targeted for persistence mechanisms, such as `AutoStart`, `Command Processor\\Autorun`, `Active Setup\\Installed Components`, and several others including `SYSTEM\\Setup\\CmdLine`, `Software\\Microsoft\\Ctf\\LangBarAddin`, and `Environment\\UserInitMprLogonScript`. \n\nFurthermore, entries relating to browser components (`Software\\Microsoft\\Internet Explorer\\UrlSearchHooks`, `SOFTWARE\\Microsoft\\Internet Explorer\\Desktop\\Components`, etc.), desktop components (`Control Panel\\Desktop\\Scrnsave.exe`), and protocol handlers (`SOFTWARE\\Classes\\Protocols\\Handler`, `Software\\Classes\\Protocols\\Filter`) are crucial to monitor due to their potential to be leveraged for persistence and execution through user interaction or system events.\n\nSpecial attention should be given to exclude modifications related to certain Microsoft Office, Chrome, Edge, and Internet Explorer components, as denoted by specific registry paths and details related to these applications, from triggering alerts to reduce false positives. This is achieved by filtering out changes occurring in specified registry locations related to Microsoft Office ClickToRun, Chrome, Edge, and Internet Explorer setup components, alongside some known benign executables (`poqexec.exe`, `integrator.exe` and `OfficeClickToRun.exe`).\n\nCrucially, ensuring that legitimate software installations and administrator-configured autorun keys are carefully distinguished from malicious modifications is imperative to maintain operational integrity and minimize instances of false alarms. \n\nThe successful detection strategy encompasses monitoring for modifications in the specified registry paths while excluding changes that are identified as legitimate through the listed exclusions. The key fields to be logged for further investigation are the SecurityID, ObjectName, OldValueType, and NewValueType, which provide essential information about the operation performed. This approach offers a balanced and focused method to detect and alert on potentially malicious ASEP modifications in the Windows registry with a medium level of confidence, aiming to protect against persistence and execution mechanisms commonly used by malware and unwanted software."
    }
  },
  {
    "instruction": "How to detect: suspicious script execution in temporary folders or folders accessible by environment variables",
    "context": "",
    "output": "In order to detect a suspicious script execution in temporary folders or folders accessible by environment variables, you should focus on monitoring the creation of processes on Windows systems. Specifically, watch for the execution of `cscript.exe`, `mshta.exe`, or `wscript.exe` scripts, which are commonly utilized by attackers for executing malicious code through scripts. Be vigilant for command line flags that attempt to bypass execution policies (`-ep bypass`, ` -ExecutionPolicy bypass`) or run scripts in a hidden window (`-w hidden`), as well as attempts to execute JavaScript or VBScript (`/e:javascript`, `/e:Jscript`, `/e:vbscript`). Additionally, scrutinize any script execution occurring within certain directories that are commonly abused by threat actors, including temporary folders like `\\AppData\\Local\\Temp`, `\\Windows\\Temp`, or folders normally accessible through environment variables such as `:\\Perflogs\\`, `:\\Users\\Public\\`. Special attention should be given to scripts run from user directories in combination with specific subfolders like `\\Favorites\\`, `\\Favourites\\`, or `\\Contacts\\`, which could signify an attempt to leverage user profiles for malicious purposes. This vigilance aids in identifying tactics and techniques related to execution and persistence, among others, which are pivotal for safeguarding against possible threats.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious script execution in temporary folders or folders accessible by environment variables",
      "answer": "In order to detect a suspicious script execution in temporary folders or folders accessible by environment variables, you should focus on monitoring the creation of processes on Windows systems. Specifically, watch for the execution of `cscript.exe`, `mshta.exe`, or `wscript.exe` scripts, which are commonly utilized by attackers for executing malicious code through scripts. Be vigilant for command line flags that attempt to bypass execution policies (`-ep bypass`, ` -ExecutionPolicy bypass`) or run scripts in a hidden window (`-w hidden`), as well as attempts to execute JavaScript or VBScript (`/e:javascript`, `/e:Jscript`, `/e:vbscript`). Additionally, scrutinize any script execution occurring within certain directories that are commonly abused by threat actors, including temporary folders like `\\AppData\\Local\\Temp`, `\\Windows\\Temp`, or folders normally accessible through environment variables such as `:\\Perflogs\\`, `:\\Users\\Public\\`. Special attention should be given to scripts run from user directories in combination with specific subfolders like `\\Favorites\\`, `\\Favourites\\`, or `\\Contacts\\`, which could signify an attempt to leverage user profiles for malicious purposes. This vigilance aids in identifying tactics and techniques related to execution and persistence, among others, which are pivotal for safeguarding against possible threats."
    }
  },
  {
    "instruction": "Please help me detect the following: tampering with the \"Enabled\" registry key in order to disable Windows logging of a Windows event channel",
    "context": "",
    "output": "Sure!\nIn order to detect tampering with the \"Enabled\" registry key in order to disable Windows logging of a Windows event channel, you should:\n\nMonitor the Windows registry for any SetValue events that target the \"Enabled\" keys within the 'HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\WINEVT\\Channels\\' path. Specifically, you are looking for changes that set these keys to 'DWORD (0x00000000)', which effectively disables logging for that event channel. \n\nHowever, there are several conditions under which this activity may not indicate a malicious attempt to disable Windows logging. One such condition is when the modification comes from the 'wevtutil.exe' tool found in the '\\Windows\\system32\\' directory, as this is a standard tool used for event log configuration, including during legitimate installations of manifests. Similarly, modifications originating from 'TiWorker.exe' located in the 'C:\\Windows\\winsxs\\' directory, or from 'TrustedInstaller.exe' in the 'C:\\Windows\\servicing\\' directory, should also be considered with caution since these are associated with legitimate system updates and installations.\n\nFurther exceptions should be made for changes initiated by 'svchost.exe' in 'C:\\Windows\\System32\\' when the target objects include specific channels related to the FileInfoMinifilter, ASN1, Kernel-AppCompat, Runtime Error, or CAPI2 event logs. This is because such changes can be part of normal system operations or updates, especially when they involve system components or security features.\n\nUnfortunately, there are filters related to potential errors, identified as 'filter_optional_empty' and 'filter_optional_null', which currently do not specify any criteria and are placeholders for future adjustments. \n\nIt is noteworthy that while the overall intention is to capture and alert on unauthorized disablement of logging, legitimate administrative actions undertaken for troubleshooting or system configuration purposes may occasionally trigger alerts, resulting in rare false positives.\n\nThe severity level for this detection mechanism is classified as high due to the significant security implications of successfully tampering with event logging, which could undermine the integrity of audit logs and hinder the detection of malicious activities. This detection strategy is aligned with mitigating tactics against evasion techniques that aim to disable or interfere with event logging, as cataloged in the MITRE ATT&CK framework under Indicator Blocking and Defense Evasion tactics.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "tampering with the \"Enabled\" registry key in order to disable Windows logging of a Windows event channel",
      "answer": "In order to detect tampering with the \"Enabled\" registry key in order to disable Windows logging of a Windows event channel, you should:\n\nMonitor the Windows registry for any SetValue events that target the \"Enabled\" keys within the 'HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\WINEVT\\Channels\\' path. Specifically, you are looking for changes that set these keys to 'DWORD (0x00000000)', which effectively disables logging for that event channel. \n\nHowever, there are several conditions under which this activity may not indicate a malicious attempt to disable Windows logging. One such condition is when the modification comes from the 'wevtutil.exe' tool found in the '\\Windows\\system32\\' directory, as this is a standard tool used for event log configuration, including during legitimate installations of manifests. Similarly, modifications originating from 'TiWorker.exe' located in the 'C:\\Windows\\winsxs\\' directory, or from 'TrustedInstaller.exe' in the 'C:\\Windows\\servicing\\' directory, should also be considered with caution since these are associated with legitimate system updates and installations.\n\nFurther exceptions should be made for changes initiated by 'svchost.exe' in 'C:\\Windows\\System32\\' when the target objects include specific channels related to the FileInfoMinifilter, ASN1, Kernel-AppCompat, Runtime Error, or CAPI2 event logs. This is because such changes can be part of normal system operations or updates, especially when they involve system components or security features.\n\nUnfortunately, there are filters related to potential errors, identified as 'filter_optional_empty' and 'filter_optional_null', which currently do not specify any criteria and are placeholders for future adjustments. \n\nIt is noteworthy that while the overall intention is to capture and alert on unauthorized disablement of logging, legitimate administrative actions undertaken for troubleshooting or system configuration purposes may occasionally trigger alerts, resulting in rare false positives.\n\nThe severity level for this detection mechanism is classified as high due to the significant security implications of successfully tampering with event logging, which could undermine the integrity of audit logs and hinder the detection of malicious activities. This detection strategy is aligned with mitigating tactics against evasion techniques that aim to disable or interfere with event logging, as cataloged in the MITRE ATT&CK framework under Indicator Blocking and Defense Evasion tactics."
    }
  },
  {
    "instruction": "How can I detect: Identifies the execution traces of the XCSSET malware. XCSSET is a macOS trojan that primarily spreads via Xcode projects and maliciously modifies applications. Infected users are also vulnerable to having their credentials, accounts, and other vital data stolen.",
    "context": "",
    "output": "In order to identify the execution traces of the XCSSET malware, a macOS trojan that primarily spreads via Xcode projects and maliciously modifies applications, leaving infected users vulnerable to stolen credentials, accounts, and other vital data, you should: \nLook for process creation events on macOS systems that match specific conditions indicative of this malware's activity. Monitor for the usage of the 'curl' command initiated by '/bash' to access suspicious URLs containing '/sys/log.php', '/sys/prepod.php', or '/sys/bin/Pods', as these may be attempts to communicate with a command and control server. Also, watch out for processes initiated by '/bash' using 'osacompile' or 'plutil' to manipulate files or applications, specifically when the command lines include '/Users/' and '/Library/Group Containers/', indicating tampering with user data or applications. Additionally, the creation of zip archives targeting directories within '/Users/' and '/Library/Group Containers/' should be scrutinized if the 'zip' command is involved, as this could suggest data exfiltration attempts. Lastly, any command line containing 'https://' is of interest due to potential malicious network communication. The identified behaviors are tagged under command and control tactics, revealing efforts to manage and control compromised systems remotely.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Identifies the execution traces of the XCSSET malware. XCSSET is a macOS trojan that primarily spreads via Xcode projects and maliciously modifies applications. Infected users are also vulnerable to having their credentials, accounts, and other vital data stolen.",
      "answer": "In order to identify the execution traces of the XCSSET malware, a macOS trojan that primarily spreads via Xcode projects and maliciously modifies applications, leaving infected users vulnerable to stolen credentials, accounts, and other vital data, you should: \nLook for process creation events on macOS systems that match specific conditions indicative of this malware's activity. Monitor for the usage of the 'curl' command initiated by '/bash' to access suspicious URLs containing '/sys/log.php', '/sys/prepod.php', or '/sys/bin/Pods', as these may be attempts to communicate with a command and control server. Also, watch out for processes initiated by '/bash' using 'osacompile' or 'plutil' to manipulate files or applications, specifically when the command lines include '/Users/' and '/Library/Group Containers/', indicating tampering with user data or applications. Additionally, the creation of zip archives targeting directories within '/Users/' and '/Library/Group Containers/' should be scrutinized if the 'zip' command is involved, as this could suggest data exfiltration attempts. Lastly, any command line containing 'https://' is of interest due to potential malicious network communication. The identified behaviors are tagged under command and control tactics, revealing efforts to manage and control compromised systems remotely."
    }
  },
  {
    "instruction": "Explain how should I detect the following: execution of System Informer, a task manager tool to view and manipulate processes, kernel options and other low level operations",
    "context": "",
    "output": "In order to detect the execution of System Informer, a task manager tool to view and manipulate processes, kernel options, and other low-level operations, you should monitor the creation of processes on Windows systems for indications that System Informer is being used. Specifically, look for instances where the process image name ends with '\\SystemInformer.exe', or where the original file name is reported as 'SystemInformer.exe'. Additionally, the presence of the description 'System Informer' or the product name 'System Informer' associated with the process should raise suspicions.\n\nFurther validation can be achieved by examining the hashes of the process files. Monitoring for specific hash values is crucial, including MD5 '19426363A37C03C3ED6FEDF57B6696EC', SHA1 '8B12C6DA8FAC0D5E8AB999C31E5EA04AF32D53DC', SHA256 '8EE9D84DE50803545937A63C686822388A3338497CDDB660D5D69CF68B68F287', and Import Hash 'B68908ADAEB5D662F87F2528AF318F12'. These hash values serve as unique identifiers for the specific versions or instances of the System Informer tool that are of interest.\n\nIt's important to approach detection with the understanding that System Informer can also be used legitimately by system administrators or developers for benign purposes. Therefore, identifying its execution solely may not indicate malicious activity. Additional context or filters should be applied to reduce the likelihood of flagging legitimate usage of System Informer as a threat.\n\nThis detection strategy is informed by its relevance to several tactics and techniques defined in the MITRE ATT&CK framework, helping to identify the potential misuse of System Informer for processes manipulation, system surveillance, or other low-level system access that could be indicative of a broader attack strategy.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of System Informer, a task manager tool to view and manipulate processes, kernel options and other low level operations",
      "answer": "In order to detect the execution of System Informer, a task manager tool to view and manipulate processes, kernel options, and other low-level operations, you should monitor the creation of processes on Windows systems for indications that System Informer is being used. Specifically, look for instances where the process image name ends with '\\SystemInformer.exe', or where the original file name is reported as 'SystemInformer.exe'. Additionally, the presence of the description 'System Informer' or the product name 'System Informer' associated with the process should raise suspicions.\n\nFurther validation can be achieved by examining the hashes of the process files. Monitoring for specific hash values is crucial, including MD5 '19426363A37C03C3ED6FEDF57B6696EC', SHA1 '8B12C6DA8FAC0D5E8AB999C31E5EA04AF32D53DC', SHA256 '8EE9D84DE50803545937A63C686822388A3338497CDDB660D5D69CF68B68F287', and Import Hash 'B68908ADAEB5D662F87F2528AF318F12'. These hash values serve as unique identifiers for the specific versions or instances of the System Informer tool that are of interest.\n\nIt's important to approach detection with the understanding that System Informer can also be used legitimately by system administrators or developers for benign purposes. Therefore, identifying its execution solely may not indicate malicious activity. Additional context or filters should be applied to reduce the likelihood of flagging legitimate usage of System Informer as a threat.\n\nThis detection strategy is informed by its relevance to several tactics and techniques defined in the MITRE ATT&CK framework, helping to identify the potential misuse of System Informer for processes manipulation, system surveillance, or other low-level system access that could be indicative of a broader attack strategy."
    }
  },
  {
    "instruction": "Explain how should I detect the following: calls to cmdlets that are used to export certificates from the local certificate store. Threat actors were seen abusing this to steal private keys from compromised machines.",
    "context": "",
    "output": "In order to detect calls to cmdlets that are used to export certificates from the local certificate store, where threat actors were seen abusing this to steal private keys from compromised machines, you should: monitor for the creation of processes on Windows systems that involve the use of command line utilities or cmdlets specifically 'Export-PfxCertificate' or 'Export-Certificate'. These commands are indicators that someone may be attempting to export certificates from the machine's local certificate store, which could be an attempt by an unauthorized entity to exfiltrate sensitive data such as private keys. It's important to note that while this activity can be malicious, there are legitimate scenarios where administrators might export certificates. Hence, it's advisable to apply additional filters or context to distinguish between benign and potentially malicious behavior. The relevance of this detection lies within its association with known tactics and techniques employed by threat actors, including Credential Access through the exportation of authentication materials.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "calls to cmdlets that are used to export certificates from the local certificate store. Threat actors were seen abusing this to steal private keys from compromised machines.",
      "answer": "In order to detect calls to cmdlets that are used to export certificates from the local certificate store, where threat actors were seen abusing this to steal private keys from compromised machines, you should: monitor for the creation of processes on Windows systems that involve the use of command line utilities or cmdlets specifically 'Export-PfxCertificate' or 'Export-Certificate'. These commands are indicators that someone may be attempting to export certificates from the machine's local certificate store, which could be an attempt by an unauthorized entity to exfiltrate sensitive data such as private keys. It's important to note that while this activity can be malicious, there are legitimate scenarios where administrators might export certificates. Hence, it's advisable to apply additional filters or context to distinguish between benign and potentially malicious behavior. The relevance of this detection lies within its association with known tactics and techniques employed by threat actors, including Credential Access through the exportation of authentication materials."
    }
  },
  {
    "instruction": "Please help me detect the following: usage of the PHP CLI with the \"-r\" flag which allows it to run inline PHP code. The rule looks for calls to the \"fsockopen\" function which allows the creation of sockets.\nAttackers often leverage this in combination with functions such as \"exec\" or \"fopen\" to initiate a reverse shell connection.\n",
    "context": "",
    "output": "Sure!\nIn order to detect usage of the PHP CLI with the \"-r\" flag which allows it to run inline PHP code, with a focus on identifying calls to the \"fsockopen\" function that enable the creation of sockets, often utilized by attackers in conjunction with functions like \"exec\" or \"fopen\" to initiate a reverse shell connection, you should: Monitor process creation logs on Linux systems for any instances where the image path includes '/php', signaling the invocation of PHP. Specifically, look for command line executions containing the '-r' argument, indicative of inline PHP code execution, and the presence of the 'fsockopen' function within these commands. Additionally, pay attention to the use of common shell environments as part of the command line, which includes 'ash', 'bash', 'bsh', 'csh', 'ksh', 'pdksh', 'sh', 'tcsh', and 'zsh'. These shells might be invoked by attackers to execute further malicious scripts or commands post-exploitation. Given the high level of risk associated with this behavior, it's crucial to carefully examine such activities, while keeping in mind that there may be unknown false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of the PHP CLI with the \"-r\" flag which allows it to run inline PHP code. The rule looks for calls to the \"fsockopen\" function which allows the creation of sockets.\nAttackers often leverage this in combination with functions such as \"exec\" or \"fopen\" to initiate a reverse shell connection.\n",
      "answer": "In order to detect usage of the PHP CLI with the \"-r\" flag which allows it to run inline PHP code, with a focus on identifying calls to the \"fsockopen\" function that enable the creation of sockets, often utilized by attackers in conjunction with functions like \"exec\" or \"fopen\" to initiate a reverse shell connection, you should: Monitor process creation logs on Linux systems for any instances where the image path includes '/php', signaling the invocation of PHP. Specifically, look for command line executions containing the '-r' argument, indicative of inline PHP code execution, and the presence of the 'fsockopen' function within these commands. Additionally, pay attention to the use of common shell environments as part of the command line, which includes 'ash', 'bash', 'bsh', 'csh', 'ksh', 'pdksh', 'sh', 'tcsh', and 'zsh'. These shells might be invoked by attackers to execute further malicious scripts or commands post-exploitation. Given the high level of risk associated with this behavior, it's crucial to carefully examine such activities, while keeping in mind that there may be unknown false positives."
    }
  },
  {
    "instruction": "Please help me detect the following: Detect when users in your Azure AD tenant are authenticating to other Azure AD Tenants.",
    "context": "",
    "output": "Sure!\nIn order to detect when users in your Azure AD tenant are authenticiating to other Azure AD Tenants, you should: focus on monitoring Azure Sign-In logs. Specifically, pay attention to successful sign-in attempts (`Status: 'Success'`) where the `HomeTenantId` field is populated with the designated tenant's ID. It is critical to filter out activity where the `ResourceTenantId` matches the `HomeTenantID`, as this indicates legitimate internal activity. The primary aim is to detect scenarios where the `ResourceTenantId` does not match the `HomeTenantID`, which could imply that a user from your Azure AD tenant is gaining access to resources from another AD tenant potentially without authorization. It's equally important to consider legitimate activities that could produce similar patterns, such as sign-ins approved by System Administrators, which might not represent a security threat. This monitoring is tagged with medium severity and links to tactics and techniques including Credential Access, but doesn't explicitly restrict its scope to any specific techniques within the MITRE ATT&CK framework.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Detect when users in your Azure AD tenant are authenticating to other Azure AD Tenants.",
      "answer": "In order to detect when users in your Azure AD tenant are authenticiating to other Azure AD Tenants, you should: focus on monitoring Azure Sign-In logs. Specifically, pay attention to successful sign-in attempts (`Status: 'Success'`) where the `HomeTenantId` field is populated with the designated tenant's ID. It is critical to filter out activity where the `ResourceTenantId` matches the `HomeTenantID`, as this indicates legitimate internal activity. The primary aim is to detect scenarios where the `ResourceTenantId` does not match the `HomeTenantID`, which could imply that a user from your Azure AD tenant is gaining access to resources from another AD tenant potentially without authorization. It's equally important to consider legitimate activities that could produce similar patterns, such as sign-ins approved by System Administrators, which might not represent a security threat. This monitoring is tagged with medium severity and links to tactics and techniques including Credential Access, but doesn't explicitly restrict its scope to any specific techniques within the MITRE ATT&CK framework."
    }
  },
  {
    "instruction": "Please help me detect the following: Obfuscated Powershell via Stdin in Scripts",
    "context": "",
    "output": "Sure!\nIn order to detect obfuscated PowerShell via Stdin in scripts, you should focus on monitoring Windows Security Logs, particularly ensuring that the 'System Security Extension' audit subcategory is enabled. This is necessary to capture Event ID 4697, which logs the creation of a new service. The detection should specifically look for service file names containing indications of obfuscation or suspicious activity, such as the use of 'set' in conjunction with '&&', or file names containing the words 'environment', 'invoke', or '${input)'. These indicators suggest an attempt to execute obfuscated commands or scripts, which is a common tactic used in stealthy PowerShell attacks. The detection of these activities is considered of high importance due to the potential severity of PowerShell-based attacks, which can range from unauthorized system access to data exfiltration. Since the method for this detection might also intercept legitimate activities involving complex service creation commands, it's acknowledged that there could be unknown false positives. However, in the context of cybersecurity defenses, the presence of these specific patterns in service file names should prompt a closer investigation, as they commonly relate to malicious attempts to leverage obfuscated PowerShell scripts, aiming to evade detection mechanisms.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Obfuscated Powershell via Stdin in Scripts",
      "answer": "In order to detect obfuscated PowerShell via Stdin in scripts, you should focus on monitoring Windows Security Logs, particularly ensuring that the 'System Security Extension' audit subcategory is enabled. This is necessary to capture Event ID 4697, which logs the creation of a new service. The detection should specifically look for service file names containing indications of obfuscation or suspicious activity, such as the use of 'set' in conjunction with '&&', or file names containing the words 'environment', 'invoke', or '${input)'. These indicators suggest an attempt to execute obfuscated commands or scripts, which is a common tactic used in stealthy PowerShell attacks. The detection of these activities is considered of high importance due to the potential severity of PowerShell-based attacks, which can range from unauthorized system access to data exfiltration. Since the method for this detection might also intercept legitimate activities involving complex service creation commands, it's acknowledged that there could be unknown false positives. However, in the context of cybersecurity defenses, the presence of these specific patterns in service file names should prompt a closer investigation, as they commonly relate to malicious attempts to leverage obfuscated PowerShell scripts, aiming to evade detection mechanisms."
    }
  },
  {
    "instruction": "Please help me detect the following: usage of \"find\" binary in a suspicious manner to perform discovery",
    "context": "",
    "output": "Sure!\nIn order to detect usage of \"find\" binary in a suspicious manner to perform discovery, you should monitor the creation of processes on macOS systems. Specifically, look for the invocation of the \"find\" binary at the end of the command path. Be alert for command lines that contain arguments related to permissions such as '-perm -4000', '-perm -2000', '-perm 0777', '-perm -222', '-perm -o w', '-perm -o x', '-perm -u=s', or '-perm -g=s'. These arguments are typically leveraged by attackers to discover files with specific permissions, indicating a potential discovery phase of an attack. ",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of \"find\" binary in a suspicious manner to perform discovery",
      "answer": "In order to detect usage of \"find\" binary in a suspicious manner to perform discovery, you should monitor the creation of processes on macOS systems. Specifically, look for the invocation of the \"find\" binary at the end of the command path. Be alert for command lines that contain arguments related to permissions such as '-perm -4000', '-perm -2000', '-perm 0777', '-perm -222', '-perm -o w', '-perm -o x', '-perm -u=s', or '-perm -g=s'. These arguments are typically leveraged by attackers to discover files with specific permissions, indicating a potential discovery phase of an attack. "
    }
  },
  {
    "instruction": "Please help me detect the following: dotnet.exe will execute any DLL and execute unsigned code",
    "context": "",
    "output": "Sure!\nIn order to detect instances where dotnet.exe will execute any DLL and execute unsigned code, you should monitor process creation events on Windows systems. Focus specifically on processes where the image name ends with '\\dotnet.exe' or the original file name is identified as '.NET Host'. Additionally, pay attention to command-line parameters that end with either '.dll' or '.csproj', as these are indicative of attempts to execute code in this manner. Ensure to capture relevant details such as the computer name, the user involved, the command line used for execution, and the parent command line if available. It is important to note that system administrator activities might generate similar patterns, thus should be considered as potential false positives. The severity level for these detections is considered medium.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "dotnet.exe will execute any DLL and execute unsigned code",
      "answer": "In order to detect instances where dotnet.exe will execute any DLL and execute unsigned code, you should monitor process creation events on Windows systems. Focus specifically on processes where the image name ends with '\\dotnet.exe' or the original file name is identified as '.NET Host'. Additionally, pay attention to command-line parameters that end with either '.dll' or '.csproj', as these are indicative of attempts to execute code in this manner. Ensure to capture relevant details such as the computer name, the user involved, the command line used for execution, and the parent command line if available. It is important to note that system administrator activities might generate similar patterns, thus should be considered as potential false positives. The severity level for these detections is considered medium."
    }
  },
  {
    "instruction": "Explain how should I detect the following: certificate creation with template allowing risk permission subject",
    "context": "",
    "output": "In order to detect certificate creation with a template allowing risk permission subject, you should monitor for specific security events within Windows environments, particularly those generated by certificate services. Specifically, focus on events with ID 4898 indicating that a certificate template has been loaded, and events with ID 4899 signaling that a certificate Services template was updated. Crucial to detecting potential security risks is the presence of the 'CT_FLAG_ENROLLEE_SUPPLIES_SUBJECT' flag within the template content for both of these event types. The inclusion of this flag may point to configurations that allow for a higher risk of permission manipulation, as it suggests that the entity receiving the certificate can specify the subject. \n\nIt's important to be mindful of some legitimate scenarios that could lead to these events and flags being triggered, such as actions performed by system administrators, the generation of proxy SSL certificates that entail subject modification, and smart card enrollment processes. These are normally considered to be false positives from a security alert perspective. Nevertheless, given the nature of these detections and the level of scrutiny they warrant, they are classified at a low level of concern until additional context or behavior suggests a genuine threat. Key to this approach is ensuring that these detections are integrated within an overarching security monitoring strategy that tags these activities under relevant categories for potential investigation, adapting as necessary to the unique risk landscape of your environment.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "certificate creation with template allowing risk permission subject",
      "answer": "In order to detect certificate creation with a template allowing risk permission subject, you should monitor for specific security events within Windows environments, particularly those generated by certificate services. Specifically, focus on events with ID 4898 indicating that a certificate template has been loaded, and events with ID 4899 signaling that a certificate Services template was updated. Crucial to detecting potential security risks is the presence of the 'CT_FLAG_ENROLLEE_SUPPLIES_SUBJECT' flag within the template content for both of these event types. The inclusion of this flag may point to configurations that allow for a higher risk of permission manipulation, as it suggests that the entity receiving the certificate can specify the subject. \n\nIt's important to be mindful of some legitimate scenarios that could lead to these events and flags being triggered, such as actions performed by system administrators, the generation of proxy SSL certificates that entail subject modification, and smart card enrollment processes. These are normally considered to be false positives from a security alert perspective. Nevertheless, given the nature of these detections and the level of scrutiny they warrant, they are classified at a low level of concern until additional context or behavior suggests a genuine threat. Key to this approach is ensuring that these detections are integrated within an overarching security monitoring strategy that tags these activities under relevant categories for potential investigation, adapting as necessary to the unique risk landscape of your environment."
    }
  },
  {
    "instruction": "Explain how should I detect the following: use of getsystem Meterpreter/Cobalt Strike command by detecting a specific service installation",
    "context": "",
    "output": "In order to detect the use of getsystem Meterpreter/Cobalt Strike command by detecting a specific service installation, you should: Focus on analyzing Windows System service logs for specific patterns indicating an attempt to escalate privileges or execute arbitrary commands. Look for logs where the 'Service Control Manager' is the provider, especially those with an Event ID of 7045, which signals a service installation event. The critical patterns to watch for include commands that run cmd.exe or %COMSPEC% with parameters '/c echo', followed by a reference to a pipe (e.g., '\\\\.\\pipe\\'). This pattern is a common tactic in Meterpreter and Cobalt Strike get system techniques, aiming to execute code or commands for privilege escalation.\n\nAdditionally, watch for instances where rundll32.exe is used to load DLL files with specific characteristics, such as using parameters like '.dll,a' and '/p:', or any service installation attempts originating from a UNC path that starts with '\\\\\\\\127.0.0.1\\\\ADMIN$\\', a method known to be exploited for similar purposes. \n\nLogs that match these patterns are critical to investigate as they are indicative of privilege escalation techniques used by threat actors leveraging tools like Meterpreter and Cobalt Strike. Such logs will contain essential details like the Computer Name, Domain Name, User Name, and the Image Path of the executed service. Due to the specificity of these patterns, false positives are considered highly unlikely. Thus, identifying and analyzing these signals in your logs is crucial for detecting and mitigating potential security threats related to unauthorized system access or privilege escalation.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "use of getsystem Meterpreter/Cobalt Strike command by detecting a specific service installation",
      "answer": "In order to detect the use of getsystem Meterpreter/Cobalt Strike command by detecting a specific service installation, you should: Focus on analyzing Windows System service logs for specific patterns indicating an attempt to escalate privileges or execute arbitrary commands. Look for logs where the 'Service Control Manager' is the provider, especially those with an Event ID of 7045, which signals a service installation event. The critical patterns to watch for include commands that run cmd.exe or %COMSPEC% with parameters '/c echo', followed by a reference to a pipe (e.g., '\\\\.\\pipe\\'). This pattern is a common tactic in Meterpreter and Cobalt Strike get system techniques, aiming to execute code or commands for privilege escalation.\n\nAdditionally, watch for instances where rundll32.exe is used to load DLL files with specific characteristics, such as using parameters like '.dll,a' and '/p:', or any service installation attempts originating from a UNC path that starts with '\\\\\\\\127.0.0.1\\\\ADMIN$\\', a method known to be exploited for similar purposes. \n\nLogs that match these patterns are critical to investigate as they are indicative of privilege escalation techniques used by threat actors leveraging tools like Meterpreter and Cobalt Strike. Such logs will contain essential details like the Computer Name, Domain Name, User Name, and the Image Path of the executed service. Due to the specificity of these patterns, false positives are considered highly unlikely. Thus, identifying and analyzing these signals in your logs is crucial for detecting and mitigating potential security threats related to unauthorized system access or privilege escalation."
    }
  },
  {
    "instruction": "Please help me detect the following: Detection of logins performed with WMI",
    "context": "",
    "output": "Sure!\nIn order to detect logins performed with WMI, you should: Focus on monitoring Windows security logs for event ID 4624, which signifies a successful account logon event, specifically when the logon is performed via the WMI process, as indicated by the process name ending with '\\WmiPrvSE.exe'. It's important to note that while this activity can indicate a potential security concern, there might be false positives resulting from monitoring tools or legitimate system administration tasks, and the risk level associated with this detection is considered low.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Detection of logins performed with WMI",
      "answer": "In order to detect logins performed with WMI, you should: Focus on monitoring Windows security logs for event ID 4624, which signifies a successful account logon event, specifically when the logon is performed via the WMI process, as indicated by the process name ending with '\\WmiPrvSE.exe'. It's important to note that while this activity can indicate a potential security concern, there might be false positives resulting from monitoring tools or legitimate system administration tasks, and the risk level associated with this detection is considered low."
    }
  },
  {
    "instruction": "Can you explain how to detect: execution of whoami, which is often used by attackers after exploitation / privilege escalation",
    "context": "",
    "output": "Certainly!\n\nIn order to detect the execution of whoami, which is often used by attackers after exploitation / privilege escalation, you should: Monitor the creation of processes on Windows systems for the execution of the \"whoami.exe\" application. This involves looking for process creations where the image name ends with \"\\whoami.exe\" or where the original file name is exactly \"whoami.exe\". This is an important step because attackers frequently use the \"whoami\" command to check the current user's identity and assess the level of privileges they have obtained after gaining access or escalating their privileges within the system. It's worth noting that there could be legitimate uses of the \"whoami.exe\" command by administrators or through scripts and administrative tools within the environment, as well as for monitoring activities, which should be considered as potential sources of false positives. The risk level for this activity is assessed as medium, implying that while it may not always indicate malicious activity, it deserves attention and potentially further investigation.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of whoami, which is often used by attackers after exploitation / privilege escalation",
      "answer": "In order to detect the execution of whoami, which is often used by attackers after exploitation / privilege escalation, you should: Monitor the creation of processes on Windows systems for the execution of the \"whoami.exe\" application. This involves looking for process creations where the image name ends with \"\\whoami.exe\" or where the original file name is exactly \"whoami.exe\". This is an important step because attackers frequently use the \"whoami\" command to check the current user's identity and assess the level of privileges they have obtained after gaining access or escalating their privileges within the system. It's worth noting that there could be legitimate uses of the \"whoami.exe\" command by administrators or through scripts and administrative tools within the environment, as well as for monitoring activities, which should be considered as potential sources of false positives. The risk level for this activity is assessed as medium, implying that while it may not always indicate malicious activity, it deserves attention and potentially further investigation."
    }
  },
  {
    "instruction": "Can you explain how to detect: logon events that specify new credentials",
    "context": "",
    "output": "Certainly!\n\nIn order to detect logon events that specify new credentials, you should monitor for specific events in the Windows Security logs. Look for events with EventID 4624, which represent successful logon events. Specifically, focus on those logon events that are of LogonType 9, indicating a new logon session has been created with different credentials than the account that initiated the action. This activity could potentially signal unauthorized access or malicious intent, as it might be used to execute commands or actions while masquerading as a different user. It's important to note, however, that this behavior could also be attributed to legitimate remote administration activities. As such, any detection at this level should be considered with caution and investigated further to rule out or confirm malicious intent. The tagged tactics and techniques primarily relate to Credential Access and Lateral Movement, given the nature of the detection focusing on the misuse or unusual use of login credentials.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "logon events that specify new credentials",
      "answer": "In order to detect logon events that specify new credentials, you should monitor for specific events in the Windows Security logs. Look for events with EventID 4624, which represent successful logon events. Specifically, focus on those logon events that are of LogonType 9, indicating a new logon session has been created with different credentials than the account that initiated the action. This activity could potentially signal unauthorized access or malicious intent, as it might be used to execute commands or actions while masquerading as a different user. It's important to note, however, that this behavior could also be attributed to legitimate remote administration activities. As such, any detection at this level should be considered with caution and investigated further to rule out or confirm malicious intent. The tagged tactics and techniques primarily relate to Credential Access and Lateral Movement, given the nature of the detection focusing on the misuse or unusual use of login credentials."
    }
  },
  {
    "instruction": "Please help me detect the following: usage of special strings/null bits in order to potentially bypass AMSI functionalities",
    "context": "",
    "output": "Sure!\nIn order to detect usage of special strings/null bits in order to potentially bypass AMSI functionalities, you should: focus on monitoring the process creation logs within Windows systems. Look for occurrences where the command line contains specific patterns, such as \"if(0){{{0}}}' -f $(0 -as [char]) +\", which indicates an attempt to execute commands or scripts that might include null bits or special strings designed to evade detection by the Anti-Malware Scan Interface (AMSI). Additionally, the presence of \"#<NULL>\" in the command line should be flagged as it suggests an explicit attempt to insert a null character, potentially as part of an attack strategy to bypass AMSI functionalities. It's important to treat these findings with caution as there may be unknown false positives. This analysis operates at a medium threat level and targets the identification of techniques aimed at undermining AMSI's ability to detect malware or malicious activity through obfuscation or evasion strategies.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of special strings/null bits in order to potentially bypass AMSI functionalities",
      "answer": "In order to detect usage of special strings/null bits in order to potentially bypass AMSI functionalities, you should: focus on monitoring the process creation logs within Windows systems. Look for occurrences where the command line contains specific patterns, such as \"if(0){{{0}}}' -f $(0 -as [char]) +\", which indicates an attempt to execute commands or scripts that might include null bits or special strings designed to evade detection by the Anti-Malware Scan Interface (AMSI). Additionally, the presence of \"#<NULL>\" in the command line should be flagged as it suggests an explicit attempt to insert a null character, potentially as part of an attack strategy to bypass AMSI functionalities. It's important to treat these findings with caution as there may be unknown false positives. This analysis operates at a medium threat level and targets the identification of techniques aimed at undermining AMSI's ability to detect malware or malicious activity through obfuscation or evasion strategies."
    }
  },
  {
    "instruction": "Can you explain how to detect: creation of new \".dll\" files inside the plugins directory of a notepad++ installation by a process other than \"gup.exe\". Which could indicates possible persistence",
    "context": "",
    "output": "Certainly!\n\nIn order to detect creation of new \".dll\" files inside the plugins directory of a notepad++ installation by a process other than \"gup.exe\", which could indicate possible persistence, you should: Monitor Windows file event logs for any new \".dll\" files being created or added to the Notepad++ plugins directory. This detection focuses on identifying \".dll\" files because these can be utilized by adversaries to maintain persistence on a compromised system by executing malicious code. Important to note, any occurrences where the process responsible for creating or modifying these \".dll\" files is not 'gup.exe', the updater for Notepad++, should be scrutinized. The rule specifically excludes files added or modified by 'gup.exe', as well as during initial installation procedures or when sourcing from 'C:\\Users\\' within '\\AppData\\Local\\Temp\\' directory, aiming to reduce false positives such as legitimate updates or plugin expansions initiated by users. Detection of such activity is flagged with a medium level of concern due to the potential misuse of legitimate software to sustain unauthorized access or control within a targeted environment. Be aware, legitimate use of custom plugins or initial installation of Notepad++ may also trigger alerts under this criterion, which are considered potential false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "creation of new \".dll\" files inside the plugins directory of a notepad++ installation by a process other than \"gup.exe\". Which could indicates possible persistence",
      "answer": "In order to detect creation of new \".dll\" files inside the plugins directory of a notepad++ installation by a process other than \"gup.exe\", which could indicate possible persistence, you should: Monitor Windows file event logs for any new \".dll\" files being created or added to the Notepad++ plugins directory. This detection focuses on identifying \".dll\" files because these can be utilized by adversaries to maintain persistence on a compromised system by executing malicious code. Important to note, any occurrences where the process responsible for creating or modifying these \".dll\" files is not 'gup.exe', the updater for Notepad++, should be scrutinized. The rule specifically excludes files added or modified by 'gup.exe', as well as during initial installation procedures or when sourcing from 'C:\\Users\\' within '\\AppData\\Local\\Temp\\' directory, aiming to reduce false positives such as legitimate updates or plugin expansions initiated by users. Detection of such activity is flagged with a medium level of concern due to the potential misuse of legitimate software to sustain unauthorized access or control within a targeted environment. Be aware, legitimate use of custom plugins or initial installation of Notepad++ may also trigger alerts under this criterion, which are considered potential false positives."
    }
  },
  {
    "instruction": "How can I detect: Adversaries may disable or modify system firewalls in order to bypass controls limiting network usage",
    "context": "",
    "output": "In order to detect adversaries attempting to disable or modify system firewalls to bypass controls limiting network usage, you should monitor registry modifications targeting the Windows Firewall settings. This involves tracking events where registry values are set (EventType: SetValue) under the Windows product category, specifically within the Registry Set log source. Pay close attention to any changes made to the registry paths that control the enabling of the firewall in the domain, public, and standard profiles, which are found under \"HKLM\\System\\CurrentControlSet\\Services\\SharedAccess\\Parameters\\FirewallPolicy\\\" and end with \"\\EnableFirewall\". The critical modification to look out for is the setting of these registry values to 'DWORD (0x00000000)', which effectively disables the firewall. It's important to note that there could be rare cases where changes to these settings might not indicate malicious activity, and these should be considered as potential false positives. The severity of such modifications is generally considered medium.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Adversaries may disable or modify system firewalls in order to bypass controls limiting network usage",
      "answer": "In order to detect adversaries attempting to disable or modify system firewalls to bypass controls limiting network usage, you should monitor registry modifications targeting the Windows Firewall settings. This involves tracking events where registry values are set (EventType: SetValue) under the Windows product category, specifically within the Registry Set log source. Pay close attention to any changes made to the registry paths that control the enabling of the firewall in the domain, public, and standard profiles, which are found under \"HKLM\\System\\CurrentControlSet\\Services\\SharedAccess\\Parameters\\FirewallPolicy\\\" and end with \"\\EnableFirewall\". The critical modification to look out for is the setting of these registry values to 'DWORD (0x00000000)', which effectively disables the firewall. It's important to note that there could be rare cases where changes to these settings might not indicate malicious activity, and these should be considered as potential false positives. The severity of such modifications is generally considered medium."
    }
  },
  {
    "instruction": "Explain how should I detect the following: suspicious child process of userinit",
    "context": "",
    "output": "In order to detect a suspicious child process of userinit, you should: Monitor the creation of processes on Windows operating systems. Focus on identifying processes that are initiated by 'userinit.exe'. However, to reduce false positives and focus on potential threats, exclude any process that has command lines containing '\\netlogon\\' or those processes where the image or the original filename is 'explorer.exe'. For processes that raise suspicion, it's crucial to log their command lines and the parent process's command line for further investigation. Administrative scripts might occasionally trigger similar patterns, so they are considered potential false positives. This approach is targeted at identifying unusual or potentially malicious activity initiated by userinit, which is often a legitimate part of the Windows login process but can be abused by attackers for executing malicious code right after a user logs in.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious child process of userinit",
      "answer": "In order to detect a suspicious child process of userinit, you should: Monitor the creation of processes on Windows operating systems. Focus on identifying processes that are initiated by 'userinit.exe'. However, to reduce false positives and focus on potential threats, exclude any process that has command lines containing '\\netlogon\\' or those processes where the image or the original filename is 'explorer.exe'. For processes that raise suspicion, it's crucial to log their command lines and the parent process's command line for further investigation. Administrative scripts might occasionally trigger similar patterns, so they are considered potential false positives. This approach is targeted at identifying unusual or potentially malicious activity initiated by userinit, which is often a legitimate part of the Windows login process but can be abused by attackers for executing malicious code right after a user logs in."
    }
  },
  {
    "instruction": "Please help me detect the following: COM object hijacking via TreatAs subkey",
    "context": "",
    "output": "Sure!\nIn order to detect COM object hijacking via the TreatAs subkey, you should monitor Windows Registry activities, specifically the creation of new keys. Concentrate on the event type 'CreateKey' in Windows Registry logs because modifications directly related to the creation of new keys can indicate suspicious activities. The critical path patterns to be vigilant about include keys starting with 'HKU\\' (HKEY_USERS), followed by 'Classes\\CLSID\\' and containing '\\TreatAs'. This specific path is indicative of attempts to redirect COM object usage to different implementations, a technique often utilized in persistence mechanisms or to alter the behavior of software on a compromised system.\n\nIt's essential to exclude events generated by known processes that may legitimately modify these paths for non-malicious reasons. An example provided is interactions by 'C:\\WINDOWS\\system32\\svchost.exe' with these registry paths. Filtering out these known-good processes reduces the likelihood of false positives, though it's acknowledged that some system utilities might use linking keys for backward compatibility in rare instances.\n\nThis detection strategy aligns with the understanding of COM object hijacking, which is an attack technique exploiting the Component Object Model technology in Windows to run arbitrary code. By monitoring for the specific event of 'CreateKey' related to the TreatAs subkey within the paths of interest, defenders can uncover attempts to manipulate software behavior stealthily. This approach falls under the umbrella of techniques related to Persistence and Privilege Escalation, as it can allow threat actors to maintain access to a system and elevate their privileges by redirecting COM objects to malicious implementations.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "COM object hijacking via TreatAs subkey",
      "answer": "In order to detect COM object hijacking via the TreatAs subkey, you should monitor Windows Registry activities, specifically the creation of new keys. Concentrate on the event type 'CreateKey' in Windows Registry logs because modifications directly related to the creation of new keys can indicate suspicious activities. The critical path patterns to be vigilant about include keys starting with 'HKU\\' (HKEY_USERS), followed by 'Classes\\CLSID\\' and containing '\\TreatAs'. This specific path is indicative of attempts to redirect COM object usage to different implementations, a technique often utilized in persistence mechanisms or to alter the behavior of software on a compromised system.\n\nIt's essential to exclude events generated by known processes that may legitimately modify these paths for non-malicious reasons. An example provided is interactions by 'C:\\WINDOWS\\system32\\svchost.exe' with these registry paths. Filtering out these known-good processes reduces the likelihood of false positives, though it's acknowledged that some system utilities might use linking keys for backward compatibility in rare instances.\n\nThis detection strategy aligns with the understanding of COM object hijacking, which is an attack technique exploiting the Component Object Model technology in Windows to run arbitrary code. By monitoring for the specific event of 'CreateKey' related to the TreatAs subkey within the paths of interest, defenders can uncover attempts to manipulate software behavior stealthily. This approach falls under the umbrella of techniques related to Persistence and Privilege Escalation, as it can allow threat actors to maintain access to a system and elevate their privileges by redirecting COM objects to malicious implementations."
    }
  },
  {
    "instruction": "How can I detect: MSI package installation from suspicious locations",
    "context": "",
    "output": "In order to detect MSI package installation from suspicious locations, you should look out for events generated by the MsiInstaller on Windows within the application service logs. Specifically, pay attention to event ids 1040 and 1042 which denote the initiation and completion of an MSI installation process, respectively. An alert should trigger when the MSI installation source path includes potentially suspicious directories such as \"\\Users\\Public\\\", \"\\PerfLogs\\\", \"\\Desktop\\\", or \"C:\\Windows\\TEMP\\\". Additionally, installations initiated from any remote network shares, indicated by the presence of \"\\\\\\\\\", should be scrutinized.\n\nHowever, it's important to exclude certain conditions to reduce the number of false alerts. MSI installations proceeding from \"\\AppData\\Local\\Temp\\WinGet\\\" and installations of the \"UpdHealthTools.msi\" package from \"C:\\Windows\\TEMP\\\" are considered legitimate and should not trigger alerts as these are recognized exceptions.\n\nThis detection mechanism primarily aims to mitigate risks associated with tactics and techniques like Privilege Escalation, Persistence, and Execution, by alerting on potential misuse of the MSI installer service for deploying malicious applications from locations not typically used for legitimate software installation.\n\nBe aware that false positives may occur, especially if there is a practice within your environment of allowing MSI installations from locations such as the user's Desktop, the Public folder, or remote shares. The severity level for this detection has been classified as medium, suggesting a balanced approach to monitoring and responding to these alerts.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "MSI package installation from suspicious locations",
      "answer": "In order to detect MSI package installation from suspicious locations, you should look out for events generated by the MsiInstaller on Windows within the application service logs. Specifically, pay attention to event ids 1040 and 1042 which denote the initiation and completion of an MSI installation process, respectively. An alert should trigger when the MSI installation source path includes potentially suspicious directories such as \"\\Users\\Public\\\", \"\\PerfLogs\\\", \"\\Desktop\\\", or \"C:\\Windows\\TEMP\\\". Additionally, installations initiated from any remote network shares, indicated by the presence of \"\\\\\\\\\", should be scrutinized.\n\nHowever, it's important to exclude certain conditions to reduce the number of false alerts. MSI installations proceeding from \"\\AppData\\Local\\Temp\\WinGet\\\" and installations of the \"UpdHealthTools.msi\" package from \"C:\\Windows\\TEMP\\\" are considered legitimate and should not trigger alerts as these are recognized exceptions.\n\nThis detection mechanism primarily aims to mitigate risks associated with tactics and techniques like Privilege Escalation, Persistence, and Execution, by alerting on potential misuse of the MSI installer service for deploying malicious applications from locations not typically used for legitimate software installation.\n\nBe aware that false positives may occur, especially if there is a practice within your environment of allowing MSI installations from locations such as the user's Desktop, the Public folder, or remote shares. The severity level for this detection has been classified as medium, suggesting a balanced approach to monitoring and responding to these alerts."
    }
  },
  {
    "instruction": "Can you explain how to detect: potential DLL sideloading of \"7za.dll\"",
    "context": "",
    "output": "Certainly!\n\nIn order to detect potential DLL sideloading of \"7za.dll\", you should: Monitor Windows image load events for instances where the '7za.dll' is loaded, excluding occasions where this DLL is loaded from legitimate paths, namely 'C:\\Program Files (x86)\\' and 'C:\\Program Files\\'. This approach targets identifying suspicious activities where '7za.dll', which is known for providing 7z compression functionalities, might be loaded from unconventional locations, suggesting an attempt to exploit the legitimate process via DLL sideloading techniques. Be aware that legitimate third-party applications located in \"AppData\" might also use this DLL for legitimate purposes, thus could lead to false positives. It is recommended to apply additional filters to distinguish between malicious activities and legitimate usage of '7za.dll'.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential DLL sideloading of \"7za.dll\"",
      "answer": "In order to detect potential DLL sideloading of \"7za.dll\", you should: Monitor Windows image load events for instances where the '7za.dll' is loaded, excluding occasions where this DLL is loaded from legitimate paths, namely 'C:\\Program Files (x86)\\' and 'C:\\Program Files\\'. This approach targets identifying suspicious activities where '7za.dll', which is known for providing 7z compression functionalities, might be loaded from unconventional locations, suggesting an attempt to exploit the legitimate process via DLL sideloading techniques. Be aware that legitimate third-party applications located in \"AppData\" might also use this DLL for legitimate purposes, thus could lead to false positives. It is recommended to apply additional filters to distinguish between malicious activities and legitimate usage of '7za.dll'."
    }
  },
  {
    "instruction": "How can I detect: (failed) outbound connection attempts to internet facing SMB servers. This could be a sign of potential exploitation attempts of CVE-2023-23397.",
    "context": "",
    "output": "In order to detect (failed) outbound connection attempts to internet facing SMB servers, which could be a sign of potential exploitation attempts of CVE-2023-23397, you should: Monitor Windows SMB client connectivity logs for specific events that indicate a network connection failure, disconnection, or re-establishment with a server. Pay attention to events with IDs 30803 (indicating a failed network connection), 30804 (indicating a network disconnection), and 30806 (indicating re-establishment of a session to the server). It is crucial to filter out connections to main local IP addresses to reduce noise and increase the focus on outbound connections to internet-facing servers. This involves excluding IP addresses that start with '10.', indicating they are part of a private network within the 10.0.0.0/8 range, '192.168.', for the 192.168.0.0/16 private network range, and '172.16.' through '172.31.', covering the private network ranges from 172.16.0.0/12 to 172.31.0.0/12. Connections to loopback addresses ('127.') and link-local addresses ('169.254.') should also be ignored. Be aware that there may be false positives, especially from trusted external servers, and consider applying additional filters to refine detections. This detection process focuses on network connection issues to SMB servers which could be indicative of an attempted exploitation, specifically addressing concerns related to CVE-2023-23397.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "(failed) outbound connection attempts to internet facing SMB servers. This could be a sign of potential exploitation attempts of CVE-2023-23397.",
      "answer": "In order to detect (failed) outbound connection attempts to internet facing SMB servers, which could be a sign of potential exploitation attempts of CVE-2023-23397, you should: Monitor Windows SMB client connectivity logs for specific events that indicate a network connection failure, disconnection, or re-establishment with a server. Pay attention to events with IDs 30803 (indicating a failed network connection), 30804 (indicating a network disconnection), and 30806 (indicating re-establishment of a session to the server). It is crucial to filter out connections to main local IP addresses to reduce noise and increase the focus on outbound connections to internet-facing servers. This involves excluding IP addresses that start with '10.', indicating they are part of a private network within the 10.0.0.0/8 range, '192.168.', for the 192.168.0.0/16 private network range, and '172.16.' through '172.31.', covering the private network ranges from 172.16.0.0/12 to 172.31.0.0/12. Connections to loopback addresses ('127.') and link-local addresses ('169.254.') should also be ignored. Be aware that there may be false positives, especially from trusted external servers, and consider applying additional filters to refine detections. This detection process focuses on network connection issues to SMB servers which could be indicative of an attempted exploitation, specifically addressing concerns related to CVE-2023-23397."
    }
  },
  {
    "instruction": "Can you explain how to detect: use of smbexec.py tool by detecting a specific service installation",
    "context": "",
    "output": "Certainly!\n\nIn order to detect the use of smbexec.py tool by detecting a specific service installation, you should: Monitor Windows system logs for any event that indicates the Service Control Manager has reported an event with ID 7045. This specific event ID is crucial as it corresponds to the installation of a new service. The characteristics of the malicious activity involve the creation of a service named 'BTOBTO'. Additionally, the service's executable path ends with '\\execute.bat', which is a tell-tale sign of suspicious behavior typically associated with the deployment mechanisms of the smbexec.py tool. Pay close attention to fields such as ServiceName and ServiceFileName as these provide detailed information about the suspicious service installation. Be mindful of potential false positives, although they are currently unspecified, meaning any hit fitting the above criteria should be considered with high suspicion and investigated promptly. This detection tactic is associated with several ATT&CK tactics and techniques, notably those involving execution and persistence, where adversaries may install new services to maintain control over a system.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "use of smbexec.py tool by detecting a specific service installation",
      "answer": "In order to detect the use of smbexec.py tool by detecting a specific service installation, you should: Monitor Windows system logs for any event that indicates the Service Control Manager has reported an event with ID 7045. This specific event ID is crucial as it corresponds to the installation of a new service. The characteristics of the malicious activity involve the creation of a service named 'BTOBTO'. Additionally, the service's executable path ends with '\\execute.bat', which is a tell-tale sign of suspicious behavior typically associated with the deployment mechanisms of the smbexec.py tool. Pay close attention to fields such as ServiceName and ServiceFileName as these provide detailed information about the suspicious service installation. Be mindful of potential false positives, although they are currently unspecified, meaning any hit fitting the above criteria should be considered with high suspicion and investigated promptly. This detection tactic is associated with several ATT&CK tactics and techniques, notably those involving execution and persistence, where adversaries may install new services to maintain control over a system."
    }
  },
  {
    "instruction": "Explain how should I detect the following: potential access to svchost process memory such as that used by Invoke-Phantom to kill the winRM Windows event logging service.",
    "context": "",
    "output": "In order to detect potential access to svchost process memory such as that used by Invoke-Phantom to kill the winRM Windows event logging service, you should: focus on monitoring process access within the Windows operating system. Specifically, look for any instance where a process attempts to access the memory of the svchost.exe file located in the \\WINDOWS\\System32 directory. This process should be flagged if it requests a high level of access rights, specifically '0x1F3FFF', indicating comprehensive access permissions that could be utilized for malicious purposes such as stopping or interfering with the winRM service. Additionally, if the call trace for this access attempt includes 'UNKNOWN', it further heightens the suspicion that this may be a surreptitious attempt to interfere with system processes.\n\nHowever, there's a condition to filter out legitimate software development activities that could exhibit similar characteristics, particularly those involving Microsoft Visual Studio's MSBuild.exe tool, which is a legitimate process that might also access various system processes as part of its build operations. If the suspected access originates from Microsoft Visual Studio\u2019s MSBuild directories and involves .NET components as indicated by having a call trace to 'Microsoft.Build.ni.dll' or 'System.ni.dll', this access can be considered a potential false positive and may not be indicative of malicious activity.\n\nThe rule does acknowledge that there might be unknown cases that could lead to false positives, highlighting the importance of context and additional investigation upon an alert. The level of threat is considered high, underlining the importance of swiftly identifying and addressing such access patterns to safeguard against potential disruptions or manipulations of critical Windows services like winRM.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential access to svchost process memory such as that used by Invoke-Phantom to kill the winRM Windows event logging service.",
      "answer": "In order to detect potential access to svchost process memory such as that used by Invoke-Phantom to kill the winRM Windows event logging service, you should: focus on monitoring process access within the Windows operating system. Specifically, look for any instance where a process attempts to access the memory of the svchost.exe file located in the \\WINDOWS\\System32 directory. This process should be flagged if it requests a high level of access rights, specifically '0x1F3FFF', indicating comprehensive access permissions that could be utilized for malicious purposes such as stopping or interfering with the winRM service. Additionally, if the call trace for this access attempt includes 'UNKNOWN', it further heightens the suspicion that this may be a surreptitious attempt to interfere with system processes.\n\nHowever, there's a condition to filter out legitimate software development activities that could exhibit similar characteristics, particularly those involving Microsoft Visual Studio's MSBuild.exe tool, which is a legitimate process that might also access various system processes as part of its build operations. If the suspected access originates from Microsoft Visual Studio\u2019s MSBuild directories and involves .NET components as indicated by having a call trace to 'Microsoft.Build.ni.dll' or 'System.ni.dll', this access can be considered a potential false positive and may not be indicative of malicious activity.\n\nThe rule does acknowledge that there might be unknown cases that could lead to false positives, highlighting the importance of context and additional investigation upon an alert. The level of threat is considered high, underlining the importance of swiftly identifying and addressing such access patterns to safeguard against potential disruptions or manipulations of critical Windows services like winRM."
    }
  },
  {
    "instruction": "How can I detect: exeuctable names or flags used by Htran or Htran-like tools (e.g. NATBypass)",
    "context": "",
    "output": "In order to detect executable names or flags used by Htran or Htran-like tools (e.g. NATBypass), you should: focus on monitoring the process creation events within Windows environments. Specifically, look for instances where the process image name ends with '\\htran.exe' or '\\lcx.exe', which are indicative of Htran and similar tool usage. Additionally, pay attention to command-line arguments that contain '.exe -tran ' or '.exe -slave ', as these flags are commonly associated with the operation of these tools. It is important to consider any occurrence of the specified image names or command-line flags as a potential indicator of an attack, although one should be aware that there might be unknown scenarios that could lead to false positives. The severity of this rule is considered high due to the malicious nature of the tools it aims to detect, which are often used in bypassing network address translation (NAT) for unauthorized data exfiltration or command and control communication.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "exeuctable names or flags used by Htran or Htran-like tools (e.g. NATBypass)",
      "answer": "In order to detect executable names or flags used by Htran or Htran-like tools (e.g. NATBypass), you should: focus on monitoring the process creation events within Windows environments. Specifically, look for instances where the process image name ends with '\\htran.exe' or '\\lcx.exe', which are indicative of Htran and similar tool usage. Additionally, pay attention to command-line arguments that contain '.exe -tran ' or '.exe -slave ', as these flags are commonly associated with the operation of these tools. It is important to consider any occurrence of the specified image names or command-line flags as a potential indicator of an attack, although one should be aware that there might be unknown scenarios that could lead to false positives. The severity of this rule is considered high due to the malicious nature of the tools it aims to detect, which are often used in bypassing network address translation (NAT) for unauthorized data exfiltration or command and control communication."
    }
  },
  {
    "instruction": "Please help me detect the following: pattern of UAC Bypass using a msconfig GUI hack (UACMe 55)",
    "context": "",
    "output": "Sure!\nIn order to detect the pattern of UAC Bypass using a msconfig GUI hack (UACMe 55), you should: Focus on monitoring process creation events within Windows environments. Look specifically for processes that are initiated with a High or System integrity level, which is indicative of elevated privileges. Pay close attention if the parent process image path ends with '\\AppData\\Local\\Temp\\pkgmgr.exe', as this is a common temporary path exploited by attackers to launch malicious processes or scripts. The command line execution to be on the lookout for includes the launch of 'C:\\Windows\\system32\\msconfig.exe' with a '-5' argument, a known technique for UAC Bypass. Despite the potential for unknown false positives, the detection level for this activity is considered high due to the suspicious nature of the command and paths involved. This monitoring is tied to identifying tactics and techniques such as Privilege Escalation and Defense Evasion.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "pattern of UAC Bypass using a msconfig GUI hack (UACMe 55)",
      "answer": "In order to detect the pattern of UAC Bypass using a msconfig GUI hack (UACMe 55), you should: Focus on monitoring process creation events within Windows environments. Look specifically for processes that are initiated with a High or System integrity level, which is indicative of elevated privileges. Pay close attention if the parent process image path ends with '\\AppData\\Local\\Temp\\pkgmgr.exe', as this is a common temporary path exploited by attackers to launch malicious processes or scripts. The command line execution to be on the lookout for includes the launch of 'C:\\Windows\\system32\\msconfig.exe' with a '-5' argument, a known technique for UAC Bypass. Despite the potential for unknown false positives, the detection level for this activity is considered high due to the suspicious nature of the command and paths involved. This monitoring is tied to identifying tactics and techniques such as Privilege Escalation and Defense Evasion."
    }
  },
  {
    "instruction": "Can you explain how to detect: dropping of dll files in system32 that may be used to retrieve user credentials from LSASS",
    "context": "",
    "output": "Certainly!\n\nIn order to detect the dropping of dll files in system32 that may be used to retrieve user credentials from LSASS, you should: Focus on monitoring process creation events in Windows environments. Particularly, you need to keep an eye out for command line activities that exhibit specific patterns indicative of such malicious intent. The patterns to watch include the presence of 'HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa', 'scecli\\0*', and 'reg add' all together in the command line. This indicates an attempt to manipulate registry keys associated with the Local Security Authority Subsystem Service (LSASS), potentially for deploying or modifying Dynamic Link Libraries (DLLs) in a manner that primes them for credential theft. It's crucial to note, however, that as of the guidance provided, there are unknown scenarios that might lead to false positives. Thus, any detection at a medium level of confidence should prompt further investigation rather than immediate remediation action.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "dropping of dll files in system32 that may be used to retrieve user credentials from LSASS",
      "answer": "In order to detect the dropping of dll files in system32 that may be used to retrieve user credentials from LSASS, you should: Focus on monitoring process creation events in Windows environments. Particularly, you need to keep an eye out for command line activities that exhibit specific patterns indicative of such malicious intent. The patterns to watch include the presence of 'HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa', 'scecli\\0*', and 'reg add' all together in the command line. This indicates an attempt to manipulate registry keys associated with the Local Security Authority Subsystem Service (LSASS), potentially for deploying or modifying Dynamic Link Libraries (DLLs) in a manner that primes them for credential theft. It's crucial to note, however, that as of the guidance provided, there are unknown scenarios that might lead to false positives. Thus, any detection at a medium level of confidence should prompt further investigation rather than immediate remediation action."
    }
  },
  {
    "instruction": "How can I detect: Netsh command execution that whitelists a program located in a suspicious location in the Windows Firewall",
    "context": "",
    "output": "In order to detect Netsh command execution that whitelists a program located in a suspicious location in the Windows Firewall, you should: observe the creation of processes on Windows systems, focusing on the invocation of Netsh.exe, either by its image name or original file name. Pay special attention to commands that include terms like 'firewall,' 'add,' 'allowedprogram,' as well as commands specifying advanced firewall rules designed to allow a program through the firewall with 'advfirewall', 'firewall', 'add', 'rule', and 'action=allow', particularly when the program is explicitly defined with 'program='. Furthermore, be vigilant for command lines that indicate the program is being whitelisted from locations that are generally not used for legitimate software installations or operations, such as public, temp, recycle bin, system volume information, and various other system and user directories that are unconventional for program installations. Monitoring these specific conditions can help identify and mitigate actions trying to bypass the firewall by whitelisting potentially malicious programs from suspicious locations, adhering to high-security alert levels due to the unusual nature of such actions.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Netsh command execution that whitelists a program located in a suspicious location in the Windows Firewall",
      "answer": "In order to detect Netsh command execution that whitelists a program located in a suspicious location in the Windows Firewall, you should: observe the creation of processes on Windows systems, focusing on the invocation of Netsh.exe, either by its image name or original file name. Pay special attention to commands that include terms like 'firewall,' 'add,' 'allowedprogram,' as well as commands specifying advanced firewall rules designed to allow a program through the firewall with 'advfirewall', 'firewall', 'add', 'rule', and 'action=allow', particularly when the program is explicitly defined with 'program='. Furthermore, be vigilant for command lines that indicate the program is being whitelisted from locations that are generally not used for legitimate software installations or operations, such as public, temp, recycle bin, system volume information, and various other system and user directories that are unconventional for program installations. Monitoring these specific conditions can help identify and mitigate actions trying to bypass the firewall by whitelisting potentially malicious programs from suspicious locations, adhering to high-security alert levels due to the unusual nature of such actions."
    }
  },
  {
    "instruction": "How can I detect: use of a Microsoft signed script 'REGISTER_APP.VBS' to register a VSS/VDS Provider as a COM+ application.",
    "context": "",
    "output": "In order to detect the use of a Microsoft signed script 'REGISTER_APP.VBS' to register a VSS/VDS Provider as a COM+ application, you should: Focus on monitoring Windows process creation logs for instances where the command line contains both '\\register_app.vbs' and '-register'. This detection points out the execution of the 'register_app.vbs' script with the specific command line argument '-register', which is typically used for registering a Volume Shadow Copy Service (VSS) or Virtual Disk Service (VDS) provider as a COM+ application. Such actions may be indicative of malicious activities, although it's important to consider that there could be legitimate reasons for using this script in this manner. To differentiate between benign and malicious usage, closely investigate the context in which the script is being executed. The level of threat is considered medium, suggesting that while this activity is suspicious, it doesn\u2019t always correlate with a security threat. Always verify the nature of what's being registered by the script to ensure it's not part of an attack.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "use of a Microsoft signed script 'REGISTER_APP.VBS' to register a VSS/VDS Provider as a COM+ application.",
      "answer": "In order to detect the use of a Microsoft signed script 'REGISTER_APP.VBS' to register a VSS/VDS Provider as a COM+ application, you should: Focus on monitoring Windows process creation logs for instances where the command line contains both '\\register_app.vbs' and '-register'. This detection points out the execution of the 'register_app.vbs' script with the specific command line argument '-register', which is typically used for registering a Volume Shadow Copy Service (VSS) or Virtual Disk Service (VDS) provider as a COM+ application. Such actions may be indicative of malicious activities, although it's important to consider that there could be legitimate reasons for using this script in this manner. To differentiate between benign and malicious usage, closely investigate the context in which the script is being executed. The level of threat is considered medium, suggesting that while this activity is suspicious, it doesn\u2019t always correlate with a security threat. Always verify the nature of what's being registered by the script to ensure it's not part of an attack."
    }
  },
  {
    "instruction": "Please help me detect the following: when when a mounted share is removed. Adversaries may remove share connections that are no longer useful in order to clean up traces of their operation",
    "context": "",
    "output": "Sure!\nIn order to detect when a mounted share is removed as adversaries may remove share connections that are no longer useful in order to clean up traces of their operation, you should:\nMonitor process creation logs on Windows systems for executions of 'net.exe' or 'net1.exe' programs. Specifically, you should look for these programs being called with command lines containing both the word 'share' and the '/delete' argument. This behavior might indicate an attempt to remove shared connections, possibly as a way for an attacker to cover their tracks after accessing resources or when cleaning up to avoid detection. It's important to note that legitimate actions performed by administrators or power users might also trigger this detection if they are removing shares via the command line. Therefore, while this activity is noteworthy and should be scrutinized, it is classified with a low level of confidence due to potential legitimate use cases.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "when when a mounted share is removed. Adversaries may remove share connections that are no longer useful in order to clean up traces of their operation",
      "answer": "In order to detect when a mounted share is removed as adversaries may remove share connections that are no longer useful in order to clean up traces of their operation, you should:\nMonitor process creation logs on Windows systems for executions of 'net.exe' or 'net1.exe' programs. Specifically, you should look for these programs being called with command lines containing both the word 'share' and the '/delete' argument. This behavior might indicate an attempt to remove shared connections, possibly as a way for an attacker to cover their tracks after accessing resources or when cleaning up to avoid detection. It's important to note that legitimate actions performed by administrators or power users might also trigger this detection if they are removing shares via the command line. Therefore, while this activity is noteworthy and should be scrutinized, it is classified with a low level of confidence due to potential legitimate use cases."
    }
  },
  {
    "instruction": "How can I detect: commandline containing reference to files ending with a \".\" This scheme has been seen used by raspberry-robin",
    "context": "",
    "output": "In order to detect commandline containing reference to files ending with a \".\", which has been seen used by raspberry-robin, you should monitor the creation of processes on Windows systems. Specifically, focus on the command lines that include references to files that end with a period followed by 1 to 6 characters but do not match at the end of the line due to potential false positives with bind DNS notation. This detection strategy is considered high priority due to the risk associated with the observed behavior.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "commandline containing reference to files ending with a \".\" This scheme has been seen used by raspberry-robin",
      "answer": "In order to detect commandline containing reference to files ending with a \".\", which has been seen used by raspberry-robin, you should monitor the creation of processes on Windows systems. Specifically, focus on the command lines that include references to files that end with a period followed by 1 to 6 characters but do not match at the end of the line due to potential false positives with bind DNS notation. This detection strategy is considered high priority due to the risk associated with the observed behavior."
    }
  },
  {
    "instruction": "How to detect: attempts of decoding a base64 Gzip archive via PowerShell. This technique is often used as a method to load malicious content into memory afterward.",
    "context": "",
    "output": "In order to detect attempts of decoding a base64 Gzip archive via PowerShell, a technique often used as a method to load malicious content into memory afterward, you should: Monitor Windows process creation logs for instances where the PowerShell command line includes the presence of 'FromBase64String', 'MemoryStream', and 'H4sI' together. This combination is indicative of scripts attempting to decode data encoded in base64, specifically pointing to Gzip compressed data (as hinted by the 'H4sI' marker which is the starting sequence of base64 encoded Gzip data). It is crucial to be mindful of potential false positives that may arise, such as legitimate administrative scripts utilizing these commands for non-malicious purposes. The detection level is set to medium, indicating a balanced approach to sensitivity, aiming to capture malicious activities while reducing the likelihood of flagging benign scripts.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "attempts of decoding a base64 Gzip archive via PowerShell. This technique is often used as a method to load malicious content into memory afterward.",
      "answer": "In order to detect attempts of decoding a base64 Gzip archive via PowerShell, a technique often used as a method to load malicious content into memory afterward, you should: Monitor Windows process creation logs for instances where the PowerShell command line includes the presence of 'FromBase64String', 'MemoryStream', and 'H4sI' together. This combination is indicative of scripts attempting to decode data encoded in base64, specifically pointing to Gzip compressed data (as hinted by the 'H4sI' marker which is the starting sequence of base64 encoded Gzip data). It is crucial to be mindful of potential false positives that may arise, such as legitimate administrative scripts utilizing these commands for non-malicious purposes. The detection level is set to medium, indicating a balanced approach to sensitivity, aiming to capture malicious activities while reducing the likelihood of flagging benign scripts."
    }
  },
  {
    "instruction": "How to detect: use of NirCmd tool for command execution as SYSTEM user",
    "context": "",
    "output": "In order to detect the use of NirCmd tool for command execution as SYSTEM user, you should: Monitor process creation logs on Windows systems for instances where the command line contains ' runassystem '. This detection focuses on identifying usage patterns that indicate the NirCmd utility is being invoked in a manner specifically to execute commands with SYSTEM privileges. You should pay attention to both the command line used to initiate the process and the parent process's command line. Although there might be instances where legitimate administrative activities use this technique, such occurrences are considered high level and warrant closer inspection due to the potential for abuse by malicious actors aiming to execute commands with elevated privileges.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "use of NirCmd tool for command execution as SYSTEM user",
      "answer": "In order to detect the use of NirCmd tool for command execution as SYSTEM user, you should: Monitor process creation logs on Windows systems for instances where the command line contains ' runassystem '. This detection focuses on identifying usage patterns that indicate the NirCmd utility is being invoked in a manner specifically to execute commands with SYSTEM privileges. You should pay attention to both the command line used to initiate the process and the parent process's command line. Although there might be instances where legitimate administrative activities use this technique, such occurrences are considered high level and warrant closer inspection due to the potential for abuse by malicious actors aiming to execute commands with elevated privileges."
    }
  },
  {
    "instruction": "How can I detect: usage of \"Reflection.Assembly\" load functions to dynamically load assemblies in memory",
    "context": "",
    "output": "In order to detect usage of \"Reflection.Assembly\" load functions to dynamically load assemblies in memory, you should: Monitor Windows PowerShell script block logging for any activities that involve the use of '[Reflection.Assembly]::load' within the script text. This specific operation is noteworthy because attackers might leverage the 'Reflection.Assembly' load function to dynamically inject malicious assemblies into memory for execution, bypassing conventional detection mechanisms. The monitoring should be conducted on systems where PowerShell script block logging is enabled to capture and log PowerShell execution details effectively. Be aware that while this method can flag potential security threats indicating the dynamic loading of assemblies, it may also detect benign activities where 'Reflection.Assembly' is legitimately used for loading libraries. Hence, it is categorized with a medium level of confidence, and any detection should be further investigated to differentiate between malicious actions and legitimate usage.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of \"Reflection.Assembly\" load functions to dynamically load assemblies in memory",
      "answer": "In order to detect usage of \"Reflection.Assembly\" load functions to dynamically load assemblies in memory, you should: Monitor Windows PowerShell script block logging for any activities that involve the use of '[Reflection.Assembly]::load' within the script text. This specific operation is noteworthy because attackers might leverage the 'Reflection.Assembly' load function to dynamically inject malicious assemblies into memory for execution, bypassing conventional detection mechanisms. The monitoring should be conducted on systems where PowerShell script block logging is enabled to capture and log PowerShell execution details effectively. Be aware that while this method can flag potential security threats indicating the dynamic loading of assemblies, it may also detect benign activities where 'Reflection.Assembly' is legitimately used for loading libraries. Hence, it is categorized with a medium level of confidence, and any detection should be further investigated to differentiate between malicious actions and legitimate usage."
    }
  },
  {
    "instruction": "How to detect: key vault is modified or deleted.",
    "context": "",
    "output": "In order to identify when a key vault is modified or deleted, you should: Monitor Azure Activity Logs for operations indicating changes to Key Vaults. Specifically, look for events where the operation name is one of the following: `MICROSOFT.KEYVAULT/VAULTS/WRITE`, `MICROSOFT.KEYVAULT/VAULTS/DELETE`, `MICROSOFT.KEYVAULT/VAULTS/DEPLOY/ACTION`, or `MICROSOFT.KEYVAULT/VAULTS/ACCESSPOLICIES/WRITE`. These activities suggest that a Key Vault is either being written to, deleted, deployed, or its access policies are being modified. While detecting these operations can signal potentially malicious actions, it's also important to consider legitimate administrative activities. False positives may occur, such as when a system administrator is performing expected maintenance or updates. In such cases, verify the actions by cross-referencing the user identity, user agent, and hostname involved in making these changes. Should these modifications originate from unfamiliar users or systems, further investigation is warranted. Known behaviors that lead to false positives should be documented and adjusted in monitoring strategies to avoid unnecessary alerts. By implementing these monitoring strategies, organizations can enhance their security posture by ensuring that modifications to key vaults are authorized and traceable, maintaining the integrity and confidentiality of their stored secrets.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "key vault is modified or deleted.",
      "answer": "In order to identify when a key vault is modified or deleted, you should: Monitor Azure Activity Logs for operations indicating changes to Key Vaults. Specifically, look for events where the operation name is one of the following: `MICROSOFT.KEYVAULT/VAULTS/WRITE`, `MICROSOFT.KEYVAULT/VAULTS/DELETE`, `MICROSOFT.KEYVAULT/VAULTS/DEPLOY/ACTION`, or `MICROSOFT.KEYVAULT/VAULTS/ACCESSPOLICIES/WRITE`. These activities suggest that a Key Vault is either being written to, deleted, deployed, or its access policies are being modified. While detecting these operations can signal potentially malicious actions, it's also important to consider legitimate administrative activities. False positives may occur, such as when a system administrator is performing expected maintenance or updates. In such cases, verify the actions by cross-referencing the user identity, user agent, and hostname involved in making these changes. Should these modifications originate from unfamiliar users or systems, further investigation is warranted. Known behaviors that lead to false positives should be documented and adjusted in monitoring strategies to avoid unnecessary alerts. By implementing these monitoring strategies, organizations can enhance their security posture by ensuring that modifications to key vaults are authorized and traceable, maintaining the integrity and confidentiality of their stored secrets."
    }
  },
  {
    "instruction": "Please help me detect the following: execution of the Notepad++ updater (gup) from a process other than Notepad++ to download files.",
    "context": "",
    "output": "Sure!\nIn order to detect execution of the Notepad++ updater (gup) from a process other than Notepad++ to download files, you should: monitor the creation of processes on Windows systems for occurrences of the GUP.exe (the Notepad++ updater) being executed. Specifically, look for cases where the executable image name ends with '\\GUP.exe' or the original file name is identified as 'gup.exe'. Additionally, pay attention to the command line arguments used during the process creation, especially if it includes both ' -unzipTo ' and an 'http' indicating an attempt to download files from the internet. However, you should exclude any instances where the GUP.exe is launched by Notepad++ itself, as indicated by having Notepad++ (notepad++.exe) as the parent process. Be aware that there could be false positives if there are legitimate uses of the GUP outside of notepad++ that aren't currently identified. This approach is crucial for identifying instances where the Notepad++ updater might be abused to download malicious files onto a system, which is a high-severity security concern.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of the Notepad++ updater (gup) from a process other than Notepad++ to download files.",
      "answer": "In order to detect execution of the Notepad++ updater (gup) from a process other than Notepad++ to download files, you should: monitor the creation of processes on Windows systems for occurrences of the GUP.exe (the Notepad++ updater) being executed. Specifically, look for cases where the executable image name ends with '\\GUP.exe' or the original file name is identified as 'gup.exe'. Additionally, pay attention to the command line arguments used during the process creation, especially if it includes both ' -unzipTo ' and an 'http' indicating an attempt to download files from the internet. However, you should exclude any instances where the GUP.exe is launched by Notepad++ itself, as indicated by having Notepad++ (notepad++.exe) as the parent process. Be aware that there could be false positives if there are legitimate uses of the GUP outside of notepad++ that aren't currently identified. This approach is crucial for identifying instances where the Notepad++ updater might be abused to download malicious files onto a system, which is a high-severity security concern."
    }
  },
  {
    "instruction": "Explain how should I detect the following: direct access to raw pastes in different paste services often used by malware in their second stages to download malicious code in encrypted or encoded form",
    "context": "",
    "output": "In order to detects direct access to raw pastes in different paste services often used by malware in their second stages to download malicious code in encrypted or encoded form, you should: Monitor proxy logs for any URLs that contain certain keywords associated with popular pastebin services. Specifically, look for accesses to URLs that include '.paste.ee/r/', '.pastebin.com/raw/', '.hastebin.com/raw/', '.ghostbin.co/paste/*/raw/', 'pastetext.net/', 'pastebin.pl/', and 'paste.ee/'. These are common platforms where malicious code might be hosted, especially in its raw form which is often used in the delivery of malware during attack campaigns. Logs should record the Client IP address, the full requested URI (c-uri), and the client user agent string (c-useragent). It's important to recognize that there can be legitimate uses of these services, such as developers sharing code snippets, which might generate false positives. The severity level of this rule is set to high due to the potential risk associated with downloading and executing malicious code.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "direct access to raw pastes in different paste services often used by malware in their second stages to download malicious code in encrypted or encoded form",
      "answer": "In order to detects direct access to raw pastes in different paste services often used by malware in their second stages to download malicious code in encrypted or encoded form, you should: Monitor proxy logs for any URLs that contain certain keywords associated with popular pastebin services. Specifically, look for accesses to URLs that include '.paste.ee/r/', '.pastebin.com/raw/', '.hastebin.com/raw/', '.ghostbin.co/paste/*/raw/', 'pastetext.net/', 'pastebin.pl/', and 'paste.ee/'. These are common platforms where malicious code might be hosted, especially in its raw form which is often used in the delivery of malware during attack campaigns. Logs should record the Client IP address, the full requested URI (c-uri), and the client user agent string (c-useragent). It's important to recognize that there can be legitimate uses of these services, such as developers sharing code snippets, which might generate false positives. The severity level of this rule is set to high due to the potential risk associated with downloading and executing malicious code."
    }
  },
  {
    "instruction": "Please help me detect the following: exploitation attempts using file upload vulnerability CVE-2021-22005 in the VMWare vCenter Server.",
    "context": "",
    "output": "Sure!\nIn order to detect exploitation attempts using file upload vulnerability CVE-2021-22005 in the VMWare vCenter Server, you should: Monitor your web server logs for POST requests containing the specific query '/analytics/telemetry/ph/api/hyper/send?' in the URI. These types of requests could indicate an attempt to exploit the file upload vulnerability present in the VMWare vCenter Server, as identified by CVE-2021-22005. Be aware that receiving alerts on such patterns does not always mean an attack is successful; sometimes, vulnerability scanning activities can trigger these alerts, marking them as false positives. However, due to the high risk associated with this vulnerability, any detection should be treated with caution and investigated promptly.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "exploitation attempts using file upload vulnerability CVE-2021-22005 in the VMWare vCenter Server.",
      "answer": "In order to detect exploitation attempts using file upload vulnerability CVE-2021-22005 in the VMWare vCenter Server, you should: Monitor your web server logs for POST requests containing the specific query '/analytics/telemetry/ph/api/hyper/send?' in the URI. These types of requests could indicate an attempt to exploit the file upload vulnerability present in the VMWare vCenter Server, as identified by CVE-2021-22005. Be aware that receiving alerts on such patterns does not always mean an attack is successful; sometimes, vulnerability scanning activities can trigger these alerts, marking them as false positives. However, due to the high risk associated with this vulnerability, any detection should be treated with caution and investigated promptly."
    }
  },
  {
    "instruction": "How to detect: The .SettingContent-ms file type was introduced in Windows 10 and allows a user to create \"shortcuts\" to various Windows 10 setting pages. These files are simply XML and contain paths to various Windows 10 settings binaries.",
    "context": "",
    "output": "In order to detect the misuse of the .SettingContent-ms file type which was introduced in Windows 10 and allows a user to create \"shortcuts\" to various Windows 10 setting pages, you should: monitor the creation of processes on Windows systems, specifically looking for command line activities that include the use of '.SettingContent-ms' files. However, it is important to exclude any command line activity that involves 'immersivecontrolpanel' as this might indicate legitimate use of Windows settings. The focus should be on identifying unusual or suspicious uses of .SettingContent-ms files, as they are XML files that can be used to execute commands or manipulate Windows 10 settings binaries in potentially malicious ways. Key fields to monitor in this context include the parent process, the command line used to initiate the process, and the parent command line. It\u2019s critical to approach this with caution due to the potential for false positives, where the activity might not be malicious in nature. The detection of such activities is at a medium level of urgency.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "The .SettingContent-ms file type was introduced in Windows 10 and allows a user to create \"shortcuts\" to various Windows 10 setting pages. These files are simply XML and contain paths to various Windows 10 settings binaries.",
      "answer": "In order to detect the misuse of the .SettingContent-ms file type which was introduced in Windows 10 and allows a user to create \"shortcuts\" to various Windows 10 setting pages, you should: monitor the creation of processes on Windows systems, specifically looking for command line activities that include the use of '.SettingContent-ms' files. However, it is important to exclude any command line activity that involves 'immersivecontrolpanel' as this might indicate legitimate use of Windows settings. The focus should be on identifying unusual or suspicious uses of .SettingContent-ms files, as they are XML files that can be used to execute commands or manipulate Windows 10 settings binaries in potentially malicious ways. Key fields to monitor in this context include the parent process, the command line used to initiate the process, and the parent command line. It\u2019s critical to approach this with caution due to the potential for false positives, where the activity might not be malicious in nature. The detection of such activities is at a medium level of urgency."
    }
  },
  {
    "instruction": "How to detect: non wmiprvse loading WMI modules",
    "context": "",
    "output": "In order to detect non wmiprvse loading WMI modules, you should monitor Windows systems for events where specific WMI-related DLL files are loaded by any processes other than the typical ones associated with Windows Management Instrumentation (WMI) operations. Specifically, focus on detecting the loading of DLL files that end with names such as wmiclnt.dll, WmiApRpl.dll, wmiprov.dll, wmiutils.dll, wbemcomn.dll, wbemprox.dll, WMINet_Utils.dll, wbemsvc.dll, and fastprox.dll. It's crucial to exclude from alerts any events where the DLLs are loaded by a set of known WMI or system processes, including WmiPrvSE.exe, WmiApSrv.exe, svchost.exe among others listed, as well as any processes running from directories typically restricted to administrative access like `C:\\Program Files\\` and `C:\\Program Files (x86)\\`. This detection focuses on the images being loaded that are not usually expected to, hinting possibly at unauthorized or anomalous WMI use, which could relate to reconnaissance, lateral movement, or other malicious activities while minimizing the noise from legitimate administrative or system processes. Pay attention to fields like ComputerName, User, Image, and ImageLoaded to ensure comprehensive monitoring. It's important to note that due to the nature of this detection, some unknown false positives may occur.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "non wmiprvse loading WMI modules",
      "answer": "In order to detect non wmiprvse loading WMI modules, you should monitor Windows systems for events where specific WMI-related DLL files are loaded by any processes other than the typical ones associated with Windows Management Instrumentation (WMI) operations. Specifically, focus on detecting the loading of DLL files that end with names such as wmiclnt.dll, WmiApRpl.dll, wmiprov.dll, wmiutils.dll, wbemcomn.dll, wbemprox.dll, WMINet_Utils.dll, wbemsvc.dll, and fastprox.dll. It's crucial to exclude from alerts any events where the DLLs are loaded by a set of known WMI or system processes, including WmiPrvSE.exe, WmiApSrv.exe, svchost.exe among others listed, as well as any processes running from directories typically restricted to administrative access like `C:\\Program Files\\` and `C:\\Program Files (x86)\\`. This detection focuses on the images being loaded that are not usually expected to, hinting possibly at unauthorized or anomalous WMI use, which could relate to reconnaissance, lateral movement, or other malicious activities while minimizing the noise from legitimate administrative or system processes. Pay attention to fields like ComputerName, User, Image, and ImageLoaded to ensure comprehensive monitoring. It's important to note that due to the nature of this detection, some unknown false positives may occur."
    }
  },
  {
    "instruction": "How to detect: pattern of UAC Bypass using pkgmgr.exe and dism.exe (UACMe 23)",
    "context": "",
    "output": "In order to detect the pattern of UAC Bypass using pkgmgr.exe and dism.exe (UACMe 23), you should: Monitor Windows process creation logs for instances where the parent process is 'pkgmgr.exe' and the child process (or launched process) is 'dism.exe'. These processes should be running at a high integrity level or with system level permissions, which is indicative of privileged execution. These specific parent-child process pairings are suspect and could indicate an attempt to bypass User Account Control (UAC), leveraging the techniques associated with UACMe method 23. Due to the critical nature of these events, any detection should be treated with high priority, although it is acknowledged that there may be unknown situations that could lead to false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "pattern of UAC Bypass using pkgmgr.exe and dism.exe (UACMe 23)",
      "answer": "In order to detect the pattern of UAC Bypass using pkgmgr.exe and dism.exe (UACMe 23), you should: Monitor Windows process creation logs for instances where the parent process is 'pkgmgr.exe' and the child process (or launched process) is 'dism.exe'. These processes should be running at a high integrity level or with system level permissions, which is indicative of privileged execution. These specific parent-child process pairings are suspect and could indicate an attempt to bypass User Account Control (UAC), leveraging the techniques associated with UACMe method 23. Due to the critical nature of these events, any detection should be treated with high priority, although it is acknowledged that there may be unknown situations that could lead to false positives."
    }
  },
  {
    "instruction": "Explain how should I detect the following: Triggers on any Sysmon \"FileExecutableDetected\" event, which triggers every time a PE that is monitored by the config is created.",
    "context": "",
    "output": "In order to trigger on any Sysmon \"FileExecutableDetected\" event, which triggers every time a PE that is monitored by the config is created, you should: focus on monitoring Windows systems using Sysmon service. Specifically, set up alerts for Event ID 29, which corresponds to the Sysmon event for \"FileExecutableDetected.\" This event is significant because it is triggered whenever a Portable Executable file (PE), which is under surveillance by the system's configuration, gets created. Due to the nature of this detection targeting a critical step in numerous attack sequences \u2013 the creation of executable files on the system \u2013 false positives are considered unlikely. The importance of closely monitoring such events is rated at a medium level, indicating a balanced approach between alert sensitivity and the potential for false alarms. This procedure is tied to tactics and techniques like Execution and Persistence, which attackers often exploit by creating or modifying executable files to execute malicious code or maintain their presence on a system.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Triggers on any Sysmon \"FileExecutableDetected\" event, which triggers every time a PE that is monitored by the config is created.",
      "answer": "In order to trigger on any Sysmon \"FileExecutableDetected\" event, which triggers every time a PE that is monitored by the config is created, you should: focus on monitoring Windows systems using Sysmon service. Specifically, set up alerts for Event ID 29, which corresponds to the Sysmon event for \"FileExecutableDetected.\" This event is significant because it is triggered whenever a Portable Executable file (PE), which is under surveillance by the system's configuration, gets created. Due to the nature of this detection targeting a critical step in numerous attack sequences \u2013 the creation of executable files on the system \u2013 false positives are considered unlikely. The importance of closely monitoring such events is rated at a medium level, indicating a balanced approach between alert sensitivity and the potential for false alarms. This procedure is tied to tactics and techniques like Execution and Persistence, which attackers often exploit by creating or modifying executable files to execute malicious code or maintain their presence on a system."
    }
  },
  {
    "instruction": "Please help me detect the following: adversary creating screen capture of a desktop with Import Tool.\nHighly recommended using rule on servers, due to high usage of screenshot utilities on user workstations.\nImageMagick must be installed.\n",
    "context": "",
    "output": "Sure!\nIn order to detect adversary creating screen capture of a desktop with Import Tool, you should: focus on analyzing logs from Linux systems, specifically those generated by the Audit daemon (`auditd`). Look for the execution of the Import Tool which is a part of the ImageMagick suite of tools, used here for taking screenshots. Detection involves identifying the execution of this tool with specific arguments: either it's invoked with the '-window' argument followed by 'root', indicating a screenshot of the entire desktop is being captured, or it lacks these parameters but targets image files that end with '.png', '.jpg', or '.jpeg', which are common screenshot file formats. \n\nIt's important to note two scenarios in the detection mechanics: \n1. The Import Tool is executed with arguments specifying that a screenshot of the entire desktop is taken. This is identified by the execution with '-window root' arguments, followed by the output file with extensions '.png', '.jpg', or '.jpeg'.\n2. The Import Tool is executed without the 'window root' arguments but directly outputs to image file formats typical for screenshots.\n\nDespite this being a solid indicator of potentially malicious activity, there's a caveat of false positives, mainly because taking screenshots is a legitimate action commonly done for various non-malicious reasons. However, the utility's usage on servers as opposed to user workstations is considered unusual and might indicate malicious intent, supporting the recommendation for applying this detection strategy primarily to server environments where the ImageMagick utility is installed. This approach aligns with understanding and mitigating potential espionage or data exfiltration efforts by adversaries, as part of broader cyber defense strategies mapped to tactics and techniques like Collection and Exfiltration.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "adversary creating screen capture of a desktop with Import Tool.\nHighly recommended using rule on servers, due to high usage of screenshot utilities on user workstations.\nImageMagick must be installed.\n",
      "answer": "In order to detect adversary creating screen capture of a desktop with Import Tool, you should: focus on analyzing logs from Linux systems, specifically those generated by the Audit daemon (`auditd`). Look for the execution of the Import Tool which is a part of the ImageMagick suite of tools, used here for taking screenshots. Detection involves identifying the execution of this tool with specific arguments: either it's invoked with the '-window' argument followed by 'root', indicating a screenshot of the entire desktop is being captured, or it lacks these parameters but targets image files that end with '.png', '.jpg', or '.jpeg', which are common screenshot file formats. \n\nIt's important to note two scenarios in the detection mechanics: \n1. The Import Tool is executed with arguments specifying that a screenshot of the entire desktop is taken. This is identified by the execution with '-window root' arguments, followed by the output file with extensions '.png', '.jpg', or '.jpeg'.\n2. The Import Tool is executed without the 'window root' arguments but directly outputs to image file formats typical for screenshots.\n\nDespite this being a solid indicator of potentially malicious activity, there's a caveat of false positives, mainly because taking screenshots is a legitimate action commonly done for various non-malicious reasons. However, the utility's usage on servers as opposed to user workstations is considered unusual and might indicate malicious intent, supporting the recommendation for applying this detection strategy primarily to server environments where the ImageMagick utility is installed. This approach aligns with understanding and mitigating potential espionage or data exfiltration efforts by adversaries, as part of broader cyber defense strategies mapped to tactics and techniques like Collection and Exfiltration."
    }
  },
  {
    "instruction": "Can you explain how to detect: process discovery commands. Adversaries may attempt to get information about running processes on a system.\nInformation obtained could be used to gain an understanding of common software/applications running on systems within the network\n",
    "context": "",
    "output": "Certainly!\n\nIn order to detect process discovery commands, where adversaries may attempt to get information about running processes on a system which could then be used to gain an understanding of common software/applications running on systems within the network, you should: Focus on monitoring Linux system logs, particularly those related to process creation. Specifically, look for instances where process creation events end with '/ps' or '/top', as these are common commands used for viewing active processes on a Linux system. It is important to note that while detecting these commands can indicate an attempt at process discovery by an adversary, such detections can also be triggered by legitimate system administration activities. Therefore, these detections should be considered informational and require further investigation to determine their nature.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "process discovery commands. Adversaries may attempt to get information about running processes on a system.\nInformation obtained could be used to gain an understanding of common software/applications running on systems within the network\n",
      "answer": "In order to detect process discovery commands, where adversaries may attempt to get information about running processes on a system which could then be used to gain an understanding of common software/applications running on systems within the network, you should: Focus on monitoring Linux system logs, particularly those related to process creation. Specifically, look for instances where process creation events end with '/ps' or '/top', as these are common commands used for viewing active processes on a Linux system. It is important to note that while detecting these commands can indicate an attempt at process discovery by an adversary, such detections can also be triggered by legitimate system administration activities. Therefore, these detections should be considered informational and require further investigation to determine their nature."
    }
  },
  {
    "instruction": "Explain how should I detect the following: triggering of AMSI by Windows Defender.",
    "context": "",
    "output": "In order to detect triggering of AMSI by Windows Defender, you should: Monitor Windows Defender logs specifically for event ID 1116, which indicates that the antimalware platform detected malware or other potentially unwanted software. Focus particularly on alerts generated by the Antimalware Scan Interface (AMSI). This method is highly reliable with unlikely chances of false positives. The associated tactics and techniques involved in this monitoring are related to Initial Access and Execution, as the detection of AMSI triggering by Windows Defender could indicate attempts to execute malicious scripts or malware on the system.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "triggering of AMSI by Windows Defender.",
      "answer": "In order to detect triggering of AMSI by Windows Defender, you should: Monitor Windows Defender logs specifically for event ID 1116, which indicates that the antimalware platform detected malware or other potentially unwanted software. Focus particularly on alerts generated by the Antimalware Scan Interface (AMSI). This method is highly reliable with unlikely chances of false positives. The associated tactics and techniques involved in this monitoring are related to Initial Access and Execution, as the detection of AMSI triggering by Windows Defender could indicate attempts to execute malicious scripts or malware on the system."
    }
  },
  {
    "instruction": "Please help me detect the following: possible bypass EDR and SIEM via abnormal user account name.",
    "context": "",
    "output": "Sure!\nIn order to detect possible bypass EDR and SIEM via abnormal user account name, you should: Monitor for specific events within Windows Security logs that may indicate suspicious activity related to user accounts. Keep an eye out for events where a new user account is created (Event ID 4720) or an existing user account is renamed (Event ID 4781), especially if the account name contains a '$' symbol, as this could signify an attempt to create hidden or system accounts that are typically not scrutinized. These actions may be used by attackers to evade detection mechanisms. Pay attention to the event details such as the account name involved in the creation or renaming process (SamAccountName for creation, NewTargetUserName for renaming), as well as the user who executed the action (SubjectUserName). Although there might be legitimate cases where accounts with a '$' in the name are created, these occurrences are unusual and should be investigated to rule out malicious intent.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "possible bypass EDR and SIEM via abnormal user account name.",
      "answer": "In order to detect possible bypass EDR and SIEM via abnormal user account name, you should: Monitor for specific events within Windows Security logs that may indicate suspicious activity related to user accounts. Keep an eye out for events where a new user account is created (Event ID 4720) or an existing user account is renamed (Event ID 4781), especially if the account name contains a '$' symbol, as this could signify an attempt to create hidden or system accounts that are typically not scrutinized. These actions may be used by attackers to evade detection mechanisms. Pay attention to the event details such as the account name involved in the creation or renaming process (SamAccountName for creation, NewTargetUserName for renaming), as well as the user who executed the action (SubjectUserName). Although there might be legitimate cases where accounts with a '$' in the name are created, these occurrences are unusual and should be investigated to rule out malicious intent."
    }
  },
  {
    "instruction": "Explain how should I detect the following: RAR usage that creates an archive from a suspicious folder, either a system folder or one of the folders often used by attackers for staging purposes",
    "context": "",
    "output": "In order to detect RAR usage that creates an archive from a suspicious folder, either a system folder or one of the folders often used by attackers for staging purposes, you should monitor the process creation logs in Windows for specific patterns of RAR command-line execution. Look for processes where the image path ends with '\\rar.exe', indicating the use of the RAR utility, or descriptions matching 'Command line RAR'. Additionally, be vigilant for command lines that contain patterns such as '.exe a ' or ' a -m', which are indicative of archive creation commands.\n\nFurther scrutiny is required for command lines that exhibit both the presence of a password flag ' -hp' and the recursive flag ' -r ', as these flags together strongly suggest an attempt to securely compress files from various directories recursively. It is particularly critical to focus on command lines that include paths to sensitive or commonly abused directories, such as 'C:\\\\\\*.', '%public%', 'C:\\Windows\\', 'C:\\PerfLogs\\', 'C:\\Temp', 'C:\\$Recycle.bin\\', or similar patterns that target directories outside standard user data locations. These directories are often leveraged by attackers for placing and subsequently exfiltrating data in a compressed format to avoid detection.\n\nMonitoring for these specific command-line patterns and directory targets is crucial in identifying suspicious use of RAR for potentially malicious purposes, such as data exfiltration or staging for lateral movement within a compromised environment. This activity is associated with tactics and techniques that include Collection, Exfiltration, and Command and Control, underlining the need for heightened awareness and rapid response to such indicators of compromise.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "RAR usage that creates an archive from a suspicious folder, either a system folder or one of the folders often used by attackers for staging purposes",
      "answer": "In order to detect RAR usage that creates an archive from a suspicious folder, either a system folder or one of the folders often used by attackers for staging purposes, you should monitor the process creation logs in Windows for specific patterns of RAR command-line execution. Look for processes where the image path ends with '\\rar.exe', indicating the use of the RAR utility, or descriptions matching 'Command line RAR'. Additionally, be vigilant for command lines that contain patterns such as '.exe a ' or ' a -m', which are indicative of archive creation commands.\n\nFurther scrutiny is required for command lines that exhibit both the presence of a password flag ' -hp' and the recursive flag ' -r ', as these flags together strongly suggest an attempt to securely compress files from various directories recursively. It is particularly critical to focus on command lines that include paths to sensitive or commonly abused directories, such as 'C:\\\\\\*.', '%public%', 'C:\\Windows\\', 'C:\\PerfLogs\\', 'C:\\Temp', 'C:\\$Recycle.bin\\', or similar patterns that target directories outside standard user data locations. These directories are often leveraged by attackers for placing and subsequently exfiltrating data in a compressed format to avoid detection.\n\nMonitoring for these specific command-line patterns and directory targets is crucial in identifying suspicious use of RAR for potentially malicious purposes, such as data exfiltration or staging for lateral movement within a compromised environment. This activity is associated with tactics and techniques that include Collection, Exfiltration, and Command and Control, underlining the need for heightened awareness and rapid response to such indicators of compromise."
    }
  },
  {
    "instruction": "Explain how should I detect the following: Obfuscated Powershell via VAR++ LAUNCHER",
    "context": "",
    "output": "In order to detect obfuscated Powershell via VAR++ LAUNCHER, you should be aware of a specific pattern of behavior observed in Windows PowerShell modules. This detection focuses on identifying payloads that exhibit complex obfuscation techniques typically associated with malicious activities. Specifically, the activity is detected by monitoring the PowerShell module logs for payloads that combine several suspicious elements. These elements include the usage of double ampersands (&&) which indicates command chaining, the presence of 'set' commands that are used for declaring or modifying environment variables, a sequence of one or more curly braces with digits inside (\\{\\d\\}) repeated at least twice which is a common obfuscation tactic to avoid straightforward pattern recognition, the peculiar inclusion of a double-quoted space followed by a -f switch, indicative of format specifiers being used for string manipulation, and finally, the pattern concludes with another instance of command chaining into 'cmd /c', a technique used to execute commands directly.\n\nThis combination of elements within a PowerShell payload is highly indicative of obfuscated code execution attempts, which are often utilized by adversaries to bypass security mechanisms by making the malicious activity harder to detect. It's essential to monitor for such patterns as they are closely associated with advanced persistent threat (APT) activities, where attackers employ evasion techniques to maintain access and control over compromised systems.\n\nThe detection of such activities aligns with multiple MITRE ATT&CK tactics and techniques including Execution, Defense Evasion, and Command and Control, reflecting the sophisticated nature of attempts to execute obfuscated PowerShell commands as part of a larger attack campaign. Monitoring and alerting on these specific behaviors in PowerShell module logs can significantly enhance the identification of potential security threats, allowing for timely investigation and response to prevent or mitigate malicious activities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Obfuscated Powershell via VAR++ LAUNCHER",
      "answer": "In order to detect obfuscated Powershell via VAR++ LAUNCHER, you should be aware of a specific pattern of behavior observed in Windows PowerShell modules. This detection focuses on identifying payloads that exhibit complex obfuscation techniques typically associated with malicious activities. Specifically, the activity is detected by monitoring the PowerShell module logs for payloads that combine several suspicious elements. These elements include the usage of double ampersands (&&) which indicates command chaining, the presence of 'set' commands that are used for declaring or modifying environment variables, a sequence of one or more curly braces with digits inside (\\{\\d\\}) repeated at least twice which is a common obfuscation tactic to avoid straightforward pattern recognition, the peculiar inclusion of a double-quoted space followed by a -f switch, indicative of format specifiers being used for string manipulation, and finally, the pattern concludes with another instance of command chaining into 'cmd /c', a technique used to execute commands directly.\n\nThis combination of elements within a PowerShell payload is highly indicative of obfuscated code execution attempts, which are often utilized by adversaries to bypass security mechanisms by making the malicious activity harder to detect. It's essential to monitor for such patterns as they are closely associated with advanced persistent threat (APT) activities, where attackers employ evasion techniques to maintain access and control over compromised systems.\n\nThe detection of such activities aligns with multiple MITRE ATT&CK tactics and techniques including Execution, Defense Evasion, and Command and Control, reflecting the sophisticated nature of attempts to execute obfuscated PowerShell commands as part of a larger attack campaign. Monitoring and alerting on these specific behaviors in PowerShell module logs can significantly enhance the identification of potential security threats, allowing for timely investigation and response to prevent or mitigate malicious activities."
    }
  },
  {
    "instruction": "Please help me detect the following: use of SysmonEnte, a tool to attack the integrity of Sysmon",
    "context": "",
    "output": "Sure!\nIn order to detect the use of SysmonEnte, a tool to attack the integrity of Sysmon, you should: Focus on monitoring process access within Windows systems. Specifically, watch for any process that attempts to access 'C:\\Windows\\Sysmon64.exe' with granted access rights of '0x1400'. However, it's important to exclude any access attempts that originate from common system directories such as 'C:\\Program Files' and 'C:\\Windows\\System32\\', as these are likely to be legitimate. Besides, any access from 'C:\\ProgramData\\Microsoft\\Windows Defender\\Platform\\' ending with '\\MsMpEng.exe' should also be disregarded to avoid false alarms linked to Microsoft Defender processes. Additionally, pay attention to call traces that contain the string 'Ente', which could indicate the malicious operation of SysmonEnte. The detection strategy involves flagging scenarios that match either the direct access attempt with specified rights to Sysmon64.exe (excluding known good sources) or the presence of indicative call traces, thereby enhancing the accuracy of detecting attacks aimed at undermining Sysmon's integrity. Note that there may be unknown false positives, and the threat level associated with this detection is considered high.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "use of SysmonEnte, a tool to attack the integrity of Sysmon",
      "answer": "In order to detect the use of SysmonEnte, a tool to attack the integrity of Sysmon, you should: Focus on monitoring process access within Windows systems. Specifically, watch for any process that attempts to access 'C:\\Windows\\Sysmon64.exe' with granted access rights of '0x1400'. However, it's important to exclude any access attempts that originate from common system directories such as 'C:\\Program Files' and 'C:\\Windows\\System32\\', as these are likely to be legitimate. Besides, any access from 'C:\\ProgramData\\Microsoft\\Windows Defender\\Platform\\' ending with '\\MsMpEng.exe' should also be disregarded to avoid false alarms linked to Microsoft Defender processes. Additionally, pay attention to call traces that contain the string 'Ente', which could indicate the malicious operation of SysmonEnte. The detection strategy involves flagging scenarios that match either the direct access attempt with specified rights to Sysmon64.exe (excluding known good sources) or the presence of indicative call traces, thereby enhancing the accuracy of detecting attacks aimed at undermining Sysmon's integrity. Note that there may be unknown false positives, and the threat level associated with this detection is considered high."
    }
  },
  {
    "instruction": "Can you explain how to detect: execution of whoami that has been renamed to a different name to avoid detection",
    "context": "",
    "output": "Certainly!\n\nIn order to detect the execution of whoami that has been renamed to a different name to avoid detection, you should: Focus on monitoring the creation of processes within Windows operating systems. Specifically, look for occurrences where the original filename is identified as 'whoami.exe', but ensure to exclude any instances where the actual image path ends with '\\whoami.exe'. This approach targets scenarios where attackers might rename the 'whoami.exe' utility to evade basic detection mechanisms. The criticality of this detection is deemed high due to its potential use in reconnaissance stages of an attack, where adversaries gather information about user privileges and system configurations without triggering alerts for commonly monitored executables.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of whoami that has been renamed to a different name to avoid detection",
      "answer": "In order to detect the execution of whoami that has been renamed to a different name to avoid detection, you should: Focus on monitoring the creation of processes within Windows operating systems. Specifically, look for occurrences where the original filename is identified as 'whoami.exe', but ensure to exclude any instances where the actual image path ends with '\\whoami.exe'. This approach targets scenarios where attackers might rename the 'whoami.exe' utility to evade basic detection mechanisms. The criticality of this detection is deemed high due to its potential use in reconnaissance stages of an attack, where adversaries gather information about user privileges and system configurations without triggering alerts for commonly monitored executables."
    }
  },
  {
    "instruction": "How to detect: an authentication bypass vulnerability affecting the REST API URLs in ADSelfService Plus (CVE-2021-40539).",
    "context": "",
    "output": "In order to detect an authentication bypass vulnerability affecting the REST API URLs in ADSelfService Plus (CVE-2021-40539), you should: Monitor logs collected from the ManageEngine ADSelfService Plus environment, specifically focusing on the webserver activity. Pay special attention to requests that contain the following URI query parts: '/help/admin-guide/Reports/ReportGenerate.jsp', '/RestAPI/LogonCustomization', and '/RestAPI/Connection'. These specific URIs are indicative of potential exploitation attempts of the aforementioned vulnerability. It is crucial to capture and analyze the client IP address (`c-ip`) and the complete URI query (`cs-uri-query`) involved in such requests. Given the severity of this issue, any detection of these patterns should be treated with a high level of concern, although it's important to consider that there may be legitimate uses of these URIs that are not related to the exploitation of this vulnerability.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "an authentication bypass vulnerability affecting the REST API URLs in ADSelfService Plus (CVE-2021-40539).",
      "answer": "In order to detect an authentication bypass vulnerability affecting the REST API URLs in ADSelfService Plus (CVE-2021-40539), you should: Monitor logs collected from the ManageEngine ADSelfService Plus environment, specifically focusing on the webserver activity. Pay special attention to requests that contain the following URI query parts: '/help/admin-guide/Reports/ReportGenerate.jsp', '/RestAPI/LogonCustomization', and '/RestAPI/Connection'. These specific URIs are indicative of potential exploitation attempts of the aforementioned vulnerability. It is crucial to capture and analyze the client IP address (`c-ip`) and the complete URI query (`cs-uri-query`) involved in such requests. Given the severity of this issue, any detection of these patterns should be treated with a high level of concern, although it's important to consider that there may be legitimate uses of these URIs that are not related to the exploitation of this vulnerability."
    }
  },
  {
    "instruction": "Can you explain how to detect: execution of regsvr32 where the DLL is located in a highly suspicious locations",
    "context": "",
    "output": "Certainly!\n\nIn order to detect execution of regsvr32 where the DLL is located in highly suspicious locations, you should:\n\nMonitor the creation of processes on Windows systems, focusing specifically on instances where regsvr32.exe is executed. This includes both cases where the image's name ends with '\\regsvr32.exe' and where the original file name is 'REGSVR32.EXE'. Additionally, you should examine the command line paths for indications that executable files are being accessed from unusual or suspicious directories. These include paths that lead to system directories known for storing logs, temporary files, and other sensitive system data, such as '\\PerfLogs\\', '\\Temp\\', various subdirectories within '\\Windows\\System32\\', and more.\n\nPay attention to command lines that contain paths starting with drive letters such as \"C:\\\" or \"D:\\\" to isolate attempts that might try to disguise malicious intent by blending in with regular system paths. However, it is important to exclude from alerts the known directories that host legitimate third-party applications and system files, like those under 'C:\\Program Files', 'C:\\ProgramData', and 'C:\\Users', including specific exclusions for spaces preceding 'C:\\Windows\\' paths to avoid false positives related to the regsvr32 binary's legitimate activities.\n\nThe logic should ensure that command lines that are empty or null, which could indicate tampering to evade detection, do not trigger false alerts. This approach minimizes the risk of false positives while maintaining high alert fidelity for detecting suspicious uses of regsvr32, indicating potential stealthy maneuvers designed to register DLLs from locations typically not associated with benign activities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of regsvr32 where the DLL is located in a highly suspicious locations",
      "answer": "In order to detect execution of regsvr32 where the DLL is located in highly suspicious locations, you should:\n\nMonitor the creation of processes on Windows systems, focusing specifically on instances where regsvr32.exe is executed. This includes both cases where the image's name ends with '\\regsvr32.exe' and where the original file name is 'REGSVR32.EXE'. Additionally, you should examine the command line paths for indications that executable files are being accessed from unusual or suspicious directories. These include paths that lead to system directories known for storing logs, temporary files, and other sensitive system data, such as '\\PerfLogs\\', '\\Temp\\', various subdirectories within '\\Windows\\System32\\', and more.\n\nPay attention to command lines that contain paths starting with drive letters such as \"C:\\\" or \"D:\\\" to isolate attempts that might try to disguise malicious intent by blending in with regular system paths. However, it is important to exclude from alerts the known directories that host legitimate third-party applications and system files, like those under 'C:\\Program Files', 'C:\\ProgramData', and 'C:\\Users', including specific exclusions for spaces preceding 'C:\\Windows\\' paths to avoid false positives related to the regsvr32 binary's legitimate activities.\n\nThe logic should ensure that command lines that are empty or null, which could indicate tampering to evade detection, do not trigger false alerts. This approach minimizes the risk of false positives while maintaining high alert fidelity for detecting suspicious uses of regsvr32, indicating potential stealthy maneuvers designed to register DLLs from locations typically not associated with benign activities."
    }
  },
  {
    "instruction": "Can you explain how to detect: pattern of UAC Bypass using Windows Media Player osksupport.dll (UACMe 32)",
    "context": "",
    "output": "Certainly!\n\nIn order to detect the pattern of UAC Bypass using Windows Media Player osksupport.dll (UACMe 32), you should monitor for specific file activities on Windows systems that are characteristic of this attack technique. Specifically, look out for files being created or modified in the users' directories that have a path ending with '\\AppData\\Local\\Temp\\OskSupport.dll'. This particular file is indicative of an attack, as attackers deploy this malicious DLL to leverage the trusted relationship of Windows Media Player components with the operating system to bypass User Account Control (UAC).\n\nAdditionally, pay attention to instances where 'C:\\Windows\\system32\\DllHost.exe' is used to load 'C:\\Program Files\\Windows Media Player\\osk.exe'. This behavior is suspicious because it represents an uncommon usage pattern of Windows Media Player, suggesting that an attacker is trying to exploit the osk.exe application, typically a part of the on-screen keyboard feature, with malicious DLLs to escalate privileges without triggering UAC prompts.\n\nThis detection strategy is critical for identifying security breaches involving the exploitation of built-in Windows functionalities to bypass security mechanisms. The high level of importance associated with this detection rule stems from the sophisticated nature of the attack, which could allow unauthorized administrative access to the system. Importantly, while monitoring these activities, it's crucial to be aware that there might be unknown scenarios that could lead to false positives, although such instances are not precisely defined.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "pattern of UAC Bypass using Windows Media Player osksupport.dll (UACMe 32)",
      "answer": "In order to detect the pattern of UAC Bypass using Windows Media Player osksupport.dll (UACMe 32), you should monitor for specific file activities on Windows systems that are characteristic of this attack technique. Specifically, look out for files being created or modified in the users' directories that have a path ending with '\\AppData\\Local\\Temp\\OskSupport.dll'. This particular file is indicative of an attack, as attackers deploy this malicious DLL to leverage the trusted relationship of Windows Media Player components with the operating system to bypass User Account Control (UAC).\n\nAdditionally, pay attention to instances where 'C:\\Windows\\system32\\DllHost.exe' is used to load 'C:\\Program Files\\Windows Media Player\\osk.exe'. This behavior is suspicious because it represents an uncommon usage pattern of Windows Media Player, suggesting that an attacker is trying to exploit the osk.exe application, typically a part of the on-screen keyboard feature, with malicious DLLs to escalate privileges without triggering UAC prompts.\n\nThis detection strategy is critical for identifying security breaches involving the exploitation of built-in Windows functionalities to bypass security mechanisms. The high level of importance associated with this detection rule stems from the sophisticated nature of the attack, which could allow unauthorized administrative access to the system. Importantly, while monitoring these activities, it's crucial to be aware that there might be unknown scenarios that could lead to false positives, although such instances are not precisely defined."
    }
  },
  {
    "instruction": "Please help me detect the following: creation or patching of potential malicious RoleBinding. This includes RoleBindings and ClusterRoleBinding.",
    "context": "",
    "output": "Sure!\nIn order to detect the creation or patching of potential malicious RoleBinding, including RoleBindings and ClusterRoleBindings, you should monitor Google Cloud Platform (GCP) audit logs specifically for activities related to Kubernetes (k8s) authorization. Focus on records indicating creation, patching, updating, or deletion of ClusterRoleBindings and RoleBindings. The significant events to look out for include:\n\n- Creation (`create`) of `ClusterRoleBindings` and `RoleBindings`.\n- Patching (`patch`) of existing `ClusterRoleBindings` and `RoleBindings`.\n- Updating (`update`) of `ClusterRoleBindings` and `RoleBindings`.\n- Deletion (`delete`) of `ClusterRoleBindings` and `RoleBindings`.\n\nThese operations are part of the Kubernetes RBAC (Role-Based Access Control) and are identified in the audit logs via method names such as `io.k8s.authorization.rbac.v*.clusterrolebindings.create` for creating ClusterRoleBindings, with variations corresponding to role bindings creation, patching, updating, and deletion. The `v*` in the method name indicates that this detection covers multiple versions of Kubernetes interfaces.\n\nThe log source for this activity is the GCP audit log (`gcp.audit`), indicating that monitoring should be focused on the audit logs provided by Google Cloud Platform services.\n\nFalse positives might occur, especially if the actions being monitored are part of regular administrative tasks. For instance, a system administrator might legitimately modify RoleBindings or ClusterRoleBindings as part of their duties. It's essential to verify the identity of the user, the user agent, and/or hostname making these changes to determine if they should indeed be making changes in your environment. Modifications or deletions by unfamiliar users should be investigated further. Known behavior causing false positives can be exempted to refine detection accuracy.\n\nThis detection strategy maps to specific MITRE ATT&CK tactics and techniques, primarily related to privilege escalation and persistence by exploiting the Kubernetes environment.\n\nThrough vigilant monitoring of these specific events and careful consideration of the context in which they occur, it is possible to identify potentially malicious activities related to RoleBindings and ClusterRoleBindings, which could indicate attempts at privilege escalation or maintaining unauthorized access within a Kubernetes cluster.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "creation or patching of potential malicious RoleBinding. This includes RoleBindings and ClusterRoleBinding.",
      "answer": "In order to detect the creation or patching of potential malicious RoleBinding, including RoleBindings and ClusterRoleBindings, you should monitor Google Cloud Platform (GCP) audit logs specifically for activities related to Kubernetes (k8s) authorization. Focus on records indicating creation, patching, updating, or deletion of ClusterRoleBindings and RoleBindings. The significant events to look out for include:\n\n- Creation (`create`) of `ClusterRoleBindings` and `RoleBindings`.\n- Patching (`patch`) of existing `ClusterRoleBindings` and `RoleBindings`.\n- Updating (`update`) of `ClusterRoleBindings` and `RoleBindings`.\n- Deletion (`delete`) of `ClusterRoleBindings` and `RoleBindings`.\n\nThese operations are part of the Kubernetes RBAC (Role-Based Access Control) and are identified in the audit logs via method names such as `io.k8s.authorization.rbac.v*.clusterrolebindings.create` for creating ClusterRoleBindings, with variations corresponding to role bindings creation, patching, updating, and deletion. The `v*` in the method name indicates that this detection covers multiple versions of Kubernetes interfaces.\n\nThe log source for this activity is the GCP audit log (`gcp.audit`), indicating that monitoring should be focused on the audit logs provided by Google Cloud Platform services.\n\nFalse positives might occur, especially if the actions being monitored are part of regular administrative tasks. For instance, a system administrator might legitimately modify RoleBindings or ClusterRoleBindings as part of their duties. It's essential to verify the identity of the user, the user agent, and/or hostname making these changes to determine if they should indeed be making changes in your environment. Modifications or deletions by unfamiliar users should be investigated further. Known behavior causing false positives can be exempted to refine detection accuracy.\n\nThis detection strategy maps to specific MITRE ATT&CK tactics and techniques, primarily related to privilege escalation and persistence by exploiting the Kubernetes environment.\n\nThrough vigilant monitoring of these specific events and careful consideration of the context in which they occur, it is possible to identify potentially malicious activities related to RoleBindings and ClusterRoleBindings, which could indicate attempts at privilege escalation or maintaining unauthorized access within a Kubernetes cluster."
    }
  },
  {
    "instruction": "How can I detect: WMI Event Consumer service scrcons.exe creating a named pipe",
    "context": "",
    "output": "In order to detect the WMI Event Consumer service scrcons.exe creating a named pipe, you should: Monitor Windows events for the creation of named pipes, specifically focusing on events generated by the scrcons.exe process. This involves configuring logging for Named Pipe Events, which is not enabled by default. It can be achieved by adjusting the Sysmon configuration, using popular templates available from sources like GitHub. These configurations ensure that Event IDs 17 and 18, which correspond to the creation and connection of named pipes, respectively, are properly logged. The detection of this activity is crucial since the scrcons.exe service involved in this process is a legitimate Windows component that can be abused by attackers to execute malicious activities stealthily. Monitoring for this specific behavior can help identify attempts to exploit WMI Event Consumer services for malicious purposes. Keep an eye on the logs for any instance where scrcons.exe ends with the creation of a named pipe, as this could indicate a high severity security threat.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "WMI Event Consumer service scrcons.exe creating a named pipe",
      "answer": "In order to detect the WMI Event Consumer service scrcons.exe creating a named pipe, you should: Monitor Windows events for the creation of named pipes, specifically focusing on events generated by the scrcons.exe process. This involves configuring logging for Named Pipe Events, which is not enabled by default. It can be achieved by adjusting the Sysmon configuration, using popular templates available from sources like GitHub. These configurations ensure that Event IDs 17 and 18, which correspond to the creation and connection of named pipes, respectively, are properly logged. The detection of this activity is crucial since the scrcons.exe service involved in this process is a legitimate Windows component that can be abused by attackers to execute malicious activities stealthily. Monitoring for this specific behavior can help identify attempts to exploit WMI Event Consumer services for malicious purposes. Keep an eye on the logs for any instance where scrcons.exe ends with the creation of a named pipe, as this could indicate a high severity security threat."
    }
  },
  {
    "instruction": "Please help me detect the following: exploitation attempt of the vulnerability found in F5 BIG-IP and described in CVE-2020-5902",
    "context": "",
    "output": "Sure!\nIn order to detect the exploitation attempt of the vulnerability found in F5 BIG-IP and described in CVE-2020-5902, you should: Monitor your web server logs for any queries that match specific patterns indicating a potential attack. Specifically, look for queries that contain the strings '/tmui/' or '/hsqldb'. These strings are part of the exploitation paths. Additionally, you must check for signs of directory traversal attempts, which are common tactics in exploiting web-based vulnerabilities. This could be detected by looking for the patterns '..;/' or '.jsp/..' in the query strings. Both the base selection patterns (indicative of targeting the F5 BIG-IP vulnerability) and the traversal attempt patterns need to be present to consider the activity suspicious. The logs should also capture the client IP (c-ip) and DNS (c-dns) details for further investigation. Given the critical nature of this vulnerability, any detection matching these criteria should be considered with high priority, although it's acknowledged that there might be unknown false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "exploitation attempt of the vulnerability found in F5 BIG-IP and described in CVE-2020-5902",
      "answer": "In order to detect the exploitation attempt of the vulnerability found in F5 BIG-IP and described in CVE-2020-5902, you should: Monitor your web server logs for any queries that match specific patterns indicating a potential attack. Specifically, look for queries that contain the strings '/tmui/' or '/hsqldb'. These strings are part of the exploitation paths. Additionally, you must check for signs of directory traversal attempts, which are common tactics in exploiting web-based vulnerabilities. This could be detected by looking for the patterns '..;/' or '.jsp/..' in the query strings. Both the base selection patterns (indicative of targeting the F5 BIG-IP vulnerability) and the traversal attempt patterns need to be present to consider the activity suspicious. The logs should also capture the client IP (c-ip) and DNS (c-dns) details for further investigation. Given the critical nature of this vulnerability, any detection matching these criteria should be considered with high priority, although it's acknowledged that there might be unknown false positives."
    }
  },
  {
    "instruction": "How can I detect: threat actor creating a file named `iertutil.dll` in the `C:\\Program Files\\Internet Explorer\\` directory over the network and loading it for a DCOM InternetExplorer DLL Hijack scenario.",
    "context": "",
    "output": "In order to detect a threat actor creating a file named `iertutil.dll` in the `C:\\Program Files\\Internet Explorer\\` directory over the network and loading it for a DCOM InternetExplorer DLL Hijack scenario, you should: Monitor Windows systems using Sysmon for two specific patterns of activity. Firstly, look for events where a file creation is logged (EventID 11) with the system process image, targeting filenames that end with '\\Internet Explorer\\iertutil.dll'. This indicates the possible creation or modification of the DLL file associated with Internet Explorer, which could be an attempt at DLL hijacking. Secondly, track instances where the Internet Explorer executable ('iexplore.exe') is observed loading a DLL ('iertutil.dll') that also resides in the Internet Explorer directory, as evidenced by EventID 7. This could indicate that the hijacked DLL is being executed, a direct sign of a potential DCOM DLL hijacking attempt. The rule deems such activities as critical, alerting you to the possibility of an ongoing attack utilizing this method. Do note, however, that there might be unknown scenarios that could trigger these conditions and be classified as false positives, albeit such cases are not specified.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "threat actor creating a file named `iertutil.dll` in the `C:\\Program Files\\Internet Explorer\\` directory over the network and loading it for a DCOM InternetExplorer DLL Hijack scenario.",
      "answer": "In order to detect a threat actor creating a file named `iertutil.dll` in the `C:\\Program Files\\Internet Explorer\\` directory over the network and loading it for a DCOM InternetExplorer DLL Hijack scenario, you should: Monitor Windows systems using Sysmon for two specific patterns of activity. Firstly, look for events where a file creation is logged (EventID 11) with the system process image, targeting filenames that end with '\\Internet Explorer\\iertutil.dll'. This indicates the possible creation or modification of the DLL file associated with Internet Explorer, which could be an attempt at DLL hijacking. Secondly, track instances where the Internet Explorer executable ('iexplore.exe') is observed loading a DLL ('iertutil.dll') that also resides in the Internet Explorer directory, as evidenced by EventID 7. This could indicate that the hijacked DLL is being executed, a direct sign of a potential DCOM DLL hijacking attempt. The rule deems such activities as critical, alerting you to the possibility of an ongoing attack utilizing this method. Do note, however, that there might be unknown scenarios that could trigger these conditions and be classified as false positives, albeit such cases are not specified."
    }
  },
  {
    "instruction": "How to detect: CVE-2019-19781 exploitation attempt against Citrix Netscaler, Application Delivery Controller and Citrix Gateway Attack",
    "context": "",
    "output": "In order to detect CVE-2019-19781 exploitation attempt against Citrix Netscaler, Application Delivery Controller, and Citrix Gateway Attack, you should monitor your webserver logs, particularly focusing on requests to the Citrix Netscaler appliance. Watch for specific patterns in the URI queries that attackers might use to exploit vulnerabilities. These patterns include attempts to access the '../vpns/' directory, which might indicate an attempt at directory traversal. Additionally, be alert for queries that end with '/vpns/cfg/smb.conf', as this could suggest an attempt to gain access to sensitive configuration files.\n\nFurthermore, you should pay close attention to the access of scripts within the '/vpns/portal/scripts/' directory, especially those with a '.pl' extension. Almost all scripts in this path, except 'logout.pl', are considered exploitable and should be closely monitored for unauthorized access attempts.\n\nLogs should capture key fields including the client's IP address, the virtual host (vhost), the requested URL, and the server's response to the request. Monitoring these fields can help in identifying and investigating suspicious activities effectively.\n\nBe aware that there might be unknown patterns of false positives; however, given the critical severity level indicated for this type of attack, utmost attention and prompt investigation of detected patterns are recommended to prevent or mitigate potential exploitation.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "CVE-2019-19781 exploitation attempt against Citrix Netscaler, Application Delivery Controller and Citrix Gateway Attack",
      "answer": "In order to detect CVE-2019-19781 exploitation attempt against Citrix Netscaler, Application Delivery Controller, and Citrix Gateway Attack, you should monitor your webserver logs, particularly focusing on requests to the Citrix Netscaler appliance. Watch for specific patterns in the URI queries that attackers might use to exploit vulnerabilities. These patterns include attempts to access the '../vpns/' directory, which might indicate an attempt at directory traversal. Additionally, be alert for queries that end with '/vpns/cfg/smb.conf', as this could suggest an attempt to gain access to sensitive configuration files.\n\nFurthermore, you should pay close attention to the access of scripts within the '/vpns/portal/scripts/' directory, especially those with a '.pl' extension. Almost all scripts in this path, except 'logout.pl', are considered exploitable and should be closely monitored for unauthorized access attempts.\n\nLogs should capture key fields including the client's IP address, the virtual host (vhost), the requested URL, and the server's response to the request. Monitoring these fields can help in identifying and investigating suspicious activities effectively.\n\nBe aware that there might be unknown patterns of false positives; however, given the critical severity level indicated for this type of attack, utmost attention and prompt investigation of detected patterns are recommended to prevent or mitigate potential exploitation."
    }
  },
  {
    "instruction": "How can I detect: Commandline to launch powershell with a base64 payload",
    "context": "",
    "output": "In order to detect attempts to launch PowerShell with a base64 payload, you should monitor for the creation of processes on Windows systems, specifically looking for instances where PowerShell (powershell.exe or pwsh.exe) is executed. Pay close attention to the command line arguments passed to PowerShell, especially if they include flags that indicate base64-encoded commands such as '-e', '-en', '-enc', '-enco', or '-ec'. However, you should ignore occurrences where the command line also contains the '-Encoding' argument, as this might be a legitimate use case. Additionally, ignore events where the PowerShell process is a child of certain Azure-related processes, like those originating from 'C:\\Packages\\Plugins\\Microsoft.GuestConfiguration.ConfigurationforWindows\\' or involving 'gc_worker.exe', to reduce false positive alerts. This approach is crucial for identifying potentially malicious activities where attackers might use encoded commands to evade detection mechanisms and execute a base64 payload via PowerShell.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Commandline to launch powershell with a base64 payload",
      "answer": "In order to detect attempts to launch PowerShell with a base64 payload, you should monitor for the creation of processes on Windows systems, specifically looking for instances where PowerShell (powershell.exe or pwsh.exe) is executed. Pay close attention to the command line arguments passed to PowerShell, especially if they include flags that indicate base64-encoded commands such as '-e', '-en', '-enc', '-enco', or '-ec'. However, you should ignore occurrences where the command line also contains the '-Encoding' argument, as this might be a legitimate use case. Additionally, ignore events where the PowerShell process is a child of certain Azure-related processes, like those originating from 'C:\\Packages\\Plugins\\Microsoft.GuestConfiguration.ConfigurationforWindows\\' or involving 'gc_worker.exe', to reduce false positive alerts. This approach is crucial for identifying potentially malicious activities where attackers might use encoded commands to evade detection mechanisms and execute a base64 payload via PowerShell."
    }
  },
  {
    "instruction": "Can you explain how to detect: Alerts on trust record modification within the registry, indicating usage of macros",
    "context": "",
    "output": "Certainly!\n\nIn order to alert on trust record modification within the registry, indicating usage of macros, you should: Monitor registry events within Windows where changes are made to the '\\Security\\Trusted Documents\\TrustRecords' path. This focuses on detecting modifications that could imply the activation or use of macros, commonly leveraged in malicious activities. However, it's important to note that this method may also detect legitimate macro usage, so further refinement and tuning of this detection strategy might be necessary to reduce false positives. The overall severity level for these occurrences is considered medium, signifying a notable but not extreme risk level associated with these modifications.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Alerts on trust record modification within the registry, indicating usage of macros",
      "answer": "In order to alert on trust record modification within the registry, indicating usage of macros, you should: Monitor registry events within Windows where changes are made to the '\\Security\\Trusted Documents\\TrustRecords' path. This focuses on detecting modifications that could imply the activation or use of macros, commonly leveraged in malicious activities. However, it's important to note that this method may also detect legitimate macro usage, so further refinement and tuning of this detection strategy might be necessary to reduce false positives. The overall severity level for these occurrences is considered medium, signifying a notable but not extreme risk level associated with these modifications."
    }
  },
  {
    "instruction": "Please help me detect the following: shell program such as the Windows command prompt or PowerShell is launched with system privileges.",
    "context": "",
    "output": "Sure!\nIn order to detect when a shell program such as the Windows command prompt or PowerShell is launched with system privileges, you should monitor Windows process creation logs for evidence of shell programs being initiated with elevated privileges. Specifically, look for instances where known shell executable names like `powershell.exe`, `pwsh.exe`, or `cmd.exe` are recorded in the process image paths. These shell programs might also be identified by their original file names, such as `PowerShell.EXE`, `pwsh.dll`, or `Cmd.Exe`.\n\nAdditionally, scrutinize user-related attributes in the logs, especially when the user name contains variants of 'AUTHORI' or 'AUTORI', or when the Logon ID is '0x3e7', indicating system-level privileges. \n\nExclude any records that match certain patterns suggesting legitimate use of shell programs under supervised circumstances, such as processes spawned by system directories (`C:\\Windows\\System32\\`, `C:\\Program Files (x86)\\`, or `C:\\Program Files\\`), or specific known parent processes like those related to ManageEngine services, Citrix updates, Asgard agents, Dell updates, compatibility telemetry (CompatTelRunner.exe), IBM SpectrumProtect scripts, Windows Installer services (`msiexec.exe`), and some cases of command execution without a parent process that are known to be benign or part of routine operations. \n\nThis approach helps in pinpointing suspicious activities while striving to minimize false alarms by excluding known patterns of legitimate usage. The detection should be tagged with relevant MITRE ATT&CK tactics and techniques, such as Execution, Privilege Escalation, and Defense Evasion, acknowledging the use of shell programs to perform malicious activities with elevated permissions.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "shell program such as the Windows command prompt or PowerShell is launched with system privileges.",
      "answer": "In order to detect when a shell program such as the Windows command prompt or PowerShell is launched with system privileges, you should monitor Windows process creation logs for evidence of shell programs being initiated with elevated privileges. Specifically, look for instances where known shell executable names like `powershell.exe`, `pwsh.exe`, or `cmd.exe` are recorded in the process image paths. These shell programs might also be identified by their original file names, such as `PowerShell.EXE`, `pwsh.dll`, or `Cmd.Exe`.\n\nAdditionally, scrutinize user-related attributes in the logs, especially when the user name contains variants of 'AUTHORI' or 'AUTORI', or when the Logon ID is '0x3e7', indicating system-level privileges. \n\nExclude any records that match certain patterns suggesting legitimate use of shell programs under supervised circumstances, such as processes spawned by system directories (`C:\\Windows\\System32\\`, `C:\\Program Files (x86)\\`, or `C:\\Program Files\\`), or specific known parent processes like those related to ManageEngine services, Citrix updates, Asgard agents, Dell updates, compatibility telemetry (CompatTelRunner.exe), IBM SpectrumProtect scripts, Windows Installer services (`msiexec.exe`), and some cases of command execution without a parent process that are known to be benign or part of routine operations. \n\nThis approach helps in pinpointing suspicious activities while striving to minimize false alarms by excluding known patterns of legitimate usage. The detection should be tagged with relevant MITRE ATT&CK tactics and techniques, such as Execution, Privilege Escalation, and Defense Evasion, acknowledging the use of shell programs to perform malicious activities with elevated permissions."
    }
  },
  {
    "instruction": "How can I detect: execution of PowerShell scripts located in the \"C:\\Users\\Public\" folder",
    "context": "",
    "output": "In order to detect execution of PowerShell scripts located in the \"C:\\Users\\Public\" folder, you should focus on monitoring the process creation events within Windows systems. Particularly, you should look out for the instances where either 'powershell.exe' or 'pwsh.exe' is executed. In the command line used to launch these processes, check for the presence of flags that indicate a script is being executed from the \"C:\\Users\\Public\" directory. These flags include variations of the '-f' and '-file' arguments pointing directly to the \"C:\\Users\\Public\" path or using the \"%Public%\" environment variable, with or without double quotes around the paths. \n\nMonitoring for these specific command line arguments serves as a high accuracy method for identifying potentially malicious activities, as it's unlikely for legitimate scripts to be frequently executed from the \"C:\\Users\\Public\" folder with such specific patterns. This approach thus significantly reduces the chances of false positives, enabling a focused and effective detection of unauthorized script executions which could be indicative of a cybersecurity threat.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of PowerShell scripts located in the \"C:\\Users\\Public\" folder",
      "answer": "In order to detect execution of PowerShell scripts located in the \"C:\\Users\\Public\" folder, you should focus on monitoring the process creation events within Windows systems. Particularly, you should look out for the instances where either 'powershell.exe' or 'pwsh.exe' is executed. In the command line used to launch these processes, check for the presence of flags that indicate a script is being executed from the \"C:\\Users\\Public\" directory. These flags include variations of the '-f' and '-file' arguments pointing directly to the \"C:\\Users\\Public\" path or using the \"%Public%\" environment variable, with or without double quotes around the paths. \n\nMonitoring for these specific command line arguments serves as a high accuracy method for identifying potentially malicious activities, as it's unlikely for legitimate scripts to be frequently executed from the \"C:\\Users\\Public\" folder with such specific patterns. This approach thus significantly reduces the chances of false positives, enabling a focused and effective detection of unauthorized script executions which could be indicative of a cybersecurity threat."
    }
  },
  {
    "instruction": "Please help me detect the following: creation of the file \"rootlog\" which is used by the TripleCross rootkit as a way to check if the backdoor is already running.",
    "context": "",
    "output": "Sure!\nIn order to detect the creation of the file \"rootlog\" which is used by the TripleCross rootkit as a way to check if the backdoor is already running, you should monitor file events on Linux systems, specifically watching for any instance where a file named '/tmp/rootlog' is created. This activity is flagged due to its association with a known rootkit attempting to verify the operational status of a backdoor mechanism it employs. The occurrence of such an event is considered highly unusual, suggesting a potential security breach or malicious activity on the system. Identifying this event can aid in the early detection of the TripleCross rootkit's presence, enabling timely intervention and mitigation efforts to secure the compromised system.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "creation of the file \"rootlog\" which is used by the TripleCross rootkit as a way to check if the backdoor is already running.",
      "answer": "In order to detect the creation of the file \"rootlog\" which is used by the TripleCross rootkit as a way to check if the backdoor is already running, you should monitor file events on Linux systems, specifically watching for any instance where a file named '/tmp/rootlog' is created. This activity is flagged due to its association with a known rootkit attempting to verify the operational status of a backdoor mechanism it employs. The occurrence of such an event is considered highly unusual, suggesting a potential security breach or malicious activity on the system. Identifying this event can aid in the early detection of the TripleCross rootkit's presence, enabling timely intervention and mitigation efforts to secure the compromised system."
    }
  },
  {
    "instruction": "Explain how should I detect the following: PowerShell scripts to set the ACL to a file in the Windows folder",
    "context": "",
    "output": "In order to detect PowerShell scripts to set the ACL to a file in the Windows folder, you should look for process creation events in Windows operating systems that include the execution of PowerShell executables or libraries. Specifically, monitor for processes with original file names `PowerShell.EXE` or `pwsh.dll`, as well as those where the image name ends with `\\powershell.exe` or `\\pwsh.exe`.\n\nAdditionally, focus on command lines that contain specific patterns indicating attempts to modify Access Control Lists (ACLs). These patterns include the presence of commands like `Set-Acl`, along with the parameter `-AclObject`. To further refine the detection, check for command lines attempting to modify paths within the Windows directory. This can be indicated by any of the following patterns: `-Path \"C:\\Windows`, `-Path 'C:\\\\Windows`, `-Path %windir%`, or `-Path $env:windir`.\n\nBeyond path modifications, it's crucial to also monitor for command lines that specify permissions adjustments, especially those mentioning `FullControl` or `Allow`, as these indicate attempts to change permissions to allow full control over system files.\n\nWhile implementing this detection strategy, be aware that there could be legitimate uses of these commands and pathways. Therefore, each detection should be carefully investigated to determine its context and intent. The level of risk associated with these detections is considered high due to the potential for significant security implications if PowerShell is used maliciously to alter ACLs in sensitive Windows directories.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "PowerShell scripts to set the ACL to a file in the Windows folder",
      "answer": "In order to detect PowerShell scripts to set the ACL to a file in the Windows folder, you should look for process creation events in Windows operating systems that include the execution of PowerShell executables or libraries. Specifically, monitor for processes with original file names `PowerShell.EXE` or `pwsh.dll`, as well as those where the image name ends with `\\powershell.exe` or `\\pwsh.exe`.\n\nAdditionally, focus on command lines that contain specific patterns indicating attempts to modify Access Control Lists (ACLs). These patterns include the presence of commands like `Set-Acl`, along with the parameter `-AclObject`. To further refine the detection, check for command lines attempting to modify paths within the Windows directory. This can be indicated by any of the following patterns: `-Path \"C:\\Windows`, `-Path 'C:\\\\Windows`, `-Path %windir%`, or `-Path $env:windir`.\n\nBeyond path modifications, it's crucial to also monitor for command lines that specify permissions adjustments, especially those mentioning `FullControl` or `Allow`, as these indicate attempts to change permissions to allow full control over system files.\n\nWhile implementing this detection strategy, be aware that there could be legitimate uses of these commands and pathways. Therefore, each detection should be carefully investigated to determine its context and intent. The level of risk associated with these detections is considered high due to the potential for significant security implications if PowerShell is used maliciously to alter ACLs in sensitive Windows directories."
    }
  },
  {
    "instruction": "Explain how should I detect the following: when an attacker adds a new \"DLLPathOverride\" value to the \"Natural Language\" key in order to achieve persistence which will get invoked by \"SearchIndexer.exe\" process",
    "context": "",
    "output": "In order to detect when an attacker adds a new \"DLLPathOverride\" value to the \"Natural Language\" key in order to achieve persistence which will get invoked by \"SearchIndexer.exe\" process, you should: Monitor Windows Registry modifications, specifically within the registry setting category. The focus of detection centers on the event where a SetValue operation occurs targeting registry keys. This operation is a strong indicator when it happens under paths that include '\\SYSTEM\\CurrentControlSet\\Control\\ContentIndex\\Language\\', which is a critical location related to language settings in the Windows Registry. In further detail, detection should be refined to flag any occurrences where new values such as '\\StemmerDLLPathOverride', '\\WBDLLPathOverride', '\\StemmerClass', or '\\WBreakerClass' are introduced. These specific values, when added or modified under the Natural Language key, indicate that an override condition has been established. This override could potentially allow malicious code execution in the context of the SearchIndexer.exe process, fulfilling an attacker's objective for persistence on a compromised system. Each of these modifications requires thorough investigation due to their high level of implications for security. This vigilance is crucial as attackers employing this tactic seek to evade detection and maintain a foothold within the targeted environment, leveraging the legitimate Windows process for malicious purposes.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "when an attacker adds a new \"DLLPathOverride\" value to the \"Natural Language\" key in order to achieve persistence which will get invoked by \"SearchIndexer.exe\" process",
      "answer": "In order to detect when an attacker adds a new \"DLLPathOverride\" value to the \"Natural Language\" key in order to achieve persistence which will get invoked by \"SearchIndexer.exe\" process, you should: Monitor Windows Registry modifications, specifically within the registry setting category. The focus of detection centers on the event where a SetValue operation occurs targeting registry keys. This operation is a strong indicator when it happens under paths that include '\\SYSTEM\\CurrentControlSet\\Control\\ContentIndex\\Language\\', which is a critical location related to language settings in the Windows Registry. In further detail, detection should be refined to flag any occurrences where new values such as '\\StemmerDLLPathOverride', '\\WBDLLPathOverride', '\\StemmerClass', or '\\WBreakerClass' are introduced. These specific values, when added or modified under the Natural Language key, indicate that an override condition has been established. This override could potentially allow malicious code execution in the context of the SearchIndexer.exe process, fulfilling an attacker's objective for persistence on a compromised system. Each of these modifications requires thorough investigation due to their high level of implications for security. This vigilance is crucial as attackers employing this tactic seek to evade detection and maintain a foothold within the targeted environment, leveraging the legitimate Windows process for malicious purposes."
    }
  },
  {
    "instruction": "Can you explain how to detect: usage of the direct syscall of NtOpenProcess which might be done from a CobaltStrike BOF.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect the usage of the direct syscall of NtOpenProcess which might be done from a CobaltStrike BOF, you should: focus on monitoring process access activities on Windows systems for signs of unauthorized or malicious behavior. Specifically, be alert for any instance where the call trace starts with 'UNKNOWN', which could indicate the direct use of system calls to manipulate processes, bypassing standard API usage. This technique is a common trait of sophisticated threats like CobaltStrike's Beacon Object Files (BOF), which can perform operations directly in memory to evade detection.\n\nHowever, it's crucial to filter out numerous known benign behaviors that might otherwise trigger false positives. Such behaviors include legitimate process interactions by various commonly used applications and system processes. For instance, specific exclusions are made for processes related to security software like Cylance, system utilities like systeminfo.exe, common applications including web browsers (Chrome, Firefox, Microsoft Edge), developer tools (Microsoft Visual Studio Code), communication platforms (Microsoft Teams, Discord, Yammer), system maintenance tools (CCleaner), and others including Evernote and background task processes.\n\nAlso, be aware of certain instances where a process's call trace might be flagged as 'UNKNOWN' due to benign kernel or API call audits, which do not signify malicious activity and should be recognized as false positives.\n\nBy implementing such focused monitoring while actively excluding identified legitimate scenarios, effective detection of malicious direct syscall usage, such as those observed in CobaltStrike BOF attacks, can be achieved. This approach helps maintain the balance between sensitivity to threats and minimizing disruption from false alerts, crucial for maintaining operational efficiency and security posture.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of the direct syscall of NtOpenProcess which might be done from a CobaltStrike BOF.",
      "answer": "In order to detect the usage of the direct syscall of NtOpenProcess which might be done from a CobaltStrike BOF, you should: focus on monitoring process access activities on Windows systems for signs of unauthorized or malicious behavior. Specifically, be alert for any instance where the call trace starts with 'UNKNOWN', which could indicate the direct use of system calls to manipulate processes, bypassing standard API usage. This technique is a common trait of sophisticated threats like CobaltStrike's Beacon Object Files (BOF), which can perform operations directly in memory to evade detection.\n\nHowever, it's crucial to filter out numerous known benign behaviors that might otherwise trigger false positives. Such behaviors include legitimate process interactions by various commonly used applications and system processes. For instance, specific exclusions are made for processes related to security software like Cylance, system utilities like systeminfo.exe, common applications including web browsers (Chrome, Firefox, Microsoft Edge), developer tools (Microsoft Visual Studio Code), communication platforms (Microsoft Teams, Discord, Yammer), system maintenance tools (CCleaner), and others including Evernote and background task processes.\n\nAlso, be aware of certain instances where a process's call trace might be flagged as 'UNKNOWN' due to benign kernel or API call audits, which do not signify malicious activity and should be recognized as false positives.\n\nBy implementing such focused monitoring while actively excluding identified legitimate scenarios, effective detection of malicious direct syscall usage, such as those observed in CobaltStrike BOF attacks, can be achieved. This approach helps maintain the balance between sensitivity to threats and minimizing disruption from false alerts, crucial for maintaining operational efficiency and security posture."
    }
  },
  {
    "instruction": "Please help me detect the following: Detect usage of the \"sqlite\" binary to query databases in Firefox and other Gecko-based browsers for potential data stealing.",
    "context": "",
    "output": "Sure!\nIn order to detect usage of the \"sqlite\" binary to query databases in Firefox and other Gecko-based browsers for potential data stealing, you should focus on monitoring process creation events within Windows systems. Specifically, you should look for signs that the SQLite executable, which can be identified as either 'sqlite.exe' or 'sqlite3.exe', is being used. Attention should also be paid to command lines that contain references to 'cookies.sqlite' or 'places.sqlite'. The former is often associated with the storage of cookies, while the latter usually pertains to bookmarks and browser history in Firefox and other Gecko-based browsers. This detection is significant as it could indicate unauthorized attempts to access or steal sensitive data, such as session cookies or browsing history, which can lead to privacy breaches or further malicious activities. False positives are currently unknown, highlighting the need for careful analysis of detected events, and the severity level is set to high, reflecting the potential risk associated with this behavior. Monitoring for these specific indicators can aid in identifying potential data theft activities involving SQLite database queries in the context of web browsing data.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Detect usage of the \"sqlite\" binary to query databases in Firefox and other Gecko-based browsers for potential data stealing.",
      "answer": "In order to detect usage of the \"sqlite\" binary to query databases in Firefox and other Gecko-based browsers for potential data stealing, you should focus on monitoring process creation events within Windows systems. Specifically, you should look for signs that the SQLite executable, which can be identified as either 'sqlite.exe' or 'sqlite3.exe', is being used. Attention should also be paid to command lines that contain references to 'cookies.sqlite' or 'places.sqlite'. The former is often associated with the storage of cookies, while the latter usually pertains to bookmarks and browser history in Firefox and other Gecko-based browsers. This detection is significant as it could indicate unauthorized attempts to access or steal sensitive data, such as session cookies or browsing history, which can lead to privacy breaches or further malicious activities. False positives are currently unknown, highlighting the need for careful analysis of detected events, and the severity level is set to high, reflecting the potential risk associated with this behavior. Monitoring for these specific indicators can aid in identifying potential data theft activities involving SQLite database queries in the context of web browsing data."
    }
  },
  {
    "instruction": "How to detect: usage of the built-in PowerShell cmdlet \"Enable-WindowsOptionalFeature\" used as a Deployment Image Servicing and Management tool.\nSimilar to DISM.exe, this cmdlet is used to enumerate, install, uninstall, configure, and update features and packages in Windows images\n",
    "context": "",
    "output": "In order to detect usage of the built-in PowerShell cmdlet \"Enable-WindowsOptionalFeature\" used as a Deployment Image Servicing and Management tool, similar to DISM.exe, this cmdlet is used to enumerate, install, uninstall, configure, and update features and packages in Windows images, you should: monitor Windows PowerShell script logs specifically looking for the use of the \"Enable-WindowsOptionalFeature\" cmdlet along with parameters '-Online' and '-FeatureName'. This aims to catch when someone is attempting to enable Windows features or packages potentially for malicious purposes. Specifically, pay attention to the enabling of features such as 'TelnetServer', 'Internet-Explorer-Optional-amd64', 'TFTP', 'SMB1Protocol', 'Client-ProjFS', and 'Microsoft-Windows-Subsystem-Linux', as these could be indicative of an adversary's attempt to install insecure or unusual Windows features. The monitoring process involves ensuring that Script Block Logging is enabled in Windows to capture the PowerShell command execution. Be aware that there could be legitimate use cases for enabling these features, so consider this to minimize potential false positives. The detection strategy is leveled at a medium severity, indicating a balanced approach to identifying potentially harmful activity without causing undue alarm for normal system administration tasks.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of the built-in PowerShell cmdlet \"Enable-WindowsOptionalFeature\" used as a Deployment Image Servicing and Management tool.\nSimilar to DISM.exe, this cmdlet is used to enumerate, install, uninstall, configure, and update features and packages in Windows images\n",
      "answer": "In order to detect usage of the built-in PowerShell cmdlet \"Enable-WindowsOptionalFeature\" used as a Deployment Image Servicing and Management tool, similar to DISM.exe, this cmdlet is used to enumerate, install, uninstall, configure, and update features and packages in Windows images, you should: monitor Windows PowerShell script logs specifically looking for the use of the \"Enable-WindowsOptionalFeature\" cmdlet along with parameters '-Online' and '-FeatureName'. This aims to catch when someone is attempting to enable Windows features or packages potentially for malicious purposes. Specifically, pay attention to the enabling of features such as 'TelnetServer', 'Internet-Explorer-Optional-amd64', 'TFTP', 'SMB1Protocol', 'Client-ProjFS', and 'Microsoft-Windows-Subsystem-Linux', as these could be indicative of an adversary's attempt to install insecure or unusual Windows features. The monitoring process involves ensuring that Script Block Logging is enabled in Windows to capture the PowerShell command execution. Be aware that there could be legitimate use cases for enabling these features, so consider this to minimize potential false positives. The detection strategy is leveled at a medium severity, indicating a balanced approach to identifying potentially harmful activity without causing undue alarm for normal system administration tasks."
    }
  },
  {
    "instruction": "Explain how should I detect the following: Adversaries may attempt to get a listing of network connections to or from the compromised system they are currently accessing or from remote systems by querying for information over the network.",
    "context": "",
    "output": "In order to detect adversaries attempting to get a listing of network connections to or from the compromised system they are currently accessing or from remote systems by querying for information over the network, you should monitor Windows process creation logs for occurrences of processes that are pertinent to networking command utilities. Specifically, look out for processes named 'net.exe' or 'net1.exe', as these are commonly used tools for querying network connections. Further, pay attention to the command line arguments passed to these executables, especially arguments ending with ' use', ' sessions', or contain ' use ', ' sessions ' in the middle of the command. These particular command-line arguments are indicative of attempts to list network connections or sessions, which can be a tactic used by attackers to gather information about network resources accessible from the currently compromised system or remote systems. \n\nBear in mind that detecting the mere usage of these commands may lead to false positives, as the 'net' command can also be used for legitimate network administration activities. Thus, a low level of alert should be assigned to these observations, and they should be further investigated to confirm malicious intent. This approach aligns with understanding the tactics and techniques outlined by MITRE ATT&CK concerning the gathering of network information, specifically focusing on the detection of potential adversary actions without relying on predefined signatures or patterns.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Adversaries may attempt to get a listing of network connections to or from the compromised system they are currently accessing or from remote systems by querying for information over the network.",
      "answer": "In order to detect adversaries attempting to get a listing of network connections to or from the compromised system they are currently accessing or from remote systems by querying for information over the network, you should monitor Windows process creation logs for occurrences of processes that are pertinent to networking command utilities. Specifically, look out for processes named 'net.exe' or 'net1.exe', as these are commonly used tools for querying network connections. Further, pay attention to the command line arguments passed to these executables, especially arguments ending with ' use', ' sessions', or contain ' use ', ' sessions ' in the middle of the command. These particular command-line arguments are indicative of attempts to list network connections or sessions, which can be a tactic used by attackers to gather information about network resources accessible from the currently compromised system or remote systems. \n\nBear in mind that detecting the mere usage of these commands may lead to false positives, as the 'net' command can also be used for legitimate network administration activities. Thus, a low level of alert should be assigned to these observations, and they should be further investigated to confirm malicious intent. This approach aligns with understanding the tactics and techniques outlined by MITRE ATT&CK concerning the gathering of network information, specifically focusing on the detection of potential adversary actions without relying on predefined signatures or patterns."
    }
  },
  {
    "instruction": "Can you explain how to detect: execution of a PowerShell code through the sqlps.exe utility, which is included in the standard set of utilities supplied with the MSSQL Server.\nScript blocks are not logged in this case, so this utility helps to bypass protection mechanisms based on the analysis of these logs.\n",
    "context": "",
    "output": "Certainly!\n\nIn order to detect execution of a PowerShell code through the sqlps.exe utility, which is included in the standard set of utilities supplied with the MSSQL Server and helps to bypass protection mechanisms based on the analysis of script blocks logs, you should: Monitor the process creation logs on Windows systems for instances where the 'sqlps.exe' utility is initiated. Specifically, you should look for scenarios where 'sqlps.exe' acts as a parent process or is launched directly, indicating potential use for executing PowerShell code in a manner that may evade script block logging. It is important to also apply a filter to exclude cases where 'sqlps.exe' is a child process of 'sqlagent.exe', as this is a recognized legitimate action. Be aware that direct PowerShell command execution via 'sqlps.exe' is unusual, so such events merit scrutiny, albeit with an understanding that false positives can occur under certain legitimate use cases. This approach helps in identifying tactics that may be employed to avoid detection through log bypass mechanisms.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of a PowerShell code through the sqlps.exe utility, which is included in the standard set of utilities supplied with the MSSQL Server.\nScript blocks are not logged in this case, so this utility helps to bypass protection mechanisms based on the analysis of these logs.\n",
      "answer": "In order to detect execution of a PowerShell code through the sqlps.exe utility, which is included in the standard set of utilities supplied with the MSSQL Server and helps to bypass protection mechanisms based on the analysis of script blocks logs, you should: Monitor the process creation logs on Windows systems for instances where the 'sqlps.exe' utility is initiated. Specifically, you should look for scenarios where 'sqlps.exe' acts as a parent process or is launched directly, indicating potential use for executing PowerShell code in a manner that may evade script block logging. It is important to also apply a filter to exclude cases where 'sqlps.exe' is a child process of 'sqlagent.exe', as this is a recognized legitimate action. Be aware that direct PowerShell command execution via 'sqlps.exe' is unusual, so such events merit scrutiny, albeit with an understanding that false positives can occur under certain legitimate use cases. This approach helps in identifying tactics that may be employed to avoid detection through log bypass mechanisms."
    }
  },
  {
    "instruction": "Please help me detect the following: Detect attempt to enable auditing of TTY input",
    "context": "",
    "output": "Sure!\nIn order to detect attempt to enable auditing of TTY input, you should: Monitor for specific events within Linux environments where the audit daemon (auditd) is enabled. Focus on detecting when there are modifications or interactions with critical authentication-related files, specifically '/etc/pam.d/system-auth' and '/etc/pam.d/password-auth'. Additionally, pay attention to events related to TTY (Teletypewriter) inputs, such as those classified as 'TTY' and 'USER_TTY'. These events should be carefully reviewed to determine if they represent legitimate administrative activities or if they are indicative of an attacker attempting to enable auditing on TTY inputs to capture user inputs, potentially including credentials. Administrative actions could sometimes trigger these events, so it's essential to differentiate between normal administrative work and potential security threats. The detection is considered high level due to the sensitive nature of the activity and its potential impact on security.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Detect attempt to enable auditing of TTY input",
      "answer": "In order to detect attempt to enable auditing of TTY input, you should: Monitor for specific events within Linux environments where the audit daemon (auditd) is enabled. Focus on detecting when there are modifications or interactions with critical authentication-related files, specifically '/etc/pam.d/system-auth' and '/etc/pam.d/password-auth'. Additionally, pay attention to events related to TTY (Teletypewriter) inputs, such as those classified as 'TTY' and 'USER_TTY'. These events should be carefully reviewed to determine if they represent legitimate administrative activities or if they are indicative of an attacker attempting to enable auditing on TTY inputs to capture user inputs, potentially including credentials. Administrative actions could sometimes trigger these events, so it's essential to differentiate between normal administrative work and potential security threats. The detection is considered high level due to the sensitive nature of the activity and its potential impact on security."
    }
  },
  {
    "instruction": "How can I detect: rare use of the command line tool shutdown to logoff a user",
    "context": "",
    "output": "In order to detect the rare use of the command line tool shutdown to logoff a user, you should: Monitor for the creation of processes within Windows environments, specifically focusing on instances where the process image name ends with '\\shutdown.exe' and the command line includes the argument '/l'. This activity is uncommon and may indicate an attempt to discreetly log off a user. It's important to note that while this detection is set at a medium level due to its rarity, false positives are a possibility and unknown factors may influence the accuracy of detection.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "rare use of the command line tool shutdown to logoff a user",
      "answer": "In order to detect the rare use of the command line tool shutdown to logoff a user, you should: Monitor for the creation of processes within Windows environments, specifically focusing on instances where the process image name ends with '\\shutdown.exe' and the command line includes the argument '/l'. This activity is uncommon and may indicate an attempt to discreetly log off a user. It's important to note that while this detection is set at a medium level due to its rarity, false positives are a possibility and unknown factors may influence the accuracy of detection."
    }
  },
  {
    "instruction": "Can you explain how to detect: Obfuscated use of stdin to execute PowerShell",
    "context": "",
    "output": "Certainly!\n\nIn order to detect obfuscated use of stdin to execute PowerShell, you should: Monitor Windows PowerShell script block logging for specific patterns indicating unusual use. The focus is on identifying execution scenarios where command prompt (`cmd`) is used in combination with PowerShell in a manner that suggests obfuscation. Specifically, look for script block texts that involve the `cmd` command with switches `/c` or `/r` followed closely (within five characters) by `powershell` and further include either the presence of `${input}`, `input`, or the `noexit` flag within a string. This pattern suggests an attempt to execute PowerShell commands or scripts in a way that might obscure their purpose or origin, representing a potential security risk. Such activities are tagged with tactics and techniques commonly associated with malicious actions, including \"Execution\" and \"Defense Evasion\". Monitoring for these specific script block texts requires that Script Block Logging be enabled on the Windows system, ensuring that detailed records of PowerShell execution are available for analysis. Be aware that there might be unknown scenarios that could trigger similar patterns without malicious intent; however, given the high level of concern, each detection should be investigated thoroughly.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Obfuscated use of stdin to execute PowerShell",
      "answer": "In order to detect obfuscated use of stdin to execute PowerShell, you should: Monitor Windows PowerShell script block logging for specific patterns indicating unusual use. The focus is on identifying execution scenarios where command prompt (`cmd`) is used in combination with PowerShell in a manner that suggests obfuscation. Specifically, look for script block texts that involve the `cmd` command with switches `/c` or `/r` followed closely (within five characters) by `powershell` and further include either the presence of `${input}`, `input`, or the `noexit` flag within a string. This pattern suggests an attempt to execute PowerShell commands or scripts in a way that might obscure their purpose or origin, representing a potential security risk. Such activities are tagged with tactics and techniques commonly associated with malicious actions, including \"Execution\" and \"Defense Evasion\". Monitoring for these specific script block texts requires that Script Block Logging be enabled on the Windows system, ensuring that detailed records of PowerShell execution are available for analysis. Be aware that there might be unknown scenarios that could trigger similar patterns without malicious intent; however, given the high level of concern, each detection should be investigated thoroughly."
    }
  },
  {
    "instruction": "Please help me detect the following: The attacker might use LOLBAS nltest.exe for discovery of domain controllers, domain trusts, parent domain and the current user permissions.",
    "context": "",
    "output": "Sure!\nIn order to detect an attacker using LOLBAS nltest.exe for the discovery of domain controllers, domain trusts, parent domain, and the current user permissions, you should monitor Windows security service logs for specific activities. Focus on identifying events with Event ID 4689, which indicates a process has exited, especially concerning the process nltest.exe. This utility, when part of a command execution that successfully completes (indicated by Status '0x0'), could be employed by an adversary to gather sensitive information about the network's architecture and access rights. Pay particular attention to the logs capturing the 'SubjectUserName' and 'SubjectDomainName' fields, as these will provide context about who initiated the process. Be aware that while high alert levels are justified due to the potential for malicious intent, there could be false positives such as red team activities or rare legitimate uses by administrators. Through this focused monitoring, malicious activities related to domain discovery can be effectively flagged and investigated.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "The attacker might use LOLBAS nltest.exe for discovery of domain controllers, domain trusts, parent domain and the current user permissions.",
      "answer": "In order to detect an attacker using LOLBAS nltest.exe for the discovery of domain controllers, domain trusts, parent domain, and the current user permissions, you should monitor Windows security service logs for specific activities. Focus on identifying events with Event ID 4689, which indicates a process has exited, especially concerning the process nltest.exe. This utility, when part of a command execution that successfully completes (indicated by Status '0x0'), could be employed by an adversary to gather sensitive information about the network's architecture and access rights. Pay particular attention to the logs capturing the 'SubjectUserName' and 'SubjectDomainName' fields, as these will provide context about who initiated the process. Be aware that while high alert levels are justified due to the potential for malicious intent, there could be false positives such as red team activities or rare legitimate uses by administrators. Through this focused monitoring, malicious activities related to domain discovery can be effectively flagged and investigated."
    }
  },
  {
    "instruction": "Explain how should I detect the following: malicious use of a control panel item",
    "context": "",
    "output": "In order to detect the malicious use of a control panel item, you should: Monitor Windows process creation logs for instances where the `reg.exe` utility is used, especially focusing on cases where it is employed to add items to the 'CurrentVersion\\Control Panel\\CPLs' in the registry. This is significant as it can indicate an attempt to maliciously manipulate control panel items. Detect cases where command lines end with the '.cpl' extension, which denotes Control Panel item files, while filtering out legitimate system uses of Control Panel items that are located in the System32 directory or use the '%System%' environment variable. Additionally, pay close attention to ignore cases where 'regsvr32' is used to silently register 'igfxCPL.cpl', as this might be a legitimate operation. The detection should be treated with high urgency, but it's essential to be aware that there may be unknown false positives, indicating the need for manual verification of the detected activities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "malicious use of a control panel item",
      "answer": "In order to detect the malicious use of a control panel item, you should: Monitor Windows process creation logs for instances where the `reg.exe` utility is used, especially focusing on cases where it is employed to add items to the 'CurrentVersion\\Control Panel\\CPLs' in the registry. This is significant as it can indicate an attempt to maliciously manipulate control panel items. Detect cases where command lines end with the '.cpl' extension, which denotes Control Panel item files, while filtering out legitimate system uses of Control Panel items that are located in the System32 directory or use the '%System%' environment variable. Additionally, pay close attention to ignore cases where 'regsvr32' is used to silently register 'igfxCPL.cpl', as this might be a legitimate operation. The detection should be treated with high urgency, but it's essential to be aware that there may be unknown false positives, indicating the need for manual verification of the detected activities."
    }
  },
  {
    "instruction": "How can I detect: The \"ScriptRunner.exe\" binary can be abused to proxy execution through it and bypass possible whitelisting",
    "context": "",
    "output": "In order to detect when the \"ScriptRunner.exe\" binary can be abused to proxy execution through it and bypass possible whitelisting, you should: Monitor process creation events on Windows systems for instances where \"ScriptRunner.exe\" is executed. Specifically, look for situations where the process image ends with \"\\ScriptRunner.exe\" or the original file name is exactly \"ScriptRunner.exe\". Additionally, pay attention to the command line arguments to see if \"-appvscript\" is being used, indicating potential misuse. Bear in mind that there might be legitimate uses of this behavior when App-v is deployed, which should be considered to reduce false positives. The threat level associated with this activity is deemed medium, suggesting it requires attention but might not always indicate a critical threat.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "The \"ScriptRunner.exe\" binary can be abused to proxy execution through it and bypass possible whitelisting",
      "answer": "In order to detect when the \"ScriptRunner.exe\" binary can be abused to proxy execution through it and bypass possible whitelisting, you should: Monitor process creation events on Windows systems for instances where \"ScriptRunner.exe\" is executed. Specifically, look for situations where the process image ends with \"\\ScriptRunner.exe\" or the original file name is exactly \"ScriptRunner.exe\". Additionally, pay attention to the command line arguments to see if \"-appvscript\" is being used, indicating potential misuse. Bear in mind that there might be legitimate uses of this behavior when App-v is deployed, which should be considered to reduce false positives. The threat level associated with this activity is deemed medium, suggesting it requires attention but might not always indicate a critical threat."
    }
  },
  {
    "instruction": "Can you explain how to detect: Various protocols maybe used to put data on the device for exfil or infil",
    "context": "",
    "output": "Certainly!\n\nIn order to detect activities where various protocols may be used to put data on the device for exfiltration or infiltration, you should focus on monitoring activity in Cisco AAA (Authentication, Authorization, and Accounting) logs for specific keywords that indicate data transfer or manipulation operations. These operations include the use of 'tftp' (Trivial File Transfer Protocol), 'rcp' (Remote Copy Protocol), 'puts' for putting data into a file, 'copy' for copying files, 'configure replace' for replacing device configuration, and 'archive tar' for archiving files in tar format. It's essential to watch for these commands as they could signal an attempt to manipulate device configurations or transfer data in and out of the network device. \n\nThe information to look out for will primarily be in the CmdSet fields within the logs. Keep in mind that these operations might occasionally trigger false positives because they are also commonly used for legitimate purposes, such as copying configurations or IOS images between devices or for backup.\n\nThis detection strategy targets low-level indicators of suspicious activity, based on monitoring for command usage that aligns with tactics and techniques involving Ingress Tool Transfer (for infiltration of tools or files into a network) and Exfiltration Over Alternative Protocol (for data exfiltration). This approach helps in identifying potentially malicious activity related to data manipulation or transmission on network devices.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Various protocols maybe used to put data on the device for exfil or infil",
      "answer": "In order to detect activities where various protocols may be used to put data on the device for exfiltration or infiltration, you should focus on monitoring activity in Cisco AAA (Authentication, Authorization, and Accounting) logs for specific keywords that indicate data transfer or manipulation operations. These operations include the use of 'tftp' (Trivial File Transfer Protocol), 'rcp' (Remote Copy Protocol), 'puts' for putting data into a file, 'copy' for copying files, 'configure replace' for replacing device configuration, and 'archive tar' for archiving files in tar format. It's essential to watch for these commands as they could signal an attempt to manipulate device configurations or transfer data in and out of the network device. \n\nThe information to look out for will primarily be in the CmdSet fields within the logs. Keep in mind that these operations might occasionally trigger false positives because they are also commonly used for legitimate purposes, such as copying configurations or IOS images between devices or for backup.\n\nThis detection strategy targets low-level indicators of suspicious activity, based on monitoring for command usage that aligns with tactics and techniques involving Ingress Tool Transfer (for infiltration of tools or files into a network) and Exfiltration Over Alternative Protocol (for data exfiltration). This approach helps in identifying potentially malicious activity related to data manipulation or transmission on network devices."
    }
  },
  {
    "instruction": "How to detect: ADDInternals Cmdlet execution. A tool for administering Azure AD and Office 365. Which can be abused by threat actors to attack Azure AD or Office 365.",
    "context": "",
    "output": "In order to detect ADDInternals Cmdlet execution, a tool for administering Azure AD and Office 365, which can be abused by threat actors to attack Azure AD or Office 365, you should monitor Windows Script Block Logging for specific strings that are indicative of the use or misuse of the ADDInternals cmdlets. This involves ensuring that Script Block Logging is enabled on the system to capture PowerShell script executions. Look for the execution of any scripts that contain strings such as 'Add-AADInt', 'ConvertTo-AADInt', 'Disable-AADInt', 'Enable-AADInt', 'Export-AADInt', 'Get-AADInt', 'Grant-AADInt', 'Install-AADInt', 'Invoke-AADInt', 'Join-AADInt', 'New-AADInt', 'Open-AADInt', 'Read-AADInt', 'Register-AADInt', 'Remove-AADInt', 'Restore-AADInt', 'Search-AADInt', 'Send-AADInt', 'Set-AADInt', 'Start-AADInt', or 'Update-AADInt'. These strings are part of the ADDInternals cmdlets, which, while legitimate tools for administration, can also be exploited by malicious actors for nefarious purposes against Azure Active Directory or Office 365 environments. Be mindful that legitimate administrative activity may also include these cmdlets, which could lead to potential false positives. The detection has been marked with a high level of severity due to the potential impact of abuse on organizations' cloud infrastructures.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "ADDInternals Cmdlet execution. A tool for administering Azure AD and Office 365. Which can be abused by threat actors to attack Azure AD or Office 365.",
      "answer": "In order to detect ADDInternals Cmdlet execution, a tool for administering Azure AD and Office 365, which can be abused by threat actors to attack Azure AD or Office 365, you should monitor Windows Script Block Logging for specific strings that are indicative of the use or misuse of the ADDInternals cmdlets. This involves ensuring that Script Block Logging is enabled on the system to capture PowerShell script executions. Look for the execution of any scripts that contain strings such as 'Add-AADInt', 'ConvertTo-AADInt', 'Disable-AADInt', 'Enable-AADInt', 'Export-AADInt', 'Get-AADInt', 'Grant-AADInt', 'Install-AADInt', 'Invoke-AADInt', 'Join-AADInt', 'New-AADInt', 'Open-AADInt', 'Read-AADInt', 'Register-AADInt', 'Remove-AADInt', 'Restore-AADInt', 'Search-AADInt', 'Send-AADInt', 'Set-AADInt', 'Start-AADInt', or 'Update-AADInt'. These strings are part of the ADDInternals cmdlets, which, while legitimate tools for administration, can also be exploited by malicious actors for nefarious purposes against Azure Active Directory or Office 365 environments. Be mindful that legitimate administrative activity may also include these cmdlets, which could lead to potential false positives. The detection has been marked with a high level of severity due to the potential impact of abuse on organizations' cloud infrastructures."
    }
  },
  {
    "instruction": "Explain how should I detect the following: Initial execution of malicious document calls wmic to execute the file with regsvr32",
    "context": "",
    "output": "In order to detect initial execution of malicious documents that call WMIC to execute the file with regsvr32, you should monitor process creation logs on Windows systems for specific patterns. Look for any instances where the process image ends with '\\wbem\\WMIC.exe' or where the original file name is identified as 'wmic.exe'. These are indications that the Windows Management Instrumentation Command-line (WMIC) tool is being used, which is not typical behavior for standard document operations.\n\nMoreover, it is critical to inspect the parent process that initiated the WMIC call. Specifically, scrutinize process creations where the parent process image ends with '\\winword.exe', '\\excel.exe', or '\\powerpnt.exe'. This scenario flags an uncommon sequence where office applications, which are typically used for legitimate purposes, are potentially harnessed to execute malicious scripts or commands via WMIC, a tool often exploited for malicious purposes within the context of executing a file with regsvr32.\n\nGiven the intricate ways attackers manipulate legitimate tools for malicious purposes, these detection strategies are paramount. The specified log source, detection options, and the association of these actions with tactics and techniques such as execution through office applications leveraged in the initial stages of attack, form the basis of a vigilant defense strategy. Notably, the potential for false positives is acknowledged due to the non-malicious use of similar command patterns, hence the importance of context and further investigation upon detection. This approach helps in maintaining a robust security posture by preempting malicious actions that exploit the WMIC utility within Windows environments for initial execution stages of an attack.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Initial execution of malicious document calls wmic to execute the file with regsvr32",
      "answer": "In order to detect initial execution of malicious documents that call WMIC to execute the file with regsvr32, you should monitor process creation logs on Windows systems for specific patterns. Look for any instances where the process image ends with '\\wbem\\WMIC.exe' or where the original file name is identified as 'wmic.exe'. These are indications that the Windows Management Instrumentation Command-line (WMIC) tool is being used, which is not typical behavior for standard document operations.\n\nMoreover, it is critical to inspect the parent process that initiated the WMIC call. Specifically, scrutinize process creations where the parent process image ends with '\\winword.exe', '\\excel.exe', or '\\powerpnt.exe'. This scenario flags an uncommon sequence where office applications, which are typically used for legitimate purposes, are potentially harnessed to execute malicious scripts or commands via WMIC, a tool often exploited for malicious purposes within the context of executing a file with regsvr32.\n\nGiven the intricate ways attackers manipulate legitimate tools for malicious purposes, these detection strategies are paramount. The specified log source, detection options, and the association of these actions with tactics and techniques such as execution through office applications leveraged in the initial stages of attack, form the basis of a vigilant defense strategy. Notably, the potential for false positives is acknowledged due to the non-malicious use of similar command patterns, hence the importance of context and further investigation upon detection. This approach helps in maintaining a robust security posture by preempting malicious actions that exploit the WMIC utility within Windows environments for initial execution stages of an attack."
    }
  },
  {
    "instruction": "Explain how should I detect the following: Obfuscated Powershell via Stdin in Scripts",
    "context": "",
    "output": "In order to detect obfuscated PowerShell via Stdin in scripts, you should focus on monitoring the Windows System service logs, specifically looking for events generated by the Service Control Manager. Pay special attention to events with an ID of 7045 which involve the creation or modification of service entries in the system. These entries are crucial to identifying potential attack vectors.\n\nFor detection, it is essential to scrutinize the 'ImagePath' attribute of these events. The 'ImagePath' should contain certain patterns that are typically associated with obfuscation techniques used in PowerShell scripts. Specifically, look for instances where the 'ImagePath' contains the sequence 'set' followed by '&&', which is a common indicator of script obfuscation or command chaining. Additionally, the presence of keywords like 'environment', 'invoke', or 'input' within close proximity to these patterns further strengthens the suspicion of obfuscated PowerShell activities. These keywords are often used in techniques to obfuscate the script's intent or to execute commands indirectly, making them harder to detect by traditional means.\n\nIt is important to note that while this detection method is aimed at identifying obfuscated PowerShell usage, there may be instances where legitimate system actions trigger similar patterns, thus leading to potential false positives. Therefore, these events should be investigated thoroughly to distinguish between malicious activities and benign system operations.\n\nThis detection strategy relies heavily on understanding and identifying the subtle nuances of obfuscated scripts or commands, paying close attention to specific patterns and keywords within the 'ImagePath' field of relevant system events. Through meticulous monitoring and analysis of these indicators within the Windows System service logs, it is possible to identify and mitigate attempts to use obfuscated PowerShell via Stdin in scripts, thereby enhancing the security stance against such sophisticated attack techniques.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Obfuscated Powershell via Stdin in Scripts",
      "answer": "In order to detect obfuscated PowerShell via Stdin in scripts, you should focus on monitoring the Windows System service logs, specifically looking for events generated by the Service Control Manager. Pay special attention to events with an ID of 7045 which involve the creation or modification of service entries in the system. These entries are crucial to identifying potential attack vectors.\n\nFor detection, it is essential to scrutinize the 'ImagePath' attribute of these events. The 'ImagePath' should contain certain patterns that are typically associated with obfuscation techniques used in PowerShell scripts. Specifically, look for instances where the 'ImagePath' contains the sequence 'set' followed by '&&', which is a common indicator of script obfuscation or command chaining. Additionally, the presence of keywords like 'environment', 'invoke', or 'input' within close proximity to these patterns further strengthens the suspicion of obfuscated PowerShell activities. These keywords are often used in techniques to obfuscate the script's intent or to execute commands indirectly, making them harder to detect by traditional means.\n\nIt is important to note that while this detection method is aimed at identifying obfuscated PowerShell usage, there may be instances where legitimate system actions trigger similar patterns, thus leading to potential false positives. Therefore, these events should be investigated thoroughly to distinguish between malicious activities and benign system operations.\n\nThis detection strategy relies heavily on understanding and identifying the subtle nuances of obfuscated scripts or commands, paying close attention to specific patterns and keywords within the 'ImagePath' field of relevant system events. Through meticulous monitoring and analysis of these indicators within the Windows System service logs, it is possible to identify and mitigate attempts to use obfuscated PowerShell via Stdin in scripts, thereby enhancing the security stance against such sophisticated attack techniques."
    }
  },
  {
    "instruction": "Please help me detect the following: execution of ruby using the \"-e\" flag. This is could be used as a way to launch a reverse shell or execute live ruby code.",
    "context": "",
    "output": "Sure!\nIn order to detect execution of ruby using the \"-e\" flag, which could be used as a way to launch a reverse shell or execute live ruby code, you should: Focus on monitoring the creation of processes within Windows environments. Specifically, look for instances where the process image name ends with '\\ruby.exe' or the original file name is explicitly 'ruby.exe'. Additionally, pay attention to the command line used to initiate the process; if it contains the ' -e' flag, it indicates the potential execution of arbitrary Ruby code or the initiation of a reverse shell. The detection of these conditions should prompt further investigation. It's important to note that some legitimate uses of Ruby might trigger this condition, although they are currently unspecified, so it is classified with a medium level of confidence.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of ruby using the \"-e\" flag. This is could be used as a way to launch a reverse shell or execute live ruby code.",
      "answer": "In order to detect execution of ruby using the \"-e\" flag, which could be used as a way to launch a reverse shell or execute live ruby code, you should: Focus on monitoring the creation of processes within Windows environments. Specifically, look for instances where the process image name ends with '\\ruby.exe' or the original file name is explicitly 'ruby.exe'. Additionally, pay attention to the command line used to initiate the process; if it contains the ' -e' flag, it indicates the potential execution of arbitrary Ruby code or the initiation of a reverse shell. The detection of these conditions should prompt further investigation. It's important to note that some legitimate uses of Ruby might trigger this condition, although they are currently unspecified, so it is classified with a medium level of confidence."
    }
  },
  {
    "instruction": "How can I detect: code fragments found in small and obfuscated AMSI bypass PowerShell scripts",
    "context": "",
    "output": "In order to detect code fragments found in small and obfuscated AMSI bypass PowerShell scripts, you should: Focus on Windows platform, particularly monitoring PowerShell script activities where Script Block Logging is enabled. Identify scripts containing all the specific strings '[Ref].Assembly.GetType', 'SetValue($null,$true)', and 'NonPublic,Static', as these are indicative of attempts to bypass the Anti-Malware Scan Interface (AMSI) using obfuscation techniques. This detection strategy is of high importance due to the significant security risk posed by executing obfuscated scripts that attempt to evade malware detection mechanisms.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "code fragments found in small and obfuscated AMSI bypass PowerShell scripts",
      "answer": "In order to detect code fragments found in small and obfuscated AMSI bypass PowerShell scripts, you should: Focus on Windows platform, particularly monitoring PowerShell script activities where Script Block Logging is enabled. Identify scripts containing all the specific strings '[Ref].Assembly.GetType', 'SetValue($null,$true)', and 'NonPublic,Static', as these are indicative of attempts to bypass the Anti-Malware Scan Interface (AMSI) using obfuscation techniques. This detection strategy is of high importance due to the significant security risk posed by executing obfuscated scripts that attempt to evade malware detection mechanisms."
    }
  },
  {
    "instruction": "Explain how should I detect the following: usage of attrib.exe to hide files from users.",
    "context": "",
    "output": "In order to detect usage of attrib.exe to hide files from users, you should: Monitor the creation of processes on Windows systems, specifically focusing on the execution of 'attrib.exe'. Look for signs where 'attrib.exe' is used, either when the Image name ends with '\\attrib.exe' or when the OriginalFileName is strictly 'ATTRIB.EXE'. Additionally, pay close attention to command lines that include ' +h ', which is a strong indicator that the hidden attribute is being applied to files. It's important to exclude any commands that might falsely indicate malicious activity, such as the use of '\\desktop.ini ' in command lines, which might be legitimate. Moreover, be wary of scenarios where 'attrib.exe' is executed as a child process of 'cmd.exe' with specific command lines like '+R +H +S +A \\\\\\*.cui', potentially hiding significant files, but only if it wasn't initiated by a certain '.bat' script from 'C:\\\\WINDOWS\\\\system32\\\\'. These measures help in filtering out benign activities that could be mistaken for malicious hiding of files, such as certain Intel services adjusting visibility of '.cui' files or the legitimate hiding of 'desktop.ini'. The level of attention to this detection is considered medium, suggesting that while the risk is notable, there can be legitimate instances of such behavior.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of attrib.exe to hide files from users.",
      "answer": "In order to detect usage of attrib.exe to hide files from users, you should: Monitor the creation of processes on Windows systems, specifically focusing on the execution of 'attrib.exe'. Look for signs where 'attrib.exe' is used, either when the Image name ends with '\\attrib.exe' or when the OriginalFileName is strictly 'ATTRIB.EXE'. Additionally, pay close attention to command lines that include ' +h ', which is a strong indicator that the hidden attribute is being applied to files. It's important to exclude any commands that might falsely indicate malicious activity, such as the use of '\\desktop.ini ' in command lines, which might be legitimate. Moreover, be wary of scenarios where 'attrib.exe' is executed as a child process of 'cmd.exe' with specific command lines like '+R +H +S +A \\\\\\*.cui', potentially hiding significant files, but only if it wasn't initiated by a certain '.bat' script from 'C:\\\\WINDOWS\\\\system32\\\\'. These measures help in filtering out benign activities that could be mistaken for malicious hiding of files, such as certain Intel services adjusting visibility of '.cui' files or the legitimate hiding of 'desktop.ini'. The level of attention to this detection is considered medium, suggesting that while the risk is notable, there can be legitimate instances of such behavior."
    }
  },
  {
    "instruction": "Can you explain how to detect: blocked image load events with revoked certificates by code integrity.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect blocked image load events with revoked certificates by code integrity, you should: Monitor the Windows Code Integrity operational logs for Event ID 3036. This event indicates that Windows cannot verify the integrity of a file because the signing certificate for the file has been revoked. You should check with the software publisher to see if a new, signed version of the kernel module or file is available. This detection is crucial as it points towards attempts to load software or drivers with known vulnerabilities or malicious intent, where the digital signatures have been revoked to maintain system integrity. The occurrence of such an event is considered highly suspicious and is unlikely to produce false positives, implying a high level of confidence in the significance of this alert in identifying potential security threats.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "blocked image load events with revoked certificates by code integrity.",
      "answer": "In order to detect blocked image load events with revoked certificates by code integrity, you should: Monitor the Windows Code Integrity operational logs for Event ID 3036. This event indicates that Windows cannot verify the integrity of a file because the signing certificate for the file has been revoked. You should check with the software publisher to see if a new, signed version of the kernel module or file is available. This detection is crucial as it points towards attempts to load software or drivers with known vulnerabilities or malicious intent, where the digital signatures have been revoked to maintain system integrity. The occurrence of such an event is considered highly suspicious and is unlikely to produce false positives, implying a high level of confidence in the significance of this alert in identifying potential security threats."
    }
  },
  {
    "instruction": "Explain how should I detect the following: usage of wmic to start or stop a service",
    "context": "",
    "output": "In order to detect usage of wmic to start or stop a service, you should: Monitor Windows process creation logs for instances where the 'wmic.exe' is involved in initiating processes. Specifically, look for cases where the original file name is 'wmic.exe' or when the image path ends with '\\WMIC.exe'. Further refinement in detection involves examining the command line arguments used with 'wmic.exe' for patterns that include both 'service' and 'call' in any order, and additionally, whether 'stopservice' or 'startservice' commands are present. Any matching event should trigger an alert, though it is advised to be cautious of false positives, which may arise in scenarios not yet known. This method is instrumental in identifying possible malicious activities related to service manipulation, tagged under the tactics and techniques such as Execution, Persistence, Privilege Escalation, and Defense Evasion.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of wmic to start or stop a service",
      "answer": "In order to detect usage of wmic to start or stop a service, you should: Monitor Windows process creation logs for instances where the 'wmic.exe' is involved in initiating processes. Specifically, look for cases where the original file name is 'wmic.exe' or when the image path ends with '\\WMIC.exe'. Further refinement in detection involves examining the command line arguments used with 'wmic.exe' for patterns that include both 'service' and 'call' in any order, and additionally, whether 'stopservice' or 'startservice' commands are present. Any matching event should trigger an alert, though it is advised to be cautious of false positives, which may arise in scenarios not yet known. This method is instrumental in identifying possible malicious activities related to service manipulation, tagged under the tactics and techniques such as Execution, Persistence, Privilege Escalation, and Defense Evasion."
    }
  },
  {
    "instruction": "Please help me detect the following: exploitation attempt against Citrix Netscaler, Application Delivery Controller (ADS) and Citrix Gateway exploiting vulnerabilities reported as CVE-2020-8193 and CVE-2020-8195",
    "context": "",
    "output": "Sure!\nIn order to detect exploitation attempts against Citrix Netscaler, Application Delivery Controller (ADS), and Citrix Gateway exploiting vulnerabilities reported as CVE-2020-8193 and CVE-2020-8195, you should monitor web server logs for specific patterns in the URI query. Look for queries containing '/rapi/filedownload?filter=path:%2F'. Additionally, watch for queries that include all the following parameters: '/pcidss/report', 'type=all_signatures', and 'sig_name=_default_signature_'. These queries are potential indicators of an attack exploiting the mentioned CVE vulnerabilities. Ensure to capture the client IP, the virtual host, the full URL, and the response code for any request that matches these patterns. It is important to note that while this detection strategy is critical for identifying possible exploitation attempts, there might be unknown false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "exploitation attempt against Citrix Netscaler, Application Delivery Controller (ADS) and Citrix Gateway exploiting vulnerabilities reported as CVE-2020-8193 and CVE-2020-8195",
      "answer": "In order to detect exploitation attempts against Citrix Netscaler, Application Delivery Controller (ADS), and Citrix Gateway exploiting vulnerabilities reported as CVE-2020-8193 and CVE-2020-8195, you should monitor web server logs for specific patterns in the URI query. Look for queries containing '/rapi/filedownload?filter=path:%2F'. Additionally, watch for queries that include all the following parameters: '/pcidss/report', 'type=all_signatures', and 'sig_name=_default_signature_'. These queries are potential indicators of an attack exploiting the mentioned CVE vulnerabilities. Ensure to capture the client IP, the virtual host, the full URL, and the response code for any request that matches these patterns. It is important to note that while this detection strategy is critical for identifying possible exploitation attempts, there might be unknown false positives."
    }
  },
  {
    "instruction": "Please help me detect the following: chmod targeting files in abnormal directory paths.",
    "context": "",
    "output": "Sure!\nIn order to detect chmod targeting files in abnormal directory paths, you should: Monitor process creation logs within Linux environments for instances where the chmod command is executed. Specifically, pay attention to commands ending with '/chmod' accompanied by command lines that include references to unusual directory paths such as '/tmp/', '/.Library/', '/etc/', and '/opt/'. This detection effort focuses on capturing potentially malicious activity where chmod might be used to alter file permissions in directories that are not commonly targeted for legitimate permission changes. It's important to consider legitimate administrative activities that involve changing file permissions as potential false positives. This monitoring is categorized with a medium severity level and is essential for identifying unauthorized or suspicious changes in file permissions, which could be indicative of a malicious actor attempting to modify system configurations or gain access to sensitive areas of the system.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "chmod targeting files in abnormal directory paths.",
      "answer": "In order to detect chmod targeting files in abnormal directory paths, you should: Monitor process creation logs within Linux environments for instances where the chmod command is executed. Specifically, pay attention to commands ending with '/chmod' accompanied by command lines that include references to unusual directory paths such as '/tmp/', '/.Library/', '/etc/', and '/opt/'. This detection effort focuses on capturing potentially malicious activity where chmod might be used to alter file permissions in directories that are not commonly targeted for legitimate permission changes. It's important to consider legitimate administrative activities that involve changing file permissions as potential false positives. This monitoring is categorized with a medium severity level and is essential for identifying unauthorized or suspicious changes in file permissions, which could be indicative of a malicious actor attempting to modify system configurations or gain access to sensitive areas of the system."
    }
  },
  {
    "instruction": "Can you explain how to detect: Adversaries may establish persistence and elevate privileges by executing malicious content triggered by a Windows Management Instrumentation (WMI) event subscription.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect adversaries attempting to establish persistence and elevate privileges by executing malicious content triggered by a Windows Management Instrumentation (WMI) event subscription, you should monitor for PowerShell scripts that contain specific patterns indicating the creation of WMI event subscriptions. These scripts typically utilize the `New-CimInstance` cmdlet with certain parameters to create WMI event subscriptions, which can be indicative of malicious activity. Specifically, you should look for PowerShell scripts that contain both the `New-CimInstance` cmdlet and the parameters `-Namespace root/subscription` and `-ClassName __EventFilter` or `-ClassName CommandLineEventConsumer`, alongside a `-Property` parameter, which suggests the potential establishment of persistence mechanisms through WMI. It is important for systems, particularly those running Windows, to have Script Block Logging enabled to capture these PowerShell script execution details for analysis. Although some detections might turn out to be legitimate uses of these commands, it's vital to investigate these occurrences to rule out malicious intentions. This monitoring is categorized under the medium severity level due to the potential for these activities to be used by adversaries in establishing footholds within networks and executing privilege escalation tactics.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Adversaries may establish persistence and elevate privileges by executing malicious content triggered by a Windows Management Instrumentation (WMI) event subscription.",
      "answer": "In order to detect adversaries attempting to establish persistence and elevate privileges by executing malicious content triggered by a Windows Management Instrumentation (WMI) event subscription, you should monitor for PowerShell scripts that contain specific patterns indicating the creation of WMI event subscriptions. These scripts typically utilize the `New-CimInstance` cmdlet with certain parameters to create WMI event subscriptions, which can be indicative of malicious activity. Specifically, you should look for PowerShell scripts that contain both the `New-CimInstance` cmdlet and the parameters `-Namespace root/subscription` and `-ClassName __EventFilter` or `-ClassName CommandLineEventConsumer`, alongside a `-Property` parameter, which suggests the potential establishment of persistence mechanisms through WMI. It is important for systems, particularly those running Windows, to have Script Block Logging enabled to capture these PowerShell script execution details for analysis. Although some detections might turn out to be legitimate uses of these commands, it's vital to investigate these occurrences to rule out malicious intentions. This monitoring is categorized under the medium severity level due to the potential for these activities to be used by adversaries in establishing footholds within networks and executing privilege escalation tactics."
    }
  },
  {
    "instruction": "Can you explain how to detect: unknown program using commandline flags usually used by tools such as PsExec and PAExec to start programs with SYSTEM Privileges",
    "context": "",
    "output": "Certainly!\n\nIn order to detect unknown program using commandline flags usually used by tools such as PsExec and PAExec to start programs with SYSTEM privileges, you should monitor the creation of Windows processes for specific command-line arguments that indicate an elevation attempt to the LOCAL_SYSTEM account. These arguments include variations of '-s' and '/s' flags in combination with 'cmd', 'powershell', 'pwsh', or any similar command line interpreter software, often paired with '-i' or '/i' to start an interactive session. It's crucial to note that these flags can be used interchangeably (e.g., '-' can be replaced with '/') and the order of the arguments might not always be the same. Furthermore, variations specific to PowerShell version 7 (pwsh) and version 5 (powershell) are also considered. To avoid false alerts, the rule excludes known instances where command-line arguments include 'paexec', 'PsExec', or 'accepteula', as they are common tools that use similar flags but may not indicate malicious activity. These command-line arguments are typically associated with legitimate administrative tools, and exclusions are made for instances that may resemble typical tool usage or instances where software companies include such tools with their products under different names. This detection process is set to a high level of alert due to the potential impact of an attacker gaining SYSTEM privileges.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "unknown program using commandline flags usually used by tools such as PsExec and PAExec to start programs with SYSTEM Privileges",
      "answer": "In order to detect unknown program using commandline flags usually used by tools such as PsExec and PAExec to start programs with SYSTEM privileges, you should monitor the creation of Windows processes for specific command-line arguments that indicate an elevation attempt to the LOCAL_SYSTEM account. These arguments include variations of '-s' and '/s' flags in combination with 'cmd', 'powershell', 'pwsh', or any similar command line interpreter software, often paired with '-i' or '/i' to start an interactive session. It's crucial to note that these flags can be used interchangeably (e.g., '-' can be replaced with '/') and the order of the arguments might not always be the same. Furthermore, variations specific to PowerShell version 7 (pwsh) and version 5 (powershell) are also considered. To avoid false alerts, the rule excludes known instances where command-line arguments include 'paexec', 'PsExec', or 'accepteula', as they are common tools that use similar flags but may not indicate malicious activity. These command-line arguments are typically associated with legitimate administrative tools, and exclusions are made for instances that may resemble typical tool usage or instances where software companies include such tools with their products under different names. This detection process is set to a high level of alert due to the potential impact of an attacker gaining SYSTEM privileges."
    }
  },
  {
    "instruction": "Can you explain how to detect: potential shellcode injection used by tools such as Metasploit's migrate and Empire's psinject",
    "context": "",
    "output": "Certainly!\n\nIn order to detect potential shellcode injection used by tools such as Metasploit's migrate and Empire's psinject, you should monitor Windows process access logs for specific patterns of behavior that indicate suspicious activity. Specifically, you should look out for cases where a process has been granted certain access rights, identified by the hexadecimal values '0x147a' and '0x1f3fff', which could be indicative of an attempt to inject shellcode into a process. Additionally, if the call trace of the process access attempt contains 'UNKNOWN', this could signal an injection attempt that is trying to mask its origin.\n\nHowever, it's important to apply certain filters to avoid false positives from legitimate software. For instance, Dell software and certain Microsoft Visual Studio processes might exhibit similar behavior during normal operations. These include processes starting with specific paths such as 'C:\\Program Files\\Dell\\' and 'C:\\Program Files (x86)\\Dell\\', or Microsoft Visual Studio paths, especially when they are accessing other processes within the same directories with the same high level of granted access ('0x1f3fff'). Additionally, legitimate activities often involve call traces starting with 'C:\\Windows\\System32\\ntdll.dll'.\n\nTo accurately filter out these legitimate cases, review instances where Dell-related software or specific Visual Studio utilities (e.g., PerfWatson2.exe or MSBuild.exe) are involved in process access attempts toward expected target processes, including but not limited to Dell TechHub software or Visual Studio development environments.\n\nBy focusing on these patterns and applying the appropriate filters, you can more precisely detect malicious activities attempting to utilize shellcode injection techniques akin to those employed by advanced hacking tools like Metasploit and Empire, while reducing the chances of flagging benign software operations as threats.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential shellcode injection used by tools such as Metasploit's migrate and Empire's psinject",
      "answer": "In order to detect potential shellcode injection used by tools such as Metasploit's migrate and Empire's psinject, you should monitor Windows process access logs for specific patterns of behavior that indicate suspicious activity. Specifically, you should look out for cases where a process has been granted certain access rights, identified by the hexadecimal values '0x147a' and '0x1f3fff', which could be indicative of an attempt to inject shellcode into a process. Additionally, if the call trace of the process access attempt contains 'UNKNOWN', this could signal an injection attempt that is trying to mask its origin.\n\nHowever, it's important to apply certain filters to avoid false positives from legitimate software. For instance, Dell software and certain Microsoft Visual Studio processes might exhibit similar behavior during normal operations. These include processes starting with specific paths such as 'C:\\Program Files\\Dell\\' and 'C:\\Program Files (x86)\\Dell\\', or Microsoft Visual Studio paths, especially when they are accessing other processes within the same directories with the same high level of granted access ('0x1f3fff'). Additionally, legitimate activities often involve call traces starting with 'C:\\Windows\\System32\\ntdll.dll'.\n\nTo accurately filter out these legitimate cases, review instances where Dell-related software or specific Visual Studio utilities (e.g., PerfWatson2.exe or MSBuild.exe) are involved in process access attempts toward expected target processes, including but not limited to Dell TechHub software or Visual Studio development environments.\n\nBy focusing on these patterns and applying the appropriate filters, you can more precisely detect malicious activities attempting to utilize shellcode injection techniques akin to those employed by advanced hacking tools like Metasploit and Empire, while reducing the chances of flagging benign software operations as threats."
    }
  },
  {
    "instruction": "How to detect: execution of netsh with the \"trace\" flag in order to start a network capture",
    "context": "",
    "output": "In order to detect the execution of netsh with the \"trace\" flag in order to start a network capture, you should: Monitor Windows process creation logs for instances where the process image name ends with '\\netsh.exe' or the original file name is explicitly 'netsh.exe'. Furthermore, you need to check the command line arguments to identify cases where both 'trace' and 'start' are present, indicating an attempt to initiate a network capture. It's important to consider that some detections might be false positives, as they could stem from legitimate administrative activities. The detection level for this activity is considered medium, highlighting its potential security risk without implying immediate certainty of malicious intent.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of netsh with the \"trace\" flag in order to start a network capture",
      "answer": "In order to detect the execution of netsh with the \"trace\" flag in order to start a network capture, you should: Monitor Windows process creation logs for instances where the process image name ends with '\\netsh.exe' or the original file name is explicitly 'netsh.exe'. Furthermore, you need to check the command line arguments to identify cases where both 'trace' and 'start' are present, indicating an attempt to initiate a network capture. It's important to consider that some detections might be false positives, as they could stem from legitimate administrative activities. The detection level for this activity is considered medium, highlighting its potential security risk without implying immediate certainty of malicious intent."
    }
  },
  {
    "instruction": "Can you explain how to detect: Monitor and alert for Bitlocker key retrieval.",
    "context": "",
    "output": "Certainly!\n\nIn order to monitor and alert for Bitlocker key retrieval, you should focus on monitoring Azure audit logs for any activities related to key management. Specifically, pay attention to events within the KeyManagement category where the operation name is \"Read BitLocker key\". This activity could indicate someone is attempting to retrieve the BitLocker encryption keys, which can be a critical security concern. The detection of such activities is set to a medium severity level due to the potential impact and sensitivity of these encryption keys. Be aware that there might be cases where the detection could trigger on legitimate activities, but these instances are currently unknown. Keeping an eye on these specific operations within the Azure environment is essential for safeguarding against potential threats that seek to access sensitive encryption keys.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Monitor and alert for Bitlocker key retrieval.",
      "answer": "In order to monitor and alert for Bitlocker key retrieval, you should focus on monitoring Azure audit logs for any activities related to key management. Specifically, pay attention to events within the KeyManagement category where the operation name is \"Read BitLocker key\". This activity could indicate someone is attempting to retrieve the BitLocker encryption keys, which can be a critical security concern. The detection of such activities is set to a medium severity level due to the potential impact and sensitivity of these encryption keys. Be aware that there might be cases where the detection could trigger on legitimate activities, but these instances are currently unknown. Keeping an eye on these specific operations within the Azure environment is essential for safeguarding against potential threats that seek to access sensitive encryption keys."
    }
  },
  {
    "instruction": "How to detect: msdt.exe executed by a suspicious parent as seen in CVE-2022-30190 / Follina exploitation",
    "context": "",
    "output": "In order to detect msdt.exe executed by a suspicious parent as seen in CVE-2022-30190 / Follina exploitation, you should: Monitor process creations within Windows systems for instances where `msdt.exe` is initiated. Specifically, look out for executions of `msdt.exe` that are children of certain programs known for scripting or command execution, such as `cmd.exe`, `cscript.exe`, `mshta.exe`, `powershell.exe`, `pwsh.exe`, `regsvr32.exe`, `rundll32.exe`, `schtasks.exe`, `wmic.exe`, `wscript.exe`, and `wsl.exe`. These parent processes are often used by attackers to execute malicious scripts or commands. To ensure effective detection, confirm that both the process image ends with `\\msdt.exe` and its original filename is identified as `msdt.exe` to reduce the chance of missing malicious activity. This monitoring is tagged under tactics and techniques such as Execution, Privilege Escalation, and Defense Evasion due to the nature of the exploit and the ways attackers leverage it to execute arbitrary commands, elevate privileges, or bypass security mechanisms.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "msdt.exe executed by a suspicious parent as seen in CVE-2022-30190 / Follina exploitation",
      "answer": "In order to detect msdt.exe executed by a suspicious parent as seen in CVE-2022-30190 / Follina exploitation, you should: Monitor process creations within Windows systems for instances where `msdt.exe` is initiated. Specifically, look out for executions of `msdt.exe` that are children of certain programs known for scripting or command execution, such as `cmd.exe`, `cscript.exe`, `mshta.exe`, `powershell.exe`, `pwsh.exe`, `regsvr32.exe`, `rundll32.exe`, `schtasks.exe`, `wmic.exe`, `wscript.exe`, and `wsl.exe`. These parent processes are often used by attackers to execute malicious scripts or commands. To ensure effective detection, confirm that both the process image ends with `\\msdt.exe` and its original filename is identified as `msdt.exe` to reduce the chance of missing malicious activity. This monitoring is tagged under tactics and techniques such as Execution, Privilege Escalation, and Defense Evasion due to the nature of the exploit and the ways attackers leverage it to execute arbitrary commands, elevate privileges, or bypass security mechanisms."
    }
  },
  {
    "instruction": "How can I detect: execution of different compiled Windows binaries of the impacket toolset (based on names or part of their names - could lead to false positives)",
    "context": "",
    "output": "In order to detect the execution of different compiled Windows binaries of the impacket toolset (based on names or part of their names - could lead to false positives), you should: Monitor the creation of processes on Windows systems for any instances where the name of the executable file indicates it could be part of the impacket collection of networking tools. Specifically, look out for files named or containing certain key strings such as 'goldenPac', 'karmaSMB', 'kintercept', 'ntlmrelayx', 'rpcdump', 'samrdump', 'secretsdump', 'smbexec', 'smbrelayx', 'wmiexec', 'wmipersist' or ending with 'atexec_windows.exe', 'dcomexec_windows.exe', 'dpapi_windows.exe', 'findDelegation_windows.exe', 'GetADUsers_windows.exe', 'GetNPUsers_windows.exe', 'getPac_windows.exe', 'getST_windows.exe', 'getTGT_windows.exe', 'GetUserSPNs_windows.exe', 'ifmap_windows.exe', 'mimikatz_windows.exe', 'netview_windows.exe', 'nmapAnswerMachine_windows.exe', 'opdump_windows.exe', 'psexec_windows.exe', 'rdp_check_windows.exe', 'sambaPipe_windows.exe', 'smbclient_windows.exe', 'smbserver_windows.exe', 'sniffer_windows.exe', 'sniff_windows.exe', 'split_windows.exe', 'ticketer_windows.exe'. Be aware that, while these detections are highly indicative of impacket toolset usage, they may also flag legitimate uses of these tools, thus careful analysis is required to distinguish between malicious activity and approved operations.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of different compiled Windows binaries of the impacket toolset (based on names or part of their names - could lead to false positives)",
      "answer": "In order to detect the execution of different compiled Windows binaries of the impacket toolset (based on names or part of their names - could lead to false positives), you should: Monitor the creation of processes on Windows systems for any instances where the name of the executable file indicates it could be part of the impacket collection of networking tools. Specifically, look out for files named or containing certain key strings such as 'goldenPac', 'karmaSMB', 'kintercept', 'ntlmrelayx', 'rpcdump', 'samrdump', 'secretsdump', 'smbexec', 'smbrelayx', 'wmiexec', 'wmipersist' or ending with 'atexec_windows.exe', 'dcomexec_windows.exe', 'dpapi_windows.exe', 'findDelegation_windows.exe', 'GetADUsers_windows.exe', 'GetNPUsers_windows.exe', 'getPac_windows.exe', 'getST_windows.exe', 'getTGT_windows.exe', 'GetUserSPNs_windows.exe', 'ifmap_windows.exe', 'mimikatz_windows.exe', 'netview_windows.exe', 'nmapAnswerMachine_windows.exe', 'opdump_windows.exe', 'psexec_windows.exe', 'rdp_check_windows.exe', 'sambaPipe_windows.exe', 'smbclient_windows.exe', 'smbserver_windows.exe', 'sniffer_windows.exe', 'sniff_windows.exe', 'split_windows.exe', 'ticketer_windows.exe'. Be aware that, while these detections are highly indicative of impacket toolset usage, they may also flag legitimate uses of these tools, thus careful analysis is required to distinguish between malicious activity and approved operations."
    }
  },
  {
    "instruction": "Please help me detect the following: suspicious command with /dev/tcp",
    "context": "",
    "output": "Sure!\nIn order to detect suspicious command with /dev/tcp, you should monitor Linux system logs for the appearance of specific patterns indicating potential malicious activity. Specifically, search for commands that involve redirection or connections via /dev/tcp or /dev/udp. Such commands usually include the use of 'cat', 'exec', 'echo', and 'bash' in conjunction with /dev/tcp or /dev/udp to establish a connection, execute commands, or send data. Look out for patterns like 'cat </dev/tcp/', 'exec 3<>/dev/tcp/', 'echo >/dev/tcp/', 'bash -i >& /dev/tcp/', 'sh -i >& /dev/udp/', '0<&196;exec 196<>/dev/tcp/', 'exec 5<>/dev/tcp/', '(sh)0>/dev/tcp/', 'bash -c ''bash -i >& /dev/tcp/' and 'echo -e ''#!/bin/bash\\nbash -i >& /dev/tcp/'. These patterns might be used by attackers to execute commands remotely, create reverse shells, or exfiltrate data. It's important to closely investigate occurrences of these patterns as their usage might indicate an intrusion or an attempt to leverage your system as part of an attack, although keep in mind that there might be unknown false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious command with /dev/tcp",
      "answer": "In order to detect suspicious command with /dev/tcp, you should monitor Linux system logs for the appearance of specific patterns indicating potential malicious activity. Specifically, search for commands that involve redirection or connections via /dev/tcp or /dev/udp. Such commands usually include the use of 'cat', 'exec', 'echo', and 'bash' in conjunction with /dev/tcp or /dev/udp to establish a connection, execute commands, or send data. Look out for patterns like 'cat </dev/tcp/', 'exec 3<>/dev/tcp/', 'echo >/dev/tcp/', 'bash -i >& /dev/tcp/', 'sh -i >& /dev/udp/', '0<&196;exec 196<>/dev/tcp/', 'exec 5<>/dev/tcp/', '(sh)0>/dev/tcp/', 'bash -c ''bash -i >& /dev/tcp/' and 'echo -e ''#!/bin/bash\\nbash -i >& /dev/tcp/'. These patterns might be used by attackers to execute commands remotely, create reverse shells, or exfiltrate data. It's important to closely investigate occurrences of these patterns as their usage might indicate an intrusion or an attempt to leverage your system as part of an attack, although keep in mind that there might be unknown false positives."
    }
  },
  {
    "instruction": "Please help me detect the following: Processes accessing the camera and microphone from suspicious folder",
    "context": "",
    "output": "Sure!\nIn order to detect processes accessing the camera and microphone from suspicious folders, you should monitor Windows registry events for specific patterns. Focus on detecting when any registry modifications target entries related to the camera and microphone, particularly those within the CapabilityAccessManager's ConsentStore. This involves looking for changes under '\\Software\\Microsoft\\Windows\\CurrentVersion\\CapabilityAccessManager\\ConsentStore\\' and '\\NonPackaged' paths which indicate direct access controls alterations for these devices. Additionally, be cautious of registry entries pointing to temporary or less secure locations such as Windows Temp folder, Recycle Bin, and user-specific directories like Public, Default, and Desktop. These locations are unconventional for legitimate software accessing such sensitive devices and are therefore suspicious. It's noteworthy that certain legitimate applications, for example, video conferencing software, might run temporarily from these locations, but such instances are unusual hence tagged with a high level of concern. The focus here is on spotting potential unauthorized access or control attempts over the computer's camera and microphone, aligning with defensive tactics against espionage and unauthorized data collection.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Processes accessing the camera and microphone from suspicious folder",
      "answer": "In order to detect processes accessing the camera and microphone from suspicious folders, you should monitor Windows registry events for specific patterns. Focus on detecting when any registry modifications target entries related to the camera and microphone, particularly those within the CapabilityAccessManager's ConsentStore. This involves looking for changes under '\\Software\\Microsoft\\Windows\\CurrentVersion\\CapabilityAccessManager\\ConsentStore\\' and '\\NonPackaged' paths which indicate direct access controls alterations for these devices. Additionally, be cautious of registry entries pointing to temporary or less secure locations such as Windows Temp folder, Recycle Bin, and user-specific directories like Public, Default, and Desktop. These locations are unconventional for legitimate software accessing such sensitive devices and are therefore suspicious. It's noteworthy that certain legitimate applications, for example, video conferencing software, might run temporarily from these locations, but such instances are unusual hence tagged with a high level of concern. The focus here is on spotting potential unauthorized access or control attempts over the computer's camera and microphone, aligning with defensive tactics against espionage and unauthorized data collection."
    }
  },
  {
    "instruction": "Explain how should I detect the following: execution of certutil with either the \"decode\" or \"decodehex\" flags to decode base64 or hex encoded files. This can be abused by attackers to decode an encoded payload before execution",
    "context": "",
    "output": "In order to detect the execution of certutil with either the \"decode\" or \"decodehex\" flags to decode base64 or hex encoded files, which can be abused by attackers to decode an encoded payload before execution, you should: Monitor Windows process creation logs for instances where the process image ends with '\\certutil.exe' or has an OriginalFileName of 'CertUtil.exe'. Additionally, look for command-line executions containing either '-decode ', '/decode ', '-decodehex ', or '/decodehex ' to identify the specific use of certutil for decoding base64 or hex encoded files. It's important to consider all these selection criteria together to accurately identify potential malicious activity. While monitoring, be aware that there can be legitimate uses of these certutil commands, so unknown instances should be considered as potential false positives, rated at a medium level of concern. This approach aids in recognizing tactics and techniques resembling the usage of encoding/decoding in the attack lifecycle, without labeling it under specific MITRE ATT&CK taxonomy.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of certutil with either the \"decode\" or \"decodehex\" flags to decode base64 or hex encoded files. This can be abused by attackers to decode an encoded payload before execution",
      "answer": "In order to detect the execution of certutil with either the \"decode\" or \"decodehex\" flags to decode base64 or hex encoded files, which can be abused by attackers to decode an encoded payload before execution, you should: Monitor Windows process creation logs for instances where the process image ends with '\\certutil.exe' or has an OriginalFileName of 'CertUtil.exe'. Additionally, look for command-line executions containing either '-decode ', '/decode ', '-decodehex ', or '/decodehex ' to identify the specific use of certutil for decoding base64 or hex encoded files. It's important to consider all these selection criteria together to accurately identify potential malicious activity. While monitoring, be aware that there can be legitimate uses of these certutil commands, so unknown instances should be considered as potential false positives, rated at a medium level of concern. This approach aids in recognizing tactics and techniques resembling the usage of encoding/decoding in the attack lifecycle, without labeling it under specific MITRE ATT&CK taxonomy."
    }
  },
  {
    "instruction": "Explain how should I detect the following: Triggers on any Sysmon file block executable event. Which should indicates a violation of the block policy set",
    "context": "",
    "output": "In order to trigger on any Sysmon file block executable event, which should indicate a violation of the block policy set, you should: Focus on monitoring Windows systems specifically looking into file block events captured by Sysmon. The primary event of interest is identified by Event ID 27, which signifies any instance where a file block executable event occurs. This is a critical sign that the system's block policy has been violated. The detection strategy is straightforward, hinging entirely on the presence of this particular event. Given the context, false positives are unlikely, suggesting that events matching this criterion are highly indicative of the described scenario. This monitoring approach is of a high importance due to the potential security implications of policy violations.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Triggers on any Sysmon file block executable event. Which should indicates a violation of the block policy set",
      "answer": "In order to trigger on any Sysmon file block executable event, which should indicate a violation of the block policy set, you should: Focus on monitoring Windows systems specifically looking into file block events captured by Sysmon. The primary event of interest is identified by Event ID 27, which signifies any instance where a file block executable event occurs. This is a critical sign that the system's block policy has been violated. The detection strategy is straightforward, hinging entirely on the presence of this particular event. Given the context, false positives are unlikely, suggesting that events matching this criterion are highly indicative of the described scenario. This monitoring approach is of a high importance due to the potential security implications of policy violations."
    }
  },
  {
    "instruction": "How to detect: new BITS transfer job where the LocalName/Saved file is stored in a potentially suspicious location",
    "context": "",
    "output": "In order to Detects new BITS transfer job where the LocalName/Saved file is stored in a potentially suspicious location, you should: Monitor Windows Background Intelligent Transfer Service (BITS) client logs specifically to catch events with an ID of 16403, which signifies the creation of a new BITS transfer job. Particularly, focus on identifying any job where the saved file (denoted by LocalName) is kept in locations that might be generally considered unconventional or suspicious for regular user or system activities. These locations include the desktop (any path containing '\\Desktop\\'), the public users' directory ('C:\\Users\\Public\\'), and the performance logs directory ('C:\\PerfLogs\\'). While these directories can be used legitimately, their utilization for storing files from BITS transfer jobs could indicate malicious behavior, such as staging areas for malware or tools by attackers. It's noted that detections regarding these specifics might occasionally trigger false positives due to unexpected but legitimate uses, hence the assignment of a high severity level, emphasizing the need for further investigation upon detection.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "new BITS transfer job where the LocalName/Saved file is stored in a potentially suspicious location",
      "answer": "In order to Detects new BITS transfer job where the LocalName/Saved file is stored in a potentially suspicious location, you should: Monitor Windows Background Intelligent Transfer Service (BITS) client logs specifically to catch events with an ID of 16403, which signifies the creation of a new BITS transfer job. Particularly, focus on identifying any job where the saved file (denoted by LocalName) is kept in locations that might be generally considered unconventional or suspicious for regular user or system activities. These locations include the desktop (any path containing '\\Desktop\\'), the public users' directory ('C:\\Users\\Public\\'), and the performance logs directory ('C:\\PerfLogs\\'). While these directories can be used legitimately, their utilization for storing files from BITS transfer jobs could indicate malicious behavior, such as staging areas for malware or tools by attackers. It's noted that detections regarding these specifics might occasionally trigger false positives due to unexpected but legitimate uses, hence the assignment of a high severity level, emphasizing the need for further investigation upon detection."
    }
  },
  {
    "instruction": "Explain how should I detect the following: Alert when a user has performed an export to a search using 'New-ComplianceSearchAction' with the '-Export' flag. This detection will detect PST export even if the 'eDiscovery search or exported' alert is disabled in the O365.This rule will apply to ExchangePowerShell usage and from the cloud.",
    "context": "",
    "output": "In order to alert when a user has performed an export to a search using 'New-ComplianceSearchAction' with the '-Export' flag, especially noting that this detection will capture PST exports even if the 'eDiscovery search or exported' alert is turned off in O365, and it applies to both ExchangePowerShell usage and actions performed from the cloud, you should: Monitor for activities within the Microsoft 365 threat management service logs, specifically focusing on events originating from the SecurityComplianceCenter. Look for actions that involve the creation of a new compliance search action ('New-ComplianceSearchAction') specified with an '-Export' flag, which results in exporting content into a PST file format. This activity might signify potentially unauthorized data exports and needs surveillance despite the possibility of such actions being conducted for legitimate reasons. As exporting PST files involves accessing potentially sensitive information, such actions, while they could be legitimate, necessitate careful monitoring due to their sensitive nature.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Alert when a user has performed an export to a search using 'New-ComplianceSearchAction' with the '-Export' flag. This detection will detect PST export even if the 'eDiscovery search or exported' alert is disabled in the O365.This rule will apply to ExchangePowerShell usage and from the cloud.",
      "answer": "In order to alert when a user has performed an export to a search using 'New-ComplianceSearchAction' with the '-Export' flag, especially noting that this detection will capture PST exports even if the 'eDiscovery search or exported' alert is turned off in O365, and it applies to both ExchangePowerShell usage and actions performed from the cloud, you should: Monitor for activities within the Microsoft 365 threat management service logs, specifically focusing on events originating from the SecurityComplianceCenter. Look for actions that involve the creation of a new compliance search action ('New-ComplianceSearchAction') specified with an '-Export' flag, which results in exporting content into a PST file format. This activity might signify potentially unauthorized data exports and needs surveillance despite the possibility of such actions being conducted for legitimate reasons. As exporting PST files involves accessing potentially sensitive information, such actions, while they could be legitimate, necessitate careful monitoring due to their sensitive nature."
    }
  },
  {
    "instruction": "Can you explain how to detect: use of the 'Launch-VsDevShell.ps1' Microsoft signed script to execute commands.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect the use of the 'Launch-VsDevShell.ps1' Microsoft signed script to execute commands, you should: Monitor process creation events in Windows systems. Specifically, focus on identifying instances where the command line contains the script name 'Launch-VsDevShell.ps1'. Also, pay additional attention to command lines that include the strings 'VsWherePath ' or 'VsInstallationPath ', as these are indicative of command executions related to the script. It is important to consider that while these detections are aimed at identifying malicious activity, legitimate development-related usage of this script might lead to false positives. Therefore, context and additional analysis may be necessary to differentiate between benign and suspicious activities. The detection carries a medium severity level, highlighting the need for prompt investigation while balancing the possibility of legitimate use cases.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "use of the 'Launch-VsDevShell.ps1' Microsoft signed script to execute commands.",
      "answer": "In order to detect the use of the 'Launch-VsDevShell.ps1' Microsoft signed script to execute commands, you should: Monitor process creation events in Windows systems. Specifically, focus on identifying instances where the command line contains the script name 'Launch-VsDevShell.ps1'. Also, pay additional attention to command lines that include the strings 'VsWherePath ' or 'VsInstallationPath ', as these are indicative of command executions related to the script. It is important to consider that while these detections are aimed at identifying malicious activity, legitimate development-related usage of this script might lead to false positives. Therefore, context and additional analysis may be necessary to differentiate between benign and suspicious activities. The detection carries a medium severity level, highlighting the need for prompt investigation while balancing the possibility of legitimate use cases."
    }
  },
  {
    "instruction": "Please help me detect the following: uncommon or suspicious child processes spawning from a VsCode \"code.exe\" process. This could indicate an attempt of persistence via VsCode tasks or terminal profiles.",
    "context": "",
    "output": "Sure!\nIn order to detect uncommon or suspicious child processes spawning from a VsCode \"code.exe\" process, which could indicate an attempt of persistence via VsCode tasks or terminal profiles, you should: Monitor the creation of processes on Windows systems, specifically focusing on any instance where \"code.exe\" initiates the creation of child processes. Be particularly vigilant for child processes such as \"calc.exe\", \"regsvr32.exe\", \"rundll32.exe\", \"cscript.exe\", and \"wscript.exe\", which are commonly associated with legitimate system functions but can be repurposed for malicious activity. Additionally, pay attention to command-line interfaces like \"powershell.exe\", \"pwsh.exe\", and \"cmd.exe\" when they execute commands that include \"Invoke-Expressions\", \"IEX\", \"Invoke-Command\", \"ICM\", \"DownloadString\", \"rundll32\", \"regsvr32\", \"wscript\", and \"cscript\", as these could be indicators of scripts being run for download or execution of malicious payloads. Furthermore, scrutinize the paths from which these child processes are initiated, with specific focus on directories commonly exploited for temporary file storage and execution by adversaries, such as \"C:\\Users\\Public\\\", \"C:\\Windows\\Temp\\\", and \"C:\\Temp\\\". It's crucial to handle potential false positives carefully, particularly in development environments where Visual Studio Code is used extensively and tasks may legitimately compile or execute various types of code that could falsely trigger these detections. The sensitivity of this monitoring should be set to a medium level, balancing the need to detect potential intrusions against the risk of generating excessive false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "uncommon or suspicious child processes spawning from a VsCode \"code.exe\" process. This could indicate an attempt of persistence via VsCode tasks or terminal profiles.",
      "answer": "In order to detect uncommon or suspicious child processes spawning from a VsCode \"code.exe\" process, which could indicate an attempt of persistence via VsCode tasks or terminal profiles, you should: Monitor the creation of processes on Windows systems, specifically focusing on any instance where \"code.exe\" initiates the creation of child processes. Be particularly vigilant for child processes such as \"calc.exe\", \"regsvr32.exe\", \"rundll32.exe\", \"cscript.exe\", and \"wscript.exe\", which are commonly associated with legitimate system functions but can be repurposed for malicious activity. Additionally, pay attention to command-line interfaces like \"powershell.exe\", \"pwsh.exe\", and \"cmd.exe\" when they execute commands that include \"Invoke-Expressions\", \"IEX\", \"Invoke-Command\", \"ICM\", \"DownloadString\", \"rundll32\", \"regsvr32\", \"wscript\", and \"cscript\", as these could be indicators of scripts being run for download or execution of malicious payloads. Furthermore, scrutinize the paths from which these child processes are initiated, with specific focus on directories commonly exploited for temporary file storage and execution by adversaries, such as \"C:\\Users\\Public\\\", \"C:\\Windows\\Temp\\\", and \"C:\\Temp\\\". It's crucial to handle potential false positives carefully, particularly in development environments where Visual Studio Code is used extensively and tasks may legitimately compile or execute various types of code that could falsely trigger these detections. The sensitivity of this monitoring should be set to a medium level, balancing the need to detect potential intrusions against the risk of generating excessive false positives."
    }
  },
  {
    "instruction": "How can I detect: execution of the builtin \"rmdir\" command in order to delete directories.\nAdversaries may delete files left behind by the actions of their intrusion activity.\nMalware, tools, or other non-native files dropped or created on a system by an adversary may leave traces to indicate to what was done within a network and how.\nRemoval of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\n",
    "context": "",
    "output": "In order to detect execution of the builtin \"rmdir\" command in order to delete directories and thus, identify adversaries' attempts to remove traces of their intrusion activities, including malware, tools, or other non-native files to minimize their footprint, you should: Focus on monitoring the creation of processes within Windows environments. Specifically, keep an eye out for the activation of 'cmd.exe' or instances where its original file name 'Cmd.Exe' is involved. Additionally, watch closely for command lines containing the 'rmdir' command, especially those that also include the flags '/s' and '/q'. These flags, when used together, indicate a forceful and silent removal of directories and all of their contents, which could suggest an attempt to erase evidence of an intrusion or malicious activity. This detection strategy, while set at a low alert level due to the potential of false positives\u2014since the actions could sometimes be part of legitimate system or network maintenance\u2014remains a critical piece in identifying and responding to potential attempts by attackers to clean up after themselves and hide their tracks.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of the builtin \"rmdir\" command in order to delete directories.\nAdversaries may delete files left behind by the actions of their intrusion activity.\nMalware, tools, or other non-native files dropped or created on a system by an adversary may leave traces to indicate to what was done within a network and how.\nRemoval of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\n",
      "answer": "In order to detect execution of the builtin \"rmdir\" command in order to delete directories and thus, identify adversaries' attempts to remove traces of their intrusion activities, including malware, tools, or other non-native files to minimize their footprint, you should: Focus on monitoring the creation of processes within Windows environments. Specifically, keep an eye out for the activation of 'cmd.exe' or instances where its original file name 'Cmd.Exe' is involved. Additionally, watch closely for command lines containing the 'rmdir' command, especially those that also include the flags '/s' and '/q'. These flags, when used together, indicate a forceful and silent removal of directories and all of their contents, which could suggest an attempt to erase evidence of an intrusion or malicious activity. This detection strategy, while set at a low alert level due to the potential of false positives\u2014since the actions could sometimes be part of legitimate system or network maintenance\u2014remains a critical piece in identifying and responding to potential attempts by attackers to clean up after themselves and hide their tracks."
    }
  },
  {
    "instruction": "Explain how should I detect the following: multiple failed logins with multiple valid domain accounts from a single source system using the Kerberos protocol.",
    "context": "",
    "output": "In order to detect multiple failed logins with multiple valid domain accounts from a single source system using the Kerberos protocol, you should focus on analyzing security logs from Windows systems. Specifically, look for events with ID 4771, which indicate a Kerberos pre-authentication failure, accompanied by a status code '0x18'. This status code signals that the failure was due to a bad password, which is a common indicator of attempted unauthorized access.\n\nWhen examining these events, it's essential to exclude any that are targeting computer accounts (those ending in '$'), as these could represent legitimate system activities and thus reduce the accuracy of your detection efforts. Additionally, consider the timeframe of observed activities; occurrences should be aggregated within a 24-hour period.\n\nThe condition for raising an alert should be based on observing more than ten failed login attempts from a single IP address, targeting different user accounts. This pattern of behavior is indicative of an adversary attempting to gain unauthorized access using multiple account credentials, a tactic often employed in brute force or password spraying attacks.\n\nIt's important to be aware of potential sources of false positives, which include vulnerability scanners, misconfigured systems, remote administration tools, VPN terminators, and multi-user environments like Citrix server farms. These legitimate tools and environments can sometimes mimic the behavior of an attempted attack, so additional context and investigation may be required to accurately interpret alerts based on this detection strategy.\n\nBy focusing on these specific criteria and patterns of behavior, organizations can more effectively identify potential unauthorized access attempts using the Kerberos protocol, allowing them to respond swiftly and mitigate potential risks to their environments.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "multiple failed logins with multiple valid domain accounts from a single source system using the Kerberos protocol.",
      "answer": "In order to detect multiple failed logins with multiple valid domain accounts from a single source system using the Kerberos protocol, you should focus on analyzing security logs from Windows systems. Specifically, look for events with ID 4771, which indicate a Kerberos pre-authentication failure, accompanied by a status code '0x18'. This status code signals that the failure was due to a bad password, which is a common indicator of attempted unauthorized access.\n\nWhen examining these events, it's essential to exclude any that are targeting computer accounts (those ending in '$'), as these could represent legitimate system activities and thus reduce the accuracy of your detection efforts. Additionally, consider the timeframe of observed activities; occurrences should be aggregated within a 24-hour period.\n\nThe condition for raising an alert should be based on observing more than ten failed login attempts from a single IP address, targeting different user accounts. This pattern of behavior is indicative of an adversary attempting to gain unauthorized access using multiple account credentials, a tactic often employed in brute force or password spraying attacks.\n\nIt's important to be aware of potential sources of false positives, which include vulnerability scanners, misconfigured systems, remote administration tools, VPN terminators, and multi-user environments like Citrix server farms. These legitimate tools and environments can sometimes mimic the behavior of an attempted attack, so additional context and investigation may be required to accurately interpret alerts based on this detection strategy.\n\nBy focusing on these specific criteria and patterns of behavior, organizations can more effectively identify potential unauthorized access attempts using the Kerberos protocol, allowing them to respond swiftly and mitigate potential risks to their environments."
    }
  },
  {
    "instruction": "Please help me detect the following: file or folder's permissions being modified or tampered with.",
    "context": "",
    "output": "Sure!\nIn order to detect a file or folder's permissions being modified or tampered with, you should: observe the creation of process events on Windows systems for evidence of permission alteration or tampering. Specifically, look for processes ending with '\\cacls.exe', '\\icacls.exe', '\\net.exe', or '\\net1.exe' when these are used with options like '/grant', '/setowner', or '/inheritance:r', which indicate removing all inherited Access Control Entries (ACEs). Also, watch out for '\\attrib.exe' used alongside '-r', indicating the removal of read-only attributes, and '\\takeown.exe', which can signal an attempt to take ownership of a file or folder.\nExclude cases where the command line ends with 'ICACLS C:\\ProgramData\\dynatrace\\gateway\\config\\connectivity.history /reset', as this is likely a legitimate use case. Also, filter out instances where the command line includes interactions with the Dynatrace app or modifications of permissions involving specific user or system paths, such as 'ICACLS C:\\ProgramData\\dynatrace\\gateway\\config\\config.properties /grant :r ' with a specific security identifier, or operations initiated from within the Microsoft VS Code application.\nIt is important to monitor for these indications, considering such activity might be legitimate, like privileged users managing files or applications such as Dynatrace functioning normally. Monitor fields like ComputerName, User, and CommandLine for context on these actions. The detection level is set to medium due to possible legitimate use cases, thus analysts should investigate alerts to confirm malicious intent.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "file or folder's permissions being modified or tampered with.",
      "answer": "In order to detect a file or folder's permissions being modified or tampered with, you should: observe the creation of process events on Windows systems for evidence of permission alteration or tampering. Specifically, look for processes ending with '\\cacls.exe', '\\icacls.exe', '\\net.exe', or '\\net1.exe' when these are used with options like '/grant', '/setowner', or '/inheritance:r', which indicate removing all inherited Access Control Entries (ACEs). Also, watch out for '\\attrib.exe' used alongside '-r', indicating the removal of read-only attributes, and '\\takeown.exe', which can signal an attempt to take ownership of a file or folder.\nExclude cases where the command line ends with 'ICACLS C:\\ProgramData\\dynatrace\\gateway\\config\\connectivity.history /reset', as this is likely a legitimate use case. Also, filter out instances where the command line includes interactions with the Dynatrace app or modifications of permissions involving specific user or system paths, such as 'ICACLS C:\\ProgramData\\dynatrace\\gateway\\config\\config.properties /grant :r ' with a specific security identifier, or operations initiated from within the Microsoft VS Code application.\nIt is important to monitor for these indications, considering such activity might be legitimate, like privileged users managing files or applications such as Dynatrace functioning normally. Monitor fields like ComputerName, User, and CommandLine for context on these actions. The detection level is set to medium due to possible legitimate use cases, thus analysts should investigate alerts to confirm malicious intent."
    }
  },
  {
    "instruction": "Explain how should I detect the following: suspicious change of file privileges with chown and chmod commands",
    "context": "",
    "output": "In order to detect suspicious change of file privileges with chown and chmod commands, you should: Monitor Linux system logs, specifically focusing on the creation of processes. Within this monitoring, look for activities where the command line includes either the 'chown root' command to change the ownership of a file or directory to the root user or the commands 'chmod u+s' or 'chmod g+s' which are used to set the SUID (Set owner User ID up on execution) or SGID (Set Group ID) permissions on a file, respectively. These actions can potentially indicate an attempt to alter file or directory permissions in a way that could compromise system security. It's important to consider that such changes might sometimes be a part of legitimate administrative tasks, hence this kind of activity is classified with a low level of alertness.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious change of file privileges with chown and chmod commands",
      "answer": "In order to detect suspicious change of file privileges with chown and chmod commands, you should: Monitor Linux system logs, specifically focusing on the creation of processes. Within this monitoring, look for activities where the command line includes either the 'chown root' command to change the ownership of a file or directory to the root user or the commands 'chmod u+s' or 'chmod g+s' which are used to set the SUID (Set owner User ID up on execution) or SGID (Set Group ID) permissions on a file, respectively. These actions can potentially indicate an attempt to alter file or directory permissions in a way that could compromise system security. It's important to consider that such changes might sometimes be a part of legitimate administrative tasks, hence this kind of activity is classified with a low level of alertness."
    }
  },
  {
    "instruction": "Please help me detect the following: usage of known powershell cmdlets such as \"Clear-EventLog\" to clear the Windows event logs",
    "context": "",
    "output": "Sure!\nIn order to detect usage of known PowerShell cmdlets such as \"Clear-EventLog\" to clear the Windows event logs, you should: Monitor for PowerShell script executions that involve the use of specific cmdlets aimed at clearing Windows event logs. These cmdlets include 'Clear-EventLog', 'Remove-EventLog', 'Limit-EventLog', and 'Clear-WinEvent'. Such monitoring requires that Script Block Logging be enabled on the Windows system, as this enables logging of each PowerShell script block's execution. Identifying the usage of these cmdlets can signal an attempt to erase evidence of an intruder's activities or to otherwise manipulate log data for malicious purposes. However, it's important to investigate each case, as there can be rare legitimate uses of these cmdlets, such as part of installation processes or by cleaner scripts. The detection of these cmdlets' usage is considered of medium level importance for cybersecurity defenses.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of known powershell cmdlets such as \"Clear-EventLog\" to clear the Windows event logs",
      "answer": "In order to detect usage of known PowerShell cmdlets such as \"Clear-EventLog\" to clear the Windows event logs, you should: Monitor for PowerShell script executions that involve the use of specific cmdlets aimed at clearing Windows event logs. These cmdlets include 'Clear-EventLog', 'Remove-EventLog', 'Limit-EventLog', and 'Clear-WinEvent'. Such monitoring requires that Script Block Logging be enabled on the Windows system, as this enables logging of each PowerShell script block's execution. Identifying the usage of these cmdlets can signal an attempt to erase evidence of an intruder's activities or to otherwise manipulate log data for malicious purposes. However, it's important to investigate each case, as there can be rare legitimate uses of these cmdlets, such as part of installation processes or by cleaner scripts. The detection of these cmdlets' usage is considered of medium level importance for cybersecurity defenses."
    }
  },
  {
    "instruction": "How to detect: default filenames output from the execution of CrackMapExec and Impacket-secretsdump against an endpoint.",
    "context": "",
    "output": "In order to detect default filenames output from the execution of CrackMapExec and Impacket-secretsdump against an endpoint, you should focus on monitoring Windows file events. Look specifically for events where the image path ends with '\\svchost.exe'. This is indicative of a potentially malicious service execution. Furthermore, if your logging setup includes command line data for file events, add an additional layer of accuracy by checking for instances where the command line contains 'RemoteRegistry'. Also, pay attention to file creation events, especially files created in the Windows\\System32 directory with a temporary (.tmp) file extension following a specific pattern: an eight-character alphanumeric filename. This detection strategy is considered to have a high level of importance due to the nature of the activities it aims to uncover, which are related to tactics and techniques commonly used in credential access and lateral movement. Be aware that there might be instances where legitimate activities trigger this rule, although they are currently unknown.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "default filenames output from the execution of CrackMapExec and Impacket-secretsdump against an endpoint.",
      "answer": "In order to detect default filenames output from the execution of CrackMapExec and Impacket-secretsdump against an endpoint, you should focus on monitoring Windows file events. Look specifically for events where the image path ends with '\\svchost.exe'. This is indicative of a potentially malicious service execution. Furthermore, if your logging setup includes command line data for file events, add an additional layer of accuracy by checking for instances where the command line contains 'RemoteRegistry'. Also, pay attention to file creation events, especially files created in the Windows\\System32 directory with a temporary (.tmp) file extension following a specific pattern: an eight-character alphanumeric filename. This detection strategy is considered to have a high level of importance due to the nature of the activities it aims to uncover, which are related to tactics and techniques commonly used in credential access and lateral movement. Be aware that there might be instances where legitimate activities trigger this rule, although they are currently unknown."
    }
  },
  {
    "instruction": "Explain how should I detect the following: creation of a new office macro files on the systems via an application (browser, mail client).",
    "context": "",
    "output": "In order to detect the creation of new office macro files on the systems via an application (browser, mail client), you should: Monitor file events on Windows systems focusing on the processes associated with email clients and browsers, such as RuntimeBroker.exe, outlook.exe, thunderbird.exe for email clients, and various common browsers including brave.exe, chrome.exe, firefox.exe, among others. Specifically, this involves tracking the creation of files with macro-enabled extensions like .docm, .dotm, .xlsm, .xltm, .potm, .pptm. It also includes detecting these macro files when they contain specific markers indicating they were downloaded from the internet (e.g., '.docm:Zone'). However, it is important to remember that not all detections are malicious. Legitimate macro files downloaded from the internet or sent as email attachments can trigger false positives. The overall risk level associated with these detections is considered medium.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "creation of a new office macro files on the systems via an application (browser, mail client).",
      "answer": "In order to detect the creation of new office macro files on the systems via an application (browser, mail client), you should: Monitor file events on Windows systems focusing on the processes associated with email clients and browsers, such as RuntimeBroker.exe, outlook.exe, thunderbird.exe for email clients, and various common browsers including brave.exe, chrome.exe, firefox.exe, among others. Specifically, this involves tracking the creation of files with macro-enabled extensions like .docm, .dotm, .xlsm, .xltm, .potm, .pptm. It also includes detecting these macro files when they contain specific markers indicating they were downloaded from the internet (e.g., '.docm:Zone'). However, it is important to remember that not all detections are malicious. Legitimate macro files downloaded from the internet or sent as email attachments can trigger false positives. The overall risk level associated with these detections is considered medium."
    }
  },
  {
    "instruction": "Can you explain how to detect: possible payload obfuscation via the commandline",
    "context": "",
    "output": "Certainly!\n\nIn order to detect possible payload obfuscation via the commandline, you should monitor the creation of processes on Windows systems for command lines that contain specific patterns of characters. These patterns are indicators of an attempt to obfuscate the actual commands being executed. Look out for command lines including doubled characters such as '^^', character sequences like '^|^', multiple semicolons in a row like ';;;;' or ',;,' and variations thereof. Additionally, watch out for attempts to hide or obfuscate references to command processor variables (e.g., '%COMSPEC:~') and manipulations of the command 'cmd' with inserted carets (e.g., 'c^m^d', '^c^m^d'). The presence of characters like 's^et ' in commands should also raise suspicion, as this could indicate an effort to set variables in a way that evades straightforward detection. Given the obfuscation attempts might not always originate from malicious activities, it's advised to investigate these occurrences to determine their nature and intent, acknowledging that false positives are possible but unspecified in this context.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "possible payload obfuscation via the commandline",
      "answer": "In order to detect possible payload obfuscation via the commandline, you should monitor the creation of processes on Windows systems for command lines that contain specific patterns of characters. These patterns are indicators of an attempt to obfuscate the actual commands being executed. Look out for command lines including doubled characters such as '^^', character sequences like '^|^', multiple semicolons in a row like ';;;;' or ',;,' and variations thereof. Additionally, watch out for attempts to hide or obfuscate references to command processor variables (e.g., '%COMSPEC:~') and manipulations of the command 'cmd' with inserted carets (e.g., 'c^m^d', '^c^m^d'). The presence of characters like 's^et ' in commands should also raise suspicion, as this could indicate an effort to set variables in a way that evades straightforward detection. Given the obfuscation attempts might not always originate from malicious activities, it's advised to investigate these occurrences to determine their nature and intent, acknowledging that false positives are possible but unspecified in this context."
    }
  },
  {
    "instruction": "Explain how should I detect the following: remote RPC calls useb by SharpHound to map remote connections and local group membership.",
    "context": "",
    "output": "In order to detect remote RPC calls used by SharpHound to map remote connections and local group membership, you should: \n\nMonitor application-level logs specifically from RPC Firewall for entries that match certain criteria indicating a potential SharpHound reconnaissance activity. These logs are essential for identifying when an unauthorized remote procedure call (RPC) attempts to map network connections or query local group memberships, actions commonly associated with adversarial reconnaissance efforts.\n\nFocus on filtering the log entries to find those with an `EventLog` value of `RPCFW` and an `EventID` of 3. These fields indicate that a relevant event was captured by the RPC Firewall, which is designed to monitor and regulate RPC traffic in an effort to safeguard against unauthorized or malicious calls.\n\nAdditionally, pay close attention to any events where the `InterfaceUuid` matches `4b324fc8-1670-01d3-1278-5a47bf6ee188` and the `OpNum` is 12. This specific combination of interface UUID and operation number can pinpoint activities associated with the SharpHound tool, a component of the BloodHound attack framework. SharpHound is known for its ability to effectively map out an organization's internal connections and user group memberships through RPC and other techniques.\n\nBe aware that there might be instances where legitimate RPC traffic triggers an alert. Therefore, it is crucial to consider unknown sources of false positives, indicating that not every detected event may represent a genuine threat. Nevertheless, given the high risk level associated with these indicators, they warrant close scrutiny and possibly immediate action.\n\nThis focused monitoring approach is vital for identifying and mitigating techniques associated with reconnaissance, as recognized by the MITRE ATT&CK framework under tactics and techniques related to discovery and lateral movement. By capturing specific RPC call patterns, you can effectively spot signs of an adversary conducting network reconnaissance or attempting to move laterally within your environment, potentially using information gathered by SharpHound.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "remote RPC calls useb by SharpHound to map remote connections and local group membership.",
      "answer": "In order to detect remote RPC calls used by SharpHound to map remote connections and local group membership, you should: \n\nMonitor application-level logs specifically from RPC Firewall for entries that match certain criteria indicating a potential SharpHound reconnaissance activity. These logs are essential for identifying when an unauthorized remote procedure call (RPC) attempts to map network connections or query local group memberships, actions commonly associated with adversarial reconnaissance efforts.\n\nFocus on filtering the log entries to find those with an `EventLog` value of `RPCFW` and an `EventID` of 3. These fields indicate that a relevant event was captured by the RPC Firewall, which is designed to monitor and regulate RPC traffic in an effort to safeguard against unauthorized or malicious calls.\n\nAdditionally, pay close attention to any events where the `InterfaceUuid` matches `4b324fc8-1670-01d3-1278-5a47bf6ee188` and the `OpNum` is 12. This specific combination of interface UUID and operation number can pinpoint activities associated with the SharpHound tool, a component of the BloodHound attack framework. SharpHound is known for its ability to effectively map out an organization's internal connections and user group memberships through RPC and other techniques.\n\nBe aware that there might be instances where legitimate RPC traffic triggers an alert. Therefore, it is crucial to consider unknown sources of false positives, indicating that not every detected event may represent a genuine threat. Nevertheless, given the high risk level associated with these indicators, they warrant close scrutiny and possibly immediate action.\n\nThis focused monitoring approach is vital for identifying and mitigating techniques associated with reconnaissance, as recognized by the MITRE ATT&CK framework under tactics and techniques related to discovery and lateral movement. By capturing specific RPC call patterns, you can effectively spot signs of an adversary conducting network reconnaissance or attempting to move laterally within your environment, potentially using information gathered by SharpHound."
    }
  },
  {
    "instruction": "How to detect: execution of a set of builtin commands often used in recon stages by different attack groups",
    "context": "",
    "output": "In order to detect execution of a set of built-in commands often used in recon stages by different attack groups, you should monitor the process creation logs on Windows systems. Focus on identifying the execution of specific built-in command-line utilities that attackers frequently use for reconnaissance to gather information about the system, network, and users. These commands include `tasklist`, `net time`, `systeminfo`, `whoami`, `nbtstat`, `net start`, `qprocess`, `nslookup`, `hostname.exe`, and `netstat -an`, along with commands ending with specific patterns like `\\net1 start`, `\\net1 user /domain`, `\\net1 group /domain`, `\\net1 group \"domain admins\" /domain`, `\\net1 group \"Exchange Trusted Subsystem\" /domain`, `\\net1 accounts /domain`, and `\\net1 user net localgroup administrators`.\n\nTo effectively detect potential reconnaissance activity, aggregate the counts of these command executions within a short timeframe, specifically within 15 seconds. If more than four instances of these command executions are observed during this timeframe, it could indicate suspicious activity indicative of the initial reconnaissance phase of an attack. \n\nHowever, it's important to consider that these commands can also be used by legitimate scripts and administrative tools within an enterprise environment. Thus, the identification of these commands could lead to false positives. The severity level of these detections is considered medium. Mitigation strategies should take into account the context in which these commands are executed, including an assessment of whether their use is typical for the monitored environment. \n\nUnderstanding the tactics and techniques associated with these reconnaissance activities can aid organizations in defending against attack groups. The commands targeted for detection are common to a variety of tactics such as Discovery, which involves an adversary attempting to gather information they can use to plan subsequent operations; examples include system network configuration discovery, system information discovery, and domain trust discovery.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of a set of builtin commands often used in recon stages by different attack groups",
      "answer": "In order to detect execution of a set of built-in commands often used in recon stages by different attack groups, you should monitor the process creation logs on Windows systems. Focus on identifying the execution of specific built-in command-line utilities that attackers frequently use for reconnaissance to gather information about the system, network, and users. These commands include `tasklist`, `net time`, `systeminfo`, `whoami`, `nbtstat`, `net start`, `qprocess`, `nslookup`, `hostname.exe`, and `netstat -an`, along with commands ending with specific patterns like `\\net1 start`, `\\net1 user /domain`, `\\net1 group /domain`, `\\net1 group \"domain admins\" /domain`, `\\net1 group \"Exchange Trusted Subsystem\" /domain`, `\\net1 accounts /domain`, and `\\net1 user net localgroup administrators`.\n\nTo effectively detect potential reconnaissance activity, aggregate the counts of these command executions within a short timeframe, specifically within 15 seconds. If more than four instances of these command executions are observed during this timeframe, it could indicate suspicious activity indicative of the initial reconnaissance phase of an attack. \n\nHowever, it's important to consider that these commands can also be used by legitimate scripts and administrative tools within an enterprise environment. Thus, the identification of these commands could lead to false positives. The severity level of these detections is considered medium. Mitigation strategies should take into account the context in which these commands are executed, including an assessment of whether their use is typical for the monitored environment. \n\nUnderstanding the tactics and techniques associated with these reconnaissance activities can aid organizations in defending against attack groups. The commands targeted for detection are common to a variety of tactics such as Discovery, which involves an adversary attempting to gather information they can use to plan subsequent operations; examples include system network configuration discovery, system information discovery, and domain trust discovery."
    }
  },
  {
    "instruction": "How to detect: DLL's Loaded Via Word Containing VBA Macros Executing WMI Commands",
    "context": "",
    "output": "In order to detect DLLs loaded via Word containing VBA macros executing WMI commands, you should: Monitor Windows systems for the loading of specific dynamic-link libraries (DLLs) associated with Windows Management Instrumentation (WMI) commands. These DLLs include 'wmiutils.dll', 'wbemcomn.dll', 'wbemprox.dll', and 'wbemdisp.dll'. The detection focuses on instances where these DLLs are loaded by Microsoft Office applications, specifically Word ('winword.exe'), PowerPoint ('powerpnt.exe'), Excel ('excel.exe'), and Outlook ('outlook.exe'). Such activity may indicate the execution of WMI commands through VBA macros contained within these applications, which could signify malicious behavior. It's important to note that while this detection can provide valuable insights, it may also yield false positives and requires further investigation for accurate analysis. This monitoring approach falls under the detection category of image load events in Windows products, serving as an informational level of alert to possibly suspicious activity involving WMI.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "DLL's Loaded Via Word Containing VBA Macros Executing WMI Commands",
      "answer": "In order to detect DLLs loaded via Word containing VBA macros executing WMI commands, you should: Monitor Windows systems for the loading of specific dynamic-link libraries (DLLs) associated with Windows Management Instrumentation (WMI) commands. These DLLs include 'wmiutils.dll', 'wbemcomn.dll', 'wbemprox.dll', and 'wbemdisp.dll'. The detection focuses on instances where these DLLs are loaded by Microsoft Office applications, specifically Word ('winword.exe'), PowerPoint ('powerpnt.exe'), Excel ('excel.exe'), and Outlook ('outlook.exe'). Such activity may indicate the execution of WMI commands through VBA macros contained within these applications, which could signify malicious behavior. It's important to note that while this detection can provide valuable insights, it may also yield false positives and requires further investigation for accurate analysis. This monitoring approach falls under the detection category of image load events in Windows products, serving as an informational level of alert to possibly suspicious activity involving WMI."
    }
  },
  {
    "instruction": "Please help me detect the following: user downloads file by using CertOC.exe",
    "context": "",
    "output": "Sure!\nIn order to detect when a user downloads file by using CertOC.exe, you should: Monitor the creation of processes on Windows systems, with a particular focus on identifying instances where the process image name ends with '\\certoc.exe' or when the original file name is 'CertOC.exe'. Additionally, watch for command lines that contain '-GetCACAPS'. Both criteria need to be met for an alert to be considered accurate. This detection process is tagged under the MITRE ATT&CK tactics and techniques related to Execution. Be aware that there might be situations where legitimate activities trigger an alert, although such false positives are not currently known. The significance of detections based on these criteria is considered high, indicating a strong likelihood of malicious activity when such conditions are met.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "user downloads file by using CertOC.exe",
      "answer": "In order to detect when a user downloads file by using CertOC.exe, you should: Monitor the creation of processes on Windows systems, with a particular focus on identifying instances where the process image name ends with '\\certoc.exe' or when the original file name is 'CertOC.exe'. Additionally, watch for command lines that contain '-GetCACAPS'. Both criteria need to be met for an alert to be considered accurate. This detection process is tagged under the MITRE ATT&CK tactics and techniques related to Execution. Be aware that there might be situations where legitimate activities trigger an alert, although such false positives are not currently known. The significance of detections based on these criteria is considered high, indicating a strong likelihood of malicious activity when such conditions are met."
    }
  },
  {
    "instruction": "How can I detect: Change to authentication method could be an indicator of an attacker adding an auth method to the account so they can have continued access.",
    "context": "",
    "output": "In order to change to authentication method could be an indicator of an attacker adding an auth method to the account so they can have continued access, you should: Monitor Azure audit logs for entries that denote changes in authentication methods. Specifically, look for logs where the service logged is \"Authentication Methods\" within the \"UserManagement\" category, and the operation named \"User registered security info\". These are critical to identifying when a user's security information has been altered, which could indicate an unauthorized attempt to modify authentication methods, aiming for persistent access to an account. Be aware of false positives, which are currently unknown, signifying the importance of context in analysis. The severity of this activity is considered medium, highlighting its potential risk without suggesting immediate critical threat. This process is aligned with the MITRE ATT&CK framework, particularly focusing on tactics and techniques related to credential access and persistence through the manipulation of authentication mechanisms.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Change to authentication method could be an indicator of an attacker adding an auth method to the account so they can have continued access.",
      "answer": "In order to change to authentication method could be an indicator of an attacker adding an auth method to the account so they can have continued access, you should: Monitor Azure audit logs for entries that denote changes in authentication methods. Specifically, look for logs where the service logged is \"Authentication Methods\" within the \"UserManagement\" category, and the operation named \"User registered security info\". These are critical to identifying when a user's security information has been altered, which could indicate an unauthorized attempt to modify authentication methods, aiming for persistent access to an account. Be aware of false positives, which are currently unknown, signifying the importance of context in analysis. The severity of this activity is considered medium, highlighting its potential risk without suggesting immediate critical threat. This process is aligned with the MITRE ATT&CK framework, particularly focusing on tactics and techniques related to credential access and persistence through the manipulation of authentication mechanisms."
    }
  },
  {
    "instruction": "Explain how should I detect the following: shell spawned from Java host process, which could be a sign of exploitation (e.g. log4j exploitation)",
    "context": "",
    "output": "In order to detect shell spawned from Java host process, which could be a sign of exploitation (e.g. log4j exploitation), you should: focus on monitoring the creation of processes on Windows systems. Specifically, look for instances where a Java process (`java.exe`) is the parent process for the creation of command line (`cmd.exe`), PowerShell (`powershell.exe`), or PowerShell Core (`pwsh.exe`) processes. It's important to exclude any activity where the parent or child process's command line includes the term 'build', as this often indicates a legitimate use associated with Continuous Integration (CI) build agents rather than malicious activity. The detection holds a medium severity level, acknowledging that while not all instances of shell spawning from a Java process are malicious, this pattern warrants further investigation due to the potential link to exploitation efforts, like those seen with the log4j vulnerability. Be aware that legitimate uses of system binaries and company-specific internal usages might generate false positive alerts.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "shell spawned from Java host process, which could be a sign of exploitation (e.g. log4j exploitation)",
      "answer": "In order to detect shell spawned from Java host process, which could be a sign of exploitation (e.g. log4j exploitation), you should: focus on monitoring the creation of processes on Windows systems. Specifically, look for instances where a Java process (`java.exe`) is the parent process for the creation of command line (`cmd.exe`), PowerShell (`powershell.exe`), or PowerShell Core (`pwsh.exe`) processes. It's important to exclude any activity where the parent or child process's command line includes the term 'build', as this often indicates a legitimate use associated with Continuous Integration (CI) build agents rather than malicious activity. The detection holds a medium severity level, acknowledging that while not all instances of shell spawning from a Java process are malicious, this pattern warrants further investigation due to the potential link to exploitation efforts, like those seen with the log4j vulnerability. Be aware that legitimate uses of system binaries and company-specific internal usages might generate false positive alerts."
    }
  },
  {
    "instruction": "Please help me detect the following: Identifies IPs from which users grant access to other users on azure resources and alerts when a previously unseen source IP address is used.",
    "context": "",
    "output": "Sure!\nIn order to identify IPs from which users grant access to other users on Azure resources and alert when a previously unseen source IP address is used, you should monitor Azure Activity logs for any instances of role assignments being created or modified. Specifically, keep an eye out for events containing the keyword \"Microsoft.Authorization/roleAssignments/write\". This indicates that a user has been granted access to an Azure resource, which could potentially be a security concern if originating from an unfamiliar or unauthorized source IP. Bear in mind that legitimate adjustments to role assignments can trigger this alert, so it's important to differentiate between normal administrative behavior and potentially malicious actions. The security level for this type of activity is considered medium, implying that while not every instance is an immediate threat, unusual or unexpected occurrences should be investigated to ensure they are not indicative of a compromised account or insider threat.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Identifies IPs from which users grant access to other users on azure resources and alerts when a previously unseen source IP address is used.",
      "answer": "In order to identify IPs from which users grant access to other users on Azure resources and alert when a previously unseen source IP address is used, you should monitor Azure Activity logs for any instances of role assignments being created or modified. Specifically, keep an eye out for events containing the keyword \"Microsoft.Authorization/roleAssignments/write\". This indicates that a user has been granted access to an Azure resource, which could potentially be a security concern if originating from an unfamiliar or unauthorized source IP. Bear in mind that legitimate adjustments to role assignments can trigger this alert, so it's important to differentiate between normal administrative behavior and potentially malicious actions. The security level for this type of activity is considered medium, implying that while not every instance is an immediate threat, unusual or unexpected occurrences should be investigated to ensure they are not indicative of a compromised account or insider threat."
    }
  },
  {
    "instruction": "Explain how should I detect the following: Detect use of the Windows 8.3 short name. Which could be used as a method to avoid Image based detection",
    "context": "",
    "output": "In order to detect the use of the Windows 8.3 short name, which could be used as a method to avoid Image-based detection, you should: Monitor process creation events on Windows systems for the execution of files that utilize Windows 8.3 short naming convention, potentially indicative of an attempt to evade detection. This involves looking for executable files (e.g., .exe, .bat, .msi, .dll, .ps1, etc.) that have a shortened name format, typically represented with a tilde (~) followed by a number (e.g., ~1.exe, ~2.bat). It's important to exclude certain parent processes from triggering alerts, such as 'C:\\Windows\\explorer.exe', processes starting under the 'WebEx' or 'thor' directories, any process with '-installer.exe' in its name, the specific WinZip launch process 'C:\\PROGRA~1\\WinZip\\WZPREL~1.EXE', and any application path containing '\\vcredi'. These exclusions help reduce false positives by filtering out known legitimate uses of short names by certain applications or installation processes. The focus is on capturing anomalous or suspicious uses of short names that could signify an attempt to disguise malicious activities.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Detect use of the Windows 8.3 short name. Which could be used as a method to avoid Image based detection",
      "answer": "In order to detect the use of the Windows 8.3 short name, which could be used as a method to avoid Image-based detection, you should: Monitor process creation events on Windows systems for the execution of files that utilize Windows 8.3 short naming convention, potentially indicative of an attempt to evade detection. This involves looking for executable files (e.g., .exe, .bat, .msi, .dll, .ps1, etc.) that have a shortened name format, typically represented with a tilde (~) followed by a number (e.g., ~1.exe, ~2.bat). It's important to exclude certain parent processes from triggering alerts, such as 'C:\\Windows\\explorer.exe', processes starting under the 'WebEx' or 'thor' directories, any process with '-installer.exe' in its name, the specific WinZip launch process 'C:\\PROGRA~1\\WinZip\\WZPREL~1.EXE', and any application path containing '\\vcredi'. These exclusions help reduce false positives by filtering out known legitimate uses of short names by certain applications or installation processes. The focus is on capturing anomalous or suspicious uses of short names that could signify an attempt to disguise malicious activities."
    }
  },
  {
    "instruction": "Please help me detect the following: usage of bitsadmin downloading a file from a suspicious domain",
    "context": "",
    "output": "Sure!\nIn order to detect usage of bitsadmin downloading a file from a suspicious domain, you should: focus on the creation of processes within a Windows environment. Specifically, monitor for instances where the 'bitsadmin.exe' utility is invoked, identifiable either through its file name or the OriginalFileName attribute indicating 'bitsadmin.exe'. Key indicators include command line arguments such as '/transfer', '/create', or '/addfile', which are common flags used during file operations with bitsadmin. Additionally, heightened attention should be given to command line inputs that contain URLs pointing to known suspicious domains. These domains comprise various online paste services and file sharing platforms, such as '.ghostbin.co', '.hastebin.com', 'pastebin.com', 'mega.nz', and several others, known for being utilized in malicious operations for hosting or transferring malicious files. Any process creation event that matches these criteria, involving both the specific tool usage and connection to these domains, should be flagged for further investigation. While it's noted that there may be legitimate uses of this utility interacting with these services, such occurrences are expected to be rare and thus the alert level for this activity is considered high.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of bitsadmin downloading a file from a suspicious domain",
      "answer": "In order to detect usage of bitsadmin downloading a file from a suspicious domain, you should: focus on the creation of processes within a Windows environment. Specifically, monitor for instances where the 'bitsadmin.exe' utility is invoked, identifiable either through its file name or the OriginalFileName attribute indicating 'bitsadmin.exe'. Key indicators include command line arguments such as '/transfer', '/create', or '/addfile', which are common flags used during file operations with bitsadmin. Additionally, heightened attention should be given to command line inputs that contain URLs pointing to known suspicious domains. These domains comprise various online paste services and file sharing platforms, such as '.ghostbin.co', '.hastebin.com', 'pastebin.com', 'mega.nz', and several others, known for being utilized in malicious operations for hosting or transferring malicious files. Any process creation event that matches these criteria, involving both the specific tool usage and connection to these domains, should be flagged for further investigation. While it's noted that there may be legitimate uses of this utility interacting with these services, such occurrences are expected to be rare and thus the alert level for this activity is considered high."
    }
  },
  {
    "instruction": "Can you explain how to detect: Adversaries may execute their own malicious payloads by hijacking vulnerable file path references.\nAdversaries can take advantage of paths that lack surrounding quotations by placing an executable in a higher level directory within the path, so that Windows will choose the adversary's executable to launch.\n",
    "context": "",
    "output": "Certainly!\n\nIn order to detect when adversaries may execute their own malicious payloads by hijacking vulnerable file path references and potentially take advantage of paths that lack surrounding quotations by placing an executable in a higher-level directory within the path, so that Windows will choose the adversary's executable to launch, you should monitor your Windows environment specifically looking into file event logs for any activity related to the creation, modification, or execution of 'C:\\program.exe'. The absence of quotations in path references can be exploited by adversaries to execute harmful payloads, and any action involving this specific file should be scrutinized with a high level of suspicion, considering the possibility of it being a vector for an attack. The implications of detecting such an executable being manipulated are significant, suggesting a potential security breach where an adversary attempts to execute malicious code on the system. It is important to note that while this detection is regarded with a high level of confidence, there might be instances where legitimate software activities could trigger this alert, although such occurrences are unknown and expected to be rare.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Adversaries may execute their own malicious payloads by hijacking vulnerable file path references.\nAdversaries can take advantage of paths that lack surrounding quotations by placing an executable in a higher level directory within the path, so that Windows will choose the adversary's executable to launch.\n",
      "answer": "In order to detect when adversaries may execute their own malicious payloads by hijacking vulnerable file path references and potentially take advantage of paths that lack surrounding quotations by placing an executable in a higher-level directory within the path, so that Windows will choose the adversary's executable to launch, you should monitor your Windows environment specifically looking into file event logs for any activity related to the creation, modification, or execution of 'C:\\program.exe'. The absence of quotations in path references can be exploited by adversaries to execute harmful payloads, and any action involving this specific file should be scrutinized with a high level of suspicion, considering the possibility of it being a vector for an attack. The implications of detecting such an executable being manipulated are significant, suggesting a potential security breach where an adversary attempts to execute malicious code on the system. It is important to note that while this detection is regarded with a high level of confidence, there might be instances where legitimate software activities could trigger this alert, although such occurrences are unknown and expected to be rare."
    }
  },
  {
    "instruction": "How to detect: usage of the \"touch\" process in service file.",
    "context": "",
    "output": "In order to detect usage of the \"touch\" process in service file, you should monitor process creation logs on Linux systems for occurrences where the command `touch` is executed with specific command-line options. Specifically, look for actions where the command being executed ends with `/touch` indicating it\u2019s the `touch` command. Additionally, the command line should contain the `-t` option and should end with `.service`, which suggests that the `touch` command is being used to manipulate a service file. Be mindful that legitimate administrative activities may include changing the date of files using `touch`, which is considered a potential false positive scenario. The severity of this detection is set to medium, reflecting its importance in identifying potential manipulation or misuse of service files on Linux systems.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of the \"touch\" process in service file.",
      "answer": "In order to detect usage of the \"touch\" process in service file, you should monitor process creation logs on Linux systems for occurrences where the command `touch` is executed with specific command-line options. Specifically, look for actions where the command being executed ends with `/touch` indicating it\u2019s the `touch` command. Additionally, the command line should contain the `-t` option and should end with `.service`, which suggests that the `touch` command is being used to manipulate a service file. Be mindful that legitimate administrative activities may include changing the date of files using `touch`, which is considered a potential false positive scenario. The severity of this detection is set to medium, reflecting its importance in identifying potential manipulation or misuse of service files on Linux systems."
    }
  },
  {
    "instruction": "How can I detect: use of Set-ExecutionPolicy to set insecure policies",
    "context": "",
    "output": "In order to detect the use of Set-ExecutionPolicy to set insecure policies, you should: Monitor Windows PowerShell script activity for commands that include setting the execution policy to less restrictive modes such as 'Unrestricted', 'Bypass', or 'RemoteSigned'. This monitoring requires that Script Block Logging is enabled on the system. Specifically, check for the use of the 'Set-ExecutionPolicy' cmdlet in conjunction with any of these insecure policy options. However, be aware of legitimate administrative scripts that might use these commands for valid reasons; these should be considered as potential false positives. The focus is on preventing an attacker from lowering PowerShell execution policy settings to execute malicious scripts without restrictions.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "use of Set-ExecutionPolicy to set insecure policies",
      "answer": "In order to detect the use of Set-ExecutionPolicy to set insecure policies, you should: Monitor Windows PowerShell script activity for commands that include setting the execution policy to less restrictive modes such as 'Unrestricted', 'Bypass', or 'RemoteSigned'. This monitoring requires that Script Block Logging is enabled on the system. Specifically, check for the use of the 'Set-ExecutionPolicy' cmdlet in conjunction with any of these insecure policy options. However, be aware of legitimate administrative scripts that might use these commands for valid reasons; these should be considered as potential false positives. The focus is on preventing an attacker from lowering PowerShell execution policy settings to execute malicious scripts without restrictions."
    }
  },
  {
    "instruction": "Can you explain how to detect: suspicious command execution (cmd) via Windows Management Instrumentation (WMI) on a remote host. This could be indicative of adversary lateral movement.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect suspicious command execution (cmd) via Windows Management Instrumentation (WMI) on a remote host, which could be indicative of adversary lateral movement, you should: focus on monitoring the creation of processes on Windows systems. Specifically, keep an eye out for instances where the command prompt (cmd.exe) is launched as a process, and its parent process is the Windows Management Instrumentation Service Executable (WmiPrvSE.exe). This is a strong indicator of an attempt to execute commands remotely, often seen in the use of UNC paths (\\\\\\\\127.0.0.1\\\\) in the command line. Additionally, pay attention to command lines that contain redirection operators ('2>&1' or '1>'), as these are often used by adversaries to manage output and errors of remotely executed commands. The detection of such activities is considered to be of medium severity and should prompt further investigation, despite the potential for unknown false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "suspicious command execution (cmd) via Windows Management Instrumentation (WMI) on a remote host. This could be indicative of adversary lateral movement.",
      "answer": "In order to detect suspicious command execution (cmd) via Windows Management Instrumentation (WMI) on a remote host, which could be indicative of adversary lateral movement, you should: focus on monitoring the creation of processes on Windows systems. Specifically, keep an eye out for instances where the command prompt (cmd.exe) is launched as a process, and its parent process is the Windows Management Instrumentation Service Executable (WmiPrvSE.exe). This is a strong indicator of an attempt to execute commands remotely, often seen in the use of UNC paths (\\\\\\\\127.0.0.1\\\\) in the command line. Additionally, pay attention to command lines that contain redirection operators ('2>&1' or '1>'), as these are often used by adversaries to manage output and errors of remotely executed commands. The detection of such activities is considered to be of medium severity and should prompt further investigation, despite the potential for unknown false positives."
    }
  },
  {
    "instruction": "Can you explain how to detect: conditional access changes.",
    "context": "",
    "output": "Certainly!\n\nIn order to monitor and alert on conditional access changes, you should focus on the audit logs from Azure products. Specifically, keep an eye out for logs that record the message \"Add conditional access policy\". This action could indicate an attempt to modify access controls, which can impact the security posture of your environment. However, be mindful of potential false positives which might arise from misconfigured role permissions or legitimate but unexpected changes from certain users, user agents, or hostnames in your environment. The significance of these logs are considered to be of medium level, suggesting that while they are important to track, they should be contextualized within the broader security operations of your organization.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "conditional access changes.",
      "answer": "In order to monitor and alert on conditional access changes, you should focus on the audit logs from Azure products. Specifically, keep an eye out for logs that record the message \"Add conditional access policy\". This action could indicate an attempt to modify access controls, which can impact the security posture of your environment. However, be mindful of potential false positives which might arise from misconfigured role permissions or legitimate but unexpected changes from certain users, user agents, or hostnames in your environment. The significance of these logs are considered to be of medium level, suggesting that while they are important to track, they should be contextualized within the broader security operations of your organization."
    }
  },
  {
    "instruction": "Can you explain how to detect: exploitation indicators related to PaperCut MF/NG Exploitation",
    "context": "",
    "output": "Certainly!\n\nIn order to detect exploitation indicators related to PaperCut MF/NG Exploitation, you should: Monitor Windows process creation logs for execution patterns that might indicate an attack attempt. Specifically, look out for processes initiated with command lines that include a combination of specific flags and parameters. The first pattern to be wary of involves a command line that contains a call to 'powershell' with the switches '/c', indicating the execution of a command, and '-nop -w hidden', which serves to suppress Powershell scripting engine notifications and run the window in hidden mode. Additionally, this pattern includes 'Invoke-WebRequest', suggesting a web request is being made, combined with the downloading of a file named 'setup.msi' to the local system using '-OutFile'. The second pattern involves the use of 'msiexec ', a Windows installer component, followed by '/i ' to install the 'setup.msi' package quietly ('/qn '), with a parameter 'IntegratorLogin=fimaribahundq', which might be specific to the exploitation process. Such activities, especially with the presence of the 'setup.msi' file and specific command-line usage, are considered highly suspicious and unlikely to be false positives in the context of monitoring for PaperCut MF/NG exploitation attempts.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "exploitation indicators related to PaperCut MF/NG Exploitation",
      "answer": "In order to detect exploitation indicators related to PaperCut MF/NG Exploitation, you should: Monitor Windows process creation logs for execution patterns that might indicate an attack attempt. Specifically, look out for processes initiated with command lines that include a combination of specific flags and parameters. The first pattern to be wary of involves a command line that contains a call to 'powershell' with the switches '/c', indicating the execution of a command, and '-nop -w hidden', which serves to suppress Powershell scripting engine notifications and run the window in hidden mode. Additionally, this pattern includes 'Invoke-WebRequest', suggesting a web request is being made, combined with the downloading of a file named 'setup.msi' to the local system using '-OutFile'. The second pattern involves the use of 'msiexec ', a Windows installer component, followed by '/i ' to install the 'setup.msi' package quietly ('/qn '), with a parameter 'IntegratorLogin=fimaribahundq', which might be specific to the exploitation process. Such activities, especially with the presence of the 'setup.msi' file and specific command-line usage, are considered highly suspicious and unlikely to be false positives in the context of monitoring for PaperCut MF/NG exploitation attempts."
    }
  },
  {
    "instruction": "Can you explain how to detect: execution of \"logman\" utility in order to disable or delete Windows trace sessions",
    "context": "",
    "output": "Certainly!\n\nIn order to detect the execution of \"logman\" utility in order to disable or delete Windows trace sessions, you should: Monitor process creation events in Windows environments for the execution of \"logman.exe\". This detection focuses on instances where \"logman.exe\" is executed, specifically when its command line includes actions to \"stop\" or \"delete\" certain processes or services. Furthermore, it is important to watch for command-line invocations that attempt to manipulate or deactivate Windows trace sessions, especially those related to the Circular Kernel Context Logger, any event logs prefixed with \"EventLog-\", \"SYSMON TRACE\", or the \"SysmonDnsEtwSession\". The rule identifies these activities as potentially malicious due to their nature of disrupting trace and logging mechanisms which are vital for auditing and forensic analysis. It is worth noting that while this rule aims to capture malicious activity, there may be instances where legitimate administrative actions or installer tools perform similar operations. Therefore, such benign activities might trigger alerts and should be considered as possible false positives. The significance of detecting these actions is high, given their potential use in evading detection or hindering security investigations.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of \"logman\" utility in order to disable or delete Windows trace sessions",
      "answer": "In order to detect the execution of \"logman\" utility in order to disable or delete Windows trace sessions, you should: Monitor process creation events in Windows environments for the execution of \"logman.exe\". This detection focuses on instances where \"logman.exe\" is executed, specifically when its command line includes actions to \"stop\" or \"delete\" certain processes or services. Furthermore, it is important to watch for command-line invocations that attempt to manipulate or deactivate Windows trace sessions, especially those related to the Circular Kernel Context Logger, any event logs prefixed with \"EventLog-\", \"SYSMON TRACE\", or the \"SysmonDnsEtwSession\". The rule identifies these activities as potentially malicious due to their nature of disrupting trace and logging mechanisms which are vital for auditing and forensic analysis. It is worth noting that while this rule aims to capture malicious activity, there may be instances where legitimate administrative actions or installer tools perform similar operations. Therefore, such benign activities might trigger alerts and should be considered as possible false positives. The significance of detecting these actions is high, given their potential use in evading detection or hindering security investigations."
    }
  },
  {
    "instruction": "Explain how should I detect the following: multiple suspicious process in a limited timeframe",
    "context": "",
    "output": "In order to detect multiple suspicious processes in a limited timeframe, you should monitor the creation of processes on Windows systems. Specifically, watch for occurrences where processes associated with various system and network diagnostic tools, potentially malicious executables, or commands typically used by attackers or for administrative purposes are initiated. These include but are not limited to `arp.exe`, `at.exe`, `attrib.exe`, `cscript.exe`, `dsquery.exe`, `hostname.exe`, `ipconfig.exe`, `mimikatz.exe`, `nbtstat.exe`, `net.exe`, `netsh.exe`, `nslookup.exe`, `ping.exe`, `quser.exe`, `qwinsta.exe`, `reg.exe`, `runas.exe`, `sc.exe`, `schtasks.exe`, `ssh.exe`, `systeminfo.exe`, `taskkill.exe`, `telnet.exe`, `tracert.exe`, `wscript.exe`, `xcopy.exe`, `pscp.exe`, `copy.exe`, `robocopy.exe`, `certutil.exe`, `vssadmin.exe`, `powershell.exe`, `pwsh.exe`, `wevtutil.exe`, `psexec.exe`, `bcedit.exe`, `wbadmin.exe`, `icacls.exe`, and `diskpart.exe`.\n\nThe monitoring should be configured to trigger an alert if more than five of these processes are initiated within a 5-minute timeframe on the same machine. This can serve as an indication of an ongoing attack or unauthorized activity, as attackers often use a sequence of these tools to perform reconnaissance, elevate privileges, move laterally within a network, or exfiltrate data.\n\nTake into account that while monitoring processes is crucial for detecting potential security incidents, it is also important to consider the context in which these processes are executed. Some of them might be initiated by legitimate administrative tasks or scripts. Therefore, while setting up the detection, ensure there is a mechanism to review and adjust what constitutes normal activity in your environment, to minimize false positives. \n\nThis detection strategy is aligned with tactics and techniques from the MITRE ATT&CK framework including Discovery, Lateral Movement, Execution, Defense Evasion, Collection, Command and Control, and Credential Access, which describe how adversaries may use the processes listed above during their attacks.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "multiple suspicious process in a limited timeframe",
      "answer": "In order to detect multiple suspicious processes in a limited timeframe, you should monitor the creation of processes on Windows systems. Specifically, watch for occurrences where processes associated with various system and network diagnostic tools, potentially malicious executables, or commands typically used by attackers or for administrative purposes are initiated. These include but are not limited to `arp.exe`, `at.exe`, `attrib.exe`, `cscript.exe`, `dsquery.exe`, `hostname.exe`, `ipconfig.exe`, `mimikatz.exe`, `nbtstat.exe`, `net.exe`, `netsh.exe`, `nslookup.exe`, `ping.exe`, `quser.exe`, `qwinsta.exe`, `reg.exe`, `runas.exe`, `sc.exe`, `schtasks.exe`, `ssh.exe`, `systeminfo.exe`, `taskkill.exe`, `telnet.exe`, `tracert.exe`, `wscript.exe`, `xcopy.exe`, `pscp.exe`, `copy.exe`, `robocopy.exe`, `certutil.exe`, `vssadmin.exe`, `powershell.exe`, `pwsh.exe`, `wevtutil.exe`, `psexec.exe`, `bcedit.exe`, `wbadmin.exe`, `icacls.exe`, and `diskpart.exe`.\n\nThe monitoring should be configured to trigger an alert if more than five of these processes are initiated within a 5-minute timeframe on the same machine. This can serve as an indication of an ongoing attack or unauthorized activity, as attackers often use a sequence of these tools to perform reconnaissance, elevate privileges, move laterally within a network, or exfiltrate data.\n\nTake into account that while monitoring processes is crucial for detecting potential security incidents, it is also important to consider the context in which these processes are executed. Some of them might be initiated by legitimate administrative tasks or scripts. Therefore, while setting up the detection, ensure there is a mechanism to review and adjust what constitutes normal activity in your environment, to minimize false positives. \n\nThis detection strategy is aligned with tactics and techniques from the MITRE ATT&CK framework including Discovery, Lateral Movement, Execution, Defense Evasion, Collection, Command and Control, and Credential Access, which describe how adversaries may use the processes listed above during their attacks."
    }
  },
  {
    "instruction": "How can I detect: potential installation or installation attempts of known malicious appx packages",
    "context": "",
    "output": "In order to detect potential installation or installation attempts of known malicious appx packages, you should focus on monitoring the AppX Deployment Server service on Windows systems. Specifically, look for events with IDs 400 and 401, which are indicative of activities related to the deployment of application packages. Among these events, pay special attention to any instance where the PackageFullName attribute contains the string '3669e262-ec02-4e9d-bcb4-3d008b4afac9', as this is a known identifier for a malicious package. \n\nBe aware that there are rare cases where a malicious package might use the same name and version as a legitimate application, which could lead to false positives. Nonetheless, consistently monitoring for these specific event IDs and package names is crucial for identifying potential threats. This approach leverages tags associated with tactics and techniques such as Execution and Persistence, aligning with the behaviors typically expected from the deployment of malicious software through the misuse of Windows app deployment mechanisms.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "potential installation or installation attempts of known malicious appx packages",
      "answer": "In order to detect potential installation or installation attempts of known malicious appx packages, you should focus on monitoring the AppX Deployment Server service on Windows systems. Specifically, look for events with IDs 400 and 401, which are indicative of activities related to the deployment of application packages. Among these events, pay special attention to any instance where the PackageFullName attribute contains the string '3669e262-ec02-4e9d-bcb4-3d008b4afac9', as this is a known identifier for a malicious package. \n\nBe aware that there are rare cases where a malicious package might use the same name and version as a legitimate application, which could lead to false positives. Nonetheless, consistently monitoring for these specific event IDs and package names is crucial for identifying potential threats. This approach leverages tags associated with tactics and techniques such as Execution and Persistence, aligning with the behaviors typically expected from the deployment of malicious software through the misuse of Windows app deployment mechanisms."
    }
  },
  {
    "instruction": "Can you explain how to detect: This method detects a service install of the malicious Microsoft Network Realtime Inspection Service service described in StoneDrill report by Kaspersky",
    "context": "",
    "output": "Certainly!\n\nIn order to detect a service installation of the malicious Microsoft Network Realtime Inspection Service service described in StoneDrill report by Kaspersky, you should:\nMonitor Windows system logs for activities associated with the Service Control Manager. Specifically, look out for an event with an ID of 7045, which indicates a service was installed on the system. This event should relate to a service named \"NtsSrv\" and the path to the service\u2019s executable should end with ' LocalService'. Such events are of high concern due to their rarity and potential indication of a malicious activity, as legitimate uses of the service name and executable path pattern described are unlikely. This monitoring strategy is essential for identifying tactics and techniques akin to those used in sophisticated malware operations, particularly those documented in threats like the StoneDrill malware.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "This method detects a service install of the malicious Microsoft Network Realtime Inspection Service service described in StoneDrill report by Kaspersky",
      "answer": "In order to detect a service installation of the malicious Microsoft Network Realtime Inspection Service service described in StoneDrill report by Kaspersky, you should:\nMonitor Windows system logs for activities associated with the Service Control Manager. Specifically, look out for an event with an ID of 7045, which indicates a service was installed on the system. This event should relate to a service named \"NtsSrv\" and the path to the service\u2019s executable should end with ' LocalService'. Such events are of high concern due to their rarity and potential indication of a malicious activity, as legitimate uses of the service name and executable path pattern described are unlikely. This monitoring strategy is essential for identifying tactics and techniques akin to those used in sophisticated malware operations, particularly those documented in threats like the StoneDrill malware."
    }
  },
  {
    "instruction": "How to detect: usage of \"find\" binary in a suspicious manner to perform discovery",
    "context": "",
    "output": "In order to detect usage of \"find\" binary in a suspicious manner to perform discovery, you should focus on monitoring the creation of processes on Linux systems. Specifically, look out for processes that are being created where the name of the binary ends with '/find'. This indication focuses on the usage of the \"find\" command which is deployed in potentially malicious ways. The command lines to pay close attention to include those containing permission-related flags such as '-perm -4000', '-perm -2000', '-perm 0777', '-perm -222', '-perm -o w', '-perm -o x', '-perm -u=s', and '-perm -g=s'. These flags are typically used to search for files with specific permissions, which can be an indicator of an attacker trying to identify sensitive or executable files, modify file permissions, or locate files that can be written to or executed for exploitation purposes. Not all uses of these command-line options are malicious, but their presence, especially when combined, can signify an attempt at reconnaissance or preparation for further attacks. As with any detection mechanism, it's important to consider the context in which these commands are used to minimize false positives. The level of threat associated with this activity is considered medium.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "usage of \"find\" binary in a suspicious manner to perform discovery",
      "answer": "In order to detect usage of \"find\" binary in a suspicious manner to perform discovery, you should focus on monitoring the creation of processes on Linux systems. Specifically, look out for processes that are being created where the name of the binary ends with '/find'. This indication focuses on the usage of the \"find\" command which is deployed in potentially malicious ways. The command lines to pay close attention to include those containing permission-related flags such as '-perm -4000', '-perm -2000', '-perm 0777', '-perm -222', '-perm -o w', '-perm -o x', '-perm -u=s', and '-perm -g=s'. These flags are typically used to search for files with specific permissions, which can be an indicator of an attacker trying to identify sensitive or executable files, modify file permissions, or locate files that can be written to or executed for exploitation purposes. Not all uses of these command-line options are malicious, but their presence, especially when combined, can signify an attempt at reconnaissance or preparation for further attacks. As with any detection mechanism, it's important to consider the context in which these commands are used to minimize false positives. The level of threat associated with this activity is considered medium."
    }
  },
  {
    "instruction": "Please help me detect the following: registry modifications that change features of internal Windows tools (malware like Agent Tesla uses this technique)",
    "context": "",
    "output": "Sure!\nIn order to detect registry modifications that change features of internal Windows tools (malware like Agent Tesla uses this technique), you should monitor Windows registry settings concerning various crucial system functionalities and tools for any modifications. Specifically, focus on registry entries under the Windows product category, particularly those related to the registry setting modification events. These modifications can either enable or disable specific system features.\n\nFor event types indicating the setting of a value (`SetValue`), watch out for changes targeting registry keys ending with specific substrings. These keys include disabling registry tools, command prompt, task manager, notification center, change password option, lock workstation capability, and log off option from the start menu by setting their values to `DWORD (0x00000001)`. Additionally, also monitor for modifications that enable shutdown without logon, change consent prompt behavior for admin, enable push notification toasts, and alter storage device write protection settings by setting their values to `DWORD (0x00000000)`.\n\nIt's essential to be cautious and consider the context of detected activities since alterations to these registry settings could be part of legitimate administrative scripts or maintenance activities. The detection confidence for these kinds of modifications is considered medium level. Understanding and vigilance on these registry items are a proactive step in identifying tactics and techniques like defense evasion, execution, privilege escalation, and persistence that are associated with various sophisticated malware attacks, notably ones similar to Agent Tesla.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "registry modifications that change features of internal Windows tools (malware like Agent Tesla uses this technique)",
      "answer": "In order to detect registry modifications that change features of internal Windows tools (malware like Agent Tesla uses this technique), you should monitor Windows registry settings concerning various crucial system functionalities and tools for any modifications. Specifically, focus on registry entries under the Windows product category, particularly those related to the registry setting modification events. These modifications can either enable or disable specific system features.\n\nFor event types indicating the setting of a value (`SetValue`), watch out for changes targeting registry keys ending with specific substrings. These keys include disabling registry tools, command prompt, task manager, notification center, change password option, lock workstation capability, and log off option from the start menu by setting their values to `DWORD (0x00000001)`. Additionally, also monitor for modifications that enable shutdown without logon, change consent prompt behavior for admin, enable push notification toasts, and alter storage device write protection settings by setting their values to `DWORD (0x00000000)`.\n\nIt's essential to be cautious and consider the context of detected activities since alterations to these registry settings could be part of legitimate administrative scripts or maintenance activities. The detection confidence for these kinds of modifications is considered medium level. Understanding and vigilance on these registry items are a proactive step in identifying tactics and techniques like defense evasion, execution, privilege escalation, and persistence that are associated with various sophisticated malware attacks, notably ones similar to Agent Tesla."
    }
  },
  {
    "instruction": "Explain how should I detect the following: scheduled task creations or modification to be run with high privileges on a suspicious schedule type",
    "context": "",
    "output": "In order to detect scheduled task creations or modification to be run with high privileges on a suspicious schedule type, you should focus on monitoring process creation events within Windows systems. Look specifically for the execution or modification of scheduled tasks, flagged by interactions with 'schtasks.exe'. This executable, either directly invoked or referenced by its original filename, is a built-in utility for managing scheduled tasks in Windows. The rule emphasizes the detection of scheduled tasks that are set to trigger under conditions that are less common and might indicate malicious intent, such as at logon, system start, once, or when the system is idle. Additionally, the command lines creating or modifying these tasks often request elevated privileges, explicitly using terms like \"NT AUTHORITY\\SYSTEM,\" \"SYSTEM,\" or demanding the highest possible privileges. It's important, however, to be mindful of potential false positives, as some legitimate software installation processes may employ similar methods for task creation. These should be filtered out based on the context within your environment. This detection strategy is crucial for uncovering tactics and techniques linked with privilege escalation and persistence, as adversaries often schedule tasks with elevated privileges to maintain access or execute malicious payloads under conditions that help avoid detection.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "scheduled task creations or modification to be run with high privileges on a suspicious schedule type",
      "answer": "In order to detect scheduled task creations or modification to be run with high privileges on a suspicious schedule type, you should focus on monitoring process creation events within Windows systems. Look specifically for the execution or modification of scheduled tasks, flagged by interactions with 'schtasks.exe'. This executable, either directly invoked or referenced by its original filename, is a built-in utility for managing scheduled tasks in Windows. The rule emphasizes the detection of scheduled tasks that are set to trigger under conditions that are less common and might indicate malicious intent, such as at logon, system start, once, or when the system is idle. Additionally, the command lines creating or modifying these tasks often request elevated privileges, explicitly using terms like \"NT AUTHORITY\\SYSTEM,\" \"SYSTEM,\" or demanding the highest possible privileges. It's important, however, to be mindful of potential false positives, as some legitimate software installation processes may employ similar methods for task creation. These should be filtered out based on the context within your environment. This detection strategy is crucial for uncovering tactics and techniques linked with privilege escalation and persistence, as adversaries often schedule tasks with elevated privileges to maintain access or execute malicious payloads under conditions that help avoid detection."
    }
  },
  {
    "instruction": "How to detect: Commandlet names and arguments from the Nishang exploitation framework",
    "context": "",
    "output": "In order to detect commandlet names and arguments from the Nishang exploitation framework, you should focus on monitoring PowerShell script activities within Windows environments. Specifically, Script Block Logging must be enabled to capture PowerShell script text execution. The detection revolves around identifying specific strings of text within the PowerShell commandlets that are indicative of the Nishang framework's utilization for malicious purposes.\n\nThe key indicators to watch for include commandlet names and parameters such as 'Add-ConstrainedDelegationBackdoor', 'Copy-VSS', 'Create-MultipleSessions', 'DataToEncode', and various others linked to activities ranging from backdoor insertion, data exfiltration, to credential dumping and executing commands via alternate channels like DNS or HTTP. These activities are part of a broader category of tactics, techniques, and procedures (TTPs) employed by attackers to compromise systems, maintain persistence, escalate privileges, and exfiltrate data.\n\nMonitoring for these specific indicators, along with enabling requisite logging features, is crucial in identifying potential misuse of the Nishang exploitation framework within the network. This approach aids in the early detection of malicious activities, potentially thwarting advanced persistent threats (APTs) or insider threats that utilize such sophisticated techniques for nefarious purposes.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Commandlet names and arguments from the Nishang exploitation framework",
      "answer": "In order to detect commandlet names and arguments from the Nishang exploitation framework, you should focus on monitoring PowerShell script activities within Windows environments. Specifically, Script Block Logging must be enabled to capture PowerShell script text execution. The detection revolves around identifying specific strings of text within the PowerShell commandlets that are indicative of the Nishang framework's utilization for malicious purposes.\n\nThe key indicators to watch for include commandlet names and parameters such as 'Add-ConstrainedDelegationBackdoor', 'Copy-VSS', 'Create-MultipleSessions', 'DataToEncode', and various others linked to activities ranging from backdoor insertion, data exfiltration, to credential dumping and executing commands via alternate channels like DNS or HTTP. These activities are part of a broader category of tactics, techniques, and procedures (TTPs) employed by attackers to compromise systems, maintain persistence, escalate privileges, and exfiltrate data.\n\nMonitoring for these specific indicators, along with enabling requisite logging features, is crucial in identifying potential misuse of the Nishang exploitation framework within the network. This approach aids in the early detection of malicious activities, potentially thwarting advanced persistent threats (APTs) or insider threats that utilize such sophisticated techniques for nefarious purposes."
    }
  },
  {
    "instruction": "How can I detect: stopping of a Windows service",
    "context": "",
    "output": "In order to detect the stopping of a Windows service, you should: Monitor process creation events within the Windows operating system for instances where the executable or Image name ends with '\\sc.exe' or where the OriginalFileName attribute is precisely 'sc.exe'. This monitoring specifically targets detection of commands that include ' stop ' within the CommandLine, indicating an attempt to stop a Windows service. However, it's crucial to apply filtering to exclude known benign instances such as stopping the 'KSCWebConsoleMessageQueue' service associated with Kaspersky Security Center and the 'LGHUBUpdaterService' which relates to the Logitech LGHUB Updater. Additionally, commands executed by users with names containing variations of 'AUTHORI' or 'AUTORI' (covering different language settings) executing these specific stop commands should also be excluded to reduce false positives. Note that this detection emphasizes that the act of stopping services is not inherently suspicious and may have many legitimate reasons, suggesting a low level of alert and an understanding that the context of each event should be carefully considered to differentiate between benign activity and potential threats.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "stopping of a Windows service",
      "answer": "In order to detect the stopping of a Windows service, you should: Monitor process creation events within the Windows operating system for instances where the executable or Image name ends with '\\sc.exe' or where the OriginalFileName attribute is precisely 'sc.exe'. This monitoring specifically targets detection of commands that include ' stop ' within the CommandLine, indicating an attempt to stop a Windows service. However, it's crucial to apply filtering to exclude known benign instances such as stopping the 'KSCWebConsoleMessageQueue' service associated with Kaspersky Security Center and the 'LGHUBUpdaterService' which relates to the Logitech LGHUB Updater. Additionally, commands executed by users with names containing variations of 'AUTHORI' or 'AUTORI' (covering different language settings) executing these specific stop commands should also be excluded to reduce false positives. Note that this detection emphasizes that the act of stopping services is not inherently suspicious and may have many legitimate reasons, suggesting a low level of alert and an understanding that the context of each event should be carefully considered to differentiate between benign activity and potential threats."
    }
  },
  {
    "instruction": "How to detect: Windows program executable started from a suspicious folder",
    "context": "",
    "output": "In order to detect a Windows program executable started from a suspicious folder, you should monitor the creation of processes on Windows systems, specifically looking for the execution of common Windows executables from unexpected or non-standard locations. Pay attention to programs such as `svchost.exe`, `rundll32.exe`, `services.exe`, `powershell.exe` and many others, which are legitimate Windows processes but could be indicative of malicious activity if they are started from directories not typically associated with their genuine paths such as `C:\\Windows\\System32\\`, `C:\\Windows\\SysWOW64\\`, or the WinSxS directory.\n\nThe urgency in identifying these executions stems from the practices of attackers, including known threat groups like the Lazarus Group, who might leverage such executables for malicious purposes. For instance, launching `powershell.exe` from an unusual location could be indicative of a script-based attack or unauthorized administrative actions.\n\nTo accurately distinguish between legitimate and potentially malicious executions, it's crucial to exclude commonly trusted paths where these executables are expected to run from, such as the System32 and SysWOW64 folders. Additionally, specific allowances should be made for legitimate but atypical scenarios, like PowerShell launching from its directory in `C:\\Program Files` or WSL processes started properly under `C:\\Program Files\\WindowsApps`.\n\nIt's essential to document information like the computer name, user account, and the path of the executed image to aid in investigation. Bear in mind that certain rare or unconventional software might generate false positives by running these executables from unusual locations. Thus, maintaining a high alert level while accurately filtering legitimate from suspicious activity is necessary in this detection strategy.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Windows program executable started from a suspicious folder",
      "answer": "In order to detect a Windows program executable started from a suspicious folder, you should monitor the creation of processes on Windows systems, specifically looking for the execution of common Windows executables from unexpected or non-standard locations. Pay attention to programs such as `svchost.exe`, `rundll32.exe`, `services.exe`, `powershell.exe` and many others, which are legitimate Windows processes but could be indicative of malicious activity if they are started from directories not typically associated with their genuine paths such as `C:\\Windows\\System32\\`, `C:\\Windows\\SysWOW64\\`, or the WinSxS directory.\n\nThe urgency in identifying these executions stems from the practices of attackers, including known threat groups like the Lazarus Group, who might leverage such executables for malicious purposes. For instance, launching `powershell.exe` from an unusual location could be indicative of a script-based attack or unauthorized administrative actions.\n\nTo accurately distinguish between legitimate and potentially malicious executions, it's crucial to exclude commonly trusted paths where these executables are expected to run from, such as the System32 and SysWOW64 folders. Additionally, specific allowances should be made for legitimate but atypical scenarios, like PowerShell launching from its directory in `C:\\Program Files` or WSL processes started properly under `C:\\Program Files\\WindowsApps`.\n\nIt's essential to document information like the computer name, user account, and the path of the executed image to aid in investigation. Bear in mind that certain rare or unconventional software might generate false positives by running these executables from unusual locations. Thus, maintaining a high alert level while accurately filtering legitimate from suspicious activity is necessary in this detection strategy."
    }
  },
  {
    "instruction": "Explain how should I detect the following: restoration of files from the defender quarantine",
    "context": "",
    "output": "In order to detect the restoration of files from the defender quarantine, you should monitor Windows Defender (WinDefend) logs for events with the Event ID 1009. This Event ID indicates that the antimalware platform has restored an item from quarantine. It's essential to note that while this activity can often signify a potentially suspicious action, especially if not performed by an authorized administrator, it may also occur as part of legitimate administration activities when a file is determined to be safe and thus restored. Therefore, while this indicator is crucial for identifying potential security incidents, it's also advised to consider the context of the restoration to minimize false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "restoration of files from the defender quarantine",
      "answer": "In order to detect the restoration of files from the defender quarantine, you should monitor Windows Defender (WinDefend) logs for events with the Event ID 1009. This Event ID indicates that the antimalware platform has restored an item from quarantine. It's essential to note that while this activity can often signify a potentially suspicious action, especially if not performed by an authorized administrator, it may also occur as part of legitimate administration activities when a file is determined to be safe and thus restored. Therefore, while this indicator is crucial for identifying potential security incidents, it's also advised to consider the context of the restoration to minimize false positives."
    }
  },
  {
    "instruction": "Explain how should I detect the following: execution of the PoC that can be used to exploit Sysmon CVE-2022-41120",
    "context": "",
    "output": "In order to detect the execution of the PoC that can be used to exploit Sysmon CVE-2022-41120, you should: look for the creation of processes, specifically on Windows systems, that correlate with the execution of a file named 'SysmonEOP.exe' at the end of its path. This particular file name indicates an attempt to exploit the mentioned vulnerability. Additionally, check for processes that match specific hash values: '22F4089EB8ABA31E1BB162C6D9BF72E5' and '5123FA4C4384D431CD0D893EEB49BBEC'. These hash values, referred to as Import Hashes (IMPHASH), uniquely identify the suspicious executable files. The detection mechanism should trigger if either of these conditions is met, indicating a critical level threat. Given the context of exploiting a known vulnerability, false positives are unlikely, suggesting a high confidence in the detection's accuracy when these specific criteria are met.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "execution of the PoC that can be used to exploit Sysmon CVE-2022-41120",
      "answer": "In order to detect the execution of the PoC that can be used to exploit Sysmon CVE-2022-41120, you should: look for the creation of processes, specifically on Windows systems, that correlate with the execution of a file named 'SysmonEOP.exe' at the end of its path. This particular file name indicates an attempt to exploit the mentioned vulnerability. Additionally, check for processes that match specific hash values: '22F4089EB8ABA31E1BB162C6D9BF72E5' and '5123FA4C4384D431CD0D893EEB49BBEC'. These hash values, referred to as Import Hashes (IMPHASH), uniquely identify the suspicious executable files. The detection mechanism should trigger if either of these conditions is met, indicating a critical level threat. Given the context of exploiting a known vulnerability, false positives are unlikely, suggesting a high confidence in the detection's accuracy when these specific criteria are met."
    }
  },
  {
    "instruction": "How can I detect: Windows service to be stopped",
    "context": "",
    "output": "In order to detect a Windows service being stopped, you should focus on monitoring the creation of processes on Windows systems. Specifically, look for instances where the tools 'sc.exe', 'net.exe', or 'net1.exe', and PowerShell or 'pwsh.exe' are used, which are common utilities for service management on Windows. These utilities might be invoked in commands aiming to stop a service, as indicated by the presence of ' stop ' in their command line arguments.\n\nHowever, it's crucial to exclude commands known to be benign, such as stopping the Kaspersky Security Center Web Console Message Queue or the Logitech LGHUB Updater Service, which are legitimate administration activities. Also, consider ignoring commands executed by users with 'AUTHORI' or 'AUTORI' in their user names, as this could cover commands issued in different language settings by authorized personnel.\n\nThe detections should be based on the presence of the specified filenames or command-line patterns that indicate the attempt to stop a service, excluding the known false positives such as service management during software upgrades or removals. Pay attention to the records with fields like ComputerName, User, and CommandLine for context around the detected activity.\n\nThis approach aligns with strategies for identifying potentially malicious activity related to service stopping, which might be indicative of an adversary\u2019s attempt to disable security features or other critical services as part of a broader attack on a Windows environment.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Windows service to be stopped",
      "answer": "In order to detect a Windows service being stopped, you should focus on monitoring the creation of processes on Windows systems. Specifically, look for instances where the tools 'sc.exe', 'net.exe', or 'net1.exe', and PowerShell or 'pwsh.exe' are used, which are common utilities for service management on Windows. These utilities might be invoked in commands aiming to stop a service, as indicated by the presence of ' stop ' in their command line arguments.\n\nHowever, it's crucial to exclude commands known to be benign, such as stopping the Kaspersky Security Center Web Console Message Queue or the Logitech LGHUB Updater Service, which are legitimate administration activities. Also, consider ignoring commands executed by users with 'AUTHORI' or 'AUTORI' in their user names, as this could cover commands issued in different language settings by authorized personnel.\n\nThe detections should be based on the presence of the specified filenames or command-line patterns that indicate the attempt to stop a service, excluding the known false positives such as service management during software upgrades or removals. Pay attention to the records with fields like ComputerName, User, and CommandLine for context around the detected activity.\n\nThis approach aligns with strategies for identifying potentially malicious activity related to service stopping, which might be indicative of an adversary\u2019s attempt to disable security features or other critical services as part of a broader attack on a Windows environment."
    }
  },
  {
    "instruction": "How to detect: executing python with keywords related to network activity that could indicate a potential reverse shell",
    "context": "",
    "output": "In order to detect executing python with keywords related to network activity that could indicate a potential reverse shell, you should: Identify and monitor the creation of processes on Linux systems, specifically focusing on those initiated by Python. Look for command lines that contain a combination of '-c', indicating execution of Python code; 'import', suggesting the inclusion of additional Python libraries; 'pty', hinting at pseudo-terminal operations; 'spawn(', which could be used to start another process; and '.connect', a method often associated with making network connections. These particular elements together raise suspicions of a reverse shell attempt, characterized by external control over a system shell. The detection criteria are set to a high level of importance due to the potential severity of this activity.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "executing python with keywords related to network activity that could indicate a potential reverse shell",
      "answer": "In order to detect executing python with keywords related to network activity that could indicate a potential reverse shell, you should: Identify and monitor the creation of processes on Linux systems, specifically focusing on those initiated by Python. Look for command lines that contain a combination of '-c', indicating execution of Python code; 'import', suggesting the inclusion of additional Python libraries; 'pty', hinting at pseudo-terminal operations; 'spawn(', which could be used to start another process; and '.connect', a method often associated with making network connections. These particular elements together raise suspicions of a reverse shell attempt, characterized by external control over a system shell. The detection criteria are set to a high level of importance due to the potential severity of this activity."
    }
  },
  {
    "instruction": "How can I detect: enumeration of other remote systems.",
    "context": "",
    "output": "In order to detect the enumeration of other remote systems, you should monitor process creation logs on macOS systems for specific patterns that suggest network exploration or scanning activities. Look for instances where the process name ends with '/arp' and the command line includes '-a', indicating the use of the Address Resolution Protocol (ARP) to find the MAC address associated with IP addresses on the local network. Additionally, watch for processes ending with '/ping' coupled with command line arguments that target common private IP address ranges, such as 10.x.x.x, 192.168.x.x, and various segments of the 172.16.x.x to 172.31.x.x range, as well as the localhost address (127.x.x.x) and the link-local addresses (169.254.x.x). These patterns are characteristic of attempts to discover active machines on a network by sending them ICMP echo requests. Being aware of these activities is crucial because, while they can be part of legitimate administration tasks, they may also indicate reconnaissance efforts by an attacker aiming to map out network resources as a preliminary step before carrying out further malicious actions. Therefore, any alerts generated from these detection rules should be treated as informational and investigated to ascertain whether they are benign in nature or indicative of a cybersecurity threat.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "enumeration of other remote systems.",
      "answer": "In order to detect the enumeration of other remote systems, you should monitor process creation logs on macOS systems for specific patterns that suggest network exploration or scanning activities. Look for instances where the process name ends with '/arp' and the command line includes '-a', indicating the use of the Address Resolution Protocol (ARP) to find the MAC address associated with IP addresses on the local network. Additionally, watch for processes ending with '/ping' coupled with command line arguments that target common private IP address ranges, such as 10.x.x.x, 192.168.x.x, and various segments of the 172.16.x.x to 172.31.x.x range, as well as the localhost address (127.x.x.x) and the link-local addresses (169.254.x.x). These patterns are characteristic of attempts to discover active machines on a network by sending them ICMP echo requests. Being aware of these activities is crucial because, while they can be part of legitimate administration tasks, they may also indicate reconnaissance efforts by an attacker aiming to map out network resources as a preliminary step before carrying out further malicious actions. Therefore, any alerts generated from these detection rules should be treated as informational and investigated to ascertain whether they are benign in nature or indicative of a cybersecurity threat."
    }
  },
  {
    "instruction": "How to detect: creation of a schtask via PowerSploit or Empire Default Configuration.",
    "context": "",
    "output": "In order to detect the creation of a schtask via PowerSploit or Empire Default Configuration, you should monitor for specific actions within Windows system process creation logs. Look for instances where a process that is a child of either 'powershell.exe' or 'pwsh.exe' initiates 'schtasks.exe'. Specifically, check if the command line used to execute 'schtasks.exe' includes creation flags such as '/Create', along with references to 'powershell.exe -NonI' and '/TN Updater /TR'. Additionally, pay attention to schtasks being configured to trigger on logon, daily, when the system is idle, or hourly, evidenced by '/SC ONLOGON', '/SC DAILY /ST', '/SC ONIDLE', or '/SC HOURLY' in the command line. These specific patterns of command line activity are highly indicative of malicious activity, particularly related to the use of known hacking frameworks such as PowerSploit or Empire. The detection of such activity should be treated with high urgency due to the low likelihood of these being false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "creation of a schtask via PowerSploit or Empire Default Configuration.",
      "answer": "In order to detect the creation of a schtask via PowerSploit or Empire Default Configuration, you should monitor for specific actions within Windows system process creation logs. Look for instances where a process that is a child of either 'powershell.exe' or 'pwsh.exe' initiates 'schtasks.exe'. Specifically, check if the command line used to execute 'schtasks.exe' includes creation flags such as '/Create', along with references to 'powershell.exe -NonI' and '/TN Updater /TR'. Additionally, pay attention to schtasks being configured to trigger on logon, daily, when the system is idle, or hourly, evidenced by '/SC ONLOGON', '/SC DAILY /ST', '/SC ONIDLE', or '/SC HOURLY' in the command line. These specific patterns of command line activity are highly indicative of malicious activity, particularly related to the use of known hacking frameworks such as PowerSploit or Empire. The detection of such activity should be treated with high urgency due to the low likelihood of these being false positives."
    }
  },
  {
    "instruction": "How to detect: Detect when authentications to important application(s) only required single-factor authentication",
    "context": "",
    "output": "In order to detect when authentications to important application(s) only required single-factor authentication, you should focus on monitoring sign-in logs within the Azure platform. Look specifically for successful authentication logs (`Status: 'Success'`) associated with the application(s) in question, which can be identified using their unique Application ID (`AppId: 'Insert Application ID use OR for multiple'`). The key indicator to watch for is any authentication attempt that was verified using only single-factor authentication (`AuthenticationRequirement: 'singleFactorAuthentication'`). It's vital to separate these events for review, understanding that any flagged authentication records might sometimes be legitimate, especially if such access procedures were previously approved by a system administrator. The severity of these detections is considered medium, indicating they warrant attention but may not always represent a critical security issue outright. This monitoring strategy is aimed at enhancing security postures by ensuring that critical applications enforce stronger authentication methods beyond just single-factor authentication.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Detect when authentications to important application(s) only required single-factor authentication",
      "answer": "In order to detect when authentications to important application(s) only required single-factor authentication, you should focus on monitoring sign-in logs within the Azure platform. Look specifically for successful authentication logs (`Status: 'Success'`) associated with the application(s) in question, which can be identified using their unique Application ID (`AppId: 'Insert Application ID use OR for multiple'`). The key indicator to watch for is any authentication attempt that was verified using only single-factor authentication (`AuthenticationRequirement: 'singleFactorAuthentication'`). It's vital to separate these events for review, understanding that any flagged authentication records might sometimes be legitimate, especially if such access procedures were previously approved by a system administrator. The severity of these detections is considered medium, indicating they warrant attention but may not always represent a critical security issue outright. This monitoring strategy is aimed at enhancing security postures by ensuring that critical applications enforce stronger authentication methods beyond just single-factor authentication."
    }
  },
  {
    "instruction": "How to detect: an attempt to execute code or create service on remote host via winrm.vbs.",
    "context": "",
    "output": "In order to detect an attempt to execute code or create service on a remote host via winrm.vbs, you should focus on monitoring process creation events within Windows environments. Specifically, be on the lookout for instances where the 'cscript.exe' process is initiated, as indicated by either the image path ending with '\\cscript.exe' or the original file name being 'cscript.exe'. Furthermore, pay close attention to the command line arguments used with these process executions. The presence of 'winrm', 'invoke Create wmicimv2/Win32_', and '-r:http' within the same command line suggests an attempt to leverage Windows Remote Management (WinRM) for potentially malicious remote code execution or service creation. The necessity to match all specified command line conditions underlines the sophistication of this detection method, aiming at reducing the likelihood of false positives, although some unknown cases may still occur. This analysis technique is of medium severity and aligns with the understanding of MITRE ATT&CK\u2019s tactics and techniques, specifically focusing on execution and command and control aspects of cyber threats.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "an attempt to execute code or create service on remote host via winrm.vbs.",
      "answer": "In order to detect an attempt to execute code or create service on a remote host via winrm.vbs, you should focus on monitoring process creation events within Windows environments. Specifically, be on the lookout for instances where the 'cscript.exe' process is initiated, as indicated by either the image path ending with '\\cscript.exe' or the original file name being 'cscript.exe'. Furthermore, pay close attention to the command line arguments used with these process executions. The presence of 'winrm', 'invoke Create wmicimv2/Win32_', and '-r:http' within the same command line suggests an attempt to leverage Windows Remote Management (WinRM) for potentially malicious remote code execution or service creation. The necessity to match all specified command line conditions underlines the sophistication of this detection method, aiming at reducing the likelihood of false positives, although some unknown cases may still occur. This analysis technique is of medium severity and aligns with the understanding of MITRE ATT&CK\u2019s tactics and techniques, specifically focusing on execution and command and control aspects of cyber threats."
    }
  },
  {
    "instruction": "How can I detect: registration of the security event source VSSAudit. It would usually trigger when volume shadow copy operations happen.",
    "context": "",
    "output": "In order to detect the registration of the security event source VSSAudit, which would usually trigger when volume shadow copy operations happen, you should monitor Windows security event logs for specific events that signal the potential use of the Volume Shadow Copy Service (VSS) for possibly malicious purposes. Focus on events with the AuditSourceName set to 'VSSAudit' and specifically look out for occurrences of Event IDs 4904 and 4905. These events may indicate that the Volume Shadow Copy has been either created or deleted, actions that can be common in routine backup operations but might also be leveraged by attackers to evade defense mechanisms or to access locked files and data. It's important, however, to consider that not all detections are indicative of malicious activity; legitimate uses of the Volume Shadow Copy Service exist, often executed by \"C:\\Windows\\System32\\VSSVC.exe\" for backup purposes. As such, any detection at this level should be deemed informational and investigated to determine if it aligns with known user or system behavior, rather than being immediately classified as a threat.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "registration of the security event source VSSAudit. It would usually trigger when volume shadow copy operations happen.",
      "answer": "In order to detect the registration of the security event source VSSAudit, which would usually trigger when volume shadow copy operations happen, you should monitor Windows security event logs for specific events that signal the potential use of the Volume Shadow Copy Service (VSS) for possibly malicious purposes. Focus on events with the AuditSourceName set to 'VSSAudit' and specifically look out for occurrences of Event IDs 4904 and 4905. These events may indicate that the Volume Shadow Copy has been either created or deleted, actions that can be common in routine backup operations but might also be leveraged by attackers to evade defense mechanisms or to access locked files and data. It's important, however, to consider that not all detections are indicative of malicious activity; legitimate uses of the Volume Shadow Copy Service exist, often executed by \"C:\\Windows\\System32\\VSSVC.exe\" for backup purposes. As such, any detection at this level should be deemed informational and investigated to determine if it aligns with known user or system behavior, rather than being immediately classified as a threat."
    }
  },
  {
    "instruction": "Explain how should I detect the following: Trickbot malware process tree pattern in which \"rundll32.exe\" is a parent of \"wermgr.exe\"",
    "context": "",
    "output": "In order to detect Trickbot malware process tree pattern in which \"rundll32.exe\" is a parent of \"wermgr.exe\", you should: monitor for the creation of processes on Windows systems where a process named 'wermgr.exe' is initiated by a parent process named 'rundll32.exe'. Specifically, this detection focuses on instances where 'rundll32.exe' uses the command line including 'DllRegisterServer'. This pattern of process creation is indicative of malicious activity related to Trickbot malware. It is important to pay close attention to these process relationships and command line arguments to successfully identify the presence of Trickbot.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Trickbot malware process tree pattern in which \"rundll32.exe\" is a parent of \"wermgr.exe\"",
      "answer": "In order to detect Trickbot malware process tree pattern in which \"rundll32.exe\" is a parent of \"wermgr.exe\", you should: monitor for the creation of processes on Windows systems where a process named 'wermgr.exe' is initiated by a parent process named 'rundll32.exe'. Specifically, this detection focuses on instances where 'rundll32.exe' uses the command line including 'DllRegisterServer'. This pattern of process creation is indicative of malicious activity related to Trickbot malware. It is important to pay close attention to these process relationships and command line arguments to successfully identify the presence of Trickbot."
    }
  },
  {
    "instruction": "Can you explain how to detect: Microsoft Cloud App Security reported a risky sign-in attempt due to a login associated with an impossible travel.",
    "context": "",
    "output": "Certainly!\n\nIn order to detect when a Microsoft Cloud App Security reported a risky sign-in attempt due to a login associated with an impossible travel, you should monitor logs generated by the threat management system for Microsoft 365 services. Specifically, focus on logs coming from the Security Compliance Center. The key event to look out for is labeled as \"Impossible travel activity\" and must have a status indicating success. This detection aims to identify when a user's credentials have been used to attempt sign-ins from geographical locations that are physically impossible to travel between within the time frame of the sign-in attempts. It is important to note that while this is a medium-level security alert, there may be unknown scenarios that could trigger false positives.",
    "category": "SigmaFlan",
    "instruction_type": "rule_goal_to_description",
    "parsed_raw_data": {
      "question": "Microsoft Cloud App Security reported a risky sign-in attempt due to a login associated with an impossible travel.",
      "answer": "In order to detect when a Microsoft Cloud App Security reported a risky sign-in attempt due to a login associated with an impossible travel, you should monitor logs generated by the threat management system for Microsoft 365 services. Specifically, focus on logs coming from the Security Compliance Center. The key event to look out for is labeled as \"Impossible travel activity\" and must have a status indicating success. This detection aims to identify when a user's credentials have been used to attempt sign-ins from geographical locations that are physically impossible to travel between within the time frame of the sign-in attempts. It is important to note that while this is a medium-level security alert, there may be unknown scenarios that could trigger false positives."
    }
  }
]